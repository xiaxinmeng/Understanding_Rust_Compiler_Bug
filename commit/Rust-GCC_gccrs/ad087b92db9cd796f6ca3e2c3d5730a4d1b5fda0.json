{"sha": "ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwODdiOTJkYjljZDc5NmY2Y2EzZTJjM2Q1NzMwYTRkMWI1ZmRhMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-18T06:15:38Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-04-18T06:15:38Z"}, "message": "dbxout.c (dbxout_init): If DBX_OUTPUT_GCC_MARKER is defined, use it instead of blindly generating a .stabs.\n\n\t* dbxout.c (dbxout_init): If DBX_OUTPUT_GCC_MARKER is defined,\n\tuse it instead of blindly generating a .stabs.\n\t* xcoffout.h: Define DBX_OUTPUT_GCC_MARKER so we put the type\n\tin the right place.\n\t* xcoffout.c: Don't bother defining default for N_CATCH.\n\t(UNKNOWN_STAB): Use internal_error.\n\t(stab_to_sclass): Remove now-unnecessary aborts.\n\tRemove #if 0'ed case N_BROWS.  Add #ifdef N_OPT block.\n\nFrom-SVN: r41404", "tree": {"sha": "890e674f479298825b48ff5b827cd8d6c288f352", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/890e674f479298825b48ff5b827cd8d6c288f352"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/comments", "author": null, "committer": null, "parents": [{"sha": "599d54fd8e0f0cdd0332af0b9c02825f7c0a1599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599d54fd8e0f0cdd0332af0b9c02825f7c0a1599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599d54fd8e0f0cdd0332af0b9c02825f7c0a1599"}], "stats": {"total": 103, "additions": 48, "deletions": 55}, "files": [{"sha": "452da430fe605c2e45ed096a80f33a0326b6000b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "patch": "@@ -1,3 +1,14 @@\n+2001-04-17  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* dbxout.c (dbxout_init): If DBX_OUTPUT_GCC_MARKER is defined,\n+\tuse it instead of blindly generating a .stabs.\n+\t* xcoffout.h: Define DBX_OUTPUT_GCC_MARKER so we put the type\n+\tin the right place.\n+\t* xcoffout.c: Don't bother defining default for N_CATCH.\n+\t(UNKNOWN_STAB): Use internal_error.\n+\t(stab_to_sclass): Remove now-unnecessary aborts.\n+\tRemove #if 0'ed case N_BROWS.  Add #ifdef N_OPT block.\n+\n Tue Apr 17 21:41:11 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* jump.c (mark_all_labels): Canonicalize the tail recursion\n@@ -92,7 +103,7 @@ Mon Apr 16 08:03:48 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (reload_outdi): Operand 0 must be a non hard register.\n \n-\t* pa.c (secondary_reload_class): SAR<->FP copies require a \n+\t* pa.c (secondary_reload_class): SAR<->FP copies require a\n \tsecondary register.\n \n \t* install.texi (mips-mips-bsd): Update list of functions\n@@ -149,8 +160,8 @@ Fri Apr 13 21:40:28 2001  Loren J. Rittle  <ljrittle@acm.org>\n \n 2001-04-13  Alan Modra  <alan@linuxcare.com.au>\n \n-        * pa.h (GO_IF_LEGITIMATE_ADDRESS): Disallow PIC LO_SUM\n-        fp mode addresses.\n+\t* pa.h (GO_IF_LEGITIMATE_ADDRESS): Disallow PIC LO_SUM\n+\tfp mode addresses.\n \n 2001-04-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n@@ -500,12 +511,12 @@ Thu Apr 12 18:13:37 2001  Rodney Brown  <RodneyBrown@mynd.com>\n \teliminate_constant_term, expand_complex_abs, find_single_use,\n \tmake_tree, init_expr_once, init_optabs, supports_one_only):\n \tLikewise.\n-\t\n+\n \t* tree.h (exact_log2_wide, floor_log2_wide, expand_null_return,\n \trest_of_type_compilation, emit_queue, do_pending_stack_adjust,\n \texpand_assignment, store_expr, emit_line_note_after,\n \temit_line_note_force, split_specs_attrs, label_rtx): Likewise.\n-\t\n+\n \t* toplev.h (exact_log2_wide, floor_log2_wide): Add prototype.\n \n \t* sparc-protos.h: Delete redundant prototypes.\n@@ -558,15 +569,15 @@ Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-04-10  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* function.c (purge_single_hard_subreg_set): Only check REGNO if \n+\t* function.c (purge_single_hard_subreg_set): Only check REGNO if\n \tthe subreg was a hard register. Pseudos are left as subregs.\n \n 2001-04-29  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* Makefile.in (LIB2FUNCS_STATIC_EXTRA): New macro.\n \t(LIB2ADD_ST): New macro, pass it to mklibgcc.\n \t* mklibgcc.in (libgcc2_st_objs): New variable, set it from LIB2ADD_ST.\n-        (libgcc_st_objs): New, set from libgcc2_st_objs. Use it for libgcc.a.\n+\t(libgcc_st_objs): New, set from libgcc2_st_objs. Use it for libgcc.a.\n \t* config/rs6000/t-ppccomm (LIB2FUNCS_STATIC_EXTRA): New macro.\n \n 2001-04-09  Bo Thorsen  <bo@suse.co.uk>\n@@ -575,7 +586,7 @@ Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-04-09  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* output.h (set_block_num): Missed it earlier, remove deprecated \n+\t* output.h (set_block_num): Missed it earlier, remove deprecated\n \tprototype.\n \n 2001-04-09  Andrew MacLeod  <amacleod@redhat.com>\n@@ -585,29 +596,29 @@ Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(oprs_not_set_p): Pass basic_blocks instead of ints as parameters.\n \t(handle_rd_kill_set): Change bb parameter from int to basic_block.\n \t(compute_kill_rd): Pass basic_blocks instead of ints as parameters.\n-\t(expr_killed_p): Change bb parameter from int to basic_block, pass \n+\t(expr_killed_p): Change bb parameter from int to basic_block, pass\n \tbasic_blocks instead of ints as parameters.\n \t(compute_ae_kill): Pass basic_blocks instead of ints as parameters.\n-\t(expr_reaches_here_p_work, expr_reaches_here_p): Change bb parameter \n+\t(expr_reaches_here_p_work, expr_reaches_here_p): Change bb parameter\n \tfrom int to basic_block, pass basic_blocks instead of ints as parms.\n-\t(pre_expr_reaches_here_p_work, pre_expr_reaches_here_p): Change bb \n+\t(pre_expr_reaches_here_p_work, pre_expr_reaches_here_p): Change bb\n \tparameter from int to basic_block, pass basic_blocks instead of ints.\n \t(process_insert_insn): Pass basic_blocks instead of ints as parameters.\n-\t(insert_insn_end_bb): Change bb parameter from int to basic_block, \n+\t(insert_insn_end_bb): Change bb parameter from int to basic_block,\n \tpass basic_blocks instead of ints.\n-\t(pre_edge_insert, pre_insert_copy_insn, pre_insert_copies): Pass \n+\t(pre_edge_insert, pre_insert_copy_insn, pre_insert_copies): Pass\n \tbasic_blocks instead of ints as parameters.\n \t(pre_delete): Pass basic_blocks instead of ints as parameters.\n-\t(hoist_expr_reaches_here_p): Change bb parameter from int to \n+\t(hoist_expr_reaches_here_p): Change bb parameter from int to\n \tbasic_block, pass basic_blocks instead of ints.\n \t(hoist_code): Pass basic_blocks instead of ints as parameters.\n-\t(reg_set_info, store_ops_ok, store_killed_after, store_killed_before): \n+\t(reg_set_info, store_ops_ok, store_killed_after, store_killed_before):\n \tChange bb parameter from int to basic_block.\n \t(build_store_vectors): Pass basic_blocks instead of ints as parameters.\n-\t(insert_insn_start_bb): Change bb parameter from int to basic_block, \n+\t(insert_insn_start_bb): Change bb parameter from int to basic_block,\n \tpass basic_blocks instead of ints.\n \t(insert_store): Pass basic_blocks instead of ints as parameters.\n-\t(replace_store_insn, delete_store): Change bb parameter from int to \n+\t(replace_store_insn, delete_store): Change bb parameter from int to\n \tbasic_block, pass basic_blocks instead of ints.\n \t(store_motion): Pass basic_blocks instead of ints as parameters.\n \n@@ -618,7 +629,7 @@ Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* flow.c (set_block_num): Remove obsolete function.\n \t(set_block_for_new_insns): Set BB for single or multiple insns.\n \t* gcse.c (handle_avail_expr): Use set_block_for_new_insns.\n-\t(process_insn_end_bb): Use set_block_for_new_insns or \n+\t(process_insn_end_bb): Use set_block_for_new_insns or\n \tset_block_for_insn instead of set_block_num.\n \t(pre_insert_copy_insn): Use set_block_for_new_insns.\n \t(update_ld_motion_stores): Use set_block_for_new_insns.\n@@ -634,13 +645,13 @@ Tue Apr 10 17:45:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* flags.h (flag_gcse_lm, flag_gcse_sm): New optimization flags.\n \t* gcse.c (struct ls_expr): Add load/store expressions structure.\n \t(modify_mem_list, canon_modify_mem_list): New variable.\n-\t(gcse_main): Initialize & finalize alias analysis. Use enhanced \n+\t(gcse_main): Initialize & finalize alias analysis. Use enhanced\n \tload motion and store motion if requested.\n \t(alloc_gcse_mem): Allocate space for modify_mem_list array.\n \t(free_gcse_mem): Free the modify_mem_list array.\n \t(oprs_unchanged_p): Use load_killed_in_block_p.\n \t(gcse_mems_conflict_p, gcse_mem_operand): New variables.\n-\t(mems_conflict_for_gcse_p): New function.  Don't kill loads \n+\t(mems_conflict_for_gcse_p): New function.  Don't kill loads\n \twith stores to themselves if its in the load/store expression list.\n \t(load_killed_in_block_p): New function.\n \t(canon_list_insert): New Function."}, {"sha": "31c859676e9beae336be5df6df57a07a761ab660", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "patch": "@@ -428,9 +428,13 @@ dbxout_init (asm_file, input_file_name, syms)\n   ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"Ltext\", 0);\n #endif /* no DBX_OUTPUT_MAIN_SOURCE_FILENAME */\n \n+#ifdef DBX_OUTPUT_GCC_MARKER\n+  DBX_OUTPUT_GCC_MARKER (asmfile);\n+#else\n   /* Emit an N_OPT stab to indicate that this file was compiled by GCC.  */\n   fprintf (asmfile, \"%s\\\"%s\\\",%d,0,0,0\\n\",\n \t   ASM_STABS_OP, STABS_GCC_MARKER, N_OPT);\n+#endif\n \n   lastfile = input_file_name;\n "}, {"sha": "ea0a5b7ced0baa65ad299f346c84a78656765c3e", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "patch": "@@ -45,11 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"gstab.h\"\n #else\n #include <stab.h>\n-\n-/* This is a GNU extension we need to reference in this file.  */\n-#ifndef N_CATCH\n-#define N_CATCH 0x54\n-#endif\n #endif\n \n /* Line number of beginning of current function, minus one.\n@@ -178,10 +173,7 @@ xcoff_output_standard_types (syms)\n /* Print an error message for unrecognized stab codes.  */\n \n #define UNKNOWN_STAB(STR)\t\\\n-   do { \\\n-     error (\"Unknown stab %s: : 0x%x\\n\", STR, stab);\t\\\n-     fflush (stderr);\t\\\n-   } while (0)\n+  internal_error (\"No sclass for %s stab (0x%x)\\n\", STR, stab)\n \n /* Conversion routine from BSD stabs to AIX storage classes.  */\n \n@@ -196,7 +188,6 @@ stab_to_sclass (stab)\n \n     case N_FNAME:\n       UNKNOWN_STAB (\"N_FNAME\");\n-      abort ();\n \n     case N_FUN:\n       return C_FUN;\n@@ -208,15 +199,13 @@ stab_to_sclass (stab)\n #ifdef N_MAIN\n     case N_MAIN:\n       UNKNOWN_STAB (\"N_MAIN\");\n-      abort ();\n #endif\n \n     case N_RSYM:\n       return C_RSYM;\n \n     case N_SSYM:\n       UNKNOWN_STAB (\"N_SSYM\");\n-      abort ();\n \n     case N_RPSYM:\n       return C_RPSYM;\n@@ -232,59 +221,43 @@ stab_to_sclass (stab)\n \n     case N_SO:\n       UNKNOWN_STAB (\"N_SO\");\n-      abort ();\n \n     case N_SOL:\n       UNKNOWN_STAB (\"N_SOL\");\n-      abort ();\n \n     case N_SLINE:\n       UNKNOWN_STAB (\"N_SLINE\");\n-      abort ();\n \n #ifdef N_DSLINE\n     case N_DSLINE:\n       UNKNOWN_STAB (\"N_DSLINE\");\n-      abort ();\n #endif\n \n #ifdef N_BSLINE\n     case N_BSLINE:\n       UNKNOWN_STAB (\"N_BSLINE\");\n-      abort ();\n-#endif\n-#if 0\n-      /* This has the same value as N_BSLINE.  */\n-    case N_BROWS:\n-      UNKNOWN_STAB (\"N_BROWS\");\n-      abort ();\n #endif\n \n #ifdef N_BINCL\n     case N_BINCL:\n       UNKNOWN_STAB (\"N_BINCL\");\n-      abort ();\n #endif\n \n #ifdef N_EINCL\n     case N_EINCL:\n       UNKNOWN_STAB (\"N_EINCL\");\n-      abort ();\n #endif\n \n #ifdef N_EXCL\n     case N_EXCL:\n       UNKNOWN_STAB (\"N_EXCL\");\n-      abort ();\n #endif\n \n     case N_LBRAC:\n       UNKNOWN_STAB (\"N_LBRAC\");\n-      abort ();\n \n     case N_RBRAC:\n       UNKNOWN_STAB (\"N_RBRAC\");\n-      abort ();\n \n     case N_BCOMM:\n       return C_BCOMM;\n@@ -295,31 +268,32 @@ stab_to_sclass (stab)\n \n     case N_LENG:\n       UNKNOWN_STAB (\"N_LENG\");\n-      abort ();\n \n     case N_PC:\n       UNKNOWN_STAB (\"N_PC\");\n-      abort ();\n \n #ifdef N_M2C\n     case N_M2C:\n       UNKNOWN_STAB (\"N_M2C\");\n-      abort ();\n #endif\n \n #ifdef N_SCOPE\n     case N_SCOPE:\n       UNKNOWN_STAB (\"N_SCOPE\");\n-      abort ();\n #endif\n \n+#ifdef N_CATCH\n     case N_CATCH:\n       UNKNOWN_STAB (\"N_CATCH\");\n-      abort ();\n+#endif\n+\n+#ifdef N_OPT\n+    case N_OPT:\n+      UNKNOWN_STAB (\"N_OPT\");\n+#endif\n \n     default:\n-      UNKNOWN_STAB (\"default\");\n-      abort ();\n+      UNKNOWN_STAB (\"?\");\n     }\n }\n \f"}, {"sha": "e1c3e89298ae25099b02fe64f184d2fca4ee8975", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=ad087b92db9cd796f6ca3e2c3d5730a4d1b5fda0", "patch": "@@ -172,6 +172,10 @@ extern const char *xcoff_lastfile;\n     }\t\t\t\t\t\t\t\\\n }\n \n+/* .stabx has the type in a different place.  */\n+#define DBX_OUTPUT_GCC_MARKER(FILE) \\\n+  fprintf ((FILE), \"%s\\\"%s\\\",0,%d,0\\n\", ASM_STABS_OP, STABS_GCC_MARKER, N_OPT)\n+\n /* Do not break .stabs pseudos into continuations.  */\n #define DBX_CONTIN_LENGTH 0\n "}]}