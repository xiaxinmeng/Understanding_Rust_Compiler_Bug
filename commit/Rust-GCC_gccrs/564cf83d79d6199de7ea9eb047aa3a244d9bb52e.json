{"sha": "564cf83d79d6199de7ea9eb047aa3a244d9bb52e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY0Y2Y4M2Q3OWQ2MTk5ZGU3ZWE5ZWIwNDdhYTNhMjQ0ZDliYjUyZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2017-05-08T16:18:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-05-08T16:18:49Z"}, "message": "[AArch64] Tighten move constraints for symbolic operands\n\nThe movsi and movdi constraints allowed the source to be any\nabsolute symbolic expression (\"S\").  That's OK for operands that\nhave already been vetted by the aarch64_mov_operand predicate but\ncauses problems if the register allocator substitutes an equivalence\n(the usual \"the constraints can't accept more than the predicates\"\nrestriction).\n\nAlthough all other uses of \"S\" in the backend are redundant and could\nin principle be removed, \"S\" itself is a publicly-documented constraint\nand so we'd have to keep its definition.  This patch therefore adds a\nnew \"Usa\" constraint for legitimate absolute address operands.\n\n2017-05-08  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/constraints.md (Usa): New constraint.\n\t* config/aarch64/aarch64.md (*movsi_aarch64, *movdi_aarch64): Use it.\n\nFrom-SVN: r247746", "tree": {"sha": "c00db1079680faf7d686217a0571e3bf935577cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c00db1079680faf7d686217a0571e3bf935577cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/564cf83d79d6199de7ea9eb047aa3a244d9bb52e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564cf83d79d6199de7ea9eb047aa3a244d9bb52e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564cf83d79d6199de7ea9eb047aa3a244d9bb52e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564cf83d79d6199de7ea9eb047aa3a244d9bb52e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06aa5490059800ce9253abecf6135478e96cc28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06aa5490059800ce9253abecf6135478e96cc28c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06aa5490059800ce9253abecf6135478e96cc28c"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "58693c5a4760b9c1a3236f4d9f5de31ba667c86d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564cf83d79d6199de7ea9eb047aa3a244d9bb52e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564cf83d79d6199de7ea9eb047aa3a244d9bb52e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=564cf83d79d6199de7ea9eb047aa3a244d9bb52e", "patch": "@@ -1,3 +1,8 @@\n+2017-05-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/constraints.md (Usa): New constraint.\n+\t* config/aarch64/aarch64.md (*movsi_aarch64, *movdi_aarch64): Use it.\n+\n 2017-05-08  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config.gcc (arm*-*-*): Set TM_MULTILIB_CONFIG from"}, {"sha": "7cc32dd037c8f41a2f5631139121f51cd56f2d99", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564cf83d79d6199de7ea9eb047aa3a244d9bb52e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564cf83d79d6199de7ea9eb047aa3a244d9bb52e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=564cf83d79d6199de7ea9eb047aa3a244d9bb52e", "patch": "@@ -1031,7 +1031,7 @@\n \n (define_insn_and_split \"*movsi_aarch64\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r  ,*w,r,*w\")\n-\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,m, m,rZ,*w,S,Ush,rZ,w,*w\"))]\n+\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,m, m,rZ,*w,Usa,Ush,rZ,w,*w\"))]\n   \"(register_operand (operands[0], SImode)\n     || aarch64_reg_or_zero (operands[1], SImode))\"\n   \"@\n@@ -1063,7 +1063,7 @@\n \n (define_insn_and_split \"*movdi_aarch64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r,  *w,r,*w,w\")\n-\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,n,m, m,rZ,*w,S,Ush,rZ,w,*w,Dd\"))]\n+\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,n,m, m,rZ,*w,Usa,Ush,rZ,w,*w,Dd\"))]\n   \"(register_operand (operands[0], DImode)\n     || aarch64_reg_or_zero (operands[1], DImode))\"\n   \"@"}, {"sha": "b43f08b7bbd1f31d9ff3842cebaccd4e953ab9dc", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564cf83d79d6199de7ea9eb047aa3a244d9bb52e/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564cf83d79d6199de7ea9eb047aa3a244d9bb52e/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=564cf83d79d6199de7ea9eb047aa3a244d9bb52e", "patch": "@@ -98,6 +98,14 @@\n   (and (match_code \"high\")\n        (match_test \"aarch64_valid_symref (XEXP (op, 0), GET_MODE (XEXP (op, 0)))\")))\n \n+(define_constraint \"Usa\"\n+  \"@internal\n+   A constraint that matches an absolute symbolic address that can be\n+   loaded by a single ADR.\"\n+  (and (match_code \"const,symbol_ref,label_ref\")\n+       (match_test \"aarch64_symbolic_address_p (op)\")\n+       (match_test \"aarch64_mov_operand_p (op, GET_MODE (op))\")))\n+\n (define_constraint \"Uss\"\n   \"@internal\n   A constraint that matches an immediate shift constant in SImode.\""}]}