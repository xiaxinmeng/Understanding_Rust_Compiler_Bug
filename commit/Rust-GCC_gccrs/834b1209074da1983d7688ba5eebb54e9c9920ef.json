{"sha": "834b1209074da1983d7688ba5eebb54e9c9920ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM0YjEyMDkwNzRkYTE5ODNkNzY4OGJhNWVlYmI1NGU5Yzk5MjBlZg==", "commit": {"author": {"name": "Fernando Nasser", "email": "fnasser@redhat.com", "date": "2003-12-11T13:50:51Z"}, "committer": {"name": "Fernando Nasser", "email": "fnasser@gcc.gnu.org", "date": "2003-12-11T13:50:51Z"}, "message": "gnu_java_awt_peer_gtk_GtkEvents.c (awt_event_handler): Most coded moved to pre_event_handler, with the modifications mentioned below.\n\n2003-12-08  Fernando Nasser  <fnasser@redhat.com>\n\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c (awt_event_handler):\n        Most coded moved to pre_event_handler, with the modifications\n        mentioned below.\n        (pre_event_handler): New function.  Called on the Gtk \"event\" signal.\n        Do not retrieve the jobject from the window property as it is already\n        available as user data in the signal.\n        Do not try and find the grab widget as it is already done by Gtk at\n        this point.\n        Do not search for Window ancestor as Gtk already sends the signal to it.        Do not meddle with the activation state of peer widgets on each\n        key press or release.\n        Add CList to the special handling when looking for the focused widget.\n        * jni/gtk-peer/gtkpeer.h: Add declaration for pre_event_handler.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c (connectJObject):\n        New function.\n        (connectSignals): New function.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c (connectHooks):\n        Rename to...\n        (connectSignals): New name.  Get rid of NewGlobalRef call.\n        Use g_signal_connect instead of deprecated gtk_signal_connect.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n        (connect_choice_item_selectable_hook): Use g_signal_connect instead of\n        deprecated gtk_signal_connect.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkClipboard_initNativeState): Ditto.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n        function.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n        function.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_old_create): Remove dead\n        code.\n        (item_select): Remove indirection.\n        (item_unselect): Ditto.\n        (connect_selectable_hook): Folded into connectSignals.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n        function.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c: Ditto.\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n        * jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n        function.\n        (Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n        function.\n        * gnu/java/awt/peer/gtk/GtkComponentPeer.java: Declare  and call\n        connectJObject and connectSignals instead of connectHooks.\n        * gnu/java/awt/peer/gtk/GtkButtonPeer.java: Declare connectJObject and\n        connectSignals.\n        * gnu/java/awt/peer/gtk/GtkCheckboxPeer.java: Declare connectSignals\n        and not connectHooks.\n        * gnu/java/awt/peer/gtk/GtkTextComponentPeer.java: Ditto.\n        * gnu/java/awt/peer/gtk/GtkFileDialogPeer.java: Declare connectJObject\n        and not connectHooks.\n        * gnu/java/awt/peer/gtk/GtkListPeer.java: Declare connectJObject and\n        connectSignals instead of connectHooks.\n        * gnu/java/awt/peer/gtk/GtkPanelPeer.java: Ditto.\n        * gnu/java/awt/peer/gtk/GtkScrollbarPeer.java: Ditto.\n        * gnu/java/awt/peer/gtk/GtkWindowPeer.java: Ditto.\n\nFrom-SVN: r74536", "tree": {"sha": "3736265b7c1bc9099a8eb458dedd54a95979569a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3736265b7c1bc9099a8eb458dedd54a95979569a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/834b1209074da1983d7688ba5eebb54e9c9920ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/834b1209074da1983d7688ba5eebb54e9c9920ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/834b1209074da1983d7688ba5eebb54e9c9920ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/834b1209074da1983d7688ba5eebb54e9c9920ef/comments", "author": {"login": "fnasser", "id": 326533, "node_id": "MDQ6VXNlcjMyNjUzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/326533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnasser", "html_url": "https://github.com/fnasser", "followers_url": "https://api.github.com/users/fnasser/followers", "following_url": "https://api.github.com/users/fnasser/following{/other_user}", "gists_url": "https://api.github.com/users/fnasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnasser/subscriptions", "organizations_url": "https://api.github.com/users/fnasser/orgs", "repos_url": "https://api.github.com/users/fnasser/repos", "events_url": "https://api.github.com/users/fnasser/events{/privacy}", "received_events_url": "https://api.github.com/users/fnasser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90ff9ff39c96c8a8a1bcfd061f94f883d0ba7a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ff9ff39c96c8a8a1bcfd061f94f883d0ba7a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ff9ff39c96c8a8a1bcfd061f94f883d0ba7a39"}], "stats": {"total": 1050, "additions": 565, "deletions": 485}, "files": [{"sha": "09b1e9862c4b25d13aaed2da1b3f64f4de097ef5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -1,3 +1,85 @@\n+2003-12-08  Fernando Nasser  <fnasser@redhat.com>\n+\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c (awt_event_handler):\n+\tMost coded moved to pre_event_handler, with the modifications\n+\tmentioned below.\n+\t(pre_event_handler): New function.  Called on the Gtk \"event\" signal.\n+\tDo not retrieve the jobject from the window property as it is already\n+\tavailable as user data in the signal.\n+\tDo not try and find the grab widget as it is already done by Gtk at\n+\tthis point.\n+\tDo not search for Window ancestor as Gtk already sends the signal to it.\n+\tDo not meddle with the activation state of peer widgets on each\n+\tkey press or release.\n+\tAdd CList to the special handling when looking for the focused widget.\n+\t* jni/gtk-peer/gtkpeer.h: Add declaration for pre_event_handler.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c (connectJObject):\n+\tNew function.\n+\t(connectSignals): New function.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c (connectHooks):\n+\tRename to...\n+\t(connectSignals): New name.  Get rid of NewGlobalRef call.\n+\tUse g_signal_connect instead of deprecated gtk_signal_connect.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n+\t(connect_choice_item_selectable_hook): Use g_signal_connect instead of\n+\tdeprecated gtk_signal_connect.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkClipboard_initNativeState): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n+\tfunction.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n+\tfunction.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_old_create): Remove dead\n+\tcode.\n+\t(item_select): Remove indirection.\n+\t(item_unselect): Ditto.\n+\t(connect_selectable_hook): Folded into connectSignals.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject): New\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n+\tfunction.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c: Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks): Remove\n+\tfunction.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): New\n+\tfunction.\n+\t* gnu/java/awt/peer/gtk/GtkComponentPeer.java: Declare  and call\n+\tconnectJObject and connectSignals instead of connectHooks.\n+\t* gnu/java/awt/peer/gtk/GtkButtonPeer.java: Declare connectJObject and\n+\tconnectSignals.\n+\t* gnu/java/awt/peer/gtk/GtkCheckboxPeer.java: Declare connectSignals\n+\tand not connectHooks.\n+\t* gnu/java/awt/peer/gtk/GtkTextComponentPeer.java: Ditto.\n+\t* gnu/java/awt/peer/gtk/GtkFileDialogPeer.java: Declare connectJObject\n+\tand not connectHooks.\n+\t* gnu/java/awt/peer/gtk/GtkListPeer.java: Declare connectJObject and\n+\tconnectSignals instead of connectHooks.\n+\t* gnu/java/awt/peer/gtk/GtkPanelPeer.java: Ditto.\n+\t* gnu/java/awt/peer/gtk/GtkScrollbarPeer.java: Ditto.\n+\t* gnu/java/awt/peer/gtk/GtkWindowPeer.java: Ditto. \n+\n 2003-12-09  Michael Koch  <konqueror@gmx.de>\n \n \t* Makefile.am (nat_headers_install): New variable with header files to"}, {"sha": "9a832265b34bd318922b5c038147d435bab889e4", "filename": "libjava/gnu/java/awt/peer/gtk/GtkButtonPeer.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkButtonPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkButtonPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkButtonPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -50,6 +50,8 @@ public class GtkButtonPeer extends GtkComponentPeer\n     implements ButtonPeer\n {\n   native void create ();\n+  public native void connectJObject ();\n+  public native void connectSignals ();\n \n   native void gtkSetFont(String name, int style, int size);\n   native void gtkWidgetSetForeground (int red, int green, int blue);"}, {"sha": "fba8c8ff8f9d82145c5c4d57a6adac59fb9f7a06", "filename": "libjava/gnu/java/awt/peer/gtk/GtkCheckboxPeer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -54,7 +54,7 @@ public class GtkCheckboxPeer extends GtkComponentPeer\n   public native void nativeCreate (GtkCheckboxGroupPeer group,\n                                    boolean state);\n   public native void nativeSetCheckboxGroup (GtkCheckboxGroupPeer group);\n-  public native void connectHooks ();\n+  public native void connectSignals ();\n \n   public GtkCheckboxPeer (Checkbox c)\n   {"}, {"sha": "4e216f8770e1c5a0cd848aadb3367bdd42046933", "filename": "libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -99,7 +99,8 @@ void initializeInsets ()\n     insets = new Insets (0, 0, 0, 0);\n   }\n \n-  native void connectHooks ();\n+  native void connectJObject ();\n+  native void connectSignals ();\n \n   protected GtkComponentPeer (Component awtComponent)\n   {\n@@ -114,7 +115,8 @@ protected GtkComponentPeer (Component awtComponent)\n       getArgs (awtComponent, args);\n       args.setArgs (this);\n \n-      connectHooks ();\n+      connectJObject ();\n+      connectSignals ();\n \n       if (awtComponent.getForeground () != null)\n \tsetForeground (awtComponent.getForeground ());"}, {"sha": "07422ace79b0a8998afec2541fee336e7004381b", "filename": "libjava/gnu/java/awt/peer/gtk/GtkFileDialogPeer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -58,7 +58,7 @@ public void setDirectory (String directory)\n   }\n \n   public native void setFile (String file);\n-  public native void connectHooks ();\n+  public native void connectJObject ();\n \n   public void setFilenameFilter (FilenameFilter filter)\n   {"}, {"sha": "e06e079ae0be569750f3a4b561f20fa61c8a553e", "filename": "libjava/gnu/java/awt/peer/gtk/GtkListPeer.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -51,7 +51,8 @@ public class GtkListPeer extends GtkComponentPeer\n //    native void create (ComponentPeer parent, String [] items, boolean mode);\n \n   native void create ();\n-  native void connectHooks ();\n+  native void connectJObject ();\n+  native void connectSignals ();\n \n   native void getSize (int rows, int dims[]);\n "}, {"sha": "4f77994931d54110909b4e1420c24ad1439026dd", "filename": "libjava/gnu/java/awt/peer/gtk/GtkPanelPeer.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPanelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPanelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPanelPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -45,7 +45,8 @@ public class GtkPanelPeer extends GtkContainerPeer\n   implements PanelPeer\n {\n   native void create ();\n-  native void connectHooks ();\n+  native void connectJObject ();\n+  native void connectSignals ();\n \n   public GtkPanelPeer (Panel p)\n   {"}, {"sha": "0e1b65137d7cbdc4f0ed3c85b141725a0260bbc9", "filename": "libjava/gnu/java/awt/peer/gtk/GtkScrollbarPeer.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollbarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollbarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollbarPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -60,7 +60,8 @@ native void create (int orientation, int value,\n \t\t      int min, int max, int stepIncr, int pageIncr,\n \t\t      int visibleAmount);\n \n-  native void connectHooks ();\n+  native void connectJObject ();\n+  native void connectSignals ();\n \n   public GtkScrollbarPeer (Scrollbar s)\n   {"}, {"sha": "8bc4bdf3eee4dc7eb240fbd693ee29fac1ef4530", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextComponentPeer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -56,7 +56,7 @@ public class GtkTextComponentPeer extends GtkComponentPeer\n     setText (tc.getText ());\n   }\n \n-  public native void connectHooks ();\n+  public native void connectSignals ();\n \n   public native int getCaretPosition ();\n   public native void setCaretPosition (int pos);"}, {"sha": "4a2d50805a1e9dd1d726790660ff7c1ec665d8c2", "filename": "libjava/gnu/java/awt/peer/gtk/GtkWindowPeer.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -93,7 +93,8 @@ void create ()\n     create (GDK_WINDOW_TYPE_HINT_NORMAL, false);\n   }\n \n-  native void connectHooks ();\n+  native void connectJObject ();\n+  native void connectSignals ();\n \n   public GtkWindowPeer (Window window)\n   {"}, {"sha": "bce873712029ed9d3667c42d562ce92679e8ba4a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -37,9 +37,11 @@ exception statement from your version. */\n \n \n #include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkButtonPeer.h\"\n \n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkButtonPeer_create\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkButtonPeer_create\n   (JNIEnv *env, jobject obj)\n {\n   GtkWidget *button;\n@@ -51,6 +53,33 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkButtonPeer_create\n   NSA_SET_PTR (env, obj, button);\n }\n \n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkButtonPeer_connectJObject\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+\n+  connect_awt_hook (env, obj, 1, GTK_BUTTON(ptr)->event_window);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkButtonPeer_connectSignals\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr = NSA_GET_PTR (env, obj);\n+\n+  /* Connect the superclass signals.  */\n+  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n+}\n+\n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkButtonPeer_gtkSetFont\n   (JNIEnv *env, jobject obj, jstring name, jint style, jint size)"}, {"sha": "9789569ddad05ced9675d735d17fcc43a27b666f", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -104,25 +104,20 @@ Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeCreate\n }\n \n JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_connectHooks\n+Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr = NSA_GET_PTR (env, obj);\n-  jobject peer;\n \n   gdk_threads_enter ();\n \n-  peer = (*env)->NewGlobalRef (env, obj);\n-\n-  /* FIXME: when the widget goes away, we should get rid of the global\n-     reference.  */\n-  gtk_signal_connect (GTK_OBJECT (ptr), \"toggled\",\n-\t\t      GTK_SIGNAL_FUNC (item_toggled), peer);\n+  g_signal_connect (G_OBJECT (ptr), \"toggled\",\n+\t\t      GTK_SIGNAL_FUNC (item_toggled), obj);\n \n   gdk_threads_leave ();\n \n-  /* Connect the superclass hooks.  */\n-  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks (env, obj);\n+  /* Connect the superclass signals.  */\n+  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n }\n \n JNIEXPORT void JNICALL "}, {"sha": "7e915c876ba6b9350e3235b3e1c4ed4c18fa14c9", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -200,6 +200,6 @@ connect_choice_item_selectable_hook (JNIEnv *env, jobject peer_obj,\n   ie->peer_obj = (*env)->NewGlobalRef (env, peer_obj);\n   ie->item_obj = (*env)->NewGlobalRef (env, item_obj);\n \n-  gtk_signal_connect (GTK_OBJECT (item), \"activate\", \n+  g_signal_connect (G_OBJECT (item), \"activate\", \n \t\t      GTK_SIGNAL_FUNC (item_activate), ie);\n }"}, {"sha": "a1327400335886c5965bf166215c59e5f312d229", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkClipboard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkClipboard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkClipboard.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -75,16 +75,16 @@ Java_gnu_java_awt_peer_gtk_GtkClipboard_initNativeState (JNIEnv *env,\n   gdk_threads_enter ();\n   clipboard = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n \n-  gtk_signal_connect (GTK_OBJECT(clipboard), \"selection_received\",\n+  g_signal_connect (G_OBJECT(clipboard), \"selection_received\",\n \t\t      GTK_SIGNAL_FUNC (selection_received), NULL);\n \n-  gtk_signal_connect (GTK_OBJECT(clipboard), \"selection_clear_event\",\n+  g_signal_connect (G_OBJECT(clipboard), \"selection_clear_event\",\n \t\t      GTK_SIGNAL_FUNC (selection_clear), NULL);\n \n   gtk_selection_add_target (clipboard, GDK_SELECTION_PRIMARY, \n \t\t\t    GDK_TARGET_STRING, 0);\n \n-  gtk_signal_connect (GTK_OBJECT(clipboard), \"selection_get\",\n+  g_signal_connect (G_OBJECT(clipboard), \"selection_get\",\n                       GTK_SIGNAL_FUNC (selection_get), NULL);\n \n   gdk_threads_leave ();"}, {"sha": "ee44ccc11fc6257fe18220511e4bef0acf2a6754", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -531,20 +531,44 @@ Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_O\n   (*env)->ReleaseStringUTFChars (env, jname, name);\n }\n \n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObject\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n \n   ptr = NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n+\n   gtk_widget_realize (GTK_WIDGET (ptr));\n \n-  if(GTK_IS_BUTTON(ptr))\n-    connect_awt_hook (env, obj, 1, GTK_BUTTON(ptr)->event_window);\n-  else\n-    connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n+  connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals\n+  (JNIEnv *env, jobject peer_obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, peer_obj);\n+\n+  gdk_threads_enter ();\n+\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  \n+  /* FIXME: We could check here if this is a scrolled window with a\n+     single child that does not have an associated jobject.  This\n+     means that it is one of our wrapped widgets like List or TextArea\n+     and thus we could connect the signal to the child without having\n+     to specialize this method. */\n+\n+  /* Connect EVENT signal, which happens _before_ any specific signal. */\n+\n+  g_signal_connect (GTK_OBJECT (ptr), \"event\", \n+                    G_CALLBACK (pre_event_handler), peer_obj);\n+\n   gdk_threads_leave ();\n }\n "}, {"sha": "3a7ad6277b7b4dc5fa798ce631b0019d408c315a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c", "status": "modified", "additions": 259, "deletions": 367, "changes": 626, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -813,21 +813,35 @@ generates_key_typed_event (GdkEvent *event, GtkWidget *source)\n void\n awt_event_handler (GdkEvent *event)\n {\n-  jobject *event_obj_ptr = NULL;\n-  static guint32 button_click_time = 0;\n-  static GdkWindow *button_window = NULL;\n-  static guint button_number = -1;\n-  static jint click_count = 1;\n-\n   /* keep synthetic AWT events from being processed recursively */\n   if (event->type & SYNTHETIC_EVENT_MASK && event->type != GDK_NOTHING)\n     {\n       event->type ^= SYNTHETIC_EVENT_MASK;\n-      gtk_main_do_event (event);\n-      return;\n     }\n \n-  /* If it is not an input event, let the main loop handle it */\n+  gtk_main_do_event (event);\n+}\n+\n+gboolean\n+pre_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n+{\n+  GtkWidget *event_widget;\n+  static guint32 button_click_time = 0;\n+  static GdkWindow *button_window = NULL;\n+  static guint button_number = -1;\n+  static jint click_count = 1;\n+\n+  /* If it is not a focus change event, the widget must be realized already.\n+     If not, ignore the event (Gtk+ will do the same). */\n+  if (!(event->type == GDK_FOCUS_CHANGE || GTK_WIDGET_REALIZED(widget)))\n+    return FALSE;\n+    \n+  /* Do not handle propagated events.  AWT has its own propagation rules */\n+  gdk_window_get_user_data (event->any.window, (void **) &event_widget);\n+  if (event_widget != widget)\n+    return FALSE;\n+\n+  /* We only care about input events */    \n   if (!(event->type == GDK_BUTTON_PRESS\n        || event->type == GDK_BUTTON_RELEASE\n        || event->type == GDK_ENTER_NOTIFY\n@@ -839,12 +853,18 @@ awt_event_handler (GdkEvent *event)\n        || event->type == GDK_FOCUS_CHANGE\n        || event->type == GDK_MOTION_NOTIFY))\n     {\n-      gtk_main_do_event (event);\n-      return;\n+      return FALSE;\n     }\n+  /* g_print(\"event %u widget %s peer %p\\n\",\n+            event->type, gtk_widget_get_name (widget), peer); */\n+\n+  /* If it has no jobject associated we can send no AWT event */\n+  if (!peer)\n+    return FALSE;\n+\n+  /* for all input events, which have a window with a jobject attached,\n+     send the AWT input event corresponding to the Gtk event off to Java  */\n \n-  /* Handle input events */\n-      \n   /* keep track of clickCount ourselves, since the AWT allows more\n      than a triple click to occur */\n   if (event->type == GDK_BUTTON_PRESS)\n@@ -861,376 +881,247 @@ awt_event_handler (GdkEvent *event)\n       button_number = event->button.button;\n     }\n \n-  /* for all input events, which have a window with a jobject attached,\n-     send the input event off to Java before GTK has a chance to process\n-     the event.  Note that the jobject may be in the parent for widgets\n-     that are always inside a scrolled window, like List */\n-  if (!gdk_property_get (event->any.window,\n-\t\t\t   gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n-\t\t\t   gdk_atom_intern (\"CARDINAL\", FALSE),\n-\t\t\t   0,\n-\t\t\t   sizeof (jobject),\n-\t\t\t   FALSE,\n-\t\t\t   NULL,\n-\t\t\t   NULL,\n-\t\t\t   NULL,\n-\t\t\t   (guchar **)&event_obj_ptr))\n+  switch (event->type)\n     {\n-      /* See if is contained in a scrolled pane */\n-      GtkWidget *widget;\n-      gdk_window_get_user_data (event->any.window, (void **) &widget);\n-\n-      if ((gtk_widget_get_parent (widget) != NULL)\n-          && (gtk_widget_get_parent (widget)->window != NULL))\n-        {\n-          GtkWidget *parent = gtk_widget_get_parent (widget);\n-\n-          if (GTK_IS_SCROLLED_WINDOW (parent))\n-            gdk_property_get (gtk_widget_get_parent (widget)->window,\n-                           gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n-                           gdk_atom_intern (\"CARDINAL\", FALSE),\n-                           0,\n-                           sizeof (jobject),\n-                           FALSE,\n-                           NULL,\n-                           NULL,\n-                           NULL,\n-                           (guchar **)&event_obj_ptr);\n-        }\n-    }\n-\n-  if (event_obj_ptr)\n-    {\n-      GtkWidget *event_widget;\n-      GtkWidget *grab_widget;\n-      jobject *grab_obj_ptr = NULL;\n-      void *ptr;\n-\n-      /* Implement modality using GTK grabs. */\n-      g_assert (global_gtk_window_group);\n-      if (global_gtk_window_group->grabs)\n-\t{\n-\t  grab_widget = global_gtk_window_group->grabs->data;\n-\t  g_assert (grab_widget);\n-\n-\t  ptr = NSA_GET_PTR (gdk_env, *event_obj_ptr);\n-\t  event_widget = GTK_WIDGET(ptr);\n-\n-\t  /* Don't need to do this if it is the same widget as we\n-\t   *  already got the jobject above.\n-\t   * Also, don't do it for the BUTTON_PRESS as the focus may be\n-\t   *  changing and the event widget is the one that must \n-\t   *  receive it (again, we have the jobject already) \n-\t   */\n-          if ((event_widget != grab_widget)\n-\t      && (event->type != GDK_BUTTON_PRESS))\n-\t    {\n-              /* If the grab widget is an ancestor of the event widget\n-               *  then we send the event to the original event widget.\n-               *  This is the key to implementing modality.\n-\t       * Unless the widget is disabled, in this case the grab\n-\t       *  widget still gets the event.\n-\t       *  XXX: But the grab widget may not be an ancestor!!!\n-               */\n-\t      if (!GTK_WIDGET_IS_SENSITIVE (event_widget)\n-\t          || !gtk_widget_is_ancestor (event_widget, grab_widget))\n-\t        {\n-\t          gdk_property_get (grab_widget->window,\n-\t\t\t            gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n-\t\t\t            gdk_atom_intern (\"CARDINAL\", FALSE),\n-\t\t\t            0,\n-\t\t\t            sizeof (jobject),\n-\t\t\t            FALSE,\n-\t\t\t            NULL,\n-\t\t\t            NULL,\n-\t\t\t            NULL,\n-\t\t\t            (guchar **)&grab_obj_ptr);\n-\n-\t        }\n-\t    }\n-\t}\n-\n-      if (!grab_obj_ptr)\n-\tgrab_obj_ptr = event_obj_ptr;\n-      else\n-        g_free (event_obj_ptr);\n-\n-      switch (event->type)\n-\t{\n-\tcase GDK_BUTTON_PRESS:\n-\t  (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr, postMouseEventID,\n-\t\t\t\t      AWT_MOUSE_PRESSED, \n-\t\t\t\t      (jlong)event->button.time,\n-\t\t\t\t    state_to_awt_mods (event->button.state) |\n-\t\t\t\t    button_to_awt_mods (event->button.button), \n-\t\t\t\t      (jint)event->button.x,\n-\t\t\t\t      (jint)event->button.y, \n-\t\t\t\t      click_count, \n-\t\t\t\t      (event->button.button == 3) ? JNI_TRUE :\n-\t\t\t\t                                    JNI_FALSE);\n-\n-\t  /*\t  grab_counter++;\n-\t  gdk_pointer_grab (event->any.window,\n-\t\t\t    FALSE,\n-\t\t\t    GDK_POINTER_MOTION_MASK |\n-\t\t\t    GDK_BUTTON_MOTION_MASK |\n-\t\t\t    GDK_BUTTON_PRESS_MASK |\n-\t\t\t    GDK_BUTTON_RELEASE_MASK |\n-\t\t\t    GDK_ENTER_NOTIFY_MASK |\n-\t\t\t    GDK_LEAVE_NOTIFY_MASK,\n-\t\t\t    NULL,\n-\t\t\t    NULL,\n-\t\t\t    event->button.time);*/\n-\t  break;\n-\tcase GDK_BUTTON_RELEASE:\n-\t  {\n-\t    int width, height;\n-\n-\t    /* only ungrab if no other buttons are pressed down */\n-\t    /*\t    if (--grab_counter == 0)\n-\t      gdk_pointer_ungrab (event->button.time);\n-\t    */\n-\t    (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\tpostMouseEventID,\n-\t\t\t\t\tAWT_MOUSE_RELEASED, \n-\t\t\t\t\t(jlong)event->button.time,\n+    case GDK_BUTTON_PRESS:\n+      (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+                                  postMouseEventID,\n+\t\t\t\t  AWT_MOUSE_PRESSED, \n+\t\t\t\t  (jlong)event->button.time,\n+\t\t\t\t  state_to_awt_mods (event->button.state) |\n+\t\t\t\t  button_to_awt_mods (event->button.button), \n+\t\t\t\t  (jint)event->button.x,\n+\t\t\t\t  (jint)event->button.y, \n+\t\t\t\t  click_count, \n+\t\t\t\t  (event->button.button == 3) ? JNI_TRUE :\n+\t\t\t\t                                JNI_FALSE);\n+      break;\n+    case GDK_BUTTON_RELEASE:\n+      {\n+\tint width, height;\n+\n+\t(*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t    postMouseEventID,\n+\t\t\t\t    AWT_MOUSE_RELEASED, \n+\t\t\t\t    (jlong)event->button.time,\n \t\t\t\t    state_to_awt_mods (event->button.state) |\n \t\t\t\t    button_to_awt_mods (event->button.button), \n-\t\t\t\t\t(jint)event->button.x,\n-\t\t\t\t\t(jint)event->button.y, \n-\t\t\t\t\tclick_count, JNI_FALSE);\n-\n-\t    /* check to see if the release occured in the window it was pressed\n-\t       in, and if so, generate an AWT click event */\n-\t    gdk_window_get_size (event->any.window, &width, &height);\n-\t    if (event->button.x >= 0\n-\t\t&& event->button.y >= 0\n-\t\t&& event->button.x <= width \n-\t\t&& event->button.y <= height)\n-\t      (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\t  postMouseEventID,\n-\t\t\t\t\t  AWT_MOUSE_CLICKED, \n-\t\t\t\t\t  (jlong)event->button.time,\n-\t\t\t\t   state_to_awt_mods (event->button.state) |\n-\t\t\t\t  button_to_awt_mods (event->button.button), \n-\t\t\t\t\t  (jint)event->button.x,\n-\t\t\t\t\t  (jint)event->button.y, \n-\t\t\t\t\t  click_count, JNI_FALSE);\n-\t    \n-\t  }\n-\t  break;\n-\tcase GDK_MOTION_NOTIFY:\n-\t  (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr, postMouseEventID,\n-\t\t\t\t      AWT_MOUSE_MOVED,\n+\t\t\t\t    (jint)event->button.x,\n+\t\t\t\t    (jint)event->button.y, \n+\t\t\t\t    click_count,\n+\t\t\t\t    JNI_FALSE);\n+\n+\t/* check to see if the release occured in the window it was pressed\n+\t   in, and if so, generate an AWT click event */\n+\tgdk_window_get_size (event->any.window, &width, &height);\n+\tif (event->button.x >= 0\n+            && event->button.y >= 0\n+\t    && event->button.x <= width \n+\t    && event->button.y <= height)\n+          {\n+\t    (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t        postMouseEventID,\n+\t\t\t\t        AWT_MOUSE_CLICKED, \n+\t\t\t\t        (jlong)event->button.time,\n+\t\t\t\t        state_to_awt_mods (event->button.state) |\n+\t\t\t\t        button_to_awt_mods (event->button.button), \n+\t\t\t\t        (jint)event->button.x,\n+\t\t\t\t        (jint)event->button.y, \n+\t\t\t\t        click_count,\n+\t\t\t\t        JNI_FALSE);\n+          }\n+      }\n+      break;\n+    case GDK_MOTION_NOTIFY:\n+      (*gdk_env)->CallVoidMethod (gdk_env, peer, postMouseEventID,\n+\t\t\t\t  AWT_MOUSE_MOVED,\n+\t\t\t\t  (jlong)event->motion.time,\n+\t\t\t\t  state_to_awt_mods (event->motion.state),\n+\t\t\t\t  (jint)event->motion.x,\n+\t\t\t\t  (jint)event->motion.y,\n+\t\t\t\t  0,\n+\t\t\t\t  JNI_FALSE);\n+\n+      if (event->motion.state & (GDK_BUTTON1_MASK\n+\t\t\t\t | GDK_BUTTON2_MASK\n+\t\t\t\t | GDK_BUTTON3_MASK\n+\t\t\t\t | GDK_BUTTON4_MASK\n+\t\t\t\t | GDK_BUTTON5_MASK))\n+\t{\n+\t  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t              postMouseEventID,\n+\t\t\t\t      AWT_MOUSE_DRAGGED,\n \t\t\t\t      (jlong)event->motion.time,\n \t\t\t\t      state_to_awt_mods (event->motion.state),\n \t\t\t\t      (jint)event->motion.x,\n \t\t\t\t      (jint)event->motion.y,\n-\t\t\t\t      0, JNI_FALSE);\n-\n-\t  if (event->motion.state & (GDK_BUTTON1_MASK\n-\t\t\t\t     | GDK_BUTTON2_MASK\n-\t\t\t\t     | GDK_BUTTON3_MASK\n-\t\t\t\t     | GDK_BUTTON4_MASK\n-\t\t\t\t     | GDK_BUTTON5_MASK))\n-\t    {\n-\t      (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\t  postMouseEventID,\n-\t\t\t\t\t  AWT_MOUSE_DRAGGED,\n-\t\t\t\t\t  (jlong)event->motion.time,\n-\t\t\t\t      state_to_awt_mods (event->motion.state),\n-\t\t\t\t\t  (jint)event->motion.x,\n-\t\t\t\t\t  (jint)event->motion.y,\n-\t\t\t\t\t  0, JNI_FALSE);\n-\t    }\n-\t  break;\n-\tcase GDK_ENTER_NOTIFY:\n-\t  (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr, postMouseEventID,\n-\t\t\t\t      AWT_MOUSE_ENTERED, \n-\t\t\t\t      (jlong)event->crossing.time,\n-\t\t\t\t    state_to_awt_mods (event->crossing.state), \n-\t\t\t\t      (jint)event->crossing.x,\n-\t\t\t\t      (jint)event->crossing.y, \n-\t\t\t\t      0, JNI_FALSE);\n-\t  break;\n-\tcase GDK_LEAVE_NOTIFY:\n-\t  if (event->crossing.mode == GDK_CROSSING_NORMAL)\n-\t    (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\tpostMouseEventID,\n-\t\t\t\t\tAWT_MOUSE_EXITED, \n-\t\t\t\t\t(jlong)event->crossing.time,\n+\t\t\t\t      0,\n+\t\t\t\t      JNI_FALSE);\n+\t}\n+      break;\n+    case GDK_ENTER_NOTIFY:\n+      (*gdk_env)->CallVoidMethod (gdk_env, peer, postMouseEventID,\n+\t\t\t\t  AWT_MOUSE_ENTERED, \n+\t\t\t\t  (jlong)event->crossing.time,\n+\t\t\t\t  state_to_awt_mods (event->crossing.state), \n+\t\t\t\t  (jint)event->crossing.x,\n+\t\t\t\t  (jint)event->crossing.y, \n+\t\t\t\t  0,\n+\t\t\t\t  JNI_FALSE);\n+      break;\n+    case GDK_LEAVE_NOTIFY:\n+      if (event->crossing.mode == GDK_CROSSING_NORMAL)\n+\t(*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t    postMouseEventID,\n+\t\t\t\t    AWT_MOUSE_EXITED, \n+\t\t\t\t    (jlong)event->crossing.time,\n \t\t\t\t    state_to_awt_mods (event->crossing.state),\n-\t\t\t\t\t(jint)event->crossing.x,\n-\t\t\t\t\t(jint)event->crossing.y, \n-\t\t\t\t\t0, JNI_FALSE);\n-\t  break;\n-\tcase GDK_CONFIGURE:\n-\t  {\n-\t    GtkWidget *widget;\n-\n-\t    gdk_window_get_user_data (event->any.window, (void **) &widget);\n+\t\t\t\t    (jint)event->crossing.x,\n+\t\t\t\t    (jint)event->crossing.y, \n+\t\t\t\t    0,\n+\t\t\t\t    JNI_FALSE);\n+      break;\n+    case GDK_CONFIGURE:\n+      {\n+\t/* GtkWidget *widget;\n+\n+\tgdk_window_get_user_data (event->any.window, (void **) &widget); */\n \t    \n-\t    if (widget && GTK_WIDGET_TOPLEVEL (widget))\n-\t      {\n-\t\tgint top, left, right, bottom;\n-\n-\t\t/* Configure events are not posted to the AWT event\n-\t\t   queue, and as such, the gdk/gtk peer functions will\n-\t\t   be called back before postConfigureEvent\n-\t\t   returns. */\n-\t\tgdk_threads_leave ();\n-\n-\t\t/* FIXME: hard-code these values for now. */\n-\t\ttop = 20;\n-\t\tleft = 6;\n-\t\tbottom = 6;\n-\t\tright = 6;\n-\n-\t\t(*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\t    postConfigureEventID,\n-\t\t\t\t\t    (jint) event->configure.x,\n-\t\t\t\t\t    (jint) event->configure.y,\n-\t\t\t\t\t    (jint) event->configure.width,\n-\t\t\t\t\t    (jint) event->configure.height,\n-\t\t\t\t\t    (jint) top,\n-\t\t\t\t\t    (jint) left,\n-\t\t\t\t\t    (jint) bottom,\n-\t\t\t\t\t    (jint) right);\n-\t\tgdk_threads_enter ();\n-\t      }\n-\t  }\n-\t  break;\n-\tcase GDK_EXPOSE:\n+\tif (widget && GTK_WIDGET_TOPLEVEL (widget))\n \t  {\n-\t    (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\tpostExposeEventID,\n-\t\t\t\t\t(jint)event->expose.area.x,\n-\t\t\t\t\t(jint)event->expose.area.y,\n-\t\t\t\t\t(jint)event->expose.area.width,\n-\t\t\t\t\t(jint)event->expose.area.height);\n+\t    gint top, left, right, bottom;\n+\n+\t    /* Configure events are not posted to the AWT event\n+\t       queue, and as such, the gdk/gtk peer functions will\n+\t       be called back before postConfigureEvent\n+\t       returns. */\n+\t    gdk_threads_leave ();\n+\n+\t    /* FIXME: hard-code these values for now. */\n+\t    top = 20;\n+\t    left = 6;\n+\t    bottom = 6;\n+\t    right = 6;\n+\n+ \t    (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t\tpostConfigureEventID,\n+\t\t\t\t\t(jint) event->configure.x,\n+\t\t\t\t\t(jint) event->configure.y,\n+\t\t\t\t\t(jint) event->configure.width,\n+\t\t\t\t\t(jint) event->configure.height,\n+\t\t\t\t\t(jint) top,\n+\t\t\t\t\t(jint) left,\n+\t\t\t\t\t(jint) bottom,\n+\t\t\t\t\t(jint) right);\n+\t    gdk_threads_enter ();\n \t  }\n-\t  break;\n-\n-\tcase GDK_KEY_PRESS:\n+      }\n+      break;\n+    case GDK_EXPOSE:\n+      {\n+\t(*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t    postExposeEventID,\n+\t\t\t\t    (jint)event->expose.area.x,\n+\t\t\t\t    (jint)event->expose.area.y,\n+\t\t\t\t    (jint)event->expose.area.width,\n+\t\t\t\t    (jint)event->expose.area.height);\n+      }\n+      break;\n+    case GDK_FOCUS_CHANGE:\n+      (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t\t  postFocusEventID,\n+\t\t\t\t  (jint) (event->focus_change.in) ? \n+\t\t\t\t  AWT_FOCUS_GAINED : AWT_FOCUS_LOST,\n+\t\t\t\t  JNI_FALSE);\n+      break;\n+    case GDK_KEY_PRESS:\n+    case GDK_KEY_RELEASE:\n+      {\n+        GtkWindow *window;\n+        GdkWindow *obj_window;\n+        jobject *focus_obj_ptr = NULL;\n+\n+        /* A widget with a grab will get key events */\n+\tif (!GTK_IS_WINDOW (widget))\n+\t    *focus_obj_ptr = peer;\n+\telse\n \t  {\n-\t    GtkWidget *widget;\n-\t    GtkWindow *window;\n-            /* The window to which the Java peer is attached. */\n-            GdkWindow *obj_window;\n-\n-\t    gdk_window_get_user_data (event->any.window, (void **) &widget);\n-\n-\t    window = GTK_WINDOW (gtk_widget_get_ancestor (widget, \n-\t\t\t\t\t\t\t  GTK_TYPE_WINDOW));\n-\t    if (window\n-\t\t&& GTK_WIDGET_IS_SENSITIVE (window)\n-\t\t&& window->focus_widget\n-\t\t&& GTK_WIDGET_IS_SENSITIVE (window->focus_widget)\n-\t\t&& window->focus_widget->window)\n-\t      {\n-\t\tgtk_widget_activate (window->focus_widget);\n-\n-                /* TextArea peers are attached to the scrolled window\n-                   that contains the GtkTextView, not to the text view\n-                   itself. */\n-                if (GTK_IS_TEXT_VIEW (window->focus_widget)\n-                    || GTK_IS_CLIST (window->focus_widget))\n-                  obj_window = gtk_widget_get_parent (window->focus_widget)->window;\n-                else\n-                  obj_window = window->focus_widget->window;\n-\n-\t\tgdk_property_get (obj_window,\n-\t\t\t\t  gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n-\t\t\t\t  gdk_atom_intern (\"CARDINAL\", FALSE),\n-\t\t\t\t  0,\n-\t\t\t\t  sizeof (jobject),\n-\t\t\t\t  FALSE,\n-\t\t\t\t  NULL,\n-\t\t\t\t  NULL,\n-\t\t\t\t  NULL,\n-\t\t\t\t  (guchar **)&grab_obj_ptr);\n-\n-\t\t(*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\t    postKeyEventID,\n-\t\t\t\t\t    (jint) AWT_KEY_PRESSED,\n-\t\t\t\t\t    (jlong) event->key.time,\n-                             keyevent_state_to_awt_mods (event),\n-                             keysym_to_awt_keycode (event),\n-                             keyevent_to_awt_keychar (event),\n-                             keysym_to_awt_keylocation (event));\n-\n-                if (generates_key_typed_event (event, window->focus_widget))\n-                  (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-                                              postKeyEventID,\n-                                              (jint) AWT_KEY_TYPED,\n-                                              (jlong) event->key.time,\n-                                          state_to_awt_mods (event->key.state),\n-                                              VK_UNDEFINED,\n-                                              keyevent_to_awt_keychar (event),\n-                                              AWT_KEY_LOCATION_UNKNOWN);\n-\t      }\n-\t  }\n-\t  break;\n-        case GDK_KEY_RELEASE:\n+            /* Check if we have an enabled focused widget in this window.\n+\t       If not don't handle the event. */\n+\t    window = GTK_WINDOW (widget);\n+\t    if (!window->focus_widget\n+\t        || !GTK_WIDGET_IS_SENSITIVE (window->focus_widget)\n+\t        || !window->focus_widget->window)\n+\t      return FALSE;\n+\t\n+            /* TextArea peers are attached to the scrolled window\n+               that contains the GtkTextView, not to the text view\n+               itself.  Same for List. */\n+            if (GTK_IS_TEXT_VIEW (window->focus_widget)\n+                || GTK_IS_CLIST (window->focus_widget))\n+              {\n+                obj_window = gtk_widget_get_parent (window->focus_widget)->window;\n+              }\n+            else\n+              obj_window = window->focus_widget->window;\n+\n+            gdk_property_get (obj_window,\n+                              gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n+                              gdk_atom_intern (\"CARDINAL\", FALSE),\n+                              0,\n+                              sizeof (jobject),\n+                              FALSE,\n+                              NULL,\n+                              NULL,\n+                              NULL,\n+                              (guchar **)&focus_obj_ptr);\n+\n+            /* If the window has no jobject attached we can't send anything */\n+\t    if (!focus_obj_ptr)\n+\t      return FALSE;\n+\t  }\t\n+\n+\tif (event->type == GDK_KEY_PRESS)\t\n \t  {\n-\t    GtkWidget *widget;\n-\t    GtkWindow *window;\n-            GdkWindow *obj_window;\n-\n-\t    gdk_window_get_user_data (event->any.window, (void **) &widget);\n-\n-\t    window = GTK_WINDOW (gtk_widget_get_ancestor (widget, \n-\t\t\t\t\t\t\t  GTK_TYPE_WINDOW));\n-\t    if (window\n-\t\t&& GTK_WIDGET_IS_SENSITIVE (window) \n-\t\t&& window->focus_widget\n-\t\t&& GTK_WIDGET_IS_SENSITIVE (window->focus_widget)\n-\t\t&& window->focus_widget->window)\n-\t      {\n-\t\tgtk_widget_activate (window->focus_widget);\n-\n-                if (GTK_IS_TEXT_VIEW (window->focus_widget)\n-                    || GTK_IS_CLIST (window->focus_widget))\n-                  obj_window = gtk_widget_get_parent (window->focus_widget)->window;\n-                else\n-                  obj_window = window->focus_widget->window;\n-\n-\t\tgdk_property_get (obj_window,\n-\t\t\t\t  gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n-\t\t\t\t  gdk_atom_intern (\"CARDINAL\", FALSE),\n-\t\t\t\t  0,\n-\t\t\t\t  sizeof (jobject),\n-\t\t\t\t  FALSE,\n-\t\t\t\t  NULL,\n-\t\t\t\t  NULL,\n-\t\t\t\t  NULL,\n-\t\t\t\t  (guchar **)&grab_obj_ptr);\n-\n-\t\t(*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t\t    postKeyEventID,\n-\t\t\t\t\t    (jint) AWT_KEY_RELEASED,\n-\t\t\t\t\t    (jlong) event->key.time,\n-\t\t\t     keyevent_state_to_awt_mods (event),\n-\t\t\t     keysym_to_awt_keycode (event),\n-                             keyevent_to_awt_keychar (event),\n-                             keysym_to_awt_keylocation (event));\n+            (*gdk_env)->CallVoidMethod (gdk_env, *focus_obj_ptr,\n+\t\t\t\t        postKeyEventID,\n+\t\t\t\t        (jint) AWT_KEY_PRESSED,\n+\t\t\t\t        (jlong) event->key.time,\n+                                        keyevent_state_to_awt_mods (event),\n+                                        keysym_to_awt_keycode (event),\n+                                        keyevent_to_awt_keychar (event),\n+                                        keysym_to_awt_keylocation (event));\n+\n+            if (generates_key_typed_event (event, window->focus_widget))\n+              {\n+                (*gdk_env)->CallVoidMethod (gdk_env, *focus_obj_ptr,\n+                                            postKeyEventID,\n+                                            (jint) AWT_KEY_TYPED,\n+                                            (jlong) event->key.time,\n+                                            state_to_awt_mods (event->key.state),\n+                                            VK_UNDEFINED,\n+                                            keyevent_to_awt_keychar (event),\n+                                            AWT_KEY_LOCATION_UNKNOWN);\n               }\n           }\n-          break;\n-\tcase GDK_FOCUS_CHANGE:\n-\t  (*gdk_env)->CallVoidMethod (gdk_env, *grab_obj_ptr,\n-\t\t\t\t      postFocusEventID,\n-\t\t\t\t      (jint) (event->focus_change.in) ? \n-\t\t\t\t      AWT_FOCUS_GAINED : AWT_FOCUS_LOST,\n-\t\t\t\t      JNI_FALSE);\n-\t  break;\n-        default:\n-\t  break;\n-\t}\n-      g_free (grab_obj_ptr);\n+\telse /* GDK_KEY_RELEASE */\n+          {\n+\t    (*gdk_env)->CallVoidMethod (gdk_env, *focus_obj_ptr,\n+\t\t\t\t        postKeyEventID,\n+\t\t\t\t        (jint) AWT_KEY_RELEASED,\n+\t\t\t\t        (jlong) event->key.time,\n+\t\t\t                keyevent_state_to_awt_mods (event),\n+\t\t\t                keysym_to_awt_keycode (event),\n+                                        keyevent_to_awt_keychar (event),\n+                                        keysym_to_awt_keylocation (event));\n+\t  }\n+      }\n+      break;\n+    default:\n+      break;\n     }\n-\n-  gtk_main_do_event (event);\n+  \n+  return FALSE;\n }\n \n static void\n@@ -1285,3 +1176,4 @@ connect_awt_hook (JNIEnv *env, jobject peer_obj, int nwindows, ...)\n   }\n   va_end (ap);\n }\n+"}, {"sha": "cb065d51894fa203f2d3c4fc2deb4a0f47b723fe", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -57,15 +57,15 @@ Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_create\n }\n \n JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_connectHooks\n+Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_connectJObject\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr = NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n \n-  /* NOTE: we don't call the superclass connect method here.  */\n   gtk_widget_realize (GTK_WIDGET (ptr));\n+\n   connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n \n   gdk_threads_leave ();"}, {"sha": "7bc4c6dabb1553001423a85fa44c7b446ba19675", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c", "status": "modified", "additions": 47, "deletions": 70, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -37,10 +37,18 @@ exception statement from your version. */\n \n \n #include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkListPeer.h\"\n \n-static void\n-connect_selectable_hook (JNIEnv *env, jobject peer_obj, GtkCList *list);\n+static void item_select (GtkCList *list __attribute__((unused)),\n+\t                 int row, int col __attribute__((unused)),\n+\t                 GdkEventButton *event __attribute__((unused)), \n+\t                 jobject peer_obj);\n+static void item_unselect (GtkCList *list __attribute__((unused)),\n+\t                   int row,\n+\t                   int col __attribute__((unused)),\n+\t                   GdkEventButton *event __attribute__((unused)),\n+\t                   jobject peer_obj);\n \n #define CLIST_FROM_SW(obj) (GTK_CLIST(GTK_SCROLLED_WINDOW (obj)->container.child))\n \n@@ -64,84 +72,69 @@ Java_gnu_java_awt_peer_gtk_GtkListPeer_create\n }\n \n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkListPeer_connectHooks\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_connectJObject\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n \n   ptr = NSA_GET_PTR (env, obj);\n \n   gdk_threads_enter ();\n+\n   gtk_widget_realize (GTK_WIDGET (ptr));\n-  connect_selectable_hook (env, obj, CLIST_FROM_SW (ptr));\n+\n   connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n+\n   gdk_threads_leave ();\n }\n \n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkListPeer_append \n-  (JNIEnv *env, jobject obj, jobjectArray items)\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_connectSignals\n+  (JNIEnv *env, jobject peer_obj)\n {\n-  void *ptr;\n   GtkCList *list;\n-  jint count, i;\n-\n-  ptr = NSA_GET_PTR (env, obj);\n+  void *ptr;\n \n-  count = (*env)->GetArrayLength (env, items);\n+  ptr = NSA_GET_PTR (env, peer_obj);\n \n   gdk_threads_enter ();\n+\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+\n+  /* connect selectable hook */\n+  \n   list = CLIST_FROM_SW (ptr);\n-  for (i = 0; i < count; i++) \n-    {\n-      const char *text;\n-      jobject item;\n \n-      item = (*env)->GetObjectArrayElement (env, items, i);\n+  g_signal_connect (G_OBJECT (list), \"select_row\", \n+\t\t      GTK_SIGNAL_FUNC (item_select), peer_obj);\n \n-      text = (*env)->GetStringUTFChars (env, item, NULL);\n-      gtk_clist_append (list, (char **)&text);\n-      (*env)->ReleaseStringUTFChars (env, item, text);\n-    }\n+  g_signal_connect (G_OBJECT (list), \"unselect_row\", \n+\t\t      GTK_SIGNAL_FUNC (item_unselect), peer_obj);\n+\n+  /* Connect the superclass signals.  */\n+  /* FIXME: Cannot do that here or it will get the sw and not the list.\n+     We must a generic way of doing this. */\n+  /* Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, peer_obj); */\n+  g_signal_connect (GTK_OBJECT (list), \"event\", \n+                    G_CALLBACK (pre_event_handler), peer_obj);\n \n-  gtk_clist_columns_autosize (list);\n   gdk_threads_leave ();\n }\n \n-\n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkListPeer_old_create\n-  (JNIEnv *env, jobject obj, jobject parent_obj,\n-   jobjectArray items, jboolean mode)\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_append \n+  (JNIEnv *env, jobject obj, jobjectArray items)\n {\n-  GtkWidget *list, *sw, *parent;\n-  jsize count, i;\n+  void *ptr;\n+  GtkCList *list;\n+  jint count, i;\n \n-  parent = NSA_GET_PTR (env, parent_obj);\n+  ptr = NSA_GET_PTR (env, obj);\n \n   count = (*env)->GetArrayLength (env, items);\n \n   gdk_threads_enter ();\n-\n-  list = gtk_clist_new (1);\n-  gtk_widget_show (list);\n-\n-  sw = gtk_scrolled_window_new (NULL, NULL);\n-  set_parent (sw, GTK_CONTAINER (parent));\n-  gtk_widget_realize (sw);\n-\n-  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (sw), \n-\t\t\t\t  GTK_POLICY_AUTOMATIC,\n-\t\t\t\t  GTK_POLICY_AUTOMATIC);\n-  gtk_container_add (GTK_CONTAINER (sw), list);\n-\n-  connect_selectable_hook (env, obj, GTK_CLIST (list));\n-  connect_awt_hook (env, obj, 1, list->window);\n-\n-  gtk_clist_set_selection_mode (GTK_CLIST (list),\n-\t\t\t\tmode ? GTK_SELECTION_MULTIPLE : \n-\t\t\t\t       GTK_SELECTION_SINGLE);\n-  \n+  list = CLIST_FROM_SW (ptr);\n   for (i = 0; i < count; i++) \n     {\n       const char *text;\n@@ -150,14 +143,12 @@ Java_gnu_java_awt_peer_gtk_GtkListPeer_old_create\n       item = (*env)->GetObjectArrayElement (env, items, i);\n \n       text = (*env)->GetStringUTFChars (env, item, NULL);\n-      gtk_clist_append (GTK_CLIST (list), (char **)&text);\n+      gtk_clist_append (list, (char **)&text);\n       (*env)->ReleaseStringUTFChars (env, item, text);\n     }\n \n-  gtk_clist_columns_autosize (GTK_CLIST (list));\n+  gtk_clist_columns_autosize (list);\n   gdk_threads_leave ();\n-\n-  NSA_SET_PTR (env, obj, sw);\n }\n \n JNIEXPORT void JNICALL\n@@ -326,9 +317,9 @@ static void\n item_select (GtkCList *list __attribute__((unused)),\n \t     int row, int col __attribute__((unused)),\n \t     GdkEventButton *event __attribute__((unused)), \n-\t     jobject *peer_obj)\n+\t     jobject peer_obj)\n {\n-  (*gdk_env)->CallVoidMethod (gdk_env, *peer_obj,\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer_obj,\n \t\t\t      postListItemEventID,\n \t\t\t      row,\n \t\t\t      (jint) AWT_ITEM_SELECTED);\n@@ -339,25 +330,11 @@ item_unselect (GtkCList *list __attribute__((unused)),\n \t       int row,\n \t       int col __attribute__((unused)),\n \t       GdkEventButton *event __attribute__((unused)),\n-\t       jobject *peer_obj)\n+\t       jobject peer_obj)\n {\n-  (*gdk_env)->CallVoidMethod (gdk_env, *peer_obj,\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer_obj,\n \t\t\t      postListItemEventID,\n \t\t\t      row,\n \t   \t\t      (jint) AWT_ITEM_DESELECTED);\n }\n \n-static void\n-connect_selectable_hook (JNIEnv *env, jobject peer_obj, GtkCList *list)\n-{\n-  jobject *obj;\n-\n-  obj = (jobject *) malloc (sizeof (jobject));\n-  *obj = (*env)->NewGlobalRef (env, peer_obj);\n-\n-  gtk_signal_connect (GTK_OBJECT (list), \"select_row\", \n-\t\t      GTK_SIGNAL_FUNC (item_select), obj);\n-\n-  gtk_signal_connect (GTK_OBJECT (list), \"unselect_row\", \n-\t\t      GTK_SIGNAL_FUNC (item_unselect), obj);\n-}"}, {"sha": "f7c704110b7db41609b5769c92afc6c4c50109f6", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -109,6 +109,6 @@ connect_activate_hook (JNIEnv *env, jobject peer_obj, GtkMenuItem *item)\n   obj = (jobject *) malloc (sizeof (jobject));\n   *obj = (*env)->NewGlobalRef (env, peer_obj);\n \n-  gtk_signal_connect (GTK_OBJECT (item), \"activate\", \n+  g_signal_connect (G_OBJECT (item), \"activate\", \n \t\t      GTK_SIGNAL_FUNC (item_activate), obj);\n }"}, {"sha": "3de02d54f852f8595139d05cc8c99769e68ca695", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -66,7 +66,7 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuPeer_setupAccelGroup\n       if (GTK_WIDGET_REALIZED (GTK_WIDGET (ptr1)))\n \taccel_attach (GTK_MENU_ITEM (ptr1), NULL);\n       else\n-\tgtk_signal_connect (GTK_OBJECT (ptr1),\n+\tg_signal_connect (G_OBJECT (ptr1),\n \t\t\t    \"realize\",\n \t\t\t    GTK_SIGNAL_FUNC (accel_attach), \n \t\t\t    NULL);"}, {"sha": "72a96c6173666d77cd2620e017ec1e91161544b6", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -37,6 +37,7 @@ exception statement from your version. */\n \n \n #include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkPanelPeer.h\"\n \n JNIEXPORT void JNICALL \n@@ -61,7 +62,7 @@ struct _GtkLayoutChild {\n };\n \n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectHooks\n+Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectJObject\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n@@ -72,9 +73,26 @@ Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectHooks\n   gtk_widget_realize (GTK_WIDGET (ptr));\n   connect_awt_hook (env, obj, 1, GTK_LAYOUT (ptr)->bin_window);\n \n-/*    gtk_signal_connect (GTK_OBJECT (ptr), \"size_request\", GTK_SIGNAL_FUNC (sr), */\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectSignals\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+\n+/*    g_signal_connect (G_OBJECT (ptr), \"size_request\", GTK_SIGNAL_FUNC (sr), */\n /*  \t\t      NULL); */\n   gdk_threads_leave ();\n+\n+  /* Connect the superclass signals.  */\n+  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n }\n \n /*"}, {"sha": "1b56d08317f110d80dc8b1f37f9b10ecd524bc1a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -37,6 +37,7 @@ exception statement from your version. */\n \n \n #include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkScrollbarPeer.h\"\n \n struct range_scrollbar\n@@ -120,7 +121,24 @@ Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_create\n }\n \n JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectHooks\n+Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectJObject\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+\n+  connect_awt_hook (env, obj, 1, GTK_SCROLLBAR (ptr)->range);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n@@ -136,17 +154,19 @@ Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectHooks\n   rs->range = GTK_RANGE (ptr);\n   rs->scrollbar = (jobject *) malloc (sizeof (jobject));\n   *(rs->scrollbar) = (*env)->NewGlobalRef (env, obj);\n-  gtk_signal_connect (GTK_OBJECT (GTK_RANGE (ptr)), \n+\n+  g_signal_connect (G_OBJECT (GTK_RANGE (ptr)), \n \t\t      \"move-slider\", \n \t\t      GTK_SIGNAL_FUNC (post_adjustment_event), rs);\n \n-  gtk_signal_connect (GTK_OBJECT (GTK_RANGE (ptr)), \n+  g_signal_connect (G_OBJECT (GTK_RANGE (ptr)), \n \t\t      \"value-changed\", \n \t\t      GTK_SIGNAL_FUNC (post_change_event), rs);\n \n-\n-  connect_awt_hook (env, obj, 1, GTK_SCROLLBAR (ptr)->range);\n   gdk_threads_leave ();\n+\n+  /* Connect the superclass signals.  */\n+  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n }\n \n "}, {"sha": "69e8b0abc49e30112e3ddd40d454bb7d11db629a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -48,7 +48,7 @@ static void textcomponent_changed_cb (GtkEditable *editable,\n                                   jobject peer);\n \n JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectHooks\n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n@@ -66,6 +66,11 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectHooks\n \n       g_signal_connect (GTK_EDITABLE (ptr), \"changed\",\n                         G_CALLBACK (textcomponent_changed_cb), obj);\n+\n+      gdk_threads_leave ();\n+\n+      /* Connect the superclass signals.  */\n+      Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n     }\n   else\n     {\n@@ -87,13 +92,18 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectHooks\n           if (buf)\n             g_signal_connect (buf, \"changed\",\n                               G_CALLBACK (textcomponent_changed_cb), obj);\n-\t}\n-    }\n \n-  gdk_threads_leave ();\n+          /* Connect the superclass signals.  */\n+          /* FIXME: Cannot do that here or it will get the sw and not the list.\n+             We must a generic way of doing this. */\n+          /* Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env,\n+\t                                                                 peer_obj); */\n+          g_signal_connect (GTK_OBJECT (text), \"event\", \n+                    G_CALLBACK (pre_event_handler), obj);\n \n-  /* Connect the superclass hooks.  */\n-  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks (env, obj);\n+          gdk_threads_leave ();\n+\t}\n+    }\n }\n \n JNIEXPORT jint JNICALL "}, {"sha": "3986a1fd22c04029ee155955f1cf1821be67a9a2", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -37,6 +37,7 @@ exception statement from your version. */\n \n \n #include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkWindowPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkFramePeer.h\"\n #include <gdk/gdkprivate.h>\n@@ -116,7 +117,8 @@ Java_gnu_java_awt_peer_gtk_GtkWindowPeer_create\n   NSA_SET_PTR (env, obj, window_widget);\n }\n \n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_nativeSetVisible\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_nativeSetVisible\n   (JNIEnv *env, jobject obj, jboolean visible)\n {\n   void *ptr;\n@@ -135,7 +137,8 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_nativeSetVisible\n   gdk_threads_leave ();\n }\n \n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectHooks\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectJObject\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n@@ -169,6 +172,21 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectHooks\n \n   connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n \n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectSignals\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  gtk_widget_realize (ptr);\n+\n   /* Connect signals for window event support. */\n   g_signal_connect (G_OBJECT (ptr), \"delete-event\",\n \t\t    G_CALLBACK (window_delete_cb), obj);\n@@ -189,6 +207,9 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectHooks\n \t\t    G_CALLBACK (window_window_state_cb), obj);\n \n   gdk_threads_leave ();\n+\n+  /* Connect the superclass signals.  */\n+  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n }\n \n /*"}, {"sha": "55d5e3dce21b27ffef5547afa070443f6650fb2b", "filename": "libjava/jni/gtk-peer/gtkpeer.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/834b1209074da1983d7688ba5eebb54e9c9920ef/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h?ref=834b1209074da1983d7688ba5eebb54e9c9920ef", "patch": "@@ -392,6 +392,10 @@ extern GtkWindowGroup *global_gtk_window_group;\n \n void awt_event_handler (GdkEvent *event);\n \n+gboolean pre_event_handler (GtkWidget *widget,\n+                               GdkEvent *event,\n+\t\t\t       jobject peer);\n+\n void connect_awt_hook (JNIEnv *env, jobject peer_obj, int nwindows, ...);\n \n void set_visible (GtkWidget *widget, jboolean visible);"}]}