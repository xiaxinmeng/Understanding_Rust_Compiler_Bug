{"sha": "3ee4bf774c517b25baaec0863550ab6c52f4b120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlNGJmNzc0YzUxN2IyNWJhYWVjMDg2MzU1MGFiNmM1MmY0YjEyMA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-17T14:13:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-17T14:13:12Z"}, "message": "Merge #377\n\n377: Fix crash when mapping of Generic argument changes. r=philberty a=philberty\n\nWhen we have a struct Foo <T>(T) but the fntype in impl block is different\r\nfn <X> Bar(a:X) -> Foo<X>(X) { } we must take advantage of the adjustment\r\ncode in the substitution mapper.\r\n\r\nThis affects MethodCallExpr and PathInExpressions where it used to resolve\r\nthe root segment and leave the arguments as inference variables when we\r\nlack a segement with generic arguments.\r\n\r\nThis also fixes a bug in name resolution where the Self keyword resolved\r\nto the struct/type the impl block resolves to but it needed to resolve\r\nto the impl block type explicitly which ensures the parameter mappings\r\nreflect what the parent impl block is.\r\n\r\nFixes: #376\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "df68e45a223e5bf57353118fc780a3f0ce037c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df68e45a223e5bf57353118fc780a3f0ce037c45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ee4bf774c517b25baaec0863550ab6c52f4b120", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgeuz4CRBK7hj4Ov3rIwAA9hoIABUgccmXPTvyU9kiJ8A2ZepG\nFjMw/wqFzkTAHkcsRjFT/FhnvNgjzkYXI2mpIT0Ua2hx+NOmLNbeK3O+7GIEseQ8\nIB5O74dT/bYlLrrb77CU0KJTHYEOJxRFoxwHZ41LkG/EtQzURvJk3jEA+tBOzg7U\ntEOywp7nDxViUsYvDQklCIkWSfWQ/6EpI817ZIj5ObwEmDBezI375aGczTry6GR6\nmuKLi/5vDiDwJ88dyBfPFi4cITfBqD+2I49A7JPVSw+ofaBg5V8+4NVdcSNWXvzm\nWx50sURbB2ZKDMAieQhf9ClzQQc/L0tNjjSWfFn9cWGk9Zt0+4QlmCI9KJOZNPk=\n=/ewQ\n-----END PGP SIGNATURE-----\n", "payload": "tree df68e45a223e5bf57353118fc780a3f0ce037c45\nparent 935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c\nparent ee247029acfaee991660ff14c85f7146b9040511\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618668792 +0000\ncommitter GitHub <noreply@github.com> 1618668792 +0000\n\nMerge #377\n\n377: Fix crash when mapping of Generic argument changes. r=philberty a=philberty\n\nWhen we have a struct Foo <T>(T) but the fntype in impl block is different\r\nfn <X> Bar(a:X) -> Foo<X>(X) { } we must take advantage of the adjustment\r\ncode in the substitution mapper.\r\n\r\nThis affects MethodCallExpr and PathInExpressions where it used to resolve\r\nthe root segment and leave the arguments as inference variables when we\r\nlack a segement with generic arguments.\r\n\r\nThis also fixes a bug in name resolution where the Self keyword resolved\r\nto the struct/type the impl block resolves to but it needed to resolve\r\nto the impl block type explicitly which ensures the parameter mappings\r\nreflect what the parent impl block is.\r\n\r\nFixes: #376\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee4bf774c517b25baaec0863550ab6c52f4b120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee4bf774c517b25baaec0863550ab6c52f4b120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee4bf774c517b25baaec0863550ab6c52f4b120/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c"}, {"sha": "ee247029acfaee991660ff14c85f7146b9040511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee247029acfaee991660ff14c85f7146b9040511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee247029acfaee991660ff14c85f7146b9040511"}], "stats": {"total": 169, "additions": 141, "deletions": 28}, "files": [{"sha": "27f53055a12274ed5cd0518823aa44f58cad3b0f", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -186,14 +186,15 @@ class ResolveItem : public ResolverBase\n     if (resolved_node == UNKNOWN_NODEID)\n       return;\n \n-    auto Self = CanonicalPath::get_big_self ();\n     resolver->get_type_scope ().insert (\n-      Self, resolved_node, impl_block.get_type ()->get_locus_slow ());\n+      CanonicalPath::get_big_self (), impl_block.get_type ()->get_node_id (),\n+      impl_block.get_type ()->get_locus_slow ());\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       impl_item->accept_vis (*this);\n \n-    resolver->get_type_scope ().peek ()->clear_name (Self, resolved_node);\n+    resolver->get_type_scope ().peek ()->clear_name (\n+      CanonicalPath::get_big_self (), impl_block.get_type ()->get_node_id ());\n     resolver->get_type_scope ().pop ();\n   }\n \n@@ -208,7 +209,7 @@ class ResolveItem : public ResolverBase\n     resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n     resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n \n-    // self turns into self: Self as a function param\n+    // self turns into (self: Self) as a function param\n     AST::SelfParam &self_param = method.get_self_param ();\n     AST::IdentifierPattern self_pattern (\n       self_param.get_node_id (), \"self\", self_param.get_locus (),"}, {"sha": "bdc6df30e7b20e6abe6ea4dca19b40fd14d17c0e", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -251,8 +251,10 @@ class TypeCheckExpr : public TypeCheckBase\n \t    if (adt->has_substitutions () && fn->needs_substitution ())\n \t      {\n \t\trust_assert (adt->was_substituted ());\n+\t\tauto used_args_in_prev_segment = GetUsedSubstArgs::From (adt);\n \t\tlookup\n-\t\t  = fn->handle_substitions (adt->get_substitution_arguments ());\n+\t\t  = SubstMapperInternal::Resolve (fn,\n+\t\t\t\t\t\t  used_args_in_prev_segment);\n \t      }\n \t  }\n       }\n@@ -767,10 +769,15 @@ class TypeCheckExpr : public TypeCheckBase\n       return;\n     else if (expr.get_num_segments () == 1)\n       {\n+\tLocation locus = expr.get_segments ().back ().get_locus ();\n+\tif (tyseg->needs_generic_substitutions ())\n+\t  tyseg = SubstMapper::InferSubst (tyseg, locus);\n+\n \tinfered = tyseg;\n \treturn;\n       }\n \n+    TyTy::BaseType *prev_segment = tyseg;\n     NodeId resolved_node_id = UNKNOWN_NODEID;\n     for (size_t i = 1; i < expr.get_num_segments (); i++)\n       {\n@@ -792,11 +799,11 @@ class TypeCheckExpr : public TypeCheckBase\n \t  }\n \n \tauto candidate = candidates.at (0);\n+\tprev_segment = tyseg;\n \ttyseg = candidate.ty;\n \tresolved_node_id\n \t  = candidate.impl_item->get_impl_mappings ().get_nodeid ();\n \n-\tbool did_substitute = false;\n \tif (seg.has_generic_args ())\n \t  {\n \t    if (!tyseg->can_substitute ())\n@@ -807,23 +814,30 @@ class TypeCheckExpr : public TypeCheckBase\n \t\treturn;\n \t      }\n \n-\t    did_substitute = true;\n \t    tyseg = SubstMapper::Resolve (tyseg, expr.get_locus (),\n \t\t\t\t\t  &seg.get_generic_args ());\n-\n \t    if (tyseg->get_kind () == TyTy::TypeKind::ERROR)\n \t      return;\n \t  }\n+      }\n+\n+    if (tyseg->needs_generic_substitutions ())\n+      {\n+\tLocation locus = expr.get_segments ().back ().get_locus ();\n+\tif (!prev_segment->needs_generic_substitutions ())\n+\t  {\n+\t    auto used_args_in_prev_segment\n+\t      = GetUsedSubstArgs::From (prev_segment);\n+\t    tyseg\n+\t      = SubstMapperInternal::Resolve (tyseg, used_args_in_prev_segment);\n+\t  }\n \telse\n \t  {\n-\t    if (tyseg->needs_generic_substitutions ())\n-\t      {\n-\t\tdid_substitute = true;\n-\t\ttyseg = SubstMapper::InferSubst (tyseg, expr.get_locus ());\n-\t\tif (tyseg->get_kind () == TyTy::TypeKind::ERROR)\n-\t\t  return;\n-\t      }\n+\t    tyseg = SubstMapper::InferSubst (tyseg, locus);\n \t  }\n+\n+\tif (tyseg->get_kind () == TyTy::TypeKind::ERROR)\n+\t  return;\n       }\n \n     rust_assert (resolved_node_id != UNKNOWN_NODEID);\n@@ -1027,10 +1041,6 @@ class TypeCheckExpr : public TypeCheckBase\n \tlookup = SubstMapper::Resolve (lookup, expr.get_locus (),\n \t\t\t\t       &root.get_generic_args ());\n       }\n-    else if (lookup->needs_generic_substitutions ())\n-      {\n-\tlookup = SubstMapper::InferSubst (lookup, expr.get_locus ());\n-      }\n \n     return lookup;\n   }\n@@ -1089,7 +1099,7 @@ class TypeCheckExpr : public TypeCheckBase\n   TyTy::BaseType *infered_array_elems;\n \n   bool inside_loop;\n-};\n+}; // namespace Resolver\n \n } // namespace Resolver\n } // namespace Rust"}, {"sha": "04fffd71d3d88e25fb038a19cdb7bf96d751a514", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -195,14 +195,14 @@ class TypeCheckType : public TypeCheckBase\n \t\t      \"the type %s does not have any\",\n \t\t      path.as_string ().c_str (),\n \t\t      translated->as_string ().c_str ());\n-\t\t    return;\n \t\t  }\n \t      }\n \t    else if (translated->has_subsititions_defined ())\n \t      {\n \t\ttranslated\n-\t\t  = SubstMapper::Resolve (translated, path.get_locus ());\n+\t\t  = SubstMapper::InferSubst (translated, path.get_locus ());\n \t      }\n+\n \t    return;\n \t  }\n       }"}, {"sha": "bc20e4b3011c93c6cf61daf18a83350373a72aa2", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -223,6 +223,48 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   TyTy::BaseType *resolved;\n };\n \n+class GetUsedSubstArgs : public TyTy::TyVisitor\n+{\n+public:\n+  static TyTy::SubstitutionArgumentMappings From (TyTy::BaseType *from)\n+  {\n+    GetUsedSubstArgs mapper;\n+    from->accept_vis (mapper);\n+    return mapper.args;\n+  }\n+\n+  void visit (TyTy::FnType &type) override\n+  {\n+    args = type.get_substitution_arguments ();\n+  }\n+\n+  void visit (TyTy::ADTType &type) override\n+  {\n+    args = type.get_substitution_arguments ();\n+  }\n+\n+  void visit (TyTy::InferType &) override { gcc_unreachable (); }\n+  void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n+  void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n+  void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n+  void visit (TyTy::IntType &) override { gcc_unreachable (); }\n+  void visit (TyTy::UintType &) override { gcc_unreachable (); }\n+  void visit (TyTy::FloatType &) override { gcc_unreachable (); }\n+  void visit (TyTy::USizeType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ISizeType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n+  void visit (TyTy::CharType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n+  void visit (TyTy::StrType &) override { gcc_unreachable (); }\n+\n+private:\n+  GetUsedSubstArgs () : args (TyTy::SubstitutionArgumentMappings::error ()) {}\n+\n+  TyTy::SubstitutionArgumentMappings args;\n+};\n+\n } // namespace Resolver\n } // namespace Rust\n "}, {"sha": "b195e5ccbedadfa2a72507834d164c91e7136341", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -776,13 +776,22 @@ class ParamCmp : public BaseCmp\n     bool ok = context->lookup_type (base->get_ty_ref (), &lookup);\n     rust_assert (ok);\n \n+    if (lookup->get_kind () == TypeKind::PARAM)\n+      {\n+\tInferType infer (UNKNOWN_HIRID, InferType::InferTypeKind::GENERAL);\n+\treturn infer.can_eq (other);\n+      }\n+\n     return lookup->can_eq (other);\n   }\n \n-  void visit (ParamType &type) override\n-  {\n-    ok = base->get_symbol ().compare (type.get_symbol ()) == 0;\n-  }\n+  // imagine the case where we have:\n+  // struct Foo<T>(T);\n+  // Then we declare a generic impl block\n+  // impl <X>Foo<X> { ... }\n+  // both of these types are compatible so we mostly care about the number of\n+  // generic arguments\n+  void visit (ParamType &type) override { ok = true; }\n \n private:\n   BaseType *get_base () override { return base; }"}, {"sha": "8378cf262f185acceec24faaec3bc5c0ecbdbc35", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -251,10 +251,12 @@ SubstitutionRef::adjust_mappings_for_this (\n   Analysis::Mappings *mappings_table = Analysis::Mappings::get ();\n \n   std::vector<SubstitutionArg> resolved_mappings;\n-  for (auto &subst : substitutions)\n+  for (size_t i = 0; i < substitutions.size (); i++)\n     {\n+      auto &subst = substitutions.at (i);\n+\n       SubstitutionArg arg = SubstitutionArg::error ();\n-      bool ok = mappings.get_argument_for_symbol (subst.get_param_ty (), &arg);\n+      bool ok = mappings.get_argument_at (0, &arg);\n       if (!ok)\n \t{\n \t  rust_error_at (mappings_table->lookup_location (\n@@ -613,6 +615,7 @@ FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n   for (auto &sub : fn->get_substs ())\n     {\n       SubstitutionArg arg = SubstitutionArg::error ();\n+\n       bool ok\n \t= subst_mappings.get_argument_for_symbol (sub.get_param_ty (), &arg);\n       rust_assert (ok);"}, {"sha": "2f343c12c7a545b66a9aea8fcdf3c88a63c43c7b", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -495,6 +495,15 @@ class SubstitutionArgumentMappings\n     return false;\n   }\n \n+  bool get_argument_at (size_t index, SubstitutionArg *argument)\n+  {\n+    if (index > mappings.size ())\n+      return false;\n+\n+    *argument = mappings.at (index);\n+    return true;\n+  }\n+\n   // is_concrete means if the used args is non error, ie: non empty this will\n   // verify if actual real types have been put in place of are they still\n   // ParamTy"}, {"sha": "d52314999b97237c6b75fd13cccfa407a0d9afc4", "filename": "gcc/testsuite/rust.test/compile/generics17.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics17.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics17.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics17.rs?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -0,0 +1,19 @@\n+struct Foo<T>(T);\n+\n+impl<X> Foo<X> {\n+    fn new(a: X) -> Self {\n+        Self(a)\n+    }\n+\n+    fn test(self) -> X {\n+        self.0\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(123);\n+\n+    let b = a.test();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "904cb9a229c39671b32dbed166522e89b433f182", "filename": "gcc/testsuite/rust.test/compile/generics18.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics18.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee4bf774c517b25baaec0863550ab6c52f4b120/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics18.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics18.rs?ref=3ee4bf774c517b25baaec0863550ab6c52f4b120", "patch": "@@ -0,0 +1,20 @@\n+struct Foo<T>(T);\n+\n+impl<X> Foo<X> {\n+    fn new(a: X) -> Self {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        Self(a)\n+    }\n+\n+    fn test(self) -> X {\n+        self.0\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo(123);\n+\n+    let b = a.test();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}]}