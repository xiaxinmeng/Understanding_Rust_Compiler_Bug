{"sha": "f4b049db7028a01ad082f923115e12ade77f917c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiMDQ5ZGI3MDI4YTAxYWQwODJmOTIzMTE1ZTEyYWRlNzdmOTE3Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:52:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:52:53Z"}, "message": "[multiple changes]\n\n2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): Mark generated declaration\n\tof full view analyzed after analyzing the corresponding record\n\tdeclaration, to prevent spurious name conflicts with original\n\tdeclaration.\n\n2010-09-10  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): In the VM case,\n\tjust issue a warning, but continue with the normal processing.\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb, prj-nmsc.adb, sem_ch4.adb, sem_res.adb: Minor\n\treformatting.\n\n2010-09-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_dist.adb (Build_From_Any_Call, Build_To_Any_Call,\n\tBuild_TypeCode_Call): For a subtype inserted for the expansion of a\n\tgeneric actual type, go to the underlying type of the original actual\n\ttype.\n\n2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Assign_Array_Loop): In CodePeer mode, place a\n\tguard around the increment statement, to prevent an off-by-one-value\n\ton the last iteration.\n\nFrom-SVN: r164185", "tree": {"sha": "5d9840bb9f7b88eeda1377a9c0f37b4cbf22919d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9840bb9f7b88eeda1377a9c0f37b4cbf22919d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4b049db7028a01ad082f923115e12ade77f917c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b049db7028a01ad082f923115e12ade77f917c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b049db7028a01ad082f923115e12ade77f917c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b049db7028a01ad082f923115e12ade77f917c/comments", "author": null, "committer": null, "parents": [{"sha": "e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c0dd3985cd70732cdb70bda82a1f30e13a0f41"}], "stats": {"total": 211, "additions": 154, "deletions": 57}, "files": [{"sha": "d0939012b70f3702cfc99724ce54f01738472f80", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -1,3 +1,33 @@\n+2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Mark generated declaration\n+\tof full view analyzed after analyzing the corresponding record\n+\tdeclaration, to prevent spurious name conflicts with original\n+\tdeclaration.\n+\n+2010-09-10  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): In the VM case,\n+\tjust issue a warning, but continue with the normal processing.\n+\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb, prj-nmsc.adb, sem_ch4.adb, sem_res.adb: Minor\n+\treformatting.\n+\n+2010-09-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_dist.adb (Build_From_Any_Call, Build_To_Any_Call,\n+\tBuild_TypeCode_Call): For a subtype inserted for the expansion of a\n+\tgeneric actual type, go to the underlying type of the original actual\n+\ttype.\n+\n+2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array_Loop): In CodePeer mode, place a\n+\tguard around the increment statement, to prevent an off-by-one-value\n+\ton the last iteration.\n+\n 2010-09-10  Vincent Celier  <celier@adacore.com>\n \n \t* sem_aggr.adb, exp_prag.adb, sem_ch3.adb, exp_attr.adb,"}, {"sha": "ab48159b2ac6fbc9a41dac2b92ec1592859170be", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -5519,9 +5519,11 @@ package body Exp_Attr is\n       --  the compiler will generate in-place stream routines for string types\n       --  that appear in GNAT's library, but will generate calls via rtsfind\n       --  to library routines for user code.\n+\n       --  ??? For now, disable this code for JVM, since this generates a\n       --  VerifyError exception at run time on e.g. c330001.\n-      --  This is disabled for AAMP, to avoid making dependences on files not\n+\n+      --  This is disabled for AAMP, to avoid creating dependences on files not\n       --  supported in the AAMP library (such as s-fileio.adb).\n \n       if VM_Target /= JVM_Target"}, {"sha": "ec37bf548ae159e0c3a89a746e534b47167d06fe", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -1007,6 +1007,55 @@ package body Exp_Ch5 is\n       F_Or_L : Name_Id;\n       S_Or_P : Name_Id;\n \n+      function Build_Step (J : Nat) return Node_Id;\n+      --  Note that on the last iteration of the loop, the index is increased\n+      --  past the upper bound. This is consistent with the C semantics of the\n+      --  back-end, where such an off-by-one value on a dead variable is OK.\n+      --  However, in CodePeer mode this leads to spurious warnings, and thus\n+      --  we place a guard around the attribute reference.\n+\n+      ----------------\n+      -- Build_Step --\n+      ----------------\n+\n+      function Build_Step (J : Nat) return Node_Id is\n+         Step : Node_Id;\n+         Lim  : Name_Id;\n+\n+      begin\n+         if Rev then\n+            Lim := Name_First;\n+         else\n+            Lim := Name_Last;\n+         end if;\n+\n+         Step :=\n+            Make_Assignment_Statement (Loc,\n+               Name => New_Occurrence_Of (Rnn (J), Loc),\n+               Expression =>\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix =>\n+                     New_Occurrence_Of (R_Index_Type (J), Loc),\n+                   Attribute_Name => S_Or_P,\n+                   Expressions => New_List (\n+                     New_Occurrence_Of (Rnn (J), Loc))));\n+\n+         if CodePeer_Mode then\n+            Step :=\n+              Make_If_Statement (Loc,\n+                 Condition =>\n+                    Make_Op_Ne (Loc,\n+                       Left_Opnd  => New_Occurrence_Of (Lnn (J), Loc),\n+                       Right_Opnd =>\n+                         Make_Attribute_Reference (Loc,\n+                           Prefix => New_Occurrence_Of (L_Index_Type (J), Loc),\n+                           Attribute_Name => Lim)),\n+                 Then_Statements => New_List (Step));\n+         end if;\n+\n+         return Step;\n+      end Build_Step;\n+\n    begin\n       if Rev then\n          F_Or_L := Name_Last;\n@@ -1103,18 +1152,7 @@ package body Exp_Ch5 is\n                            Discrete_Subtype_Definition =>\n                              New_Reference_To (L_Index_Type (J), Loc))),\n \n-                   Statements => New_List (\n-                     Assign,\n-\n-                     Make_Assignment_Statement (Loc,\n-                       Name => New_Occurrence_Of (Rnn (J), Loc),\n-                       Expression =>\n-                         Make_Attribute_Reference (Loc,\n-                           Prefix =>\n-                             New_Occurrence_Of (R_Index_Type (J), Loc),\n-                           Attribute_Name => S_Or_P,\n-                           Expressions => New_List (\n-                             New_Occurrence_Of (Rnn (J), Loc)))))))));\n+                   Statements => New_List (Assign, Build_Step (J))))));\n       end loop;\n \n       return Assign;"}, {"sha": "6f23a8354bb6e300ce5a78baefe385c149cd7973", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -8427,6 +8427,15 @@ package body Exp_Dist is\n \n             Fnam := Find_Inherited_TSS (U_Type, TSS_From_Any);\n \n+            --  For the subtype representing a generic actual type, go to the\n+            --  actual type.\n+\n+            if Is_Generic_Actual_Type (U_Type) then\n+               U_Type := Underlying_Type (Base_Type (U_Type));\n+            end if;\n+\n+            --  For a standard subtype, go to the base type\n+\n             if Sloc (U_Type) <= Standard_Location then\n                U_Type := Base_Type (U_Type);\n             end if;\n@@ -8516,13 +8525,6 @@ package body Exp_Dist is\n                   Decl : Entity_Id;\n \n                begin\n-                  --  For the subtype representing a generic actual type, go\n-                  --  to the base type.\n-\n-                  if Is_Generic_Actual_Type (U_Type) then\n-                     U_Type := Base_Type (U_Type);\n-                  end if;\n-\n                   Build_From_Any_Function (Loc, U_Type, Decl, Fnam);\n                   Append_To (Decls, Decl);\n                end;\n@@ -9240,12 +9242,14 @@ package body Exp_Dist is\n \n             Fnam := Find_Inherited_TSS (U_Type, TSS_To_Any);\n \n-            --  Check first for Boolean and Character. These are enumeration\n-            --  types, but we treat them specially, since they may require\n-            --  special handling in the transfer protocol. However, this\n-            --  special handling only applies if they have standard\n-            --  representation, otherwise they are treated like any other\n-            --  enumeration type.\n+            --  For the subtype representing a generic actual type, go to the\n+            --  actual type.\n+\n+            if Is_Generic_Actual_Type (U_Type) then\n+               U_Type := Underlying_Type (Base_Type (U_Type));\n+            end if;\n+\n+            --  For a standard subtype, go to the base type\n \n             if Sloc (U_Type) <= Standard_Location then\n                U_Type := Base_Type (U_Type);\n@@ -9254,6 +9258,13 @@ package body Exp_Dist is\n             if Present (Fnam) then\n                null;\n \n+            --  Check first for Boolean and Character. These are enumeration\n+            --  types, but we treat them specially, since they may require\n+            --  special handling in the transfer protocol. However, this\n+            --  special handling only applies if they have standard\n+            --  representation, otherwise they are treated like any other\n+            --  enumeration type.\n+\n             elsif U_Type = Standard_Boolean then\n                Lib_RE := RE_TA_B;\n \n@@ -9380,14 +9391,11 @@ package body Exp_Dist is\n             Decls : constant List_Id := New_List;\n             Stms  : constant List_Id := New_List;\n \n-            Expr_Parameter : constant Entity_Id :=\n-                               Make_Defining_Identifier (Loc, Name_E);\n-\n-            Any : constant Entity_Id :=\n-                    Make_Defining_Identifier (Loc, Name_A);\n+            Expr_Parameter : Entity_Id;\n+            Any            : Entity_Id;\n+            Result_TC      : Node_Id;\n \n             Any_Decl  : Node_Id;\n-            Result_TC : Node_Id := Build_TypeCode_Call (Loc, Typ, Decls);\n \n             Use_Opaque_Representation : Boolean;\n             --  When True, use stream attributes and represent type as an\n@@ -9402,12 +9410,16 @@ package body Exp_Dist is\n             if Is_Itype (Typ) and then Typ /= Base_Type (Typ) then\n                Build_To_Any_Function\n                   (Loc  => Loc,\n-                  Typ  => Etype (Typ),\n-                  Decl => Decl,\n-                  Fnam => Fnam);\n+                   Typ  => Etype (Typ),\n+                   Decl => Decl,\n+                   Fnam => Fnam);\n                return;\n             end if;\n \n+            Expr_Parameter := Make_Defining_Identifier (Loc, Name_E);\n+            Any            := Make_Defining_Identifier (Loc, Name_A);\n+            Result_TC      := Build_TypeCode_Call (Loc, Typ, Decls);\n+\n             Fnam := Make_Helper_Function_Name (Loc, Typ, Name_To_Any);\n \n             Spec :=\n@@ -10017,15 +10029,20 @@ package body Exp_Dist is\n                Fnam := Find_Inherited_TSS (U_Type, TSS_TypeCode);\n             end if;\n \n-            if No (Fnam) then\n-               if Sloc (U_Type) <= Standard_Location then\n+            --  For the subtype representing a generic actual type, go to the\n+            --  actual type.\n \n-                  --  Do not try to build alias typecodes for subtypes from\n-                  --  Standard.\n+            if Is_Generic_Actual_Type (U_Type) then\n+               U_Type := Underlying_Type (Base_Type (U_Type));\n+            end if;\n \n-                  U_Type := Base_Type (U_Type);\n-               end if;\n+            --  For a standard subtype, go to the base type\n \n+            if Sloc (U_Type) <= Standard_Location then\n+               U_Type := Base_Type (U_Type);\n+            end if;\n+\n+            if No (Fnam) then\n                if U_Type = Standard_Boolean then\n                   Lib_RE := RE_TC_B;\n "}, {"sha": "af9a62227b7dc147cc109be13cbab5b227ed5e06", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -5220,6 +5220,7 @@ package body Prj.Nmsc is\n                end if;\n \n                if not Has_Error then\n+\n                   --  We have an existing directory, we register it and all of\n                   --  its subdirectories.\n \n@@ -5263,8 +5264,10 @@ package body Prj.Nmsc is\n                end if;\n \n                if not Has_Error then\n-                  --  links have been resolved if necessary, and Path_Name\n-                  --  always ends with a directory separator\n+\n+                  --  Links have been resolved if necessary, and Path_Name\n+                  --  always ends with a directory separator.\n+\n                   Add_To_Or_Remove_From_Source_Dirs\n                     (Path_Id         => Path_Name.Name,\n                      Display_Path_Id => Path_Name.Display_Name,"}, {"sha": "45453e650aa1d5e41fd6dbcc934b0f5bf093a114", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -1532,17 +1532,16 @@ package body Sem_Ch13 is\n                Error_Msg_N\n                  (\"size cannot be given for unconstrained array\", Nam);\n \n-            elsif VM_Target /= No_VM then\n-\n-               --  Size clauses are ignored for VM targets. Display a warning\n-               --  unless we are in GNAT mode, in which case this is useless.\n+            elsif Size /= No_Uint then\n \n-               if not GNAT_Mode then\n+               if VM_Target /= No_VM and then not GNAT_Mode then\n+                  --  Size clause is not handled properly on VM targets.\n+                  --  Display a warning unless we are in GNAT mode, in which\n+                  --  case this is useless.\n                   Error_Msg_N\n                     (\"?size clauses are ignored in this configuration\", N);\n                end if;\n \n-            elsif Size /= No_Uint then\n                if Is_Type (U_Ent) then\n                   Etyp := U_Ent;\n                else"}, {"sha": "9662357e80788e526c999cc5686b7c1c09ea5eed", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -5843,6 +5843,7 @@ package body Sem_Ch3 is\n                Full_Der  := New_Copy (Derived_Type);\n                Set_Comes_From_Source (Full_Decl, False);\n                Set_Comes_From_Source (Full_Der, False);\n+               Set_Parent (Full_Der, Full_Decl);\n \n                Insert_After (N, Full_Decl);\n \n@@ -5916,9 +5917,16 @@ package body Sem_Ch3 is\n                Set_Defining_Identifier (Full_Decl, Full_Der);\n                Build_Derived_Record_Type\n                  (Full_Decl, Parent_Type, Full_Der, Derive_Subps);\n-               Set_Analyzed (Full_Decl);\n             end if;\n \n+            --  The full declaration has been introduced into the tree and\n+            --  processed in the step above. It should not be analyzed again\n+            --  (when encountered later in the current list of declarations)\n+            --  to prevent spurious name conflicts. The full entity remains\n+            --  invisible.\n+\n+            Set_Analyzed (Full_Decl);\n+\n             if Swapped then\n                Uninstall_Declarations (Par_Scope);\n "}, {"sha": "4ba25d02936a357d0739f1ca459485aae6212959", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -3941,12 +3941,11 @@ package body Sem_Ch4 is\n          else\n             if Ekind (Prefix_Type) = E_Record_Subtype then\n \n-               --  Check whether this is a component of the base type\n-               --  which is absent from a statically constrained subtype.\n-               --  This will raise constraint error at run time, but is\n-               --  not a compile-time error. When the selector is illegal\n-               --  for base type as well fall through and generate a\n-               --  compilation error anyway.\n+               --  Check whether this is a component of the base type which\n+               --  is absent from a statically constrained subtype. This will\n+               --  raise constraint error at run time, but is not a compile-\n+               --  time error. When the selector is illegal for base type as\n+               --  well fall through and generate a compilation error anyway.\n \n                Comp := First_Component (Base_Type (Prefix_Type));\n                while Present (Comp) loop"}, {"sha": "7cca8abe46368add082b5baca12a6ce81380e131", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b049db7028a01ad082f923115e12ade77f917c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f4b049db7028a01ad082f923115e12ade77f917c", "patch": "@@ -68,7 +68,7 @@ with Sem_Util; use Sem_Util;\n with Sem_Type; use Sem_Type;\n with Sem_Warn; use Sem_Warn;\n with Sinfo;    use Sinfo;\n-with Sinfo.CN;    use Sinfo.CN;\n+with Sinfo.CN; use Sinfo.CN;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n@@ -1066,6 +1066,7 @@ package body Sem_Res is\n       --  Rewrite as call if overloadable entity that is (or could be, in the\n       --  overloaded case) a function call. If we know for sure that the entity\n       --  is an enumeration literal, we do not rewrite it.\n+\n       --  If the entity is the name of an operator, it cannot be a call because\n       --  operators cannot have default parameters. In this case, this must be\n       --  a string whose contents coincide with an operator name. Set the kind"}]}