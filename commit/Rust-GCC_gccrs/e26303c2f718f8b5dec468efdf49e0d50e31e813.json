{"sha": "e26303c2f718f8b5dec468efdf49e0d50e31e813", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2MzAzYzJmNzE4ZjhiNWRlYzQ2OGVmZGY0OWUwZDUwZTMxZTgxMw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-04-17T21:27:57Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-04-17T21:27:57Z"}, "message": "dwarf2out.c (free_AT): Delete.\n\n\t* dwarf2out.c (free_AT): Delete.\n\t(remove_AT): Update string ref counts.\n\t(remove_child_TAG): Don't call free_die.\n\t(free_die): Delete.\n\t(break_out_includes): Don't call free_die on DW_TAG_GNU_BINCL\n\tor DW_TAG_GNU_EINCL.\n\t(prune_unused_types_walk_attribs): Reset string refcounts.\n\t(prune_unused_types_update_strings): New.\n\t(prune_unused_types_prune): Don't make unnecessary stores.  Don't\n\tcall free_die.  Do call prune_unused_types_update_strings.\n\t(prune_unused_types): Empty debug_str_hash.\n\nFrom-SVN: r113012", "tree": {"sha": "25abddfe72573ab172094c7749da0960c05b3ab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25abddfe72573ab172094c7749da0960c05b3ab6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e26303c2f718f8b5dec468efdf49e0d50e31e813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26303c2f718f8b5dec468efdf49e0d50e31e813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26303c2f718f8b5dec468efdf49e0d50e31e813", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26303c2f718f8b5dec468efdf49e0d50e31e813/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c60fe329d5e7273d8d7bef718244f72276124ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60fe329d5e7273d8d7bef718244f72276124ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60fe329d5e7273d8d7bef718244f72276124ded"}], "stats": {"total": 133, "additions": 70, "deletions": 63}, "files": [{"sha": "665266ccf16d68ffe716a23c3f2b2743476e7a92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26303c2f718f8b5dec468efdf49e0d50e31e813/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26303c2f718f8b5dec468efdf49e0d50e31e813/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e26303c2f718f8b5dec468efdf49e0d50e31e813", "patch": "@@ -1,3 +1,17 @@\n+2006-04-17  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* dwarf2out.c (free_AT): Delete.\n+\t(remove_AT): Update string ref counts.\n+\t(remove_child_TAG): Don't call free_die.\n+\t(free_die): Delete.\n+\t(break_out_includes): Don't call free_die on DW_TAG_GNU_BINCL\n+\tor DW_TAG_GNU_EINCL.\n+\t(prune_unused_types_walk_attribs): Reset string refcounts.\n+\t(prune_unused_types_update_strings): New.\n+\t(prune_unused_types_prune): Don't make unnecessary stores.  Don't\n+\tcall free_die.  Do call prune_unused_types_update_strings.\n+\t(prune_unused_types): Empty debug_str_hash.\n+\n 2006-04-17  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.c (expand_assignment): Optimize away no-op moves where the"}, {"sha": "818ddb8f67185ca311299a8044a78af5c429f549", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 56, "deletions": 63, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e26303c2f718f8b5dec468efdf49e0d50e31e813/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e26303c2f718f8b5dec468efdf49e0d50e31e813/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e26303c2f718f8b5dec468efdf49e0d50e31e813", "patch": "@@ -4027,7 +4027,6 @@ static bool is_fortran (void);\n static bool is_ada (void);\n static void remove_AT (dw_die_ref, enum dwarf_attribute);\n static void remove_child_TAG (dw_die_ref, enum dwarf_tag);\n-static inline void free_die (dw_die_ref);\n static void add_child_die (dw_die_ref, dw_die_ref);\n static dw_die_ref new_die (enum dwarf_tag, dw_die_ref, tree);\n static dw_die_ref lookup_type_die (tree);\n@@ -5382,17 +5381,6 @@ is_ada (void)\n   return lang == DW_LANG_Ada95 || lang == DW_LANG_Ada83;\n }\n \n-/* Free up the memory used by A.  */\n-\n-static inline void free_AT (dw_attr_ref);\n-static inline void\n-free_AT (dw_attr_ref a)\n-{\n-  if (AT_class (a) == dw_val_class_str)\n-    if (a->dw_attr_val.v.val_str->refcount)\n-      a->dw_attr_val.v.val_str->refcount--;\n-}\n-\n /* Remove the specified attribute if present.  */\n \n static void\n@@ -5407,7 +5395,10 @@ remove_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n   for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n     if (a->dw_attr == attr_kind)\n       {\n-\tfree_AT (a);\n+\tif (AT_class (a) == dw_val_class_str)\n+\t  if (a->dw_attr_val.v.val_str->refcount)\n+\t    a->dw_attr_val.v.val_str->refcount--;\n+\n \t/* VEC_ordered_remove should help reduce the number of abbrevs\n \t   that are needed.  */\n \tVEC_ordered_remove (dw_attr_node, die->die_attr, ix);\n@@ -5432,7 +5423,6 @@ remove_child_TAG (dw_die_ref die, enum dwarf_tag tag)\n \t    die->die_child = next;\n \t  else\n \t    prev->die_sib = next;\n-\t  free_die (current);\n \t  current = next;\n \t}\n       else\n@@ -5443,33 +5433,6 @@ remove_child_TAG (dw_die_ref die, enum dwarf_tag tag)\n     }\n }\n \n-/* Free up the memory used by DIE, by removing its children and\n-   anything associated with its attributes.  DIEs are garbage\n-   collected, so there is no actual freeing to do; the only real work is\n-   to decrease string reference counts.  */\n-\n-static void\n-free_die (dw_die_ref die)\n-{\n-  dw_die_ref child_die = die->die_child;\n-\n-  die->die_child = NULL;\n-\n-  while (child_die != NULL)\n-    {\n-      dw_die_ref tmp_die = child_die;\n-      dw_attr_ref a;\n-      unsigned ix;\n-\n-      child_die = child_die->die_sib;\n-\n-      for (ix = 0; VEC_iterate (dw_attr_node, tmp_die->die_attr, ix, a); ix++)\n-\tfree_AT (a);\n-\n-      free_die (tmp_die);\n-    }\n-}\n-\n /* Add a child DIE below its parent.  We build the lists up in reverse\n    addition order, and correct that in reverse_all_dies.  */\n \n@@ -6390,15 +6353,9 @@ break_out_includes (dw_die_ref die)\n \t  *ptr = c->die_sib;\n \n \t  if (c->die_tag == DW_TAG_GNU_BINCL)\n-\t    {\n-\t      unit = push_new_compile_unit (unit, c);\n-\t      free_die (c);\n-\t    }\n+\t    unit = push_new_compile_unit (unit, c);\n \t  else if (c->die_tag == DW_TAG_GNU_EINCL)\n-\t    {\n-\t      unit = pop_compile_unit (unit);\n-\t      free_die (c);\n-\t    }\n+\t    unit = pop_compile_unit (unit);\n \t  else\n \t    add_child_die (unit, c);\n \t}\n@@ -13918,6 +13875,10 @@ prune_unused_types_walk_attribs (dw_die_ref die)\n \t  a->dw_attr_val.v.val_unsigned =\n \t    maybe_emit_file (a->dw_attr_val.v.val_unsigned);\n \t}\n+      /* Set the string's refcount to 0 so that prune_unused_types_mark\n+\t accounts properly for it.  */\n+      if (AT_class (a) == dw_val_class_str)\n+\ta->dw_attr_val.v.val_str->refcount = 0;\n     }\n }\n \n@@ -14021,32 +13982,62 @@ prune_unused_types_walk (dw_die_ref die)\n     prune_unused_types_walk (c);\n }\n \n+/* Increment the string counts on strings referred to from DIE's\n+   attributes.  */\n+\n+static void\n+prune_unused_types_update_strings (dw_die_ref die)\n+{\n+  dw_attr_ref a;\n+  unsigned ix;\n+\n+  for (ix = 0; VEC_iterate (dw_attr_node, die->die_attr, ix, a); ix++)\n+    if (AT_class (a) == dw_val_class_str)\n+      {\n+\tstruct indirect_string_node *s = a->dw_attr_val.v.val_str;\n+\ts->refcount++;\n+\t/* Avoid unnecessarily putting strings that are used less than\n+\t   twice in the hash table.  */\n+\tif (s->refcount == 2\n+\t    || (s->refcount == 1 \n+\t\t&& (debug_str_section->common.flags & SECTION_MERGE) != 0))\n+\t  {\n+\t    void ** slot;\n+\t    slot = htab_find_slot_with_hash (debug_str_hash, s->str,\n+\t\t\t\t\t     htab_hash_string (s->str),\n+\t\t\t\t\t     INSERT);\n+\t    gcc_assert (*slot == NULL);\n+\t    *slot = s;\n+\t  }\n+      }\n+}\n \n /* Remove from the tree DIE any dies that aren't marked.  */\n \n static void\n prune_unused_types_prune (dw_die_ref die)\n {\n-  dw_die_ref c, p, n;\n+  dw_die_ref *p;\n \n   gcc_assert (die->die_mark);\n \n-  p = NULL;\n-  for (c = die->die_child; c; c = n)\n+  p = &die->die_child;\n+  while (*p)\n     {\n-      n = c->die_sib;\n-      if (c->die_mark)\n+      dw_die_ref c = *p;\n+      if (c && ! c->die_mark)\n \t{\n-\t  prune_unused_types_prune (c);\n-\t  p = c;\n+\t  do {\n+\t    c = c->die_sib;\n+\t  } while (c && ! c->die_mark);\n+\t  *p = c;\n \t}\n-      else\n+      \n+      if (c)\n \t{\n-\t  if (p)\n-\t    p->die_sib = n;\n-\t  else\n-\t    die->die_child = n;\n-\t  free_die (c);\n+\t  prune_unused_types_update_strings (c);\n+\t  prune_unused_types_prune (c);\n+\t  p = &c->die_sib;\n \t}\n     }\n }\n@@ -14077,7 +14068,9 @@ prune_unused_types (void)\n   for (i = 0; i < arange_table_in_use; i++)\n     prune_unused_types_mark (arange_table[i], 1);\n \n-  /* Get rid of nodes that aren't marked.  */\n+  /* Get rid of nodes that aren't marked; and update the string counts.  */\n+  if (debug_str_hash)\n+    htab_empty (debug_str_hash);\n   prune_unused_types_prune (comp_unit_die);\n   for (node = limbo_die_list; node; node = node->next)\n     prune_unused_types_prune (node->die);"}]}