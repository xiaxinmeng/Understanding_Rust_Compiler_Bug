{"sha": "b7a98f48e06974ffca184335ff598cf3475e478f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdhOThmNDhlMDY5NzRmZmNhMTg0MzM1ZmY1OThjZjM0NzVlNDc4Zg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-04-02T07:20:11Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-04-02T07:20:11Z"}, "message": "S/390: Remove superfluous commutative constraint modifiers\n\nFor operands with an identical set of alternatives there is no point\nin marking them commutative.  This patch removes the superfluous\nconstraint modifiers in vector.md and vx-builtins.md since it might\nslow down reload without buying us anything.\n\nThere were even two patterns where the constraint modifier was plain\nwrong: \"sub<VF_HW>3\" and \"ior_not<VT>3\". Fortunately it never had any effect.\n\ngcc/ChangeLog:\n\n2020-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/vector.md (\"<ti*>add<mode>3\", \"mul<mode>3\")\n\t(\"and<mode>3\", \"notand<mode>3\", \"ior<mode>3\", \"ior_not<mode>3\")\n\t(\"xor<mode>3\", \"notxor<mode>3\", \"smin<mode>3\", \"smax<mode>3\")\n\t(\"umin<mode>3\", \"umax<mode>3\", \"vec_widen_smult_even_<mode>\")\n\t(\"vec_widen_umult_even_<mode>\", \"vec_widen_smult_odd_<mode>\")\n\t(\"vec_widen_umult_odd_<mode>\", \"add<mode>3\", \"sub<mode>3\")\n\t(\"mul<mode>3\", \"fma<mode>4\", \"fms<mode>4\", \"neg_fma<mode>4\")\n\t(\"neg_fms<mode>4\", \"*smax<mode>3_vxe\", \"*smaxv2df3_vx\")\n\t(\"*smin<mode>3_vxe\", \"*sminv2df3_vx\"): Remove % constraint\n\tmodifier.\n\t(\"vec_widen_umult_lo_<mode>\", \"vec_widen_umult_hi_<mode>\")\n\t(\"vec_widen_smult_lo_<mode>\", \"vec_widen_smult_hi_<mode>\"):\n\tRemove constraints from expander.\n\t* config/s390/vx-builtins.md (\"vacc<bhfgq>_<mode>\", \"vacq\")\n\t(\"vacccq\", \"vec_avg<mode>\", \"vec_avgu<mode>\", \"vec_vmal<mode>\")\n\t(\"vec_vmah<mode>\", \"vec_vmalh<mode>\", \"vec_vmae<mode>\")\n\t(\"vec_vmale<mode>\", \"vec_vmao<mode>\", \"vec_vmalo<mode>\")\n\t(\"vec_smulh<mode>\", \"vec_umulh<mode>\", \"vec_nor<mode>3\")\n\t(\"vfmin<mode>\", \"vfmax<mode>\"): Remove % constraint modifier.", "tree": {"sha": "a34641638707b69895abde0f5e485f27b60fb2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a34641638707b69895abde0f5e485f27b60fb2f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7a98f48e06974ffca184335ff598cf3475e478f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a98f48e06974ffca184335ff598cf3475e478f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a98f48e06974ffca184335ff598cf3475e478f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a98f48e06974ffca184335ff598cf3475e478f/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c54eab5a302c6da015bb39b1a81f6799e45a650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c54eab5a302c6da015bb39b1a81f6799e45a650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c54eab5a302c6da015bb39b1a81f6799e45a650"}], "stats": {"total": 180, "additions": 101, "deletions": 79}, "files": [{"sha": "5a8a2c525c9ee833c9db2007b56e6258fc85bd9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a98f48e06974ffca184335ff598cf3475e478f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a98f48e06974ffca184335ff598cf3475e478f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7a98f48e06974ffca184335ff598cf3475e478f", "patch": "@@ -1,3 +1,25 @@\n+2020-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/vector.md (\"<ti*>add<mode>3\", \"mul<mode>3\")\n+\t(\"and<mode>3\", \"notand<mode>3\", \"ior<mode>3\", \"ior_not<mode>3\")\n+\t(\"xor<mode>3\", \"notxor<mode>3\", \"smin<mode>3\", \"smax<mode>3\")\n+\t(\"umin<mode>3\", \"umax<mode>3\", \"vec_widen_smult_even_<mode>\")\n+\t(\"vec_widen_umult_even_<mode>\", \"vec_widen_smult_odd_<mode>\")\n+\t(\"vec_widen_umult_odd_<mode>\", \"add<mode>3\", \"sub<mode>3\")\n+\t(\"mul<mode>3\", \"fma<mode>4\", \"fms<mode>4\", \"neg_fma<mode>4\")\n+\t(\"neg_fms<mode>4\", \"*smax<mode>3_vxe\", \"*smaxv2df3_vx\")\n+\t(\"*smin<mode>3_vxe\", \"*sminv2df3_vx\"): Remove % constraint\n+\tmodifier.\n+\t(\"vec_widen_umult_lo_<mode>\", \"vec_widen_umult_hi_<mode>\")\n+\t(\"vec_widen_smult_lo_<mode>\", \"vec_widen_smult_hi_<mode>\"):\n+\tRemove constraints from expander.\n+\t* config/s390/vx-builtins.md (\"vacc<bhfgq>_<mode>\", \"vacq\")\n+\t(\"vacccq\", \"vec_avg<mode>\", \"vec_avgu<mode>\", \"vec_vmal<mode>\")\n+\t(\"vec_vmah<mode>\", \"vec_vmalh<mode>\", \"vec_vmae<mode>\")\n+\t(\"vec_vmale<mode>\", \"vec_vmao<mode>\", \"vec_vmalo<mode>\")\n+\t(\"vec_smulh<mode>\", \"vec_umulh<mode>\", \"vec_nor<mode>3\")\n+\t(\"vfmin<mode>\", \"vfmax<mode>\"): Remove % constraint modifier.\n+\n 2020-04-01  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR rtl-optimization/94123"}, {"sha": "9d3df9813c945e5f9102d5189b1cbe33a9da2bcd", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a98f48e06974ffca184335ff598cf3475e478f/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a98f48e06974ffca184335ff598cf3475e478f/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=b7a98f48e06974ffca184335ff598cf3475e478f", "patch": "@@ -694,7 +694,7 @@\n ; operation into two DImode ADDs.\n (define_insn \"<ti*>add<mode>3\"\n   [(set (match_operand:VIT           0 \"nonimmediate_operand\" \"=v\")\n-\t(plus:VIT (match_operand:VIT 1 \"nonimmediate_operand\" \"%v\")\n+\t(plus:VIT (match_operand:VIT 1 \"nonimmediate_operand\"  \"v\")\n \t\t  (match_operand:VIT 2 \"general_operand\"       \"v\")))]\n   \"TARGET_VX\"\n   \"va<bhfgq>\\t%v0,%v1,%v2\"\n@@ -704,15 +704,15 @@\n (define_insn \"<ti*>sub<mode>3\"\n   [(set (match_operand:VIT            0 \"nonimmediate_operand\" \"=v\")\n \t(minus:VIT (match_operand:VIT 1 \"nonimmediate_operand\"  \"v\")\n-\t\t   (match_operand:VIT 2 \"general_operand\"  \"v\")))]\n+\t\t   (match_operand:VIT 2 \"general_operand\"       \"v\")))]\n   \"TARGET_VX\"\n   \"vs<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vmlb, vmlhw, vmlf\n (define_insn \"mul<mode>3\"\n   [(set (match_operand:VI_QHS              0 \"register_operand\" \"=v\")\n-\t(mult:VI_QHS (match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t(mult:VI_QHS (match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n \t\t     (match_operand:VI_QHS 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vml<bhfgq><w>\\t%v0,%v1,%v2\"\n@@ -767,7 +767,7 @@\n \n (define_insn \"and<mode>3\"\n   [(set (match_operand:VT         0 \"register_operand\" \"=v\")\n-\t(and:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n+\t(and:VT (match_operand:VT 1 \"register_operand\"  \"v\")\n \t\t(match_operand:VT 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vn\\t%v0,%v1,%v2\"\n@@ -777,7 +777,7 @@\n \n (define_insn \"notand<mode>3\"\n   [(set (match_operand:VT                 0 \"register_operand\" \"=v\")\n-\t(ior:VT (not:VT (match_operand:VT 1 \"register_operand\" \"%v\"))\n+\t(ior:VT (not:VT (match_operand:VT 1 \"register_operand\"  \"v\"))\n \t\t(not:VT\t(match_operand:VT 2 \"register_operand\"  \"v\"))))]\n   \"TARGET_VXE\"\n   \"vnn\\t%v0,%v1,%v2\"\n@@ -787,7 +787,7 @@\n \n (define_insn \"ior<mode>3\"\n   [(set (match_operand:VT         0 \"register_operand\" \"=v\")\n-\t(ior:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n+\t(ior:VT (match_operand:VT 1 \"register_operand\"  \"v\")\n \t\t(match_operand:VT 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vo\\t%v0,%v1,%v2\"\n@@ -798,7 +798,7 @@\n (define_insn \"ior_not<mode>3\"\n   [(set (match_operand:VT                 0 \"register_operand\" \"=v\")\n \t(ior:VT (not:VT (match_operand:VT 2 \"register_operand\"  \"v\"))\n-\t\t(match_operand:VT         1 \"register_operand\" \"%v\")))]\n+\t\t(match_operand:VT         1 \"register_operand\"  \"v\")))]\n   \"TARGET_VXE\"\n   \"voc\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -807,7 +807,7 @@\n \n (define_insn \"xor<mode>3\"\n   [(set (match_operand:VT         0 \"register_operand\" \"=v\")\n-\t(xor:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n+\t(xor:VT (match_operand:VT 1 \"register_operand\"  \"v\")\n \t\t(match_operand:VT 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vx\\t%v0,%v1,%v2\"\n@@ -817,7 +817,7 @@\n \n (define_insn \"notxor<mode>3\"\n   [(set (match_operand:VT                 0 \"register_operand\" \"=v\")\n-\t(not:VT (xor:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n+\t(not:VT (xor:VT (match_operand:VT 1 \"register_operand\"  \"v\")\n \t\t\t(match_operand:VT 2 \"register_operand\"  \"v\"))))]\n   \"TARGET_VXE\"\n   \"vnx\\t%v0,%v1,%v2\"\n@@ -1075,7 +1075,7 @@\n ; vmnb, vmnh, vmnf, vmng\n (define_insn \"smin<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(smin:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n+\t(smin:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmn<bhfgq>\\t%v0,%v1,%v2\"\n@@ -1084,7 +1084,7 @@\n ; vmxb, vmxh, vmxf, vmxg\n (define_insn \"smax<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(smax:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n+\t(smax:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmx<bhfgq>\\t%v0,%v1,%v2\"\n@@ -1093,7 +1093,7 @@\n ; vmnlb, vmnlh, vmnlf, vmnlg\n (define_insn \"umin<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(umin:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n+\t(umin:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmnl<bhfgq>\\t%v0,%v1,%v2\"\n@@ -1102,7 +1102,7 @@\n ; vmxlb, vmxlh, vmxlf, vmxlg\n (define_insn \"umax<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(umax:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n+\t(umax:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmxl<bhfgq>\\t%v0,%v1,%v2\"\n@@ -1111,7 +1111,7 @@\n ; vmeb, vmeh, vmef\n (define_insn \"vec_widen_smult_even_<mode>\"\n   [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_SMULT_EVEN))]\n   \"TARGET_VX\"\n@@ -1121,7 +1121,7 @@\n ; vmleb, vmleh, vmlef\n (define_insn \"vec_widen_umult_even_<mode>\"\n   [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_UMULT_EVEN))]\n   \"TARGET_VX\"\n@@ -1131,7 +1131,7 @@\n ; vmob, vmoh, vmof\n (define_insn \"vec_widen_smult_odd_<mode>\"\n   [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_SMULT_ODD))]\n   \"TARGET_VX\"\n@@ -1141,7 +1141,7 @@\n ; vmlob, vmloh, vmlof\n (define_insn \"vec_widen_umult_odd_<mode>\"\n   [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_UMULT_ODD))]\n   \"TARGET_VX\"\n@@ -1162,13 +1162,13 @@\n \n (define_expand \"vec_widen_umult_lo_<mode>\"\n   [(set (match_dup 3)\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\" \"\")]\n \t\t\t     UNSPEC_VEC_UMULT_EVEN))\n    (set (match_dup 4)\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_UMULT_ODD))\n-   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n \t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n \t\t\t     UNSPEC_VEC_MERGEL))]\n   \"TARGET_VX\"\n@@ -1179,13 +1179,13 @@\n \n (define_expand \"vec_widen_umult_hi_<mode>\"\n   [(set (match_dup 3)\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\" \"\")]\n \t\t\t     UNSPEC_VEC_UMULT_EVEN))\n    (set (match_dup 4)\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_UMULT_ODD))\n-   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n \t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n \t\t\t     UNSPEC_VEC_MERGEH))]\n   \"TARGET_VX\"\n@@ -1196,13 +1196,13 @@\n \n (define_expand \"vec_widen_smult_lo_<mode>\"\n   [(set (match_dup 3)\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\" \"\")]\n \t\t\t     UNSPEC_VEC_SMULT_EVEN))\n    (set (match_dup 4)\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_SMULT_ODD))\n-   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n \t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n \t\t\t     UNSPEC_VEC_MERGEL))]\n   \"TARGET_VX\"\n@@ -1213,13 +1213,13 @@\n \n (define_expand \"vec_widen_smult_hi_<mode>\"\n   [(set (match_dup 3)\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"\")\n+\t\t\t      (match_operand:VI_QHS 2 \"register_operand\" \"\")]\n \t\t\t     UNSPEC_VEC_SMULT_EVEN))\n    (set (match_dup 4)\n \t(unspec:<vec_double> [(match_dup 1) (match_dup 2)]\n \t\t\t     UNSPEC_VEC_SMULT_ODD))\n-   (set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+   (set (match_operand:<vec_double>                 0 \"register_operand\" \"\")\n \t(unspec:<vec_double> [(match_dup 3) (match_dup 4)]\n \t\t\t     UNSPEC_VEC_MERGEH))]\n   \"TARGET_VX\"\n@@ -1240,7 +1240,7 @@\n ; vfasb, vfadb, wfasb, wfadb, wfaxb\n (define_insn \"add<mode>3\"\n   [(set (match_operand:VF_HW             0 \"register_operand\" \"=v\")\n-\t(plus:VF_HW (match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t(plus:VF_HW (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:VF_HW 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"<vw>fa<sdx>b\\t%v0,%v1,%v2\"\n@@ -1249,7 +1249,7 @@\n ; vfssb, vfsdb, wfssb, wfsdb, wfsxb\n (define_insn \"sub<mode>3\"\n   [(set (match_operand:VF_HW              0 \"register_operand\" \"=v\")\n-\t(minus:VF_HW (match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t(minus:VF_HW (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t     (match_operand:VF_HW 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"<vw>fs<sdx>b\\t%v0,%v1,%v2\"\n@@ -1258,7 +1258,7 @@\n ; vfmsb, vfmdb, wfmsb, wfmdb, wfmxb\n (define_insn \"mul<mode>3\"\n   [(set (match_operand:VF_HW             0 \"register_operand\" \"=v\")\n-\t(mult:VF_HW (match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t(mult:VF_HW (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:VF_HW 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"<vw>fm<sdx>b\\t%v0,%v1,%v2\"\n@@ -1284,7 +1284,7 @@\n ; vfmasb, vfmadb, wfmasb, wfmadb, wfmaxb\n (define_insn \"fma<mode>4\"\n   [(set (match_operand:VF_HW            0 \"register_operand\" \"=v\")\n-\t(fma:VF_HW (match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t(fma:VF_HW (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t   (match_operand:VF_HW 2 \"register_operand\"  \"v\")\n \t\t   (match_operand:VF_HW 3 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n@@ -1294,7 +1294,7 @@\n ; vfmssb, vfmsdb, wfmssb, wfmsdb, wfmsxb\n (define_insn \"fms<mode>4\"\n   [(set (match_operand:VF_HW                     0 \"register_operand\" \"=v\")\n-\t(fma:VF_HW (match_operand:VF_HW          1 \"register_operand\" \"%v\")\n+\t(fma:VF_HW (match_operand:VF_HW          1 \"register_operand\"  \"v\")\n \t\t   (match_operand:VF_HW          2 \"register_operand\"  \"v\")\n \t\t (neg:VF_HW (match_operand:VF_HW 3 \"register_operand\"  \"v\"))))]\n   \"TARGET_VX\"\n@@ -1305,7 +1305,7 @@\n (define_insn \"neg_fma<mode>4\"\n   [(set (match_operand:VF_HW             0 \"register_operand\" \"=v\")\n \t(neg:VF_HW\n-\t (fma:VF_HW (match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t (fma:VF_HW (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:VF_HW 2 \"register_operand\"  \"v\")\n \t\t    (match_operand:VF_HW 3 \"register_operand\"  \"v\"))))]\n   \"TARGET_VXE\"\n@@ -1316,7 +1316,7 @@\n (define_insn \"neg_fms<mode>4\"\n   [(set (match_operand:VF_HW                      0 \"register_operand\" \"=v\")\n \t(neg:VF_HW\n-\t (fma:VF_HW (match_operand:VF_HW          1 \"register_operand\" \"%v\")\n+\t (fma:VF_HW (match_operand:VF_HW          1 \"register_operand\"  \"v\")\n \t\t    (match_operand:VF_HW          2 \"register_operand\"  \"v\")\n \t\t  (neg:VF_HW (match_operand:VF_HW 3 \"register_operand\"  \"v\")))))]\n   \"TARGET_VXE\"\n@@ -1356,7 +1356,7 @@\n ; vfmaxsb, vfmaxdb, wfmaxsb, wfmaxdb, wfmaxxb\n (define_insn \"*smax<mode>3_vxe\"\n   [(set (match_operand:VF_HW             0 \"register_operand\" \"=v\")\n-\t(smax:VF_HW (match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t(smax:VF_HW (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:VF_HW 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VXE\"\n   \"<vw>fmax<sdx>b\\t%v0,%v1,%v2,4\"\n@@ -1365,7 +1365,7 @@\n ; Emulate with compare + select\n (define_insn_and_split \"*smaxv2df3_vx\"\n   [(set (match_operand:V2DF            0 \"register_operand\" \"=v\")\n-\t(smax:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n+\t(smax:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n \t\t   (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX && !TARGET_VXE\"\n   \"#\"\n@@ -1392,7 +1392,7 @@\n ; vfminsb, vfmindb, wfminsb, wfmindb, wfminxb\n (define_insn \"*smin<mode>3_vxe\"\n   [(set (match_operand:VF_HW             0 \"register_operand\" \"=v\")\n-\t(smin:VF_HW (match_operand:VF_HW 1 \"register_operand\" \"%v\")\n+\t(smin:VF_HW (match_operand:VF_HW 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:VF_HW 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VXE\"\n   \"<vw>fmin<sdx>b\\t%v0,%v1,%v2,4\"\n@@ -1401,7 +1401,7 @@\n ; Emulate with compare + select\n (define_insn_and_split \"*sminv2df3_vx\"\n   [(set (match_operand:V2DF            0 \"register_operand\" \"=v\")\n-\t(smin:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n+\t(smin:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n \t\t   (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX && !TARGET_VXE\"\n   \"#\""}, {"sha": "9a7f3dae1df27a8daa1a7f4b208de2a4714961d9", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a98f48e06974ffca184335ff598cf3475e478f/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a98f48e06974ffca184335ff598cf3475e478f/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=b7a98f48e06974ffca184335ff598cf3475e478f", "patch": "@@ -619,7 +619,7 @@\n ; vaccb, vacch, vaccf, vaccg, vaccq\n (define_insn \"vacc<bhfgq>_<mode>\"\n   [(set (match_operand:VIT_HW                 0 \"register_operand\" \"=v\")\n-\t(unspec:VIT_HW [(match_operand:VIT_HW 1 \"register_operand\" \"%v\")\n+\t(unspec:VIT_HW [(match_operand:VIT_HW 1 \"register_operand\"  \"v\")\n \t\t\t(match_operand:VIT_HW 2 \"register_operand\"  \"v\")]\n \t\t       UNSPEC_VEC_ADDC))]\n   \"TARGET_VX\"\n@@ -630,7 +630,7 @@\n \n (define_insn \"vacq\"\n   [(set (match_operand:TI             0 \"register_operand\" \"=v\")\n-\t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"%v\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:TI 2 \"register_operand\"  \"v\")\n \t\t    (match_operand:TI 3 \"register_operand\"  \"v\")]\n \t\t   UNSPEC_VEC_ADDE_U128))]\n@@ -643,7 +643,7 @@\n \n (define_insn \"vacccq\"\n   [(set (match_operand:TI             0 \"register_operand\" \"=v\")\n-\t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"%v\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\"  \"v\")\n \t\t    (match_operand:TI 2 \"register_operand\"  \"v\")\n \t\t    (match_operand:TI 3 \"register_operand\"  \"v\")]\n \t\t   UNSPEC_VEC_ADDEC_U128))]\n@@ -671,7 +671,7 @@\n ; vavgb, vavgh, vavgf, vavgg\n (define_insn \"vec_avg<mode>\"\n   [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n+\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\"  \"v\")\n \t\t       (match_operand:VI_HW 2 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_AVG))]\n   \"TARGET_VX\"\n@@ -683,7 +683,7 @@\n ; vavglb, vavglh, vavglf, vavglg\n (define_insn \"vec_avgu<mode>\"\n   [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n+\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\"  \"v\")\n \t\t       (match_operand:VI_HW 2 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_AVGU))]\n   \"TARGET_VX\"\n@@ -855,9 +855,9 @@\n ; vmalb, vmalh, vmalf, vmalg\n (define_insn \"vec_vmal<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"v\")]\n \t\t\t  UNSPEC_VEC_VMAL))]\n   \"TARGET_VX\"\n   \"vmal<bhfgq><w>\\t%v0,%v1,%v2,%v3\"\n@@ -868,20 +868,20 @@\n ; vmahb; vmahh, vmahf, vmahg\n (define_insn \"vec_vmah<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"v\")]\n \t\t\t  UNSPEC_VEC_VMAH))]\n   \"TARGET_VX\"\n   \"vmah<bhfgq>\\t%v0,%v1,%v2,%v3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vmalhb; vmalhh, vmalhf, vmalhg\n (define_insn \"vec_vmalh<mode>\"\n-  [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")]\n+  [(set (match_operand:VI_HW_QHS 0 \"register_operand\"                   \"=v\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"v\")]\n \t\t\t  UNSPEC_VEC_VMALH))]\n   \"TARGET_VX\"\n   \"vmalh<bhfgq>\\t%v0,%v1,%v2,%v3\"\n@@ -891,8 +891,8 @@\n \n ; vmaeb; vmaeh, vmaef, vmaeg\n (define_insn \"vec_vmae<mode>\"\n-  [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\"   \"%v\")\n+  [(set (match_operand:<vec_double> 0 \"register_operand\"                      \"=v\")\n+\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\"    \"v\")\n \t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\"    \"v\")\n \t\t\t      (match_operand:<vec_double> 3 \"register_operand\" \"v\")]\n \t\t\t     UNSPEC_VEC_VMAE))]\n@@ -902,9 +902,9 @@\n \n ; vmaleb; vmaleh, vmalef, vmaleg\n (define_insn \"vec_vmale<mode>\"\n-  [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n+  [(set (match_operand:<vec_double> 0 \"register_operand\"                      \"=v\")\n+\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\"    \"v\")\n+\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\"    \"v\")\n \t\t\t      (match_operand:<vec_double> 3 \"register_operand\" \"v\")]\n \t\t\t     UNSPEC_VEC_VMALE))]\n   \"TARGET_VX\"\n@@ -915,9 +915,9 @@\n \n ; vmaob; vmaoh, vmaof, vmaog\n (define_insn \"vec_vmao<mode>\"\n-  [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n-\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n+  [(set (match_operand:<vec_double> 0 \"register_operand\"                      \"=v\")\n+\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\"    \"v\")\n+\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\"    \"v\")\n \t\t\t      (match_operand:<vec_double> 3 \"register_operand\" \"v\")]\n \t\t\t     UNSPEC_VEC_VMAO))]\n   \"TARGET_VX\"\n@@ -926,9 +926,9 @@\n \n ; vmalob; vmaloh, vmalof, vmalog\n (define_insn \"vec_vmalo<mode>\"\n-  [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n+  [(set (match_operand:<vec_double> 0 \"register_operand\"                      \"=v\")\n+\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\"    \"v\")\n+\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\"    \"v\")\n \t\t\t      (match_operand:<vec_double> 3 \"register_operand\" \"v\")]\n \t\t\t     UNSPEC_VEC_VMALO))]\n   \"TARGET_VX\"\n@@ -942,8 +942,8 @@\n \n ; vmhb, vmhh, vmhf\n (define_insn \"vec_smulh<mode>\"\n-  [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n+  [(set (match_operand:VI_HW_QHS 0 \"register_operand\"                   \"=v\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")]\n \t\t\t  UNSPEC_VEC_SMULT_HI))]\n   \"TARGET_VX\"\n@@ -952,8 +952,8 @@\n \n ; vmlhb, vmlhh, vmlhf\n (define_insn \"vec_umulh<mode>\"\n-  [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n+  [(set (match_operand:VI_HW_QHS 0 \"register_operand\"                   \"=v\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")]\n \t\t\t  UNSPEC_VEC_UMULT_HI))]\n   \"TARGET_VX\"\n@@ -970,9 +970,9 @@\n ; Vector nor\n \n (define_insn \"vec_nor<mode>3\"\n-  [(set (match_operand:VT_HW 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:VT_HW 0 \"register_operand\"            \"=v\")\n \t(not:VT_HW\n-\t (ior:VT_HW (match_operand:VT_HW 1 \"register_operand\" \"%v\")\n+\t (ior:VT_HW (match_operand:VT_HW 1 \"register_operand\" \"v\")\n \t\t    (match_operand:VT_HW 2 \"register_operand\" \"v\"))))]\n   \"TARGET_VX\"\n   \"vno\\t%v0,%v1,%v2\"\n@@ -2120,27 +2120,27 @@\n   [(set (reg:CCVFHE CC_REGNUM)\n \t(compare:CCVFHE (match_operand:VF_HW 0 \"register_operand\"  \"v\")\n \t\t\t(match_operand:VF_HW 1 \"register_operand\"  \"v\")))\n-   (set (match_operand:<tointvec>               2 \"register_operand\" \"=v\")\n+   (set (match_operand:<tointvec>            2 \"register_operand\" \"=v\")\n \t(ge:<tointvec> (match_dup 0) (match_dup 1)))]\n   \"TARGET_VX\"\n   \"<vw>fche<sdx>bs\\t%v2,%v0,%v1\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n \n (define_insn \"vfmin<mode>\"\n-  [(set (match_operand:VF_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VF_HW [(match_operand:VF_HW 1 \"register_operand\" \"%v\")\n-\t\t       (match_operand:VF_HW 2 \"register_operand\"  \"v\")\n+  [(set (match_operand:VF_HW                0 \"register_operand\"  \"=v\")\n+\t(unspec:VF_HW [(match_operand:VF_HW 1 \"register_operand\"   \"v\")\n+\t\t       (match_operand:VF_HW 2 \"register_operand\"   \"v\")\n \t\t       (match_operand:QI    3 \"const_mask_operand\" \"C\")]\n \t\t      UNSPEC_VEC_VFMIN))]\n   \"TARGET_VXE\"\n   \"<vw>fmin<sdx>b\\t%v0,%v1,%v2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_insn \"vfmax<mode>\"\n-  [(set (match_operand:VF_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VF_HW [(match_operand:VF_HW 1 \"register_operand\" \"%v\")\n-\t\t       (match_operand:VF_HW 2 \"register_operand\"  \"v\")\n+  [(set (match_operand:VF_HW                0 \"register_operand\"  \"=v\")\n+\t(unspec:VF_HW [(match_operand:VF_HW 1 \"register_operand\"   \"v\")\n+\t\t       (match_operand:VF_HW 2 \"register_operand\"   \"v\")\n \t\t       (match_operand:QI    3 \"const_mask_operand\" \"C\")]\n \t\t      UNSPEC_VEC_VFMAX))]\n   \"TARGET_VXE\""}]}