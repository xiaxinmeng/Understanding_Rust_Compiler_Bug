{"sha": "d665b6e585efbb1d90b33f330a2cd967430c95a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2NWI2ZTU4NWVmYmIxZDkwYjMzZjMzMGEyY2Q5Njc0MzBjOTVhMQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-07-07T22:18:35Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-07-07T22:18:35Z"}, "message": "re PR c++/31246 (-Wunreachable-code warnings for compiler-generated code)\n\n2009-07-08  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/31246\n\t* gimplify.c (gimplify_expr): Propagate no_warning flag when\n\tgimplifying.\n\t* gimple (gimple_build_call_from_tree): Likewise.\n\t* tree-cfg.c (remove_useless_stmts_warn_notreached): Check\n\tno_warning flag before warning.\ncp/\n\t* init.c (build_new_1): Set TREE_NO_WARNING for compiler-generated\n\tcode.\n\t* cp-gimplify.c (genericize_eh_spec_block): Likewise.\n\t\ntestsuite/\t\n\t* g++.dg/warn/pr31246.C: New.\n\t* g++.dg/warn/pr31246-2.C: New.\n\nFrom-SVN: r149354", "tree": {"sha": "bc411ee056cbc9d17c3e9d69c14e65d3779c178c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc411ee056cbc9d17c3e9d69c14e65d3779c178c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d665b6e585efbb1d90b33f330a2cd967430c95a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d665b6e585efbb1d90b33f330a2cd967430c95a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d665b6e585efbb1d90b33f330a2cd967430c95a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d665b6e585efbb1d90b33f330a2cd967430c95a1/comments", "author": null, "committer": null, "parents": [{"sha": "438c0fa8a04a3f11df33890b3d183f64fa181b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438c0fa8a04a3f11df33890b3d183f64fa181b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438c0fa8a04a3f11df33890b3d183f64fa181b55"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "60d0e7e394bb59368ae10252f582031de7e5181f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -1,3 +1,12 @@\n+2009-07-08  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/31246\n+\t* gimplify.c (gimplify_expr): Propagate no_warning flag when\n+\tgimplifying.\n+\t* gimple (gimple_build_call_from_tree): Likewise.\n+\t* tree-cfg.c (remove_useless_stmts_warn_notreached): Check\n+\tno_warning flag before warning.\n+\t\n 2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* tree.c (set_expr_locus): Remove."}, {"sha": "3919397dfcc3c9a2881bcf9d60d0efb794fe9fdc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -1,3 +1,11 @@\n+2009-07-08  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/31246\n+\t* init.c (build_new_1): Set TREE_NO_WARNING for compiler-generated\n+\tcode.\n+\t* cp-gimplify.c (genericize_eh_spec_block): Likewise.\n+\t\n+\n 2009-07-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35828"}, {"sha": "fc30c06b62f9b90cda8f6b759822a3b3dcf79008", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -153,6 +153,8 @@ genericize_eh_spec_block (tree *stmt_p)\n   tree failure = build_call_n (call_unexpected_node, 1, build_exc_ptr ());\n \n   *stmt_p = build_gimple_eh_filter_tree (body, allowed, failure);\n+  TREE_NO_WARNING (*stmt_p) = true;\n+  TREE_NO_WARNING (TREE_OPERAND (*stmt_p, 1)) = true;\n }\n \n /* Genericize an IF_STMT by turning it into a COND_EXPR.  */"}, {"sha": "68ffe3a3dd02be912bcf4d13485f31c8de47818d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -2185,8 +2185,14 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t  else if (stable)\n \t    /* This is much simpler if we were able to preevaluate all of\n \t       the arguments to the constructor call.  */\n-\t    init_expr = build2 (TRY_CATCH_EXPR, void_type_node,\n-\t\t\t\tinit_expr, cleanup);\n+\t    {\n+\t      /* CLEANUP is compiler-generated, so no diagnostics.  */\n+\t      TREE_NO_WARNING (cleanup) = true;\n+\t      init_expr = build2 (TRY_CATCH_EXPR, void_type_node,\n+\t\t\t\t  init_expr, cleanup);\n+\t      /* Likewise, this try-catch is compiler-generated.  */\n+\t      TREE_NO_WARNING (init_expr) = true;\n+\t    }\n \t  else\n \t    /* Ack!  First we allocate the memory.  Then we set our sentry\n \t       variable to true, and expand a cleanup that deletes the\n@@ -2206,6 +2212,9 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \n \t      sentry = TARGET_EXPR_SLOT (begin);\n \n+\t      /* CLEANUP is compiler-generated, so no diagnostics.  */\n+\t      TREE_NO_WARNING (cleanup) = true;\n+\n \t      TARGET_EXPR_CLEANUP (begin)\n \t\t= build3 (COND_EXPR, void_type_node, sentry,\n \t\t\t  cleanup, void_zero_node);\n@@ -2217,8 +2226,9 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t\t= build2 (COMPOUND_EXPR, void_type_node, begin,\n \t\t\t  build2 (COMPOUND_EXPR, void_type_node, init_expr,\n \t\t\t\t  end));\n+\t      /* Likewise, this is compiler-generated.  */\n+\t      TREE_NO_WARNING (init_expr) = true;\n \t    }\n-\n \t}\n     }\n   else"}, {"sha": "56108312431d46f72ea5b3bbb5cb32d5f3882f2c", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -357,6 +357,7 @@ gimple_build_call_from_tree (tree t)\n   gimple_call_set_return_slot_opt (call, CALL_EXPR_RETURN_SLOT_OPT (t));\n   gimple_call_set_from_thunk (call, CALL_FROM_THUNK_P (t));\n   gimple_call_set_va_arg_pack (call, CALL_EXPR_VA_ARG_PACK (t));\n+  gimple_set_no_warning (call, TREE_NO_WARNING (t));\n \n   return call;\n }"}, {"sha": "b20c8ac3e5e9ad34a78fa0f4733fcb3e8e853fec", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -6787,6 +6787,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n \t    gimplify_and_add (EH_FILTER_FAILURE (*expr_p), &failure);\n \t    ehf = gimple_build_eh_filter (EH_FILTER_TYPES (*expr_p), failure);\n+\t    gimple_set_no_warning (ehf, TREE_NO_WARNING (*expr_p));\n \t    gimple_eh_filter_set_must_not_throw\n \t      (ehf, EH_FILTER_MUST_NOT_THROW (*expr_p));\n \t    gimplify_seq_add_stmt (pre_p, ehf);"}, {"sha": "d063cbb38adf36589a2faa799d2b84e5daa5ba38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -1,3 +1,9 @@\n+2009-07-08  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t\n+\tPR c++/31246\n+\t* g++.dg/warn/pr31246.C: New.\n+\t* g++.dg/warn/pr31246-2.C: New.\n+\n 2009-07-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35828"}, {"sha": "c9a4cae7e84b6812f12dadd65f71c8bcb50e3018", "filename": "gcc/testsuite/g++.dg/warn/pr31246-2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246-2.C?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -0,0 +1,9 @@\n+// PR 31246\n+// { dg-do compile }\n+// { dg-options \"-Wunreachable-code\" }\n+#include <new>\n+\n+int* get_ptr(void* ptr)\n+{\n+  return new(ptr) int();\n+}"}, {"sha": "f3603af478772c116746ce90f473ed16e598ef0b", "filename": "gcc/testsuite/g++.dg/warn/pr31246.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr31246.C?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -0,0 +1,9 @@\n+// PR 31246\n+// { dg-do compile }\n+// { dg-options \"-Wunreachable-code -D_GLIBCXX_DEBUG\" }\n+#include <vector>\n+\n+int main()\n+{\n+  std::vector<int>::iterator a;\n+}"}, {"sha": "dd38134802bfaa946544a15c69f0ca7048c1951b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d665b6e585efbb1d90b33f330a2cd967430c95a1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d665b6e585efbb1d90b33f330a2cd967430c95a1", "patch": "@@ -1638,6 +1638,8 @@ remove_useless_stmts_warn_notreached (gimple_seq stmts)\n     {\n       gimple stmt = gsi_stmt (gsi);\n \n+      if (gimple_no_warning_p (stmt)) return false;\n+\n       if (gimple_has_location (stmt))\n         {\n           location_t loc = gimple_location (stmt);"}]}