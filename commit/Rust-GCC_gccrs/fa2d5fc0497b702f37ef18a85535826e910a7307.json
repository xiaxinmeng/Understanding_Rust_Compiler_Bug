{"sha": "fa2d5fc0497b702f37ef18a85535826e910a7307", "node_id": "C_kwDOANBUbNoAKGZhMmQ1ZmMwNDk3YjcwMmYzN2VmMThhODU1MzU4MjZlOTEwYTczMDc", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-03-22T17:51:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-05-06T23:18:25Z"}, "message": "compiler: remove Array_index_expression::is_lvalue_\n\nAs of CL 77510 it is never true.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/394695", "tree": {"sha": "ad114593ac42bd19f91651aaf4f81fe3bcefe97a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad114593ac42bd19f91651aaf4f81fe3bcefe97a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa2d5fc0497b702f37ef18a85535826e910a7307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2d5fc0497b702f37ef18a85535826e910a7307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2d5fc0497b702f37ef18a85535826e910a7307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2d5fc0497b702f37ef18a85535826e910a7307/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42991a911685a419794c47eba640d35ca60c2d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42991a911685a419794c47eba640d35ca60c2d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42991a911685a419794c47eba640d35ca60c2d99"}], "stats": {"total": 54, "additions": 9, "deletions": 45}, "files": [{"sha": "3ec315f689275d63f9d0ff039232b86a0e973a80", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=fa2d5fc0497b702f37ef18a85535826e910a7307", "patch": "@@ -1,4 +1,4 @@\n-fbadca004b1e09db177c8e071706841038d1dd64\n+6a33e7e30c89edc12340dc470b44791bb1066feb\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "734ecb9492e8b269049f7148ba6f2b4cb4d999af", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fa2d5fc0497b702f37ef18a85535826e910a7307", "patch": "@@ -7671,8 +7671,7 @@ Expression::comparison(Translate_context* context, Type* result_type,\n \t  && left_type->array_type()->length() == NULL)\n \t{\n \t  Array_type* at = left_type->array_type();\n-          bool is_lvalue = false;\n-          left = at->get_value_pointer(context->gogo(), left, is_lvalue);\n+          left = at->get_value_pointer(context->gogo(), left);\n \t}\n       else if (left_type->interface_type() != NULL)\n \t{\n@@ -9276,7 +9275,7 @@ Builtin_call_expression::flatten_append(Gogo* gogo, Named_object* function,\n   Type* unsafe_ptr_type = Type::make_pointer_type(Type::make_void_type());\n   Expression* a1 = Expression::make_type_descriptor(element_type, loc);\n   Expression* a2 = Expression::make_temporary_reference(s1tmp, loc);\n-  a2 = slice_type->array_type()->get_value_pointer(gogo, a2, false);\n+  a2 = slice_type->array_type()->get_value_pointer(gogo, a2);\n   a2 = Expression::make_cast(unsafe_ptr_type, a2, loc);\n   Expression* a3 = Expression::make_temporary_reference(l1tmp, loc);\n   Expression* a4 = Expression::make_temporary_reference(c1tmp, loc);\n@@ -13848,9 +13847,8 @@ Array_index_expression::do_get_backend(Translate_context* context)\n \t}\n       else\n \t{\n-\t  Expression* valptr =\n-              array_type->get_value_pointer(gogo, this->array_,\n-                                            this->is_lvalue_);\n+\t  Expression* valptr = array_type->get_value_pointer(gogo,\n+\t\t\t\t\t\t\t     this->array_);\n \t  Bexpression* ptr = valptr->get_backend(context);\n           ptr = gogo->backend()->pointer_offset_expression(ptr, start, loc);\n \n@@ -13891,8 +13889,7 @@ Array_index_expression::do_get_backend(Translate_context* context)\n   Bexpression* offset = gogo->backend()->conditional_expression(bfn, int_btype,\n \t\t\t\t\t\t\t\tcond, zero,\n \t\t\t\t\t\t\t\tstart, loc);\n-  Expression* valptr = array_type->get_value_pointer(gogo, this->array_,\n-                                                     this->is_lvalue_);\n+  Expression* valptr = array_type->get_value_pointer(gogo, this->array_);\n   Bexpression* val = valptr->get_backend(context);\n   val = gogo->backend()->pointer_offset_expression(val, offset, loc);\n "}, {"sha": "707c19336d897d0d5ff5d2170c72694d11668d9f", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=fa2d5fc0497b702f37ef18a85535826e910a7307", "patch": "@@ -3055,7 +3055,7 @@ class Array_index_expression : public Expression\n \t\t\t Expression* end, Expression* cap, Location location)\n     : Expression(EXPRESSION_ARRAY_INDEX, location),\n       array_(array), start_(start), end_(end), cap_(cap), type_(NULL),\n-      is_lvalue_(false), needs_bounds_check_(true), is_flattened_(false)\n+      needs_bounds_check_(true), is_flattened_(false)\n   { }\n \n   // Return the array.\n@@ -3087,18 +3087,6 @@ class Array_index_expression : public Expression\n   end() const\n   { return this->end_; }\n \n-  // Return whether this array index expression appears in an lvalue\n-  // (left hand side of assignment) context.\n-  bool\n-  is_lvalue() const\n-  { return this->is_lvalue_; }\n-\n-  // Update this array index expression to indicate that it appears\n-  // in a left-hand-side or lvalue context.\n-  void\n-  set_is_lvalue()\n-  { this->is_lvalue_ = true; }\n-\n   void\n   set_needs_bounds_check(bool b)\n   { this->needs_bounds_check_ = b; }\n@@ -3174,8 +3162,6 @@ class Array_index_expression : public Expression\n   Expression* cap_;\n   // The type of the expression.\n   Type* type_;\n-  // Whether expr appears in an lvalue context.\n-  bool is_lvalue_;\n   // Whether bounds check is needed.\n   bool needs_bounds_check_;\n   // Whether this has already been flattened."}, {"sha": "ef656705037216580669bb95a5a5d3bd4ee621e7", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=fa2d5fc0497b702f37ef18a85535826e910a7307", "patch": "@@ -7815,7 +7815,7 @@ Array_type::finish_backend_element(Gogo* gogo)\n // Return an expression for a pointer to the values in ARRAY.\n \n Expression*\n-Array_type::get_value_pointer(Gogo*, Expression* array, bool is_lvalue) const\n+Array_type::get_value_pointer(Gogo*, Expression* array) const\n {\n   if (this->length() != NULL)\n     {\n@@ -7828,25 +7828,6 @@ Array_type::get_value_pointer(Gogo*, Expression* array, bool is_lvalue) const\n     }\n \n   // Slice.\n-\n-  if (is_lvalue)\n-    {\n-      Temporary_reference_expression* tref =\n-          array->temporary_reference_expression();\n-      Var_expression* ve = array->var_expression();\n-      if (tref != NULL)\n-        {\n-          tref = tref->copy()->temporary_reference_expression();\n-          tref->set_is_lvalue();\n-          array = tref;\n-        }\n-      else if (ve != NULL)\n-        {\n-          ve = new Var_expression(ve->named_object(), ve->location());\n-          array = ve;\n-        }\n-    }\n-\n   return Expression::make_slice_info(array,\n                                      Expression::SLICE_INFO_VALUE_POINTER,\n                                      array->location());"}, {"sha": "6d72e09ecf17a60fec058a114c6036e6949e8a3b", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa2d5fc0497b702f37ef18a85535826e910a7307/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=fa2d5fc0497b702f37ef18a85535826e910a7307", "patch": "@@ -2800,7 +2800,7 @@ class Array_type : public Type\n \n   // Return an expression for the pointer to the values in an array.\n   Expression*\n-  get_value_pointer(Gogo*, Expression* array, bool is_lvalue) const;\n+  get_value_pointer(Gogo*, Expression* array) const;\n \n   // Return an expression for the length of an array with this type.\n   Expression*"}]}