{"sha": "eabf7bbe601f2c0d87bd0a1012d7a602df2037da", "node_id": "C_kwDOANBUbNoAKGVhYmY3YmJlNjAxZjJjMGQ4N2JkMGExMDEyZDdhNjAyZGYyMDM3ZGE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-25T11:06:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-25T11:06:52Z"}, "message": "i386: Use a new temp slot kind for splitter to floatdi<mode>2_i387_with_xmm [PR104674]\n\nAs mentioned in the PR, the following testcase is miscompiled for similar\nreasons as the already fixed PR78791 - we use SLOT_TEMP slots in various\nplaces during expansion and during expansion we can guarantee that the\nlifetime of those temporary slot doesn't overlap.  But the following\nsplitter uses SLOT_TEMP too and in between expansion and split1 there is\na possibility that something extends the lifetime of SLOT_TEMP created\nslots across an instruction that will be split by this splitter.\n\nThe following patch fixes it by using a new temp slot kind to make sure\nit doesn't reuse a SLOT_TEMP that could be live across the instruction.\n\n2022-02-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/104674\n\t* config/i386/i386.h (enum ix86_stack_slot): Add SLOT_FLOATxFDI_387.\n\t* config/i386/i386.md (splitter to floatdi<mode>2_i387_with_xmm): Use\n\tSLOT_FLOATxFDI_387 rather than SLOT_TEMP.\n\n\t* gcc.target/i386/pr104674.c: New test.", "tree": {"sha": "765e23dbe230fa05ff5d72183a021866b8c62b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/765e23dbe230fa05ff5d72183a021866b8c62b48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eabf7bbe601f2c0d87bd0a1012d7a602df2037da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabf7bbe601f2c0d87bd0a1012d7a602df2037da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eabf7bbe601f2c0d87bd0a1012d7a602df2037da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabf7bbe601f2c0d87bd0a1012d7a602df2037da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "873b36af995f7f02bb6153320e35649a5d33b5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873b36af995f7f02bb6153320e35649a5d33b5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873b36af995f7f02bb6153320e35649a5d33b5fd"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "b37d4a9966a9d4ba11950c591e4c746118e2c66c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabf7bbe601f2c0d87bd0a1012d7a602df2037da/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabf7bbe601f2c0d87bd0a1012d7a602df2037da/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=eabf7bbe601f2c0d87bd0a1012d7a602df2037da", "patch": "@@ -2414,6 +2414,7 @@ enum ix86_stack_slot\n   SLOT_CW_FLOOR,\n   SLOT_CW_CEIL,\n   SLOT_STV_TEMP,\n+  SLOT_FLOATxFDI_387,\n   MAX_386_STACK_LOCALS\n };\n "}, {"sha": "e7c54901d75aaaa7222bdbd5c8b09ba50c6c9270", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabf7bbe601f2c0d87bd0a1012d7a602df2037da/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabf7bbe601f2c0d87bd0a1012d7a602df2037da/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=eabf7bbe601f2c0d87bd0a1012d7a602df2037da", "patch": "@@ -5412,9 +5412,8 @@\n    && can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n-  emit_insn (gen_floatdi<mode>2_i387_with_xmm\n-\t     (operands[0], operands[1],\n-\t      assign_386_stack_local (DImode, SLOT_TEMP)));\n+  rtx s = assign_386_stack_local (DImode, SLOT_FLOATxFDI_387);\n+  emit_insn (gen_floatdi<mode>2_i387_with_xmm (operands[0], operands[1], s));\n   DONE;\n })\n "}, {"sha": "c8f3e9b02d68fd33e4b15c11fbc4be60c872566d", "filename": "gcc/testsuite/gcc.target/i386/pr104674.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabf7bbe601f2c0d87bd0a1012d7a602df2037da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104674.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabf7bbe601f2c0d87bd0a1012d7a602df2037da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104674.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104674.c?ref=eabf7bbe601f2c0d87bd0a1012d7a602df2037da", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/104674 */\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse\" } */\n+\n+__attribute__((noipa)) double\n+bar (double x, double y)\n+{\n+  return x + y;\n+}\n+\n+__attribute__((noipa)) double\n+foo (long long x)\n+{\n+  long long a = x / 10000000;\n+  int b = x % 10000000;\n+  double s = (double) a;\n+  double n = (double) b / 1e7;\n+  double t = s + n;\n+  if (t == s + 1.0)\n+    t = bar (t, s);\n+  return t;\n+}\n+\n+int\n+main ()\n+{\n+  long long n = 888888;\n+  n = n * 10000000;\n+  if (foo (n) != 888888.0)\n+    __builtin_abort ();\n+}"}]}