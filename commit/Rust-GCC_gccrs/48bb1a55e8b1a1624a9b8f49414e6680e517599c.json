{"sha": "48bb1a55e8b1a1624a9b8f49414e6680e517599c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiYjFhNTVlOGIxYTE2MjRhOWI4ZjQ5NDE0ZTY2ODBlNTE3NTk5Yw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-03-10T13:29:48Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-03-10T13:29:48Z"}, "message": "re PR target/70113 ([AArch64] -mpc-relative-literal-loads conflicts with fix-cortex-a53-843419)\n\n2016-03-10  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tPR target/70113.\n\t* config/aarch64/aarch64.h (TARGET_FIX_ERR_A53_843419_DEFAULT):\n\tAlways define to 0 or 1.\n\t(TARGET_FIX_ERR_A53_843419): New macro.\n\t* config/aarch64/aarch64-elf-raw.h\n\t(TARGET_FIX_ERR_A53_843419_DEFAULT): Update for above changes.\n\t* config/aarch64/aarch64-linux.h: Likewise.\n\t* config/aarch64/aarch64.c\n\t(aarch64_override_options_after_change_1): Do not default\n\taarch64_nopcrelative_literal_loads to true if Cortex-A53 erratum\n\t843419 is on.\n\t(aarch64_attributes): Handle fix-cortex-a53-843419.\n\t(aarch64_can_inline_p): Likewise.\n\t* config/aarch64/aarch64.opt (aarch64_fix_a53_err843419): Save.\n\nFrom-SVN: r234108", "tree": {"sha": "c9bf36489bb3609e511dbb8a841e8cc78b46686d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9bf36489bb3609e511dbb8a841e8cc78b46686d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48bb1a55e8b1a1624a9b8f49414e6680e517599c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48bb1a55e8b1a1624a9b8f49414e6680e517599c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48bb1a55e8b1a1624a9b8f49414e6680e517599c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48bb1a55e8b1a1624a9b8f49414e6680e517599c/comments", "author": null, "committer": null, "parents": [{"sha": "71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71017a7b7837a4eeb1d1c0b2b155c6567f4f3d95"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "cb91e97c223ceb855fd3645d913b92ae77f8fdd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48bb1a55e8b1a1624a9b8f49414e6680e517599c", "patch": "@@ -1,3 +1,20 @@\n+2016-03-10  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/70113.\n+\t* config/aarch64/aarch64.h (TARGET_FIX_ERR_A53_843419_DEFAULT):\n+\tAlways define to 0 or 1.\n+\t(TARGET_FIX_ERR_A53_843419): New macro.\n+\t* config/aarch64/aarch64-elf-raw.h\n+\t(TARGET_FIX_ERR_A53_843419_DEFAULT): Update for above changes.\n+\t* config/aarch64/aarch64-linux.h: Likewise.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_override_options_after_change_1): Do not default\n+\taarch64_nopcrelative_literal_loads to true if Cortex-A53 erratum\n+\t843419 is on.\n+\t(aarch64_attributes): Handle fix-cortex-a53-843419.\n+\t(aarch64_can_inline_p): Likewise.\n+\t* config/aarch64/aarch64.opt (aarch64_fix_a53_err843419): Save.\n+\n 2016-03-10  Alan Lawrence  <alan.lawrence@arm.com>\n \tJakub Jelinek <jakub@redhat.com>\n "}, {"sha": "90970178892383bd1bdbdb8a047040b51e2ebd60", "filename": "gcc/config/aarch64/aarch64-elf-raw.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-elf-raw.h?ref=48bb1a55e8b1a1624a9b8f49414e6680e517599c", "patch": "@@ -35,7 +35,7 @@\n   \" %{mfix-cortex-a53-835769:--fix-cortex-a53-835769}\"\n #endif\n \n-#ifdef TARGET_FIX_ERR_A53_843419_DEFAULT\n+#if TARGET_FIX_ERR_A53_843419_DEFAULT\n #define CA53_ERR_843419_SPEC \\\n   \" %{!mno-fix-cortex-a53-843419:--fix-cortex-a53-843419}\"\n #else"}, {"sha": "5fcaa59a3affa34e8dbceff675b4a9cd7dc39e43", "filename": "gcc/config/aarch64/aarch64-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h?ref=48bb1a55e8b1a1624a9b8f49414e6680e517599c", "patch": "@@ -53,7 +53,7 @@\n   \" %{mfix-cortex-a53-835769:--fix-cortex-a53-835769}\"\n #endif\n \n-#ifdef TARGET_FIX_ERR_A53_843419_DEFAULT\n+#if TARGET_FIX_ERR_A53_843419_DEFAULT\n #define CA53_ERR_843419_SPEC \\\n   \" %{!mno-fix-cortex-a53-843419:--fix-cortex-a53-843419}\"\n #else"}, {"sha": "51dfe7917967a3df7ed59462dfaa6a3b47e07e77", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=48bb1a55e8b1a1624a9b8f49414e6680e517599c", "patch": "@@ -8132,9 +8132,18 @@ aarch64_override_options_after_change_1 (struct gcc_options *opts)\n   if (opts->x_nopcrelative_literal_loads == 1)\n     aarch64_nopcrelative_literal_loads = false;\n \n-  /* If it is not set on the command line, we default to no\n-     pc relative literal loads.  */\n-  if (opts->x_nopcrelative_literal_loads == 2)\n+  /* If it is not set on the command line, we default to no pc\n+     relative literal loads, unless the workaround for Cortex-A53\n+     erratum 843419 is in effect.  */\n+  /* This is PR70113. When building the Linux kernel with\n+     CONFIG_ARM64_ERRATUM_843419, support for relocations\n+     R_AARCH64_ADR_PREL_PG_HI21 and R_AARCH64_ADR_PREL_PG_HI21_NC is\n+     removed from the kernel to avoid loading objects with possibly\n+     offending sequences. With nopcrelative_literal_loads, we would\n+     generate such relocations, preventing the kernel build from\n+     succeeding.  */\n+  if (opts->x_nopcrelative_literal_loads == 2\n+      && !TARGET_FIX_ERR_A53_843419)\n     aarch64_nopcrelative_literal_loads = true;\n \n   /* In the tiny memory model it makes no sense\n@@ -8818,6 +8827,8 @@ static const struct aarch64_attribute_info aarch64_attributes[] =\n      OPT_mgeneral_regs_only },\n   { \"fix-cortex-a53-835769\", aarch64_attr_bool, true, NULL,\n      OPT_mfix_cortex_a53_835769 },\n+  { \"fix-cortex-a53-843419\", aarch64_attr_bool, true, NULL,\n+     OPT_mfix_cortex_a53_843419 },\n   { \"cmodel\", aarch64_attr_enum, false, NULL, OPT_mcmodel_ },\n   { \"strict-align\", aarch64_attr_mask, false, NULL, OPT_mstrict_align },\n   { \"omit-leaf-frame-pointer\", aarch64_attr_bool, true, NULL,\n@@ -9232,6 +9243,12 @@ aarch64_can_inline_p (tree caller, tree callee)\n \t  2, TARGET_FIX_ERR_A53_835769_DEFAULT))\n     return false;\n \n+  if (!aarch64_tribools_ok_for_inlining_p (\n+\t  caller_opts->x_aarch64_fix_a53_err843419,\n+\t  callee_opts->x_aarch64_fix_a53_err843419,\n+\t  2, TARGET_FIX_ERR_A53_843419))\n+    return false;\n+\n   /* If the user explicitly specified -momit-leaf-frame-pointer for the\n      caller and calle and they don't match up, reject inlining.  */\n   if (!aarch64_tribools_ok_for_inlining_p ("}, {"sha": "ec96ce3468b1def0c884fa6ee35174fd3f4681c7", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=48bb1a55e8b1a1624a9b8f49414e6680e517599c", "patch": "@@ -179,6 +179,20 @@ extern unsigned aarch64_architecture_version;\n   ((aarch64_fix_a53_err835769 == 2)\t\\\n   ? TARGET_FIX_ERR_A53_835769_DEFAULT : aarch64_fix_a53_err835769)\n \n+/* Make sure this is always defined so we don't have to check for ifdefs\n+   but rather use normal ifs.  */\n+#ifndef TARGET_FIX_ERR_A53_843419_DEFAULT\n+#define TARGET_FIX_ERR_A53_843419_DEFAULT 0\n+#else\n+#undef TARGET_FIX_ERR_A53_843419_DEFAULT\n+#define TARGET_FIX_ERR_A53_843419_DEFAULT 1\n+#endif\n+\n+/* Apply the workaround for Cortex-A53 erratum 843419.  */\n+#define TARGET_FIX_ERR_A53_843419\t\\\n+  ((aarch64_fix_a53_err843419 == 2)\t\\\n+  ? TARGET_FIX_ERR_A53_843419_DEFAULT : aarch64_fix_a53_err843419)\n+\n /* ARMv8.1 Adv.SIMD support.  */\n #define TARGET_SIMD_RDMA (TARGET_SIMD && AARCH64_ISA_RDMA)\n "}, {"sha": "c637ff43a504933c701735c9d5afddbc9a1e41f8", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48bb1a55e8b1a1624a9b8f49414e6680e517599c/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=48bb1a55e8b1a1624a9b8f49414e6680e517599c", "patch": "@@ -73,7 +73,7 @@ Target Report Var(aarch64_fix_a53_err835769) Init(2) Save\n Workaround for ARM Cortex-A53 Erratum number 835769.\n \n mfix-cortex-a53-843419\n-Target Report\n+Target Report Var(aarch64_fix_a53_err843419) Init(2) Save\n Workaround for ARM Cortex-A53 Erratum number 843419.\n \n mlittle-endian"}]}