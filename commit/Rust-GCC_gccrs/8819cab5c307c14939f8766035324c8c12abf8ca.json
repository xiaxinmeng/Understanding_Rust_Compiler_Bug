{"sha": "8819cab5c307c14939f8766035324c8c12abf8ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxOWNhYjVjMzA3YzE0OTM5Zjg3NjYwMzUzMjRjOGMxMmFiZjhjYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-08-11T18:52:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-08-11T18:52:38Z"}, "message": "ip2k.c (mdr_resequence_xy_yx, [...]): Make function static to match prototype.\n\n\t* ip2k.c (mdr_resequence_xy_yx, mdr_propagate_reg_equivs,\n\tmdr_try_move_dp_reload, ip2k_check_can_adjust_stack_ref,\n\tip2k_adjust_stack_ref, mdr_try_move_pushes, mdr_try_propagate_clr,\n\tip2k_xexp_not_uses_reg_for_mem, mdr_try_propagate_move,\n\tmdr_try_remove_redundant_insns, track_w_reload,\n\tmdr_try_wreg_elim): Make function static to match prototype.\n\t* mmix.c (mmix_target_asm_function_epilogue): Likewise.  Mark\n\tparameter with ATTRIBUTE_UNUSED.\n\nFrom-SVN: r56210", "tree": {"sha": "4559f6a151c5c3c082d4f19ce084ea92a35cde35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4559f6a151c5c3c082d4f19ce084ea92a35cde35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8819cab5c307c14939f8766035324c8c12abf8ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8819cab5c307c14939f8766035324c8c12abf8ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8819cab5c307c14939f8766035324c8c12abf8ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8819cab5c307c14939f8766035324c8c12abf8ca/comments", "author": null, "committer": null, "parents": [{"sha": "ab2877a39b51a0b21716c7bac19f75a62a7f79f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2877a39b51a0b21716c7bac19f75a62a7f79f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2877a39b51a0b21716c7bac19f75a62a7f79f1"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "77dcb522fc2315a8b185bd981573eb6ae097301c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819cab5c307c14939f8766035324c8c12abf8ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819cab5c307c14939f8766035324c8c12abf8ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8819cab5c307c14939f8766035324c8c12abf8ca", "patch": "@@ -1,3 +1,14 @@\n+2002-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ip2k.c (mdr_resequence_xy_yx, mdr_propagate_reg_equivs,\n+\tmdr_try_move_dp_reload, ip2k_check_can_adjust_stack_ref,\n+\tip2k_adjust_stack_ref, mdr_try_move_pushes, mdr_try_propagate_clr,\n+\tip2k_xexp_not_uses_reg_for_mem, mdr_try_propagate_move,\n+\tmdr_try_remove_redundant_insns, track_w_reload,\n+\tmdr_try_wreg_elim): Make function static to match prototype.\n+\t* mmix.c (mmix_target_asm_function_epilogue): Likewise.  Mark\n+\tparameter with ATTRIBUTE_UNUSED.\n+\n 2002-08-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* arc.c (arc_init): Don't use ISO C style function definitions."}, {"sha": "2c91ea8e26fefb13a41c9e56ee4e93ee287f4685", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819cab5c307c14939f8766035324c8c12abf8ca/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819cab5c307c14939f8766035324c8c12abf8ca/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=8819cab5c307c14939f8766035324c8c12abf8ca", "patch": "@@ -3370,7 +3370,7 @@ ip2k_address_cost (x)\n    much cheaper and the move from this to the original source operand will be\n    no more expensive than the original move.  */\n \n-void\n+static void\n mdr_resequence_xy_yx (first_insn)\n      rtx first_insn;\n {\n@@ -3622,7 +3622,7 @@ mdr_propagate_reg_equivs_sequence (first_insn, orig, equiv)\n    holds the same value and thus allow one or more register loads to\n    be eliminated.  */\n \n-void\n+static void\n mdr_propagate_reg_equivs (first_insn)\n      rtx first_insn;\n {\n@@ -4028,7 +4028,7 @@ mdr_try_dp_reload_elim (first_insn)\n    that we can move to earlier points within the file.\n    Moving these out of the way allows more peepholes to match.  */\n \n-void\n+static void\n mdr_try_move_dp_reload (first_insn)\n      rtx first_insn;\n {\n@@ -4119,7 +4119,7 @@ mdr_try_move_dp_reload (first_insn)\n /* Look to see if the expression, x, can have any stack references offset by\n    a fixed constant, offset.  If it definitely can then returns non-zero.  */\n \n-int\n+static int\n ip2k_check_can_adjust_stack_ref (x, offset)\n      rtx x;\n      int offset;\n@@ -4167,7 +4167,7 @@ ip2k_check_can_adjust_stack_ref (x, offset)\n /* Adjusts all of the stack references in the expression pointed to by x by\n    a fixed offset.  */\n \n-void\n+static void\n ip2k_adjust_stack_ref (x, offset)\n      rtx *x;\n      int offset;\n@@ -4212,7 +4212,7 @@ ip2k_adjust_stack_ref (x, offset)\n    to earlier points within the file.  Moving these out of the way allows more\n    peepholes to match.  */\n \n-void\n+static void\n mdr_try_move_pushes (first_insn)\n      rtx first_insn;\n {\n@@ -4625,7 +4625,7 @@ mdr_try_propagate_clr_sequence (first_insn, regno)\n    actually change some instruction patterns when we're doing this whereas\n    move propagation is just about doing a search and replace.  */\n \n-void\n+static void\n mdr_try_propagate_clr (first_insn)\n      rtx first_insn;\n {\n@@ -4656,7 +4656,7 @@ mdr_try_propagate_clr (first_insn)\n    via the specified register.  This is very conservative and only returns\n    non-zero if we definitely don't have such a memory ref.  */\n \n-int\n+static int\n ip2k_xexp_not_uses_reg_for_mem (x, regno)\n      rtx x;\n      unsigned int regno;\n@@ -4848,7 +4848,7 @@ mdr_try_propagate_move_sequence (first_insn, orig, equiv)\n    holds the same value and thus allow one or more register loads to\n    be eliminated.  */\n \n-void\n+static void\n mdr_try_propagate_move (first_insn)\n      rtx first_insn;\n {\n@@ -4897,7 +4897,7 @@ mdr_try_propagate_move (first_insn)\n \n /* Try to remove redundant instructions.  */\n \n-void\n+static void\n mdr_try_remove_redundant_insns (first_insn)\n      rtx first_insn;\n {\n@@ -4993,7 +4993,7 @@ struct we_jump_targets *ip2k_we_jump_targets;\n \n /* WREG equivalence tracking used within DP reload elimination.  */\n \n-int\n+static int\n track_w_reload (insn, w_current, w_current_ok, modifying)\n      rtx insn;\n      rtx *w_current;\n@@ -5083,7 +5083,7 @@ track_w_reload (insn, w_current, w_current_ok, modifying)\n /* As part of the machine-dependent reorg we scan moves into w and track them\n    to see where any are redundant.  */\n \n-void\n+static void\n mdr_try_wreg_elim (first_insn)\n      rtx first_insn;\n {"}, {"sha": "5820138bbe5328264f520f1fe94528a014cc8269", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819cab5c307c14939f8766035324c8c12abf8ca/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819cab5c307c14939f8766035324c8c12abf8ca/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=8819cab5c307c14939f8766035324c8c12abf8ca", "patch": "@@ -760,10 +760,10 @@ mmix_machine_dependent_reorg (first)\n \n /* TARGET_ASM_FUNCTION_EPILOGUE.  */\n \n-void\n+static void\n mmix_target_asm_function_epilogue (stream, locals_size)\n      FILE *stream;\n-     HOST_WIDE_INT locals_size;\n+     HOST_WIDE_INT locals_size ATTRIBUTE_UNUSED;\n \n {\n   /* Emit an \\n for readability of the generated assembly.  */"}]}