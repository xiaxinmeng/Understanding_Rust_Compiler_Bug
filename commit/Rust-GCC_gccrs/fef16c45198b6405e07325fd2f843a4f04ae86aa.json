{"sha": "fef16c45198b6405e07325fd2f843a4f04ae86aa", "node_id": "C_kwDOANBUbNoAKGZlZjE2YzQ1MTk4YjY0MDVlMDczMjVmZDJmODQzYTRmMDRhZTg2YWE", "commit": {"author": {"name": "Michael Eager", "email": "eager@eagercon.com", "date": "2022-10-22T23:23:16Z"}, "committer": {"name": "Michael Eager", "email": "eager@eagercon.com", "date": "2022-10-22T23:34:05Z"}, "message": "Fix uninitialized variable warnings.\n\nCheck for use of previously uninitialized variables; call gcc_unreachable().\nReplace abort() with gcc_unreachable().\n\n2022-10-22  Michael Eager  <eager@eagercon.com>\n\ngcc/\n\t* config/microblaze/microblaze.cc\n\t(microblaze_legitimize_address): Initialize 'reg' to NULL, check for NULL.\n\t(microblaze_address_insns): Replace abort() with gcc_unreachable().\n\t(print_operand_address): Same.\n\t(microblaze_expand_move): Initialize 'p1' to NULL, check for NULL.\n\t(get_branch_target): Replace abort() with gcc_unreachable().", "tree": {"sha": "7b3491f6714bbd207ba9e52d6c456c281375762e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b3491f6714bbd207ba9e52d6c456c281375762e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fef16c45198b6405e07325fd2f843a4f04ae86aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef16c45198b6405e07325fd2f843a4f04ae86aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef16c45198b6405e07325fd2f843a4f04ae86aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef16c45198b6405e07325fd2f843a4f04ae86aa/comments", "author": {"login": "eagerm", "id": 945532, "node_id": "MDQ6VXNlcjk0NTUzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/945532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eagerm", "html_url": "https://github.com/eagerm", "followers_url": "https://api.github.com/users/eagerm/followers", "following_url": "https://api.github.com/users/eagerm/following{/other_user}", "gists_url": "https://api.github.com/users/eagerm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eagerm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eagerm/subscriptions", "organizations_url": "https://api.github.com/users/eagerm/orgs", "repos_url": "https://api.github.com/users/eagerm/repos", "events_url": "https://api.github.com/users/eagerm/events{/privacy}", "received_events_url": "https://api.github.com/users/eagerm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eagerm", "id": 945532, "node_id": "MDQ6VXNlcjk0NTUzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/945532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eagerm", "html_url": "https://github.com/eagerm", "followers_url": "https://api.github.com/users/eagerm/followers", "following_url": "https://api.github.com/users/eagerm/following{/other_user}", "gists_url": "https://api.github.com/users/eagerm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eagerm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eagerm/subscriptions", "organizations_url": "https://api.github.com/users/eagerm/orgs", "repos_url": "https://api.github.com/users/eagerm/repos", "events_url": "https://api.github.com/users/eagerm/events{/privacy}", "received_events_url": "https://api.github.com/users/eagerm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423df44a090846b9c59650efb11745f07914f1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/423df44a090846b9c59650efb11745f07914f1d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/423df44a090846b9c59650efb11745f07914f1d5"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "9290a1f3958ece79e6099f6d88fe89adb2a075db", "filename": "gcc/config/microblaze/microblaze.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef16c45198b6405e07325fd2f843a4f04ae86aa/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef16c45198b6405e07325fd2f843a4f04ae86aa/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.cc?ref=fef16c45198b6405e07325fd2f843a4f04ae86aa", "patch": "@@ -1103,7 +1103,7 @@ microblaze_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \n   if (GET_CODE (xinsn) == SYMBOL_REF)\n     {\n-      rtx reg;\n+      rtx reg = NULL;\n       if (microblaze_tls_symbol_p(xinsn))\n         {\n           reg = microblaze_legitimize_tls_address (xinsn, NULL_RTX);\n@@ -1133,6 +1133,11 @@ microblaze_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t      reg = pic_ref;\n \t    }\n \t}\n+      else\n+\t{\n+\t  /* This should never happen.  */\n+\t  gcc_unreachable ();\n+\t}\n       return reg;\n     }\n \n@@ -1474,7 +1479,7 @@ microblaze_address_insns (rtx x, machine_mode mode)\n \t      case TLS_DTPREL:\n \t\treturn 1;\n \t      default :\n-\t\tabort();\n+\t\tgcc_unreachable ();\n \t    }\n \tdefault:\n \t  break;\n@@ -2624,7 +2629,7 @@ print_operand_address (FILE * file, rtx addr)\n \t\tfputs (\"@TLSDTPREL\", file);\n \t\tbreak;\n \t      default :\n-\t\tabort();\n+\t\tgcc_unreachable ();\n \t\tbreak;\n \t    }\n \t}\n@@ -3413,7 +3418,7 @@ microblaze_expand_move (machine_mode mode, rtx operands[])\n     }\n   if (GET_CODE (op1) == PLUS && GET_CODE (XEXP (op1,1)) == CONST)\n     {\n-      rtx p0, p1, result, temp;\n+      rtx p0, p1 = NULL, result, temp;\n \n       p0 = XEXP (XEXP (op1,1), 0);\n \n@@ -3423,6 +3428,10 @@ microblaze_expand_move (machine_mode mode, rtx operands[])\n \t  p0 = XEXP (p0, 0);\n \t}\n \n+      /* This should never happen.  */\n+      if (p1 == NULL)\n+\tgcc_unreachable ();\n+\n       if (GET_CODE (p0) == UNSPEC && GET_CODE (p1) == CONST_INT\n \t  && flag_pic && TARGET_PIC_DATA_TEXT_REL)\n \t{\n@@ -3799,7 +3808,7 @@ get_branch_target (rtx branch)\n       if (GET_CODE (call) == SET)\n         call = SET_SRC (call);\n       if (GET_CODE (call) != CALL)\n-        abort ();\n+\tgcc_unreachable ();\n       return XEXP (XEXP (call, 0), 0);\n     }\n "}]}