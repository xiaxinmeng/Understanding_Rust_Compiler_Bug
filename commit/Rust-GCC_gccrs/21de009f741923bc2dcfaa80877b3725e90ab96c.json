{"sha": "21de009f741923bc2dcfaa80877b3725e90ab96c", "node_id": "C_kwDOANBUbNoAKDIxZGUwMDlmNzQxOTIzYmMyZGNmYWE4MDg3N2IzNzI1ZTkwYWI5NmM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-19T00:19:08Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-19T00:19:08Z"}, "message": "Daily bump.", "tree": {"sha": "17952cebf57477975ddce207cbce238f7b6b8d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17952cebf57477975ddce207cbce238f7b6b8d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21de009f741923bc2dcfaa80877b3725e90ab96c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21de009f741923bc2dcfaa80877b3725e90ab96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21de009f741923bc2dcfaa80877b3725e90ab96c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21de009f741923bc2dcfaa80877b3725e90ab96c/comments", "author": null, "committer": null, "parents": [{"sha": "f5f1d92fe2e1d75c3fae34497929a1965af704ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f1d92fe2e1d75c3fae34497929a1965af704ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f1d92fe2e1d75c3fae34497929a1965af704ae"}], "stats": {"total": 414, "additions": 413, "deletions": 1}, "files": [{"sha": "04c9deca52539da57bcd46fa44a2ef200c4719cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,224 @@\n+2022-10-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (ipa_agg_value): Remove type.\n+\t(ipa_agg_value_set): Likewise.\n+\t(ipa_copy_agg_values): Remove function.\n+\t(ipa_release_agg_values): Likewise.\n+\t(ipa_auto_call_arg_values) Add a forward declaration.\n+\t(ipa_call_arg_values): Likewise.\n+\t(class ipa_argagg_value_list): New constructors, added member function\n+\tvalue_for_index_p.\n+\t(class ipa_auto_call_arg_values): Removed the destructor and member\n+\tfunction safe_aggval_at.  Use ipa_argagg_values for m_known_aggs.\n+\t(class ipa_call_arg_values): Removed member function safe_aggval_at.\n+\tUse ipa_argagg_values for m_known_aggs.\n+\t(ipa_get_indirect_edge_target): Removed declaration.\n+\t(ipa_find_agg_cst_for_param): Likewise.\n+\t(ipa_find_agg_cst_from_init): New declaration.\n+\t(ipa_agg_value_from_jfunc): Likewise.\n+\t(ipa_agg_value_set_from_jfunc): Removed declaration.\n+\t(ipa_push_agg_values_from_jfunc): New declaration.\n+\t* ipa-cp.cc (ipa_agg_value_from_node): Renamed to\n+\tipa_agg_value_from_jfunc, made public.\n+\t(ipa_agg_value_set_from_jfunc): Removed.\n+\t(ipa_push_agg_values_from_jfunc): New function.\n+\t(ipa_get_indirect_edge_target_1): Removed known_aggs parameter, use\n+\tavs for this purpose too.\n+\t(ipa_get_indirect_edge_target): Removed the overload working on\n+\tipa_auto_call_arg_values, use ipa_argagg_value_list in the remaining\n+\tone.\n+\t(devirtualization_time_bonus): Use ipa_argagg_value_list and\n+\tipa_get_indirect_edge_target_1 instead of\n+\tipa_get_indirect_edge_target.\n+\t(context_independent_aggregate_values): Removed function.\n+\t(gather_context_independent_values): Work on ipa_argagg_value_list.\n+\t(estimate_local_effects): Likewise, define some iterator variables\n+\tonly in the construct where necessary.\n+\t(ipcp_discover_new_direct_edges): Adjust the call to\n+\tipa_get_indirect_edge_target_1.\n+\t(push_agg_values_for_index_from_edge): Adjust the call\n+\tipa_agg_value_from_node which has been renamed to\n+\tipa_agg_value_from_jfunc.\n+\t* ipa-fnsummary.cc (evaluate_conditions_for_known_args): Work on\n+\tipa_argagg_value_list.\n+\t(evaluate_properties_for_edge): Replace manual filling in aggregate\n+\tvalues with call to ipa_push_agg_values_from_jfunc.\n+\t(estimate_calls_size_and_time): Work on ipa_argagg_value_list.\n+\t(ipa_cached_call_context::duplicate_from): Likewise.\n+\t(ipa_cached_call_context::release): Likewise.\n+\t(ipa_call_context::equal_to): Likewise.\n+\t* ipa-prop.cc (ipa_find_agg_cst_from_init): Make public.\n+\t(ipa_find_agg_cst_for_param): Removed function.\n+\t(ipa_find_agg_cst_from_jfunc_items): New function.\n+\t(try_make_edge_direct_simple_call): Replace calls to\n+\tipa_agg_value_set_from_jfunc and ipa_find_agg_cst_for_param with\n+\tipa_find_agg_cst_from_init and ipa_find_agg_cst_from_jfunc_items.\n+\t(try_make_edge_direct_virtual_call): Replace calls to\n+\tipa_agg_value_set_from_jfunc and ipa_find_agg_cst_for_param with\n+\tsimple query of constant jump function and a call to\n+\tipa_find_agg_cst_from_jfunc_items.\n+\t(ipa_auto_call_arg_values::~ipa_auto_call_arg_values): Removed.\n+\n+2022-10-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (IPA_PROP_ARG_INDEX_LIMIT_BITS): New.\n+\t(ipcp_transformation): Added forward declaration.\n+\t(ipa_argagg_value): New type.\n+\t(ipa_argagg_value_list): New type.\n+\t(ipa_agg_replacement_value): Removed type.\n+\t(ipcp_transformation): Switch from using ipa_agg_replacement_value\n+\tto ipa_argagg_value_list.\n+\t(ipa_get_agg_replacements_for_node): Removed.\n+\t(ipa_dump_agg_replacement_values): Removed declaration.\n+\t* ipa-cp.cc: Define INCLUDE_ALGORITHM.\n+\t(values_equal_for_ipcp_p): Moved up in the file.\n+\t(ipa_argagg_value_list::dump): New function.\n+\t(ipa_argagg_value_list::debug): Likewise.\n+\t(ipa_argagg_value_list::get_elt): Likewise.\n+\t(ipa_argagg_value_list::get_elt_for_index): Likewise.\n+\t(ipa_argagg_value_list::get_value): New overloaded functions.\n+\t(ipa_argagg_value_list::superset_of_p): New function.\n+\t(new ipa_argagg_value_list::push_adjusted_values): Likewise.\n+\t(push_agg_values_from_plats): Likewise.\n+\t(intersect_argaggs_with): Likewise.\n+\t(get_clone_agg_value): Removed.\n+\t(ipa_agg_value_from_node): Make last parameter const, use\n+\tipa_argagg_value_list to search values coming from clones.\n+\t(ipa_get_indirect_edge_target_1): Use ipa_argagg_value_list to search\n+\tvalues coming from clones.\n+\t(ipcp_discover_new_direct_edges): Pass around a vector of\n+\tipa_argagg_values rather than a link list of replacement values.\n+\t(cgraph_edge_brings_value_p): Use ipa_argagg_value_list to search\n+\tvalues coming from clones.\n+\t(create_specialized_node): Work with a vector of ipa_argagg_values\n+\trather than a link list of replacement values.\n+\t(self_recursive_agg_pass_through_p): Make the pointer parameters\n+\tconst.\n+\t(copy_plats_to_inter): Removed.\n+\t(intersect_with_plats): Likewise.\n+\t(agg_replacements_to_vector): Likewise.\n+\t(intersect_with_agg_replacements): Likewise.\n+\t(intersect_aggregates_with_edge): Likewise.\n+\t(push_agg_values_for_index_from_edge): Likewise.\n+\t(push_agg_values_from_edge): Likewise.\n+\t(find_aggregate_values_for_callers_subset): Rewrite.\n+\t(cgraph_edge_brings_all_agg_vals_for_node): Likewise.\n+\t(ipcp_val_agg_replacement_ok_p): Use ipa_argagg_value_list to search\n+\taggregate values.\n+\t(decide_about_value): Work with a vector of ipa_argagg_values rather\n+\tthan a link list of replacement values.\n+\t(decide_whether_version_node): Likewise.\n+\t(ipa_analyze_node): Check number of parameters, assert that there\n+\tare no descriptors when bailing out.\n+\t* ipa-prop.cc (ipa_set_node_agg_value_chain): Switch to a vector of\n+\tipa_argagg_value.\n+\t(ipa_node_params_t::duplicate): Removed superfluous handling of\n+\tipa_agg_replacement_values.  Name of src parameter removed because\n+\tit is no longer used.\n+\t(ipcp_transformation_t::duplicate): Replaced duplication of\n+\tipa_agg_replacement_values with copying vector m_agg_values.\n+\t(ipa_dump_agg_replacement_values): Removed.\n+\t(write_ipcp_transformation_info): Stream the new data-structure\n+\tinstead of the old.\n+\t(read_ipcp_transformation_info): Likewise.\n+\t(adjust_agg_replacement_values): Work with ipa_argagg_values instead\n+\tof linked lists of ipa_agg_replacement_values, copy the items and\n+\ttruncate the vector as necessary to keep it sorted instead of marking\n+\titems as invalid.  Return one bool if CFG should be updated.\n+\t(ipcp_modif_dom_walker): Store ipcp_transformation instead of\n+\tlinked list of ipa_agg_replacement_values.\n+\t(ipcp_modif_dom_walker::before_dom_children): Use\n+\tipa_argagg_value_list instead of walking a list of\n+\tipa_agg_replacement_values.\n+\t(ipcp_transform_function): Switch to the new data structure, adjust\n+\tdumping.\n+\n+2022-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107302\n+\t* tree-vect-loop.cc (vectorizable_recurrence): Fix vec_perm\n+\tplacement for a PHI latch def.\n+\n+2022-10-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR tree-optimization/107275\n+\t* tree-if-conv.cc (if_convertible_loop_p_1): Move\n+\tfind_data_references_in_loop call from here...\n+\t(if_convertible_loop_p): And move data-reference vector initialization\n+\tfrom here...\n+\t(tree_if_conversion):... to here.\n+\n+2022-10-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* gimple.def (GIMPLE_ASSUME): New statement kind.\n+\t* gimple.h (struct gimple_statement_assume): New type.\n+\t(is_a_helper <gimple_statement_assume *>::test,\n+\tis_a_helper <const gimple_statement_assume *>::test): New.\n+\t(gimple_build_assume): Declare.\n+\t(gimple_has_substatements): Return true for GIMPLE_ASSUME.\n+\t(gimple_assume_guard, gimple_assume_set_guard,\n+\tgimple_assume_guard_ptr, gimple_assume_body_ptr, gimple_assume_body):\n+\tNew inline functions.\n+\t* gsstruct.def (GSS_ASSUME): New.\n+\t* gimple.cc (gimple_build_assume): New function.\n+\t(gimple_copy): Handle GIMPLE_ASSUME.\n+\t* gimple-pretty-print.cc (dump_gimple_assume): New function.\n+\t(pp_gimple_stmt_1): Handle GIMPLE_ASSUME.\n+\t* gimple-walk.cc (walk_gimple_op): Handle GIMPLE_ASSUME.\n+\t* omp-low.cc (WALK_SUBSTMTS): Likewise.\n+\t(lower_omp_1): Likewise.\n+\t* omp-oacc-kernels-decompose.cc (adjust_region_code_walk_stmt_fn):\n+\tLikewise.\n+\t* tree-cfg.cc (verify_gimple_stmt, verify_gimple_in_seq_2): Likewise.\n+\t* function.h (struct function): Add assume_function bitfield.\n+\t* gimplify.cc (gimplify_call_expr): If the assumption isn't\n+\tsimple enough, expand it into GIMPLE_ASSUME wrapped block or\n+\tfor -O0 drop it.\n+\t* gimple-low.cc: Include attribs.h.\n+\t(create_assumption_fn): New function.\n+\t(struct lower_assumption_data): New type.\n+\t(find_assumption_locals_r, assumption_copy_decl,\n+\tadjust_assumption_stmt_r, adjust_assumption_stmt_op,\n+\tlower_assumption): New functions.\n+\t(lower_stmt): Handle GIMPLE_ASSUME.\n+\t* tree-ssa-ccp.cc (pass_fold_builtins::execute): Remove\n+\tIFN_ASSUME calls.\n+\t* lto-streamer-out.cc (output_struct_function_base): Pack\n+\tassume_function bit.\n+\t* lto-streamer-in.cc (input_struct_function_base): And unpack it.\n+\t* cgraphunit.cc (cgraph_node::expand): Don't verify assume_function\n+\thas TREE_ASM_WRITTEN set and don't release its body.\n+\t(symbol_table::compile): Allow assume functions not to have released\n+\tbody.\n+\t* internal-fn.cc (expand_ASSUME): Remove gcc_unreachable.\n+\t* passes.cc (execute_one_pass): For TODO_discard_function don't\n+\trelease body of assume functions.\n+\t* cgraph.cc (cgraph_node::verify_node): Don't verify cgraph nodes\n+\tof PROP_assumptions_done functions.\n+\t* tree-pass.h (PROP_assumptions_done): Define.\n+\t(TODO_discard_function): Adjust comment.\n+\t(make_pass_assumptions): Declare.\n+\t* passes.def (pass_assumptions): Add.\n+\t* timevar.def (TV_TREE_ASSUMPTIONS): New.\n+\t* tree-inline.cc (remap_gimple_stmt): Handle GIMPLE_ASSUME.\n+\t* tree-vrp.cc (pass_data_assumptions): New variable.\n+\t(pass_assumptions): New class.\n+\t(make_pass_assumptions): New function.\n+\n+2022-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107301\n+\t* gimple-ssa-isolate-paths.cc (handle_return_addr_local_phi_arg):\n+\tCheck whether we can duplicate the block.\n+\t(find_implicit_erroneous_behavior): Likewise.\n+\n+2022-10-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/107273\n+\t* value-relation.cc (equiv_oracle::add_partial_equiv): Merge\n+\tinstead of copying precison of each member.\n+\n 2022-10-17  Jeff Law  <jeffreyalaw@gmail.com>\n \n \tPR target/101697"}, {"sha": "268d1b47e9dcc871bee4b0b261e9d92435f5636a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1 +1 @@\n-20221018\n+20221019"}, {"sha": "63076ed849a2933f1b3fb86cb3c0bddd021d5bad", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,11 @@\n+2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/36113\n+\t* c-common.cc (c_common_type_for_size): Add fallback to\n+\twidest_unsigned_literal_type_node or\n+\twidest_integer_literal_type_node for precision that may not\n+\texactly match the precision of those types.\n+\n 2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-cppbuiltin.cc (c_cpp_builtins): If bfloat16_type_node,"}, {"sha": "7cb2e9c5199d86efc890e9a93f2726755450d2a3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,24 @@\n+2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/107164\n+\t* c-decl.cc (shadow_tag_warned): If pedantic, diagnose \"enum tag;\"\n+\twith previous declaration visible.\n+\n+2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/36113\n+\t* c-decl.cc (finish_enum): If any enumerators do not fit in int,\n+\tconvert all to the type of the enumeration.  pedwarn if no integer\n+\ttype fits all enumerators and default to\n+\twidest_integer_literal_type_node in that case.  Otherwise pedwarn\n+\tfor type wider than intmax_t.\n+\t(build_enumerator): pedwarn for enumerators outside the range of\n+\tuintmax_t or intmax_t, and otherwise use pedwarn_c11 for\n+\tenumerators outside the range of int.  On overflow, attempt to\n+\tfind a wider type that can hold the value of the next enumerator.\n+\tDo not convert value to type determined with\n+\tc_common_type_for_size.\n+\n 2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.cc (convert_arguments): Don't promote __bf16 to"}, {"sha": "1fe2b1f3329f1ab8da4e25a6c8a82dbb63e62fd5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,19 @@\n+2022-10-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105045\n+\t* module.cc (trees_out::tpl_parms_fini): Don't assume default\n+\ttemplate arguments must be trailing.\n+\t(trees_in::tpl_parms_fini): Likewise.\n+\n+2022-10-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* cp-tree.h (build_assume_call): Declare.\n+\t* parser.cc (cp_parser_omp_assumption_clauses): Use build_assume_call.\n+\t* cp-gimplify.cc (build_assume_call): New function.\n+\t(process_stmt_assume_attribute): Use build_assume_call.\n+\t* pt.cc (tsubst_copy_and_build): Likewise.\n+\n 2022-10-17  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101449"}, {"sha": "763e88a92ff4bb1adcbbd3fa7aad4024c64f8d64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,68 @@\n+2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/107164\n+\t* gcc.dg/c99-tag-4.c, gcc.dg/c99-tag-5.c, gcc.dg/c99-tag-6.c: New\n+\ttests.\n+\n+2022-10-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR testsuite/107213\n+\t* c-c++-common/pointer-to-fn1.c: Only run on i?86/x86_64.\n+\n+2022-10-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105045\n+\t* g++.dg/modules/pr105045_a.C: New test.\n+\t* g++.dg/modules/pr105045_b.C: New test.\n+\n+2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/36113\n+\t* gcc.dg/c11-enum-1.c, gcc.dg/c11-enum-2.c, gcc.dg/c11-enum-3.c,\n+\tgcc.dg/c2x-enum-1.c, gcc.dg/c2x-enum-2.c, gcc.dg/c2x-enum-3.c,\n+\tgcc.dg/c2x-enum-4.c, gcc.dg/c2x-enum-5.c: New tests.\n+\t* gcc.dg/pr30260.c: Explicitly use -std=gnu11.  Update expected\n+\tdiagnostics.\n+\t* gcc.dg/torture/pr25183.c: Update expected diagnostics.\n+\n+2022-10-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipcp-agg-11.c: Adjust dumps.\n+\t* gcc.dg/ipa/ipcp-agg-8.c: Likewise.\n+\n+2022-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107302\n+\t* gcc.dg/vect/pr107302.c: New testcase.\n+\n+2022-10-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.dg/vect/pr107275.c: New test.\n+\n+2022-10-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106654\n+\t* g++.dg/cpp23/attr-assume5.C: New test.\n+\t* g++.dg/cpp23/attr-assume6.C: New test.\n+\t* g++.dg/cpp23/attr-assume7.C: New test.\n+\n+2022-10-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107301\n+\t* gcc.dg/torture/pr107301.c: New testcase.\n+\n+2022-10-18  Liwei Xu  <liwei.xu@intel.com>\n+\n+\tPR testsuite/107220\n+\t* gcc.dg/tree-ssa/forwprop-19.c: Move scanning pass from\n+\tforwprop1 to dse1, This fixs the test case fail.\n+\n+2022-10-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/107273\n+\t* gcc.dg/tree-ssa/pr107273-1.c: New.\n+\t* gcc.dg/tree-ssa/pr107273-2.c: New.\n+\n 2022-10-17  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/104330"}, {"sha": "ea4997d34cf879b9505002f80ee102a942c451f2", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,7 @@\n+2022-10-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* Makefile.in: Quote variable.\n+\n 2022-10-17  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* unwind-generic.h (_Unwind_Frames_Increment): Add the EXC"}, {"sha": "aae88a1f0c5d5f4f98ca863591b13234bd87f7b8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,14 @@\n+2022-10-18  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* acinclude.m4 (ac_cv_func_strncmp_works): Add missing\n+\tint return type and parameter list to the definition of main.\n+\tInclude <stdlib.h> and <string.h> for prototypes.\n+\t(ac_cv_c_stack_direction): Add missing\n+\tint return type and parameter list to the definitions of\n+\tmain, find_stack_direction.  Include <stdlib.h> for exit\n+\tprototype.\n+\t* configure: Regenerate.\n+\n 2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-demangle.h (D_BUILTIN_TYPE_COUNT): Increment."}, {"sha": "1c3beef38155d1af7f197765cf137dd48d44cfb0", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,9 @@\n+2022-10-18  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* configure.ac (sanitizer_supported): Include <unistd.h> for\n+\tsyscall prototype.\n+\t* configure: Regenerate.\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "09988f69a254da44473f0a113a5015a433fd3585", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21de009f741923bc2dcfaa80877b3725e90ab96c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21de009f741923bc2dcfaa80877b3725e90ab96c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=21de009f741923bc2dcfaa80877b3725e90ab96c", "patch": "@@ -1,3 +1,63 @@\n+2022-10-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (stride_view): Define.\n+\t(stride_view::_Iterator): Define.\n+\t(views::__detail::__can_stride_view): Define.\n+\t(views::_Stride, views::stride): Define.\n+\t* testsuite/std/ranges/adaptors/stride/1.cc: New test.\n+\n+2022-10-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106652\n+\t* include/std/stdfloat: New file.\n+\t* include/std/numbers (__glibcxx_numbers): Define and use it\n+\tfor __float128 explicit instantiations as well as\n+\t_Float{16,32,64,128} and __gnu_cxx::__bfloat16_t.\n+\t* include/std/atomic (atomic<_Float16>, atomic<_Float32>,\n+\tatomic<_Float64>, atomic<_Float128>, atomic<__gnu_cxx::__bfloat16_t>):\n+\tNew explicit instantiations.\n+\t* include/std/type_traits (__is_floating_point_helper<_Float16>,\n+\t__is_floating_point_helper<_Float32>,\n+\t__is_floating_point_helper<_Float64>,\n+\t__is_floating_point_helper<_Float128>,\n+\t__is_floating_point_helper<__gnu_cxx::__bfloat16_t>): Likewise.\n+\t* include/std/limits (__glibcxx_concat3_, __glibcxx_concat3,\n+\t__glibcxx_float_n): Define.\n+\t(numeric_limits<_Float16>, numeric_limits<_Float32>,\n+\tnumeric_limits<_Float64>, numeric_limits<_Float128>,\n+\tnumeric_limits<__gnu_cxx::__bfloat16_t>): New explicit instantiations.\n+\t* include/bits/std_abs.h (abs): New overloads for\n+\t_Float{16,32,64,128} and __gnu_cxx::__bfloat16_t.\n+\t* include/bits/c++config (_GLIBCXX_LDOUBLE_IS_IEEE_BINARY128): Define\n+\tif long double is IEEE quad.\n+\t(__gnu_cxx::__bfloat16_t): New using.\n+\t* include/c_global/cmath (acos, asin, atan, atan2, ceil, cos, cosh,\n+\texp, fabs, floor, fmod, frexp, ldexp, log, log10, modf, pow, sin,\n+\tsinh, sqrt, tan, tanh, fpclassify, isfinite, isinf, isnan, isnormal,\n+\tsignbit, isgreater, isgreaterequal, isless, islessequal,\n+\tislessgreater, isunordered, acosh, asinh, atanh, cbrt, copysign, erf,\n+\terfc, exp2, expm1, fdim, fma, fmax, fmin, hypot, ilogb, lgamma,\n+\tllrint, llround, log1p, log2, logb, lrint, lround, nearbyint,\n+\tnextafter, remainder, rint, round, scalbln, scalbn, tgamma, trunc,\n+\tlerp): New overloads with _Float{16,32,64,128} or\n+\t__gnu_cxx::__bfloat16_t types.\n+\t* config/os/gnu-linux/os_defines.h (_GLIBCXX_HAVE_FLOAT128_MATH):\n+\tPrepare for definition if glibc 2.26 and later implements *f128 APIs\n+\tbut comment out the actual definition for now.\n+\t* include/ext/type_traits.h (__promote<_Float16>, __promote<_Float32>,\n+\t__promote<_Float64>, __promote<_Float128>,\n+\t__promote<__gnu_cxx::__bfloat16_t>): New specializations.\n+\t* include/Makefile.am (std_headers): Add stdfloat.\n+\t* include/Makefile.in: Regenerated.\n+\t* include/precompiled/stdc++.h: Include stdfloat.\n+\t* testsuite/18_support/headers/stdfloat/types_std.cc: New test.\n+\t* testsuite/18_support/headers/limits/synopsis_cxx23.cc: New test.\n+\t* testsuite/26_numerics/headers/cmath/c99_classification_macros_c++23.cc:\n+\tNew test.\n+\t* testsuite/26_numerics/headers/cmath/functions_std_c++23.cc: New test.\n+\t* testsuite/26_numerics/numbers/4.cc: New test.\n+\t* testsuite/29_atomics/atomic_float/requirements_cxx23.cc: New test.\n+\n 2022-10-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/charconv (__cpp_lib_constexpr_charconv): Define to"}]}