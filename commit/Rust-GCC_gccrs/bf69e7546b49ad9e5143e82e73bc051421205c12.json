{"sha": "bf69e7546b49ad9e5143e82e73bc051421205c12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY2OWU3NTQ2YjQ5YWQ5ZTUxNDNlODJlNzNiYzA1MTQyMTIwNWMxMg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-01-08T04:35:35Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-01-08T04:35:35Z"}, "message": "Compute memory strides on a whole loop.\n\n2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-interchange.c (memory_strides_in_loop_depth): Renamed\n\tmemory_strides_in_loop.  Gather memory strides on a whole loop.\n\t(pbb_interchange_profitable_p): Renamed lst_interchange_profitable_p.\n\t(lst_interchange_profitable_p): Removed.\n\t(lst_try_interchange_loops): Call lst_interchange_profitable_p.\n\nFrom-SVN: r155724", "tree": {"sha": "99295e9feddc39e568af8bf7a3b0a43a9c30764e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99295e9feddc39e568af8bf7a3b0a43a9c30764e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf69e7546b49ad9e5143e82e73bc051421205c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf69e7546b49ad9e5143e82e73bc051421205c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf69e7546b49ad9e5143e82e73bc051421205c12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf69e7546b49ad9e5143e82e73bc051421205c12/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa29a0918a31605ab99d5e57eeadc9451f395c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa29a0918a31605ab99d5e57eeadc9451f395c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa29a0918a31605ab99d5e57eeadc9451f395c8"}], "stats": {"total": 89, "additions": 35, "deletions": 54}, "files": [{"sha": "ea58308b35f94409caa8f02ceb182e8330bda824", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf69e7546b49ad9e5143e82e73bc051421205c12/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf69e7546b49ad9e5143e82e73bc051421205c12/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=bf69e7546b49ad9e5143e82e73bc051421205c12", "patch": "@@ -1,3 +1,11 @@\n+2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-interchange.c (memory_strides_in_loop_depth): Renamed\n+\tmemory_strides_in_loop.  Gather memory strides on a whole loop.\n+\t(pbb_interchange_profitable_p): Renamed lst_interchange_profitable_p.\n+\t(lst_interchange_profitable_p): Removed.\n+\t(lst_try_interchange_loops): Call lst_interchange_profitable_p.\n+\n 2010-01-07  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tRevert patch 2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>"}, {"sha": "90982f84f9307f55a34b8e85af6d0d7d7164059a", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 27, "deletions": 54, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf69e7546b49ad9e5143e82e73bc051421205c12/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf69e7546b49ad9e5143e82e73bc051421205c12/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=bf69e7546b49ad9e5143e82e73bc051421205c12", "patch": "@@ -329,34 +329,38 @@ memory_stride_in_loop (Value stride, graphite_dim_t depth, poly_dr_p pdr)\n   ppl_delete_Linear_Expression (le);\n }\n \n-/* Sets STRIDES to the sum of all the strides of the data references accessed   */\n+/* Sets STRIDES to the sum of all the strides of the data references\n+   accessed in LOOP at DEPTH.  */\n \n static void\n-memory_strides_in_loop_depth (poly_bb_p pbb, graphite_dim_t depth, Value strides)\n+memory_strides_in_loop (lst_p loop, graphite_dim_t depth, Value strides)\n {\n-  int i;\n+  int i, j;\n+  lst_p l;\n   poly_dr_p pdr;\n   Value s, n;\n \n-  value_set_si (strides, 0);\n   value_init (s);\n   value_init (n);\n \n-  for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (pbb), i, pdr); i++)\n-    {\n-      value_set_si (n, PDR_NB_REFS (pdr));\n-\n-      memory_stride_in_loop (s, depth, pdr);\n-      value_multiply (s, s, n);\n-      value_addto (strides, strides, s);\n-    }\n+  for (j = 0; VEC_iterate (lst_p, LST_SEQ (loop), j, l); j++)\n+    if (LST_LOOP_P (l))\n+      memory_strides_in_loop (l, depth, strides);\n+    else\n+      for (i = 0; VEC_iterate (poly_dr_p, PBB_DRS (LST_PBB (l)), i, pdr); i++)\n+\t{\n+\t  memory_stride_in_loop (s, depth, pdr);\n+\t  value_set_si (n, PDR_NB_REFS (pdr));\n+\t  value_multiply (s, s, n);\n+\t  value_addto (strides, strides, s);\n+\t}\n \n   value_clear (s);\n   value_clear (n);\n }\n \n-/* Returns true when it is profitable to interchange time dimensions DEPTH1\n-   and DEPTH2 with DEPTH1 < DEPTH2 for PBB.\n+/* Return true when the interchange of loops LOOP1 and LOOP2 is\n+   profitable.\n \n    Example:\n \n@@ -437,19 +441,22 @@ memory_strides_in_loop_depth (poly_bb_p pbb, graphite_dim_t depth, Value strides\n    profitable to interchange the loops at DEPTH1 and DEPTH2.  */\n \n static bool\n-pbb_interchange_profitable_p (graphite_dim_t depth1, graphite_dim_t depth2,\n-\t\t\t      poly_bb_p pbb)\n+lst_interchange_profitable_p (lst_p loop1, lst_p loop2)\n {\n   Value d1, d2;\n   bool res;\n \n-  gcc_assert (depth1 < depth2);\n+  gcc_assert (loop1 && loop2\n+\t      && LST_LOOP_P (loop1) && LST_LOOP_P (loop2)\n+\t      && lst_depth (loop1) < lst_depth (loop2));\n \n   value_init (d1);\n   value_init (d2);\n+  value_set_si (d1, 0);\n+  value_set_si (d2, 0);\n \n-  memory_strides_in_loop_depth (pbb, depth1, d1);\n-  memory_strides_in_loop_depth (pbb, depth2, d2);\n+  memory_strides_in_loop (loop1, lst_depth (loop1), d1);\n+  memory_strides_in_loop (loop2, lst_depth (loop2), d2);\n \n   res = value_lt (d1, d2);\n \n@@ -507,40 +514,6 @@ lst_apply_interchange (lst_p lst, int depth1, int depth2)\n     pbb_interchange_loop_depths (depth1, depth2, LST_PBB (lst));\n }\n \n-/* Return true when the interchange of loops at depths DEPTH1 and\n-   DEPTH2 to all the statements below LST is profitable.  */\n-\n-static bool\n-lst_interchange_profitable_p (lst_p lst, int depth1, int depth2)\n-{\n-  if (!lst)\n-    return false;\n-\n-  if (LST_LOOP_P (lst))\n-    {\n-      int i;\n-      lst_p l;\n-      bool res = false;\n-\n-      for (i = 0; VEC_iterate (lst_p, LST_SEQ (lst), i, l); i++)\n-\t{\n-\t  bool profitable = lst_interchange_profitable_p (l, depth1, depth2);\n-\n-\t  if (profitable && !LST_LOOP_P (lst)\n-\t      && dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file,\n-\t\t     \"Interchanging loops at depths %d and %d is profitable for stmt_%d.\\n\",\n-\t\t     depth1, depth2, pbb_index (LST_PBB (lst)));\n-\n-\t  res |= profitable;\n-\t}\n-\n-      return res;\n-    }\n-  else\n-    return pbb_interchange_profitable_p (depth1, depth2, LST_PBB (lst));\n-}\n-\n /* Return true when the nest starting at LOOP1 and ending on LOOP2 is\n    perfect: i.e. there are no sequence of statements.  */\n \n@@ -616,7 +589,7 @@ lst_try_interchange_loops (scop_p scop, lst_p loop1, lst_p loop2)\n \n   lst_p before = NULL, nest = NULL, after = NULL;\n \n-  if (!lst_interchange_profitable_p (loop2, depth1, depth2))\n+  if (!lst_interchange_profitable_p (loop1, loop2))\n     return false;\n \n   if (!lst_perfectly_nested_p (loop1, loop2))"}]}