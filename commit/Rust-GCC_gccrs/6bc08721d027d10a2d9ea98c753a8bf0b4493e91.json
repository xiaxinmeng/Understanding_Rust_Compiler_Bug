{"sha": "6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjMDg3MjFkMDI3ZDEwYTJkOWVhOThjNzUzYThiZjBiNDQ5M2U5MQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2019-09-18T08:32:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:32:55Z"}, "message": "[Ada] Fix portability issues in access to subprograms\n\nThis patch improves the portability of the code generated by the\ncompiler for access to subprograms. Written by Richard Kenner.\n\n2019-09-18  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_N_Op_Eq): The frontend assumes that we can\n\tdo a bit-for-bit comparison of two access to protected\n\tsubprogram pointers. However, there are two reasons why we may\n\tnot be able to do that: (1) there may be padding bits for\n\talignment before the access to subprogram, and (2) the access to\n\tsubprogram itself may not be compared bit-for- bit because the\n\tactivation record part is undefined: two pointers are equal iff\n\tthe subprogram addresses are equal. This patch fixes it by\n\tforcing a field-by-field comparison.\n\t* bindgen.adb (Gen_Adainit): The type No_Param_Proc is defined\n\tin the library as having Favor_Top_Level, but when we create an\n\tobject of that type in the binder file we don't have that\n\tpragma, so the types are different. This patch fixes this issue.\n\t* libgnarl/s-interr.adb, libgnarl/s-interr__hwint.adb,\n\tlibgnarl/s-interr__sigaction.adb, libgnarl/s-interr__vxworks.adb\n\t(Is_Registered): This routine erroneously assumes that the\n\taccess to protected subprogram is two addresses. We need to\n\tcreate the same record that the compiler makes to ensure that\n\tany padding is the same. Then we have to look at just the first\n\tword of the access to subprogram. This patch fixes this issue.\n\nFrom-SVN: r275856", "tree": {"sha": "f2c2983eb9971f1877ad2dbc8e0ec180ae01e33d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2c2983eb9971f1877ad2dbc8e0ec180ae01e33d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0af16535246ef8a9a814da6a3ae7a5bcae89dc30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af16535246ef8a9a814da6a3ae7a5bcae89dc30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af16535246ef8a9a814da6a3ae7a5bcae89dc30"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "07638f14a507d17b5426f4e6630adc39f626faa7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "patch": "@@ -1,3 +1,26 @@\n+2019-09-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Eq): The frontend assumes that we can\n+\tdo a bit-for-bit comparison of two access to protected\n+\tsubprogram pointers. However, there are two reasons why we may\n+\tnot be able to do that: (1) there may be padding bits for\n+\talignment before the access to subprogram, and (2) the access to\n+\tsubprogram itself may not be compared bit-for- bit because the\n+\tactivation record part is undefined: two pointers are equal iff\n+\tthe subprogram addresses are equal. This patch fixes it by\n+\tforcing a field-by-field comparison.\n+\t* bindgen.adb (Gen_Adainit): The type No_Param_Proc is defined\n+\tin the library as having Favor_Top_Level, but when we create an\n+\tobject of that type in the binder file we don't have that\n+\tpragma, so the types are different. This patch fixes this issue.\n+\t* libgnarl/s-interr.adb, libgnarl/s-interr__hwint.adb,\n+\tlibgnarl/s-interr__sigaction.adb, libgnarl/s-interr__vxworks.adb\n+\t(Is_Registered): This routine erroneously assumes that the\n+\taccess to protected subprogram is two addresses. We need to\n+\tcreate the same record that the compiler makes to ensure that\n+\tany padding is the same. Then we have to look at just the first\n+\tword of the access to subprogram. This patch fixes this issue.\n+\n 2019-09-18  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch5.adb (Expand_Assign_Array_Loop_Or_Bitfield): The call"}, {"sha": "e60cb7a7590959c9ac1056969ef1079afc10904c", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "patch": "@@ -524,6 +524,7 @@ package body Bindgen is\n         and then not Configurable_Run_Time_On_Target\n       then\n          WBI (\"   type No_Param_Proc is access procedure;\");\n+         WBI (\"   pragma Favor_Top_Level (No_Param_Proc);\");\n          WBI (\"\");\n       end if;\n "}, {"sha": "0c96d8c2a4a073a669192d66d4adeb25b866d85d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "patch": "@@ -8221,6 +8221,32 @@ package body Exp_Ch4 is\n             Insert_Actions      (N, Bodies,           Suppress => All_Checks);\n             Analyze_And_Resolve (N, Standard_Boolean, Suppress => All_Checks);\n          end if;\n+\n+      --  If unnesting, handle elementary types whose Equivalent_Types are\n+      --  records because there may be padding or undefined fields.\n+\n+      elsif Unnest_Subprogram_Mode\n+        and then Ekind_In (Typl, E_Class_Wide_Type,\n+                                 E_Class_Wide_Subtype,\n+                                 E_Access_Subprogram_Type,\n+                                 E_Access_Protected_Subprogram_Type,\n+                                 E_Anonymous_Access_Protected_Subprogram_Type,\n+                                 E_Access_Subprogram_Type,\n+                                 E_Exception_Type)\n+        and then Present (Equivalent_Type (Typl))\n+        and then Is_Record_Type (Equivalent_Type (Typl))\n+      then\n+         Typl := Equivalent_Type (Typl);\n+         Remove_Side_Effects (Lhs);\n+         Remove_Side_Effects (Rhs);\n+         Rewrite (N,\n+           Expand_Record_Equality (N, Typl,\n+             Unchecked_Convert_To (Typl, Lhs),\n+             Unchecked_Convert_To (Typl, Rhs),\n+             Bodies));\n+\n+         Insert_Actions      (N, Bodies,           Suppress => All_Checks);\n+         Analyze_And_Resolve (N, Standard_Boolean, Suppress => All_Checks);\n       end if;\n \n       --  Test if result is known at compile time\n@@ -9497,10 +9523,21 @@ package body Exp_Ch4 is\n       Typ : constant Entity_Id := Etype (Left_Opnd (N));\n \n    begin\n-      --  Case of elementary type with standard operator\n+      --  Case of elementary type with standard operator.  But if\n+      --  unnesting, handle elementary types whose Equivalent_Types are\n+      --  records because there may be padding or undefined fields.\n \n       if Is_Elementary_Type (Typ)\n         and then Sloc (Entity (N)) = Standard_Location\n+        and then not (Ekind_In (Typ, E_Class_Wide_Type,\n+                                E_Class_Wide_Subtype,\n+                                E_Access_Subprogram_Type,\n+                                E_Access_Protected_Subprogram_Type,\n+                                E_Anonymous_Access_Protected_Subprogram_Type,\n+                                E_Access_Subprogram_Type,\n+                                E_Exception_Type)\n+                        and then Present (Equivalent_Type (Typ))\n+                        and then Is_Record_Type (Equivalent_Type (Typ)))\n       then\n          Binary_Op_Validity_Checks (N);\n "}, {"sha": "bb5defdca07e6ddc75f1e019bd3163173e75642f", "filename": "gcc/ada/libgnarl/s-interr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-interr.adb?ref=6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "patch": "@@ -545,9 +545,11 @@ package body System.Interrupts is\n \n    function Is_Registered (Handler : Parameterless_Handler) return Boolean is\n \n+      type Acc_Proc is access procedure;\n+\n       type Fat_Ptr is record\n          Object_Addr  : System.Address;\n-         Handler_Addr : System.Address;\n+         Handler_Addr : Acc_Proc;\n       end record;\n \n       function To_Fat_Ptr is new Ada.Unchecked_Conversion\n@@ -565,7 +567,7 @@ package body System.Interrupts is\n \n       Ptr := Registered_Handler_Head;\n       while Ptr /= null loop\n-         if Ptr.H = Fat.Handler_Addr then\n+         if Ptr.H = Fat.Handler_Addr.all'Address then\n             return True;\n          end if;\n "}, {"sha": "ff7fe05912d466a461c93c648013083e71d45d58", "filename": "gcc/ada/libgnarl/s-interr__hwint.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr__hwint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr__hwint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-interr__hwint.adb?ref=6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "patch": "@@ -561,9 +561,12 @@ package body System.Interrupts is\n    -------------------\n \n    function Is_Registered (Handler : Parameterless_Handler) return Boolean is\n+\n+      type Acc_Proc is access procedure;\n+\n       type Fat_Ptr is record\n          Object_Addr  : System.Address;\n-         Handler_Addr : System.Address;\n+         Handler_Addr : Acc_Proc;\n       end record;\n \n       function To_Fat_Ptr is new Ada.Unchecked_Conversion\n@@ -581,7 +584,7 @@ package body System.Interrupts is\n \n       Ptr := Registered_Handler_Head;\n       while Ptr /= null loop\n-         if Ptr.H = Fat.Handler_Addr then\n+         if Ptr.H = Fat.Handler_Addr.all'Address then\n             return True;\n          end if;\n "}, {"sha": "d8fb7ba97128201ca597762c3d0ddbbb1ed8c5e0", "filename": "gcc/ada/libgnarl/s-interr__sigaction.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr__sigaction.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr__sigaction.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-interr__sigaction.adb?ref=6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "patch": "@@ -487,9 +487,11 @@ package body System.Interrupts is\n    function Is_Registered (Handler : Parameterless_Handler) return Boolean is\n       Ptr : R_Link := Registered_Handlers;\n \n+      type Acc_Proc is access procedure;\n+\n       type Fat_Ptr is record\n          Object_Addr  : System.Address;\n-         Handler_Addr : System.Address;\n+         Handler_Addr : Acc_Proc;\n       end record;\n \n       function To_Fat_Ptr is new Ada.Unchecked_Conversion\n@@ -505,7 +507,7 @@ package body System.Interrupts is\n       Fat := To_Fat_Ptr (Handler);\n \n       while Ptr /= null loop\n-         if Ptr.H = Fat.Handler_Addr then\n+         if Ptr.H = Fat.Handler_Addr.all'Address then\n             return True;\n          end if;\n "}, {"sha": "16d22a635561eef89809ef60242111c7866ffa9a", "filename": "gcc/ada/libgnarl/s-interr__vxworks.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc08721d027d10a2d9ea98c753a8bf0b4493e91/gcc%2Fada%2Flibgnarl%2Fs-interr__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-interr__vxworks.adb?ref=6bc08721d027d10a2d9ea98c753a8bf0b4493e91", "patch": "@@ -578,9 +578,12 @@ package body System.Interrupts is\n    -------------------\n \n    function Is_Registered (Handler : Parameterless_Handler) return Boolean is\n+\n+      type Acc_Proc is access procedure;\n+\n       type Fat_Ptr is record\n          Object_Addr  : System.Address;\n-         Handler_Addr : System.Address;\n+         Handler_Addr : Acc_Proc;\n       end record;\n \n       function To_Fat_Ptr is new Ada.Unchecked_Conversion\n@@ -598,7 +601,7 @@ package body System.Interrupts is\n \n       Ptr := Registered_Handler_Head;\n       while Ptr /= null loop\n-         if Ptr.H = Fat.Handler_Addr then\n+         if Ptr.H = Fat.Handler_Addr.all'Address then\n             return True;\n          end if;\n "}]}