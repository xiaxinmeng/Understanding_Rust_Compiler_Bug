{"sha": "e4b27b12b017e0cf3639a92f3e64cff482421584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiMjdiMTJiMDE3ZTBjZjM2MzlhOTJmM2U2NGNmZjQ4MjQyMTU4NA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-03-16T22:36:43Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-03-16T22:36:43Z"}, "message": "jcf-dump.c (flag_print_constant_pool): Default to off.\n\n\n\t* jcf-dump.c (flag_print_constant_pool):  Default to off.\n\t(print_constant_terse_with_index):  New helper function.\n\t(various places):  Check flag_print_constant_pool where missing.\n\t(main):  If verbose set flag_print_constant_pool.\n\t(HANDLE_INNERCLASSES_ATTRIBUTE):  Null inner class name is anonymous.\n\nFrom-SVN: r79555", "tree": {"sha": "c68d9837e3fb9e51307ad66199551261392f3ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c68d9837e3fb9e51307ad66199551261392f3ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4b27b12b017e0cf3639a92f3e64cff482421584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b27b12b017e0cf3639a92f3e64cff482421584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b27b12b017e0cf3639a92f3e64cff482421584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b27b12b017e0cf3639a92f3e64cff482421584/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec835fb2bfc25fb747550aec56d261042659bc54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec835fb2bfc25fb747550aec56d261042659bc54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec835fb2bfc25fb747550aec56d261042659bc54"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "0ea4ce1247bcb9b449169730c992826ac3ac9da7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b27b12b017e0cf3639a92f3e64cff482421584/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b27b12b017e0cf3639a92f3e64cff482421584/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e4b27b12b017e0cf3639a92f3e64cff482421584", "patch": "@@ -1,3 +1,11 @@\n+2004-03-16  Per Bothner  <per@bothner.com>\n+\n+\t* jcf-dump.c (flag_print_constant_pool):  Default to off.\n+\t(print_constant_terse_with_index):  New helper function.\n+\t(various places):  Check flag_print_constant_pool where missing.\n+\t(main):  If verbose set flag_print_constant_pool.\n+\t(HANDLE_INNERCLASSES_ATTRIBUTE):  Null inner class name is anonymous.\n+\n 2004-03-15  Andrew Haley  <aph@redhat.com>\n \n \tPR java/14581"}, {"sha": "c28a3f43c4cb092c3502b24a69b309e3218a6a43", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b27b12b017e0cf3639a92f3e64cff482421584/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b27b12b017e0cf3639a92f3e64cff482421584/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=e4b27b12b017e0cf3639a92f3e64cff482421584", "patch": "@@ -74,7 +74,7 @@ int verbose = 0;\n \n int flag_disassemble_methods = 0;\n int flag_print_class_info = 1;\n-int flag_print_constant_pool = 1;\n+int flag_print_constant_pool = 0;\n int flag_print_fields = 1;\n int flag_print_methods = 1;\n int flag_print_attributes = 1;\n@@ -152,9 +152,7 @@ utf8_equal_string (JCF *jcf, int index, const char * value)\n       print_access_flags (out, ACCESS_FLAGS, 'c'); \\\n       fputc ('\\n', out); \\\n       fprintf (out, \"This class: \"); \\\n-      if (flag_print_constant_pool) \\\n-        fprintf (out, \"%d=\", THIS); \\\n-      print_constant_terse (out, jcf, THIS, CONSTANT_Class); \\\n+      print_constant_terse_with_index (out, jcf, THIS, CONSTANT_Class); \\\n       if (flag_print_constant_pool || SUPER != 0) \\\n         fprintf (out, \", super: \"); \\\n       if (flag_print_constant_pool) \\\n@@ -173,8 +171,8 @@ utf8_equal_string (JCF *jcf, int index, const char * value)\n \n #define HANDLE_CLASS_INTERFACE(INDEX) \\\n   if (flag_print_class_info) \\\n-    { fprintf (out, \"- Implements: %d=\", INDEX); \\\n-      print_constant_terse (out, jcf, INDEX, CONSTANT_Class); \\\n+    { fprintf (out, \"- Implements: \"); \\\n+      print_constant_terse_with_index (out, jcf, INDEX, CONSTANT_Class); \\\n       fputc ('\\n', out); }\n \n #define HANDLE_START_FIELDS(FIELDS_COUNT) \\\n@@ -287,9 +285,13 @@ utf8_equal_string (JCF *jcf, int index, const char * value)\n     int name_index = JCF_readu2 (jcf); \\\n     int signature_index = JCF_readu2 (jcf); \\\n     int slot = JCF_readu2 (jcf); \\\n-    fprintf (out, \"  slot#%d: name: %d=\", slot, name_index); \\\n+    fprintf (out, \"  slot#%d: name: \", slot); \\\n+    if (flag_print_constant_pool) \\\n+      fprintf (out, \"%d=\", name_index); \\\n     print_name (out, jcf, name_index); \\\n-    fprintf (out, \", type: %d=\", signature_index); \\\n+    fprintf (out, \", type: \"); \\\n+    if (flag_print_constant_pool) \\\n+      fprintf (out, \"%d=\", signature_index); \\\n     print_signature (out, jcf, signature_index, 0); \\\n     fprintf (out, \" (pc: %d length: %d)\\n\", start_pc, length); }}\n \n@@ -317,19 +319,22 @@ utf8_equal_string (JCF *jcf, int index, const char * value)\n \t\t\t\t\t\t\t\t\t    \\\n       if (flag_print_class_info)\t\t\t\t\t    \\\n \t{\t\t\t\t\t\t\t\t    \\\n-\t  fprintf (out, \"\\n  class: \");\t\t\t\t\t    \\\n-\t  if (flag_print_constant_pool)\t\t\t\t\t    \\\n-\t    fprintf (out, \"%d=\", inner_class_info_index);\t\t    \\\n-\t  print_constant_terse (out, jcf,\t\t\t\t    \\\n+\t  fprintf (out, \"\\n  inner: \");\t\t\t\t\t    \\\n+\t  print_constant_terse_with_index (out, jcf,\t\t\t    \\\n \t\t\t\tinner_class_info_index, CONSTANT_Class);    \\\n-\t  fprintf (out, \" (%d=\", inner_name_index);\t\t\t    \\\n-\t  print_constant_terse (out, jcf, inner_name_index, CONSTANT_Utf8); \\\n-\t  fprintf (out, \"), access flags: 0x%x\", inner_class_access_flags); \\\n+\t  if (inner_name_index == 0)\t\t\t\t\t    \\\n+\t    fprintf (out, \" (anonymous)\");\t\t\t\t    \\\n+\t  else if (verbose || flag_print_constant_pool)\t\t\t    \\\n+\t    {\t\t\t\t\t\t\t\t    \\\n+\t      fprintf (out, \" (\");\t\t\t\t\t    \\\n+\t      print_constant_terse_with_index (out, jcf, inner_name_index,  \\\n+\t\t\t\t\t       CONSTANT_Utf8);\t\t    \\\n+\t      fputc (')', out);\t\t\t\t\t\t    \\\n+\t    }\t\t\t\t\t\t\t\t    \\\n+\t  fprintf (out, \", access flags: 0x%x\", inner_class_access_flags);  \\\n \t  print_access_flags (out, inner_class_access_flags, 'c');\t    \\\n \t  fprintf (out, \", outer class: \");\t\t\t\t    \\\n-\t  if (flag_print_constant_pool)\t\t\t\t\t    \\\n-\t    fprintf (out, \"%d=\", outer_class_info_index);\t\t    \\\n-\t  print_constant_terse (out, jcf,\t\t\t\t    \\\n+\t  print_constant_terse_with_index (out, jcf,\t\t\t    \\\n \t\t\t\touter_class_info_index, CONSTANT_Class);    \\\n \t}\t\t\t\t\t\t\t\t    \\\n     }\t\t\t\t\t\t\t\t\t    \\\n@@ -350,12 +355,16 @@ utf8_equal_string (JCF *jcf, int index, const char * value)\n static void\n print_constant_ref (FILE *stream, JCF *jcf, int index)\n {\n-  fprintf (stream, \"#%d=<\", index);\n   if (index <= 0 || index >= JPOOL_SIZE(jcf))\n-    fprintf (stream, \"out of range\");\n+    fprintf (stream, \"<out of range>\");\n   else\n-    print_constant (stream, jcf, index, 1);\n-  fprintf (stream, \">\");\n+    {\n+      if (flag_print_constant_pool)\n+\tfprintf (stream, \"#%d=\", index);\n+      fputc ('<', stream);\n+      print_constant (stream, jcf, index, 1);\n+      fputc ('>', stream);\n+    }\n }\n \n /* Print the access flags given by FLAGS.\n@@ -414,6 +423,14 @@ print_constant_terse (FILE *out, JCF *jcf, int index, int expected)\n     print_constant (out, jcf, index, 0);\n }\n \n+static void\n+print_constant_terse_with_index (FILE *out, JCF *jcf, int index, int expected)\n+{\n+  if (flag_print_constant_pool)\n+    fprintf (out, \"%d=\", index);\n+  print_constant_terse (out, jcf, index, expected);\n+}\n+\n /* Print the constant at INDEX in JCF's constant pool.\n    If verbosity==0, print very tersely (no extraneous text).\n    If verbosity==1, prefix the type of the constant.\n@@ -775,15 +792,13 @@ print_exception_table (JCF *jcf, const unsigned char *entries, int count)\n \t  int end_pc = GET_u2 (ptr+2);\n \t  int handler_pc = GET_u2 (ptr+4);\n \t  int catch_type = GET_u2 (ptr+6);\n-\t  fprintf (out, \"  start: %d, end: %d, handler: %d, type: %d\",\n-\t\t   start_pc, end_pc, handler_pc, catch_type);\n+\t  fprintf (out, \"  start: %d, end: %d, handler: %d, type: \",\n+\t\t   start_pc, end_pc, handler_pc);\n \t  if (catch_type == 0)\n-\t    fputs (\" /* finally */\", out);\n+\t    fputs (\"0 /* finally */\", out);\n \t  else\n-\t    {\n-\t      fputc('=', out);\n-\t      print_constant_terse (out, jcf, catch_type, CONSTANT_Class);\n-\t    }\n+\t    print_constant_terse_with_index (out, jcf,\n+\t\t\t\t\t     catch_type, CONSTANT_Class);\n \t  fputc ('\\n', out);\n \t}\n     }\n@@ -976,6 +991,9 @@ main (int argc, char** argv)\n \t}\n     }\n \n+  if (verbose && ! flag_javap_compatible)\n+    flag_print_constant_pool = 1;\n+\n   if (optind == argc)\n     {\n       fprintf (stderr, _(\"jcf-dump: no classes specified\\n\"));"}]}