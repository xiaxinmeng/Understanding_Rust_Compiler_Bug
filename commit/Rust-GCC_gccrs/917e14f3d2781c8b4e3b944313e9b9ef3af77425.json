{"sha": "917e14f3d2781c8b4e3b944313e9b9ef3af77425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3ZTE0ZjNkMjc4MWM4YjRlM2I5NDQzMTNlOWI5ZWYzYWY3NzQyNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-10T16:31:22Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-10T16:31:22Z"}, "message": "avr.md (*tablejump_rjmp): Change insn condition to !AVR_HAVE_JMP_CALL.\n\n\t* config/avr/avr.md (*tablejump_rjmp): Change insn condition to\n\t!AVR_HAVE_JMP_CALL.\n\t(*tablejump_lib): Change insn condition to AVR_HAVE_JMP_CALL.\n\t(*tablejump_enh, *tablejump): Remove insns.\n\t* config/avr/libgcc.S (__tablejump__): Use RET instead of EIND +\n\tEIJMP for indirect jump.  Use LPM Z+ where available.\n\nFrom-SVN: r179760", "tree": {"sha": "ffecb19b863e52143490a6831033857e839edbc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffecb19b863e52143490a6831033857e839edbc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/917e14f3d2781c8b4e3b944313e9b9ef3af77425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917e14f3d2781c8b4e3b944313e9b9ef3af77425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917e14f3d2781c8b4e3b944313e9b9ef3af77425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917e14f3d2781c8b4e3b944313e9b9ef3af77425/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82675d94dedc9b052cf83b7d028b5c25786c2cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82675d94dedc9b052cf83b7d028b5c25786c2cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82675d94dedc9b052cf83b7d028b5c25786c2cfa"}], "stats": {"total": 91, "additions": 39, "deletions": 52}, "files": [{"sha": "358c5571257647dc405575ca7caf33b89e15bcf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e14f3d2781c8b4e3b944313e9b9ef3af77425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e14f3d2781c8b4e3b944313e9b9ef3af77425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=917e14f3d2781c8b4e3b944313e9b9ef3af77425", "patch": "@@ -1,3 +1,12 @@\n+2011-10-10  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md (*tablejump_rjmp): Change insn condition to\n+\t!AVR_HAVE_JMP_CALL.\n+\t(*tablejump_lib): Change insn condition to AVR_HAVE_JMP_CALL.\n+\t(*tablejump_enh, *tablejump): Remove insns.\n+\t* config/avr/libgcc.S (__tablejump__): Use RET instead of EIND +\n+\tEIJMP for indirect jump.  Use LPM Z+ where available.\n+\n 2011-10-10  Richard Henderson  <rth@redhat.com>\n \n \t* doc/md.texi (vec_perm_const): Fix typo in cindex."}, {"sha": "23541bf9d2c50c92142e9a3aff3b82e48a914414", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 14, "deletions": 40, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e14f3d2781c8b4e3b944313e9b9ef3af77425/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e14f3d2781c8b4e3b944313e9b9ef3af77425/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=917e14f3d2781c8b4e3b944313e9b9ef3af77425", "patch": "@@ -3719,62 +3719,36 @@\n    (set_attr \"cc\" \"none\")])\n \n ;; table jump\n+;; For entries in jump table see avr_output_addr_vec_elt.\n \n-;; Table made from \"rjmp\" instructions for <=8K devices.\n+;; Table made from \"rjmp .L<n>\" instructions for <= 8K devices.\n (define_insn \"*tablejump_rjmp\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"!z,*r\")]\n-\t\t\tUNSPEC_INDEX_JMP))\n+  [(set (pc)\n+        (unspec:HI [(match_operand:HI 0 \"register_operand\" \"!z,*r\")]\n+                   UNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"(!AVR_HAVE_JMP_CALL) && (!AVR_HAVE_EIJMP_EICALL)\"\n+  \"!AVR_HAVE_JMP_CALL\"\n   \"@\n \tijmp\n \tpush %A0\\;push %B0\\;ret\"\n   [(set_attr \"length\" \"1,3\")\n    (set_attr \"cc\" \"none,none\")])\n \n-;; Not a prologue, but similar idea - move the common piece of code to libgcc.\n+;; Move the common piece of code to libgcc.\n+;; Table made from \".word gs(.L<n>)\" addresses for > 8K devices.\n+;; Read jump address from table and perform indirect jump.\n (define_insn \"*tablejump_lib\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n-\t\t\tUNSPEC_INDEX_JMP))\n+  [(set (pc)\n+        (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n+                   UNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"AVR_HAVE_JMP_CALL && TARGET_CALL_PROLOGUES\"\n-  \"%~jmp __tablejump2__\"\n+  \"AVR_HAVE_JMP_CALL\"\n+  \"jmp __tablejump2__\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_insn \"*tablejump_enh\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n-\t\t\tUNSPEC_INDEX_JMP))\n-   (use (label_ref (match_operand 1 \"\" \"\")))\n-   (clobber (match_dup 0))]\n-  \"AVR_HAVE_JMP_CALL && AVR_HAVE_LPMX\"\n-  \"lsl r30\n-\trol r31\n-\tlpm __tmp_reg__,Z+\n-\tlpm r31,Z\n-\tmov r30,__tmp_reg__\n-\t%!ijmp\"\n-  [(set_attr \"length\" \"6\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"*tablejump\"\n-  [(set (pc) (unspec:HI [(match_operand:HI 0 \"register_operand\" \"z\")]\n-\t\t\tUNSPEC_INDEX_JMP))\n-   (use (label_ref (match_operand 1 \"\" \"\")))\n-   (clobber (match_dup 0))]\n-  \"AVR_HAVE_JMP_CALL && !AVR_HAVE_EIJMP_EICALL\"\n-  \"lsl r30\n-\trol r31\n-\tlpm\n-\tinc r30\n-\tpush r0\n-\tlpm\n-\tpush r0\n-\tret\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"cc\" \"clobber\")])\n \n (define_expand \"casesi\"\n   [(set (match_dup 6)"}, {"sha": "8df3607237042092dd07ca7373a86e3bf0d87f0d", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e14f3d2781c8b4e3b944313e9b9ef3af77425/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e14f3d2781c8b4e3b944313e9b9ef3af77425/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=917e14f3d2781c8b4e3b944313e9b9ef3af77425", "patch": "@@ -821,27 +821,31 @@ ENDF __tablejump2__\n \n DEFUN __tablejump__\n #if defined (__AVR_HAVE_LPMX__)\n-\tlpm\t__tmp_reg__, Z+\n-\tlpm\tr31, Z\n-\tmov\tr30, __tmp_reg__\n-\n #if defined (__AVR_HAVE_EIJMP_EICALL__)\n-\teijmp\n-#else\n+\tlpm  __tmp_reg__, Z+\t\t\n+\tpush __tmp_reg__\n+\tlpm  __tmp_reg__, Z\t\t\n+\tpush __tmp_reg__\n+\tpush __zero_reg__\n+\tret\n+#else    \n+\tlpm __tmp_reg__, Z+\n+\tlpm r31, Z\n+\tmov r30, __tmp_reg__\n \tijmp\n #endif\n \n-#else\n+#else /* !HAVE_LPMX */\n \tlpm\n-\tadiw\tr30, 1\n-\tpush\tr0\n+\tadiw r30, 1\n+\tpush r0\n \tlpm\n-\tpush\tr0\n+\tpush r0\n #if defined (__AVR_HAVE_EIJMP_EICALL__)\n-        push    __zero_reg__\n+\tpush __zero_reg__\n #endif\n \tret\n-#endif\n+#endif /* !HAVE_LPMX */\n ENDF __tablejump__\n #endif /* defined (L_tablejump) */\n "}]}