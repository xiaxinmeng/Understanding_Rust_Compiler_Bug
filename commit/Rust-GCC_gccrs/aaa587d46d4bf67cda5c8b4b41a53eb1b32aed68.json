{"sha": "aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhNTg3ZDQ2ZDRiZjY3Y2RhNWM4YjRiNDFhNTNlYjFiMzJhZWQ2OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-06-30T13:51:19Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-06-30T13:51:19Z"}, "message": "Fix removal of ifunc (PR ipa/81214).\n\n2017-06-30  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/81214\n\t* gcc.target/i386/pr81214.c: New test.\n2017-06-30  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/81214\n\t* multiple_target.c (create_dispatcher_calls): Make ifunc\n\talso for function that don't have calls or are not referenced.\n\nFrom-SVN: r249840", "tree": {"sha": "0cbb040984fd8ae6082e093fb4c9eea8329632b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbb040984fd8ae6082e093fb4c9eea8329632b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787"}], "stats": {"total": 89, "additions": 57, "deletions": 32}, "files": [{"sha": "d6a709b617e69dce194ca4b7a858b2d4ed8cd9ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "patch": "@@ -1,3 +1,9 @@\n+2017-06-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/81214\n+\t* multiple_target.c (create_dispatcher_calls): Make ifunc\n+\talso for function that don't have calls or are not referenced.\n+\n 2017-06-30  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_slp_analyze_node_operations): Only"}, {"sha": "0d7cc3a2939193f5c1a23f02f01030059d4e5f98", "filename": "gcc/multiple_target.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "patch": "@@ -68,6 +68,38 @@ create_dispatcher_calls (struct cgraph_node *node)\n       || !is_function_default_version (node->decl))\n     return;\n \n+  if (!targetm.has_ifunc_p ())\n+    {\n+      error_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t\"the call requires ifunc, which is not\"\n+\t\t\" supported by this target\");\n+      return;\n+    }\n+  else if (!targetm.get_function_versions_dispatcher)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t\"target does not support function version dispatcher\");\n+      return;\n+    }\n+\n+  tree idecl = targetm.get_function_versions_dispatcher (node->decl);\n+  if (!idecl)\n+    {\n+      error_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t\"default target_clones attribute was not set\");\n+      return;\n+    }\n+\n+  cgraph_node *inode = cgraph_node::get (idecl);\n+  gcc_assert (inode);\n+  tree resolver_decl = targetm.generate_version_dispatcher_body (inode);\n+\n+  /* Update aliases.  */\n+  inode->alias = true;\n+  inode->alias_target = resolver_decl;\n+  if (!inode->analyzed)\n+    inode->resolve_alias (cgraph_node::get (resolver_decl));\n+\n   auto_vec<cgraph_edge *> edges_to_redirect;\n   auto_vec<ipa_ref *> references_to_redirect;\n \n@@ -80,38 +112,6 @@ create_dispatcher_calls (struct cgraph_node *node)\n \n   if (!edges_to_redirect.is_empty () || !references_to_redirect.is_empty ())\n     {\n-      if (!targetm.has_ifunc_p ())\n-\t{\n-\t  error_at (DECL_SOURCE_LOCATION (node->decl),\n-\t\t    \"the call requires ifunc, which is not\"\n-\t\t    \" supported by this target\");\n-\t  return;\n-\t}\n-      else if (!targetm.get_function_versions_dispatcher)\n-\t{\n-\t  error_at (DECL_SOURCE_LOCATION (node->decl),\n-\t\t    \"target does not support function version dispatcher\");\n-\t  return;\n-\t}\n-\n-      tree idecl = targetm.get_function_versions_dispatcher (node->decl);\n-      if (!idecl)\n-\t{\n-\t  error_at (DECL_SOURCE_LOCATION (node->decl),\n-\t\t    \"default target_clones attribute was not set\");\n-\t  return;\n-\t}\n-\n-      cgraph_node *inode = cgraph_node::get (idecl);\n-      gcc_assert (inode);\n-      tree resolver_decl = targetm.generate_version_dispatcher_body (inode);\n-\n-      /* Update aliases.  */\n-      inode->alias = true;\n-      inode->alias_target = resolver_decl;\n-      if (!inode->analyzed)\n-\tinode->resolve_alias (cgraph_node::get (resolver_decl));\n-\n       /* Redirect edges.  */\n       unsigned i;\n       cgraph_edge *e;"}, {"sha": "4d8372047ac59ed860f5cff6918f3deb8d7e2028", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "patch": "@@ -1,3 +1,8 @@\n+2017-06-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/81214\n+\t* gcc.target/i386/pr81214.c: New test.\n+\n 2017-06-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/plugin/decl-plugin-test.C: Expect special ctor name."}, {"sha": "2584decdb3c5dd268571895b4e8ce4e68d6bf46d", "filename": "gcc/testsuite/gcc.target/i386/pr81214.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81214.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81214.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81214.c?ref=aaa587d46d4bf67cda5c8b4b41a53eb1b32aed68", "patch": "@@ -0,0 +1,14 @@\n+/* PR ipa/81214.  */\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\",\"default\")))\n+int\n+foo ()\n+{\n+  return -2;\n+}\n+\n+/* { dg-final { scan-assembler \"\\t.globl\\tfoo\" } } */\n+/* { dg-final { scan-assembler \"foo.resolver:\" } } */\n+/* { dg-final { scan-assembler \"foo, @gnu_indirect_function\" } } */"}]}