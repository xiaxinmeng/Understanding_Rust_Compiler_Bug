{"sha": "d6007535e639e34b9a73fd3967d1b7f135414386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwMDc1MzVlNjM5ZTM0YjlhNzNmZDM5NjdkMWI3ZjEzNTQxNDM4Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-24T03:37:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-24T03:37:57Z"}, "message": "Handle an array of pointers to itself.\n\nFrom-SVN: r170454", "tree": {"sha": "0b0ad7c26ccfee825bd23884f0284c3304fd7a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b0ad7c26ccfee825bd23884f0284c3304fd7a5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6007535e639e34b9a73fd3967d1b7f135414386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6007535e639e34b9a73fd3967d1b7f135414386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6007535e639e34b9a73fd3967d1b7f135414386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6007535e639e34b9a73fd3967d1b7f135414386/comments", "author": null, "committer": null, "parents": [{"sha": "76ace672dcbf704b27833e25c753298bd08af956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ace672dcbf704b27833e25c753298bd08af956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ace672dcbf704b27833e25c753298bd08af956"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "1e3973167e80fb97433b39e4c715ca34153705ed", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6007535e639e34b9a73fd3967d1b7f135414386/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6007535e639e34b9a73fd3967d1b7f135414386/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=d6007535e639e34b9a73fd3967d1b7f135414386", "patch": "@@ -4442,33 +4442,59 @@ Array_type::do_get_tree(Gogo* gogo)\n   if (this->length_ == NULL)\n     {\n       tree struct_type = gogo->slice_type_tree(void_type_node);\n-      return this->fill_in_tree(gogo, struct_type);\n+      return this->fill_in_slice_tree(gogo, struct_type);\n     }\n   else\n     {\n-      tree element_type_tree = this->element_type_->get_tree(gogo);\n-      tree length_tree = this->get_length_tree(gogo);\n-      if (element_type_tree == error_mark_node\n-\t  || length_tree == error_mark_node)\n-\treturn error_mark_node;\n+      tree array_type = make_node(ARRAY_TYPE);\n+      return this->fill_in_array_tree(gogo, array_type);\n+    }\n+}\n \n-      length_tree = fold_convert(sizetype, length_tree);\n+// Fill in the fields for an array type.  This is used for named array\n+// types.\n \n-      // build_index_type takes the maximum index, which is one less\n-      // than the length.\n-      tree index_type = build_index_type(fold_build2(MINUS_EXPR, sizetype,\n-\t\t\t\t\t\t     length_tree,\n-\t\t\t\t\t\t     size_one_node));\n+tree\n+Array_type::fill_in_array_tree(Gogo* gogo, tree array_type)\n+{\n+  gcc_assert(this->length_ != NULL);\n \n-      return build_array_type(element_type_tree, index_type);\n-    }\n+  tree element_type_tree = this->element_type_->get_tree(gogo);\n+  tree length_tree = this->get_length_tree(gogo);\n+  if (element_type_tree == error_mark_node\n+      || length_tree == error_mark_node)\n+    return error_mark_node;\n+\n+  length_tree = fold_convert(sizetype, length_tree);\n+\n+  // build_index_type takes the maximum index, which is one less than\n+  // the length.\n+  tree index_type = build_index_type(fold_build2(MINUS_EXPR, sizetype,\n+\t\t\t\t\t\t length_tree,\n+\t\t\t\t\t\t size_one_node));\n+\n+  TREE_TYPE(array_type) = element_type_tree;\n+  TYPE_DOMAIN(array_type) = index_type;\n+  TYPE_ADDR_SPACE(array_type) = TYPE_ADDR_SPACE(element_type_tree);\n+  layout_type(array_type);\n+\n+  if (TYPE_STRUCTURAL_EQUALITY_P(element_type_tree)\n+      || TYPE_STRUCTURAL_EQUALITY_P(index_type))\n+    SET_TYPE_STRUCTURAL_EQUALITY(array_type);\n+  else if (TYPE_CANONICAL(element_type_tree) != element_type_tree\n+\t   || TYPE_CANONICAL(index_type) != index_type)\n+    TYPE_CANONICAL(array_type) =\n+      build_array_type(TYPE_CANONICAL(element_type_tree),\n+\t\t       TYPE_CANONICAL(index_type));\n+\n+  return array_type;\n }\n \n // Fill in the fields for a slice type.  This is used for named slice\n // types.\n \n tree\n-Array_type::fill_in_tree(Gogo* gogo, tree struct_type)\n+Array_type::fill_in_slice_tree(Gogo* gogo, tree struct_type)\n {\n   gcc_assert(this->length_ == NULL);\n \n@@ -7129,15 +7155,19 @@ Named_type::do_get_tree(Gogo* gogo)\n       break;\n \n     case TYPE_ARRAY:\n+      if (this->named_tree_ != NULL_TREE)\n+\treturn this->named_tree_;\n       if (!this->is_open_array_type())\n-\tt = Type::get_named_type_tree(gogo, this->type_);\n+\t{\n+\t  t = make_node(ARRAY_TYPE);\n+\t  this->named_tree_ = t;\n+\t  t = this->type_->array_type()->fill_in_array_tree(gogo, t);\n+\t}\n       else\n \t{\n-\t  if (this->named_tree_ != NULL_TREE)\n-\t    return this->named_tree_;\n \t  t = gogo->slice_type_tree(void_type_node);\n \t  this->named_tree_ = t;\n-\t  t = this->type_->array_type()->fill_in_tree(gogo, t);\n+\t  t = this->type_->array_type()->fill_in_slice_tree(gogo, t);\n \t}\n       if (t == error_mark_node)\n \treturn error_mark_node;"}, {"sha": "b428077489864277447a7519722104e7b2fc7de4", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6007535e639e34b9a73fd3967d1b7f135414386/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6007535e639e34b9a73fd3967d1b7f135414386/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=d6007535e639e34b9a73fd3967d1b7f135414386", "patch": "@@ -2050,9 +2050,13 @@ class Array_type : public Type\n   static Array_type*\n   do_import(Import*);\n \n+  // Fill in the fields for a named array type.\n+  tree\n+  fill_in_array_tree(Gogo*, tree);\n+\n   // Fill in the fields for a named slice type.\n   tree\n-  fill_in_tree(Gogo*, tree);\n+  fill_in_slice_tree(Gogo*, tree);\n \n  protected:\n   int"}]}