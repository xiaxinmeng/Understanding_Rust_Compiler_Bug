{"sha": "90b484920aac380b54197200a758cb48702b7c5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBiNDg0OTIwYWFjMzgwYjU0MTk3MjAwYTc1OGNiNDg3MDJiN2M1Yw==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-06-03T13:22:36Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-06-03T13:22:36Z"}, "message": "i386.md (define_mode_iterator P): New.\n\n2008-06-03  Kai Tietz  <kai.tietz@onevision.com>\n\n        * config/i386/i386.md (define_mode_iterator P): New.\n        (split): Merged XF and DF rules using P.\n\nFrom-SVN: r136320", "tree": {"sha": "d186e13e99bc64644bc637cc64efad2547ff216c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d186e13e99bc64644bc637cc64efad2547ff216c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90b484920aac380b54197200a758cb48702b7c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b484920aac380b54197200a758cb48702b7c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b484920aac380b54197200a758cb48702b7c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b484920aac380b54197200a758cb48702b7c5c/comments", "author": null, "committer": null, "parents": [{"sha": "8a762fcb17567f2ee82efd7bd7422110b380375b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a762fcb17567f2ee82efd7bd7422110b380375b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a762fcb17567f2ee82efd7bd7422110b380375b"}], "stats": {"total": 75, "additions": 23, "deletions": 52}, "files": [{"sha": "928e79e0d9510da3f680a54d504ec965bb4a3c2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b484920aac380b54197200a758cb48702b7c5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b484920aac380b54197200a758cb48702b7c5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90b484920aac380b54197200a758cb48702b7c5c", "patch": "@@ -1,3 +1,8 @@\n+2008-06-03  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/i386.md (define_mode_iterator P): New.\n+\t(split): Merged XF and DF rules using P.\n+\n 2008-06-03  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/i386-protos.h (ix86_reg_parm_stack_space): New."}, {"sha": "00a16d988e141b40080f27a73b0770e56a82c73e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b484920aac380b54197200a758cb48702b7c5c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b484920aac380b54197200a758cb48702b7c5c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=90b484920aac380b54197200a758cb48702b7c5c", "patch": "@@ -630,6 +630,11 @@\n \n ;; Instruction suffix for REX 64bit operators.\n (define_mode_attr rex64suffix [(SI \"\") (DI \"{q}\")])\n+\n+;; This mode iterator allows :P to be used for patterns that operate on\n+;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n+(define_mode_iterator P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n+\n \f\n ;; Scheduling descriptions\n \n@@ -2735,17 +2740,9 @@\n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n \t(match_operand:DF 1 \"any_fp_register_operand\" \"\"))]\n-  \"!TARGET_64BIT && reload_completed\"\n-  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -8)))\n-   (set (mem:DF (reg:SI SP_REG)) (match_dup 1))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"push_operand\" \"\")\n-\t(match_operand:DF 1 \"any_fp_register_operand\" \"\"))]\n-  \"TARGET_64BIT && reload_completed\"\n-  [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int -8)))\n-   (set (mem:DF (reg:DI SP_REG)) (match_dup 1))]\n+  \"reload_completed\"\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -8)))\n+   (set (mem:DF (reg:P SP_REG)) (match_dup 1))]\n   \"\")\n \n (define_split\n@@ -3198,17 +3195,9 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(match_operand:XF 1 \"any_fp_register_operand\" \"\"))]\n-  \"!TARGET_64BIT\"\n-  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (match_dup 2)))\n-   (set (mem:XF (reg:SI SP_REG)) (match_dup 1))]\n-  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n-\n-(define_split\n-  [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(match_operand:XF 1 \"any_fp_register_operand\" \"\"))]\n-  \"TARGET_64BIT\"\n-  [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (match_dup 2)))\n-   (set (mem:XF (reg:DI SP_REG)) (match_dup 1))]\n+  \"\"\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n+   (set (mem:XF (reg:P SP_REG)) (match_dup 1))]\n   \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n ;; Do not use integer registers when optimizing for size\n@@ -3951,16 +3940,9 @@\n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"!TARGET_64BIT\"\n-  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -8)))\n-   (set (mem:DF (reg:SI SP_REG)) (float_extend:DF (match_dup 1)))])\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"push_operand\" \"\")\n-\t(float_extend:DF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (const_int -8)))\n-   (set (mem:DF (reg:DI SP_REG)) (float_extend:DF (match_dup 1)))])\n+  \"\"\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -8)))\n+   (set (mem:DF (reg:P SP_REG)) (float_extend:DF (match_dup 1)))])\n \n (define_insn \"*dummy_extendsfxf2\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<\")\n@@ -3972,32 +3954,16 @@\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n   \"\"\n-  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (match_dup 2)))\n-   (set (mem:XF (reg:SI SP_REG)) (float_extend:XF (match_dup 1)))]\n-  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n-\n-(define_split\n-  [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(float_extend:XF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (match_dup 2)))\n-   (set (mem:DF (reg:DI SP_REG)) (float_extend:XF (match_dup 1)))]\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n+   (set (mem:XF (reg:P SP_REG)) (float_extend:XF (match_dup 1)))]\n   \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n   \"\"\n-  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (match_dup 2)))\n-   (set (mem:DF (reg:SI SP_REG)) (float_extend:XF (match_dup 1)))]\n-  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n-\n-(define_split\n-  [(set (match_operand:XF 0 \"push_operand\" \"\")\n-\t(float_extend:XF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  [(set (reg:DI SP_REG) (plus:DI (reg:DI SP_REG) (match_dup 2)))\n-   (set (mem:XF (reg:DI SP_REG)) (float_extend:XF (match_dup 1)))]\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n+   (set (mem:DF (reg:P SP_REG)) (float_extend:XF (match_dup 1)))]\n   \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n (define_expand \"extendsfdf2\""}]}