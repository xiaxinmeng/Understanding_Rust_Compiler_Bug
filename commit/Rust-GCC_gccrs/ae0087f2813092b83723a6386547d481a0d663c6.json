{"sha": "ae0087f2813092b83723a6386547d481a0d663c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwMDg3ZjI4MTMwOTJiODM3MjNhNjM4NjU0N2Q0ODFhMGQ2NjNjNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-09-11T17:19:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-11T17:19:55Z"}, "message": "mips.md: Use match_test rather than eq/ne symbol_ref throughout file.\n\ngcc/\n\t* config/mips/mips.md: Use match_test rather than eq/ne symbol_ref\n\tthroughout file.\n\t* config/mips/sb1.md: Likewise.\n\t* config/mips/predicates.md: Replace (match_test \"!...\")\n\twith (not (match_test \"...\"))\n\t* config/mips/constraints.md: Likewise.\n\nFrom-SVN: r178759", "tree": {"sha": "fe1605c0d0dad40b5270bbf3afa2d434353c3299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe1605c0d0dad40b5270bbf3afa2d434353c3299"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae0087f2813092b83723a6386547d481a0d663c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0087f2813092b83723a6386547d481a0d663c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0087f2813092b83723a6386547d481a0d663c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0087f2813092b83723a6386547d481a0d663c6/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d42cbc6c9dc897dc40665cf28256d5eb6b54c24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42cbc6c9dc897dc40665cf28256d5eb6b54c24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42cbc6c9dc897dc40665cf28256d5eb6b54c24b"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "415c19f52afecd3e47b3b0679865e32dfebb198c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae0087f2813092b83723a6386547d481a0d663c6", "patch": "@@ -1,3 +1,12 @@\n+2011-09-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.md: Use match_test rather than eq/ne symbol_ref\n+\tthroughout file.\n+\t* config/mips/sb1.md: Likewise.\n+\t* config/mips/predicates.md: Replace (match_test \"!...\")\n+\twith (not (match_test \"...\"))\n+\t* config/mips/constraints.md: Likewise.\n+\n 2011-09-09  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/arm/arm-cores.def (generic-armv7-a): New architecture."}, {"sha": "2bfb2aaf2c57f72a711acf6960566795defe5b2c", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=ae0087f2813092b83723a6386547d481a0d663c6", "patch": "@@ -127,9 +127,9 @@\n   \"A constant that cannot be loaded using @code{lui}, @code{addiu}\n    or @code{ori}.\"\n   (and (match_code \"const_int\")\n-       (match_test \"!SMALL_OPERAND (ival)\")\n-       (match_test \"!SMALL_OPERAND_UNSIGNED (ival)\")\n-       (match_test \"!LUI_OPERAND (ival)\")))\n+       (not (match_test \"SMALL_OPERAND (ival)\"))\n+       (not (match_test \"SMALL_OPERAND_UNSIGNED (ival)\"))\n+       (not (match_test \"LUI_OPERAND (ival)\"))))\n \n (define_constraint \"N\"\n   \"A constant in the range -65535 to -1 (inclusive).\"\n@@ -184,7 +184,7 @@\n    using @code{la}.\"\n   (and (match_operand 0 \"move_operand\")\n        (match_test \"CONSTANT_P (op)\")\n-       (match_test \"!mips_dangerous_for_la25_p (op)\")))\n+       (not (match_test \"mips_dangerous_for_la25_p (op)\"))))\n \n (define_memory_constraint \"W\"\n   \"@internal\n@@ -194,7 +194,7 @@\n    constant-pool references.\"\n   (and (match_code \"mem\")\n        (match_operand 0 \"memory_operand\")\n-       (ior (match_test \"!TARGET_MIPS16\")\n+       (ior (not (match_test \"TARGET_MIPS16\"))\n \t    (and (not (match_operand 0 \"stack_operand\"))\n \t\t (not (match_test \"CONSTANT_P (XEXP (op, 0))\"))))))\n "}, {"sha": "c2211a3c170855d5fe03cf98cf5d549a84d8d0fc", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=ae0087f2813092b83723a6386547d481a0d663c6", "patch": "@@ -210,11 +210,11 @@\n ;; True if the main data type is twice the size of a word.\n (define_attr \"dword_mode\" \"no,yes\"\n   (cond [(and (eq_attr \"mode\" \"DI,DF\")\n-\t      (eq (symbol_ref \"TARGET_64BIT\") (const_int 0)))\n+\t      (not (match_test \"TARGET_64BIT\")))\n \t (const_string \"yes\")\n \n \t (and (eq_attr \"mode\" \"TI,TF\")\n-\t      (ne (symbol_ref \"TARGET_64BIT\") (const_int 0)))\n+\t      (match_test \"TARGET_64BIT\"))\n \t (const_string \"yes\")]\n \t(const_string \"no\")))\n \n@@ -384,7 +384,7 @@\n ;; Length of instruction in bytes.\n (define_attr \"length\" \"\"\n    (cond [(and (eq_attr \"extended_mips16\" \"yes\")\n-\t       (ne (symbol_ref \"TARGET_MIPS16\") (const_int 0)))\n+\t       (match_test \"TARGET_MIPS16\"))\n \t  (const_int 8)\n \n \t  ;; Direct branch instructions have a range of [-0x20000,0x1fffc],\n@@ -423,7 +423,7 @@\n \t\t   (const_int 4)\n \n \t\t ;; The non-PIC case: branch, first delay slot, and J.\n-\t\t (ne (symbol_ref \"TARGET_ABSOLUTE_JUMPS\") (const_int 0))\n+\t\t (match_test \"TARGET_ABSOLUTE_JUMPS\")\n \t\t   (const_int 12)]\n \n \t\t ;; Use MAX_PIC_BRANCH_LENGTH as a (gross) overestimate.\n@@ -439,7 +439,7 @@\n \t  (const_int 0)\n \n \t  (eq_attr \"got\" \"load\")\n-\t  (if_then_else (ne (symbol_ref \"TARGET_MIPS16\") (const_int 0))\n+\t  (if_then_else (match_test \"TARGET_MIPS16\")\n \t\t\t(const_int 8)\n \t\t\t(const_int 4))\n \t  (eq_attr \"got\" \"xgot_high\")\n@@ -456,7 +456,7 @@\n \t  ;; SHIFT_SHIFTs are decomposed into two separate instructions.\n \t  ;; They are extended instructions on MIPS16 targets.\n \t  (eq_attr \"move_type\" \"shift_shift\")\n-\t  (if_then_else (ne (symbol_ref \"TARGET_MIPS16\") (const_int 0))\n+\t  (if_then_else (match_test \"TARGET_MIPS16\")\n \t\t\t(const_int 16)\n \t\t\t(const_int 8))\n \n@@ -479,7 +479,7 @@\n \t  (eq_attr \"move_type\" \"load,fpload\")\n \t  (symbol_ref \"mips_load_store_insns (operands[1], insn) * 4\")\n \t  (eq_attr \"move_type\" \"store,fpstore\")\n-\t  (cond [(eq (symbol_ref \"TARGET_FIX_24K\") (const_int 0))\n+\t  (cond [(not (match_test \"TARGET_FIX_24K\"))\n \t         (symbol_ref \"mips_load_store_insns (operands[0], insn) * 4\")]\n \t         (symbol_ref \"mips_load_store_insns (operands[0], insn) * 4 + 4\"))\n \n@@ -500,15 +500,15 @@\n \t  ;; instruction.  The assembler does this for us, so account for\n \t  ;; the worst-case length here.\n \t  (and (eq_attr \"type\" \"imadd\")\n-\t       (ne (symbol_ref \"TARGET_FIX_VR4120\") (const_int 0)))\n+\t       (match_test \"TARGET_FIX_VR4120\"))\n \t  (const_int 8)\n \n \t  ;; VR4120 errata MD(4): if there are consecutive dmult instructions,\n \t  ;; the result of the second one is missed.  The assembler should work\n \t  ;; around this by inserting a nop after the first dmult.\n \t  (and (eq_attr \"type\" \"imul,imul3\")\n \t       (and (eq_attr \"mode\" \"DI\")\n-\t\t    (ne (symbol_ref \"TARGET_FIX_VR4120\") (const_int 0))))\n+\t\t    (match_test \"TARGET_FIX_VR4120\")))\n \t  (const_int 8)\n \n \t  (eq_attr \"type\" \"idiv,idiv3\")\n@@ -528,24 +528,24 @@\n ;; write to HI or LO.\n (define_attr \"hazard\" \"none,delay,hilo\"\n   (cond [(and (eq_attr \"type\" \"load,fpload,fpidxload\")\n-\t      (ne (symbol_ref \"ISA_HAS_LOAD_DELAY\") (const_int 0)))\n+\t      (match_test \"ISA_HAS_LOAD_DELAY\"))\n \t (const_string \"delay\")\n \n \t (and (eq_attr \"type\" \"mfc,mtc\")\n-\t      (ne (symbol_ref \"ISA_HAS_XFER_DELAY\") (const_int 0)))\n+\t      (match_test \"ISA_HAS_XFER_DELAY\"))\n \t (const_string \"delay\")\n \n \t (and (eq_attr \"type\" \"fcmp\")\n-\t      (ne (symbol_ref \"ISA_HAS_FCMP_DELAY\") (const_int 0)))\n+\t      (match_test \"ISA_HAS_FCMP_DELAY\"))\n \t (const_string \"delay\")\n \n \t ;; The r4000 multiplication patterns include an mflo instruction.\n \t (and (eq_attr \"type\" \"imul\")\n-\t      (ne (symbol_ref \"TARGET_FIX_R4000\") (const_int 0)))\n+\t      (match_test \"TARGET_FIX_R4000\"))\n \t (const_string \"hilo\")\n \n \t (and (eq_attr \"type\" \"mfhilo\")\n-\t      (eq (symbol_ref \"ISA_HAS_HILO_INTERLOCKS\") (const_int 0)))\n+\t      (not (match_test \"ISA_HAS_HILO_INTERLOCKS\")))\n \t (const_string \"hilo\")]\n \t(const_string \"none\")))\n \n@@ -565,7 +565,7 @@\n ;; Attribute defining whether or not we can use the branch-likely\n ;; instructions.\n (define_attr \"branch_likely\" \"no,yes\"\n-  (if_then_else (ne (symbol_ref \"GENERATE_BRANCHLIKELY\") (const_int 0))\n+  (if_then_else (match_test \"GENERATE_BRANCHLIKELY\")\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n@@ -849,15 +849,15 @@\n ;; .........................\n \n (define_delay (and (eq_attr \"type\" \"branch\")\n-\t\t   (eq (symbol_ref \"TARGET_MIPS16\") (const_int 0))\n+\t\t   (not (match_test \"TARGET_MIPS16\"))\n \t\t   (eq_attr \"branch_likely\" \"yes\"))\n   [(eq_attr \"can_delay\" \"yes\")\n    (nil)\n    (eq_attr \"can_delay\" \"yes\")])\n \n ;; Branches that don't have likely variants do not annul on false.\n (define_delay (and (eq_attr \"type\" \"branch\")\n-\t\t   (eq (symbol_ref \"TARGET_MIPS16\") (const_int 0))\n+\t\t   (not (match_test \"TARGET_MIPS16\"))\n \t\t   (eq_attr \"branch_likely\" \"no\"))\n   [(eq_attr \"can_delay\" \"yes\")\n    (nil)\n@@ -1783,7 +1783,7 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")\n    (set (attr \"length\")\n-\t(if_then_else (ne (symbol_ref \"ISA_HAS_EXT_INS\") (const_int 0))\n+\t(if_then_else (match_test \"ISA_HAS_EXT_INS\")\n \t\t      (const_int 16)\n \t\t      (const_int 28)))])\n \n@@ -2287,7 +2287,7 @@\n   [(set_attr \"type\" \"fdiv\")\n    (set_attr \"mode\" \"<UNITMODE>\")\n    (set (attr \"length\")\n-        (if_then_else (ne (symbol_ref \"TARGET_FIX_SB1\") (const_int 0))\n+        (if_then_else (match_test \"TARGET_FIX_SB1\")\n                       (const_int 8)\n                       (const_int 4)))])\n \n@@ -2305,7 +2305,7 @@\n   [(set_attr \"type\" \"frdiv\")\n    (set_attr \"mode\" \"<UNITMODE>\")\n    (set (attr \"length\")\n-        (if_then_else (ne (symbol_ref \"TARGET_FIX_SB1\") (const_int 0))\n+        (if_then_else (match_test \"TARGET_FIX_SB1\")\n                       (const_int 8)\n                       (const_int 4)))])\n \n@@ -2409,7 +2409,7 @@\n   [(set_attr \"type\" \"fsqrt\")\n    (set_attr \"mode\" \"<UNITMODE>\")\n    (set (attr \"length\")\n-        (if_then_else (ne (symbol_ref \"TARGET_FIX_SB1\") (const_int 0))\n+        (if_then_else (match_test \"TARGET_FIX_SB1\")\n                       (const_int 8)\n                       (const_int 4)))])\n \n@@ -2427,7 +2427,7 @@\n   [(set_attr \"type\" \"frsqrt\")\n    (set_attr \"mode\" \"<UNITMODE>\")\n    (set (attr \"length\")\n-        (if_then_else (ne (symbol_ref \"TARGET_FIX_SB1\") (const_int 0))\n+        (if_then_else (match_test \"TARGET_FIX_SB1\")\n                       (const_int 8)\n                       (const_int 4)))])\n \n@@ -2445,7 +2445,7 @@\n   [(set_attr \"type\" \"frsqrt\")\n    (set_attr \"mode\" \"<UNITMODE>\")\n    (set (attr \"length\")\n-        (if_then_else (ne (symbol_ref \"TARGET_FIX_SB1\") (const_int 0))\n+        (if_then_else (match_test \"TARGET_FIX_SB1\")\n                       (const_int 8)\n                       (const_int 4)))])\n \f"}, {"sha": "dd5148067cd10e32ac9c4e4cc60130ba189c54c9", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=ae0087f2813092b83723a6386547d481a0d663c6", "patch": "@@ -59,7 +59,7 @@\n \n (define_predicate \"reg_or_0_operand\"\n   (ior (and (match_operand 0 \"const_0_operand\")\n-\t    (match_test \"!TARGET_MIPS16\"))\n+\t    (not (match_test \"TARGET_MIPS16\")))\n        (match_operand 0 \"register_operand\")))\n \n (define_predicate \"const_1_operand\"\n@@ -100,7 +100,7 @@\n \n (define_predicate \"and_reg_operand\"\n   (ior (match_operand 0 \"register_operand\")\n-       (and (match_test \"!TARGET_MIPS16\")\n+       (and (not (match_test \"TARGET_MIPS16\"))\n \t    (match_operand 0 \"const_uns_arith_operand\"))\n        (match_operand 0 \"low_bitmask_operand\")\n        (match_operand 0 \"si_mask_operand\")))\n@@ -335,7 +335,7 @@\n \n (define_predicate \"mips_cstore_operator\"\n   (ior (match_code \"eq,gt,gtu,ge,geu,lt,ltu,le,leu\")\n-       (and (match_code \"ne\") (match_test \"!TARGET_MIPS16\"))))\n+       (and (match_code \"ne\") (not (match_test \"TARGET_MIPS16\")))))\n \n (define_predicate \"small_data_pattern\"\n   (and (match_code \"set,parallel,unspec,unspec_volatile,prefetch\")"}, {"sha": "2d36c2212fadf9b009824f40353984d801316b12", "filename": "gcc/config/mips/sb1.md", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fsb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0087f2813092b83723a6386547d481a0d663c6/gcc%2Fconfig%2Fmips%2Fsb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsb1.md?ref=ae0087f2813092b83723a6386547d481a0d663c6", "patch": "@@ -76,8 +76,8 @@\n ;; disabled.\n \n (define_attr \"sb1_fp_pipes\" \"one,two\"\n-  (cond [(and (ne (symbol_ref \"TARGET_FLOAT64\") (const_int 0))\n-\t      (eq (symbol_ref \"TARGET_FP_EXCEPTIONS\") (const_int 0)))\n+  (cond [(and (match_test \"TARGET_FLOAT64\")\n+\t      (not (match_test \"TARGET_FP_EXCEPTIONS\")))\n \t (const_string \"two\")]\n \t(const_string \"one\")))\n \n@@ -149,31 +149,27 @@\n (define_insn_reservation \"ir_sb1_fpload\" 0\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpload\")\n-\t    (ne (symbol_ref \"TARGET_FLOAT64\")\n-\t\t(const_int 0))))\n+\t    (match_test \"TARGET_FLOAT64\")))\n   \"sb1_ls0 | sb1_ls1\")\n \n (define_insn_reservation \"ir_sb1_fpload_32bitfp\" 1\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpload\")\n-\t    (eq (symbol_ref \"TARGET_FLOAT64\")\n-\t\t(const_int 0))))\n+\t    (not (match_test \"TARGET_FLOAT64\"))))\n   \"sb1_ls0 | sb1_ls1\")\n \n ;; Indexed loads can only execute on LS1 pipe.\n \n (define_insn_reservation \"ir_sb1_fpidxload\" 0\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpidxload\")\n-\t    (ne (symbol_ref \"TARGET_FLOAT64\")\n-\t\t(const_int 0))))\n+\t    (match_test \"TARGET_FLOAT64\")))\n   \"sb1_ls1\")\n \n (define_insn_reservation \"ir_sb1_fpidxload_32bitfp\" 1\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n        (and (eq_attr \"type\" \"fpidxload\")\n-\t    (eq (symbol_ref \"TARGET_FLOAT64\")\n-\t\t(const_int 0))))\n+\t    (not (match_test \"TARGET_FLOAT64\"))))\n   \"sb1_ls1\")\n \n ;; prefx can only execute on the ls1 pipe."}]}