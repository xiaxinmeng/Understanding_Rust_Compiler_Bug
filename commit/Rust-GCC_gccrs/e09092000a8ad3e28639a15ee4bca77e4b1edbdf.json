{"sha": "e09092000a8ad3e28639a15ee4bca77e4b1edbdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5MDkyMDAwYThhZDNlMjg2MzlhMTVlZTRiY2E3N2U0YjFlZGJkZg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2019-12-26T20:29:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-02T08:58:22Z"}, "message": "[Ada] Improved support for aspect alignment in CCG\n\n2020-06-02  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Set attribute\n\tExpansion_Delayed on aggregates that initialize an object that\n\thas aspect alignment or address clause. Done to allow ther\n\tinitialization by means of multiple assignments.\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Resolve delayed\n\taggregates. This patch complements the patch applied to\n\tsem_ch3.adb", "tree": {"sha": "1b9b627cc05c09b4f822e39e3b3fa26958d63298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9b627cc05c09b4f822e39e3b3fa26958d63298"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09092000a8ad3e28639a15ee4bca77e4b1edbdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09092000a8ad3e28639a15ee4bca77e4b1edbdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09092000a8ad3e28639a15ee4bca77e4b1edbdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09092000a8ad3e28639a15ee4bca77e4b1edbdf/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b60be63da23e0db9435e8620fab9edd531e4ed6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60be63da23e0db9435e8620fab9edd531e4ed6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60be63da23e0db9435e8620fab9edd531e4ed6b"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "cfc01f50ff6e22d13a6a273fc55e36c25a60316e", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09092000a8ad3e28639a15ee4bca77e4b1edbdf/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09092000a8ad3e28639a15ee4bca77e4b1edbdf/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=e09092000a8ad3e28639a15ee4bca77e4b1edbdf", "patch": "@@ -6610,9 +6610,13 @@ package body Exp_Ch3 is\n             --  An aggregate that must be built in place is not resolved and\n             --  expanded until the enclosing construct is expanded. This will\n             --  happen when the aggregate is limited and the declared object\n-            --  has a following address clause.\n+            --  has a following address clause; it happens also when generating\n+            --  C code for an aggregate that has an alignment or address clause\n+            --  (see Analyze_Object_Declaration).\n \n-            if Is_Limited_Type (Typ) and then not Analyzed (Expr) then\n+            if (Is_Limited_Type (Typ) or else Modify_Tree_For_C)\n+              and then not Analyzed (Expr)\n+            then\n                Resolve (Expr, Typ);\n             end if;\n "}, {"sha": "1479e34f765186c25cc1931cba1d833514fff9b0", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09092000a8ad3e28639a15ee4bca77e4b1edbdf/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09092000a8ad3e28639a15ee4bca77e4b1edbdf/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e09092000a8ad3e28639a15ee4bca77e4b1edbdf", "patch": "@@ -4318,7 +4318,11 @@ package body Sem_Ch3 is\n             --  If the aggregate is limited it will be built in place, and its\n             --  expansion is deferred until the object declaration is expanded.\n \n-            if Is_Limited_Type (T) then\n+            --  This is also required when generating C code to ensure that an\n+            --  object with an alignment or address clause can be initialized\n+            --  by means of component by component assignments.\n+\n+            if Is_Limited_Type (T) or else Modify_Tree_For_C then\n                Set_Expansion_Delayed (E);\n             end if;\n "}]}