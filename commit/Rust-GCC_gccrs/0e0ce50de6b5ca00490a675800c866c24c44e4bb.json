{"sha": "0e0ce50de6b5ca00490a675800c866c24c44e4bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwY2U1MGRlNmI1Y2EwMDQ5MGE2NzU4MDBjODY2YzI0YzQ0ZTRiYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-26T17:55:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-26T17:55:26Z"}, "message": "Remove DEP_PRO/CON scaffolding\n\ngcc/\n\t* sched-int.h (struct _dep): Strengthen fields \"pro\" and \"con\"\n\tfrom rtx to rtx_insn *.\n\t(DEP_PRO): Delete this function and...\n\t(SET_DEP_PRO): ...this function in favor of...\n\t(DEP_PRO): ...reinstate this macro.\n\t(DEP_CON): Delete this function and...\n\t(SET_DEP_CON): ...this function in favor of...\n\t(DEP_CON): ...reinstate this old macro.\n\t(init_dep_1): Strengthen params 2 and 3 from rtx to rtx_insn *.\n\t(init_dep): Likewise.\n\t(set_priorities): Likewise for both params.\n\t(sd_copy_back_deps): Likewise for params 1 and 2.\n\n\t* haifa-sched.c (priority): Likewise for param \"insn\" and local\n\t\"next\".\n\t(set_priorities): Likewise for params \"head\" and \"tail\" and local\n\t\"insn\".\n\t(process_insn_forw_deps_be_in_spec): Likewise for param \"twin\" and\n\tlocal \"consumer\".\n\t(add_to_speculative_block): Add a checked cast.\n\t(create_check_block_twin): Drop use of SET_DEP_CON.\n\t(add_jump_dependencies): Strengthen params \"insn\" and \"jump\" from\n\trtx to rtx_insn *.\n\n\t* sched-deps.c (init_dep_1): Likewise for params \"pro\" and \"con\".\n\tDrop use of SET_DEP_PRO\n\t(init_dep): Strengthen params \"pro\" and \"con\" from rtx to\n\trtx_insn *.\n\t(sd_copy_back_deps): Likewise for params \"to\" and \"from\".  Drop\n\tuse of SET_DEP_CON.\n\t(DEP_PRO): Delete.\n\t(DEP_CON): Delete.\n\t(SET_DEP_PRO): Delete.\n\t(SET_DEP_CON): Delete.\n\n/\n\t* rtx-classes-status.txt (TODO): SET_DEP_PRO and SET_DEP_CON are\n\tdone.\n\nFrom-SVN: r214530", "tree": {"sha": "e62bfc98576720e333aa9a25f982e815f3e12f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e62bfc98576720e333aa9a25f982e815f3e12f8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e0ce50de6b5ca00490a675800c866c24c44e4bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0ce50de6b5ca00490a675800c866c24c44e4bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0ce50de6b5ca00490a675800c866c24c44e4bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0ce50de6b5ca00490a675800c866c24c44e4bb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d30f4e815a41fdf2d4a9bf37223281f5f8a06dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d30f4e815a41fdf2d4a9bf37223281f5f8a06dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d30f4e815a41fdf2d4a9bf37223281f5f8a06dc"}], "stats": {"total": 117, "additions": 68, "deletions": 49}, "files": [{"sha": "f61851f1819573e708de5fd73b34998d80aa3627", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ce50de6b5ca00490a675800c866c24c44e4bb/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ce50de6b5ca00490a675800c866c24c44e4bb/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=0e0ce50de6b5ca00490a675800c866c24c44e4bb", "patch": "@@ -1,3 +1,8 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtx-classes-status.txt (TODO): SET_DEP_PRO and SET_DEP_CON are\n+\tdone.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtx-classes-status.txt (TODO): Remove SET_VINSN_INSN_RTX."}, {"sha": "f6fbdb788da92319190710f2f8a2f3f08641969b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e0ce50de6b5ca00490a675800c866c24c44e4bb", "patch": "@@ -1,3 +1,40 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sched-int.h (struct _dep): Strengthen fields \"pro\" and \"con\"\n+\tfrom rtx to rtx_insn *.\n+\t(DEP_PRO): Delete this function and...\n+\t(SET_DEP_PRO): ...this function in favor of...\n+\t(DEP_PRO): ...reinstate this macro.\n+\t(DEP_CON): Delete this function and...\n+\t(SET_DEP_CON): ...this function in favor of...\n+\t(DEP_CON): ...reinstate this old macro.\n+\t(init_dep_1): Strengthen params 2 and 3 from rtx to rtx_insn *.\n+\t(init_dep): Likewise.\n+\t(set_priorities): Likewise for both params.\n+\t(sd_copy_back_deps): Likewise for params 1 and 2.\n+\n+\t* haifa-sched.c (priority): Likewise for param \"insn\" and local\n+\t\"next\".\n+\t(set_priorities): Likewise for params \"head\" and \"tail\" and local\n+\t\"insn\".\n+\t(process_insn_forw_deps_be_in_spec): Likewise for param \"twin\" and\n+\tlocal \"consumer\".\n+\t(add_to_speculative_block): Add a checked cast.\n+\t(create_check_block_twin): Drop use of SET_DEP_CON.\n+\t(add_jump_dependencies): Strengthen params \"insn\" and \"jump\" from\n+\trtx to rtx_insn *.\n+\n+\t* sched-deps.c (init_dep_1): Likewise for params \"pro\" and \"con\".\n+\tDrop use of SET_DEP_PRO\n+\t(init_dep): Strengthen params \"pro\" and \"con\" from rtx to\n+\trtx_insn *.\n+\t(sd_copy_back_deps): Likewise for params \"to\" and \"from\".  Drop\n+\tuse of SET_DEP_CON.\n+\t(DEP_PRO): Delete.\n+\t(DEP_CON): Delete.\n+\t(SET_DEP_PRO): Delete.\n+\t(SET_DEP_CON): Delete.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sel-sched-ir.h (struct vinsn_def): Strengthen field \"insn_rtx\""}, {"sha": "5a64f8103c338c3e6cc2bb66bcc539e829ee3879", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=0e0ce50de6b5ca00490a675800c866c24c44e4bb", "patch": "@@ -826,7 +826,7 @@ add_delay_dependencies (rtx_insn *insn)\n \f\n /* Forward declarations.  */\n \n-static int priority (rtx);\n+static int priority (rtx_insn *);\n static int rank_for_schedule (const void *, const void *);\n static void swap_sort (rtx_insn **, int);\n static void queue_insn (rtx_insn *, int, const char *);\n@@ -875,7 +875,7 @@ static void extend_h_i_d (void);\n static void init_h_i_d (rtx);\n static int haifa_speculate_insn (rtx, ds_t, rtx *);\n static void generate_recovery_code (rtx_insn *);\n-static void process_insn_forw_deps_be_in_spec (rtx, rtx, ds_t);\n+static void process_insn_forw_deps_be_in_spec (rtx, rtx_insn *, ds_t);\n static void begin_speculative_block (rtx_insn *);\n static void add_to_speculative_block (rtx_insn *);\n static void init_before_recovery (basic_block *);\n@@ -890,7 +890,7 @@ static void move_succs (vec<edge, va_gc> **, basic_block);\n static void sched_remove_insn (rtx_insn *);\n static void clear_priorities (rtx_insn *, rtx_vec_t *);\n static void calc_priorities (rtx_vec_t);\n-static void add_jump_dependencies (rtx, rtx);\n+static void add_jump_dependencies (rtx_insn *, rtx_insn *);\n \n #endif /* INSN_SCHEDULING */\n \f\n@@ -1582,7 +1582,7 @@ dep_list_size (rtx insn, sd_list_types_def list)\n \n /* Compute the priority number for INSN.  */\n static int\n-priority (rtx insn)\n+priority (rtx_insn *insn)\n {\n   if (! INSN_P (insn))\n     return 0;\n@@ -1631,7 +1631,7 @@ priority (rtx insn)\n \n \t      FOR_EACH_DEP (twin, SD_LIST_FORW, sd_it, dep)\n \t\t{\n-\t\t  rtx next;\n+\t\t  rtx_insn *next;\n \t\t  int next_priority;\n \n \t\t  next = DEP_CON (dep);\n@@ -6622,9 +6622,9 @@ schedule_block (basic_block *target_bb, state_t init_state)\n /* Set_priorities: compute priority of each insn in the block.  */\n \n int\n-set_priorities (rtx head, rtx tail)\n+set_priorities (rtx_insn *head, rtx_insn *tail)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   int n_insn;\n   int sched_max_insns_priority =\n \tcurrent_sched_info->sched_max_insns_priority;\n@@ -7342,15 +7342,15 @@ generate_recovery_code (rtx_insn *insn)\n    Tries to add speculative dependencies of type FS between instructions\n    in deps_list L and TWIN.  */\n static void\n-process_insn_forw_deps_be_in_spec (rtx insn, rtx twin, ds_t fs)\n+process_insn_forw_deps_be_in_spec (rtx insn, rtx_insn *twin, ds_t fs)\n {\n   sd_iterator_def sd_it;\n   dep_t dep;\n \n   FOR_EACH_DEP (insn, SD_LIST_FORW, sd_it, dep)\n     {\n       ds_t ds;\n-      rtx consumer;\n+      rtx_insn *consumer;\n \n       consumer = DEP_CON (dep);\n \n@@ -7540,7 +7540,7 @@ add_to_speculative_block (rtx_insn *insn)\n       {\n \tdep_def _new_dep, *new_dep = &_new_dep;\n \n-\tinit_dep (new_dep, insn, twin, REG_DEP_OUTPUT);\n+\tinit_dep (new_dep, insn, as_a <rtx_insn *> (twin), REG_DEP_OUTPUT);\n \tsd_add_dep (new_dep, false);\n       }\n \n@@ -7950,7 +7950,7 @@ create_check_block_twin (rtx_insn *insn, bool mutate_p)\n \n       if (rec != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t{\n-\t  SET_DEP_CON (new_dep) = twin;\n+\t  DEP_CON (new_dep) = twin;\n \t  sd_add_dep (new_dep, false);\n \t}\n     }\n@@ -8429,7 +8429,7 @@ calc_priorities (rtx_vec_t roots)\n /* Add dependences between JUMP and other instructions in the recovery\n    block.  INSN is the first insn the recovery block.  */\n static void\n-add_jump_dependencies (rtx insn, rtx jump)\n+add_jump_dependencies (rtx_insn *insn, rtx_insn *jump)\n {\n   do\n     {"}, {"sha": "3602c0f9688799cda7839f167bbd5ce64d3634e9", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=0e0ce50de6b5ca00490a675800c866c24c44e4bb", "patch": "@@ -101,10 +101,10 @@ dk_to_ds (enum reg_note dk)\n \n /* Init DEP with the arguments.  */\n void\n-init_dep_1 (dep_t dep, rtx pro, rtx con, enum reg_note type, ds_t ds)\n+init_dep_1 (dep_t dep, rtx_insn *pro, rtx_insn *con, enum reg_note type, ds_t ds)\n {\n-  SET_DEP_PRO (dep) = pro;\n-  SET_DEP_CON (dep) = con;\n+  DEP_PRO (dep) = pro;\n+  DEP_CON (dep) = con;\n   DEP_TYPE (dep) = type;\n   DEP_STATUS (dep) = ds;\n   DEP_COST (dep) = UNKNOWN_DEP_COST;\n@@ -117,7 +117,7 @@ init_dep_1 (dep_t dep, rtx pro, rtx con, enum reg_note type, ds_t ds)\n    While most of the scheduler (including targets) only need the major type\n    of the dependency, it is convenient to hide full dep_status from them.  */\n void\n-init_dep (dep_t dep, rtx pro, rtx con, enum reg_note kind)\n+init_dep (dep_t dep, rtx_insn *pro, rtx_insn *con, enum reg_note kind)\n {\n   ds_t ds;\n \n@@ -1403,7 +1403,7 @@ sd_unresolve_dep (sd_iterator_def sd_it)\n /* Make TO depend on all the FROM's producers.\n    If RESOLVED_P is true add dependencies to the resolved lists.  */\n void\n-sd_copy_back_deps (rtx to, rtx from, bool resolved_p)\n+sd_copy_back_deps (rtx_insn *to, rtx_insn *from, bool resolved_p)\n {\n   sd_list_types_def list_type;\n   sd_iterator_def sd_it;\n@@ -1416,7 +1416,7 @@ sd_copy_back_deps (rtx to, rtx from, bool resolved_p)\n       dep_def _new_dep, *new_dep = &_new_dep;\n \n       copy_dep (new_dep, dep);\n-      SET_DEP_CON (new_dep) = to;\n+      DEP_CON (new_dep) = to;\n       sd_add_dep (new_dep, resolved_p);\n     }\n }\n@@ -4922,24 +4922,4 @@ find_modifiable_mems (rtx_insn *head, rtx_insn *tail)\n \t     success_in_block);\n }\n \n-rtx_insn *DEP_PRO (dep_t dep)\n-{\n-  return safe_as_a <rtx_insn *> (dep->pro);\n-}\n-\n-rtx_insn *DEP_CON (dep_t dep)\n-{\n-  return safe_as_a <rtx_insn *> (dep->con);\n-}\n-\n-rtx& SET_DEP_PRO (dep_t dep)\n-{\n-  return dep->pro;\n-}\n-\n-rtx& SET_DEP_CON (dep_t dep)\n-{\n-  return dep->con;\n-}\n-\n #endif /* INSN_SCHEDULING */"}, {"sha": "e7d93ffd524f824d50f567fdc164378c362949bf", "filename": "gcc/sched-int.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ce50de6b5ca00490a675800c866c24c44e4bb/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=0e0ce50de6b5ca00490a675800c866c24c44e4bb", "patch": "@@ -218,10 +218,10 @@ struct dep_replacement\n struct _dep\n {\n   /* Producer.  */\n-  rtx pro;\n+  rtx_insn *pro;\n \n   /* Consumer.  */\n-  rtx con;\n+  rtx_insn *con;\n \n   /* If nonnull, holds a pointer to information about how to break the\n      dependency by making a replacement in one of the insns.  There is\n@@ -250,10 +250,8 @@ struct _dep\n typedef struct _dep dep_def;\n typedef dep_def *dep_t;\n \n-extern rtx_insn *DEP_PRO (dep_t dep);\n-extern rtx_insn *DEP_CON (dep_t dep);\n-extern rtx& SET_DEP_PRO (dep_t dep);\n-extern rtx& SET_DEP_CON (dep_t dep);\n+#define DEP_PRO(D) ((D)->pro)\n+#define DEP_CON(D) ((D)->con)\n #define DEP_TYPE(D) ((D)->type)\n #define DEP_STATUS(D) ((D)->status)\n #define DEP_COST(D) ((D)->cost)\n@@ -263,8 +261,8 @@ extern rtx& SET_DEP_CON (dep_t dep);\n \n /* Functions to work with dep.  */\n \n-extern void init_dep_1 (dep_t, rtx, rtx, enum reg_note, ds_t);\n-extern void init_dep (dep_t, rtx, rtx, enum reg_note);\n+extern void init_dep_1 (dep_t, rtx_insn *, rtx_insn *, enum reg_note, ds_t);\n+extern void init_dep (dep_t, rtx_insn *, rtx_insn *, enum reg_note);\n \n extern void sd_debug_dep (dep_t);\n \n@@ -1349,7 +1347,7 @@ extern int no_real_insns_p (const_rtx, const_rtx);\n extern int insn_cost (rtx);\n extern int dep_cost_1 (dep_t, dw_t);\n extern int dep_cost (dep_t);\n-extern int set_priorities (rtx, rtx);\n+extern int set_priorities (rtx_insn *, rtx_insn *);\n \n extern void sched_setup_bb_reg_pressure_info (basic_block, rtx);\n extern bool schedule_block (basic_block *, state_t);\n@@ -1615,7 +1613,7 @@ extern void sd_add_dep (dep_t, bool);\n extern enum DEPS_ADJUST_RESULT sd_add_or_update_dep (dep_t, bool);\n extern void sd_resolve_dep (sd_iterator_def);\n extern void sd_unresolve_dep (sd_iterator_def);\n-extern void sd_copy_back_deps (rtx, rtx, bool);\n+extern void sd_copy_back_deps (rtx_insn *, rtx_insn *, bool);\n extern void sd_delete_dep (sd_iterator_def);\n extern void sd_debug_lists (rtx, sd_list_types_def);\n "}, {"sha": "bcdb1878eadda4b47f4cadf34d0c25b52ed7ccbd", "filename": "rtx-classes-status.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e0ce50de6b5ca00490a675800c866c24c44e4bb/rtx-classes-status.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e0ce50de6b5ca00490a675800c866c24c44e4bb/rtx-classes-status.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/rtx-classes-status.txt?ref=0e0ce50de6b5ca00490a675800c866c24c44e4bb", "patch": "@@ -16,5 +16,4 @@ TODO: \"Scaffolding\" to be removed\n =================================\n * DF_REF_INSN\n * SET_BB_HEAD, SET_BB_END, SET_BB_HEADER\n-* SET_DEP_PRO, SET_DEP_CON\n * SET_NEXT_INSN, SET_PREV_INSN"}]}