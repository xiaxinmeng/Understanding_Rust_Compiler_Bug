{"sha": "c60e94a70efc44dd419ec5119dad3aa7813949d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYwZTk0YTcwZWZjNDRkZDQxOWVjNTExOWRhZDNhYTc4MTM5NDlkMw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-19T06:12:50Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-19T06:12:50Z"}, "message": "c-lex.c (c_lex): Remove CPP_INT, CPP_FLOAT cases.\n\n\t* c-lex.c (c_lex): Remove CPP_INT, CPP_FLOAT cases.\n\t* c-parse.in (yyerror, _yylex): Similarly.\n\t* cppexp.c (parse_number, parse_defined, lex, _cpp_parse_expr):\n\tDon't use CPP_INT, CPP_FLOAT; CPP_NUMBER is enough.\n\tUpdate comments.\n\t* cpplib.h (CPP_INT, CPP_FLOAT): Remove.\n\t* cp/spew.c (read_token, yyerror): Remove CPP_INT, CPP_FLOAT cases.\n\nFrom-SVN: r44144", "tree": {"sha": "e3d86fe81bb6734db7b177884761a5402cc9f044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3d86fe81bb6734db7b177884761a5402cc9f044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c60e94a70efc44dd419ec5119dad3aa7813949d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60e94a70efc44dd419ec5119dad3aa7813949d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60e94a70efc44dd419ec5119dad3aa7813949d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60e94a70efc44dd419ec5119dad3aa7813949d3/comments", "author": null, "committer": null, "parents": [{"sha": "dbc957f103982bd3d8cb973beb26439d4e99ad8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc957f103982bd3d8cb973beb26439d4e99ad8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc957f103982bd3d8cb973beb26439d4e99ad8c"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "27678b431389172ebeafafca2f6f6a4e6a0343b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -1,3 +1,13 @@\n+2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-lex.c (c_lex): Remove CPP_INT, CPP_FLOAT cases.\n+\t* c-parse.in (yyerror, _yylex): Similarly.\n+\t* cppexp.c (parse_number, parse_defined, lex, _cpp_parse_expr):\n+\tDon't use CPP_INT, CPP_FLOAT; CPP_NUMBER is enough.\n+\tUpdate comments.\n+\t* cpplib.h (CPP_INT, CPP_FLOAT): Remove.\n+\t* cp/spew.c (read_token, yyerror): Remove CPP_INT, CPP_FLOAT cases.\n+\n 2001-07-18  Jeff Sturm  <jsturm@one-point.com>\n \n \t* dwarf2out.c (dwarf2out_abstract_function): Don't emit"}, {"sha": "19fa8b307bb65849af0a9d5685d3e98f79adf4fd", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -775,8 +775,6 @@ c_lex (value)\n       *value = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok.val.node));\n       break;\n \n-    case CPP_INT:\n-    case CPP_FLOAT:\n     case CPP_NUMBER:\n       *value = lex_number ((const char *)tok.val.str.text, tok.val.str.len);\n       break;"}, {"sha": "7d87e2004fd28f10e5c8db0377852afb407f829a", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -3603,9 +3603,7 @@ yyerror (msgid)\n   else if (last_token == CPP_STRING\n \t   || last_token == CPP_WSTRING)\n     error (\"%s before string constant\", string);\n-  else if (last_token == CPP_NUMBER\n-\t   || last_token == CPP_INT\n-\t   || last_token == CPP_FLOAT)\n+  else if (last_token == CPP_NUMBER)\n     error (\"%s before numeric constant\", string);\n   else if (last_token == CPP_NAME)\n     error (\"%s before \\\"%s\\\"\", string, IDENTIFIER_POINTER (yylval.ttype));\n@@ -3734,8 +3732,6 @@ _yylex ()\n     case CPP_NAME:\n       return yylexname ();\n \n-    case CPP_INT:\n-    case CPP_FLOAT:\n     case CPP_NUMBER:\n     case CPP_CHAR:\n     case CPP_WCHAR:"}, {"sha": "8d98554e05749e1f3e48793ff45516ca8fa5a44b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -1,3 +1,7 @@\n+2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* spew.c (read_token, yyerror): Remove CPP_INT, CPP_FLOAT cases.\n+\n 2001-07-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (type_requires_array_cookie): New function."}, {"sha": "7a92d9d0caf80bed1df62ddf07b8b34a4a0e6867", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -340,8 +340,6 @@ read_token (t)\n       t->yychar = read_process_identifier (&t->yylval);\n       break;\n \n-    case CPP_INT:\n-    case CPP_FLOAT:\n     case CPP_NUMBER:\n     case CPP_CHAR:\n     case CPP_WCHAR:\n@@ -1490,9 +1488,7 @@ yyerror (msgid)\n   else if (last_token == CPP_STRING\n \t   || last_token == CPP_WSTRING)\n     error (\"%s before string constant\", string);\n-  else if (last_token == CPP_NUMBER\n-\t   || last_token == CPP_INT\n-\t   || last_token == CPP_FLOAT)\n+  else if (last_token == CPP_NUMBER)\n     error (\"%s before numeric constant\", string);\n   else if (last_token == CPP_NAME)\n     {"}, {"sha": "095a42d8280c1fbbe517e189df006ccb2ebe6636", "filename": "gcc/cppexp.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -61,8 +61,6 @@ struct op\n #define SYNTAX_ERROR2(msgid, arg) \\\n   do { cpp_error (pfile, msgid, arg); goto syntax_error; } while(0)\n \n-/* Parse and convert an integer for #if.  Accepts decimal, hex, or octal\n-   with or without size suffixes.  */\n struct suffix\n {\n   unsigned char s[4];\n@@ -87,6 +85,10 @@ const struct suffix vsuf_3[] = {\n };\n #define Nsuff(tab) (sizeof tab / sizeof (struct suffix))\n \n+/* Parse and convert an integer for #if.  Accepts decimal, hex, or\n+   octal with or without size suffixes.  Returned op is CPP_ERROR on\n+   error, otherwise it is a CPP_NUMBER.  */\n+\n static struct op\n parse_number (pfile, tok)\n      cpp_reader *pfile;\n@@ -198,7 +200,7 @@ parse_number (pfile, tok)\n     }\n \n   op.value = n;\n-  op.op = CPP_INT;\n+  op.op = CPP_NUMBER;\n   return op;\n \n  invalid_suffix:\n@@ -263,7 +265,7 @@ parse_defined (pfile)\n     {\n       op.value = node->type == NT_MACRO;\n       op.unsignedp = 0;\n-      op.op = CPP_INT;\n+      op.op = CPP_NUMBER;\n \n       /* No macros?  At top of file?  */\n       if (pfile->mi_state == MI_OUTSIDE && pfile->mi_cmacro == 0\n@@ -281,7 +283,10 @@ parse_defined (pfile)\n   return op;\n }\n \n-/* Read one token.  */\n+/* Read a token.  The returned type is CPP_NUMBER for a valid number\n+   (an interpreted preprocessing number or character constant, or the\n+   result of the \"defined\" or \"#\" operators), CPP_ERROR on error,\n+   CPP_EOF, or the type of an operator token.  */\n \n static struct op\n lex (pfile, skip_evaluation, token)\n@@ -295,7 +300,6 @@ lex (pfile, skip_evaluation, token)\n \n   switch (token->type)\n     {\n-    case CPP_INT:\n     case CPP_NUMBER:\n       return parse_number (pfile, token);\n \n@@ -306,7 +310,7 @@ lex (pfile, skip_evaluation, token)\n \n \t/* This is always a signed type.  */\n \top.unsignedp = 0;\n-\top.op = CPP_INT;\n+\top.op = CPP_NUMBER;\n \top.value = cpp_interpret_charconst (pfile, token, 1, 0, &chars_seen);\n \treturn op;\n       }\n@@ -315,9 +319,6 @@ lex (pfile, skip_evaluation, token)\n     case CPP_WSTRING:\n       SYNTAX_ERROR (\"string constants are not valid in #if\");\n \n-    case CPP_FLOAT:\n-      SYNTAX_ERROR (\"floating point numbers are not valid in #if\");\n-\n     case CPP_OTHER:\n       if (ISGRAPH (token->val.c))\n \tSYNTAX_ERROR2 (\"invalid character '%c' in #if\", token->val.c);\n@@ -336,7 +337,7 @@ lex (pfile, skip_evaluation, token)\n \t       && (token->val.node == pfile->spec_nodes.n_true\n \t\t   || token->val.node == pfile->spec_nodes.n_false))\n \t{\n-\t  op.op = CPP_INT;\n+\t  op.op = CPP_NUMBER;\n \t  op.unsignedp = 0;\n \t  op.value = (token->val.node == pfile->spec_nodes.n_true);\n \n@@ -354,7 +355,7 @@ lex (pfile, skip_evaluation, token)\n \t     could become macros in the future).  */\n \t  pfile->mi_state = MI_FAILED;\n \n-\t  op.op = CPP_INT;\n+\t  op.op = CPP_NUMBER;\n \t  op.unsignedp = 0;\n \t  op.value = 0;\n \n@@ -368,7 +369,7 @@ lex (pfile, skip_evaluation, token)\n       {\n \tint temp;\n \n-\top.op = CPP_INT;\n+\top.op = CPP_NUMBER;\n \tif (_cpp_test_assertion (pfile, &temp))\n \t  op.op = CPP_ERROR;\n \top.unsignedp = 0;\n@@ -627,7 +628,7 @@ _cpp_parse_expr (pfile)\n \tcase CPP_ERROR:\n \t  goto syntax_error;\n \tpush_immediate:\n-\tcase CPP_INT:\n+\tcase CPP_NUMBER:\n \t  /* Push a value onto the stack.  */\n \t  if (top->flags & HAVE_VALUE)\n \t    SYNTAX_ERROR (\"missing binary operator\");"}, {"sha": "4e24ef7f0050563764fd7df7680edb480fdf3d7e", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -124,8 +124,6 @@ struct ht;\n   OP(CPP_ATSIGN,\t\"@\")  /* used in Objective C */ \\\n \\\n   TK(CPP_NAME,\t\tSPELL_IDENT)\t/* word */\t\t\t\\\n-  TK(CPP_INT,\t\tSPELL_STRING)\t/* 23 */\t\t\t\\\n-  TK(CPP_FLOAT,\t\tSPELL_STRING)\t/* 3.14159 */\t\t\t\\\n   TK(CPP_NUMBER,\tSPELL_STRING)\t/* 34_be+ta  */\t\t\t\\\n \\\n   TK(CPP_CHAR,\t\tSPELL_STRING)\t/* 'char' */\t\t\t\\"}]}