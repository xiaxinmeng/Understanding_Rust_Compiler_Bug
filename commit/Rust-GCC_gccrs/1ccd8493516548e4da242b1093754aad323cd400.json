{"sha": "1ccd8493516548e4da242b1093754aad323cd400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjZDg0OTM1MTY1NDhlNGRhMjQyYjEwOTM3NTRhYWQzMjNjZDQwMA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-03-01T13:34:14Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-03-01T13:34:14Z"}, "message": "AArch64: Make every option in options.def one line \n\nDue to config.gcc all the options need to be on one line because of the grep\nlines which would select only the first line of the option.\n\nThis causes it not to select the right bits on options that are spread over\nmultiple lines when the --with-arch configure option is used.  The issue happens\nsilently and you just get a compiler with an incorrect set of default flags.\n\nThis solution just collapses everything back to one line as they were in GCC7.\nUnfortunately this does make some lines quite long.\n\nI do have an alternate patch which used the pre-processors to first flatten the\nfile in config.gcc.  I will send that one out for GCC 10.\n\ngcc/ChangeLog:\n\n\tPR target/89517\n\t* config/aarch64/aarch64-option-extensions.def (fp, simd, crypto, fp16,\n\trdma, dotprod, sha2, sha3, sm4, fp16fml, sve): Collapse line.\n\nFrom-SVN: r269309", "tree": {"sha": "f8a0e731518a40a18c6c8eed7eaafda933b7c6fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8a0e731518a40a18c6c8eed7eaafda933b7c6fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ccd8493516548e4da242b1093754aad323cd400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccd8493516548e4da242b1093754aad323cd400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ccd8493516548e4da242b1093754aad323cd400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ccd8493516548e4da242b1093754aad323cd400/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2d040abea60db10675e0a5c2f91b7991541df90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d040abea60db10675e0a5c2f91b7991541df90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d040abea60db10675e0a5c2f91b7991541df90"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "eff658d491babf5f62882310febf307260615510", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccd8493516548e4da242b1093754aad323cd400/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccd8493516548e4da242b1093754aad323cd400/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ccd8493516548e4da242b1093754aad323cd400", "patch": "@@ -1,3 +1,9 @@\n+2019-03-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/89517\n+\t* config/aarch64/aarch64-option-extensions.def (fp, simd, crypto, fp16,\n+\trdma, dotprod, sha2, sha3, sm4, fp16fml, sve): Collapse line.\n+\n 2019-03-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/89535"}, {"sha": "53dcd03590d2e4eebac83f03039c442fca7f5d5d", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ccd8493516548e4da242b1093754aad323cd400/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ccd8493516548e4da242b1093754aad323cd400/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=1ccd8493516548e4da242b1093754aad323cd400", "patch": "@@ -47,29 +47,27 @@\n      that are required.  Their order is not important.  An empty string means\n      do not detect this feature during auto detection.  */\n \n+/* NOTE: This file is being parsed by config.gcc and so the\n+   AARCH64_OPT_EXTENSION must adhere to a strict format:\n+   1) No space between the AARCH64_OPT_EXTENSION and the opening (.\n+   2) No space between the opening ( and the extension name.\n+   3) No space after the extension name before the ,.\n+   4) Spaces are only allowed after a , and around |.\n+   5) Everything must be on one line.  */\n+\n /* Enabling \"fp\" just enables \"fp\".\n    Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\",\n    \"sha3\", sm3/sm4 and \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO |\\\n-\t\t      AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2 |\\\n-\t\t      AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE, \\\n-\t\t      false, \"fp\")\n+AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE, false, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n    Disabling \"simd\" also disables \"crypto\", \"dotprod\", \"aes\", \"sha2\", \"sha3\",\n    \"sm3/sm4\" and \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO |\\\n-\t\t      AARCH64_FL_DOTPROD | AARCH64_FL_AES | AARCH64_FL_SHA2 |\\\n-\t\t      AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE,\n-\t\t      false, \"asimd\")\n+AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE, false, \"asimd\")\n \n /* Enabling \"crypto\" also enables \"fp\", \"simd\", \"aes\" and \"sha2\".\n    Disabling \"crypto\" disables \"crypto\", \"aes\", \"sha2\", \"sha3\" and \"sm3/sm4\".  */\n-AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO,\n-\t\t      AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_AES |\\\n-\t\t      AARCH64_FL_SHA2,\\\n-\t\t      AARCH64_FL_AES | AARCH64_FL_SHA2 |AARCH64_FL_SHA3 | AARCH64_FL_SM4,\\\n-\t\t      true, \"aes pmull sha1 sha2\")\n+AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_AES | AARCH64_FL_SHA2, AARCH64_FL_AES | AARCH64_FL_SHA2 |AARCH64_FL_SHA3 | AARCH64_FL_SM4, true, \"aes pmull sha1 sha2\")\n \n /* Enabling or disabling \"crc\" only changes \"crc\".  */\n AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, false, \"crc32\")\n@@ -79,51 +77,42 @@ AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, false, \"atomics\")\n \n /* Enabling \"fp16\" also enables \"fp\".\n    Disabling \"fp16\" disables \"fp16\", \"fp16fml\" and \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP,\n-\t\t      AARCH64_FL_F16FML | AARCH64_FL_SVE, false, \"fphp asimdhp\")\n+AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, AARCH64_FL_F16FML | AARCH64_FL_SVE, false, \"fphp asimdhp\")\n \n /* Enabling or disabling \"rcpc\" only changes \"rcpc\".  */\n AARCH64_OPT_EXTENSION(\"rcpc\", AARCH64_FL_RCPC, 0, 0, false, \"lrcpc\")\n \n /* Enabling \"rdma\" also enables \"fp\", \"simd\".\n    Disabling \"rdma\" just disables \"rdma\".  */\n-AARCH64_OPT_EXTENSION(\"rdma\", AARCH64_FL_RDMA, \\\n-\t\t      AARCH64_FL_FP | AARCH64_FL_SIMD, 0, false, \"asimdrdm\")\n+AARCH64_OPT_EXTENSION(\"rdma\", AARCH64_FL_RDMA, AARCH64_FL_FP | AARCH64_FL_SIMD, 0, false, \"asimdrdm\")\n \n /* Enabling \"dotprod\" also enables \"simd\".\n    Disabling \"dotprod\" only disables \"dotprod\".  */\n-AARCH64_OPT_EXTENSION(\"dotprod\", AARCH64_FL_DOTPROD, AARCH64_FL_SIMD, 0, \\\n-\t\t      false, \"asimddp\")\n+AARCH64_OPT_EXTENSION(\"dotprod\", AARCH64_FL_DOTPROD, AARCH64_FL_SIMD, 0, false, \"asimddp\")\n \n /* Enabling \"aes\" also enables \"simd\".\n    Disabling \"aes\" just disables \"aes\".  */\n AARCH64_OPT_EXTENSION(\"aes\", AARCH64_FL_AES, AARCH64_FL_SIMD, 0, false, \"aes\")\n \n /* Enabling \"sha2\" also enables \"simd\".\n    Disabling \"sha2\" just disables \"sha2\".  */\n-AARCH64_OPT_EXTENSION(\"sha2\", AARCH64_FL_SHA2, AARCH64_FL_SIMD, 0, false, \\\n-\t\t      \"sha1 sha2\")\n+AARCH64_OPT_EXTENSION(\"sha2\", AARCH64_FL_SHA2, AARCH64_FL_SIMD, 0, false, \"sha1 sha2\")\n \n /* Enabling \"sha3\" enables \"simd\" and \"sha2\".\n    Disabling \"sha3\" just disables \"sha3\".  */\n-AARCH64_OPT_EXTENSION(\"sha3\", AARCH64_FL_SHA3, \\\n-\t\t      AARCH64_FL_SIMD | AARCH64_FL_SHA2, 0, false, \\\n-\t\t      \"sha3 sha512\")\n+AARCH64_OPT_EXTENSION(\"sha3\", AARCH64_FL_SHA3, AARCH64_FL_SIMD | AARCH64_FL_SHA2, 0, false, \"sha3 sha512\")\n \n /* Enabling \"sm4\" also enables \"simd\".\n    Disabling \"sm4\" just disables \"sm4\".  */\n-AARCH64_OPT_EXTENSION(\"sm4\", AARCH64_FL_SM4, AARCH64_FL_SIMD, 0, false, \\\n-\t\t      \"sm3 sm4\")\n+AARCH64_OPT_EXTENSION(\"sm4\", AARCH64_FL_SM4, AARCH64_FL_SIMD, 0, false, \"sm3 sm4\")\n \n /* Enabling \"fp16fml\" also enables \"fp\" and \"fp16\".\n    Disabling \"fp16fml\" just disables \"fp16fml\".  */\n-AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, \\\n-\t\t      AARCH64_FL_FP | AARCH64_FL_F16, 0, false, \"asimdfml\")\n+AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, AARCH64_FL_FP | AARCH64_FL_F16, 0, false, \"asimdfml\")\n \n /* Enabling \"sve\" also enables \"fp16\", \"fp\" and \"simd\".\n    Disabling \"sve\" just disables \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | \\\n-\t\t      AARCH64_FL_F16, 0, false, \"sve\")\n+AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, 0, false, \"sve\")\n \n /* Enabling/Disabling \"profile\" does not enable/disable any other feature.  */\n AARCH64_OPT_EXTENSION(\"profile\", AARCH64_FL_PROFILE, 0, 0, false, \"\")"}]}