{"sha": "53a8d0f021827e896f2f024c3fcaba200eb4c545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNhOGQwZjAyMTgyN2U4OTZmMmYwMjRjM2ZjYWJhMjAwZWI0YzU0NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-28T12:47:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-28T12:47:36Z"}, "message": "locale_facets.tcc (num_get<>::_M_extract_float): Cache *__beg in __c when parsing exponent sign too.\n\n2004-10-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float):\n\tCache *__beg in __c when parsing exponent sign too.\n\t(num_get<>::do_get(..., bool&)): Cache *__beg.\n\t(money_get<>::_M_extract)): Likewise, in money_base::value.\n\nFrom-SVN: r89753", "tree": {"sha": "4284ed1a22314ecee8c5764c1b7f815d4b407264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4284ed1a22314ecee8c5764c1b7f815d4b407264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53a8d0f021827e896f2f024c3fcaba200eb4c545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a8d0f021827e896f2f024c3fcaba200eb4c545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53a8d0f021827e896f2f024c3fcaba200eb4c545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53a8d0f021827e896f2f024c3fcaba200eb4c545/comments", "author": null, "committer": null, "parents": [{"sha": "fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd326ba823f7a8cbb2f7c47a2a3d15a8e098a976"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "0d1c4c08886323497d80f2e5be95d7cd560c1d34", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a8d0f021827e896f2f024c3fcaba200eb4c545/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a8d0f021827e896f2f024c3fcaba200eb4c545/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=53a8d0f021827e896f2f024c3fcaba200eb4c545", "patch": "@@ -1,3 +1,10 @@\n+2004-10-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float):\n+\tCache *__beg in __c when parsing exponent sign too.\n+\t(num_get<>::do_get(..., bool&)): Cache *__beg.\n+\t(money_get<>::_M_extract)): Likewise, in money_base::value.\n+\n 2004-10-27  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (assign(const basic_string&)):"}, {"sha": "a95882488407c4d41bbb553ec676ead6d8ab47df", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53a8d0f021827e896f2f024c3fcaba200eb4c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53a8d0f021827e896f2f024c3fcaba200eb4c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=53a8d0f021827e896f2f024c3fcaba200eb4c545", "patch": "@@ -329,7 +329,7 @@ namespace std\n         {\n \t  // According to 22.2.2.1.2, p8-9, first look for thousands_sep\n \t  // and decimal_point.\n-\t  const char_type __c = *__beg;\n+\t  char_type __c = *__beg;\n           if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t    {\n \t      if (!__found_dec && !__found_sci)\n@@ -390,11 +390,12 @@ namespace std\n \t\t  // Remove optional plus or minus sign, if they exist.\n \t\t  if (++__beg != __end)\n \t\t    {\n-\t\t      const bool __plus = *__beg == __lit[__num_base::_S_iplus];\n-\t\t      if ((__plus || *__beg == __lit[__num_base::_S_iminus])\n+\t\t      __c = *__beg;\n+\t\t      const bool __plus = __c == __lit[__num_base::_S_iplus];\n+\t\t      if ((__plus || __c == __lit[__num_base::_S_iminus])\n \t\t\t  && !(__lc->_M_use_grouping\n-\t\t\t       && *__beg == __lc->_M_thousands_sep)\n-\t\t\t  && !(*__beg == __lc->_M_decimal_point))\n+\t\t\t       && __c == __lc->_M_thousands_sep)\n+\t\t\t  && !(__c == __lc->_M_decimal_point))\n \t\t\t{\n \t\t\t  __xtrc += __plus ? '+' : '-';\n \t\t\t  ++__beg;\n@@ -668,15 +669,17 @@ namespace std\n \t  size_t __n;\n           for (__n = 0; __beg != __end; ++__n, ++__beg)\n             {\n+\t      const char_type __c = *__beg;\n+\n \t      if (__testf)\n \t\tif (__n < __lc->_M_falsename_size)\n-\t\t  __testf = *__beg == __lc->_M_falsename[__n];\n+\t\t  __testf = __c == __lc->_M_falsename[__n];\n \t\telse\n \t\t  break;\n \n \t      if (__testt)\n \t\tif (__n < __lc->_M_truename_size)\n-\t\t  __testt = *__beg == __lc->_M_truename[__n];\n+\t\t  __testt = __c == __lc->_M_truename[__n];\n \t\telse\n \t\t  break;\n \n@@ -1294,7 +1297,7 @@ namespace std\n \t__res.reserve(32);\n \n \tconst char_type* __lit_zero = __lit + money_base::_S_zero;\n-\tconst money_base::pattern __p = __lc->_M_neg_format;\t\n+\tconst money_base::pattern __p = __lc->_M_neg_format;\n \tfor (int __i = 0; __i < 4 && __testvalid; ++__i)\n \t  {\n \t    const part __which = static_cast<part>(__p.field[__i]);\n@@ -1356,22 +1359,23 @@ namespace std\n \t\t// grouping of found thousands separators.\n \t\tfor (; __beg != __end; ++__beg)\n \t\t  {\n+\t\t    const char_type __c = *__beg;\n \t\t    const char_type* __q = __traits_type::find(__lit_zero, \n-\t\t\t\t\t\t\t       10, *__beg);\n+\t\t\t\t\t\t\t       10, __c);\n \t\t    if (__q != 0)\n \t\t      {\n \t\t\t__res += money_base::_S_atoms[__q - __lit];\n \t\t\t++__n;\n \t\t      }\n-\t\t    else if (*__beg == __lc->_M_decimal_point \n+\t\t    else if (__c == __lc->_M_decimal_point \n \t\t\t     && !__testdecfound)\n \t\t      {\n \t\t\t__last_pos = __n;\n \t\t\t__n = 0;\n \t\t\t__testdecfound = true;\n \t\t      }\n \t\t    else if (__lc->_M_use_grouping\n-\t\t\t     && *__beg == __lc->_M_thousands_sep\n+\t\t\t     && __c == __lc->_M_thousands_sep\n \t\t\t     && !__testdecfound)\n \t\t      {\n \t\t\tif (__n)"}]}