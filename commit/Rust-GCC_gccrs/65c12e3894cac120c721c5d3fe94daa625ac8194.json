{"sha": "65c12e3894cac120c721c5d3fe94daa625ac8194", "node_id": "C_kwDOANBUbNoAKDY1YzEyZTM4OTRjYWMxMjBjNzIxYzVkM2ZlOTRkYWE2MjVhYzgxOTQ", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-09-02T16:59:56Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-09-02T17:00:58Z"}, "message": "rs6000: Use NO_EXPR to cast to MMA pointer types\n\nWhen we cast pointers to our opaque MMA pointers, use NOP_EXPR rather\nthan VIEW_CONVERT_EXPR.\n\n2022-09-02  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_mma_builtin): Use\n\tNOP_EXPR for MMA pointer casting.", "tree": {"sha": "f8d081e641703c8907516460ef3b1d8892aa13f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8d081e641703c8907516460ef3b1d8892aa13f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c12e3894cac120c721c5d3fe94daa625ac8194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c12e3894cac120c721c5d3fe94daa625ac8194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c12e3894cac120c721c5d3fe94daa625ac8194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c12e3894cac120c721c5d3fe94daa625ac8194/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45433832a1ec392814e7f1cb7559bca48c2cb4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45433832a1ec392814e7f1cb7559bca48c2cb4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45433832a1ec392814e7f1cb7559bca48c2cb4e0"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "6dfb0db43d6b814c36bc5d82f481a5aed25a74a1", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c12e3894cac120c721c5d3fe94daa625ac8194/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c12e3894cac120c721c5d3fe94daa625ac8194/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=65c12e3894cac120c721c5d3fe94daa625ac8194", "patch": "@@ -1098,7 +1098,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi,\n \t  || (fncode == RS6000_BIF_DISASSEMBLE_PAIR_V\n \t      && TREE_TYPE (TREE_TYPE (dst_ptr)) == vector_pair_type_node))\n \t{\n-\t  tree dst = build_simple_mem_ref (build1 (VIEW_CONVERT_EXPR,\n+\t  tree dst = build_simple_mem_ref (build1 (NOP_EXPR,\n \t\t\t\t\t\t   src_type, dst_ptr));\n \t  gimplify_assign (dst, src, &new_seq);\n \t  pop_gimplify_context (NULL);\n@@ -1122,7 +1122,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi,\n \t= rs6000_builtin_decls[rs6000_builtin_info[fncode].assoc_bif];\n       tree dst_type = build_pointer_type_for_mode (unsigned_V16QI_type_node,\n \t\t\t\t\t\t   ptr_mode, true);\n-      tree dst_base = build1 (VIEW_CONVERT_EXPR, dst_type, dst_ptr);\n+      tree dst_base = build1 (NOP_EXPR, dst_type, dst_ptr);\n       for (unsigned i = 0; i < nvec; i++)\n \t{\n \t  unsigned index = WORDS_BIG_ENDIAN ? i : nvec - 1 - i;\n@@ -1148,7 +1148,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi,\n       tree ptr = gimple_call_arg (stmt, 1);\n       tree lhs = gimple_call_lhs (stmt);\n       if (TREE_TYPE (TREE_TYPE (ptr)) != vector_pair_type_node)\n-\tptr = build1 (VIEW_CONVERT_EXPR,\n+\tptr = build1 (NOP_EXPR,\n \t\t      build_pointer_type (vector_pair_type_node), ptr);\n       tree mem = build_simple_mem_ref (build2 (POINTER_PLUS_EXPR,\n \t\t\t\t\t       TREE_TYPE (ptr), ptr, offset));\n@@ -1165,7 +1165,7 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi,\n       tree offset = gimple_call_arg (stmt, 1);\n       tree ptr = gimple_call_arg (stmt, 2);\n       if (TREE_TYPE (TREE_TYPE (ptr)) != vector_pair_type_node)\n-\tptr = build1 (VIEW_CONVERT_EXPR,\n+\tptr = build1 (NOP_EXPR,\n \t\t      build_pointer_type (vector_pair_type_node), ptr);\n       tree mem = build_simple_mem_ref (build2 (POINTER_PLUS_EXPR,\n \t\t\t\t\t       TREE_TYPE (ptr), ptr, offset));"}]}