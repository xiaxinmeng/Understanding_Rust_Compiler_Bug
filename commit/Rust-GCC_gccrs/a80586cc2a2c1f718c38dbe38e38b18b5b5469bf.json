{"sha": "a80586cc2a2c1f718c38dbe38e38b18b5b5469bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgwNTg2Y2MyYTJjMWY3MThjMzhkYmUzOGUzOGIxOGI1YjU0NjliZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-23T21:15:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-23T21:15:58Z"}, "message": "(gen_lowpart_common): When converting a floating point value into an\ninteger, use WORD as (first) word.\n\nFrom-SVN: r13011", "tree": {"sha": "72348e8eb35ee35e879bd9fbecb3a58b7c24344a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72348e8eb35ee35e879bd9fbecb3a58b7c24344a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a80586cc2a2c1f718c38dbe38e38b18b5b5469bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80586cc2a2c1f718c38dbe38e38b18b5b5469bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a80586cc2a2c1f718c38dbe38e38b18b5b5469bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80586cc2a2c1f718c38dbe38e38b18b5b5469bf/comments", "author": null, "committer": null, "parents": [{"sha": "059c3d849e4cabccbe6d36710f903986c55bd1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059c3d849e4cabccbe6d36710f903986c55bd1fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059c3d849e4cabccbe6d36710f903986c55bd1fb"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "337e9732f52aff3eca04c3f6ccc7877c10683078", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a80586cc2a2c1f718c38dbe38e38b18b5b5469bf/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a80586cc2a2c1f718c38dbe38e38b18b5b5469bf/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a80586cc2a2c1f718c38dbe38e38b18b5b5469bf", "patch": "@@ -811,7 +811,7 @@ gen_lowpart_common (mode, x)\n \t   && GET_CODE (x) == CONST_DOUBLE\n \t   && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT\n \t   && GET_MODE_BITSIZE (mode) == BITS_PER_WORD)\n-    return operand_subword (x, 0, 0, GET_MODE (x));\n+    return operand_subword (x, word, 0, GET_MODE (x));\n \n   /* Similarly, if this is converting a floating-point value into a\n      two-word integer, we can do this one word at a time and make an\n@@ -827,8 +827,10 @@ gen_lowpart_common (mode, x)\n \t   && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT\n \t   && GET_MODE_BITSIZE (mode) == 2 * BITS_PER_WORD)\n     {\n-      rtx lowpart = operand_subword (x, WORDS_BIG_ENDIAN, 0, GET_MODE (x));\n-      rtx highpart = operand_subword (x, ! WORDS_BIG_ENDIAN, 0, GET_MODE (x));\n+      rtx lowpart\n+\t= operand_subword (x, word + WORDS_BIG_ENDIAN, 0, GET_MODE (x));\n+      rtx highpart\n+\t= operand_subword (x, word + ! WORDS_BIG_ENDIAN, 0, GET_MODE (x));\n \n       if (lowpart && GET_CODE (lowpart) == CONST_INT\n \t  && highpart && GET_CODE (highpart) == CONST_INT)"}]}