{"sha": "ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlNzUxNmYwMDRkM2FkOWQ1NDUzYjZjOGM0MmFkMjMzMDllYzZlMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-06-14T09:22:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-14T09:22:03Z"}, "message": "re PR c++/57599 (result of dynamic_cast<cv T> is just T)\n\n/cp\n2013-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57599\n\t* rtti.c (build_dynamic_cast_1): In case of cast to an unambiguous\n\taccessible base simply forward to build_static_cast.\n\n/testsuite\n2013-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57599\n\t* g++.dg/rtti/dyncast6.C: New.\n\t* g++.dg/cpp0x/dyncast1.C: Likewise.\n\nFrom-SVN: r200088", "tree": {"sha": "25ead3d0a0e22f49b61c9a05056f6044b7d9c21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ead3d0a0e22f49b61c9a05056f6044b7d9c21f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/comments", "author": null, "committer": null, "parents": [{"sha": "8f7fa4ba7274bf6f55737b44d58cb1d214b79f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7fa4ba7274bf6f55737b44d58cb1d214b79f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7fa4ba7274bf6f55737b44d58cb1d214b79f81"}], "stats": {"total": 117, "additions": 105, "deletions": 12}, "files": [{"sha": "d4cded580847c2cb8e1d4d218a014516a19a0af8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "patch": "@@ -1,3 +1,9 @@\n+2013-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57599\n+\t* rtti.c (build_dynamic_cast_1): In case of cast to an unambiguous\n+\taccessible base simply forward to build_static_cast.\n+\n 2013-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/38958"}, {"sha": "f3094981dfb7a6e6819bc8ff4b4b6b8e489b81c7", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "patch": "@@ -622,19 +622,10 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n   /* If *type is an unambiguous accessible base class of *exprtype,\n      convert statically.  */\n   {\n-    tree binfo;\n-\n-    binfo = lookup_base (TREE_TYPE (exprtype), TREE_TYPE (type),\n-\t\t\t ba_check, NULL, complain);\n-\n+    tree binfo = lookup_base (TREE_TYPE (exprtype), TREE_TYPE (type),\n+\t\t\t      ba_check, NULL, complain);\n     if (binfo)\n-      {\n-\texpr = build_base_path (PLUS_EXPR, convert_from_reference (expr),\n-\t\t\t\tbinfo, 0, complain);\n-\tif (TYPE_PTR_P (exprtype))\n-\t  expr = rvalue (expr);\n-\treturn expr;\n-      }\n+      return build_static_cast (type, expr, complain);\n   }\n \n   /* Otherwise *exprtype must be a polymorphic class (have a vtbl).  */"}, {"sha": "119a7648c7d81bd01ce5e53381d8ae4b2703dced", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "patch": "@@ -1,3 +1,9 @@\n+2013-06-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57599\n+\t* g++.dg/rtti/dyncast6.C: New.\n+\t* g++.dg/cpp0x/dyncast1.C: Likewise.\n+\n 2013-06-14  Alan Modra  <amodra@gmail.com>\n \n \tPR middle-end/57134"}, {"sha": "1224f361ff374abfa7ae2a3dd29f9ae41505f436", "filename": "gcc/testsuite/g++.dg/cpp0x/dyncast1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdyncast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdyncast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdyncast1.C?ref=ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/57599\n+// { dg-do compile { target c++11 } }\n+\n+struct A { };\n+struct B : public A { };\n+\n+template<class, class>\n+struct is_same { static constexpr bool value = false; };\n+\n+template<class T>\n+struct is_same<T, T> { static constexpr bool value = true; };\n+\n+template<class T>\n+T val();\n+\n+static_assert(is_same<decltype(dynamic_cast<A*>(val<B*>())),\n+\t      A*>::value, \"Ouch\");\n+static_assert(is_same<decltype(dynamic_cast<A&>(val<B&>())),\n+\t      A&>::value, \"Ouch\");\n+static_assert(is_same<decltype(dynamic_cast<const A*>(val<B*>())),\n+\t      const A*>::value, \"Ouch\");\n+static_assert(is_same<decltype(dynamic_cast<const A&>(val<B&>())),\n+\t      const A&>::value, \"Ouch\");\n+static_assert(is_same<decltype(dynamic_cast<volatile A*>(val<B*>())),\n+\t      volatile A*>::value, \"Ouch\");\n+static_assert(is_same<decltype(dynamic_cast<volatile A&>(val<B&>())),\n+\t      volatile A&>::value, \"Ouch\");\n+static_assert(is_same<decltype(dynamic_cast<const volatile A*>(val<B*>())),\n+\t      const volatile A*>::value, \"Ouch\");\n+static_assert(is_same<decltype(dynamic_cast<const volatile A&>(val<B&>())),\n+\t      const volatile A&>::value, \"Ouch\");"}, {"sha": "a6329e9441c2a1bff1cd5ac75e782c8ffcaa23a3", "filename": "gcc/testsuite/g++.dg/rtti/dyncast6.C", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast6.C?ref=ffe7516f004d3ad9d5453b6c8c42ad23309ec6e0", "patch": "@@ -0,0 +1,59 @@\n+// PR c++/57599\n+\n+class A { };\n+\n+class B : public A { };\n+\n+void p()\n+{\n+  B* b;\n+\n+  A* a1;\n+  a1 = dynamic_cast<A*>(b);\n+  a1 = dynamic_cast<const A*>(b);          // { dg-error \"invalid\" }\n+  a1 = dynamic_cast<volatile A*>(b);       // { dg-error \"invalid\" }\n+  a1 = dynamic_cast<const volatile A*>(b); // { dg-error \"invalid\" }\n+\n+  const A* a2;\n+  a2 = dynamic_cast<A*>(b);\n+  a2 = dynamic_cast<const A*>(b);\n+  a2 = dynamic_cast<volatile A*>(b);       // { dg-error \"invalid\" }\n+  a2 = dynamic_cast<const volatile A*>(b); // { dg-error \"invalid\" }\n+\n+  volatile A* a3;\n+  a3 = dynamic_cast<A*>(b);\n+  a3 = dynamic_cast<const A*>(b);          // { dg-error \"invalid\" }\n+  a3 = dynamic_cast<volatile A*>(b);\n+  a3 = dynamic_cast<const volatile A*>(b); // { dg-error \"invalid\" }\n+\n+  const volatile A* a4;\n+  a4 = dynamic_cast<A*>(b);\n+  a4 = dynamic_cast<const A*>(b);\n+  a4 = dynamic_cast<volatile A*>(b);\n+  a4 = dynamic_cast<const volatile A*>(b);\n+}\n+\n+void r()\n+{\n+  B b;\n+\n+  A& a1 = dynamic_cast<A&>(b);\n+  A& a2 = dynamic_cast<const A&>(b);                // { dg-error \"invalid\" }\n+  A& a3 = dynamic_cast<volatile A&>(b);             // { dg-error \"invalid\" }\n+  A& a4 = dynamic_cast<const volatile A&>(b);       // { dg-error \"invalid\" }\n+\n+  const A& ca1 = dynamic_cast<A&>(b);\n+  const A& ca2 = dynamic_cast<const A&>(b);\n+  const A& ca3 = dynamic_cast<volatile A&>(b);       // { dg-error \"invalid\" }\n+  const A& ca4 = dynamic_cast<const volatile A&>(b); // { dg-error \"invalid\" }\n+\n+  volatile A& va1 = dynamic_cast<A&>(b);\n+  volatile A& va2 = dynamic_cast<const A&>(b);       // { dg-error \"invalid\" }\n+  volatile A& va3 = dynamic_cast<volatile A&>(b);\n+  volatile A& va4 = dynamic_cast<const volatile A&>(b);// { dg-error \"invalid\" }\n+\n+  const volatile A& cva1 = dynamic_cast<A&>(b);\n+  const volatile A& cva2 = dynamic_cast<const A&>(b);\n+  const volatile A& cva3 = dynamic_cast<volatile A&>(b);\n+  const volatile A& cva4 = dynamic_cast<const volatile A&>(b);\n+}"}]}