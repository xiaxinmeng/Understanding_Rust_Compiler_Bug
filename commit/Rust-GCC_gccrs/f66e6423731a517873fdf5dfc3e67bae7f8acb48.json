{"sha": "f66e6423731a517873fdf5dfc3e67bae7f8acb48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY2ZTY0MjM3MzFhNTE3ODczZmRmNWRmYzNlNjdiYWU3ZjhhY2I0OA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-06-09T13:33:35Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-06-09T13:33:35Z"}, "message": "aarch64.md (lrint<GPF:mode><GPI:mode>2): New.\n\n2017-06-09  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64.md (lrint<GPF:mode><GPI:mode>2): New.\n\ngcc/testsuite/\n2017-06-09  Tamar Christina  <tamar.christina@arm.com>\n\n\t* gcc.target/aarch64/lrint-matherr.h: New.\n\t* gcc.target/aarch64/inline-lrint_1.c: New.\n\t* gcc.target/aarch64/inline-lrint_2.c: New.\n\t* gcc.target/aarch64/no-inline-lrint_1.c: New.\n\t* gcc.target/aarch64/no-inline-lrint_2.c: New.\n\nFrom-SVN: r249064", "tree": {"sha": "b9a75a08861901c2e505733e89dd0868f29f4fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9a75a08861901c2e505733e89dd0868f29f4fd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f66e6423731a517873fdf5dfc3e67bae7f8acb48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66e6423731a517873fdf5dfc3e67bae7f8acb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66e6423731a517873fdf5dfc3e67bae7f8acb48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66e6423731a517873fdf5dfc3e67bae7f8acb48/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2866f21d191bb00c08f3a3c3a13af8b8f1a69ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2866f21d191bb00c08f3a3c3a13af8b8f1a69ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2866f21d191bb00c08f3a3c3a13af8b8f1a69ba4"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "6e1960f6a801d3a541480ca628f30d1b4e77c399", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -3,6 +3,10 @@\n \t* tree-ssa-loop-im.c (execute_sm): Do not force multi-threaded\n \tmodel if the ref is always written to.\n \n+2017-06-09  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.md (lrint<GPF:mode><GPI:mode>2): New.\n+\n 2017-06-09  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/arm/arm.c (arm_rtx_costs_internal): Make sdiv more expensive"}, {"sha": "1a721bfbe42270ec75268b6e2366290aa6ad2134", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -4940,6 +4940,18 @@\n   [(set_attr \"type\" \"f_minmax<stype>\")]\n )\n \n+(define_expand \"lrint<GPF:mode><GPI:mode>2\"\n+  [(match_operand:GPI 0 \"register_operand\")\n+   (match_operand:GPF 1 \"register_operand\")]\n+  \"TARGET_FLOAT\"\n+{\n+  rtx cvt = gen_reg_rtx (<GPF:MODE>mode);\n+  emit_insn (gen_rint<GPF:mode>2 (cvt, operands[1]));\n+  emit_insn (gen_lbtrunc<GPF:mode><GPI:mode>2 (operands[0], cvt));\n+  DONE;\n+}\n+)\n+\n ;; For copysign (x, y), we want to generate:\n ;;\n ;;   LDR d2, #(1 << 63)"}, {"sha": "382805c64e0ccc8c8d4cb1087a4422097c53c3a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -1,3 +1,11 @@\n+2017-06-09  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/lrint-matherr.h: New.\n+\t* gcc.target/aarch64/inline-lrint_1.c: New.\n+\t* gcc.target/aarch64/inline-lrint_2.c: New.\n+\t* gcc.target/aarch64/no-inline-lrint_1.c: New.\n+\t* gcc.target/aarch64/no-inline-lrint_2.c: New.\n+\n 2017-06-09  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/arm/sdiv_costs_1.c: New."}, {"sha": "876cecd674b7cb35bc18d5cd3aa5587813e53dd9", "filename": "gcc/testsuite/gcc.target/aarch64/inline-lrint_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finline-lrint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finline-lrint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finline-lrint_1.c?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3 -fno-math-errno\" } */\n+\n+#include \"lrint-matherr.h\"\n+\n+TEST (dld, double, long, )\n+TEST (flf, float , long, )\n+\n+TEST (did, double, int, )\n+TEST (fif, float , int, )\n+\n+TEST (dlld, double, long long, l)\n+TEST (fllf, float , long long, l)\n+\n+/* { dg-final { scan-assembler-times \"frintx\\td\\[0-9\\]+, d\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"frintx\\ts\\[0-9\\]+, s\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\]+, d\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\]+, s\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-not \"bl\"    } } */"}, {"sha": "baa5aee761788e2b83f8f9283bb0aa7d79aad348", "filename": "gcc/testsuite/gcc.target/aarch64/inline-lrint_2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finline-lrint_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finline-lrint_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finline-lrint_2.c?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O3 -fno-math-errno\" } */\n+\n+#include \"lrint-matherr.h\"\n+\n+TEST (dld, double, long, )\n+TEST (flf, float , long, )\n+\n+TEST (did, double, int, )\n+TEST (fif, float , int, )\n+\n+TEST (dlld, double, long long, l)\n+TEST (fllf, float , long long, l)\n+\n+/* { dg-final { scan-assembler-times \"frintx\\td\\[0-9\\]+, d\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"frintx\\ts\\[0-9\\]+, s\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tx\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fcvtzs\\tw\\[0-9\\]+, s\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-not \"bl\"    } } */"}, {"sha": "cc6e3d13f9bd47a316cc56a07917f4b5de185236", "filename": "gcc/testsuite/gcc.target/aarch64/lrint-matherr.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flrint-matherr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flrint-matherr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flrint-matherr.h?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -0,0 +1,5 @@\n+#define TEST(name, float_type, int_type, pref) void f_##name (float_type x) \\\n+{\t\t\t\t\t\t\t\t\t    \\\n+  volatile float_type a = __builtin_rint (x);\t\t\t\t    \\\n+  volatile int_type   b = __builtin_l##pref##rint (x);\t\t\t    \\\n+}"}, {"sha": "fb7f0655687568e9d6783acf88ef56b54a73c2c5", "filename": "gcc/testsuite/gcc.target/aarch64/no-inline-lrint_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fno-inline-lrint_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fno-inline-lrint_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fno-inline-lrint_1.c?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"lrint-matherr.h\"\n+\n+TEST (dld, double, long, )\n+TEST (flf, float , long, )\n+\n+TEST (did, double, int, )\n+TEST (fif, float , int, )\n+\n+TEST (dlld, double, long long, l)\n+TEST (fllf, float , long long, l)\n+\n+/* { dg-final { scan-assembler-times \"frintx\\td\\[0-9\\]+, d\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"frintx\\ts\\[0-9\\]+, s\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"bl\\tlrint\"  4 } } */\n+/* { dg-final { scan-assembler-times \"bl\\tllrint\" 2 } } */\n+/* { dg-final { scan-assembler-not \"fcvtzs\" } } */"}, {"sha": "c99843c3a25fbd519f2959d3eb0ce3da3f7f16d9", "filename": "gcc/testsuite/gcc.target/aarch64/no-inline-lrint_2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fno-inline-lrint_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66e6423731a517873fdf5dfc3e67bae7f8acb48/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fno-inline-lrint_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fno-inline-lrint_2.c?ref=f66e6423731a517873fdf5dfc3e67bae7f8acb48", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"lrint-matherr.h\"\n+\n+TEST (dld, double, long, )\n+TEST (flf, float , long, )\n+\n+TEST (did, double, int, )\n+TEST (fif, float , int, )\n+\n+TEST (dlld, double, long long, l)\n+TEST (fllf, float , long long, l)\n+\n+/* { dg-final { scan-assembler-times \"frintx\\td\\[0-9\\]+, d\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"frintx\\ts\\[0-9\\]+, s\\[0-9\\]+\" 3 } } */\n+/* { dg-final { scan-assembler-times \"bl\\tlrint\"  4 } } */\n+/* { dg-final { scan-assembler-times \"bl\\tllrint\" 2 } } */\n+/* { dg-final { scan-assembler-not \"fcvtzs\" } } */"}]}