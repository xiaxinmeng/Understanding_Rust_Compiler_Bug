{"sha": "4606b05cd78922cf9b214471c36ef066f3fa9e50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYwNmIwNWNkNzg5MjJjZjliMjE0NDcxYzM2ZWYwNjZmM2ZhOWU1MA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-03T15:32:13Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-03T15:32:13Z"}, "message": "re PR c++/15787 (Poor error message with if and blocks)\n\n2007-03-03  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/15787\n\t* parser.c (struct cp_parser): New IN_IF_STMT.\n\t(cp_parser_statement_seq_opt): Handle an unexpected 'else',\n\treturning if parsing the body of an 'if' statement or issuing an\n\terror and continuing.\n\t(cp_parser_selection_statement): Set IN_IF_STMT bit when parsing\n\tbody of 'if'.\n\t(cp_parser_jump_statement): Mask new IN_IF_STMT bit.\n\t\ntestsuite/\n\t* g++.dg/parse/else.C: New.\n\t* g++.dg/parse/else-2.C: New.\n\nFrom-SVN: r122505", "tree": {"sha": "a37e403d644d8673beafbffae9500ca26a0f8fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a37e403d644d8673beafbffae9500ca26a0f8fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4606b05cd78922cf9b214471c36ef066f3fa9e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4606b05cd78922cf9b214471c36ef066f3fa9e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4606b05cd78922cf9b214471c36ef066f3fa9e50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4606b05cd78922cf9b214471c36ef066f3fa9e50/comments", "author": null, "committer": null, "parents": [{"sha": "9f1fd47476f8b7cfb1d14e7409b73b38a892cad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1fd47476f8b7cfb1d14e7409b73b38a892cad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1fd47476f8b7cfb1d14e7409b73b38a892cad3"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "5349dc4abdec168988dec23f0ae455e1df1bbf67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4606b05cd78922cf9b214471c36ef066f3fa9e50", "patch": "@@ -1,3 +1,14 @@\n+2007-03-03  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/15787\n+\t* parser.c (struct cp_parser): New IN_IF_STMT.\n+\t(cp_parser_statement_seq_opt): Handle an unexpected 'else',\n+\treturning if parsing the body of an 'if' statement or issuing an\n+\terror and continuing.\n+\t(cp_parser_selection_statement): Set IN_IF_STMT bit when parsing\n+\tbody of 'if'.\n+\t(cp_parser_jump_statement): Mask new IN_IF_STMT bit.\n+\t\n 2007-03-02  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/28253"}, {"sha": "f21ad7bcb5ebdb9c30c90de7d01f3f0f2a90b1d3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4606b05cd78922cf9b214471c36ef066f3fa9e50", "patch": "@@ -1410,6 +1410,7 @@ typedef struct cp_parser GTY(())\n #define IN_ITERATION_STMT\t2\n #define IN_OMP_BLOCK\t\t4\n #define IN_OMP_FOR\t\t8\n+#define IN_IF_STMT             16\n   unsigned char in_statement;\n \n   /* TRUE if we are presently parsing the body of a switch statement.\n@@ -6538,6 +6539,19 @@ cp_parser_statement_seq_opt (cp_parser* parser, tree in_statement_expr)\n \t  || token->type == CPP_EOF\n \t  || token->type == CPP_PRAGMA_EOL)\n \tbreak;\n+      \n+      /* If we are in a compound statement and find 'else' then\n+\t something went wrong.  */\n+      else if (token->type == CPP_KEYWORD && token->keyword == RID_ELSE)\n+\t{\n+\t  if (parser->in_statement & IN_IF_STMT) \n+\t    break;\n+\t  else\n+\t    {\n+\t      token = cp_lexer_consume_token (parser->lexer);\n+\t      error (\"%<else%> without a previous %<if%>\");\n+\t    }\n+\t}\n \n       /* Parse the statement.  */\n       cp_parser_statement (parser, in_statement_expr, true, NULL);\n@@ -6603,12 +6617,17 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p)\n \tif (keyword == RID_IF)\n \t  {\n \t    bool nested_if;\n+\t    unsigned char in_statement;\n \n \t    /* Add the condition.  */\n \t    finish_if_stmt_cond (condition, statement);\n \n \t    /* Parse the then-clause.  */\n+\t    in_statement = parser->in_statement;\n+\t    parser->in_statement |= IN_IF_STMT;\n \t    cp_parser_implicitly_scoped_statement (parser, &nested_if);\n+\t    parser->in_statement = in_statement;\n+\n \t    finish_then_clause (statement);\n \n \t    /* If the next token is `else', parse the else-clause.  */\n@@ -6954,6 +6973,7 @@ cp_parser_jump_statement (cp_parser* parser)\n   tree statement = error_mark_node;\n   cp_token *token;\n   enum rid keyword;\n+  unsigned char in_statement;\n \n   /* Peek at the next token.  */\n   token = cp_parser_require (parser, CPP_KEYWORD, \"jump-statement\");\n@@ -6965,14 +6985,15 @@ cp_parser_jump_statement (cp_parser* parser)\n   switch (keyword)\n     {\n     case RID_BREAK:\n-      switch (parser->in_statement)\n+      in_statement = parser->in_statement & ~IN_IF_STMT;      \n+      switch (in_statement)\n \t{\n \tcase 0:\n \t  error (\"break statement not within loop or switch\");\n \t  break;\n \tdefault:\n-\t  gcc_assert ((parser->in_statement & IN_SWITCH_STMT)\n-\t\t      || parser->in_statement == IN_ITERATION_STMT);\n+\t  gcc_assert ((in_statement & IN_SWITCH_STMT)\n+\t\t      || in_statement == IN_ITERATION_STMT);\n \t  statement = finish_break_stmt ();\n \t  break;\n \tcase IN_OMP_BLOCK:\n@@ -6986,7 +7007,7 @@ cp_parser_jump_statement (cp_parser* parser)\n       break;\n \n     case RID_CONTINUE:\n-      switch (parser->in_statement & ~IN_SWITCH_STMT)\n+      switch (parser->in_statement & ~(IN_SWITCH_STMT | IN_IF_STMT))\n \t{\n \tcase 0:\n \t  error (\"continue statement not within a loop\");"}, {"sha": "2b4a6962e2ee1632d625649da0d47e44f676b392", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4606b05cd78922cf9b214471c36ef066f3fa9e50", "patch": "@@ -1,3 +1,9 @@\n+2007-03-03  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/15787\n+\t* g++.dg/parse/else.C: New.\n+\t* g++.dg/parse/else-2.C: New.\n+\t\n 2007-03-03  Paul Thomas  <pault@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "7f0b23cd701d2819895348015a431af96b374fbf", "filename": "gcc/testsuite/g++.dg/parse/else-2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felse-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felse-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felse-2.C?ref=4606b05cd78922cf9b214471c36ef066f3fa9e50", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \" \" }\n+\n+int f()\n+{\n+\n+  else  // { dg-error \"'else' without a previous 'if'\" }\n+    {\n+      return 0;\n+    }\n+}"}, {"sha": "87ea982a81c95e585dd26f860c6cfd58444fa417", "filename": "gcc/testsuite/g++.dg/parse/else.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4606b05cd78922cf9b214471c36ef066f3fa9e50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felse.C?ref=4606b05cd78922cf9b214471c36ef066f3fa9e50", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \" \" }\n+\n+int f()\n+{\n+  if (1)\n+    {\n+      return 1;\n+  else  // { dg-error \"expected .\\}. before 'else'\" }\n+    {\n+      return 0;\n+    }\n+}"}]}