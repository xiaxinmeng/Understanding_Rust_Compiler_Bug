{"sha": "1994bfea41d3cea4650b1678c13a70bf88186839", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5NGJmZWE0MWQzY2VhNDY1MGIxNjc4YzEzYTcwYmY4ODE4NjgzOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-18T14:56:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-18T14:56:33Z"}, "message": "tree-vrp.c (finalize_jump_threads): Do not call cleanup_cfg by hand.\n\n\t* tree-vrp.c (finalize_jump_threads): Do not call cleanup_cfg by hand.\n\t* tree-tailcall (add_virtual_phis): Likewise.\n\t(optimize_tail_call): Return TODOs.\n\t(execute_tail_calls): Return TODOs.\n\t* tree-ssa-ccp (execute_fold_all_builtins): Do cleanup_cfg via TODO.\n\t* tree-cfgcleanup.c (cleanup_tree_cfg_loop): Return if something\n\tchanged.\n\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_value):\n\tCleanup cfg using TODO.\n\t* tree-flow.h (cleanup_tree_cfg_loop): Update prototype.\n\t* passes.c (execute_function_todo): When cleanup did something, remove\n\tunused locals.\n\t* tree-cfg.c (pass_build_cfg): Add cleanup_cfg TODO.\n\t(make_edges): Don't cleanup_cfg.\n\nFrom-SVN: r120900", "tree": {"sha": "370ef0af6f0c9483e8a124a460b11617ada2ca1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/370ef0af6f0c9483e8a124a460b11617ada2ca1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1994bfea41d3cea4650b1678c13a70bf88186839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1994bfea41d3cea4650b1678c13a70bf88186839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1994bfea41d3cea4650b1678c13a70bf88186839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1994bfea41d3cea4650b1678c13a70bf88186839/comments", "author": null, "committer": null, "parents": [{"sha": "d85c755027830f7779768c633aecdaf530a47034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85c755027830f7779768c633aecdaf530a47034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d85c755027830f7779768c633aecdaf530a47034"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "4fae499454da8f23e2ceb732ed84d0598f2eb227", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -1,3 +1,20 @@\n+2007-01-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-vrp.c (finalize_jump_threads): Do not call cleanup_cfg by hand.\n+\t* tree-tailcall (add_virtual_phis): Likewise.\n+\t(optimize_tail_call): Return TODOs.\n+\t(execute_tail_calls): Return TODOs.\n+\t* tree-ssa-ccp (execute_fold_all_builtins): Do cleanup_cfg via TODO.\n+\t* tree-cfgcleanup.c (cleanup_tree_cfg_loop): Return if something\n+\tchanged.\n+\t* tree-ssa-forwprop.c (tree_ssa_forward_propagate_single_use_value):\n+\tCleanup cfg using TODO.\n+\t* tree-flow.h (cleanup_tree_cfg_loop): Update prototype.\n+\t* passes.c (execute_function_todo): When cleanup did something, remove\n+\tunused locals.\n+\t* tree-cfg.c (pass_build_cfg): Add cleanup_cfg TODO.\n+\t(make_edges): Don't cleanup_cfg.\n+\n 2007-01-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* reg-stack.c (subst_stack_regs_pat) [UNSPEC_SINCOS_COS,"}, {"sha": "0ab5f4815e4701456984f8afbd7fa448ea060110", "filename": "gcc/passes.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -818,14 +818,19 @@ execute_function_todo (void *data)\n   if (!flags)\n     return;\n   \n-  /* Always cleanup the CFG before trying to update SSA .  */\n+  /* Always cleanup the CFG before trying to update SSA.  */\n   if (flags & TODO_cleanup_cfg)\n     {\n+      bool cleanup;\n+\n       if (current_loops)\n-\tcleanup_tree_cfg_loop ();\n+\tcleanup = cleanup_tree_cfg_loop ();\n       else\n-\tcleanup_tree_cfg ();\n+\tcleanup = cleanup_tree_cfg ();\n \n+      if (cleanup && (cfun->curr_properties & PROP_ssa))\n+\tflags |= TODO_remove_unused_locals;\n+\t\n       /* When cleanup_tree_cfg merges consecutive blocks, it may\n \t perform some simplistic propagation when removing single\n \t valued PHI nodes.  This propagation may, in turn, cause the"}, {"sha": "e9111d93fac5b4115d253464706d690a8d1cc0bc", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -237,7 +237,7 @@ struct tree_opt_pass pass_build_cfg =\n   PROP_cfg,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts,\t\t\t/* todo_flags_finish */\n+  TODO_verify_stmts | TODO_cleanup_cfg,\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n \n@@ -579,9 +579,6 @@ make_edges (void)\n \n   /* Fold COND_EXPR_COND of each COND_EXPR.  */\n   fold_cond_expr_cond ();\n-\n-  /* Clean up the graph and warn for unreachable code.  */\n-  cleanup_tree_cfg ();\n }\n \n "}, {"sha": "547b67af4710d822d708d6efb300b7c91e91a1c9", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -574,7 +574,7 @@ cleanup_tree_cfg (void)\n \n /* Cleanup cfg and repair loop structures.  */\n \n-void\n+bool\n cleanup_tree_cfg_loop (void)\n {\n   bool changed = cleanup_tree_cfg ();\n@@ -597,6 +597,7 @@ cleanup_tree_cfg_loop (void)\n #endif\n       scev_reset ();\n     }\n+  return changed;\n }\n \n /* Merge the PHI nodes at BB into those at BB's sole successor.  */"}, {"sha": "de2f0f9f2433a8989e8b5bfe048988dfeb0e7050", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -678,7 +678,7 @@ extern basic_block move_sese_region_to_fn (struct function *, basic_block,\n \n /* In tree-cfgcleanup.c  */\n extern bool cleanup_tree_cfg (void);\n-extern void cleanup_tree_cfg_loop (void);\n+extern bool cleanup_tree_cfg_loop (void);\n \n /* In tree-pretty-print.c.  */\n extern void dump_generic_bb (FILE *, basic_block, int, int);"}, {"sha": "b6c3599f9d9d085b22919b63c227d4f10ec9fca3", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -2630,9 +2630,7 @@ execute_fold_all_builtins (void)\n     }\n \n   /* Delete unreachable blocks.  */\n-  if (cfg_changed)\n-    cleanup_tree_cfg ();\n-  return 0;\n+  return cfg_changed ? TODO_cleanup_cfg : 0;\n }\n \n "}, {"sha": "ca1d0a81f912db36e6205737cec8af00ae76e37c", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -1041,7 +1041,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n     }\n \n   if (cfg_changed)\n-    cleanup_tree_cfg ();\n+    todoflags |= TODO_cleanup_cfg;\n   return todoflags;\n }\n "}, {"sha": "b56967896575f350cffc429c84ff58fb9fe0f42c", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -829,8 +829,6 @@ add_virtual_phis (void)\n       if (!is_gimple_reg (var) && gimple_default_def (cfun, var) != NULL_TREE)\n \tmark_sym_for_renaming (var);\n     }\n-\n-  update_ssa (TODO_update_ssa_only_virtuals);\n }\n \n /* Optimizes the tailcall described by T.  If OPT_TAILCALLS is true, also\n@@ -865,7 +863,7 @@ optimize_tail_call (struct tailcall *t, bool opt_tailcalls)\n /* Optimizes tail calls in the function, turning the tail recursion\n    into iteration.  */\n \n-static void\n+static unsigned int\n tree_optimize_tail_calls_1 (bool opt_tailcalls)\n {\n   edge e;\n@@ -877,7 +875,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n   edge_iterator ei;\n \n   if (!suitable_for_tail_opt_p ())\n-    return;\n+    return 0;\n   if (opt_tailcalls)\n     opt_tailcalls = suitable_for_tail_call_opt_p ();\n \n@@ -985,20 +983,19 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n     }\n \n   if (changed)\n-    {\n-      free_dominance_info (CDI_DOMINATORS);\n-      cleanup_tree_cfg ();\n-    }\n+    free_dominance_info (CDI_DOMINATORS);\n \n   if (phis_constructed)\n     add_virtual_phis ();\n+  if (changed)\n+    return TODO_cleanup_cfg | TODO_update_ssa_only_virtuals;\n+  return 0;\n }\n \n static unsigned int\n execute_tail_recursion (void)\n {\n-  tree_optimize_tail_calls_1 (false);\n-  return 0;\n+  return tree_optimize_tail_calls_1 (false);\n }\n \n static bool\n@@ -1010,8 +1007,7 @@ gate_tail_calls (void)\n static unsigned int\n execute_tail_calls (void)\n {\n-  tree_optimize_tail_calls_1 (true);\n-  return 0;\n+  return tree_optimize_tail_calls_1 (true);\n }\n \n struct tree_opt_pass pass_tail_recursion = "}, {"sha": "b466edf4c6fcd5717f45dfe52a8d8a1d5fcfad47", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1994bfea41d3cea4650b1678c13a70bf88186839/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1994bfea41d3cea4650b1678c13a70bf88186839", "patch": "@@ -4894,13 +4894,9 @@ finalize_jump_threads (void)\n   cfg_altered = thread_through_all_blocks ();\n \n   /* If we threaded jumps, then we need to recompute the dominance\n-     information, to safely do that we must clean up the CFG first.  */\n+     information.  */\n   if (cfg_altered)\n-    {\n-      free_dominance_info (CDI_DOMINATORS);\n-      cleanup_tree_cfg ();\n-      calculate_dominance_info (CDI_DOMINATORS);\n-    }\n+    free_dominance_info (CDI_DOMINATORS);\n   VEC_free (tree, heap, stack);\n }\n "}]}