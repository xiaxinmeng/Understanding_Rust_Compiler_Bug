{"sha": "85afa0754c372be7ca5f38465cfecf6a208b7333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhZmEwNzU0YzM3MmJlN2NhNWYzODQ2NWNmZWNmNmEyMDhiNzMzMw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-06-27T11:34:48Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-06-27T11:34:48Z"}, "message": "re PR c++/57172 ([C++11][DR 1164] Template overload resolution ambiguous for T&& versus T&)\n\n2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/57172\ngcc/cp/\n\t* pt.c (more_specialized_fn): If both arguments are references,\n\tgive priority to an lvalue.\n\ngcc/testsuite/\n\t* g++.dg/cpp0x/pr57172.C: New testcase.\n\nFrom-SVN: r200463", "tree": {"sha": "97759a8f1aea9f3f02daa7a8bcb6ec7e6c6d851b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97759a8f1aea9f3f02daa7a8bcb6ec7e6c6d851b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85afa0754c372be7ca5f38465cfecf6a208b7333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85afa0754c372be7ca5f38465cfecf6a208b7333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85afa0754c372be7ca5f38465cfecf6a208b7333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85afa0754c372be7ca5f38465cfecf6a208b7333/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "93e639e868711900b00fea2c616674fb34a90445", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85afa0754c372be7ca5f38465cfecf6a208b7333", "patch": "@@ -1,3 +1,9 @@\n+2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/57172\n+\t* pt.c (more_specialized_fn): If both arguments are references,\n+\tgive priority to an lvalue.\n+\n 2013-06-26  Jason Merrill  <jason@redhat.com>\n \n \t* typeck2.c (store_init_value): Diagnose a non-constant"}, {"sha": "e2ffe7314c44b9bb2bcd783bc7728f26a917851f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=85afa0754c372be7ca5f38465cfecf6a208b7333", "patch": "@@ -17510,7 +17510,8 @@ check_undeduced_parms (tree targs, tree args, tree end)\n    corresponding argument.  Deduction is done as for class templates.\n    The arguments used in deduction have reference and top level cv\n    qualifiers removed.  Iff both arguments were originally reference\n-   types *and* deduction succeeds in both directions, the template\n+   types *and* deduction succeeds in both directions, an lvalue reference\n+   wins against an rvalue reference and otherwise the template\n    with the more cv-qualified argument wins for that pairing (if\n    neither is more cv-qualified, they both are equal).  Unlike regular\n    deduction, after all the arguments have been deduced in this way,\n@@ -17586,6 +17587,8 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n       int deduce1, deduce2;\n       int quals1 = -1;\n       int quals2 = -1;\n+      int ref1 = 0;\n+      int ref2 = 0;\n \n       if (TREE_CODE (arg1) == TYPE_PACK_EXPANSION\n           && TREE_CODE (arg2) == TYPE_PACK_EXPANSION)\n@@ -17601,12 +17604,14 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n \n       if (TREE_CODE (arg1) == REFERENCE_TYPE)\n \t{\n+\t  ref1 = TYPE_REF_IS_RVALUE (arg1) + 1;\n \t  arg1 = TREE_TYPE (arg1);\n \t  quals1 = cp_type_quals (arg1);\n \t}\n \n       if (TREE_CODE (arg2) == REFERENCE_TYPE)\n \t{\n+\t  ref2 = TYPE_REF_IS_RVALUE (arg2) + 1;\n \t  arg2 = TREE_TYPE (arg2);\n \t  quals2 = cp_type_quals (arg2);\n \t}\n@@ -17684,19 +17689,33 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n \n       /* \"If, for a given type, deduction succeeds in both directions\n \t (i.e., the types are identical after the transformations above)\n-\t and if the type from the argument template is more cv-qualified\n-\t than the type from the parameter template (as described above)\n-\t that type is considered to be more specialized than the other. If\n-\t neither type is more cv-qualified than the other then neither type\n-\t is more specialized than the other.\"  */\n-\n-      if (deduce1 && deduce2\n-\t  && quals1 != quals2 && quals1 >= 0 && quals2 >= 0)\n+\t and both P and A were reference types (before being replaced with\n+\t the type referred to above):\n+\t - if the type from the argument template was an lvalue reference and\n+\t the type from the parameter template was not, the argument type is\n+\t considered to be more specialized than the other; otherwise,\n+\t - if the type from the argument template is more cv-qualified\n+\t than the type from the parameter template (as described above),\n+\t the argument type is considered to be more specialized than the other;\n+\t otherwise,\n+\t - neither type is more specialized than the other.\"  */\n+\n+      if (deduce1 && deduce2)\n \t{\n-\t  if ((quals1 & quals2) == quals2)\n-\t    lose2 = true;\n-\t  if ((quals1 & quals2) == quals1)\n-\t    lose1 = true;\n+\t  if (ref1 && ref2 && ref1 != ref2)\n+\t    {\n+\t      if (ref1 > ref2)\n+\t\tlose1 = true;\n+\t      else\n+\t\tlose2 = true;\n+\t    }\n+\t  else if (quals1 != quals2 && quals1 >= 0 && quals2 >= 0)\n+\t    {\n+\t      if ((quals1 & quals2) == quals2)\n+\t\tlose2 = true;\n+\t      if ((quals1 & quals2) == quals1)\n+\t\tlose1 = true;\n+\t    }\n \t}\n \n       if (lose1 && lose2)"}, {"sha": "73cf781d1fe0f3df6ca5ac6a238bfa1b99e0a45c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85afa0754c372be7ca5f38465cfecf6a208b7333", "patch": "@@ -1,3 +1,8 @@\n+2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/57172\n+\t* g++.dg/cpp0x/pr57172.C: New testcase.\n+\n 2013-06-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.target/s390/htm-1.c: New file."}, {"sha": "2108838136017c9fc49af1e6df88a3bcaee9d947", "filename": "gcc/testsuite/g++.dg/cpp0x/pr57172.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57172.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85afa0754c372be7ca5f38465cfecf6a208b7333/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57172.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57172.C?ref=85afa0754c372be7ca5f38465cfecf6a208b7333", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/57172\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> int f (T&) { return 0; }\n+template <typename T> int f (T&&) = delete;\n+int i;\n+int j = f (i);"}]}