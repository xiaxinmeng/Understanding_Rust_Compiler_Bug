{"sha": "ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0ZmM3ZWRhZmUxYzY3YjA5ZDU0NjJlZmUzYmViOGJjYzFlNjczMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-05-09T07:42:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-05-09T07:42:38Z"}, "message": "mips-ps-3d.md (scc_ps, s<code>_ps): New patterns.\n\n2006-05-06  Chao-ying Fu  <fu@mips.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\ngcc/\n\t* config/mips/mips-ps-3d.md (scc_ps, s<code>_ps): New patterns.\n\t(vcondv2sf, sminv2sf3, smaxv2sf3): Likewise.\n\t* config/mips/mips.md (UNSPEC_SCC): New constant.\n\t* config/mips/mips-protos.h (mips_expand_vcondv2sf): Declare.\n\t* config/mips/mips.c (mips_reverse_fp_cond_p): New function.\n\t(mips_emit_compare): Use it.\n\t(mips_expand_vcondv2sf): New function.\n\ngcc/testsuite/\n\t* gcc.target/mips/mips-ps-5.c: New file.\n\nFrom-SVN: r113644", "tree": {"sha": "4681bcd80452ffe0b711c295123e40b8727bf179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4681bcd80452ffe0b711c295123e40b8727bf179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/comments", "author": null, "committer": null, "parents": [{"sha": "5038b1e9dd5cd970e1928e8b6244d0636fafd2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5038b1e9dd5cd970e1928e8b6244d0636fafd2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5038b1e9dd5cd970e1928e8b6244d0636fafd2d2"}], "stats": {"total": 157, "additions": 143, "deletions": 14}, "files": [{"sha": "d245c389e7cd0f3a33c052b8071083cd523c8dfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "patch": "@@ -1,3 +1,14 @@\n+2006-05-08  Chao-ying Fu  <fu@mips.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips-ps-3d.md (scc_ps, s<code>_ps): New patterns.\n+\t(vcondv2sf, sminv2sf3, smaxv2sf3): Likewise.\n+\t* config/mips/mips.md (UNSPEC_SCC): New constant.\n+\t* config/mips/mips-protos.h (mips_expand_vcondv2sf): Declare.\n+\t* config/mips/mips.c (mips_reverse_fp_cond_p): New function.\n+\t(mips_emit_compare): Use it.\n+\t(mips_expand_vcondv2sf): New function.\n+\n 2006-05-08  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/27093"}, {"sha": "d4df7cd3d93ab87770b5acf07316f1441cb33920", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "patch": "@@ -168,6 +168,7 @@ extern void mips_restore_gp (void);\n #ifdef RTX_CODE\n extern bool mips_emit_scc (enum rtx_code, rtx);\n extern void gen_conditional_branch (rtx *, enum rtx_code);\n+extern void mips_expand_vcondv2sf (rtx, rtx, rtx, enum rtx_code, rtx, rtx);\n #endif\n extern void gen_conditional_move (rtx *);\n extern void mips_gen_conditional_trap (rtx *);"}, {"sha": "78c8b5c64210386769cea9e60322dacde58af39b", "filename": "gcc/config/mips/mips-ps-3d.md", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md?ref=ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "patch": "@@ -381,6 +381,32 @@\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"FPSW\")])\n \n+;; An expander for generating an scc operation.\n+(define_expand \"scc_ps\"\n+  [(set (match_operand:CCV2 0)\n+\t(unspec:CCV2 [(match_operand 1)] UNSPEC_SCC))])\n+\n+(define_insn \"s<code>_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2\n+\t   [(fcond (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t   (match_operand:V2SF 2 \"register_operand\" \"f\"))]\n+\t   UNSPEC_SCC))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.<fcond>.ps\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n+\n+(define_insn \"s<code>_ps\"\n+  [(set (match_operand:CCV2 0 \"register_operand\" \"=z\")\n+\t(unspec:CCV2\n+\t   [(swapped_fcond (match_operand:V2SF 1 \"register_operand\" \"f\")\n+\t\t\t   (match_operand:V2SF 2 \"register_operand\" \"f\"))]\n+\t   UNSPEC_SCC))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+  \"c.<swapped_fcond>.ps\\t%0,%2,%1\"\n+  [(set_attr \"type\" \"fcmp\")\n+   (set_attr \"mode\" \"FPSW\")])\n \n ;----------------------------------------------------------------------------\n ; Floating Point Branch Instructions.\n@@ -528,3 +554,40 @@\n   \"recip2.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"frdiv2\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n+\n+(define_expand \"vcondv2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(if_then_else:V2SF\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:V2SF 4 \"register_operand\")\n+\t     (match_operand:V2SF 5 \"register_operand\")])\n+\t  (match_operand:V2SF 1 \"register_operand\")\n+\t  (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  mips_expand_vcondv2sf (operands[0], operands[1], operands[2],\n+\t\t\t GET_CODE (operands[3]), operands[4], operands[5]);\n+  DONE;\n+})\n+\n+(define_expand \"sminv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(smin:V2SF (match_operand:V2SF 1 \"register_operand\")\n+\t\t   (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  mips_expand_vcondv2sf (operands[0], operands[1], operands[2],\n+\t\t\t LE, operands[1], operands[2]);\n+  DONE;\n+})\n+\n+(define_expand \"smaxv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(smax:V2SF (match_operand:V2SF 1 \"register_operand\")\n+\t\t   (match_operand:V2SF 2 \"register_operand\")))]\n+  \"TARGET_PAIRED_SINGLE_FLOAT\"\n+{\n+  mips_expand_vcondv2sf (operands[0], operands[1], operands[2],\n+\t\t\t LE, operands[2], operands[1]);\n+  DONE;\n+})"}, {"sha": "a12e82af707efa48073c2728ffb9f9c96425e32f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "patch": "@@ -3116,6 +3116,27 @@ mips_zero_if_equal (rtx cmp0, rtx cmp1)\n \t\t       cmp0, cmp1, 0, 0, OPTAB_DIRECT);\n }\n \n+/* Convert *CODE into a code that can be used in a floating-point\n+   scc instruction (c.<cond>.<fmt>).  Return true if the values of\n+   the condition code registers will be inverted, with 0 indicating\n+   that the condition holds.  */\n+\n+static bool\n+mips_reverse_fp_cond_p (enum rtx_code *code)\n+{\n+  switch (*code)\n+    {\n+    case NE:\n+    case LTGT:\n+    case ORDERED:\n+      *code = reverse_condition_maybe_unordered (*code);\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Convert a comparison into something that can be used in a branch or\n    conditional move.  cmp_operands[0] and cmp_operands[1] are the values\n    being compared and *CODE is the code used to compare them.\n@@ -3173,20 +3194,8 @@ mips_emit_compare (enum rtx_code *code, rtx *op0, rtx *op1, bool need_eq_ne_p)\n \n \t Set CMP_CODE to the code of the comparison instruction and\n \t *CODE to the code that the branch or move should use.  */\n-      switch (*code)\n-\t{\n-\tcase NE:\n-\tcase LTGT:\n-\tcase ORDERED:\n-\t  cmp_code = reverse_condition_maybe_unordered (*code);\n-\t  *code = EQ;\n-\t  break;\n-\n-\tdefault:\n-\t  cmp_code = *code;\n-\t  *code = NE;\n-\t  break;\n-\t}\n+      cmp_code = *code;\n+      *code = mips_reverse_fp_cond_p (&cmp_code) ? EQ : NE;\n       *op0 = (ISA_HAS_8CC\n \t      ? gen_reg_rtx (CCmode)\n \t      : gen_rtx_REG (CCmode, FPSW_REGNUM));\n@@ -3232,6 +3241,30 @@ gen_conditional_branch (rtx *operands, enum rtx_code code)\n   emit_jump_insn (gen_condjump (condition, operands[0]));\n }\n \n+/* Implement:\n+\n+   (set temp (COND:CCV2 CMP_OP0 CMP_OP1))\n+   (set DEST (unspec [TRUE_SRC FALSE_SRC temp] UNSPEC_MOVE_TF_PS))  */\n+\n+void\n+mips_expand_vcondv2sf (rtx dest, rtx true_src, rtx false_src,\n+\t\t       enum rtx_code cond, rtx cmp_op0, rtx cmp_op1)\n+{\n+  rtx cmp_result;\n+  bool reversed_p;\n+\n+  reversed_p = mips_reverse_fp_cond_p (&cond);\n+  cmp_result = gen_reg_rtx (CCV2mode);\n+  emit_insn (gen_scc_ps (cmp_result,\n+\t\t\t gen_rtx_fmt_ee (cond, VOIDmode, cmp_op0, cmp_op1)));\n+  if (reversed_p)\n+    emit_insn (gen_mips_cond_move_tf_ps (dest, false_src, true_src,\n+\t\t\t\t\t cmp_result));\n+  else\n+    emit_insn (gen_mips_cond_move_tf_ps (dest, true_src, false_src,\n+\t\t\t\t\t cmp_result));\n+}\n+\n /* Emit the common code for conditional moves.  OPERANDS is the array\n    of operands passed to the conditional move define_expand.  */\n "}, {"sha": "477235647230cf24fb8875af79aed8394ee857e5", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "patch": "@@ -73,6 +73,7 @@\n    (UNSPEC_RECIP1\t\t210)\n    (UNSPEC_RECIP2\t\t211)\n    (UNSPEC_SINGLE_CC\t\t212)\n+   (UNSPEC_SCC\t\t\t213)\n \n    ;; MIPS DSP ASE Revision 0.98 3/24/2005\n    (UNSPEC_ADDQ\t\t\t300)"}, {"sha": "32927ff4edb53957d09d2af14127db80b1ee23a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "patch": "@@ -1,3 +1,7 @@\n+2006-05-06  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.target/mips/mips-ps-5.c: New file.\n+\n 2006-05-08  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/25962"}, {"sha": "23d726e09d07dd4893a7b2ea2b7b00c5786392cb", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-5.c?ref=ec4fc7edafe1c67b09d5462efe3beb8bcc1e6732", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-mips-options \"-mips64 -O2 -mpaired-single -mhard-float -mgp64 -ftree-vectorize\" } */\n+\n+extern float a[], b[], c[];\n+\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    a[i] = b[i] == c[i] + 1 ? b[i] : c[i];\n+}\n+\n+/* { dg-final { scan-assembler \"add\\\\.ps\" } } */\n+/* { dg-final { scan-assembler \"c\\\\.eq\\\\.ps\" } } */\n+/* { dg-final { scan-assembler \"mov\\[tf\\]\\\\.ps\" } } */"}]}