{"sha": "10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlZTQ2YWRmNDRhZTczMWZjNGY5ZTlmZGMyNWFkNjBjOWQ0M2E5Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-26T14:13:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-26T16:15:52Z"}, "message": "libstdc++: Add \"futex\" and \"gthreads\" effective-target keywords\n\nThis adds a new \"futex\" effective-target keyword that can be used to\nselectively enable/disable tests based on _GLIBCXX_HAVE_LINUX_FUTEX,\ninstead of checking for that macro in the code.\n\nIt also adds \"gthreads\" as another one, to make the result of the\ndg-require-gthreads directive usable in target selectors.\n\nWith these new keywords two tests that are currently only run for linux\ncan also be run for targets using gthr-single.h (e.g. AIX single-thread\nmultilib, and targets without a gthreads implementation).\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/18_support/96817.cc: Use new effective-target\n\tkeywords to select supported targets more effectively.\n\t* testsuite/30_threads/call_once/66146.cc: Likewise.\n\t* testsuite/lib/libstdc++.exp (check_effective_target_futex):\n\tDefine new proc.\n\t(check_effective_target_gthreads): Define new proc to replace\n\tdg-require-gthreads.", "tree": {"sha": "099e4a08c5c4d20a446f9beb44d5a1e8a84e98a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099e4a08c5c4d20a446f9beb44d5a1e8a84e98a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294e72e9acbd0ff15ef5b18895de62cc173464ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294e72e9acbd0ff15ef5b18895de62cc173464ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294e72e9acbd0ff15ef5b18895de62cc173464ca"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "7f35f0311c3429e64cbbcfb2fe47b2c9801d7c68", "filename": "libstdc++-v3/testsuite/18_support/96817.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F96817.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F96817.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2F96817.cc?ref=10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "patch": "@@ -15,19 +15,18 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-pthread\"  }\n-// { dg-do run { target *-*-linux-gnu } }\n-// { dg-require-effective-target pthread }\n+// { dg-do run }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+\n+// Static init cannot detect recursion for gthreads targets without futexes\n+// (and the futex case can only detect it if __libc_single_threaded==true).\n+// { dg-skip-if \"unsupported\" { gthreads && { ! futex } } }\n \n // PR libstdc++/96817\n \n #include <exception>\n #include <stdlib.h>\n \n-#ifndef _GLIBCXX_HAVE_LINUX_FUTEX\n-# error \"This test requries futex support in the library\"\n-#endif\n-\n int init()\n {\n #if __has_include(<sys/single_threaded.h>)"}, {"sha": "a9c99485fa068798591152c93985bd9e2e515fac", "filename": "libstdc++-v3/testsuite/30_threads/call_once/66146.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F66146.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F66146.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F66146.cc?ref=10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "patch": "@@ -16,9 +16,11 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n-// { dg-skip-if \"\" { pthread && { ! *-*-*linux* } } }\n // { dg-additional-options \"-pthread\" { target pthread } }\n \n+// Currently std::call_once is broken for gthreads targets without futexes:\n+// { dg-skip-if \"see PR 66146\" { gthreads && { ! futex } } }\n+\n #include <mutex>\n #include <cstdlib>\n #include <testsuite_hooks.h>"}, {"sha": "9ba4ced48830ba5bdc1d975dfd9afec08707fc1d", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=10ee46adf44ae731fc4f9e9fdc25ad60c9d43a9c", "patch": "@@ -1613,6 +1613,38 @@ proc check_effective_target_tbb-backend { } {\n     }]\n }\n \n+# Return 1 if futex syscall is available\n+proc check_effective_target_futex { } {\n+    return [check_v3_target_prop_cached et_futex {\n+\t# Set up and compile a C++ test program that depends on tbb\n+\tset src futex[pid].cc\n+\tset exe futex[pid].x\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#if ! _GLIBCXX_HAVE_LINUX_FUTEX\"\n+\tputs $f \"#  error No futex syscall available\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocessing succeeded.\n+\t    verbose \"check_v3_futex: `1'\" 2\n+\t    return 1\n+\t}\n+\tverbose \"check_v3_futex: `0'\" 2\n+\treturn 0\n+    }]\n+}\n+\n+# Return 1 if futex syscall is available\n+proc check_effective_target_gthreads { } {\n+    return [check_v3_target_gthreads_timed]\n+}\n+\n set additional_prunes \"\"\n \n if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\"}]}