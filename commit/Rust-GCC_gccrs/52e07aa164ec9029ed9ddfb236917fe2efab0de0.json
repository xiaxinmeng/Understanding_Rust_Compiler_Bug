{"sha": "52e07aa164ec9029ed9ddfb236917fe2efab0de0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlMDdhYTE2NGVjOTAyOWVkOWRkZmIyMzY5MTdmZTJlZmFiMGRlMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-07-19T19:58:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-19T19:58:52Z"}, "message": "2008-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp\n\t(assert_node_consistent): Avoid ambiguous else warning.\n\n\t* include/ext/pb_ds/detail/debug_map_base.hpp: Include <iostream>.\n\n\t* include/bits/c++config: In debug-mode (and parallel-mode) set\n\t_GLIBCXX_EXTERN_TEMPLATE to -1, not 0, thus disabling extern\n\ttemplates only for basic_string (per libstdc++/21674).\n\t* include/bits/basic_string.tcc: Use extern templates when\n\t_GLIBCXX_EXTERN_TEMPLATE > 0.\n\nFrom-SVN: r137990", "tree": {"sha": "05f99167cdfb0d1908b163467f64eb4cfc00f84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f99167cdfb0d1908b163467f64eb4cfc00f84e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e07aa164ec9029ed9ddfb236917fe2efab0de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e07aa164ec9029ed9ddfb236917fe2efab0de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e07aa164ec9029ed9ddfb236917fe2efab0de0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e07aa164ec9029ed9ddfb236917fe2efab0de0/comments", "author": null, "committer": null, "parents": [{"sha": "a7ea9e2968dd6dc207e554ce89b16c291f4120a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ea9e2968dd6dc207e554ce89b16c291f4120a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ea9e2968dd6dc207e554ce89b16c291f4120a1"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "26529750fad340f0854e9addc5bf20753d7aa73f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=52e07aa164ec9029ed9ddfb236917fe2efab0de0", "patch": "@@ -1,3 +1,16 @@\n+2008-07-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp\n+\t(assert_node_consistent): Avoid ambiguous else warning.\n+\n+\t* include/ext/pb_ds/detail/debug_map_base.hpp: Include <iostream>.\n+\n+\t* include/bits/c++config: In debug-mode (and parallel-mode) set\n+\t_GLIBCXX_EXTERN_TEMPLATE to -1, not 0, thus disabling extern\n+\ttemplates only for basic_string (per libstdc++/21674).\n+\t* include/bits/basic_string.tcc: Use extern templates when\n+\t_GLIBCXX_EXTERN_TEMPLATE > 0.\n+\n 2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>\n \t    Holger Hopp  <holger.hopp@sap.com>\n "}, {"sha": "49b649446d3e832e53c240d6e9a1f61da92dce4c", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=52e07aa164ec9029ed9ddfb236917fe2efab0de0", "patch": "@@ -1104,7 +1104,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n   // NB: This syntax is a GNU extension.\n-#if _GLIBCXX_EXTERN_TEMPLATE\n+#if _GLIBCXX_EXTERN_TEMPLATE > 0\n   extern template class basic_string<char>;\n   extern template\n     basic_istream<char>&"}, {"sha": "e40d9603a9bece6a0c461a0e4a43fceaa4002c6a", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=52e07aa164ec9029ed9ddfb236917fe2efab0de0", "patch": "@@ -135,7 +135,7 @@\n #  define _GLIBCXX_STD __cxx1998\n #  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) { \n #  define _GLIBCXX_END_NAMESPACE }\n-#  define _GLIBCXX_EXTERN_TEMPLATE 0\n+#  define _GLIBCXX_EXTERN_TEMPLATE -1\n # endif\n \n // parallel\n@@ -145,7 +145,7 @@\n #  define _GLIBCXX_STD __cxx1998\n #  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) { \n #  define _GLIBCXX_END_NAMESPACE }\n-#  define _GLIBCXX_EXTERN_TEMPLATE 0\n+#  define _GLIBCXX_EXTERN_TEMPLATE -1\n # endif\n \n // debug + parallel\n@@ -155,7 +155,7 @@\n #  define _GLIBCXX_STD __cxx1998\n #  define _GLIBCXX_BEGIN_NAMESPACE(X) namespace X _GLIBCXX_VISIBILITY_ATTR(default) { \n #  define _GLIBCXX_END_NAMESPACE }\n-#  define _GLIBCXX_EXTERN_TEMPLATE 0\n+#  define _GLIBCXX_EXTERN_TEMPLATE -1\n # endif\n \n # if __NO_INLINE__ && !__GXX_WEAK__"}, {"sha": "85e5b870ce9e8ae0b994d82c9d7ebd44df506ff4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp?ref=52e07aa164ec9029ed9ddfb236917fe2efab0de0", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -65,13 +65,15 @@ assert_max() const\n     return;\n   _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == NULL);\n   for (const_iterator it = base_type::begin(); it != base_type::end(); ++it)\n-    _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n+    _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value,\n+\t\t\t\t\t      it.m_p_nd->m_value));\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial, bool increasing) const\n+assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial,\n+\t\t       bool increasing) const\n {\n   _GLIBCXX_DEBUG_ASSERT(increasing || strictly_binomial);\n   base_type::assert_node_consistent(p_nd, false);\n@@ -83,15 +85,20 @@ assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial, bool inc\n   assert_node_consistent(p_nd->m_p_next_sibling, strictly_binomial, increasing);\n   assert_node_consistent(p_nd->m_p_l_child, true, false);\n   if (p_nd->m_p_next_sibling != NULL)\n-    if (increasing)\n-      {\n-\tif (strictly_binomial)\n-\t  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata < p_nd->m_p_next_sibling->m_metadata);\n-\telse\n-\t  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata <= p_nd->m_p_next_sibling->m_metadata);\n-      }\n-    else\n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata > p_nd->m_p_next_sibling->m_metadata);\n+    {\n+      if (increasing)\n+\t{\n+\t  if (strictly_binomial)\n+\t    _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata\n+\t\t\t\t  < p_nd->m_p_next_sibling->m_metadata);\n+\t  else\n+\t    _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata\n+\t\t\t\t  <= p_nd->m_p_next_sibling->m_metadata);\n+\t}\n+      else\n+\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata\n+\t\t\t      > p_nd->m_p_next_sibling->m_metadata);\n+    }\n }\n \n-#endif \n+#endif"}, {"sha": "5319749128bc751d539e4a6dee07cd64a75964b2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e07aa164ec9029ed9ddfb236917fe2efab0de0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=52e07aa164ec9029ed9ddfb236917fe2efab0de0", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -52,6 +52,7 @@\n #include <list>\n #include <utility>\n #include <cstdlib>\n+#include <iostream>\n #include <ext/throw_allocator.h>\n #include <debug/debug.h>\n "}]}