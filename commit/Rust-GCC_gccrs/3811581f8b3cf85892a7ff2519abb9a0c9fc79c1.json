{"sha": "3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxMTU4MWY4YjNjZjg1ODkyYTdmZjI1MTlhYmI5YTBjOWZjNzljMQ==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2017-01-06T17:37:39Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2017-01-06T17:37:39Z"}, "message": "[ARM] Implement support for ACLE Coprocessor LDC and STC intrinsics\n\ngcc/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm.md (*ldc): New.\n\t(*stc): New.\n\t(<ldc>): New.\n\t(<stc>): New.\n\t* config/arm/arm.c (arm_coproc_builtin_available): Add\n\tsupport for ldc,ldcl,stc,stcl,ldc2,ldc2l,stc2 and stc2l.\n\t(arm_coproc_ldc_stc_legitimate_address): New.\n\t* config/arm/arm-builtins.c (arm_type_qualifiers): Add\n\t'qualifier_const_pointer'.\n\t(LDC_QUALIFIERS): Define to...\n\t(arm_ldc_qualifiers): ... this. New.\n\t(STC_QUALIFIERS): Define to...\n\t(arm_stc_qualifiers): ... this. New.\n\t* config/arm/arm-protos.h\n\t(arm_coproc_ldc_stc_legitimate_address): New.\n\t* config/arm/arm_acle.h (__arm_ldc, __arm_ldcl, __arm_stc,\n\t__arm_stcl, __arm_ldc2, __arm_ldc2l, __arm_stc2, __arm_stc2l): New.\n\t* config/arm/arm_acle_builtins.def (ldc, ldc2, ldcl, ldc2l, stc,\n\tstc2, stcl, stc2l): New.\n\t* config/arm/constraints.md (Uz): New.\n\t* config/arm/iterators.md (LDCI, STCI, ldc, stc, LDC STC): New.\n\t* config/arm/unspecs.md (VUNSPEC_LDC, VUNSPEC_LDC2, VUNSPEC_LDCL,\n\tVUNSPEC_LDC2L, VUNSPEC_STC, VUNSPEC_STC2, VUNSPEC_STCL,\n\tVUNSPEC_STC2L): New.\n\ngcc/testsuite/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/acle/ldc: New.\n\t* gcc.target/arm/acle/ldc2: New.\n\t* gcc.target/arm/acle/ldcl: New.\n\t* gcc.target/arm/acle/ldc2l: New.\n\t* gcc.target/arm/acle/stc: New.\n\t* gcc.target/arm/acle/stc2: New.\n\t* gcc.target/arm/acle/stcl: New.\n\t* gcc.target/arm/acle/stc2l: New.\n\nFrom-SVN: r244173", "tree": {"sha": "e924b85d206a786eb2939fb852748b86739ea2dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e924b85d206a786eb2939fb852748b86739ea2dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d57daa0c9d47b15781359f7a2898c991e560463d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57daa0c9d47b15781359f7a2898c991e560463d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57daa0c9d47b15781359f7a2898c991e560463d"}], "stats": {"total": 392, "additions": 392, "deletions": 0}, "files": [{"sha": "57df07eb64cc559f25e661c7da416c9f520261fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -1,3 +1,30 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.md (*ldc): New.\n+\t(*stc): New.\n+\t(<ldc>): New.\n+\t(<stc>): New.\n+\t* config/arm/arm.c (arm_coproc_builtin_available): Add\n+\tsupport for ldc,ldcl,stc,stcl,ldc2,ldc2l,stc2 and stc2l.\n+\t(arm_coproc_ldc_stc_legitimate_address): New.\n+\t* config/arm/arm-builtins.c (arm_type_qualifiers): Add\n+\t'qualifier_const_pointer'.\n+\t(LDC_QUALIFIERS): Define to...\n+\t(arm_ldc_qualifiers): ... this. New.\n+\t(STC_QUALIFIERS): Define to...\n+\t(arm_stc_qualifiers): ... this. New.\n+\t* config/arm/arm-protos.h\n+\t(arm_coproc_ldc_stc_legitimate_address): New.\n+\t* config/arm/arm_acle.h (__arm_ldc, __arm_ldcl, __arm_stc,\n+\t__arm_stcl, __arm_ldc2, __arm_ldc2l, __arm_stc2, __arm_stc2l): New.\n+\t* config/arm/arm_acle_builtins.def (ldc, ldc2, ldcl, ldc2l, stc,\n+\tstc2, stcl, stc2l): New.\n+\t* config/arm/constraints.md (Uz): New.\n+\t* config/arm/iterators.md (LDCI, STCI, ldc, stc, LDC STC): New.\n+\t* config/arm/unspecs.md (VUNSPEC_LDC, VUNSPEC_LDC2, VUNSPEC_LDCL,\n+\tVUNSPEC_LDC2L, VUNSPEC_STC, VUNSPEC_STC2, VUNSPEC_STCL,\n+\tVUNSPEC_STC2L): New.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.md (<cdp>): New."}, {"sha": "103ae762f7c2de62f445a5f48b80222ac4f37767", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -51,6 +51,8 @@ enum arm_type_qualifiers\n   qualifier_const = 0x2, /* 1 << 1  */\n   /* T *foo.  */\n   qualifier_pointer = 0x4, /* 1 << 2  */\n+  /* const T * foo.  */\n+  qualifier_const_pointer = 0x6,\n   /* Used when expanding arguments if an operand could\n      be an immediate.  */\n   qualifier_immediate = 0x8, /* 1 << 3  */\n@@ -178,6 +180,23 @@ arm_cdp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned_immediate };\n #define CDP_QUALIFIERS \\\n   (arm_cdp_qualifiers)\n+\n+/* void (unsigned immediate, unsigned immediate,  const void *).  */\n+static enum arm_type_qualifiers\n+arm_ldc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate, qualifier_const_pointer };\n+#define LDC_QUALIFIERS \\\n+  (arm_ldc_qualifiers)\n+\n+/* void (unsigned immediate, unsigned immediate,  void *).  */\n+static enum arm_type_qualifiers\n+arm_stc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate, qualifier_pointer };\n+#define STC_QUALIFIERS \\\n+  (arm_stc_qualifiers)\n+\n /* The first argument (return type) of a store should be void type,\n    which we represent with qualifier_void.  Their first operand will be\n    a DImode pointer to the location to store to, so we must use"}, {"sha": "1b1623917273b7f7d1708b2429fc6bdd0c1613ab", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -177,6 +177,7 @@ extern void arm_split_compare_and_swap (rtx op[]);\n extern void arm_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);\n extern rtx arm_load_tp (rtx);\n extern bool arm_coproc_builtin_available (enum unspecv);\n+extern bool arm_coproc_ldc_stc_legitimate_address (rtx);\n \n #if defined TREE_CODE\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "5e098461ec71d16768c9e6cde4e8cc5303c3eb59", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -30904,10 +30904,18 @@ arm_coproc_builtin_available (enum unspecv builtin)\n   switch (builtin)\n     {\n       case VUNSPEC_CDP:\n+      case VUNSPEC_LDC:\n+      case VUNSPEC_LDCL:\n+      case VUNSPEC_STC:\n+      case VUNSPEC_STCL:\n \tif (arm_arch4)\n \t  return true;\n \tbreak;\n       case VUNSPEC_CDP2:\n+      case VUNSPEC_LDC2:\n+      case VUNSPEC_LDC2L:\n+      case VUNSPEC_STC2:\n+      case VUNSPEC_STC2L:\n \t/* Only present in ARMv5*, ARMv6 (but not ARMv6-M), ARMv7* and\n \t   ARMv8-{A,M}.  */\n \tif (arm_arch5)\n@@ -30918,4 +30926,55 @@ arm_coproc_builtin_available (enum unspecv builtin)\n     }\n   return false;\n }\n+\n+/* This function returns true if OP is a valid memory operand for the ldc and\n+   stc coprocessor instructions and false otherwise.  */\n+\n+bool\n+arm_coproc_ldc_stc_legitimate_address (rtx op)\n+{\n+  HOST_WIDE_INT range;\n+  /* Has to be a memory operand.  */\n+  if (!MEM_P (op))\n+    return false;\n+\n+  op = XEXP (op, 0);\n+\n+  /* We accept registers.  */\n+  if (REG_P (op))\n+    return true;\n+\n+  switch GET_CODE (op)\n+    {\n+      case PLUS:\n+\t{\n+\t  /* Or registers with an offset.  */\n+\t  if (!REG_P (XEXP (op, 0)))\n+\t    return false;\n+\n+\t  op = XEXP (op, 1);\n+\n+\t  /* The offset must be an immediate though.  */\n+\t  if (!CONST_INT_P (op))\n+\t    return false;\n+\n+\t  range = INTVAL (op);\n+\n+\t  /* Within the range of [-1020,1020].  */\n+\t  if (!IN_RANGE (range, -1020, 1020))\n+\t    return false;\n+\n+\t  /* And a multiple of 4.  */\n+\t  return (range % 4) == 0;\n+\t}\n+      case PRE_INC:\n+      case POST_INC:\n+      case PRE_DEC:\n+      case POST_DEC:\n+\treturn REG_P (XEXP (op, 0));\n+      default:\n+\tgcc_unreachable ();\n+    }\n+  return false;\n+}\n #include \"gt-arm.h\""}, {"sha": "799a9cae3707202ce45ae72fcbeda97dccf62529", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -11939,6 +11939,44 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"coproc\")])\n \n+(define_insn \"*ldc\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 2 \"memory_operand\" \"Uz\")] LDCI)]\n+  \"arm_coproc_builtin_available (VUNSPEC_<LDC>)\"\n+{\n+  arm_const_bounds (operands[0], 0, 16);\n+  arm_const_bounds (operands[1], 0, (1 << 5));\n+  return \"<ldc>\\\\tp%c0, CR%c1, %2\";\n+}\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"coproc\")])\n+\n+(define_insn \"*stc\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 2 \"memory_operand\" \"=Uz\")] STCI)]\n+  \"arm_coproc_builtin_available (VUNSPEC_<STC>)\"\n+{\n+  arm_const_bounds (operands[0], 0, 16);\n+  arm_const_bounds (operands[1], 0, (1 << 5));\n+  return \"<stc>\\\\tp%c0, CR%c1, %2\";\n+}\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"coproc\")])\n+\n+(define_expand \"<ldc>\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\")\n+\t\t     (match_operand:SI 1 \"immediate_operand\")\n+\t\t     (mem:SI (match_operand:SI 2 \"s_register_operand\"))] LDCI)]\n+  \"arm_coproc_builtin_available (VUNSPEC_<LDC>)\")\n+\n+(define_expand \"<stc>\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\")\n+\t\t     (match_operand:SI 1 \"immediate_operand\")\n+\t\t     (mem:SI (match_operand:SI 2 \"s_register_operand\"))] STCI)]\n+  \"arm_coproc_builtin_available (VUNSPEC_<STC>)\")\n+\n ;; Vector bits common to IWMMXT and Neon\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "1c7a44d9087b4c4b9e46669deb833f585564d053", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -41,6 +41,33 @@ __arm_cdp (const unsigned int __coproc, const unsigned int __opc1,\n   return __builtin_arm_cdp (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n }\n \n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_ldc (const unsigned int __coproc, const unsigned int __CRd,\n+\t   const void * __p)\n+{\n+  return __builtin_arm_ldc (__coproc, __CRd, __p);\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_ldcl (const unsigned int __coproc, const unsigned int __CRd,\n+\t    const void * __p)\n+{\n+  return __builtin_arm_ldcl (__coproc, __CRd, __p);\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_stc (const unsigned int __coproc, const unsigned int __CRd,\n+\t   void * __p)\n+{\n+  return __builtin_arm_stc (__coproc, __CRd, __p);\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_stcl (const unsigned int __coproc, const unsigned int __CRd,\n+\t    void * __p)\n+{\n+  return __builtin_arm_stcl (__coproc, __CRd, __p);\n+}\n #if __ARM_ARCH >= 5\n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_cdp2 (const unsigned int __coproc, const unsigned int __opc1,\n@@ -49,6 +76,34 @@ __arm_cdp2 (const unsigned int __coproc, const unsigned int __opc1,\n {\n   return __builtin_arm_cdp2 (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n }\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_ldc2 (const unsigned int __coproc, const unsigned int __CRd,\n+\t    const void * __p)\n+{\n+  return __builtin_arm_ldc2 (__coproc, __CRd, __p);\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_ldc2l (const unsigned int __coproc, const unsigned int __CRd,\n+\t     const void * __p)\n+{\n+  return __builtin_arm_ldc2l (__coproc, __CRd, __p);\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_stc2 (const unsigned int __coproc, const unsigned int __CRd,\n+\t    void * __p)\n+{\n+  return __builtin_arm_stc2 (__coproc, __CRd, __p);\n+}\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_stc2l (const unsigned int __coproc, const unsigned int __CRd,\n+\t     void * __p)\n+{\n+  return __builtin_arm_stc2l (__coproc, __CRd, __p);\n+}\n #endif /*  __ARM_ARCH >= 5.  */\n #endif /* (!__thumb__ || __thumb2__) &&  __ARM_ARCH >= 4.  */\n "}, {"sha": "eb6168d98a897280aef2954372613487ca256fb0", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -26,3 +26,11 @@ VAR1 (UBINOP, crc32ch, si)\n VAR1 (UBINOP, crc32cw, si)\n VAR1 (CDP, cdp, void)\n VAR1 (CDP, cdp2, void)\n+VAR1 (LDC, ldc, void)\n+VAR1 (LDC, ldc2, void)\n+VAR1 (LDC, ldcl, void)\n+VAR1 (LDC, ldc2l, void)\n+VAR1 (STC, stc, void)\n+VAR1 (STC, stc2, void)\n+VAR1 (STC, stcl, void)\n+VAR1 (STC, stc2l, void)"}, {"sha": "0bd87dd32af1de9a0be58640ec94e83a76ce092c", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -447,6 +447,12 @@\n  (match_code \"symbol_ref\")\n )\n \n+(define_memory_constraint \"Uz\"\n+ \"@internal\n+  A memory access that is accessible as an LDC/STC operand\"\n+ (and (match_code \"mem\")\n+      (match_test \"arm_coproc_ldc_stc_legitimate_address (op)\")))\n+\n ;; We used to have constraint letters for S and R in ARM state, but\n ;; all uses of these now appear to have been removed.\n "}, {"sha": "ec74868a9b99c3a4bb379b82d3a77057ce238f03", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -948,3 +948,19 @@\n (define_int_iterator CDPI [VUNSPEC_CDP VUNSPEC_CDP2])\n (define_int_attr cdp [(VUNSPEC_CDP \"cdp\") (VUNSPEC_CDP2 \"cdp2\")])\n (define_int_attr CDP [(VUNSPEC_CDP \"CDP\") (VUNSPEC_CDP2 \"CDP2\")])\n+\n+;; An iterator for the LDC coprocessor instruction\n+(define_int_iterator LDCI [VUNSPEC_LDC VUNSPEC_LDC2\n+\t\t\t   VUNSPEC_LDCL VUNSPEC_LDC2L])\n+(define_int_attr ldc [(VUNSPEC_LDC \"ldc\") (VUNSPEC_LDC2 \"ldc2\")\n+\t\t      (VUNSPEC_LDCL \"ldcl\") (VUNSPEC_LDC2L \"ldc2l\")])\n+(define_int_attr LDC [(VUNSPEC_LDC \"LDC\") (VUNSPEC_LDC2 \"LDC2\")\n+\t\t      (VUNSPEC_LDCL \"LDCL\") (VUNSPEC_LDC2L \"LDC2L\")])\n+\n+;; An iterator for the STC coprocessor instructions\n+(define_int_iterator STCI [VUNSPEC_STC VUNSPEC_STC2\n+\t\t\t   VUNSPEC_STCL VUNSPEC_STC2L])\n+(define_int_attr stc [(VUNSPEC_STC \"stc\") (VUNSPEC_STC2 \"stc2\")\n+\t\t      (VUNSPEC_STCL \"stcl\") (VUNSPEC_STC2L \"stc2l\")])\n+(define_int_attr STC [(VUNSPEC_STC \"STC\") (VUNSPEC_STC2 \"STC2\")\n+\t\t      (VUNSPEC_STCL \"STCL\") (VUNSPEC_STC2L \"STC2L\")])"}, {"sha": "2cc5eb8e1dbeafd156567c8e507e39d8057a99f1", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -152,6 +152,14 @@\n   VUNSPEC_PROBE_STACK_RANGE ; Represent stack range probing.\n   VUNSPEC_CDP\t\t; Represent the coprocessor cdp instruction.\n   VUNSPEC_CDP2\t\t; Represent the coprocessor cdp2 instruction.\n+  VUNSPEC_LDC\t\t; Represent the coprocessor ldc instruction.\n+  VUNSPEC_LDC2\t\t; Represent the coprocessor ldc2 instruction.\n+  VUNSPEC_LDCL\t\t; Represent the coprocessor ldcl instruction.\n+  VUNSPEC_LDC2L\t\t; Represent the coprocessor ldc2l instruction.\n+  VUNSPEC_STC\t\t; Represent the coprocessor stc instruction.\n+  VUNSPEC_STC2\t\t; Represent the coprocessor stc2 instruction.\n+  VUNSPEC_STCL\t\t; Represent the coprocessor stcl instruction.\n+  VUNSPEC_STC2L\t\t; Represent the coprocessor stc2l instruction.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "73be783419a996a52aac22edf195bf93d9e9ee82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -1,3 +1,14 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/acle/ldc: New.\n+\t* gcc.target/arm/acle/ldc2: New.\n+\t* gcc.target/arm/acle/ldcl: New.\n+\t* gcc.target/arm/acle/ldc2l: New.\n+\t* gcc.target/arm/acle/stc: New.\n+\t* gcc.target/arm/acle/stc2: New.\n+\t* gcc.target/arm/acle/stcl: New.\n+\t* gcc.target/arm/acle/stc2l: New.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/acle/acle.exp: Run tests for different options"}, {"sha": "f45f25d8c973e6aff715fcf17fbd9d2fc1ac2edf", "filename": "gcc/testsuite/gcc.target/arm/acle/ldc.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the ldc ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc1_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_ldc (void)\n+{\n+  __arm_ldc (10, 1, p + 4);\n+  __arm_ldc (11, 1, p + 1024);\n+}\n+\n+/* { dg-final { scan-assembler \"ldc\\tp10, CR1, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"ldc\\tp11, CR1, \\[r\\[0-9\\]+\\]\\n\" } } */"}, {"sha": "433bf8a12043c3876e8c961d86b64365faa4b30f", "filename": "gcc/testsuite/gcc.target/arm/acle/ldc2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc2.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the ldc2 ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc2_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_ldc2 (void)\n+{\n+  __arm_ldc2 (10, 1, p - 120);\n+  __arm_ldc2 (11, 1, p - 122);\n+}\n+\n+/* { dg-final { scan-assembler \"ldc2\\tp10, CR1, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"ldc2\\tp11, CR1, \\[r\\[0-9\\]+\\]\\n\" } } */"}, {"sha": "88c8aa447656d64c0890101005708675c8f02b38", "filename": "gcc/testsuite/gcc.target/arm/acle/ldc2l.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc2l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc2l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldc2l.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the ldc2l ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc2_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_ldc2l (void)\n+{\n+  __arm_ldc2l (10, 1, p - 120);\n+  __arm_ldc2l (11, 1, p - 122);\n+}\n+\n+/* { dg-final { scan-assembler \"ldc2l\\tp10, CR1, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"ldc2l\\tp11, CR1, \\[r\\[0-9\\]+\\]\\n\" } } */"}, {"sha": "72a97f1d7b7d1a1aea99af638240ad50b708e137", "filename": "gcc/testsuite/gcc.target/arm/acle/ldcl.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldcl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldcl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fldcl.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the ldcl ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc1_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_ldcl (void)\n+{\n+  __arm_ldcl (10, 1, p + 4);\n+  __arm_ldcl (11, 1, p + 1024);\n+}\n+\n+/* { dg-final { scan-assembler \"ldcl\\tp10, CR1, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"ldcl\\tp11, CR1, \\[r\\[0-9\\]+\\]\\n\" } } */"}, {"sha": "7c6e04fe0fe5cd63a259566c34d976657ae03509", "filename": "gcc/testsuite/gcc.target/arm/acle/stc.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the stc ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc1_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_stc (void)\n+{\n+  __arm_stc (10, 1, p + 4);\n+  __arm_stc (11, 1, p + 1024);\n+}\n+\n+/* { dg-final { scan-assembler \"stc\\tp10, CR1, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"stc\\tp11, CR1, \\[r\\[0-9\\]+\\]\\n\" } } */"}, {"sha": "1578f7b113676c9d5692c7e5b48b910f091ca29c", "filename": "gcc/testsuite/gcc.target/arm/acle/stc2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc2.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the stc2 ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc2_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_stc2 (void)\n+{\n+  __arm_stc2 (10, 1, p - 120);\n+  __arm_stc2 (11, 1, p - 122);\n+}\n+\n+/* { dg-final { scan-assembler \"stc2\\tp10, CR1, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"stc2\\tp11, CR1, \\[r\\[0-9\\]+\\]\\n\" } } */"}, {"sha": "7adbd60d48ac3f5a0f77dce98a3d3ba931ec58e3", "filename": "gcc/testsuite/gcc.target/arm/acle/stc2l.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc2l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc2l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstc2l.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the stc2l ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc2_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_stc2l (void)\n+{\n+  __arm_stc2l (10, 1, p - 120);\n+  __arm_stc2l (11, 1, p - 122);\n+}\n+\n+/* { dg-final { scan-assembler \"stc2l\\tp10, CR1, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"stc2l\\tp11, CR1, \\[r\\[0-9\\]+\\]\\n\" } } */"}, {"sha": "2fd5edd02d7e83efdcfaa2203ef1be9f612e414e", "filename": "gcc/testsuite/gcc.target/arm/acle/stcl.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstcl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstcl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fstcl.c?ref=3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "patch": "@@ -0,0 +1,18 @@\n+/* Test the stcl ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc1_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+extern void * p;\n+\n+void test_stcl (void)\n+{\n+  __arm_stcl (14, 10, p + 4);\n+  __arm_stcl (10, 10, p + 1024);\n+}\n+\n+/* { dg-final { scan-assembler \"stcl\\tp14, CR10, \\[r\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"stcl\\tp10, CR10, \\[r\\[0-9\\]+\\]\\n\" } } */"}]}