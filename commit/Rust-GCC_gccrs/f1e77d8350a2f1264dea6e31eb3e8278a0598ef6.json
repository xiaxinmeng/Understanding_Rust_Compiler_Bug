{"sha": "f1e77d8350a2f1264dea6e31eb3e8278a0598ef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlNzdkODM1MGEyZjEyNjRkZWE2ZTMxZWIzZTgyNzhhMDU5OGVmNg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-08-29T00:40:40Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-08-29T00:40:40Z"}, "message": "s390.md (\"*mulsi3_sign\"): New insn.\n\n\t* config/s390/s390.md (\"*mulsi3_sign\"): New insn.\n\t(\"mulsidi3\" expander, \"mulsi_6432\" insn): Remove, replace by ...\n\t(\"mulsidi3\"): ... this new insn.\n\t(\"umulsidi3\"): New insn.\n\t(\"divmoddi3\", \"divmodtidi3\", \"divmodtisi3\"): Simplify by using\n\tmixed-mode matching constraints.\n\t(\"udivmodsi4\", \"udivmoddisi3\"): New insns.\n\t(\"udivsi3\", \"umodsi3\"): Use only in ESA/390 mode.\n\nFrom-SVN: r70897", "tree": {"sha": "de4c8c242496fcdc4e8de92425bfea024a541819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de4c8c242496fcdc4e8de92425bfea024a541819"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6/comments", "author": null, "committer": null, "parents": [{"sha": "7ae963b47c3e95f04cb73bb8b4f141fa27d3757e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae963b47c3e95f04cb73bb8b4f141fa27d3757e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae963b47c3e95f04cb73bb8b4f141fa27d3757e"}], "stats": {"total": 158, "additions": 110, "deletions": 48}, "files": [{"sha": "40d00687709f8bf74a92795d294ba0f58450338a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1e77d8350a2f1264dea6e31eb3e8278a0598ef6", "patch": "@@ -1,3 +1,14 @@\n+2003-08-28  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"*mulsi3_sign\"): New insn.\n+\t(\"mulsidi3\" expander, \"mulsi_6432\" insn): Remove, replace by ...\n+\t(\"mulsidi3\"): ... this new insn.\n+\t(\"umulsidi3\"): New insn.\n+\t(\"divmoddi3\", \"divmodtidi3\", \"divmodtisi3\"): Simplify by using\n+\tmixed-mode matching constraints.\n+\t(\"udivmodsi4\", \"udivmoddisi3\"): New insns.\n+\t(\"udivsi3\", \"umodsi3\"): Use only in ESA/390 mode.\n+\n 2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtin-types.def (BT_INT_PTR, BT_FLOAT_PTR, BT_DOUBLE_PTR,"}, {"sha": "b2eff87c6400105c6abeb1cb67350ed96153e515", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 99, "deletions": 48, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e77d8350a2f1264dea6e31eb3e8278a0598ef6/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f1e77d8350a2f1264dea6e31eb3e8278a0598ef6", "patch": "@@ -4023,7 +4023,6 @@\n   [(set_attr \"op_type\"  \"RRE,RXY\")\n    (set_attr \"type\"     \"imul\")])\n \n-\n (define_insn \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n         (mult:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n@@ -4040,6 +4039,15 @@\n ; mulsi3 instruction pattern(s).\n ;\n \n+(define_insn \"*mulsi3_sign\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (mult:SI (sign_extend:SI (match_operand:HI 2 \"memory_operand\" \"R\"))\n+                 (match_operand:SI 1 \"register_operand\" \"0\")))]\n+  \"\"\n+  \"mh\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RX\")\n+   (set_attr \"type\"     \"imul\")])\n+\n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n         (mult:SI  (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n@@ -4057,37 +4065,34 @@\n ; mulsidi3 instruction pattern(s).\n ;\n \n-(define_expand \"mulsidi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\"))))]\n+(define_insn \"mulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (mult:DI (sign_extend:DI\n+\t           (match_operand:SI 1 \"register_operand\" \"%0,0\"))\n+                 (sign_extend:DI\n+\t           (match_operand:SI 2 \"nonimmediate_operand\" \"d,R\"))))]\n   \"!TARGET_64BIT\"\n-{\n-  rtx insn;\n-\n-  emit_insn (gen_zero_extendsidi2 (operands[0], operands[1]));\n-  insn = emit_insn (gen_mulsi_6432 (operands[0], operands[0], operands[2]));\n+  \"@\n+   mr\\t%0,%2\n+   m\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RR,RX\")\n+   (set_attr \"type\"     \"imul\")])\n \n-  REG_NOTES (insn) =\n-\tgen_rtx_EXPR_LIST (REG_EQUAL,\n-                           gen_rtx_MULT (DImode,\n-\t\t\t\tgen_rtx_SIGN_EXTEND (DImode, operands[1]),\n-\t\t\t\tgen_rtx_SIGN_EXTEND (DImode, operands[2])),\n-\t\t\t   REG_NOTES (insn));\n-  DONE;\n-})\n+;\n+; umulsidi3 instruction pattern(s).\n+;\n \n-(define_insn \"mulsi_6432\"\n-   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-         (mult:DI (sign_extend:DI\n-\t            (truncate:SI (match_operand:DI 1 \"register_operand\" \"0,0\")))\n-                  (sign_extend:DI\n-\t            (match_operand:SI 2 \"nonimmediate_operand\" \"d,R\"))))]\n-   \"!TARGET_64BIT\"\n-   \"@\n-    mr\\t%0,%2\n-    m\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX\")\n+(define_insn \"umulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (mult:DI (zero_extend:DI\n+\t           (match_operand:SI 1 \"register_operand\" \"%0,0\"))\n+                 (zero_extend:DI\n+\t           (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))))]\n+  \"!TARGET_64BIT && TARGET_CPU_ZARCH\"\n+  \"@\n+   mlr\\t%0,%2\n+   ml\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n    (set_attr \"type\"     \"imul\")])\n \n ;\n@@ -4222,30 +4227,20 @@\n \n (define_expand \"divmoddi4\"\n   [(parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t\t   (div:DI (match_operand:DI 1 \"general_operand\" \"\")\n+\t\t   (div:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t\t   (match_operand:DI 2 \"general_operand\" \"\")))\n \t      (set (match_operand:DI 3 \"general_operand\" \"\")\n \t\t   (mod:DI (match_dup 1) (match_dup 2)))])\n    (clobber (match_dup 4))]\n   \"TARGET_64BIT\"\n {\n-  rtx insn, div_equal, mod_equal, equal;\n+  rtx insn, div_equal, mod_equal;\n \n   div_equal = gen_rtx_DIV (DImode, operands[1], operands[2]);\n   mod_equal = gen_rtx_MOD (DImode, operands[1], operands[2]);\n-  equal = gen_rtx_IOR (TImode,\n-\t\t       gen_rtx_ZERO_EXTEND (TImode, div_equal),\n-\t\t       gen_rtx_ASHIFT (TImode,\n-\t\t\t\t       gen_rtx_ZERO_EXTEND (TImode, mod_equal),\n-\t\t\t\t       GEN_INT (64)));\n \n   operands[4] = gen_reg_rtx(TImode);\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n-  emit_move_insn (gen_lowpart (DImode, operands[4]), operands[1]);\n-  emit_move_insn (gen_highpart (DImode, operands[4]), const0_rtx);\n-  insn = emit_insn (gen_divmodtidi3 (operands[4], operands[4], operands[2]));\n-  REG_NOTES (insn) =\n-\tgen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+  emit_insn (gen_divmodtidi3 (operands[4], operands[1], operands[2]));\n \n   insn = emit_move_insn (operands[0], gen_lowpart (DImode, operands[4]));\n   REG_NOTES (insn) =\n@@ -4262,11 +4257,11 @@\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n         (ior:TI\n           (zero_extend:TI\n-            (div:DI (truncate:DI (match_operand:TI 1 \"register_operand\" \"0,0\"))\n+            (div:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n                     (match_operand:DI 2 \"general_operand\" \"d,m\")))\n           (ashift:TI\n             (zero_extend:TI\n-              (mod:DI (truncate:DI (match_dup 1))\n+              (mod:DI (match_dup 1)\n                       (match_dup 2)))\n             (const_int 64))))]\n   \"TARGET_64BIT\"\n@@ -4280,11 +4275,11 @@\n   [(set (match_operand:TI 0 \"register_operand\" \"=d,d\")\n         (ior:TI\n           (zero_extend:TI\n-            (div:DI (truncate:DI (match_operand:TI 1 \"register_operand\" \"0,0\"))\n+            (div:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n                     (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\"))))\n           (ashift:TI\n             (zero_extend:TI\n-              (mod:DI (truncate:DI (match_dup 1))\n+              (mod:DI (match_dup 1)\n                       (sign_extend:DI (match_dup 2))))\n             (const_int 64))))]\n   \"TARGET_64BIT\"\n@@ -4418,13 +4413,69 @@\n ; udivsi3 and umodsi3 instruction pattern(s).\n ;\n \n+(define_expand \"udivmodsi4\"\n+  [(parallel [(set (match_operand:SI 0 \"general_operand\" \"\")\n+\t\t   (udiv:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n+\t      (set (match_operand:SI 3 \"general_operand\" \"\")\n+\t\t   (umod:SI (match_dup 1) (match_dup 2)))])\n+   (clobber (match_dup 4))]\n+  \"!TARGET_64BIT && TARGET_CPU_ZARCH\"\n+{\n+  rtx insn, div_equal, mod_equal, equal;\n+\n+  div_equal = gen_rtx_UDIV (SImode, operands[1], operands[2]);\n+  mod_equal = gen_rtx_UMOD (SImode, operands[1], operands[2]);\n+  equal = gen_rtx_IOR (DImode,\n+\t\t       gen_rtx_ZERO_EXTEND (DImode, div_equal),\n+\t\t       gen_rtx_ASHIFT (DImode,\n+\t\t\t\t       gen_rtx_ZERO_EXTEND (DImode, mod_equal),\n+\t\t\t\t       GEN_INT (32)));\n+\n+  operands[4] = gen_reg_rtx(DImode);\n+  emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n+  emit_move_insn (gen_lowpart (SImode, operands[4]), operands[1]);\n+  emit_move_insn (gen_highpart (SImode, operands[4]), const0_rtx);\n+  insn = emit_insn (gen_udivmoddisi3 (operands[4], operands[4], operands[2]));\n+  REG_NOTES (insn) =\n+\tgen_rtx_EXPR_LIST (REG_EQUAL, equal, REG_NOTES (insn));\n+\n+  insn = emit_move_insn (operands[0], gen_lowpart (SImode, operands[4]));\n+  REG_NOTES (insn) =\n+        gen_rtx_EXPR_LIST (REG_EQUAL, div_equal, REG_NOTES (insn));\n+\n+  insn = emit_move_insn (operands[3], gen_highpart (SImode, operands[4]));\n+  REG_NOTES (insn) =\n+        gen_rtx_EXPR_LIST (REG_EQUAL, mod_equal, REG_NOTES (insn));\n+\n+  DONE;\n+})\n+\n+(define_insn \"udivmoddisi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n+        (ior:DI (zero_extend:DI\n+                  (truncate:SI\n+                    (udiv:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n+                             (zero_extend:DI\n+                               (match_operand:SI 2 \"nonimmediate_operand\" \"d,m\")))))\n+                (ashift:DI\n+                  (zero_extend:DI\n+                    (truncate:SI\n+                      (umod:DI (match_dup 1) (zero_extend:DI (match_dup 2)))))\n+                  (const_int 32))))]\n+  \"!TARGET_64BIT && TARGET_CPU_ZARCH\"\n+  \"@\n+   dlr\\t%0,%2\n+   dl\\t%0,%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY\")\n+   (set_attr \"type\"     \"idiv\")])\n \n (define_expand \"udivsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (udiv:SI (match_operand:SI 1 \"general_operand\" \"\")\n                  (match_operand:SI 2 \"general_operand\" \"\")))\n    (clobber (match_dup 3))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_64BIT && !TARGET_CPU_ZARCH\"\n {\n   rtx insn, udiv_equal, umod_equal, equal;\n \n@@ -4515,7 +4566,7 @@\n         (umod:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n                  (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n    (clobber (match_dup 3))]\n-  \"!TARGET_64BIT\"\n+  \"!TARGET_64BIT && !TARGET_CPU_ZARCH\"\n {\n   rtx insn, udiv_equal, umod_equal, equal;\n "}]}