{"sha": "551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUxZmUxYTI0MzVjOGUwYWU1NWM0Y2JjNzBiZjg5Y2RhYTZhNzcxNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-09-07T02:20:58Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-09-07T02:20:58Z"}, "message": "re PR libstdc++/29367 (pb_ds hash containers vs. _GLIBCXX_DEBUG)\n\n2007-09-06  Benjamin Kosnik  <bkoz@redhat.com>\n\t\n\tPR libstdc++/29367\n\t* include/ext/pb_ds/detail/map_debug_base.hpp: From this..\n\t* include/ext/pb_ds/detail/debug_map_base.hpp: ...to this.\n\tRename map_debug_base to debug_map_base, add std::pair output\n\textractors, change duplicate map_debug_base typedef in containers\n\tto debug_base. Use m_store_extra_indicator for m_store_hash_indicator.\n\t* include/ext/pb_ds/*: Likewise.\n\t* include/Makefile.am: Same.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r128221", "tree": {"sha": "3e5bbb1c9497941136bbcfe1294dbb179b3d9033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e5bbb1c9497941136bbcfe1294dbb179b3d9033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/comments", "author": null, "committer": null, "parents": [{"sha": "ccd04b9f89c5adafd11300a09a5554f9a4b28f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd04b9f89c5adafd11300a09a5554f9a4b28f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd04b9f89c5adafd11300a09a5554f9a4b28f2e"}], "stats": {"total": 380, "additions": 198, "deletions": 182}, "files": [{"sha": "367e3af9badd2a276c18c2040543bf6bf57caaa4", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -372,7 +372,7 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/list_update_policy/counter_lu_policy_imp.hpp \\\n \t${pb_srcdir}/detail/list_update_policy/mtf_lu_policy_imp.hpp \\\n \t${pb_srcdir}/detail/list_update_policy/sample_update_policy.hpp \\\n-\t${pb_srcdir}/detail/map_debug_base.hpp \\\n+\t${pb_srcdir}/detail/debug_map_base.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/cond_dtor.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/debug_fn_imps.hpp \\"}, {"sha": "5a0aa1c305cb7256d0b7d113f00634363f51f21d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -616,7 +616,7 @@ pb_headers4 = \\\n \t${pb_srcdir}/detail/list_update_policy/counter_lu_policy_imp.hpp \\\n \t${pb_srcdir}/detail/list_update_policy/mtf_lu_policy_imp.hpp \\\n \t${pb_srcdir}/detail/list_update_policy/sample_update_policy.hpp \\\n-\t${pb_srcdir}/detail/map_debug_base.hpp \\\n+\t${pb_srcdir}/detail/debug_map_base.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/cond_dtor.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp \\\n \t${pb_srcdir}/detail/ov_tree_map_/debug_fn_imps.hpp \\"}, {"sha": "2bf69ba0068c446b351d75b73507d61c39246e93", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -51,7 +51,7 @@\n #include <ext/pb_ds/exception.hpp>\n #include <ext/pb_ds/detail/eq_fn/eq_by_less.hpp>\n #include <ext/pb_ds/detail/types_traits.hpp>\n-#include <ext/pb_ds/detail/map_debug_base.hpp>\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n #include <ext/pb_ds/tree_policy.hpp>\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n@@ -95,8 +95,8 @@ namespace pb_ds\n \t\t\t\t\t\tfalse>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n-    map_debug_base<Key,\teq_by_less<Key, Cmp_Fn>, \\\n+#define PB_DS_DEBUG_MAP_BASE_C_DEC\t\t\t\t\t\\\n+    debug_map_base<Key,\teq_by_less<Key, Cmp_Fn>, \\\n \t      typename Allocator::template rebind<Key>::other::const_reference>\n #endif \n \n@@ -132,7 +132,7 @@ namespace pb_ds\n \t     class Allocator>\n     class PB_DS_CLASS_NAME :\n #ifdef _GLIBCXX_DEBUG\n-      public PB_DS_MAP_DEBUG_BASE_C_DEC,\n+      public PB_DS_DEBUG_MAP_BASE_C_DEC,\n #endif \n #ifdef PB_DS_TREE_TRACE\n       public PB_DS_TREE_TRACE_BASE_C_DEC,\n@@ -162,7 +162,7 @@ namespace pb_ds\n       typedef cond_dealtor< node, Allocator> cond_dealtor_t;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n #endif \n \n     public:\n@@ -489,7 +489,7 @@ namespace pb_ds\n \n #undef PB_DS_TYPES_TRAITS_C_DEC\n \n-#undef PB_DS_MAP_DEBUG_BASE_C_DEC\n+#undef PB_DS_DEBUG_MAP_BASE_C_DEC\n \n #ifdef PB_DS_TREE_TRACE\n #undef PB_DS_TREE_TRACE_BASE_C_DEC"}, {"sha": "295a57aee17fb724f96287fe816686dde6d3103f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -81,7 +81,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n-  map_debug_base(other),\n+  debug_base(other),\n #endif \n #ifdef PB_DS_TREE_TRACE\n   PB_DS_TREE_TRACE_BASE_C_DEC(other),\n@@ -105,7 +105,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n       }\n     catch(...)\n       {\n-        _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+        _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n \ts_node_allocator.deallocate(m_p_head, 1);\n         __throw_exception_again;\n       }\n@@ -130,7 +130,7 @@ void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other);)\n   std::swap(m_p_head, other.m_p_head);\n   std::swap(m_size, other.m_size);\n }"}, {"sha": "d0a0752dee0b6e386f7e10f9c9a86d9523757f1a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -251,7 +251,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_consistent_with_debug_base() const\n {\n-  map_debug_base::check_size(m_size);\n+  debug_base::check_size(m_size);\n   assert_consistent_with_debug_base(m_p_head->m_p_parent);\n }\n \n@@ -262,7 +262,7 @@ assert_consistent_with_debug_base(const node_pointer p_nd) const\n {\n   if (p_nd == NULL)\n     return;\n-  map_debug_base::check_key_exists(PB_DS_V2F(p_nd->m_value));\n+  debug_base::check_key_exists(PB_DS_V2F(p_nd->m_value));\n   assert_consistent_with_debug_base(p_nd->m_p_left);\n   assert_consistent_with_debug_base(p_nd->m_p_right);\n }"}, {"sha": "21c116f2fd0038a306712f854f504f9923009613", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -102,7 +102,7 @@ clear()\n \n   initialize();\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n \n     _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n     }"}, {"sha": "0f50f2262b7da2bcbbff5fce5238c5389233a34e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -82,13 +82,13 @@ insert_leaf(const_reference r_value)\n     {\n       _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n \n-        _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n+        _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(\n \t\t\t\t\t\t\tPB_DS_V2F(r_value)));\n \n       return (std::make_pair(p_pot, false));\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t  PB_DS_V2F(r_value)));\n \n   p_nd = p_pot->m_p_left;\n@@ -146,7 +146,7 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n \n   update_to_top(p_new_nd, (node_update* )this);\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(\n \t\t\t\t\t    PB_DS_V2F(r_value)));\n \n   return (iterator(p_new_nd));\n@@ -167,7 +167,7 @@ insert_imp_empty(const_reference r_value)\n \n   p_new_node->m_p_left = p_new_node->m_p_right = NULL;\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(\n \t\t\t\t\t    PB_DS_V2F(r_value)));\n \n   update_to_top(m_p_head->m_p_parent, (node_update* )this);"}, {"sha": "303813ccd2f09be425ea98a70fdf17669795bdc3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -102,7 +102,7 @@ clear()\n \n   initialize();\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n \n     _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n     }"}, {"sha": "672560467d6bf8c028beb21937a0e604b79389ca", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -71,7 +71,7 @@ join_prep(PB_DS_CLASS_C_DEC& other)\n     value_swap(other);\n \n   m_size += other.m_size;\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::join(other);)\n   return true;\n }\n \n@@ -123,7 +123,7 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n       return false;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(r_key,(Cmp_Fn& )(*this), other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::split(r_key,(Cmp_Fn& )(*this), other);)\n   return true;\n }\n "}, {"sha": "5636cdc1243834835102b31619bc0153f3e66025", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -53,7 +53,7 @@\n #include <ext/pb_ds/exception.hpp>\n #include <ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp>\n #ifdef _GLIBCXX_DEBUG\n-#include <ext/pb_ds/detail/map_debug_base.hpp>\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n #endif \n #ifdef PB_DS_HT_MAP_TRACE_\n #include <iostream>\n@@ -92,8 +92,8 @@ namespace pb_ds\n     types_traits<Key, Mapped, Allocator, Store_Hash>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n-    map_debug_base<Key,\tEq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n+#define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n+    debug_map_base<Key,\tEq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n #endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n@@ -117,7 +117,7 @@ namespace pb_ds\n \t     typename Resize_Policy >\n     class PB_DS_CLASS_NAME:\n #ifdef _GLIBCXX_DEBUG\n-      protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n+      protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n #endif \n       public PB_DS_HASH_EQ_FN_C_DEC,\n       public Resize_Policy,\n@@ -154,7 +154,7 @@ namespace pb_ds\n       typedef Resize_Policy resize_base;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n #endif \n \n #define PB_DS_GEN_POS std::pair<entry_pointer, typename Allocator::size_type>\n@@ -390,11 +390,11 @@ namespace pb_ds\n \tresize_base::notify_insert_search_end();\n \tif (p_e != NULL)\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n \t    return (p_e->m_value.second);\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n \treturn insert_new_imp(value_type(r_key, mapped_type()), pos)->second;\n       }\n \n@@ -415,11 +415,11 @@ namespace pb_ds\n \tresize_base::notify_insert_search_end();\n \tif (p_e != NULL)\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n \t    return p_e->m_value.second;\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n \treturn insert_new_imp(value_type(r_key, mapped_type()), \n \t\t\t      pos_hash_pair)->second;\n       }\n@@ -445,7 +445,7 @@ namespace pb_ds\n \tm_entries[pos] = p_e;\n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \treturn &p_e->m_value;\n       }\n@@ -464,7 +464,7 @@ namespace pb_ds\n \tp_e->m_p_next = m_entries[r_pos_hash_pair.first];\n \tm_entries[r_pos_hash_pair.first] = p_e;\n \tresize_base::notify_inserted(++m_num_used_e);\n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)\n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \treturn &p_e->m_value;\n       }\n@@ -485,9 +485,9 @@ namespace pb_ds\n \n #ifdef _GLIBCXX_DEBUG\n \tif (p_e == NULL)\n-\t  map_debug_base::check_key_does_not_exist(r_key);\n+\t  debug_base::check_key_does_not_exist(r_key);\n \telse\n-\t  map_debug_base::check_key_exists(r_key);\n+\t  debug_base::check_key_exists(r_key);\n #endif \n \treturn &p_e->m_value;\n       }\n@@ -511,9 +511,9 @@ namespace pb_ds\n \n #ifdef _GLIBCXX_DEBUG\n \tif (p_e == NULL)\n-\t  map_debug_base::check_key_does_not_exist(r_key);\n+\t  debug_base::check_key_does_not_exist(r_key);\n \telse\n-\t  map_debug_base::check_key_exists(r_key);\n+\t  debug_base::check_key_exists(r_key);\n #endif \n \treturn &p_e->m_value;\n       }\n@@ -632,7 +632,7 @@ namespace pb_ds\n #undef PB_DS_HASH_EQ_FN_C_DEC\n #undef PB_DS_RANGED_HASH_FN_C_DEC\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-#undef PB_DS_MAP_DEBUG_BASE_C_DEC\n+#undef PB_DS_DEBUG_MAP_BASE_C_DEC\n #undef PB_DS_CLASS_NAME\n #undef PB_DS_V2F\n #undef PB_DS_V2S"}, {"sha": "3a4c422839dfc1829970e2f38630dd83510436cd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -68,7 +68,7 @@ cmp_with_other(const Other_Map_Type& other) const\n \n       const_mapped_pointer p_mapped_value =\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n-\tfind_key_pointer(r_key, traits_base::m_store_hash_indicator);\n+\tfind_key_pointer(r_key, traits_base::m_store_extra_indicator);\n \n       if (p_mapped_value == NULL)\n \treturn false;"}, {"sha": "e767bbec51fb94b9ef543793c8cec85bb87e87f5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -130,7 +130,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n-  map_debug_base(other),\n+  debug_base(other),\n #endif \n   PB_DS_HASH_EQ_FN_C_DEC(other),\n   resize_base(other), ranged_hash_fn_base(other),\n@@ -171,7 +171,7 @@ swap(PB_DS_CLASS_C_DEC& other)\n   hash_eq_fn_base::swap(other);\n   resize_base::swap(other);\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other));\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n }"}, {"sha": "2d4859a6106d99e33cee0ef13465bc4862963300", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -57,5 +57,5 @@ constructor_insert_new_imp(const_mapped_reference r_val, size_type pos,\n   // At this point no exceptions can be thrown.\n   p->m_p_next = m_entries[pos];\n   m_entries[pos] = p;\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(r_key);)\n }"}, {"sha": "52759dec20d7a44816df7b4a2d069a1e93fe732f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -58,5 +58,5 @@ constructor_insert_new_imp(const_reference r_val, size_type pos, true_type)\n   p->m_hash = ranged_hash_fn_base::operator()((const_key_reference)(PB_DS_V2F(p->m_value))).second;\n \n   m_entries[pos] = p;\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(r_key);)\n }"}, {"sha": "fdf7dbcad35273b5709d8dd49cacfdc23bec1628", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -51,7 +51,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  map_debug_base::check_size(m_num_used_e);\n+  debug_base::check_size(m_num_used_e);\n   assert_entry_pointer_array_valid(m_entries);\n }\n \n@@ -67,7 +67,7 @@ assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries) const\n       while (p_e != NULL)\n         {\n \t  ++iterated_num_used_e;\n-\t  assert_entry_pointer_valid(p_e, traits_base::m_store_hash_indicator);\n+\t  assert_entry_pointer_valid(p_e, traits_base::m_store_extra_indicator);\n \t  p_e = p_e->m_p_next;\n         }\n     }"}, {"sha": "4e01b6ae152b5be927f5313d28e823ebdaf9fc0a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -50,6 +50,6 @@ PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_entry_pointer_valid(const entry_pointer p, false_type) const\n-{ map_debug_base::check_key_exists(PB_DS_V2F(p->m_value)); }\n+{ debug_base::check_key_exists(PB_DS_V2F(p->m_value)); }\n \n #endif "}, {"sha": "2e7e2ff3482ce94483fbf4dbf6df90e2a5638727", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -51,7 +51,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_entry_pointer_valid(const entry_pointer p_e, true_type) const\n {\n-  map_debug_base::check_key_exists(PB_DS_V2F(p_e->m_value));\n+  debug_base::check_key_exists(PB_DS_V2F(p_e->m_value));\n   comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(PB_DS_V2F(p_e->m_value));\n   _GLIBCXX_DEBUG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n }"}, {"sha": "95c3fed7a4580d986106bd8056d7ccf2ca16f6b0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -49,7 +49,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n erase_entry_pointer(entry_pointer& r_p_e)\n {\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(PB_DS_V2F(r_p_e->m_value)));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::erase_existing(PB_DS_V2F(r_p_e->m_value)));\n \n   entry_pointer p_e = r_p_e;\n   r_p_e = r_p_e->m_p_next;"}, {"sha": "28553b1a8dd23153f959e99d61a915da181fc014", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -65,15 +65,15 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n   if (p_e == NULL)\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       return false;\n     }\n \n   if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base:: check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base:: check_key_exists(r_key);)\n       erase_entry_pointer(m_entries[pos]);\n       do_resize_if_needed_no_throw();\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -86,15 +86,15 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n       if (p_next_e == NULL)\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n           _GLIBCXX_DEBUG_ONLY(assert_valid();)\n           return false;\n         }\n \n       if (hash_eq_fn_base::operator()(PB_DS_V2F(p_next_e->m_value), r_key))\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n           erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n \t  _GLIBCXX_DEBUG_ONLY(assert_valid();)"}, {"sha": "a6eff1fc4e6819f67ddd3017b75e234ec27f024c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -56,7 +56,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n   if (p_e == NULL)\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base:: check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base:: check_key_does_not_exist(r_key);)\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       return false;\n     }\n@@ -65,7 +65,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n \t\t\t\t  r_key, r_pos_hash_pair.second))\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n       erase_entry_pointer(m_entries[r_pos_hash_pair.first]);\n       do_resize_if_needed_no_throw();\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -78,7 +78,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n       if (p_next_e == NULL)\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n           _GLIBCXX_DEBUG_ONLY(assert_valid();)\n           return false;\n         }\n@@ -88,7 +88,7 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n \t\t\t\t      r_pos_hash_pair.second))\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n           erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n \t  _GLIBCXX_DEBUG_ONLY(assert_valid();)"}, {"sha": "ee85ed1dcdcf2b57f23053e358fc136dd024cfd2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finfo_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -85,7 +85,7 @@ cmp_with_other(const Other_Map_Type& other) const\n       const_key_reference r_key =(const_key_reference)PB_DS_V2F(*it);\n       const_mapped_pointer p_mapped_value =\n \tconst_cast<PB_DS_CLASS_C_DEC& >(*this).\n-\tfind_key_pointer(r_key, traits_base::m_store_hash_indicator);\n+\tfind_key_pointer(r_key, traits_base::m_store_extra_indicator);\n \n       if (p_mapped_value == NULL)\n \treturn false;"}, {"sha": "516a409e0a81eac4f9a107a582ee04422ab5400f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -66,11 +66,11 @@ insert_imp(const_reference r_val, false_type)\n   resize_base::notify_insert_search_end();\n   if (p_e != NULL)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n       return std::make_pair(&p_e->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n   return std::make_pair(insert_new_imp(r_val, pos), true);\n }\n "}, {"sha": "d7d0a61155b4f569ff11954df363d4da3a7c475d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -67,11 +67,11 @@ insert_imp(const_reference r_val, true_type)\n   resize_base::notify_insert_search_end();\n   if (p_e != NULL)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\n       return std::make_pair(&p_e->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n   return std::make_pair(insert_new_imp(r_val, pos_hash_pair), true);\n }\n "}, {"sha": "373b0f6c78e76eb29aec4f79bd5afbc352ca572b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "renamed", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -40,12 +40,12 @@\n // warranty.\n  \n /**\n- * @file map_debug_base.hpp\n+ * @file debug_map_base.hpp\n  * Contains a debug-mode base for all maps.\n  */\n \n-#ifndef PB_DS_MAP_DEBUG_BASE_HPP\n-#define PB_DS_MAP_DEBUG_BASE_HPP\n+#ifndef PB_DS_DEBUG_MAP_BASE_HPP\n+#define PB_DS_DEBUG_MAP_BASE_HPP\n \n #ifdef _GLIBCXX_DEBUG\n \n@@ -59,15 +59,21 @@ namespace pb_ds\n {\n   namespace detail\n   {\n+    // Need std::pair ostream extractor.\n+    template<typename _CharT, typename _Traits, typename _Tp1, typename _Tp2>\n+    inline std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __out, \n+\t       const std::pair<_Tp1, _Tp2>& p)\n+    { return (__out << '(' << p.first << ',' << p.second << ')'); }\n \n #define PB_DS_CLASS_T_DEC \\\n     template<typename Key, class Eq_Fn, typename Const_Key_Reference>\n \n #define PB_DS_CLASS_C_DEC \\\n-    map_debug_base<Key, Eq_Fn, Const_Key_Reference>\n+    debug_map_base<Key, Eq_Fn, Const_Key_Reference>\n \n     template<typename Key, class Eq_Fn, typename Const_Key_Reference>\n-    class map_debug_base\n+    class debug_map_base\n     {\n     private:\n       typedef typename std::allocator< Key> key_allocator;\n@@ -77,11 +83,11 @@ namespace pb_ds\n       typedef Const_Key_Reference const_key_reference;\n \n     protected:\n-      map_debug_base();\n+      debug_map_base();\n \n-      map_debug_base(const PB_DS_CLASS_C_DEC& other);\n+      debug_map_base(const PB_DS_CLASS_C_DEC& other);\n \n-      ~map_debug_base();\n+      ~debug_map_base();\n \n       inline void\n       insert_new(const_key_reference r_key);\n@@ -133,17 +139,17 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    map_debug_base()\n+    debug_map_base()\n     { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    map_debug_base(const PB_DS_CLASS_C_DEC& other) : m_key_set(other.m_key_set)\n+    debug_map_base(const PB_DS_CLASS_C_DEC& other) : m_key_set(other.m_key_set)\n     { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ~map_debug_base()\n+    ~debug_map_base()\n     { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n@@ -157,7 +163,7 @@ namespace pb_ds\n       alloc.set_throw_prob(0);\n       if (find(r_key) != m_key_set.end())\n \t{\n-\t  std::cerr << \"insert_new \" << r_key << std::endl;\n+\t  std::cerr << \"insert_new\" << r_key << std::endl;\n \t  std::abort();\n \t}\n \n@@ -167,7 +173,7 @@ namespace pb_ds\n \t}\n       catch(...)\n \t{\n-\t  std::cerr << \"insert_new 1\" << r_key << std::endl;\n+\t  std::cerr << \"insert_new\" << r_key << std::endl;\n \t  std::abort();\n \t}\n       alloc.set_throw_prob(orig_throw_prob);\n@@ -183,7 +189,7 @@ namespace pb_ds\n       key_set_iterator it = find(r_key);\n       if (it == m_key_set.end())\n \t{\n-\t  std::cerr << \"erase_existing \" << r_key << std::endl;\n+\t  std::cerr << \"erase_existing\" << r_key << std::endl;\n \t  std::abort();\n \t}\n       m_key_set.erase(it);\n@@ -208,7 +214,7 @@ namespace pb_ds\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       if (find(r_key) == m_key_set.end())\n         {\n-          std::cerr << \"check_key_exists \" << r_key << std::endl;\n+          std::cerr << \"check_key_exists\" << r_key << std::endl;\n           std::abort();\n         }\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n@@ -222,7 +228,9 @@ namespace pb_ds\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       if (find(r_key) != m_key_set.end())\n         {\n-\t  std::cerr << \"check_key_does_not_exist \" << r_key << std::endl;\n+\t  using std::cerr;\n+\t  using std::endl;\n+\t  cerr << \"check_key_does_not_exist\" << r_key << endl;\n           std::abort();\n         }\n     }", "previous_filename": "libstdc++-v3/include/ext/pb_ds/detail/map_debug_base.hpp"}, {"sha": "6f4844cf00d595961ec432414d979040f5531807", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -140,7 +140,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n-  map_debug_base(other),\n+  debug_base(other),\n #endif \n   hash_eq_fn_base(other),\n   resize_base(other),\n@@ -187,7 +187,7 @@ swap(PB_DS_CLASS_C_DEC& other)\n   ranged_probe_fn_base::swap(other);\n   hash_eq_fn_base::swap(other);\n   resize_base::swap(other);\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other));\n   _GLIBCXX_DEBUG_ONLY(assert_valid());\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n }"}, {"sha": "30df973b1eb7a802de3834b75605a29a42f28c04", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -55,5 +55,5 @@ constructor_insert_new_imp(const_mapped_reference r_val, size_type pos,\n   entry* const p_e = m_entries + pos;\n   new (&p_e->m_value) mapped_value_type(r_val);\n   p_e->m_stat = valid_entry_status;\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(p_e->m_value.first);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(p_e->m_value.first);)\n }"}, {"sha": "df8797ae7e732bd05d53caea66c8a5247ce3d326", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -56,5 +56,5 @@ constructor_insert_new_imp(const_mapped_reference r_val, size_type pos,\n   new (&p_e->m_value) mapped_value_type(r_val);\n   p_e->m_hash = ranged_probe_fn_base::operator()(PB_DS_V2F(r_val)).second;\n   p_e->m_stat = valid_entry_status;\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(p_e->m_value.first);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(p_e->m_value.first);)\n }"}, {"sha": "15bae0d9d6cefba412002856fde269ab7a8e00ee", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -51,7 +51,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  map_debug_base::check_size(m_num_used_e);\n+  debug_base::check_size(m_num_used_e);\n   assert_entry_array_valid(m_entries, traits_base::m_store_extra_indicator);\n }\n "}, {"sha": "1a8e525e7242d3065990ed2432c1da99707a1754", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -63,7 +63,7 @@ assert_entry_array_valid(const entry_array a_entries, false_type) const\n         case valid_entry_status:\n \t  {\n \t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n-\t    map_debug_base::check_key_exists(r_key);\n+\t    debug_base::check_key_exists(r_key);\n \t    ++iterated_num_used_e;\n \t    break;\n \t  }"}, {"sha": "7acfe4c0f81b693f491fa9d9f670cc8b1919d238", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -64,7 +64,7 @@ assert_entry_array_valid(const entry_array a_entries, true_type) const\n         case valid_entry_status:\n \t  {\n \t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n-\t    map_debug_base::check_key_exists(r_key);\n+\t    debug_base::check_key_exists(r_key);\n \n \t    const comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n "}, {"sha": "3d194cf365f202c94683836b7e9bff967e3e6047", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -50,7 +50,7 @@ PB_DS_CLASS_C_DEC::\n erase_entry(entry_pointer p_e)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_e->m_stat = valid_entry_status);\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(PB_DS_V2F(p_e->m_value));)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::erase_existing(PB_DS_V2F(p_e->m_value));)\n   p_e->m_value.~value_type();\n   p_e->m_stat = erased_entry_status;\n   _GLIBCXX_DEBUG_ASSERT(m_num_used_e > 0);"}, {"sha": "a8959278b6317b5f1708841c9f4675b7d9622bed", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -64,7 +64,7 @@ erase_imp(const_key_reference r_key,  false_type)\n         case empty_entry_status:\n \t  {\n \t    resize_base::notify_erase_search_end();\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t\t    r_key));\n \t    return false;\n \t  }"}, {"sha": "cf479082a7a2c973a60ca0aca7aef420079816d9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -63,7 +63,7 @@ erase_imp(const_key_reference r_key, true_type)\n         case empty_entry_status:\n \t  {\n \t    resize_base::notify_erase_search_end();\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t\t    r_key));\n \t    return false;\n \t  }"}, {"sha": "88f250162ad8e38e02b50418aec57bec0f301dd8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -54,7 +54,7 @@\n #include <iostream>\n #endif \n #ifdef _GLIBCXX_DEBUG\n-#include <ext/pb_ds/detail/map_debug_base.hpp>\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n #endif\n #include <debug/debug.h>\n \n@@ -89,8 +89,8 @@ namespace pb_ds\n     types_traits<Key, Mapped, Allocator, Store_Hash>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n-    map_debug_base<Key, Eq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n+#define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n+    debug_map_base<Key, Eq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n #endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n@@ -114,7 +114,7 @@ namespace pb_ds\n \t     typename Resize_Policy>\n     class PB_DS_CLASS_NAME :\n #ifdef _GLIBCXX_DEBUG\n-      protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n+      protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n #endif \n       public PB_DS_HASH_EQ_FN_C_DEC,\n       public Resize_Policy,\n@@ -152,7 +152,7 @@ namespace pb_ds\n       typedef PB_DS_RANGED_PROBE_FN_C_DEC ranged_probe_fn_base;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n #endif \n \n       typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n@@ -410,7 +410,7 @@ namespace pb_ds\n \tp_e->m_stat = valid_entry_status;\n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n \n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \treturn &p_e->m_value;\n@@ -436,7 +436,7 @@ namespace pb_ds\n \n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n \n \t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \treturn &p_e->m_value;\n@@ -455,7 +455,7 @@ namespace pb_ds\n \tif (p_e->m_stat != valid_entry_status)\n \t  return insert_new_imp(value_type(key, mapped_type()), pos)->second;\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\t  \n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\t  \n \treturn p_e->m_value.second;\n       }\n \n@@ -471,7 +471,7 @@ namespace pb_ds\n \t  return insert_new_imp(value_type(key, mapped_type()),\n \t\t\t\t pos_hash_pair)->second;\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key));\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key));\n \treturn (m_entries + pos_hash_pair.first)->m_value.second;\n       }\n #endif\n@@ -494,7 +494,7 @@ namespace pb_ds\n \t      case empty_entry_status:\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n-\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+\t\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \n \t\t    return NULL;\n \t\t}\n@@ -503,7 +503,7 @@ namespace pb_ds\n \t\tif (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), key))\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n-\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\n+\t\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\n \n \t\t    return pointer(&p_e->m_value);\n \t\t  }\n@@ -517,7 +517,7 @@ namespace pb_ds\n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \tresize_base::notify_find_search_end();\n \treturn NULL;\n       }\n@@ -542,7 +542,7 @@ namespace pb_ds\n \t      case empty_entry_status:\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n-\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+\t\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \n \t\t  return NULL;\n \t\t}\n@@ -553,7 +553,7 @@ namespace pb_ds\n \t\t\t\t\t\tkey, pos_hash_pair.second))\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n-\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(key);)\n+\t\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\n \t\t    return pointer(&p_e->m_value);\n \t\t  }\n \t\tbreak;\n@@ -566,7 +566,7 @@ namespace pb_ds\n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(key);)\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n \tresize_base::notify_find_search_end();\n \treturn NULL;\n       }\n@@ -673,7 +673,7 @@ namespace pb_ds\n #undef PB_DS_HASH_EQ_FN_C_DEC\n #undef PB_DS_RANGED_PROBE_FN_C_DEC\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-#undef PB_DS_MAP_DEBUG_BASE_C_DEC\n+#undef PB_DS_DEBUG_MAP_BASE_C_DEC\n #undef PB_DS_CLASS_NAME\n #undef PB_DS_V2F\n #undef PB_DS_V2S"}, {"sha": "b5b00bd08ba161147c03c06d081ca9d89bdef090", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -68,7 +68,7 @@ find_ins_pos(const_key_reference r_key, false_type)\n         case empty_entry_status:\n \t  {\n             resize_base::notify_insert_search_end();\n-            _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+            _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n \t    return (ins_pos == m_num_e) ? pos : ins_pos;\n \t  }\n \t  break;\n@@ -80,7 +80,7 @@ find_ins_pos(const_key_reference r_key, false_type)\n \t  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n             {\n \t      resize_base::notify_insert_search_end();\n-\t      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n                 return pos;\n             }\n \t  break;\n@@ -107,11 +107,11 @@ insert_imp(const_reference r_val, false_type)\n \n   if (m_entries[pos].m_stat == valid_entry_status)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n       return std::make_pair(&(m_entries + pos)->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n   return std::make_pair(insert_new_imp(r_val, pos), true);\n }\n "}, {"sha": "407fcd2591fd6f947841e8a5295e21dce2e6ba38", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -70,7 +70,7 @@ find_ins_pos(const_key_reference r_key, true_type)\n         case empty_entry_status:\n \t  {\n             resize_base::notify_insert_search_end();\n-            _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+            _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n \n \t    return ((ins_pos == m_num_e) ?\n \t\t     std::make_pair(pos, pos_hash_pair.second) :\n@@ -86,7 +86,7 @@ find_ins_pos(const_key_reference r_key, true_type)\n \t\t\t\t\t  r_key, pos_hash_pair.second))\n             {\n \t      resize_base::notify_insert_search_end();\n-\t      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n               return std::make_pair(pos, pos_hash_pair.second);\n             }\n \t  break;\n@@ -114,11 +114,11 @@ insert_imp(const_reference r_val, true_type)\n   entry_pointer p_e =& m_entries[pos_hash_pair.first];\n   if (p_e->m_stat == valid_entry_status)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n       return std::make_pair(&p_e->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n   return std::make_pair(insert_new_imp(r_val, pos_hash_pair), true);\n }\n "}, {"sha": "a3d96ec2f28d5d6076822b30ac19de1829cefea9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -89,7 +89,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) : \n #ifdef _GLIBCXX_DEBUG\n-  map_debug_base(),\n+  debug_base(),\n #endif\n m_p_l(NULL)\n {\n@@ -119,7 +119,7 @@ swap(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other);)\n   std::swap(m_p_l, other.m_p_l);\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)"}, {"sha": "0ccfc97d1365bc63b25177a51dd56d19629b3f89", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -54,10 +54,10 @@ assert_valid() const\n   size_type calc_size = 0;\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n-      map_debug_base::check_key_exists(PB_DS_V2F(*it));\n+      debug_base::check_key_exists(PB_DS_V2F(*it));\n       ++calc_size;\n     }\n-  map_debug_base::check_size(calc_size);\n+  debug_base::check_size(calc_size);\n }\n \n #endif "}, {"sha": "d4ee2a18163b625682bfae5b743059f2bb2b3201", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -134,7 +134,7 @@ void\n PB_DS_CLASS_C_DEC::\n actual_erase_entry(entry_pointer p_l)\n {\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(PB_DS_V2F(p_l->m_value));)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::erase_existing(PB_DS_V2F(p_l->m_value));)\n   p_l->~entry();\n   s_entry_allocator.deallocate(p_l, 1);\n }"}, {"sha": "8c792b02290b9ee376e8f578ea6183988fc8ab13", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -54,7 +54,7 @@ find_imp(const_key_reference r_key) const\n   if (s_eq_fn(r_key, PB_DS_V2F(m_p_l->m_value)))\n     {\n       apply_update(m_p_l, s_metadata_type_indicator);\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n       return m_p_l;\n     }\n \n@@ -77,7 +77,7 @@ find_imp(const_key_reference r_key) const\n \tp_l = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n   return NULL;\n }\n "}, {"sha": "c494c2614d43d4e7c07fa2c3276d823f66b407a4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -56,11 +56,11 @@ insert(const_reference r_val)\n \n   if (p_l != NULL)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(PB_DS_V2F(r_val));)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(r_val));)\n       return std::make_pair(point_iterator(&p_l->m_value), false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(PB_DS_V2F(r_val));)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(PB_DS_V2F(r_val));)\n \n   p_l = allocate_new_entry(r_val, traits_base::m_no_throw_copies_indicator);\n   p_l->m_p_next = m_p_l;\n@@ -80,7 +80,7 @@ allocate_new_entry(const_reference r_val, false_type)\n     value_type(r_val);\n \n   cond.set_no_action();\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)\n   init_entry_metadata(p_l, s_metadata_type_indicator);\n   return p_l;\n }\n@@ -92,7 +92,7 @@ allocate_new_entry(const_reference    r_val, true_type)\n {\n   entry_pointer p_l = s_entry_allocator.allocate(1);\n   new (&p_l->m_value) value_type(r_val);\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)\n   init_entry_metadata(p_l, s_metadata_type_indicator);\n   return p_l;\n }"}, {"sha": "f39baa0f39dc5bb4bc4b9216c525ff34900a33dd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -52,7 +52,7 @@\n #include <ext/pb_ds/detail/list_update_map_/entry_metadata_base.hpp>\n #include <ext/pb_ds/exception.hpp>\n #ifdef _GLIBCXX_DEBUG\n-#include <ext/pb_ds/detail/map_debug_base.hpp>\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n #endif \n #ifdef PB_DS_LU_MAP_TRACE_\n #include <iostream>\n@@ -82,8 +82,8 @@ namespace pb_ds\n     types_traits<Key, Mapped, Allocator, false>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n-    map_debug_base<Key, Eq_Fn, \\\n+#define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n+    debug_map_base<Key, Eq_Fn, \\\n \t      typename Allocator::template rebind<Key>::other::const_reference>\n #endif \n \n@@ -108,7 +108,7 @@ namespace pb_ds\n \t     class Update_Policy>\n     class PB_DS_CLASS_NAME :\n #ifdef _GLIBCXX_DEBUG\n-      protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n+      protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n #endif \n       public PB_DS_TYPES_TRAITS_C_DEC\n     {\n@@ -148,7 +148,7 @@ namespace pb_ds\n \n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n #endif \n \n       typedef cond_dealtor<entry, Allocator> cond_dealtor_t;\n@@ -355,7 +355,7 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n #undef  PB_DS_TYPES_TRAITS_C_DEC\n-#undef PB_DS_MAP_DEBUG_BASE_C_DEC\n+#undef PB_DS_DEBUG_MAP_BASE_C_DEC\n #undef PB_DS_CLASS_NAME\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP"}, {"sha": "0f50317b879f9fecb18b730750c9b03b35e7272a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -86,7 +86,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n-  map_debug_base(other),\n+  debug_base(other),\n #endif \n #ifdef PB_DS_TREE_TRACE\n   PB_DS_TREE_TRACE_BASE_C_DEC(other),\n@@ -166,7 +166,7 @@ copy_from_ordered_range(It first_it, It last_it)\n   const_iterator dbg_it = m_a_values;\n   while (dbg_it != m_end_it)\n     {\n-      map_debug_base::insert_new(PB_DS_V2F(*dbg_it));\n+      debug_base::insert_new(PB_DS_V2F(*dbg_it));\n       dbg_it++;\n     }\n   PB_DS_CLASS_C_DEC::assert_valid();\n@@ -219,7 +219,7 @@ copy_from_ordered_range(It first_it, It last_it, It other_first_it,\n   const_iterator dbg_it = m_a_values;\n   while (dbg_it != m_end_it)\n     {\n-      map_debug_base::insert_new(PB_DS_V2F(*dbg_it));\n+      debug_base::insert_new(PB_DS_V2F(*dbg_it));\n       dbg_it++;\n     }\n   PB_DS_CLASS_C_DEC::assert_valid();\n@@ -246,7 +246,7 @@ value_swap(PB_DS_CLASS_C_DEC& other)\n   std::swap(m_a_metadata, other.m_a_metadata);\n   std::swap(m_size, other.m_size);\n   std::swap(m_end_it, other.m_end_it);\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other);)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "abbbc0f59bdca7d8055d1d8b43d000cf0360e9db", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -66,14 +66,14 @@ void\n PB_DS_CLASS_C_DEC::\n assert_iterators() const\n {\n-  map_debug_base::check_size(m_size);\n+  debug_base::check_size(m_size);\n   size_type iterated_num = 0;\n   const_iterator prev_it = end();\n   _GLIBCXX_DEBUG_ASSERT( m_end_it == m_a_values + m_size);\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++iterated_num;\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(PB_DS_V2F(*it));)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(*it));)\n       _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)) == it);\n       const_iterator upper_bound_it = upper_bound(PB_DS_V2F(*it));\n       --upper_bound_it;"}, {"sha": "18f9e1ce8456280c60a51e796306bc7ec6d5c03f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -61,7 +61,7 @@ clear()\n       cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n   m_a_values = NULL;\n   m_size = 0;\n   m_end_it = m_a_values;\n@@ -98,15 +98,15 @@ erase_if(Pred pred)\n   value_vector a_new_values = s_value_alloc.allocate(new_size);\n   iterator target_it = a_new_values;\n   cond_dtor<size_type> cd(a_new_values, target_it, new_size);\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear());\n+  _GLIBCXX_DEBUG_ONLY(debug_base::clear());\n   for (source_it = begin(); source_it != m_end_it; ++source_it)\n     {\n       if (!pred(*source_it))\n         {\n \t  new (const_cast<void*>(static_cast<const void* >(target_it)))\n \t    value_type(*source_it);\n \n-\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(*source_it)));\n+\t  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(*source_it)));\n \t  ++target_it;\n         }\n     }"}, {"sha": "78fdcf96c24b0803c47df1e2a14d08e1693a9a71", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -49,7 +49,7 @@\n #include <ext/pb_ds/tree_policy.hpp>\n #include <ext/pb_ds/detail/eq_fn/eq_by_less.hpp>\n #include <ext/pb_ds/detail/types_traits.hpp>\n-#include <ext/pb_ds/detail/map_debug_base.hpp>\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/exception.hpp>\n #include <ext/pb_ds/detail/tree_trace_base.hpp>\n@@ -89,8 +89,8 @@ namespace pb_ds\n     types_traits<Key, Mapped, Allocator, false>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n-    map_debug_base<Key, eq_by_less<Key, Cmp_Fn>, \\\n+#define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n+    debug_map_base<Key, eq_by_less<Key, Cmp_Fn>, \\\n        \ttypename Allocator::template rebind<Key>::other::const_reference>\n #endif \n \n@@ -118,7 +118,7 @@ namespace pb_ds\n \t     class Node_And_It_Traits, class Allocator>\n     class PB_DS_OV_TREE_CLASS_NAME :\n #ifdef _GLIBCXX_DEBUG\n-      protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n+      protected PB_DS_DEBUG_MAP_BASE_C_DEC,\n #endif \n #ifdef PB_DS_TREE_TRACE\n       public PB_DS_TREE_TRACE_BASE_C_DEC,\n@@ -139,7 +139,7 @@ namespace pb_ds\n       typedef Cmp_Fn cmp_fn_base;\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n #endif \n \n       typedef typename traits_base::pointer mapped_pointer_;\n@@ -244,7 +244,7 @@ namespace pb_ds\n \tpoint_iterator it = lower_bound(r_key);\n \tif (it != end() && !Cmp_Fn::operator()(r_key, PB_DS_V2F(*it)))\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n \t    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \t     return it->second;\n \t  }\n@@ -267,7 +267,7 @@ namespace pb_ds\n \tif (it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*it)))\n \t  {\n \t    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n \t    return std::make_pair(it, false);\n \t  }\n \n@@ -301,11 +301,11 @@ namespace pb_ds\n \titerator pot_it = lower_bound(r_key);\n \tif (pot_it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n \t    return ++pot_it;\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n \treturn pot_it;\n       }\n \n@@ -320,11 +320,11 @@ namespace pb_ds\n \titerator pot_it = lower_bound(r_key);\n \tif (pot_it != end() && !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n \t    return pot_it;\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n \treturn end();\n       }\n \n@@ -423,7 +423,7 @@ namespace pb_ds\n \t  typename Allocator::group_throw_prob_adjustor adjust(m_size);\n #endif \n \n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(PB_DS_V2F(r_value)));\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(PB_DS_V2F(r_value)));\n \n \tvalue_vector a_values = s_value_alloc.allocate(m_size + 1);\n \n@@ -461,7 +461,7 @@ namespace pb_ds\n \t++m_size;\n \tm_a_values = a_values;\n \tm_end_it = m_a_values + m_size;\n-\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_value)));\n+\t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_value)));\n \tupdate(node_begin(), (node_update* )this);\n \t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \treturn ret_it;\n@@ -514,7 +514,7 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_OV_TREE_CLASS_NAME\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-#undef PB_DS_MAP_DEBUG_BASE_C_DEC\n+#undef PB_DS_DEBUG_MAP_BASE_C_DEC\n #ifdef PB_DS_TREE_TRACE\n #undef PB_DS_TREE_TRACE_BASE_C_DEC\n #endif "}, {"sha": "9528c412510ef13b019b1416a253f66210d7ed67", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -83,15 +83,15 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::join(other);)\n   iterator it = upper_bound(r_key);\n   PB_DS_CLASS_C_DEC new_other(other, other);\n   new_other.copy_from_ordered_range(it, end());\n   PB_DS_CLASS_C_DEC new_this(*this, * this);\n   new_this.copy_from_ordered_range(begin(), it);\n \n   // No exceptions from this point.\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(r_key,(Cmp_Fn& )(*this), other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::split(r_key,(Cmp_Fn& )(*this), other);)\n   other.update(other.node_begin(), (node_update* )(&other));\n   update(node_begin(), (node_update* )this);\n   other.value_swap(new_other);\n@@ -135,7 +135,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \t\t\t\t     begin(), end());\n \n   // No exceptions from this point.\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::join(other);)\n   value_swap(new_this);\n   other.clear();\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)"}, {"sha": "efa2e6104e515ae3747f745a95e5d19db5af6591", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -81,7 +81,7 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n #ifdef _GLIBCXX_DEBUG\n-  map_debug_base(other),\n+  debug_base(other),\n #endif \n   synth_e_access_traits(other),\n   node_update(other),\n@@ -130,7 +130,7 @@ void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::swap(other);)\n   std::swap(m_p_head, other.m_p_head);\n   std::swap(m_size, other.m_size);\n }"}, {"sha": "d0cef7a3a6e986d17339b74f95a16fcafcf81aef", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -77,7 +77,7 @@ assert_iterators() const\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++calc_size;\n-      map_debug_base::check_key_exists(PB_DS_V2F(*it));\n+      debug_base::check_key_exists(PB_DS_V2F(*it));\n       _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)) == it);\n       _GLIBCXX_DEBUG_ASSERT(--upper_bound(PB_DS_V2F(*it)) == it);\n     }"}, {"sha": "42bb032701d11afa37a08e50a5676dc1710377cf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -52,18 +52,18 @@ erase(const_key_reference r_key)\n   node_pointer p_nd = find_imp(r_key);\n   if (p_nd == NULL || p_nd->m_type == pat_trie_internal_node_type)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n       return false;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n   if (!synth_e_access_traits::equal_keys(PB_DS_V2F(reinterpret_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n       return false;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n   erase_leaf(static_cast<leaf_pointer>(p_nd));\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   return true;\n@@ -141,7 +141,7 @@ clear()\n   clear_imp(m_p_head->m_p_parent);\n   m_size = 0;\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n "}, {"sha": "7a925e6a02b4484cfc3d551b26cd66aed31678c1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -54,17 +54,17 @@ find(const_key_reference r_key)\n \n   if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n       return end();\n     }\n \n   if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n       return iterator(p_nd);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n   return end();\n }\n \n@@ -79,17 +79,17 @@ find(const_key_reference r_key) const\n \n   if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n       return end();\n     }\n \n   if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n       return const_iterator(const_cast<node_pointer>(p_nd));\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n   return end();\n }\n "}, {"sha": "ff4dd601038f7978146d29aef2ca3be3681a4b23", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -98,7 +98,7 @@ join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n     __throw_join_error();\n \n   rec_join_prep(m_p_head->m_p_parent, other.m_p_head->m_p_parent, r_bag);\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::join(other);)\n   return true;\n }\n \n@@ -387,12 +387,12 @@ insert(const_reference r_val)\n   if (p_lf != NULL && p_lf->m_type == pat_trie_leaf_node_type && \n       synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_lf)->value()), PB_DS_V2F(r_val)))\n     {\n-      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(PB_DS_V2F(r_val)));\n+      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(r_val)));\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       return std::make_pair(iterator(p_lf), false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(PB_DS_V2F(r_val)));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(PB_DS_V2F(r_val)));\n \n   leaf_pointer p_new_lf = s_leaf_allocator.allocate(1);\n   cond_dealtor cond(p_new_lf);\n@@ -407,7 +407,7 @@ insert(const_reference r_val)\n   cond.set_no_action_dtor();\n   ++m_size;\n   update_min_max_for_inserted_leaf(p_new_lf);\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)   \n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)   \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   return std::make_pair(point_iterator(p_new_lf), true);\n }"}, {"sha": "386f91557dbe7a063fe668194f9d4279149ca461", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -67,7 +67,7 @@\n #include <assert.h>\n #include <list>\n #ifdef _GLIBCXX_DEBUG\n-#include <ext/pb_ds/detail/map_debug_base.hpp>\n+#include <ext/pb_ds/detail/debug_map_base.hpp>\n #endif \n #include <debug/debug.h>\n \n@@ -94,8 +94,8 @@ namespace pb_ds\n     types_traits<Key, Mapped, Allocator, false>\n \n #ifdef _GLIBCXX_DEBUG\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n-    map_debug_base<Key,\teq_by_less<Key, \\\n+#define PB_DS_DEBUG_MAP_BASE_C_DEC \\\n+    debug_map_base<Key,\teq_by_less<Key, \\\n \t\t\tstd::less<Key> >, typename Allocator::template rebind<Key>::other::const_reference>\n #endif \n \n@@ -120,7 +120,7 @@ namespace pb_ds\n \t     typename Allocator>\n     class PB_DS_CLASS_NAME :\n #ifdef _GLIBCXX_DEBUG\n-      public PB_DS_MAP_DEBUG_BASE_C_DEC,\n+      public PB_DS_DEBUG_MAP_BASE_C_DEC,\n #endif \n       public Node_And_It_Traits::synth_e_access_traits,\n       public Node_And_It_Traits::node_update,\n@@ -155,7 +155,7 @@ namespace pb_ds\n #include <ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp>\n \n #ifdef _GLIBCXX_DEBUG\n-      typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n+      typedef PB_DS_DEBUG_MAP_BASE_C_DEC debug_base;\n #endif \n \n #include <ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp>\n@@ -512,7 +512,7 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_NAME\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-#undef PB_DS_MAP_DEBUG_BASE_C_DEC\n+#undef PB_DS_DEBUG_MAP_BASE_C_DEC\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S"}, {"sha": "a119a5e8f162551aa6c19ef412330f5008e92dfc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -90,7 +90,7 @@ clear()\n   clear_imp(m_p_head->m_p_parent);\n   m_size = 0;\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n   _GLIBCXX_DEBUG_ONLY(assert_valid(true, true);)\n }\n "}, {"sha": "efe9649825703853733145e9f48f5afd7d398013", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -128,7 +128,7 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, split_join_branc\n       r_bag.add_branch();\n       p_nd = p_nd->m_p_parent;\n     }\n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(r_key,(synth_e_access_traits& )(*this), other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::split(r_key,(synth_e_access_traits& )(*this), other);)\n \n   return (p_ret_l);\n }"}, {"sha": "8be9245110ae01c8328d7bca6bee5cd6d046652d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_imp.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -175,7 +175,7 @@ notify_externally_resized(size_type new_size)\n {\n   m_resize_needed = false;\n   size_type new_grow_size = size_type(m_load_max * new_size - 1);\n-  size_type new_shrink_size = size_type(m_load_min * new_size );\n+  size_type new_shrink_size = size_type(m_load_min * new_size);\n   if (new_grow_size >= m_next_grow_size)\n     {\n       _GLIBCXX_DEBUG_ASSERT(new_shrink_size > m_next_shrink_size);"}, {"sha": "089ca062f278e24d4d2ed35710b9beffd2d7d54c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -74,10 +74,13 @@ namespace pb_ds\n       typedef typename Alloc::size_type size_type;\n \n       // Extra value (used when the extra value is stored with each value).\n-      typedef std::pair<size_type, size_type> comp_hash;\n+      typedef std::pair<size_type, size_type> \tcomp_hash;\n \n-      integral_constant<int, Store_Extra> m_store_extra_indicator;\n-      typename no_throw_copies<Key, Mapped>::indicator m_no_throw_copies_indicator;\n+      typedef integral_constant<int, Store_Extra> store_extra;\n+      store_extra\tm_store_extra_indicator;\n+\n+      typedef typename no_throw_copies<Key, Mapped>::indicator no_throw_copies;\n+      no_throw_copies \tm_no_throw_copies_indicator;\n     };\n   } // namespace detail\n } // namespace pb_ds"}, {"sha": "74181b1fb9ee0fad6f4881ba814696d24c186e93", "filename": "libstdc++-v3/include/ext/pb_ds/tag_and_trait.hpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Ftag_and_trait.hpp?ref=551fe1a2435c8e0ae55c4cbc70bf89cdaa6a7717", "patch": "@@ -50,6 +50,11 @@\n \n #include <ext/pb_ds/detail/type_utils.hpp>\n \n+/**\n+ * @namespace pb_ds\n+ * @brief GNU extension policy-based data structures for public use.\n+ */\n+\n namespace pb_ds\n {\n   // A trivial iterator tag. Signifies that the iterators has none of"}]}