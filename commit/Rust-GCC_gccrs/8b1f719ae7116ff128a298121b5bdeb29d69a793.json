{"sha": "8b1f719ae7116ff128a298121b5bdeb29d69a793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIxZjcxOWFlNzExNmZmMTI4YTI5ODEyMWI1YmRlYjI5ZDY5YTc5Mw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-01-11T10:49:30Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-01-11T10:49:30Z"}, "message": "configure.ac (strict1_warn): Rename to strict_warn.\n\n2007-01-11  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac (strict1_warn): Rename to strict_warn.\n\t(WERROR, --enable-werror, symlink hacks, stage1_cflags,\n\tcc_set_by_configure, quoted_cc_set_by_configure,\n\tstage_prefix_set_by_configure, quoted_stage_prefix_set_by_configure,\n\tall_boot_languages, all_stagestuff): Remove.\n\t(target_list): Remove bootstrap targets.\n\t* Makefile.in (quickstrap): Unconditionally make a synonym of all.\n\t(BOOT_LANGUAGES, STAGE1_CFLAGS, STAGE1_CHECKING,\n\tREMAKEFLAGS, FLAGS_TO_PASS, PREPEND_DOTDOT_TO_RELATIVE_PATHS,\n\tSUBDIR_FLAGS_TO_PASS, WERROR_FLAGS, STRICT2_WARN, LANG_STAGESTUFF,\n\tVOL_FILES, POSTSTAGE1_FLAGS_TO_PASS, STAGE2_FLAGS_TO_PASS,\n\tSTAGEPROFILE_FLAGS_TO_PASS, STAGEFEEDBACK_FLAGS_TO_PASS, stage1_build,\n\tstage1_copy, stage2_build, stage2_copy, stageprofile_build,\n\tstageprofile_copy, stage3_build, stage3_copy, stagefeedback_build,\n\tstagefeedback_copy, stage4_build, clean_s1, clean_sw, bootstrap,\n\tbootstrap-lean, bootstrap2, bootstrap2-lean, bootstrap3,\n\tbootstrap3-lean, bootstrap4, bootstrap4-lean, unstage1, unstage2,\n\tunstage3, unstage4, unstageprofile, unstagefeedback, restage, restage2,\n\trestage3, restage4, restageprofile, restagefeedback, bubbleestrap,\n\tcleanstrap, unstrap, restrap, *compare, *compare3, *compare4,\n\t*compare-lean, *compare3-lean, *compare4-lean, stage1-start, stage1,\n\tstage2-start, stage2, stage3-start, stage3, stage4-start, stage4,\n\tstageprofile-start, stageprofile, stagefeedback-start, stagefeedback,\n\trisky-stage1, risky-stage2, risky-stage3, risky-stage4): Remove.\n\t(ORDINARY_FLAGS_TO_PASS): Rename to FLAGS_TO_PASS.\n\t(STAGECOPYSTUFF, STAGEMOVESTUFF): Consolidate into MOSTLYCLEANFILES.\n\t(mostlyclean): Adjust.\n\t(clean, distclean): Don't mention bootstrap stuff.\n\t* configure: Regenerate.\n\t* ada/config-lang.in, cp/config-lang.in, forttran/config-lang.in,\n\tjava/config-lang.in, objc/config-lang.in, objcp/config-lang.in,\n\ttreelang/config-lang.in (stagestuff): Remove.\n\t* doc/sourcebuild.texi (stage1, stage2, stage3, stage4,\n\tstageprofile, stagefeedback, stagestuff): Remove mention.\n\nFrom-SVN: r120670", "tree": {"sha": "19a33fe8fadb0d2abd82c987bd589f8c658de03c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a33fe8fadb0d2abd82c987bd589f8c658de03c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b1f719ae7116ff128a298121b5bdeb29d69a793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1f719ae7116ff128a298121b5bdeb29d69a793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1f719ae7116ff128a298121b5bdeb29d69a793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1f719ae7116ff128a298121b5bdeb29d69a793/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e3a343d888bce3a2e92ce86ff8c09a3d77d909f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e3a343d888bce3a2e92ce86ff8c09a3d77d909f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e3a343d888bce3a2e92ce86ff8c09a3d77d909f"}], "stats": {"total": 11977, "additions": 5413, "deletions": 6564}, "files": [{"sha": "1cf02f0c7ff3273a2be8a038cf391cca33bcccc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -1,3 +1,40 @@\n+2007-01-11  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac (strict1_warn): Rename to strict_warn.\n+\t(WERROR, --enable-werror, symlink hacks, stage1_cflags,\n+\tcc_set_by_configure, quoted_cc_set_by_configure,\n+\tstage_prefix_set_by_configure, quoted_stage_prefix_set_by_configure,\n+\tall_boot_languages, all_stagestuff): Remove.\n+\t(target_list): Remove bootstrap targets.\n+\t* Makefile.in (quickstrap): Unconditionally make a synonym of all.\n+\t(BOOT_LANGUAGES, STAGE1_CFLAGS, STAGE1_CHECKING,\n+\tREMAKEFLAGS, FLAGS_TO_PASS, PREPEND_DOTDOT_TO_RELATIVE_PATHS,\n+\tSUBDIR_FLAGS_TO_PASS, WERROR_FLAGS, STRICT2_WARN, LANG_STAGESTUFF,\n+\tVOL_FILES, POSTSTAGE1_FLAGS_TO_PASS, STAGE2_FLAGS_TO_PASS,\n+\tSTAGEPROFILE_FLAGS_TO_PASS, STAGEFEEDBACK_FLAGS_TO_PASS, stage1_build,\n+\tstage1_copy, stage2_build, stage2_copy, stageprofile_build,\n+\tstageprofile_copy, stage3_build, stage3_copy, stagefeedback_build,\n+\tstagefeedback_copy, stage4_build, clean_s1, clean_sw, bootstrap,\n+\tbootstrap-lean, bootstrap2, bootstrap2-lean, bootstrap3,\n+\tbootstrap3-lean, bootstrap4, bootstrap4-lean, unstage1, unstage2,\n+\tunstage3, unstage4, unstageprofile, unstagefeedback, restage, restage2,\n+\trestage3, restage4, restageprofile, restagefeedback, bubbleestrap,\n+\tcleanstrap, unstrap, restrap, *compare, *compare3, *compare4,\n+\t*compare-lean, *compare3-lean, *compare4-lean, stage1-start, stage1,\n+\tstage2-start, stage2, stage3-start, stage3, stage4-start, stage4,\n+\tstageprofile-start, stageprofile, stagefeedback-start, stagefeedback,\n+\trisky-stage1, risky-stage2, risky-stage3, risky-stage4): Remove.\n+\t(ORDINARY_FLAGS_TO_PASS): Rename to FLAGS_TO_PASS.\n+\t(STAGECOPYSTUFF, STAGEMOVESTUFF): Consolidate into MOSTLYCLEANFILES.\n+\t(mostlyclean): Adjust.\n+\t(clean, distclean): Don't mention bootstrap stuff.\n+\t* configure: Regenerate.\n+\t* ada/config-lang.in, cp/config-lang.in, forttran/config-lang.in,\n+\tjava/config-lang.in, objc/config-lang.in, objcp/config-lang.in,\n+\ttreelang/config-lang.in (stagestuff): Remove.\n+\t* doc/sourcebuild.texi (stage1, stage2, stage3, stage4,\n+\tstageprofile, stagefeedback, stagestuff): Remove mention.\n+\n 2007-01-11  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mcore/predicates.md (mcore_general_movesrc_operand):"}, {"sha": "76259032fdf28813837aa3aa0c424141ab96f812", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 599, "changes": 614, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -24,14 +24,17 @@\n \n # The targets for external use include:\n # all, doc, proto, install, install-cross, install-cross-rest,\n-# uninstall, TAGS, mostlyclean, clean, distclean, maintainer-clean,\n-# stage1, stage2, stage3, stage4.\n+# uninstall, TAGS, mostlyclean, clean, distclean, maintainer-clean.\n \n # This is the default target.\n # Set by autoconf to \"all.internal\" for a native build, or\n # \"all.cross\" to build a cross compiler.\n all: @ALL@\n \n+# Provide quickstrap as a target that people can type into the gcc directory,\n+# and that fails if you're not into it.\n+quickstrap: all\n+\n # Depend on this to specify a phony target portably.\n force:\n \n@@ -136,54 +139,35 @@ SUBDIRS =@subdirs@ build\n CONFIG_LANGUAGES = @all_selected_languages@\n LANGUAGES = c gcov$(exeext) gcov-dump$(exeext) $(CONFIG_LANGUAGES)\n \n-# Selection of languages to be made during stage1 build.\n-BOOT_LANGUAGES = c @all_boot_languages@\n-\n # Various ways of specifying flags for compilations:\n # CFLAGS is for the user to override to, e.g., do a cross build with -O2.\n-# For recursive  bootstrap builds CFLAGS is used to pass in STAGE1_CFLAGS\n-# or BOOT_CFLAGS\n-# STAGE1_CFLAGS is set by configure on some targets or passed from toplevel\n-# and sets the CFLAGS passed to stage1 of a bootstrap compilation.\n-# STAGE1_CHECKING enables checking for the stage1 compiler\n-# BOOT_CFLAGS is the value of CFLAGS to pass to the stage2, stage3 and stage4\n-# bootstrap compilations.\n # XCFLAGS is used for most compilations but not when using the GCC just built.\n # TCFLAGS is used for compilations with the GCC just built.\n XCFLAGS =\n TCFLAGS =\n CFLAGS = @CFLAGS@\n LDFLAGS = @LDFLAGS@\n-STAGE1_CFLAGS = -g @stage1_cflags@\n-STAGE1_CHECKING_CFLAGS = -DENABLE_CHECKING -DENABLE_ASSERT_CHECKING\n-BOOT_CFLAGS = -g -O2\n \n # Flags to determine code coverage. When coverage is disabled, this will\n # contain the optimization flags, as you normally want code coverage\n # without optimization.\n COVERAGE_FLAGS = @coverage_flags@\n coverageexts = .{gcda,gcno}\n \n-# The warning flags are separate from BOOT_CFLAGS because people tend to\n+# The warning flags are separate from CFLAGS because people tend to\n # override optimization flags and we'd like them to still have warnings\n # turned on.  These flags are also used to pass other stage dependent\n # flags from configure.  The user is free to explicitly turn these flags\n # off if they wish.\n # LOOSE_WARN are the warning flags to use when compiling something\n # which is only compiled with gcc, such as libgcc and the frontends\n # other than C.\n-# STRICT_WARN and STRICT2_WARN are the additional warning flags to\n+# STRICT_WARN are the additional warning flags to\n # apply to the back end and the C front end, which may be compiled\n-# with other compilers.  This is partially controlled by configure in\n-# stage1, as not all versions of gcc understand -Wno-long-long or\n-# -Wno-variadic-macros.\n+# with other compilers.\n # CXX_COMPAT_WARN are C++ source compatibility warnings.\n LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n-STRICT_WARN = @strict1_warn@\n-WERROR_FLAGS = @WERROR@\n-STRICT2_WARN = -pedantic -Wno-long-long -Wno-variadic-macros \\\n-  -Wno-overlength-strings -Wold-style-definition -Wmissing-format-attribute \\\n-  $(WERROR_FLAGS)\n+STRICT_WARN = @strict_warn@\n CXX_COMPAT_WARN = @cxx_compat_warn@\n \n # This is set by --enable-checking.  The idea is to catch forgotten\n@@ -279,7 +263,6 @@ STAMP = echo timestamp >\n \n # Make sure the $(MAKE) variable is defined.\n @SET_MAKE@\n-REMAKEFLAGS=LANGUAGES=\"$(LANGUAGES)\" BOOT_CFLAGS=\"$(BOOT_CFLAGS)\"\n \n # Locate mkinstalldirs.\n mkinstalldirs=$(SHELL) $(srcdir)/../mkinstalldirs\n@@ -874,12 +857,9 @@ INCLUDES = -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \\\n \n LANG_MAKEFRAGS = @all_lang_makefrags@\n LANG_MAKEFILES = @all_lang_makefiles@\n-LANG_STAGESTUFF = @all_stagestuff@\n \n # Flags to pass to recursive makes.\n-# CC is set by configure.  Hosts without symlinks need special handling\n-# because we need CC=\"stage1/xgcc -Bstage1/\" to work in the language\n-# subdirectories.\n+# CC is set by configure.\n # ??? The choices here will need some experimenting with.\n \n export AR_FOR_TARGET\n@@ -901,7 +881,7 @@ export RANLIB_FOR_TARGET\n export libsubdir\n export slibdir\n \n-ORDINARY_FLAGS_TO_PASS = \\\n+FLAGS_TO_PASS = \\\n \t\"BISON=$(BISON)\" \\\n \t\"BISONFLAGS=$(BISONFLAGS)\" \\\n \t\"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)\" \\\n@@ -927,17 +907,6 @@ ORDINARY_FLAGS_TO_PASS = \\\n \t\"libexecsubdir=$(libsubdir)\" \\\n \t\"datadir=$(datadir)\" \\\n \t\"localedir=$(localedir)\"\n-FLAGS_TO_PASS = $(ORDINARY_FLAGS_TO_PASS) \"CC=@cc_set_by_configure@\" \\\n-\t\"STAGE_PREFIX=@stage_prefix_set_by_configure@\"\n-PREPEND_DOTDOT_TO_RELATIVE_PATHS = sed \\\n-\t-e 's|^ *[^ /][^ /]*/|%&|' \\\n-\t-e 's| -B| -B%|g' \\\n-\t-e 's|% *[^- /]|%&|g' \\\n-\t-e 's|%% *|../|g' \\\n-\t-e 's|%||g'\n-SUBDIR_FLAGS_TO_PASS = $(ORDINARY_FLAGS_TO_PASS) \\\n-\t\"CC=`echo @quoted_cc_set_by_configure@ | $(PREPEND_DOTDOT_TO_RELATIVE_PATHS)`\" \\\n-\t\"STAGE_PREFIX=`echo @quoted_stage_prefix_set_by_configure@ | $(PREPEND_DOTDOT_TO_RELATIVE_PATHS)`\"\n #\f\n # Lists of files for various purposes.\n \n@@ -1024,23 +993,18 @@ OBJS-onestep = libbackend.o $(OBJS-archive)\n \n BACKEND = main.o @TREEBROWSER@ libbackend.a $(CPPLIB) $(LIBDECNUMBER)\n \n-# Files to be copied after each stage in building.\n-STAGECOPYSTUFF = insn-flags.h insn-config.h insn-codes.h \\\n+MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \\\n  insn-attr.h insn-attrtab.c insn-opinit.c insn-preds.c insn-constants.h \\\n  tm-preds.h tm-constrs.h \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n- genrtl.c genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-gen.h\n-\n-# Files to be moved away after each stage in building.\n-STAGEMOVESTUFF = *$(objext) s-* \\\n+ genrtl.c genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-gen.h \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) cc1*-dummy$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n  $(SPECS) collect2$(exeext) \\\n  gcov-iov$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n- *.[0-9][0-9].* *.[si] *-checksum.c libbackend.a libgcc.mk \\\n- $(LANG_STAGESTUFF)\n+ *.[0-9][0-9].* *.[si] *-checksum.c libbackend.a libgcc.mk\n \n # Defined in libgcc2.c, included only in the static library.\n LIB2FUNCS_ST = _eprintf __gcc_bcmp\n@@ -1102,7 +1066,6 @@ LIB2_DIVMOD_FUNCS = _divdi3 _moddi3 _udivdi3 _umoddi3 _udiv_w_sdiv _udivmoddi4\n # install-common, install-info, install-man,\n # uninstall,\n # mostlyclean, clean, distclean, maintainer-clean,\n-# stage1, stage2, stage3, stage4\n #\n # Each language is linked in with a series of hooks.  The name of each\n # hooked is \"lang.${target_name}\" (eg: lang.info).  Configure computes\n@@ -3525,7 +3488,7 @@ fsf-funding.pod: funding.texi\n # (less duplicated code).\n \n mostlyclean: lang.mostlyclean\n-\t-rm -f $(STAGECOPYSTUFF) $(STAGEMOVESTUFF)\n+\t-rm -f $(MOSTLYCLEANFILES)\n \t-rm -f *$(coverageexts)\n # Delete build programs\n \t-rm -f build/*\n@@ -3581,11 +3544,6 @@ clean: mostlyclean lang.clean\n \telse if [ \"x$(MULTILIB_OPTIONS)\" != x ] ; then \\\n \t  rm -rf `echo $(MULTILIB_OPTIONS) | sed -e 's/\\// /g'`; \\\n \tfi ; fi\n-\t-rm -fr stage1 stage2 stage3 stage4 stageprofile stagefeedback\n-# Delete stamps of bootstrap stages\n-\t-rm -f stage?_*\n-\t-rm -f clean?_*\n-\t-rm -f stage_last\n \n # Delete all files that users would normally create\n # while building and installing GCC.\n@@ -3596,7 +3554,6 @@ distclean: clean lang.distclean\n \t-rm -f Make-lang Make-hooks Make-host Make-target\n \t-rm -f Makefile *.oaux\n \t-rm -f gthr-default.h\n-\t-rm -f */stage1 */stage2 */stage3 */stage4 */include */stageprofile */stagefeedback\n \t-rm -f TAGS */TAGS\n \t-rm -f *.asm\n \t-rm -f site.exp site.bak testsuite/site.exp testsuite/site.bak\n@@ -4103,547 +4060,6 @@ TAGS: lang.tags\n \tetags -o TAGS.sub *.y *.h *.c; \\\n \tetags --include TAGS.sub $$incs)\n \n-# ------------------------------------------------------\n-# Bootstrap-related targets (not used during 'make all')\n-# ------------------------------------------------------\n-\n-# A list of files to be destroyed during \"lean\" builds.\n-VOL_FILES=`echo $(BACKEND) $(OBJS) $(C_OBJS) *.c *.h gen*`\n-\n-# Flags to pass to stage2 and later recursive makes.  Note that the\n-# WARN_CFLAGS setting can't be to the expansion of GCC_WARN_CFLAGS in\n-# the context of the stage_x rule.\n-\n-POSTSTAGE1_FLAGS_TO_PASS = \\\n-\tADAFLAGS=\"$(BOOT_ADAFLAGS)\" \\\n-\tCFLAGS=\"$(BOOT_CFLAGS)\" \\\n-\tLDFLAGS=\"$(BOOT_LDFLAGS)\" \\\n-\tWARN_CFLAGS=\"\\$$(GCC_WARN_CFLAGS)\" \\\n-\tSTRICT_WARN=\"$(STRICT2_WARN)\" \\\n-\tlibdir=$(libdir) \\\n-\tLANGUAGES=\"$(LANGUAGES)\" \\\n-\tMAKEINFO=\"$(MAKEINFO)\" \\\n-\tMAKEINFOFLAGS=\"$(MAKEINFOFLAGS)\" \\\n-\tMAKEOVERRIDES= \\\n-\tOUTPUT_OPTION=\"-o \\$$@\"\n-\n-STAGE2_FLAGS_TO_PASS = \\\n-\tCFLAGS=\"$(BOOT_CFLAGS)\" \\\n-\tWERROR=\"$(WERROR_FLAGS)\" \\\n-\n-STAGEPROFILE_FLAGS_TO_PASS = \\\n-\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-generate\"\n-\n-# Files never linked into the final executable produces warnings about missing\n-# profile.\n-STAGEFEEDBACK_FLAGS_TO_PASS = \\\n-\tCFLAGS=\"$(BOOT_CFLAGS) -fprofile-use -freorder-blocks-and-partition\"\n-\n-# Only build the C compiler for stage1, because that is the only one that\n-# we can guarantee will build with the native compiler, and also it is the\n-# only thing useful for building stage2. STAGE1_CFLAGS (via CFLAGS),\n-# MAKEINFO and MAKEINFOFLAGS are explicitly passed here to make them\n-# overrideable (for a bootstrap build stage1 also builds gcc.info).\n-# The stage1 compiler is always built with checking enabled.\n-stage1_build:\n-\t$(MAKE) CC=\"$(CC)\" libdir=$(libdir) LANGUAGES=\"$(BOOT_LANGUAGES)\" \\\n-\t\tCFLAGS=\"$(STAGE1_CFLAGS) $(STAGE1_CHECKING_CFLAGS)\" \\\n-\t\tMAKEINFO=\"$(MAKEINFO)\" MAKEINFOFLAGS=\"$(MAKEINFOFLAGS)\" \\\n-\t\tCOVERAGE_FLAGS= OBJS-onestep=\"$(OBJS)\"\n-\t$(STAMP) stage1_build\n-\techo stage1_build > stage_last\n-\n-stage1_copy: stage1_build\n-\t$(MAKE) stage1\n-\t$(STAMP) stage1_copy\n-\techo stage2_build > stage_last\n-\n-stage2_build: stage1_copy\n-\t$(MAKE) CC=\"$(STAGE_CC_WRAPPER) stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" \\\n-\t\t STAGE_PREFIX=stage1/ \\\n-\t\t $(POSTSTAGE1_FLAGS_TO_PASS) \\\n-\t\t $(STAGE2_FLAGS_TO_PASS)\n-\t$(STAMP) stage2_build\n-\techo stage2_build > stage_last\n-\n-stage2_copy: stage2_build\n-\t$(MAKE) stage2\n-\t$(STAMP) stage2_copy\n-\techo stage3_build > stage_last\n-\n-stageprofile_build: stage1_copy\n-\t$(MAKE) CC=\"$(STAGE_CC_WRAPPER) stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" \\\n-\t\t STAGE_PREFIX=stage1/ \\\n-\t\t $(POSTSTAGE1_FLAGS_TO_PASS) \\\n-\t\t $(STAGEPROFILE_FLAGS_TO_PASS)\n-\t$(STAMP) stageprofile_build\n-\techo stageprofile_build > stage_last\n-\n-stageprofile_copy: stageprofile_build\n-\t$(MAKE) stageprofile\n-\t$(STAMP) stageprofile_copy\n-\techo stagefeedback_build > stage_last\n-\n-stage3_build: stage2_copy\n-\t$(MAKE) CC=\"$(STAGE_CC_WRAPPER) stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" CC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" \\\n-\t\t STAGE_PREFIX=stage2/ \\\n-\t\t $(POSTSTAGE1_FLAGS_TO_PASS) \\\n-\t\t $(STAGE2_FLAGS_TO_PASS)\n-\t$(STAMP) stage3_build\n-\techo stage3_build > stage_last\n-\n-stagefeedback_build: stageprofile_copy stage1_copy\n-\t$(MAKE) CC=\"$(STAGE_CC_WRAPPER) stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" \\\n-\t\t STAGE_PREFIX=stage1/ \\\n-\t\t $(POSTSTAGE1_FLAGS_TO_PASS) \\\n-\t\t $(STAGEFEEDBACK_FLAGS_TO_PASS)\n-\t$(STAMP) stagefeedback_build\n-\techo stagefeedback_build > stage_last\n-\n-stagefeedback_copy: stagefeedback_build\n-\t$(MAKE) stagefeedback\n-\t$(STAMP) stagefeedback_copy\n-\techo stagefeedback2_build > stage_last\n-\n-# For bootstrap4:\n-stage3_copy: stage3_build\n-\t$(MAKE) stage3\n-\t$(STAMP) stage3_copy\n-\techo stage4_build > stage_last\n-\n-stage4_build: stage3_copy\n-\t$(MAKE) CC=\"$(STAGE_CC_WRAPPER) stage3/xgcc$(exeext) -Bstage3/ -B$(build_tooldir)/bin/\" CC_FOR_BUILD=\"$(STAGE_CC_WRAPPER) stage3/xgcc$(exeext) -Bstage3/ -B$(build_tooldir)/bin/\" \\\n-\t\t STAGE_PREFIX=stage3/ \\\n-\t\t $(POSTSTAGE1_FLAGS_TO_PASS) \\\n-\t\t $(STAGE2_FLAGS_TO_PASS)\n-\t$(STAMP) stage4_build\n-\techo stage4_build > stage_last\n-\n-# Additional steps for *-lean targets:\n-clean_s1: stage1_copy\n-\t-(cd stage1 && rm -f $(VOL_FILES))\n-\t$(STAMP) clean_s1\n-\n-clean_s2: stage2_copy\n-\t-rm -rf stage1\n-\t$(STAMP) clean_s2\n-\n-# The various entry points for bootstrapping.\n-\n-bootstrap: stage3_build\n-\t@echo\n-\t@echo Bootstrap complete - make \\\"quickstrap\\\" to redo last build,\n-\t@echo \\\"restage1\\\" through \\\"restage3\\\" to rebuild specific stages,\n-\t@echo \\\"restrap\\\" to redo the bootstrap from stage1, or\n-\t@echo \\\"cleanstrap\\\" to redo the bootstrap from scratch.\n-\n-bootstrap-lean : clean_s1 clean_s2 stage3_build\n-\t@echo\n-\t@echo Bootstrap complete - make \\\"quickstrap\\\" to redo last build,\n-\t@echo or \\\"cleanstrap\\\" to redo the bootstrap from scratch.\n-\n-bootstrap2: bootstrap\n-\n-bootstrap2-lean : bootstrap-lean\n-\n-bootstrap3 bootstrap3-lean: bootstrap\n-\n-bootstrap4 bootstrap4-lean: stage4_build\n-\n-unstage1 unstage2 unstage3 unstage4 unstageprofile unstagefeedback:\n-\t-set -vx; stage=`echo $@ | sed -e 's/un//'`; \\\n-\trm -f $$stage/as$(exeext); \\\n-\trm -f $$stage/nm$(exeext); \\\n-\trm -f $$stage/collect-ld$(exeext); \\\n-\tif test -d $$stage; then \\\n-\t  mv $$stage/specs $(SPECS) 2>/dev/null || :; \\\n-\t  mv $$stage/* . 2>/dev/null; \\\n-\t  for i in `cd $$stage; echo *` ; do \\\n-\t    if test -d $$stage/$$i; then \\\n-\t      mv $$stage/$$i/* $$i/. 2>/dev/null; \\\n-\t    else \\\n-\t      mv $$stage/$$i .; \\\n-\t    fi; \\\n-\t  done \\\n-\tfi ; \\\n-\trm -f $${stage}_build $${stage}_copy ;\\\n-\techo $${stage}_build > stage_last\n-\n-restage1: unstage1\n-\t$(MAKE) $(REMAKEFLAGS) stage1_build\n-\n-restage2: unstage2\n-\t$(MAKE) $(REMAKEFLAGS) stage2_build\n-\n-restage3: unstage3\n-\t$(MAKE) $(REMAKEFLAGS) stage3_build\n-\n-restage4: unstage4\n-\t$(MAKE) $(REMAKEFLAGS) stage4_build\n-\n-restageprofile: unstageprofile\n-\t$(MAKE) $(REMAKEFLAGS) stageprofile_build\n-\n-restagefeedback: unstagefeedback\n-\t$(MAKE) $(REMAKEFLAGS) stagefeedback_build\n-\n-# Bubble up a bugfix through all the stages.  Primarily useful for fixing\n-# bugs that cause the compiler to crash while building stage 2.\n-bubblestrap:\n-\tif test -f stage_last; then \\\n-\t  LAST=`sed -e 's/_build//' < stage_last`; \\\n-\t  if test \"$$LAST\" != \"stage1\"; then \\\n-\t    $(MAKE) $(REMAKEFLAGS) $$LAST; \\\n-\t    $(STAMP) $${LAST}_copy; \\\n-\t  fi; \\\n-\tfi\n-\tif test -f stage1_copy; then $(MAKE) unstage1; fi\n-\t$(MAKE) $(REMAKEFLAGS) stage1_copy\n-\tif test -f stage2_copy; then $(MAKE) unstage2; fi\n-\t$(MAKE) $(REMAKEFLAGS) stage2_copy\n-\tif test -f stage3_copy; then $(MAKE) unstage3; fi\n-\t$(MAKE) $(REMAKEFLAGS) stage3_build\n-\tif test -f stage4_copy; then \\\n-\t  $(MAKE) $(REMAKEFLAGS) stage3_copy; $(MAKE) unstage4; \\\n-\t  $(MAKE) $(REMAKEFLAGS) stage4_build || exit 1; \\\n-\tfi\n-\n-BOOTSTRAPPING := $(shell if test -f ../stage_last; then echo yes; else echo no; fi)\n-ifeq ($(BOOTSTRAPPING),yes)\n-# Provide quickstrap as a target that people can type into the gcc directory,\n-# and that fails if you're not into it.\n-quickstrap: all\n-else\n-quickstrap:\n-\tif test -f stage_last ; then \\\n-\t  LAST=`cat stage_last`; rm $$LAST; $(MAKE) $(REMAKEFLAGS) $$LAST; \\\n-\telse \\\n-\t  $(MAKE) $(REMAKEFLAGS) stage1_build; \\\n-\tfi\n-endif\n-\n-cleanstrap:\n-\t-$(MAKE) clean\n-\t$(MAKE) $(REMAKEFLAGS) bootstrap\n-\n-unstrap:\n-\t-rm -rf stage[234]*\n-\t$(MAKE) unstage1\n-\t-rm -f stage_last\n-\n-# Differs from cleanstrap in that it starts from the earlier stage1 build,\n-# not from scratch.\n-restrap:\n-\t$(MAKE) unstrap\n-\t$(MAKE) $(REMAKEFLAGS) bootstrap\n-\n-# These targets compare the object files in the current directory with\n-# those in a stage directory.  We need to skip the first N bytes of\n-# each object file.  The \"slow\" mechanism assumes nothing special\n-# about cmp and uses the tail command to skip.  ./ avoids a bug in\n-# some versions of tail.  The \"gnu\" targets use gnu cmp (diffutils\n-# v2.4 or later), to avoid running tail and the overhead of twice\n-# copying each object file.  Likewise, the \"fast\" targets use the skip\n-# parameter of cmp available on some systems to accomplish the same\n-# thing.  An exit status of 1 is precisely the result we're looking\n-# for (other values mean other problems).\n-slowcompare slowcompare3 slowcompare4 slowcompare-lean slowcompare3-lean slowcompare4-lean \\\n-fastcompare fastcompare3 fastcompare4 fastcompare-lean fastcompare3-lean fastcompare4-lean \\\n- gnucompare  gnucompare3  gnucompare4  gnucompare-lean  gnucompare3-lean  gnucompare4-lean: force\n-\t-rm -f .bad_compare\n-\tcase \"$@\" in *compare | *compare-lean ) stage=2 ;; * ) stage=`echo $@ | sed -e 's,^[a-z]*compare\\([0-9][0-9]*\\).*,\\1,'` ;; esac; \\\n-\tfor dir in . $(SUBDIRS) libgcc; do \\\n-\t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n-\t    for file in $$dir/*$(objext); do \\\n-\t      case \"$@\" in \\\n-\t\tslowcompare* ) \\\n-\t\t  if tail -c +1 </dev/null >/dev/null 2>&1; then \\\n-\t\t    skip16='-c +17'; \\\n-\t\t  else \\\n-\t\t    skip16='+17c'; \\\n-\t\t  fi; \\\n-\t\t  tail $$skip16 ./$$file > tmp-foo1; \\\n-\t\t  tail $$skip16 stage$$stage/$$file > tmp-foo2; \\\n-\t\t  cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1; \\\n-\t\t  cmpret=$$?; \\\n-\t\t  ;; \\\n-\t\tfastcompare* ) \\\n-\t\t  cmp $$file stage$$stage/$$file 16 16 > /dev/null 2>&1; \\\n-\t\t  cmpret=$$?; \\\n-\t\t  ;; \\\n-\t\tgnucompare* ) \\\n-\t\t  cmp --ignore-initial=16 $$file stage$$stage/$$file > /dev/null 2>&1; \\\n-\t\t  cmpret=$$?; \\\n-\t\t  ;; \\\n-\t      esac ; \\\n-\t      if test $$cmpret -eq 1; then \\\n-\t\tcase $$file in \\\n-\t\t  ./cc*-checksum$(objext) | libgcc/* ) \\\n-\t\t    echo warning: $$file differs;; \\\n-\t\t  *) \\\n-\t\t    echo $$file differs >> .bad_compare;; \\\n-\t\tesac ; \\\n-\t      fi; \\\n-\t    done; \\\n-\t  else true; fi; \\\n-\tdone\n-\t-rm -f tmp-foo*\n-\tcase \"$@\" in *compare | *compare-lean ) stage=2 ;; * ) stage=`echo $@ | sed -e 's,^[a-z]*compare\\([0-9][0-9]*\\).*,\\1,'` ;; esac; \\\n-\tif [ -f .bad_compare ]; then \\\n-\t  echo \"Bootstrap comparison failure!\"; \\\n-\t  cat .bad_compare; \\\n-\t  exit 1; \\\n-\telse \\\n-\t  case \"$@\" in \\\n-\t    *-lean ) rm -rf stage$$stage ;; \\\n-\t    *) ;; \\\n-\t  esac; true; \\\n-\tfi\n-\n-# Forwarding wrappers to the most appropriate version.\n-compare: @make_compare_target@\n-compare3: @make_compare_target@3\n-compare4: @make_compare_target@4\n-compare-lean: @make_compare_target@-lean\n-compare3-lean: @make_compare_target@3-lean\n-compare4-lean: @make_compare_target@4-lean\n-\n-# Copy the object files from a particular stage into a subdirectory.\n-stage1-start:\n-\t-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi\n-\t$(MAKE) -f libgcc.mk libgcc-stage-start stage=stage1\n-\t-subdirs=\"$(SUBDIRS)\"; for dir in $$subdirs; \\\n-\t do \\\n-\t   if [ -d stage1/$$dir ] ; then true ; else mkdir stage1/$$dir ; fi ; \\\n-\t done\n-\t-rm -f stage1/libgcc.a stage1/libgcc_eh.a stage1/libgcov.a\n-\t-rm -f stage1/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage1/libunwind.a stage1/libunwind*$(SHLIB_EXT)\n-# If SPECS is overridden, make sure it is `installed' as specs.\n-\t-mv $(SPECS) stage1/specs\n-\t-mv $(STAGEMOVESTUFF) stage1\n-\t-mv build/* stage1/build\n-\t-cp -p $(STAGECOPYSTUFF) stage1\n-# Copy as/ld if they exist to stage dir, so that running xgcc from the stage\n-# dir will work properly.\n-\t-if [ -f as$(exeext) ] ; then (cd stage1 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n-\t-if [ -f ld$(exeext) ] ; then (cd stage1 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n-\t-if [ -f collect-ld$(exeext) ] ; then (cd stage1 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-cp libgcc.a stage1\n-\t-$(RANLIB_FOR_TARGET) stage1/libgcc.a\n-\t-cp libgcov.a stage1\n-\t-$(RANLIB_FOR_TARGET) stage1/libgcov.a\n-\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage1; \\\n-\t   $(RANLIB_FOR_TARGET) stage1/libgcc_eh.a; \\\n-\tfi\n-\t-cp libgcc_s*$(SHLIB_EXT) stage1\n-\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage1\n-\t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n-\t  cp stage1/$${f} . ; \\\n-\telse true; \\\n-\tfi; done\n-stage1: force stage1-start lang.stage1\n-\t-for dir in . $(SUBDIRS) ; \\\n-\tdo \\\n-\t  rm -f $$dir/*$(coverageexts) ; \\\n-\tdone\n-\n-stage2-start:\n-\t-if [ -d stage2 ] ; then true ; else mkdir stage2 ; fi\n-\t$(MAKE) -f libgcc.mk libgcc-stage-start stage=stage2\n-\t-subdirs=\"$(SUBDIRS)\"; for dir in $$subdirs; \\\n-\t do \\\n-\t   if [ -d stage2/$$dir ] ; then true ; else mkdir stage2/$$dir ; fi ; \\\n-\t done\n-\t-rm -f stage2/libgcc.a stage2/libgcov.a stage2/libgcc_eh.a\n-\t-rm -f stage2/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage2/libunwind.a stage2/libunwind*$(SHLIB_EXT)\n-# If SPECS is overridden, make sure it is `installed' as specs.\n-\t-mv $(SPECS) stage2/specs\n-\t-mv $(STAGEMOVESTUFF) stage2\n-\t-mv build/* stage2/build\n-\t-cp -p $(STAGECOPYSTUFF) stage2\n-# Copy as/ld if they exist to stage dir, so that running xgcc from the stage\n-# dir will work properly.\n-\t-if [ -f as$(exeext) ] ; then (cd stage2 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n-\t-if [ -f ld$(exeext) ] ; then (cd stage2 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n-\t-if [ -f collect-ld$(exeext) ] ; then (cd stage2 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-cp libgcc.a stage2\n-\t-$(RANLIB_FOR_TARGET) stage2/libgcc.a\n-\t-cp libgcov.a stage2\n-\t-$(RANLIB_FOR_TARGET) stage2/libgcov.a\n-\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage2; \\\n-\t   $(RANLIB_FOR_TARGET) stage2/libgcc_eh.a; \\\n-\tfi\n-\t-cp libgcc_s*$(SHLIB_EXT) stage2\n-\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage2\n-\t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n-\t  cp stage2/$${f} . ; \\\n-\telse true; \\\n-\tfi; done\n-stage2: force stage2-start lang.stage2\n-\n-stage3-start:\n-\t-if [ -d stage3 ] ; then true ; else mkdir stage3 ; fi\n-\t$(MAKE) -f libgcc.mk libgcc-stage-start stage=stage3\n-\t-subdirs=\"$(SUBDIRS)\"; for dir in $$subdirs; \\\n-\t do \\\n-\t   if [ -d stage3/$$dir ] ; then true ; else mkdir stage3/$$dir ; fi ; \\\n-\t done\n-\t-rm -f stage3/libgcc.a stage3/libgcov.a stage3/libgcc_eh.a\n-\t-rm -f stage3/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage3/libunwind.a stage3/libunwind*$(SHLIB_EXT)\n-# If SPECS is overridden, make sure it is `installed' as specs.\n-\t-mv $(SPECS) stage3/specs\n-\t-mv $(STAGEMOVESTUFF) stage3\n-\t-mv build/* stage3/build\n-\t-cp -p $(STAGECOPYSTUFF) stage3\n-# Copy as/ld if they exist to stage dir, so that running xgcc from the stage\n-# dir will work properly.\n-\t-if [ -f as$(exeext) ] ; then (cd stage3 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n-\t-if [ -f ld$(exeext) ] ; then (cd stage3 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n-\t-if [ -f collect-ld$(exeext) ] ; then (cd stage3 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-cp libgcc.a stage3\n-\t-$(RANLIB_FOR_TARGET) stage3/libgcc.a\n-\t-cp libgcov.a stage3\n-\t-$(RANLIB_FOR_TARGET) stage3/libgcov.a\n-\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage3; \\\n-\t   $(RANLIB_FOR_TARGET) stage3/libgcc_eh.a; \\\n-\tfi\n-\t-cp libgcc_s*$(SHLIB_EXT) stage3\n-\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage3\n-\t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n-\t  cp stage3/$${f} . ; \\\n-\telse true; \\\n-\tfi; done\n-stage3: force stage3-start lang.stage3\n-\n-stage4-start:\n-\t-if [ -d stage4 ] ; then true ; else mkdir stage4 ; fi\n-\t$(MAKE) -f libgcc.mk libgcc-stage-start stage=stage4\n-\t-subdirs=\"$(SUBDIRS)\"; for dir in $$subdirs; \\\n-\t do \\\n-\t   if [ -d stage4/$$dir ] ; then true ; else mkdir stage4/$$dir ; fi ; \\\n-\t done\n-\t-rm -f stage4/libgcc.a stage4/libgcov.a stage4/libgcc_eh.a\n-\t-rm -f stage4/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stage4/libunwind.a stage4/libunwind*$(SHLIB_EXT)\n-# If SPECS is overridden, make sure it is `installed' as specs.\n-\t-mv $(SPECS) stage4/specs\n-\t-mv $(STAGEMOVESTUFF) stage4\n-\t-mv build/* stage4/build\n-\t-cp -p $(STAGECOPYSTUFF) stage4\n-# Copy as/ld if they exist to stage dir, so that running xgcc from the stage\n-# dir will work properly.\n-\t-if [ -f as$(exeext) ] ; then (cd stage4 && $(LN_S) ../as$(exeext) .) ; else true ; fi\n-\t-if [ -f ld$(exeext) ] ; then (cd stage4 && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n-\t-if [ -f collect-ld$(exeext) ] ; then (cd stage4 && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-cp libgcc.a stage4\n-\t-$(RANLIB_FOR_TARGET) stage4/libgcc.a\n-\t-cp libgcov.a stage4\n-\t-$(RANLIB_FOR_TARGET) stage4/libgcov.a\n-\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stage4; \\\n-\t   $(RANLIB_FOR_TARGET) stage4/libgcc_eh.a; \\\n-\tfi\n-\t-cp libgcc_s*$(SHLIB_EXT) stage4\n-\t-cp libunwind.a libunwind*$(SHLIB_EXT) stage4\n-\t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n-\t  cp stage4/$${f} . ; \\\n-\telse true; \\\n-\tfi; done\n-stage4: force stage4-start lang.stage4\n-\n-stageprofile-start:\n-\t-if [ -d stageprofile ] ; then true ; else mkdir stageprofile ; fi\n-\t$(MAKE) -f libgcc.mk libgcc-stage-start stage=stageprofile\n-\t-subdirs=\"$(SUBDIRS)\"; for dir in $$subdirs; \\\n-\t do \\\n-\t   if [ -d stageprofile/$$dir ] ; then true ; else mkdir stageprofile/$$dir ; fi ; \\\n-\t done\n-\t-rm -f stageprofile/libgcc.a stageprofile/libgcov.a stageprofile/libgcc_eh.a\n-\t-rm -f stageprofile/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stageprofile/libunwind.a stageprofile/libunwind*$(SHLIB_EXT)\n-\t-mv $(STAGEMOVESTUFF) stageprofile\n-\t-mv build/* stageprofile/build\n-\t-cp -p $(STAGECOPYSTUFF) stageprofile\n-# Copy as/ld if they exist to stage dir, so that running xgcc from the stage\n-# dir will work properly.\n-\t-if [ -f as$(exeext) ] ; then (cd stageprofile && $(LN_S) ../as$(exeext) .) ; else true ; fi\n-\t-if [ -f ld$(exeext) ] ; then (cd stageprofile && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n-\t-if [ -f collect-ld$(exeext) ] ; then (cd stageprofile && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-cp libgcc.a stageprofile\n-\t-$(RANLIB_FOR_TARGET) stageprofile/libgcc.a\n-\t-cp libgcov.a stageprofile\n-\t-$(RANLIB_FOR_TARGET) stageprofile/libgcov.a\n-\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stageprofile; \\\n-\t   $(RANLIB_FOR_TARGET) stageprofile/libgcc_eh.a; \\\n-\tfi\n-\t-cp libgcc_s*$(SHLIB_EXT) stageprofile\n-\t-cp libunwind.a libunwind*$(SHLIB_EXT) stageprofile\n-\t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n-\t  cp stageprofile/$${f} . ; \\\n-\telse true; \\\n-\tfi; done\n-stageprofile: force stageprofile-start lang.stageprofile\n-\n-stagefeedback-start:\n-\t-if [ -d stagefeedback ] ; then true ; else mkdir stagefeedback ; fi\n-\t$(MAKE) -f libgcc.mk libgcc-stage-start stage=stagefeedback\n-\t-subdirs=\"$(SUBDIRS)\"; for dir in $$subdirs; \\\n-\t do \\\n-\t   if [ -d stagefeedback/$$dir ] ; then true ; else mkdir stagefeedback/$$dir ; fi ; \\\n-\t done\n-\t-rm -f stagefeedback/libgcc.a stagefeedback/libgcov.a stagefeedback/libgcc_eh.a\n-\t-rm -f stagefeedback/libgcc_s*$(SHLIB_EXT)\n-\t-rm -f stagefeedback/libunwind.a stagefeedback/libunwind*$(SHLIB_EXT)\n-\t-rm -f *.da\n-\t-mv $(STAGEMOVESTUFF) stagefeedback\n-\t-mv build/* stagefeedback/build\n-\t-cp -p $(STAGECOPYSTUFF) stagefeedback\n-# Copy as/ld if they exist to stage dir, so that running xgcc from the stage\n-# dir will work properly.\n-\t-if [ -f as$(exeext) ] ; then (cd stagefeedback && $(LN_S) ../as$(exeext) .) ; else true ; fi\n-\t-if [ -f ld$(exeext) ] ; then (cd stagefeedback && $(LN_S) ../ld$(exeext) .) ; else true ; fi\n-\t-if [ -f collect-ld$(exeext) ] ; then (cd stagefeedback && $(LN_S) ../collect-ld$(exeext) .) ; else true ; fi\n-\t-for dir in fixinc po testsuite $(SUBDIRS); \\\n-\t do \\\n-\t   rm -f $$dir/*.da ; \\\n-\t done\n-\t-cp libgcc.a stagefeedback\n-\t-$(RANLIB_FOR_TARGET) stagefeedback/libgcc.a\n-\t-cp libgcov.a stagefeedback\n-\t-$(RANLIB_FOR_TARGET) stagefeedback/libgcov.a\n-\t-if [ -f libgcc_eh.a ] ; then cp libgcc_eh.a stagefeedback; \\\n-\t   $(RANLIB_FOR_TARGET) stagefeedback/libgcc_eh.a; \\\n-\tfi\n-\t-cp libgcc_s*$(SHLIB_EXT) stagefeedback\n-\t-cp libunwind.a libunwind*$(SHLIB_EXT) stagefeedback\n-\t-for f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n-\t  cp stagefeedback/$${f} . ; \\\n-\telse true; \\\n-\tfi; done\n-stagefeedback: force stagefeedback-start lang.stagefeedback\n-\n-# Copy just the executable files from a particular stage into a subdirectory,\n-# and delete the object files.  Use this if you're just verifying a version\n-# that is pretty sure to work, and you are short of disk space.\n-risky-stage1: stage1\n-\t-$(MAKE) clean\n-\n-risky-stage2: stage2\n-\t-$(MAKE) clean\n-\n-risky-stage3: stage3\n-\t-$(MAKE) clean\n-\n-risky-stage4: stage4\n-\t-$(MAKE) clean\n-\n-#In GNU Make, ignore whether `stage*' exists.\n-.PHONY: stage1 stage2 stage3 stage4 clean maintainer-clean TAGS bootstrap\n-.PHONY: risky-stage1 risky-stage2 risky-stage3 risky-stage4\n-.PHONY: stagefeedback stageprofile\n-\n # -----------------------------------------------------\n # Rules for generating translated message descriptions.\n # Disabled by autoconf if the tools are not available."}, {"sha": "0a123c3e60f07336a149ad8d337ba79d63f7a873", "filename": "gcc/ada/config-lang.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fada%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fada%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fconfig-lang.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -24,16 +24,13 @@\n # language\t- name of language as it would appear in $(LANGUAGES)\n # boot_language - \"yes\" if we need to build this language in stage1\n # compilers\t- value to add to $(COMPILERS)\n-# stagestuff\t- files to add to $(STAGESTUFF)\n \n language=\"ada\"\n boot_language=yes\n boot_language_boot_flags='ADAFLAGS=\"$(BOOT_ADAFLAGS)\"'\n \n compilers=\"gnat1\\$(exeext)\"\n \n-stagestuff=\"gnatbind\\$(exeext) gnat1\\$(exeext)\"\n-\n gtfiles=\"\\$(srcdir)/ada/ada-tree.h \\$(srcdir)/ada/gigi.h \\$(srcdir)/ada/decl.c \\$(srcdir)/ada/trans.c \\$(srcdir)/ada/utils.c\"\n \n outputs=ada/Makefile"}, {"sha": "c9bac372cef7bc75faec4bc885963e0127b0479e", "filename": "gcc/configure", "status": "modified", "additions": 5353, "deletions": 5842, "changes": 11195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793"}, {"sha": "637109996841617379982c952d3478e30c298947", "filename": "gcc/configure.ac", "status": "modified", "additions": 8, "deletions": 91, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -349,11 +349,11 @@ AC_CACHE_CHECK(\n   CFLAGS=\"$save_CFLAGS\"\n   ])\n \n-strict1_warn=\n+strict_warn=\n if test $ac_cv_prog_cc_w_no_long_long = yes \\\n    && test $ac_cv_prog_cc_w_no_variadic_macros = yes \\\n    && test $ac_cv_prog_cc_w_no_overlength_strings = yes ; then\n-  strict1_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings\"\n+  strict_warn=\"-pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings\"\n fi\n \n # Add -Wold-style-definition if it's accepted\n@@ -368,7 +368,7 @@ AC_CACHE_CHECK(\n   CFLAGS=\"$save_CFLAGS\"\n   ])\n if test $ac_cv_prog_cc_w_old_style_definition = yes ; then\n-  strict1_warn=\"${strict1_warn} -Wold-style-definition\"\n+  strict_warn=\"${strict_warn} -Wold-style-definition\"\n fi\n \n # Add -Wmissing-format-attribute if it's accepted\n@@ -383,19 +383,17 @@ AC_CACHE_CHECK(\n   CFLAGS=\"$save_CFLAGS\"\n   ])\n if test $ac_cv_prog_cc_w_missing_format_attribute = yes ; then\n-  strict1_warn=\"${strict1_warn} -Wmissing-format-attribute\"\n+  strict_warn=\"${strict_warn} -Wmissing-format-attribute\"\n fi\n \n # Enable -Werror, period.\n AC_ARG_ENABLE(werror_always, \n [  --enable-werror-always         enable -Werror always], [],\n [enable_werror_always=no])\n if test x${enable_werror_always} = xyes ; then\n-  strict1_warn=\"${strict1_warn} -Werror\"\n-  WERROR=-Werror\n+  strict_warn=\"${strict_warn} -Werror\"\n fi\n-\n-AC_SUBST(strict1_warn)\n+AC_SUBST(strict_warn)\n \n # Get C++ compatibility warning flag, if supported.\n AC_CACHE_CHECK(\n@@ -423,26 +421,12 @@ if test \"x$GCC\" = \"xyes\"; then\n fi\n AC_SUBST(warn_cflags)\n \n-# Enable -Werror in bootstrap stage2 and later.\n+# Enable expensive internal checks\n is_release=\n if test x\"`cat $srcdir/DEV-PHASE`\" != xexperimental; then\n   is_release=yes\n fi\n-AC_ARG_ENABLE(werror, \n-[  --enable-werror         enable -Werror in bootstrap stage2 and later], [],\n-[if test x$is_release = x ; then\n-  # Default to \"yes\" on development branches.\n-  enable_werror=yes\n-else\n-  # Default to \"no\" on release branches.\n-  enable_werror=no\n-fi])\n-if test x$enable_werror = xyes ; then\n-  WERROR=-Werror\n-fi\n-AC_SUBST(WERROR)\n \n-# Enable expensive internal checks\n AC_ARG_ENABLE(checking,\n [  --enable-checking[=LIST]\n \t\t\t  enable expensive run-time checks.  With LIST,\n@@ -972,19 +956,6 @@ AC_C_BIGENDIAN\n # UNSORTED\n # --------\n \n-# Stage specific cflags for build.\n-stage1_cflags=\n-case $build in\n-vax-*-*)\n-  if test x$GCC = xyes\n-  then\n-    stage1_cflags=\"-Wa,-J\"\n-  else\n-    stage1_cflags=\"-J\"\n-  fi\n-  ;;\n-esac\n-AC_SUBST(stage1_cflags)\n \n # These libraries may be used by collect2.\n # We may need a special search path to get them linked.\n@@ -1628,25 +1599,6 @@ do\n done\n tmake_file=\"${tmake_file_}\"\n \n-# If the host doesn't support symlinks, modify CC in\n-# FLAGS_TO_PASS so CC=\"stage1/xgcc -Bstage1/\" works.\n-# Otherwise, we can use \"CC=$(CC)\".\n-rm -f symtest.tem\n-case \"$LN_S\" in\n-\t*-s*)\n-\t\tcc_set_by_configure=\"\\$(CC)\"\n-\t\tquoted_cc_set_by_configure=\"\\$(CC)\"\n-\t\tstage_prefix_set_by_configure=\"\\$(STAGE_PREFIX)\"\n-\t\tquoted_stage_prefix_set_by_configure=\"\\$(STAGE_PREFIX)\"\n-\t\t;;\n-\t*)\n-\t\tcc_set_by_configure=\"\\`case '\\$(CC)' in stage*) echo '\\$(CC)' | sed -e 's|stage|../stage|g';; *) echo '\\$(CC)';; esac\\`\"\n-\t\tquoted_cc_set_by_configure=\"\\\\\\`case '\\\\\\$(CC)' in stage*) echo '\\\\\\$(CC)' | sed -e 's|stage|../stage|g';; *) echo '\\\\\\$(CC)';; esac\\\\\\`\"\n-\t\tstage_prefix_set_by_configure=\"\\`case '\\$(STAGE_PREFIX)' in stage*) echo '\\$(STAGE_PREFIX)' | sed -e 's|stage|../stage|g';; *) echo '\\$(STAGE_PREFIX)';; esac\\`\"\n-\t\tquoted_stage_prefix_set_by_configure=\"\\\\\\`case '\\\\\\$(STAGE_PREFIX)' in stage*) echo '\\\\\\$(STAGE_PREFIX)' | sed -e 's|stage|../stage|g';; *) echo '\\\\\\$(STAGE_PREFIX)';; esac\\\\\\`\"\n-\t\t;;\n-esac\n-\n # This is a terrible hack which will go away some day.\n host_cc_for_libada=${CC}\n AC_SUBST(host_cc_for_libada)\n@@ -3473,9 +3425,7 @@ lang_tree_files=\n # These (without \"all_\") are set in each config-lang.in.\n # `language' must be a single word so is spelled singularly.\n all_languages=\n-all_boot_languages=\n all_compilers=\n-all_stagestuff=\n all_outputs='Makefile gccbug libada-mk'\n # List of language makefile fragments.\n all_lang_makefrags=\n@@ -3526,7 +3476,6 @@ changequote([,])dnl\n \tlanguage=\n \tboot_language=\n \tcompilers=\n-\tstagestuff=\n \toutputs=\n \tgtfiles=\n \tsubdir_requires=\n@@ -3561,12 +3510,7 @@ changequote([,])dnl\n \t\tthen all_lang_makefiles=\"$subdir/Makefile\"\n \tfi\n \tall_languages=\"$all_languages $language\"\n-\tif test \"x$boot_language\" = xyes\n-\tthen\n-\t\tall_boot_languages=\"$all_boot_languages $language\"\n-\tfi\n \tall_compilers=\"$all_compilers $compilers\"\n-\tall_stagestuff=\"$all_stagestuff $stagestuff\"\n \tall_outputs=\"$all_outputs $outputs\"\n \tall_gtfiles=\"$all_gtfiles $gtfiles\"\n \tfor f in $gtfiles\n@@ -3601,8 +3545,7 @@ touch Make-hooks\n target_list=\"all.cross start.encap rest.encap tags \\\n \tinstall-common install-man install-info dvi pdf html \\\n \tuninstall info man srcextra srcman srcinfo \\\n-\tmostlyclean clean distclean maintainer-clean \\\n-\tstage1 stage2 stage3 stage4 stageprofile stagefeedback\"\n+\tmostlyclean clean distclean maintainer-clean\"\n \n for t in $target_list\n do\n@@ -3716,7 +3659,6 @@ AC_SUBST(htmldir)\n # Substitute configuration variables\n AC_SUBST(subdirs)\n AC_SUBST(srcdir)\n-AC_SUBST(all_boot_languages)\n AC_SUBST(all_compilers)\n AC_SUBST(all_gtfiles)\n AC_SUBST(all_gtfiles_files_langs)\n@@ -3725,15 +3667,12 @@ AC_SUBST(all_lang_makefrags)\n AC_SUBST(all_lang_makefiles)\n AC_SUBST(all_languages)\n AC_SUBST(all_selected_languages)\n-AC_SUBST(all_stagestuff)\n AC_SUBST(build_exeext)\n AC_SUBST(build_install_headers_dir)\n AC_SUBST(build_xm_file_list)\n AC_SUBST(build_xm_include_list)\n AC_SUBST(build_xm_defines)\n AC_SUBST(check_languages)\n-AC_SUBST(cc_set_by_configure)\n-AC_SUBST(quoted_cc_set_by_configure)\n AC_SUBST(cpp_install_dir)\n AC_SUBST(xmake_file)\n AC_SUBST(tmake_file)\n@@ -3760,8 +3699,6 @@ AC_SUBST(md_file)\n AC_SUBST(objc_boehm_gc)\n AC_SUBST(out_file)\n AC_SUBST(out_object_file)\n-AC_SUBST(stage_prefix_set_by_configure)\n-AC_SUBST(quoted_stage_prefix_set_by_configure)\n AC_SUBST(thread_file)\n AC_SUBST(tm_file_list)\n AC_SUBST(tm_include_list)\n@@ -3816,26 +3753,6 @@ for d in $subdirs doc build\n do\n     test -d $d || mkdir $d\n done\n-# If the host supports symlinks, point stage[1234] at ../stage[1234] so\n-# bootstrapping and the installation procedure can still use\n-# CC=\"stage1/xgcc -Bstage1/\".  If the host doesn't support symlinks,\n-# FLAGS_TO_PASS has been modified to solve the problem there.\n-# This is virtually a duplicate of what happens in configure.lang; we do\n-# an extra check to make sure this only happens if ln -s can be used.\n-case \"$LN_S\" in\n-  *-s*)\n-    for d in ${subdirs} ; do\n-\tSTARTDIR=`${PWDCMD-pwd}`\n-\tcd $d\n-\tfor t in stage1 stage2 stage3 stage4 stageprofile stagefeedback include\n-\tdo\n-\t\trm -f $t\n-\t\t$LN_S ../$t $t 2>/dev/null\n-\tdone\n-\tcd $STARTDIR\n-    done\n-  ;;\n-esac\n ], \n [subdirs='$subdirs'])\n AC_OUTPUT"}, {"sha": "365a41dab2cb20d1dc3bbeb5b5b57091b069dfc8", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -24,14 +24,11 @@\n #\n # language\t- name of language as it would appear in $(LANGUAGES)\n # compilers\t- value to add to $(COMPILERS)\n-# stagestuff\t- files to add to $(STAGESTUFF)\n \n language=\"c++\"\n \n compilers=\"cc1plus\\$(exeext)\"\n \n-stagestuff=\"g++\\$(exeext) g++-cross\\$(exeext) cc1plus\\$(exeext)\"\n-\n target_libs=\"target-libstdc++-v3\"\n \n gtfiles=\"\\$(srcdir)/cp/rtti.c \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/name-lookup.h \\$(srcdir)/cp/name-lookup.c \\$(srcdir)/cp/cp-tree.h \\$(srcdir)/cp/decl.h \\$(srcdir)/cp/call.c \\$(srcdir)/cp/decl.c \\$(srcdir)/cp/decl2.c \\$(srcdir)/cp/pt.c \\$(srcdir)/cp/repo.c \\$(srcdir)/cp/semantics.c \\$(srcdir)/cp/tree.c \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/typeck2.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-lex.c \\$(srcdir)/c-pragma.c \\$(srcdir)/cp/class.c \\$(srcdir)/cp/cp-objcp-common.c\""}, {"sha": "98637a858063d8dd13b5e60fa484059ec198f500", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -640,14 +640,6 @@ Users, standards, GNU Coding Standards}, for details of the standard\n targets.  For GCC, @code{maintainer-clean} should delete\n all generated files in the source directory that are not checked into\n CVS, but should not delete anything checked into CVS@.\n-@item stage1\n-@itemx stage2\n-@itemx stage3\n-@itemx stage4\n-@itemx stageprofile\n-@itemx stagefeedback\n-Move to the stage directory files not included in @code{stagestuff} in\n-@file{config-lang.in} or otherwise moved by the main @file{Makefile}.\n @end table\n \n @item lang.opt\n@@ -707,9 +699,6 @@ languages.\n If defined, a space-separated list of compiler executables that will\n be run by the driver.  The names here will each end\n with @samp{\\$(exeext)}.\n-@item stagestuff\n-If defined, a space-separated list of files that should be moved to\n-the @file{stage@var{n}} directories in each stage of bootstrap.\n @item outputs\n If defined, a space-separated list of files that should be generated\n by @file{configure} substituting values in them.  This mechanism can"}, {"sha": "aaa9b809c900f8d2378676dc5628881d3e5cb6c3", "filename": "gcc/fortran/config-lang.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Ffortran%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Ffortran%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fconfig-lang.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -3,15 +3,12 @@\n #\n # language\t- name of language as it would appear in $(LANGUAGES)\n # compilers\t- value to add to $(COMPILERS)\n-# stagestuff\t- files to add to $(STAGESTUFF)\n # diff_excludes\t- files to ignore when building diffs between two versions.\n \n language=\"fortran\"\n \n compilers=\"f951\\$(exeext)\"\n \n-stagestuff=\"gfortran\\$(exeext) f951\\$(exeext)\"\n-\n target_libs=target-libgfortran\n \n gtfiles=\"\\$(srcdir)/fortran/f95-lang.c \\$(srcdir)/fortran/trans-decl.c \\$(srcdir)/fortran/trans-intrinsic.c \\$(srcdir)/fortran/trans-io.c \\$(srcdir)/fortran/trans-types.c \\$(srcdir)/fortran/trans-types.h \\$(srcdir)/fortran/trans.h \\$(srcdir)/fortran/trans-const.h\""}, {"sha": "6ceced153f23d97bc7c945bb7e6147ae3f727de5", "filename": "gcc/java/config-lang.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fjava%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fjava%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconfig-lang.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -28,14 +28,11 @@\n #\n # language\t- name of language as it would appear in $(LANGUAGES)\n # compilers\t- value to add to $(COMPILERS)\n-# stagestuff\t- files to add to $(STAGESTUFF)\n \n language=\"java\"\n \n compilers=\"jc1\\$(exeext) jvgenmain\\$(exeext)\"\n \n-stagestuff=\"jc1\\$(exeext) gcj\\$(exeext) jvgenmain\\$(exeext) jcf-dump\\$(exeext)\"\n-\n gtfiles=\"\\$(srcdir)/java/java-tree.h \\$(srcdir)/java/jcf.h \\$(srcdir)/java/parse.h \\$(srcdir)/java/builtins.c \\$(srcdir)/java/class.c \\$(srcdir)/java/constants.c \\$(srcdir)/java/decl.c \\$(srcdir)/java/expr.c \\$(srcdir)/java/jcf-parse.c \\$(srcdir)/java/lang.c \\$(srcdir)/java/mangle.c \\$(srcdir)/java/resource.c\"\n \n target_libs=${libgcj_saved}"}, {"sha": "9a394ab83aee8ef8f8ca0865e99bd236abd66992", "filename": "gcc/objc/config-lang.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fobjc%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fobjc%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fconfig-lang.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -24,14 +24,11 @@\n #\n # language\t- name of language as it would appear in $(LANGUAGES)\n # compilers\t- value to add to $(COMPILERS)\n-# stagestuff\t- files to add to $(STAGESTUFF)\n \n language=\"objc\"\n \n compilers=\"cc1obj\\$(exeext)\"\n \n-stagestuff=\"cc1obj\\$(exeext)\"\n-\n target_libs=target-libobjc\n \n # Most of the object files for cc1obj actually come from C."}, {"sha": "66c379678debe9c751b3117116b1db7d107176ec", "filename": "gcc/objcp/config-lang.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fobjcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Fobjcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fconfig-lang.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -24,14 +24,11 @@\n #\n # language\t- name of language as it would appear in $(LANGUAGES)\n # compilers\t- value to add to $(COMPILERS)\n-# stagestuff\t- files to add to $(STAGESTUFF)\n \n language=\"obj-c++\"\n \n compilers=\"cc1objplus\\$(exeext)\"\n \n-stagestuff=\"\"\n-\n # Per GCC Steering Committee.\n build_by_default=\"no\"\n "}, {"sha": "69c4a76e49f4e2089952a706ab2ac29ec1f7bc27", "filename": "gcc/treelang/config-lang.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Ftreelang%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b1f719ae7116ff128a298121b5bdeb29d69a793/gcc%2Ftreelang%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fconfig-lang.in?ref=8b1f719ae7116ff128a298121b5bdeb29d69a793", "patch": "@@ -23,15 +23,12 @@\n #\n # language\t- name of language as it would appear in $(LANGUAGES)\n # compilers\t- value to add to $(COMPILERS)\n-# stagestuff\t- files to add to $(STAGESTUFF)\n # diff_excludes\t- files to ignore when building diffs between two versions.\n \n language=\"treelang\"\n \n compilers=\"tree1\\$(exeext)\"\n \n-stagestuff=\n-\n diff_excludes=\"-x lex.c -x parse.c -x parse.h\"\n headers=\n build_by_default=\"no\""}]}