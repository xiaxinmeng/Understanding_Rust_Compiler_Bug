{"sha": "fcd5374808d93c9f009df243712f8c431a9f5b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNkNTM3NDgwOGQ5M2M5ZjAwOWRmMjQzNzEyZjhjNDMxYTlmNWIwYw==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-09-06T14:54:48Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-09-06T14:54:48Z"}, "message": "arm-protos.h (arm_gen_return_addr_mask): New prototype.\n\n* config/arm/arm-protos.h (arm_gen_return_addr_mask): New\nprototype.\n* config/arm/arm.c (arm_gen_return_addr_mask): New function.\n* config/arm/arm.h (MASK_RETURN_ADDR): Use arm_gen_return_addr_mask\nif not APCS26 and not Thumb or ARMv4-or-higher.  Use gen_int_mode\nrather than GEN_INT.\n* config/arm/arm.md (UNSPEC_CHECK_ARCH): Define.\n(return_addr_mask, *check_arch2): New.\n\nFrom-SVN: r56883", "tree": {"sha": "9b31cc659f193ff4374861cc86236c8c9e9e3da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b31cc659f193ff4374861cc86236c8c9e9e3da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcd5374808d93c9f009df243712f8c431a9f5b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd5374808d93c9f009df243712f8c431a9f5b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd5374808d93c9f009df243712f8c431a9f5b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd5374808d93c9f009df243712f8c431a9f5b0c/comments", "author": null, "committer": null, "parents": [{"sha": "556d006c025885af824930d84776ec7119590850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556d006c025885af824930d84776ec7119590850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556d006c025885af824930d84776ec7119590850"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "815e75ba14054593f7a36ad5aa1c916dfc0f715c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcd5374808d93c9f009df243712f8c431a9f5b0c", "patch": "@@ -1,3 +1,14 @@\n+2002-09-06  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config/arm/arm-protos.h (arm_gen_return_addr_mask): New \n+\tprototype. \n+\t* config/arm/arm.c (arm_gen_return_addr_mask): New function.\n+\t* config/arm/arm.h (MASK_RETURN_ADDR): Use arm_gen_return_addr_mask\n+\tif not APCS26 and not Thumb or ARMv4-or-higher.  Use gen_int_mode\n+\trather than GEN_INT.\n+\t* config/arm/arm.md (UNSPEC_CHECK_ARCH): Define.\n+\t(return_addr_mask, *check_arch2): New.\n+\n 2002-09-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"*adddi3_cc\", \"*adddi3_cconly\", "}, {"sha": "b4e65c24d93222c88c869228ddf435a7eec483b1", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=fcd5374808d93c9f009df243712f8c431a9f5b0c", "patch": "@@ -107,6 +107,7 @@ extern int    arm_gen_movstrqi\t\tPARAMS ((rtx *));\n extern rtx    arm_gen_rotated_half_load\tPARAMS ((rtx));\n extern enum machine_mode arm_select_cc_mode PARAMS ((RTX_CODE, rtx, rtx));\n extern rtx    arm_gen_compare_reg\tPARAMS ((RTX_CODE, rtx, rtx));\n+extern rtx    arm_gen_return_addr_mask\tPARAMS ((void));\n extern void   arm_reload_in_hi\t\tPARAMS ((rtx *));\n extern void   arm_reload_out_hi\t\tPARAMS ((rtx *));\n extern void   arm_reorg\t\t\tPARAMS ((rtx));"}, {"sha": "e56676498953d0adc375f6e26f01e5ed3f698a29", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fcd5374808d93c9f009df243712f8c431a9f5b0c", "patch": "@@ -4914,6 +4914,19 @@ arm_gen_compare_reg (code, x, y)\n   return cc_reg;\n }\n \n+/* Generate a sequence of insns that will generate the correct return\n+   address mask depending on the physical architecture that the program\n+   is running on.  */\n+\n+rtx\n+arm_gen_return_addr_mask ()\n+{\n+  rtx reg = gen_reg_rtx (Pmode);\n+\n+  emit_insn (gen_return_addr_mask (reg));\n+  return reg;\n+}\n+\n void\n arm_reload_in_hi (operands)\n      rtx * operands;"}, {"sha": "e282d5c75a81bc4c70a7e951780e9113d80aa366", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=fcd5374808d93c9f009df243712f8c431a9f5b0c", "patch": "@@ -2753,8 +2753,10 @@ extern int making_const_table;\n      in 26 bit mode, the condition codes must be masked out of the\t\\\n      return address.  This does not apply to ARM6 and later processors\t\\\n      when running in 32 bit mode.  */\t\t\t\t\t\\\n-  ((!TARGET_APCS_32) ? (GEN_INT (RETURN_ADDR_MASK26))\t\t\t\\\n-   : (GEN_INT ((unsigned long)0xffffffff)))\n+  ((!TARGET_APCS_32) ? (gen_int_mode (RETURN_ADDR_MASK26, Pmode))\t\\\n+   : (arm_arch4 || TARGET_THUMB) ?\t\t\t\t\t\\\n+     (gen_int_mode ((unsigned long)0xffffffff, Pmode))\t\t\t\\\n+   : arm_gen_return_addr_mask ())\n \n \f\n /* Define the codes that are matched by predicates in arm.c */"}, {"sha": "15fbde73f042265376459df69fd11f3e58f739a8", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd5374808d93c9f009df243712f8c431a9f5b0c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=fcd5374808d93c9f009df243712f8c431a9f5b0c", "patch": "@@ -69,6 +69,7 @@\n    \t\t\t; instructions setting registers for EH handling\n    \t\t\t; and stack frame generation.  Operand 0 is the\n    \t\t\t; register to \"use\".\n+   (UNSPEC_CHECK_ARCH 7); Set CCs to indicate 26-bit or 32-bit mode.\n   ]\n )\n \n@@ -6797,6 +6798,33 @@\n    (set_attr \"type\" \"load\")]\n )\n \n+;; Generate a sequence of instructions to determine if the processor is\n+;; in 26-bit or 32-bit mode, and return the appropriate return address\n+;; mask.\n+\n+(define_expand \"return_addr_mask\"\n+  [(set (match_dup 1)\n+      (compare:CC_NOOV (unspec [(const_int 0)] UNSPEC_CHECK_ARCH)\n+\t\t       (const_int 0)))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"\")\n+      (if_then_else:SI (eq (match_dup 1) (const_int 0))\n+\t\t       (const_int -1)\n+\t\t       (const_int 67108860)))] ; 0x03fffffc\n+  \"TARGET_ARM\"\n+  \"\n+  operands[1] = gen_rtx_REG (CC_NOOVmode, 24);\n+  \")\n+\n+(define_insn \"*check_arch2\"\n+  [(set (match_operand:CC_NOOV 0 \"cc_register\" \"\")\n+      (compare:CC_NOOV (unspec [(const_int 0)] UNSPEC_CHECK_ARCH)\n+\t\t       (const_int 0)))]\n+  \"TARGET_ARM\"\n+  \"teq\\\\t%|r0, %|r0\\;teq\\\\t%|pc, %|pc\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"conds\" \"set\")]\n+)\n+\n ;; Call subroutine returning any type.\n \n (define_expand \"untyped_call\""}]}