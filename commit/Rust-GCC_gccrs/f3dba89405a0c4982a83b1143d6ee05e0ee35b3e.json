{"sha": "f3dba89405a0c4982a83b1143d6ee05e0ee35b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkYmE4OTQwNWEwYzQ5ODJhODNiMTE0M2Q2ZWUwNWUwZWUzNWIzZQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-12-09T02:30:06Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-12-09T02:30:06Z"}, "message": "remove param_is from nvptx\n\ngcc/\n\n\t* config/nvptx/nvptx.c: Convert htabs to hash_table.\n\nFrom-SVN: r218501", "tree": {"sha": "4282a7107ac98af563fe3710c4a3f990a747725c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4282a7107ac98af563fe3710c4a3f990a747725c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e/comments", "author": null, "committer": null, "parents": [{"sha": "13ef90907ae7fcd64b928059d5d4e74d6edfdfd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ef90907ae7fcd64b928059d5d4e74d6edfdfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ef90907ae7fcd64b928059d5d4e74d6edfdfd8"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "5c70950971e834e1e6be557111307aef4840e033", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3dba89405a0c4982a83b1143d6ee05e0ee35b3e", "patch": "@@ -1,3 +1,7 @@\n+2014-12-08  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* config/nvptx/nvptx.c: Convert htabs to hash_table.\n+\n 2014-12-08  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/64226"}, {"sha": "ebc419f92e8f62cccaaedb46b5eb873f7d81223f", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dba89405a0c4982a83b1143d6ee05e0ee35b3e/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=f3dba89405a0c4982a83b1143d6ee05e0ee35b3e", "patch": "@@ -56,12 +56,24 @@\n /* Record the function decls we've written, and the libfuncs and function\n    decls corresponding to them.  */\n static std::stringstream func_decls;\n-static GTY((if_marked (\"ggc_marked_p\"), param_is (struct rtx_def)))\n-  htab_t declared_libfuncs_htab;\n-static GTY((if_marked (\"ggc_marked_p\"), param_is (union tree_node)))\n-  htab_t declared_fndecls_htab;\n-static GTY((if_marked (\"ggc_marked_p\"), param_is (union tree_node)))\n-  htab_t needed_fndecls_htab;\n+\n+struct declared_libfunc_hasher : ggc_cache_hasher<rtx>\n+{\n+  static hashval_t hash (rtx x) { return htab_hash_pointer (x); }\n+  static bool equal (rtx a, rtx b) { return a == b; }\n+};\n+\n+static GTY((cache))\n+  hash_table<declared_libfunc_hasher> *declared_libfuncs_htab;\n+\n+  struct tree_hasher : ggc_cache_hasher<tree>\n+{\n+  static hashval_t hash (tree t) { return htab_hash_pointer (t); }\n+  static bool equal (tree a, tree b) { return a == b; }\n+};\n+\n+static GTY((cache)) hash_table<tree_hasher> *declared_fndecls_htab;\n+static GTY((cache)) hash_table<tree_hasher> *needed_fndecls_htab;\n \n /* Allocate a new, cleared machine_function structure.  */\n \n@@ -86,12 +98,10 @@ nvptx_option_override (void)\n   write_symbols = NO_DEBUG;\n   debug_info_level = DINFO_LEVEL_NONE;\n \n-  declared_fndecls_htab\n-    = htab_create_ggc (17, htab_hash_pointer, htab_eq_pointer, NULL);\n-  needed_fndecls_htab\n-    = htab_create_ggc (17, htab_hash_pointer, htab_eq_pointer, NULL);\n+  declared_fndecls_htab = hash_table<tree_hasher>::create_ggc (17);\n+  needed_fndecls_htab = hash_table<tree_hasher>::create_ggc (17);\n   declared_libfuncs_htab\n-    = htab_create_ggc (17, htab_hash_pointer, htab_eq_pointer, NULL);\n+    = hash_table<declared_libfunc_hasher>::create_ggc (17);\n }\n \n /* Return the mode to be used when declaring a ptx object for OBJ.\n@@ -455,7 +465,7 @@ nvptx_record_fndecl (tree decl, bool force = false)\n   if (!force && TYPE_ARG_TYPES (TREE_TYPE (decl)) == NULL_TREE)\n     return false;\n \n-  void **slot = htab_find_slot (declared_fndecls_htab, decl, INSERT);\n+  tree *slot = declared_fndecls_htab->find_slot (decl, INSERT);\n   if (*slot == NULL)\n     {\n       *slot = decl;\n@@ -476,7 +486,7 @@ nvptx_record_needed_fndecl (tree decl)\n   if (nvptx_record_fndecl (decl))\n     return;\n \n-  void **slot = htab_find_slot (needed_fndecls_htab, decl, INSERT);\n+  tree *slot = needed_fndecls_htab->find_slot (decl, INSERT);\n   if (*slot == NULL)\n     *slot = decl;\n }\n@@ -818,7 +828,7 @@ nvptx_expand_call (rtx retval, rtx address)\n       && (decl_type == NULL_TREE\n \t  || (external_decl && TYPE_ARG_TYPES (decl_type) == NULL_TREE)))\n     {\n-      void **slot = htab_find_slot (declared_libfuncs_htab, callee, INSERT);\n+      rtx *slot = declared_libfuncs_htab->find_slot (callee, INSERT);\n       if (*slot == NULL)\n \t{\n \t  *slot = callee;\n@@ -2012,25 +2022,15 @@ nvptx_file_start (void)\n   fputs (\"// END PREAMBLE\\n\", asm_out_file);\n }\n \n-/* Called through htab_traverse; call nvptx_record_fndecl for every\n-   SLOT.  */\n-\n-static int\n-write_one_fndecl (void **slot, void *)\n-{\n-  tree decl = (tree)*slot;\n-  nvptx_record_fndecl (decl, true);\n-  return 1;\n-}\n-\n /* Write out the function declarations we've collected.  */\n \n static void\n nvptx_file_end (void)\n {\n-  htab_traverse (needed_fndecls_htab,\n-\t\t write_one_fndecl,\n-\t\t NULL);\n+  hash_table<tree_hasher>::iterator iter;\n+  tree decl;\n+  FOR_EACH_HASH_TABLE_ELEMENT (*needed_fndecls_htab, decl, tree, iter)\n+    nvptx_record_fndecl (decl, true);\n   fputs (func_decls.str().c_str(), asm_out_file);\n }\n \f"}]}