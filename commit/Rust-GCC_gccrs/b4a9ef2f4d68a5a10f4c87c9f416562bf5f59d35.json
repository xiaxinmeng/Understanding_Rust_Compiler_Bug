{"sha": "b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhOWVmMmY0ZDY4YTVhMTBmNGM4N2M5ZjQxNjU2MmJmNWY1OWQzNQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2016-10-12T08:38:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2016-10-12T08:38:49Z"}, "message": "DWARF: space-optimize loc. descr. for integer literals on 32-bit targets\n\nThis enhances location description generation so that the generated\nopcodes for integer literals are as space-efficient when HOST_WIDE_INT\nis 64-bits large than when it's 32-bits large. In particular, this\nreduces the size of the opcodes generated to produce big unsigned\nliterals using small literal integers instead.\n\ngcc/\n\n\t* dwarf2out.c (int_loc_descriptor): Generate opcodes for another\n\tequivalent 32-bit constant (modulo 2**32) when that yields\n\tsmaller instructions.\n\t(size_of_int_loc_descriptor): Update accordingly.\n\ngcc/testsuite/\n\n\t* gnat.dg/debug8.adb: New testcase.\n\nFrom-SVN: r241024", "tree": {"sha": "04fa1e4d55ed57b4c0742c9e0423a0598b7dda3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04fa1e4d55ed57b4c0742c9e0423a0598b7dda3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0dbd22d2eebf14210473be5c37da77083dbbf5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0dbd22d2eebf14210473be5c37da77083dbbf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0dbd22d2eebf14210473be5c37da77083dbbf5f"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "c5a982ee70f762541d38ae54196d9ff1284108c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "patch": "@@ -1,3 +1,10 @@\n+2016-10-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* dwarf2out.c (int_loc_descriptor): Generate opcodes for another\n+\tequivalent 32-bit constant (modulo 2**32) when that yields\n+\tsmaller instructions.\n+\t(size_of_int_loc_descriptor): Update accordingly.\n+\n 2016-10-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* dwarf2out.c (dwarf2out_early_global_decl): For nested"}, {"sha": "b5787ef607ce648f839f42ad6c11fa0cf390684f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "patch": "@@ -11985,20 +11985,35 @@ int_loc_descriptor (HOST_WIDE_INT i)\n \t/* DW_OP_const1u X DW_OP_litY DW_OP_shl takes just 4 bytes,\n \t   while DW_OP_const4u is 5 bytes.  */\n \treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 8);\n+\n+      else if (DWARF2_ADDR_SIZE == 4 && i > 0x7fffffff\n+\t       && size_of_int_loc_descriptor ((HOST_WIDE_INT) (int32_t) i)\n+\t\t  <= 4)\n+\t{\n+\t  /* As i >= 2**31, the double cast above will yield a negative number.\n+\t     Since wrapping is defined in DWARF expressions we can output big\n+\t     positive integers as small negative ones, regardless of the size\n+\t     of host wide ints.\n+\n+\t     Here, since the evaluator will handle 32-bit values and since i >=\n+\t     2**31, we know it's going to be interpreted as a negative literal:\n+\t     store it this way if we can do better than 5 bytes this way.  */\n+\t  return int_loc_descriptor ((HOST_WIDE_INT) (int32_t) i);\n+\t}\n       else if (HOST_BITS_PER_WIDE_INT == 32 || i <= 0xffffffff)\n \top = DW_OP_const4u;\n+\n+      /* Past this point, i >= 0x100000000 and thus DW_OP_constu will take at\n+\t least 6 bytes: see if we can do better before falling back to it.  */\n       else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 8\n \t       && clz + 8 + 255 >= HOST_BITS_PER_WIDE_INT)\n-\t/* DW_OP_const1u X DW_OP_const1u Y DW_OP_shl takes just 5 bytes,\n-\t   while DW_OP_constu of constant >= 0x100000000 takes at least\n-\t   6 bytes.  */\n+\t/* DW_OP_const1u X DW_OP_const1u Y DW_OP_shl takes just 5 bytes.  */\n \treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 8);\n       else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 16\n \t       && clz + 16 + (size_of_uleb128 (i) > 5 ? 255 : 31)\n \t\t  >= HOST_BITS_PER_WIDE_INT)\n \t/* DW_OP_const2u X DW_OP_litY DW_OP_shl takes just 5 bytes,\n-\t   DW_OP_const2u X DW_OP_const1u Y DW_OP_shl takes 6 bytes,\n-\t   while DW_OP_constu takes in this case at least 6 bytes.  */\n+\t   DW_OP_const2u X DW_OP_const1u Y DW_OP_shl takes 6 bytes.  */\n \treturn int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT - clz - 16);\n       else if (clz + ctz >= HOST_BITS_PER_WIDE_INT - 32\n \t       && clz + 32 + 31 >= HOST_BITS_PER_WIDE_INT\n@@ -12223,6 +12238,10 @@ size_of_int_loc_descriptor (HOST_WIDE_INT i)\n \t       && clz + 8 + 31 >= HOST_BITS_PER_WIDE_INT)\n \treturn size_of_int_shift_loc_descriptor (i, HOST_BITS_PER_WIDE_INT\n \t\t\t\t\t\t    - clz - 8);\n+      else if (DWARF2_ADDR_SIZE == 4 && i > 0x7fffffff\n+\t       && size_of_int_loc_descriptor ((HOST_WIDE_INT) (int32_t) i)\n+\t\t  <= 4)\n+\treturn size_of_int_loc_descriptor ((HOST_WIDE_INT) (int32_t) i);\n       else if (HOST_BITS_PER_WIDE_INT == 32 || i <= 0xffffffff)\n \treturn 5;\n       s = size_of_uleb128 ((unsigned HOST_WIDE_INT) i);"}, {"sha": "4a991d9ec431828bd3bf7dab2fe5cdaac9d90d1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "patch": "@@ -1,3 +1,7 @@\n+2016-10-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gnat.dg/debug8.adb: New testcase.\n+\n 2016-10-12  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gnat.dg/debug9.adb: New testcase."}, {"sha": "fabcc22d06ffad1293a2c446c0d04ae9cc6cd4fa", "filename": "gcc/testsuite/gnat.dg/debug8.adb", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug8.adb?ref=b4a9ef2f4d68a5a10f4c87c9f416562bf5f59d35", "patch": "@@ -0,0 +1,29 @@\n+-- { dg-do compile }\n+-- { dg-options \"-cargs -g -fgnat-encodings=minimal -dA\" }\n+-- { dg-final { scan-assembler-not \"DW_OP_const4u\" } }\n+-- { dg-final { scan-assembler-not \"DW_OP_const8u\" } }\n+\n+--  The DW_AT_byte_size attribute DWARF expression for the\n+--  DW_TAG_structure_type DIE that describes Rec_Type contains the -4u literal.\n+--  Check that it is not created using an inefficient encoding (DW_OP_const1s\n+--  is expected).\n+\n+procedure Debug8 is\n+\n+   type Rec_Type (I : Integer) is record\n+      B : Boolean;\n+      case I is\n+         when 0 =>\n+            null;\n+         when 1 .. 10 =>\n+            C : Character;\n+         when others =>\n+            N : Natural;\n+      end case;\n+   end record;\n+\n+   R : access Rec_Type := null;\n+\n+begin\n+   null;\n+end Debug8;"}]}