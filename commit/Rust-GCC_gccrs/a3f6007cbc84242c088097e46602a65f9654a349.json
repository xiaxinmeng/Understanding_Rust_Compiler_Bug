{"sha": "a3f6007cbc84242c088097e46602a65f9654a349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmNjAwN2NiYzg0MjQyYzA4ODA5N2U0NjYwMmE2NWY5NjU0YTM0OQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-10-24T13:22:11Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-10-24T13:22:11Z"}, "message": "Cross-port exception-safety and move fixes of std::any to std::experimental::any.\n\nCross-port exception-safety and move fixes of std::any to\nstd::experimental::any.\n* include/experimental/any (operator=(const any&)):\nMake strongly exception-safe.\n(operator=(any&&)): clear() unconditionally in the case where\nrhs has a value.\n(_Manager_internal<_Tp>::_S_manage): Move in _Op_xfer, don't copy.\n* testsuite/experimental/any/assign/2.cc: Adjust.\n* testsuite/experimental/any/assign/exception.cc: New.\n* testsuite/experimental/any/cons/2.cc: Adjust.\n* testsuite/experimental/any/misc/any_cast_neg.cc: Ajust.\n\nFrom-SVN: r241479", "tree": {"sha": "cdd80a119a6aa9e73779d62f044b7bced051e78d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd80a119a6aa9e73779d62f044b7bced051e78d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f6007cbc84242c088097e46602a65f9654a349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f6007cbc84242c088097e46602a65f9654a349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f6007cbc84242c088097e46602a65f9654a349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f6007cbc84242c088097e46602a65f9654a349/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "292af537961e1f4ac5e1e7f0e727fb79b5196998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292af537961e1f4ac5e1e7f0e727fb79b5196998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292af537961e1f4ac5e1e7f0e727fb79b5196998"}], "stats": {"total": 213, "additions": 185, "deletions": 28}, "files": [{"sha": "5937af9daa5dc087f2f2b3ec2e23dcffe3874a30", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a3f6007cbc84242c088097e46602a65f9654a349", "patch": "@@ -1,3 +1,17 @@\n+2016-10-24  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tCross-port exception-safety and move fixes of std::any to\n+\tstd::experimental::any.\n+\t* include/experimental/any (operator=(const any&)):\n+\tMake strongly exception-safe.\n+\t(operator=(any&&)): clear() unconditionally in the case where\n+\trhs has a value.\n+\t(_Manager_internal<_Tp>::_S_manage): Move in _Op_xfer, don't copy.\n+\t* testsuite/experimental/any/assign/2.cc: Adjust.\n+\t* testsuite/experimental/any/assign/exception.cc: New.\n+\t* testsuite/experimental/any/cons/2.cc: Adjust.\n+\t* testsuite/experimental/any/misc/any_cast_neg.cc: Ajust.\n+\n 2016-10-24  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tCross-port the latest resolution of LWG2756 and some"}, {"sha": "8fd66e29a52ab7f8b52ff6df60ec108c6536b205", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=a3f6007cbc84242c088097e46602a65f9654a349", "patch": "@@ -191,16 +191,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Copy the state of another object.\n     any& operator=(const any& __rhs)\n     {\n-      if (__rhs.empty())\n-\tclear();\n-      else if (this != &__rhs)\n-\t{\n-\t  if (!empty())\n-\t    _M_manager(_Op_destroy, this, nullptr);\n-\t  _Arg __arg;\n-\t  __arg._M_any = this;\n-\t  __rhs._M_manager(_Op_clone, &__rhs, &__arg);\n-\t}\n+      *this = any(__rhs);\n       return *this;\n     }\n \n@@ -215,8 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tclear();\n       else if (this != &__rhs)\n \t{\n-\t  if (!empty())\n-\t    _M_manager(_Op_destroy, this, nullptr);\n+\t  clear();\n \t  _Arg __arg;\n \t  __arg._M_any = this;\n \t  __rhs._M_manager(_Op_xfer, &__rhs, &__arg);\n@@ -485,7 +475,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__ptr->~_Tp();\n \tbreak;\n       case _Op_xfer:\n-\t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp(*__ptr);\n+\t::new(&__arg->_M_any->_M_storage._M_buffer) _Tp\n+\t  (std::move(*const_cast<_Tp*>(__ptr)));\n \t__ptr->~_Tp();\n \t__arg->_M_any->_M_manager = __any->_M_manager;\n \tconst_cast<any*>(__any)->_M_manager = nullptr;"}, {"sha": "0232af6c6d2e62e153808783f792f1e6fc7db6eb", "filename": "libstdc++-v3/testsuite/experimental/any/assign/2.cc", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2F2.cc?ref=a3f6007cbc84242c088097e46602a65f9654a349", "patch": "@@ -23,28 +23,70 @@\n using std::experimental::any;\n using std::experimental::any_cast;\n \n+bool moved = false;\n+bool copied = false;\n+\n+\n struct X\n {\n-  bool moved = false;\n-  bool moved_from = false;\n   X() = default;\n-  X(const X&) = default;\n-  X(X&& x) : moved(true) { x.moved_from = true; }\n+  X(const X&) { copied = true; }\n+  X(X&& x) { moved = true; }\n+};\n+\n+struct X2\n+{\n+  X2() = default;\n+  X2(const X2&) { copied = true; }\n+  X2(X2&& x) noexcept { moved = true; }\n };\n \n void test01()\n {\n+  moved = false;\n   X x;\n   any a1;\n   a1 = x;\n-  VERIFY(x.moved_from == false);\n+  VERIFY(moved == false);\n   any a2;\n+  copied = false;\n   a2 = std::move(x);\n-  VERIFY(x.moved_from == true);\n-  VERIFY(any_cast<X&>(a2).moved == true );\n+  VERIFY(moved == true);\n+  VERIFY(copied == false);\n }\n \n+void test02()\n+{\n+  moved = false;\n+  X x;\n+  any a1;\n+  a1 = x;\n+  VERIFY(moved == false);\n+  any a2;\n+  copied = false;\n+  a2 = std::move(a1);\n+  VERIFY(moved == false);\n+  VERIFY(copied == false);\n+}\n+\n+void test03()\n+{\n+  moved = false;\n+  X2 x;\n+  any a1;\n+  a1 = x;\n+  VERIFY(copied && moved);\n+  any a2;\n+  moved = false;\n+  copied = false;\n+  a2 = std::move(a1);\n+  VERIFY(moved == true);\n+  VERIFY(copied == false);\n+ }\n+\n int main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}, {"sha": "f125213ded1ab549079b076d9dfaf3749d20cda3", "filename": "libstdc++-v3/testsuite/experimental/any/assign/exception.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fassign%2Fexception.cc?ref=a3f6007cbc84242c088097e46602a65f9654a349", "patch": "@@ -0,0 +1,77 @@\n+// { dg-do run { target c++14 } }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/any>\n+#include <testsuite_hooks.h>\n+\n+using std::experimental::any;\n+using std::experimental::any_cast;\n+\n+bool should_throw = false;\n+struct Bad\n+{\n+  Bad() = default;\n+  Bad(const Bad&) {if (should_throw) throw 666;}\n+};\n+\n+struct Bad2\n+{\n+  Bad2() = default;\n+  Bad2(const Bad2&) {if (should_throw) throw 666;}\n+  Bad2(Bad2&&) noexcept {}\n+};\n+\n+int del_count = 0;\n+struct Good \n+{\n+  Good() = default;\n+  Good(const Good&) = default;\n+  Good(Good&&) = default;\n+  ~Good() {++del_count;}\n+};\n+\n+int main()\n+{\n+    any a1 = Good();\n+    del_count = 0;\n+    try {\n+        Bad b;\n+        any a2 = b;\n+        should_throw = true;\n+        a1 = a2;\n+    } catch (...) {\n+        auto x = any_cast<Good>(a1);\n+        VERIFY( del_count == 0 );\n+        VERIFY( !a1.empty() );\n+        any_cast<Good>(a1);\n+    }\n+    any a3 = Good();\n+    del_count = 0;\n+    try {\n+        Bad2 b;\n+        any a4 = b;\n+        should_throw = true;\n+        a3 = a4;\n+    } catch (...) {\n+        auto x = any_cast<Good>(a1);\n+        VERIFY( del_count == 0 );\n+        VERIFY( !a1.empty() );\n+        any_cast<Good>(a1);\n+    }\n+}"}, {"sha": "c79573b3ea940410130b37d285a35b9c4fddc91f", "filename": "libstdc++-v3/testsuite/experimental/any/cons/2.cc", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fcons%2F2.cc?ref=a3f6007cbc84242c088097e46602a65f9654a349", "patch": "@@ -23,26 +23,59 @@\n using std::experimental::any;\n using std::experimental::any_cast;\n \n+bool moved = false;\n+bool copied = false;\n+\n struct X\n {\n-  bool moved = false;\n-  bool moved_from = false;\n   X() = default;\n-  X(const X&) = default;\n-  X(X&& x) : moved(true) { x.moved_from = true; }\n+  X(const X&) { copied = true; }\n+  X(X&& x) { moved = true; }\n+};\n+\n+struct X2\n+{\n+  X2() = default;\n+  X2(const X2&) { copied = true; }\n+  X2(X2&& x) noexcept { moved = true; }\n };\n \n void test01()\n {\n+  moved = false;\n   X x;\n   any a1(x);\n-  VERIFY(x.moved_from == false);\n+  VERIFY(moved == false);\n   any a2(std::move(x));\n-  VERIFY(x.moved_from == true);\n-  VERIFY(any_cast<X&>(a2).moved == true );\n+  VERIFY(moved == true);\n+}\n+\n+void test02()\n+{\n+  moved = false;\n+  X x;\n+  any a1(x);\n+  VERIFY(moved == false);\n+  copied = false;\n+  any a2(std::move(a1));\n+  VERIFY(copied == false);\n+}\n+\n+void test03()\n+{\n+  moved = false;\n+  X2 x;\n+  any a1(x);\n+  VERIFY(moved == false);\n+  copied = false;\n+  any a2(std::move(a1));\n+  VERIFY(copied == false);\n+  VERIFY(moved == true);\n }\n \n int main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}, {"sha": "924e798854ea1587c95af36d742c2ae582b57f7b", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f6007cbc84242c088097e46602a65f9654a349/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=a3f6007cbc84242c088097e46602a65f9654a349", "patch": "@@ -25,5 +25,5 @@ void test01()\n   using std::experimental::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 369 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 359 }\n }"}]}