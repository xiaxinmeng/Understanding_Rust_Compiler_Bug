{"sha": "e87559d202d90e614315203f38f9aa2f5881d36e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg3NTU5ZDIwMmQ5MGU2MTQzMTUyMDNmMzhmOWFhMmY1ODgxZDM2ZQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-28T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-28T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "a331ca6194a71caddf610e0ba4fc74157fa9b7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a331ca6194a71caddf610e0ba4fc74157fa9b7e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e87559d202d90e614315203f38f9aa2f5881d36e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87559d202d90e614315203f38f9aa2f5881d36e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87559d202d90e614315203f38f9aa2f5881d36e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87559d202d90e614315203f38f9aa2f5881d36e/comments", "author": null, "committer": null, "parents": [{"sha": "fb6b29c85c469bef65576d40dadd5e704a173bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6b29c85c469bef65576d40dadd5e704a173bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6b29c85c469bef65576d40dadd5e704a173bdd"}], "stats": {"total": 606, "additions": 605, "deletions": 1}, "files": [{"sha": "803140101b157fb8c4a312e5ab298abc8d56b9ad", "filename": "contrib/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,9 @@\n+2020-11-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Use regex for cherry pick prefix.\n+\t* gcc-changelog/test_email.py: Test it.\n+\t* gcc-changelog/test_patches.txt: Likewise.\n+\n 2020-11-25  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Use revert_regex instead"}, {"sha": "e6462c04aa449d37d062e8293dfa7dba14a875ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,83 @@\n+2020-11-27  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR other/98027\n+\t* doc/install.texi: Default to --enable-cet=auto.\n+\n+2020-11-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-oacc-kernels-decompose.cc (flatten_binds): Don't choke on\n+\tempty GIMPLE sequence, and examine all statements contained in\n+\tinner 'GIMPLE_BIND'.\n+\n+2020-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98024\n+\t* tree-ssa-pre.c (insert): Fix successor RPO order check.\n+\t(do_pre_regular_insertion): When inserting an assignment\n+\tin place of an all-same-value PHI still record that into\n+\tPHI_GEN.\n+\n+2020-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-ssanames.c (get_range_info): Handle INTEGER_CST by returning\n+\tVR_RANGE with both *min and *max set to the wide_int value of the\n+\tINTEGER_CST.  Return VR_VARYING for non-SSA_NAMEs.\n+\t* match.pd ((t * 2) / 2) -> t): Handle also @0 being INTEGER_CST.\n+\tSimplify by calling get_range_info on everything.\n+\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Simplify by calling\n+\tget_range_info on everything.\n+\t* tree-scalar-evolution.c (iv_can_overflow_p): Likewise.\n+\n+2020-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/88101\n+\t* gimple-fold.c (clear_padding_type): Ignore fields with is_empty_type\n+\ttypes.\n+\n+2020-11-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/97880\n+\t* omp-expand.c (expand_oacc_collapse_init, expand_oacc_collapse_vars):\n+\tUse now passed diff_type.\n+\t(expand_oacc_for): Take largest type for diff_type, taking tiling\n+\tand collapsing into account.\n+\n+2020-11-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.opt\n+\t(-param=aarch64-autovec-preference): Define.\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n+\tSet aarch64_sve_compare_costs to 0 when preferring only Advanced\n+\tSIMD.\n+\t(aarch64_cmp_autovec_modes): Define.\n+\t(aarch64_preferred_simd_mode): Adjust to use the above.\n+\t(aarch64_autovectorize_vector_modes): Likewise.\n+\t* doc/invoke.texi: Document aarch64-autovec-preference param.\n+\n+2020-11-27  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (altivec_expand_vec_set_builtin):\n+\tChange call param 2 from type int to rtx.\n+\t* config/rs6000/rs6000-protos.h (rs6000_expand_vector_set):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init):\n+\tChange call param 2 from type int to rtx.\n+\t(rs6000_expand_vector_set): Likewise.\n+\t* config/rs6000/vector.md (vec_set<mode>): Support both constant\n+\tand variable index vec_set.\n+\n+2020-11-27  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_output_addr_vec_elt): Declare.\n+\t* config/rs6000/rs6000.c (TARGET_ASM_GENERATE_PIC_ADDR_DIFF_VEC):\n+\tDefine.\n+\t(rs6000_gen_pic_addr_diff_vec, rs6000_output_addr_vec_elt): Implement.\n+\t* config/rs6000/rs6000.h (CASE_VECTOR_PC_RELATIVE,\n+\tCASE_VECTOR_MODE, ASM_OUTPUT_ADDR_VEC_ELT): Define.\n+\t* config/rs6000/rs6000.md (tablejump<mode>_absolute,\n+\ttablejump<mode>_absolute_nospec): New expanders.\n+\t* config/rs6000/rs6000.opt (mrelative-jumptables): New.\n+\n 2020-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/96607"}, {"sha": "b79287fabff2879a5ca9765052549a58a84b05e4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1 +1 @@\n-20201127\n+20201128"}, {"sha": "83f7d8ad61edcaf71388e8b74346d5e54c071d11", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,256 @@\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuef.adb (Integer_To_Fixed): Take into account the\n+\textra digit when scaling up the input.\n+\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Restrict previous\n+\tchange to fixed-point types.\n+\t(Scan_Integral_Digits): Likewise.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Parent_Is_Boolean): Simplify.\n+\t(Resolve_Op_Not): Reduce scope of a local variable.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* cstand.adb: Simplify with Append_New_Elmt.\n+\t* sem_util.adb: Likewise.\n+\n+2020-11-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Fold_Shift): Fix evaluation of Shift_Right on\n+\tnegative values.\n+\n+2020-11-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call): Properly split\n+\tTransform_Function_Array and Modify_Tree_For_C.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.ads (Compile_Time_Compare): Restore parameter Diff to\n+\tbe of an access type.\n+\t* sem_eval.adb (Compile_Time_Compare): Adapt body and callers.\n+\t* sem_attr.adb (Eval_Attribute): Adapt callers.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Round Extra.\n+\t(Scan_Integral_Digits): Likewise.\n+\n+2020-11-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Selected_Range_Checks): Adapt the condition for\n+\tapplying range checks so that it is not done inside generics.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_fixd.adb (Build_Double_Divide): Only use a 128-bit\n+\tdivision if one of the operands is larger than 64 bits.\n+\t(Build_Double_Divide_Code): Likewise.\n+\t(Build_Scaled_Divide): Likewise.\n+\t(Build_Scaled_Divide_Code): Likewise.\n+\n+2020-11-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-os_lib.adb (To_GM_Time): Return valid and consistent\n+\tvalues for Invalid_Time.\n+\n+2020-11-27  Steve Baird  <baird@adacore.com>\n+\n+\t* snames.ads-tmpl: Define new Name_Stable_Properties Name_Id\n+\tvalue.\n+\t* aspects.ads, aspects.adb: Add new Aspect_Stable_Properties\n+\tenumeration literal to Aspect_Id type. Add Class_Present\n+\tparameter to Find_Aspect and related\n+\tfunctions (Find_Value_Of_Aspect and Has_Aspect).\n+\t* sem_util.adb (Has_Nontrivial_Precondition): Fix\n+\tpreviously-latent bug uncovered by adding Class_Present\n+\tparameter to Aspect.Find_Aspect. The code was wrong before, but\n+\twith the change the bug was more likely to make a user-visible\n+\tdifference.\n+\t* sem_ch6.adb (Analyze_Operator_Symbol): If a string literal\n+\tlike \"abs\" or \"-\" occurs in a Stable_Properties aspect\n+\tspecification, then it is to be interpreted as an operator\n+\tsymbol and not as a string literal.\n+\t* sem_ch13.ads: Export new Parse_Aspect_Stable_Properties\n+\tfunction, analogous to the existing Parse_Aspect_Aggregate\n+\texported procedure.\n+\t* sem_ch13.adb: (Parse_Aspect_Stable_Properties): New function;\n+\tanalogous to existing Parse_Aspect_Aggregate.\n+\t(Validate_Aspect_Stable_Properties): New procedure; analogous to\n+\texisting Validate_Aspect_Aggregate. Called from the same case\n+\tstatement (casing on an Aspect_Id value) where\n+\tValidate_Aspect_Aggregate is called.\n+\t(Resolve_Aspect_Stable_Properties): New procedure; analogous to\n+\texisting Resolve_Aspect_Aggregate. Called from the same two case\n+\tstatements (each casing on an Aspect_Id value) where\n+\tResolve_Aspect_Aggregate is called.\n+\t(Analyze_Aspect_Specifications): Set Has_Delayed_Aspects and\n+\tIs_Delayed_Aspect attributes for Aspect_Stable_Properties aspect\n+\tspecifications.\n+\t(Check_Aspect_At_End_Of_Declarations): The syntactic\n+\t\"expression\" for a Stable_Properties aspect specification is not\n+\tsemantically an expression; it doesn't have a type. Thus, force\n+\tT to be empty in this case.\n+\t* contracts.adb (Expand_Subprogram_Contract): Add call to new\n+\tlocal procedure,\n+\tExpand_Subprogram_Contract.Add_Stable_Property_Contracts, which\n+\tgenerates Postcondition pragmas corresponding to stable property\n+\tchecks.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst:\n+\t(Assertion_Policy): Move \"Default_Initial_Condition\" from\n+\tID_ASSERTION_KIND to RM_ASSERTION_KIND section.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst\n+\t(Assertion_Policy): Add \"Default_Initial_Condition\",\n+\t\"Initial_Condition\" and \"Subprogram_Variant\".\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Is_Valid_Assertion_Kind): Return False on\n+\t\"Assertion_Policy\"\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* make.adb (GNAT_Flag): Change to \"-gnatg\".\n+\t(Compile): Adjust comments accordingly.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Rewrite_Comparison): Add assertion to confirm\n+\tthat evaluation folds comparisons with static operands; when\n+\tfolding comparison with non-static operands, the resulting\n+\tliteral is non-static.\n+\t* sem_eval.adb (Eval_Relational_Op): Refactor nested IF\n+\tstatement for the special case in the THEN branch; move code for\n+\tthe \"general case\" out of the ELSE branch.\n+\t* sem_res.adb (Resolve_Comparison_Op): Only apply a dubious\n+\tspecial-case for GNATprove in the GNATprove_Mode.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.ads (Compile_Time_Compare): Change parameter Diff\n+\tfrom access to mode out.\n+\t* sem_eval.adb (Compile_Time_Compare): Adapt body and callers.\n+\t* sem_attr.adb (Eval_Attribute): Adapt callers.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Multiply): Move down block calling\n+\tNarrow_Large_Operation if the type is Universal_Integer.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/a-nbnbre.adb: Remove clauses for System.Img_Real and\n+\tadd them for System.Unsigned_Types.\n+\t(Float_Conversions.To_Big_Real): Reimplement.\n+\t(Float_Conversions.From_Big_Real): Likewise.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads (Determine_Range_To_Discrete): New procedure.\n+\t* checks.adb (Apply_Scalar_Range_Check): Call it to determine\n+\ta range for the expression when the target type is discrete.\n+\tAnd also apply the tests for discrete types to fixed-point\n+\ttypes when they are treated as integers.\n+\t(Apply_Type_Conversion_Checks): Apply checks to conversions\n+\tinvolving fixed-point types when they are treated as integers.\n+\t(Determine_Range) <N_Type_Conversion>: Factor out code into...\n+\t(Determine_Range_To_Discrete): ...this new procedure and add\n+\tsupport for fixed-point types when they are treated as integers.\n+\t* einfo.ads (Type_High_Bound): Remove obsolete sentence.\n+\t(Type_Low_Bound): Likewise.\n+\t* exp_ch4.adb (Discrete_Range_Check): Remove obsolete code.\n+\t(Real_Range_Check): Likewise.\n+\t(Expand_N_Type_Conversion): In case of a no-op conversion, clear\n+\tthe Do_Range_Check flag on the operand before substituting it.\n+\tRemove calls to Real_Range_Check and Discrete_Range_Check that\n+\tare not guarded by the Do_Range_Check flag, and an assertion.\n+\t* sem_res.adb (Resolve_Type_Conversion): Always apply range\n+\tchecks in GNATprove mode; in normal mode, use the updated type\n+\tof the operand in the test against Universal_Fixed.  Remove\n+\tobsolete code setting the Do_Range_Check flag at the end.\n+\n+2020-11-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Change \"Ref Manual\" to RM;\n+\treplace uses of an unnecessary \"Ok\" variable with RETURN\n+\tstatements; replace nested IF with ELSIF.\n+\n+2020-11-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnarl/s-tasren.adb (Local_Complete_Rendezvous): Always call\n+\tDefer_Abort.\n+\t* libgnat/a-except.adb: Abort does not need to be deferred.\n+\t* libgnarl/s-tpobop.adb (Exceptional_Complete_Entry_Body): Abort\n+\tnever needs to be undeferred here.\n+\t* exp_ch11.adb (Expand_Exception_Handlers): Remove difference\n+\tbetween ZCX and SJLJ.\n+\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Remove different\n+\thandling for sjlj.\n+\t* exp_sel.ads, exp_sel.adb (Build_Abort_Block,\n+\tBuild_Abort_Block_Handler): Ditto.\n+\n+2020-11-27  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): declare new Check_No_Return\n+\tfunction and call it.\n+\n+2020-11-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Object): Consistently use\n+\tNew_Copy_Tree instead of New_Copy.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_fixd.adb (Build_Conversion): Adjust head comment.\n+\t(Build_Divide): Likewise.\n+\t(Build_Double_Divide): Likewise.\n+\t(Build_Multiply): Likewise.\n+\t(Build_Rem): Likewise.\n+\t(Build_Scaled_Divide): Likewise.\n+\n+2020-11-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-genbig.ads, libgnat/s-genbig.adb (To_Bignum): New\n+\tvariant taking an Unsigned_128.\n+\t* libgnat/a-nbnbin.adb (To_Big_Integer): Add support for 128\n+\tbits signed and unsigned types.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-imagef.adb (Set_Image_Fixed): Pass the full value\n+\tof the quotient to Set_Image_Integer during the first round and\n+\tadjust the handling of the minus sign.\n+\n+2020-11-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbre.adb (\"=\", \"<\"): Fix.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuer.adb (Scan_Raw_Real): Move pragma Annotate around\n+\tand adjust its parameters.\n+\n+2020-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_fixd.adb (Build_Double_Divide): Use the RM size of types and\n+\ta more precise estimate for the size of the denominator.\n+\t(Build_Double_Divide_Code): Likewise.\n+\t(Build_Multiply): Use a more precise estimate for the size of the\n+\tresult.\n+\t(Build_Scaled_Divide):  Use the RM size of types and a more precise\n+\testimate for the size of the numerator.\n+\t(Build_Scaled_Divide_Code): Likewise.\n+\n 2020-11-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.rtl <sparc*-sun-solaris*> (THREADSLIB): Remove."}, {"sha": "cb81f21164b4784a91588562d84546d02ebae8e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,8 @@\n+2020-11-27  Martin Sebor  <msebor@redhat.com>\n+\n+\t* error.c (add_quotes): Revert previous change and use pragma to\n+\tsuppress -Wformat-diag.\n+\n 2020-11-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++spec.c (TIMELIB, TIME_LIBRARY): Remove."}, {"sha": "d468afbcdae62314c62a0d54ec6cbbe0f89348f7", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,19 @@\n+2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd db0df3f7e.\n+\t* types.cc (TypeVisitor::visit (TypeFunction *)): Remove LINKpascal.\n+\n+2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc (maybe_expand_intrinsic): Handle new intrinsics.\n+\t* intrinsics.def (INTRINSIC_COS): Add float and double overloads.\n+\t(INTRINSIC_FABS): Likewise.\n+\t(INTRINSIC_LDEXP): Likewise.\n+\t(INTRINSIC_RINT): Likewise.\n+\t(INTRINSIC_RNDTOL): Likewise.\n+\t(INTRINSIC_SIN): Likewise.\n+\t(INTRINSIC_TOPREC): Adjust signature.\n+\n 2020-11-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/97889"}, {"sha": "d631b713a874e3deac66c4f6237f9b65be877b4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,83 @@\n+2020-11-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/97602\n+\t* gcc.dg/cpp/line9.c, gcc.dg/cpp/line10.c: New tests.\n+\n+2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/intrinsics.d: Adjust patterns in scan-tree-dump.\n+\n+2020-11-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR testsuite/98036\n+\t* gcc.target/i386/fma4-256-maccXX.c (check_maccps):\n+\tRemove unnecessary postfix increment on a returned variable.\n+\t(check_maccpd): Ditto.\n+\t* gcc.target/i386/fma4-256-msubXX.c (check_msubps): Ditto.\n+\t(check_msubpd): Ditto.\n+\t* gcc.target/i386/fma4-256-nmaccXX.c (check_nmaccps): Ditto.\n+\t(check_nmaccpd): Ditto.\n+\t* gcc.target/i386/fma4-256-nmsubXX.c (check_nmsubps): Ditto.\n+\t(check_nmsubpd): Ditto.\n+\t* gcc.target/i386/fma4-maccXX.c (check_maccps): Ditto.\n+\t(check_maccpd): Ditto.\n+\t(check_maccss): Ditto.\n+\t(check_maccsd): Ditto.\n+\t* gcc.target/i386/fma4-msubXX.c (check_msubps): Ditto.\n+\t(check_msubpd): Ditto.\n+\t(check_msubss): Ditto.\n+\t(check_msubsd): Ditto.\n+\t* gcc.target/i386/fma4-nmaccXX.c (check_nmaccps): Ditto.\n+\t(check_nmaccpd): Ditto.\n+\t(check_nmaccss): Ditto.\n+\t(check_nmaccsd): Ditto.\n+\t* gcc.target/i386/fma4-nmsubXX.c (check_nmsubps): Ditto.\n+\t(check_nmsubpd): Ditto.\n+\t(check_nmsubss): Ditto.\n+\t(check_nmsubsd): Ditto.\n+\t* gcc.target/i386/xop-haddX.c (check_sbyte2word): Add missing return.\n+\t(check_sbyte2dword):\n+\tRemove unnecessary postfix increment on a returned value.\n+\t(check_sbyte2qword): Ditto.\n+\t(check_sword2dword): Add missing return.\n+\t(check_sword2qword):\n+\tRemove unnecessary postfix increment on a returned value.\n+\t(check_dword2qword): Add missing return.\n+\t* gcc.target/i386/xop-hadduX.c (check_byte2word): Add missing return.\n+\t(check_byte2dword):\n+\tRemove unnecessary postfix increment on a returned value.\n+\t(check_byte2qword): Ditto.\n+\t(check_word2dword): Add missing return.\n+\t(check_word2qword):\n+\tRemove unnecessary postfix increment on a returned value.\n+\t(check_word2qword): Add missing return.\n+\t* gcc.target/i386/xop-hsubX.c (check_sbyte2word): Add missing return.\n+\t(check_sword2dword): Ditto.\n+\t(check_sword2qword): Ditto.\n+\n+2020-11-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/kernels-decompose-ice-1.c: Adjust.\n+\t* c-c++-common/goacc/kernels-decompose-ice-2.c: Likewise.\n+\n+2020-11-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/requires-4.f90: Fix typo in '!$omp' clause.\n+\n+2020-11-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/requires-4.f90: Fix '!$omp' syntax.\n+\n+2020-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/88101\n+\t* g++.dg/torture/builtin-clear-padding-3.C: New test.\n+\n+2020-11-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR c/97880\n+\t* gcc.dg/goacc/tile-1.c: New test.\n+\n 2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/97997"}, {"sha": "56c4b16c32a6eb1836e23d42f47908668e74743a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,9 @@\n+2020-11-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/97602\n+\t* directives.c (strtolinenum): Check for overflow before it\n+\toccurs.  Correct comment.\n+\n 2020-11-24  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/cpplib.h (struct cpp_hashnode): Add deferred field."}, {"sha": "0957b1a9dd5b4199a648f9c60323a687857c03e1", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,32 @@\n+2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/98025\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac (DCFG_ENABLE_CET): Substitute.\n+\t* libdruntime/MERGE: Merge upstream druntime 0fe7974c.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* libdruntime/core/thread.d: Import gcc.config.\n+\t(class Fiber): Add ucontext_t fields when GNU_Enable_CET is true.\n+\t* libdruntime/gcc/config.d.in (GNU_Enable_CET): Define.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime d37ef985.\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES_FREEBSD): Add\n+\tcore/sys/freebsd/config.d\n+\t* libdruntime/Makefile.in: Regenerate.\n+\n+2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* src/MERGE: Merge upstream phobos 38873fe6e.\n+\n+2020-11-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime 5e4492c4.\n+\n 2020-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* configure.tgt: Add *-*-dragonfly* as a supported target."}, {"sha": "030637c5e4f6327564a14f311b973cff428d5075", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87559d202d90e614315203f38f9aa2f5881d36e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87559d202d90e614315203f38f9aa2f5881d36e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e87559d202d90e614315203f38f9aa2f5881d36e", "patch": "@@ -1,3 +1,132 @@\n+2020-11-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp (v3_try_preprocess): Define\n+\tnew proc to preprocess a chunk of code.\n+\t(v3_check_preprocessor_condition): Define new proc to test\n+\ta preprocessor condition depending on GCC or libstdc++ macros.\n+\t(check_v3_target_debug_mode, check_v3_target_normal_mode):\n+\tUse v3_try_preprocess.\n+\t(check_v3_target_normal_namespace)\n+\t(check_v3_target_parallel_mode, check_v3_target_cstdint)\n+\t(check_v3_target_cmath, check_v3_target_atomic_builtins)\n+\t(check_v3_target_gthreads, check_v3_target_gthreads_timed)\n+\t(check_v3_target_sleep, check_v3_target_sched_yield)\n+\t(check_v3_target_string_conversions, check_v3_target_swprintf)\n+\t(check_v3_target_binary_io, check_v3_target_nprocs): Use\n+\tv3_check_preprocessor_condition.\n+\t(check_effective_target_cxx11): Likewise.\n+\t(check_effective_target_random_device): Likewise.\n+\t(check_effective_target_tbb-backend): Likewise.\n+\t(check_effective_target_futex): Likewise.\n+\t(check_v3_target_little_endian) Call check_effective_target_le.\n+\t(check_effective_target_atomic-builtins): New proc to define\n+\tnew effective-target keyword.\n+\t(check_effective_target_gthreads-timed): Likewise.\n+\n+2020-11-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/filesystem/operations/absolute.cc: Avoid\n+\t-Wrange-loop-construct warning.\n+\t* testsuite/27_io/filesystem/path/append/source.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/assign/copy.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/compare/path.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/construct/copy.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/decompose/extension.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/decompose/filename.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/decompose/parent_path.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/decompose/relative_path.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/decompose/root_directory.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/decompose/root_path.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/itr/traversal.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/modifiers/remove_filename.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/modifiers/replace_extension.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/modifiers/replace_filename.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/nonmember/append.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/nonmember/cmp.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/nonmember/cmp_c++20.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/nonmember/hash_value.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_extension.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_filename.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_parent_path.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_relative_path.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_root_directory.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_root_name.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_root_path.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/path/query/has_stem.cc: Likewise.\n+\t* testsuite/27_io/filesystem/path/query/is_relative.cc: Likewise.\n+\t* testsuite/experimental/filesystem/operations/absolute.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/assign/copy.cc: Likewise.\n+\t* testsuite/experimental/filesystem/path/compare/path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/construct/copy.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/decompose/extension.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/decompose/filename.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/decompose/parent_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/decompose/relative_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/decompose/root_directory.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/decompose/root_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/itr/traversal.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/modifiers/remove_filename.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/modifiers/replace_extension.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/modifiers/replace_filename.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/nonmember/hash_value.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_extension.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_filename.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_parent_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_relative_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_root_directory.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_root_name.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_root_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/has_stem.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/path/query/is_relative.cc:\n+\tLikewise.\n+\n+2020-11-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++98/locale.cc (locale::facet::_S_get_c_locale()):\n+\tRevert change to use __is_single_threaded.\n+\t* src/c++98/locale_init.cc (locale::_S_initialize()):\n+\tLikewise.\n+\n 2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/atomic_wait.h (_GLIBCXX_HAVE_ATOMIC_WAIT):"}]}