{"sha": "fef7c8990da15493110118554adfc9a0b779604c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmN2M4OTkwZGExNTQ5MzExMDExODU1NGFkZmM5YTBiNzc5NjA0Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-03-11T19:01:52Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-05-18T20:29:46Z"}, "message": "c++: Prune dead functions.\n\nI was looking at the LCOV coverage report for the C++ FE and\nfound a bunch of unused functions that I think we can remove.\nObviously, I left alone various dump_* and debug_* routines.\nI haven't removed cp_build_function_call although it is also\ncurrently unused.\n\n* lambda_return_type: was used in parser.c in GCC 7, unused since r255950,\n* classtype_has_non_deleted_copy_ctor: appeared in GCC 10, its usage\n  was removed in c++/95350,\n* contains_wildcard_p: used in GCC 9, unused since r276764,\n* get_template_head_requirements: seems to never have been used,\n* check_constrained_friend: seems to never have been used,\n* subsumes_constraints: unused since r276764,\n* push_void_library_fn: usage removed in r248328,\n* get_template_parms_at_level: unused since r157857,\n* get_pattern_parm: unused since r275387.\n\n(Some of the seemingly unused functions, such as set_global_friend, are\nactually used in libcc1.)\n\ngcc/cp/ChangeLog:\n\n\t* class.c (classtype_has_non_deleted_copy_ctor): Remove.\n\t* constraint.cc (contains_wildcard_p): Likewise.\n\t(get_template_head_requirements): Likewise.\n\t(check_constrained_friend): Likewise.\n\t(subsumes_constraints): Likewise.\n\t* cp-tree.h (classtype_has_non_deleted_copy_ctor): Likewise.\n\t(push_void_library_fn): Likewise.\n\t(get_pattern_parm): Likewise.\n\t(get_template_parms_at_level): Likewise.\n\t(lambda_return_type): Likewise.\n\t(get_template_head_requirements): Likewise.\n\t(check_constrained_friend): Likewise.\n\t(subsumes_constraints): Likewise.\n\t* decl.c (push_void_library_fn): Likewise.\n\t* lambda.c (lambda_return_type): Likewise.\n\t* pt.c (get_template_parms_at_level): Likewise.\n\t(get_pattern_parm): Likewise.", "tree": {"sha": "2d8117698161e39c8963a53fc91b69da5fc737a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d8117698161e39c8963a53fc91b69da5fc737a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fef7c8990da15493110118554adfc9a0b779604c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef7c8990da15493110118554adfc9a0b779604c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef7c8990da15493110118554adfc9a0b779604c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef7c8990da15493110118554adfc9a0b779604c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c114759b8c9c9e2ec90b82d92a24b5a71647017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c114759b8c9c9e2ec90b82d92a24b5a71647017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c114759b8c9c9e2ec90b82d92a24b5a71647017"}], "stats": {"total": 160, "additions": 0, "deletions": 160}, "files": [{"sha": "354addde773c0fc1ba57d3ad3c025f6f7f8bea7b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fef7c8990da15493110118554adfc9a0b779604c", "patch": "@@ -5604,19 +5604,6 @@ classtype_has_non_deleted_move_ctor (tree t)\n   return false;\n }\n \n-/* True iff T has a copy constructor that is not deleted.  */\n-\n-bool\n-classtype_has_non_deleted_copy_ctor (tree t)\n-{\n-  if (CLASSTYPE_LAZY_COPY_CTOR (t))\n-    lazily_declare_fn (sfk_copy_constructor, t);\n-  for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n-    if (copy_fn_p (*iter) && !DECL_DELETED_FN (*iter))\n-      return true;\n-  return false;\n-}\n-\n /* If T, a class, has a user-provided copy constructor, copy assignment\n    operator, or destructor, returns that function.  Otherwise, null.  */\n "}, {"sha": "03ce8eb9ff27b5cde2c8f8382144008ecceafdb8", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=fef7c8990da15493110118554adfc9a0b779604c", "patch": "@@ -278,21 +278,6 @@ get_concept_check_template (tree t)\n   return tmpl;\n }\n \n-/* Returns true if any of the arguments in the template argument list is\n-   a wildcard or wildcard pack.  */\n-\n-bool\n-contains_wildcard_p (tree args)\n-{\n-  for (int i = 0; i < TREE_VEC_LENGTH (args); ++i)\n-    {\n-      tree arg = TREE_VEC_ELT (args, i);\n-      if (TREE_CODE (arg) == WILDCARD_DECL)\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n /*---------------------------------------------------------------------------\n                     Resolution of qualified concept names\n ---------------------------------------------------------------------------*/\n@@ -1310,18 +1295,6 @@ maybe_substitute_reqs_for (tree reqs, const_tree decl_)\n   return reqs;\n }\n \n-/* Returns the template-head requires clause for the template\n-   declaration T or NULL_TREE if none.  */\n-\n-tree\n-get_template_head_requirements (tree t)\n-{\n-  tree ci = get_constraints (t);\n-  if (!ci)\n-    return NULL_TREE;\n-  return CI_TEMPLATE_REQS (ci);\n-}\n-\n /* Returns the trailing requires clause of the declarator of\n    a template declaration T or NULL_TREE if none.  */\n \n@@ -3469,31 +3442,6 @@ check_function_concept (tree fn)\n   return NULL_TREE;\n }\n \n-\n-// Check that a constrained friend declaration function declaration,\n-// FN, is admissible. This is the case only when the declaration depends\n-// on template parameters and does not declare a specialization.\n-void\n-check_constrained_friend (tree fn, tree reqs)\n-{\n-  if (fn == error_mark_node)\n-    return;\n-  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL);\n-\n-  // If there are not constraints, this cannot be an error.\n-  if (!reqs)\n-    return;\n-\n-  // Constrained friend functions that don't depend on template\n-  // arguments are effectively meaningless.\n-  if (!uses_template_parms (TREE_TYPE (fn)))\n-    {\n-      error_at (location_of (fn),\n-\t\t\"constrained friend does not depend on template parameters\");\n-      return;\n-    }\n-}\n-\n /*---------------------------------------------------------------------------\n                         Equivalence of constraints\n ---------------------------------------------------------------------------*/\n@@ -3521,16 +3469,6 @@ equivalently_constrained (tree d1, tree d2)\n                      Partial ordering of constraints\n ---------------------------------------------------------------------------*/\n \n-/* Returns true when the constraints in A subsume those in B.  */\n-\n-bool\n-subsumes_constraints (tree a, tree b)\n-{\n-  gcc_assert (!a || TREE_CODE (a) == CONSTRAINT_INFO);\n-  gcc_assert (!b || TREE_CODE (b) == CONSTRAINT_INFO);\n-  return subsumes (a, b);\n-}\n-\n /* Returns true when the constraints in CI strictly subsume\n    the associated constraints of TMPL.  */\n "}, {"sha": "3c900dc08f71f54724d46b38eb0e68b322fcb3c6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fef7c8990da15493110118554adfc9a0b779604c", "patch": "@@ -6568,7 +6568,6 @@ extern bool type_has_constexpr_destructor\t(tree);\n extern bool type_has_virtual_destructor\t\t(tree);\n extern bool classtype_has_move_assign_or_move_ctor_p (tree, bool user_declared);\n extern bool classtype_has_non_deleted_move_ctor (tree);\n-extern bool classtype_has_non_deleted_copy_ctor (tree);\n extern tree classtype_has_depr_implicit_copy\t(tree);\n extern bool classtype_has_op (tree, tree_code);\n extern tree classtype_has_defaulted_op (tree, tree_code);\n@@ -6654,7 +6653,6 @@ extern void pop_abi_namespace\t\t\t(unsigned flags,\n extern tree build_library_fn_ptr\t\t(const char *, tree, int);\n extern tree build_cp_library_fn_ptr\t\t(const char *, tree, int);\n extern tree push_library_fn\t\t\t(tree, tree, tree, int);\n-extern tree push_void_library_fn\t\t(tree, tree, int);\n extern tree push_throw_library_fn\t\t(tree, tree);\n extern void warn_misplaced_attr_for_class_type  (location_t location,\n \t\t\t\t\t\t tree class_type);\n@@ -7179,7 +7177,6 @@ extern tree get_template_info\t\t\t(const_tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);\n extern bool is_specialization_of_friend\t\t(tree, tree);\n-extern tree get_pattern_parm\t\t\t(tree, tree);\n extern int comp_template_args\t\t\t(tree, tree, tree * = NULL,\n \t\t\t\t\t\t tree * = NULL, bool = false);\n extern int template_args_equal                  (tree, tree, bool = false);\n@@ -7253,7 +7250,6 @@ bool template_template_parameter_p\t\t(const_tree);\n bool template_type_parameter_p                  (const_tree);\n extern bool primary_template_specialization_p   (const_tree);\n extern tree get_primary_template_innermost_parameters\t(const_tree);\n-extern tree get_template_parms_at_level (tree, int);\n extern tree get_template_innermost_arguments\t(const_tree);\n extern tree get_template_argument_pack_elems\t(const_tree);\n extern tree get_function_template_decl\t\t(const_tree);\n@@ -7556,7 +7552,6 @@ extern tree build_lambda_expr                   (void);\n extern tree build_lambda_object\t\t\t(tree);\n extern tree begin_lambda_type                   (tree);\n extern tree lambda_capture_field_type\t\t(tree, bool, bool);\n-extern tree lambda_return_type\t\t\t(tree);\n extern tree lambda_proxy_type\t\t\t(tree);\n extern tree lambda_function\t\t\t(tree);\n extern void apply_deduced_return_type           (tree, tree);\n@@ -8109,7 +8104,6 @@ extern tree current_template_constraints\t(void);\n extern tree associate_classtype_constraints     (tree);\n extern tree build_constraints                   (tree, tree);\n extern tree maybe_substitute_reqs_for\t\t(tree, const_tree);\n-extern tree get_template_head_requirements\t(tree);\n extern tree get_trailing_function_requirements\t(tree);\n extern tree get_shorthand_constraints           (tree);\n \n@@ -8135,7 +8129,6 @@ extern tree finish_simple_requirement           (location_t, tree);\n extern tree finish_type_requirement             (location_t, tree);\n extern tree finish_compound_requirement         (location_t, tree, tree, bool);\n extern tree finish_nested_requirement           (location_t, tree);\n-extern void check_constrained_friend            (tree, tree);\n extern tree tsubst_requires_expr                (tree, tree, tsubst_flags_t, tree);\n extern tree evaluate_requires_expr\t\t(tree);\n extern tree tsubst_constraint                   (tree, tree, tsubst_flags_t, tree);\n@@ -8159,7 +8152,6 @@ extern bool save_subsumption_result             (tree, tree, bool);\n extern tree find_template_parameters\t\t(tree, tree);\n extern bool equivalent_constraints              (tree, tree);\n extern bool equivalently_constrained            (tree, tree);\n-extern bool subsumes_constraints                (tree, tree);\n extern bool strictly_subsumes\t\t\t(tree, tree);\n extern bool weakly_subsumes\t\t\t(tree, tree);\n extern int more_constrained                     (tree, tree);"}, {"sha": "4f2fc2e496ecd33de94a31626689957129e5f908", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fef7c8990da15493110118554adfc9a0b779604c", "patch": "@@ -4963,16 +4963,6 @@ push_cp_library_fn (enum tree_code operator_code, tree type,\n   return fn;\n }\n \n-/* Like push_library_fn, but takes a TREE_LIST of parm types rather than\n-   a FUNCTION_TYPE.  */\n-\n-tree\n-push_void_library_fn (tree name, tree parmtypes, int ecf_flags)\n-{\n-  tree type = build_function_type (void_type_node, parmtypes);\n-  return push_library_fn (name, type, NULL_TREE, ecf_flags);\n-}\n-\n /* Like push_library_fn, but also note that this function throws\n    and does not return.  Used for __throw_foo and the like.  */\n "}, {"sha": "4a1e090ead4143e3d390563d1ce0201273108843", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=fef7c8990da15493110118554adfc9a0b779604c", "patch": "@@ -160,24 +160,6 @@ begin_lambda_type (tree lambda)\n   return type;\n }\n \n-/* Returns the type to use for the return type of the operator() of a\n-   closure class.  */\n-\n-tree\n-lambda_return_type (tree expr)\n-{\n-  if (expr == NULL_TREE)\n-    return void_type_node;\n-  if (type_unknown_p (expr)\n-      || BRACE_ENCLOSED_INITIALIZER_P (expr))\n-    {\n-      cxx_incomplete_type_error (expr, TREE_TYPE (expr));\n-      return error_mark_node;\n-    }\n-  gcc_checking_assert (!type_dependent_expression_p (expr));\n-  return cv_unqualified (type_decays_to (unlowered_expr_type (expr)));\n-}\n-\n /* Given a LAMBDA_EXPR or closure type LAMBDA, return the op() of the\n    closure type.  */\n "}, {"sha": "23d26231849bdc85941417094fef447f5cfb28c3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef7c8990da15493110118554adfc9a0b779604c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fef7c8990da15493110118554adfc9a0b779604c", "patch": "@@ -3693,25 +3693,6 @@ get_primary_template_innermost_parameters (const_tree t)\n   return parms;\n }\n \n-/* Return the template parameters of the LEVELth level from the full list\n-   of template parameters PARMS.  */\n-\n-tree\n-get_template_parms_at_level (tree parms, int level)\n-{\n-  tree p;\n-  if (!parms\n-      || TREE_CODE (parms) != TREE_LIST\n-      || level > TMPL_PARMS_DEPTH (parms))\n-    return NULL_TREE;\n-\n-  for (p = parms; p; p = TREE_CHAIN (p))\n-    if (TMPL_PARMS_DEPTH (p) == level)\n-      return p;\n-\n-  return NULL_TREE;\n-}\n-\n /* Returns the template arguments of T if T is a template instantiation,\n    NULL otherwise.  */\n \n@@ -13276,36 +13257,6 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   return result;\n }\n \n-/* Given PARM_DECL PARM, find the corresponding PARM_DECL in the template\n-   TMPL.  We do this using DECL_PARM_INDEX, which should work even with\n-   parameter packs; all parms generated from a function parameter pack will\n-   have the same DECL_PARM_INDEX.  */\n-\n-tree\n-get_pattern_parm (tree parm, tree tmpl)\n-{\n-  tree pattern = DECL_TEMPLATE_RESULT (tmpl);\n-  tree patparm;\n-\n-  if (DECL_ARTIFICIAL (parm))\n-    {\n-      for (patparm = DECL_ARGUMENTS (pattern);\n-\t   patparm; patparm = DECL_CHAIN (patparm))\n-\tif (DECL_ARTIFICIAL (patparm)\n-\t    && DECL_NAME (parm) == DECL_NAME (patparm))\n-\t  break;\n-    }\n-  else\n-    {\n-      patparm = FUNCTION_FIRST_USER_PARM (DECL_TEMPLATE_RESULT (tmpl));\n-      patparm = chain_index (DECL_PARM_INDEX (parm)-1, patparm);\n-      gcc_assert (DECL_PARM_INDEX (patparm)\n-\t\t  == DECL_PARM_INDEX (parm));\n-    }\n-\n-  return patparm;\n-}\n-\n /* Make an argument pack out of the TREE_VEC VEC.  */\n \n static tree"}]}