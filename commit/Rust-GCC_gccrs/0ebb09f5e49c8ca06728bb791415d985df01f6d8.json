{"sha": "0ebb09f5e49c8ca06728bb791415d985df01f6d8", "node_id": "C_kwDOANBUbNoAKDBlYmIwOWY1ZTQ5YzhjYTA2NzI4YmI3OTE0MTVkOTg1ZGYwMWY2ZDg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-24T10:53:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-24T10:53:08Z"}, "message": "options: Add EnumBitSet property support [PR104158]\n\nOn Sat, Jan 22, 2022 at 01:47:08AM +0100, Jakub Jelinek via Gcc-patches wrote:\n> I think with the 2) patch I achieve what we want for Fortran, for 1)\n> the only behavior from gcc 11 is that\n> -fsanitize-coverage=trace-cmp,trace-cmp is now rejected.\n> This is mainly from the desire to disallow\n> -fconvert=big-endian,little-endian or -Wbidi-chars=bidirectional,any\n> etc. where it would be confusing to users what exactly it means.\n> But it is the only from these options that actually acts as an Enum\n> bit set, each enumerator can be specified with all the others.\n> So one option would be stop requiring the EnumSet implies Set properties\n> must be specified and just require that either they are specified on all\n> EnumValues, or on none of them; the latter case would be for\n> -fsanitize-coverage= and the non-Set case would mean that all the\n> EnumValues need to have disjoint Value bitmasks and that they can\n> be all specified and unlike the Set case also repeated.\n> Thoughts on this?\n\nHere is an incremental patch to the first two patches of the series\nthat implements EnumBitSet that fully restores the -fsanitize-coverage\nGCC 11 behavior.\n\n2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/104158\n\t* opt-functions.awk (var_set): Handle EnumBitSet property.\n\t* optc-gen.awk: Don't disallow RejectNegative if EnumBitSet is\n\tspecified.\n\t* opts.h (enum cl_enum_var_value): New type.\n\t* opts-common.cc (decode_cmdline_option): Use CLEV_* values.\n\tHandle CLEV_BITSET.\n\t(cmdline_handle_error): Handle CLEV_BITSET.\n\t* opts.cc (test_enum_sets): Also test EnumBitSet requirements.\n\t* doc/options.texi (EnumBitSet): Document.\n\t* common.opt (fsanitize-coverage=): Use EnumBitSet instead of\n\tEnumSet.\n\t(trace-pc, trace-cmp): Drop Set properties.\n\n\t* gcc.dg/sancov/pr104158-7.c: Adjust for repeating of arguments\n\tbeing allowed.", "tree": {"sha": "fd2d34460422d38f7cebe761717db774141c7887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2d34460422d38f7cebe761717db774141c7887"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ebb09f5e49c8ca06728bb791415d985df01f6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebb09f5e49c8ca06728bb791415d985df01f6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ebb09f5e49c8ca06728bb791415d985df01f6d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebb09f5e49c8ca06728bb791415d985df01f6d8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9acd5a01175a3a0998eaaf306305890081d8550f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acd5a01175a3a0998eaaf306305890081d8550f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acd5a01175a3a0998eaaf306305890081d8550f"}], "stats": {"total": 103, "additions": 81, "deletions": 22}, "files": [{"sha": "d9233279a161a2567f676128a4200cd2ac38e417", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -1072,17 +1072,17 @@ Common Driver Joined\n Select what to sanitize.\n \n fsanitize-coverage=\n-Common Joined Enum(sanitize_coverage) Var(flag_sanitize_coverage) EnumSet\n+Common Joined Enum(sanitize_coverage) Var(flag_sanitize_coverage) EnumBitSet\n Select type of coverage sanitization.\n \n Enum\n Name(sanitize_coverage) Type(int)\n \n EnumValue\n-Enum(sanitize_coverage) String(trace-pc) Value(SANITIZE_COV_TRACE_PC) Set(1)\n+Enum(sanitize_coverage) String(trace-pc) Value(SANITIZE_COV_TRACE_PC)\n \n EnumValue\n-Enum(sanitize_coverage) String(trace-cmp) Value(SANITIZE_COV_TRACE_CMP) Set(2)\n+Enum(sanitize_coverage) String(trace-cmp) Value(SANITIZE_COV_TRACE_CMP)\n \n fasan-shadow-offset=\n Common Joined RejectNegative Var(common_deferred_options) Defer"}, {"sha": "50674938e3dedcbabf06ce535f3b5e8c31ecca51", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -421,6 +421,14 @@ enumeration values with the same set bitwise ored together.\n Or option's argument can be a comma separated list of strings where\n each string is from a different @code{Set(@var{number})}.\n \n+@item EnumBitSet\n+Must be used together with the @code{Enum(@var{name})} property.\n+Similar to @samp{EnumSet}, but corresponding @samp{Enum} record must\n+not use @code{Set} properties, each @code{EnumValue} should have\n+@code{Value} that is a power of 2, each value is treated as its own\n+set and its value as the set's mask, so there are no mutually\n+exclusive arguments.\n+\n @item Defer\n The option should be stored in a vector, specified with @code{Var},\n for later processing."}, {"sha": "5b0bc6634f551d39a2938556886459985b6b932b", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -298,9 +298,11 @@ function var_set(flags)\n \tif (flag_set_p(\"Enum.*\", flags)) {\n \t\ten = opt_args(\"Enum\", flags);\n \t\tif (flag_set_p(\"EnumSet\", flags))\n-\t\t\treturn enum_index[en] \", CLVC_ENUM, 1\"\n+\t\t\treturn enum_index[en] \", CLVC_ENUM, CLEV_SET\"\n+\t\telse if (flag_set_p(\"EnumBitSet\", flags))\n+\t\t\treturn enum_index[en] \", CLVC_ENUM, CLEV_BITSET\"\n \t\telse\n-\t\t\treturn enum_index[en] \", CLVC_ENUM, 0\"\n+\t\t\treturn enum_index[en] \", CLVC_ENUM, CLEV_NORMAL\"\n \t}\n \tif (var_type(flags) == \"const char *\")\n \t\treturn \"0, CLVC_STRING, 0\""}, {"sha": "5f7946cf49bf96b3a88888d5ef4d39fe2e8675c2", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -349,6 +349,7 @@ for (i = 0; i < n_opts; i++) {\n \t\tif (flag_set_p(\"Enum.*\", flags[i])) {\n \t\t\tif (!flag_set_p(\"RejectNegative\", flags[i]) \\\n \t\t\t    && !flag_set_p(\"EnumSet\", flags[i]) \\\n+\t\t\t    && !flag_set_p(\"EnumBitSet\", flags[i]) \\\n \t\t\t    && opts[i] ~ \"^[Wfgm]\")\n \t\t\t\tprint \"#error Enum allowing negative form\"\n \t\t}"}, {"sha": "1663be1f602a29d43f21fd6f0ed21269e90e8d10", "filename": "gcc/opts-common.cc", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopts-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopts-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.cc?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -811,8 +811,8 @@ decode_cmdline_option (const char *const *argv, unsigned int lang_mask,\n     {\n       const struct cl_enum *e = &cl_enums[option->var_enum];\n \n-      gcc_assert (option->var_value || value == 1);\n-      if (option->var_value)\n+      gcc_assert (option->var_value != CLEV_NORMAL || value == 1);\n+      if (option->var_value != CLEV_NORMAL)\n \t{\n \t  const char *p = arg;\n \t  HOST_WIDE_INT sum_value = 0;\n@@ -834,19 +834,30 @@ decode_cmdline_option (const char *const *argv, unsigned int lang_mask,\n \t\t  break;\n \t\t}\n \n-\t      unsigned set = e->values[idx].flags >> CL_ENUM_SET_SHIFT;\n-\t      gcc_checking_assert (set >= 1 && set <= HOST_BITS_PER_WIDE_INT);\n-\t      if ((used_sets & (HOST_WIDE_INT_1U << (set - 1))) != 0)\n+\t      HOST_WIDE_INT this_mask = 0;\n+\t      if (option->var_value == CLEV_SET)\n \t\t{\n-\t\t  errors |= CL_ERR_ENUM_SET_ARG;\n-\t\t  break;\n+\t\t  unsigned set = e->values[idx].flags >> CL_ENUM_SET_SHIFT;\n+\t\t  gcc_checking_assert (set >= 1\n+\t\t\t\t       && set <= HOST_BITS_PER_WIDE_INT);\n+\t\t  if ((used_sets & (HOST_WIDE_INT_1U << (set - 1))) != 0)\n+\t\t    {\n+\t\t      errors |= CL_ERR_ENUM_SET_ARG;\n+\t\t      break;\n+\t\t    }\n+\t\t  used_sets |= HOST_WIDE_INT_1U << (set - 1);\n+\n+\t\t  for (int i = 0; e->values[i].arg != NULL; i++)\n+\t\t    if (set == (e->values[i].flags >> CL_ENUM_SET_SHIFT))\n+\t\t      this_mask |= e->values[i].value;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  gcc_assert (option->var_value == CLEV_BITSET\n+\t\t\t      && ((e->values[idx].flags >> CL_ENUM_SET_SHIFT)\n+\t\t\t\t  == 0));\n+\t\t  this_mask = this_value;\n \t\t}\n-\t      used_sets |= HOST_WIDE_INT_1U << (set - 1);\n-\n-\t      HOST_WIDE_INT this_mask = 0;\n-\t      for (int i = 0; e->values[i].arg != NULL; i++)\n-\t\tif (set == (e->values[i].flags >> CL_ENUM_SET_SHIFT))\n-\t\t  this_mask |= e->values[i].value;\n \n \t      sum_value |= this_value;\n \t      mask |= this_mask;\n@@ -1430,6 +1441,14 @@ cmdline_handle_error (location_t loc, const struct cl_option *option,\n \t      break;\n \t    }\n \n+\t  if (option->var_value == CLEV_BITSET)\n+\t    {\n+\t      if (q == NULL)\n+\t\tbreak;\n+\t      p = q + 1;\n+\t      continue;\n+\t    }\n+\n \t  unsigned set = e->values[idx].flags >> CL_ENUM_SET_SHIFT;\n \t  gcc_checking_assert (set >= 1 && set <= HOST_BITS_PER_WIDE_INT);\n \t  if ((used_sets & (HOST_WIDE_INT_1U << (set - 1))) != 0)"}, {"sha": "f21c821ab2ea205c87cc63bd6192f809d1d4f1af", "filename": "gcc/opts.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -3705,13 +3705,14 @@ test_get_option_html_page ()\n #endif\n }\n \n-/* Verify EnumSet requirements.  */\n+/* Verify EnumSet and EnumBitSet requirements.  */\n \n static void\n test_enum_sets ()\n {\n   for (unsigned i = 0; i < cl_options_count; ++i)\n-    if (cl_options[i].var_type == CLVC_ENUM && cl_options[i].var_value)\n+    if (cl_options[i].var_type == CLVC_ENUM\n+\t&& cl_options[i].var_value != CLEV_NORMAL)\n       {\n \tconst struct cl_enum *e = &cl_enums[cl_options[i].var_enum];\n \tunsigned HOST_WIDE_INT used_sets = 0;\n@@ -3720,12 +3721,22 @@ test_enum_sets ()\n \tfor (unsigned j = 0; e->values[j].arg; ++j)\n \t  {\n \t    unsigned set = e->values[j].flags >> CL_ENUM_SET_SHIFT;\n+\t    if (cl_options[i].var_value == CLEV_BITSET)\n+\t      {\n+\t\t/* For EnumBitSet Set shouldn't be used and Value should\n+\t\t   be a power of two.  */\n+\t\tASSERT_TRUE (set == 0);\n+\t\tASSERT_TRUE (pow2p_hwi (e->values[j].value));\n+\t\tcontinue;\n+\t      }\n \t    /* Test that enumerators referenced in EnumSet have all\n \t       Set(n) on them within the valid range.  */\n \t    ASSERT_TRUE (set >= 1 && set <= HOST_BITS_PER_WIDE_INT);\n \t    highest_set = MAX (set, highest_set);\n \t    used_sets |= HOST_WIDE_INT_1U << (set - 1);\n \t  }\n+\tif (cl_options[i].var_value == CLEV_BITSET)\n+\t  continue;\n \t/* If there is just one set, no point to using EnumSet.  */\n \tASSERT_TRUE (highest_set >= 2);\n \t/* Test that there are no gaps in between the sets.  */"}, {"sha": "a43ce66cffe10ef2e1ca0d06bfdf4c1302276e0d", "filename": "gcc/opts.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -52,6 +52,18 @@ enum cl_var_type {\n   CLVC_DEFER\n };\n \n+/* Values for var_value member of CLVC_ENUM.  */\n+enum cl_enum_var_value {\n+  /* Enum without EnumSet or EnumBitSet.  */\n+  CLEV_NORMAL,\n+\n+  /* EnumSet.  */\n+  CLEV_SET,\n+\n+  /* EnumBitSet.  */\n+  CLEV_BITSET\n+};\n+\n struct cl_option\n {\n   /* Text of the option, including initial '-'.  */"}, {"sha": "7fc5b73403ad50926e153240fdfe4bd05bd1573a", "filename": "gcc/testsuite/gcc.dg/sancov/pr104158-7.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fpr104158-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebb09f5e49c8ca06728bb791415d985df01f6d8/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fpr104158-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fpr104158-7.c?ref=0ebb09f5e49c8ca06728bb791415d985df01f6d8", "patch": "@@ -1,5 +1,11 @@\n /* PR sanitizer/104158 */\n /* { dg-do compile } */\n /* { dg-options \"-fsanitize-coverage=trace-cmp,trace-cmp -fdump-tree-optimized\" } */\n-/* { dg-error \"invalid argument in option '-fsanitize-coverage=trace-cmp,trace-cmp'\" \"\" { target *-*-* } 0 } */\n-/* { dg-message \"'trace-cmp' specified multiple times in the same option\" \"\" { target *-*-* } 0 } */\n+/* { dg-final { scan-tree-dump \"__sanitizer_cov_trace_cmp\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__sanitizer_cov_trace_pc\" \"optimized\" } } */\n+\n+int\n+foo (int a, int b)\n+{\n+  return a == b;\n+}"}]}