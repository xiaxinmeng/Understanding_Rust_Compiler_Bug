{"sha": "0f50b3db8ab24d90f29143c80fc6b54efa9cba83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY1MGIzZGI4YWIyNGQ5MGYyOTE0M2M4MGZjNmI1NGVmYTljYmE4Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-06T07:44:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-06T07:44:03Z"}, "message": "utils.c (note_types_used_by_globals): Tweak comment.\n\n\t* gcc-interface/utils.c (note_types_used_by_globals): Tweak comment.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Likewise.\n\nFrom-SVN: r224184", "tree": {"sha": "4fef9d81db0131619bdf0bb71bb0627c0f5e675b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fef9d81db0131619bdf0bb71bb0627c0f5e675b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f50b3db8ab24d90f29143c80fc6b54efa9cba83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f50b3db8ab24d90f29143c80fc6b54efa9cba83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f50b3db8ab24d90f29143c80fc6b54efa9cba83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f50b3db8ab24d90f29143c80fc6b54efa9cba83/comments", "author": null, "committer": null, "parents": [{"sha": "bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5c49564ff5ec66f4ae39a00b2ed59189f95fc8"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "3c243a24883183e9d5a98c2d3f13c7a323ee14cf", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f50b3db8ab24d90f29143c80fc6b54efa9cba83/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f50b3db8ab24d90f29143c80fc6b54efa9cba83/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=0f50b3db8ab24d90f29143c80fc6b54efa9cba83", "patch": "@@ -5185,7 +5185,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       && !Present (Alias (gnat_entity))\n       && !(Present (Renamed_Object (gnat_entity)) && saved))\n     {\n-      /* ?? DECL_ARTIFICIAL, and possibly DECL_IGNORED_P below, should\n+      /* ??? DECL_ARTIFICIAL, and possibly DECL_IGNORED_P below, should\n \t be set before calling rest_of_decl_compilation above (through\n \t create_var_decl_1).  This is because rest_of_decl_compilation\n \t calls the debugging backend and will create a DIE without"}, {"sha": "e24a295318aff0a09725c751144b513f349a607a", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f50b3db8ab24d90f29143c80fc6b54efa9cba83/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f50b3db8ab24d90f29143c80fc6b54efa9cba83/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=0f50b3db8ab24d90f29143c80fc6b54efa9cba83", "patch": "@@ -5182,13 +5182,11 @@ smaller_form_type_p (tree type, tree orig_type)\n   return tree_int_cst_lt (size, osize) != 0;\n }\n \n-/* Perform final processing on global variables.  */\n-\n-static GTY (()) tree dummy_global;\n-\n /* Keep track of types used at the global level and emit debug info\n    for all global types.  */\n \n+static GTY (()) tree dummy_global;\n+\n void\n note_types_used_by_globals (void)\n {\n@@ -5219,10 +5217,10 @@ note_types_used_by_globals (void)\n \t}\n     }\n \n-  /* Output debug information for all global type declarations first.  This\n-     ensures that global types whose compilation haven't been finalized yet,\n-     for example pointers to Taft amendment types, have their compilation\n-     finalized in the right context.  */\n+  /* Output debug information for all global type declarations.  This ensures\n+     that global types whose compilation cannot been finalized earlier, e.g.\n+     pointers to Taft amendment types, have their compilation finalized in\n+     the right context.  */\n   FOR_EACH_VEC_SAFE_ELT (type_decls, i, iter)\n     if (!DECL_IGNORED_P (iter))\n       debug_hooks->type_decl (iter, false);"}]}