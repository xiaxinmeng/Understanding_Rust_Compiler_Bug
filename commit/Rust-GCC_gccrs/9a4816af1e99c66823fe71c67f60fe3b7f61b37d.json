{"sha": "9a4816af1e99c66823fe71c67f60fe3b7f61b37d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0ODE2YWYxZTk5YzY2ODIzZmU3MWM2N2Y2MGZlM2I3ZjYxYjM3ZA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-12-11T20:16:27Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-12-11T20:16:27Z"}, "message": "sh.h (REG_CLASS_HAS_GENERAL_REG): Only true for SIBCALL_REGS if not TARGET_SHMEDIA.\n\n\t* sh.h (REG_CLASS_HAS_GENERAL_REG): Only true for SIBCALL_REGS\n\tif not TARGET_SHMEDIA.\n\nFrom-SVN: r60045", "tree": {"sha": "2777771aac54452a63d7ee9d501f3f5605f81fad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2777771aac54452a63d7ee9d501f3f5605f81fad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a4816af1e99c66823fe71c67f60fe3b7f61b37d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4816af1e99c66823fe71c67f60fe3b7f61b37d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4816af1e99c66823fe71c67f60fe3b7f61b37d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4816af1e99c66823fe71c67f60fe3b7f61b37d/comments", "author": null, "committer": null, "parents": [{"sha": "f69bc49776f95f4cef791f96884739c319058278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f69bc49776f95f4cef791f96884739c319058278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f69bc49776f95f4cef791f96884739c319058278"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "f2f70b0a163900897ad43f62e18af3ccb2bdda70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4816af1e99c66823fe71c67f60fe3b7f61b37d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4816af1e99c66823fe71c67f60fe3b7f61b37d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a4816af1e99c66823fe71c67f60fe3b7f61b37d", "patch": "@@ -1,3 +1,19 @@\n+Wed Dec 11 20:15:19 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (REG_CLASS_HAS_GENERAL_REG): Only true for SIBCALL_REGS\n+\tif not TARGET_SHMEDIA.\n+\n+Wed Dec 11 19:05:05 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (REG_CLASS_HAS_FP_REG): New.\n+\t(REGISTER_MOVE_COST) Use it.  Put body into a function and\n+\tmove it into:\n+\t* sh.c (sh_register_move_cost).\n+\t* sh-protos.h (sh_register_move_cost): Declare.\n+\n+\t* sh.c (sh_expand_builtin): Abort for unexpected nop values.\n+\t(sh_adjust_cost): Always return a value.\n+\n Wed Dec 11 18:39:52 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.h (REG_CLASS_HAS_GENERAL_REG): New."}, {"sha": "0d0869099af9e4421ea44944c5b2f76f493c20bf", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4816af1e99c66823fe71c67f60fe3b7f61b37d/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4816af1e99c66823fe71c67f60fe3b7f61b37d/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9a4816af1e99c66823fe71c67f60fe3b7f61b37d", "patch": "@@ -2812,42 +2812,17 @@ while (0)\n    it uses this information.  Hence, the general register <-> floating point\n    register information here is not used for SFmode.  */\n \n-#define REGCLASS_HAS_GENERAL_REG(rclass) \\\n-((rclass)==GENERAL_REGS||(rclass)==R0_REGS||(rclass)==SIBCALL_REGS)\n+#define REGCLASS_HAS_GENERAL_REG(CLASS) \\\n+  ((CLASS) == GENERAL_REGS || (CLASS) == R0_REGS \\\n+    || (! TARGET_SHMEDIA && (CLASS) == SIBCALL_REGS))\n /* NB SIBCALL_REGS are not strictly general, as they include TR0-TR4 */\n \n+#define REGCLASS_HAS_FP_REG(CLASS) \\\n+  ((CLASS) == FP0_REGS || (CLASS) == FP_REGS \\\n+   || (CLASS) == DF_REGS || (CLASS) == DF_HI_REGS)\n+\n #define REGISTER_MOVE_COST(MODE, SRCCLASS, DSTCLASS) \\\n- (((((DSTCLASS) == T_REGS) || ((DSTCLASS) == PR_REGS)) ? 10\t\t\\\n-   : ((((DSTCLASS) == FP0_REGS || (DSTCLASS) == FP_REGS\t\t\t\\\n-\t|| (DSTCLASS) == DF_REGS || (DSTCLASS) == DF_HI_REGS)\t\t\\\n-       && REGCLASS_HAS_GENERAL_REG (SRCCLASS))\t\t\t\t\\\n-      || (REGCLASS_HAS_GENERAL_REG (DSTCLASS)\t\t\t\t\\\n-\t  && ((SRCCLASS) == FP0_REGS || (SRCCLASS) == FP_REGS\t\t\\\n-\t      || (SRCCLASS) == DF_REGS || (SRCCLASS) == DF_HI_REGS)))\t\\\n-   ? (TARGET_SHMEDIA ? 4\t\t\t\t\t\t\\\n-      : TARGET_FMOVD ? 8 : 12)\t\t\t\t\t\t\\\n-   : (((DSTCLASS) == FPUL_REGS\t\t\t\t\t\t\\\n-       && REGCLASS_HAS_GENERAL_REG (SRCCLASS))\t\t\t\t\\\n-      || ((SRCCLASS) == FPUL_REGS\t\t\t\t\t\\\n-\t  && REGCLASS_HAS_GENERAL_REG (DSTCLASS)))\t\t\t\\\n-   ? 5\t\t\t\t\t\t\t\t\t\\\n-   : (((DSTCLASS) == FPUL_REGS\t\t\t\t\t\t\\\n-       && ((SRCCLASS) == PR_REGS || (SRCCLASS) == MAC_REGS\t\t\\\n-\t    || (SRCCLASS) == T_REGS))\t\t\t\t\t\\\n-      || ((SRCCLASS) == FPUL_REGS\t\t\t\t\t\\\n-\t  && ((DSTCLASS) == PR_REGS || (DSTCLASS) == MAC_REGS)))\t\\\n-   ? 7\t\t\t\t\t\t\t\t\t\\\n-   : (((SRCCLASS) == TARGET_REGS\t\t\t\t\t\\\n-       && ! REGCLASS_HAS_GENERAL_REG (DSTCLASS))\t\t\t\\\n-      || ((DSTCLASS) == TARGET_REGS\t\t\t\t\t\\\n-\t  && ! REGCLASS_HAS_GENERAL_REG (SRCCLASS)))\t\t\t\\\n-   ? 20\t\t\t\t\t\t\t\t\t\\\n-   : (((SRCCLASS) == FPSCR_REGS\t\t\t\t\t\t\\\n-       && ! REGCLASS_HAS_GENERAL_REG (DSTCLASS))\t\t\t\\\n-      || ((DSTCLASS) == FPSCR_REGS\t\t\t\t\t\\\n-\t   && ! REGCLASS_HAS_GENERAL_REG (SRCCLASS)))\t\t\t\\\n-   ? 4\t\t\t\t\t\t\t\t\t\\\n-   : 2) * ((MODE) == V16SFmode ? 8 : (MODE) == V4SFmode ? 2 : 1))\n+  sh_register_move_cost ((MODE), (SRCCLASS), (DSTCLASS))\n \n /* ??? Perhaps make MEMORY_MOVE_COST depend on compiler option?  This\n    would be so that people with slow memory systems could generate"}]}