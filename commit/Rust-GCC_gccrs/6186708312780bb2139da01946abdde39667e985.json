{"sha": "6186708312780bb2139da01946abdde39667e985", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4NjcwODMxMjc4MGJiMjEzOWRhMDE5NDZhYmRkZTM5NjY3ZTk4NQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-11T19:58:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-11T19:58:30Z"}, "message": "c++: most vexing parse and braced CTAD [PR89062]\n\nHere grokdeclarator is emitting the error\n\n  error: class template placeholder \u2018Foo\u2019 not permitted in this context\n\nduring the tentative (and ultimately futile) parse of 'x' as a function\ndeclaration.  This happens because when parsing 'Foo{1}',\ncp_parser_parameter_declaration yields a parameter declaration with no\ndeclarator and whose type is a CTAD placeholder, and stops short of\nconsuming the '{'.  The caller cp_parser_parameter_declaration_list then\ncalls grokdeclarator on this declarator, hence the error, and soon\nthereafter we abort this tentative parse since the next token '{'\ndoesn't make sense in the context of a parameter list.\n\nNote that we don't have this issue with parenthesized CTAD\n\n  Foo<int> x(Foo(1));\n\nbecause in this case cp_parser_direct_declarator (called indirectly from\nc_p_p_d) consumes the '(' and returns cp_error_declarator instead of a\nNULL declarator (and also simulates a parse error), and grokdeclarator\nexits early for this declarator without emitting any error.\n\nSince grokdeclarator doesn't take a 'complain' parameter, to fix this we\nneed to avoid calling grokdeclarator in this situation.  To that end\nthis patch makes c_p_p_d simulate an error when a construct is a CTAD\nexpression and definitely not a parameter declaration, so that c_p_p_d_l\ncan avoid calling grokdeclarator by checking for this simulated error.\nAlternatively we could keep all this logic inside c_p_p_d_l and not\ntouch c_p_p_d at all, but this approach seems slightly less adhoc.\n\n\tPR c++/89062\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_parameter_declaration_list): Don't call\n\tgrokdeclarator if cp_parser_error_occurred.\n\t(cp_parser_parameter_declaration): Simulate an error if we see\n\tthe beginning of a CTAD form, i.e. if we see an opening brace\n\tafter the decl-specifier-seq and the type is a CTAD placeholder.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction97.C: New test.", "tree": {"sha": "eeb6ef39d1a537d7ed25936fc1f05d7cac12087e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeb6ef39d1a537d7ed25936fc1f05d7cac12087e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6186708312780bb2139da01946abdde39667e985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6186708312780bb2139da01946abdde39667e985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6186708312780bb2139da01946abdde39667e985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6186708312780bb2139da01946abdde39667e985/comments", "author": null, "committer": null, "parents": [{"sha": "4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa6c0ec350bb4a8dd52a7c6f9881ab427151588"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "87e8d37d473f433ca736f6d5e4867939a029b045", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6186708312780bb2139da01946abdde39667e985/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6186708312780bb2139da01946abdde39667e985/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6186708312780bb2139da01946abdde39667e985", "patch": "@@ -24284,7 +24284,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser, cp_parser_flags flags)\n \t and warn in grokparms if appropriate.  */\n       deprecated_state = DEPRECATED_SUPPRESS;\n \n-      if (parameter)\n+      if (parameter && !cp_parser_error_occurred (parser))\n \t{\n \t  decl = grokdeclarator (parameter->declarator,\n \t\t\t\t &parameter->decl_specifiers,\n@@ -24499,7 +24499,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n       parser->default_arg_ok_p = false;\n \n       /* After seeing a decl-specifier-seq, if the next token is not a\n-\t \"(\", there is no possibility that the code is a valid\n+\t \"(\" or \"{\", there is no possibility that the code is a valid\n \t expression.  Therefore, if parsing tentatively, we commit at\n \t this point.  */\n       if (!parser->in_template_argument_list_p\n@@ -24512,9 +24512,18 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t     of some object of type \"char\" to \"int\".  */\n \t  && !parser->in_type_id_in_expr_p\n \t  && cp_parser_uncommitted_to_tentative_parse_p (parser)\n-\t  && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE)\n \t  && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN))\n-\tcp_parser_commit_to_tentative_parse (parser);\n+\t{\n+\t  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n+\t    {\n+\t      if (decl_specifiers.type\n+\t\t  && template_placeholder_p (decl_specifiers.type))\n+\t\t/* This is a CTAD expression, not a parameter declaration.  */\n+\t\tcp_parser_simulate_error (parser);\n+\t    }\n+\t  else\n+\t    cp_parser_commit_to_tentative_parse (parser);\n+\t}\n       /* Parse the declarator.  */\n       declarator_token_start = token;\n       declarator = cp_parser_declarator (parser,"}, {"sha": "32818681d8f20daa06e03612881e2fd52158b228", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction97.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6186708312780bb2139da01946abdde39667e985/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction97.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6186708312780bb2139da01946abdde39667e985/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction97.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction97.C?ref=6186708312780bb2139da01946abdde39667e985", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/89062\n+// { dg-do compile { target c++17 } }\n+\n+template<class T> struct Foo { Foo(T); };\n+\n+Foo<int> x(Foo{1});"}]}