{"sha": "373a2dc2be0089ae59b61202a6023458aaaf63d8", "node_id": "C_kwDOANBUbNoAKDM3M2EyZGMyYmUwMDg5YWU1OWI2MTIwMmE2MDIzNDU4YWFhZjYzZDg", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-03-15T00:23:08Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2022-03-15T00:26:05Z"}, "message": "Avoid -Wdangling-pointer for by-transparent-reference arguments [PR104436].\n\nThis change avoids -Wdangling-pointer for by-value arguments transformed\ninto by-transparent-reference.\n\nResolves:\nPR middle-end/104436 - spurious -Wdangling-pointer assigning local address to a class passed by value\n\ngcc/ChangeLog:\n\n\tPR middle-end/104436\n\t* gimple-ssa-warn-access.cc (pass_waccess::check_dangling_stores):\n\tCheck for warning suppression.  Avoid by-value arguments transformed\n\tinto by-transparent-reference.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/104436\n\t* c-c++-common/Wdangling-pointer-8.c: New test.\n\t* g++.dg/warn/Wdangling-pointer-5.C: New test.", "tree": {"sha": "ba2525d1243cf0f228f83516b9fb74139f1f153d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba2525d1243cf0f228f83516b9fb74139f1f153d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373a2dc2be0089ae59b61202a6023458aaaf63d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a2dc2be0089ae59b61202a6023458aaaf63d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373a2dc2be0089ae59b61202a6023458aaaf63d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a2dc2be0089ae59b61202a6023458aaaf63d8/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "510613e76c27e183b63350d35dc35d58a62749b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/510613e76c27e183b63350d35dc35d58a62749b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/510613e76c27e183b63350d35dc35d58a62749b1"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "879dbcc1e52908369d0cd36400a2efe9eb1ccf40", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=373a2dc2be0089ae59b61202a6023458aaaf63d8", "patch": "@@ -4511,6 +4511,9 @@ pass_waccess::check_dangling_stores (basic_block bb,\n       if (!stmt)\n \tbreak;\n \n+      if (warning_suppressed_p (stmt, OPT_Wdangling_pointer_))\n+\tcontinue;\n+\n       if (is_gimple_call (stmt)\n \t  && !(gimple_call_flags (stmt) & (ECF_CONST | ECF_PURE)))\n \t/* Avoid looking before nonconst, nonpure calls since those might\n@@ -4536,10 +4539,16 @@ pass_waccess::check_dangling_stores (basic_block bb,\n \t}\n       else if (TREE_CODE (lhs_ref.ref) == SSA_NAME)\n \t{\n-\t  /* Avoid looking at or before stores into unknown objects.  */\n \t  gimple *def_stmt = SSA_NAME_DEF_STMT (lhs_ref.ref);\n \t  if (!gimple_nop_p (def_stmt))\n+\t    /* Avoid looking at or before stores into unknown objects.  */\n \t    return;\n+\n+\t  tree var = SSA_NAME_VAR (lhs_ref.ref);\n+\t  if (TREE_CODE (var) == PARM_DECL && DECL_BY_REFERENCE (var))\n+\t    /* Avoid by-value arguments transformed into by-reference.  */\n+\t    continue;\n+\n \t}\n       else if (TREE_CODE (lhs_ref.ref) == MEM_REF)\n \t{\n@@ -4572,6 +4581,8 @@ pass_waccess::check_dangling_stores (basic_block bb,\n \t\t      \"storing the address of local variable %qD in %qE\",\n \t\t      rhs_ref.ref, lhs))\n \t{\n+\t  suppress_warning (stmt, OPT_Wdangling_pointer_);\n+\n \t  location_t loc = DECL_SOURCE_LOCATION (rhs_ref.ref);\n \t  inform (loc, \"%qD declared here\", rhs_ref.ref);\n "}, {"sha": "433727dd845449fe3f00227c0c070d1b2257d79b", "filename": "gcc/testsuite/c-c++-common/Wdangling-pointer-8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWdangling-pointer-8.c?ref=373a2dc2be0089ae59b61202a6023458aaaf63d8", "patch": "@@ -0,0 +1,20 @@\n+/* Verify -Wdangling-pointer is issued only once.\n+   { dg-do compile }\n+   { dg-options \"-O -Wall\" } */\n+\n+void *p;\n+\n+void escape_global_warn_once (void)\n+{\n+  int x[5];\n+\n+  p = &x[3];        // { dg-regexp \"\\[^\\n\\r\\]+: warning: \\[^\\n\\r\\]+ \\\\\\[-Wdangling-pointer.?\\\\\\]\" \"message\" }\n+}\n+\n+\n+void escape_param_warn_once (void **p)\n+{\n+  int x[5];\n+\n+  *p = &x[3];       // { dg-regexp \"\\[^\\n\\r\\]+: warning: \\[^\\n\\r\\]+ \\\\\\[-Wdangling-pointer.?\\\\\\]\" \"message\" }\n+}"}, {"sha": "b3d144a9e6d482144c079950f4494b79c9c3c02f", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-pointer-5.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-5.C?ref=373a2dc2be0089ae59b61202a6023458aaaf63d8", "patch": "@@ -0,0 +1,34 @@\n+/* PR middle-end/104436 - spurious -Wdangling-pointer assigning local\n+   address to a class passed by value\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall\" } */\n+\n+struct S\n+{\n+  S (void *p): p (p) { }\n+  S (const S &s): p (s.p) { }\n+\n+  void *p;\n+};\n+\n+\n+void nowarn_assign_by_value (S s)\n+{\n+  int i;\n+  S t (&i);\n+  s = t;            // { dg-bogus \"-Wdangling-pointer\" }\n+}\n+\n+void nowarn_assign_by_value_arg (S s)\n+{\n+  S t (&s);\n+  s = t;            // { dg-bogus \"-Wdangling-pointer\" }\n+}\n+\n+\n+void warn_assign_local_by_reference (S &s)\n+{\n+  int i;\n+  S t (&i);\n+  s = t;            // { dg-warning \"-Wdangling-pointer\" }\n+}"}]}