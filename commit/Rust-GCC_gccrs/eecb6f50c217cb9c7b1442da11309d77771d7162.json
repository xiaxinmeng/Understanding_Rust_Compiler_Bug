{"sha": "eecb6f50c217cb9c7b1442da11309d77771d7162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjYjZmNTBjMjE3Y2I5YzdiMTQ0MmRhMTEzMDlkNzc3NzFkNzE2Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-01T06:02:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-01T06:02:12Z"}, "message": "calls.c (expand_call): Remove current_call_is_indirect nonsense.\n\n        * calls.c (expand_call): Remove current_call_is_indirect nonsense.\n        Add additional argument to INIT_CUMULATIVE_ARGS.\n        (emit_library_call): Likewise.\n        (emit_library_call_value): Likewise.\n        * expr.c (expand_builtin): Likewise.\n        * function.c (assign_parms): Likewise.\n        * config/pa/pa.h (hppa_args): New field \"indirect\".\n        (INIT_CUMULATIVE_ARGS): Initialize \"indirect\" field.\n        (FUNCTION_ARG): Check \"indirect\" field, rather than\n        \"current_call_is_indirect\".\n        * All other backends updated with new argument to\n        INIT_CUMULATIVE_ARGS\n\nFrom-SVN: r11649", "tree": {"sha": "b09dd6dd3bfe0e02a2c54fe3360d2fa7eac2a7cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b09dd6dd3bfe0e02a2c54fe3360d2fa7eac2a7cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eecb6f50c217cb9c7b1442da11309d77771d7162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecb6f50c217cb9c7b1442da11309d77771d7162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eecb6f50c217cb9c7b1442da11309d77771d7162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecb6f50c217cb9c7b1442da11309d77771d7162/comments", "author": null, "committer": null, "parents": [{"sha": "4cf8614f1e706a27ca33d289a0c82a9315e55926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf8614f1e706a27ca33d289a0c82a9315e55926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf8614f1e706a27ca33d289a0c82a9315e55926"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "dca4f65bd1e946a40fe7508cac3dcd6a1e83dba4", "filename": "gcc/calls.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eecb6f50c217cb9c7b1442da11309d77771d7162/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eecb6f50c217cb9c7b1442da11309d77771d7162/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=eecb6f50c217cb9c7b1442da11309d77771d7162", "patch": "@@ -532,7 +532,6 @@ expand_call (exp, target, ignore)\n   /* Nonzero if a reg parm has been scanned.  */\n   int reg_parm_seen;\n   /* Nonzero if this is an indirect function call.  */\n-  int current_call_is_indirect = 0;\n \n   /* Nonzero if we must avoid push-insns in the args for this call. \n      If stack space is allocated for register parameters, but not by the\n@@ -816,15 +815,6 @@ expand_call (exp, target, ignore)\n   if (fndecl && DECL_NAME (fndecl))\n     name = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n \n-  /* On some machines (such as the PA) indirect calls have a different\n-     calling convention than normal calls.  FUNCTION_ARG in the target\n-     description can look at current_call_is_indirect to determine which\n-     calling convention to use.  */\n-  current_call_is_indirect = (fndecl == 0);\n-#if 0\n-    = TREE_CODE (TREE_OPERAND (exp, 0)) == NON_LVALUE_EXPR ? 1 : 0;\n-#endif\n-\n #if 0\n   /* Unless it's a call to a specific function that isn't alloca,\n      if it has one argument, we must assume it might be alloca.  */\n@@ -913,8 +903,13 @@ expand_call (exp, target, ignore)\n      we make.  */\n   push_temp_slots ();\n \n-  /* Start updating where the next arg would go.  */\n-  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX);\n+  /* Start updating where the next arg would go.\n+\n+     On some machines (such as the PA) indirect calls have a different\n+     calling convention than normal calls.  The last argument in\n+     INIT_CUMULATIVE_ARGS tells the backend if this is an indirect call\n+     or not.  */\n+  INIT_CUMULATIVE_ARGS (args_so_far, funtype, NULL_RTX, (fndecl == 0));\n \n   /* If struct_value_rtx is 0, it means pass the address\n      as if it were an extra parameter.  */\n@@ -2259,8 +2254,6 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n   struct arg *argvec;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n   rtx call_fusage = 0;\n-  /* library calls are never indirect calls.  */\n-  int current_call_is_indirect = 0;\n \n   VA_START (p, nargs);\n \n@@ -2282,7 +2275,7 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n \n   argvec = (struct arg *) alloca (nargs * sizeof (struct arg));\n \n-  INIT_CUMULATIVE_ARGS (args_so_far, NULL_TREE, fun);\n+  INIT_CUMULATIVE_ARGS (args_so_far, NULL_TREE, fun, 0);\n \n   args_size.constant = 0;\n   args_size.var = 0;\n@@ -2538,8 +2531,6 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n   rtx mem_value = 0;\n   int pcc_struct_value = 0;\n   int struct_value_size = 0;\n-  /* library calls are never indirect calls.  */\n-  int current_call_is_indirect = 0;\n   int is_const;\n \n   VA_START (p, nargs);\n@@ -2590,7 +2581,7 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n \n   argvec = (struct arg *) alloca ((nargs + 1) * sizeof (struct arg));\n \n-  INIT_CUMULATIVE_ARGS (args_so_far, NULL_TREE, fun);\n+  INIT_CUMULATIVE_ARGS (args_so_far, NULL_TREE, fun, 0);\n \n   args_size.constant = 0;\n   args_size.var = 0;"}]}