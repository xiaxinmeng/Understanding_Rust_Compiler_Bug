{"sha": "cb1902adbf904ff5b63d0a9ceed558783b0c875a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxOTAyYWRiZjkwNGZmNWI2M2QwYTljZWVkNTU4NzgzYjBjODc1YQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "1999-07-01T17:01:00Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "1999-07-01T17:01:00Z"}, "message": "[multiple changes]\n\n1999-07-01  Warren Levy  <warrenl@cygnus.com>\n\t* gnu/gcj/convert/BytesToUnicode.java (read): Changed outlength\n\tto count and revised comments to match.\n\t* gnu/gcj/convert/Input_EUCJIS.java (read): Same as Input_8859_1.java.\n\t* gnu/gcj/convert/Input_JavaSrc.java (read): ditto.\n\t* gnu/gcj/convert/Input_SJIS.java (read): ditto.\n\t* gnu/gcj/convert/Input_UTF8.java (read): ditto.\n\t* gnu/gcj/convert/natInput_EUCJIS.cc (read): ditto.\n\t* gnu/gcj/convert/natInput_SJIS.cc (read): ditto.\n1999-07-01  John-Marc Chandonia  <jmc@cmpharm.ucsf.edu>\n\t* gnu/gcj/convert/Input_8859_1.java (read): Use 3rd parameter\n\tproperly as count rather than outlength.\n\t* java/io/BufferedOutputStream.java (write(byte[],int,int): Flush\n\toutput on overflow rather than buffer fill.\n\t* java/io/BufferedReader.java (fill): Don't clear out the buffer\n\tif markPos is 0 and there is still room in the buffer.\n\nFrom-SVN: r27892", "tree": {"sha": "70da939588cb45ac14f7dd46616cb050181871b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70da939588cb45ac14f7dd46616cb050181871b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb1902adbf904ff5b63d0a9ceed558783b0c875a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1902adbf904ff5b63d0a9ceed558783b0c875a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1902adbf904ff5b63d0a9ceed558783b0c875a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1902adbf904ff5b63d0a9ceed558783b0c875a/comments", "author": null, "committer": null, "parents": [{"sha": "b537d12084f7aba41c814b0bcf0edf5d0ac3a159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b537d12084f7aba41c814b0bcf0edf5d0ac3a159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b537d12084f7aba41c814b0bcf0edf5d0ac3a159"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "247da09a787767dbd621d4f41acda59fbf69f64e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -1,3 +1,23 @@\n+1999-07-01  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* gnu/gcj/convert/BytesToUnicode.java (read): Changed outlength\n+\tto count and revised comments to match.\n+\t* gnu/gcj/convert/Input_EUCJIS.java (read): Same as Input_8859_1.java.\n+\t* gnu/gcj/convert/Input_JavaSrc.java (read): ditto.\n+\t* gnu/gcj/convert/Input_SJIS.java (read): ditto.\n+\t* gnu/gcj/convert/Input_UTF8.java (read): ditto.\n+\t* gnu/gcj/convert/natInput_EUCJIS.cc (read): ditto.\n+\t* gnu/gcj/convert/natInput_SJIS.cc (read): ditto.\n+\n+1999-07-01  John-Marc Chandonia  <jmc@cmpharm.ucsf.edu>\n+\n+\t* gnu/gcj/convert/Input_8859_1.java (read): Use 3rd parameter\n+\tproperly as count rather than outlength.\n+\t* java/io/BufferedOutputStream.java (write(byte[],int,int): Flush\n+\toutput on overflow rather than buffer fill.\n+\t* java/io/BufferedReader.java (fill): Don't clear out the buffer\n+\tif markPos is 0 and there is still room in the buffer.\n+\n 1999-07-01  Andrew Haley  <aph@cygnus.com>\n \n \t* include/i386-signal.h: Replace sigaction () with __sigaction ()."}, {"sha": "6e4d15dab9f69c0c37b62fea3884929171354c34", "filename": "libjava/gnu/gcj/convert/BytesToUnicode.java", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToUnicode.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToUnicode.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FBytesToUnicode.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -91,15 +91,17 @@ public final void setInput(byte[] buffer, int pos, int length)\n    * bytes start at inbuffer[inpos], and end at inbuffer[inlength-1].\n    * @param outbuffer buffer for the converted character\n    * @param outpos position in buffer to start putting converted characters\n-   * @param outlength the maximum number of characters to convert\n+   * @param count the maximum number of characters to convert\n    * @return number of chars placed in outbuffer.\n    * Also, this.inpos is incremented by the number of bytes consumed.\n    *\n    * (Note the asymmetry in that the input upper bound is inbuffer[inlength-1],\n-   * while the output upper bound is outbuffer[outpos+outlength-1].  The\n+   * while the output upper bound is outbuffer[outpos+count-1].  The\n    * justification is that inlength is like the count field of a\n-   * BufferedInputStream, while the outlength parameter is like the\n-   * length parameter of a read request.)\n+   * BufferedInputStream, while the count parameter is like the\n+   * length parameter of a read request.)  The count parameter is\n+   * also defined to be <= outbuffer.length - outpos (per the specification\n+   * of the length parameter for a read request).\n    */\n-  public abstract int read (char[] outbuffer, int outpos, int outlength);\n+  public abstract int read (char[] outbuffer, int outpos, int count);\n }"}, {"sha": "edc59736cda2845db8f969bb4e3101d44bce7c5a", "filename": "libjava/gnu/gcj/convert/Input_8859_1.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_8859_1.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -11,21 +11,21 @@\n /**\n  * Convert ISO-Latin-1 (8851-1) text to Unicode.\n  * @author Per Bothner <bothner@cygnus.com>\n- * @date Match 1999.\n+ * @date March 1999.\n  */\n \n public class Input_8859_1 extends BytesToUnicode\n {\n   public String getName() { return \"8859_1\"; }\n \n-  public int read (char[] outbuffer, int outpos, int outlength)\n+  public int read (char[] outbuffer, int outpos, int count)\n   {\n     int origpos = outpos;\n     // Make sure fields of this are in registers.\n     int inpos = this.inpos;\n     byte[] inbuffer = this.inbuffer;\n     int inavail = this.inlength - inpos;\n-    int outavail = outlength - outpos;\n+    int outavail = count;\n     if (outavail > inavail)\n       outavail = inavail;\n     while (--outavail >= 0)"}, {"sha": "12dc34ef0e9d3f8ad81bd369b58915055065794d", "filename": "libjava/gnu/gcj/convert/Input_EUCJIS.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_EUCJIS.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_EUCJIS.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_EUCJIS.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -21,5 +21,5 @@ public class Input_EUCJIS extends BytesToUnicode\n   int codeset = 0;\n   int first_byte;\n \n-  public native int read (char[] outbuffer, int outpos, int outlength);\n+  public native int read (char[] outbuffer, int outpos, int count);\n }"}, {"sha": "68af337e7a966a98c18d2bbf1eb24e1af033fdc1", "filename": "libjava/gnu/gcj/convert/Input_JavaSrc.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_JavaSrc.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_JavaSrc.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_JavaSrc.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -27,14 +27,14 @@ public class Input_JavaSrc extends BytesToUnicode\n \n   int value;\n \n-  public int read (char[] outbuffer, int outpos, int outlength)\n+  public int read (char[] outbuffer, int outpos, int count)\n   {\n     int origpos = outpos;\n     for (;;)\n       {\n \tif (inpos >= inlength)\n \t  break;\n-\tif (outpos >= outlength)\n+\tif (outpos - origpos >= count)\n \t  break;\n \tchar b = (char) (inbuffer[inpos++] & 0xFF);\n \tswitch (state)"}, {"sha": "50988209fb1eaa200910028ffd59e4a71d38a02f", "filename": "libjava/gnu/gcj/convert/Input_SJIS.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_SJIS.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_SJIS.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_SJIS.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -18,7 +18,7 @@ public class Input_SJIS extends BytesToUnicode\n {\n   public String getName() { return \"SJIS\"; }\n \n-  public native int read (char[] outbuffer, int outpos, int outlength);\n+  public native int read (char[] outbuffer, int outpos, int count);\n \n   int first_byte;\n }"}, {"sha": "ab1ac5182806b122c324a6a74b9252f1d39edb80", "filename": "libjava/gnu/gcj/convert/Input_UTF8.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_UTF8.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_UTF8.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_UTF8.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -11,7 +11,7 @@\n /**\n  * Convert UTF8 to Unicode.\n  * @author Per Bothner <bothner@cygnus.com>\n- * @date Match 1999.\n+ * @date March 1999.\n  */\n \n public class Input_UTF8 extends BytesToUnicode\n@@ -22,12 +22,12 @@ public class Input_UTF8 extends BytesToUnicode\n   int partial_bytes_expected = 0;\n   //int suggogate_second = -1;\n \n-  public int read (char[] outbuffer, int outpos, int outlength)\n+  public int read (char[] outbuffer, int outpos, int count)\n   {\n     int origpos = outpos;\n     for (;;)\n       {\n-\tif (outpos >= outlength)\n+\tif (outpos - origpos >= count)\n \t  break;\n \tif (inpos >= inlength)\n \t  break;"}, {"sha": "8f3b272b7bd5319313a62d08263c966a0e7d1f7f", "filename": "libjava/gnu/gcj/convert/natInput_EUCJIS.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_EUCJIS.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_EUCJIS.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_EUCJIS.cc?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -17,12 +17,12 @@ extern unsigned short JIS0212_to_Unicode[76][94];\n \n jint\n gnu::gcj::convert::Input_EUCJIS::read(jcharArray outbuffer, jint outpos,\n-\t\t\t\t      jint outlength)\n+\t\t\t\t      jint count)\n {\n   jint start_outpos = outpos;\n   for (;;)\n     {\n-      if (outpos >= outlength)\n+      if (outpos - start_outpos >= count)\n \tbreak;\n       if (inpos >= inlength)\n \tbreak;"}, {"sha": "5a040b17972428bb0c92b0789b0b393264565306", "filename": "libjava/gnu/gcj/convert/natInput_SJIS.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_SJIS.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_SJIS.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_SJIS.cc?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -17,12 +17,12 @@ extern unsigned short JIS0212_to_Unicode[76][94];\n \n jint\n gnu::gcj::convert::Input_SJIS::read(jcharArray outbuffer, jint outpos,\n-\t\t\t\t    jint outlength)\n+\t\t\t\t    jint count)\n {\n   jint start_outpos = outpos;\n   for (;;)\n     {\n-      if (outpos >= outlength)\n+      if (outpos - start_outpos >= count)\n \tbreak;\n       if (inpos >= inlength)\n \tbreak;"}, {"sha": "3e26592aafe1a3295162d28daa81fec5843715ea", "filename": "libjava/java/io/BufferedOutputStream.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fjava%2Fio%2FBufferedOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fjava%2Fio%2FBufferedOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedOutputStream.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -42,6 +42,7 @@ public synchronized void flush () throws IOException\n \n   public synchronized void write (int b) throws IOException\n   {\n+    // Flush output on overflow though JDK (1.2) doc may infer to flush on fill.\n     if (count < buf.length)\n       buf[count++] = (byte) b;\n     else\n@@ -55,8 +56,10 @@ public synchronized void write (int b) throws IOException\n   public synchronized void write (byte[] b, int off, int len)\n     throws IOException, NullPointerException, IndexOutOfBoundsException\n   {\n+    // Flush output on overflow though JDK (1.2) doc may infer to flush on fill.\n+\n     // If LEN < 0 then the downstream write will fail for us.\n-    if (len >= 0 && count + len < buf.length)\n+    if (len >= 0 && count + len <= buf.length)\n       {\n \tSystem.arraycopy(b, off, buf, count, len);\n \tcount += len;"}, {"sha": "9e9e764734be736c89799917f22af0f4da723ad5", "filename": "libjava/java/io/BufferedReader.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fjava%2Fio%2FBufferedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1902adbf904ff5b63d0a9ceed558783b0c875a/libjava%2Fjava%2Fio%2FBufferedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedReader.java?ref=cb1902adbf904ff5b63d0a9ceed558783b0c875a", "patch": "@@ -197,7 +197,7 @@ public int read(char[] buf, int offset, int count) throws IOException\n       }\n   }\n \n-  /* Read more data into the buffer.  Update pos and limit appropriatly.\n+  /* Read more data into the buffer.  Update pos and limit appropriately.\n      Assumes pos==limit initially.  May invalidate the mark if read too much.\n      Return number of chars read (never 0), or -1 on eof. */\n   private int fill() throws IOException\n@@ -214,7 +214,7 @@ private int fill() throws IOException\n \n     if (markPos >= 0 && limit == buffer.length)\n       markPos = -1;\n-    if (markPos <= 0)\n+    if (markPos < 0)\n       pos = limit = 0;\n     int count = in.read(buffer, limit, buffer.length - limit);\n     if (count > 0)"}]}