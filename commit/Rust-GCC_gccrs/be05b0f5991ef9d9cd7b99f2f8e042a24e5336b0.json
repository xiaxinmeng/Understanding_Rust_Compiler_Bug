{"sha": "be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwNWIwZjU5OTFlZjlkOWNkN2I5OWYyZjhlMDQyYTI0ZTUzMzZiMA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-12T18:43:54Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-12T18:43:54Z"}, "message": "In libobjc/: 2010-10-12 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * class.c: Include objc/runtime.h and objc-private/module-abi-8.h\n        instead of objc/objc-api.h.\n        (objc_get_unknown_class_handler): Do not define.\n        (class_isMetaClass): New.\n        (class_getSuperclass): New.\n        (class_getVersion): New.\n        (class_setVersion): New.\n        (class_getInstanceSize): New.\n        * exceptions.c: Include objc/runtime.h instead of objc/objc-api.h.\n        (is_kind_of_exception_matcher): Use objc_getSuperclass instead of\n        objc_get_super_class.\n        (get_ttype_entry): Use objc_getRequiredClass instead of\n        objc_get_class.\n        * ivars.c (class_getClassVariable): New.\n        * objects.c: Include objc/runtime.h, objc/thr.h and\n        objc-private/module-abi-8.h instead of objc/objc-api.h\n        * objc/runtime.h (class_getClassVariable): New.\n        (class_isMetaClass): New.\n        (class_getSuperclass): New.\n        (class_getVersion): New.\n        (class_setVersion): New.\n        (class_getInstanceSize): New.\n        * objc-private/module-abi-8.h (HOST_BITS_PER_LONG): New (from\n        objc/objc-api.h)\n        (__CLS_INFO): Same.\n        (__CLS_ISINFO): Same.\n        (__CLS_SETINFO): Same.\n        (CLS_ISMETA): Same.\n        (CLS_ISCLASS): Same.\n        (CLS_ISRESOLV): Same.\n        (CLS_SETRESOLV): Same.\n        (CLS_ISINITIALIZED): Same.\n        (CLS_SETINITIALIZED): Same.\n        (CLS_GETNUMBER): Same.\n        (CLS_SETNUMBER): Same.\n\nFrom-SVN: r165392", "tree": {"sha": "b4d41623d7f15f6d47b2a7f3c02ac077462df0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4d41623d7f15f6d47b2a7f3c02ac077462df0f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce9555cb8273fc011d81d7bb2bb54da020b95b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9555cb8273fc011d81d7bb2bb54da020b95b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9555cb8273fc011d81d7bb2bb54da020b95b16"}], "stats": {"total": 227, "additions": 209, "deletions": 18}, "files": [{"sha": "ec0a98f37905a77d1460f299fafec80300e0ad6a", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "patch": "@@ -1,3 +1,41 @@\n+2010-10-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* class.c: Include objc/runtime.h and objc-private/module-abi-8.h\n+\tinstead of objc/objc-api.h.\n+\t(objc_get_unknown_class_handler): Do not define.\n+\t(class_isMetaClass): New.\n+\t(class_getSuperclass): New.\n+\t(class_getVersion): New.\n+\t(class_setVersion): New.\n+\t(class_getInstanceSize): New.\n+\t* exceptions.c: Include objc/runtime.h instead of objc/objc-api.h.\n+\t(is_kind_of_exception_matcher): Use objc_getSuperclass instead of\n+\tobjc_get_super_class.\n+\t(get_ttype_entry): Use objc_getRequiredClass instead of\n+\tobjc_get_class.\n+\t* ivars.c (class_getClassVariable): New.\n+\t* objects.c: Include objc/runtime.h, objc/thr.h and\n+\tobjc-private/module-abi-8.h instead of objc/objc-api.h\n+\t* objc/runtime.h (class_getClassVariable): New.\n+\t(class_isMetaClass): New.\n+\t(class_getSuperclass): New.\n+\t(class_getVersion): New.\n+\t(class_setVersion): New.\n+\t(class_getInstanceSize): New.\n+\t* objc-private/module-abi-8.h (HOST_BITS_PER_LONG): New (from\n+\tobjc/objc-api.h)\n+\t(__CLS_INFO): Same.\n+\t(__CLS_ISINFO): Same.\n+\t(__CLS_SETINFO): Same.\n+\t(CLS_ISMETA): Same.\n+\t(CLS_ISCLASS): Same.\n+\t(CLS_ISRESOLV): Same.\n+\t(CLS_SETRESOLV): Same.\n+\t(CLS_ISINITIALIZED): Same.\n+\t(CLS_SETINITIALIZED): Same.\n+\t(CLS_GETNUMBER): Same.\n+\t(CLS_SETNUMBER): Same.\n+\n 2010-10-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* archive.c: Do not include objc/objc.h."}, {"sha": "4eb86761ee868b2769db3d1eba5811e5622a9804", "filename": "libobjc/class.c", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "patch": "@@ -89,10 +89,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"objc-private/common.h\"\n #include \"objc-private/error.h\"\n-#include \"objc/objc-api.h\"\n+#include \"objc/runtime.h\"\n #include \"objc/thr.h\"\n-#include \"objc-private/runtime.h\"            /* the kitchen sink */\n-#include <string.h> /* For memset */\n+#include \"objc-private/module-abi-8.h\"  /* For CLS_ISCLASS and similar.  */\n+#include \"objc-private/runtime.h\"       /* the kitchen sink */\n+#include <string.h>                     /* For memset */\n \n /* We use a table which maps a class name to the corresponding class\n  * pointer.  The first part of this file defines this table, and\n@@ -417,11 +418,6 @@ class_table_print_histogram (void)\n */\n Class (*_objc_lookup_class) (const char *name) = 0;      /* !T:SAFE */\n \n-/* Temporarily while we still include objc/objc-api.h instead of objc/runtime.h.  */\n-#ifndef __objc_runtime_INCLUDE_GNU\n-typedef Class (*objc_get_unknown_class_handler)(const char *class_name);\n-#endif\n-\n /* The handler currently in use.  PS: if both\n    __obj_get_unknown_class_handler and _objc_lookup_class are defined,\n    __objc_get_unknown_class_handler is called first.  */\n@@ -591,6 +587,7 @@ objc_lookup_class (const char *name)\n    called automatically by the compiler while messaging (if using the\n    traditional ABI), so it is worth keeping it fast; don't make it\n    just a wrapper around objc_getClass().  */\n+/* Note that this is roughly equivalent to objc_getRequiredClass().  */\n /* Get the class object for the class named NAME.  If NAME does not\n    identify a known class, the hook _objc_lookup_class is called.  If\n    this fails, an error message is issued and the system aborts.  */\n@@ -739,6 +736,49 @@ class_getName (Class class_)\n   return class_->name;\n }\n \n+BOOL\n+class_isMetaClass (Class class_)\n+{\n+  /* CLS_ISMETA includes the check for Nil class_.  */\n+  return CLS_ISMETA (class_);\n+}\n+\n+Class\n+class_getSuperclass (Class class_)\n+{\n+  if (class_ == Nil)\n+    return Nil;\n+\n+  return class_->super_class;\n+}\n+\n+int\n+class_getVersion (Class class_)\n+{\n+  if (class_ == Nil)\n+    return 0;\n+\n+  return (int)(class_->version);\n+}\n+\n+void\n+class_setVersion (Class class_, int version)\n+{\n+  if (class_ == Nil)\n+    return;\n+\n+  class_->version = version;\n+}\n+\n+size_t\n+class_getInstanceSize (Class class_)\n+{\n+  if (class_ == Nil)\n+    return 0;\n+\n+  return class_->instance_size;\n+}\n+\n #define CLASSOF(c) ((c)->class_pointer)\n \n Class"}, {"sha": "4883448afad89583b3b36015cb0690b1be7f1dd6", "filename": "libobjc/exception.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fexception.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fexception.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fexception.c?ref=be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "patch": "@@ -25,7 +25,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/common.h\"\n #include <stdlib.h>\n #include \"config.h\"\n-#include \"objc/objc-api.h\"\n+#include \"objc/runtime.h\"\n #include \"objc/objc-exception.h\"\n #include \"unwind.h\"\n #include \"unwind-pe.h\"\n@@ -57,7 +57,7 @@ is_kind_of_exception_matcher (Class catch_class, id exception)\n       Class c;\n \n       for (c = exception->class_pointer; c != Nil; \n-\t   c = class_get_super_class (c))\n+\t   c = class_getSuperclass (c))\n \tif (c == catch_class)\n \t  return 1;\n     }\n@@ -191,9 +191,11 @@ get_ttype_entry (struct lsda_header_info *info, _uleb128_t i)\n   \n   ptr = (_Unwind_Ptr) (info->TType - (i * 4));\n   ptr = _Unwind_decode_target2 (ptr);\n-  \n+\n+  /* NULL ptr means catch-all.  Note that if the class is not found,\n+     this will abort the program.  */\n   if (ptr)\n-    return objc_get_class ((const char *) ptr);\n+    return objc_getRequiredClass ((const char *) ptr);\n   else\n     return 0;\n }\n@@ -209,9 +211,10 @@ get_ttype_entry (struct lsda_header_info *info, _Unwind_Word i)\n   read_encoded_value_with_base (info->ttype_encoding, info->ttype_base,\n \t\t\t\tinfo->TType - i, &ptr);\n \n-  /* NULL ptr means catch-all.  */\n+  /* NULL ptr means catch-all.  Note that if the class is not found,\n+     this will abort the program.  */\n   if (ptr)\n-    return objc_get_class ((const char *) ptr);\n+    return objc_getRequiredClass ((const char *) ptr);\n   else\n     return 0;\n }"}, {"sha": "52b71af1124bb576476d835e301de91f4fbf4021", "filename": "libobjc/ivars.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fivars.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fivars.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fivars.c?ref=be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "patch": "@@ -60,6 +60,25 @@ class_getInstanceVariable (Class class_, const char *name)\n   return NULL;\n }\n \n+struct objc_ivar *\n+class_getClassVariable (Class class_, const char *name)\n+{\n+  if (class_ == Nil)\n+    return NULL;\n+\n+  /* Logically, since a class is an instance of its meta-class, and\n+     since its class methods are the instance methods of the\n+     meta-class, class variables should be instance variables of the\n+     meta-class.  That is different from the normal use of having\n+     'static' variables in the class implementation file, because\n+     every class would have its own variables.\n+\n+     Anyway, it is all speculative at this stage, but if we get class\n+     variables in Objective-C, it is conceivable that this\n+     implementation should work.  */\n+  return class_getInstanceVariable (class_->class_pointer, name);\n+}\n+\n void *\n object_getIndexedIvars (id object)\n {"}, {"sha": "414e5e354ecb561b006d6c3529456774f4d9a060", "filename": "libobjc/objc-private/module-abi-8.h", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fmodule-abi-8.h?ref=be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "patch": "@@ -183,7 +183,7 @@ struct objc_class {\n   const char*         name;             /* Name of the class. */\n   long                version;          /* Unknown. */\n   unsigned long       info;             /* Bit mask.  See class masks\n-\t\t\t\t\t   defined above. */\n+\t\t\t\t\t   defined below. */\n   long                instance_size;    /* Size in bytes of the class.\n \t\t\t\t\t   The sum of the class\n \t\t\t\t\t   definition and all super\n@@ -218,6 +218,45 @@ struct objc_class {\n };\n #endif /* __objc_STRUCT_OBJC_CLASS_defined */\n \n+/* This is used to assure consistent access to the info field of \n+   classes.  */\n+#ifndef HOST_BITS_PER_LONG\n+# define HOST_BITS_PER_LONG  (sizeof(long)*8)\n+#endif \n+\n+#define __CLS_INFO(cls) ((cls)->info)\n+#define __CLS_ISINFO(cls, mask) ((__CLS_INFO(cls)&mask)==mask)\n+#define __CLS_SETINFO(cls, mask) (__CLS_INFO(cls) |= mask)\n+\n+/* The structure is of type MetaClass */\n+#define _CLS_META 0x2L\n+#define CLS_ISMETA(cls) ((cls)&&__CLS_ISINFO(cls, _CLS_META))\n+\n+/* The structure is of type Class */\n+#define _CLS_CLASS 0x1L\n+#define CLS_ISCLASS(cls) ((cls)&&__CLS_ISINFO(cls, _CLS_CLASS))\n+\n+/* The class is initialized within the runtime.  This means that it\n+   has had correct super and sublinks assigned.  */\n+#define _CLS_RESOLV 0x8L\n+#define CLS_ISRESOLV(cls) __CLS_ISINFO(cls, _CLS_RESOLV)\n+#define CLS_SETRESOLV(cls) __CLS_SETINFO(cls, _CLS_RESOLV)\n+\n+/* The class has been send a +initialize message or a such is not \n+   defined for this class.  */\n+#define _CLS_INITIALIZED 0x04L\n+#define CLS_ISINITIALIZED(cls) __CLS_ISINFO(cls, _CLS_INITIALIZED)\n+#define CLS_SETINITIALIZED(cls) __CLS_SETINFO(cls, _CLS_INITIALIZED)\n+\n+/* The class number of this class.  This must be the same for both the\n+   class and its meta class object.  */\n+#define CLS_GETNUMBER(cls) (__CLS_INFO(cls) >> (HOST_BITS_PER_LONG/2))\n+#define CLS_SETNUMBER(cls, num) \\\n+  ({ (cls)->info <<= (HOST_BITS_PER_LONG/2); \\\n+     (cls)->info >>= (HOST_BITS_PER_LONG/2); \\\n+     __CLS_SETINFO(cls, (((unsigned long)num) << (HOST_BITS_PER_LONG/2))); })\n+\n+\n /* The compiler generates one of these structures for each category.\n    A class may have many categories and contain both instance and\n    factory methods.  */"}, {"sha": "a52c7611857a74cc081d98914eee5e7ba4d4b99e", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "patch": "@@ -239,6 +239,14 @@ objc_EXPORT Class object_setClass (id object, Class class_);\n    reuse the returned Ivar if you can.  */\n objc_EXPORT Ivar class_getInstanceVariable (Class class_, const char *name);\n \n+/* Return a class variable given the class and the class variable\n+   name.  This is an expensive function to call, so try to reuse the\n+   returned Ivar if you can.  \n+   \n+   This function always returns NULL since class variables are\n+   currently unavailable in Objective-C.  */\n+objc_EXPORT Ivar class_getClassVariable (Class class_, const char *name);\n+\n /* If the object was created in class_createInstance() with some\n    extraBytes, returns a pointer to them.  If it was not, then the\n    returned pointer may make no sense.  */\n@@ -361,6 +369,48 @@ objc_EXPORT int objc_getClassList (Class *returnValue, int maxNumberOfClassesToR\n    class_ is Nil.  */\n objc_EXPORT const char * class_getName (Class class_);\n \n+/* Return YES if 'class_' is a meta class, and NO if not.  If 'class_'\n+   is Nil, return NO.  */\n+objc_EXPORT BOOL class_isMetaClass (Class class_);\n+\n+/* Return the superclass of 'class_'.  If 'class_' is Nil, or it is a root\n+   class, return Nil.\n+\n+   TODO: It may be worth to define this inline, since it is usually\n+   used in loops when traversing the class hierarchy.  */\n+objc_EXPORT Class class_getSuperclass (Class class_);\n+\n+/* Return the 'version' number of the class, which is an integer that\n+   can be used to track changes in the class API, methods and\n+   variables.  If class_ is Nil, return 0.  If class_ is not Nil, the\n+   version is 0 unless class_setVersion() has been called to set a\n+   different one.\n+\n+   Please note that internally the version is a long, but the API only\n+   allows you to set and retrieve int values.  */\n+objc_EXPORT int class_getVersion (Class class_);\n+\n+/* Set the 'version' number of the class, which is an integer that can\n+   be used to track changes in the class API, methods and variables.\n+   If 'class_' is Nil, does nothing.\n+\n+   This is typically used internally by \"Foundation\" libraries such as\n+   GNUstep Base to support serialization / deserialization of objects\n+   that work across changes in the classes.  If you are using such a\n+   library, you probably want to use their versioning API, which may\n+   be based on this one, but is integrated with the rest of the\n+   library.\n+\n+   Please note that internally the version is a long, but the API only\n+   allows you to set and retrieve int values.  */\n+objc_EXPORT void class_setVersion (Class class_, int version);\n+\n+/* Return the size in bytes (a byte is the size of a char) of an\n+   instance of the class.  If class_ is Nil, return 0; else it return\n+   a non-zero number (since the 'isa' instance variable is required\n+   for all classes).  */\n+objc_EXPORT size_t class_getInstanceSize (Class class_);\n+\n \n /** Implementation: the following functions are in protocols.c.  */\n "}, {"sha": "71b09afee569a94cbee1acb3aba7e7c12a4b4236", "filename": "libobjc/objects.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fobjects.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0/libobjc%2Fobjects.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjects.c?ref=be05b0f5991ef9d9cd7b99f2f8e042a24e5336b0", "patch": "@@ -23,10 +23,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n-#include \"objc/objc-api.h\"\n-#include \"objc-private/runtime.h\"\t\t/* the kitchen sink */\n+#include \"objc/runtime.h\"\n+#include \"objc/thr.h\"                   /* Required by objc-private/runtime.h.  */\n+#include \"objc-private/module-abi-8.h\"  /* For CLS_ISCLASS and similar.  */\n+#include \"objc-private/runtime.h\"\t/* the kitchen sink */\n \n-#include <string.h> /* For memcpy()  */\n+#include <string.h>                     /* For memcpy()  */\n \n #if OBJC_WITH_GC\n # include <gc.h>"}]}