{"sha": "a742c759f95458c9a036f47c7fa0c6d30debb13e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc0MmM3NTlmOTU0NThjOWEwMzZmNDdjN2ZhMGM2ZDMwZGViYjEzZQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-06-20T10:00:22Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-20T10:00:22Z"}, "message": "c-common.c: Change _Bool to bool reverting part of the last patch.\n\n\t* c-common.c: Change _Bool to bool reverting part of the last\n\tpatch.\n\nFrom-SVN: r68256", "tree": {"sha": "0b798e19bca9ea4987b208b1b1eb138979d9c130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b798e19bca9ea4987b208b1b1eb138979d9c130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a742c759f95458c9a036f47c7fa0c6d30debb13e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a742c759f95458c9a036f47c7fa0c6d30debb13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a742c759f95458c9a036f47c7fa0c6d30debb13e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a742c759f95458c9a036f47c7fa0c6d30debb13e/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f9cc6db1b6ea3576abbdf5467abfd3a6ff8e520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9cc6db1b6ea3576abbdf5467abfd3a6ff8e520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9cc6db1b6ea3576abbdf5467abfd3a6ff8e520"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "b05aa99b4e74032ce31cf56d42eacaf42b4ea641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a742c759f95458c9a036f47c7fa0c6d30debb13e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a742c759f95458c9a036f47c7fa0c6d30debb13e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a742c759f95458c9a036f47c7fa0c6d30debb13e", "patch": "@@ -1,3 +1,8 @@\n+2003-06-20  Andreas Jaeger  <aj@suse.de>\n+\n+\t* c-common.c: Change _Bool to bool reverting part of the last\n+\tpatch.\n+\n 2003-06-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree.h (expand_function_end): Remove all parameters."}, {"sha": "731aff418f5e6aada54d36b8f85ac15f6ea4d181", "filename": "gcc/c-common.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a742c759f95458c9a036f47c7fa0c6d30debb13e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a742c759f95458c9a036f47c7fa0c6d30debb13e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a742c759f95458c9a036f47c7fa0c6d30debb13e", "patch": "@@ -4665,7 +4665,7 @@ shadow_warning (enum sw_kind msgcode, const char *name, tree decl)\n \n static tree\n handle_packed_attribute (tree *node, tree name, tree args  ATTRIBUTE_UNUSED,\n-\t\t\t int flags, _Bool *no_add_attrs)\n+\t\t\t int flags, bool *no_add_attrs)\n {\n   tree *type = NULL;\n   if (DECL_P (*node))\n@@ -4701,7 +4701,7 @@ handle_packed_attribute (tree *node, tree name, tree args  ATTRIBUTE_UNUSED,\n static tree\n handle_nocommon_attribute (tree *node, tree name,\n \t\t\t   tree args ATTRIBUTE_UNUSED,\n-\t\t\t   int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t   int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == VAR_DECL)\n     DECL_COMMON (*node) = 0;\n@@ -4719,7 +4719,7 @@ handle_nocommon_attribute (tree *node, tree name,\n \n static tree\n handle_common_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == VAR_DECL)\n     DECL_COMMON (*node) = 1;\n@@ -4737,7 +4737,7 @@ handle_common_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_noreturn_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t   int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t   int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree type = TREE_TYPE (*node);\n \n@@ -4765,7 +4765,7 @@ handle_noreturn_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n static tree\n handle_noinline_attribute (tree *node, tree name,\n \t\t\t   tree args ATTRIBUTE_UNUSED,\n-\t\t\t   int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t   int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     DECL_UNINLINABLE (*node) = 1;\n@@ -4785,7 +4785,7 @@ static tree\n handle_always_inline_attribute (tree *node, tree name,\n \t\t\t\ttree args ATTRIBUTE_UNUSED,\n \t\t\t\tint flags ATTRIBUTE_UNUSED,\n-\t\t\t\t_Bool *no_add_attrs)\n+\t\t\t\tbool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     {\n@@ -4806,7 +4806,7 @@ handle_always_inline_attribute (tree *node, tree name,\n \n static tree\n handle_used_attribute (tree *pnode, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree node = *pnode;\n \n@@ -4828,7 +4828,7 @@ handle_used_attribute (tree *pnode, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_unused_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   if (DECL_P (*node))\n     {\n@@ -4861,7 +4861,7 @@ handle_unused_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_const_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\tint flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\tint flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree type = TREE_TYPE (*node);\n \n@@ -4889,7 +4889,7 @@ handle_const_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n static tree\n handle_transparent_union_attribute (tree *node, tree name,\n \t\t\t\t    tree args ATTRIBUTE_UNUSED, int flags,\n-\t\t\t\t    _Bool *no_add_attrs)\n+\t\t\t\t    bool *no_add_attrs)\n {\n   tree decl = NULL_TREE;\n   tree *type = NULL;\n@@ -4934,7 +4934,7 @@ static tree\n handle_constructor_attribute (tree *node, tree name,\n \t\t\t      tree args ATTRIBUTE_UNUSED,\n \t\t\t      int flags ATTRIBUTE_UNUSED,\n-\t\t\t      _Bool *no_add_attrs)\n+\t\t\t      bool *no_add_attrs)\n {\n   tree decl = *node;\n   tree type = TREE_TYPE (decl);\n@@ -4962,7 +4962,7 @@ static tree\n handle_destructor_attribute (tree *node, tree name,\n \t\t\t     tree args ATTRIBUTE_UNUSED,\n \t\t\t     int flags ATTRIBUTE_UNUSED,\n-\t\t\t     _Bool *no_add_attrs)\n+\t\t\t     bool *no_add_attrs)\n {\n   tree decl = *node;\n   tree type = TREE_TYPE (decl);\n@@ -4988,7 +4988,7 @@ handle_destructor_attribute (tree *node, tree name,\n \n static tree\n handle_mode_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree type = *node;\n \n@@ -5073,7 +5073,7 @@ handle_mode_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_section_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n-\t\t\t  int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t  int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -5127,7 +5127,7 @@ handle_section_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n \n static tree\n handle_aligned_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n-\t\t\t  int flags, _Bool *no_add_attrs)\n+\t\t\t  int flags, bool *no_add_attrs)\n {\n   tree decl = NULL_TREE;\n   tree *type = NULL;\n@@ -5209,7 +5209,7 @@ static tree\n handle_weak_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n \t\t       tree args ATTRIBUTE_UNUSED,\n \t\t       int flags ATTRIBUTE_UNUSED,\n-\t\t       _Bool *no_add_attrs ATTRIBUTE_UNUSED)\n+\t\t       bool *no_add_attrs ATTRIBUTE_UNUSED)\n {\n   declare_weak (*node);\n \n@@ -5221,7 +5221,7 @@ handle_weak_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n \n static tree\n handle_alias_attribute (tree *node, tree name, tree args,\n-\t\t\tint flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\tint flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -5267,7 +5267,7 @@ handle_alias_attribute (tree *node, tree name, tree args,\n static tree\n handle_visibility_attribute (tree *node, tree name, tree args,\n \t\t\t     int flags ATTRIBUTE_UNUSED,\n-\t\t\t     _Bool *no_add_attrs)\n+\t\t\t     bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -5306,7 +5306,7 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n \n static tree\n handle_tls_model_attribute (tree *node, tree name, tree args,\n-\t\t\t    int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t    int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -5347,7 +5347,7 @@ static tree\n handle_no_instrument_function_attribute (tree *node, tree name,\n \t\t\t\t\t tree args ATTRIBUTE_UNUSED,\n \t\t\t\t\t int flags ATTRIBUTE_UNUSED,\n-\t\t\t\t\t _Bool *no_add_attrs)\n+\t\t\t\t\t bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -5376,7 +5376,7 @@ handle_no_instrument_function_attribute (tree *node, tree name,\n \n static tree\n handle_malloc_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     DECL_IS_MALLOC (*node) = 1;\n@@ -5397,7 +5397,7 @@ static tree\n handle_no_limit_stack_attribute (tree *node, tree name,\n \t\t\t\t tree args ATTRIBUTE_UNUSED,\n \t\t\t\t int flags ATTRIBUTE_UNUSED,\n-\t\t\t\t _Bool *no_add_attrs)\n+\t\t\t\t bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -5426,7 +5426,7 @@ handle_no_limit_stack_attribute (tree *node, tree name,\n \n static tree\n handle_pure_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     DECL_IS_PURE (*node) = 1;\n@@ -5446,7 +5446,7 @@ handle_pure_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n static tree\n handle_deprecated_attribute (tree *node, tree name,\n \t\t\t     tree args ATTRIBUTE_UNUSED, int flags,\n-\t\t\t     _Bool *no_add_attrs)\n+\t\t\t     bool *no_add_attrs)\n {\n   tree type = NULL_TREE;\n   int warn = 0;\n@@ -5511,7 +5511,7 @@ static GTY(()) tree vector_type_node_list = 0;\n static tree\n handle_vector_size_attribute (tree *node, tree name, tree args,\n \t\t\t      int flags ATTRIBUTE_UNUSED,\n-\t\t\t      _Bool *no_add_attrs)\n+\t\t\t      bool *no_add_attrs)\n {\n   unsigned HOST_WIDE_INT vecsize, nunits;\n   enum machine_mode mode, orig_mode, new_mode;\n@@ -5689,7 +5689,7 @@ vector_size_helper (tree type, tree bottom)\n static tree\n handle_nonnull_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n \t\t\t  tree args, int flags ATTRIBUTE_UNUSED,\n-\t\t\t  _Bool *no_add_attrs)\n+\t\t\t  bool *no_add_attrs)\n {\n   tree type = *node;\n   unsigned HOST_WIDE_INT attr_arg_num;\n@@ -5853,7 +5853,7 @@ get_nonnull_operand (tree arg_num_expr, unsigned HOST_WIDE_INT *valp)\n \n static tree\n handle_nothrow_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t  int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t  int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     TREE_NOTHROW (*node) = 1;\n@@ -5872,7 +5872,7 @@ handle_nothrow_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_cleanup_attribute (tree *node, tree name, tree args,\n-\t\t\t  int flags ATTRIBUTE_UNUSED, _Bool *no_add_attrs)\n+\t\t\t  int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n {\n   tree decl = *node;\n   tree cleanup_id, cleanup_decl;"}]}