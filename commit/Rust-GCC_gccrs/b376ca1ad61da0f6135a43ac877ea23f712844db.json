{"sha": "b376ca1ad61da0f6135a43ac877ea23f712844db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3NmNhMWFkNjFkYTBmNjEzNWE0M2FjODc3ZWEyM2Y3MTI4NDRkYg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-02-19T09:10:39Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-02-19T09:10:39Z"}, "message": "SelectorImpl.java: Reworked import statements.\n\n2005-02-19  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/SelectorImpl.java:\n\tReworked import statements.\n\t(register): Removed unused code.\n\t* java/nio/channels/Channels.java: Reformatted.\n\t* java/nio/charset/Charset.java: Likewise.\n\t* java/rmi/server/RemoteObject.java\n\t(serialVersionUID): Made private.\n\t* java/rmi/server/UID.java\n\t(serialVersionUID): Likewise.\n\nFrom-SVN: r95273", "tree": {"sha": "8ba67b5181aa582245424ab74baaad9a90b172a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba67b5181aa582245424ab74baaad9a90b172a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b376ca1ad61da0f6135a43ac877ea23f712844db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b376ca1ad61da0f6135a43ac877ea23f712844db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b376ca1ad61da0f6135a43ac877ea23f712844db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b376ca1ad61da0f6135a43ac877ea23f712844db/comments", "author": null, "committer": null, "parents": [{"sha": "4aec6c476ff4060c80d1349658b27d900f67b33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aec6c476ff4060c80d1349658b27d900f67b33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aec6c476ff4060c80d1349658b27d900f67b33c"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "39de12b2fe51ee343bc9acdf4ab8b09d84a74ec1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b376ca1ad61da0f6135a43ac877ea23f712844db", "patch": "@@ -1,3 +1,15 @@\n+2005-02-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/SelectorImpl.java:\n+\tReworked import statements.\n+\t(register): Removed unused code.\n+\t* java/nio/channels/Channels.java: Reformatted.\n+\t* java/nio/charset/Charset.java: Likewise.\n+\t* java/rmi/server/RemoteObject.java\n+\t(serialVersionUID): Made private.\n+\t* java/rmi/server/UID.java\n+\t(serialVersionUID): Likewise.\n+\n 2005-02-19  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol/ftp/ActiveModeDTP.java,"}, {"sha": "f64c86d1f54a84b797db2343be8333a9e7aa2859", "filename": "libjava/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=b376ca1ad61da0f6135a43ac877ea23f712844db", "patch": "@@ -1,5 +1,5 @@\n /* SelectorImpl.java -- \n-   Copyright (C) 2002, 2003  Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,6 +35,7 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package gnu.java.nio;\n \n import java.io.IOException;\n@@ -49,11 +50,9 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n-import gnu.classpath.Configuration;\n \n public class SelectorImpl extends AbstractSelector\n {\n-  \n   private Set keys;\n   private Set selected;\n \n@@ -375,24 +374,13 @@ protected final SelectionKey register (AbstractSelectableChannel ch, int ops,\n     SelectionKeyImpl result;\n     \n     if (ch instanceof SocketChannelImpl)\n-      {\n-        SocketChannelImpl sc = (SocketChannelImpl) ch;\n-        result = new SocketChannelSelectionKey (ch, this);\n-      }\n+      result = new SocketChannelSelectionKey (ch, this);\n     else if (ch instanceof DatagramChannelImpl)\n-      {\n-        DatagramChannelImpl dc = (DatagramChannelImpl) ch;\n-        result = new DatagramChannelSelectionKey (ch, this);\n-      }\n+      result = new DatagramChannelSelectionKey (ch, this);\n     else if (ch instanceof ServerSocketChannelImpl)\n-      {\n-        ServerSocketChannelImpl ssc = (ServerSocketChannelImpl) ch;\n-        result = new ServerSocketChannelSelectionKey (ch, this);\n-      }\n+      result = new ServerSocketChannelSelectionKey (ch, this);\n     else\n-      {\n-        throw new InternalError (\"No known channel type\");\n-      }\n+      throw new InternalError (\"No known channel type\");\n \n     synchronized (keys)\n       {"}, {"sha": "4c86cc9079a2ee8cf856ee7e17b2fae92f4c097a", "filename": "libjava/java/nio/channels/Channels.java", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java?ref=b376ca1ad61da0f6135a43ac877ea23f712844db", "patch": "@@ -1,5 +1,5 @@\n /* Channels.java --\n-   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,6 +35,7 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package java.nio.channels;\n \n import gnu.java.nio.ChannelInputStream;\n@@ -62,7 +63,10 @@\n   /**\n    * This class isn't intended to be instantiated.\n    */\n-  private Channels() {}\n+  private Channels()\n+  {\n+    // Do nothing here.\n+  }\n \n   /**\n    * Constructs a stream that reads bytes from the given channel."}, {"sha": "c7672c1c3df74ab7d0e9d3d9dec1e2476fe56524", "filename": "libjava/java/nio/charset/Charset.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=b376ca1ad61da0f6135a43ac877ea23f712844db", "patch": "@@ -147,35 +147,35 @@ public static Charset forName (String charsetName)\n    * Retrieves a charset for the given charset name.\n    *\n    * @return A charset object for the charset with the specified name, or\n-   *   <code>null</code> if no such charset exists.\n+   * <code>null</code> if no such charset exists.\n    *\n    * @throws IllegalCharsetNameException  if the name is illegal\n    */\n-  private static Charset charsetForName (String charsetName)\n+  private static Charset charsetForName(String charsetName)\n   {\n     checkName (charsetName);\n     return provider ().charsetForName (charsetName);\n   }\n \n-  public static SortedMap availableCharsets ()\n+  public static SortedMap availableCharsets()\n   {\n-    TreeMap charsets = new TreeMap (String.CASE_INSENSITIVE_ORDER);\n+    TreeMap charsets = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n \n     for (Iterator i = provider ().charsets (); i.hasNext (); )\n       {\n         Charset cs = (Charset) i.next ();\n         charsets.put (cs.name (), cs);\n       }\n \n-    return Collections.unmodifiableSortedMap (charsets);\n+    return Collections.unmodifiableSortedMap(charsets);\n   }\n \n   // XXX: we need to support multiple providers, reading them from\n   // java.nio.charset.spi.CharsetProvider in the resource directory\n   // META-INF/services\n-  private static CharsetProvider provider ()\n+  private static CharsetProvider provider()\n   {\n-    return Provider.provider ();\n+    return Provider.provider();\n   }\n \n   public final String name ()"}, {"sha": "6dca07f8e1a348c54ae68250409c6a82286d53d5", "filename": "libjava/java/rmi/server/RemoteObject.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteObject.java?ref=b376ca1ad61da0f6135a43ac877ea23f712844db", "patch": "@@ -50,7 +50,7 @@\n public abstract class RemoteObject\n \timplements Remote, Serializable {\n \n-public static final long serialVersionUID = -3215090123894869218l;\n+private static final long serialVersionUID = -3215090123894869218l;\n \n protected transient RemoteRef ref;\n "}, {"sha": "d472e69c9952656944466db4832fc81905ad3163", "filename": "libjava/java/rmi/server/UID.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Frmi%2Fserver%2FUID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b376ca1ad61da0f6135a43ac877ea23f712844db/libjava%2Fjava%2Frmi%2Fserver%2FUID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FUID.java?ref=b376ca1ad61da0f6135a43ac877ea23f712844db", "patch": "@@ -45,7 +45,7 @@\n \n public final class UID implements Serializable\n {\n-public static final long serialVersionUID = 1086053664494604050L;\n+private static final long serialVersionUID = 1086053664494604050L;\n \n private static final Object lock = UID.class;\n private static long baseTime = System.currentTimeMillis();"}]}