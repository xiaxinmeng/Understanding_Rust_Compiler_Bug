{"sha": "8dedf065aff22b09bd4e48e1be0b77c58d297100", "node_id": "C_kwDOANBUbNoAKDhkZWRmMDY1YWZmMjJiMDliZDRlNDhlMWJlMGI3N2M1OGQyOTcxMDA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-26T09:11:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-26T09:16:20Z"}, "message": "c++: Fix up taking address of an immediate function diagnostics [PR102753]\n\nOn Wed, Oct 20, 2021 at 07:16:44PM -0400, Jason Merrill wrote:\n> or an unevaluated operand, or a subexpression of an immediate invocation.\n>\n> Hmm...that suggests that in consteval23.C, bar(foo) should also be OK,\n\nThe following patch handles that by removing the diagnostics about taking\naddress of immediate function from cp_build_addr_expr_1, and instead diagnoses\nit in cp_fold_r.  To do that with proper locations, the patch attempts to\nensure that ADDR_EXPRs of immediate functions get EXPR_LOCATION set and\nadds a PTRMEM_CST_LOCATION for PTRMEM_CSTs.  Also, evaluation of\nstd::source_location::current() is moved from genericization to cp_fold.\n\n2021-11-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102753\n\t* cp-tree.h (struct ptrmem_cst): Add locus member.\n\t(PTRMEM_CST_LOCATION): Define.\n\t* tree.c (make_ptrmem_cst): Set PTRMEM_CST_LOCATION to input_location.\n\t(cp_expr_location): Return PTRMEM_CST_LOCATION for PTRMEM_CST.\n\t* typeck.c (build_x_unary_op): Overwrite PTRMEM_CST_LOCATION for\n\tPTRMEM_CST instead of calling maybe_wrap_with_location.\n\t(cp_build_addr_expr_1): Don't diagnose taking address of\n\timmediate functions here.  Instead when taking their address make\n\tsure the returned ADDR_EXPR has EXPR_LOCATION set.\n\t(expand_ptrmemfunc_cst): Copy over PTRMEM_CST_LOCATION to ADDR_EXPR's\n\tEXPR_LOCATION.\n\t(convert_for_assignment): Use cp_expr_loc_or_input_loc instead of\n\tEXPR_LOC_OR_LOC.\n\t* pt.c (tsubst_copy): Use build1_loc instead of build1.  Ensure\n\tADDR_EXPR of immediate function has EXPR_LOCATION set.\n\t* cp-gimplify.c (cp_fold_r): Diagnose taking address of immediate\n\tfunctions here.  For consteval if don't walk THEN_CLAUSE.\n\t(cp_genericize_r): Move evaluation of calls to\n\tstd::source_location::current from here to...\n\t(cp_fold): ... here.  Don't assert calls to immediate functions must\n\tbe source_location_current_p, instead only constant evaluate\n\tcalls to source_location_current_p.\n\n\t* g++.dg/cpp2a/consteval20.C: Add some extra tests.\n\t* g++.dg/cpp2a/consteval23.C: Likewise.\n\t* g++.dg/cpp2a/consteval25.C: New test.\n\t* g++.dg/cpp2a/srcloc20.C: New test.", "tree": {"sha": "f9063b4c4b6aad9b441a7916cfdce755ae1eaab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9063b4c4b6aad9b441a7916cfdce755ae1eaab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dedf065aff22b09bd4e48e1be0b77c58d297100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dedf065aff22b09bd4e48e1be0b77c58d297100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dedf065aff22b09bd4e48e1be0b77c58d297100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dedf065aff22b09bd4e48e1be0b77c58d297100/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90cb088ece8d8cc1019d25629d1585e5b0234179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90cb088ece8d8cc1019d25629d1585e5b0234179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90cb088ece8d8cc1019d25629d1585e5b0234179"}], "stats": {"total": 202, "additions": 165, "deletions": 37}, "files": [{"sha": "2fbb4236b929160369bed359fccb43796dce7b1d", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 64, "deletions": 13, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -900,8 +900,39 @@ struct cp_genericize_data\n static tree\n cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data)\n {\n-  tree stmt;\n-  enum tree_code code;\n+  tree stmt = *stmt_p;\n+  enum tree_code code = TREE_CODE (stmt);\n+\n+  switch (code)\n+    {\n+    case PTRMEM_CST:\n+      if (TREE_CODE (PTRMEM_CST_MEMBER (stmt)) == FUNCTION_DECL\n+\t  && DECL_IMMEDIATE_FUNCTION_P (PTRMEM_CST_MEMBER (stmt)))\n+\t{\n+\t  if (!((hash_set<tree> *) data)->add (stmt))\n+\t    error_at (PTRMEM_CST_LOCATION (stmt),\n+\t\t      \"taking address of an immediate function %qD\",\n+\t\t      PTRMEM_CST_MEMBER (stmt));\n+\t  stmt = *stmt_p = build_zero_cst (TREE_TYPE (stmt));\n+\t  break;\n+\t}\n+      break;\n+\n+    case ADDR_EXPR:\n+      if (TREE_CODE (TREE_OPERAND (stmt, 0)) == FUNCTION_DECL\n+\t  && DECL_IMMEDIATE_FUNCTION_P (TREE_OPERAND (stmt, 0)))\n+\t{\n+\t  error_at (EXPR_LOCATION (stmt),\n+\t\t    \"taking address of an immediate function %qD\",\n+\t\t    TREE_OPERAND (stmt, 0));\n+\t  stmt = *stmt_p = build_zero_cst (TREE_TYPE (stmt));\n+\t  break;\n+\t}\n+      break;\n+\n+    default:\n+      break;\n+    }\n \n   *stmt_p = stmt = cp_fold (*stmt_p);\n \n@@ -917,12 +948,16 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data)\n     }\n \n   code = TREE_CODE (stmt);\n-  if (code == OMP_FOR || code == OMP_SIMD || code == OMP_DISTRIBUTE\n-      || code == OMP_LOOP || code == OMP_TASKLOOP || code == OACC_LOOP)\n+  switch (code)\n     {\n       tree x;\n       int i, n;\n-\n+    case OMP_FOR:\n+    case OMP_SIMD:\n+    case OMP_DISTRIBUTE:\n+    case OMP_LOOP:\n+    case OMP_TASKLOOP:\n+    case OACC_LOOP:\n       cp_walk_tree (&OMP_FOR_BODY (stmt), cp_fold_r, data, NULL);\n       cp_walk_tree (&OMP_FOR_CLAUSES (stmt), cp_fold_r, data, NULL);\n       cp_walk_tree (&OMP_FOR_INIT (stmt), cp_fold_r, data, NULL);\n@@ -961,6 +996,22 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t}\n       cp_walk_tree (&OMP_FOR_PRE_BODY (stmt), cp_fold_r, data, NULL);\n       *walk_subtrees = 0;\n+      return NULL;\n+\n+    case IF_STMT:\n+      if (IF_STMT_CONSTEVAL_P (stmt))\n+\t{\n+\t  /* Don't walk THEN_CLAUSE (stmt) for consteval if.  IF_COND is always\n+\t     boolean_false_node.  */\n+\t  cp_walk_tree (&ELSE_CLAUSE (stmt), cp_fold_r, data, NULL);\n+\t  cp_walk_tree (&IF_SCOPE (stmt), cp_fold_r, data, NULL);\n+\t  *walk_subtrees = 0;\n+\t  return NULL;\n+\t}\n+      break;\n+\n+    default:\n+      break;\n     }\n \n   return NULL;\n@@ -1476,14 +1527,6 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \t  break;\n \t}\n \n-      if (tree fndecl = cp_get_callee_fndecl_nofold (stmt))\n-\tif (DECL_IMMEDIATE_FUNCTION_P (fndecl))\n-\t  {\n-\t    gcc_assert (source_location_current_p (fndecl));\n-\t    *stmt_p = cxx_constant_value (stmt);\n-\t    break;\n-\t  }\n-\n       if (!wtd->no_sanitize_p\n \t  && sanitize_flags_p ((SANITIZE_NULL\n \t\t\t\t| SANITIZE_ALIGNMENT | SANITIZE_VPTR)))\n@@ -2629,6 +2672,14 @@ cp_fold (tree x)\n \tint sv = optimize, nw = sv;\n \ttree callee = get_callee_fndecl (x);\n \n+\tif (tree fndecl = cp_get_callee_fndecl_nofold (x))\n+\t  if (DECL_IMMEDIATE_FUNCTION_P (fndecl)\n+\t      && source_location_current_p (fndecl))\n+\t    {\n+\t      x = cxx_constant_value (x);\n+\t      break;\n+\t    }\n+\n \t/* Some built-in function calls will be evaluated at compile-time in\n \t   fold ().  Set optimize to 1 when folding __builtin_constant_p inside\n \t   a constexpr function so that fold_builtin_1 doesn't fold it to 0.  */"}, {"sha": "1ee2c57e83c79a0efb722f44707077c8bb628cdb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -703,6 +703,7 @@ struct GTY(()) template_parm_index {\n struct GTY(()) ptrmem_cst {\n   struct tree_common common;\n   tree member;\n+  location_t locus;\n };\n typedef struct ptrmem_cst * ptrmem_cst_t;\n \n@@ -4726,6 +4727,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define PTRMEM_CST_MEMBER(NODE) \\\n   (((ptrmem_cst_t)PTRMEM_CST_CHECK (NODE))->member)\n \n+/* For a pointer-to-member constant `X::Y' this is a location where\n+   the address of the member has been taken.  */\n+#define PTRMEM_CST_LOCATION(NODE) \\\n+  (((ptrmem_cst_t)PTRMEM_CST_CHECK (NODE))->locus)\n+\n /* The expression in question for a TYPEOF_TYPE.  */\n #define TYPEOF_TYPE_EXPR(NODE) (TYPE_VALUES_RAW (TYPEOF_TYPE_CHECK (NODE)))\n "}, {"sha": "74323701a7dd29ce4f041e2eb34ec81b12c9a93e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -17012,9 +17012,16 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       {\n \ttree type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n \ttree op0 = tsubst_copy (TREE_OPERAND (t, 0), args, complain, in_decl);\n-\tr = build1 (code, type, op0);\n+\tr = build1_loc (EXPR_LOCATION (t), code, type, op0);\n \tif (code == ALIGNOF_EXPR)\n \t  ALIGNOF_EXPR_STD_P (r) = ALIGNOF_EXPR_STD_P (t);\n+\t/* For addresses of immediate functions ensure we have EXPR_LOCATION\n+\t   set for possible later diagnostics.  */\n+\tif (code == ADDR_EXPR\n+\t    && EXPR_LOCATION (r) == UNKNOWN_LOCATION\n+\t    && TREE_CODE (op0) == FUNCTION_DECL\n+\t    && DECL_IMMEDIATE_FUNCTION_P (op0))\n+\t  SET_EXPR_LOCATION (r, input_location);\n \treturn r;\n       }\n "}, {"sha": "1471ed8a2efe0823524a7fb5cb057a4454f18b0d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -5196,6 +5196,7 @@ make_ptrmem_cst (tree type, tree member)\n   tree ptrmem_cst = make_node (PTRMEM_CST);\n   TREE_TYPE (ptrmem_cst) = type;\n   PTRMEM_CST_MEMBER (ptrmem_cst) = member;\n+  PTRMEM_CST_LOCATION (ptrmem_cst) = input_location;\n   return ptrmem_cst;\n }\n \n@@ -6040,6 +6041,8 @@ cp_expr_location (const_tree t_)\n       return STATIC_ASSERT_SOURCE_LOCATION (t);\n     case TRAIT_EXPR:\n       return TRAIT_EXPR_LOCATION (t);\n+    case PTRMEM_CST:\n+      return PTRMEM_CST_LOCATION (t);\n     default:\n       return EXPR_LOCATION (t);\n     }"}, {"sha": "5ed9a5ab9ee92f5a4c142f3be49bde233a3c2048", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -6497,7 +6497,7 @@ build_x_unary_op (location_t loc, enum tree_code code, cp_expr xarg,\n       exp = cp_build_addr_expr_strict (xarg, complain);\n \n       if (TREE_CODE (exp) == PTRMEM_CST)\n-\texp = maybe_wrap_with_location (exp, loc);\n+\tPTRMEM_CST_LOCATION (exp) = loc;\n       else\n \tprotected_set_expr_location (exp, loc);\n     }\n@@ -6780,16 +6780,6 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t    return error_mark_node;\n \t  }\n \n-\tif (TREE_CODE (t) == FUNCTION_DECL\n-\t    && DECL_IMMEDIATE_FUNCTION_P (t)\n-\t    && !in_immediate_context ())\n-\t  {\n-\t    if (complain & tf_error)\n-\t      error_at (loc, \"taking address of an immediate function %qD\",\n-\t\t\tt);\n-\t    return error_mark_node;\n-\t  }\n-\n \ttype = build_ptrmem_type (context_for_name_lookup (t),\n \t\t\t\t  TREE_TYPE (t));\n \tt = make_ptrmem_cst (type, t);\n@@ -6815,15 +6805,6 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n   if (processing_template_decl || TREE_CODE (arg) != COMPONENT_REF)\n     {\n       tree stripped_arg = tree_strip_any_location_wrapper (arg);\n-      if (TREE_CODE (stripped_arg) == FUNCTION_DECL\n-\t  && DECL_IMMEDIATE_FUNCTION_P (stripped_arg)\n-\t  && !in_immediate_context ())\n-\t{\n-\t  if (complain & tf_error)\n-\t    error_at (loc, \"taking address of an immediate function %qD\",\n-\t\t      stripped_arg);\n-\t  return error_mark_node;\n-\t}\n       if (TREE_CODE (stripped_arg) == FUNCTION_DECL\n \t  && !mark_used (stripped_arg, complain) && !(complain & tf_error))\n \treturn error_mark_node;\n@@ -6865,6 +6846,13 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t\t\t      complain);\n     }\n \n+  /* For addresses of immediate functions ensure we have EXPR_LOCATION\n+     set for possible later diagnostics.  */\n+  if (TREE_CODE (val) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (val, 0)) == FUNCTION_DECL\n+      && DECL_IMMEDIATE_FUNCTION_P (TREE_OPERAND (val, 0)))\n+    SET_EXPR_LOCATION (val, input_location);\n+\n   return val;\n }\n \n@@ -9571,8 +9559,12 @@ expand_ptrmemfunc_cst (tree cst, tree *delta, tree *pfn)\n \t\t\t\t /*c_cast_p=*/0, tf_warning_or_error);\n \n   if (!DECL_VIRTUAL_P (fn))\n-    *pfn = convert (TYPE_PTRMEMFUNC_FN_TYPE (type),\n-\t\t    build_addr_func (fn, tf_warning_or_error));\n+    {\n+      tree t = build_addr_func (fn, tf_warning_or_error);\n+      if (TREE_CODE (t) == ADDR_EXPR)\n+\tSET_EXPR_LOCATION (t, PTRMEM_CST_LOCATION (cst));\n+      *pfn = convert (TYPE_PTRMEMFUNC_FN_TYPE (type), t);\n+    }\n   else\n     {\n       /* If we're dealing with a virtual function, we have to adjust 'this'\n@@ -9665,7 +9657,7 @@ convert_for_assignment (tree type, tree rhs,\n   tree rhstype;\n   enum tree_code coder;\n \n-  location_t rhs_loc = EXPR_LOC_OR_LOC (rhs, input_location);\n+  location_t rhs_loc = cp_expr_loc_or_input_loc (rhs);\n   bool has_loc = EXPR_LOCATION (rhs) != UNKNOWN_LOCATION;\n   /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue,\n      but preserve location wrappers.  */"}, {"sha": "bd44712c53516ac48f0f850b2b3715b764d86a2b", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval20.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval20.C?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -10,10 +10,14 @@ constexpr S s;\n int\n bar ()\n {\n+  auto c = &S::foo;\t\t\t// { dg-error \"taking address of an immediate function\" }\n+  constexpr auto d = &S::foo;\t\t// { dg-error \"taking address of an immediate function\" }\n+  static auto e = &S::foo;\t\t// { dg-error \"taking address of an immediate function\" }\n   return (s.*&S::foo) ();\t\t// { dg-error \"taking address of an immediate function\" }\n }\n \n constexpr auto a = &S::foo;\t\t// { dg-error \"taking address of an immediate function\" }\n+auto b = &S::foo;\t\t\t// { dg-error \"taking address of an immediate function\" }\n \n consteval int\n baz ()"}, {"sha": "a6fdaa836de6b69bac5163cc9149b01cf02ad30c", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval23.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval23.C?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -2,6 +2,7 @@\n // { dg-do compile { target c++20 } }\n \n consteval int foo () { return 42; }\n+constexpr auto baz (int (*fn) ()) { return fn; }\n \n consteval int\n bar (int (*fn) () = foo)\n@@ -11,3 +12,6 @@ bar (int (*fn) () = foo)\n \n static_assert (bar () == 42);\n static_assert (bar (foo) == 42);\n+static_assert (bar (&foo) == 42);\n+static_assert (bar (baz (foo)) == 42);\n+static_assert (bar (baz (&foo)) == 42);"}, {"sha": "80b76a474cbd9eab1777f8936794b042d074127f", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval25.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval25.C?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"\" }\n+\n+consteval int foo () { return 42; }\n+\n+consteval int\n+bar (int (*fn) ())\n+{\n+  return fn ();\n+}\n+\n+void\n+baz ()\n+{\n+  static_assert (bar (({ constexpr auto a = 1; foo; })) == 42);\n+}"}, {"sha": "acdf5a6505fa56a7fb71b4380e0e5ffb594efeca", "filename": "gcc/testsuite/g++.dg/cpp2a/srcloc20.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dedf065aff22b09bd4e48e1be0b77c58d297100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fsrcloc20.C?ref=8dedf065aff22b09bd4e48e1be0b77c58d297100", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile { target c++20 } }\n+\n+namespace std {\n+  struct source_location {\n+    struct __impl {\n+      const char *_M_file_name;\n+      const char *_M_function_name;\n+      unsigned int _M_line, _M_column;\n+    };\n+    const __impl *__ptr;\n+    constexpr source_location () : __ptr (nullptr) {}\n+    static consteval source_location\n+    current (const void *__p = __builtin_source_location ()) {\n+      source_location __ret;\n+      __ret.__ptr = static_cast <const __impl *> (__p);\n+      return __ret;\n+    }\n+    constexpr const char *file_name () const {\n+      return __ptr ? __ptr->_M_file_name : \"\";\n+    }\n+    constexpr const char *function_name () const {\n+      return __ptr ? __ptr->_M_function_name : \"\";\n+    }\n+    constexpr unsigned line () const {\n+      return __ptr ? __ptr->_M_line : 0;\n+    }\n+    constexpr unsigned column () const {\n+      return __ptr ? __ptr->_M_column : 0;\n+    }\n+  };\n+}\n+\n+using namespace std;\n+\n+auto a = source_location::current;\t\t// { dg-error \"taking address of an immediate function\" }\n+constexpr auto b = &source_location::current;\t// { dg-error \"taking address of an immediate function\" }\n+\n+void\n+foo ()\n+{\n+  auto c = &source_location::current;\t\t// { dg-error \"taking address of an immediate function\" }\n+  constexpr auto d = source_location::current;\t// { dg-error \"taking address of an immediate function\" }\n+  static auto e = source_location::current;\t// { dg-error \"taking address of an immediate function\" }\n+}"}]}