{"sha": "8d5e6e2527f07e6cfda3b62f1fd826006931d551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ1ZTZlMjUyN2YwN2U2Y2ZkYTNiNjJmMWZkODI2MDA2OTMxZDU1MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-05-27T15:21:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-05-27T15:21:17Z"}, "message": "tree.h (TREE_CODE_LENGTH): New macro.\n\n\t* tree.h (TREE_CODE_LENGTH): New macro.\n\t* c-common.c (c_find_base_decl): Use it.\n\t* expr.c (safe_from_p): Likewise.\n\t* print-tree.c (print_node): Likewise.\n\t* tree.c (make_node, copy_node, get_identifier): Likewie.\n\t(first_rtl_op, contains_placeholder_p, substitute_in_expr): Likewise.\n\t(build, build_nt, build_parse_node, simple_cst_equal): Likewise.\n\t* fold-const.c (make_range): Likewise.\n\t(fold): Likewise; also use first_rtl_op.\n\t* c-iterate.c (collect_iterators): Use first_rtl_op.\n\t* calls.c (calls_function_1): Likewise; also rename TYPE to CLASS.\n\tUse IS_EXPR_CODE_CLASS.\n\t(preexpand_calls): Likewise.\n\t* ggc-common.c (ggc_mark_trees): Rework to use first_rtl_op\n\tand TREE_CODE_LENGTH.\n\t* stmt.c (warn_if_unused_value): If no operands, no unused value.\n\t* ch/lang.c (deep_const_expr): Use first_rtl_op.\n\t* ch/satisfy.c (satisfy): Use TREE_CODE_LENGTH.\n\t* cp/method.c (mangle_expression): Use TREE_CODE_LENGTH.\n\t* cp/tree.c (break_out_calls, build_min_nt): Use TREE_CODE_LENGTH.\n\t(built_min, cp_tree_equal): Likewise.\n\nFrom-SVN: r34203", "tree": {"sha": "e4055b6cf63a0bcf4381fb7092adf5db521626a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4055b6cf63a0bcf4381fb7092adf5db521626a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d5e6e2527f07e6cfda3b62f1fd826006931d551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5e6e2527f07e6cfda3b62f1fd826006931d551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d5e6e2527f07e6cfda3b62f1fd826006931d551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5e6e2527f07e6cfda3b62f1fd826006931d551/comments", "author": null, "committer": null, "parents": [{"sha": "0777f60c79e32b504c03b6a703d6833ca6bc91c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0777f60c79e32b504c03b6a703d6833ca6bc91c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0777f60c79e32b504c03b6a703d6833ca6bc91c5"}], "stats": {"total": 213, "additions": 107, "deletions": 106}, "files": [{"sha": "886a7e26fbf7f40865c9effe7ec42e3407e7e8ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -1,3 +1,22 @@\n+Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* tree.h (TREE_CODE_LENGTH): New macro.\n+\t* c-common.c (c_find_base_decl): Use it.\n+\t* expr.c (safe_from_p): Likewise.\n+\t* print-tree.c (print_node): Likewise.\n+\t* tree.c (make_node, copy_node, get_identifier): Likewie.\n+\t(first_rtl_op, contains_placeholder_p, substitute_in_expr): Likewise.\n+\t(build, build_nt, build_parse_node, simple_cst_equal): Likewise.\n+\t* fold-const.c (make_range): Likewise.\n+\t(fold): Likewise; also use first_rtl_op.\n+\t* c-iterate.c (collect_iterators): Use first_rtl_op.\n+\t* calls.c (calls_function_1): Likewise; also rename TYPE to CLASS.\n+\tUse IS_EXPR_CODE_CLASS.\n+\t(preexpand_calls): Likewise.\n+\t* ggc-common.c (ggc_mark_trees): Rework to use first_rtl_op\n+\tand TREE_CODE_LENGTH.\n+\t* stmt.c (warn_if_unused_value): If no operands, no unused value.\n+\n 2000-05-26  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/rs6000.md (movsi_internal1): Use '%a1' rather"}, {"sha": "6989d4016de065fbdf684864c8d97131346b9e11", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -3297,7 +3297,7 @@ c_find_base_decl (t)\n     case '1':\n     case '2':\n     case '3':\n-      for (i = tree_code_length [(int) TREE_CODE (t)]; --i >= 0;)\n+      for (i = TREE_CODE_LENGTH (TREE_CODE (t)); --i >= 0;)\n \t{\n \t  tree d = c_find_base_decl (TREE_OPERAND (t, i));\n \t  if (d)"}, {"sha": "0e545d80d9de546e4f09ca35ab07c1adf28e1634", "filename": "gcc/c-iterate.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fc-iterate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fc-iterate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-iterate.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -241,27 +241,9 @@ collect_iterators (exp, list)\n \tcase 'e':\n \tcase 'r':\n \t  {\n-\t    int num_args = tree_code_length[(int) TREE_CODE (exp)];\n+\t    int num_args = first_rtl_op (TREE_CODE (exp));\n \t    int i;\n \n-\t    /* Some tree codes have RTL, not trees, as operands.  */\n-\t    switch (TREE_CODE (exp))\n-\t      {\n-\t      case CALL_EXPR:\n-\t\tnum_args = 2;\n-\t\tbreak;\n-\t      case METHOD_CALL_EXPR:\n-\t\tnum_args = 3;\n-\t\tbreak;\n-\t      case WITH_CLEANUP_EXPR:\n-\t\tnum_args = 1;\n-\t\tbreak;\n-\t      case RTL_EXPR:\n-\t\treturn list;\n-\t      default:\n-\t\tbreak;\n-\t      }\n-\t\t\n \t    for (i = 0; i < num_args; i++)\n \t      list = collect_iterators (TREE_OPERAND (exp, i), list);\n \t    return list;"}, {"sha": "08ab00d9f9e4e0f74fa6c880398ad4c3b70802db", "filename": "gcc/calls.c", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -238,21 +238,24 @@ calls_function (exp, which)\n      int which;\n {\n   int val;\n+\n   calls_function_save_exprs = 0;\n   val = calls_function_1 (exp, which);\n   calls_function_save_exprs = 0;\n   return val;\n }\n \n+/* Recursive function to do the work of above function.  */\n+\n static int\n calls_function_1 (exp, which)\n      tree exp;\n      int which;\n {\n   register int i;\n   enum tree_code code = TREE_CODE (exp);\n-  int type = TREE_CODE_CLASS (code);\n-  int length = tree_code_length[(int) code];\n+  int class = TREE_CODE_CLASS (code);\n+  int length = first_rtl_op (code);\n \n   /* If this code is language-specific, we don't know what it will do.  */\n   if ((int) code >= NUM_TREE_CODES)\n@@ -265,16 +268,12 @@ calls_function_1 (exp, which)\n \treturn 1;\n       else if (TREE_CODE (TREE_OPERAND (exp, 0)) == ADDR_EXPR\n \t       && (TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n-\t\t   == FUNCTION_DECL))\n-\t{\n-\t  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n-\t  int flags = special_function_p (fndecl, 0);\n-\t  if (flags & ECF_MAY_BE_ALLOCA)\n-\t    return 1;\n-\t}\n+\t\t   == FUNCTION_DECL)\n+\t       && (special_function_p (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n+\t\t\t\t       0)\n+\t\t   & ECF_MAY_BE_ALLOCA))\n+\treturn 1;\n \n-      /* Third operand is RTL.  */\n-      length = 2;\n       break;\n \n     case SAVE_EXPR:\n@@ -290,14 +289,12 @@ calls_function_1 (exp, which)\n     case BLOCK:\n       {\n \tregister tree local;\n+\tregister tree subblock;\n \n \tfor (local = BLOCK_VARS (exp); local; local = TREE_CHAIN (local))\n \t  if (DECL_INITIAL (local) != 0\n \t      && calls_function_1 (DECL_INITIAL (local), which))\n \t    return 1;\n-      }\n-      {\n-\tregister tree subblock;\n \n \tfor (subblock = BLOCK_SUBBLOCKS (exp);\n \t     subblock;\n@@ -306,30 +303,19 @@ calls_function_1 (exp, which)\n \t    return 1;\n       }\n       return 0;\n+\n     case TREE_LIST:\n       for (; exp != 0; exp = TREE_CHAIN (exp))\n \tif (calls_function_1 (TREE_VALUE (exp), which))\n \t  return 1;\n       return 0;\n \n-    case METHOD_CALL_EXPR:\n-      length = 3;\n-      break;\n-\n-    case WITH_CLEANUP_EXPR:\n-      length = 1;\n-      break;\n-\n-    case RTL_EXPR:\n-      return 0;\n-\n     default:\n       break;\n     }\n \n-  /* Only expressions and references can contain calls.  */\n-  if (type != 'e' && type != '<' && type != '1' && type != '2' && type != 'r'\n-      && type != 'b')\n+  /* Only expressions, references, and blocks can contain calls.  */\n+  if (! IS_EXPR_CODE_CLASS (class) && class != 'r' && class != 'b')\n     return 0;\n \n   for (i = 0; i < length; i++)"}, {"sha": "30c39a240588da9e3dc5df6277f9a077ba81935b", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -1,3 +1,8 @@\n+Sat May 27 11:24:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* lang.c (deep_const_expr): Use first_rtl_op.\n+\t* satisfy.c (satisfy): Use TREE_CODE_LENGTH.\n+\n 2000-05-18  Chris Demetriou  <cgd@netbsd.org>\n \n \t* Makefile.in (hash.h): Delete a redundant use of gawk and sed."}, {"sha": "985eea7bffc2350460bef088ae66be757455dce0", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -53,8 +53,9 @@ extern FILE* finput;\n static int deep_const_expr\t\t\tPARAMS ((tree));\n static void chill_print_error_function\t\tPARAMS ((const char *));\n \f\n-/* return 1 if the expression tree given has all\n-   constant nodes as its leaves; return 0 otherwise. */\n+/* Return 1 if the expression tree given has all\n+   constant nodes as its leaves,otherwise. */\n+\n static int\n deep_const_expr (exp)\n      tree exp;\n@@ -67,13 +68,13 @@ deep_const_expr (exp)\n     return 0;\n \n   code = TREE_CODE (exp);\n-  length = tree_code_length[(int) code];\n+  length = first_rtl_op (TREE_CODE (exp));\n \n   /* constant leaf?  return TRUE */\n   if (TREE_CODE_CLASS (code) == 'c')\n     return 1;\n \n-  /* recursively check next level down */\n+  /* Recursively check next level down.  */\n   for (i = 0; i < length; i++)\n     if (! deep_const_expr (TREE_OPERAND (exp, i)))\n       return 0;"}, {"sha": "a15d9e20a316713ea05b50682116c1383dd745b2", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -371,7 +371,8 @@ satisfy (exp, chain)\n \tdefault:\n \t  ;\n \t}\n-      arg_length = tree_code_length[TREE_CODE (exp)];\n+\n+      arg_length = TREE_CODE_LENGTH (TREE_CODE (exp));\n       for (i = 0; i < arg_length; i++)\n \tSATISFY (TREE_OPERAND (exp, i));\n       return exp;"}, {"sha": "895babc9cf0ccb92d445eff6e860f0ad331a631f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -1,3 +1,9 @@\n+Sat May 27 11:25:46 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* method.c (mangle_expression): Use TREE_CODE_LENGTH.\n+\t* tree.c (break_out_calls, build_min_nt): Use TREE_CODE_LENGTH.\n+\t(built_min, cp_tree_equal): Likewise.\n+\n 2000-05-26  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (layout_nonempty_base_or_field): Replace"}, {"sha": "1f595e05015d4046ce24873b0bd793b0387d1d9e", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -519,7 +519,7 @@ mangle_expression (value)\n   if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (value))))\n     {\n       int i;\n-      int operands = tree_code_length[(int) TREE_CODE (value)];\n+      int operands = TREE_CODE_LENGTH (TREE_CODE (value));\n       tree id;\n       const char *name;\n "}, {"sha": "b62fc611625e2af787149ec7fa85927b7fede6fb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -405,7 +405,7 @@ break_out_calls (exp)\n     case 'e':  /* an expression */\n     case 'r':  /* a reference */\n     case 's':  /* an expression with side effects */\n-      for (i = tree_code_length[(int) code] - 1; i >= 0; i--)\n+      for (i = TREE_CODE_LENGTH (code) - 1; i >= 0; i--)\n \t{\n \t  t1 = break_out_calls (TREE_OPERAND (exp, i));\n \t  if (t1 != TREE_OPERAND (exp, i))\n@@ -427,7 +427,7 @@ break_out_calls (exp)\n \tchanged = 1;\n       if (changed)\n \t{\n-\t  if (tree_code_length[(int) code] == 1)\n+\t  if (TREE_CODE_LENGTH (code) == 1)\n \t    return build1 (code, TREE_TYPE (exp), t1);\n \t  else\n \t    return build (code, TREE_TYPE (exp), t1, t2);\n@@ -1659,7 +1659,7 @@ build_min_nt VPARAMS ((enum tree_code code, ...))\n #endif\n \n   t = make_node (code);\n-  length = tree_code_length[(int) code];\n+  length = TREE_CODE_LENGTH (code);\n   TREE_COMPLEXITY (t) = lineno;\n \n   for (i = 0; i < length; i++)\n@@ -1695,7 +1695,7 @@ build_min VPARAMS ((enum tree_code code, tree tt, ...))\n #endif\n \n   t = make_node (code);\n-  length = tree_code_length[(int) code];\n+  length = TREE_CODE_LENGTH (code);\n   TREE_TYPE (t) = tt;\n   TREE_COMPLEXITY (t) = lineno;\n \n@@ -1944,7 +1944,7 @@ cp_tree_equal (t1, t2)\n     case 'r':\n     case 's':\n       cmp = 1;\n-      for (i=0; i<tree_code_length[(int) code1]; ++i)\n+      for (i = 0; i < TREE_CODE_LENGTH (code1); ++i)\n \t{\n \t  cmp = cp_tree_equal (TREE_OPERAND (t1, i), TREE_OPERAND (t2, i));\n \t  if (cmp <= 0)"}, {"sha": "5cef748ee768a1a38b5678300efb1f696cdc591f", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -5499,7 +5499,7 @@ safe_from_p (x, exp, top_p)\n \t    return 0;\n \t  save_expr_rewritten[save_expr_count++] = exp;\n \n-\t  nops = tree_code_length[(int) SAVE_EXPR];\n+\t  nops = TREE_CODE_LENGTH (SAVE_EXPR);\n \t  for (i = 0; i < nops; i++)\n \t    {\n \t      tree operand = TREE_OPERAND (exp, i);\n@@ -5530,7 +5530,7 @@ safe_from_p (x, exp, top_p)\n       if (exp_rtl)\n \tbreak;\n \n-      nops = tree_code_length[(int) TREE_CODE (exp)];\n+      nops = TREE_CODE_LENGTH (TREE_CODE (exp));\n       for (i = 0; i < nops; i++)\n \tif (TREE_OPERAND (exp, i) != 0\n \t    && ! safe_from_p (x, TREE_OPERAND (exp, i), 0))\n@@ -9079,14 +9079,14 @@ preexpand_calls (exp)\n      tree exp;\n {\n   register int nops, i;\n-  int type = TREE_CODE_CLASS (TREE_CODE (exp));\n+  int class = TREE_CODE_CLASS (TREE_CODE (exp));\n \n   if (! do_preexpand_calls)\n     return;\n \n   /* Only expressions and references can contain calls.  */\n \n-  if (type != 'e' && type != '<' && type != '1' && type != '2' && type != 'r')\n+  if (! IS_EXPR_CODE_CLASS (class) && class != 'r')\n     return;\n \n   switch (TREE_CODE (exp))\n@@ -9134,7 +9134,7 @@ preexpand_calls (exp)\n       break;\n     }\n \n-  nops = tree_code_length[(int) TREE_CODE (exp)];\n+  nops = TREE_CODE_LENGTH (TREE_CODE (exp));\n   for (i = 0; i < nops; i++)\n     if (TREE_OPERAND (exp, i) != 0)\n       {\n@@ -9144,9 +9144,8 @@ preexpand_calls (exp)\n \t  ;\n \telse\n \t  {\n-\t    type = TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND (exp, i)));\n-\t    if (type == 'e' || type == '<' || type == '1' || type == '2'\n-\t\t|| type == 'r')\n+\t    class = TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND (exp, i)));\n+\t    if (IS_EXPR_CODE_CLASS (class) || class == 'r')\n \t      preexpand_calls (TREE_OPERAND (exp, i));\n \t  }\n       }"}, {"sha": "74b554702f7b9bce9cb9fe27ac07a57892436e71", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -348,28 +348,12 @@ ggc_mark_trees ()\n \tcase TREE_VEC:\n \t  {\n \t    int i = TREE_VEC_LENGTH (t);\n+\n \t    while (--i >= 0)\n \t      ggc_mark_tree (TREE_VEC_ELT (t, i));\n \t    continue;\n \t  }\n \n-\tcase SAVE_EXPR:\n-\t  ggc_mark_tree (TREE_OPERAND (t, 0));\n-\t  ggc_mark_tree (SAVE_EXPR_CONTEXT (t));\n-\t  ggc_mark_rtx (SAVE_EXPR_RTL (t));\n-\t  continue;\n-\n-\tcase RTL_EXPR:\n-\t  ggc_mark_rtx (RTL_EXPR_SEQUENCE (t));\n-\t  ggc_mark_rtx (RTL_EXPR_RTL (t));\n-\t  continue;\n-\n-\tcase CALL_EXPR:\n-\t  ggc_mark_tree (TREE_OPERAND (t, 0));\n-\t  ggc_mark_tree (TREE_OPERAND (t, 1));\n-\t  ggc_mark_rtx (CALL_EXPR_RTL (t));\n-\t  continue;\n-\n \tcase COMPLEX_CST:\n \t  ggc_mark_tree (TREE_REALPART (t));\n \t  ggc_mark_tree (TREE_IMAGPART (t));\n@@ -450,10 +434,17 @@ ggc_mark_trees ()\n \tcase 'r': case '<': case '1':\n \tcase '2': case 'e': case 's': /* Expressions.  */\n \t  {\n-\t    int i = tree_code_length[TREE_CODE (t)];\n+\t    int i = TREE_CODE_LENGTH (TREE_CODE (t));\n+\t    int first_rtl = first_rtl_op (TREE_CODE (t));\n+\n \t    while (--i >= 0)\n-\t      ggc_mark_tree (TREE_OPERAND (t, i));\n-\t    break;\n+\t      {\n+\t\tif (i >= first_rtl)\n+\t\t  ggc_mark_rtx ((rtx) TREE_OPERAND (t, i));\n+\t\telse\n+\t\t  ggc_mark_tree (TREE_OPERAND (t, i));\n+\t      }\n+\t    break;\t\n \t  }\n \n \tcase 'x':"}, {"sha": "ae409e54610647843df8047bf8c6a38a60d1a23d", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -580,10 +580,12 @@ print_node (file, prefix, node, indent)\n \t  break;\n \t}\n \n-      len = tree_code_length[(int) TREE_CODE (node)];\n+      len = TREE_CODE_LENGTH (TREE_CODE (node));\n+\n       /* Some nodes contain rtx's, not trees,\n \t after a certain point.  Print the rtx's as rtx's.  */\n       first_rtl = first_rtl_op (TREE_CODE (node));\n+\n       for (i = 0; i < len; i++)\n \t{\n \t  if (i >= first_rtl)"}, {"sha": "a1beb46ca9a9421bb42634a3631fe9f7ad3026ae", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -2004,6 +2004,14 @@ warn_if_unused_value (exp)\n \t   || TREE_CODE_CLASS (TREE_CODE (exp)) == 'r')\n \t  && TREE_THIS_VOLATILE (exp))\n \treturn 0;\n+\n+      /* If this is an expression which has no operands, there is no value\n+\t to be unused.  There are no such language-independent codes,\n+\t but front ends may define such.  */\n+      if (TREE_CODE_CLASS (TREE_CODE (exp)) == 'e'\n+\t  && TREE_CODE_LENGTH (TREE_CODE (exp)) == 0)\n+\treturn 0;\n+\n     warn:\n       warning_with_file_and_line (emit_filename, emit_lineno,\n \t\t\t\t  \"value computed is not used\");"}, {"sha": "c2bfab8baa494534f7731aefebf434333e87a638", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -996,7 +996,7 @@ make_node (code)\n       if (code == BIND_EXPR && obstack != &permanent_obstack)\n \tobstack = saveable_obstack;\n       length = sizeof (struct tree_exp)\n-\t+ (tree_code_length[(int) code] - 1) * sizeof (char *);\n+\t+ (TREE_CODE_LENGTH (code) - 1) * sizeof (char *);\n       break;\n \n     case 'c':  /* a constant */\n@@ -1005,7 +1005,7 @@ make_node (code)\n #endif\n       obstack = expression_obstack;\n \n-      /* We can't use tree_code_length for INTEGER_CST, since the number of\n+      /* We can't use TREE_CODE_LENGTH for INTEGER_CST, since the number of\n \t words is machine-dependent due to varying length of HOST_WIDE_INT,\n \t which might be wider than a pointer (e.g., long long).  Similarly\n \t for REAL_CST, since the number of words is machine-dependent due\n@@ -1017,7 +1017,7 @@ make_node (code)\n \tlength = sizeof (struct tree_real_cst);\n       else\n \tlength = sizeof (struct tree_common)\n-\t  + tree_code_length[(int) code] * sizeof (char *);\n+\t  + TREE_CODE_LENGTH (code) * sizeof (char *);\n       break;\n \n     case 'x':  /* something random, like an identifier.  */\n@@ -1032,7 +1032,7 @@ make_node (code)\n \tkind = x_kind;\n #endif\n       length = sizeof (struct tree_common)\n-\t+ tree_code_length[(int) code] * sizeof (char *);\n+\t+ TREE_CODE_LENGTH (code) * sizeof (char *);\n       /* Identifier nodes are always permanent since they are\n \t unique in a compiler run.  */\n       if (code == IDENTIFIER_NODE) obstack = &permanent_obstack;\n@@ -1171,11 +1171,11 @@ copy_node (node)\n     case '1':  /* a unary arithmetic expression */\n     case '2':  /* a binary arithmetic expression */\n       length = sizeof (struct tree_exp)\n-\t+ (tree_code_length[(int) code] - 1) * sizeof (char *);\n+\t+ (TREE_CODE_LENGTH (code) - 1) * sizeof (char *);\n       break;\n \n     case 'c':  /* a constant */\n-      /* We can't use tree_code_length for INTEGER_CST, since the number of\n+      /* We can't use TREE_CODE_LENGTH for INTEGER_CST, since the number of\n \t words is machine-dependent due to varying length of HOST_WIDE_INT,\n \t which might be wider than a pointer (e.g., long long).  Similarly\n \t for REAL_CST, since the number of words is machine-dependent due\n@@ -1186,12 +1186,12 @@ copy_node (node)\n \tlength = sizeof (struct tree_real_cst);\n       else\n \tlength = (sizeof (struct tree_common)\n-\t\t  + tree_code_length[(int) code] * sizeof (char *));\n+\t\t  + TREE_CODE_LENGTH (code) * sizeof (char *));\n       break;\n \n     case 'x':  /* something random, like an identifier.  */\n       length = sizeof (struct tree_common)\n-\t+ tree_code_length[(int) code] * sizeof (char *);\n+\t+ TREE_CODE_LENGTH (code) * sizeof (char *);\n       if (code == TREE_VEC)\n \tlength += (TREE_VEC_LENGTH (node) - 1) * sizeof (char *);\n     }\n@@ -1298,7 +1298,7 @@ get_identifier (text)\n \t  break;\n \t}\n \n-  if (tree_code_length[(int) IDENTIFIER_NODE] < 0)\n+  if (TREE_CODE_LENGTH (IDENTIFIER_NODE) < 0)\n     abort ();\t\t\t/* set_identifier_size hasn't been called.  */\n \n   /* Not found, create one, add to chain */\n@@ -2590,7 +2590,7 @@ first_rtl_op (code)\n     case METHOD_CALL_EXPR:\n       return 3;\n     default:\n-      return tree_code_length [(int) code];\n+      return TREE_CODE_LENGTH (code);\n     }\n }\n \n@@ -2862,7 +2862,7 @@ contains_placeholder_p (exp)\n \t  break;\n \t}\n \n-      switch (tree_code_length[(int) code])\n+      switch (TREE_CODE_LENGTH (code))\n \t{\n \tcase 1:\n \t  return contains_placeholder_p (TREE_OPERAND (exp, 0));\n@@ -2981,7 +2981,7 @@ substitute_in_expr (exp, f, r)\n     case '2':\n     case '<':\n     case 'e':\n-      switch (tree_code_length[(int) code])\n+      switch (TREE_CODE_LENGTH (code))\n \t{\n \tcase 1:\n \t  op0 = substitute_in_expr (TREE_OPERAND (exp, 0), f, r);\n@@ -3301,7 +3301,7 @@ build VPARAMS ((enum tree_code code, tree tt, ...))\n #endif\n \n   t = make_node (code);\n-  length = tree_code_length[(int) code];\n+  length = TREE_CODE_LENGTH (code);\n   TREE_TYPE (t) = tt;\n \n   /* Below, we automatically set TREE_SIDE_EFFECTS and TREE_RAISED for\n@@ -3451,7 +3451,7 @@ build_nt VPARAMS ((enum tree_code code, ...))\n #endif\n \n   t = make_node (code);\n-  length = tree_code_length[(int) code];\n+  length = TREE_CODE_LENGTH (code);\n \n   for (i = 0; i < length; i++)\n     TREE_OPERAND (t, i) = va_arg (p, tree);\n@@ -3484,7 +3484,7 @@ build_parse_node VPARAMS ((enum tree_code code, ...))\n   expression_obstack = &temp_decl_obstack;\n \n   t = make_node (code);\n-  length = tree_code_length[(int) code];\n+  length = TREE_CODE_LENGTH (code);\n \n   for (i = 0; i < length; i++)\n     TREE_OPERAND (t, i) = va_arg (p, tree);\n@@ -4529,7 +4529,7 @@ simple_cst_equal (t1, t2)\n     case 'r':\n     case 's':\n       cmp = 1;\n-      for (i = 0; i < tree_code_length[(int) code1]; i++)\n+      for (i = 0; i < TREE_CODE_LENGTH (code1); i++)\n \t{\n \t  cmp = simple_cst_equal (TREE_OPERAND (t1, i), TREE_OPERAND (t2, i));\n \t  if (cmp <= 0)"}, {"sha": "13d079a76241064d9624863d38ca02558660e9af", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d5e6e2527f07e6cfda3b62f1fd826006931d551/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8d5e6e2527f07e6cfda3b62f1fd826006931d551", "patch": "@@ -39,8 +39,8 @@ enum tree_code {\n \n #undef DEFTREECODE\n \n-/* Number of tree codes.  */\n-#define NUM_TREE_CODES ((int)LAST_AND_UNUSED_TREE_CODE)\n+/* Number of language-independent tree codes.  */\n+#define NUM_TREE_CODES ((int) LAST_AND_UNUSED_TREE_CODE)\n \n /* Indexed by enum tree_code, contains a character which is\n    `<' for a comparison expression, `1', for a unary arithmetic\n@@ -62,6 +62,7 @@ extern char tree_code_type[MAX_TREE_CODES];\n /* Number of argument-words in each kind of tree-node.  */\n \n extern int tree_code_length[MAX_TREE_CODES];\n+#define TREE_CODE_LENGTH(CODE)\ttree_code_length[(int) (CODE)]\n \n /* Names of tree components.  */\n "}]}