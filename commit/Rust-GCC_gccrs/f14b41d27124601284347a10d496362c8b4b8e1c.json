{"sha": "f14b41d27124601284347a10d496362c8b4b8e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE0YjQxZDI3MTI0NjAxMjg0MzQ3YTEwZDQ5NjM2MmM4YjRiOGUxYw==", "commit": {"author": {"name": "Felix Yang", "email": "felix.yang@huawei.com", "date": "2020-03-31T08:41:56Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-03-31T14:13:33Z"}, "message": "vect: ICE: in vectorizable_load, at tree-vect-stmts.c:9173 [PR94398]\n\nIn the testcase for PR94398, we're trying to compute:\n\n  alignment_support_scheme\n    = vect_supportable_dr_alignment (first_dr_info, false);\n  gcc_assert (alignment_support_scheme);\n\neven for VMAT_GATHER_SCATTER, which always accesses individual elements.\nHere we should set alignment_support_scheme to dr_unaligned_supported\nthe gather/scatter case instead of calling vect_supportable_dr_alignment.\n\n2020-03-31  Felix Yang  <felix.yang@huawei.com>\n\ngcc/\n\tPR tree-optimization/94398\n\t* tree-vect-stmts.c (vectorizable_store): Instead of calling\n\tvect_supportable_dr_alignment, set alignment_support_scheme to\n\tdr_unaligned_supported for gather-scatter accesses.\n\t(vectorizable_load): Likewise.\n\ngcc/testsuite/\n\tPR tree-optimization/94398\n\t* gcc.target/aarch64/pr94398.c: New test.", "tree": {"sha": "810880a1322035d19afa7e22558d46540596e383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/810880a1322035d19afa7e22558d46540596e383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f14b41d27124601284347a10d496362c8b4b8e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14b41d27124601284347a10d496362c8b4b8e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f14b41d27124601284347a10d496362c8b4b8e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14b41d27124601284347a10d496362c8b4b8e1c/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e06cde870edc7ec21736145b6857565d4b2f0e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06cde870edc7ec21736145b6857565d4b2f0e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06cde870edc7ec21736145b6857565d4b2f0e85"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "5bd72ccddd9ca792b9eeacc5db7755197ed59131", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f14b41d27124601284347a10d496362c8b4b8e1c", "patch": "@@ -1,3 +1,11 @@\n+2020-03-31  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/94398\n+\t* tree-vect-stmts.c (vectorizable_store): Instead of calling\n+\tvect_supportable_dr_alignment, set alignment_support_scheme to\n+\tdr_unaligned_supported for gather-scatter accesses.\n+\t(vectorizable_load): Likewise.\n+\n 2020-03-31  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (V_QI, V_HI, V_HF, V_SI, V_SF, V_DI, V_DF):"}, {"sha": "1d97d6b52199b80bc5fe8a7518c444c0ccf9643a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f14b41d27124601284347a10d496362c8b4b8e1c", "patch": "@@ -1,3 +1,8 @@\n+2020-03-31  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/94398\n+\t* gcc.target/aarch64/pr94398.c: New test.\n+\n 2020-03-31  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vbicq_n_s16.c: Modify."}, {"sha": "42152cf9ed2060e838cf4b532e9ec3796bbb4d66", "filename": "gcc/testsuite/gcc.target/aarch64/pr94398.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94398.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94398.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94398.c?ref=f14b41d27124601284347a10d496362c8b4b8e1c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-vectorize -funsafe-math-optimizations -march=armv8.2-a+sve -mstrict-align\" } */\n+\n+float\n+foo(long n, float *x, int inc_x,\n+            float *y, int inc_y)\n+{\n+  float dot = 0.0;\n+  int ix = 0, iy = 0;\n+\n+  if (n < 0) {\n+    return dot;\n+  }\n+\n+  int i = 0;\n+  while (i < n) {\n+    dot += y[iy] * x[ix];\n+    ix  += inc_x;\n+    iy  += inc_y;\n+    i++;\n+  }\n+\n+  return dot;\n+}"}, {"sha": "46bc2bd067d33997d7ab55430af57ad5d913b683", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14b41d27124601284347a10d496362c8b4b8e1c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f14b41d27124601284347a10d496362c8b4b8e1c", "patch": "@@ -8051,8 +8051,14 @@ vectorizable_store (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   auto_vec<tree> dr_chain (group_size);\n   oprnds.create (group_size);\n \n-  alignment_support_scheme\n-    = vect_supportable_dr_alignment (first_dr_info, false);\n+  /* Gather-scatter accesses perform only component accesses, alignment\n+     is irrelevant for them.  */\n+  if (memory_access_type == VMAT_GATHER_SCATTER)\n+    alignment_support_scheme = dr_unaligned_supported;\n+  else\n+    alignment_support_scheme\n+      = vect_supportable_dr_alignment (first_dr_info, false);\n+\n   gcc_assert (alignment_support_scheme);\n   vec_loop_masks *loop_masks\n     = (loop_vinfo && LOOP_VINFO_FULLY_MASKED_P (loop_vinfo)\n@@ -9168,8 +9174,14 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       ref_type = reference_alias_ptr_type (DR_REF (first_dr_info->dr));\n     }\n \n-  alignment_support_scheme\n-    = vect_supportable_dr_alignment (first_dr_info, false);\n+  /* Gather-scatter accesses perform only component accesses, alignment\n+     is irrelevant for them.  */\n+  if (memory_access_type == VMAT_GATHER_SCATTER)\n+    alignment_support_scheme = dr_unaligned_supported;\n+  else\n+    alignment_support_scheme\n+      = vect_supportable_dr_alignment (first_dr_info, false);\n+\n   gcc_assert (alignment_support_scheme);\n   vec_loop_masks *loop_masks\n     = (loop_vinfo && LOOP_VINFO_FULLY_MASKED_P (loop_vinfo)"}]}