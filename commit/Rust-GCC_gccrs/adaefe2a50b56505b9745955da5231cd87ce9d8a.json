{"sha": "adaefe2a50b56505b9745955da5231cd87ce9d8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRhZWZlMmE1MGI1NjUwNWI5NzQ1OTU1ZGE1MjMxY2Q4N2NlOWQ4YQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-12-18T21:59:17Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-12-18T21:59:17Z"}, "message": "re PR libstdc++/80761 (std::set<T,C,A>::insert_return_type uses wrong iterator type)\n\n2017-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/80761\n\t* include/debug/map.h\n\t(std::__debug::map<>::insert_return_type): Define using\n\t_Node_insert_return.\n\t* include/debug/set.h (std::__debug::set<>::insert_return_type):\n\tLikewise.\n\t* include/debug/unordered_map:\n\t(std::__debug::unordered_map<>::insert_return_type): Likewise.\n\t* include/debug/unordered_set:\n\t(std::__debug::unordered_set<>::insert_return_type): Likewise.\n\nFrom-SVN: r255789", "tree": {"sha": "60b32d5251dadd18b991d374511539b7feaebb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60b32d5251dadd18b991d374511539b7feaebb6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adaefe2a50b56505b9745955da5231cd87ce9d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adaefe2a50b56505b9745955da5231cd87ce9d8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adaefe2a50b56505b9745955da5231cd87ce9d8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adaefe2a50b56505b9745955da5231cd87ce9d8a/comments", "author": null, "committer": null, "parents": [{"sha": "4a58d2fe83ca6325f6ba4384eb9be6008ad65f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a58d2fe83ca6325f6ba4384eb9be6008ad65f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a58d2fe83ca6325f6ba4384eb9be6008ad65f3b"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "2a99643feec527b0690c7c123c16cbf86235c15f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=adaefe2a50b56505b9745955da5231cd87ce9d8a", "patch": "@@ -1,3 +1,16 @@\n+2017-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/80761\n+\t* include/debug/map.h\n+\t(std::__debug::map<>::insert_return_type): Define using\n+\t_Node_insert_return.\n+\t* include/debug/set.h (std::__debug::set<>::insert_return_type):\n+\tLikewise.\n+\t* include/debug/unordered_map:\n+\t(std::__debug::unordered_map<>::insert_return_type): Likewise.\n+\t* include/debug/unordered_set:\n+\t(std::__debug::unordered_set<>::insert_return_type): Likewise.\n+\n 2017-12-18  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/68430"}, {"sha": "f769b501b584adbfdd4eeb72d06e959ebed82be9", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=adaefe2a50b56505b9745955da5231cd87ce9d8a", "patch": "@@ -401,13 +401,7 @@ namespace __debug\n \n #if __cplusplus > 201402L\n       using node_type = typename _Base::node_type;\n-\n-      struct insert_return_type\n-      {\n-\tbool inserted;\n-\titerator position;\n-\tnode_type node;\n-      };\n+      using insert_return_type = _Node_insert_return<iterator, node_type>;\n \n       node_type\n       extract(const_iterator __position)\n@@ -431,7 +425,7 @@ namespace __debug\n       {\n \tauto __ret = _Base::insert(std::move(__nh));\n \titerator __pos = iterator(__ret.position, this);\n-\treturn { __ret.inserted, __pos, std::move(__ret.node) };\n+\treturn { __pos, __ret.inserted, std::move(__ret.node) };\n       }\n \n       iterator"}, {"sha": "4466bfc98e89ab805a02d853681a945b03998775", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=adaefe2a50b56505b9745955da5231cd87ce9d8a", "patch": "@@ -298,13 +298,7 @@ namespace __debug\n \n #if __cplusplus > 201402L\n       using node_type = typename _Base::node_type;\n-\n-      struct insert_return_type\n-      {\n-\tbool inserted;\n-\titerator position;\n-\tnode_type node;\n-      };\n+      using insert_return_type = _Node_insert_return<iterator, node_type>;\n \n       node_type\n       extract(const_iterator __position)\n@@ -328,7 +322,7 @@ namespace __debug\n       {\n \tauto __ret = _Base::insert(std::move(__nh));\n \titerator __pos = iterator(__ret.position, this);\n-\treturn { __ret.inserted, __pos, std::move(__ret.node) };\n+\treturn { __pos, __ret.inserted, std::move(__ret.node) };\n       }\n \n       iterator"}, {"sha": "0ed9922c5bf9fa23b94107ee30eb1da40262c854", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=adaefe2a50b56505b9745955da5231cd87ce9d8a", "patch": "@@ -462,13 +462,7 @@ namespace __debug\n \n #if __cplusplus > 201402L\n       using node_type = typename _Base::node_type;\n-\n-      struct insert_return_type\n-      {\n-\tbool inserted;\n-\titerator position;\n-\tnode_type node;\n-      };\n+      using insert_return_type = _Node_insert_return<iterator, node_type>;\n \n       node_type\n       extract(const_iterator __position)\n@@ -499,7 +493,7 @@ namespace __debug\n       {\n \tauto __ret = _Base::insert(std::move(__nh));\n \titerator __pos = iterator(__ret.position, this);\n-\treturn { __ret.inserted, __pos, std::move(__ret.node) };\n+\treturn { __pos, __ret.inserted, std::move(__ret.node) };\n       }\n \n       iterator"}, {"sha": "1f8e95f6c2296a3e3008156d49ee950294a68b89", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adaefe2a50b56505b9745955da5231cd87ce9d8a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=adaefe2a50b56505b9745955da5231cd87ce9d8a", "patch": "@@ -372,13 +372,7 @@ namespace __debug\n \n #if __cplusplus > 201402L\n       using node_type = typename _Base::node_type;\n-\n-      struct insert_return_type\n-      {\n-\tbool inserted;\n-\titerator position;\n-\tnode_type node;\n-      };\n+      using insert_return_type = _Node_insert_return<iterator, node_type>;\n \n       node_type\n       extract(const_iterator __position)\n@@ -409,7 +403,7 @@ namespace __debug\n       {\n \tauto __ret = _Base::insert(std::move(__nh));\n \titerator __pos = iterator(__ret.position, this);\n-\treturn { __ret.inserted, __pos, std::move(__ret.node) };\n+\treturn { __pos, __ret.inserted, std::move(__ret.node) };\n       }\n \n       iterator"}]}