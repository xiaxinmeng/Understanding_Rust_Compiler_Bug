{"sha": "fad540552ffa23dae2874aaf93916175d2577b8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFkNTQwNTUyZmZhMjNkYWUyODc0YWFmOTM5MTYxNzVkMjU3N2I4ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-14T08:59:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-14T08:59:52Z"}, "message": "Strengthen compatibility warning for GCC builtins\n\nThis is necessary for vector builtins, which are picky about the\nsignedness of the element type.\n\ngcc/ada/\n\t* libgnat/s-atopri.ads (bool): Delete.\n\t(Atomic_Test_And_Set): Replace bool with Boolean.\n\t(Atomic_Always_Lock_Free): Likewise.\n\t* libgnat/s-aoinar.adb (Is_Lock_Free): Adjust.\n\t* libgnat/s-aomoar.adb (Is_Lock_Free): Likewise.\n\t* libgnat/s-aotase.adb (Atomic_Test_And_Set): Likewise.\n\t* libgnat/s-atopex.adb (Atomic_Compare_And_Exchange): Likewise.\n\t* gcc-interface/decl.c: Include gimple-expr.h.\n\t(intrin_types_incompatible_p): Delete.\n\t(intrin_arglists_compatible_p): Call types_compatible_p.\n\t(intrin_return_compatible_p): Likewise.", "tree": {"sha": "3da113f34286a490bc52be543ccec00fa6a2901f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3da113f34286a490bc52be543ccec00fa6a2901f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fad540552ffa23dae2874aaf93916175d2577b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad540552ffa23dae2874aaf93916175d2577b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad540552ffa23dae2874aaf93916175d2577b8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad540552ffa23dae2874aaf93916175d2577b8e/comments", "author": null, "committer": null, "parents": [{"sha": "caef5203d64e61da506909d58890035af32a6239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caef5203d64e61da506909d58890035af32a6239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caef5203d64e61da506909d58890035af32a6239"}], "stats": {"total": 98, "additions": 26, "deletions": 72}, "files": [{"sha": "38a8bda02ce537dc6279dbb9812da396d7218a28", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=fad540552ffa23dae2874aaf93916175d2577b8e", "patch": "@@ -28,6 +28,7 @@\n #include \"coretypes.h\"\n #include \"target.h\"\n #include \"tree.h\"\n+#include \"gimple-expr.h\"\n #include \"stringpool.h\"\n #include \"diagnostic-core.h\"\n #include \"alias.h\"\n@@ -9492,46 +9493,6 @@ check_ok_for_atomic_type (tree type, Entity_Id gnat_entity, bool component_p)\n \t\t   gnat_error_point, gnat_entity);\n }\n \n-\n-/* Helper for the intrin compatibility checks family.  Evaluate whether\n-   two types are definitely incompatible.  */\n-\n-static bool\n-intrin_types_incompatible_p (tree t1, tree t2)\n-{\n-  enum tree_code code;\n-\n-  if (TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n-    return false;\n-\n-  if (TYPE_MODE (t1) != TYPE_MODE (t2))\n-    return true;\n-\n-  if (TREE_CODE (t1) != TREE_CODE (t2))\n-    return true;\n-\n-  code = TREE_CODE (t1);\n-\n-  switch (code)\n-    {\n-    case INTEGER_TYPE:\n-    case REAL_TYPE:\n-      return TYPE_PRECISION (t1) != TYPE_PRECISION (t2);\n-\n-    case POINTER_TYPE:\n-    case REFERENCE_TYPE:\n-      /* Assume designated types are ok.  We'd need to account for char * and\n-\t void * variants to do better, which could rapidly get messy and isn't\n-\t clearly worth the effort.  */\n-      return false;\n-\n-    default:\n-      break;\n-    }\n-\n-  return false;\n-}\n-\n /* Helper for intrin_profiles_compatible_p, to perform compatibility checks\n    on the Ada/builtin argument lists for the INB binding.  */\n \n@@ -9577,8 +9538,8 @@ intrin_arglists_compatible_p (intrin_binding_t * inb)\n \t}\n \n       /* Otherwise, check that types match for the current argument.  */\n-      argpos ++;\n-      if (intrin_types_incompatible_p (ada_type, btin_type))\n+      argpos++;\n+      if (!types_compatible_p (ada_type, btin_type))\n \t{\n \t  post_error_ne_num (\"??intrinsic binding type mismatch on argument ^!\",\n \t\t\t     inb->gnat_entity, inb->gnat_entity, argpos);\n@@ -9609,7 +9570,7 @@ intrin_return_compatible_p (intrin_binding_t * inb)\n \n   /* Check return types compatibility otherwise.  Note that this\n      handles void/void as well.  */\n-  if (intrin_types_incompatible_p (btin_return_type, ada_return_type))\n+  if (!types_compatible_p (btin_return_type, ada_return_type))\n     {\n       post_error (\"??intrinsic binding type mismatch on return value!\",\n \t\t  inb->gnat_entity);"}, {"sha": "2f430ed4efece2a260ecf7cde462d1dc6ea2412a", "filename": "gcc/ada/libgnat/s-aoinar.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aoinar.adb?ref=fad540552ffa23dae2874aaf93916175d2577b8e", "patch": "@@ -203,7 +203,7 @@ package body System.Atomic_Operations.Integer_Arithmetic is\n       pragma Unreferenced (Item);\n       use type Interfaces.C.size_t;\n    begin\n-      return Boolean (Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8));\n+      return Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8);\n    end Is_Lock_Free;\n \n end System.Atomic_Operations.Integer_Arithmetic;"}, {"sha": "a6f4b0e61e8078bdbbf5fd1ae0de65a5ea71424c", "filename": "gcc/ada/libgnat/s-aomoar.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aomoar.adb?ref=fad540552ffa23dae2874aaf93916175d2577b8e", "patch": "@@ -209,7 +209,7 @@ package body System.Atomic_Operations.Modular_Arithmetic is\n       pragma Unreferenced (Item);\n       use type Interfaces.C.size_t;\n    begin\n-      return Boolean (Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8));\n+      return Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8);\n    end Is_Lock_Free;\n \n end System.Atomic_Operations.Modular_Arithmetic;"}, {"sha": "94b28dfa410322e8955e5662d44033f28a2e35cb", "filename": "gcc/ada/libgnat/s-aotase.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-aotase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-aotase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-aotase.adb?ref=fad540552ffa23dae2874aaf93916175d2577b8e", "patch": "@@ -40,7 +40,7 @@ package body System.Atomic_Operations.Test_And_Set is\n    function Atomic_Test_And_Set\n      (Item : aliased in out Test_And_Set_Flag) return Boolean is\n    begin\n-      return Boolean (Atomic_Test_And_Set (Item'Address));\n+      return Atomic_Test_And_Set (Item'Address);\n    end Atomic_Test_And_Set;\n \n    ------------------"}, {"sha": "b0aa9e593d1bcff105322682478825df5fcf16b6", "filename": "gcc/ada/libgnat/s-atopex.adb", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopex.adb?ref=fad540552ffa23dae2874aaf93916175d2577b8e", "patch": "@@ -89,58 +89,54 @@ package body System.Atomic_Operations.Exchange is\n         (Ptr           : System.Address;\n          Expected      : System.Address;\n          Desired       : Atomic_Type;\n-         Weak          : bool := False;\n+         Weak          : Boolean := False;\n          Success_Model : Mem_Model := Seq_Cst;\n-         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+         Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n       pragma Import\n         (Intrinsic, Atomic_Compare_Exchange_1, \"__atomic_compare_exchange_1\");\n       function Atomic_Compare_Exchange_2\n         (Ptr           : System.Address;\n          Expected      : System.Address;\n          Desired       : Atomic_Type;\n-         Weak          : bool := False;\n+         Weak          : Boolean := False;\n          Success_Model : Mem_Model := Seq_Cst;\n-         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+         Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n       pragma Import\n         (Intrinsic, Atomic_Compare_Exchange_2, \"__atomic_compare_exchange_2\");\n       function Atomic_Compare_Exchange_4\n         (Ptr           : System.Address;\n          Expected      : System.Address;\n          Desired       : Atomic_Type;\n-         Weak          : bool := False;\n+         Weak          : Boolean := False;\n          Success_Model : Mem_Model := Seq_Cst;\n-         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+         Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n       pragma Import\n         (Intrinsic, Atomic_Compare_Exchange_4, \"__atomic_compare_exchange_4\");\n       function Atomic_Compare_Exchange_8\n         (Ptr           : System.Address;\n          Expected      : System.Address;\n          Desired       : Atomic_Type;\n-         Weak          : bool := False;\n+         Weak          : Boolean := False;\n          Success_Model : Mem_Model := Seq_Cst;\n-         Failure_Model : Mem_Model := Seq_Cst) return bool;\n+         Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n       pragma Import\n         (Intrinsic, Atomic_Compare_Exchange_8, \"__atomic_compare_exchange_8\");\n       pragma Warnings (On);\n \n    begin\n       case Atomic_Type'Object_Size is\n          when 8 =>\n-            return Boolean\n-              (Atomic_Compare_Exchange_1\n-                (Item'Address, Prior'Address, Desired));\n+            return\n+              Atomic_Compare_Exchange_1 (Item'Address, Prior'Address, Desired);\n          when 16 =>\n-            return Boolean\n-              (Atomic_Compare_Exchange_2\n-                (Item'Address, Prior'Address, Desired));\n+            return\n+              Atomic_Compare_Exchange_2 (Item'Address, Prior'Address, Desired);\n          when 32 =>\n-            return Boolean\n-              (Atomic_Compare_Exchange_4\n-                (Item'Address, Prior'Address, Desired));\n+            return\n+              Atomic_Compare_Exchange_4 (Item'Address, Prior'Address, Desired);\n          when 64 =>\n-            return Boolean\n-              (Atomic_Compare_Exchange_8\n-                (Item'Address, Prior'Address, Desired));\n+            return\n+              Atomic_Compare_Exchange_8 (Item'Address, Prior'Address, Desired);\n          when others =>\n             raise Program_Error;\n       end case;\n@@ -154,7 +150,7 @@ package body System.Atomic_Operations.Exchange is\n       pragma Unreferenced (Item);\n       use type Interfaces.C.size_t;\n    begin\n-      return Boolean (Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8));\n+      return Atomic_Always_Lock_Free (Atomic_Type'Object_Size / 8);\n    end Is_Lock_Free;\n \n end System.Atomic_Operations.Exchange;"}, {"sha": "891b2edf061ef3b7949c63d4fdf39b27c713af47", "filename": "gcc/ada/libgnat/s-atopri.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-atopri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad540552ffa23dae2874aaf93916175d2577b8e/gcc%2Fada%2Flibgnat%2Fs-atopri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopri.ads?ref=fad540552ffa23dae2874aaf93916175d2577b8e", "patch": "@@ -62,9 +62,6 @@ package System.Atomic_Primitives is\n \n    subtype Mem_Model is Integer range Relaxed .. Last;\n \n-   type bool is new Boolean;\n-   pragma Convention (C, bool);\n-\n    ------------------------------------\n    -- GCC built-in atomic primitives --\n    ------------------------------------\n@@ -137,7 +134,7 @@ package System.Atomic_Primitives is\n \n    function Atomic_Test_And_Set\n      (Ptr   : System.Address;\n-      Model : Mem_Model := Seq_Cst) return bool;\n+      Model : Mem_Model := Seq_Cst) return Boolean;\n    pragma Import (Intrinsic, Atomic_Test_And_Set, \"__atomic_test_and_set\");\n \n    procedure Atomic_Clear\n@@ -147,7 +144,7 @@ package System.Atomic_Primitives is\n \n    function Atomic_Always_Lock_Free\n      (Size : Interfaces.C.size_t;\n-      Ptr  : System.Address := System.Null_Address) return bool;\n+      Ptr  : System.Address := System.Null_Address) return Boolean;\n    pragma Import\n      (Intrinsic, Atomic_Always_Lock_Free, \"__atomic_always_lock_free\");\n "}]}