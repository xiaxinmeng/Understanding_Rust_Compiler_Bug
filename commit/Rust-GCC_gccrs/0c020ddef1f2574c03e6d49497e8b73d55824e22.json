{"sha": "0c020ddef1f2574c03e6d49497e8b73d55824e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwMjBkZGVmMWYyNTc0YzAzZTZkNDk0OTdlOGI3M2Q1NTgyNGUyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T12:40:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-05-06T12:40:06Z"}, "message": "[multiple changes]\n\n2009-05-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb: Minor reformatting\n\n2009-05-06  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_prag.adb (Process_Import_Or_Interface): Imported CPP types must\n\tnot have discriminants or components with default expressions.\n\t(Analyze_Pragma): For pragma CPP_Class check that imported types\n\thave no discriminants and components have no default expression.\n\n\t* sem_aggr.adb (Resolve_Aggr_Expr): Add missing check on wrong use of\n\tclass-wide types in the expression of a record component association.\n\n2009-05-06  Sergey Rybin  <rybin@adacore.com>\n\n\t* vms_data.ads: Add qualifier for gnatmetric extra exit points metric\n\n\t* gnat_ugn.texi: Add description for the new extra exit points metric\n\t(gnatmetric section).\n\nFrom-SVN: r147170", "tree": {"sha": "e3ce289e52737a3b4799fbe363c1509f7c21e81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ce289e52737a3b4799fbe363c1509f7c21e81d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c020ddef1f2574c03e6d49497e8b73d55824e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c020ddef1f2574c03e6d49497e8b73d55824e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c020ddef1f2574c03e6d49497e8b73d55824e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c020ddef1f2574c03e6d49497e8b73d55824e22/comments", "author": null, "committer": null, "parents": [{"sha": "c8ecfecfd4fcf6a2a4c70c92701fa588487c1301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ecfecfd4fcf6a2a4c70c92701fa588487c1301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ecfecfd4fcf6a2a4c70c92701fa588487c1301"}], "stats": {"total": 154, "additions": 147, "deletions": 7}, "files": [{"sha": "0256492af90d1c5dc23241071d5be9a99b2cb57b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c020ddef1f2574c03e6d49497e8b73d55824e22", "patch": "@@ -1,3 +1,24 @@\n+2009-05-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb: Minor reformatting\n+\n+2009-05-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.adb (Process_Import_Or_Interface): Imported CPP types must\n+\tnot have discriminants or components with default expressions.\n+\t(Analyze_Pragma): For pragma CPP_Class check that imported types\n+\thave no discriminants and components have no default expression.\n+\n+\t* sem_aggr.adb (Resolve_Aggr_Expr): Add missing check on wrong use of\n+\tclass-wide types in the expression of a record component association.\n+\n+2009-05-06  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* vms_data.ads: Add qualifier for gnatmetric extra exit points metric\n+\n+\t* gnat_ugn.texi: Add description for the new extra exit points metric\n+\t(gnatmetric section).\n+\n 2009-05-06  Robert Dewar  <dewar@adacore.com>\n \n \t* s-fileio.adb: Minor comment update"}, {"sha": "e035ec6996ccec3d1f525e2a1dafe49429456e1e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=0c020ddef1f2574c03e6d49497e8b73d55824e22", "patch": "@@ -14,7 +14,7 @@\n @setfilename gnat_ugn.info\n \n @copying\n-Copyright @copyright{} 1995-2005, 2006, 2007, 2008 Free Software Foundation,\n+Copyright @copyright{} 1995-2009 Free Software Foundation,\n Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n@@ -17636,6 +17636,11 @@ bodies, task bodies, entry bodies and statement sequences in package bodies\n Do not consider @code{exit} statements as @code{goto}s when\n computing Essential Complexity\n \n+@item ^--extra-exit-points^/EXTRA_EXIT_POINTS_ON^\n+Report the extra exit points for subprogram bodies\n+\n+@item ^--no-extra-exit-points^/EXTRA_EXIT_POINTS_OFF^\n+Do not report the extra exit points for subprogram bodies\n @end table\n \n "}, {"sha": "2a855b2c9e5456585906eced6f04ec4ede24139b", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=0c020ddef1f2574c03e6d49497e8b73d55824e22", "patch": "@@ -2785,6 +2785,14 @@ package body Sem_Aggr is\n          Check_Non_Static_Context (Expr);\n          Check_Unset_Reference (Expr);\n \n+         --  Check wrong use of class-wide types\n+\n+         if Is_Class_Wide_Type (Etype (Expr))\n+           and then not Is_CPP_Constructor_Call (Expr)\n+         then\n+            Error_Msg_N (\"dynamically tagged expression not allowed\", Expr);\n+         end if;\n+\n          if not Has_Expansion_Delayed (Expr) then\n             Aggregate_Constraint_Checks (Expr, Expr_Type);\n          end if;"}, {"sha": "6d12b8fe4e752fe915b7ab167283c69d598975e1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 103, "deletions": 3, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0c020ddef1f2574c03e6d49497e8b73d55824e22", "patch": "@@ -1967,7 +1967,8 @@ package body Sem_Prag is\n                              (Chars (Arg), Names (Index1))\n                         then\n                            Error_Msg_Name_1 := Names (Index1);\n-                           Error_Msg_N (\"\\possible misspelling of%\", Arg);\n+                           Error_Msg_N -- CODEFIX\n+                             (\"\\possible misspelling of%\", Arg);\n                            exit;\n                         end if;\n                      end loop;\n@@ -3573,6 +3574,49 @@ package body Sem_Prag is\n \n                Set_Is_CPP_Class (Def_Id);\n                Set_Is_Limited_Record (Def_Id);\n+\n+               --  Imported CPP types must not have discriminants (because C++\n+               --  classes do not have discriminants).\n+\n+               if Has_Discriminants (Def_Id) then\n+                  Error_Msg_N\n+                    (\"imported 'C'P'P type cannot have discriminants\",\n+                     First (Discriminant_Specifications\n+                             (Declaration_Node (Def_Id))));\n+               end if;\n+\n+               --  Components of imported CPP types must not have default\n+               --  expressions because the constructor (if any) is in the\n+               --  C++ side.\n+\n+               declare\n+                  Tdef  : constant Node_Id :=\n+                            Type_Definition (Declaration_Node (Def_Id));\n+                  Clist : Node_Id;\n+                  Comp  : Node_Id;\n+\n+               begin\n+                  if Nkind (Tdef) = N_Record_Definition then\n+                     Clist := Component_List (Tdef);\n+\n+                  else\n+                     pragma Assert (Nkind (Tdef) = N_Derived_Type_Definition);\n+                     Clist := Component_List (Record_Extension_Part (Tdef));\n+                  end if;\n+\n+                  if Present (Clist) then\n+                     Comp := First (Component_Items (Clist));\n+                     while Present (Comp) loop\n+                        if Present (Expression (Comp)) then\n+                           Error_Msg_N\n+                             (\"component of imported 'C'P'P type cannot have\" &\n+                              \" default expression\", Expression (Comp));\n+                        end if;\n+\n+                        Next (Comp);\n+                     end loop;\n+                  end if;\n+               end;\n             end if;\n \n          else\n@@ -4183,7 +4227,7 @@ package body Sem_Prag is\n                            Error_Msg_String (1 .. Rnm'Length) :=\n                              Name_Buffer (1 .. Name_Len);\n                            Error_Msg_Strlen := Rnm'Length;\n-                           Error_Msg_N\n+                           Error_Msg_N -- CODEFIX\n                              (\"\\possible misspelling of \"\"~\"\"\",\n                               Get_Pragma_Arg (Arg));\n                            exit;\n@@ -4937,7 +4981,7 @@ package body Sem_Prag is\n             for PN in First_Pragma_Name .. Last_Pragma_Name loop\n                if Is_Bad_Spelling_Of (Pname, PN) then\n                   Error_Msg_Name_1 := PN;\n-                  Error_Msg_N\n+                  Error_Msg_N -- CODEFIX\n                     (\"\\?possible misspelling of %!\", Pragma_Identifier (N));\n                   exit;\n                end if;\n@@ -6159,6 +6203,62 @@ package body Sem_Prag is\n             Set_Is_CPP_Class      (Typ);\n             Set_Is_Limited_Record (Typ);\n             Set_Convention        (Typ, Convention_CPP);\n+\n+            --  Imported CPP types must not have discriminants (because C++\n+            --  classes do not have discriminants).\n+\n+            if Has_Discriminants (Typ) then\n+               Error_Msg_N\n+                 (\"imported 'C'P'P type cannot have discriminants\",\n+                  First (Discriminant_Specifications\n+                          (Declaration_Node (Typ))));\n+            end if;\n+\n+            --  Components of imported CPP types must not have default\n+            --  expressions because the constructor (if any) is in the\n+            --  C++ side.\n+\n+            if Is_Incomplete_Or_Private_Type (Typ)\n+              and then No (Underlying_Type (Typ))\n+            then\n+               --  It should be an error to apply pragma CPP to a private\n+               --  type if the underlying type is not visible (as it is\n+               --  for any representation item). For now, for backward\n+               --  compatibility we do nothing but we cannot check components\n+               --  because they are not available at this stage. All this code\n+               --  will be removed when we cleanup this obsolete GNAT pragma???\n+\n+               null;\n+\n+            else\n+               declare\n+                  Tdef  : constant Node_Id :=\n+                            Type_Definition (Declaration_Node (Typ));\n+                  Clist : Node_Id;\n+                  Comp  : Node_Id;\n+\n+               begin\n+                  if Nkind (Tdef) = N_Record_Definition then\n+                     Clist := Component_List (Tdef);\n+                  else\n+                     pragma Assert (Nkind (Tdef) = N_Derived_Type_Definition);\n+                     Clist := Component_List (Record_Extension_Part (Tdef));\n+                  end if;\n+\n+                  if Present (Clist) then\n+                     Comp := First (Component_Items (Clist));\n+                     while Present (Comp) loop\n+                        if Present (Expression (Comp)) then\n+                           Error_Msg_N\n+                             (\"component of imported 'C'P'P type cannot have\" &\n+                              \" default expression\", Expression (Comp));\n+                        end if;\n+\n+                        Next (Comp);\n+                     end loop;\n+                  end if;\n+               end;\n+            end if;\n          end CPP_Class;\n \n          ---------------------"}, {"sha": "eca31f0356c9906785875ec605b6f5d24d149364", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=0c020ddef1f2574c03e6d49497e8b73d55824e22", "patch": "@@ -954,8 +954,8 @@ package body Sem_Warn is\n                   --  here (note that the dereference may not be explicit in\n                   --  the source, for example in the case of a dispatching call\n                   --  with an anonymous access controlling formal, or of an\n-                  --  assignment of a pointer involving discriminant check\n-                  --  on the designated object).\n+                  --  assignment of a pointer involving discriminant check on\n+                  --  the designated object).\n \n                   if not Warnings_Off_E1 then\n                      Error_Msg_NE (\"?& may be null!\", UR, E1);"}, {"sha": "f4841df6df74b15c85a085ec427027ee886d0177", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c020ddef1f2574c03e6d49497e8b73d55824e22/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=0c020ddef1f2574c03e6d49497e8b73d55824e22", "patch": "@@ -5116,7 +5116,11 @@ package VMS_Data is\n                                               \"AVERAGE_COMPLEXITY_ON \"     &\n                                               \"--complexity-average \"      &\n                                               \"AVERAGE_COMPLEXITY_OFF \"    &\n-                                              \"--no-complexity-average\";\n+                                              \"--no-complexity-average \"   &\n+                                              \"EXTRA_EXIT_POINTS_ON \"      &\n+                                              \"--extra-exit-points \"       &\n+                                              \"EXTRA_EXIT_POINTS_OFF \"     &\n+                                              \"--no-extra-exit-points\";\n    --      /COMPLEXITY_METRICS=(option, option ...)\n \n    --   Specifies the complexity metrics to be computed (if at least one\n@@ -5139,6 +5143,8 @@ package VMS_Data is\n    --                              executable bodies\n    --     AVERAGE_COMPLEXITY_OFF   Do not compute the average complexity for\n    --                              executable bodies\n+   --     EXTRA_EXIT_POINTS_ON     Compute extra exit points metric\n+   --     EXTRA_EXIT_POINTS_OFF    Do not compute extra exit points metric\n    --\n    --   All combinations of line metrics options are allowed.\n "}]}