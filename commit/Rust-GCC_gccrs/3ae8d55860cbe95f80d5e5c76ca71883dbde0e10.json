{"sha": "3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlOGQ1NTg2MGNiZTk1ZjgwZDVlNWM3NmNhNzE4ODNkYmRlMGUxMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-11T15:04:26Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-13T09:54:47Z"}, "message": "Add char type\n\nThis might need changes in the Lexer to allow for wchar_t to be preserved.\n\nAddresses #85", "tree": {"sha": "3fc0385c18fe11a4ceb8ae34ad3c208f027efebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc0385c18fe11a4ceb8ae34ad3c208f027efebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac8276f737351afbde34a85f2b6c224b400313b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac8276f737351afbde34a85f2b6c224b400313b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac8276f737351afbde34a85f2b6c224b400313b"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "3955a5b0ad3e41fef6c3f62df8ace19ce43b28a8", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -437,6 +437,14 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = compiled_type;\n   }\n \n+  void visit (TyTy::CharType &type) override\n+  {\n+    ::Btype *compiled_type = nullptr;\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n+    rust_assert (ok);\n+    translated = compiled_type;\n+  }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx) {}\n "}, {"sha": "c63479c4e1ed8b2dc074e43597c6b2caf3c7b653", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -218,6 +218,13 @@ class CompileExpr : public HIRCompileBase\n \t}\n \treturn;\n \n+\tcase HIR::Literal::CHAR: {\n+\t  // FIXME needs wchar_t\n+\t  char c = literal_value->as_string ().c_str ()[0];\n+\t  translated = ctx->get_backend ()->wchar_constant_expression (c);\n+\t}\n+\treturn;\n+\n       default:\n \trust_fatal_error (expr.get_locus (), \"unknown literal\");\n \treturn;"}, {"sha": "f5916969c5a029677cd5448314c41ea6f93e0544", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -201,6 +201,12 @@ class TyTyCompile : public TyTy::TyVisitor\n       Linemap::predeclared_location ());\n   }\n \n+  void visit (TyTy::CharType &) override\n+  {\n+    translated = backend->named_type (\"char\", backend->wchar_type (),\n+\t\t\t\t      Linemap::predeclared_location ());\n+  }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "ddba7f233ac548c1a829530f5d07dad61670ce33", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -156,6 +156,7 @@ Resolver::generate_builtins ()\n     = new TyTy::FloatType (mappings->get_next_hir_id (), TyTy::FloatType::F64);\n   auto usize = new TyTy::USizeType (mappings->get_next_hir_id ());\n   auto isize = new TyTy::ISizeType (mappings->get_next_hir_id ());\n+  auto char_tyty = new TyTy::CharType (mappings->get_next_hir_id ());\n \n   MKBUILTIN_TYPE (\"u8\", builtins, u8);\n   MKBUILTIN_TYPE (\"u16\", builtins, u16);\n@@ -172,6 +173,7 @@ Resolver::generate_builtins ()\n   MKBUILTIN_TYPE (\"f64\", builtins, f64);\n   MKBUILTIN_TYPE (\"usize\", builtins, usize);\n   MKBUILTIN_TYPE (\"isize\", builtins, isize);\n+  MKBUILTIN_TYPE (\"char\", builtins, char_tyty);\n \n   // unit type ()\n   TyTy::UnitType *unit_tyty = new TyTy::UnitType (mappings->get_next_hir_id ());"}, {"sha": "c673e527f01bcaaea75292ec0602f6d9072f3a0c", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -98,6 +98,12 @@ class Backend\n   // Get the unnamed boolean type.\n   virtual Btype *bool_type () = 0;\n \n+  // Get the char type\n+  virtual Btype *char_type () = 0;\n+\n+  // Get the wchar type\n+  virtual Btype *wchar_type () = 0;\n+\n   // Get the Host pointer size in bits\n   virtual int get_pointer_size () = 0;\n \n@@ -294,6 +300,9 @@ class Backend\n   // Return an expression for the string value VAL.\n   virtual Bexpression *string_constant_expression (const std::string &val) = 0;\n \n+  // Get a char literal\n+  virtual Bexpression *wchar_constant_expression (wchar_t c) = 0;\n+\n   // Return an expression for the boolean value VAL.\n   virtual Bexpression *boolean_constant_expression (bool val) = 0;\n "}, {"sha": "b2538b42338b442afa101ba6ce99568cf9fe88b5", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -165,6 +165,17 @@ class Gcc_backend : public Backend\n \n   Btype *bool_type () { return this->make_type (boolean_type_node); }\n \n+  Btype *char_type () { return this->make_type (char_type_node); }\n+\n+  Btype *wchar_type ()\n+  {\n+    // i think this is meant to be 32 bit from\n+    // https://www.unicode.org/versions/Unicode13.0.0/ch03.pdf#G7404\n+    int precision = 32;\n+    tree wchar = make_unsigned_type (precision);\n+    return this->make_type (wchar);\n+  }\n+\n   int get_pointer_size ();\n \n   Btype *integer_type (bool, int);\n@@ -247,6 +258,8 @@ class Gcc_backend : public Backend\n \n   Bexpression *string_constant_expression (const std::string &val);\n \n+  Bexpression *wchar_constant_expression (wchar_t c);\n+\n   Bexpression *boolean_constant_expression (bool val);\n \n   Bexpression *real_part_expression (Bexpression *bcomplex, Location);\n@@ -1409,6 +1422,13 @@ Gcc_backend::string_constant_expression (const std::string &val)\n   return this->make_expression (string_val);\n }\n \n+Bexpression *\n+Gcc_backend::wchar_constant_expression (wchar_t c)\n+{\n+  tree ret = build_int_cst (this->wchar_type ()->get_tree (), c);\n+  return this->make_expression (ret);\n+}\n+\n // Make a constant boolean expression.\n \n Bexpression *"}, {"sha": "e8ae83e769b3c4faef42e856f6331cc49fcfd8de", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -439,6 +439,12 @@ class TypeCheckExpr : public TypeCheckBase\n \t}\n \tbreak;\n \n+\tcase HIR::Literal::LitType::CHAR: {\n+\t  auto ok = context->lookup_builtin (\"char\", &infered);\n+\t  rust_assert (ok);\n+\t}\n+\tbreak;\n+\n       default:\n \tgcc_unreachable ();\n \tbreak;"}, {"sha": "08c3ed3e10838b815b3d0ba67712fd9ab0dd91cc", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -51,6 +51,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (USizeType &type) override { gcc_unreachable (); }\n   void visit (ISizeType &type) override { gcc_unreachable (); }\n   void visit (ErrorType &type) override { gcc_unreachable (); }\n+  void visit (CharType &type) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -94,6 +95,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (ISizeType &type) override { gcc_unreachable (); }\n   void visit (ErrorType &type) override { gcc_unreachable (); }\n   void visit (ADTType &type) override { gcc_unreachable (); };\n+  void visit (CharType &type) override { gcc_unreachable (); }\n \n   // call fns\n   void visit (FnType &type) override;"}, {"sha": "809a76c09e5aebfa9e82ec874a9a1af4149dc59a", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -169,6 +169,13 @@ class BaseRules : public TyVisitor\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n   }\n \n+  virtual void visit (CharType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (TyBase *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -367,6 +374,19 @@ class InferRules : public BaseRules\n     BaseRules::visit (type);\n   }\n \n+  void visit (CharType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseRules::visit (type);\n+  }\n+\n private:\n   InferType *base;\n };\n@@ -729,6 +749,29 @@ class ISizeRules : public BaseRules\n   ISizeType *base;\n };\n \n+class CharRules : public BaseRules\n+{\n+public:\n+  CharRules (CharType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n+  void visit (CharType &type) override { resolved = type.clone (); }\n+\n+private:\n+  CharType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "6b36ebd6e4e38e02cbae5b6feada239f051a09c3", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -41,6 +41,7 @@ class TyVisitor\n   virtual void visit (USizeType &type) = 0;\n   virtual void visit (ISizeType &type) = 0;\n   virtual void visit (ErrorType &type) = 0;\n+  virtual void visit (CharType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "c2d4763300d3571675bc24e5951439788d543314", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -485,6 +485,33 @@ ISizeType::clone ()\n   return new ISizeType (get_ref (), get_ty_ref (), get_combined_refs ());\n }\n \n+void\n+CharType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+CharType::as_string () const\n+{\n+  return \"char\";\n+}\n+\n+TyBase *\n+CharType::combine (TyBase *other)\n+{\n+  CharRules r (this);\n+  return r.combine (other);\n+}\n+\n+TyBase *\n+CharType::clone ()\n+{\n+  return new CharType (get_ref (), get_ty_ref (), get_combined_refs ());\n+}\n+\n+// rust-tyty-call.h\n+\n void\n TypeCheckCallExpr::visit (ADTType &type)\n {"}, {"sha": "dd80062c8a9841079933ea39e7f535c87d9188f5", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -552,6 +552,26 @@ class ISizeType : public TyBase\n   TyBase *clone () final override;\n };\n \n+class CharType : public TyBase\n+{\n+public:\n+  CharType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ref, TypeKind::CHAR)\n+  {}\n+\n+  CharType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n+    : TyBase (ref, ty_ref, TypeKind::CHAR)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "73835c218a2900edc2ac995e858073e93f970345", "filename": "gcc/testsuite/rust.test/compilable/char1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fchar1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae8d55860cbe95f80d5e5c76ca71883dbde0e10/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fchar1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fchar1.rs?ref=3ae8d55860cbe95f80d5e5c76ca71883dbde0e10", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a;\n+    a = 'c';\n+}"}]}