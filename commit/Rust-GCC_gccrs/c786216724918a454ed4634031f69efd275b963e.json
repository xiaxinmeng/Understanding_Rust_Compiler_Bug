{"sha": "c786216724918a454ed4634031f69efd275b963e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4NjIxNjcyNDkxOGE0NTRlZDQ2MzQwMzFmNjllZmQyNzViOTYzZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-11-14T11:41:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:41:25Z"}, "message": "[Ada] Minor reformatting\n\n2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* back_end.adb, checks.adb, exp_ch3.adb, exp_ch4.adb,\n\texp_ch7.adb, exp_disp.adb, exp_unst.adb, exp_util.adb,\n\tfreeze.adb, sem_ch13.adb, sem_ch6.adb, sem_ch7.adb,\n\tsem_prag.adb, sem_spark.adb, sem_util.adb: Minor reformatting.\n\nFrom-SVN: r266122", "tree": {"sha": "37eba19fb13e71b35909a2c163e362a426772614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37eba19fb13e71b35909a2c163e362a426772614"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c786216724918a454ed4634031f69efd275b963e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c786216724918a454ed4634031f69efd275b963e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c786216724918a454ed4634031f69efd275b963e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c786216724918a454ed4634031f69efd275b963e/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0715a2a8d257d647ee97521316ef87ac150c1977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0715a2a8d257d647ee97521316ef87ac150c1977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0715a2a8d257d647ee97521316ef87ac150c1977"}], "stats": {"total": 209, "additions": 105, "deletions": 104}, "files": [{"sha": "c407793a0a665b4d026a8376386a52abc6a2462b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -1,3 +1,10 @@\n+2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* back_end.adb, checks.adb, exp_ch3.adb, exp_ch4.adb,\n+\texp_ch7.adb, exp_disp.adb, exp_unst.adb, exp_util.adb,\n+\tfreeze.adb, sem_ch13.adb, sem_ch6.adb, sem_ch7.adb,\n+\tsem_prag.adb, sem_spark.adb, sem_util.adb: Minor reformatting.\n+\n 2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch4.adb (Find_Aliased_Equality): New routine."}, {"sha": "e7798c845da833c1c3198ee7d135833fcf8d120f", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -237,22 +237,21 @@ package body Back_End is\n          Last  : constant Natural  := Switch_Last (Switch_Chars);\n \n       begin\n-         --  Skip -o or internal GCC switches together with their argument.\n+         --  Skip -o or internal GCC switches together with their argument\n \n          if Switch_Chars (First .. Last) = \"o\"\n            or else Is_Internal_GCC_Switch (Switch_Chars)\n          then\n             Next_Arg := Next_Arg + 1;\n \n-         --  Store -G xxx as -Gxxx and go directly to the next argument.\n+         --  Store -G xxx as -Gxxx and go directly to the next argument\n \n          elsif Switch_Chars (First .. Last) = \"G\" then\n             Next_Arg := Next_Arg + 1;\n \n             --  Should never get there with -G not followed by an argument,\n-            --  but use defensive code nonetheless.\n-            --  Store as -Gxxx to avoid storing parameters in ALI files that\n-            --  might create confusion.\n+            --  but use defensive code nonetheless. Store as -Gxxx to avoid\n+            --  storing parameters in ALI files that might create confusion.\n \n             if Next_Arg <= Args'Last then\n                Store_Compilation_Switch (Switch_Chars & Args (Next_Arg).all);"}, {"sha": "6b9e6541f86f47d4b50365ff5ba8e72504a93d04", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -3552,8 +3552,8 @@ package body Checks is\n                else\n                   --  Conversions involving fixed-point types are expanded\n                   --  separately, and do not need a Range_Check flag, except\n-                  --  in SPARK_Mode, where the explicit constraint check will\n-                  --  not be generated.\n+                  --  in GNATprove_Mode, where the explicit constraint check\n+                  --  will not be generated.\n \n                   if GNATprove_Mode\n                     or else not Is_Fixed_Point_Type (Expr_Type)"}, {"sha": "1eddd61b992c566850d37fbc0633d28911b7b40d", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -8611,17 +8611,17 @@ package body Exp_Ch3 is\n    ------------------\n \n    function Init_Formals (Typ : Entity_Id) return List_Id is\n-      Unc_Arr : constant Boolean :=\n-        Is_Array_Type (Typ) and then not Is_Constrained (Typ);\n+      Loc        : constant Source_Ptr := Sloc (Typ);\n+      Unc_Arr    : constant Boolean :=\n+                     Is_Array_Type (Typ) and then not Is_Constrained (Typ);\n       With_Prot  : constant Boolean :=\n-        Has_Protected (Typ)\n-          or else (Is_Record_Type (Typ)\n-                     and then Is_Protected_Record_Type (Typ));\n+                     Has_Protected (Typ)\n+                       or else (Is_Record_Type (Typ)\n+                                 and then Is_Protected_Record_Type (Typ));\n       With_Task  : constant Boolean :=\n-        Has_Task (Typ)\n-          or else (Is_Record_Type (Typ)\n-                     and then Is_Task_Record_Type (Typ));\n-      Loc     : constant Source_Ptr := Sloc (Typ);\n+                     Has_Task (Typ)\n+                       or else (Is_Record_Type (Typ)\n+                                 and then Is_Task_Record_Type (Typ));\n       Formals : List_Id;\n \n    begin\n@@ -9038,8 +9038,8 @@ package body Exp_Ch3 is\n       Stmt : Node_Id;\n \n    begin\n-      --  We must skip SCIL nodes because they may have been added to the\n-      --  list by Insert_Actions.\n+      --  We must skip SCIL nodes because they may have been added to the list\n+      --  by Insert_Actions.\n \n       Stmt := First_Non_SCIL_Node (Stmts);\n       while Present (Stmt) loop"}, {"sha": "a00e0c7761d1fa1621a8801f335177443551db99", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -4085,9 +4085,9 @@ package body Exp_Ch4 is\n               Unchecked_Convert_To (Standard_Integer, Op_Expr));\n \n          else\n-            --  If the modulus of the type is larger than Integer'Last\n-            --  use a larger type for the operands, to prevent spurious\n-            --  constraint errors on large legal literals of the type.\n+            --  If the modulus of the type is larger than Integer'Last use a\n+            --  larger type for the operands, to prevent spurious constraint\n+            --  errors on large legal literals of the type.\n \n             if Modulus (Etype (N)) > UI_From_Int (Int (Integer'Last)) then\n                Target_Type := Standard_Long_Integer;\n@@ -11764,8 +11764,8 @@ package body Exp_Ch4 is\n             elsif Is_Integer_Type (Etype (N)) then\n                Expand_Convert_Fixed_To_Integer (N);\n \n-               --  The result of the conversion might need a range check,\n-               --   so do not assume that the result is in bounds.\n+               --  The result of the conversion might need a range check, so do\n+               --  not assume that the result is in bounds.\n \n                Set_Etype (N, Base_Type (Target_Type));\n "}, {"sha": "c8f39e7b4eea8015ef4623ac06d8dbeb5a427b3f", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -362,10 +362,10 @@ package body Exp_Ch7 is\n \n    procedure Check_Unnesting_In_Declarations (N : Node_Id);\n    --  Similarly, the declarations in the package body may have created\n-   --  blocks with nested subprograms. Such a block must be transformed\n-   --  into a procedure followed by a call to it, so that unnesting can\n-   --  handle uplevel references within these nested subprograms (typically\n-   --  generated subprograms to handle finalization actions).\n+   --  blocks with nested subprograms. Such a block must be transformed into a\n+   --  procedure followed by a call to it, so that unnesting can handle uplevel\n+   --  references within these nested subprograms (typically generated\n+   --  subprograms to handle finalization actions).\n \n    procedure Check_Visibly_Controlled\n      (Prim : Final_Primitives;\n@@ -4177,16 +4177,16 @@ package body Exp_Ch7 is\n \n    procedure Check_Unnesting_In_Declarations (N : Node_Id) is\n       Decl       : Node_Id;\n+      Ent        : Entity_Id;\n       Inner_Decl : Node_Id;\n       Loc        : Source_Ptr;\n       Local_Body : Node_Id;\n       Local_Call : Node_Id;\n-\n-      Ent        : Entity_Id;\n       Local_Proc : Entity_Id;\n \n    begin\n       Local_Call := Empty;\n+\n       if Unnest_Subprogram_Mode\n         and then Present (Declarations (N))\n         and then Is_Compilation_Unit (Current_Scope)\n@@ -4198,7 +4198,6 @@ package body Exp_Ch7 is\n                Inner_Decl := First (Declarations (Decl));\n \n                while Present (Inner_Decl) loop\n-\n                   if Nkind (Inner_Decl) = N_Subprogram_Body then\n                      Loc := Sloc (Decl);\n                      Local_Proc :=\n@@ -4213,13 +4212,15 @@ package body Exp_Ch7 is\n                              Declarations       => Declarations (Decl),\n                          Handled_Statement_Sequence =>\n                            Handled_Statement_Sequence (Decl));\n+\n                      Rewrite (Decl, Local_Body);\n                      Analyze (Decl);\n                      Set_Has_Nested_Subprogram (Local_Proc);\n \n                      Local_Call :=\n                        Make_Procedure_Call_Statement (Loc,\n                          Name => New_Occurrence_Of (Local_Proc, Loc));\n+\n                      Insert_After (Decl, Local_Call);\n                      Analyze (Local_Call);\n "}, {"sha": "f36cd1f8aed9c70fa8cf64284045dc617f897d80", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -1367,9 +1367,7 @@ package body Exp_Disp is\n          --  to the object, because generic dispatching constructors are not\n          --  supported.\n \n-         if Opnd = Iface_Typ\n-           and then not RTE_Available (RE_Displace)\n-         then\n+         if Opnd = Iface_Typ and then not RTE_Available (RE_Displace) then\n             return;\n          end if;\n       end;\n@@ -2487,10 +2485,10 @@ package body Exp_Disp is\n      (Typ : Entity_Id) return Node_Id\n    is\n       Loc    : constant Source_Ptr := Sloc (Typ);\n-      Def_Id : constant Entity_Id :=\n+      B_Id   : constant Entity_Id  := Make_Defining_Identifier (Loc, Name_uB);\n+      Def_Id : constant Entity_Id  :=\n                  Make_Defining_Identifier (Loc,\n                    Name_uDisp_Asynchronous_Select);\n-      B_Id   : constant Entity_Id  := Make_Defining_Identifier (Loc, Name_uB);\n       Params : constant List_Id    := New_List;\n \n    begin\n@@ -2503,6 +2501,7 @@ package body Exp_Disp is\n       --  F : out Boolean;                    --  Status flag\n \n       --  The B parameter may be left uninitialized\n+\n       Set_Warnings_Off (B_Id);\n \n       Append_List_To (Params, New_List ("}, {"sha": "882866e38e0cb856344a568231c0243409b824e5", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -752,14 +752,10 @@ package body Exp_Unst is\n             procedure Register_Subprogram (E : Entity_Id; Bod : Node_Id) is\n                L : constant Nat := Get_Level (Subp, E);\n \n-            --  Subprograms declared in tasks and protected types cannot\n-            --  be eliminated because calls to them may be in other units,\n-            --  so they must be treated as reachable.\n-\n             begin\n-               --  Subprograms declared in tasks and protected types cannot\n-               --  be eliminated because calls to them may be in other units,\n-               --  so they must be treated as reachable.\n+               --  Subprograms declared in tasks and protected types cannot be\n+               --  eliminated because calls to them may be in other units, so\n+               --  they must be treated as reachable.\n \n                Subps.Append\n                  ((Ent           => E,\n@@ -1154,9 +1150,9 @@ package body Exp_Unst is\n                      return Skip;\n                   end if;\n \n-               --  Pragmas and component declarations can be ignored.\n-               --  Quantified expressions are expanded into explicit loops\n-               --  and the original epression must be ignored.\n+               --  Pragmas and component declarations are ignored. Quantified\n+               --  expressions are expanded into explicit loops and the\n+               --  original epression must be ignored.\n \n                when N_Component_Declaration\n                   | N_Pragma\n@@ -1389,10 +1385,10 @@ package body Exp_Unst is\n \n                         --  If this entity was marked reachable because it is\n                         --  in a task or protected type, there may not appear\n-                        --  to be any calls to it, which would normally\n-                        --  adjust the levels of the parent subprograms.\n-                        --  So we need to be sure that the uplevel reference\n-                        --  of that entity takes into account possible calls.\n+                        --  to be any calls to it, which would normally adjust\n+                        --  the levels of the parent subprograms. So we need to\n+                        --  be sure that the uplevel reference of that entity\n+                        --  takes into account possible calls.\n \n                         if In_Synchronized_Unit (SUBF.Ent)\n                           and then SUBT.Lev < SUBI.Uplevel_Ref\n@@ -1408,9 +1404,9 @@ package body Exp_Unst is\n                   --  We do not add types to this list, only actual references\n                   --  to objects that will be referenced uplevel, and we use\n                   --  the flag Is_Uplevel_Referenced_Entity to avoid making\n-                  --  duplicate entries in the list.\n-                  --  Discriminants are also excluded, only the enclosing\n-                  --  object can appear in the list.\n+                  --  duplicate entries in the list. Discriminants are also\n+                  --  excluded, only the enclosing object can appear in the\n+                  --  list.\n \n                   if not Is_Uplevel_Referenced_Entity (URJ.Ent)\n                     and then Ekind (URJ.Ent) /= E_Discriminant\n@@ -1750,8 +1746,8 @@ package body Exp_Unst is\n                      --  Declaration nodes for the AREC entities we build\n \n                   begin\n-                     --  Build list of component declarations for ARECnT\n-                     --  and load System.Address.\n+                     --  Build list of component declarations for ARECnT and\n+                     --  load System.Address.\n \n                      Clist := Empty_List;\n \n@@ -2009,10 +2005,11 @@ package body Exp_Unst is\n                                     Attr := Name_Address;\n                                  end if;\n \n-                                 Rhs :=  Make_Attribute_Reference (Loc,\n-                                         Prefix         =>\n-                                           New_Occurrence_Of (Ent, Loc),\n-                                         Attribute_Name => Attr);\n+                                 Rhs :=\n+                                  Make_Attribute_Reference (Loc,\n+                                    Prefix         =>\n+                                      New_Occurrence_Of (Ent, Loc),\n+                                    Attribute_Name => Attr);\n \n                                  --  If the entity is an unconstrained formal\n                                  --  we wrap the attribute reference in an\n@@ -2024,15 +2021,15 @@ package body Exp_Unst is\n                                  if Is_Formal (Ent)\n                                    and then not Is_Constrained (Etype (Ent))\n                                  then\n-                                    --  Find target component and its type.\n+                                    --  Find target component and its type\n \n                                     Comp := First_Component (STJ.ARECnT);\n                                     while Chars (Comp) /= Chars (Ent) loop\n                                        Comp := Next_Component (Comp);\n                                     end loop;\n \n-                                    Rhs := Unchecked_Convert_To (\n-                                              Etype (Comp), Rhs);\n+                                    Rhs :=\n+                                      Unchecked_Convert_To (Etype (Comp), Rhs);\n                                  end if;\n \n                                  Asn :="}, {"sha": "a76e92e7e444465135cd8339c243fa357e7c6655", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -9313,9 +9313,9 @@ package body Exp_Util is\n \n       --  If the type is tagged, the expression may be class-wide, in which\n       --  case it has to be converted to its root type, given that the\n-      --  generated predicate function is not dispatching. The conversion\n-      --  is type-safe and does not need validation, which matters when\n-      --  private extensions are involved.\n+      --  generated predicate function is not dispatching. The conversion is\n+      --  type-safe and does not need validation, which matters when private\n+      --  extensions are involved.\n \n       if Is_Tagged_Type (Typ) then\n          Call :="}, {"sha": "6734f6df5442830ee7d1e21867a4bf68b2a186b5", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -8008,12 +8008,12 @@ package body Freeze is\n                Set_Realval (Lo, Loval);\n             end if;\n \n-            --  Compute the fudged bounds. If the bound is a model number,\n-            --  (or greater if given low bound, smaller if high bound)\n-            --  then we do nothing to include it, but we are allowed to backoff\n-            --  to the next adjacent model number when we exclude it. If it is\n-            --  not a model number then we straddle the two values with the\n-            --  model numbers on either side.\n+            --  Compute the fudged bounds. If the bound is a model number, (or\n+            --  greater if given low bound, smaller if high bound) then we do\n+            --  nothing to include it, but we are allowed to backoff to the\n+            --  next adjacent model number when we exclude it. If it is not a\n+            --  model number then we straddle the two values with the model\n+            --  numbers on either side.\n \n             Model_Num := UR_Trunc (Loval / Small) * Small;\n "}, {"sha": "92d65e64ede562e2b2a8b195478e6baa7190981c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -11449,6 +11449,20 @@ package body Sem_Ch13 is\n       function Rep_Item_Entity (Rep_Item : Node_Id) return Entity_Id;\n       --  Return the entity for which Rep_Item is specified\n \n+      --------------------------------------------------\n+      -- Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item --\n+      --------------------------------------------------\n+\n+      function Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item\n+        (Rep_Item : Node_Id) return Boolean\n+      is\n+      begin\n+         return\n+           Nkind (Rep_Item) = N_Pragma\n+             or else Present_In_Rep_Item\n+                       (Entity (Rep_Item), Aspect_Rep_Item (Rep_Item));\n+      end Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item;\n+\n       ---------------------\n       -- Rep_Item_Entity --\n       ---------------------\n@@ -11460,26 +11474,12 @@ package body Sem_Ch13 is\n \n          else\n             pragma Assert (Nkind_In (Rep_Item,\n-                                     N_Pragma,\n-                                     N_Attribute_Definition_Clause));\n+                                     N_Attribute_Definition_Clause,\n+                                     N_Pragma));\n             return Entity (Name (Rep_Item));\n          end if;\n       end Rep_Item_Entity;\n \n-      --------------------------------------------------\n-      -- Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item --\n-      --------------------------------------------------\n-\n-      function Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item\n-        (Rep_Item : Node_Id) return Boolean\n-      is\n-      begin\n-         return\n-           Nkind (Rep_Item) = N_Pragma\n-             or else Present_In_Rep_Item\n-                       (Entity (Rep_Item), Aspect_Rep_Item (Rep_Item));\n-      end Is_Pragma_Or_Corr_Pragma_Present_In_Rep_Item;\n-\n    --  Start of processing for Inherit_Aspects_At_Freeze_Point\n \n    begin"}, {"sha": "f7b688045eae1416d6b137b3a90044ee48814142", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -8925,18 +8925,18 @@ package body Sem_Ch6 is\n                  and then Discriminal_Link (Entity (E1)) =\n                           Discriminal_Link (Entity (E2)))\n \n-             --  AI12-050: The loop variables of quantified expressions\n-             --  match if they have the same identifier, even though they\n-             --  are different entities.\n+             --  AI12-050: The loop variables of quantified expressions match\n+             --  if they have the same identifier, even though they may have\n+             --  different entities.\n \n               or else\n                 (Chars (Entity (E1)) = Chars (Entity (E2))\n                   and then Ekind (Entity (E1)) = E_Loop_Parameter\n                   and then Ekind (Entity (E2)) = E_Loop_Parameter)\n \n               --  A call to an instantiation of Unchecked_Conversion is\n-              --  rewritten with the name of the generated function\n-              --  created for the instance, and this must be special-cased.\n+              --  rewritten with the name of the generated function created for\n+              --  the instance, and this must be special-cased.\n \n               or else\n                  (Ekind (Entity (E1)) = E_Function"}, {"sha": "28119dfd121f2f74dc547ebb2ed8b98ee9acdcb2", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -2855,13 +2855,13 @@ package body Sem_Ch7 is\n                   Set_Is_Potentially_Use_Visible (Id);\n                end if;\n \n-            --  We need to avoid incorrectly marking enumeration literals\n-            --  as non-visible when a visible use-all-type clause is in effect.\n+            --  We need to avoid incorrectly marking enumeration literals as\n+            --  non-visible when a visible use-all-type clause is in effect.\n \n             elsif Type_In_Use (Etype (Id))\n-                    and then Nkind (Current_Use_Clause (Etype (Id))) =\n-                               N_Use_Type_Clause\n-                    and then All_Present (Current_Use_Clause (Etype (Id)))\n+              and then Nkind (Current_Use_Clause (Etype (Id))) =\n+                         N_Use_Type_Clause\n+              and then All_Present (Current_Use_Clause (Etype (Id)))\n             then\n                null;\n "}, {"sha": "a96d148ecbbc08f188b6f9c9ce9ff6c31d16ed2b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -27743,8 +27743,9 @@ package body Sem_Prag is\n                else\n                   pragma Assert (Present (Global));\n                   Error_Msg_Sloc := Sloc (Global);\n-                  SPARK_Msg_NE (\"extra global item & does not refine or \" &\n-                                \"repeat any global item #\", Item, Item_Id);\n+                  SPARK_Msg_NE\n+                    (\"extra global item & does not refine or repeat any \"\n+                     & \"global item #\", Item, Item_Id);\n                end if;\n             end if;\n          end Check_Refined_Global_Item;"}, {"sha": "b8baeeb209f0499463617aebb48162148f20628b", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -863,7 +863,6 @@ package body Sem_SPARK is\n    -----------------------\n \n    procedure Check_Declaration (Decl : Node_Id) is\n-\n       Target_Ent : constant Entity_Id := Defining_Identifier (Decl);\n       Target_Typ : Node_Id renames Etype (Target_Ent);\n "}, {"sha": "e3d7718a5996e9590f89aeac96e75aff883fd89a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c786216724918a454ed4634031f69efd275b963e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c786216724918a454ed4634031f69efd275b963e", "patch": "@@ -8593,9 +8593,7 @@ package body Sem_Util is\n \n          --  Single global item declaration (only input items)\n \n-         elsif Nkind_In (List, N_Expanded_Name,\n-                               N_Identifier)\n-         then\n+         elsif Nkind_In (List, N_Expanded_Name, N_Identifier) then\n             if Global_Mode = Name_Input then\n                return List;\n             else\n@@ -8647,9 +8645,9 @@ package body Sem_Util is\n       Body_Id : Entity_Id;\n \n    begin\n-      pragma Assert (Nam_In (Global_Mode, Name_Input,\n+      pragma Assert (Nam_In (Global_Mode, Name_In_Out,\n+                                          Name_Input,\n                                           Name_Output,\n-                                          Name_In_Out,\n                                           Name_Proof_In));\n \n       --  Retrieve the suitable pragma Global or Refined_Global. In the second"}]}