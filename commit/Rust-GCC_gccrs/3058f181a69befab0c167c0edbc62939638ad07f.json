{"sha": "3058f181a69befab0c167c0edbc62939638ad07f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1OGYxODFhNjliZWZhYjBjMTY3YzBlZGJjNjI5Mzk2MzhhZDA3Zg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2012-03-07T17:07:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-07T17:07:55Z"}, "message": "rtsfind.ads: Add support for finding Super_String types.\n\n2012-03-07  Bob Duff  <duff@adacore.com>\n\n\t* rtsfind.ads: Add support for finding Super_String types.\n\t* sem_util.ads, sem_util.adb (Is_Bounded_String): New function\n\tto determine whether a given type is a bounded string type.\n\t(Is_Fully_Initialized_Type): Return True for bounded\n\tstring types, to suppress bogus warnings.\n\t* exp_ch4.adb (Expand_Composite_Equality): Special case for bounded\n\tstrings: equality composes. This allows us to remove default values in\n\tsuper strings.\n\t* a-strsup.ads, a-stwisu.ads, a-stzsup.ads: Update comments.\n\t* exp_ch3.adb (Expand_Freeze_Record_Type): Comment.\n\nFrom-SVN: r185066", "tree": {"sha": "b9968cd8294f3f38e3d95d328b514a31814aba7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9968cd8294f3f38e3d95d328b514a31814aba7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3058f181a69befab0c167c0edbc62939638ad07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3058f181a69befab0c167c0edbc62939638ad07f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3058f181a69befab0c167c0edbc62939638ad07f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3058f181a69befab0c167c0edbc62939638ad07f/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bde73c6b2681d054b70e5578af87ed55be3492a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde73c6b2681d054b70e5578af87ed55be3492a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde73c6b2681d054b70e5578af87ed55be3492a4"}], "stats": {"total": 101, "additions": 85, "deletions": 16}, "files": [{"sha": "8e1f6381ed67c0fc5c7fdbb874e25d151f717393", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -1,3 +1,16 @@\n+2012-03-07  Bob Duff  <duff@adacore.com>\n+\n+\t* rtsfind.ads: Add support for finding Super_String types.\n+\t* sem_util.ads, sem_util.adb (Is_Bounded_String): New function\n+\tto determine whether a given type is a bounded string type.\n+\t(Is_Fully_Initialized_Type): Return True for bounded\n+\tstring types, to suppress bogus warnings.\n+\t* exp_ch4.adb (Expand_Composite_Equality): Special case for bounded\n+\tstrings: equality composes. This allows us to remove default values in\n+\tsuper strings.\n+\t* a-strsup.ads, a-stwisu.ads, a-stzsup.ads: Update comments.\n+\t* exp_ch3.adb (Expand_Freeze_Record_Type): Comment.\n+\n 2012-03-07  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb, exp_ch4.adb, exp_ch6.adb, sem_ch6.adb: Minor"}, {"sha": "185f88879c6307cb7957dc1e1df9aa838963f54d", "filename": "gcc/ada/a-strsup.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fa-strsup.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fa-strsup.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsup.ads?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -45,8 +45,9 @@ package Ada.Strings.Superbounded is\n       Current_Length : Natural := 0;\n       Data           : String (1 .. Max_Length);\n       --  A previous version had a default initial value for Data, which is no\n-      --  longer necessary, because \"=\" now composes properly for untagged\n-      --  records. Leaving it out is more efficient.\n+      --  longer necessary, because we now special-case this type in the\n+      --  compiler, so \"=\" composes properly for descendants of this\n+      --  type. Leaving it out is more efficient.\n    end record;\n    --  Type Bounded_String in Ada.Strings.Bounded.Generic_Bounded_Length is\n    --  derived from this type, with the constraint of the maximum length."}, {"sha": "6b8d3a43c173cf9608b76ea1280226cc84bebe96", "filename": "gcc/ada/a-stwisu.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fa-stwisu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fa-stwisu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwisu.ads?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -48,8 +48,9 @@ package Ada.Strings.Wide_Superbounded is\n       Current_Length : Natural := 0;\n       Data           : Wide_String (1 .. Max_Length);\n       --  A previous version had a default initial value for Data, which is no\n-      --  longer necessary, because \"=\" now composes properly for untagged\n-      --  records. Leaving it out is more efficient.\n+      --  longer necessary, because we now special-case this type in the\n+      --  compiler, so \"=\" composes properly for descendants of this\n+      --  type. Leaving it out is more efficient.\n    end record;\n    --  Ada.Strings.Wide_Bounded.Generic_Bounded_Length.Wide_Bounded_String is\n    --  derived from this type, with the constraint of the maximum length."}, {"sha": "cb0d173d44ae166e447405aa283de55ccee4c11f", "filename": "gcc/ada/a-stzsup.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fa-stzsup.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fa-stzsup.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzsup.ads?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -49,8 +49,9 @@ package Ada.Strings.Wide_Wide_Superbounded is\n       Current_Length : Natural := 0;\n       Data           : Wide_Wide_String (1 .. Max_Length);\n       --  A previous version had a default initial value for Data, which is no\n-      --  longer necessary, because \"=\" now composes properly for untagged\n-      --  records. Leaving it out is more efficient.\n+      --  longer necessary, because we now special-case this type in the\n+      --  compiler, so \"=\" composes properly for descendants of this\n+      --  type. Leaving it out is more efficient.\n    end record;\n    --  Wide_Wide_Bounded.Generic_Bounded_Length.Wide_Wide_Bounded_String is\n    --  derived from this type, with the constraint of the maximum length."}, {"sha": "4cc9caec4fd4951e43c729f3e6d78f49af5b4384", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -6115,9 +6115,9 @@ package body Exp_Ch3 is\n \n       --  This is done unconditionally to ensure that tools can be linked\n       --  properly with user programs compiled with older language versions.\n-      --  It might be worth including a switch to revert to a non-composable\n-      --  equality for untagged records, even though no program depending on\n-      --  non-composability has surfaced ???\n+      --  In addition, this is needed because \"=\" composes for bounded strings\n+      --  in all language versions (see also\n+      --  Exp_Ch4.Expand_Composite_Equality).\n \n       elsif Comes_From_Source (Def_Id)\n         and then Convention (Def_Id) = Convention_Ada"}, {"sha": "f9c1f3c82a4429c76deba7eb4a75855ac2434ab9", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -149,10 +149,10 @@ package body Exp_Ch4 is\n    --  Local recursive function used to expand equality for nested composite\n    --  types. Used by Expand_Record/Array_Equality, Bodies is a list on which\n    --  to attach bodies of local functions that are created in the process.\n-   --  This is the responsibility of the caller to insert those bodies at the\n+   --  It is the responsibility of the caller to insert those bodies at the\n    --  right place. Nod provides the Sloc value for generated code. Lhs and Rhs\n    --  are the left and right sides for the comparison, and Typ is the type of\n-   --  the arrays to compare.\n+   --  the objects to compare.\n \n    procedure Expand_Concatenate (Cnode : Node_Id; Opnds : List_Id);\n    --  Routine to expand concatenation of a sequence of two or more operands\n@@ -2488,17 +2488,24 @@ package body Exp_Ch4 is\n                end if;\n             end if;\n \n-         elsif Ada_Version >= Ada_2012 then\n+         --  Equality composes in Ada 2012 for untagged record types. It also\n+         --  composes for bounded strings, because they are part of the\n+         --  predefined environment. We could make it compose for bounded\n+         --  strings by making them tagged, or by making sure all subcomponents\n+         --  are set to the same value, even when not used. Instead, we have\n+         --  this special case in the compiler, because it's more efficient.\n+\n+         elsif Ada_Version >= Ada_2012 or else Is_Bounded_String (Typ) then\n \n             --  if no TSS has been created for the type, check whether there is\n             --  a primitive equality declared for it.\n \n             declare\n-               Ada_2012_Op : constant Node_Id := Find_Primitive_Eq;\n+               Op : constant Node_Id := Find_Primitive_Eq;\n \n             begin\n-               if Present (Ada_2012_Op) then\n-                  return Ada_2012_Op;\n+               if Present (Op) then\n+                  return Op;\n                else\n \n                --  Use predefined equality if no user-defined primitive exists"}, {"sha": "88e61dc893c8c839115b3d400bfb3ecb19867639", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -160,6 +160,9 @@ package Rtsfind is\n \n       --  Children of Ada.Strings\n \n+      Ada_Strings_Superbounded,\n+      Ada_Strings_Wide_Superbounded,\n+      Ada_Strings_Wide_Wide_Superbounded,\n       Ada_Strings_Unbounded,\n \n       --  Children of Ada.Text_IO (for Text_IO_Kludge)\n@@ -438,7 +441,7 @@ package Rtsfind is\n    --  Range of values for children of Ada.Streams\n \n    subtype Ada_Strings_Child is Ada_Child\n-     range Ada_Strings_Unbounded .. Ada_Strings_Unbounded;\n+     range Ada_Strings_Superbounded .. Ada_Strings_Unbounded;\n    --  Range of values for children of Ada.Strings\n \n    subtype Ada_Text_IO_Child is Ada_Child\n@@ -588,6 +591,12 @@ package Rtsfind is\n \n      RE_Stream_Access,                   -- Ada.Streams.Stream_IO\n \n+     RO_SU_Super_String,                 -- Ada.Strings.Superbounded\n+\n+     RO_WI_Super_String,                 -- Ada.Strings.Wide_Superbounded\n+\n+     RO_WW_Super_String,                 -- Ada.Strings.Wide_Wide_Superbounded\n+\n      RE_Unbounded_String,                -- Ada.Strings.Unbounded\n \n      RE_Access_Level,                    -- Ada.Tags\n@@ -1790,6 +1799,12 @@ package Rtsfind is\n \n      RE_Stream_Access                    => Ada_Streams_Stream_IO,\n \n+     RO_SU_Super_String                  => Ada_Strings_Superbounded,\n+\n+     RO_WI_Super_String                  => Ada_Strings_Wide_Superbounded,\n+\n+     RO_WW_Super_String                  => Ada_Strings_Wide_Wide_Superbounded,\n+\n      RE_Unbounded_String                 => Ada_Strings_Unbounded,\n \n      RE_Access_Level                     => Ada_Tags,"}, {"sha": "665e399bf82a8f35972e1a4d2e3032d19691e3d7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -6746,6 +6746,25 @@ package body Sem_Util is\n       end if;\n    end Is_Atomic_Object;\n \n+   -----------------------\n+   -- Is_Bounded_String --\n+   -----------------------\n+\n+   function Is_Bounded_String (T : Entity_Id) return Boolean is\n+      --  Check whether T is ultimately derived from Ada.Strings.-\n+      --  Superbounded.Super_String, or one of the [Wide_]Wide_\n+      --  versions. This will be True for all the Bounded_String types in\n+      --  instances of the Generic_Bounded_Length generics, and for types\n+      --  derived from those.\n+\n+      Under : constant Entity_Id := Underlying_Type (Root_Type (T));\n+   begin\n+      return Present (Under) and then\n+        (Is_RTE (Root_Type (Under), RO_SU_Super_String)\n+           or else Is_RTE (Root_Type (Under), RO_WI_Super_String)\n+           or else Is_RTE (Root_Type (Under), RO_WW_Super_String));\n+   end Is_Bounded_String;\n+\n    -----------------------------\n    -- Is_Concurrent_Interface --\n    -----------------------------\n@@ -7215,6 +7234,14 @@ package body Sem_Util is\n             return True;\n          end if;\n \n+         --  We consider bounded string types to be fully initialized, because\n+         --  otherwise we get false alarms when the Data component is not\n+         --  default-initialized.\n+\n+         if Is_Bounded_String (Typ) then\n+            return True;\n+         end if;\n+\n          --  Controlled records are considered to be fully initialized if\n          --  there is a user defined Initialize routine. This may not be\n          --  entirely correct, but as the spec notes, we are guessing here"}, {"sha": "0df5450205f8721cfa1c59eb06cef1ee5d855434", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3058f181a69befab0c167c0edbc62939638ad07f/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=3058f181a69befab0c167c0edbc62939638ad07f", "patch": "@@ -793,6 +793,10 @@ package Sem_Util is\n    --  Determines if the given node denotes an atomic object in the sense of\n    --  the legality checks described in RM C.6(12).\n \n+   function Is_Bounded_String (T : Entity_Id) return Boolean;\n+   --  True if T is a bounded string type. Used to make sure \"=\" composes\n+   --  properly for bounded string types.\n+\n    function Is_Controlling_Limited_Procedure\n      (Proc_Nam : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-345): Determine whether Proc_Nam is a primitive procedure"}]}