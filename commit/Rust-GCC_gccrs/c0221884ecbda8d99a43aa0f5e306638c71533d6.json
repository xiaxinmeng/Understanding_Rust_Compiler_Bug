{"sha": "c0221884ecbda8d99a43aa0f5e306638c71533d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAyMjE4ODRlY2JkYThkOTlhNDNhYTBmNWUzMDY2MzhjNzE1MzNkNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-07-10T19:29:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-07-10T19:29:59Z"}, "message": "re PR ipa/61659 (Extra undefined symbol because of devirtualization)\n\n\tPR c++/61659\n\tPR c++/61687\ngcc/c-family/\n\t* c.opt (-fuse-all-virtuals): New.\ngcc/cp/\n\t* decl2.c (mark_all_virtuals): New variable.\n\t(maybe_emit_vtables): Check it instead of flag_devirtualize.\n\t(cp_write_global_declarations): Set it and give helpful diagnostic\n\tif it introduces errors.\n\t* class.c (finish_struct_1): Check it.\n\t* decl.c (grokdeclarator): Clear virtualp after 'virtual auto' error.\n\nFrom-SVN: r212436", "tree": {"sha": "7cef2e435d85f003b0320c564b270b29bbcc9dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cef2e435d85f003b0320c564b270b29bbcc9dca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0221884ecbda8d99a43aa0f5e306638c71533d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0221884ecbda8d99a43aa0f5e306638c71533d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0221884ecbda8d99a43aa0f5e306638c71533d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0221884ecbda8d99a43aa0f5e306638c71533d6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7757d79bfcce1f13facc96a420eea4bcd542a3e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7757d79bfcce1f13facc96a420eea4bcd542a3e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7757d79bfcce1f13facc96a420eea4bcd542a3e2"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "23c5c8274a6d35cbf4cdfbeb3c834344a43e75d0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -1,3 +1,9 @@\n+2014-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/61659\n+\tPR c++/61687\n+\t* c.opt (-fuse-all-virtuals): New.\n+\n 2014-07-09  Richard Biener  <rguenther@suse.de>\n \n \tPR c-family/61741"}, {"sha": "3a2084f60567b008aa5bfcdd09a2283b2ff2bfed", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -1268,6 +1268,10 @@ funsigned-char\n C ObjC C++ ObjC++ LTO Var(flag_signed_char, 0)\n Make \\\"char\\\" unsigned by default\n \n+fuse-all-virtuals\n+C++ ObjC++ Var(flag_use_all_virtuals) Init(1)\n+Treat all virtual functions as odr-used\n+\n fuse-cxa-atexit\n C++ ObjC++ Var(flag_use_cxa_atexit) Init(DEFAULT_USE_CXA_ATEXIT)\n Use __cxa_atexit to register destructors"}, {"sha": "a184a401d9f289c8084d7e8cfbb5e9d4527cc4cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -1,3 +1,14 @@\n+2014-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/61659\n+\tPR c++/61687\n+\t* decl2.c (mark_all_virtuals): New variable.\n+\t(maybe_emit_vtables): Check it instead of flag_devirtualize.\n+\t(cp_write_global_declarations): Set it and give helpful diagnostic\n+\tif it introduces errors.\n+\t* class.c (finish_struct_1): Check it.\n+\t* decl.c (grokdeclarator): Clear virtualp after 'virtual auto' error.\n+\n 2014-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60686"}, {"sha": "d0eb1033ef280074c525214153df9a0d436f4439", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -6408,7 +6408,7 @@ finish_struct_1 (tree t)\n \t in every translation unit where the class definition appears.  If\n \t we're devirtualizing, we can look into the vtable even if we\n \t aren't emitting it.  */\n-      if (CLASSTYPE_KEY_METHOD (t) == NULL_TREE || flag_devirtualize)\n+      if (CLASSTYPE_KEY_METHOD (t) == NULL_TREE || flag_use_all_virtuals)\n \tkeyed_classes = tree_cons (NULL_TREE, t, keyed_classes);\n     }\n "}, {"sha": "01d74e34f923be48b9ab550836fab3ac3bb172ca", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -9631,8 +9631,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t\t    \"-std=gnu++1y\");\n \t\t\t  }\n \t\t\telse if (virtualp)\n-\t\t\t  error (\"virtual function cannot \"\n-\t\t\t\t \"have deduced return type\");\n+\t\t\t  {\n+\t\t\t    error (\"virtual function cannot \"\n+\t\t\t\t   \"have deduced return type\");\n+\t\t\t    virtualp = false;\n+\t\t\t  }\n \t\t      }\n \t\t    else if (!is_auto (type))\n \t\t      {"}, {"sha": "0926dbc60fcdb4854edafeabf83ad4d556117a77", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -106,6 +106,11 @@ static GTY(()) vec<tree, va_gc> *no_linkage_decls;\n /* Nonzero if we're done parsing and into end-of-file activities.  */\n \n int at_eof;\n+\n+/* Nonzero if we've instantiated everything used directly, and now want to\n+   mark all virtual functions as used so that they are available for\n+   devirtualization.  */\n+static int mark_all_virtuals;\n \f\n \n /* Return a member function type (a METHOD_TYPE), given FNTYPE (a\n@@ -2009,7 +2014,7 @@ maybe_emit_vtables (tree ctype)\n       if (DECL_COMDAT (primary_vtbl)\n \t  && CLASSTYPE_DEBUG_REQUESTED (ctype))\n \tnote_debug_info_needed (ctype);\n-      if (flag_devirtualize)\n+      if (mark_all_virtuals)\n \t/* Make sure virtual functions get instantiated/synthesized so that\n \t   they can be inlined after devirtualization even if the vtable is\n \t   never emitted.  */\n@@ -4340,6 +4345,8 @@ cp_write_global_declarations (void)\n      instantiated, etc., etc.  */\n \n   emit_support_tinfos ();\n+  int errs = errorcount + sorrycount;\n+  bool explained_devirt = false;\n \n   do\n     {\n@@ -4572,6 +4579,27 @@ cp_write_global_declarations (void)\n \t\t\t\t\t pending_statics->length ()))\n \treconsider = true;\n \n+      if (flag_use_all_virtuals)\n+\t{\n+\t  if (!reconsider && !mark_all_virtuals)\n+\t    {\n+\t      mark_all_virtuals = true;\n+\t      reconsider = true;\n+\t      errs = errorcount + sorrycount;\n+\t    }\n+\t  else if (mark_all_virtuals\n+\t\t   && !explained_devirt\n+\t\t   && (errorcount + sorrycount > errs))\n+\t    {\n+\t      inform (global_dc->last_location, \"this error is seen due to \"\n+\t\t      \"instantiation of all virtual functions, which the C++ \"\n+\t\t      \"standard says are always considered used; this is done \"\n+\t\t      \"to support devirtualization optimizations, but can be \"\n+\t\t      \"disabled with -fno-use-all-virtuals\");\n+\t      explained_devirt = true;\n+\t    }\n+\t}\n+\n       retries++;\n     }\n   while (reconsider);"}, {"sha": "006a75489d6b2f74e9e4b77a2e04bbf577982997", "filename": "gcc/testsuite/g++.dg/template/dtor9.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9.C?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -1,4 +1,5 @@\n // PR c++/60347\n+// { dg-options \"-fno-use-all-virtuals\" }\n \n struct A;\n "}, {"sha": "aaae8b6add04fec6d59d60340cf562a24ca5ee48", "filename": "gcc/testsuite/g++.dg/template/dtor9a.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0221884ecbda8d99a43aa0f5e306638c71533d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9a.C?ref=c0221884ecbda8d99a43aa0f5e306638c71533d6", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/60347\n+// { dg-options \"-fuse-all-virtuals\" }\n+\n+struct A;\n+\n+template <class T>\n+struct B\n+{\n+  T* p;\n+  virtual ~B() { p->~T(); }\t// { dg-error \"incomplete\" }\n+};\n+\n+struct C: B<A> { };"}]}