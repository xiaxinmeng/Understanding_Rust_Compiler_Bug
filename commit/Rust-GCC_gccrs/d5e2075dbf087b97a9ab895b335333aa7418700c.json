{"sha": "d5e2075dbf087b97a9ab895b335333aa7418700c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVlMjA3NWRiZjA4N2I5N2E5YWI4OTViMzM1MzMzYWE3NDE4NzAwYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-12-14T11:08:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "1999-12-14T11:08:22Z"}, "message": "* regclass.c (record_reg_classes): Handle INOUT operands propertly.\n\nFrom-SVN: r30912", "tree": {"sha": "97daabe9b2863aea49be55758279333791010641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97daabe9b2863aea49be55758279333791010641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5e2075dbf087b97a9ab895b335333aa7418700c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e2075dbf087b97a9ab895b335333aa7418700c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e2075dbf087b97a9ab895b335333aa7418700c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e2075dbf087b97a9ab895b335333aa7418700c/comments", "author": null, "committer": null, "parents": [{"sha": "5a5e9ce6900368555a148647886edcd200b89977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5e9ce6900368555a148647886edcd200b89977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5e9ce6900368555a148647886edcd200b89977"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "de821d4f5d29cf87a4b3d9ab1f31207195db9056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e2075dbf087b97a9ab895b335333aa7418700c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e2075dbf087b97a9ab895b335333aa7418700c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5e2075dbf087b97a9ab895b335333aa7418700c", "patch": "@@ -1,3 +1,7 @@\n+Tue Dec 14 12:07:29 MET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n+\n+\t* regclass.c (record_reg_classes): Handle INOUT operands propertly.\n+\n 1999-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/linux64.h (TARGET_LIVE_G0,"}, {"sha": "f48a7c2658ca28ae2d51293d640c8f397e46b191", "filename": "gcc/regclass.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5e2075dbf087b97a9ab895b335333aa7418700c/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5e2075dbf087b97a9ab895b335333aa7418700c/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=d5e2075dbf087b97a9ab895b335333aa7418700c", "patch": "@@ -1306,18 +1306,24 @@ record_reg_classes (n_alts, n_ops, ops, modes, subreg_changes_size,\n \n \t\t  for (class = 0; class < N_REG_CLASSES; class++)\n \t\t    pp->cost[class]\n-\t\t      = (recog_data.operand_type[i] == OP_IN\n-\t\t\t ? may_move_in_cost[class][(int) classes[i]]\n-\t\t\t : may_move_out_cost[(int) classes[i]][class]);\n+\t\t      = ((recog_data.operand_type[i] != OP_OUT\n+\t\t\t  ? may_move_in_cost[class][(int) classes[i]]\n+\t\t\t  : 0)\n+\t\t\t + (recog_data.operand_type[i] != OP_IN\n+\t\t\t    ? may_move_out_cost[(int) classes[i]][class]\n+\t\t\t    : 0));\n \t\t  \n \t\t  /* If the alternative actually allows memory, make things\n \t\t     a bit cheaper since we won't need an extra insn to\n \t\t     load it.  */\n \n \t\t  pp->mem_cost\n-\t\t    = (MEMORY_MOVE_COST (mode, classes[i], \n-\t\t\t\t\t recog_data.operand_type[i] == OP_IN)\n-\t\t       - allows_mem[i]);\n+\t\t    = ((recog_data.operand_type[i] != OP_IN\n+\t\t        ? MEMORY_MOVE_COST (mode, classes[i], 0)\n+\t\t\t: 0)\n+\t\t       + (recog_data.operand_type[i] != OP_OUT\n+\t\t\t  ? MEMORY_MOVE_COST (mode, classes[i], 1)\n+\t\t\t  : 0) - allows_mem[i]);\n \n \t\t  /* If we have assigned a class to this register in our\n \t\t     first pass, add a cost to this alternative corresponding\n@@ -1527,18 +1533,24 @@ record_reg_classes (n_alts, n_ops, ops, modes, subreg_changes_size,\n \n \t\t  for (class = 0; class < N_REG_CLASSES; class++)\n \t\t    pp->cost[class]\n-\t\t      = (recog_data.operand_type[i] == OP_IN\n-\t\t\t ? may_move_in_cost[class][(int) classes[i]]\n-\t\t\t : may_move_out_cost[(int) classes[i]][class]);\n+\t\t      = ((recog_data.operand_type[i] != OP_OUT\n+\t\t\t  ? may_move_in_cost[class][(int) classes[i]]\n+\t\t\t  : 0)\n+\t\t\t + (recog_data.operand_type[i] != OP_IN\n+\t\t\t    ? may_move_out_cost[(int) classes[i]][class]\n+\t\t\t    : 0));\n \n \t\t  /* If the alternative actually allows memory, make things\n \t\t     a bit cheaper since we won't need an extra insn to\n \t\t     load it.  */\n \n \t\t  pp->mem_cost\n-\t\t    = (MEMORY_MOVE_COST (mode, classes[i], \n-\t\t\t\t\t recog_data.operand_type[i] == OP_IN)\n-\t\t       - allows_mem[i]);\n+\t\t    = ((recog_data.operand_type[i] != OP_IN\n+\t\t        ? MEMORY_MOVE_COST (mode, classes[i], 0)\n+\t\t\t: 0)\n+\t\t       + (recog_data.operand_type[i] != OP_OUT\n+\t\t\t  ? MEMORY_MOVE_COST (mode, classes[i], 1)\n+\t\t\t  : 0) - allows_mem[i]);\n \n \t\t  /* If we have assigned a class to this register in our\n \t\t     first pass, add a cost to this alternative corresponding"}]}