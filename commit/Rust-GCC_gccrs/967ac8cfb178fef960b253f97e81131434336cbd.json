{"sha": "967ac8cfb178fef960b253f97e81131434336cbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3YWM4Y2ZiMTc4ZmVmOTYwYjI1M2Y5N2U4MTEzMTQzNDMzNmNiZA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-18T03:52:59Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-04-18T03:52:59Z"}, "message": "re PR libfortran/48602 (Invalid F conversion of G descriptor for values close to powers of 10)\n\n2011-04-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/48602\n\t* gfortran.dg/fmt_g0_6.f08: New test.\n\nFrom-SVN: r172635", "tree": {"sha": "6b252b10cbcef06a92612b612a17d9c63a418bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b252b10cbcef06a92612b612a17d9c63a418bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967ac8cfb178fef960b253f97e81131434336cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ac8cfb178fef960b253f97e81131434336cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967ac8cfb178fef960b253f97e81131434336cbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ac8cfb178fef960b253f97e81131434336cbd/comments", "author": null, "committer": null, "parents": [{"sha": "bc7409a8a963cd4bd15805055369f292ac9d2012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7409a8a963cd4bd15805055369f292ac9d2012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7409a8a963cd4bd15805055369f292ac9d2012"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "889995dd8d862126c859b2f1492f16f830448f8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967ac8cfb178fef960b253f97e81131434336cbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967ac8cfb178fef960b253f97e81131434336cbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=967ac8cfb178fef960b253f97e81131434336cbd", "patch": "@@ -1,3 +1,8 @@\n+2011-04-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/48602\n+\t* gfortran.dg/fmt_g0_6.f08: New test.\n+\n 2011-04-17  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/sfinae16.C: New."}, {"sha": "5adb480e3bab8bc2452cbb1ce7ad12aed4408547", "filename": "gcc/testsuite/gfortran.dg/fmt_g0_6.f08", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967ac8cfb178fef960b253f97e81131434336cbd/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_6.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967ac8cfb178fef960b253f97e81131434336cbd/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_6.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_6.f08?ref=967ac8cfb178fef960b253f97e81131434336cbd", "patch": "@@ -0,0 +1,82 @@\n+! { dg-do run }\n+! PE48602 Invalid F conversion of G descriptor for values close to powers of 10\n+! Test case provided by Thomas Henlich\n+program test_g0fr\n+    use iso_fortran_env\n+    implicit none\n+    integer, parameter :: RT = REAL64\n+    \n+    call check_all(0.0_RT, 15, 2, 0)\n+    call check_all(0.991_RT, 15, 2, 0)\n+    call check_all(0.995_RT, 15, 2, 0)\n+    call check_all(0.996_RT, 15, 2, 0)\n+    call check_all(0.999_RT, 15, 2, 0)\n+contains\n+    subroutine check_all(val, w, d, e)\n+        real(kind=RT), intent(in) :: val\n+        integer, intent(in) :: w\n+        integer, intent(in) :: d\n+        integer, intent(in) :: e\n+\n+        call check_f_fmt(val, 'C', w, d, e)\n+        call check_f_fmt(val, 'U', w, d, e)\n+        call check_f_fmt(val, 'D', w, d, e)\n+    end subroutine check_all\n+    \n+    subroutine check_f_fmt(val, roundmode, w, d, e)\n+        real(kind=RT), intent(in) :: val\n+        character, intent(in) :: roundmode\n+        integer, intent(in) :: w\n+        integer, intent(in) :: d\n+        integer, intent(in) :: e\n+        character(len=80) :: fmt_f, fmt_g\n+        character(len=80) :: s_f, s_g\n+        real(kind=RT) :: mag, lower, upper\n+        real(kind=RT) :: r\n+        integer :: n, dec\n+\n+        mag = abs(val)\n+        if (e == 0) then\n+            n = 4\n+        else\n+            n = e + 2\n+        end if\n+        select case (roundmode)\n+            case('U')\n+                r = 1.0_RT\n+            case('D')\n+                r = 0.0_RT\n+            case('C')\n+                r = 0.5_RT\n+        end select\n+\n+        if (mag == 0) then\n+            write(fmt_f, \"('R', a, ',F', i0, '.', i0, ',', i0, 'X')\") roundmode, w - n, d - 1, n\n+        else\n+            do dec = d, 0, -1\n+                lower = 10.0_RT ** (d - 1 - dec) - r * 10.0_RT ** (- dec - 1)\n+                upper = 10.0_RT ** (d - dec) - r * 10.0_RT ** (- dec)\n+                if (lower <= mag .and. mag < upper) then\n+                    write(fmt_f, \"('R', a, ',F', i0, '.', i0, ',', i0, 'X')\") roundmode, w - n, dec, n\n+                    exit\n+                end if\n+            end do\n+        end if\n+        if (len_trim(fmt_f) == 0) then\n+            ! e editing\n+            return\n+        end if\n+        if (e == 0) then\n+            write(fmt_g, \"('R', a, ',G', i0, '.', i0)\") roundmode, w, d\n+        else\n+            write(fmt_g, \"('R', a, ',G', i0, '.', i0, 'e', i0)\") roundmode, w, d, e\n+        end if\n+        write(s_g, \"('''', \" // trim(fmt_g) // \",'''')\") val\n+        write(s_f, \"('''', \" // trim(fmt_f) // \",'''')\") val\n+        if (s_g /= s_f) call abort\n+        !if (s_g /= s_f) then\n+            !print \"(a,g0,a,g0)\", \"lower=\", lower, \" upper=\", upper\n+           ! print \"(a, ' /= ', a, ' ', a, '/', a, ':', g0)\", trim(s_g), trim(s_f), trim(fmt_g), trim(fmt_f), val\n+        !end if\n+    end subroutine check_f_fmt\n+end program test_g0fr"}]}