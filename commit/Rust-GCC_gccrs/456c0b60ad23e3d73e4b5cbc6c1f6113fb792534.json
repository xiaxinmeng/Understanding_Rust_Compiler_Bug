{"sha": "456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2YzBiNjBhZDIzZTNkNzNlNGI1Y2JjNmMxZjYxMTNmYjc5MjUzNA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2001-03-12T07:40:17Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-03-12T07:40:17Z"}, "message": "Runtime.java (_exit): Declare new package-private native.\n\n2001-03-12  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* java/lang/Runtime.java (_exit): Declare new package-private native.\n\t* java/lang/natRuntime.cc (_exit): Implemented. Same as exit() but\n\twithout a security manager check.\n\t(exit): Call _exit after security check.\n\t* prims.cc (JvRunMain): Call Runtime._exit to shutdown the runtime\n\t\"naturally\".\n\t* java/lang/System.java (setSecurityManager): If a security manager\n\tis already in place, call checkPermission.\n\t* java/lang/ThreadGroup.java (uncaughtException): If printStackTrace()\n\tthrows an exception, try to deal with it gracefully.\n\t* java/lang/ExceptionInInitializerError.java (printStackTrace):\n\tOnly try to print the subordinate stack trace if \"exception\" is set.\n\tPrint our class name first.\n\nFrom-SVN: r40401", "tree": {"sha": "ea1cde64a91671a886ba0332dcbc3874ff477611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea1cde64a91671a886ba0332dcbc3874ff477611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/comments", "author": null, "committer": null, "parents": [{"sha": "9612ab65bd2b44870545b8f8de8221eecea96732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9612ab65bd2b44870545b8f8de8221eecea96732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9612ab65bd2b44870545b8f8de8221eecea96732"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "44a3bd830af43beb0c2226ca306621b0dd3f3a7c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "patch": "@@ -1,3 +1,19 @@\n+2001-03-12  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/lang/Runtime.java (_exit): Declare new package-private native.\n+\t* java/lang/natRuntime.cc (_exit): Implemented. Same as exit() but\n+\twithout a security manager check.\n+\t(exit): Call _exit after security check.\n+\t* prims.cc (JvRunMain): Call Runtime._exit to shutdown the runtime\n+\t\"naturally\".\n+\t* java/lang/System.java (setSecurityManager): If a security manager\n+\tis already in place, call checkPermission. \n+\t* java/lang/ThreadGroup.java (uncaughtException): If printStackTrace()\n+\tthrows an exception, try to deal with it gracefully.\n+\t* java/lang/ExceptionInInitializerError.java (printStackTrace):\n+\tOnly try to print the subordinate stack trace if \"exception\" is set.\n+\tPrint our class name first.\n+\n 2001-03-08  Tom Tromey  <tromey@redhat.com>\n \n \t* java/io/ObjectStreamClass.java (setUID): Don't write interface"}, {"sha": "95b4311c1742239aa8574426c703d78d49af6dc7", "filename": "libjava/java/lang/ExceptionInInitializerError.java", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java?ref=456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "patch": "@@ -1,6 +1,6 @@\n // ExceptionInInitializerError.java\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -38,7 +38,7 @@ public ExceptionInInitializerError (String msg)\n \n   public ExceptionInInitializerError (Throwable e)\n   {\n-    super ();\n+    super (e.toString());\n     exception = e;\n   }\n \n@@ -49,17 +49,35 @@ public Throwable getException ()\n \n   public void printStackTrace ()\n   {\n-    exception.printStackTrace ();\n+    if (exception != null)\n+      {\n+\tSystem.err.print (this.getClass() + \": \");\n+\texception.printStackTrace ();\n+      }\n+    else\n+      super.printStackTrace ();\n   }\n \n   public void printStackTrace (PrintStream ps)\n   {\n-    exception.printStackTrace (ps);\n+    if (exception != null)\n+      {\n+\tps.print (this.getClass() + \": \");\n+\texception.printStackTrace (ps);\n+      }\n+    else\n+      super.printStackTrace (ps);\n   }\n \n   public void printStackTrace (PrintWriter pw)\n   {\n-    exception.printStackTrace (pw);\n+    if (exception != null)\n+      {\n+\tpw.print (this.getClass() + \": \");\n+\texception.printStackTrace (pw);\n+      }\n+    else\n+      super.printStackTrace (pw);\n   }\n \n   // The exception that caused this error."}, {"sha": "28befc26d19404a2bc6597ee9b831a7767d3bdde", "filename": "libjava/java/lang/Runtime.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FRuntime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FRuntime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntime.java?ref=456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "patch": "@@ -1,6 +1,6 @@\n // Runtime.java - Runtime class.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -63,6 +63,10 @@ private final static void checkExit (int status)\n   }\n \n   public native void exit (int status);\n+  \n+  // Shutdown the runtime without a SecurityManager check. libgcj uses this \n+  // exit function internally.\n+  final native void _exit (int status);\n \n   public native long freeMemory ();\n   public native void gc ();"}, {"sha": "0f7bd7ba8b742782dcf40a0305307efd89ade25d", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "patch": "@@ -230,7 +230,7 @@ public static String setProperty (String key, String value)\n   public static void setSecurityManager (SecurityManager s)\n   {\n     if (secman != null)\n-      throw new SecurityException ();\n+      secman.checkPermission(new RuntimePermission(\"setSecurityManager\"));\n     secman = s;\n   }\n "}, {"sha": "bdf37f9ec9cd7961ef269e6e78bba2e05dfec8f0", "filename": "libjava/java/lang/ThreadGroup.java", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FThreadGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FThreadGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadGroup.java?ref=456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "patch": "@@ -511,7 +511,19 @@ else if (! (t instanceof ThreadDeath))\n       {\n         if (thread != null)\n           System.out.print(\"Exception in thread \\\"\" + thread.getName() + \"\\\" \");\n-\tt.printStackTrace();\n+\ttry\n+\t  {\n+\t    t.printStackTrace();\n+\t  }\n+\tcatch (Throwable x)\n+\t  {\n+\t    // This means that something is badly screwed up with the runtime,\n+\t    // or perhaps someone is messing with the SecurityManager. In any\n+\t    // case, try to deal with it gracefully.\n+\t    System.out.println(t);\n+\t    System.err.println(\"*** Got \" + x.toString() + \n+\t\t\t       \" while trying to print stack trace\");\n+\t  }\n \thad_uncaught_exception = true;\n       }\n   }"}, {"sha": "3f1a0b335fc139818330963a414989a5b73e1e34", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "patch": "@@ -1,6 +1,6 @@\n // natRuntime.cc - Implementation of native side of Runtime class.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -78,7 +78,12 @@ void\n java::lang::Runtime::exit (jint status)\n {\n   checkExit (status);\n+  _exit (status);\n+}\n \n+void\n+java::lang::Runtime::_exit (jint status)\n+{\n   // Make status right for Unix.  This is perhaps strange.\n   if (status < 0 || status > 255)\n     status = 255;"}, {"sha": "f68b2f049baebc514288087c21b4030810df65f8", "filename": "libjava/prims.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456c0b60ad23e3d73e4b5cbc6c1f6113fb792534/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=456c0b60ad23e3d73e4b5cbc6c1f6113fb792534", "patch": "@@ -850,7 +850,7 @@ JvRunMain (jclass klass, int argc, const char **argv)\n \n   int status = (int) java::lang::ThreadGroup::had_uncaught_exception;\n     \n-  java::lang::Runtime::getRuntime ()->exit (status);\n+  java::lang::Runtime::getRuntime ()->_exit (status);\n }\n \n void"}]}