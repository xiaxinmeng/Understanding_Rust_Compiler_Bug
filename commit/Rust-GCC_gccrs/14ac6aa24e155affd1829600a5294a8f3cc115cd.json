{"sha": "14ac6aa24e155affd1829600a5294a8f3cc115cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRhYzZhYTI0ZTE1NWFmZmQxODI5NjAwYTUyOTRhOGYzY2MxMTVjZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-05T15:33:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-05T15:33:35Z"}, "message": "re PR tree-optimization/53342 (rnflow.f90 is ~5% slower after revision 187340)\n\n2013-02-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/53342\n\tPR tree-optimization/53185\n\t* tree-vectorizer.h (vect_check_strided_load): Remove.\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Do\n\tnot disallow peeling for vectorized strided loads.\n\t(vect_check_strided_load): Make static and simplify.\n\t(vect_analyze_data_refs): Adjust.\n\t* tree-vect-stmts.c (vectorizable_load): Handle peeled loops\n\tcorrectly when vectorizing strided loads.\n\n\t* gcc.dg/vect/pr53185-2.c: New testcase.\n\nFrom-SVN: r195759", "tree": {"sha": "651820d2417bf642f8855ccf72e2ad4c334762ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/651820d2417bf642f8855ccf72e2ad4c334762ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14ac6aa24e155affd1829600a5294a8f3cc115cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ac6aa24e155affd1829600a5294a8f3cc115cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ac6aa24e155affd1829600a5294a8f3cc115cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ac6aa24e155affd1829600a5294a8f3cc115cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3654d3cf859b8db78662c0c29fb1ec49e214c420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3654d3cf859b8db78662c0c29fb1ec49e214c420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3654d3cf859b8db78662c0c29fb1ec49e214c420"}], "stats": {"total": 115, "additions": 64, "deletions": 51}, "files": [{"sha": "595dad4cf5b7d255ba3cecb042441c6bf5fe504b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14ac6aa24e155affd1829600a5294a8f3cc115cd", "patch": "@@ -1,3 +1,15 @@\n+2013-02-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53342\n+\tPR tree-optimization/53185\n+\t* tree-vectorizer.h (vect_check_strided_load): Remove.\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Do\n+\tnot disallow peeling for vectorized strided loads.\n+\t(vect_check_strided_load): Make static and simplify.\n+\t(vect_analyze_data_refs): Adjust.\n+\t* tree-vect-stmts.c (vectorizable_load): Handle peeled loops\n+\tcorrectly when vectorizing strided loads.\n+\n 2013-02-05  Richard Biener  <rguenther@suse.de>\n \n \t* doc/install.texi: Refer to ISL, not PPL."}, {"sha": "a9d19c9cfab35797a3962015e80dde4f602954b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14ac6aa24e155affd1829600a5294a8f3cc115cd", "patch": "@@ -1,3 +1,9 @@\n+2013-02-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53342\n+\tPR tree-optimization/53185\n+\t* gcc.dg/vect/pr53185-2.c: New testcase.\n+\n 2013-02-05  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/55789"}, {"sha": "2f9ea16ea924ed2639cb118bcf84db3bd1c397d4", "filename": "gcc/testsuite/gcc.dg/vect/pr53185-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53185-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53185-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr53185-2.c?ref=14ac6aa24e155affd1829600a5294a8f3cc115cd", "patch": "@@ -0,0 +1,27 @@\n+void __attribute__((noinline,noclone))\n+fn1 (int * __restrict f, int * __restrict d, unsigned short a, int c)\n+{\n+  unsigned short e;\n+  for (e = 0; e < a; ++e)\n+    f[e] = d[e * c];\n+}\n+\n+extern void abort (void);\n+\n+int main ()\n+{\n+  int a[32], b[3 * 32];\n+  int i, off;\n+  for (i = 0; i < 3 * 32; ++i)\n+    b[i] = i;\n+  for (off = 0; off < 8; ++off)\n+    {\n+      fn1 (&a[off], &b[off], 32 - off, 3);\n+      for (i = 0; i < 32 - off; ++i)\n+\tif (a[off+i] != b[off+i*3])\n+\t  abort ();\n+    }\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "74d8c3a41fa97dc230a3cd5e5bb564afe297a284", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=14ac6aa24e155affd1829600a5294a8f3cc115cd", "patch": "@@ -1615,18 +1615,6 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n           && GROUP_FIRST_ELEMENT (stmt_info) != stmt)\n         continue;\n \n-      /* FORNOW: Any strided load prevents peeling.  The induction\n-         variable analysis will fail when the prologue loop is generated,\n-\t and so we can't generate the new base for the pointer.  */\n-      if (STMT_VINFO_STRIDE_LOAD_P (stmt_info))\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                             \"strided load prevents peeling\");\n-\t  do_peeling = false;\n-\t  break;\n-\t}\n-\n       /* For invariant accesses there is nothing to enhance.  */\n       if (integer_zerop (DR_STEP (dr)))\n \tcontinue;\n@@ -2890,9 +2878,8 @@ vect_check_gather (gimple stmt, loop_vec_info loop_vinfo, tree *basep,\n    This handles ARRAY_REFs (with variant index) and MEM_REFs (with variant\n    base pointer) only.  */\n \n-bool\n-vect_check_strided_load (gimple stmt, loop_vec_info loop_vinfo, tree *basep,\n-\t\t\t tree *stepp)\n+static bool\n+vect_check_strided_load (gimple stmt, loop_vec_info loop_vinfo)\n {\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n@@ -2925,10 +2912,6 @@ vect_check_strided_load (gimple stmt, loop_vec_info loop_vinfo, tree *basep,\n       || !simple_iv (loop, loop_containing_stmt (stmt), off, &iv, true))\n     return false;\n \n-  if (basep)\n-    *basep = iv.base;\n-  if (stepp)\n-    *stepp = iv.step;\n   return true;\n }\n \n@@ -3473,8 +3456,7 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n \t{\n \t  bool strided_load = false;\n \t  if (!nested_in_vect_loop_p (loop, stmt))\n-\t    strided_load\n-\t      = vect_check_strided_load (stmt, loop_vinfo, NULL, NULL);\n+\t    strided_load = vect_check_strided_load (stmt, loop_vinfo);\n \t  if (!strided_load)\n \t    {\n \t      if (dump_enabled_p ())"}, {"sha": "1712d950e609b1356b4b2db0653d668be7de1801", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=14ac6aa24e155affd1829600a5294a8f3cc115cd", "patch": "@@ -4353,7 +4353,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   tree aggr_type;\n   tree gather_base = NULL_TREE, gather_off = NULL_TREE;\n   tree gather_off_vectype = NULL_TREE, gather_decl = NULL_TREE;\n-  tree stride_base, stride_step;\n   int gather_scale = 1;\n   enum vect_def_type gather_dt = vect_unknown_def_type;\n \n@@ -4462,11 +4461,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t}\n     }\n   else if (STMT_VINFO_STRIDE_LOAD_P (stmt_info))\n-    {\n-      if (!vect_check_strided_load (stmt, loop_vinfo,\n-\t\t\t\t    &stride_base, &stride_step))\n-\treturn false;\n-    }\n+    ;\n   else\n     {\n       negative = tree_int_cst_compare (nested_in_vect_loop\n@@ -4674,13 +4669,21 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n       bool insert_after;\n       gimple incr;\n       tree offvar;\n-      tree ref = DR_REF (dr);\n       tree ivstep;\n       tree running_off;\n       vec<constructor_elt, va_gc> *v = NULL;\n       gimple_seq stmts = NULL;\n+      tree stride_base, stride_step, alias_off;\n+\n+      gcc_assert (!nested_in_vect_loop);\n \n-      gcc_assert (stride_base && stride_step);\n+      stride_base\n+\t= fold_build_pointer_plus\n+\t    (unshare_expr (DR_BASE_ADDRESS (dr)),\n+\t     size_binop (PLUS_EXPR,\n+\t\t\t convert_to_ptrofftype (unshare_expr (DR_OFFSET (dr))),\n+\t\t\t convert_to_ptrofftype (DR_INIT(dr))));\n+      stride_step = fold_convert (sizetype, unshare_expr (DR_STEP (dr)));\n \n       /* For a load with loop-invariant (but other than power-of-2)\n          stride (i.e. not a grouped access) like so:\n@@ -4716,6 +4719,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n       prev_stmt_info = NULL;\n       running_off = offvar;\n+      alias_off = build_int_cst (reference_alias_ptr_type (DR_REF (dr)), 0);\n       for (j = 0; j < ncopies; j++)\n \t{\n \t  tree vec_inv;\n@@ -4725,33 +4729,16 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    {\n \t      tree newref, newoff;\n \t      gimple incr;\n-\t      if (TREE_CODE (ref) == ARRAY_REF)\n-\t\t{\n-\t\t  newref = build4 (ARRAY_REF, TREE_TYPE (ref),\n-\t\t\t\t   unshare_expr (TREE_OPERAND (ref, 0)),\n-\t\t\t\t   running_off,\n-\t\t\t\t   NULL_TREE, NULL_TREE);\n-\t\t  if (!useless_type_conversion_p (TREE_TYPE (vectype),\n-\t\t\t\t\t\t  TREE_TYPE (newref)))\n-\t\t    newref = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (vectype),\n-\t\t\t\t     newref);\n-\t\t}\n-\t      else\n-\t\tnewref = build2 (MEM_REF, TREE_TYPE (vectype),\n-\t\t\t\t running_off,\n-\t\t\t\t TREE_OPERAND (ref, 1));\n+\t      newref = build2 (MEM_REF, TREE_TYPE (vectype),\n+\t\t\t       running_off, alias_off);\n \n \t      newref = force_gimple_operand_gsi (gsi, newref, true,\n \t\t\t\t\t\t NULL_TREE, true,\n \t\t\t\t\t\t GSI_SAME_STMT);\n \t      CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, newref);\n \t      newoff = copy_ssa_name (running_off, NULL);\n-\t      if (POINTER_TYPE_P (TREE_TYPE (newoff)))\n-\t\tincr = gimple_build_assign_with_ops (POINTER_PLUS_EXPR, newoff,\n-\t\t\t\t\t\t     running_off, stride_step);\n-\t      else\n-\t\tincr = gimple_build_assign_with_ops (PLUS_EXPR, newoff,\n-\t\t\t\t\t\t     running_off, stride_step);\n+\t      incr = gimple_build_assign_with_ops (POINTER_PLUS_EXPR, newoff,\n+\t\t\t\t\t\t   running_off, stride_step);\n \t      vect_finish_stmt_generation (stmt, incr, gsi);\n \n \t      running_off = newoff;"}, {"sha": "8d3a3def1f4425b12f254d10d66c41aabb9b64a3", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ac6aa24e155affd1829600a5294a8f3cc115cd/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=14ac6aa24e155affd1829600a5294a8f3cc115cd", "patch": "@@ -923,7 +923,6 @@ extern bool vect_analyze_data_ref_accesses (loop_vec_info, bb_vec_info);\n extern bool vect_prune_runtime_alias_test_list (loop_vec_info);\n extern tree vect_check_gather (gimple, loop_vec_info, tree *, tree *,\n \t\t\t       int *);\n-extern bool vect_check_strided_load (gimple, loop_vec_info, tree *, tree *);\n extern bool vect_analyze_data_refs (loop_vec_info, bb_vec_info, int *);\n extern tree vect_create_data_ref_ptr (gimple, tree, struct loop *, tree,\n \t\t\t\t      tree *, gimple_stmt_iterator *,"}]}