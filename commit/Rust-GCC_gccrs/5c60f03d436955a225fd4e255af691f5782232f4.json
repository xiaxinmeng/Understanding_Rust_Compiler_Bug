{"sha": "5c60f03d436955a225fd4e255af691f5782232f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2MGYwM2Q0MzY5NTVhMjI1ZmQ0ZTI1NWFmNjkxZjU3ODIyMzJmNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-03-03T02:27:42Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-03-03T02:27:42Z"}, "message": "a29k.h, [...]: (BITS_PER_UNIT): Delete.\n\n\t* a29k.h, alpha.h, arc.h, arm.h, avr.h, clipper.h, convex.h,\n\tcris.h, d30v.h, elxsi.h, fr30.h, h8300.h, i370.h, i386.h, i860.h,\n\ti960.h, ia64.h, m32r.h, m68hc11.h, m68k.h, m88k.h, mcore.h,\n\tmips.h, mmix.h, mn10200.h, mn10300.h, ns32k.h, pa.h, pdp11.h,\n\tpj.h, romp.h, rs6000.h, s390.h, sh.h, sparc.h, stormy16.h, v850.h,\n\tvax.h, we32k.h, xtensa.h: (BITS_PER_UNIT): Delete.\n\t* defaults.h (BITS_PER_UNIT): Define.\n\t* doc/tm.texi (BITS_PER_UNIT): Document default value.\n\nFrom-SVN: r50235", "tree": {"sha": "b54372a3fde161e398ff8b1ce4281e3d7d9295df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b54372a3fde161e398ff8b1ce4281e3d7d9295df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c60f03d436955a225fd4e255af691f5782232f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c60f03d436955a225fd4e255af691f5782232f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c60f03d436955a225fd4e255af691f5782232f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c60f03d436955a225fd4e255af691f5782232f4/comments", "author": null, "committer": null, "parents": [{"sha": "658499e7b47d6d99673f4f1cf297d43e940ec21e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658499e7b47d6d99673f4f1cf297d43e940ec21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/658499e7b47d6d99673f4f1cf297d43e940ec21e"}], "stats": {"total": 132, "additions": 16, "deletions": 116}, "files": [{"sha": "eb73bd1a536f2fcd6c8a622a606ceaad803102a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -1,3 +1,14 @@\n+2002-03-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* a29k.h, alpha.h, arc.h, arm.h, avr.h, clipper.h, convex.h,\n+\tcris.h, d30v.h, elxsi.h, fr30.h, h8300.h, i370.h, i386.h, i860.h,\n+\ti960.h, ia64.h, m32r.h, m68hc11.h, m68k.h, m88k.h, mcore.h,\n+\tmips.h, mmix.h, mn10200.h, mn10300.h, ns32k.h, pa.h, pdp11.h,\n+\tpj.h, romp.h, rs6000.h, s390.h, sh.h, sparc.h, stormy16.h, v850.h,\n+\tvax.h, we32k.h, xtensa.h: (BITS_PER_UNIT): Delete.\n+\t* defaults.h (BITS_PER_UNIT): Define.\n+\t* doc/tm.texi (BITS_PER_UNIT): Document default value.\n+\n 2002-03-02  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300-protos.h: Add a prototype for"}, {"sha": "f499ea11b1595889f8d6b1b25af7e6b99b0fceb9", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -165,9 +165,6 @@ extern int target_flags;\n    for them.  Might as well be consistent with bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "6d78d3ff82f31de7e7f7d0cc526cafca8852e5eb", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -474,9 +474,6 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n    for them.  Might as well be consistent with bytes.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "0a8385430d8fa52029145fea720aa88fd1bb3792", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -191,9 +191,6 @@ do {\t\t\t\t\\\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-/* Number of bits in an addressable storage unit.  */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "8f4c4a1c8def4af75ae13eb3b10a47db845b8600", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -696,9 +696,6 @@ extern int arm_is_6_or_7;\n    This is always true, even when in little-endian mode.  */\n #define FLOAT_WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT  8\n-\n #define BITS_PER_WORD  32\n \n #define UNITS_PER_WORD\t4"}, {"sha": "ffcfa263095810ae91fe923331fc89a14ef2bc35", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -126,9 +126,6 @@ extern int avr_enhanced_p;\n    numbered.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';  */\n #define BITS_PER_WORD 8"}, {"sha": "61845e4d15bad00f6ffcc8507aeab900ebc18d88", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -69,9 +69,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "d662b2cc53343ce726def94ce5b916b9d0c4bd78", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -434,9 +434,6 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "009b9aa33df3e992c6da96a0b7dcfd4608e91931", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -475,8 +475,6 @@ extern int target_flags;\n    post-increment on DImode indirect.  */\n #define WORDS_BIG_ENDIAN 0\n \n-#define BITS_PER_UNIT 8\n-\n #define BITS_PER_WORD 32\n \n #define UNITS_PER_WORD 4"}, {"sha": "21745076b8189ed4cb4f6baafa030bec82bb07c1", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -161,8 +161,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 1\n \n-#define BITS_PER_UNIT 8\n-\n #define BITS_PER_WORD 32\n \n #define UNITS_PER_WORD 4"}, {"sha": "f06eda58f8dc6c8c53b8f0588d2d6aa5d20dff8f", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -71,9 +71,6 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "32ba387459eaab817feef28bb961056cc64b3eb7", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -83,8 +83,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 1\n \n-#define BITS_PER_UNIT \t8\n-\n #define BITS_PER_WORD \t32\n \n #define UNITS_PER_WORD \t4"}, {"sha": "b19c0b336fc3f04bf666e38799cdee1edcb4d138", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -199,9 +199,6 @@ extern int target_flags;\n    be consistent).  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "d1f72bb8600245ce8315489c98c6eedeb1e230d1", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -86,10 +86,6 @@ extern int mvs_function_name_length;\n \n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressable storage unit.  */\n-\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.  */\n \n #define BITS_PER_WORD 32"}, {"sha": "a53a06f7148af46b53c516e83d71030f2e412fad", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -721,9 +721,6 @@ extern int ix86_arch;\n /* Not true for 80386 */\n #define WORDS_BIG_ENDIAN 0\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 80386, this would still be 32."}, {"sha": "97d77082155cc1a5c260292a6bd393fe4e2a8bed", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -82,9 +82,6 @@ extern int target_flags;\n    justify the trouble of changing this assumption.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "a067deaa8264650ab312f9db3e381e7a0baeef37", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -397,9 +397,6 @@ extern int target_flags;\n    numbered.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressable storage unit.  */\n-#define BITS_PER_UNIT 8\n-\n /* Bitfields cannot cross word boundaries.  */\n #define BITFIELD_NBYTES_LIMITED 1\n "}, {"sha": "3c1d6b784435b49b628b822b48f8a079cf7652dc", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -244,8 +244,6 @@ extern const char *ia64_fixed_range_string;\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-#define BITS_PER_UNIT 8\n-\n #define BITS_PER_WORD 64\n \n #define UNITS_PER_WORD 8"}, {"sha": "44510a06bb7bafa1fea6cc5ed95fa7f1884f9566", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -442,9 +442,6 @@ extern enum m32r_sdata m32r_sdata;\n    value will be set based on preprocessor defines.  */\n /*#define LIBGCC2_WORDS_BIG_ENDIAN 1*/\n \n-/* Number of bits in an addressable storage unit.  */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "0e4b2022fd3d53843e477613f8b9e221ea97cd31", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -241,9 +241,6 @@ extern const struct processor_costs *m68hc11_cost;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN \t1\n \n-/* Number of bits in an addressible storage unit */\n-#define BITS_PER_UNIT\t\t8\n-\n /* Number of bits in a word */\n #define BITS_PER_WORD\t\t16\n "}, {"sha": "72ef2c90bf38d37b51e250a0daec916d8575e053", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -321,9 +321,6 @@ extern int target_flags;\n    So let's be consistent.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "11d8e544d068231d157ca7c50c03696606b0e746", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -336,9 +336,6 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n    instructions for them.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "ab02a2afb6b4afb02e9309d5dd68eeadcd722556", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -247,9 +247,6 @@ extern const char * mcore_stack_increment_string;\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-/* Number of bits in an addressable storage unit.  */\n-#define BITS_PER_UNIT  8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "66c362124afac69e61e1b3e3403489ed0d6db6bd", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -1569,9 +1569,6 @@ do {\t\t\t\t\t\t\t\\\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "3861e6e7b0499a37e5cf5aa5f165889030cf5fb7", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -251,7 +251,6 @@ extern int target_flags;\n #define BYTES_BIG_ENDIAN 1\n #define WORDS_BIG_ENDIAN 1\n #define FLOAT_WORDS_BIG_ENDIAN 1\n-#define BITS_PER_UNIT 8\n #define BITS_PER_WORD 64\n #define UNITS_PER_WORD 8\n #define POINTER_SIZE 64"}, {"sha": "6a81b6fbad1fabcebda6b2bc5085bcf52e926a1c", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -81,9 +81,6 @@ extern int target_flags;\n    This is not true on the Matsushita MN10200.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "184aef135cfc42569f3a51ec22052440770595eb", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -90,9 +90,6 @@ extern int target_flags;\n    This is not true on the Matsushita MN10300.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "8ef5aeb9a8e480769614f62da78ba0de8f96c402", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -196,9 +196,6 @@ while (0)\n    numbered. This is not true on the ns32k.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 32000, this would still be 32."}, {"sha": "696068449d1da70bb5589d5c8e2c685d1d22ed0e", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -389,9 +389,6 @@ extern int target_flags;\n    numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "2b6edd338bf555c6daa5f639f1e8270f92bfbc22", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -165,9 +165,6 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "804f3963e8a81aeec2c0ada002eee45070d5182a", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -133,9 +133,6 @@ extern int target_flags;\n #define LIBGCC2_WORDS_BIG_ENDIAN 1\n #endif\n \n-/* Number of bits in an addressable storage unit.  */\n-#define BITS_PER_UNIT  8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "5ce44f055e481070200cc52b5b518d0f3f1f73f9", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -90,9 +90,6 @@ extern int target_flags;\n    for them.  Might as well be consistent with bits and bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "fccf3d374bb2a8e43c4f9de8d400d291a301cf3d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -522,9 +522,6 @@ extern int rs6000_altivec_abi;\n    instructions for them.  Might as well be consistent with bits and bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "e395f852de4df4d1fe8f1d8a930c48158053e656", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -106,10 +106,6 @@ extern int current_function_outgoing_args_size;\n \n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressable storage unit.  */\n-\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.  */\n \n #define BITS_PER_WORD (TARGET_64BIT ? 64 : 32)"}, {"sha": "e9195970c796df17df89dbea407547fe176c8001", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -430,9 +430,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LIBGCC2_WORDS_BIG_ENDIAN 1\n #endif\n \n-/* Number of bits in an addressable storage unit.  */\n-#define BITS_PER_UNIT  8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "3faf25b8673bb3312f46887ff45fb84c263f3c5b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -710,9 +710,6 @@ extern struct sparc_cpu_select sparc_select[];\n #define LIBGCC2_WORDS_BIG_ENDIAN 1\n #endif\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "c2fd617d63807d886f84d8c1a33e51083ab80ebf", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -89,8 +89,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 0\n \n-#define BITS_PER_UNIT 8\n-\n #define BITS_PER_WORD 16\n \n #define UNITS_PER_WORD 2"}, {"sha": "b20c1f48b4d2a2c2dbb8a0518714e360b4577b1b", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -228,9 +228,6 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n    This is not true on the NEC V850.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "fbd3e38c9c7d2acd8ada2aa25a8bebeb945734e1", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -105,9 +105,6 @@ extern int target_flags;\n /* This is not true on the VAX.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "7d9ac440f0ab603cc213183a5024359009263ab7", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -62,9 +62,6 @@ extern int target_flags;\n    since there are no machine instructions for them.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a we32000, this would still be 32."}, {"sha": "709ed06d110b5029cf5a4810133d5745feee0d2e", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -235,9 +235,6 @@ extern unsigned xtensa_current_frame_size;\n /* Define this if most significant word of a multiword number is the lowest. */\n #define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n \n-/* Number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.  */\n #define BITS_PER_WORD 32\n #define MAX_BITS_PER_WORD 32"}, {"sha": "2d0005d3b677bc49d8dd152a88dce11f14218005", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -281,6 +281,10 @@ do {\t\t\t\t\t\t\t\t\\\n    your target, you should override these values by defining the\n    appropriate symbols in your tm.h file.  */\n \n+#ifndef BITS_PER_UNIT\n+#define BITS_PER_UNIT 8\n+#endif\n+\n #ifndef CHAR_TYPE_SIZE\n #define CHAR_TYPE_SIZE BITS_PER_UNIT\n #endif"}, {"sha": "1a5855740ac0c782036daa1971297b0e927179e5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c60f03d436955a225fd4e255af691f5782232f4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5c60f03d436955a225fd4e255af691f5782232f4", "patch": "@@ -924,7 +924,7 @@ multi-word integers.\n @findex BITS_PER_UNIT\n @item BITS_PER_UNIT\n Define this macro to be the number of bits in an addressable storage\n-unit (byte); normally 8.\n+unit (byte).  If you do not define this macro the default is 8.\n \n @findex BITS_PER_WORD\n @item BITS_PER_WORD"}]}