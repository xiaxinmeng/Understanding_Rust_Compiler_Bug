{"sha": "eb1d8df792f990574cbb695b55c92ee2684fc96b", "node_id": "C_kwDOANBUbNoAKGViMWQ4ZGY3OTJmOTkwNTc0Y2JiNjk1YjU1YzkyZWUyNjg0ZmM5NmI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-03-12T22:52:41Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-03-12T22:52:41Z"}, "message": "PR middle-end/109031: Fix final value replacement from narrower IVs.\n\nThis patch fixes a P1 regression, a problem with my February 2022 patch\nto improve folding for final value replacement:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-February/590618.html\n\nThe motivation for the original patch is that because we know the number\nof loop iterations can't be negative, final value expressions such as\n(int) ((unsigned int) x + 4294967295) + 1 can be simplified to x,\nas this is effectively ((x - 1) + 1) without overflow.\n\nThe bug/oversight is that using integer_all_onesp to check for the\nimplicit tree constant -1 it didn't consider that the inner (unsigned)\ntype might be narrower than hthe outer result type.  For the case in the\nPR, (int)((unsigned char)x + 255) + 1 gets simplified to (int)x, but\nwhen x is originally zero, the correct result should be 256.\n\nThe fix is to check that the inner type's precision (the width of the\nsubtraction) is at least as wide as the result type (that of the addition).\n\nI've also added a test for signed types, but without -fwrapv this\ninvokes undefined behaviour, and with -fwrapv it doesn't exhibit the\nproblem in the PR.\n\n2023-03-12  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR middle-end/109031\n\t* tree-chrec.cc (chrec_apply): When folding \"{a, +, a} (x-1)\",\n\tensure that the type of x is as wide or wider than the type of a.\n\ngcc/testsuite/ChangeLog\n\tPR middle-end/109031\n\t* gcc.dg/tree-ssa/pr109031-1.c: New test case.\n\t* gcc.dg/tree-ssa/pr109031-2.c: Likewise.", "tree": {"sha": "adea3ce84c6797a8bca9956ea007ffd8c9d2be7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adea3ce84c6797a8bca9956ea007ffd8c9d2be7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb1d8df792f990574cbb695b55c92ee2684fc96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1d8df792f990574cbb695b55c92ee2684fc96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1d8df792f990574cbb695b55c92ee2684fc96b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1d8df792f990574cbb695b55c92ee2684fc96b/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23dc726875c26f2c38dfded453aa9beba0b9be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23dc726875c26f2c38dfded453aa9beba0b9be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23dc726875c26f2c38dfded453aa9beba0b9be9"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "84e1a08be295da4afc751ac5f62ad040796586d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr109031-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1d8df792f990574cbb695b55c92ee2684fc96b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr109031-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1d8df792f990574cbb695b55c92ee2684fc96b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr109031-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr109031-1.c?ref=eb1d8df792f990574cbb695b55c92ee2684fc96b", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+unsigned char uc;\n+unsigned short us;\n+\n+void testuc() {\n+  unsigned int g = 0;\n+  unsigned int *p1 = &g;\n+  unsigned char *p2 = &uc;\n+\n+  do {\n+    (*p1)++;\n+    (*p2)--;\n+  } while (uc);\n+\n+  if (g != 256)\n+    __builtin_abort();\n+}\n+\n+void testus() {\n+  unsigned int g = 0;\n+  unsigned int *p1 = &g;\n+  unsigned short *p2 = &us;\n+\n+  do {\n+    (*p1)++;\n+    (*p2)--;\n+  } while (us);\n+\n+  if (g != 65536)\n+    __builtin_abort();\n+}\n+\n+int main() {\n+  testuc();\n+  testus();\n+  return 0;\n+}\n+"}, {"sha": "6f28b3b5ed8abeb26d77c6c709537c3f5c56090b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr109031-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1d8df792f990574cbb695b55c92ee2684fc96b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr109031-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1d8df792f990574cbb695b55c92ee2684fc96b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr109031-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr109031-2.c?ref=eb1d8df792f990574cbb695b55c92ee2684fc96b", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fwrapv\" } */\n+signed char sc;\n+signed short ss;\n+\n+void testsc() {\n+  unsigned int g = 0;\n+  unsigned int *p1 = &g;\n+  signed char *p2 = &sc;\n+\n+  do {\n+    (*p1)++;\n+    (*p2)--;\n+  } while (sc);\n+\n+  if (g != 256)\n+    __builtin_abort();\n+}\n+\n+void testss() {\n+  unsigned int g = 0;\n+  unsigned int *p1 = &g;\n+  signed short *p2 = &ss;\n+\n+  do {\n+    (*p1)++;\n+    (*p2)--;\n+  } while (ss);\n+\n+  if (g != 65536)\n+    __builtin_abort();\n+}\n+\n+int main() {\n+  testsc();\n+  testss();\n+  return 0;\n+}\n+"}, {"sha": "2f67581591a568ef59e9b94ace9966e0434fd3ef", "filename": "gcc/tree-chrec.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb1d8df792f990574cbb695b55c92ee2684fc96b/gcc%2Ftree-chrec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb1d8df792f990574cbb695b55c92ee2684fc96b/gcc%2Ftree-chrec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.cc?ref=eb1d8df792f990574cbb695b55c92ee2684fc96b", "patch": "@@ -623,7 +623,9 @@ chrec_apply (unsigned var,\n \t  else if (operand_equal_p (CHREC_LEFT (chrec), chrecr)\n \t\t   && TREE_CODE (x) == PLUS_EXPR\n \t\t   && integer_all_onesp (TREE_OPERAND (x, 1))\n-\t\t   && !POINTER_TYPE_P (type))\n+\t\t   && !POINTER_TYPE_P (type)\n+\t\t   && TYPE_PRECISION (TREE_TYPE (x))\n+\t\t      >= TYPE_PRECISION (type))\n \t    {\n \t      /* We know the number of iterations can't be negative.\n \t\t So {a, +, a} (x-1) -> \"a*x\".  */"}]}