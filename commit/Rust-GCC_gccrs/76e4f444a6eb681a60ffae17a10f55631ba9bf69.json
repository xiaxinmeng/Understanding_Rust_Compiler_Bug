{"sha": "76e4f444a6eb681a60ffae17a10f55631ba9bf69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlNGY0NDRhNmViNjgxYTYwZmZhZTE3YTEwZjU1NjMxYmE5YmY2OQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-12-01T14:53:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-12-09T14:05:30Z"}, "message": "aarch64: Add CPU-specific SVE vector costs struct\n\nThis patch extends the backend vector costs structures to allow for\nseparate Advanced SIMD and SVE\ncosts. The fields in the current cpu_vector_costs that would vary\nbetween the ISAs are moved into\na simd_vec_cost struct and we have two typedefs of it: advsimd_vec_cost\nand sve_vec_costs.\nIf, in the future, SVE needs some extra fields it could inherit from\nsimd_vec_cost.\nThe CPU vector cost tables in aarch64.c are updated for the struct\nchanges.\naarch64_builtin_vectorization_cost is updated to select either the\nAdvanced SIMD or SVE costs field\ndepending on the mode and field availability.\nNo change in codegen is intended with this patch.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (cpu_vector_cost): Move simd\n\tfields to...\n\t(simd_vec_cost): ... Here.  Define.\n\t(advsimd_vec_cost): Define.\n\t(sve_vec_cost): Define.\n\t* config/aarch64/aarch64.c (generic_advsimd_vector_cost):\n\tDefine.\n\t(generic_sve_vector_cost): Likewise.\n\t(generic_vector_cost): Update.\n\t(qdf24xx_advsimd_vector_cost): Define.\n\t(qdf24xx_vector_cost): Update.\n\t(thunderx_advsimd_vector_cost): Define.\n\t(thunderx_vector_cost): Update.\n\t(tsv110_advsimd_vector_cost): Define.\n\t(tsv110_vector_cost): Likewise.\n\t(cortexa57_advsimd_vector_cost): Define.\n\t(cortexa57_vector_cost): Update.\n\t(exynosm1_advsimd_vector_cost): Define.\n\t(exynosm1_vector_cost): Update.\n\t(xgene1_advsimd_vector_cost): Define.\n\t(xgene1_vector_cost): Update.\n\t(thunderx2t99_advsimd_vector_cost): Define.\n\t(thunderx2t99_vector_cost): Update.\n\t(thunderx3t110_advsimd_vector_cost): Define.\n\t(thunderx3t110_vector_cost): Update.\n\t(aarch64_builtin_vectorization_cost): Handle sve and advsimd\n\tvector cost fields.", "tree": {"sha": "000e8e86bf8369c24009a1d60c8466abc105f578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/000e8e86bf8369c24009a1d60c8466abc105f578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e4f444a6eb681a60ffae17a10f55631ba9bf69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e4f444a6eb681a60ffae17a10f55631ba9bf69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e4f444a6eb681a60ffae17a10f55631ba9bf69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e4f444a6eb681a60ffae17a10f55631ba9bf69/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf97b970fe598740ee0833729bcdce5dc3913f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf97b970fe598740ee0833729bcdce5dc3913f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf97b970fe598740ee0833729bcdce5dc3913f2d"}], "stats": {"total": 320, "additions": 204, "deletions": 116}, "files": [{"sha": "c8479666d9c9507470cbe131a41b49420faf18a0", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e4f444a6eb681a60ffae17a10f55631ba9bf69/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e4f444a6eb681a60ffae17a10f55631ba9bf69/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=76e4f444a6eb681a60ffae17a10f55631ba9bf69", "patch": "@@ -192,6 +192,29 @@ struct cpu_regmove_cost\n   const int FP2FP;\n };\n \n+struct simd_vec_cost\n+{\n+  const int int_stmt_cost;\t\t/* Cost of any int vector operation,\n+\t\t\t\t\t   excluding load, store, permute,\n+\t\t\t\t\t   vector-to-scalar and\n+\t\t\t\t\t   scalar-to-vector operation.  */\n+  const int fp_stmt_cost;\t\t /* Cost of any fp vector operation,\n+\t\t\t\t\t    excluding load, store, permute,\n+\t\t\t\t\t    vector-to-scalar and\n+\t\t\t\t\t    scalar-to-vector operation.  */\n+  const int permute_cost;\t\t /* Cost of permute operation.  */\n+  const int vec_to_scalar_cost;\t\t /* Cost of vec-to-scalar operation.  */\n+  const int scalar_to_vec_cost;\t\t /* Cost of scalar-to-vector\n+\t\t\t\t\t    operation.  */\n+  const int align_load_cost;\t /* Cost of aligned vector load.  */\n+  const int unalign_load_cost;\t /* Cost of unaligned vector load.  */\n+  const int unalign_store_cost;\t /* Cost of unaligned vector store.  */\n+  const int store_cost;\t\t /* Cost of vector store.  */\n+};\n+\n+typedef struct simd_vec_cost advsimd_vec_cost;\n+typedef struct simd_vec_cost sve_vec_cost;\n+\n /* Cost for vector insn classes.  */\n struct cpu_vector_cost\n {\n@@ -201,24 +224,10 @@ struct cpu_vector_cost\n \t\t\t\t\t    excluding load and store.  */\n   const int scalar_load_cost;\t\t /* Cost of scalar load.  */\n   const int scalar_store_cost;\t\t /* Cost of scalar store.  */\n-  const int vec_int_stmt_cost;\t\t /* Cost of any int vector operation,\n-\t\t\t\t\t    excluding load, store, permute,\n-\t\t\t\t\t    vector-to-scalar and\n-\t\t\t\t\t    scalar-to-vector operation.  */\n-  const int vec_fp_stmt_cost;\t\t /* Cost of any fp vector operation,\n-\t\t\t\t\t    excluding load, store, permute,\n-\t\t\t\t\t    vector-to-scalar and\n-\t\t\t\t\t    scalar-to-vector operation.  */\n-  const int vec_permute_cost;\t\t /* Cost of permute operation.  */\n-  const int vec_to_scalar_cost;\t\t /* Cost of vec-to-scalar operation.  */\n-  const int scalar_to_vec_cost;\t\t /* Cost of scalar-to-vector\n-\t\t\t\t\t    operation.  */\n-  const int vec_align_load_cost;\t /* Cost of aligned vector load.  */\n-  const int vec_unalign_load_cost;\t /* Cost of unaligned vector load.  */\n-  const int vec_unalign_store_cost;\t /* Cost of unaligned vector store.  */\n-  const int vec_store_cost;\t\t /* Cost of vector store.  */\n   const int cond_taken_branch_cost;\t /* Cost of taken branch.  */\n   const int cond_not_taken_branch_cost;  /* Cost of not taken branch.  */\n+  const advsimd_vec_cost *advsimd;\t /* Cost of Advanced SIMD operations.  */\n+  const sve_vec_cost *sve;\t\t /* Cost of SVE operations.  */\n };\n \n /* Branch costs.  */"}, {"sha": "b79630194c70bdd2e72b9ad3dab5d85824d2f1be", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 179, "deletions": 100, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e4f444a6eb681a60ffae17a10f55631ba9bf69/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e4f444a6eb681a60ffae17a10f55631ba9bf69/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=76e4f444a6eb681a60ffae17a10f55631ba9bf69", "patch": "@@ -559,24 +559,58 @@ static const struct cpu_regmove_cost tsv110_regmove_cost =\n   2  /* FP2FP  */\n };\n \n+/* Generic costs for Advanced SIMD vector operations.   */\n+static const advsimd_vec_cost generic_advsimd_vector_cost =\n+{\n+  1, /* int_stmt_cost  */\n+  1, /* fp_stmt_cost  */\n+  2, /* permute_cost  */\n+  2, /* vec_to_scalar_cost  */\n+  1, /* scalar_to_vec_cost  */\n+  1, /* align_load_cost  */\n+  1, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n+};\n+\n+/* Generic costs for SVE vector operations.  */\n+static const sve_vec_cost generic_sve_vector_cost =\n+{\n+  1, /* int_stmt_cost  */\n+  1, /* fp_stmt_cost  */\n+  2, /* permute_cost  */\n+  2, /* vec_to_scalar_cost  */\n+  1, /* scalar_to_vec_cost  */\n+  1, /* align_load_cost  */\n+  1, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n+};\n+\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost generic_vector_cost =\n {\n   1, /* scalar_int_stmt_cost  */\n   1, /* scalar_fp_stmt_cost  */\n   1, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  1, /* vec_int_stmt_cost  */\n-  1, /* vec_fp_stmt_cost  */\n-  2, /* vec_permute_cost  */\n-  2, /* vec_to_scalar_cost  */\n-  1, /* scalar_to_vec_cost  */\n-  1, /* vec_align_load_cost  */\n-  1, /* vec_unalign_load_cost  */\n-  1, /* vec_unalign_store_cost  */\n-  1, /* vec_store_cost  */\n   3, /* cond_taken_branch_cost  */\n-  1 /* cond_not_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &generic_advsimd_vector_cost, /* advsimd  */\n+  &generic_sve_vector_cost /* sve */\n+};\n+\n+static const advsimd_vec_cost qdf24xx_advsimd_vector_cost =\n+{\n+  1, /* int_stmt_cost  */\n+  3, /* fp_stmt_cost  */\n+  2, /* permute_cost  */\n+  1, /* vec_to_scalar_cost  */\n+  1, /* scalar_to_vec_cost  */\n+  1, /* align_load_cost  */\n+  1, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n };\n \n /* QDF24XX costs for vector insn classes.  */\n@@ -586,17 +620,24 @@ static const struct cpu_vector_cost qdf24xx_vector_cost =\n   1, /* scalar_fp_stmt_cost  */\n   1, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  1, /* vec_int_stmt_cost  */\n-  3, /* vec_fp_stmt_cost  */\n-  2, /* vec_permute_cost  */\n-  1, /* vec_to_scalar_cost  */\n-  1, /* scalar_to_vec_cost  */\n-  1, /* vec_align_load_cost  */\n-  1, /* vec_unalign_load_cost  */\n-  1, /* vec_unalign_store_cost  */\n-  1, /* vec_store_cost  */\n   3, /* cond_taken_branch_cost  */\n-  1 /* cond_not_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &qdf24xx_advsimd_vector_cost, /* advsimd  */\n+  NULL /* sve  */\n+};\n+\n+\n+static const advsimd_vec_cost thunderx_advsimd_vector_cost =\n+{\n+  4, /* int_stmt_cost  */\n+  1, /* fp_stmt_cost  */\n+  4, /* permute_cost  */\n+  2, /* vec_to_scalar_cost  */\n+  2, /* scalar_to_vec_cost  */\n+  3, /* align_load_cost  */\n+  5, /* unalign_load_cost  */\n+  5, /* unalign_store_cost  */\n+  1  /* store_cost  */\n };\n \n /* ThunderX costs for vector insn classes.  */\n@@ -606,17 +647,23 @@ static const struct cpu_vector_cost thunderx_vector_cost =\n   1, /* scalar_fp_stmt_cost  */\n   3, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  4, /* vec_int_stmt_cost  */\n-  1, /* vec_fp_stmt_cost  */\n-  4, /* vec_permute_cost  */\n-  2, /* vec_to_scalar_cost  */\n-  2, /* scalar_to_vec_cost  */\n-  3, /* vec_align_load_cost  */\n-  5, /* vec_unalign_load_cost  */\n-  5, /* vec_unalign_store_cost  */\n-  1, /* vec_store_cost  */\n   3, /* cond_taken_branch_cost  */\n-  3 /* cond_not_taken_branch_cost  */\n+  3, /* cond_not_taken_branch_cost  */\n+  &thunderx_advsimd_vector_cost, /* advsimd  */\n+  NULL /* sve  */\n+};\n+\n+static const advsimd_vec_cost tsv110_advsimd_vector_cost =\n+{\n+  2, /* int_stmt_cost  */\n+  2, /* fp_stmt_cost  */\n+  2, /* permute_cost  */\n+  3, /* vec_to_scalar_cost  */\n+  2, /* scalar_to_vec_cost  */\n+  5, /* align_load_cost  */\n+  5, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n };\n \n static const struct cpu_vector_cost tsv110_vector_cost =\n@@ -625,37 +672,49 @@ static const struct cpu_vector_cost tsv110_vector_cost =\n   1, /* scalar_fp_stmt_cost  */\n   5, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  2, /* vec_int_stmt_cost  */\n-  2, /* vec_fp_stmt_cost  */\n-  2, /* vec_permute_cost  */\n-  3, /* vec_to_scalar_cost  */\n-  2, /* scalar_to_vec_cost  */\n-  5, /* vec_align_load_cost  */\n-  5, /* vec_unalign_load_cost  */\n-  1, /* vec_unalign_store_cost  */\n-  1, /* vec_store_cost  */\n   1, /* cond_taken_branch_cost  */\n-  1 /* cond_not_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &tsv110_advsimd_vector_cost, /* advsimd  */\n+  NULL, /* sve  */\n };\n \n-/* Generic costs for vector insn classes.  */\n+static const advsimd_vec_cost cortexa57_advsimd_vector_cost =\n+{\n+  2, /* int_stmt_cost  */\n+  2, /* fp_stmt_cost  */\n+  3, /* permute_cost  */\n+  8, /* vec_to_scalar_cost  */\n+  8, /* scalar_to_vec_cost  */\n+  4, /* align_load_cost  */\n+  4, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n+};\n+\n+/* Cortex-A57 costs for vector insn classes.  */\n static const struct cpu_vector_cost cortexa57_vector_cost =\n {\n   1, /* scalar_int_stmt_cost  */\n   1, /* scalar_fp_stmt_cost  */\n   4, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  2, /* vec_int_stmt_cost  */\n-  2, /* vec_fp_stmt_cost  */\n-  3, /* vec_permute_cost  */\n-  8, /* vec_to_scalar_cost  */\n-  8, /* scalar_to_vec_cost  */\n-  4, /* vec_align_load_cost  */\n-  4, /* vec_unalign_load_cost  */\n-  1, /* vec_unalign_store_cost  */\n-  1, /* vec_store_cost  */\n   1, /* cond_taken_branch_cost  */\n-  1 /* cond_not_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &cortexa57_advsimd_vector_cost, /* advsimd  */\n+  NULL /* sve  */\n+};\n+\n+static const advsimd_vec_cost exynosm1_advsimd_vector_cost =\n+{\n+  3, /* int_stmt_cost  */\n+  3, /* fp_stmt_cost  */\n+  3, /* permute_cost  */\n+  3, /* vec_to_scalar_cost  */\n+  3, /* scalar_to_vec_cost  */\n+  5, /* align_load_cost  */\n+  5, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n };\n \n static const struct cpu_vector_cost exynosm1_vector_cost =\n@@ -664,17 +723,23 @@ static const struct cpu_vector_cost exynosm1_vector_cost =\n   1, /* scalar_fp_stmt_cost  */\n   5, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  3, /* vec_int_stmt_cost  */\n-  3, /* vec_fp_stmt_cost  */\n-  3, /* vec_permute_cost  */\n-  3, /* vec_to_scalar_cost  */\n-  3, /* scalar_to_vec_cost  */\n-  5, /* vec_align_load_cost  */\n-  5, /* vec_unalign_load_cost  */\n-  1, /* vec_unalign_store_cost  */\n-  1, /* vec_store_cost  */\n   1, /* cond_taken_branch_cost  */\n-  1 /* cond_not_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &exynosm1_advsimd_vector_cost, /* advsimd  */\n+  NULL /* sve  */\n+};\n+\n+static const advsimd_vec_cost xgene1_advsimd_vector_cost =\n+{\n+  2, /* int_stmt_cost  */\n+  2, /* fp_stmt_cost  */\n+  2, /* permute_cost  */\n+  4, /* vec_to_scalar_cost  */\n+  4, /* scalar_to_vec_cost  */\n+  10, /* align_load_cost  */\n+  10, /* unalign_load_cost  */\n+  2, /* unalign_store_cost  */\n+  2  /* store_cost  */\n };\n \n /* Generic costs for vector insn classes.  */\n@@ -684,17 +749,23 @@ static const struct cpu_vector_cost xgene1_vector_cost =\n   1, /* scalar_fp_stmt_cost  */\n   5, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  2, /* vec_int_stmt_cost  */\n-  2, /* vec_fp_stmt_cost  */\n-  2, /* vec_permute_cost  */\n-  4, /* vec_to_scalar_cost  */\n-  4, /* scalar_to_vec_cost  */\n-  10, /* vec_align_load_cost  */\n-  10, /* vec_unalign_load_cost  */\n-  2, /* vec_unalign_store_cost  */\n-  2, /* vec_store_cost  */\n   2, /* cond_taken_branch_cost  */\n-  1 /* cond_not_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &xgene1_advsimd_vector_cost, /* advsimd  */\n+  NULL /* sve  */\n+};\n+\n+static const advsimd_vec_cost thunderx2t99_advsimd_vector_cost =\n+{\n+  4, /* int_stmt_cost  */\n+  5, /* fp_stmt_cost  */\n+  10, /* permute_cost  */\n+  6, /* vec_to_scalar_cost  */\n+  5, /* scalar_to_vec_cost  */\n+  4, /* align_load_cost  */\n+  4, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n };\n \n /* Costs for vector insn classes for Vulcan.  */\n@@ -704,17 +775,23 @@ static const struct cpu_vector_cost thunderx2t99_vector_cost =\n   6, /* scalar_fp_stmt_cost  */\n   4, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  4, /* vec_int_stmt_cost  */\n-  5, /* vec_fp_stmt_cost  */\n-  10, /* vec_permute_cost  */\n-  6, /* vec_to_scalar_cost  */\n-  5, /* scalar_to_vec_cost  */\n-  4, /* vec_align_load_cost  */\n-  4, /* vec_unalign_load_cost  */\n-  1, /* vec_unalign_store_cost  */\n-  1, /* vec_store_cost  */\n   2, /* cond_taken_branch_cost  */\n-  1  /* cond_not_taken_branch_cost  */\n+  1,  /* cond_not_taken_branch_cost  */\n+  &thunderx2t99_advsimd_vector_cost, /* advsimd  */\n+  NULL /* sve  */\n+};\n+\n+static const advsimd_vec_cost thunderx3t110_advsimd_vector_cost =\n+{\n+  5, /* int_stmt_cost  */\n+  5, /* fp_stmt_cost  */\n+  10, /* permute_cost  */\n+  5, /* vec_to_scalar_cost  */\n+  5, /* scalar_to_vec_cost  */\n+  4, /* align_load_cost  */\n+  4, /* unalign_load_cost  */\n+  4, /* unalign_store_cost  */\n+  4  /* store_cost  */\n };\n \n static const struct cpu_vector_cost thunderx3t110_vector_cost =\n@@ -723,17 +800,10 @@ static const struct cpu_vector_cost thunderx3t110_vector_cost =\n   5, /* scalar_fp_stmt_cost  */\n   4, /* scalar_load_cost  */\n   1, /* scalar_store_cost  */\n-  5, /* vec_int_stmt_cost  */\n-  5, /* vec_fp_stmt_cost  */\n-  10, /* vec_permute_cost  */\n-  5, /* vec_to_scalar_cost  */\n-  5, /* scalar_to_vec_cost  */\n-  4, /* vec_align_load_cost  */\n-  4, /* vec_unalign_load_cost  */\n-  4, /* vec_unalign_store_cost  */\n-  4, /* vec_store_cost  */\n   2, /* cond_taken_branch_cost  */\n-  1  /* cond_not_taken_branch_cost  */\n+  1,  /* cond_not_taken_branch_cost  */\n+  &thunderx3t110_advsimd_vector_cost, /* advsimd  */\n+  NULL /* sve  */\n };\n \n \n@@ -13712,6 +13782,13 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n   if (vectype != NULL)\n     fp = FLOAT_TYPE_P (vectype);\n \n+  const simd_vec_cost *simd_costs;\n+  if (vectype != NULL && aarch64_sve_mode_p (TYPE_MODE (vectype))\n+      && costs->sve != NULL)\n+    simd_costs = costs->sve;\n+  else\n+    simd_costs = costs->advsimd;\n+\n   switch (type_of_cost)\n     {\n       case scalar_stmt:\n@@ -13724,27 +13801,28 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \treturn costs->scalar_store_cost;\n \n       case vector_stmt:\n-\treturn fp ? costs->vec_fp_stmt_cost : costs->vec_int_stmt_cost;\n+\treturn fp ? simd_costs->fp_stmt_cost\n+\t\t  : simd_costs->int_stmt_cost;\n \n       case vector_load:\n-\treturn costs->vec_align_load_cost;\n+\treturn simd_costs->align_load_cost;\n \n       case vector_store:\n-\treturn costs->vec_store_cost;\n+\treturn simd_costs->store_cost;\n \n       case vec_to_scalar:\n-\treturn costs->vec_to_scalar_cost;\n+\treturn simd_costs->vec_to_scalar_cost;\n \n       case scalar_to_vec:\n-\treturn costs->scalar_to_vec_cost;\n+\treturn simd_costs->scalar_to_vec_cost;\n \n       case unaligned_load:\n       case vector_gather_load:\n-\treturn costs->vec_unalign_load_cost;\n+\treturn simd_costs->unalign_load_cost;\n \n       case unaligned_store:\n       case vector_scatter_store:\n-\treturn costs->vec_unalign_store_cost;\n+\treturn simd_costs->unalign_store_cost;\n \n       case cond_branch_taken:\n \treturn costs->cond_taken_branch_cost;\n@@ -13753,10 +13831,11 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \treturn costs->cond_not_taken_branch_cost;\n \n       case vec_perm:\n-\treturn costs->vec_permute_cost;\n+\treturn simd_costs->permute_cost;\n \n       case vec_promote_demote:\n-\treturn fp ? costs->vec_fp_stmt_cost : costs->vec_int_stmt_cost;\n+\treturn fp ? simd_costs->fp_stmt_cost\n+\t\t  : simd_costs->int_stmt_cost;\n \n       case vec_construct:\n \telements = estimated_poly_value (TYPE_VECTOR_SUBPARTS (vectype));"}]}