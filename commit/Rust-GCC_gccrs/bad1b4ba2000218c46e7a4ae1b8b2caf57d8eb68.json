{"sha": "bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkMWI0YmEyMDAwMjE4YzQ2ZTdhNGFlMWI4YjJjYWY1N2Q4ZWI2OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T22:28:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T22:28:08Z"}, "message": "(TYPE_ATTRIBUTES): New macro.\n\n(struct tree_type): attributes, new field.\n(precision): Move this field up for better alignment.\n(attribute_list_{equal,contained}): Prototype for new functions.\n(build_type_attribute_variant): Prototype for new function.\n\nFrom-SVN: r7251", "tree": {"sha": "1f7e244395a00762b56f860811227176d4e5b5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f7e244395a00762b56f860811227176d4e5b5c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68/comments", "author": null, "committer": null, "parents": [{"sha": "447502c7b25338c6a18fb35143484ca8b74a30c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447502c7b25338c6a18fb35143484ca8b74a30c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447502c7b25338c6a18fb35143484ca8b74a30c7"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "d2e62910361e81c761b78d72430b59a80afdd6db", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bad1b4ba2000218c46e7a4ae1b8b2caf57d8eb68", "patch": "@@ -576,6 +576,10 @@ struct tree_block\n #define TYPE_OBSTACK(NODE) ((NODE)->type.obstack)\n #define TYPE_LANG_SPECIFIC(NODE) ((NODE)->type.lang_specific)\n \n+/* A TREE_LIST of IDENTIFIER nodes of the attributes that apply\n+   to this type.  */\n+#define TYPE_ATTRIBUTES(NODE) ((NODE)->type.attributes)\n+\n /* The alignment necessary for objects of this type.\n    The value is an int, measured in bits.  */\n #define TYPE_ALIGN(NODE) ((NODE)->type.align)\n@@ -612,14 +616,16 @@ struct tree_type\n   char common[sizeof (struct tree_common)];\n   union tree_node *values;\n   union tree_node *size;\n+  union tree_node *attributes;\n   unsigned uid;\n \n+  unsigned char precision;\n #ifdef ONLY_INT_FIELDS\n   int mode : 8;\n #else\n   enum machine_mode mode : 8;\n #endif\n-  unsigned char precision;\n+\n   unsigned string_flag : 1;\n   unsigned no_force_blk_flag : 1;\n   unsigned lang_flag_0 : 1;\n@@ -1143,6 +1149,8 @@ extern tree array_type_nelts\t\tPROTO((tree));\n extern tree value_member\t\tPROTO((tree, tree));\n extern tree purpose_member\t\tPROTO((tree, tree));\n extern tree binfo_member\t\tPROTO((tree, tree));\n+extern int attribute_list_equal\t\tPROTO((tree, tree));\n+extern int attribute_list_contained\tPROTO((tree, tree));\n extern int tree_int_cst_equal\t\tPROTO((tree, tree));\n extern int tree_int_cst_lt\t\tPROTO((tree, tree));\n extern int tree_int_cst_sgn\t\tPROTO((tree));\n@@ -1154,6 +1162,14 @@ extern int index_type_equal\t\tPROTO((tree, tree));\n \n extern tree make_tree ();\n \f\n+/* Return a type like TTYPE except that its TYPE_ATTRIBUTES\n+   is ATTRIBUTE.\n+\n+   Such modified types already made are recorded so that duplicates\n+   are not made. */\n+\n+extern tree build_type_attribute_variant PROTO((tree, tree));\n+\n /* Given a type node TYPE, and CONSTP and VOLATILEP, return a type\n    for the same kind of data as TYPE describes.\n    Variants point to the \"main variant\" (which has neither CONST nor VOLATILE)"}]}