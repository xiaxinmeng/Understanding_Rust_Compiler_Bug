{"sha": "e3d025cb0d1ff48a9c6b34fd134350368105e695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkMDI1Y2IwZDFmZjQ4YTljNmIzNGZkMTM0MzUwMzY4MTA1ZTY5NQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-06-12T08:03:23Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-06-12T08:03:23Z"}, "message": "re PR tree-optimization/14796 ([tree-ssa] combine two shifts into one)\n\n2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n\n        PR tree-optimization/14796\n        * fold-const.c (fold_binary): Transform (A >> C) << C into\n        one BIT_AND_EXPR.\n        <shift>: Transform (A OP c1) OP c2 into A OP (c1 + c2).\n\nFrom-SVN: r100853", "tree": {"sha": "341f5a35ba0116afe7ce890b2b5c25eed5beff64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/341f5a35ba0116afe7ce890b2b5c25eed5beff64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3d025cb0d1ff48a9c6b34fd134350368105e695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d025cb0d1ff48a9c6b34fd134350368105e695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d025cb0d1ff48a9c6b34fd134350368105e695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d025cb0d1ff48a9c6b34fd134350368105e695/comments", "author": null, "committer": null, "parents": [{"sha": "4ae234b0a1972354d8f6e526cfca999a82ade2e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae234b0a1972354d8f6e526cfca999a82ade2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae234b0a1972354d8f6e526cfca999a82ade2e6"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "6582d719891a2dbaba35837926e0f619dddb0497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3d025cb0d1ff48a9c6b34fd134350368105e695", "patch": "@@ -1,3 +1,10 @@\n+2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/14796\n+\t* fold-const.c (fold_binary): Transform (A >> C) << C into\n+\tone BIT_AND_EXPR.\n+\t<shift>: Transform (A OP c1) OP c2 into A OP (c1 + c2).\n+\n 2005-06-11  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/predicates.md (reg_or_arith_cint_operand): Delete."}, {"sha": "1994410d4be8b7d3338d194f0ce94bda60c4e12e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e3d025cb0d1ff48a9c6b34fd134350368105e695", "patch": "@@ -8742,6 +8742,59 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t don't try to compute it in the compiler.  */\n       if (TREE_CODE (arg1) == INTEGER_CST && tree_int_cst_sgn (arg1) < 0)\n \treturn NULL_TREE;\n+\n+      /* Turn (a OP c1) OP c2 into a OP (c1+c2).  */\n+      if (TREE_CODE (arg0) == code && host_integerp (arg1, false)\n+\t  && TREE_INT_CST_LOW (arg1) < TYPE_PRECISION (type)\n+\t  && host_integerp (TREE_OPERAND (arg0, 1), false)\n+\t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) < TYPE_PRECISION (type))\n+\t{\n+\t  HOST_WIDE_INT low = (TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n+\t\t\t       + TREE_INT_CST_LOW (arg1));\n+\n+\t  /* Deal with a OP (c1 + c2) being undefined but (a OP c1) OP c2\n+\t     being well defined.  */\n+\t  if (low >= TYPE_PRECISION (type))\n+\t    {\n+\t      if (code == LROTATE_EXPR || code == RROTATE_EXPR)\n+\t        low = low % TYPE_PRECISION (type);\n+\t      else if (TYPE_UNSIGNED (type) || code == LSHIFT_EXPR)\n+\t        return build_int_cst (type, 0);\n+\t      else\n+\t\tlow = TYPE_PRECISION (type) - 1;\n+\t    }\n+\n+\t  return fold_build2 (code, type, TREE_OPERAND (arg0, 0),\n+\t\t\t      build_int_cst (type, low));\n+\t}\n+\n+      /* Transform (x >> c) << c into x & (-1<<c)  */\n+      if (code == LSHIFT_EXPR && TREE_CODE (arg0) == RSHIFT_EXPR\n+\t  && host_integerp (arg1, false)\n+\t  && TREE_INT_CST_LOW (arg1) < TYPE_PRECISION (type)\n+\t  && host_integerp (TREE_OPERAND (arg0, 1), false)\n+\t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) < TYPE_PRECISION (type))\n+\t{\n+\t  HOST_WIDE_INT low0 = TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1));\n+\t  HOST_WIDE_INT low1 = TREE_INT_CST_LOW (arg1);\n+\t  unsigned HOST_WIDE_INT low;\n+\t  HOST_WIDE_INT high;\n+\t  tree lshift;\n+\t  tree arg00;\n+\n+\t  if (low0 == low1)\n+\t    {\n+\t      arg00 = fold_convert (type, TREE_OPERAND (arg0, 0));\n+\n+\t      lshift_double (-1, -1, low0 < low1 ? low0 : low1,\n+\t\t\t     TYPE_PRECISION (type), &low, &high, 1);\n+\t      lshift = build_int_cst_wide (type, low, high);\n+\n+\t      return fold_build2 (BIT_AND_EXPR, type, arg00, lshift);\n+\t    }\n+\t}\n+\n+\n       /* Rewrite an LROTATE_EXPR by a constant into an\n \t RROTATE_EXPR by a new constant.  */\n       if (code == LROTATE_EXPR && TREE_CODE (arg1) == INTEGER_CST)"}, {"sha": "e890f8066cc04b2bc44b44d3d1dc57cc92701030", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3d025cb0d1ff48a9c6b34fd134350368105e695", "patch": "@@ -1,3 +1,8 @@\n+2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* gcc.dg/pr14796-1.c: New.\n+\t* gcc.dg/pr14796-2.c: New.\n+\n 2005-06-11  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/17792"}, {"sha": "c927e2b54036f18dafd5eacb1b08dfa779245237", "filename": "gcc/testsuite/gcc.dg/pr14796-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-1.c?ref=e3d025cb0d1ff48a9c6b34fd134350368105e695", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int f (int a) {\n+\treturn (a << 3) << 6;\n+}\n+\n+int g (int b) {\n+\treturn (b >> 5) << 5;\n+}\n+\n+/* { dg-final { scan-tree-dump \"a << 9\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"b & -32\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "de4ec27da910bffb3aebbcd047e5ef4815f5473f", "filename": "gcc/testsuite/gcc.dg/pr14796-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d025cb0d1ff48a9c6b34fd134350368105e695/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-2.c?ref=e3d025cb0d1ff48a9c6b34fd134350368105e695", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+int f (int a) {\n+\treturn (a << 31) << 6;\n+}\n+\n+unsigned int g (unsigned int a) {\n+\treturn (a >> 7) >> 25;\n+}\n+\n+int h (int b) {\n+\treturn (b >> 30) >> 30;\n+}\n+\n+long long j (long long c) {\n+\treturn (c >> 35) << 35;\n+}\n+/* { dg-final { scan-tree-dump-times \"= 0\" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"b >> 31\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"c & -34359738368\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}