{"sha": "8349613899e2e1cf996052e2dba79e0551bfe880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM0OTYxMzg5OWUyZTFjZjk5NjA1MmUyZGJhNzllMDU1MWJmZTg4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T10:35:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T10:35:14Z"}, "message": "[multiple changes]\n\n2015-05-26  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c [vxworks]: Refine previous checkin.\n\n2015-05-26  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Wrap_MA): New function.\n\t(Expand_N_Op_Expon): Use Wrap_MA.\n\n2015-05-26  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n\tDo not use secondary stack to return limited records with\n\tdefaulted discriminants. This is an efficiency improvement.\n\t* exp_ch6.adb, exp_dist.adb, sem_attr.adb, sem_aux.adb, sem_aux.ads,\n\tsem_ch12.adb, sem_ch3.adb, sem_ch4.adb, sem_ch6.adb, sem_ch7.adb,\n\tsem_util.adb: Change the sense of Is_Indefinite_Subtype to be\n\tIs_Definite_Subtype. This is an improvement to readability (the double\n\tnegative in \"not Is_Indefinite_Subtype\" was slightly confusing). Also\n\tdisallow passing non-[sub]type entities, an unnecessary and slightly\n\tbug-prone flexibility.\n\nFrom-SVN: r223679", "tree": {"sha": "0a6c5a1eb53a8b2f0eb4b41175119300a72c593e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a6c5a1eb53a8b2f0eb4b41175119300a72c593e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8349613899e2e1cf996052e2dba79e0551bfe880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8349613899e2e1cf996052e2dba79e0551bfe880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8349613899e2e1cf996052e2dba79e0551bfe880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8349613899e2e1cf996052e2dba79e0551bfe880/comments", "author": null, "committer": null, "parents": [{"sha": "596b25f9a110b88d8c7e5fb1fa6cae5819b21691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596b25f9a110b88d8c7e5fb1fa6cae5819b21691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596b25f9a110b88d8c7e5fb1fa6cae5819b21691"}], "stats": {"total": 295, "additions": 184, "deletions": 111}, "files": [{"sha": "85c143b72bf765b1402316a8928406c9d5d7a4c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -1,3 +1,25 @@\n+2015-05-26  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c [vxworks]: Refine previous checkin.\n+\n+2015-05-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Wrap_MA): New function.\n+\t(Expand_N_Op_Expon): Use Wrap_MA.\n+\n+2015-05-26  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n+\tDo not use secondary stack to return limited records with\n+\tdefaulted discriminants. This is an efficiency improvement.\n+\t* exp_ch6.adb, exp_dist.adb, sem_attr.adb, sem_aux.adb, sem_aux.ads,\n+\tsem_ch12.adb, sem_ch3.adb, sem_ch4.adb, sem_ch6.adb, sem_ch7.adb,\n+\tsem_util.adb: Change the sense of Is_Indefinite_Subtype to be\n+\tIs_Definite_Subtype. This is an improvement to readability (the double\n+\tnegative in \"not Is_Indefinite_Subtype\" was slightly confusing). Also\n+\tdisallow passing non-[sub]type entities, an unnecessary and slightly\n+\tbug-prone flexibility.\n+\n 2015-05-26  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_aggr.adb (Resolve_Array_Aggregate): Defend against"}, {"sha": "b7778da158b2d6a0026f99e49a600ebf50e6d414", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 83, "deletions": 35, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -7580,6 +7580,33 @@ package body Exp_Ch4 is\n       Etyp   : Entity_Id;\n       Xnode  : Node_Id;\n \n+      function Wrap_MA (Exp : Node_Id) return Node_Id;\n+      --  Given an expression Exp, if the root type is Float or Long_Float,\n+      --  then wrap the expression in a call of Bastyp'Machine, to stop any\n+      --  extra precision. This is done to ensure that X**A = X**B when A is\n+      --  a static constant and B is a variable with the same value. For any\n+      --  other type, the node Exp is returned unchanged.\n+\n+      -------------\n+      -- Wrap_MA --\n+      -------------\n+\n+      function Wrap_MA (Exp : Node_Id) return Node_Id is\n+         Loc : constant Source_Ptr := Sloc (Exp);\n+      begin\n+         if Rtyp = Standard_Float or else Rtyp = Standard_Long_Float then\n+            return\n+              Make_Attribute_Reference (Loc,\n+                Attribute_Name => Name_Machine,\n+                Prefix         => New_Occurrence_Of (Bastyp, Loc),\n+                Expressions    => New_List (Relocate_Node (Exp)));\n+         else\n+            return Exp;\n+         end if;\n+      end Wrap_MA;\n+\n+   --  Start of processing for Expand_N_Op\n+\n    begin\n       Binary_Op_Validity_Checks (N);\n \n@@ -7637,7 +7664,7 @@ package body Exp_Ch4 is\n          --  could fold small negative exponents for the real case, but we\n          --  can't because we are required to raise Constraint_Error for\n          --  the case of 0.0 ** (negative) even if Machine_Overflows = False.\n-         --  See ACVC test C4A012B.\n+         --  See ACVC test C4A012B, and it is not worth generating the test.\n \n          if Expv >= 0 and then Expv <= 4 then\n \n@@ -7666,20 +7693,22 @@ package body Exp_Ch4 is\n \n             elsif Expv = 2 then\n                Xnode :=\n-                 Make_Op_Multiply (Loc,\n-                   Left_Opnd  => Duplicate_Subexpr (Base),\n-                   Right_Opnd => Duplicate_Subexpr_No_Checks (Base));\n+                 Wrap_MA (\n+                   Make_Op_Multiply (Loc,\n+                     Left_Opnd  => Duplicate_Subexpr (Base),\n+                     Right_Opnd => Duplicate_Subexpr_No_Checks (Base)));\n \n             --  X ** 3 = X * X * X\n \n             elsif Expv = 3 then\n                Xnode :=\n-                 Make_Op_Multiply (Loc,\n-                   Left_Opnd =>\n-                     Make_Op_Multiply (Loc,\n-                       Left_Opnd  => Duplicate_Subexpr (Base),\n-                       Right_Opnd => Duplicate_Subexpr_No_Checks (Base)),\n-                   Right_Opnd  => Duplicate_Subexpr_No_Checks (Base));\n+                 Wrap_MA (\n+                   Make_Op_Multiply (Loc,\n+                     Left_Opnd =>\n+                       Make_Op_Multiply (Loc,\n+                         Left_Opnd  => Duplicate_Subexpr (Base),\n+                         Right_Opnd => Duplicate_Subexpr_No_Checks (Base)),\n+                   Right_Opnd  => Duplicate_Subexpr_No_Checks (Base)));\n \n             --  X ** 4  ->\n \n@@ -7700,16 +7729,18 @@ package body Exp_Ch4 is\n                        Constant_Present    => True,\n                        Object_Definition   => New_Occurrence_Of (Typ, Loc),\n                        Expression =>\n-                         Make_Op_Multiply (Loc,\n-                           Left_Opnd  =>\n-                             Duplicate_Subexpr (Base),\n-                           Right_Opnd =>\n-                             Duplicate_Subexpr_No_Checks (Base)))),\n+                         Wrap_MA (\n+                           Make_Op_Multiply (Loc,\n+                             Left_Opnd  =>\n+                               Duplicate_Subexpr (Base),\n+                             Right_Opnd =>\n+                               Duplicate_Subexpr_No_Checks (Base))))),\n \n                    Expression =>\n-                     Make_Op_Multiply (Loc,\n-                       Left_Opnd  => New_Occurrence_Of (Temp, Loc),\n-                       Right_Opnd => New_Occurrence_Of (Temp, Loc)));\n+                     Wrap_MA (\n+                       Make_Op_Multiply (Loc,\n+                         Left_Opnd  => New_Occurrence_Of (Temp, Loc),\n+                         Right_Opnd => New_Occurrence_Of (Temp, Loc))));\n             end if;\n \n             Rewrite (N, Xnode);\n@@ -7900,10 +7931,10 @@ package body Exp_Ch4 is\n \n       if Is_Modular_Integer_Type (Rtyp) then\n \n-         --  Nonbinary case, we call the special exponentiation routine for\n-         --  the nonbinary case, converting the argument to Long_Long_Integer\n-         --  and passing the modulus value. Then the result is converted back\n-         --  to the base type.\n+         --  Nonbinary modular case, we call the special exponentiation\n+         --  routine for the nonbinary case, converting the argument to\n+         --  Long_Long_Integer and passing the modulus value. Then the\n+         --  result is converted back to the base type.\n \n          if Non_Binary_Modulus (Rtyp) then\n             Rewrite (N,\n@@ -7916,9 +7947,9 @@ package body Exp_Ch4 is\n                     Make_Integer_Literal (Loc, Modulus (Rtyp)),\n                     Exp))));\n \n-         --  Binary case, in this case, we call one of two routines, either the\n-         --  unsigned integer case, or the unsigned long long integer case,\n-         --  with a final \"and\" operation to do the required mod.\n+         --  Binary modular case, in this case, we call one of two routines,\n+         --  either the unsigned integer case, or the unsigned long long\n+         --  integer case, with a final \"and\" operation to do the required mod.\n \n          else\n             if UI_To_Int (Esize (Rtyp)) <= Standard_Integer_Size then\n@@ -7986,16 +8017,32 @@ package body Exp_Ch4 is\n             Rent := RE_Exn_Integer;\n          end if;\n \n-      --  Floating-point cases, always done using Long_Long_Float. We do not\n-      --  need separate routines for the overflow case here, since in the case\n-      --  of floating-point, we generate infinities anyway as a rule (either\n-      --  that or we automatically trap overflow), and if there is an infinity\n-      --  generated and a range check is required, the check will fail anyway.\n+      --  Floating-point cases. We do not need separate routines for the\n+      --  overflow case here, since in the case of floating-point, we generate\n+      --  infinities anyway as a rule (either that or we automatically trap\n+      --  overflow), and if there is an infinity generated and a range check\n+      --  is required, the check will fail anyway.\n+\n+      --  Historical note: we used to convert everything to Long_Long_Float\n+      --  and call a single common routine, but this had the undesirable effect\n+      --  of giving different results for small static exponent values and the\n+      --  same dynamic values.\n \n       else\n          pragma Assert (Is_Floating_Point_Type (Rtyp));\n-         Etyp := Standard_Long_Long_Float;\n-         Rent := RE_Exn_Long_Long_Float;\n+\n+         if Rtyp = Standard_Float then\n+            Etyp := Standard_Float;\n+            Rent := RE_Exn_Float;\n+\n+         elsif Rtyp = Standard_Long_Float then\n+            Etyp := Standard_Long_Float;\n+            Rent := RE_Exn_Long_Float;\n+\n+         else\n+            Etyp := Standard_Long_Long_Float;\n+            Rent := RE_Exn_Long_Long_Float;\n+         end if;\n       end if;\n \n       --  Common processing for integer cases and floating-point cases.\n@@ -8006,9 +8053,10 @@ package body Exp_Ch4 is\n         and then Rtyp /= Universal_Real\n       then\n          Rewrite (N,\n-           Make_Function_Call (Loc,\n-             Name                   => New_Occurrence_Of (RTE (Rent), Loc),\n-             Parameter_Associations => New_List (Base, Exp)));\n+           Wrap_MA (\n+             Make_Function_Call (Loc,\n+               Name                   => New_Occurrence_Of (RTE (Rent), Loc),\n+               Parameter_Associations => New_List (Base, Exp))));\n \n       --  Otherwise we have to introduce conversions (conversions are also\n       --  required in the universal cases, since the runtime routine is"}, {"sha": "8172e1a224031a1fbc9d46369930eb16bf2f8577", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -8856,6 +8856,7 @@ package body Exp_Ch6 is\n       Pass_Caller_Acc : Boolean := False;\n       Res_Decl        : Node_Id;\n       Result_Subt     : Entity_Id;\n+      Definite        : Boolean; -- True for definite function result subtype\n \n    begin\n       --  Step past qualification or unchecked conversion (the latter can occur\n@@ -8892,6 +8893,7 @@ package body Exp_Ch6 is\n       end if;\n \n       Result_Subt := Etype (Function_Id);\n+      Definite    := Is_Definite_Subtype (Underlying_Type (Result_Subt));\n \n       --  Create an access type designating the function's result subtype. We\n       --  use the type of the original call because it may be a call to an\n@@ -8912,15 +8914,15 @@ package body Exp_Ch6 is\n \n       --  The access type and its accompanying object must be inserted after\n       --  the object declaration in the constrained case, so that the function\n-      --  call can be passed access to the object. In the unconstrained case,\n+      --  call can be passed access to the object. In the indefinite case,\n       --  or if the object declaration is for a return object, the access type\n       --  and object must be inserted before the object, since the object\n       --  declaration is rewritten to be a renaming of a dereference of the\n       --  access object. Note: we need to freeze Ptr_Typ explicitly, because\n       --  the result object is in a different (transient) scope, so won't\n       --  cause freezing.\n \n-      if Is_Constrained (Underlying_Type (Result_Subt))\n+      if Definite\n         and then not Is_Return_Object (Defining_Identifier (Object_Decl))\n       then\n          Insert_After_And_Analyze (Object_Decl, Ptr_Typ_Decl);\n@@ -8944,7 +8946,7 @@ package body Exp_Ch6 is\n       --  function, then the implicit build-in-place parameters of the\n       --  enclosing function are simply passed along to the called function.\n       --  (Unfortunately, this won't cover the case of extension aggregates\n-      --  where the ancestor part is a build-in-place unconstrained function\n+      --  where the ancestor part is a build-in-place indefinite function\n       --  call that should be passed along the caller's parameters. Currently\n       --  those get mishandled by reassigning the result of the call to the\n       --  aggregate return object, when the call result should really be\n@@ -8980,7 +8982,7 @@ package body Exp_Ch6 is\n                     Loc),\n                Pool_Actual => Pool_Actual);\n \n-         --  Otherwise, if enclosing function has a constrained result subtype,\n+         --  Otherwise, if enclosing function has a definite result subtype,\n          --  then caller allocation will be used.\n \n          else\n@@ -9010,12 +9012,12 @@ package body Exp_Ch6 is\n                   (Build_In_Place_Formal (Enclosing_Func, BIP_Object_Access),\n                    Loc));\n \n-      --  In the constrained case, add an implicit actual to the function call\n+      --  In the definite case, add an implicit actual to the function call\n       --  that provides access to the declared object. An unchecked conversion\n       --  to the (specific) result type of the function is inserted to handle\n       --  the case where the object is declared with a class-wide type.\n \n-      elsif Is_Constrained (Underlying_Type (Result_Subt)) then\n+      elsif Definite then\n          Caller_Object :=\n             Make_Unchecked_Type_Conversion (Loc,\n               Subtype_Mark => New_Occurrence_Of (Result_Subt, Loc),\n@@ -9025,12 +9027,12 @@ package body Exp_Ch6 is\n          --  parameter must be passed indicating that the caller is allocating\n          --  the result object. This is needed because such a function can be\n          --  called as a dispatching operation and must be treated similarly\n-         --  to functions with unconstrained result subtypes.\n+         --  to functions with indefinite result subtypes.\n \n          Add_Unconstrained_Actuals_To_Build_In_Place_Call\n            (Func_Call, Function_Id, Alloc_Form => Caller_Allocation);\n \n-      --  In other unconstrained cases, pass an indication to do the allocation\n+      --  In other indefinite cases, pass an indication to do the allocation\n       --  on the secondary stack and set Caller_Object to Empty so that a null\n       --  value will be passed for the caller's object address. A transient\n       --  scope is established to ensure eventual cleanup of the result.\n@@ -9090,11 +9092,11 @@ package body Exp_Ch6 is\n \n       Insert_After_And_Analyze (Ptr_Typ_Decl, Res_Decl);\n \n-      --  If the result subtype of the called function is constrained and\n-      --  is not itself the return expression of an enclosing BIP function,\n-      --  then mark the object as having no initialization.\n+      --  If the result subtype of the called function is definite and is not\n+      --  itself the return expression of an enclosing BIP function, then mark\n+      --  the object as having no initialization.\n \n-      if Is_Constrained (Underlying_Type (Result_Subt))\n+      if Definite\n         and then not Is_Return_Object (Defining_Identifier (Object_Decl))\n       then\n          --  The related object declaration is encased in a transient block\n@@ -9118,7 +9120,7 @@ package body Exp_Ch6 is\n          Set_Expression (Object_Decl, Empty);\n          Set_No_Initialization (Object_Decl);\n \n-      --  In case of an unconstrained result subtype, or if the call is the\n+      --  In case of an indefinite result subtype, or if the call is the\n       --  return expression of an enclosing BIP function, rewrite the object\n       --  declaration as an object renaming where the renamed object is a\n       --  dereference of <function_Call>'reference:"}, {"sha": "635b2ff976fb10a2eed8e7de9bd3071c0d3beee6", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -5437,7 +5437,7 @@ package body Exp_Dist is\n       return Out_Present (Parameter)\n         and then Has_Discriminants (Etyp)\n         and then not Is_Constrained (Etyp)\n-        and then not Is_Indefinite_Subtype (Etyp);\n+        and then Is_Definite_Subtype (Etyp);\n    end Need_Extra_Constrained;\n \n    ------------------------------------"}, {"sha": "35019cf135e3fc5b4fbc1bcd44edf160351b2dbb", "filename": "gcc/ada/init.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -1702,7 +1702,7 @@ __gnat_install_handler ()\n \n #include <signal.h>\n #include <taskLib.h>\n-#if defined (i386) || defined (__i386__)\n+#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n #include <sysLib.h>\n #endif\n \n@@ -1898,7 +1898,7 @@ __gnat_map_signal (int sig, siginfo_t *si ATTRIBUTE_UNUSED,\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n-#if defined (i386) || defined (__i386__)\n+#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n extern void\n __gnat_vxsim_error_handler (int sig, siginfo_t *si, void *sc);\n \n@@ -1929,7 +1929,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *sc)\n      necessary.  This only incurs a few extra instructions and a tiny\n      amount of extra stack usage.  */\n \n-#if defined (i386) || defined (__i386__)\n+#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n    /* On x86, the vxsim signal context is subtly different and is processeed\n       by a handler compiled especially for vxsim.  */\n \n@@ -2021,7 +2021,7 @@ __gnat_install_handler (void)\n   trap_0_entry->inst_fourth = 0xa1480000;\n #endif\n \n-#if defined (i386) || defined (__i386__)\n+#if (defined (i386) || defined (__i386__)) && !defined (VTHREADS)\n   /*  By experiment, found that sysModel () returns the following string\n       prefix for vxsim when running on Linux and Windows.  */\n   model = sysModel ();"}, {"sha": "20ce9df0f1312cb82b79e0dc9efda380d2e9609c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -2477,7 +2477,7 @@ package body Sem_Attr is\n             null;\n \n          elsif Is_Generic_Type (Entity (P)) then\n-            if not Is_Indefinite_Subtype (Entity (P)) then\n+            if Is_Definite_Subtype (Entity (P)) then\n                Error_Attr_P\n                  (\"prefix of % attribute must be indefinite generic type\");\n             end if;\n@@ -7929,7 +7929,7 @@ package body Sem_Attr is\n \n       when Attribute_Definite =>\n          Rewrite (N, New_Occurrence_Of (\n-           Boolean_Literals (not Is_Indefinite_Subtype (P_Entity)), Loc));\n+           Boolean_Literals (Is_Definite_Subtype (P_Entity)), Loc));\n          Analyze_And_Resolve (N, Standard_Boolean);\n \n       -----------"}, {"sha": "94238de10fd0c0650370ebd9ee7664d4e60a8d74", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -964,6 +964,36 @@ package body Sem_Aux is\n       end if;\n    end Is_By_Reference_Type;\n \n+   ---------------------------\n+   -- Is_Definite_Subtype --\n+   ---------------------------\n+\n+   function Is_Definite_Subtype (T : Entity_Id) return Boolean is\n+      pragma Assert (Is_Type (T));\n+      K : constant Entity_Kind := Ekind (T);\n+\n+   begin\n+      if Is_Constrained (T) then\n+         return True;\n+\n+      elsif K in Array_Kind\n+        or else K in Class_Wide_Kind\n+        or else Has_Unknown_Discriminants (T)\n+      then\n+         return False;\n+\n+      --  Known discriminants: definite if there are default values. Note that\n+      --  if any discriminant has a default, they all do.\n+\n+      elsif Has_Discriminants (T) then\n+         return Present\n+                  (Discriminant_Default_Value (First_Discriminant (T)));\n+\n+      else\n+         return True;\n+      end if;\n+   end Is_Definite_Subtype;\n+\n    ---------------------\n    -- Is_Derived_Type --\n    ---------------------\n@@ -1075,38 +1105,6 @@ package body Sem_Aux is\n       end if;\n    end Is_Immutably_Limited_Type;\n \n-   ---------------------------\n-   -- Is_Indefinite_Subtype --\n-   ---------------------------\n-\n-   function Is_Indefinite_Subtype (Ent : Entity_Id) return Boolean is\n-      K : constant Entity_Kind := Ekind (Ent);\n-\n-   begin\n-      if Is_Constrained (Ent) then\n-         return False;\n-\n-      elsif K in Array_Kind\n-        or else K in Class_Wide_Kind\n-        or else Has_Unknown_Discriminants (Ent)\n-      then\n-         return True;\n-\n-      --  Known discriminants: indefinite if there are no default values\n-\n-      elsif K in Record_Kind\n-        or else Is_Incomplete_Or_Private_Type (Ent)\n-        or else Is_Concurrent_Type (Ent)\n-      then\n-         return (Has_Discriminants (Ent)\n-           and then\n-             No (Discriminant_Default_Value (First_Discriminant (Ent))));\n-\n-      else\n-         return False;\n-      end if;\n-   end Is_Indefinite_Subtype;\n-\n    ---------------------\n    -- Is_Limited_Type --\n    ---------------------"}, {"sha": "0120cc67123e44dceb773def253a814d655f98ac", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -315,11 +315,13 @@ package Sem_Aux is\n    --  used to set the visibility of generic formals of a generic package\n    --  declared with a box or with partial parameterization.\n \n-   function Is_Indefinite_Subtype (Ent : Entity_Id) return Boolean;\n-   --  Ent is any entity. Determines if given entity is an unconstrained array\n-   --  type or subtype, a discriminated record type or subtype with no initial\n-   --  discriminant values or a class wide type or subtype and returns True if\n-   --  so. False for other type entities, or any entities that are not types.\n+   function Is_Definite_Subtype (T : Entity_Id) return Boolean;\n+   --  T is a type entity. Returns True if T is a definite subtype.\n+   --  Indefinite subtypes are unconstrained arrays, unconstrained\n+   --  discriminated types without defaulted discriminants, class-wide types,\n+   --  and types with unknown discriminants. Definite subtypes are all others\n+   --  (elementary, constrained composites (including the case of records\n+   --  without discriminants), and types with defaulted discriminants).\n \n    function Is_Immutably_Limited_Type (Ent : Entity_Id) return Boolean;\n    --  Implements definition in Ada 2012 RM-7.5 (8.1/3). This differs from the"}, {"sha": "d0d25dd323d45d0a348cc9d5695d1e96f7de9946", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -11869,12 +11869,12 @@ package body Sem_Ch12 is\n \n          --  It should not be necessary to check for unknown discriminants on\n          --  Formal, but for some reason Has_Unknown_Discriminants is false for\n-         --  A_Gen_T, so Is_Indefinite_Subtype incorrectly returns False. This\n+         --  A_Gen_T, so Is_Definite_Subtype incorrectly returns True. This\n          --  needs fixing. ???\n \n-         if not Is_Indefinite_Subtype (A_Gen_T)\n+         if Is_Definite_Subtype (A_Gen_T)\n            and then not Unknown_Discriminants_Present (Formal)\n-           and then Is_Indefinite_Subtype (Act_T)\n+           and then not Is_Definite_Subtype (Act_T)\n          then\n             Error_Msg_N (\"actual subtype must be constrained\", Actual);\n             Abandon_Instantiation (Actual);\n@@ -12371,8 +12371,8 @@ package body Sem_Ch12 is\n               (\"actual for & must have preelaborable initialization\", Actual,\n                Gen_T);\n \n-         elsif Is_Indefinite_Subtype (Act_T)\n-            and then not Is_Indefinite_Subtype (A_Gen_T)\n+         elsif not Is_Definite_Subtype (Act_T)\n+            and then Is_Definite_Subtype (A_Gen_T)\n             and then Ada_Version >= Ada_95\n          then\n             Error_Msg_NE"}, {"sha": "1940b3b4670d50e73ec407d9bceafdadd30e4051", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -2023,7 +2023,7 @@ package body Sem_Ch3 is\n       --  The parent type may be a private view with unknown discriminants,\n       --  and thus unconstrained. Regular components must be constrained.\n \n-      if Is_Indefinite_Subtype (T) and then Chars (Id) /= Name_uParent then\n+      if not Is_Definite_Subtype (T) and then Chars (Id) /= Name_uParent then\n          if Is_Class_Wide_Type (T) then\n             Error_Msg_N\n                (\"class-wide subtype with unknown discriminants\" &\n@@ -3936,7 +3936,7 @@ package body Sem_Ch3 is\n \n       --  Case of unconstrained type\n \n-      if Is_Indefinite_Subtype (T) then\n+      if not Is_Definite_Subtype (T) then\n \n          --  In SPARK, a declaration of unconstrained type is allowed\n          --  only for constants of type string.\n@@ -4263,7 +4263,8 @@ package body Sem_Ch3 is\n            and then Is_Record_Type (T)\n            and then not Is_Constrained (T)\n            and then Has_Discriminants (T)\n-           and then (Ada_Version < Ada_2005 or else Is_Indefinite_Subtype (T))\n+           and then (Ada_Version < Ada_2005\n+                       or else not Is_Definite_Subtype (T))\n          then\n             Set_Actual_Subtype (Id, Build_Default_Subtype (T, N));\n          end if;\n@@ -5730,7 +5731,7 @@ package body Sem_Ch3 is\n       --  that all the indexes are unconstrained but we still need to make sure\n       --  that the element type is constrained.\n \n-      if Is_Indefinite_Subtype (Element_Type) then\n+      if not Is_Definite_Subtype (Element_Type) then\n          Error_Msg_N\n            (\"unconstrained element type in array declaration\",\n             Subtype_Indication (Component_Def));\n@@ -19568,8 +19569,8 @@ package body Sem_Ch3 is\n          --  not completed with an unconstrained type. A separate error message\n          --  is produced if the full type has defaulted discriminants.\n \n-         if not Is_Indefinite_Subtype (Priv_T)\n-           and then Is_Indefinite_Subtype (Full_T)\n+         if Is_Definite_Subtype (Priv_T)\n+           and then not Is_Definite_Subtype (Full_T)\n          then\n             Error_Msg_Sloc := Sloc (Parent (Priv_T));\n             Error_Msg_NE"}, {"sha": "3063b6427fa35789cb4b28a758d6bc2720af40b5", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -688,7 +688,7 @@ package body Sem_Ch4 is\n             --  had errors on analyzing the allocator, since in that case these\n             --  are probably cascaded errors.\n \n-            if Is_Indefinite_Subtype (Type_Id)\n+            if not Is_Definite_Subtype (Type_Id)\n               and then Serious_Errors_Detected = Sav_Errs\n             then\n                --  The build-in-place machinery may produce an allocator when\n@@ -698,7 +698,7 @@ package body Sem_Ch4 is\n                --  because the allocator is marked as coming from source.\n \n                if Present (Underlying_Type (Type_Id))\n-                 and then not Is_Indefinite_Subtype (Underlying_Type (Type_Id))\n+                 and then Is_Definite_Subtype (Underlying_Type (Type_Id))\n                  and then not Comes_From_Source (Parent (N))\n                then\n                   null;"}, {"sha": "5c886db751a441c9128742ff355b67d3e125fd5d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -6825,7 +6825,7 @@ package body Sem_Ch6 is\n \n             if Has_Discriminants (Formal_Type)\n               and then not Is_Constrained (Formal_Type)\n-              and then not Is_Indefinite_Subtype (Formal_Type)\n+              and then Is_Definite_Subtype (Formal_Type)\n               and then (Ada_Version < Ada_2012\n                          or else No (Underlying_Type (Formal_Type))\n                          or else not"}, {"sha": "35ff6794f696834ba77e0b554d8a9192f45103da", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -2905,8 +2905,8 @@ package body Sem_Ch7 is\n             --  The following test may be redundant, as this is already\n             --  diagnosed in sem_ch3. ???\n \n-            if Is_Indefinite_Subtype (Full)\n-              and then not Is_Indefinite_Subtype (Id)\n+            if not Is_Definite_Subtype (Full)\n+              and then Is_Definite_Subtype (Id)\n             then\n                Error_Msg_Sloc := Sloc (Parent (Id));\n                Error_Msg_NE"}, {"sha": "563d02eadef1a1c0abb94e8db92cd29045ede5f2", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8349613899e2e1cf996052e2dba79e0551bfe880/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8349613899e2e1cf996052e2dba79e0551bfe880", "patch": "@@ -11204,7 +11204,7 @@ package body Sem_Util is\n             --  Ada 2005 (AI-363): In Ada 2005 an aliased object can be mutable\n \n             if not Is_Constrained (Prefix_Type)\n-              and then (not Is_Indefinite_Subtype (Prefix_Type)\n+              and then (Is_Definite_Subtype (Prefix_Type)\n                          or else\n                            (Is_Generic_Type (Prefix_Type)\n                              and then Ekind (Current_Scope) = E_Generic_Package\n@@ -16871,7 +16871,7 @@ package body Sem_Util is\n       --  for declaring an object. It might be possible to relax this in the\n       --  future, e.g. by declaring the maximum possible space for the type.\n \n-      elsif Is_Indefinite_Subtype (Typ) then\n+      elsif not Is_Definite_Subtype (Typ) then\n          return True;\n \n       --  Functions returning tagged types may dispatch on result so their"}]}