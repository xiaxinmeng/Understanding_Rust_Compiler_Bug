{"sha": "7ab6a8280170732268c190fffb7f522c73f7b800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiNmE4MjgwMTcwNzMyMjY4YzE5MGZmZmI3ZjUyMmM3M2Y3YjgwMA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-08-20T12:49:47Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-08-20T12:49:47Z"}, "message": "re PR tree-optimization/54295 (Widening multiply-accumulate operation uses wrong value extension)\n\n\tPR tree-ssa/54295\n\t* tree-ssa-math-opts.c (widening_mult_conversion_strippable_p):\n\tNew function.\n\t(is_widening_mult_rhs_p): Use it.\n\n\t* gcc.c-torture/execute/20120817-1.c: New test.\n\nFrom-SVN: r190533", "tree": {"sha": "974542ce1cddb8b6e57104203aaa61a2f96f6fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/974542ce1cddb8b6e57104203aaa61a2f96f6fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ab6a8280170732268c190fffb7f522c73f7b800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab6a8280170732268c190fffb7f522c73f7b800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab6a8280170732268c190fffb7f522c73f7b800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab6a8280170732268c190fffb7f522c73f7b800/comments", "author": null, "committer": null, "parents": [{"sha": "19f757838959f060042c2db6c6dee79a930dfa5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f757838959f060042c2db6c6dee79a930dfa5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f757838959f060042c2db6c6dee79a930dfa5c"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "13e2b4c719e9c75c2f5ad0aec005d76143bd9044", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ab6a8280170732268c190fffb7f522c73f7b800", "patch": "@@ -1,3 +1,10 @@\n+2012-08-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR tree-ssa/54295\n+\t* tree-ssa-math-opts.c (widening_mult_conversion_strippable_p):\n+\tNew function.\n+\t(is_widening_mult_rhs_p): Use it.\n+\n 2012-08-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* configure.ac (ffs): Check for declaration."}, {"sha": "f33149ae1b692253ace5979bd5852f22ee4fc674", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ab6a8280170732268c190fffb7f522c73f7b800", "patch": "@@ -1,3 +1,8 @@\n+2012-08-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR tree-ssa/54295\n+\t* gcc.c-torture/execute/20120817-1.c: New test.\n+\n 2012-08-20  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.target/arm/thumb-16bit-ops.c (f): This test uses a 16-bit"}, {"sha": "8fb2820e89664330954c9178aeac559cabe1ba2d", "filename": "gcc/testsuite/gcc.c-torture/execute/20120817-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120817-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120817-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120817-1.c?ref=7ab6a8280170732268c190fffb7f522c73f7b800", "patch": "@@ -0,0 +1,14 @@\n+typedef unsigned long long u64;\n+unsigned long foo = 0;\n+u64 f() __attribute__((noinline));\n+\n+u64 f() {\n+  return ((u64)40) + ((u64) 24) * (int)(foo - 1);\n+}\n+\n+int main ()\n+{\n+  if (f () != 16)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "748bf2f1e4968078cd9897102aeccdc0b81bb69e", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab6a8280170732268c190fffb7f522c73f7b800/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=7ab6a8280170732268c190fffb7f522c73f7b800", "patch": "@@ -1958,6 +1958,43 @@ struct gimple_opt_pass pass_optimize_bswap =\n  }\n };\n \n+/* Return true if stmt is a type conversion operation that can be stripped\n+   when used in a widening multiply operation.  */\n+static bool\n+widening_mult_conversion_strippable_p (tree result_type, gimple stmt)\n+{\n+  enum tree_code rhs_code = gimple_assign_rhs_code (stmt);\n+\n+  if (TREE_CODE (result_type) == INTEGER_TYPE)\n+    {\n+      tree op_type;\n+      tree inner_op_type;\n+\n+      if (!CONVERT_EXPR_CODE_P (rhs_code))\n+\treturn false;\n+\n+      op_type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\n+      /* If the type of OP has the same precision as the result, then\n+\t we can strip this conversion.  The multiply operation will be\n+\t selected to create the correct extension as a by-product.  */\n+      if (TYPE_PRECISION (result_type) == TYPE_PRECISION (op_type))\n+\treturn true;\n+\n+      /* We can also strip a conversion if it preserves the signed-ness of\n+\t the operation and doesn't narrow the range.  */\n+      inner_op_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n+\n+      if (TYPE_UNSIGNED (op_type) == TYPE_UNSIGNED (inner_op_type)\n+\t  && TYPE_PRECISION (op_type) > TYPE_PRECISION (inner_op_type))\n+\treturn true;\n+\n+      return false;\n+    }\n+\n+  return rhs_code == FIXED_CONVERT_EXPR;\n+}\n+\n /* Return true if RHS is a suitable operand for a widening multiplication,\n    assuming a target type of TYPE.\n    There are two cases:\n@@ -1982,9 +2019,7 @@ is_widening_mult_rhs_p (tree type, tree rhs, tree *type_out,\n       if (is_gimple_assign (stmt))\n \t{\n \t  rhs_code = gimple_assign_rhs_code (stmt);\n-\t  if (TREE_CODE (type) == INTEGER_TYPE\n-\t      ? !CONVERT_EXPR_CODE_P (rhs_code)\n-\t      : rhs_code != FIXED_CONVERT_EXPR)\n+\t  if (! widening_mult_conversion_strippable_p (type, stmt))\n \t    rhs1 = rhs;\n \t  else\n \t    {"}]}