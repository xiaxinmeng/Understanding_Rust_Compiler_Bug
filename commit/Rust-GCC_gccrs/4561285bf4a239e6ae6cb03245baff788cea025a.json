{"sha": "4561285bf4a239e6ae6cb03245baff788cea025a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2MTI4NWJmNGEyMzllNmFlNmNiMDMyNDViYWZmNzg4Y2VhMDI1YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-04-11T17:08:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-04-11T17:08:47Z"}, "message": "DR 1030 PR c++/51253\n\n\tDR 1030\n\tPR c++/51253\n\t* cp-tree.h (CALL_EXPR_LIST_INIT_P): New.\n\t* call.c (struct z_candidate): Add flags field.\n\t(add_candidate): Add flags parm.\n\t(add_function_candidate, add_conv_candidate, build_builtin_candidate)\n\t(add_template_candidate_real): Pass it.\n\t(build_over_call): Set CALL_EXPR_LIST_INIT_P.\n\t* tree.c (build_aggr_init_expr): Copy it.\n\t* semantics.c (simplify_aggr_init_expr): Preevaluate args if it's set.\n\nFrom-SVN: r209309", "tree": {"sha": "5115b071ab4504478c1daaf4aec1feef5577ff08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5115b071ab4504478c1daaf4aec1feef5577ff08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4561285bf4a239e6ae6cb03245baff788cea025a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4561285bf4a239e6ae6cb03245baff788cea025a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4561285bf4a239e6ae6cb03245baff788cea025a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4561285bf4a239e6ae6cb03245baff788cea025a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6602e7fcd7995c29f946b42e07033f86c9ec2fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6602e7fcd7995c29f946b42e07033f86c9ec2fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6602e7fcd7995c29f946b42e07033f86c9ec2fd4"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "77473fef3b00c70f73815e1a6f05673c60e84d8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4561285bf4a239e6ae6cb03245baff788cea025a", "patch": "@@ -1,3 +1,16 @@\n+2014-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\tDR 1030\n+\tPR c++/51253\n+\t* cp-tree.h (CALL_EXPR_LIST_INIT_P): New.\n+\t* call.c (struct z_candidate): Add flags field.\n+\t(add_candidate): Add flags parm.\n+\t(add_function_candidate, add_conv_candidate, build_builtin_candidate)\n+\t(add_template_candidate_real): Pass it.\n+\t(build_over_call): Set CALL_EXPR_LIST_INIT_P.\n+\t* tree.c (build_aggr_init_expr): Copy it.\n+\t* semantics.c (simplify_aggr_init_expr): Preevaluate args if it's set.\n+\n 2014-04-10  Richard Biener  <rguenther@suse.de>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "7c0dcc2d57a9cf302304382edd086b6f7ab88d4f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4561285bf4a239e6ae6cb03245baff788cea025a", "patch": "@@ -206,7 +206,7 @@ static conversion *maybe_handle_ref_bind (conversion **);\n static void maybe_handle_implicit_object (conversion **);\n static struct z_candidate *add_candidate\n \t(struct z_candidate **, tree, tree, const vec<tree, va_gc> *, size_t,\n-\t conversion **, tree, tree, int, struct rejection_reason *);\n+\t conversion **, tree, tree, int, struct rejection_reason *, int);\n static tree source_type (conversion *);\n static void add_warning (struct z_candidate *, struct z_candidate *);\n static bool reference_compatible_p (tree, tree);\n@@ -520,7 +520,6 @@ struct z_candidate {\n      sequence from the type returned by FN to the desired destination\n      type.  */\n   conversion *second_conv;\n-  int viable;\n   struct rejection_reason *reason;\n   /* If FN is a member function, the binfo indicating the path used to\n      qualify the name of FN at the call site.  This path is used to\n@@ -538,6 +537,10 @@ struct z_candidate {\n   tree explicit_targs;\n   candidate_warning *warnings;\n   z_candidate *next;\n+  int viable;\n+\n+  /* The flags active in add_candidate.  */\n+  int flags;\n };\n \n /* Returns true iff T is a null pointer constant in the sense of\n@@ -1810,7 +1813,8 @@ add_candidate (struct z_candidate **candidates,\n \t       tree fn, tree first_arg, const vec<tree, va_gc> *args,\n \t       size_t num_convs, conversion **convs,\n \t       tree access_path, tree conversion_path,\n-\t       int viable, struct rejection_reason *reason)\n+\t       int viable, struct rejection_reason *reason,\n+\t       int flags)\n {\n   struct z_candidate *cand = (struct z_candidate *)\n     conversion_obstack_alloc (sizeof (struct z_candidate));\n@@ -1825,6 +1829,7 @@ add_candidate (struct z_candidate **candidates,\n   cand->viable = viable;\n   cand->reason = reason;\n   cand->next = *candidates;\n+  cand->flags = flags;\n   *candidates = cand;\n \n   return cand;\n@@ -2061,7 +2066,7 @@ add_function_candidate (struct z_candidate **candidates,\n \n  out:\n   return add_candidate (candidates, fn, orig_first_arg, args, len, convs,\n-\t\t\taccess_path, conversion_path, viable, reason);\n+\t\t\taccess_path, conversion_path, viable, reason, flags);\n }\n \n /* Create an overload candidate for the conversion function FN which will\n@@ -2163,7 +2168,7 @@ add_conv_candidate (struct z_candidate **candidates, tree fn, tree obj,\n     }\n \n   return add_candidate (candidates, totype, first_arg, arglist, len, convs,\n-\t\t\taccess_path, conversion_path, viable, reason);\n+\t\t\taccess_path, conversion_path, viable, reason, flags);\n }\n \n static void\n@@ -2238,7 +2243,7 @@ build_builtin_candidate (struct z_candidate **candidates, tree fnname,\n \t\t num_convs, convs,\n \t\t /*access_path=*/NULL_TREE,\n \t\t /*conversion_path=*/NULL_TREE,\n-\t\t viable, reason);\n+\t\t viable, reason, flags);\n }\n \n static bool\n@@ -3056,7 +3061,7 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n   return cand;\n  fail:\n   return add_candidate (candidates, tmpl, first_arg, arglist, nargs, NULL,\n-\t\t\taccess_path, conversion_path, 0, reason);\n+\t\t\taccess_path, conversion_path, 0, reason, flags);\n }\n \n \n@@ -7219,7 +7224,11 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \treturn error_mark_node;\n     }\n \n-  return build_cxx_call (fn, nargs, argarray, complain|decltype_flag);\n+  tree call = build_cxx_call (fn, nargs, argarray, complain|decltype_flag);\n+  if (TREE_CODE (call) == CALL_EXPR\n+      && (cand->flags & LOOKUP_LIST_INIT_CTOR))\n+    CALL_EXPR_LIST_INIT_P (call) = true;\n+  return call;\n }\n \n /* Build and return a call to FN, using NARGS arguments in ARGARRAY."}, {"sha": "bafc32d57cd9e81aa2f706ed597dddf5f05fe12f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4561285bf4a239e6ae6cb03245baff788cea025a", "patch": "@@ -101,12 +101,14 @@ c-common.h, not after.\n       FNDECL_USED_AUTO (in FUNCTION_DECL)\n       DECLTYPE_FOR_LAMBDA_PROXY (in DECLTYPE_TYPE)\n       REF_PARENTHESIZED_P (in COMPONENT_REF, SCOPE_REF)\n+      AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n       IDENTIFIER_CTOR_OR_DTOR_P (in IDENTIFIER_NODE)\n       BIND_EXPR_BODY_BLOCK (in BIND_EXPR)\n       DECL_NON_TRIVIALLY_INITIALIZED_P (in VAR_DECL)\n+      CALL_EXPR_LIST_INIT_P (in CALL_EXPR, AGGR_INIT_EXPR)\n    4: TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n \t  or FIELD_DECL).\n       IDENTIFIER_TYPENAME_P (in IDENTIFIER_NODE)\n@@ -3026,6 +3028,10 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    should be performed at instantiation time.  */\n #define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0 (CALL_EXPR_CHECK (NODE))\n \n+/* True if CALL_EXPR expresses list-initialization of an object.  */\n+#define CALL_EXPR_LIST_INIT_P(NODE) \\\n+  TREE_LANG_FLAG_3 (TREE_CHECK2 ((NODE),CALL_EXPR,AGGR_INIT_EXPR))\n+\n /* Indicates whether a string literal has been parenthesized. Such\n    usages are disallowed in certain circumstances.  */\n "}, {"sha": "795086a5854331d82de802c06478c1ae084f6733", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4561285bf4a239e6ae6cb03245baff788cea025a", "patch": "@@ -3867,6 +3867,7 @@ simplify_aggr_init_expr (tree *tp)\n \t\t\t\t    aggr_init_expr_nargs (aggr_init_expr),\n \t\t\t\t    AGGR_INIT_EXPR_ARGP (aggr_init_expr));\n   TREE_NOTHROW (call_expr) = TREE_NOTHROW (aggr_init_expr);\n+  tree ret = call_expr;\n \n   if (style == ctor)\n     {\n@@ -3882,31 +3883,44 @@ simplify_aggr_init_expr (tree *tp)\n \t expand_call{,_inline}.  */\n       cxx_mark_addressable (slot);\n       CALL_EXPR_RETURN_SLOT_OPT (call_expr) = true;\n-      call_expr = build2 (INIT_EXPR, TREE_TYPE (call_expr), slot, call_expr);\n+      ret = build2 (INIT_EXPR, TREE_TYPE (ret), slot, ret);\n     }\n   else if (style == pcc)\n     {\n       /* If we're using the non-reentrant PCC calling convention, then we\n \t need to copy the returned value out of the static buffer into the\n \t SLOT.  */\n       push_deferring_access_checks (dk_no_check);\n-      call_expr = build_aggr_init (slot, call_expr,\n-\t\t\t\t   DIRECT_BIND | LOOKUP_ONLYCONVERTING,\n-                                   tf_warning_or_error);\n+      ret = build_aggr_init (slot, ret,\n+\t\t\t     DIRECT_BIND | LOOKUP_ONLYCONVERTING,\n+\t\t\t     tf_warning_or_error);\n       pop_deferring_access_checks ();\n-      call_expr = build2 (COMPOUND_EXPR, TREE_TYPE (slot), call_expr, slot);\n+      ret = build2 (COMPOUND_EXPR, TREE_TYPE (slot), ret, slot);\n+    }\n+\n+  /* DR 1030 says that we need to evaluate the elements of an\n+     initializer-list in forward order even when it's used as arguments to\n+     a constructor.  So if the target wants to evaluate them in reverse\n+     order and there's more than one argument other than 'this', force\n+     pre-evaluation.  */\n+  if (PUSH_ARGS_REVERSED && CALL_EXPR_LIST_INIT_P (aggr_init_expr)\n+      && aggr_init_expr_nargs (aggr_init_expr) > 2)\n+    {\n+      tree preinit;\n+      stabilize_call (call_expr, &preinit);\n+      if (preinit)\n+\tret = build2 (COMPOUND_EXPR, TREE_TYPE (ret), preinit, ret);\n     }\n \n   if (AGGR_INIT_ZERO_FIRST (aggr_init_expr))\n     {\n       tree init = build_zero_init (type, NULL_TREE,\n \t\t\t\t   /*static_storage_p=*/false);\n       init = build2 (INIT_EXPR, void_type_node, slot, init);\n-      call_expr = build2 (COMPOUND_EXPR, TREE_TYPE (call_expr),\n-\t\t\t  init, call_expr);\n+      ret = build2 (COMPOUND_EXPR, TREE_TYPE (ret), init, ret);\n     }\n \n-  *tp = call_expr;\n+  *tp = ret;\n }\n \n /* Emit all thunks to FN that should be emitted when FN is emitted.  */"}, {"sha": "4b39b9039c69803ce9741daaeace15f02a0c02b5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4561285bf4a239e6ae6cb03245baff788cea025a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4561285bf4a239e6ae6cb03245baff788cea025a", "patch": "@@ -453,6 +453,7 @@ build_aggr_init_expr (tree type, tree init)\n       TREE_SIDE_EFFECTS (rval) = 1;\n       AGGR_INIT_VIA_CTOR_P (rval) = is_ctor;\n       TREE_NOTHROW (rval) = TREE_NOTHROW (init);\n+      CALL_EXPR_LIST_INIT_P (rval) = CALL_EXPR_LIST_INIT_P (init);\n     }\n   else\n     rval = init;"}]}