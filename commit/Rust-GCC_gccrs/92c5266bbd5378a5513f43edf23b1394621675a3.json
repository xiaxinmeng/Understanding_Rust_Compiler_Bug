{"sha": "92c5266bbd5378a5513f43edf23b1394621675a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJjNTI2NmJiZDUzNzhhNTUxM2Y0M2VkZjIzYjEzOTQ2MjE2NzVhMw==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-10-13T08:51:21Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-10-13T08:51:21Z"}, "message": "re PR fortran/72832 ([OOP] ALLOCATE with SOURCE fails to allocate requested dimensions)\n\ngcc/fortran/ChangeLog:\n\n2016-09-01  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/72832\n\t* trans-expr.c (gfc_copy_class_to_class): Add generation of\n\truntime array bounds check.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Add a crutch to\n\tget the descriptor of a function returning a class object.\n\t* trans-stmt.c (gfc_trans_allocate): Use the array spec on the\n\tarray to allocate instead of the array spec from source=.\n\ngcc/testsuite/ChangeLog:\n\n2016-09-01  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/72832\n\t* gfortran.dg/allocate_with_source_22.f03: New test.\n\t* gfortran.dg/allocate_with_source_23.f03: New test.  Expected to\n\tfail.\n\nFrom-SVN: r241088", "tree": {"sha": "be349c6c53e4349df797771ee987f711b4e773ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be349c6c53e4349df797771ee987f711b4e773ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92c5266bbd5378a5513f43edf23b1394621675a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c5266bbd5378a5513f43edf23b1394621675a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c5266bbd5378a5513f43edf23b1394621675a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c5266bbd5378a5513f43edf23b1394621675a3/comments", "author": null, "committer": null, "parents": [{"sha": "1202f33e5e1e4236fec7a3c1d14c16b5f13c2aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1202f33e5e1e4236fec7a3c1d14c16b5f13c2aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1202f33e5e1e4236fec7a3c1d14c16b5f13c2aaa"}], "stats": {"total": 176, "additions": 173, "deletions": 3}, "files": [{"sha": "899e15ecf1f907afd992989cd809033066e821b2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=92c5266bbd5378a5513f43edf23b1394621675a3", "patch": "@@ -1,3 +1,13 @@\n+2016-10-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/72832\n+\t* trans-expr.c (gfc_copy_class_to_class): Add generation of\n+\truntime array bounds check.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Add a crutch to\n+\tget the descriptor of a function returning a class object.\n+\t* trans-stmt.c (gfc_trans_allocate): Use the array spec on the\n+\tarray to allocate instead of the array spec from source=.\n+\n 2016-10-12  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* trans-expr.c (gfc_find_and_cut_at_last_class_ref): Fixed style."}, {"sha": "6b974db5e7f0f2d4a24fdac100049499b76eabbe", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=92c5266bbd5378a5513f43edf23b1394621675a3", "patch": "@@ -1235,6 +1235,7 @@ gfc_copy_class_to_class (tree from, tree to, tree nelems, bool unlimited)\n       stmtblock_t body;\n       stmtblock_t ifbody;\n       gfc_loopinfo loop;\n+      tree orig_nelems = nelems; /* Needed for bounds check.  */\n \n       gfc_init_block (&body);\n       tmp = fold_build2_loc (input_location, MINUS_EXPR,\n@@ -1262,6 +1263,31 @@ gfc_copy_class_to_class (tree from, tree to, tree nelems, bool unlimited)\n \t}\n       vec_safe_push (args, to_ref);\n \n+      /* Add bounds check.  */\n+      if ((gfc_option.rtcheck & GFC_RTCHECK_BOUNDS) > 0 && is_from_desc)\n+\t{\n+\t  char *msg;\n+\t  const char *name = \"<<unknown>>\";\n+\t  tree from_len;\n+\n+\t  if (DECL_P (to))\n+\t    name = (const char *)(DECL_NAME (to)->identifier.id.str);\n+\n+\t  from_len = gfc_conv_descriptor_size (from_data, 1);\n+\t  tmp = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t\t  boolean_type_node, from_len, orig_nelems);\n+\t  msg = xasprintf (\"Array bound mismatch for dimension %d \"\n+\t\t\t   \"of array '%s' (%%ld/%%ld)\",\n+\t\t\t   1, name);\n+\n+\t  gfc_trans_runtime_check (true, false, tmp, &body,\n+\t\t\t\t   &gfc_current_locus, msg,\n+\t\t\t     fold_convert (long_integer_type_node, orig_nelems),\n+\t\t\t       fold_convert (long_integer_type_node, from_len));\n+\n+\t  free (msg);\n+\t}\n+\n       tmp = build_call_vec (fcn_type, fcn, args);\n \n       /* Build the body of the loop.  */"}, {"sha": "9d5e33c2114ed9c2988b78d002b951306f9f05ba", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=92c5266bbd5378a5513f43edf23b1394621675a3", "patch": "@@ -6544,9 +6544,20 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n   if (actual->expr->ts.type == BT_CLASS)\n     gfc_add_class_array_ref (actual->expr);\n \n-  argse.want_pointer = 1;\n   argse.data_not_needed = 1;\n-  gfc_conv_expr_descriptor (&argse, actual->expr);\n+  if (gfc_is_alloc_class_array_function (actual->expr))\n+    {\n+      /* For functions that return a class array conv_expr_descriptor is not\n+\t able to get the descriptor right.  Therefore this special case.  */\n+      gfc_conv_expr_reference (&argse, actual->expr);\n+      argse.expr = gfc_build_addr_expr (NULL_TREE,\n+\t\t\t\t\tgfc_class_data_get (argse.expr));\n+    }\n+  else\n+    {\n+      argse.want_pointer = 1;\n+      gfc_conv_expr_descriptor (&argse, actual->expr);\n+    }\n   gfc_add_block_to_block (&se->pre, &argse.pre);\n   gfc_add_block_to_block (&se->post, &argse.post);\n   arg1 = gfc_evaluate_now (argse.expr, &se->pre);"}, {"sha": "ef5153eb8382056079a0a8a5fd243e0dfcb85265", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=92c5266bbd5378a5513f43edf23b1394621675a3", "patch": "@@ -5489,7 +5489,8 @@ gfc_trans_allocate (gfc_code * code)\n \t\t  desc = tmp;\n \t\t  tmp = gfc_class_data_get (tmp);\n \t\t}\n-\t      e3_is = E3_DESC;\n+\t      if (code->ext.alloc.arr_spec_from_expr3)\n+\t\te3_is = E3_DESC;\n \t    }\n \t  else\n \t    desc = !is_coarray ? se.expr"}, {"sha": "e5c3e636c2ae8fb8814e5e05be1fb622fb713f54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92c5266bbd5378a5513f43edf23b1394621675a3", "patch": "@@ -1,3 +1,10 @@\n+2016-10-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/72832\n+\t* gfortran.dg/allocate_with_source_22.f03: New test.\n+\t* gfortran.dg/allocate_with_source_23.f03: New test.  Expected to\n+\tfail.\n+\n 2016-10-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/movhi_movw.c: Enable test for ARM mode."}, {"sha": "b8689f95a54e5161028a12b220ed049e7b84930f", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_22.f03", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_22.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_22.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_22.f03?ref=92c5266bbd5378a5513f43edf23b1394621675a3", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do run }\n+!\n+! Test that pr72832 is fixed now.\n+! Contributed by Daan van Vugt\n+\n+program allocate_source\n+  type :: t\n+    integer :: i\n+  end type t\n+  type, extends(t) :: tt\n+  end type tt\n+\n+  call test_type()\n+  call test_class()\n+\n+contains\n+\n+subroutine test_class()\n+  class(t), allocatable, dimension(:) :: a, b\n+  allocate(tt::a(1:2))\n+  a(:)%i = [ 1,2 ]\n+  if (size(a) /= 2) call abort()\n+  if (any(a(:)%i /= [ 1,2])) call abort()\n+\n+  allocate(b(1:4), source=a)\n+  ! b is incorrectly initialized here.  This only is diagnosed when compiled\n+  ! with -fcheck=bounds.\n+  if (size(b) /= 4) call abort()\n+  if (any(b(1:2)%i /= [ 1,2])) call abort()\n+  select type (b(1))\n+    class is (tt)\n+      continue\n+    class default\n+      call abort()\n+  end select\n+end subroutine\n+\n+subroutine test_type()\n+  type(t), allocatable, dimension(:) :: a, b\n+  allocate(a(1:2))\n+  if (size(a) /= 2) call abort()\n+\n+  allocate(b(1:4), source=a)\n+  if (size(b) /= 4) call abort()\n+end subroutine\n+end program allocate_source\n+\n+"}, {"sha": "cfe8bd80e2fb12264b2b3c8f9e618e6d34fd7fbc", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_23.f03", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_23.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c5266bbd5378a5513f43edf23b1394621675a3/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_23.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_23.f03?ref=92c5266bbd5378a5513f43edf23b1394621675a3", "patch": "@@ -0,0 +1,67 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=bounds\" }\n+! { dg-shouldfail \"Array bounds mismatch\" }\n+!\n+! Test that pr72832 is fixed now.\n+! Contributed by Daan van Vugt\n+\n+program allocate_source\n+  type :: t\n+    integer :: i\n+  end type t\n+  type, extends(t) :: tt\n+  end type tt\n+\n+  call test_type()\n+  call test_class_correct()\n+  call test_class_fail()\n+\n+contains\n+\n+subroutine test_class_correct()\n+  class(t), allocatable, dimension(:) :: a, b\n+  allocate(tt::a(1:2))\n+  a(:)%i = [ 1,2 ]\n+  if (size(a) /= 2) call abort()\n+  if (any(a(:)%i /= [ 1,2])) call abort()\n+\n+  allocate(b(1:4), source=a(1))\n+  if (size(b) /= 4) call abort()\n+  if (any(b(:)%i /= [ 1,1,1,1])) call abort()\n+  select type (b(1))\n+    class is (tt)\n+      continue\n+    class default\n+      call abort()\n+  end select\n+end subroutine\n+\n+subroutine test_class_fail()\n+  class(t), allocatable, dimension(:) :: a, b\n+  allocate(tt::a(1:2))\n+  a(:)%i = [ 1,2 ]\n+  if (size(a) /= 2) call abort()\n+  if (any(a(:)%i /= [ 1,2])) call abort()\n+\n+  allocate(b(1:4), source=a) ! Fail expected: sizes do not conform\n+  if (size(b) /= 4) call abort()\n+  if (any(b(1:2)%i /= [ 1,2])) call abort()\n+  select type (b(1))\n+    class is (tt)\n+      continue\n+    class default\n+      call abort()\n+  end select\n+end subroutine\n+\n+subroutine test_type()\n+  type(t), allocatable, dimension(:) :: a, b\n+  allocate(a(1:2))\n+  if (size(a) /= 2) call abort()\n+\n+  allocate(b(1:4), source=a)\n+  if (size(b) /= 4) call abort()\n+end subroutine\n+end program allocate_source\n+\n+"}]}