{"sha": "58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkMTBmODljNDRlOGU3OGFiNWUwOWZhOTJiMzVkN2NhNjg5Yzk2NA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-02-06T20:55:37Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-02-06T20:55:37Z"}, "message": "linux64.h: Delete file.\n\n\t* config/s390/linux64.h: Delete file.\n\t* config/s390/s390x.h: New file.\n\t* config.gcc (s390x-*-linux*): Use s390x.h instead of linux64.h\n\tas target header file.\n\t* config/s390/linux.h (TARGET_VERSION): Define depending on\n\tDEFAULT_TARGET_64BIT.\n\t(CPP_SPEC, ASM_SPEC, LINK_SPEC): Likewise.\n\t(SIZE_TYPE, PTRDIFF_TYPE): Likewise.\n\t(NO_BUILTIN_SIZE_TYPE, NO_BUILTIN_PTRDIFF_TYPE): Define.\n\t(CPP_ARCH31_SPEC, CPP_ARCH64_SPEC): New defines.\n\t(LINK_ARCH31_SPEC, LINK_ARCH64_SPEC): New defines.\n\t(EXTRA_SPEC): New define.\n\t* config/s390/s390.h (TARGET_VERSION): Define depending on\n\tDEFAULT_TARGET_64BIT.\n\t(MASK_RETURN_ADDR): Add run-time check for TARGET_64BIT.\n\nFrom-SVN: r49552", "tree": {"sha": "8affd8f7e1fc56fd084491fad807b2f886a5e3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8affd8f7e1fc56fd084491fad807b2f886a5e3b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/comments", "author": null, "committer": null, "parents": [{"sha": "5ce89b2ef0de68535d829e3aee23921542d1a0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce89b2ef0de68535d829e3aee23921542d1a0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce89b2ef0de68535d829e3aee23921542d1a0ae"}], "stats": {"total": 248, "additions": 148, "deletions": 100}, "files": [{"sha": "8ccd65726471349686b93f7adeb9521bad7e5a1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "patch": "@@ -1,3 +1,21 @@\n+2002-02-06  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/linux64.h: Delete file.\n+\t* config/s390/s390x.h: New file.\n+\t* config.gcc (s390x-*-linux*): Use s390x.h instead of linux64.h\n+\tas target header file.\n+\t* config/s390/linux.h (TARGET_VERSION): Define depending on\n+\tDEFAULT_TARGET_64BIT.\n+\t(CPP_SPEC, ASM_SPEC, LINK_SPEC): Likewise.\n+\t(SIZE_TYPE, PTRDIFF_TYPE): Likewise.\n+\t(NO_BUILTIN_SIZE_TYPE, NO_BUILTIN_PTRDIFF_TYPE): Define.\n+\t(CPP_ARCH31_SPEC, CPP_ARCH64_SPEC): New defines.\n+\t(LINK_ARCH31_SPEC, LINK_ARCH64_SPEC): New defines.\n+\t(EXTRA_SPEC): New define.\n+\t* config/s390/s390.h (TARGET_VERSION): Define depending on\n+\tDEFAULT_TARGET_64BIT.\n+\t(MASK_RETURN_ADDR): Add run-time check for TARGET_64BIT.\n+\n 2002-02-06  Jason Merrill  <jason@redhat.com>\n \n \t* c-decl.c (finish_function): Warn about a non-void function with"}, {"sha": "96d1137eed3a955a56688566f765502f749bcf31", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "patch": "@@ -2870,7 +2870,7 @@ s390-*-linux*)\n \tfi\n \t;;\n s390x-*-linux*)\n-\ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h s390/linux64.h\"\n+\ttm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n \ttm_p_file=s390/s390-protos.h\n \tmd_file=s390/s390.md\n \tout_file=s390/s390.c"}, {"sha": "cfd4ebf940cdb2a2be2e632040a5f8b9534b1b76", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 93, "deletions": 30, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Linux for S/390.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n                   Ulrich Weigand (uweigand@de.ibm.com).\n \n@@ -23,51 +23,114 @@ Boston, MA 02111-1307, USA.  */\n #ifndef _LINUX_H\n #define _LINUX_H\n \n-#undef SIZE_TYPE                       /* use default                      */\n+/* Target specific version string.  */\n \n-#undef TARGET_VERSION\n+#ifdef DEFAULT_TARGET_64BIT\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (Linux for zSeries)\");\n+#else\n+#undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (Linux for S/390)\");\n+#endif\n \n-/* Names to predefine in the preprocessor for this target machine.  */\n \n-#define CPP_PREDEFINES \"-Dlinux -Asystem(linux) -Acpu(s390) -Amachine(s390) -D__s390__ -Asystem(unix) -Dunix -D__ELF__\"\n+/* Target specific type definitions.  */\n \n-/* \n- * Caller save not (always) working in gcc-2.95.2\n- */\n+/* ??? Do we really want long as size_t on 31-bit?  */\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE (TARGET_64BIT ? \"long unsigned int\" : \"long unsigned int\")\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n+\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+\n+/* Target specific preprocessor settings.  */\n+\n+#define NO_BUILTIN_SIZE_TYPE\n+#define NO_BUILTIN_PTRDIFF_TYPE\n+\n+#define CPP_PREDEFINES \\\n+  \"-Dunix -Asystem(unix) -Dlinux -Asystem(linux) -D__ELF__ \\\n+   -Acpu(s390) -Amachine(s390) -D__s390__\"\n+\n+#define CPP_ARCH31_SPEC \\\n+  \"-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n+#define CPP_ARCH64_SPEC \\\n+  \"-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n+   -D__s390x__ -D__LONG_MAX__=9223372036854775807L\"\n+\n+#ifdef DEFAULT_TARGET_64BIT\n+#undef  CPP_SPEC\n+#define CPP_SPEC \"%{m31:%(cpp_arch31)} %{!m31:%(cpp_arch64)}\"\n+#else\n+#undef  CPP_SPEC\n+#define CPP_SPEC \"%{m64:%(cpp_arch64)} %{!m64:%(cpp_arch31)}\"\n+#endif\n+\n+\n+/* Target specific compiler settings.  */\n \n-#undef CC1_SPEC\n+/* ??? -fcaller-saves sometimes doesn't work.  Fix this! */\n+#undef  CC1_SPEC\n #define CC1_SPEC \"-fno-caller-saves\"\n+#undef  CC1PLUS_SPEC\n #define CC1PLUS_SPEC \"-fno-caller-saves\"\n \n-#undef\tLINK_SPEC\n-#ifdef CROSS_COMPILE\n-#define LINK_SPEC \"-m elf_s390 %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!ibcs: \\\n+\n+/* Target specific assembler settings.  */\n+\n+#ifdef DEFAULT_TARGET_64BIT\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"%{m31:-m31 -Aesa}\"\n+#else\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"%{m64:-m64 -Aesame}\"\n+#endif\n+\n+\n+/* Target specific linker settings.  */\n+\n+#define LINK_ARCH31_SPEC \\\n+  \"-m elf_s390 \\\n+   %{shared:-shared} \\\n+   %{!shared: \\\n+      %{static:-static} \\\n       %{!static: \\\n \t%{rdynamic:-export-dynamic} \\\n-\t%{!dynamic-linker:-dynamic-linker /lib/ld.so.1 \\\n-        -rpath-link=/usr/local/s390-ibm-linux/lib}} \\\n-\t%{static:-static}}}\"\n-#else\n-#define LINK_SPEC \"-m elf_s390 %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!ibcs: \\\n+\t%{!dynamic-linker:-dynamic-linker /lib/ld.so.1}}}\"\n+\n+#define LINK_ARCH64_SPEC \\\n+  \"-m elf64_s390 \\\n+   %{shared:-shared} \\\n+   %{!shared: \\\n+      %{static:-static} \\\n       %{!static: \\\n \t%{rdynamic:-export-dynamic} \\\n-\t%{!dynamic-linker:-dynamic-linker /lib/ld.so.1}} \\\n-\t%{static:-static}}}\"\n+\t%{!dynamic-linker:-dynamic-linker /lib/ld64.so.1}}}\"\n+\n+#ifdef DEFAULT_TARGET_64BIT\n+#undef  LINK_SPEC\n+#define LINK_SPEC \"%{m31:%(link_arch31)} %{!m31:%(link_arch64)}\"\n+#else\n+#undef  LINK_SPEC\n+#define LINK_SPEC \"%{m64:%(link_arch64)} %{!m64:%(link_arch31)}\"\n #endif\n \n-/* Need to define this. Otherwise define to BITS_PER_WORD in cexp.c.\n-   But BITS_PER_WORD depends on target flags, which are not defined in \n-   cexpc.c.  */\n \n-#undef  WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-#undef  WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE 32\n+/* This macro defines names of additional specifications to put in the specs\n+   that can be used in various specifications like CC1_SPEC.  Its definition\n+   is an initializer with a subgrouping for each command option.  */\n+\n+#define EXTRA_SPECS \\\n+  { \"cpp_arch31\",\tCPP_ARCH31_SPEC },\t\\\n+  { \"cpp_arch64\",\tCPP_ARCH64_SPEC },\t\\\n+  { \"link_arch31\",\tLINK_ARCH31_SPEC },\t\\\n+  { \"link_arch64\",\tLINK_ARCH64_SPEC },\t\\\n+\n \n /* Character to start a comment.  */\n "}, {"sha": "a65cf90f7d38d5ba0f73d1a782eac2aa045f44e7", "filename": "gcc/config/s390/linux64.h", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fconfig%2Fs390%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ce89b2ef0de68535d829e3aee23921542d1a0ae/gcc%2Fconfig%2Fs390%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux64.h?ref=5ce89b2ef0de68535d829e3aee23921542d1a0ae", "patch": "@@ -1,65 +0,0 @@\n-/* Definitions for Linux for s/390 zSeries\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n-   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n-                  Ulrich Weigand (uweigand@de.ibm.com).\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#ifndef _LINUX64_H\n-#define _LINUX64_H\n-\n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long int\"\n-\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT             0x13\n-\n-#undef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (Linux for S/390 zSeries 64 bit)\");\n-\n-/* Names to predefine in the preprocessor for this target machine.  */\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-  \"-Dlinux -Asystem(linux) -Acpu(s390) -Amachine(s390) -D__s390__ -D__s390x__ \\\n-   -Asystem(unix) -Dunix -D__ELF__ \\\n-   -D__LONG_MAX__=9223372036854775807L\"\n-\n-#undef\tLINK_SPEC\n-#ifdef CROSS_COMPILE\n-#define LINK_SPEC \"-m elf64_s390 %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!ibcs: \\\n-      %{!static: \\\n-\t%{rdynamic:-export-dynamic} \\\n-\t%{!dynamic-linker:-dynamic-linker /lib/ld64.so.1 \\\n-        -rpath-link=/usr/local/s390x-ibm-linux/lib}} \\\n-\t%{static:-static}}}\"\n-#else\n-#define LINK_SPEC \"-m elf64_s390 %{shared:-shared} \\\n-  %{!shared: \\\n-    %{!ibcs: \\\n-      %{!static: \\\n-\t%{rdynamic:-export-dynamic} \\\n-\t%{!dynamic-linker:-dynamic-linker /lib/ld64.so.1}} \\\n-\t%{static:-static}}}\"\n-#endif\n-\n-#undef MASK_RETURN_ADDR \n-#undef SELECT_SECTION\n-\n-#endif"}, {"sha": "9bba974fd3defb66a060e7910629876aae0b3af2", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "patch": "@@ -22,8 +22,6 @@ Boston, MA 02111-1307, USA.  */\n #ifndef _S390_H\n #define _S390_H\n \n-#define TARGET_VERSION fprintf (stderr, \" (S/390)\");\n-\n extern int flag_pic; \n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n@@ -33,14 +31,21 @@ extern int target_flags;\n /* Target macros checked at runtime of compiler.  */\n \n #define TARGET_HARD_FLOAT          (target_flags & 1)\n+#define TARGET_SOFT_FLOAT          (!(target_flags & 1))\n #define TARGET_BACKCHAIN           (target_flags & 2)\n #define TARGET_SMALL_EXEC          (target_flags & 4)\n #define TARGET_DEBUG_ARG           (target_flags & 8)\n #define TARGET_64BIT               (target_flags & 16)\n #define TARGET_MVCLE               (target_flags & 32)\n \n+#ifdef DEFAULT_TARGET_64BIT\n+#define TARGET_DEFAULT             0x13\n+#define TARGET_VERSION fprintf (stderr, \" (zSeries)\");\n+#else\n #define TARGET_DEFAULT             0x3\n-#define TARGET_SOFT_FLOAT          (!(target_flags & 1))\n+#define TARGET_VERSION fprintf (stderr, \" (S/390)\");\n+#endif\n+\n \n /* Macro to define tables used to set the flags.  This is a list in braces\n    of pairs in braces, each pair being { \"NAME\", VALUE }\n@@ -640,7 +645,7 @@ extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smalled class cont\n \n /* We have 31 bit mode.  */\n \n-#define MASK_RETURN_ADDR (GEN_INT (0x7fffffff))\n+#define MASK_RETURN_ADDR (TARGET_64BIT ? GEN_INT (-1) : GEN_INT (0x7fffffff))\n \n /* The offset from the incoming value of %sp to the top of the stack frame\n    for the current function.  */"}, {"sha": "c79acf5dc4fe5446fab4188d596d231f9aa3b575", "filename": "gcc/config/s390/s390x.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig%2Fs390%2Fs390x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58d10f89c44e8e78ab5e09fa92b35d7ca689c964/gcc%2Fconfig%2Fs390%2Fs390x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390x.h?ref=58d10f89c44e8e78ab5e09fa92b35d7ca689c964", "patch": "@@ -0,0 +1,27 @@\n+/* Definitions of target machine for IBM zSeries 64-bit\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Hartmut Penner (hpenner@de.ibm.com) and\n+                  Ulrich Weigand (uweigand@de.ibm.com).\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef _S390X_H\n+#define _S390X_H\n+\n+#define DEFAULT_TARGET_64BIT\n+\n+#endif"}]}