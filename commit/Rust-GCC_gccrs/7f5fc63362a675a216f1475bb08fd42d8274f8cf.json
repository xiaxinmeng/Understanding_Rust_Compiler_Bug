{"sha": "7f5fc63362a675a216f1475bb08fd42d8274f8cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1ZmM2MzM2MmE2NzVhMjE2ZjE0NzViYjA4ZmQ0MmQ4Mjc0ZjhjZg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-12-02T08:25:27Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-02T08:25:27Z"}, "message": "S/390: Define vectorization_cost hook\n\nDefine the vectorization_cost hook.  The only change right now\ncompared to the default implementation is the reduced costs for\nunaligned loads/stores.  This is supposed to prevent unnecessary loop\npeeling performed to reach better alignments.\n\nFurther tuning of this hook is required.\n\n-Andreas-\n\ngcc/ChangeLog:\n\n2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc/config/s390/s390.c (s390_builtin_vectorization_cost): New\n\tfunction.\n\t(TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): Define target\n\tmacro.\n\ngcc/testsuite/ChangeLog:\n\n2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vector/vec-nopeel-1.c: New test.\n\nFrom-SVN: r243158", "tree": {"sha": "0622db93e3d416b514fe9512047a44cc2859f782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0622db93e3d416b514fe9512047a44cc2859f782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f5fc63362a675a216f1475bb08fd42d8274f8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5fc63362a675a216f1475bb08fd42d8274f8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5fc63362a675a216f1475bb08fd42d8274f8cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5fc63362a675a216f1475bb08fd42d8274f8cf/comments", "author": null, "committer": null, "parents": [{"sha": "9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad49cdb5340bcaab0ecc0574ed754af9ba71283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad49cdb5340bcaab0ecc0574ed754af9ba71283"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "e5f83456f0f00e285b55a6bd7ea567b1116a8414", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f5fc63362a675a216f1475bb08fd42d8274f8cf", "patch": "@@ -1,3 +1,10 @@\n+2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc/config/s390/s390.c (s390_builtin_vectorization_cost): New\n+\tfunction.\n+\t(TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): Define target\n+\tmacro.\n+\n 2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vector.md (vec_halfhalf): New mode iterator."}, {"sha": "767666e3f7bfeebc00327cd565f5019b70ced247", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7f5fc63362a675a216f1475bb08fd42d8274f8cf", "patch": "@@ -3674,6 +3674,40 @@ s390_address_cost (rtx addr, machine_mode mode ATTRIBUTE_UNUSED,\n   return ad.indx? COSTS_N_INSNS (1) + 1 : COSTS_N_INSNS (1);\n }\n \n+/* Implement targetm.vectorize.builtin_vectorization_cost.  */\n+static int\n+s390_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n+\t\t\t\t tree vectype,\n+\t\t\t\t int misalign ATTRIBUTE_UNUSED)\n+{\n+  switch (type_of_cost)\n+    {\n+      case scalar_stmt:\n+      case scalar_load:\n+      case scalar_store:\n+      case vector_stmt:\n+      case vector_load:\n+      case vector_store:\n+      case vec_to_scalar:\n+      case scalar_to_vec:\n+      case cond_branch_not_taken:\n+      case vec_perm:\n+      case vec_promote_demote:\n+      case unaligned_load:\n+      case unaligned_store:\n+\treturn 1;\n+\n+      case cond_branch_taken:\n+\treturn 3;\n+\n+      case vec_construct:\n+\treturn TYPE_VECTOR_SUBPARTS (vectype) - 1;\n+\n+      default:\n+\tgcc_unreachable ();\n+    }\n+}\n+\n /* If OP is a SYMBOL_REF of a thread-local symbol, return its TLS mode,\n    otherwise return 0.  */\n \n@@ -15428,6 +15462,9 @@ s390_excess_precision (enum excess_precision_type type)\n #define TARGET_REGISTER_MOVE_COST s390_register_move_cost\n #undef TARGET_MEMORY_MOVE_COST\n #define TARGET_MEMORY_MOVE_COST s390_memory_move_cost\n+#undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n+#define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST \\\n+  s390_builtin_vectorization_cost\n \n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG s390_reorg"}, {"sha": "e39ab1c59a98a9f54c606769bc44758b7980e016", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f5fc63362a675a216f1475bb08fd42d8274f8cf", "patch": "@@ -1,3 +1,7 @@\n+2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-nopeel-1.c: New test.\n+\n 2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/zvector/vec-cmp-2.c: New test."}, {"sha": "581c3712772535121264c74d7e6378ecbdd8261b", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-nopeel-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-nopeel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5fc63362a675a216f1475bb08fd42d8274f8cf/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-nopeel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-nopeel-1.c?ref=7f5fc63362a675a216f1475bb08fd42d8274f8cf", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z13\" } */\n+/* { dg-require-effective-target vector } */\n+\n+int\n+foo (int * restrict a, int n)\n+{\n+  int i, result = 0;\n+\n+  for (i = 0; i < n * 4; i++)\n+    result += a[i];\n+  return result;\n+}\n+\n+/* We do NOT want this loop to get peeled.  Without peeling no scalar\n+   memory add should appear.  */\n+/* { dg-final { scan-assembler-not \"\\ta\\t\" } } */"}]}