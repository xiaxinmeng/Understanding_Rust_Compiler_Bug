{"sha": "566c6181e6dd7180ccc249e0b781da7a41340e50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2YzYxODFlNmRkNzE4MGNjYzI0OWUwYjc4MWRhN2E0MTM0MGU1MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-12-10T05:09:29Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2006-12-10T05:09:29Z"}, "message": "c-opts.c (c_common_parse_file): Unconditionally give a warning, suitable for the language, if set_yydebug is true.\n\n\t* c-opts.c (c_common_parse_file): Unconditionally give a warning,\n\tsuitable for the language, if set_yydebug is true.\n\t* c-pragma.h: Define enum pragma_omp_clause here.  Don't define\n\tYYDEBUG or declare yydebug.\n\t* c-parser.c (yydebug, enum pragma_omp_clause): Delete.\n\t* cp/parser.c: Likewise.\n\nFrom-SVN: r119704", "tree": {"sha": "c320daa7dba3673709646c3fbc979a9c5e08929b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c320daa7dba3673709646c3fbc979a9c5e08929b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/566c6181e6dd7180ccc249e0b781da7a41340e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566c6181e6dd7180ccc249e0b781da7a41340e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566c6181e6dd7180ccc249e0b781da7a41340e50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566c6181e6dd7180ccc249e0b781da7a41340e50/comments", "author": null, "committer": null, "parents": [{"sha": "17c2c7754500e156295352b07b13c21d82793d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c2c7754500e156295352b07b13c21d82793d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c2c7754500e156295352b07b13c21d82793d61"}], "stats": {"total": 332, "additions": 163, "deletions": 169}, "files": [{"sha": "ed4b84317e8e8fa4bf1de40a721cc2ca9fa6edc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=566c6181e6dd7180ccc249e0b781da7a41340e50", "patch": "@@ -1,3 +1,11 @@\n+2006-12-09  Zack Weinberg  <zackw@panix.com>\n+\n+\t* c-opts.c (c_common_parse_file): Unconditionally give a warning,\n+\tsuitable for the language, if set_yydebug is true.\n+\t* c-pragma.h: Define enum pragma_omp_clause here.  Don't define\n+\tYYDEBUG or declare yydebug.\n+\t* c-parser.c (yydebug, enum pragma_omp_clause): Delete.\n+\n 2006-12-09  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c: Update copyright.\n@@ -104,18 +112,18 @@\n 2006-12-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* Makefile.in: Add new file tree-ssa-ter.c.\n-\t* tree-outof-ssa.c (struct temp_expr_table_d, new_temp_expr_table, \n-\tfree_temp_expr_table, add_value_to_version_list, \n-\tadd_value_to_partition_list, remove_value_from_partition_list, \n-\tadd_dependence, check_replaceable, finish_expr, mark_replaceable, \n-\tkill_expr, kill_virtual_exprs, find_replaceable_in_bb, \n+\t* tree-outof-ssa.c (struct temp_expr_table_d, new_temp_expr_table,\n+\tfree_temp_expr_table, add_value_to_version_list,\n+\tadd_value_to_partition_list, remove_value_from_partition_list,\n+\tadd_dependence, check_replaceable, finish_expr, mark_replaceable,\n+\tkill_expr, kill_virtual_exprs, find_replaceable_in_bb,\n \tfind_replaceable_exprs, dump_replaceable_exprs): Move to tree-ssa-ter.c.\n \t* tree-ssa-live.h (find_replaceable_exprs, dump_replaceable_exprs): Add\n \tprototypes.\n \t* tree-ssa-ter.c: New file using code moved from tree-outof-ssa.c.\n \t(struct value_expr_d): Remove.\n \t(struct temp_expr_table_d): Rename fields, add explicit vector of\n-\treplaceable expressions instead of sharing.  Change value_expr_p's to \n+\treplaceable expressions instead of sharing.  Change value_expr_p's to\n \tbitmap.  Delete free_list.\n \t(new_temp_expr_table): Rename fields, count number of ssa_names in\n \teach partition.\n@@ -131,7 +139,7 @@\n \tpartition list, free the bitmap if it is empty.\n \t(add_dependence): Use renamed field, cleanup.  Don't add a dependence\n \ton partitions with only one member.\n-\t(is_replaceable_p): New.  Split out replaceability check from \n+\t(is_replaceable_p): New.  Split out replaceability check from\n \tcheck_replaceable.\n \t(process_replaceable): New.  Code split from check_replaceable.\n \t(check_replaceable): Removed.\n@@ -208,7 +216,7 @@\n \t(struct gcc_target): Add record_gcc_switches and\n \trecord_gcc_switches_section fields.\n \t* target-def.h (TARGET_ASM_RECORD_GCC_SWITCHES): Provide a\n-        default definition.\n+\tdefault definition.\n \t(TARGET_ASM_RECORD_GCC_SWITCHES_SECTION): Provide a default\n \tdefinition.\n \t* toplev.c (print_single_switch): Simplify by providing a\n@@ -218,9 +226,9 @@\n \t(print_to_asm_out_file): New function.\n \t(print_to_stderr): New function.\n \t(init_asm_output): If flag_record_gcc_switches is set then if\n-        the target supports recording the switches then emit them into\n-        the assembler output file, otherwise tell the user that the\n-        switch is not supported.\n+\tthe target supports recording the switches then emit them into\n+\tthe assembler output file, otherwise tell the user that the\n+\tswitch is not supported.\n \t* varasm.c (eld_record_gcc_switches): New function.  Example\n \thandler for the record_gcc_switches target hook.\n \t* doc/tm.texi (TARGET_ASM_RECORD_GCC_SWITCHES): Document the new"}, {"sha": "dcb68a16ffffd1dea10c1b26109c92f00942a175", "filename": "gcc/c-opts.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=566c6181e6dd7180ccc249e0b781da7a41340e50", "patch": "@@ -1163,14 +1163,26 @@ c_common_parse_file (int set_yydebug)\n {\n   unsigned int i;\n \n-  /* Enable parser debugging, if requested and we can.  If requested\n-     and we can't, notify the user.  */\n-#if YYDEBUG != 0\n-  yydebug = set_yydebug;\n-#else\n   if (set_yydebug)\n-    warning (0, \"YYDEBUG was not defined at build time, -dy ignored\");\n-#endif\n+    switch (c_language)\n+      {\n+      case clk_c:\n+\twarning(0, \"The C parser does not support -dy, option ignored\");\n+\tbreak;\n+      case clk_objc:\n+\twarning(0,\n+\t\t\"The Objective-C parser does not support -dy, option ignored\");\n+\tbreak;\n+      case clk_cxx:\n+\twarning(0, \"The C++ parser does not support -dy, option ignored\");\n+\tbreak;\n+      case clk_objcxx:\n+\twarning(0,\n+\t    \"The Objective-C++ parser does not support -dy, option ignored\");\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n \n   i = 0;\n   for (;;)"}, {"sha": "d53b15526c1b1c2ee5877e74e80ac62c32c9f6a2", "filename": "gcc/c-parser.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=566c6181e6dd7180ccc249e0b781da7a41340e50", "patch": "@@ -59,10 +59,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"cgraph.h\"\n \n \f\n-/* Miscellaneous data and functions needed for the parser.  */\n-\n-int yydebug;\n-\n /* Objective-C specific parser/lexer information.  */\n \n static int objc_pq_context = 0;\n@@ -200,26 +196,6 @@ static const struct resword reswords[] =\n };\n #define N_reswords (sizeof reswords / sizeof (struct resword))\n \n-/* All OpenMP clauses.  OpenMP 2.5.  */\n-typedef enum pragma_omp_clause {\n-  PRAGMA_OMP_CLAUSE_NONE = 0,\n-\n-  PRAGMA_OMP_CLAUSE_COPYIN,\n-  PRAGMA_OMP_CLAUSE_COPYPRIVATE,\n-  PRAGMA_OMP_CLAUSE_DEFAULT,\n-  PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,\n-  PRAGMA_OMP_CLAUSE_IF,\n-  PRAGMA_OMP_CLAUSE_LASTPRIVATE,\n-  PRAGMA_OMP_CLAUSE_NOWAIT,\n-  PRAGMA_OMP_CLAUSE_NUM_THREADS,\n-  PRAGMA_OMP_CLAUSE_ORDERED,\n-  PRAGMA_OMP_CLAUSE_PRIVATE,\n-  PRAGMA_OMP_CLAUSE_REDUCTION,\n-  PRAGMA_OMP_CLAUSE_SCHEDULE,\n-  PRAGMA_OMP_CLAUSE_SHARED\n-} pragma_omp_clause;\n-\n-\n /* Initialization routine for this file.  */\n \n void"}, {"sha": "9a3ff976b1c1705766a17fbbe86fad619fd6f892", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=566c6181e6dd7180ccc249e0b781da7a41340e50", "patch": "@@ -49,9 +49,26 @@ typedef enum pragma_kind {\n   PRAGMA_FIRST_EXTERNAL\n } pragma_kind;\n \n-/* Cause the `yydebug' variable to be defined.  */\n-#define YYDEBUG 1\n-extern int yydebug;\n+\n+/* All clauses defined by OpenMP 2.5.\n+   Used internally by both C and C++ parsers.  */\n+typedef enum pragma_omp_clause {\n+  PRAGMA_OMP_CLAUSE_NONE = 0,\n+\n+  PRAGMA_OMP_CLAUSE_COPYIN,\n+  PRAGMA_OMP_CLAUSE_COPYPRIVATE,\n+  PRAGMA_OMP_CLAUSE_DEFAULT,\n+  PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,\n+  PRAGMA_OMP_CLAUSE_IF,\n+  PRAGMA_OMP_CLAUSE_LASTPRIVATE,\n+  PRAGMA_OMP_CLAUSE_NOWAIT,\n+  PRAGMA_OMP_CLAUSE_NUM_THREADS,\n+  PRAGMA_OMP_CLAUSE_ORDERED,\n+  PRAGMA_OMP_CLAUSE_PRIVATE,\n+  PRAGMA_OMP_CLAUSE_REDUCTION,\n+  PRAGMA_OMP_CLAUSE_SCHEDULE,\n+  PRAGMA_OMP_CLAUSE_SHARED\n+} pragma_omp_clause;\n \n extern struct cpp_reader* parse_in;\n "}, {"sha": "e72ffeb51679dfdbef2eba9b359451836c9feaea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 105, "deletions": 101, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=566c6181e6dd7180ccc249e0b781da7a41340e50", "patch": "@@ -1,3 +1,7 @@\n+2006-12-09  Zack Weinberg  <zackw@panix.com>\n+\n+\t* parser.c (yydebug, enum pragma_omp_clause): Delete.\n+\n 2006-12-07  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29732\n@@ -11,10 +15,10 @@\n \n 2006-12-07  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/29980\n-        * cp_parser_elaborated_type_specifier: Check\n-        the return value of check_elaborated_type_specifier.\n-\t\n+\tPR c++/29980\n+\t* cp_parser_elaborated_type_specifier: Check\n+\tthe return value of check_elaborated_type_specifier.\n+\n 2006-12-06  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29730\n@@ -37,7 +41,7 @@\n 2006-12-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \tMerge from gimple-tuples-branch.\n-\t\n+\n \t2006-10-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* cp-gimplify.c (cp_gimplify_expr): Adjust for GIMPLE_MODIFY_STMT.\n@@ -47,7 +51,7 @@\n \n \t2006-09-28  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * cp-tree.h (union lang_tree_node): Gimple statements do not\n+\t* cp-tree.h (union lang_tree_node): Gimple statements do not\n \thave a TREE_CHAIN.\n \t(TREE_INDIRECT_USING): Look in base.\n \n@@ -71,7 +75,7 @@\n \tCall for_each_template_parm on TYPE_MIN_VALUE and TYPE_MAX_VALUE.\n \n 2006-12-03  Richard Henderson  <rth@redhat.com>\n-            Andrew Pinski  <pinskia@gmail.com>\n+\t    Andrew Pinski  <pinskia@gmail.com>\n \n \tPR C++/14329\n \t* error.c (cp_printer) <'D'>: Handle DECL_DEBUG_EXPR.\n@@ -93,8 +97,8 @@\n \t(start_preparsed_function): Define and document value of\n \tDECL_INITIAL before and after routine.\n \t(finish_function): Check DECL_INITIAL invariant.\n-\t* parser.c \n-\t(cp_parser_function_definition_from_specifiers_and_declarator): \n+\t* parser.c\n+\t(cp_parser_function_definition_from_specifiers_and_declarator):\n \tSkip duplicate function definitions.\n \n 2006-12-01  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n@@ -123,15 +127,15 @@\n \t* rtti.c (get_tinfo_decl): Handle return value from\n \tpushdecl_top_level_and_finish.\n \n-2006-11-29  Lee Millward  <lee.millward@codesourcery.com> \n+2006-11-29  Lee Millward  <lee.millward@codesourcery.com>\n \n \tPR c++/29022\n \t* parser.c (cp_parser_class_head): Move processing\n \tof any base classes to...\n \t(cp_parser_class_specifier) ...here. Take an extra\n \ttree* parameter for any base classes. Only process\n \tthem if the opening brace was found.\n-\t\n+\n 2006-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/29735\n@@ -160,29 +164,29 @@\n \n 2006-11-21      Douglas Gregor <doug.gregor@gmail.com>\n \n-        * cp-tree.def (STATIC_ASSERT): New.  \n+\t* cp-tree.def (STATIC_ASSERT): New.\n \t* cp-objcp-common.c (cp_tree_size): Handle STATIC_ASSERT.\n \t* error.c (dump_decl): Handle STATIC_ASSERT.\n \t* cp-tree.h (STATIC_ASSERT_CONDITION): New.\n-        (STATIC_ASSERT_MESSAGE): New.\n+\t(STATIC_ASSERT_MESSAGE): New.\n \t(STATIC_ASSERT_SOURCE_LOCATION): New.\n \t(struct tree_static_assert): New.\n \t(enum cp_tree_node_structure_enum): Add TS_CP_STATIC_ASSERT.\n \t(union lang_tree_node): Add static_assertion.\n-        (finish_static_assert): Declare.\n+\t(finish_static_assert): Declare.\n \t* cxx-pretty-print.c (pp_cxx_statement): Handle STATIC_ASSERT.\n \t(pp_cxx_declaration): Handle STATIC_ASSERT.\n \t* pt.c (instantiate_class_template): Handle\n \tSTATIC_ASSERT members.\n-        (tsubst_expr): Handle STATIC_ASSERT statements.  \n+\t(tsubst_expr): Handle STATIC_ASSERT statements.\n \t* semantics.c (finish_static_assert): New.\n-        * lex.c (D_CPP0X): New.\n-        (reswords): Add static_assert keyword.\n-        (init_reswords): If not flag_cpp0x, mask out C++0x keywords.\n-        * parser.c (cp_parser_block_declaration): Parse static\n+\t* lex.c (D_CPP0X): New.\n+\t(reswords): Add static_assert keyword.\n+\t(init_reswords): If not flag_cpp0x, mask out C++0x keywords.\n+\t* parser.c (cp_parser_block_declaration): Parse static\n \tassertions.\n-        (cp_parser_static_assert): New.\n-        (cp_parser_member_declaration): Parse static assertions.\n+\t(cp_parser_static_assert): New.\n+\t(cp_parser_member_declaration): Parse static assertions.\n \n 2006-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -207,7 +211,7 @@\n \tperform_or_defer_access_check.\n \t* class.c (alter_access, resolve_address_of_overloaded_function):\n \tLikewise.\n-\t* decl.c (make_typename_type, make_unbound_class_template): Likewise. \n+\t* decl.c (make_typename_type, make_unbound_class_template): Likewise.\n \t* search.c (lookup_member): Likewise.\n \t* friend.c (add_friend): Likewise.\n \t* parser.c (cp_parser_template_id,\n@@ -221,7 +225,7 @@\n \t(build_op_delete_call): Adjusted the call to\n \tperform_or_defer_access_check.\n \t(build_over_call): Likewise.\n-\t\n+\n 2006-11-16  Dirk Mueller  <dmueller@suse.de>\n \n \t* name-lookup.c (begin_scope): Use GGC_CNEW instead of\n@@ -319,7 +323,7 @@\n 2006-10-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR C++/29295\n-\t* typeck.c (build_unary_op): Use same_type_p when comparing to \n+\t* typeck.c (build_unary_op): Use same_type_p when comparing to\n \tboolean type.\n \n 2006-10-29  Dirk Mueller  <dmueller@suse.de>\n@@ -349,27 +353,27 @@\n \t* rtti.c (tinfo_base_init): The type info string is always global.\n \n 2006-10-20  Lee Millward  <lee.millward@codesourcery.com>\n-            Mark Mitchell <mark@codesourcery.com>\n+\t    Mark Mitchell <mark@codesourcery.com>\n+\n+\tPR c++/28053\n+\t* decl2.c (grokbitfield): Detect invalid non-integral\n+\ttypes earlier when possible.\n \n-        PR c++/28053\n-        * decl2.c (grokbitfield): Detect invalid non-integral \n-        types earlier when possible.\n-\t\n 2006-10-18  Mark Shinwell  <shinwell@codesourcery.com>\n \n \tPR c++/26884\n \t* typeck2.c (digest_init): Raise error upon attempts to\n \tinitialize arrays with variables.\n \n-2006-10-17  Lee Millward  <lee.millward@codesourcery.com> \n+2006-10-17  Lee Millward  <lee.millward@codesourcery.com>\n+\n+\tPR c++/27952\n+\t* cp-tree.h (xref_basetypes): Return bool instead of void.\n+\t* decl.c (xref_basetypes): Adjust definition. Return false\n+\tif the class bases are invalid.\n+\t* parser.c (cp_parser_class_head): Check the return value\n+\tfrom xref_basetypes.\n \n-        PR c++/27952\n-        * cp-tree.h (xref_basetypes): Return bool instead of void.\n-        * decl.c (xref_basetypes): Adjust definition. Return false\n-        if the class bases are invalid.\n-        * parser.c (cp_parser_class_head): Check the return value\n-        from xref_basetypes.\n-\t\n 2006-10-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28261\n@@ -443,7 +447,7 @@\n        set the type to error_mark_node.\n        (grokdeclarator): Check the return type of check_var_type.\n        * class.c (finish_struct_1): Robustify.\n-\t\n+\n 2006-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29175\n@@ -453,17 +457,17 @@\n 2006-10-11  Lee Millward  <lee.millward@codesourcery.com>\n \n \tPR c++/29024\n-        * cp-tree (struct cp_decl_specifier_seq): Rename to \n-        conflicting_specifiers_p\n-        * parser.c (cp_parser_set_storage_class): Set\n-        conflicting_specifiers_p for the input decl specifier \n-        if a typedef specifier is present. Rename uses of\n-        multiple_specifiers_p to conflicting_specifiers_p.\n-        (cp_parser_decl_specifier_seq) <RID_TYPEDEF>: If a storage \n-        class specifier has already been set for this declaration, \n-        set conflicting_specifiers_p to true on the decl_specs.\n-        * decl.c (grokdeclarator): Rename uses of\n-        multiple_specifiers_p to conflicting_specifiers_p.\n+\t* cp-tree (struct cp_decl_specifier_seq): Rename to\n+\tconflicting_specifiers_p\n+\t* parser.c (cp_parser_set_storage_class): Set\n+\tconflicting_specifiers_p for the input decl specifier\n+\tif a typedef specifier is present. Rename uses of\n+\tmultiple_specifiers_p to conflicting_specifiers_p.\n+\t(cp_parser_decl_specifier_seq) <RID_TYPEDEF>: If a storage\n+\tclass specifier has already been set for this declaration,\n+\tset conflicting_specifiers_p to true on the decl_specs.\n+\t* decl.c (grokdeclarator): Rename uses of\n+\tmultiple_specifiers_p to conflicting_specifiers_p.\n \n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n@@ -524,31 +528,31 @@\n \tPR c++/29080\n \t* parser.c (cp_parser_postfix_dot_deref_expression): Use\n \tBASELINK_ACCESS_BINFO as the qualifying scope when calling\n-\tadjust_result_of_qualified_name_lookup. \n+\tadjust_result_of_qualified_name_lookup.\n \n 2006-09-25  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/27329\n-        PR c++/26938\n-        * cp-tree.h (redeclare_class_template): Adjust declaration\n-        to return bool instead of void.\n-        * pt.c (redeclare_class_template): Update definition.\n+\tPR c++/27329\n+\tPR c++/26938\n+\t* cp-tree.h (redeclare_class_template): Adjust declaration\n+\tto return bool instead of void.\n+\t* pt.c (redeclare_class_template): Update definition.\n \tReturn false on error.\n-        * decl.c (xref_tag): Return error_mark_node if\n+\t* decl.c (xref_tag): Return error_mark_node if\n \tredeclare_class_template returned false.\n \n \tPR c++/27667\n-        * cp-tree.h (begin_specialization): Return bool \n+\t* cp-tree.h (begin_specialization): Return bool\n \tinstead of void.\n-        * pt.c (check_specialization_scope): Likwise. \n-\tAdjust comment. Return false if a specialization \n+\t* pt.c (check_specialization_scope): Likwise.\n+\tAdjust comment. Return false if a specialization\n \tisn't permitted in the current scope.\n-        (begin_specialization): Use the return value of  \n-        check_specialization_scope.\n-        * parser.c (cp_parser_explicit_specialization): If\n-        begin_specialization returned false, skip the rest \n+\t(begin_specialization): Use the return value of\n+\tcheck_specialization_scope.\n+\t* parser.c (cp_parser_explicit_specialization): If\n+\tbegin_specialization returned false, skip the rest\n \tof the specialization.\n-\t\n+\n 2006-09-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29016\n@@ -559,12 +563,12 @@\n \n \tPR c++/28861\n \t* decl.c (shadow_tag): Return error_mark_node\n-        if maybe_process_partial_specialization failed.\n+\tif maybe_process_partial_specialization failed.\n \n \tPR c++/28303\n-        * decl.c (grokdeclarator): Return error_mark_node on\n-        declaration with two or more data types.\n-\t\n+\t* decl.c (grokdeclarator): Return error_mark_node on\n+\tdeclaration with two or more data types.\n+\n 2006-09-20  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR target/27650\n@@ -660,7 +664,7 @@\n \t* tree.c (build_cplus_new): Set it.\n \n \tPR c++/26696\n-\t* cvt.c (convert_to_void): Replace a subexpression with no side \n+\t* cvt.c (convert_to_void): Replace a subexpression with no side\n \teffects with void_zero_node.\n \t* tree.c (is_overloaded_fn): Look through COMPONENT_REF.\n \t(get_first_fn): Ditto.\n@@ -673,13 +677,13 @@\n \twhere the name is a type used incorrectly.\n \n \tPR c++/26671\n-\t* typeck.c (maybe_warn_about_returning_address_of_local): Look \n-\tthrough COMPONENT_REF and ARRAY_REF.\t\n+\t* typeck.c (maybe_warn_about_returning_address_of_local): Look\n+\tthrough COMPONENT_REF and ARRAY_REF.\n \n \tPR c++/26102\n \t* name-lookup.c (do_class_using_decl): Try to find the base even\n \tif bases_dependent_p.\n-\t* pt.c (type_dependent_expression_p): A USING_DECL is dependent.\t\n+\t* pt.c (type_dependent_expression_p): A USING_DECL is dependent.\n \n \tPR c++/19809\n \t* pt.c (tsubst_friend_function): Set DECL_INITIAL before pushdecl.\n@@ -756,7 +760,7 @@\n \tfields can't be packed.\n \n \tPR c++/26577\n-\t* cvt.c (convert_to_void): Don't automatically load from volatiles \n+\t* cvt.c (convert_to_void): Don't automatically load from volatiles\n \tof TREE_ADDRESSABLE type.\n \n 2006-08-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n@@ -777,13 +781,13 @@\n \tspecialization-after-instantiation.\n \t* decl2.c (mark_used): Mark the main function used when one of its\n \tclones is used.\n-\t\n+\n 2006-08-27  Lee Millward  <lee.millward@codesourcery.com>\n \n \tPR c++/26573\n \t* class.c (check_field_decls): Don't issue error about\n \tlocal classes containing static data members.\n-\t\n+\n 2006-08-26  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c++/24009\n@@ -808,7 +812,7 @@\n \tparameters, return 1 if either is error_mark_node.\n \t(current_template_args): Robustify.\n \t(redeclare_class_template): Likewise.\n-\t\n+\n 2006-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28588\n@@ -874,7 +878,7 @@\n 2006-08-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/27714\n-\t* pt.c (push_template_decl_real): A friend template with class \n+\t* pt.c (push_template_decl_real): A friend template with class\n \tscope isn't primary.\n \n 2006-08-23  Benjamin Smedberg <benjamin@smedbergs.us>\n@@ -886,7 +890,7 @@\n 2006-08-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/23372\n-\t* call.c (build_over_call): Don't make a copy here if build_call \n+\t* call.c (build_over_call): Don't make a copy here if build_call\n \twill make one too.\n \n 2006-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n@@ -905,7 +909,7 @@\n 2006-08-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/28659\n-\t* typeck.c (merge_types): If either of the types have the right \n+\t* typeck.c (merge_types): If either of the types have the right\n \tattributes, return that one.\n \n \t* tree.c (cp_build_type_attribute_variant): Make sure we aren't\n@@ -936,7 +940,7 @@\n \tPR c++/28741\n \t* tree.c (decl_anon_ns_mem_p): Robustify.\n \t* decl2.c (determine_visibility): Likewise.\n-\t\n+\n 2006-08-20  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28341\n@@ -967,7 +971,7 @@\n \n \tPR c++/28346\n \t* pt.c (tsubst_qualified_id): Do not strip references from\n-\tOFFSET_REFs. \n+\tOFFSET_REFs.\n \n 2006-08-17  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n@@ -1010,7 +1014,7 @@\n \n \tPR c++/28594\n \t* pt.c (process_template_parm): Robustify.\n-\t\n+\n 2006-08-14  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR c++/28288\n@@ -1043,13 +1047,13 @@\n \n \tPR c++/28641\n \t* pt.c (type_unification_real): Robustify.\n-\t\n+\n 2006-08-03  Lee Millward  <lee.millward@codesourcery.com>\n \n \tPR c++/28347\n \t* decl.c (start_decl): Return error_mark_node if a\n \tdiagnostic was issed for an invalid typedef initialization.\n-\t\n+\n 2006-08-03  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/27508\n@@ -1126,7 +1130,7 @@\n \t(mangle_class_name_for_template): Likewise.\n \t(tsubst_template_parms): Likewise.\n \t* error.c (dump_template_argument_list): Likewise.\n-\t\n+\n 2006-07-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cp-tree.h: Fix a comment typo.\n@@ -1184,15 +1188,15 @@\n \t* tree.c (decl_linkage): Only return lk_external if it's set.\n \n \tPR c++/28409\n-\t* decl2.c (constrain_visibility): Ignore the anonymous namespace \n+\t* decl2.c (constrain_visibility): Ignore the anonymous namespace\n \tfor extern \"C\" decls.\n \t(VISIBILITY_STATIC): Rename to VISIBILITY_ANON.\n \n-\t* decl2.c (constrain_visibility): Remove specified and reason \n+\t* decl2.c (constrain_visibility): Remove specified and reason\n \tparameters.  Don't touch decls that already have explicit visibility.\n-\t(determine_visibility): Do copy DECL_VISIBILITY_SPECIFIED from \n+\t(determine_visibility): Do copy DECL_VISIBILITY_SPECIFIED from\n \ttemplate.\n-\t(determine_visibility_from_class): Reverse sense of \n+\t(determine_visibility_from_class): Reverse sense of\n \tDECL_VISIBILITY_SPECIFIED test for target-specific visibility rules.\n \t(constrain_class_visibility): Only complain about member visibility\n \tif the member type is another class.  Don't change visibility of the\n@@ -1229,7 +1233,7 @@\n \tPR c++/28260\n \t* decl.c (duplicate_decls): Return error_mark_node\n \ton ambiguous declaration.\n-\t\n+\n 2006-07-18  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR c++/27495\n@@ -1269,13 +1273,13 @@\n \t* decl2.c (acceptable_java_type): Robustify. Use\n \tproper Boolean return type instead of return 1.\n \t(check_java_method): Don't issue error about\n-\ttype not being an acceptable Java parameter if \n+\ttype not being an acceptable Java parameter if\n \tit's error_mark_node.\n-\t\n+\n \tPR c++/28269\n \t* parser.c (cp_parser_elaborated_type_specifier):\n \tReturn early if an invalid type was detected.\n-\t\n+\n 2006-07-15  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28249\n@@ -1319,7 +1323,7 @@\n \t* decl.c (define_label): Return error_mark_node on error.\n \t* semantics.c (finish_label_stmt): Don't call\n \tadd_stmt for invalid labels.\n-\t\n+\n 2006-07-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/28279\n@@ -1347,13 +1351,13 @@\n 2006-07-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/28215\n-\t* method.c (make_thunk): Unset DECL_USE_TEMPLATE and \n+\t* method.c (make_thunk): Unset DECL_USE_TEMPLATE and\n \tDECL_TEMPLATE_INFO.\n \n 2006-06-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/26577\n-\t* call.c (build_new_method_call): Force evaluation of the \n+\t* call.c (build_new_method_call): Force evaluation of the\n \tinstance pointer, not the object.\n \n 2006-06-30  Kazu Hirata  <kazu@codesourcery.com>\n@@ -1363,7 +1367,7 @@\n 2006-06-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/18698\n-\t* decl2.c (grokfield): Only try to treat the decl as an access \n+\t* decl2.c (grokfield): Only try to treat the decl as an access\n \tdeclaration if the scope is a class.\n \n 2006-06-29  Jason Merrill  <jason@redhat.com>\n@@ -1417,7 +1421,7 @@\n 2006-06-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/27424\n-\t* pt.c (convert_template_argument): Pass all template arguments \n+\t* pt.c (convert_template_argument): Pass all template arguments\n \ton to coerce_template_template_parms.\n \n 2006-06-25  Lee Millward  <lee.millward@gmail.com>\n@@ -1428,15 +1432,15 @@\n \treturning NULL_TREE, instead check for error_mark_node\n \tto indicate failure.\n \t* decl.c (grokdeclarator): Adjust block comment.\n-\t\n+\n 2006-06-25  Lee Millward  <lee.millward@gmail.com>\n \n \tPR c++/28051\n \t* mangle.c (mangle_conv_op_name_for_type): Check for\n \tinvalid types.\n \t* name-lookup.c (push_class_level_binding): Robustify.\n \t(do_class_using_decl): Return early if name is error_mark_node.\n-\t\n+\n 2006-06-23  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR c++/28114\n@@ -1472,7 +1476,7 @@\n \tPR c++/27821\n \t* decl.c (grokdeclarator): Return error_mark_node on\n \tinvalid uses of the scope resolution operator.\n-\t\n+\n 2006-06-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28111"}, {"sha": "98bc2e07d28ebd552af3e9835a19fa9cc006488f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566c6181e6dd7180ccc249e0b781da7a41340e50/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=566c6181e6dd7180ccc249e0b781da7a41340e50", "patch": "@@ -18073,25 +18073,6 @@ cp_parser_objc_statement (cp_parser * parser) {\n \f\n /* OpenMP 2.5 parsing routines.  */\n \n-/* All OpenMP clauses.  OpenMP 2.5.  */\n-typedef enum pragma_omp_clause {\n-  PRAGMA_OMP_CLAUSE_NONE = 0,\n-\n-  PRAGMA_OMP_CLAUSE_COPYIN,\n-  PRAGMA_OMP_CLAUSE_COPYPRIVATE,\n-  PRAGMA_OMP_CLAUSE_DEFAULT,\n-  PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,\n-  PRAGMA_OMP_CLAUSE_IF,\n-  PRAGMA_OMP_CLAUSE_LASTPRIVATE,\n-  PRAGMA_OMP_CLAUSE_NOWAIT,\n-  PRAGMA_OMP_CLAUSE_NUM_THREADS,\n-  PRAGMA_OMP_CLAUSE_ORDERED,\n-  PRAGMA_OMP_CLAUSE_PRIVATE,\n-  PRAGMA_OMP_CLAUSE_REDUCTION,\n-  PRAGMA_OMP_CLAUSE_SCHEDULE,\n-  PRAGMA_OMP_CLAUSE_SHARED\n-} pragma_omp_clause;\n-\n /* Returns name of the next clause.\n    If the clause is not recognized PRAGMA_OMP_CLAUSE_NONE is returned and\n    the token is not consumed.  Otherwise appropriate pragma_omp_clause is\n@@ -19441,8 +19422,4 @@ c_parse_file (void)\n   the_parser = NULL;\n }\n \n-/* This variable must be provided by every front end.  */\n-\n-int yydebug;\n-\n #include \"gt-cp-parser.h\""}]}