{"sha": "6f1ae1ecd351348eb33b515c5e23778651bee028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxYWUxZWNkMzUxMzQ4ZWIzM2I1MTVjNWUyMzc3ODY1MWJlZTAyOA==", "commit": {"author": {"name": "Piotr H. Dabrowski", "email": "phd@phd.re", "date": "2020-11-13T17:27:16Z"}, "committer": {"name": "Jeff Law", "email": "law@torsion.usersys.redhat.com", "date": "2020-11-13T17:28:33Z"}, "message": "Do not warn about unused macros while processing #pragma GCC optimize\n\nlibcpp\n\n\tPR c++/91318\n\t* include/cpplib.h: Added cpp_define_unused(), cpp_define_formatted_unused()\n\t* directives.c: Likewise.\n\ngcc/c-family\n\n\tPR c++/91318\n\t* c-cppbuiltin.c: c_cpp_builtins_optimize_pragma(): use cpp_define_unused()", "tree": {"sha": "78b8d2ec786a7f7dc59919238643cc01b08ff1a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78b8d2ec786a7f7dc59919238643cc01b08ff1a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f1ae1ecd351348eb33b515c5e23778651bee028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1ae1ecd351348eb33b515c5e23778651bee028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1ae1ecd351348eb33b515c5e23778651bee028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1ae1ecd351348eb33b515c5e23778651bee028/comments", "author": {"login": "phd", "id": 41565539, "node_id": "MDQ6VXNlcjQxNTY1NTM5", "avatar_url": "https://avatars.githubusercontent.com/u/41565539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phd", "html_url": "https://github.com/phd", "followers_url": "https://api.github.com/users/phd/followers", "following_url": "https://api.github.com/users/phd/following{/other_user}", "gists_url": "https://api.github.com/users/phd/gists{/gist_id}", "starred_url": "https://api.github.com/users/phd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phd/subscriptions", "organizations_url": "https://api.github.com/users/phd/orgs", "repos_url": "https://api.github.com/users/phd/repos", "events_url": "https://api.github.com/users/phd/events{/privacy}", "received_events_url": "https://api.github.com/users/phd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "15f71e681acb8eaa01e4140adef9377aa4473ca9", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1ae1ecd351348eb33b515c5e23778651bee028/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1ae1ecd351348eb33b515c5e23778651bee028/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=6f1ae1ecd351348eb33b515c5e23778651bee028", "patch": "@@ -581,41 +581,41 @@ c_cpp_builtins_optimize_pragma (cpp_reader *pfile, tree prev_tree,\n   /* Other target-independent built-ins determined by command-line\n      options.  */\n   if (!prev->x_optimize_size && cur->x_optimize_size)\n-    cpp_define (pfile, \"__OPTIMIZE_SIZE__\");\n+    cpp_define_unused (pfile, \"__OPTIMIZE_SIZE__\");\n   else if (prev->x_optimize_size && !cur->x_optimize_size)\n     cpp_undef (pfile, \"__OPTIMIZE_SIZE__\");\n \n   if (!prev->x_optimize && cur->x_optimize)\n-    cpp_define (pfile, \"__OPTIMIZE__\");\n+    cpp_define_unused (pfile, \"__OPTIMIZE__\");\n   else if (prev->x_optimize && !cur->x_optimize)\n     cpp_undef (pfile, \"__OPTIMIZE__\");\n \n   prev_fast_math = fast_math_flags_struct_set_p (prev);\n   cur_fast_math  = fast_math_flags_struct_set_p (cur);\n   if (!prev_fast_math && cur_fast_math)\n-    cpp_define (pfile, \"__FAST_MATH__\");\n+    cpp_define_unused (pfile, \"__FAST_MATH__\");\n   else if (prev_fast_math && !cur_fast_math)\n     cpp_undef (pfile, \"__FAST_MATH__\");\n \n   if (!prev->x_flag_signaling_nans && cur->x_flag_signaling_nans)\n-    cpp_define (pfile, \"__SUPPORT_SNAN__\");\n+    cpp_define_unused (pfile, \"__SUPPORT_SNAN__\");\n   else if (prev->x_flag_signaling_nans && !cur->x_flag_signaling_nans)\n     cpp_undef (pfile, \"__SUPPORT_SNAN__\");\n \n   if (!prev->x_flag_errno_math && cur->x_flag_errno_math)\n     cpp_undef (pfile, \"__NO_MATH_ERRNO__\");\n   else if (prev->x_flag_errno_math && !cur->x_flag_errno_math)\n-    cpp_define (pfile, \"__NO_MATH_ERRNO__\");\n+    cpp_define_unused (pfile, \"__NO_MATH_ERRNO__\");\n \n   if (!prev->x_flag_finite_math_only && cur->x_flag_finite_math_only)\n     {\n       cpp_undef (pfile, \"__FINITE_MATH_ONLY__\");\n-      cpp_define (pfile, \"__FINITE_MATH_ONLY__=1\");\n+      cpp_define_unused (pfile, \"__FINITE_MATH_ONLY__=1\");\n     }\n   else if (prev->x_flag_finite_math_only && !cur->x_flag_finite_math_only)\n     {\n       cpp_undef (pfile, \"__FINITE_MATH_ONLY__\");\n-      cpp_define (pfile, \"__FINITE_MATH_ONLY__=0\");\n+      cpp_define_unused (pfile, \"__FINITE_MATH_ONLY__=0\");\n     }\n }\n "}, {"sha": "c4ecb9657e5b2e3a7e43ab28f0f98cefcad084ab", "filename": "libcpp/directives.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1ae1ecd351348eb33b515c5e23778651bee028/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1ae1ecd351348eb33b515c5e23778651bee028/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=6f1ae1ecd351348eb33b515c5e23778651bee028", "patch": "@@ -2412,6 +2412,15 @@ cpp_define (cpp_reader *pfile, const char *str)\n   run_directive (pfile, T_DEFINE, buf, count);\n }\n \n+/* Like cpp_define, but does not warn about unused macro.  */\n+void\n+cpp_define_unused (cpp_reader *pfile, const char *str)\n+{\n+    unsigned char warn_unused_macros = CPP_OPTION (pfile, warn_unused_macros);\n+    CPP_OPTION (pfile, warn_unused_macros) = 0;\n+    cpp_define (pfile, str);\n+    CPP_OPTION (pfile, warn_unused_macros) = warn_unused_macros;\n+}\n \n /* Use to build macros to be run through cpp_define() as\n    described above.\n@@ -2431,6 +2440,20 @@ cpp_define_formatted (cpp_reader *pfile, const char *fmt, ...)\n   free (ptr);\n }\n \n+/* Like cpp_define_formatted, but does not warn about unused macro.  */\n+void\n+cpp_define_formatted_unused (cpp_reader *pfile, const char *fmt, ...)\n+{\n+  char *ptr;\n+\n+  va_list ap;\n+  va_start (ap, fmt);\n+  ptr = xvasprintf (fmt, ap);\n+  va_end (ap);\n+\n+  cpp_define_unused (pfile, ptr);\n+  free (ptr);\n+}\n \n /* Slight variant of the above for use by initialize_builtins.  */\n void"}, {"sha": "ce00952bf0bb9ada7348c7dbaa7728bbb410dd50", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1ae1ecd351348eb33b515c5e23778651bee028/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1ae1ecd351348eb33b515c5e23778651bee028/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=6f1ae1ecd351348eb33b515c5e23778651bee028", "patch": "@@ -1076,8 +1076,12 @@ extern cppchar_t cpp_host_to_exec_charset (cpp_reader *, cppchar_t);\n /* Used to register macros and assertions, perhaps from the command line.\n    The text is the same as the command line argument.  */\n extern void cpp_define (cpp_reader *, const char *);\n+extern void cpp_define_unused (cpp_reader *, const char *);\n extern void cpp_define_formatted (cpp_reader *pfile, \n \t\t\t\t  const char *fmt, ...) ATTRIBUTE_PRINTF_2;\n+extern void cpp_define_formatted_unused (cpp_reader *pfile,\n+\t\t\t\t\t const char *fmt,\n+\t\t\t\t\t ...) ATTRIBUTE_PRINTF_2;\n extern void cpp_assert (cpp_reader *, const char *);\n extern void cpp_undef (cpp_reader *, const char *);\n extern void cpp_unassert (cpp_reader *, const char *);"}]}