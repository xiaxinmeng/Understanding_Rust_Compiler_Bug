{"sha": "e06e2776827240de1ffe7d6a0af55dae6f45ad54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2ZTI3NzY4MjcyNDBkZTFmZmU3ZDZhMGFmNTVkYWU2ZjQ1YWQ1NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-08-08T15:26:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-08-08T15:26:03Z"}, "message": "mips-protos.h (SYMBOL_FORCE_TO_MEM): New symbol type.\n\ngcc/\n\t* config/mips/mips-protos.h (SYMBOL_FORCE_TO_MEM): New symbol type.\n\t* config/mips/mips.c (mips_classify_symbol): Skip TARGET_ABICALLS\n\tblock for locally-binding symbols if TARGET_ABSOLUTE_ABICALLS.\n\tReturn SYMBOL_FORCE_TO_MEM instead of SYMBOL_ABSOLUTE for\n\tnon-call contexts if TARGET_MIPS16.\n\t(mips_symbolic_constant_p): Handle SYMBOL_FORCE_TO_MEM.\n\t(mips_symbolic_address_p): Likewise.  Remove special TARGET_MIPS16\n\tcode for SYMBOL_ABSOLUTE.\n\t(mips_symbol_insns): Likewise.\n\nFrom-SVN: r127296", "tree": {"sha": "69f008c2341622981b9ce45ad1c9058464b49545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69f008c2341622981b9ce45ad1c9058464b49545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e06e2776827240de1ffe7d6a0af55dae6f45ad54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06e2776827240de1ffe7d6a0af55dae6f45ad54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06e2776827240de1ffe7d6a0af55dae6f45ad54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06e2776827240de1ffe7d6a0af55dae6f45ad54/comments", "author": null, "committer": null, "parents": [{"sha": "280fcbfab4eab60574d827533e6ca4c4e7cdf732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280fcbfab4eab60574d827533e6ca4c4e7cdf732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280fcbfab4eab60574d827533e6ca4c4e7cdf732"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "ee858f46d8dd1db7ebe115487683492bba1d4e2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06e2776827240de1ffe7d6a0af55dae6f45ad54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06e2776827240de1ffe7d6a0af55dae6f45ad54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e06e2776827240de1ffe7d6a0af55dae6f45ad54", "patch": "@@ -1,3 +1,15 @@\n+2007-08-08  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips-protos.h (SYMBOL_FORCE_TO_MEM): New symbol type.\n+\t* config/mips/mips.c (mips_classify_symbol): Skip TARGET_ABICALLS\n+\tblock for locally-binding symbols if TARGET_ABSOLUTE_ABICALLS.\n+\tReturn SYMBOL_FORCE_TO_MEM instead of SYMBOL_ABSOLUTE for\n+\tnon-call contexts if TARGET_MIPS16.\n+\t(mips_symbolic_constant_p): Handle SYMBOL_FORCE_TO_MEM.\n+\t(mips_symbolic_address_p): Likewise.  Remove special TARGET_MIPS16\n+\tcode for SYMBOL_ABSOLUTE.\n+\t(mips_symbol_insns): Likewise.\n+\n 2007-08-08  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips-protos.h (mips_symbol_context): New enumeration."}, {"sha": "13cbfbfc34114a9648b0590928242e8a190829c3", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06e2776827240de1ffe7d6a0af55dae6f45ad54/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06e2776827240de1ffe7d6a0af55dae6f45ad54/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=e06e2776827240de1ffe7d6a0af55dae6f45ad54", "patch": "@@ -55,6 +55,9 @@ enum mips_symbol_context {\n        The symbol's value will be calculated using a MIPS16 PC-relative\n        calculation.\n \n+   SYMBOL_FORCE_TO_MEM\n+       The symbol's value must be forced to memory and loaded from there.\n+\n    SYMBOL_GOT_PAGE_OFST\n        The symbol's value will be calculated by loading an address\n        from the GOT and then applying a 16-bit offset.\n@@ -109,6 +112,7 @@ enum mips_symbol_type {\n   SYMBOL_ABSOLUTE,\n   SYMBOL_GP_RELATIVE,\n   SYMBOL_PC_RELATIVE,\n+  SYMBOL_FORCE_TO_MEM,\n   SYMBOL_GOT_PAGE_OFST,\n   SYMBOL_GOT_DISP,\n   SYMBOL_GOTOFF_PAGE,"}, {"sha": "75873d7c311406b94a48f0cfe493001f54720f72", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06e2776827240de1ffe7d6a0af55dae6f45ad54/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06e2776827240de1ffe7d6a0af55dae6f45ad54/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e06e2776827240de1ffe7d6a0af55dae6f45ad54", "patch": "@@ -1438,7 +1438,7 @@ mips_symbol_binds_local_p (rtx x)\n    LABEL_REF X in context CONTEXT.  */\n \n static enum mips_symbol_type\n-mips_classify_symbol (rtx x, enum mips_symbol_context context ATTRIBUTE_UNUSED)\n+mips_classify_symbol (rtx x, enum mips_symbol_context context)\n {\n   if (TARGET_RTP_PIC)\n     return SYMBOL_GOT_DISP;\n@@ -1473,13 +1473,11 @@ mips_classify_symbol (rtx x, enum mips_symbol_context context ATTRIBUTE_UNUSED)\n       && !SYMBOL_REF_WEAK (x))\n     return SYMBOL_GP_RELATIVE;\n \n-  if (TARGET_ABICALLS)\n+  /* Don't use GOT accesses for locally-binding symbols when -mno-shared\n+     is in effect.  */\n+  if (TARGET_ABICALLS\n+      && !(TARGET_ABSOLUTE_ABICALLS && mips_symbol_binds_local_p (x)))\n     {\n-      /* Don't use GOT accesses for locally-binding symbols; we can use\n-\t %hi and %lo instead.  */\n-      if (TARGET_ABSOLUTE_ABICALLS && mips_symbol_binds_local_p (x))\n-\treturn SYMBOL_ABSOLUTE;\n-\n       /* There are three cases to consider:\n \n \t    - o32 PIC (either with or without explicit relocs)\n@@ -1505,6 +1503,8 @@ mips_classify_symbol (rtx x, enum mips_symbol_context context ATTRIBUTE_UNUSED)\n       return SYMBOL_GOT_PAGE_OFST;\n     }\n \n+  if (TARGET_MIPS16 && context != SYMBOL_CONTEXT_CALL)\n+    return SYMBOL_FORCE_TO_MEM;\n   return SYMBOL_ABSOLUTE;\n }\n \n@@ -1560,6 +1560,7 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_context context,\n   switch (*symbol_type)\n     {\n     case SYMBOL_ABSOLUTE:\n+    case SYMBOL_FORCE_TO_MEM:\n     case SYMBOL_64_HIGH:\n     case SYMBOL_64_MID:\n     case SYMBOL_64_LOW:\n@@ -1682,8 +1683,6 @@ mips_symbolic_address_p (enum mips_symbol_type symbol_type,\n   switch (symbol_type)\n     {\n     case SYMBOL_ABSOLUTE:\n-      return !TARGET_MIPS16;\n-\n     case SYMBOL_GP_RELATIVE:\n       return true;\n \n@@ -1694,8 +1693,10 @@ mips_symbolic_address_p (enum mips_symbol_type symbol_type,\n     case SYMBOL_GOT_PAGE_OFST:\n       return true;\n \n+    case SYMBOL_FORCE_TO_MEM:\n     case SYMBOL_GOT_DISP:\n-      /* The address will have to be loaded from the GOT first.  */\n+      /* The address will have to be loaded from the constant pool\n+\t or GOT before it is used in an address.  */\n       return false;\n \n     case SYMBOL_GOTOFF_PAGE:\n@@ -1841,11 +1842,6 @@ mips_symbol_insns (enum mips_symbol_type type)\n   switch (type)\n     {\n     case SYMBOL_ABSOLUTE:\n-      /* In mips16 code, general symbols must be fetched from the\n-\t constant pool.  */\n-      if (TARGET_MIPS16)\n-\treturn 0;\n-\n       /* When using 64-bit symbols, we need 5 preparatory instructions,\n \t such as:\n \n@@ -1868,6 +1864,10 @@ mips_symbol_insns (enum mips_symbol_type type)\n \t extended instruction.  */\n       return 2;\n \n+    case SYMBOL_FORCE_TO_MEM:\n+      /* The constant must be loaded from the constant pool.  */\n+      return 0;\n+\n     case SYMBOL_GOT_PAGE_OFST:\n     case SYMBOL_GOT_DISP:\n       /* Unless -funit-at-a-time is in effect, we can't be sure whether"}]}