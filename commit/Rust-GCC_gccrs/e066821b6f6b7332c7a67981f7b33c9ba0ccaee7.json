{"sha": "e066821b6f6b7332c7a67981f7b33c9ba0ccaee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2NjgyMWI2ZjZiNzMzMmM3YTY3OTgxZjdiMzNjOWJhMGNjYWVlNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-12T17:46:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-12T17:46:21Z"}, "message": "libstdc++: Apply proposed resolution for LWG 3449 [PR95322]\n\nNow that the frontend bug PR96805 is fixed, we can cleanly apply the\nproposed resolution for this issue.\n\nThis slightly deviates from the proposed resolution by declaring _CI a\nmember of take_view instead of take_view::_Sentinel, since it doesn't\ndepend on anything within _Sentinel anymore.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95322\n\t* include/std/ranges (take_view::_CI): Define this alias\n\ttemplate as per LWG 3449 and remove ...\n\t(take_view::_Sentinel::_CI): ... this type alias.\n\t(take_view::_Sentinel::operator==): Adjust use of _CI\n\taccordingly.  Define a second overload that accepts an iterator\n\tof the opposite constness as per LWG 3449.\n\t(take_while_view::_Sentinel::operator==): Likewise.\n\t* testsuite/std/ranges/adaptors/95322.cc: Add tests for LWG 3449.", "tree": {"sha": "c5da81796b6a0a0069e3440a760abea0ed6e690b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5da81796b6a0a0069e3440a760abea0ed6e690b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7/comments", "author": null, "committer": null, "parents": [{"sha": "c840700852c69b2bf7a73df77d8d9f0658330dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c840700852c69b2bf7a73df77d8d9f0658330dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c840700852c69b2bf7a73df77d8d9f0658330dae"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "19bc01a3b3a656861453cdc313cea0209b60e498", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=e066821b6f6b7332c7a67981f7b33c9ba0ccaee7", "patch": "@@ -1662,13 +1662,15 @@ namespace views\n     class take_view : public view_interface<take_view<_Vp>>\n     {\n     private:\n+      template<bool _Const>\n+\tusing _CI = counted_iterator<\n+\t  iterator_t<__detail::__maybe_const_t<_Const, _Vp>>>;\n+\n       template<bool _Const>\n \tstruct _Sentinel\n \t{\n \tprivate:\n \t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n-\t  using _CI = counted_iterator<iterator_t<_Base>>;\n-\n \t  sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n \n \tpublic:\n@@ -1689,7 +1691,15 @@ namespace views\n \t  base() const\n \t  { return _M_end; }\n \n-\t  friend constexpr bool operator==(const _CI& __y, const _Sentinel& __x)\n+\t  friend constexpr bool\n+\t  operator==(const _CI<_Const>& __y, const _Sentinel& __x)\n+\t  { return __y.count() == 0 || __y.base() == __x._M_end; }\n+\n+\t  template<bool _OtherConst = !_Const,\n+\t\t   typename _Base2 = __detail::__maybe_const_t<_OtherConst, _Vp>>\n+\t    requires sentinel_for<sentinel_t<_Base>, iterator_t<_Base2>>\n+\t  friend constexpr bool\n+\t  operator==(const _CI<_OtherConst>& __y, const _Sentinel& __x)\n \t  { return __y.count() == 0 || __y.base() == __x._M_end; }\n \n \t  friend _Sentinel<!_Const>;\n@@ -1839,6 +1849,13 @@ namespace views\n \t  operator==(const iterator_t<_Base>& __x, const _Sentinel& __y)\n \t  { return __y._M_end == __x || !std::__invoke(*__y._M_pred, *__x); }\n \n+\t  template<bool _OtherConst = !_Const,\n+\t\t   typename _Base2 = __detail::__maybe_const_t<_OtherConst, _Vp>>\n+\t    requires sentinel_for<sentinel_t<_Base>, iterator_t<_Base2>>\n+\t  friend constexpr bool\n+\t  operator==(const iterator_t<_Base2>& __x, const _Sentinel& __y)\n+\t  { return __y._M_end == __x || !std::__invoke(*__y._M_pred, *__x); }\n+\n \t  friend _Sentinel<!_Const>;\n \t};\n "}, {"sha": "41785a0a8fa470179654efbbe46c6632b530b4ed", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/95322.cc", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e066821b6f6b7332c7a67981f7b33c9ba0ccaee7/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc?ref=e066821b6f6b7332c7a67981f7b33c9ba0ccaee7", "patch": "@@ -26,7 +26,7 @@ using __gnu_test::test_forward_range;\n void\n test01()\n {\n-  // PR libstdc++/95322 and LWG 3488\n+  // PR libstdc++/95322 and LWG 3448\n   int a[2]{1, 2};\n   test_forward_range<int> v{a};\n   auto view1 = v | std::views::take(2);\n@@ -51,8 +51,34 @@ test02()\n   VERIFY( !eq );\n }\n \n+void\n+test03()\n+{\n+  // LWG 3449, for take_view\n+  int a[2]{1, 2};\n+  test_forward_range<int> v{a};\n+  auto view1 = v | std::views::transform(std::identity{});\n+  auto view2 = view1 | std::views::take(2);\n+  const bool eq = std::ranges::cbegin(view2) == std::ranges::end(view2);\n+  VERIFY( !eq );\n+}\n+\n+void\n+test04()\n+{\n+  // LWG 3449, for take_while_view\n+  int a[2]{1, 2};\n+  test_forward_range<int> v{a};\n+  auto view1 = v | std::views::transform(std::identity{});\n+  auto view2 = view1 | std::views::take_while([] (int i) { return true; });\n+  const bool eq = std::ranges::cbegin(view2) == std::ranges::end(view2);\n+  VERIFY( !eq );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n+  test04();\n }"}]}