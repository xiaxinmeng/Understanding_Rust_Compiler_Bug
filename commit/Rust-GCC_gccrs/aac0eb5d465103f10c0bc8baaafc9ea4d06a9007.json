{"sha": "aac0eb5d465103f10c0bc8baaafc9ea4d06a9007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjMGViNWQ0NjUxMDNmMTBjMGJjOGJhYWFmYzllYTRkMDZhOTAwNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-23T23:35:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-23T23:35:18Z"}, "message": "[multiple changes]\n\n\n2002-01-23  Matt Kraai  <kraai@alumni.cmu.edu>\n\n\t* include/bits/locale_facets.tcc: Remove old comments.\n\n2002-01-23  Andreas Tobler  <toa@pop.agri.ch>\n\n\t* include/bits/locale_facets.tcc (__convert_to_v): Change template\n\tparameter to _Tv.\n\t(__convert_from_v): Same.\n\nFrom-SVN: r49156", "tree": {"sha": "f3277cb4b8ed12d01d17416518da07422b52549f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3277cb4b8ed12d01d17416518da07422b52549f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007/comments", "author": null, "committer": null, "parents": [{"sha": "039843087a884e96058fd0fcde72339974d49e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039843087a884e96058fd0fcde72339974d49e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039843087a884e96058fd0fcde72339974d49e81"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "57ffe1088bbba1370511a657497df8092a690ee3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aac0eb5d465103f10c0bc8baaafc9ea4d06a9007", "patch": "@@ -1,3 +1,13 @@\n+2002-01-23  Matt Kraai  <kraai@alumni.cmu.edu>\n+\n+\t* include/bits/locale_facets.tcc: Remove old comments.\n+\n+2002-01-23  Andreas Tobler  <toa@pop.agri.ch>\n+\n+\t* include/bits/locale_facets.tcc (__convert_to_v): Change template\n+\tparameter to _Tv.\n+\t(__convert_from_v): Same.\n+\t\n 2002-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_facets.h (num_get::_M_extract_int): Change"}, {"sha": "9cdcf019e40cc4fab2dd4f965d59e017d90c1071", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac0eb5d465103f10c0bc8baaafc9ea4d06a9007/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=aac0eb5d465103f10c0bc8baaafc9ea4d06a9007", "patch": "@@ -378,10 +378,6 @@ namespace std\n           // refer to a derived class.\n           string __xtrc;\n           int __base;\n-\t  // According to 18.2.1.2.9, digits10 is \"Number of base 10 digits\n-\t  // that can be represented without change\" so we have to add 1 to it\n-\t  // in order to obtain the max number of digits. The same for the\n-\t  // other do_get for integral types below.\n           __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n \n \t  unsigned long __ul; \n@@ -1849,18 +1845,18 @@ namespace std\n       return static_cast<long>(__val);\n     }\n \n-  // Convert string to numeric value of type T and store results.  \n+  // Convert string to numeric value of type _Tv and store results.  \n   // NB: This is specialized for all required types, there is no\n   // generic definition.\n-  template<typename _T>\n+  template<typename _Tv>\n     void\n-    __convert_to_v(const char* __in, _T& __out, ios_base::iostate& __err, \n+    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err, \n \t\t   const __c_locale& __cloc, int __base = 10);\n \n-  // Convert numeric value of type T to string and return length of string.\n-  template<typename _T>\n+  // Convert numeric value of type _Tv to string and return length of string.\n+  template<typename _Tv>\n     int\n-    __convert_from_v(char* __out, const char* __fmt, _T __v, \n+    __convert_from_v(char* __out, const char* __fmt, _Tv __v, \n \t\t     const __c_locale&, int __prec = -1)\n     {\n       int __ret;"}]}