{"sha": "105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1Y2UxMTNlY2IwNmQ0NzdmNGViZjg3NWM3ZjBmMWJiYzNlYTgyZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-11-11T04:38:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-11-11T04:38:40Z"}, "message": "* Fast indirect call support.\n\n\t* pa.h (TARGET_FAST_INDIRECT_CALLS): New target switch.\n\t(TARGET_SWITCHES): Add \"fast-indirect-calls\" and inverse.\n\t* pa.md (call_internal_reg, call_value_internal_reg): Generate\n\tappropriate code for TARGET_FAST_INDIRECT_CALLS.\n\nFrom-SVN: r8420", "tree": {"sha": "af757e92f212ec89bccd6ce11ff6ddb9ad1cfeb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af757e92f212ec89bccd6ce11ff6ddb9ad1cfeb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e/comments", "author": null, "committer": null, "parents": [{"sha": "6bb36601f1c5a8f758f29523d514f9e27ee711f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb36601f1c5a8f758f29523d514f9e27ee711f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb36601f1c5a8f758f29523d514f9e27ee711f8"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "36b7a8456f3606cd6af683b0ca0481ae8cf4dfab", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e", "patch": "@@ -47,6 +47,13 @@ extern int target_flags;\n \n #define TARGET_DISABLE_FPREGS (target_flags & 2)\n \n+/* Generate code which assumes that calls through function pointers will\n+   never cross a space boundary.  Such assumptions are generally safe for\n+   building kernels and statically linked executables.  Code compiled with\n+   this option will fail miserably if the executable is dynamically linked\n+   or uses nested functions!  */\n+#define TARGET_FAST_INDIRECT_CALLS (target_flags & 4)\n+\n /* Allow unconditional jumps in the delay slots of call instructions.  */\n #define TARGET_JUMP_IN_DELAY (target_flags & 8)\n \n@@ -89,6 +96,8 @@ extern int target_flags;\n    {\"pa-risc-1-1\", 1},\t\t\\\n    {\"disable-fpregs\", 2},\t\\\n    {\"no-disable-fpregs\", 2},\t\\\n+   {\"fast-indirect-calls\", 4},\t\\\n+   {\"no-fast-indirect-calls\", -4},\\\n    {\"jump-in-delay\", 8},\t\\\n    {\"no-jump-in-delay\", -8},\t\\\n    {\"long-calls\", 16},\t\t\\"}, {"sha": "60459ac1577198c88ec449eeb5e848bfb63ca6e9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=105ce113ecb06d477f4ebf875c7f0f1bbc3ea82e", "patch": "@@ -3202,6 +3202,9 @@\n   \"\"\n   \"*\n {\n+  if (TARGET_FAST_INDIRECT_CALLS)\n+    return \\\"blr 0,%%r2\\;bv,n 0(%r0)\\;ldo 4(%%r2),%%r2\\\";\n+\n   /* Yuk!  bl may not be able to reach $$dyncall.  */\n   if (TARGET_LONG_CALLS)\n     return \\\"copy %r0,%%r22\\;ldil L%%$$dyncall,%%r31\\;ldo R%%$$dyncall(%%r31),%%r31\\;blr 0,%%r2\\;bv,n 0(%%r31)\\;nop\\\";\n@@ -3290,6 +3293,9 @@\n   \"\"\n   \"*\n {\n+  if (TARGET_FAST_INDIRECT_CALLS)\n+    return \\\"blr 0,%%r2\\;bv,n 0(%r1)\\;ldo 4(%%r2),%%r2\\\";\n+\n   /* Yuk!  bl may not be able to reach $$dyncall.  */\n   if (TARGET_LONG_CALLS)\n     return \\\"copy %r1,%%r22\\;ldil L%%$$dyncall,%%r31\\;ldo R%%$$dyncall(%%r31),%%r31\\;blr 0,%%r2\\;bv,n 0(%%r31)\\;nop\\\";"}]}