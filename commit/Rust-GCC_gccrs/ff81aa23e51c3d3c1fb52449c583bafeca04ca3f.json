{"sha": "ff81aa23e51c3d3c1fb52449c583bafeca04ca3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4MWFhMjNlNTFjM2QzYzFmYjUyNDQ5YzU4M2JhZmVjYTA0Y2EzZg==", "commit": {"author": {"name": "Pete Steinmetz", "email": "steinmtz@us.ibm.com", "date": "2006-10-30T19:43:55Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2006-10-30T19:43:55Z"}, "message": "recog.c (store_data_bypass_p): Add support to allow IN_INSN to be a PARALLEL containing sets.\n\n\t* recog.c (store_data_bypass_p): Add support to allow IN_INSN to\n\tbe a PARALLEL containing sets.  Return false when out_pat is not\n\ta PARALLEL insn.\n\nFrom-SVN: r118199", "tree": {"sha": "4bdc4ff78f1ee12eb48985bce03975458389b445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bdc4ff78f1ee12eb48985bce03975458389b445"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f/comments", "author": {"login": "steinmtz", "id": 51826110, "node_id": "MDQ6VXNlcjUxODI2MTEw", "avatar_url": "https://avatars.githubusercontent.com/u/51826110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steinmtz", "html_url": "https://github.com/steinmtz", "followers_url": "https://api.github.com/users/steinmtz/followers", "following_url": "https://api.github.com/users/steinmtz/following{/other_user}", "gists_url": "https://api.github.com/users/steinmtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/steinmtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steinmtz/subscriptions", "organizations_url": "https://api.github.com/users/steinmtz/orgs", "repos_url": "https://api.github.com/users/steinmtz/repos", "events_url": "https://api.github.com/users/steinmtz/events{/privacy}", "received_events_url": "https://api.github.com/users/steinmtz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "779958a2002bc1247b7bd8ca54808d98791ac6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779958a2002bc1247b7bd8ca54808d98791ac6c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779958a2002bc1247b7bd8ca54808d98791ac6c3"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "c9b6244125b2ccb42307f77bed848c23bd52bee9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff81aa23e51c3d3c1fb52449c583bafeca04ca3f", "patch": "@@ -1,3 +1,9 @@\n+2006-10-30  Pete Steinmetz  <steinmtz@us.ibm.com>\n+\n+\t* recog.c (store_data_bypass_p): Add support to allow IN_INSN to\n+\tbe a PARALLEL containing sets.\tReturn false when out_pat is not\n+\ta PARALLEL insn.\n+\n 2006-10-30  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.md (mul<mode>3): Split into..."}, {"sha": "a3948a729e09ae7b1c402983ede93f820b8db55a", "filename": "gcc/recog.c", "status": "modified", "additions": 67, "deletions": 22, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff81aa23e51c3d3c1fb52449c583bafeca04ca3f/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=ff81aa23e51c3d3c1fb52449c583bafeca04ca3f", "patch": "@@ -3344,47 +3344,92 @@ peephole2_optimize (void)\n /* Common predicates for use with define_bypass.  */\n \n /* True if the dependency between OUT_INSN and IN_INSN is on the store\n-   data not the address operand(s) of the store.  IN_INSN must be\n-   single_set.  OUT_INSN must be either a single_set or a PARALLEL with\n-   SETs inside.  */\n+   data not the address operand(s) of the store.  IN_INSN and OUT_INSN\n+   must be either a single_set or a PARALLEL with SETs inside.  */\n \n int\n store_data_bypass_p (rtx out_insn, rtx in_insn)\n {\n   rtx out_set, in_set;\n+  rtx out_pat, in_pat;\n+  rtx out_exp, in_exp;\n+  int i, j;\n \n   in_set = single_set (in_insn);\n-  gcc_assert (in_set);\n-\n-  if (!MEM_P (SET_DEST (in_set)))\n-    return false;\n-\n-  out_set = single_set (out_insn);\n-  if (out_set)\n+  if (in_set)\n     {\n-      if (reg_mentioned_p (SET_DEST (out_set), SET_DEST (in_set)))\n+      if (!MEM_P (SET_DEST (in_set)))\n \treturn false;\n+\n+      out_set = single_set (out_insn);\n+      if (out_set)\n+        {\n+          if (reg_mentioned_p (SET_DEST (out_set), SET_DEST (in_set)))\n+            return false;\n+        }\n+      else\n+        {\n+          out_pat = PATTERN (out_insn);\n+\n+\t  if (GET_CODE (out_pat) != PARALLEL)\n+\t    return false;\n+\n+          for (i = 0; i < XVECLEN (out_pat, 0); i++)\n+          {\n+            out_exp = XVECEXP (out_pat, 0, i);\n+\n+            if (GET_CODE (out_exp) == CLOBBER)\n+              continue;\n+\n+            gcc_assert (GET_CODE (out_exp) == SET);\n+\n+            if (reg_mentioned_p (SET_DEST (out_exp), SET_DEST (in_set)))\n+              return false;\n+          }\n+      }\n     }\n   else\n     {\n-      rtx out_pat;\n-      int i;\n-\n-      out_pat = PATTERN (out_insn);\n-      gcc_assert (GET_CODE (out_pat) == PARALLEL);\n+      in_pat = PATTERN (in_insn);\n+      gcc_assert (GET_CODE (in_pat) == PARALLEL);\n \n-      for (i = 0; i < XVECLEN (out_pat, 0); i++)\n+      for (i = 0; i < XVECLEN (in_pat, 0); i++)\n \t{\n-\t  rtx exp = XVECEXP (out_pat, 0, i);\n+\t  in_exp = XVECEXP (in_pat, 0, i);\n \n-\t  if (GET_CODE (exp) == CLOBBER)\n+\t  if (GET_CODE (in_exp) == CLOBBER)\n \t    continue;\n \n-\t  gcc_assert (GET_CODE (exp) == SET);\n+\t  gcc_assert (GET_CODE (in_exp) == SET);\n \n-\t  if (reg_mentioned_p (SET_DEST (exp), SET_DEST (in_set)))\n+\t  if (!MEM_P (SET_DEST (in_exp)))\n \t    return false;\n-\t}\n+\n+          out_set = single_set (out_insn);\n+          if (out_set)\n+            {\n+              if (reg_mentioned_p (SET_DEST (out_set), SET_DEST (in_exp)))\n+                return false;\n+            }\n+          else\n+            {\n+              out_pat = PATTERN (out_insn);\n+              gcc_assert (GET_CODE (out_pat) == PARALLEL);\n+\n+              for (j = 0; j < XVECLEN (out_pat, 0); j++)\n+                {\n+                  out_exp = XVECEXP (out_pat, 0, j);\n+\n+                  if (GET_CODE (out_exp) == CLOBBER)\n+                    continue;\n+\n+                  gcc_assert (GET_CODE (out_exp) == SET);\n+\n+                  if (reg_mentioned_p (SET_DEST (out_exp), SET_DEST (in_exp)))\n+                    return false;\n+                }\n+            }\n+        }\n     }\n \n   return true;"}]}