{"sha": "bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjNjQ2YmZjMGZlNjdlMDY2NWMyY2IyZDM1MDMzOWNjMTBmMGI3ZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-04-20T16:13:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-04-20T16:13:12Z"}, "message": "re PR tree-optimization/26854 (Inordinate compile times on large routines)\n\n\n\tPR tree-optimization/26854\n\t* tree-ssa-dse.c (dse_optimize_stmt): Avoid num_imm_uses when\n\tchecking for zero or one use.\n\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Similarly.\n\t* tree-cfgcleanup.c (merge_phi_nodes): Similarly.\n\t* tree-ssa-reassoc.c (negate_value): Similarly.\n\t(reassociate_bb): Similarly.\n\nFrom-SVN: r113120", "tree": {"sha": "ffe834ca8d2aa7ec6195e65866e08637f5687da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffe834ca8d2aa7ec6195e65866e08637f5687da9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/comments", "author": null, "committer": null, "parents": [{"sha": "45c792f50b74194c1c3b1038929c1656971bea1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c792f50b74194c1c3b1038929c1656971bea1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c792f50b74194c1c3b1038929c1656971bea1b"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "8241b9882e17de5f76311f6c12d3b1b52b2bcce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "patch": "@@ -1,3 +1,13 @@\n+2006-04-20  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/26854\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Avoid num_imm_uses when\n+\tchecking for zero or one use.\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Similarly.\n+\t* tree-cfgcleanup.c (merge_phi_nodes): Similarly.\n+\t* tree-ssa-reassoc.c (negate_value): Similarly.\n+\t(reassociate_bb): Similarly.\n+\n 2006-04-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-pretty-print.c (pp_c_direct_abstract_declarator): Print"}, {"sha": "ab452c4af5a3afb96efc9c10c71c0c5f413806ec", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "patch": "@@ -765,13 +765,12 @@ merge_phi_nodes (void)\n \t  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t    {\n \t      tree result = PHI_RESULT (phi);\n-\t      int num_uses = num_imm_uses (result);\n \t      use_operand_p imm_use;\n \t      tree use_stmt;\n \n \t      /* If the PHI's result is never used, then we can just\n \t\t ignore it.  */\n-\t      if (num_uses == 0)\n+\t      if (has_zero_uses (result))\n \t\tcontinue;\n \n \t      /* Get the single use of the result of this PHI node.  */"}, {"sha": "d99d6a0866c4fda5a885ef24b1622520352481fe", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "patch": "@@ -2318,7 +2318,7 @@ propagate_rhs_into_lhs (tree stmt, tree lhs, tree rhs, bitmap interesting_names)\n \t The maximum number of times we can re-execute the loop is\n \t bounded by the maximum number of times a given SSA_NAME\n \t appears in a single statement.  */\n-      if (all && num_imm_uses (lhs) != 0)\n+      if (all && !has_zero_uses (lhs))\n \tgoto repeat;\n \n       /* If we were able to propagate away all uses of LHS, then"}, {"sha": "85be46961daeda54d2f9e1f9c517dede5a565b81", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "patch": "@@ -269,7 +269,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \n \t  /* If this virtual def does not have precisely one use, then\n \t     we will not be able to eliminate STMT.  */\n-\t  if (num_imm_uses (defvar) != 1)\n+\t  if (! has_single_use (defvar))\n \t    {\n \t      fail = true;\n \t      break;"}, {"sha": "477d8c8e407357e11cb2e5c74e4d454fce1171e8", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=bfc646bfc0fe67e0665c2cb2d350339cc10f0b7d", "patch": "@@ -1032,7 +1032,7 @@ negate_value (tree tonegate, block_stmt_iterator *bsi)\n   if (TREE_CODE (tonegate) == SSA_NAME\n       && TREE_CODE (negatedef) == MODIFY_EXPR\n       && TREE_CODE (TREE_OPERAND (negatedef, 0)) == SSA_NAME\n-      && num_imm_uses (TREE_OPERAND (negatedef, 0)) == 1\n+      && has_single_use (TREE_OPERAND (negatedef, 0))\n       && TREE_CODE (TREE_OPERAND (negatedef, 1)) == PLUS_EXPR)\n     {\n       block_stmt_iterator bsi;\n@@ -1331,7 +1331,7 @@ reassociate_bb (basic_block bb)\n \n \t      /* There may be no immediate uses left by the time we\n \t\t get here because we may have eliminated them all.  */\n-\t      if (TREE_CODE (lhs) == SSA_NAME && num_imm_uses (lhs) == 0)\n+\t      if (TREE_CODE (lhs) == SSA_NAME && has_zero_uses (lhs))\n \t\tcontinue;\n \n \t      TREE_VISITED (stmt) = 1;"}]}