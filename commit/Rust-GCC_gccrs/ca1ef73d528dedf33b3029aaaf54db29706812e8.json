{"sha": "ca1ef73d528dedf33b3029aaaf54db29706812e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExZWY3M2Q1MjhkZWRmMzNiMzAyOWFhYWY1NGRiMjk3MDY4MTJlOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-02-04T17:15:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-02-04T17:15:36Z"}, "message": "re PR ipa/79966 (run time more than twice slower when using -fipa-cp-clone)\n\n\n\tPR middle-end/79966\n\t* gfortran.dg/pr79966.f90: New testcase\n\nFrom-SVN: r257367", "tree": {"sha": "dccdbaa6b0468fc81234bee7eae3d45c56960661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dccdbaa6b0468fc81234bee7eae3d45c56960661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1ef73d528dedf33b3029aaaf54db29706812e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1ef73d528dedf33b3029aaaf54db29706812e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1ef73d528dedf33b3029aaaf54db29706812e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1ef73d528dedf33b3029aaaf54db29706812e8/comments", "author": null, "committer": null, "parents": [{"sha": "08df0ee287d3c67d84f73a8fbd73e50959c9f756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08df0ee287d3c67d84f73a8fbd73e50959c9f756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08df0ee287d3c67d84f73a8fbd73e50959c9f756"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "1c20a6aa93ed061557fcd72a4afa252e43d07aaa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ef73d528dedf33b3029aaaf54db29706812e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ef73d528dedf33b3029aaaf54db29706812e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca1ef73d528dedf33b3029aaaf54db29706812e8", "patch": "@@ -1,3 +1,8 @@\n+2018-02-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/79966\n+\t* gfortran.dg/pr79966.f90: New testcase\n+\n 2018-02-04  Dominique d'Humieres <dominiq@gcc.gnu.org>\n \n \tPR fortran/84094"}, {"sha": "eee43fb24977ff2c64e9cce3e5b207339134732f", "filename": "gcc/testsuite/gfortran.dg/pr79966.f90", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1ef73d528dedf33b3029aaaf54db29706812e8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr79966.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1ef73d528dedf33b3029aaaf54db29706812e8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr79966.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr79966.f90?ref=ca1ef73d528dedf33b3029aaaf54db29706812e8", "patch": "@@ -0,0 +1,112 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fpeel-loops -finline-functions -fipa-cp-clone -fdump-ipa-inline-details\" }\n+\n+module TensorProducts\n+  use, intrinsic :: iso_fortran_env\n+\n+  implicit none\n+\n+  integer, parameter :: dp = real64 ! KIND for double precision\n+\n+  type Vect3D\n+    real(dp) :: x, y, z\n+  end type\n+\n+contains\n+\n+  type(Vect3D) pure function MySum(array)\n+    type(Vect3D), intent(in) :: array(:,:)\n+\n+    mysum = Vect3D(sum(array%x), sum(array%y), sum(array%z))\n+  end function\n+\n+  pure subroutine GenerateGrid(N, M, width, height, centre, P)\n+    integer,      intent(in)  :: N, M\n+    real(dp),     intent(in)  :: width, height\n+    type(Vect3D), intent(in)  :: centre\n+    type(Vect3D), intent(out) :: P(N, M)\n+    real(dp)                  :: x(N), y(M)\n+    integer                   :: i, j\n+\n+    x = ([( i, i = 0, N-1 )] * width/(N-1)) - (width / 2) + centre%x\n+    y = ([( j, j = 0, M-1 )] * height/(M-1)) - (height / 2) + centre%y\n+    do concurrent (i = 1:N)\n+      do concurrent (j = 1:M)\n+        P(i, j) = Vect3D(x(i), y(j), centre%z)\n+      end do\n+    end do\n+    P(2:3,2:3)%z = P(2:3,2:3)%z + 1.0_dp*reshape([2,1,1,-2], [2,2])\n+  end subroutine\n+\n+  type(Vect3D) pure function TP_SUM(NU, D, NV) result(tensorproduct)\n+    ! (NU) D (NV)^T, row * matrix * column\n+    ! TODO (#6): TensorProduct: Investigate whether using DO loops triggers a temporary array.\n+    ! copied from Surfaces\n+    real(dp),     intent(in) :: NU(4), NV(4)\n+    type(Vect3D), intent(in) :: D(4,4)\n+    integer                  :: i, j\n+    type(Vect3D)             :: P(4,4)\n+\n+    do concurrent (i = 1:4)\n+      do concurrent (j = 1:4)\n+        P(i,j)%x = NU(i) * D(i,j)%x * NV(j)\n+        P(i,j)%y = NU(i) * D(i,j)%y * NV(j)\n+        P(i,j)%z = NU(i) * D(i,j)%z * NV(j)\n+      end do\n+    end do\n+    tensorproduct = MySum(P)\n+  end function\n+\n+  subroutine RandomSeed()\n+    integer                                 :: seed_size, clock, i\n+    integer,              allocatable, save :: seed(:)\n+\n+    if (.not. allocated(seed)) then\n+      call random_seed(size=seed_size)\n+      allocate(seed(seed_size))\n+      call system_clock(count=clock)\n+      seed = clock + 37 * [( i -1, i = 1, seed_size )]\n+      call random_seed(put=seed)\n+    end if\n+  end subroutine\n+\n+  subroutine RunTPTests()\n+    type(Vect3D)       :: tp, P(4,4)\n+    integer, parameter :: i_max = 10000000\n+    real(dp)           :: NU(4,i_max), NV(4,i_max)\n+    real(dp)           :: sum\n+    real               :: t(2)\n+    integer            :: i\n+\n+!    print *, 'This code variant uses explicit %x, %y and %z to represent the contents of Type(Vect3D).'\n+    call GenerateGrid(4, 4, 20.0_dp, 20.0_dp, Vect3D(0.0_dp,0.0_dp,20.0_dp), P)\n+    call RandomSeed()\n+!    call cpu_time(t(1))\n+    do i = 1, 4\n+      call random_number(NU(i,:))\n+      call random_number(NV(i,:))\n+    end do\n+!    call cpu_time(t(2))\n+!    print *, 'Random Numbers, time:  ', t(2)-t(1)\n+    sum = 0.0\n+    call cpu_time(t(1))\n+    do i = 1, i_max\n+      tp = TP_SUM(NU(:,i), P(1:4,1:4), NV(:,i))\n+      sum = sum + tp%x\n+    end do\n+    call cpu_time(t(2))\n+    print *, 'Using SUM, time:       ', t(2)-t(1)\n+    print *, 'sum =', sum\n+  end subroutine\n+\n+  end module\n+\n+  program Main\n+  use TensorProducts\n+\n+  implicit none\n+\n+  call RunTPTests()\n+  end program\n+\n+! { dg-final { scan-ipa-dump \"Inlined tp_sum into runtptests\" \"inline\" } }"}]}