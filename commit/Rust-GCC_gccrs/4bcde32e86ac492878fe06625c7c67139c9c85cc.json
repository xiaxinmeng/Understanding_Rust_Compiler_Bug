{"sha": "4bcde32e86ac492878fe06625c7c67139c9c85cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjZGUzMmU4NmFjNDkyODc4ZmUwNjYyNWM3YzY3MTM5YzljODVjYw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-03-21T06:09:25Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-03-21T06:09:25Z"}, "message": "Makefile.in (jcf-dump.o): Depend on $(CONFIG_H) $(srcdir)/../system.h and $(JAVA_TREE_H).\n\n        * Makefile.in (jcf-dump.o): Depend on $(CONFIG_H)\n        $(srcdir)/../system.h and $(JAVA_TREE_H).\n        (jcf-io.o): Depend on $(JAVA_TREE_H).\n        (mangle.o): Likewise.\n        * check-init.c (check_cond_init): Add static prototype.\n        * class.c (build_java_method_type, hashUtf8String,\n        make_field_value, get_dispatch_vector, get_dispatch_table,\n        append_gpp_mangled_type, mangle_static_field): Likewise.\n        (strLengthUtf8): Hide unused definition.\n        (hashUtf8String): Const-ify.\n        (make_field_value): Un-ANSI-fy.\n        * constants.c: Move inclusion of jcf.h above java-tree.h.\n        (set_constant_entry, find_class_or_string_constant,\n        find_name_and_type_constant, get_tag_node,\n        build_constant_data_ref): Add static prototype.\n        * decl.c (push_jvm_slot, builtin_function,\n        lookup_name_current_level): Likewise.\n        (builtin_function): Const-ify.\n        * except.c (expand_start_java_handler, expand_end_java_handler):\n        Add static prototype.\n        * expr.c (flush_quick_stack, push_value, pop_value,\n        java_stack_swap, java_stack_dup, build_java_athrow,\n        build_java_jsr, build_java_ret, expand_java_multianewarray,\n        expand_java_arraystore, expand_java_arrayload,\n        expand_java_array_length, build_java_monitor, expand_java_pushc,\n        expand_java_return, expand_java_NEW, expand_java_INSTANCEOF,\n        expand_java_CHECKCAST, expand_iinc, expand_java_binop, note_label,\n        expand_compare, expand_test, expand_cond, expand_java_goto,\n        expand_java_call, expand_java_ret, pop_arguments, expand_invoke,\n        expand_java_field_op, java_push_constant_from_pool): Likewise.\n        (decode_newarray_type, expand_iinc): Un-ANSI-fy.\n        (build_java_arraynull_check): Mark parameters `node' and `type'\n        with ATTRIBUTE_UNUSED.\n        (note_label): Likewise for parameter `current_pc'.\n        (expand_java_call, expand_java_ret): Hide unused definition.\n        * java-tree.h (make_class, build_constants_constructor,\n        java_set_exception_lang_code, pop_labeled_block, emit_handlers,\n        init_outgoing_cpool, register_class, emit_register_classes,\n        java_layout_seen_class_methods): Prototype.\n        (unicode_mangling_length): Const-ify.\n        (append_gpp_mangled_name, append_gpp_mangled_classtype,\n        emit_unicode_mangled_name, format_int, format_uint,\n        jcf_trim_old_input, jcf_print_utf8, jcf_print_char,\n        jcf_print_utf8_replace, open_class): Prototype.\n        * jcf-dump.c: Include \"config.h\", not <config.h>.  Don't include\n        <stdio.h>.  Include tree.h/java-tree.h.\n        (utf8_equal_string usage, process_class): Add static prototype.\n        (open_class): Don't prototype this here.\n        (utf8_equal_string): Match arguments to format specifiers.\n        (HANDLE_CODE_ATTRIBUTE, BRANCH, JSR, RET, LOOKUP_SWITCH,\n        TABLE_SWITCH, disassemble_method): Likewise.\n        * jcf-io.c: Include tree.h/java-tree.h.\n        (open_class, find_classfile, jcf_print_utf8,\n        jcf_print_utf8_replace): Const-ify.\n        * jcf-parse.c (parse_zip_file_entries, process_zip_dir,\n        parse_class_file): Add static prototype.\n        (find_in_current_zip): Match definition to existing static\n        prototype.\n        * jcf-write.c: Include jcf.h before tree.h/java-tree.h.\n        (alloc_chunk, append_chunk, append_chunk_copy, gen_jcf_label,\n        finish_jcf_block, define_jcf_label, get_jcf_label_here,\n        put_linenumber, localvar_alloc, localvar_free, get_access_flags,\n        write_chunks, adjust_typed_op, generate_bytecode_conditional,\n        generate_bytecode_return, perform_relocations, init_jcf_state,\n        init_jcf_method, release_jcf_state, generate_classfile):\n        Add static prototype.\n        (emit_unop): Mark parameter `type' with ATTRIBUTE_UNUSED.\n        (make_class_file_name): Const-ify.\n        * jcf.h (find_classfile): Const-ify.\n        * jv-scan.c (reset_report): Remove prototype.\n        * jvgenmain.c: Include jcf.h/tree.h/java-tree.h.\n        (error): Rewrite to allow varargs.\n        * lang.c (lang_f_options): Const-ify.\n        * lex.c (java_parse_escape_sequence): Add static prototype.\n        (java_allocate_new_line): Match definition to existing static\n        prototype.\n        * mangle.c Include tree.h/java-tree.h.\n        (unicode_mangling_length, emit_unicode_mangled_name,\n        append_gpp_mangled_name, append_gpp_mangled_classtype): Const-ify.\n        * parse.h (jdep_code): Remove trailing comma in enumeration.\n        (java_get_line_col): Move prototype outside of !JC1_LITE test.\n        (reset_report): Add prototype.\n        * verify.c (push_pending_label, merge_types): Add static\n        prototypes.\n        * zipfile.h (opendir_in_zip, open_in_zip): Prototype.\n\nFrom-SVN: r25878", "tree": {"sha": "9f1d36a20bdefbffdac55462d09c82614184fc52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f1d36a20bdefbffdac55462d09c82614184fc52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bcde32e86ac492878fe06625c7c67139c9c85cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcde32e86ac492878fe06625c7c67139c9c85cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bcde32e86ac492878fe06625c7c67139c9c85cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcde32e86ac492878fe06625c7c67139c9c85cc/comments", "author": null, "committer": null, "parents": [{"sha": "9f12f2f3d923f0374f41cf1b90c256bc6afd21e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f12f2f3d923f0374f41cf1b90c256bc6afd21e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f12f2f3d923f0374f41cf1b90c256bc6afd21e4"}], "stats": {"total": 571, "additions": 411, "deletions": 160}, "files": [{"sha": "db6871421559e4b6d762ff5f0c4cc89e43cb49be", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -1,3 +1,112 @@\n+Sun Mar 21 08:30:30 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (jcf-dump.o): Depend on $(CONFIG_H)\n+\t$(srcdir)/../system.h and $(JAVA_TREE_H).\n+\t(jcf-io.o): Depend on $(JAVA_TREE_H).\n+\t(mangle.o): Likewise.\n+\n+\t* check-init.c (check_cond_init): Add static prototype.\n+\n+\t* class.c (build_java_method_type, hashUtf8String,\n+\tmake_field_value, get_dispatch_vector, get_dispatch_table,\n+\tappend_gpp_mangled_type, mangle_static_field): Likewise.\n+\t(strLengthUtf8): Hide unused definition.\n+\t(hashUtf8String): Const-ify.\n+\t(make_field_value): Un-ANSI-fy.\n+\n+\t* constants.c: Move inclusion of jcf.h above java-tree.h.\n+\t(set_constant_entry, find_class_or_string_constant,\n+\tfind_name_and_type_constant, get_tag_node,\n+\tbuild_constant_data_ref): Add static prototype.\n+\n+\t* decl.c (push_jvm_slot, builtin_function,\n+\tlookup_name_current_level): Likewise.\n+\t(builtin_function): Const-ify.\n+\n+\t* except.c (expand_start_java_handler, expand_end_java_handler):\n+\tAdd static prototype.\n+\n+\t* expr.c (flush_quick_stack, push_value, pop_value,\n+\tjava_stack_swap, java_stack_dup, build_java_athrow,\n+\tbuild_java_jsr, build_java_ret, expand_java_multianewarray,\n+\texpand_java_arraystore, expand_java_arrayload,\n+\texpand_java_array_length, build_java_monitor, expand_java_pushc,\n+\texpand_java_return, expand_java_NEW, expand_java_INSTANCEOF,\n+\texpand_java_CHECKCAST, expand_iinc, expand_java_binop, note_label,\n+\texpand_compare, expand_test, expand_cond, expand_java_goto,\n+\texpand_java_call, expand_java_ret, pop_arguments, expand_invoke,\n+\texpand_java_field_op, java_push_constant_from_pool): Likewise.\n+\n+\t(decode_newarray_type, expand_iinc): Un-ANSI-fy.\n+\t(build_java_arraynull_check): Mark parameters `node' and `type'\n+\twith ATTRIBUTE_UNUSED.\n+\t(note_label): Likewise for parameter `current_pc'.\n+\t(expand_java_call, expand_java_ret): Hide unused definition.\n+\n+\t* java-tree.h (make_class, build_constants_constructor,\n+\tjava_set_exception_lang_code, pop_labeled_block, emit_handlers,\n+\tinit_outgoing_cpool, register_class, emit_register_classes,\n+\tjava_layout_seen_class_methods): Prototype.\n+\t(unicode_mangling_length): Const-ify.\n+\t(append_gpp_mangled_name, append_gpp_mangled_classtype,\n+\temit_unicode_mangled_name, format_int, format_uint,\n+\tjcf_trim_old_input, jcf_print_utf8, jcf_print_char,\n+\tjcf_print_utf8_replace, open_class): Prototype.\n+\n+\t* jcf-dump.c: Include \"config.h\", not <config.h>.  Don't include\n+\t<stdio.h>.  Include tree.h/java-tree.h.\n+\t(utf8_equal_string usage, process_class): Add static prototype.\n+\t(open_class): Don't prototype this here.\n+\t(utf8_equal_string): Match arguments to format specifiers.\n+\t(HANDLE_CODE_ATTRIBUTE, BRANCH, JSR, RET, LOOKUP_SWITCH,\n+\tTABLE_SWITCH, disassemble_method): Likewise.\n+\n+\t* jcf-io.c: Include tree.h/java-tree.h.\n+\t(open_class, find_classfile, jcf_print_utf8,\n+\tjcf_print_utf8_replace): Const-ify.\n+\n+\t* jcf-parse.c (parse_zip_file_entries, process_zip_dir,\n+\tparse_class_file): Add static prototype.\n+\t(find_in_current_zip): Match definition to existing static\n+\tprototype.\n+\t\n+\t* jcf-write.c: Include jcf.h before tree.h/java-tree.h.\n+\t(alloc_chunk, append_chunk, append_chunk_copy, gen_jcf_label,\n+\tfinish_jcf_block, define_jcf_label, get_jcf_label_here,\n+\tput_linenumber, localvar_alloc, localvar_free, get_access_flags,\n+\twrite_chunks, adjust_typed_op, generate_bytecode_conditional,\n+\tgenerate_bytecode_return, perform_relocations, init_jcf_state,\n+\tinit_jcf_method, release_jcf_state, generate_classfile):\n+ \tAdd static prototype.\n+\t(emit_unop): Mark parameter `type' with ATTRIBUTE_UNUSED.\n+\t(make_class_file_name): Const-ify.\n+\n+\t* jcf.h (find_classfile): Const-ify.\n+\n+\t* jv-scan.c (reset_report): Remove prototype.\n+\n+\t* jvgenmain.c: Include jcf.h/tree.h/java-tree.h.\n+\t(error): Rewrite to allow varargs.\n+\n+\t* lang.c (lang_f_options): Const-ify.\n+\n+\t* lex.c (java_parse_escape_sequence): Add static prototype.\n+  \t(java_allocate_new_line): Match definition to existing static\n+ \tprototype.\n+\t\n+\t* mangle.c Include tree.h/java-tree.h.\n+\t(unicode_mangling_length, emit_unicode_mangled_name,\n+\tappend_gpp_mangled_name, append_gpp_mangled_classtype): Const-ify.\n+\n+\t* parse.h (jdep_code): Remove trailing comma in enumeration.\n+\t(java_get_line_col): Move prototype outside of !JC1_LITE test.\n+\t(reset_report): Add prototype.\n+\n+\t* verify.c (push_pending_label, merge_types): Add static\n+\tprototypes.\n+\n+\t* zipfile.h (opendir_in_zip, open_in_zip): Prototype.\n+\t\n 1999-03-19  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (find_applicable_accessible_methods_list): Extend the"}, {"sha": "5e50dfe5b040d839ddd8b251ef545bd8ce77c837", "filename": "gcc/java/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMakefile.in?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -274,7 +274,8 @@ clean:  mostlyclean\n force:\n \n parse.o : $(PARSE_C) jcf-reader.c $(CONFIG_H) $(srcdir)/../system.h\n-jcf-dump.o : jcf-dump.c jcf-reader.c jcf.h javaop.h javaop.def\n+jcf-dump.o : $(CONFIG_H) $(srcdir)/../system.h $(JAVA_TREE_H) jcf-dump.c \\\n+  jcf-reader.c jcf.h javaop.h javaop.def\n gjavah.o : $(CONFIG_H) $(srcdir)/../system.h gjavah.c \\\n   jcf-reader.c jcf.h javaop.h\n buffer.o : buffer.c $(CONFIG_H) buffer.h $(srcdir)/../gansidecl.h \\\n@@ -297,7 +298,7 @@ expr.o : expr.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h $(srcdir)/../real.h \\\n   java-except.h java-except.h parse.h $(srcdir)/../toplev.h \\\n   $(srcdir)/../system.h\n jcf-depend.o : jcf-depend.c $(CONFIG_H) $(srcdir)/../system.h jcf.h\n-jcf-io.o : jcf-io.c $(CONFIG_H) $(srcdir)/../system.h\n+jcf-io.o : jcf-io.c $(CONFIG_H) $(srcdir)/../system.h $(JAVA_TREE_H)\n jcf-parse.o : jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) $(srcdir)/../flags.h \\\n   $(srcdir)/../input.h java-except.h $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h $(PARSE_H)\n@@ -307,7 +308,7 @@ jv-scan.o : jv-scan.c $(CONFIG_H) $(srcdir)/../system.h\n jvgenmain.o : jvgenmain.c $(CONFIG_H) $(srcdir)/../system.h\n lang.o : lang.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h $(srcdir)/../input.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../system.h\n-mangle.o : mangle.c $(CONFIG_H) jcf.h $(srcdir)/../system.h \\\n+mangle.o : mangle.c $(CONFIG_H) jcf.h $(JAVA_TREE_H) $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h\n parse-scan.o : $(CONFIG_H) $(srcdir)/../system.h $(srcdir)/../toplev.h\n typeck.o : typeck.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h convert.h \\"}, {"sha": "071faf74924c157f9f217e2ff0aa6cbecb32aaac", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -99,6 +99,7 @@ static tree wfl;\n \n static void check_bool_init PROTO ((tree, words, words, words));\n static void check_init PROTO ((tree, words));\n+static void check_cond_init PROTO ((tree, tree, tree, words, words, words));\n \n #if 0\n #define ALLOC_WORDS(NUM) ((word*) xmalloc ((NUM) * sizeof (word)))\n@@ -123,7 +124,7 @@ static void check_init PROTO ((tree, words));\n    definite assignment.\n    BEFORE, WHEN_FALSE, and WHEN_TRUE are as in check_bool_init. */\n \n-void\n+static void\n check_cond_init (test_exp, then_exp, else_exp,\n \t\t before, when_false, when_true)\n      tree test_exp, then_exp, else_exp;"}, {"sha": "cb418cd8b3c0c5eb5c67f2348bd702debdf21685", "filename": "gcc/java/class.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -38,6 +38,13 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n static tree mangle_class_field PROTO ((tree class));\n static tree make_method_value PROTO ((tree));\n+static tree build_java_method_type PROTO ((tree, tree, int));\n+static int32 hashUtf8String PROTO ((const char *, int));\n+static tree make_field_value PROTO ((tree));\n+static tree get_dispatch_vector PROTO ((tree));\n+static tree get_dispatch_table PROTO ((tree, tree));\n+static void append_gpp_mangled_type PROTO ((struct obstack *, tree));\n+static tree mangle_static_field PROTO ((tree));\n \n static rtx registerClass_libfunc;\n \n@@ -382,7 +389,7 @@ find_named_method (list, name)\n }\n #endif\n \n-tree\n+static tree\n build_java_method_type (fntype, this_class, access_flags)\n      tree fntype;\n      tree this_class;\n@@ -503,6 +510,7 @@ set_constant_value (field, constant)\n \n /* Count the number of Unicode chars encoded in a given Ut8 string. */\n \n+#if 0\n int\n strLengthUtf8 (str, len)\n      char *str;\n@@ -517,19 +525,20 @@ strLengthUtf8 (str, len)\n   }\n   return str_length;\n }\n+#endif\n \n \n /* Calculate a hash value for a string encoded in Utf8 format.\n  * This returns the same hash value as specified for java.lang.String.hashCode.\n  */\n \n-int32\n+static int32\n hashUtf8String (str, len)\n-     char *str;\n+     const char *str;\n      int len;\n {\n-  register unsigned char* ptr = (unsigned char*) str;\n-  register unsigned char *limit = ptr + len;\n+  register const unsigned char* ptr = (const unsigned char*) str;\n+  register const unsigned char *limit = ptr + len;\n   int32 hash = 0;\n   for (; ptr < limit;)\n     {\n@@ -841,8 +850,9 @@ get_access_flags_from_decl (decl)\n   abort ();\n }\n \n-tree\n-make_field_value (tree fdecl)\n+static tree\n+make_field_value (fdecl)\n+  tree fdecl;\n {\n   tree finit, info;\n   int bsize, flags;\n@@ -917,7 +927,7 @@ make_method_value (mdecl)\n   return minit;\n }\n \n-tree\n+static tree\n get_dispatch_vector (type)\n      tree type;\n {\n@@ -950,7 +960,7 @@ get_dispatch_vector (type)\n   return vtable;\n }\n \n-tree\n+static tree\n get_dispatch_table (type, this_class_addr)\n      tree type, this_class_addr;\n {\n@@ -1258,7 +1268,7 @@ is_compiled_class (class)\n \n /* Append the mangled name of TYPE onto OBSTACK. */\n \n-void\n+static void\n append_gpp_mangled_type (obstack, type)\n      struct obstack *obstack;\n      tree type;\n@@ -1333,7 +1343,7 @@ mangle_class_field (class)\n \n /* Build the mangled (assembly-level) name of the static field FIELD. */\n \n-tree\n+static tree\n mangle_static_field (field)\n      tree field;\n {"}, {"sha": "a1f820e0dd2a4dbfa4814f784c0a0cf25a6ac04b", "filename": "gcc/java/constants.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -23,16 +23,22 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"jcf.h\"\n #include \"tree.h\"\n #include \"java-tree.h\"\n-#include \"jcf.h\"\n #include \"toplev.h\"\n \n extern struct obstack permanent_obstack;\n \n+static void set_constant_entry PROTO ((CPool *, int, int, jword));\n+static int find_class_or_string_constant PROTO ((CPool *, int, tree));\n+static int find_name_and_type_constant PROTO ((CPool *, tree, tree));\n+static tree get_tag_node PROTO ((int));\n+static tree build_constant_data_ref PROTO ((void));\n+\n /* Set the INDEX'th constant in CPOOL to have the given TAG and VALUE. */\n \n-void\n+static void\n set_constant_entry (cpool, index, tag, value)\n      CPool *cpool;\n      int index;\n@@ -113,7 +119,7 @@ find_utf8_constant (cpool, name)\n   return find_constant1 (cpool, CONSTANT_Utf8, (jword) name);\n }\n \n-int\n+static int\n find_class_or_string_constant (cpool, tag, name)\n      CPool *cpool;\n      int tag;\n@@ -155,7 +161,7 @@ find_string_constant (cpool, string)\n /* Find (or create) a CONSTANT_NameAndType matching NAME and TYPE.\n    Return its index in the constant pool CPOOL. */\n \n-int\n+static int\n find_name_and_type_constant (cpool, name, type)\n      CPool *cpool;\n      tree name;\n@@ -316,7 +322,7 @@ tree current_constant_pool_data_ref;\n /* A Cache for build_int_2 (CONSTANT_XXX, 0). */\n static tree tag_nodes[13];\n \n-tree\n+static tree\n get_tag_node (tag)\n      int tag;\n {\n@@ -378,7 +384,7 @@ alloc_class_constant (clas)\n \n /* Return a reference to the data array of the current constant pool. */\n \n-tree\n+static tree\n build_constant_data_ref ()\n {\n   if (current_constant_pool_data_ref == NULL_TREE)"}, {"sha": "02993d9f9f15030831006fb2d3173d404360a387", "filename": "gcc/java/decl.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -33,6 +33,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"jcf.h\"\n #include \"toplev.h\"\n \n+static tree push_jvm_slot PROTO ((int, tree));\n+static tree builtin_function PROTO ((const char *, tree,\n+\t\t\t\t     enum built_in_function, const char *));\n+static tree lookup_name_current_level PROTO ((tree));\n+\n #ifndef INT_TYPE_SIZE\n #define INT_TYPE_SIZE BITS_PER_WORD\n #endif\n@@ -55,7 +60,7 @@ tree pending_local_decls = NULL_TREE;\n /* Push a local variable or stack slot into the decl_map,\n    and assign it an rtl. */\n \n-tree\n+static tree\n push_jvm_slot (index, decl)\n      int index;\n      tree decl;\n@@ -396,12 +401,12 @@ tree integer_negative_one_node;\n    If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n    the name to be called if we can't opencode the function.  */\n \n-tree\n+static tree\n builtin_function (name, type, function_code, library_name)\n-     char *name;\n+     const char *name;\n      tree type;\n      enum built_in_function function_code;\n-     char *library_name;\n+     const char *library_name;\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n@@ -811,7 +816,7 @@ lookup_name (name)\n /* Similar to `lookup_name' but look only at current binding level and\n    the previous one if its the parameter level.  */\n \n-tree\n+static tree\n lookup_name_current_level (name)\n      tree name;\n {"}, {"sha": "8fbf0b60e0633853e7860a90e9a9af1ac0aef7c0", "filename": "gcc/java/except.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -36,6 +36,9 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"eh-common.h\"\n #include \"toplev.h\"\n \n+static void expand_start_java_handler PROTO ((struct eh_range *));\n+static void expand_end_java_handler PROTO ((struct eh_range *));\n+\n extern struct obstack permanent_obstack;\n \n struct eh_range *current_method_handlers;\n@@ -182,7 +185,7 @@ add_handler (start_pc, end_pc, handler, type)\n \n \n /* if there are any handlers for this range, issue start of region */\n-void\n+static void\n expand_start_java_handler (range)\n   struct eh_range *range ATTRIBUTE_UNUSED;\n {\n@@ -217,7 +220,7 @@ prepare_eh_table_type (type)\n \n /* if there are any handlers for this range, isssue end of range,\n    and then all handler blocks */\n-void\n+static void\n expand_end_java_handler (range)\n      struct eh_range *range;\n {"}, {"sha": "268861d68a4bc27b89bda32e32d44073f299d09c", "filename": "gcc/java/expr.c", "status": "modified", "additions": 79, "deletions": 39, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -40,6 +40,40 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n #include \"except.h\"\n \n+static void flush_quick_stack PROTO ((void));\n+static void push_value PROTO ((tree));\n+static tree pop_value PROTO ((tree));\n+static void java_stack_swap PROTO ((void));\n+static void java_stack_dup PROTO ((int, int));\n+static tree build_java_athrow PROTO ((tree));\n+static void build_java_jsr PROTO ((tree, tree));\n+static void build_java_ret PROTO ((tree));\n+static void expand_java_multianewarray PROTO ((tree, int));\n+static void expand_java_arraystore PROTO ((tree));\n+static void expand_java_arrayload PROTO ((tree));\n+static void expand_java_array_length PROTO ((void));\n+static tree build_java_monitor PROTO ((tree, tree));\n+static void expand_java_pushc PROTO ((int, tree));\n+static void expand_java_return PROTO ((tree));\n+static void expand_java_NEW PROTO ((tree));\n+static void expand_java_INSTANCEOF PROTO ((tree));\n+static void expand_java_CHECKCAST PROTO ((tree));\n+static void expand_iinc PROTO ((unsigned int, int, int));\n+static void expand_java_binop PROTO ((tree, enum tree_code));\n+static void note_label PROTO ((int, int));\n+static void expand_compare PROTO ((enum tree_code, tree, tree, int));\n+static void expand_test PROTO ((enum tree_code, tree, int));\n+static void expand_cond PROTO ((enum tree_code, tree, int));\n+static void expand_java_goto PROTO ((int));\n+#if 0\n+static void expand_java_call PROTO ((int, int));\n+static void expand_java_ret PROTO ((tree)); \n+#endif\n+static tree pop_arguments PROTO ((tree)); \n+static void expand_invoke PROTO ((int, int, int)); \n+static void expand_java_field_op PROTO ((int, int, int)); \n+static void java_push_constant_from_pool PROTO ((struct JCF *, int)); \n+ \n static tree operand_type[59];\n extern struct obstack permanent_obstack;\n \n@@ -168,7 +202,7 @@ unhand_expr (expr)\n    that the expression for a slot may contain decls for stack slots with\n    higher (or the same) index, but not lower. */\n \n-void\n+static void\n flush_quick_stack ()\n {\n   int stack_index = stack_pointer;\n@@ -216,7 +250,7 @@ push_type (type)\n     stack_type_map[stack_pointer++] = TYPE_SECOND;\n }\n \n-void\n+static void\n push_value (value)\n      tree value;\n {\n@@ -353,7 +387,7 @@ can_widen_reference_to (source_type, target_type)\n     }\n }\n \n-tree\n+static tree\n pop_value (type)\n      tree type;\n {\n@@ -374,7 +408,7 @@ pop_value (type)\n \n /* Pop and discrad the top COUNT stack slots. */\n \n-void\n+static void\n java_stack_pop (count)\n      int count;\n {\n@@ -398,7 +432,7 @@ java_stack_pop (count)\n \n /* Implement the 'swap' operator (to swap two top stack slots). */\n \n-void\n+static void\n java_stack_swap ()\n {\n   tree type1, type2;\n@@ -422,7 +456,7 @@ java_stack_swap ()\n   stack_type_map[stack_pointer - 2] = type1;\n }\n \n-void\n+static void\n java_stack_dup (size, offset)\n      int size, offset;\n {\n@@ -467,7 +501,7 @@ java_stack_dup (size, offset)\n \n /* Calls _Jv_Throw.  Discard the contents of the value stack. */\n \n-tree\n+static tree\n build_java_athrow (node)\n     tree node;\n {\n@@ -485,7 +519,7 @@ build_java_athrow (node)\n \n /* Implementation for jsr/ret */\n \n-void\n+static void\n build_java_jsr (where, ret)\n     tree where;\n     tree ret;\n@@ -497,7 +531,7 @@ build_java_jsr (where, ret)\n   expand_label (ret);\n }\n \n-void\n+static void\n build_java_ret (location)\n   tree location;\n {\n@@ -515,7 +549,8 @@ build_java_ret (location)\n               size_int (BITS_PER_UNIT))\n \n tree\n-decode_newarray_type  (int atype)\n+decode_newarray_type (atype)\n+  int atype;\n {\n   switch (atype)\n     {\n@@ -599,9 +634,9 @@ build_java_array_length_access (node)\n \n tree\n build_java_arraynull_check (node, expr, type)\n-    tree node;\t\t\t\n-    tree expr;\t\t\t\n-    tree type;\t\t\t\n+    tree node ATTRIBUTE_UNUSED;\n+    tree expr;\n+    tree type ATTRIBUTE_UNUSED;\n {\n #if 0\n   static int java_array_access_throws_null_exception = 0;\n@@ -768,7 +803,7 @@ build_new_array (type, length)\n    class pointer, a number of dimensions and the matching number of\n    dimensions. The argument list is NULL terminated.  */\n \n-void\n+static void\n expand_java_multianewarray (class_type, ndim)\n     tree class_type;\n     int  ndim;\n@@ -798,7 +833,7 @@ expand_java_multianewarray (class_type, ndim)\n     to make sure that the RHS can be assigned to the array element\n     type. It is not necessary to generate this code if ARRAY is final.  */\n \n-void\n+static void\n expand_java_arraystore (rhs_type_node)\n      tree rhs_type_node;\n {\n@@ -840,7 +875,7 @@ expand_java_arraystore (rhs_type_node)\n    BOOLEAN/SHORT, we push a promoted type back to the stack.\n */\n \n-void\n+static void\n expand_java_arrayload (lhs_type_node )\n     tree lhs_type_node;\n {\n@@ -864,7 +899,7 @@ expand_java_arrayload (lhs_type_node )\n /* Expands .length. Makes sure that we deal with and array and may expand\n    a NULL check on the array object.  */\n \n-void\n+static void\n expand_java_array_length ()\n {\n   tree array  = pop_value (ptr_type_node);\n@@ -876,7 +911,7 @@ expand_java_array_length ()\n /* Emit code for the call to _Jv_Monitor{Enter,Exit}. CALL can be\n    either soft_monitorenter_node or soft_monitorexit_node.  */\n \n-tree\n+static tree\n build_java_monitor (call, object)\n     tree call;\n     tree object;\n@@ -890,7 +925,7 @@ build_java_monitor (call, object)\n \n /* Emit code for one of the PUSHC instructions. */\n \n-void\n+static void\n expand_java_pushc (ival, type)\n      int ival;\n      tree type;\n@@ -918,7 +953,7 @@ expand_java_pushc (ival, type)\n   push_value (value);\n }\n \n-void\n+static void\n expand_java_return (type)\n      tree type;\n {\n@@ -941,7 +976,7 @@ build_address_of (value)\n   return build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (value)), value);\n }\n \n-void\n+static void\n expand_java_NEW (type)\n      tree type;\n {\n@@ -956,7 +991,7 @@ expand_java_NEW (type)\n \t\t     NULL_TREE));\n }\n \n-void\n+static void\n expand_java_INSTANCEOF (type)\n      tree type;\n {\n@@ -970,7 +1005,7 @@ expand_java_INSTANCEOF (type)\n   push_value (value);\n }\n \n-void\n+static void\n expand_java_CHECKCAST (type)\n      tree type;\n {\n@@ -983,8 +1018,11 @@ expand_java_CHECKCAST (type)\n   push_value (value);\n }\n \n-void\n-expand_iinc (unsigned int local_var_index, int ival, int pc)\n+static void\n+expand_iinc (local_var_index, ival, pc)\n+     unsigned int local_var_index;\n+     int ival;\n+     int pc;\n {\n     tree local_var, res;\n     tree constant_value;\n@@ -1070,7 +1108,7 @@ build_java_binop (op, type, arg1, arg2)\n   return fold (build (op, type, arg1, arg2));\n }\n \n-void\n+static void\n expand_java_binop (type, op)\n      tree type;  enum tree_code op;\n {\n@@ -1205,9 +1243,9 @@ create_label_decl (name)\n /* This maps a bytecode offset (PC) to various flags. */\n char *instruction_bits;\n \n-void\n+static void\n note_label (current_pc, target_pc)\n-     int current_pc, target_pc;\n+     int current_pc ATTRIBUTE_UNUSED, target_pc;\n {\n   lookup_label (target_pc);\n   instruction_bits [target_pc] |= BCODE_JUMP_TARGET;\n@@ -1216,7 +1254,7 @@ note_label (current_pc, target_pc)\n /* Emit code to jump to TARGET_PC if VALUE1 CONDITION VALUE2,\n    where CONDITION is one of one the compare operators. */\n \n-void\n+static void\n expand_compare (condition, value1, value2, target_pc)\n      enum tree_code condition;\n      tree value1, value2;\n@@ -1231,7 +1269,7 @@ expand_compare (condition, value1, value2, target_pc)\n \n /* Emit code for a TEST-type opcode. */\n \n-void\n+static void\n expand_test (condition, type, target_pc)\n      enum tree_code condition;\n      tree type;\n@@ -1246,7 +1284,7 @@ expand_test (condition, type, target_pc)\n \n /* Emit code for a COND-type opcode. */\n \n-void\n+static void\n expand_cond (condition, type, target_pc)\n      enum tree_code condition;\n      tree type;\n@@ -1261,7 +1299,7 @@ expand_cond (condition, type, target_pc)\n   expand_compare (condition, value1, value2, target_pc);\n }\n \n-void\n+static void\n expand_java_goto (target_pc)\n      int target_pc;\n {\n@@ -1270,7 +1308,8 @@ expand_java_goto (target_pc)\n   expand_goto (target_label);\n }\n \n-void\n+#if 0\n+static void\n expand_java_call (target_pc, return_address)\n      int target_pc, return_address;\n {\n@@ -1281,9 +1320,9 @@ expand_java_call (target_pc, return_address)\n   expand_goto (target_label);\n }\n \n-void\n+static void\n expand_java_ret (return_address)\n-     tree return_address;\n+     tree return_address ATTRIBUTE_UNUSED;\n {\n   warning (\"ret instruction not implemented\");\n #if 0\n@@ -1292,6 +1331,7 @@ expand_java_ret (return_address)\n   expand_goto (target_label);\n #endif\n }\n+#endif\n \n /* Recursive helper function to pop argument types during verifiation. */\n \n@@ -1310,7 +1350,7 @@ pop_argument_types (arg_types)\n   abort ();\n }\n \n-tree\n+static tree\n pop_arguments (arg_types)\n      tree arg_types;\n {\n@@ -1492,7 +1532,7 @@ build_invokeinterface (dtable, method_name, method_signature)\n    METHOD_REF_INDEX is an index into the constant pool.\n    NARGS is the number of arguments, or -1 if not specified. */\n \n-void\n+static void\n expand_invoke (opcode, method_ref_index, nargs)\n      int opcode;\n      int method_ref_index;\n@@ -1599,7 +1639,7 @@ expand_invoke (opcode, method_ref_index, nargs)\n    IS_PUTTING is 1 for putting into a field;  0 for getting from the field.\n    FIELD_REF_INDEX is an index into the constant pool.  */\n \n-void\n+static void\n expand_java_field_op (is_static, is_putting, field_ref_index)\n      int is_static;\n      int is_putting;\n@@ -2131,7 +2171,7 @@ expand_byte_code (jcf, method)\n     } /* for */\n }\n \n-void\n+static void\n java_push_constant_from_pool (jcf, index)\n      JCF *jcf;\n      int index;"}, {"sha": "b9501ad8b6621e2642a3721b2ed355cb4997bb2d", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -482,19 +482,18 @@ extern void jcf_parse PROTO ((struct JCF*));\n extern tree add_field PROTO ((tree, tree, tree, int));\n extern tree add_method PROTO ((tree, int, tree, tree));\n extern tree add_method_1 PROTO ((tree, int, tree, tree));\n-extern tree make_class ();\n+extern tree make_class PROTO ((void));\n extern tree push_class PROTO ((tree, tree));\n extern tree unmangle_classname PROTO ((const char *name, int name_length));\n extern tree parse_signature_string PROTO ((const unsigned char *, int));\n extern tree get_type_from_signature PROTO ((tree));\n extern void layout_class PROTO ((tree));\n extern tree layout_class_method PROTO ((tree, tree, tree, tree));\n extern void layout_class_methods PROTO ((tree));\n-extern tree make_class ();\n extern tree build_class_ref PROTO ((tree));\n extern tree build_dtable_decl PROTO ((tree));\n extern tree build_internal_class_name PROTO ((tree));\n-extern tree build_constants_constructor ();\n+extern tree build_constants_constructor PROTO ((void));\n extern tree build_ref_from_constant_pool PROTO ((int));\n extern tree build_utf8_ref PROTO ((tree));\n extern tree ident_subst PROTO ((const char*, int,\n@@ -541,9 +540,9 @@ extern tree build_java_arraynull_check PROTO ((tree, tree, tree));\n extern tree create_label_decl PROTO ((tree));\n extern void push_labeled_block PROTO ((tree));\n extern tree prepare_eh_table_type PROTO ((tree));\n-extern void java_set_exception_lang_code PROTO (());\n+extern void java_set_exception_lang_code PROTO ((void));\n extern tree generate_name PROTO ((void));\n-extern void pop_labeled_block PROTO (());\n+extern void pop_labeled_block PROTO ((void));\n extern char *lang_printable_name PROTO ((tree, int));\n extern tree maybe_add_interface PROTO ((tree, tree));\n extern void set_super_info PROTO ((int, tree, tree, int));\n@@ -552,12 +551,12 @@ extern int interface_of_p PROTO ((tree, tree));\n extern int inherits_from_p PROTO ((tree, tree));\n extern void complete_start_java_method PROTO ((tree));\n extern tree build_result_decl PROTO ((tree));\n-extern void emit_handlers PROTO (());\n-extern void init_outgoing_cpool PROTO (());\n+extern void emit_handlers PROTO ((void));\n+extern void init_outgoing_cpool PROTO ((void));\n extern void make_class_data PROTO ((tree));\n-extern void register_class PROTO (());\n+extern void register_class PROTO ((void));\n extern int alloc_name_constant PROTO ((int, tree));\n-extern void emit_register_classes PROTO (());\n+extern void emit_register_classes PROTO ((void));\n extern void lang_init_source PROTO ((int));\n extern void write_classfile PROTO ((tree));\n extern char *print_int_node PROTO ((tree));\n@@ -566,12 +565,12 @@ extern void parse_error_context PVPROTO ((tree cl, const char *, ...))\n extern tree build_primtype_type_ref PROTO ((char *));\n extern tree java_get_real_method_name PROTO ((tree));\n extern void finish_class PROTO ((tree));\n-extern void java_layout_seen_class_methods PROTO (());\n+extern void java_layout_seen_class_methods PROTO ((void));\n extern void check_for_initialization PROTO ((tree));\n \n extern tree pushdecl_top_level PROTO ((tree));\n extern int alloc_class_constant PROTO ((tree));\n-extern int unicode_mangling_length PROTO ((char *, int));\n+extern int unicode_mangling_length PROTO ((const char *, int));\n extern void init_expr_processing PROTO ((void));\n extern void push_super_field PROTO ((tree, tree));\n extern void init_class_processing PROTO ((void));\n@@ -586,8 +585,9 @@ extern int merge_type_state PROTO ((tree));\n extern void push_type PROTO ((tree));\n extern void load_type_state PROTO ((tree));\n extern void add_interface PROTO ((tree, tree));\n-extern void append_gpp_mangled_classtype PROTO ((struct obstack *, char *));\n-extern void emit_unicode_mangled_name PROTO ((struct obstack *, char *, int));\n+extern void append_gpp_mangled_name PROTO ((struct obstack *, const char *, int));\n+extern void append_gpp_mangled_classtype PROTO ((struct obstack *, const char *));\n+extern void emit_unicode_mangled_name PROTO ((struct obstack *, const char *, int));\n extern tree force_evaluation_order PROTO ((tree));\n extern int verify_constant_pool PROTO ((struct JCF *));\n extern void start_java_method PROTO ((tree));\n@@ -608,6 +608,22 @@ extern int find_methodref_index PROTO ((struct CPool *, tree));\n extern void write_constant_pool PROTO ((struct CPool *, unsigned char *, int));\n extern int count_constant_pool_bytes PROTO ((struct CPool *));\n extern int encode_newarray_type PROTO ((tree));\n+#ifdef uint64\n+extern void format_int PROTO ((char *, jlong, int));\n+extern void format_uint PROTO ((char *, uint64, int));\n+#endif\n+extern void jcf_trim_old_input PROTO ((struct JCF *));\n+#ifdef BUFSIZ\n+extern void jcf_print_utf8 PROTO ((FILE *, const unsigned char *, int));\n+extern void jcf_print_char PROTO ((FILE *, int));\n+extern void jcf_print_utf8_replace PROTO ((FILE *, const unsigned char *,\n+\t\t\t\t\t   int, int, int));\n+# if JCF_USE_STDIO\n+extern char* open_class PROTO ((char *, struct JCF *, FILE *, const char *));\n+# else\n+extern char* open_class PROTO ((char *, struct JCF *, int, const char *));\n+# endif /* JCF_USE_STDIO */\n+#endif\n \n /* Access flags etc for a method (a FUNCTION_DECL): */\n "}, {"sha": "32475920c18438a3f1a67f13a8f3d7f639cc005e", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -46,11 +46,12 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n  */\n     \n \n-#include <config.h>\n+#include \"config.h\"\n #include \"system.h\"\n \n-#include <stdio.h>\n #include \"jcf.h\"\n+#include \"tree.h\"\n+#include \"java-tree.h\"\n \n /* Outout file. */\n FILE *out;\n@@ -84,15 +85,16 @@ static void print_constant_ref PROTO ((FILE *, JCF *, int));\n static void disassemble_method PROTO ((JCF*, unsigned char *, int));\n static void print_name PROTO ((FILE*, JCF*, int));\n static void print_signature PROTO ((FILE*, JCF*, int, int));\n+static int utf8_equal_string PROTO ((struct JCF*, int, const char *));\n+static int usage PROTO ((void));\n+static void process_class PROTO ((struct JCF *));\n \n #define PRINT_SIGNATURE_RESULT_ONLY 1\n #define PRINT_SIGNATURE_ARGS_ONLY 2\n \n-extern char* open_class();\n-\n-int\n+static int\n DEFUN(utf8_equal_string, (jcf, index, value),\n-      JCF *jcf AND int index AND char * value)\n+      JCF *jcf AND int index AND const char * value)\n {\n   if (CPOOL_INDEX_IN_RANGE (&jcf->cpool, index)\n       && JPOOL_TAG (jcf, index) == CONSTANT_Utf8)\n@@ -109,8 +111,8 @@ DEFUN(utf8_equal_string, (jcf, index, value),\n   this_class_index = 0; \\\n   if (flag_print_class_info) \\\n     fprintf (out, \\\n-             \"Magic number: 0x%0x, minor_version: %d, major_version: %d.\\n\", \\\n-\t     MAGIC, MINOR, MAJOR)\n+             \"Magic number: 0x%0lx, minor_version: %ld, major_version: %ld.\\n\",\\\n+\t     (long) MAGIC, (long) MINOR, (long) MAJOR)\n \n #define HANDLE_START_CONSTANT_POOL(COUNT) \\\n   if (flag_print_constant_pool) \\\n@@ -238,8 +240,8 @@ DEFUN(utf8_equal_string, (jcf, index, value),\n \n #define HANDLE_CODE_ATTRIBUTE(MAX_STACK, MAX_LOCALS, CODE_LENGTH) \\\n { COMMON_HANDLE_ATTRIBUTE(JCF, attribute_name, attribute_length); \\\n-  fprintf (out, \", max_stack:%d, max_locals:%d, code_length:%d\\n\", \\\n-    MAX_STACK, MAX_LOCALS, CODE_LENGTH); \\\n+  fprintf (out, \", max_stack:%ld, max_locals:%ld, code_length:%ld\\n\", \\\n+    (long) MAX_STACK, (long) MAX_LOCALS, (long) CODE_LENGTH); \\\n   disassemble_method (jcf, jcf->read_ptr, CODE_LENGTH); }\n \n #define HANDLE_EXCEPTION_TABLE(ENTRIES, COUNT) \\\n@@ -345,7 +347,7 @@ DEFUN(print_name, (stream, jcf, name_index),\n /* If the type of the constant at INDEX matches EXPECTED,\n    print it tersely, otherwise more verbosely. */\n \n-void\n+static void\n DEFUN(print_constant_terse, (out, jcf, index, expected),\n       FILE *out AND JCF *jcf AND int index AND int expected)\n {\n@@ -656,14 +658,14 @@ DEFUN(print_exception_table, (jcf, entries, count),\n \n #include \"jcf-reader.c\"\n \n-int\n+static int\n DEFUN (usage, (), )\n {\n   fprintf (stderr, \"Usage: jcf-dump [-o outputfile] [-c] classname\\n\");\n   exit(1);\n }\n \n-void\n+static void\n DEFUN(process_class, (jcf),\n       JCF *jcf)\n {\n@@ -1021,24 +1023,24 @@ DEFUN(disassemble_method, (jcf, byte_ops, len),\n \n #define BRANCH(OPERAND_TYPE, OPERAND_VALUE) \\\n   saw_index = 0, INT_temp = (OPERAND_VALUE); \\\n-  fprintf (out, \" %d\", saw_index ? INT_temp : oldpc + INT_temp)\n+  fprintf (out, \" %ld\", (long) (saw_index ? INT_temp : oldpc + INT_temp))\n \n #define JSR(OPERAND_TYPE, OPERAND_VALUE) \\\n   saw_index = 0, INT_temp = (OPERAND_VALUE); \\\n-  fprintf (out, \" %d\", saw_index ? INT_temp : oldpc + INT_temp)\n+  fprintf (out, \" %ld\", (long) (saw_index ? INT_temp : oldpc + INT_temp))\n \n #undef RET /* Defined by config/i386/i386.h */\n #define RET(OPERAND_TYPE, OPERAND_VALUE) \\\n   INT_temp = saw_wide ? IMMEDIATE_u2 : (OPERAND_VALUE); \\\n   saw_wide = 0; \\\n-  fprintf (out, \" %d\", INT_temp);\n+  fprintf (out, \" %ld\", (long) INT_temp);\n \n #define SWITCH(OPERAND_TYPE, TABLE_OR_LOOKUP) \\\n   PC = (PC + 3) / 4 * 4; TABLE_OR_LOOKUP##_SWITCH\n \n #define LOOKUP_SWITCH \\\n   { jint default_offset = IMMEDIATE_s4;  jint npairs = IMMEDIATE_s4; \\\n-    fprintf (out, \" npairs=%d, default=%d\", npairs, default_offset+oldpc); \\\n+    fprintf (out, \" npairs=%ld, default=%ld\", (long) npairs, (long) default_offset+oldpc); \\\n     while (--npairs >= 0) { \\\n      jint match = IMMEDIATE_s4; jint offset = IMMEDIATE_s4; \\\n      fprintf (out, \"\\n%10ld: %ld\", (long)match, (long)(offset+oldpc)); } \\\n@@ -1047,8 +1049,8 @@ DEFUN(disassemble_method, (jcf, byte_ops, len),\n #define TABLE_SWITCH \\\n   { jint default_offset = IMMEDIATE_s4; \\\n     jint low = IMMEDIATE_s4; jint high = IMMEDIATE_s4; \\\n-    fprintf (out, \" low=%d, high=%d, default=%d\", \\\n-      low, high, default_offset+oldpc); \\\n+    fprintf (out, \" low=%ld, high=%ld, default=%ld\", \\\n+      (long) low, (long) high, (long) default_offset+oldpc); \\\n     for (; low <= high; low++) { \\\n      jint offset = IMMEDIATE_s4; \\\n      fprintf (out, \"\\n%10ld: %ld\", (long)low, (long)(offset+oldpc)); } \\\n@@ -1085,7 +1087,7 @@ DEFUN(disassemble_method, (jcf, byte_ops, len),\n \t  else\n \t    {\n \t      saw_wide = 0;\n-\t      fprintf (out, \" %d\", INT_temp);\n+\t      fprintf (out, \" %ld\", (long) INT_temp);\n \t    }\n \t  fputc ('\\n', out);\n \t  break;"}, {"sha": "e4d614d687e5ead3ac043d37fa64b080f9638995", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -26,6 +26,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"system.h\"\n \n #include \"jcf.h\"\n+#include \"tree.h\"\n+#include \"java-tree.h\"\n \n /* DOS brain-damage */\n #ifndef O_BINARY\n@@ -182,7 +184,7 @@ DEFUN(open_in_zip, (jcf, zipfile, zipmember, is_system),\n #if JCF_USE_STDIO\n char*\n DEFUN(open_class, (filename, jcf, stream, dep_name),\n-      char *filename AND JCF *jcf AND FILE* stream AND char *dep_name)\n+      char *filename AND JCF *jcf AND FILE* stream AND const char *dep_name)\n {\n   if (jcf)\n     {\n@@ -203,7 +205,7 @@ DEFUN(open_class, (filename, jcf, stream, dep_name),\n #else\n char*\n DEFUN(open_class, (filename, jcf, fd, dep_name),\n-      char *filename AND JCF *jcf AND int fd AND char *dep_name)\n+      char *filename AND JCF *jcf AND int fd AND const char *dep_name)\n {\n   if (jcf)\n     {\n@@ -240,7 +242,7 @@ DEFUN(open_class, (filename, jcf, fd, dep_name),\n \n char *\n DEFUN(find_classfile, (filename, jcf, dep_name),\n-      char *filename AND JCF *jcf AND char *dep_name)\n+      char *filename AND JCF *jcf AND const char *dep_name)\n {\n #if JCF_USE_STDIO\n   FILE *stream = fopen (filename, \"rb\");\n@@ -458,9 +460,9 @@ DEFUN(jcf_print_char, (stream, ch),\n \n void\n DEFUN(jcf_print_utf8, (stream, str, length),\n-      FILE *stream AND register unsigned char *str AND int length)\n+      FILE *stream AND register const unsigned char *str AND int length)\n {\n-  unsigned char* limit = str + length;\n+  const unsigned char * limit = str + length;\n   while (str < limit)\n     {\n       int ch = UTF8_GET (str, limit);\n@@ -477,7 +479,7 @@ DEFUN(jcf_print_utf8, (stream, str, length),\n \n void\n DEFUN(jcf_print_utf8_replace, (stream, str, length, in_char, out_char),\n-      FILE *stream AND unsigned char *str AND int length\n+      FILE *stream AND const unsigned char *str AND int length\n       AND int in_char AND int out_char)\n {\n "}, {"sha": "58dd7223fac151cb4a3ce198c89043c6992d7a93", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -79,12 +79,13 @@ static tree current_method = NULL_TREE;\n \n /* Declarations of some functions used here.  */\n static tree give_name_to_class PROTO ((JCF *jcf, int index));\n-void parse_zip_file_entries PROTO (());\n-void process_zip_dir PROTO (());\n+static void parse_zip_file_entries PROTO ((void));\n+static void process_zip_dir PROTO ((void));\n static void parse_source_file PROTO ((tree));\n static void jcf_parse_source PROTO ((void));\n static int jcf_figure_file_type PROTO ((JCF *));\n static int find_in_current_zip PROTO ((char *, struct JCF **));\n+static void parse_class_file PROTO ((void));\n \n /* Handle \"SourceFile\" attribute. */\n \n@@ -662,7 +663,7 @@ init_outgoing_cpool ()\n     }\n }\n \n-void\n+static void\n parse_class_file ()\n {\n   tree method;\n@@ -854,7 +855,7 @@ yyparse ()\n static struct ZipFileCache *localToFile;\n \n /* Process all class entries found in the zip file.  */\n-void\n+static void\n parse_zip_file_entries (void)\n {\n   struct ZipDirectory *zdir;\n@@ -895,7 +896,7 @@ parse_zip_file_entries (void)\n /* Read all the entries of the zip file, creates a class and a JCF. Sets the\n    jcf up for further processing and link it to the created class.  */\n \n-void process_zip_dir()\n+static void process_zip_dir()\n {\n   int i;\n   ZipDirectory *zdir;\n@@ -955,7 +956,7 @@ void process_zip_dir()\n \n /* Lookup class NAME and figure whether is a class already found in the current\n    zip file.  */\n-int\n+static int\n DEFUN(find_in_current_zip, (name, length, jcf),\n       char *name AND JCF **jcf)\n {"}, {"sha": "71560e60616c2e761f67b2da4464c45317414c70", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -23,9 +23,9 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"jcf.h\"\n #include \"tree.h\"\n #include \"java-tree.h\"\n-#include \"jcf.h\"\n #include \"obstack.h\"\n #undef AND\n #include \"rtl.h\"\n@@ -273,6 +273,33 @@ struct jcf_partial\n };\n \n static void generate_bytecode_insns PROTO ((tree, int, struct jcf_partial *));\n+static struct chunk * alloc_chunk PROTO ((struct chunk *, unsigned char *,\n+\t\t\t\t\t  int, struct obstack *));\n+static unsigned char * append_chunk PROTO ((unsigned char *, int,\n+\t\t\t\t\t    struct jcf_partial *));\n+static void append_chunk_copy PROTO ((unsigned char *, int,\n+\t\t\t\t      struct jcf_partial *));\n+static struct jcf_block * gen_jcf_label PROTO ((struct jcf_partial *));\n+static void finish_jcf_block PROTO ((struct jcf_partial *));\n+static void define_jcf_label PROTO ((struct jcf_block *,\n+\t\t\t\t     struct jcf_partial *));\n+static struct jcf_block * get_jcf_label_here PROTO ((struct jcf_partial *));\n+static void put_linenumber PROTO ((int, struct jcf_partial *));\n+static void localvar_alloc PROTO ((tree, struct jcf_partial *));\n+static int localvar_free PROTO ((tree, struct jcf_partial *));\n+static int get_access_flags PROTO ((tree));\n+static void write_chunks PROTO ((FILE *, struct chunk *));\n+static int adjust_typed_op PROTO ((tree, int));\n+static void generate_bytecode_conditional PROTO ((tree, struct jcf_block *,\n+\t\t\t\t\t\t  struct jcf_block *, int,\n+\t\t\t\t\t\t  struct jcf_partial *));\n+static void generate_bytecode_return PROTO ((tree, struct jcf_partial *));\n+static void perform_relocations PROTO ((struct jcf_partial *));\n+static void init_jcf_state PROTO ((struct jcf_partial *, struct obstack *));\n+static void init_jcf_method PROTO ((struct jcf_partial *, tree));\n+static void release_jcf_state PROTO ((struct jcf_partial *));\n+static struct chunk * generate_classfile PROTO ((tree, struct jcf_partial *));\n+\n \n /* Utility macros for appending (big-endian) data to a buffer.\n    We assume a local variable 'ptr' points into where we want to\n@@ -304,7 +331,7 @@ CHECK_PUT(ptr, state, i)\n    Set the data and size fields to DATA and SIZE, respectively.\n    However, if DATA is NULL and SIZE>0, allocate a buffer as well. */\n \n-struct chunk *\n+static struct chunk *\n alloc_chunk (last, data, size, work)\n      struct chunk *last;\n      unsigned char *data;\n@@ -339,7 +366,7 @@ CHECK_OP(struct jcf_partial *state)\n #define CHECK_OP(STATE) ((void)0)\n #endif\n \n-unsigned char *\n+static unsigned char *\n append_chunk (data, size, state)\n      unsigned char *data;\n      int size;\n@@ -351,7 +378,7 @@ append_chunk (data, size, state)\n   return state->chunk->data;\n }\n \n-void\n+static void\n append_chunk_copy (data, size, state)\n      unsigned char *data;\n      int size;\n@@ -361,7 +388,7 @@ append_chunk_copy (data, size, state)\n   memcpy (ptr, data, size);\n }\n \f\n-struct jcf_block *\n+static struct jcf_block *\n gen_jcf_label (state)\n      struct jcf_partial *state;\n {\n@@ -373,7 +400,7 @@ gen_jcf_label (state)\n   return block;\n }\n \n-void\n+static void\n finish_jcf_block (state)\n      struct jcf_partial *state;\n {\n@@ -400,7 +427,7 @@ finish_jcf_block (state)\n   state->code_length = pc;\n }\n \n-void\n+static void\n define_jcf_label (label, state)\n      struct jcf_block *label;\n      struct jcf_partial *state;\n@@ -417,7 +444,7 @@ define_jcf_label (label, state)\n   label->u.relocations = NULL;\n }\n \n-struct jcf_block *\n+static struct jcf_block *\n get_jcf_label_here (state)\n      struct jcf_partial *state;\n {\n@@ -433,7 +460,7 @@ get_jcf_label_here (state)\n \n /* Note a line number entry for the current PC and given LINE. */\n \n-void\n+static void\n put_linenumber (line, state)\n      int line;\n      struct jcf_partial *state;\n@@ -493,7 +520,7 @@ struct localvar_info\n #define localvar_max \\\n   ((struct localvar_info**) state->localvars.ptr - localvar_buffer)\n \n-void\n+static void\n localvar_alloc (decl, state)\n      tree decl;\n      struct jcf_partial *state;\n@@ -540,7 +567,7 @@ localvar_alloc (decl, state)\n     }\n }\n \n-int\n+static int\n localvar_free (decl, state)\n      tree decl;     \n      struct jcf_partial *state;\n@@ -571,7 +598,7 @@ localvar_free (decl, state)\n /* Get the access flags of a class (TYPE_DECL), a method (FUNCTION_DECL), or\n    a field (FIELD_DECL or VAR_DECL, if static), as encoded in a .class file. */\n \n-int\n+static int\n get_access_flags (decl)\n     tree decl;\n {\n@@ -624,7 +651,7 @@ get_access_flags (decl)\n \n /* Write the list of segments starting at CHUNKS to STREAM. */\n \n-void\n+static void\n write_chunks (stream, chunks)\n      FILE* stream;\n      struct chunk *chunks;\n@@ -786,7 +813,7 @@ field_op (field, opcode, state)\n    reference) to 7 (for 'short') which matches the pattern of how JVM\n    opcodes typically depend on the operand type. */\n \n-int\n+static int\n adjust_typed_op (type, max)\n      tree type;\n      int max;\n@@ -940,7 +967,7 @@ emit_store (var, state)\n static void\n emit_unop (opcode, type, state)\n      enum java_opcode opcode;\n-     tree type;\n+     tree type ATTRIBUTE_UNUSED;\n      struct jcf_partial *state;\n {\n   RESERVE(1);\n@@ -1044,7 +1071,7 @@ emit_jsr (target, state)\n    TRUE_LABEL may follow right after this. (The idea is that we\n    may be able to optimize away GOTO TRUE_LABEL; TRUE_LABEL:) */\n \n-void\n+static void\n generate_bytecode_conditional (exp, true_label, false_label,\n \t\t\t       true_branch_first, state)\n      tree exp;\n@@ -1268,7 +1295,7 @@ call_cleanups (limit, state)\n     }\n }\n \n-void\n+static void\n generate_bytecode_return (exp, state)\n      tree exp;\n      struct jcf_partial *state;\n@@ -2448,7 +2475,7 @@ generate_bytecode_insns (exp, target, state)\n     }\n }\n \n-void\n+static void\n perform_relocations (state)\n      struct jcf_partial *state;\n {\n@@ -2616,7 +2643,7 @@ perform_relocations (state)\n   state->code_length = pc;\n }\n \n-void\n+static void\n init_jcf_state (state, work)\n      struct jcf_partial *state;\n      struct obstack *work;\n@@ -2628,7 +2655,7 @@ init_jcf_state (state, work)\n   BUFFER_INIT (&state->bytecode);\n }\n \n-void\n+static void\n init_jcf_method (state, method)\n      struct jcf_partial *state;\n      tree method;\n@@ -2651,7 +2678,7 @@ init_jcf_method (state, method)\n   state->return_value_decl = NULL_TREE;\n }\n \n-void\n+static void\n release_jcf_state (state)\n      struct jcf_partial *state;\n {\n@@ -2663,7 +2690,7 @@ release_jcf_state (state)\n    in the .class file representation.  The list can be written to a\n    .class file using write_chunks.  Allocate chunks from obstack WORK. */\n \n-struct chunk *\n+static struct chunk *\n generate_classfile (clas, state)\n      tree clas;\n      struct jcf_partial *state;\n@@ -2943,7 +2970,8 @@ static char *\n make_class_file_name (clas)\n      tree clas;\n {\n-  char *cname, *dname, *slash, *r;\n+  const char *dname, *slash;\n+  char *cname, *r;\n   struct stat sb;\n \n   cname = IDENTIFIER_POINTER (identifier_subst (DECL_NAME (TYPE_NAME (clas)),"}, {"sha": "c8ab62b259651125f5a2769eab49ed040e4000d9", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -224,7 +224,7 @@ typedef struct JCF {\n #define DEFAULT_CLASS_PATH \".\"\n \n extern char *find_class PROTO ((const char *, int, JCF*, int));\n-extern char *find_classfile PROTO ((char *, JCF*, char *));\n+extern char *find_classfile PROTO ((char *, JCF*, const char *));\n extern int jcf_filbuf_from_stdio PROTO ((JCF *jcf, int count));\n extern void jcf_out_of_synch PROTO((JCF *));\n extern int jcf_unexpected_eof PROTO ((JCF*, int));"}, {"sha": "26fc662ed5e9da56c3b2c128bdfe77e56ee5fe36", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -27,7 +27,6 @@ Boston, MA 02111-1307, USA.  */\n void fatal VPROTO((const char *s, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void warning VPROTO((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n void gcc_obstack_init PROTO ((struct obstack *obstack));\n-extern void reset_report PROTO ((void));\n \n #define JC1_LITE\n #include \"parse.h\""}, {"sha": "0f9e6287827de7956cd6137e6dab692534cd0a95", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -28,18 +28,35 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"system.h\"\n #include \"obstack.h\"\n #include \"gansidecl.h\"\n+#include \"jcf.h\"\n+#include \"tree.h\"\n+#include \"java-tree.h\"\n \n const char main_method_prefix[] = \"main__\";\n const char main_method_suffix[] = \"Pt6JArray1ZPQ34java4lang6String\";\n const char class_mangling_prefix[] = \"_CL_\";\n \n struct obstack name_obstack;\n \n+extern void error\t\t\tPVPROTO ((const char *, ...))\n+  ATTRIBUTE_PRINTF_1;\n+\n void\n-error (const char *str)\n+error VPROTO((const char *msgid, ...))\n {\n-  fprintf (stderr, \"%s\\n\", str);\n-  exit (-1);\n+#ifndef ANSI_PROTOTYPES\n+  const char *msgid;\n+#endif\n+  va_list ap;\n+ \n+  VA_START (ap, msgid);\n+ \n+#ifndef ANSI_PROTOTYPES\n+  msgid = va_arg (ap, const char *);\n+#endif\n+ \n+  vfprintf (stderr, msgid, ap);\n+  va_end (ap);\n }\n \n void"}, {"sha": "f86640e921cec1f0dda8514ddb1f3f047dd77f82", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -110,7 +110,8 @@ extern int flag_exceptions;\n     if `-fSTRING' is seen as an option.\n    (If `-fno-STRING' is seen as an option, the opposite value is stored.)  */\n \n-static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n+static struct { const char *string; int *variable; int on_value;}\n+lang_f_options[] =\n {\n   {\"bounds-check\", &flag_bounds_check, 1},\n   {\"assume-compiled\", &flag_assume_compiled, 1},"}, {"sha": "619bd3d67c46e66d6a01ed03489096f7833da631", "filename": "gcc/java/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -61,7 +61,7 @@ static void java_lex_error PROTO ((char *, int));\n static int java_is_eol PROTO ((FILE *, int));\n #endif\n static void java_store_unicode PROTO ((struct java_line *, unicode_t, int));\n-static unicode_t java_parse_escape_sequence PROTO (());\n+static unicode_t java_parse_escape_sequence PROTO ((void));\n static int java_letter_or_digit_p PROTO ((unicode_t));\n static int java_parse_doc_section PROTO ((unicode_t));\n static void java_parse_end_comment PROTO ((unicode_t));\n@@ -155,7 +155,7 @@ java_unget_unicode ()\n   ctxp->c_line->char_col -= JAVA_COLUMN_DELTA (0);\n }\n \n-void\n+static void\n java_allocate_new_line ()\n {\n   unicode_t ahead = (ctxp->c_line ? ctxp->c_line->ahead[0] : '\\0');"}, {"sha": "ebe680eb2e9b861a1d76ad163f5fbb0366c1beb4", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -28,6 +28,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"jcf.h\"\n+#include \"tree.h\"\n+#include \"java-tree.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n \n@@ -37,15 +39,15 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n int\n unicode_mangling_length (name, len)\n-     char *name; \n+     const char *name; \n      int len; \n {\n-  unsigned char *ptr;\n-  unsigned char *limit = (unsigned char *)name + len;\n+  const unsigned char *ptr;\n+  const unsigned char *limit = (const unsigned char *)name + len;\n   int need_escapes = 0;\n   int num_chars = 0;\n   int underscores = 0;\n-  for (ptr = (unsigned char *) name;  ptr < limit;  )\n+  for (ptr = (const unsigned char *) name;  ptr < limit;  )\n     {\n       int ch = UTF8_GET(ptr, limit);\n       if (ch < 0)\n@@ -70,12 +72,12 @@ unicode_mangling_length (name, len)\n void\n emit_unicode_mangled_name (obstack, name, len)\n      struct obstack *obstack;\n-     char *name;\n+     const char *name;\n      int len;\n {\n-  unsigned char *ptr;\n-  unsigned char *limit = (unsigned char *)name + len;\n-  for (ptr = (unsigned char *) name;  ptr < limit;  )\n+  const unsigned char *ptr;\n+  const unsigned char *limit = (const unsigned char *)name + len;\n+  for (ptr = (const unsigned char *) name;  ptr < limit;  )\n     {\n       int ch = UTF8_GET(ptr, limit);\n       int emit_escape;\n@@ -107,7 +109,7 @@ emit_unicode_mangled_name (obstack, name, len)\n void\n append_gpp_mangled_name (obstack, name, len)\n      struct obstack *obstack;\n-     char *name;\n+     const char *name;\n      int len;\n {\n   int encoded_len = unicode_mangling_length (name, len);\n@@ -132,9 +134,9 @@ append_gpp_mangled_name (obstack, name, len)\n void\n append_gpp_mangled_classtype (obstack, class_name)\n      struct obstack *obstack;\n-     char *class_name;\n+     const char *class_name;\n {\n-  char *ptr;\n+  const char *ptr;\n   int qualifications = 0;\n \n   for (ptr = class_name; *ptr != '\\0'; ptr++)"}, {"sha": "bc453bbbf76d61f7a49d38a0af6c2644906dcfe9", "filename": "gcc/java/parse.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -308,7 +308,7 @@ enum {\n   INVOKE_NONVIRTUAL,\n   INVOKE_SUPER,\n   INVOKE_INTERFACE,\n-  INVOKE_VIRTUAL,\n+  INVOKE_VIRTUAL\n };\n \n /* We need the resolution stuff only if we compile jc1 */\n@@ -357,7 +357,7 @@ enum jdep_code {\n   JDEP_TYPE,\t\t\t/* Patch a random tree node type,\n                                    without the need for any specific\n                                    actions */\n-  JDEP_EXCEPTION,\t\t/* Patch exceptions specified by `throws' */\n+  JDEP_EXCEPTION\t\t/* Patch exceptions specified by `throws' */\n };\n \n typedef struct _jdep {\n@@ -647,11 +647,12 @@ void java_check_circular_reference PROTO ((void));\n void java_check_final PROTO ((void));\n void java_layout_classes PROTO ((void));\n tree java_method_add_stmt PROTO ((tree, tree));\n-char *java_get_line_col PROTO ((char *, int, int));\n void java_expand_switch PROTO ((tree));\n int java_report_errors PROTO (());\n extern tree do_resolve_class PROTO ((tree, tree, tree));\n #endif\n+char *java_get_line_col PROTO ((char *, int, int));\n+extern void reset_report PROTO ((void));\n \n /* Always in use, no matter what you compile */\n void java_push_parser_context PROTO ((void));"}, {"sha": "fd0550e87db2f368f0fb8f949f2859bbea3cac87", "filename": "gcc/java/verify.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -33,6 +33,9 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"java-except.h\"\n #include \"toplev.h\"\n \n+static void push_pending_label PROTO ((tree));\n+static tree merge_types PROTO ((tree, tree));\n+\n extern int stack_pointer;\n \n /* During verification, start of the current subroutine (jsr target). */\n@@ -45,7 +48,7 @@ tree pending_blocks;\n \n /* Append TARGET_LABEL to the pending_block stack unless already in it. */\n \n-void\n+static void\n push_pending_label (target_label) \n      tree target_label;\n {\n@@ -102,7 +105,7 @@ check_pending_block (target_label)\n    For reference types, return the common super-class.\n    Return TYPE_UNKNOWN if the types cannot be merged. */   \n \n-tree\n+static tree\n merge_types (type1, type2)\n      tree type1, type2;\n {"}, {"sha": "98a698ff8215af3c50d7a34f3d468d0c6c4005cb", "filename": "gcc/java/zipfile.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fzipfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcde32e86ac492878fe06625c7c67139c9c85cc/gcc%2Fjava%2Fzipfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzipfile.h?ref=4bcde32e86ac492878fe06625c7c67139c9c85cc", "patch": "@@ -57,5 +57,9 @@ extern struct ZipFileCache *SeenZipFiles;\n    ((ZipDirectory*)((char*)(ZIPD)+(ZIPD)->direntry_size))\n #define ZIPMAGIC 0x504b0304\t\n \n-extern ZipFile * opendir_in_zip ();\n+extern ZipFile * opendir_in_zip PROTO ((const char *, int));\n extern int read_zip_archive PROTO ((ZipFile *));\n+#ifdef JCF_ZIP\n+extern int open_in_zip PROTO ((struct JCF *, const char *,\n+\t\t\t       const char *, int));\n+#endif"}]}