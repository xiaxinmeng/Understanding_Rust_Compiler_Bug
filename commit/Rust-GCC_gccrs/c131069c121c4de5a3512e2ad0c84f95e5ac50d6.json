{"sha": "c131069c121c4de5a3512e2ad0c84f95e5ac50d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzMTA2OWMxMjFjNGRlNWEzNTEyZTJhZDBjODRmOTVlNWFjNTBkNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-10-13T21:39:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-13T21:39:29Z"}, "message": "alpha.md (I24MODE): New mode iterator.\n\n\t* config/alpha/alpha.md (I24MODE): New mode iterator.\n\t(any_divmod): New code iterator.\n\t(<code>si3): Macroize expander from {div,mod,udiv,umod}si3 using\n\tany_divmod code iterator.\n\t(<code>si3): Macroize expander from {div,mod,udiv,umod}di3 using\n\tany_divmod code iterator.\n\t(extendqi<mode>2): Macroize insn from extendqi{hi,si}2 using\n\tI24MODE mode iterator.\n\t(unaligned_store<mode>): Macroize expander from unaligned_store{qi,hi}\n\tusing I12MODE mode iterator.\n\t(mov<mode>): Macroize expander from mov{qi,hi} using\n\tI12MODE mode iterator.\n\nFrom-SVN: r192427", "tree": {"sha": "534e42f49e664be3739cf32766b455cd57f96aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/534e42f49e664be3739cf32766b455cd57f96aab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c131069c121c4de5a3512e2ad0c84f95e5ac50d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c131069c121c4de5a3512e2ad0c84f95e5ac50d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c131069c121c4de5a3512e2ad0c84f95e5ac50d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c131069c121c4de5a3512e2ad0c84f95e5ac50d6/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fc2e37df954b77dac93c8c6c889e4e3e703b517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc2e37df954b77dac93c8c6c889e4e3e703b517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc2e37df954b77dac93c8c6c889e4e3e703b517"}], "stats": {"total": 172, "additions": 38, "deletions": 134}, "files": [{"sha": "f1fde0dfc839618e8124f611108d5d8cf27470ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c131069c121c4de5a3512e2ad0c84f95e5ac50d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c131069c121c4de5a3512e2ad0c84f95e5ac50d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c131069c121c4de5a3512e2ad0c84f95e5ac50d6", "patch": "@@ -1,3 +1,18 @@\n+2012-10-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.md (I24MODE): New mode iterator.\n+\t(any_divmod): New code iterator.\n+\t(<code>si3): Macroize expander from {div,mod,udiv,umod}si3 using\n+\tany_divmod code iterator.\n+\t(<code>si3): Macroize expander from {div,mod,udiv,umod}di3 using\n+\tany_divmod code iterator.\n+\t(extendqi<mode>2): Macroize insn from extendqi{hi,si}2 using\n+\tI24MODE mode iterator.\n+\t(unaligned_store<mode>): Macroize expander from unaligned_store{qi,hi}\n+\tusing I12MODE mode iterator.\n+\t(mov<mode>): Macroize expander from mov{qi,hi} using\n+\tI12MODE mode iterator.\n+\n 2012-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/54871"}, {"sha": "5febcfeb2fd2c07337e4559fde05b1f649977a7c", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 23, "deletions": 134, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c131069c121c4de5a3512e2ad0c84f95e5ac50d6/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c131069c121c4de5a3512e2ad0c84f95e5ac50d6/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=c131069c121c4de5a3512e2ad0c84f95e5ac50d6", "patch": "@@ -93,6 +93,7 @@\n (define_mode_iterator IMODE [QI HI SI DI])\n (define_mode_iterator I12MODE [QI HI])\n (define_mode_iterator I124MODE [QI HI SI])\n+(define_mode_iterator I24MODE [HI SI])\n (define_mode_iterator I248MODE [HI SI DI])\n (define_mode_iterator I48MODE [SI DI])\n \n@@ -734,67 +735,16 @@\n ;; problem.  Is it worth the complication here to eliminate the sign\n ;; extension?\n \n-(define_expand \"divsi3\"\n-  [(set (match_dup 3)\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-   (set (match_dup 4)\n-\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (parallel [(set (match_dup 5)\n-\t\t   (sign_extend:DI (div:SI (match_dup 3) (match_dup 4))))\n-\t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:SI (match_dup 5) 0))]\n-  \"TARGET_ABI_OSF\"\n-{\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_reg_rtx (DImode);\n-})\n-\n-(define_expand \"udivsi3\"\n-  [(set (match_dup 3)\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-   (set (match_dup 4)\n-\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (parallel [(set (match_dup 5)\n-\t\t   (sign_extend:DI (udiv:SI (match_dup 3) (match_dup 4))))\n-\t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:SI (match_dup 5) 0))]\n-  \"TARGET_ABI_OSF\"\n-{\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_reg_rtx (DImode);\n-})\n-\n-(define_expand \"modsi3\"\n-  [(set (match_dup 3)\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n-   (set (match_dup 4)\n-\t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n-   (parallel [(set (match_dup 5)\n-\t\t   (sign_extend:DI (mod:SI (match_dup 3) (match_dup 4))))\n-\t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(subreg:SI (match_dup 5) 0))]\n-  \"TARGET_ABI_OSF\"\n-{\n-  operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_reg_rtx (DImode);\n-})\n+(define_code_iterator any_divmod [div mod udiv umod])\n \n-(define_expand \"umodsi3\"\n+(define_expand \"<code>si3\"\n   [(set (match_dup 3)\n \t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n    (set (match_dup 4)\n \t(sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"\")))\n    (parallel [(set (match_dup 5)\n-\t\t   (sign_extend:DI (umod:SI (match_dup 3) (match_dup 4))))\n+\t\t   (sign_extend:DI\n+\t\t    (any_divmod:SI (match_dup 3) (match_dup 4))))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n@@ -806,37 +756,11 @@\n   operands[5] = gen_reg_rtx (DImode);\n })\n \n-(define_expand \"divdi3\"\n+(define_expand \"<code>di3\"\n   [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (div:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:DI 2 \"register_operand\" \"\")))\n-\t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])]\n-  \"TARGET_ABI_OSF\"\n-  \"\")\n-\n-(define_expand \"udivdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (udiv:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n-\t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])]\n-  \"TARGET_ABI_OSF\"\n-  \"\")\n-\n-(define_expand \"moddi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (mod:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:DI 2 \"register_operand\" \"\")))\n-\t      (clobber (reg:DI 23))\n-\t      (clobber (reg:DI 28))])]\n-  \"TARGET_ABI_OSF\"\n-  \"\")\n-\n-(define_expand \"umoddi3\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t\t   (umod:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n+\t\t   (any_divmod:DI\n+\t\t    (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t    (match_operand:DI 2 \"register_operand\" \"\")))\n \t      (clobber (reg:DI 23))\n \t      (clobber (reg:DI 28))])]\n   \"TARGET_ABI_OSF\"\n@@ -1292,16 +1216,10 @@\n   \"sra %r1,%2,%0\"\n   [(set_attr \"type\" \"shift\")])\n \n-(define_insn \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:HI (match_operand:QI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_BWX\"\n-  \"sextb %1,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n+(define_insn \"extendqi<mode>2\"\n+  [(set (match_operand:I24MODE 0 \"register_operand\" \"=r\")\n+\t(sign_extend:I24MODE\n+\t (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"TARGET_BWX\"\n   \"sextb %1,%0\"\n   [(set_attr \"type\" \"shift\")])\n@@ -4388,56 +4306,38 @@\n ;; be the same temporary, if desired.  If the address is in a register,\n ;; operand 2 can be that register.\n \n-(define_expand \"unaligned_storeqi\"\n+(define_expand \"unaligned_store<mode>\"\n   [(set (match_operand:DI 3 \"register_operand\" \"\")\n \t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\" \"\")\n \t\t\t(const_int -8))))\n    (set (match_operand:DI 2 \"register_operand\" \"\")\n \t(match_dup 0))\n    (set (match_dup 3)\n-\t(and:DI (not:DI (ashift:DI (const_int 255)\n+\t(and:DI (not:DI (ashift:DI (match_dup 5)\n \t\t\t\t   (ashift:DI (match_dup 2) (const_int 3))))\n \t\t(match_dup 3)))\n    (set (match_operand:DI 4 \"register_operand\" \"\")\n-\t(ashift:DI (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"\"))\n-\t\t   (ashift:DI (match_dup 2) (const_int 3))))\n-   (set (match_dup 4) (ior:DI (match_dup 4) (match_dup 3)))\n-   (set (mem:DI (and:DI (match_dup 0) (const_int -8)))\n-\t(match_dup 4))]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"unaligned_storehi\"\n-  [(set (match_operand:DI 3 \"register_operand\" \"\")\n-\t(mem:DI (and:DI (match_operand:DI 0 \"address_operand\" \"\")\n-\t\t\t(const_int -8))))\n-   (set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(match_dup 0))\n-   (set (match_dup 3)\n-\t(and:DI (not:DI (ashift:DI (const_int 65535)\n-\t\t\t\t   (ashift:DI (match_dup 2) (const_int 3))))\n-\t\t(match_dup 3)))\n-   (set (match_operand:DI 4 \"register_operand\" \"\")\n-\t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"\"))\n+\t(ashift:DI (zero_extend:DI\n+\t\t     (match_operand:I12MODE 1 \"register_operand\" \"\"))\n \t\t   (ashift:DI (match_dup 2) (const_int 3))))\n    (set (match_dup 4) (ior:DI (match_dup 4) (match_dup 3)))\n    (set (mem:DI (and:DI (match_dup 0) (const_int -8)))\n \t(match_dup 4))]\n   \"\"\n-  \"\")\n+  \"operands[5] = GEN_INT (GET_MODE_MASK (<MODE>mode));\")\n \n ;; Here are the define_expand's for QI and HI moves that use the above\n ;; patterns.  We have the normal sets, plus the ones that need scratch\n ;; registers for reload.\n \n-(define_expand \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:QI 1 \"general_operand\" \"\"))]\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:I12MODE 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:I12MODE 1 \"general_operand\" \"\"))]\n   \"\"\n {\n   if (TARGET_BWX\n-      ? alpha_expand_mov (QImode, operands)\n-      : alpha_expand_mov_nobwx (QImode, operands))\n+      ? alpha_expand_mov (<MODE>mode, operands)\n+      : alpha_expand_mov_nobwx (<MODE>mode, operands))\n     DONE;\n })\n \n@@ -4454,17 +4354,6 @@\n   [(set_attr \"type\" \"ilog,iadd,ild,ist\")\n    (set_attr \"isa\" \"*,*,bwx,bwx\")])\n \n-(define_expand \"movhi\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:HI 1 \"general_operand\" \"\"))]\n-  \"\"\n-{\n-  if (TARGET_BWX\n-      ? alpha_expand_mov (HImode, operands)\n-      : alpha_expand_mov_nobwx (HImode, operands))\n-    DONE;\n-})\n-\n (define_insn \"*movhi\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n \t(match_operand:HI 1 \"input_operand\" \"rJ,n,m,rJ\"))]"}]}