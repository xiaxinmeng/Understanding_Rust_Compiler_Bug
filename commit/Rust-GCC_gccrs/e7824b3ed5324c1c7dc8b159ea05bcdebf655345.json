{"sha": "e7824b3ed5324c1c7dc8b159ea05bcdebf655345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4MjRiM2VkNTMyNGMxYzdkYzhiMTU5ZWEwNWJjZGViZjY1NTM0NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-10-30T02:26:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-10-30T02:26:29Z"}, "message": "fold-const.c (fold_single_bit_test): Convert the input to the operational intermediate type.\n\n        * fold-const.c (fold_single_bit_test): Convert the input to the\n        operational intermediate type.\n\nFrom-SVN: r73077", "tree": {"sha": "c8eaac33f8d526dce7ee1fcd726ce4fc064b17eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8eaac33f8d526dce7ee1fcd726ce4fc064b17eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7824b3ed5324c1c7dc8b159ea05bcdebf655345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7824b3ed5324c1c7dc8b159ea05bcdebf655345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7824b3ed5324c1c7dc8b159ea05bcdebf655345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7824b3ed5324c1c7dc8b159ea05bcdebf655345/comments", "author": null, "committer": null, "parents": [{"sha": "c35d187fc31fdd5836d1acb13e29a03537d22b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35d187fc31fdd5836d1acb13e29a03537d22b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35d187fc31fdd5836d1acb13e29a03537d22b46"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "b7f9c38b13f9b492aff869ee409fff8893ace005", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7824b3ed5324c1c7dc8b159ea05bcdebf655345/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7824b3ed5324c1c7dc8b159ea05bcdebf655345/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7824b3ed5324c1c7dc8b159ea05bcdebf655345", "patch": "@@ -1,3 +1,8 @@\n+2003-10-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* fold-const.c (fold_single_bit_test): Convert the input to the\n+\toperational intermediate type.\n+\n 2003-10-29  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.c (std_build_builtin_va_list): New."}, {"sha": "85909a3f909aa09b00a8db0078a1fed3ad373eb0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7824b3ed5324c1c7dc8b159ea05bcdebf655345/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7824b3ed5324c1c7dc8b159ea05bcdebf655345/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e7824b3ed5324c1c7dc8b159ea05bcdebf655345", "patch": "@@ -5036,7 +5036,7 @@ fold_single_bit_test (enum tree_code code, tree arg0, tree arg1,\n       int bitnum = tree_log2 (TREE_OPERAND (arg0, 1));\n       enum machine_mode operand_mode = TYPE_MODE (type);\n       int ops_unsigned;\n-      tree signed_type, unsigned_type;\n+      tree signed_type, unsigned_type, intermediate_type;\n       tree arg00;\n   \n       /* If we have (A & C) != 0 where C is the sign bit of A, convert\n@@ -5082,22 +5082,23 @@ fold_single_bit_test (enum tree_code code, tree arg0, tree arg1,\n \n       signed_type = (*lang_hooks.types.type_for_mode) (operand_mode, 0);\n       unsigned_type = (*lang_hooks.types.type_for_mode) (operand_mode, 1);\n+      intermediate_type = ops_unsigned ? unsigned_type : signed_type;\n+      inner = convert (intermediate_type, inner);\n \n       if (bitnum != 0)\n-\tinner = build (RSHIFT_EXPR, ops_unsigned ? unsigned_type : signed_type,\n+\tinner = build (RSHIFT_EXPR, intermediate_type,\n \t\t       inner, size_int (bitnum));\n \n       if (code == EQ_EXPR)\n-\tinner = build (BIT_XOR_EXPR, ops_unsigned ? unsigned_type : signed_type,\n+\tinner = build (BIT_XOR_EXPR, intermediate_type,\n \t\t       inner, integer_one_node);\n \n       /* Put the AND last so it can combine with more things.  */\n-      inner = build (BIT_AND_EXPR, ops_unsigned ? unsigned_type : signed_type,\n+      inner = build (BIT_AND_EXPR, intermediate_type,\n \t\t     inner, integer_one_node);\n \n       /* Make sure to return the proper type.  */\n-      if (TREE_TYPE (inner) != result_type)\n-\tinner = convert (result_type, inner);\n+      inner = convert (result_type, inner);\n \n       return inner;\n     }"}]}