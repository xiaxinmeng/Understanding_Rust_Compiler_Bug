{"sha": "d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmZGQwZDYwZmMwMzM4ZjVmYTZhZDVhODZhZjhhN2UzNmIzODkzZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2005-02-15T22:08:40Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2005-02-15T22:08:40Z"}, "message": "URLClassLoader.java (JarURLLoader.JarURLLoader): Don't look aside for \"GCJLIBS\" in directory where jarfiles are loaded.\n\n       * java/net/URLClassLoader.java (JarURLLoader.JarURLLoader): Don't look\n       aside for \"GCJLIBS\" in directory where jarfiles are loaded.\n       (JarURLLoader.getClass): Removed method.\n       (JarURLLoader.toString): Removed method.\n       (FileResource.toString): Removed method.\n\nFrom-SVN: r95076", "tree": {"sha": "67fda60fcd4cd2774efa6382664039444331dd0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67fda60fcd4cd2774efa6382664039444331dd0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e/comments", "author": null, "committer": null, "parents": [{"sha": "affa5a3418684e31d549d00e824166dbbf7998e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/affa5a3418684e31d549d00e824166dbbf7998e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/affa5a3418684e31d549d00e824166dbbf7998e2"}], "stats": {"total": 115, "additions": 41, "deletions": 74}, "files": [{"sha": "e721f3ec8d635804ac01cfbb715b98151afb8826", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e", "patch": "@@ -1,3 +1,11 @@\n+2005-02-15  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/URLClassLoader.java (JarURLLoader.JarURLLoader): Don't look\n+\taside for \"GCJLIBS\" in directory where jarfiles are loaded.\n+\t(JarURLLoader.getClass): Removed method.\n+\t(JarURLLoader.toString): Removed method.\n+\t(FileResource.toString): Removed method.\n+\n 2005-02-15  Mark Wielaard  <mark@klomp.org>\n  \n \t* javax/net/ssl/SSLContext.java (getInstance): Add exception message"}, {"sha": "268b0b45caf7cd122f7beaf9bc2d00eb5adb6f9c", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 33, "deletions": 74, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=d9fdd0d60fc0338f5fa6ad5a86af8a7e36b3893e", "patch": "@@ -306,8 +306,6 @@ static final class JarURLLoader extends URLLoader\n \n     Vector classPath;\t// The \"Class-Path\" attribute of this Jar's manifest\n \n-    SoURLLoader soURLLoader;\n-\n     public JarURLLoader(URLClassLoader classloader, URL baseURL)\n     {\n       super(classloader, baseURL);\n@@ -320,70 +318,48 @@ public JarURLLoader(URLClassLoader classloader, URL baseURL)\n       sb.append(\"!/\");\n       String jarURL = sb.toString();\n \n-      this.soURLLoader = null;\n       this.classPath = null;\n       URL baseJarURL = null;\n       JarFile jarfile = null;\n       try\n \t{\n-\t  baseJarURL\n-\t    = new URL(null, jarURL, classloader.getURLStreamHandler(\"jar\"));\n-\t  jarfile\n-\t    = ((JarURLConnection) baseJarURL.openConnection()).getJarFile();\n-\n-\t  if (jarfile != null)\n+\t  baseJarURL =\n+\t    new URL(null, jarURL, classloader.getURLStreamHandler(\"jar\"));\n+\t  \n+\t  jarfile =\n+\t    ((JarURLConnection) baseJarURL.openConnection()).getJarFile();\n+\t  \n+\t  Manifest manifest;\n+\t  Attributes attributes;\n+\t  String classPathString;\n+\t  \n+\t  if ((manifest = jarfile.getManifest()) != null\n+\t      && (attributes = manifest.getMainAttributes()) != null\n+\t      && ((classPathString \n+\t\t   = attributes.getValue(Attributes.Name.CLASS_PATH)) \n+\t\t  != null))\n \t    {\n-\t      String fileName = baseURL.getFile();\n-\t      if (fileName != null)\n-\t\t{\n-\t\t  File f = new File(fileName);\n-\t\t  String libDirName = f.getCanonicalFile().getParent()\n-\t\t    + File.separator + \"GCJLIBS\";\n-\t\t  File libDir = new File(libDirName);\n-\t\t  if (libDir != null && (libDir.isDirectory()))\n+\t      this.classPath = new Vector();\n+\t      \n+\t      StringTokenizer st\n+\t\t= new StringTokenizer \n+\t\t(classPathString,\n+\t\t System.getProperty (\"path.separator\", \":\"));\n+\t      \n+\t      while (st.hasMoreElements ()) \n+\t\t{  \n+\t\t  String e = st.nextToken ();\n+\t\t  try\n \t\t    {\n-\t\t      File soFile = new File (libDirName \n-\t\t\t\t\t      + File.separator + f.getName() \n-\t\t\t\t\t      + \".so\");\n-\t\t      if (soFile != null && soFile.isFile())\n-\t\t\tthis.soURLLoader\n-\t\t\t  = new SoURLLoader (classloader, soFile.toURL(),\n-\t\t\t\t\t     baseURL);\n-\t\t    }\n-\t\t}\n-\n-\t      Manifest manifest;\n-\t      Attributes attributes;\n-\t      String classPathString;\n-\n-\t      if ((manifest = jarfile.getManifest()) != null\n-\t\t  && (attributes = manifest.getMainAttributes()) != null\n-\t\t  && ((classPathString \n-\t\t       = attributes.getValue(Attributes.Name.CLASS_PATH)) \n-\t\t      != null))\n-\t\t{\n-\t\t  this.classPath = new Vector();\n-\n-\t\t  StringTokenizer st\n-\t\t    = new StringTokenizer \n-\t\t      (classPathString,\n-\t\t       System.getProperty (\"path.separator\", \":\"));\n-      \n-\t\t  while (st.hasMoreElements ()) \n-\t\t    {  \n-\t\t      String e = st.nextToken ();\n-\t\t      try\n-\t\t\t{\n-\t\t\t  URL url = new URL(baseURL, e);\n-\t\t\t  this.classPath.add(url);\n-\t\t\t} \n-\t\t      catch (java.net.MalformedURLException xx)\n-\t\t\t{\n-\t\t\t  // Give up\n-\t\t\t}\n+\t\t      URL url = new URL(baseURL, e);\n+\t\t      this.classPath.add(url);\n+\t\t    } \n+\t\t  catch (java.net.MalformedURLException xx)\n+\t\t    {\n+\t\t      // Give up\n \t\t    }\n \t\t}\n- \t    }\n+\t    }\n \t}\n       catch (IOException ioe)\n         {\n@@ -394,13 +370,6 @@ public JarURLLoader(URLClassLoader classloader, URL baseURL)\n       this.jarfile = jarfile;\n     }\n \n-    Class getClass(String className)\n-    {\n-      if (soURLLoader != null)\n-\treturn soURLLoader.getClass(className);\n-      return null;\n-    }\n-\n     /** get resource with the name \"name\" in the jar url */\n     Resource getResource(String name)\n     {\n@@ -417,11 +386,6 @@ Resource getResource(String name)\n         return null;\n     }\n \n-    public String toString ()\n-    {\n-\treturn \"jarfile \" + jarfile.getName();\n-    }\n-\n     Manifest getManifest()\n     {\n       try\n@@ -672,11 +636,6 @@ public int getLength()\n       return (int) file.length();\n     }\n \n-    public String toString ()\n-    {\n-\treturn \"file \" +file.getAbsolutePath();\n-    }\n-\n     public URL getURL()\n     {\n       try"}]}