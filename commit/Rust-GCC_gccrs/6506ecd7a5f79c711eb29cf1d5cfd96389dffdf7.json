{"sha": "6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwNmVjZDdhNWY3OWM3MTFlYjI5Y2YxZDVjZmQ5NjM4OWRmZmRmNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-02T04:30:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-02T04:30:43Z"}, "message": "(init_lex): Set up ridpointers for `iterator'.\n\nBut maybe turn it off again.\n\nFrom-SVN: r3588", "tree": {"sha": "5fd440f269543212a0159587c139e3dd3ec6b6a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd440f269543212a0159587c139e3dd3ec6b6a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7/comments", "author": null, "committer": null, "parents": [{"sha": "75621238d054c9e18badc5b63a6aa0f9605a4d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75621238d054c9e18badc5b63a6aa0f9605a4d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75621238d054c9e18badc5b63a6aa0f9605a4d05"}], "stats": {"total": 135, "additions": 64, "deletions": 71}, "files": [{"sha": "dafbefa6fc6a1a8214b499987b3b792010cea0d7", "filename": "gcc/c-lex.c", "status": "modified", "additions": 64, "deletions": 71, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=6506ecd7a5f79c711eb29cf1d5cfd96389dffdf7", "patch": "@@ -96,12 +96,12 @@ static int ignore_escape_flag = 0;\n /* Command-line: gperf -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n struct resword { char *name; short token; enum rid rid; };\n \n-#define TOTAL_KEYWORDS 53\n+#define TOTAL_KEYWORDS 55\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 13\n-#define MIN_HASH_VALUE 7\n-#define MAX_HASH_VALUE 102\n-/* maximum key range = 96, duplicates = 0 */\n+#define MIN_HASH_VALUE 8\n+#define MAX_HASH_VALUE 81\n+/* maximum key range = 74, duplicates = 0 */\n \n #ifdef __GNUC__\n __inline\n@@ -113,19 +113,19 @@ hash (str, len)\n {\n   static unsigned char asso_values[] =\n     {\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,\n-     103, 103, 103, 103, 103,   1, 103,   2,   1,  24,\n-       1,   5,  19,  39,  16,  13, 103,   1,  25,   1,\n-      34,  34,  24, 103,  13,  12,   1,  45,  24,   7,\n-     103, 103,   2, 103, 103, 103, 103, 103,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82, 82, 82, 82, 82, 82,\n+      82, 82, 82, 82, 82,  1, 82, 18, 13, 25,\n+      7, 11,  1,  9,  2,  5, 82,  1, 26, 19,\n+      26, 46, 12, 82, 14,  2,  1, 32, 36,  1,\n+      82, 82,  3, 82, 82, 82, 82, 82,\n     };\n   register int hval = len;\n \n@@ -151,78 +151,70 @@ is_reserved_word (str, len)\n {\n   static struct resword wordlist[] =\n     {\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"asm\",  ASM_KEYWORD, NORID},\n-      {\"\",}, \n-      {\"__asm\",  ASM_KEYWORD, NORID},\n-      {\"\",}, \n-      {\"__asm__\",  ASM_KEYWORD, NORID},\n-      {\"break\",  BREAK, NORID},\n-      {\"__typeof__\",  TYPEOF, NORID},\n-      {\"\",}, \n-      {\"__alignof__\",  ALIGNOF, NORID},\n+      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"if\",  IF, NORID},\n       {\"\",}, \n-      {\"__attribute__\",  ATTRIBUTE, NORID},\n       {\"int\",  TYPESPEC, RID_INT},\n-      {\"__attribute\",  ATTRIBUTE, NORID},\n-      {\"__extension__\",  EXTENSION, NORID},\n-      {\"\",}, \n-      {\"__signed\",  TYPESPEC, RID_SIGNED},\n-      {\"\",}, \n+      {\"__typeof\",  TYPEOF, NORID},\n+      {\"sizeof\",  SIZEOF, NORID},\n+      {\"__typeof__\",  TYPEOF, NORID},\n       {\"__signed__\",  TYPESPEC, RID_SIGNED},\n-      {\"__inline__\",  SCSPEC, RID_INLINE},\n-      {\"else\",  ELSE, NORID},\n-      {\"__inline\",  SCSPEC, RID_INLINE},\n+      {\"switch\",  SWITCH, NORID},\n       {\"default\",  DEFAULT, NORID},\n-      {\"__typeof\",  TYPEOF, NORID},\n+      {\"__inline__\",  SCSPEC, RID_INLINE},\n+      {\"__signed\",  TYPESPEC, RID_SIGNED},\n+      {\"__iterator__\",  SCSPEC, RID_ITERATOR},\n+      {\"typeof\",  TYPEOF, NORID},\n+      {\"typedef\",  SCSPEC, RID_TYPEDEF},\n       {\"while\",  WHILE, NORID},\n-      {\"__alignof\",  ALIGNOF, NORID},\n       {\"struct\",  STRUCT, NORID},\n+      {\"signed\",  TYPESPEC, RID_SIGNED},\n+      {\"__inline\",  SCSPEC, RID_INLINE},\n+      {\"__extension__\",  EXTENSION, NORID},\n+      {\"__asm__\",  ASM_KEYWORD, NORID},\n+      {\"else\",  ELSE, NORID},\n+      {\"__alignof\",  ALIGNOF, NORID},\n+      {\"break\",  BREAK, NORID},\n+      {\"__alignof__\",  ALIGNOF, NORID},\n+      {\"for\",  FOR, NORID},\n+      {\"__attribute__\",  ATTRIBUTE, NORID},\n       {\"__const\",  TYPE_QUAL, RID_CONST},\n-      {\"if\",  IF, NORID},\n+      {\"\",}, \n       {\"__const__\",  TYPE_QUAL, RID_CONST},\n       {\"__label__\",  LABEL, NORID},\n-      {\"do\",  DO, NORID},\n-      {\"__volatile__\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"sizeof\",  SIZEOF, NORID},\n-      {\"__volatile\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"auto\",  SCSPEC, RID_AUTO},\n-      {\"void\",  TYPESPEC, RID_VOID},\n-      {\"char\",  TYPESPEC, RID_CHAR},\n-      {\"static\",  SCSPEC, RID_STATIC},\n+      {\"iterator\",  SCSPEC, RID_ITERATOR},\n+      {\"\",}, {\"\",}, \n+      {\"__attribute\",  ATTRIBUTE, NORID},\n       {\"case\",  CASE, NORID},\n+      {\"__asm\",  ASM_KEYWORD, NORID},\n       {\"extern\",  SCSPEC, RID_EXTERN},\n-      {\"switch\",  SWITCH, NORID},\n-      {\"for\",  FOR, NORID},\n-      {\"inline\",  SCSPEC, RID_INLINE},\n-      {\"typeof\",  TYPEOF, NORID},\n-      {\"typedef\",  SCSPEC, RID_TYPEDEF},\n-      {\"short\",  TYPESPEC, RID_SHORT},\n+      {\"register\",  SCSPEC, RID_REGISTER},\n       {\"\",}, \n       {\"return\",  RETURN, NORID},\n-      {\"enum\",  ENUM, NORID},\n-      {\"\",}, \n-      {\"double\",  TYPESPEC, RID_DOUBLE},\n-      {\"signed\",  TYPESPEC, RID_SIGNED},\n+      {\"inline\",  SCSPEC, RID_INLINE},\n+      {\"unsigned\",  TYPESPEC, RID_UNSIGNED},\n+      {\"__volatile__\",  TYPE_QUAL, RID_VOLATILE},\n+      {\"static\",  SCSPEC, RID_STATIC},\n+      {\"void\",  TYPESPEC, RID_VOID},\n       {\"float\",  TYPESPEC, RID_FLOAT},\n-      {\"\",}, {\"\",}, \n-      {\"volatile\",  TYPE_QUAL, RID_VOLATILE},\n-      {\"\",}, \n+      {\"short\",  TYPESPEC, RID_SHORT},\n+      {\"do\",  DO, NORID},\n+      {\"double\",  TYPESPEC, RID_DOUBLE},\n       {\"const\",  TYPE_QUAL, RID_CONST},\n+      {\"__volatile\",  TYPE_QUAL, RID_VOLATILE},\n+      {\"asm\",  ASM_KEYWORD, NORID},\n+      {\"goto\",  GOTO, NORID},\n+      {\"char\",  TYPESPEC, RID_CHAR},\n+      {\"\",}, {\"\",}, {\"\",}, \n+      {\"long\",  TYPESPEC, RID_LONG},\n+      {\"enum\",  ENUM, NORID},\n       {\"\",}, \n-      {\"unsigned\",  TYPESPEC, RID_UNSIGNED},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n+      {\"union\",  UNION, NORID},\n+      {\"auto\",  SCSPEC, RID_AUTO},\n       {\"continue\",  CONTINUE, NORID},\n-      {\"\",}, \n-      {\"register\",  SCSPEC, RID_REGISTER},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"goto\",  GOTO, NORID},\n       {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      \n-      {\"union\",  UNION, NORID},\n-      {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-      {\"long\",  TYPESPEC, RID_LONG},\n+      {\"\",}, \n+      {\"volatile\",  TYPE_QUAL, RID_VOLATILE},\n     };\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n@@ -290,6 +282,7 @@ init_lex ()\n   ridpointers[(int) RID_EXTERN] = get_identifier (\"extern\");\n   ridpointers[(int) RID_TYPEDEF] = get_identifier (\"typedef\");\n   ridpointers[(int) RID_REGISTER] = get_identifier (\"register\");\n+  ridpointers[(int) RID_ITERATOR] = get_identifier (\"iterator\");\n \n   /* Some options inhibit certain reserved words.\n      Clear those words out of the hash table so they won't be recognized.  */"}]}