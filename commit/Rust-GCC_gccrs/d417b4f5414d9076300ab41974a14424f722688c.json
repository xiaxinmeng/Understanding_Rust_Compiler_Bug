{"sha": "d417b4f5414d9076300ab41974a14424f722688c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxN2I0ZjU0MTRkOTA3NjMwMGFiNDE5NzRhMTQ0MjRmNzIyNjg4Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-28T21:57:04Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-03-09T23:54:51Z"}, "message": "c++: Fix convert_like in template [PR91465, PR93870, PR92031, PR94068]\n\nThe point of this patch is to fix the recurring problem of trees\ngenerated by convert_like while processing a template that break when\nsubstituting.  For instance, when convert_like creates a CALL_EXPR\nwhile in a template, substituting such a call breaks in finish_call_expr\nbecause we have two 'this' arguments.  Another problem is that we\ncan create &TARGET_EXPR<> and then fail when substituting because we're\ntaking the address of an rvalue.  I've analyzed some of the already fixed\nPRs and also some of the currently open ones:\n\nIn c++/93870 we create EnumWrapper<E>::operator E(&operator~(E)).\nIn c++/87145 we create S::operator int (&{N}).\nIn c++/92031 we create &TARGET_EXPR <0>.\n\nThe gist of the problem is when convert_like_real creates a call for\na ck_user or wraps a TARGET_EXPR in & in a template.  So in these cases\nuse IMPLICIT_CONV_EXPR.  In a template we shouldn't need to perform the\nactual conversion, we only need it's result type.\nperform_direct_initialization_if_possible and\nperform_implicit_conversion_flags can also create an IMPLICIT_CONV_EXPR.\n\nGiven the change above, build_converted_constant_expr can return an\nIMPLICIT_CONV_EXPR so call fold_non_dependent_expr rather than\nmaybe_constant_value to deal with that.\n\nTo avoid the problem of instantiating something twice in a row I'm\nremoving a call to instantiate_non_dependent_expr_sfinae in\ncompute_array_index_type_loc.  And the build_converted_constant_expr\npattern can now be simplified.\n\n2020-03-09  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/92031 - bogus taking address of rvalue error.\n\tPR c++/91465 - ICE with template codes in check_narrowing.\n\tPR c++/93870 - wrong error when converting template non-type arg.\n\tPR c++/94068 - ICE with template codes in check_narrowing.\n\t* call.c (convert_like_real): Return IMPLICIT_CONV_EXPR\n\tin a template when not ck_identity and we're dealing with a class.\n\t(convert_like_real) <case ck_ref_bind>: Return IMPLICIT_CONV_EXPR\n\tin a template if we need a temporary.\n\t* decl.c (compute_array_index_type_loc): Remove\n\tinstantiate_non_dependent_expr_sfinae call.  Call\n\tfold_non_dependent_expr instead of maybe_constant_value.\n\t(build_explicit_specifier): Don't instantiate or create a sentinel\n\tbefore converting the expression.\n\t* except.c (build_noexcept_spec): Likewise.\n\t* pt.c (convert_nontype_argument): Don't build IMPLICIT_CONV_EXPR.\n\tSet IMPLICIT_CONV_EXPR_NONTYPE_ARG if that's what\n\tbuild_converted_constant_expr returned.\n\t* typeck2.c (check_narrowing): Call fold_non_dependent_expr instead\n\tof maybe_constant_value.\n\n\t* g++.dg/cpp0x/conv-tmpl2.C: New test.\n\t* g++.dg/cpp0x/conv-tmpl3.C: New test.\n\t* g++.dg/cpp0x/conv-tmpl4.C: New test.\n\t* g++.dg/cpp0x/conv-tmpl5.C: New test.\n\t* g++.dg/cpp0x/conv-tmpl6.C: New test.\n\t* g++.dg/cpp1z/conv-tmpl1.C: New test.", "tree": {"sha": "9a570171945bfd3c01b4eab4a93b2a1c86c2ff46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a570171945bfd3c01b4eab4a93b2a1c86c2ff46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d417b4f5414d9076300ab41974a14424f722688c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d417b4f5414d9076300ab41974a14424f722688c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d417b4f5414d9076300ab41974a14424f722688c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d417b4f5414d9076300ab41974a14424f722688c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea182fe63634bb5b7913b3f1b6846e1900c5e0c4"}], "stats": {"total": 206, "additions": 176, "deletions": 30}, "files": [{"sha": "d9807ad83805b156799231ebfd5316eb4f049478", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -1,3 +1,25 @@\n+2020-03-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92031 - bogus taking address of rvalue error.\n+\tPR c++/91465 - ICE with template codes in check_narrowing.\n+\tPR c++/93870 - wrong error when converting template non-type arg.\n+\tPR c++/94068 - ICE with template codes in check_narrowing.\n+\t* call.c (convert_like_real): Return IMPLICIT_CONV_EXPR\n+\tin a template when not ck_identity and we're dealing with a class.\n+\t(convert_like_real) <case ck_ref_bind>: Return IMPLICIT_CONV_EXPR\n+\tin a template if we need a temporary.\n+\t* decl.c (compute_array_index_type_loc): Remove\n+\tinstantiate_non_dependent_expr_sfinae call.  Call\n+\tfold_non_dependent_expr instead of maybe_constant_value.\n+\t(build_explicit_specifier): Don't instantiate or create a sentinel\n+\tbefore converting the expression.\n+\t* except.c (build_noexcept_spec): Likewise.\n+\t* pt.c (convert_nontype_argument): Don't build IMPLICIT_CONV_EXPR.\n+\tSet IMPLICIT_CONV_EXPR_NONTYPE_ARG if that's what\n+\tbuild_converted_constant_expr returned.\n+\t* typeck2.c (check_narrowing): Call fold_non_dependent_expr instead\n+\tof maybe_constant_value.\n+\n 2020-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94067"}, {"sha": "5767a8b8c4e6b2fc062457ebc3ba2e95d978a662", "filename": "gcc/cp/call.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -7377,6 +7377,16 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n   if (issue_conversion_warnings && (complain & tf_warning))\n     conversion_null_warnings (totype, expr, fn, argnum);\n \n+  /* Creating &TARGET_EXPR<> in a template breaks when substituting,\n+     and creating a CALL_EXPR in a template breaks in finish_call_expr\n+     so use an IMPLICIT_CONV_EXPR for this conversion.  We would have\n+     created such codes e.g. when calling a user-defined conversion\n+     function.  */\n+  if (processing_template_decl\n+      && convs->kind != ck_identity\n+      && (CLASS_TYPE_P (totype) || CLASS_TYPE_P (TREE_TYPE (expr))))\n+    return build1 (IMPLICIT_CONV_EXPR, totype, expr);\n+\n   switch (convs->kind)\n     {\n     case ck_user:\n@@ -7763,6 +7773,14 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\texpr = convert_bitfield_to_declared_type (expr);\n \t\texpr = fold_convert (type, expr);\n \t      }\n+\n+\t    /* Creating &TARGET_EXPR<> in a template would break when\n+\t       tsubsting the expression, so use an IMPLICIT_CONV_EXPR\n+\t       instead.  This can happen even when there's no class\n+\t       involved, e.g., when converting an integer to a reference\n+\t       type.  */\n+\t    if (processing_template_decl)\n+\t      return build1 (IMPLICIT_CONV_EXPR, totype, expr);\n \t    expr = build_target_expr_with_type (expr, type, complain);\n \t  }\n "}, {"sha": "bb2427430746cf6889be72bd2e47170754ede8d2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -10276,13 +10276,12 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n \t   NOP_EXPR with TREE_SIDE_EFFECTS; don't fold in that case.  */;\n       else\n \t{\n-\t  size = instantiate_non_dependent_expr_sfinae (size, complain);\n \t  size = build_converted_constant_expr (size_type_node, size, complain);\n \t  /* Pedantically a constant expression is required here and so\n \t     __builtin_is_constant_evaluated () should fold to true if it\n \t     is successfully folded into a constant.  */\n-\t  size = maybe_constant_value (size, NULL_TREE,\n-\t\t\t\t       /*manifestly_const_eval=*/true);\n+\t  size = fold_non_dependent_expr (size, complain,\n+\t\t\t\t\t  /*manifestly_const_eval=*/true);\n \n \t  if (!TREE_CONSTANT (size))\n \t    size = origsize;\n@@ -17607,10 +17606,8 @@ build_explicit_specifier (tree expr, tsubst_flags_t complain)\n     /* Wait for instantiation, tsubst_function_decl will handle it.  */\n     return expr;\n \n-  expr = instantiate_non_dependent_expr_sfinae (expr, complain);\n-  /* Don't let convert_like_real create more template codes.  */\n-  processing_template_decl_sentinel s;\n   expr = build_converted_constant_bool_expr (expr, complain);\n+  expr = instantiate_non_dependent_expr_sfinae (expr, complain);\n   expr = cxx_constant_value (expr);\n   return expr;\n }"}, {"sha": "262ba5d309cfc8abf8b0241bbf7b774429533944", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -1299,10 +1299,8 @@ build_noexcept_spec (tree expr, tsubst_flags_t complain)\n   if (TREE_CODE (expr) != DEFERRED_NOEXCEPT\n       && !value_dependent_expression_p (expr))\n     {\n-      expr = instantiate_non_dependent_expr_sfinae (expr, complain);\n-      /* Don't let convert_like_real create more template codes.  */\n-      processing_template_decl_sentinel s;\n       expr = build_converted_constant_bool_expr (expr, complain);\n+      expr = instantiate_non_dependent_expr_sfinae (expr, complain);\n       expr = cxx_constant_value (expr);\n     }\n   if (TREE_CODE (expr) == INTEGER_CST)"}, {"sha": "49ee3920049e3cf6d2eda5dfd8c76ef47419f470", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -7068,26 +7068,6 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n       else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type)\n \t       || cxx_dialect >= cxx17)\n \t{\n-\t  /* Calling build_converted_constant_expr might create a call to\n-\t     a conversion function with a value-dependent argument, which\n-\t     could invoke taking the address of a temporary representing\n-\t     the result of the conversion.  */\n-\t  if (!same_type_ignoring_top_level_qualifiers_p (type, expr_type)\n-\t      && ((COMPOUND_LITERAL_P (expr)\n-\t\t   && CONSTRUCTOR_IS_DEPENDENT (expr)\n-\t\t   && MAYBE_CLASS_TYPE_P (expr_type)\n-\t\t   && TYPE_HAS_CONVERSION (expr_type))\n-\t\t  /* Similarly, converting e.g. an integer to a class\n-\t\t     involves a constructor call.  convert_like would\n-\t\t     create a TARGET_EXPR, but in a template we can't\n-\t\t     use AGGR_INIT_EXPR, and the TARGET_EXPR would lead\n-\t\t     to a bogus error.  */\n-\t\t  || (val_dep_p && MAYBE_CLASS_TYPE_P (type))))\n-\t    {\n-\t      expr = build1 (IMPLICIT_CONV_EXPR, type, expr);\n-\t      IMPLICIT_CONV_EXPR_NONTYPE_ARG (expr) = true;\n-\t      return expr;\n-\t    }\n \t  /* C++17: A template-argument for a non-type template-parameter shall\n \t     be a converted constant expression (8.20) of the type of the\n \t     template-parameter.  */\n@@ -7096,6 +7076,11 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t    /* Make sure we return NULL_TREE only if we have really issued\n \t       an error, as described above.  */\n \t    return (complain & tf_error) ? NULL_TREE : error_mark_node;\n+\t  else if (TREE_CODE (expr) == IMPLICIT_CONV_EXPR)\n+\t    {\n+\t      IMPLICIT_CONV_EXPR_NONTYPE_ARG (expr) = true;\n+\t      return expr;\n+\t    }\n \t  expr = maybe_constant_value (expr, NULL_TREE,\n \t\t\t\t       /*manifestly_const_eval=*/true);\n \t  expr = convert_from_reference (expr);"}, {"sha": "bff4ddbcf81de7930fd300055541186fc85a1c38", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -981,7 +981,11 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain,\n       return ok;\n     }\n \n-  init = maybe_constant_value (init);\n+  /* Even non-dependent expressions can still have template\n+     codes like CAST_EXPR, so use *_non_dependent_expr to cope.  */\n+  init = fold_non_dependent_expr (init, complain);\n+  if (init == error_mark_node)\n+    return ok;\n \n   /* If we were asked to only check constants, return early.  */\n   if (const_only && !TREE_CONSTANT (init))"}, {"sha": "f91af78a302461df05c33e9b1675f8af2dc0c68e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -1,3 +1,16 @@\n+2020-03-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92031 - bogus taking address of rvalue error.\n+\tPR c++/91465 - ICE with template codes in check_narrowing.\n+\tPR c++/93870 - wrong error when converting template non-type arg.\n+\tPR c++/94068 - ICE with template codes in check_narrowing.\n+\t* g++.dg/cpp0x/conv-tmpl2.C: New test.\n+\t* g++.dg/cpp0x/conv-tmpl3.C: New test.\n+\t* g++.dg/cpp0x/conv-tmpl4.C: New test.\n+\t* g++.dg/cpp0x/conv-tmpl5.C: New test.\n+\t* g++.dg/cpp0x/conv-tmpl6.C: New test.\n+\t* g++.dg/cpp1z/conv-tmpl1.C: New test.\n+\n 2020-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94067"}, {"sha": "8a505769c3c03b40e39c0138f58d91a7a43ab861", "filename": "gcc/testsuite/g++.dg/cpp0x/conv-tmpl2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl2.C?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/92031 - bogus taking address of rvalue error.\n+// { dg-do compile { target c++11 } }\n+\n+struct x { const int& l; };\n+\n+void a(const x&) {}\n+\n+template<class E>                          \n+void f() {\n+  a(x { 0 });\n+}\n+\n+void g() {\n+  a(x { 0 });\n+}\n+\n+void\n+test ()\n+{\n+  f<int>();\n+}"}, {"sha": "e2021aa13e1112d4ce746bb3b67ee870a038041d", "filename": "gcc/testsuite/g++.dg/cpp0x/conv-tmpl3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl3.C?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91465 - ICE with template codes in check_narrowing.\n+// { dg-do compile { target c++11 } }\n+\n+enum class D { X };\n+enum class S { Z };\n+\n+D foo(S) { return D{}; }\n+D foo(double) { return D{}; }\n+\n+template <typename>\n+struct Bar {\n+  D baz(S s)\n+  {\n+    return D{foo(s)};\n+  }\n+};"}, {"sha": "966a2e1ac9e4b4ebd6898307f2900ab95a30cfb4", "filename": "gcc/testsuite/g++.dg/cpp0x/conv-tmpl4.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl4.C?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/93870 - wrong error when converting template non-type arg.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename ENUM> struct EnumWrapper\n+{\n+\tENUM value;\n+\n+\tconstexpr operator ENUM() const\n+\t{\n+\t\treturn value;\n+\t}\n+};\n+\n+enum E : int { V };\n+\n+constexpr EnumWrapper<E> operator ~(E a)\n+{\n+    return {E(~int(a))};\n+}\n+\n+template <E X> struct R\n+{\n+    static void Func();\n+};\n+\n+template <E X> struct S : R<~X>\n+{\n+};\n+\n+void Test()\n+{\n+    S<E::V>::Func();\n+}"}, {"sha": "c83e6d83ed99318a6650bf4c48b69bf69c5630ea", "filename": "gcc/testsuite/g++.dg/cpp0x/conv-tmpl5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl5.C?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/94068 - ICE with template codes in check_narrowing.\n+// { dg-do compile { target c++11 } }\n+\n+enum class A { A1, A2 };\n+A foo ();\n+long foo (int);\n+\n+template <typename>\n+void\n+bar ()\n+{\n+  const auto c{foo ()};\n+}"}, {"sha": "2df3a6cc12957f1f897014b177bac0c3e7ae9373", "filename": "gcc/testsuite/g++.dg/cpp0x/conv-tmpl6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl6.C?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  constexpr A(int) { }\n+  constexpr operator int() const { return 1; };\n+};\n+\n+template <class T, int N>\n+struct B\n+{\n+  static constexpr A a = A(N);\n+  int ar[a];\n+};\n+\n+B<int, 10> b;"}, {"sha": "5b1205349d01ab54f3bcb9398671b8e3bcad710f", "filename": "gcc/testsuite/g++.dg/cpp1z/conv-tmpl1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconv-tmpl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d417b4f5414d9076300ab41974a14424f722688c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconv-tmpl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconv-tmpl1.C?ref=d417b4f5414d9076300ab41974a14424f722688c", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/91465 - ICE with template codes in check_narrowing.\n+// { dg-do compile { target c++17 } }\n+\n+enum class E { Z };\n+\n+template <typename F>\n+void foo(F)\n+{\n+  E{char(0)};\n+}"}]}