{"sha": "e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzYWY5YzRiNzVhNWUyNDYxOWVhYThhYTVlZWFmZWQ1N2IyZWRiZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2011-11-04T18:06:43Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2011-11-04T18:06:43Z"}, "message": "gcc-dg.exp (gcc_force_conventional_output): New global variable, default empty, -ffat-lto-objects for effective_target_lto.\n\n\t* lib/gcc-dg.exp (gcc_force_conventional_output): New global\n\tvariable, default empty, -ffat-lto-objects for effective_target_lto.\n\t(gcc-dg-test-1): Add options from dg-final methods.\n\t* lib/scanasm.exp (scan-assembler_required_options)\n\t(scan-assembler-not_required_options): New procs.\n\nFrom-SVN: r180972", "tree": {"sha": "d5ccebc41d8a7ca2e14d638123fd1ab92df3cb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5ccebc41d8a7ca2e14d638123fd1ab92df3cb37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d269f788e8e54567a223e49af95b266601285ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d269f788e8e54567a223e49af95b266601285ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d269f788e8e54567a223e49af95b266601285ba9"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "e39ed46636b8f963f9ef22184be501937c86535c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe", "patch": "@@ -1,3 +1,11 @@\n+2011-11-04  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* lib/gcc-dg.exp (gcc_force_conventional_output): New global\n+\tvariable, default empty, -ffat-lto-objects for effective_target_lto.\n+\t(gcc-dg-test-1): Add options from dg-final methods.\n+\t* lib/scanasm.exp (scan-assembler_required_options)\n+\t(scan-assembler-not_required_options): New procs.\n+\n 2011-10-09  Magnus Fromreide  <magfr@lysator.liu.se>\n \n         * g++.dg/cpp0x/enum21a.C: Test that enum x { y, } does"}, {"sha": "d0b679d7ad600010a31684650e5b62e80f189c41", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe", "patch": "@@ -73,6 +73,13 @@ if [info exists ADDITIONAL_TORTURE_OPTIONS] {\n }\n \n set LTO_TORTURE_OPTIONS \"\"\n+\n+# Some torture-options cause intermediate code output, unusable for\n+# testing using e.g. scan-assembler.  In this variable are the options\n+# how to force it, when needed.\n+global gcc_force_conventional_output\n+set gcc_force_conventional_output \"\"\n+\n if [check_effective_target_lto] {\n     # When having plugin test both slim and fat LTO and plugin/nonplugin\n     # path.\n@@ -81,6 +88,7 @@ if [check_effective_target_lto] {\n \t  { -O2 -flto -fno-use-linker-plugin -flto-partition=none } \\\n \t  { -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects }\n       ]\n+      set gcc_force_conventional_output \"-ffat-lto-objects\"\n     } else {\n       set LTO_TORTURE_OPTIONS [list \\\n \t  { -O2 -flto -flto-partition=none } \\\n@@ -156,6 +164,19 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \t}\n     }\n \n+    # Let { dg-final { action } } force options as returned by an\n+    # optional proc ${action}_required_options.\n+    upvar 2 dg-final-code finalcode\n+    foreach x [split $finalcode \"\\n\"] {\n+\tset finalcmd [lindex $x 0]\n+\tif { [info procs ${finalcmd}_required_options] != \"\" } {\n+\t    set req [${finalcmd}_required_options]\n+\t    if { $req != \"\" } {\n+\t\tlappend extra_tool_flags $req\n+\t    }\n+\t}\n+    }\n+\n     if { $extra_tool_flags != \"\" } {\n \tlappend options \"additional_flags=$extra_tool_flags\"\n     }"}, {"sha": "3ba22f9dad7b42c0c8995854597236243b55c48c", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=e03af9c4b75a5e24619eaa8aa5eeafed57b2edbe", "patch": "@@ -85,6 +85,11 @@ proc scan-assembler { args } {\n     dg-scan \"scan-assembler\" 1 $testcase $output_file $args\n }\n \n+proc scan-assembler_required_options { args } {\n+    global gcc_force_conventional_output\n+    return $gcc_force_conventional_output\n+}\n+\n # Check that a pattern is not present in the .s file produced by the\n # compiler.  See dg-scan for details.\n \n@@ -96,6 +101,11 @@ proc scan-assembler-not { args } {\n     dg-scan \"scan-assembler-not\" 0 $testcase $output_file $args\n }\n \n+proc scan-assembler-not_required_options { args } {\n+    global gcc_force_conventional_output\n+    return $gcc_force_conventional_output\n+}\n+\n # Return the scan for the assembly for hidden visibility. \n \n proc hidden-scan-for { symbol } {"}]}