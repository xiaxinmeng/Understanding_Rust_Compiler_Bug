{"sha": "c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0MjljMmFiYTgwZjg0NTkzOWZmYTZiMmNmZThhMGJlMWI1MDA3OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-03-19T15:56:27Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-03-19T15:56:27Z"}, "message": "API extension for binutils (type of symbols).\n\n\t* lto-section-in.c: Add ext_symtab.\n\t* lto-streamer-out.c (write_symbol_extension_info): New.\n\t(produce_symtab_extension): New.\n\t(produce_asm_for_decls): Stream also produce_symtab_extension.\n\t* lto-streamer.h (enum lto_section_type): New section.\n\t* lto-symtab.h (enum gcc_plugin_symbol_type): New.\n\t(enum gcc_plugin_symbol_section_kind): Likewise.\n\t* lto-plugin.c (LTO_SECTION_PREFIX): Rename to ...\n\t(LTO_SYMTAB_PREFIX): ... this.\n\t(LTO_SECTION_PREFIX_LEN): Rename to ...\n\t(LTO_SYMTAB_PREFIX_LEN): ... this.\n\t(LTO_SYMTAB_EXT_PREFIX): New.\n\t(LTO_SYMTAB_EXT_PREFIX_LEN): New.\n\t(LTO_LTO_PREFIX): New.\n\t(LTO_LTO_PREFIX_LEN): New.\n\t(parse_table_entry): Fill up unused to zero.\n\t(parse_table_entry_extension): New.\n\t(parse_symtab_extension): New.\n\t(finish_conflict_resolution): Change type\n\tfor resolution.\n\t(process_symtab): Use new macro name.\n\t(process_symtab_extension): New.\n\t(claim_file_handler): Parse also process_symtab_extension.\n\t(onload): Call new add_symbols_v2.", "tree": {"sha": "24fdc75d0c796217da6680c0dd3e9abddb1238ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24fdc75d0c796217da6680c0dd3e9abddb1238ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl5zlisACgkQTcGC3A+n\nN4UtJAgAsnewk895p97t/XZibl26kbwzU4vGYMyzobz3BCWbnrpY0AJfwcib7Ozt\nL4SDxxLIuQqWgSMm+k5Y9QQQlvI/o3hSZZsl4o0LgNvIT3Cjufm6O9s4CAHELd5U\nG37kcfO5CISmAXLQGHtKjyh0+Bptm3s5M3b//JBv3HqM3xLNkaeSRGU3Mhu8Klt7\nHRosFI2lW9rHSTM7nrHqcxe0JXO5MSvhIWJoAh2q2WFYve+sLWRpWjgC+T7k/WJj\nICn2J87X2NJBo8DGbseJt970geMMyv8vlcMPMlM2/OOCqaynmo/WYxCQVGVgxbPw\nGXxOzAUfoVI9XCtkN9EEzN+7RCIaBw==\n=JTN3\n-----END PGP SIGNATURE-----", "payload": "tree 24fdc75d0c796217da6680c0dd3e9abddb1238ca\nparent f5389e17e4b8cfd4877082b46d31d1db3341a0aa\nauthor Martin Liska <mliska@suse.cz> 1584633387 +0100\ncommitter Martin Liska <mliska@suse.cz> 1584633387 +0100\n\nAPI extension for binutils (type of symbols).\n\n\t* lto-section-in.c: Add ext_symtab.\n\t* lto-streamer-out.c (write_symbol_extension_info): New.\n\t(produce_symtab_extension): New.\n\t(produce_asm_for_decls): Stream also produce_symtab_extension.\n\t* lto-streamer.h (enum lto_section_type): New section.\n\t* lto-symtab.h (enum gcc_plugin_symbol_type): New.\n\t(enum gcc_plugin_symbol_section_kind): Likewise.\n\t* lto-plugin.c (LTO_SECTION_PREFIX): Rename to ...\n\t(LTO_SYMTAB_PREFIX): ... this.\n\t(LTO_SECTION_PREFIX_LEN): Rename to ...\n\t(LTO_SYMTAB_PREFIX_LEN): ... this.\n\t(LTO_SYMTAB_EXT_PREFIX): New.\n\t(LTO_SYMTAB_EXT_PREFIX_LEN): New.\n\t(LTO_LTO_PREFIX): New.\n\t(LTO_LTO_PREFIX_LEN): New.\n\t(parse_table_entry): Fill up unused to zero.\n\t(parse_table_entry_extension): New.\n\t(parse_symtab_extension): New.\n\t(finish_conflict_resolution): Change type\n\tfor resolution.\n\t(process_symtab): Use new macro name.\n\t(process_symtab_extension): New.\n\t(claim_file_handler): Parse also process_symtab_extension.\n\t(onload): Call new add_symbols_v2.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5389e17e4b8cfd4877082b46d31d1db3341a0aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5389e17e4b8cfd4877082b46d31d1db3341a0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5389e17e4b8cfd4877082b46d31d1db3341a0aa"}], "stats": {"total": 271, "additions": 258, "deletions": 13}, "files": [{"sha": "6b1b2956e7a04c5cd2cd649b5bd1fb80f41ebc88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -1,3 +1,11 @@\n+2020-03-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-section-in.c: Add ext_symtab.\n+\t* lto-streamer-out.c (write_symbol_extension_info): New.\n+\t(produce_symtab_extension): New.\n+\t(produce_asm_for_decls): Stream also produce_symtab_extension.\n+\t* lto-streamer.h (enum lto_section_type): New section.\n+\n 2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/94211"}, {"sha": "0923a8c07468c51694f2f19065805356f37ecfe3", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -38,6 +38,7 @@ const char *lto_section_name[LTO_N_SECTION_TYPES] =\n   \"function_body\",\n   \"statics\",\n   \"symtab\",\n+  \"ext_symtab\",\n   \"refs\",\n   \"asm\",\n   \"jmpfuncs\","}, {"sha": "a219c1d0dd1a02bfdd6f04fcc0de5bbeea543bd8", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"print-tree.h\"\n #include \"tree-dfa.h\"\n #include \"file-prefix-map.h\" /* remap_debug_filename()  */\n+#include \"output.h\"\n \n \n static void lto_write_tree (struct output_block*, tree, bool);\n@@ -2777,12 +2778,32 @@ write_symbol (struct streamer_tree_cache_d *cache,\n   lto_write_data (&slot_num, 4);\n }\n \n+/* Write extension information for symbols (symbol type, section flags).  */\n+\n+static void\n+write_symbol_extension_info (tree t)\n+{\n+  unsigned char c;\n+  c = ((unsigned char) TREE_CODE (t) == VAR_DECL\n+       ? GCCST_VARIABLE : GCCST_FUNCTION);\n+  lto_write_data (&c, 1);\n+  unsigned char section_kind = 0;\n+  if (TREE_CODE (t) == VAR_DECL)\n+    {\n+      section *s = get_variable_section (t, false);\n+      if (s->common.flags & SECTION_BSS)\n+\tsection_kind |= GCCSSK_BSS;\n+    }\n+  lto_write_data (&section_kind, 1);\n+}\n+\n /* Write an IL symbol table to OB.\n    SET and VSET are cgraph/varpool node sets we are outputting.  */\n \n-static void\n+static unsigned int\n produce_symtab (struct output_block *ob)\n {\n+  unsigned int streamed_symbols = 0;\n   struct streamer_tree_cache_d *cache = ob->writer_cache;\n   char *section_name = lto_get_section_name (LTO_section_symtab, NULL, 0, NULL);\n   lto_symtab_encoder_t encoder = ob->decl_state->symtab_node_encoder;\n@@ -2804,6 +2825,7 @@ produce_symtab (struct output_block *ob)\n       if (DECL_EXTERNAL (node->decl) || !node->output_to_lto_symbol_table_p ())\n \tcontinue;\n       write_symbol (cache, node->decl, &seen, false);\n+      ++streamed_symbols;\n     }\n   for (lsei = lsei_start (encoder);\n        !lsei_end_p (lsei); lsei_next (&lsei))\n@@ -2813,8 +2835,61 @@ produce_symtab (struct output_block *ob)\n       if (!DECL_EXTERNAL (node->decl) || !node->output_to_lto_symbol_table_p ())\n \tcontinue;\n       write_symbol (cache, node->decl, &seen, false);\n+      ++streamed_symbols;\n+    }\n+\n+  lto_end_section ();\n+\n+  return streamed_symbols;\n+}\n+\n+/* Symtab extension version.  */\n+#define LTO_SYMTAB_EXTENSION_VERSION 1\n+\n+/* Write an IL symbol table extension to OB.\n+   SET and VSET are cgraph/varpool node sets we are outputting.  */\n+\n+static void\n+produce_symtab_extension (struct output_block *ob,\n+\t\t\t  unsigned int previous_streamed_symbols)\n+{\n+  unsigned int streamed_symbols = 0;\n+  char *section_name = lto_get_section_name (LTO_section_symtab_extension,\n+\t\t\t\t\t     NULL, 0, NULL);\n+  lto_symtab_encoder_t encoder = ob->decl_state->symtab_node_encoder;\n+  lto_symtab_encoder_iterator lsei;\n+\n+  lto_begin_section (section_name, false);\n+  free (section_name);\n+\n+  unsigned char version = LTO_SYMTAB_EXTENSION_VERSION;\n+  lto_write_data (&version, 1);\n+\n+  /* Write the symbol table.\n+     First write everything defined and then all declarations.\n+     This is necessary to handle cases where we have duplicated symbols.  */\n+  for (lsei = lsei_start (encoder);\n+       !lsei_end_p (lsei); lsei_next (&lsei))\n+    {\n+      symtab_node *node = lsei_node (lsei);\n+\n+      if (DECL_EXTERNAL (node->decl) || !node->output_to_lto_symbol_table_p ())\n+\tcontinue;\n+      write_symbol_extension_info (node->decl);\n+      ++streamed_symbols;\n+    }\n+  for (lsei = lsei_start (encoder);\n+       !lsei_end_p (lsei); lsei_next (&lsei))\n+    {\n+      symtab_node *node = lsei_node (lsei);\n+\n+      if (!DECL_EXTERNAL (node->decl) || !node->output_to_lto_symbol_table_p ())\n+\tcontinue;\n+      write_symbol_extension_info (node->decl);\n+      ++streamed_symbols;\n     }\n \n+  gcc_assert (previous_streamed_symbols == streamed_symbols);\n   lto_end_section ();\n }\n \n@@ -3001,7 +3076,10 @@ produce_asm_for_decls (void)\n   /* Write the symbol table.  It is used by linker to determine dependencies\n      and thus we can skip it for WPA.  */\n   if (!flag_wpa)\n-    produce_symtab (ob);\n+    {\n+      unsigned int streamed_symbols = produce_symtab (ob);\n+      produce_symtab_extension (ob, streamed_symbols);\n+    }\n \n   /* Write command line opts.  */\n   lto_write_options ();"}, {"sha": "76aa6fe34b893633dd35eef2e9572d182b8280bf", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -219,6 +219,7 @@ enum lto_section_type\n   LTO_section_function_body,\n   LTO_section_static_initializer,\n   LTO_section_symtab,\n+  LTO_section_symtab_extension,\n   LTO_section_refs,\n   LTO_section_asm,\n   LTO_section_jump_functions,"}, {"sha": "c44fb79feebb1d73b35f0ad7407a67eb3cba391e", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -1,3 +1,8 @@\n+2020-03-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-symtab.h (enum gcc_plugin_symbol_type): New.\n+\t(enum gcc_plugin_symbol_section_kind): Likewise.\n+\n 2020-03-19  Martin Liska  <mliska@suse.cz>\n \n \t* plugin-api.h (struct ld_plugin_symbol): Split"}, {"sha": "ef2e35f19c3ecffab000b4322e565bbfa015bc91", "filename": "include/lto-symtab.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/include%2Flto-symtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/include%2Flto-symtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flto-symtab.h?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -38,4 +38,17 @@ enum gcc_plugin_symbol_visibility\n     GCCPV_HIDDEN\n   };\n \n+enum gcc_plugin_symbol_type\n+{\n+  GCCST_UNKNOWN,\n+  GCCST_FUNCTION,\n+  GCCST_VARIABLE,\n+};\n+\n+enum gcc_plugin_symbol_section_kind\n+{\n+  GCCSSK_DEFAULT,\n+  GCCSSK_BSS\n+};\n+\n #endif /* GCC_LTO_SYMTAB_H  */"}, {"sha": "205652cdda49bc7d27e7899d7f1cecb9e86ce40f", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -1,3 +1,23 @@\n+2020-03-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-plugin.c (LTO_SECTION_PREFIX): Rename to ...\n+\t(LTO_SYMTAB_PREFIX): ... this.\n+\t(LTO_SECTION_PREFIX_LEN): Rename to ...\n+\t(LTO_SYMTAB_PREFIX_LEN): ... this.\n+\t(LTO_SYMTAB_EXT_PREFIX): New.\n+\t(LTO_SYMTAB_EXT_PREFIX_LEN): New.\n+\t(LTO_LTO_PREFIX): New.\n+\t(LTO_LTO_PREFIX_LEN): New.\n+\t(parse_table_entry): Fill up unused to zero.\n+\t(parse_table_entry_extension): New.\n+\t(parse_symtab_extension): New.\n+\t(finish_conflict_resolution): Change type\n+\tfor resolution.\n+\t(process_symtab): Use new macro name.\n+\t(process_symtab_extension): New.\n+\t(claim_file_handler): Parse also process_symtab_extension.\n+\t(onload): Call new add_symbols_v2.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "ca6c84a1ffd60771e85335045c3c14ce4f6ea4d2", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 130, "deletions": 11, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8429c2aba80f845939ffa6b2cfe8a0be1b50078/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=c8429c2aba80f845939ffa6b2cfe8a0be1b50078", "patch": "@@ -88,10 +88,14 @@ along with this program; see the file COPYING3.  If not see\n \n /* LTO magic section name.  */\n \n-#define LTO_SECTION_PREFIX\t\".gnu.lto_.symtab\"\n-#define LTO_SECTION_PREFIX_LEN\t(sizeof (LTO_SECTION_PREFIX) - 1)\n-#define OFFLOAD_SECTION\t\t\".gnu.offload_lto_.opts\"\n-#define OFFLOAD_SECTION_LEN\t(sizeof (OFFLOAD_SECTION) - 1)\n+#define LTO_SYMTAB_PREFIX\t    \".gnu.lto_.symtab\"\n+#define LTO_SYMTAB_PREFIX_LEN\t    (sizeof (LTO_SYMTAB_PREFIX) - 1)\n+#define LTO_SYMTAB_EXT_PREFIX\t    \".gnu.lto_.ext_symtab\"\n+#define LTO_SYMTAB_EXT_PREFIX_LEN   (sizeof (LTO_SYMTAB_EXT_PREFIX) - 1)\n+#define LTO_LTO_PREFIX\t\t    \".gnu.lto_.lto\"\n+#define LTO_LTO_PREFIX_LEN\t    (sizeof (LTO_LTO_PREFIX) - 1)\n+#define OFFLOAD_SECTION\t\t    \".gnu.offload_lto_.opts\"\n+#define OFFLOAD_SECTION_LEN\t    (sizeof (OFFLOAD_SECTION) - 1)\n \n /* The part of the symbol table the plugin has to keep track of. Note that we\n    must keep SYMS until all_symbols_read is called to give the linker time to\n@@ -159,7 +163,7 @@ static ld_plugin_register_cleanup register_cleanup;\n static ld_plugin_add_input_file add_input_file;\n static ld_plugin_add_input_library add_input_library;\n static ld_plugin_message message;\n-static ld_plugin_add_symbols add_symbols;\n+static ld_plugin_add_symbols add_symbols, add_symbols_v2;\n \n static struct plugin_file_info *claimed_files = NULL;\n static unsigned int num_claimed_files = 0;\n@@ -286,6 +290,8 @@ parse_table_entry (char *p, struct ld_plugin_symbol *entry,\n   else\n     entry->comdat_key = xstrdup (entry->comdat_key);\n \n+  entry->unused = entry->section_kind = entry->symbol_type = 0;\n+\n   t = *p;\n   check (t <= 4, LDPL_FATAL, \"invalid symbol kind found\");\n   entry->def = translate_kind[t];\n@@ -309,6 +315,32 @@ parse_table_entry (char *p, struct ld_plugin_symbol *entry,\n   return p;\n }\n \n+/* Parse an entry of the IL symbol table. The data to be parsed is pointed\n+   by P and the result is written in ENTRY. The slot number is stored in SLOT.\n+   Returns the address of the next entry. */\n+\n+static char *\n+parse_table_entry_extension (char *p, struct ld_plugin_symbol *entry)\n+{\n+  unsigned char t;\n+  enum ld_plugin_symbol_type symbol_types[] =\n+    {\n+      LDST_UNKNOWN,\n+      LDST_FUNCTION,\n+      LDST_VARIABLE,\n+    };\n+\n+  t = *p;\n+  check (t <= 2, LDPL_FATAL, \"invalid symbol type found\");\n+  entry->symbol_type = symbol_types[t];\n+  p++;\n+  entry->section_kind = *p;\n+  p++;\n+\n+  return p;\n+}\n+\n+\n /* Translate the IL symbol table located between DATA and END. Append the\n    slots and symbols to OUT. */\n \n@@ -339,6 +371,24 @@ translate (char *data, char *end, struct plugin_symtab *out)\n   out->aux = aux;\n }\n \n+static void\n+parse_symtab_extension (char *data, char *end, struct plugin_symtab *out)\n+{\n+  unsigned i;\n+\n+  unsigned char version = *data;\n+  data++;\n+\n+  /* Version 1 contains the following data per entry:\n+     - symbol_type\n+     - section_kind\n+     .  */\n+\n+  if (version == 1)\n+    for (i = 0; i < out->nsyms; i++)\n+      data = parse_table_entry_extension (data, &out->syms[i]);\n+}\n+\n /* Free all memory that is no longer needed after writing the symbol\n    resolution. */\n \n@@ -431,7 +481,7 @@ finish_conflict_resolution (struct plugin_symtab *symtab,\n \n   for (i = 0; i < symtab->nsyms; i++)\n     { \n-      int resolution = LDPR_UNKNOWN;\n+      char resolution = LDPR_UNKNOWN;\n \n       if (symtab->aux[i].next_conflict == -1)\n \tcontinue;\n@@ -953,7 +1003,7 @@ process_symtab (void *data, const char *name, off_t offset, off_t length)\n   char *s;\n   char *secdatastart, *secdata;\n \n-  if (strncmp (name, LTO_SECTION_PREFIX, LTO_SECTION_PREFIX_LEN) != 0)\n+  if (strncmp (name, LTO_SYMTAB_PREFIX, LTO_SYMTAB_PREFIX_LEN) != 0)\n     return 1;\n \n   s = strrchr (name, '.');\n@@ -995,6 +1045,59 @@ process_symtab (void *data, const char *name, off_t offset, off_t length)\n   return 0;\n }\n \n+/* Process one section of an object file.  */\n+\n+static int\n+process_symtab_extension (void *data, const char *name, off_t offset,\n+\t\t\t  off_t length)\n+{\n+  struct plugin_objfile *obj = (struct plugin_objfile *)data;\n+  char *s;\n+  char *secdatastart, *secdata;\n+\n+  if (strncmp (name, LTO_SYMTAB_EXT_PREFIX, LTO_SYMTAB_EXT_PREFIX_LEN) != 0)\n+    return 1;\n+\n+  s = strrchr (name, '.');\n+  if (s)\n+    sscanf (s, \".%\" PRI_LL \"x\", &obj->out->id);\n+  secdata = secdatastart = xmalloc (length);\n+  offset += obj->file->offset;\n+  if (offset != lseek (obj->file->fd, offset, SEEK_SET))\n+    goto err;\n+\n+  do\n+    {\n+      ssize_t got = read (obj->file->fd, secdata, length);\n+      if (got == 0)\n+\tbreak;\n+      else if (got > 0)\n+\t{\n+\t  secdata += got;\n+\t  length -= got;\n+\t}\n+      else if (errno != EINTR)\n+\tgoto err;\n+    }\n+  while (length > 0);\n+  if (length > 0)\n+    goto err;\n+\n+  parse_symtab_extension (secdatastart, secdata, obj->out);\n+  obj->found++;\n+  free (secdatastart);\n+  return 1;\n+\n+err:\n+  if (message)\n+    message (LDPL_FATAL, \"%s: corrupt object file\", obj->file->name);\n+  /* Force claim_file_handler to abandon this file.  */\n+  obj->found = 0;\n+  free (secdatastart);\n+  return 0;\n+}\n+\n+\n /* Find an offload section of an object file.  */\n \n static int\n@@ -1055,8 +1158,17 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n   if (!obj.objfile && !err)\n     goto err;\n \n-  if (obj.objfile)\n-    errmsg = simple_object_find_sections (obj.objfile, process_symtab, &obj, &err);\n+   if (obj.objfile)\n+    {\n+      errmsg = simple_object_find_sections (obj.objfile, process_symtab, &obj,\n+\t\t\t\t\t    &err);\n+      /*  Parsing symtab extension should be done only for add_symbols_v2 and\n+\t  later versions.  */\n+      if (!errmsg && add_symbols_v2 != NULL)\n+\terrmsg = simple_object_find_sections (obj.objfile,\n+\t\t\t\t\t      process_symtab_extension,\n+\t\t\t\t\t      &obj, &err);\n+    }\n \n   if (!obj.objfile || errmsg)\n     {\n@@ -1080,8 +1192,12 @@ claim_file_handler (const struct ld_plugin_input_file *file, int *claimed)\n \n   if (obj.found > 0)\n     {\n-      status = add_symbols (file->handle, lto_file.symtab.nsyms,\n-\t\t\t    lto_file.symtab.syms);\n+      if (add_symbols_v2)\n+\tstatus = add_symbols_v2 (file->handle, lto_file.symtab.nsyms,\n+\t\t\t\t lto_file.symtab.syms);\n+      else\n+\tstatus = add_symbols (file->handle, lto_file.symtab.nsyms,\n+\t\t\t      lto_file.symtab.syms);\n       check (status == LDPS_OK, LDPL_FATAL, \"could not add symbols\");\n \n       num_claimed_files++;\n@@ -1242,6 +1358,9 @@ onload (struct ld_plugin_tv *tv)\n \tcase LDPT_REGISTER_CLAIM_FILE_HOOK:\n \t  register_claim_file = p->tv_u.tv_register_claim_file;\n \t  break;\n+\tcase LDPT_ADD_SYMBOLS_V2:\n+\t  add_symbols_v2 = p->tv_u.tv_add_symbols;\n+\t  break;\n \tcase LDPT_ADD_SYMBOLS:\n \t  add_symbols = p->tv_u.tv_add_symbols;\n \t  break;"}]}