{"sha": "f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkMTBhMDIxYmU4ZThmNTdiY2YzNzA4YmVjOGRiMTJlYjJiOGU0ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-14T14:56:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-14T14:56:46Z"}, "message": "[multiple changes]\n\n2011-10-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb: Return objects are aliased if their type is\n\timmutably limited as per AI05-0053.\n\n2011-10-14  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_And): Remove Short_Circuit_And_Or\n\texpansion code (moved to sem_res) (Expand_N_Op_Or): Remove\n\tShort_Circuit_And_Or expansion code (moved to sem_res).\n\t* sem_res.adb (Resolve_Logical_Op): Add code to rewrite Boolean\n\t\"and\" and \"or\" operators as short-circuit \"and then\" and \"or\n\telse\", when pragma Short_Circuit_And_Or is active.\n\nFrom-SVN: r179985", "tree": {"sha": "50ea0b1564170f795da35865e7878ba5ae78d38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50ea0b1564170f795da35865e7878ba5ae78d38f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/comments", "author": null, "committer": null, "parents": [{"sha": "008d5fccd8a264d12330914f5b14e74a51c9ef03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008d5fccd8a264d12330914f5b14e74a51c9ef03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008d5fccd8a264d12330914f5b14e74a51c9ef03"}], "stats": {"total": 123, "additions": 76, "deletions": 47}, "files": [{"sha": "2bba0278f2aba851acbf644e50f4fa3c354f625a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "patch": "@@ -1,3 +1,17 @@\n+2011-10-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb: Return objects are aliased if their type is\n+\timmutably limited as per AI05-0053.\n+\n+2011-10-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_And): Remove Short_Circuit_And_Or\n+\texpansion code (moved to sem_res) (Expand_N_Op_Or): Remove\n+\tShort_Circuit_And_Or expansion code (moved to sem_res).\n+\t* sem_res.adb (Resolve_Logical_Op): Add code to rewrite Boolean\n+\t\"and\" and \"or\" operators as short-circuit \"and then\" and \"or\n+\telse\", when pragma Short_Circuit_And_Or is active.\n+\n 2011-10-13  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch9.adb, sem_util.adb, sem_util.ads, exp_ch6.adb, sem_ch4.adb,"}, {"sha": "87e02d0e1ee943e21f276a9d3711e553ecbc2928", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 40, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "patch": "@@ -5579,26 +5579,10 @@ package body Exp_Ch4 is\n          Expand_Boolean_Operator (N);\n \n       elsif Is_Boolean_Type (Etype (N)) then\n-\n-         --  Replace AND by AND THEN if Short_Circuit_And_Or active and the\n-         --  type is standard Boolean (do not mess with AND that uses a non-\n-         --  standard Boolean type, because something strange is going on).\n-\n-         if Short_Circuit_And_Or and then Typ = Standard_Boolean then\n-            Rewrite (N,\n-              Make_And_Then (Sloc (N),\n-                Left_Opnd  => Relocate_Node (Left_Opnd (N)),\n-                Right_Opnd => Relocate_Node (Right_Opnd (N))));\n-            Analyze_And_Resolve (N, Typ);\n-\n-         --  Otherwise, adjust conditions\n-\n-         else\n-            Adjust_Condition (Left_Opnd (N));\n-            Adjust_Condition (Right_Opnd (N));\n-            Set_Etype (N, Standard_Boolean);\n-            Adjust_Result_Type (N, Typ);\n-         end if;\n+         Adjust_Condition (Left_Opnd (N));\n+         Adjust_Condition (Right_Opnd (N));\n+         Set_Etype (N, Standard_Boolean);\n+         Adjust_Result_Type (N, Typ);\n \n       elsif Is_Intrinsic_Subprogram (Entity (N)) then\n          Expand_Intrinsic_Call (N, Entity (N));\n@@ -7535,26 +7519,10 @@ package body Exp_Ch4 is\n          Expand_Boolean_Operator (N);\n \n       elsif Is_Boolean_Type (Etype (N)) then\n-\n-         --  Replace OR by OR ELSE if Short_Circuit_And_Or active and the type\n-         --  is standard Boolean (do not mess with AND that uses a non-standard\n-         --  Boolean type, because something strange is going on).\n-\n-         if Short_Circuit_And_Or and then Typ = Standard_Boolean then\n-            Rewrite (N,\n-              Make_Or_Else (Sloc (N),\n-                Left_Opnd  => Relocate_Node (Left_Opnd (N)),\n-                Right_Opnd => Relocate_Node (Right_Opnd (N))));\n-            Analyze_And_Resolve (N, Typ);\n-\n-         --  Otherwise, adjust conditions\n-\n-         else\n-            Adjust_Condition (Left_Opnd (N));\n-            Adjust_Condition (Right_Opnd (N));\n-            Set_Etype (N, Standard_Boolean);\n-            Adjust_Result_Type (N, Typ);\n-         end if;\n+         Adjust_Condition (Left_Opnd (N));\n+         Adjust_Condition (Right_Opnd (N));\n+         Set_Etype (N, Standard_Boolean);\n+         Adjust_Result_Type (N, Typ);\n \n       elsif Is_Intrinsic_Subprogram (Entity (N)) then\n          Expand_Intrinsic_Call (N, Entity (N));"}, {"sha": "d71bde63974b0221e81eb19aa2fcc699654ec1a2", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "patch": "@@ -7356,6 +7356,48 @@ package body Sem_Res is\n          Check_For_Visible_Operator (N, B_Typ);\n       end if;\n \n+      --  Replace AND by AND THEN, or OR by OR ELSE, if Short_Circuit_And_Or\n+      --  is active and the result type is standard Boolean (do not mess with\n+      --  ops that return a nonstandard Boolean type, because something strange\n+      --  is going on).\n+\n+      --  Note: you might expect this replacement to be done during expansion,\n+      --  but that doesn't work, because when the pragma Short_Circuit_And_Or\n+      --  is used, no part of the right operand of an \"and\" or \"or\" operator\n+      --  should be executed if the left operand would short-circuit the\n+      --  evaluation of the corresponding \"and then\" or \"or else\". If we left\n+      --  the replacement to expansion time, then run-time checks associated\n+      --  with such operands would be evaluated unconditionally, due to being\n+      --  before to the condition prior to the rewriting as short-circuit forms\n+      --  during expansion.\n+\n+      if Short_Circuit_And_Or\n+        and then B_Typ = Standard_Boolean\n+        and then Nkind_In (N, N_Op_And, N_Op_Or)\n+      then\n+         if Nkind (N) = N_Op_And then\n+            Rewrite (N,\n+              Make_And_Then (Sloc (N),\n+                Left_Opnd  => Relocate_Node (Left_Opnd (N)),\n+                Right_Opnd => Relocate_Node (Right_Opnd (N))));\n+            Analyze_And_Resolve (N, B_Typ);\n+\n+         --  Case of OR changed to OR ELSE\n+\n+         else\n+            Rewrite (N,\n+              Make_Or_Else (Sloc (N),\n+                Left_Opnd  => Relocate_Node (Left_Opnd (N)),\n+                Right_Opnd => Relocate_Node (Right_Opnd (N))));\n+            Analyze_And_Resolve (N, B_Typ);\n+         end if;\n+\n+         --  Return now, since analysis of the rewritten ops will take care of\n+         --  other reference bookkeeping and expression folding.\n+\n+         return;\n+      end if;\n+\n       Resolve (Left_Opnd (N), B_Typ);\n       Resolve (Right_Opnd (N), B_Typ);\n "}, {"sha": "1375225c512612f0ab915c7c23a65771f2145ce8", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f2d10a021be8e8f57bcf3708bec8db12eb2b8e4d", "patch": "@@ -6567,19 +6567,18 @@ package body Sem_Util is\n            (Is_Object (E)\n              and then\n                (Is_Aliased (E)\n-                  or else (Present (Renamed_Object (E))\n-                             and then Is_Aliased_View (Renamed_Object (E)))))\n+                 or else (Present (Renamed_Object (E))\n+                           and then Is_Aliased_View (Renamed_Object (E)))))\n \n            or else ((Is_Formal (E)\n                       or else Ekind (E) = E_Generic_In_Out_Parameter\n                       or else Ekind (E) = E_Generic_In_Parameter)\n                     and then Is_Tagged_Type (Etype (E)))\n \n-           or else (Is_Concurrent_Type (E)\n-                     and then In_Open_Scopes (E))\n+           or else (Is_Concurrent_Type (E) and then In_Open_Scopes (E))\n \n-            --  Current instance of type, either directly or as rewritten\n-            --  reference to the current object.\n+           --  Current instance of type, either directly or as rewritten\n+           --  reference to the current object.\n \n            or else (Is_Entity_Name (Original_Node (Obj))\n                      and then Present (Entity (Original_Node (Obj)))\n@@ -6588,7 +6587,13 @@ package body Sem_Util is\n            or else (Is_Type (E) and then E = Current_Scope)\n \n            or else (Is_Incomplete_Or_Private_Type (E)\n-                     and then Full_View (E) = Current_Scope);\n+                     and then Full_View (E) = Current_Scope)\n+\n+           --  Ada 2012 AI05-0053: the return object of an extended return\n+           --  statement is aliased if its type is immutably limited.\n+\n+           or else (Is_Return_Object (E)\n+                     and then Is_Immutably_Limited_Type (Etype (E)));\n \n       elsif Nkind (Obj) = N_Selected_Component then\n          return Is_Aliased (Entity (Selector_Name (Obj)));"}]}