{"sha": "ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyOWEzNDhlYmUxMzQ1ZTQ2OWNlZGU5MWVhNGIyZWY3YzcyZTFmZQ==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2011-08-03T10:01:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T10:01:51Z"}, "message": "[multiple changes]\n\n2011-08-03  Yannick Moy  <moy@adacore.com>\n\n\t* alfa.ads Update format of ALFA section in ALI file in order to add a\n\tmapping from bodies to specs when both are present\n\t(ALFA_Scope_Record): add components for spec file/scope\n\t* get_alfa.adb (Get_ALFA): read the new file/scope for spec when present\n\t* lib-xref-alfa.adb\n\t(Collect_ALFA): after all scopes have been collected, fill in the spec\n\t information when relevant\n\t* put_alfa.adb (Put_ALFA): write the new file/scope for spec when\n\tpresent.\n\n2011-08-03  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Add_Inlined_Subprogram): Do not consider the enclosing\n\tcode unit to decide whether to add internally generated subprograms.\n\t\n2011-08-03  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_aux.ads, sem_aux.adb (Is_VM_By_Copy_Actual): New subprogram.\n\t* exp_ch9.adb\n\t(Build_Simple_Entry_Call): Handle actuals that must be handled by copy\n\tin VM targets.\n\n2011-08-03  Emmanuel Briot  <briot@adacore.com>\n\n\t* make.adb, makeutl.adb, makeutl.ads (Make.Switches_Of): now shares\n\tcode with Makeutl.Get_Switches.\n\t* prj-tree.adb: Update comment.\n\nFrom-SVN: r177257", "tree": {"sha": "f598a1cc49cea68a1f0ccdfe4a7e31f9cbdd9664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f598a1cc49cea68a1f0ccdfe4a7e31f9cbdd9664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9466892f26037f47b9406de56f8ec0f0ed8588a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9466892f26037f47b9406de56f8ec0f0ed8588a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9466892f26037f47b9406de56f8ec0f0ed8588a5"}], "stats": {"total": 236, "additions": 193, "deletions": 43}, "files": [{"sha": "7ce74cf3dfebc3c8177950e179e05cf0a297fa9e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -1,3 +1,9 @@\n+2011-08-03  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-proc.adb, prj-ext.adb, prj-ext.ads, prj-env.adb, prj-env.ads,\n+\tprj-tree.adb, prj-tree.ads (Initialize_And_Copy, Copy): new subprograms\n+\t(Process_Declarative_Items): new parameter Child_Env.\n+\n 2011-08-03  Yannick Moy  <moy@adacore.com>\n \n \t* alfa.ads Update format of ALFA section in ALI file in order to add a"}, {"sha": "050660e9b9d73876db29890f9b9ea46544a09246", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -2197,4 +2197,18 @@ package body Prj.Env is\n       Projects_Paths.Reset (Self.Cache);\n    end Free;\n \n+   ----------\n+   -- Copy --\n+   ----------\n+\n+   procedure Copy (From : Project_Search_Path; To : out Project_Search_Path) is\n+   begin\n+      Free (To);\n+      if From.Path /= null then\n+         To.Path := new String'(From.Path.all);\n+      end if;\n+\n+      --  No need to copy the Cache, it will be recomputed as needed.\n+   end Copy;\n+\n end Prj.Env;"}, {"sha": "75f014a4b206d277f54618bd127093f0da36a91f", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -162,6 +162,8 @@ package Prj.Env is\n    --  to search for projects on the path (and caches the results to improve\n    --  efficiency).\n \n+   No_Project_Search_Path : constant Project_Search_Path;\n+\n    procedure Initialize_Default_Project_Path\n      (Self        : in out Project_Search_Path;\n       Target_Name : String);\n@@ -170,6 +172,9 @@ package Prj.Env is\n    --  variables ADA_PROJECT_PATH and GPR_PROJECT_PATH). This does nothing if\n    --  Self has already been initialized.\n \n+   procedure Copy (From : Project_Search_Path; To : out Project_Search_Path);\n+   --  Copy From into To\n+\n    procedure Initialize_Empty (Self : in out Project_Search_Path);\n    --  Initialize self with an empty list of directories. If Self had already\n    --  been set, it is reset.\n@@ -234,4 +239,9 @@ private\n \n       Cache : Projects_Paths.Instance;\n    end record;\n+\n+   No_Project_Search_Path : constant Project_Search_Path :=\n+     (Path  => null,\n+      Cache => Projects_Paths.Nil);\n+\n end Prj.Env;"}, {"sha": "a235bde8fa2d14221765f00a9cd2b0b213256d02", "filename": "gcc/ada/prj-ext.adb", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-ext.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-ext.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-ext.adb?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -46,9 +46,11 @@ package body Prj.Ext is\n          if Copy_From.Refs /= null then\n             N := Name_To_Name_HTable.Get_First (Copy_From.Refs.all);\n             while N /= null loop\n-               N2 := new Name_To_Name;\n-               N2.Key := N.Key;\n-               N2.Value := N.Value;\n+               N2 := new Name_To_Name'\n+                 (Key    => N.Key,\n+                  Value  => N.Value,\n+                  Source => N.Source,\n+                  Next   => null);\n                Name_To_Name_HTable.Set (Self.Refs.all, N2);\n                N := Name_To_Name_HTable.Get_Next (Copy_From.Refs.all);\n             end loop;\n@@ -63,24 +65,47 @@ package body Prj.Ext is\n    procedure Add\n      (Self          : External_References;\n       External_Name : String;\n-      Value         : String)\n+      Value         : String;\n+      Source        : External_Source := External_Source'First)\n    is\n-      N : Name_To_Name_Ptr;\n+      Key : Name_Id;\n+      N   : Name_To_Name_Ptr;\n \n    begin\n-      N := new Name_To_Name;\n-\n-      Name_Len := Value'Length;\n-      Name_Buffer (1 .. Name_Len) := Value;\n-      N.Value := Name_Find;\n-\n       Name_Len := External_Name'Length;\n       Name_Buffer (1 .. Name_Len) := External_Name;\n       Canonical_Case_Env_Var_Name (Name_Buffer (1 .. Name_Len));\n-      N.Key := Name_Find;\n+      Key := Name_Find;\n+\n+      --  Check whether the value is already defined, to properly respect the\n+      --  overriding order.\n+\n+      if Source /= External_Source'First then\n+         N := Name_To_Name_HTable.Get (Self.Refs.all, Key);\n+         if N /= null then\n+            if External_Source'Pos (N.Source) <\n+              External_Source'Pos (Source)\n+            then\n+               if Current_Verbosity = High then\n+                  Debug_Output\n+                    (\"Not overridding existing variable '\" & External_Name\n+                     & \"', value was defined in \" & N.Source'Img);\n+               end if;\n+               return;\n+            end if;\n+         end if;\n+      end if;\n+\n+      Name_Len := Value'Length;\n+      Name_Buffer (1 .. Name_Len) := Value;\n+      N := new Name_To_Name'\n+        (Key    => Key,\n+         Source => Source,\n+         Value  => Name_Find,\n+         Next   => null);\n \n       if Current_Verbosity = High then\n-         Debug_Output (\"Add (\" & External_Name & \") is\", N.Value);\n+         Debug_Output (\"Add external (\" & External_Name & \") is\", N.Value);\n       end if;\n \n       Name_To_Name_HTable.Set (Self.Refs.all, N);\n@@ -103,7 +128,8 @@ package body Prj.Ext is\n                External_Name =>\n                  Declaration (Declaration'First .. Equal_Pos - 1),\n                Value         =>\n-                 Declaration (Equal_Pos + 1 .. Declaration'Last));\n+                 Declaration (Equal_Pos + 1 .. Declaration'Last),\n+               Source        => From_Command_Line);\n             return True;\n          end if;\n       end loop;\n@@ -146,6 +172,7 @@ package body Prj.Ext is\n          Value := Name_To_Name_HTable.Get (Self.Refs.all, Name_Find);\n \n          if Value /= null then\n+            Debug_Output (\"Value_Of (\" & Name & \") is in cache\", Value.Value);\n             return Value.Value;\n          end if;\n       end if;\n@@ -162,14 +189,15 @@ package body Prj.Ext is\n             Val := Name_Find;\n \n             if Current_Verbosity = High then\n-               Debug_Output (\"Value_Of (\" & Get_Name_String (External_Name)\n-                             & \") is\", Val);\n+               Debug_Output (\"Value_Of (\" & Name & \") is\", Val);\n             end if;\n \n             if Self.Refs /= null then\n-               Value := new Name_To_Name;\n-               Value.Key := External_Name;\n-               Value.Value := Val;\n+               Value := new Name_To_Name'\n+                 (Key    => External_Name,\n+                  Value  => Val,\n+                  Source => From_Environment,\n+                  Next   => null);\n                Name_To_Name_HTable.Set (Self.Refs.all, Value);\n             end if;\n \n@@ -178,8 +206,8 @@ package body Prj.Ext is\n \n          else\n             if Current_Verbosity = High then\n-               Debug_Output (\"Value_Of (\" & Get_Name_String (External_Name)\n-                             & \") is default\", With_Default);\n+               Debug_Output\n+                 (\"Value_Of (\" & Name & \") is default\", With_Default);\n             end if;\n \n             Free (Env_Value);"}, {"sha": "75b0ed2a0f1ba563d888aad9e68245f691a90f7f", "filename": "gcc/ada/prj-ext.ads", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-ext.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-ext.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-ext.ads?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -54,11 +54,25 @@ package Prj.Ext is\n    procedure Free (Self : in out External_References);\n    --  Free memory used by Self\n \n+   type External_Source is\n+     (From_Command_Line,\n+      From_Environment,\n+      From_External_Attribute);\n+   --  Where was the value of an external reference defined ?\n+   --  They are prioritized in that order, so that a user can always use the\n+   --  command line to override a value coming from his environment, or an\n+   --  environment variable to override a value defined in an aggregate project\n+   --  through the \"for External()...\" attribute.\n+\n    procedure Add\n      (Self          : External_References;\n       External_Name : String;\n-      Value         : String);\n-   --  Add an external reference (or modify an existing one)\n+      Value         : String;\n+      Source        : External_Source := External_Source'First);\n+   --  Add an external reference (or modify an existing one).\n+   --  No overriding is done if the Source's priority is less than the one\n+   --  used to previously set the value of the variable. The default for Source\n+   --  is such that overriding always occurs.\n \n    function Value_Of\n      (Self          : External_References;\n@@ -88,9 +102,10 @@ private\n    type Name_To_Name;\n    type Name_To_Name_Ptr is access all Name_To_Name;\n    type Name_To_Name is record\n-      Key   : Name_Id;\n-      Value : Name_Id;\n-      Next  : Name_To_Name_Ptr;\n+      Key    : Name_Id;\n+      Value  : Name_Id;\n+      Source : External_Source;\n+      Next   : Name_To_Name_Ptr;\n    end record;\n \n    procedure Set_Next (E : Name_To_Name_Ptr; Next : Name_To_Name_Ptr);"}, {"sha": "4e3ba1ba3688f3cc8b7d2cd92ffaad51476b4e6d", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 71, "deletions": 15, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -131,24 +131,40 @@ package body Prj.Proc is\n       Node_Tree         : Project_Node_Tree_Ref;\n       Env               : Prj.Tree.Environment;\n       Pkg               : Package_Id;\n-      Item              : Project_Node_Id);\n+      Item              : Project_Node_Id;\n+      Child_Env         : in out Prj.Tree.Environment;\n+      Can_Modify_Child_Env : Boolean);\n    --  Process declarative items starting with From_Project_Node, and put them\n    --  in declarations Decl. This is a recursive procedure; it calls itself for\n    --  a package declaration or a case construction.\n+   --  Child_Env is the modified environment after seeing declarations like\n+   --  \"for External(...) use\" or \"for Project_Path use\" in aggregate projects.\n+   --  It should have been initialized first. This environment can only be\n+   --  modified if Can_Modify_Child_Env is True, otherwise all the above\n+   --  attributes simply have no effect.\n \n    procedure Recursive_Process\n      (In_Tree                : Project_Tree_Ref;\n       Project                : out Project_Id;\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Extended_By            : Project_Id);\n+      Extended_By            : Project_Id;\n+      Child_Env              : in out Prj.Tree.Environment;\n+      Is_Root_Project        : Boolean);\n    --  Process project with node From_Project_Node in the tree. Do nothing if\n    --  From_Project_Node is Empty_Node. If project has already been processed,\n    --  simply return its project id. Otherwise create a new project id, mark it\n    --  as processed, call itself recursively for all imported projects and a\n    --  extended project, if any. Then process the declarative items of the\n    --  project.\n+   --  Child_Env is the environment created from an aggregate project (new\n+   --  external values or project path), and should be initialized before the\n+   --  call.\n+   --  Is_Root_Project should be true only for the project that the user\n+   --  explicitly loaded. In the context of aggregate projects, only that\n+   --  project is allowed to modify the environment that will be used to load\n+   --  projects (Child_Env).\n \n    function Get_Attribute_Index\n      (Tree  : Project_Node_Tree_Ref;\n@@ -1392,7 +1408,9 @@ package body Prj.Proc is\n       Node_Tree              : Project_Node_Tree_Ref;\n       Env                    : Prj.Tree.Environment;\n       Pkg                    : Package_Id;\n-      Item                   : Project_Node_Id)\n+      Item                   : Project_Node_Id;\n+      Child_Env              : in out Prj.Tree.Environment;\n+      Can_Modify_Child_Env   : Boolean)\n    is\n       procedure Check_Or_Set_Typed_Variable\n         (Value       : in out Variable_Value;\n@@ -1597,7 +1615,9 @@ package body Prj.Proc is\n                   Env                    => Env,\n                   Pkg                    => New_Pkg,\n                   Item                   =>\n-                    First_Declarative_Item_Of (Current_Item, Node_Tree));\n+                    First_Declarative_Item_Of (Current_Item, Node_Tree),\n+                  Child_Env              => Child_Env,\n+                  Can_Modify_Child_Env   => Can_Modify_Child_Env);\n             end;\n          end if;\n       end Process_Package_Declaration;\n@@ -1949,9 +1969,26 @@ package body Prj.Proc is\n          end if;\n \n          if Name = Snames.Name_External then\n+            if Can_Modify_Child_Env then\n+               Add (Child_Env.External,\n+                    External_Name => Get_Name_String (Index_Name),\n+                    Value         => Get_Name_String (New_Value.Value),\n+                    Source        => From_External_Attribute);\n+               Add (Env.External,\n+                    External_Name => Get_Name_String (Index_Name),\n+                    Value         => Get_Name_String (New_Value.Value),\n+                    Source        => From_External_Attribute);\n+            else\n+               if Current_Verbosity = High then\n+                  Debug_Output\n+                    (\"'for External' has no effect except in root aggregate (\"\n+                     & Get_Name_String (Index_Name) & \")\", New_Value.Value);\n+               end if;\n+            end if;\n+\n+         elsif Name = Snames.Name_Project_Path then\n             Debug_Output\n-              (\"Defined external value (\"\n-               & Get_Name_String (Index_Name) & \")\", New_Value.Value);\n+              (\"Defined project path\");\n          end if;\n       end Process_Expression_For_Associative_Array;\n \n@@ -2236,7 +2273,9 @@ package body Prj.Proc is\n                Node_Tree              => Node_Tree,\n                Env                    => Env,\n                Pkg                    => Pkg,\n-               Item                   => Decl_Item);\n+               Item                   => Decl_Item,\n+               Child_Env              => Child_Env,\n+               Can_Modify_Child_Env   => Can_Modify_Child_Env);\n          end if;\n       end Process_Case_Construction;\n \n@@ -2291,6 +2330,7 @@ package body Prj.Proc is\n       Env                    : in out Prj.Tree.Environment;\n       Reset_Tree             : Boolean := True)\n    is\n+      Child_Env : Prj.Tree.Environment;\n    begin\n       if Reset_Tree then\n \n@@ -2306,13 +2346,19 @@ package body Prj.Proc is\n \n       Debug_Increase_Indent (\"Process tree, phase 1\");\n \n+      Initialize_And_Copy (Child_Env, Copy_From => Env);\n+\n       Recursive_Process\n         (Project                => Project,\n          In_Tree                => In_Tree,\n          From_Project_Node      => From_Project_Node,\n          From_Project_Node_Tree => From_Project_Node_Tree,\n          Env                    => Env,\n-         Extended_By            => No_Project);\n+         Extended_By            => No_Project,\n+         Child_Env              => Child_Env,\n+         Is_Root_Project        => True);\n+\n+      Free (Child_Env);\n \n       Success :=\n         Total_Errors_Detected = 0\n@@ -2448,7 +2494,9 @@ package body Prj.Proc is\n       From_Project_Node      : Project_Node_Id;\n       From_Project_Node_Tree : Project_Node_Tree_Ref;\n       Env                    : in out Prj.Tree.Environment;\n-      Extended_By            : Project_Id)\n+      Extended_By            : Project_Id;\n+      Child_Env              : in out Prj.Tree.Environment;\n+      Is_Root_Project        : Boolean)\n    is\n       procedure Process_Imported_Projects\n         (Imported     : in out Project_List;\n@@ -2501,7 +2549,9 @@ package body Prj.Proc is\n                       (With_Clause, From_Project_Node_Tree),\n                   From_Project_Node_Tree => From_Project_Node_Tree,\n                   Env                    => Env,\n-                  Extended_By            => No_Project);\n+                  Extended_By            => No_Project,\n+                  Child_Env              => Child_Env,\n+                  Is_Root_Project        => False);\n \n                --  Imported is the id of the last imported project. If\n                --  it is nil, then this imported project is our first.\n@@ -2555,7 +2605,7 @@ package body Prj.Proc is\n                Errout_Handling   => Prj.Part.Never_Finalize,\n                Current_Directory => Get_Name_String (Project.Directory.Name),\n                Is_Config_File    => False,\n-               Env               => Env);\n+               Env               => Child_Env);\n \n             Success := not Prj.Tree.No (Loaded_Tree);\n \n@@ -2565,8 +2615,10 @@ package body Prj.Proc is\n                   Project                => List.Project,\n                   From_Project_Node      => Loaded_Tree,\n                   From_Project_Node_Tree => From_Project_Node_Tree,\n-                  Env                    => Env,\n-                  Extended_By            => No_Project);\n+                  Env                    => Child_Env,\n+                  Extended_By            => No_Project,\n+                  Child_Env              => Child_Env,\n+                  Is_Root_Project        => False);\n             else\n                Debug_Output (\"Failed to parse\", Name_Id (List.Path));\n             end if;\n@@ -2768,7 +2820,9 @@ package body Prj.Proc is\n                  (Declaration_Node, From_Project_Node_Tree),\n                From_Project_Node_Tree => From_Project_Node_Tree,\n                Env                    => Env,\n-               Extended_By            => Project);\n+               Extended_By            => Project,\n+               Child_Env              => Child_Env,\n+               Is_Root_Project        => False);\n \n             Process_Declarative_Items\n               (Project                => Project,\n@@ -2778,7 +2832,9 @@ package body Prj.Proc is\n                Env                    => Env,\n                Pkg                    => No_Package,\n                Item                   => First_Declarative_Item_Of\n-                 (Declaration_Node, From_Project_Node_Tree));\n+                 (Declaration_Node, From_Project_Node_Tree),\n+               Child_Env              => Child_Env,\n+               Can_Modify_Child_Env   => Is_Root_Project);\n \n             if Project.Extends /= No_Project then\n                Process_Extended_Project;"}, {"sha": "0a1b9a58ef084244ac347a50a5d2964e49663540", "filename": "gcc/ada/prj-tree.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-tree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-tree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.adb?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -1005,7 +1005,8 @@ package body Prj.Tree is\n    ----------------\n \n    procedure Initialize\n-     (Self : in out Environment; Flags : Processing_Flags) is\n+     (Self      : out Environment;\n+      Flags     : Processing_Flags) is\n    begin\n       --  Do not reset the external references, in case we are reloading a\n       --  project, since we want to preserve the current environment. But we\n@@ -1018,6 +1019,19 @@ package body Prj.Tree is\n       Self.Flags := Flags;\n    end Initialize;\n \n+   -------------------------\n+   -- Initialize_And_Copy --\n+   -------------------------\n+\n+   procedure Initialize_And_Copy\n+     (Self      : out Environment;\n+      Copy_From : Environment) is\n+   begin\n+      Self.Flags := Copy_From.Flags;\n+      Prj.Ext.Initialize (Self.External, Copy_From => Copy_From.External);\n+      Prj.Env.Copy (From => Copy_From.Project_Path, To => Self.Project_Path);\n+   end Initialize_And_Copy;\n+\n    ----------\n    -- Free --\n    ----------"}, {"sha": "fede1f9e438f5bdf43c077e2d0f01ba7a54f20be", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab29a348ebe1345e469cede91ea4b2ef7c72e1fe/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=ab29a348ebe1345e469cede91ea4b2ef7c72e1fe", "patch": "@@ -60,9 +60,16 @@ package Prj.Tree is\n       --  Configure errors and warnings\n    end record;\n \n-   procedure Initialize (Self : in out Environment; Flags : Processing_Flags);\n+   procedure Initialize\n+     (Self      : out Environment;\n+      Flags     : Processing_Flags);\n    --  Initialize a new environment\n \n+   procedure Initialize_And_Copy\n+     (Self      : out Environment;\n+      Copy_From : Environment);\n+   --  Initialize a new environment, copying its values from Copy_From\n+\n    procedure Free (Self : in out Environment);\n    --  Free the memory used by Self\n "}]}