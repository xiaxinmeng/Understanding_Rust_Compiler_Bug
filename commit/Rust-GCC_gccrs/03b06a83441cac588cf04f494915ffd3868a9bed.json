{"sha": "03b06a83441cac588cf04f494915ffd3868a9bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiMDZhODM0NDFjYWM1ODhjZjA0ZjQ5NDkxNWZmZDM4NjhhOWJlZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-10-31T21:37:10Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-10-31T21:37:10Z"}, "message": "re PR tree-optimization/55018 (CDDCE pass is too aggressive sometimes with infinite loops and with some functions)\n\ngcc/\n\tPR tree-optimization/55018\n\t* basic-block.h (dfs_find_deadend): New prototype.\n\t* cfganal.c (dfs_find_deadend): No longer static.  Use bitmap\n\tinstead of sbitmap for visited.\n\t(flow_dfs_compute_reverse_execute): Use dfs_find_deadend here, too.\n\t* dominance.c (calc_dfs_tree): If saw_unconnected,\n\ttraverse from dfs_find_deadend of unconnected b\n\tinstead of b directly.\n\ntestsuite/\n\tPR tree-optimization/55018\n\t* gcc.dg/torture/pr55018.c: New test.\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r193047", "tree": {"sha": "457138650afbcc0d91ef7e60a9f2ca4718a4b83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457138650afbcc0d91ef7e60a9f2ca4718a4b83d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03b06a83441cac588cf04f494915ffd3868a9bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b06a83441cac588cf04f494915ffd3868a9bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b06a83441cac588cf04f494915ffd3868a9bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b06a83441cac588cf04f494915ffd3868a9bed/comments", "author": null, "committer": null, "parents": [{"sha": "e212c7f56c62dc492e7d2af6d55636d19229d114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e212c7f56c62dc492e7d2af6d55636d19229d114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e212c7f56c62dc492e7d2af6d55636d19229d114"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "9bad56c6319ae3a9d676e8da289016e711ffcae7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03b06a83441cac588cf04f494915ffd3868a9bed", "patch": "@@ -1,3 +1,15 @@\n+2012-10-31  Steven Bosscher  <steven@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/55018\n+\t* basic-block.h (dfs_find_deadend): New prototype.\n+\t* cfganal.c (dfs_find_deadend): No longer static.  Use bitmap\n+\tinstead of sbitmap for visited.\n+\t(flow_dfs_compute_reverse_execute): Use dfs_find_deadend here, too.\n+\t* dominance.c (calc_dfs_tree): If saw_unconnected,\n+\ttraverse from dfs_find_deadend of unconnected b\n+\tinstead of b directly.\n+\n 2012-10-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/i386.c (ix86_expand_prologue): Emit frame info for the"}, {"sha": "b28c443996eb4bd7956656f8982431b966a66cd6", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=03b06a83441cac588cf04f494915ffd3868a9bed", "patch": "@@ -787,6 +787,7 @@ extern void remove_fake_exit_edges (void);\n extern void add_noreturn_fake_exit_edges (void);\n extern void connect_infinite_loops_to_exit (void);\n extern int post_order_compute (int *, bool, bool);\n+extern basic_block dfs_find_deadend (basic_block);\n extern int inverted_post_order_compute (int *);\n extern int pre_and_rev_post_order_compute (int *, int *, bool);\n extern int dfs_enumerate_from (basic_block, int,"}, {"sha": "4bef629d13b93039309a118d46d8ac10a874fee0", "filename": "gcc/cfganal.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=03b06a83441cac588cf04f494915ffd3868a9bed", "patch": "@@ -573,7 +573,9 @@ post_order_compute (int *post_order, bool include_entry_exit,\n }\n \n \n-/* Helper routine for inverted_post_order_compute.\n+/* Helper routine for inverted_post_order_compute\n+   flow_dfs_compute_reverse_execute, and the reverse-CFG\n+   deapth first search in dominance.c.\n    BB has to belong to a region of CFG\n    unreachable by inverted traversal from the exit.\n    i.e. there's no control flow path from ENTRY to EXIT\n@@ -593,19 +595,17 @@ post_order_compute (int *post_order, bool include_entry_exit,\n    that all blocks in the region are reachable\n    by starting an inverted traversal from the returned block.  */\n \n-static basic_block\n+basic_block\n dfs_find_deadend (basic_block bb)\n {\n-  sbitmap visited = sbitmap_alloc (last_basic_block);\n-  bitmap_clear (visited);\n+  bitmap visited = BITMAP_ALLOC (NULL);\n \n   for (;;)\n     {\n-      SET_BIT (visited, bb->index);\n       if (EDGE_COUNT (bb->succs) == 0\n-          || TEST_BIT (visited, EDGE_SUCC (bb, 0)->dest->index))\n+\t  || ! bitmap_set_bit (visited, bb->index))\n         {\n-          sbitmap_free (visited);\n+          BITMAP_FREE (visited);\n           return bb;\n         }\n \n@@ -958,7 +958,7 @@ flow_dfs_compute_reverse_execute (depth_first_search_ds data,\n   /* Determine if there are unvisited basic blocks.  */\n   FOR_BB_BETWEEN (bb, last_unvisited, NULL, prev_bb)\n     if (!TEST_BIT (data->visited_blocks, bb->index))\n-      return bb;\n+      return dfs_find_deadend (bb);\n \n   return NULL;\n }"}, {"sha": "683f3f5573fa5dd3471223a0d6a02435a2203cb6", "filename": "gcc/dominance.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=03b06a83441cac588cf04f494915ffd3868a9bed", "patch": "@@ -377,14 +377,18 @@ calc_dfs_tree (struct dom_info *di, bool reverse)\n \t{\n \t  FOR_EACH_BB_REVERSE (b)\n \t    {\n+\t      basic_block b2;\n \t      if (di->dfs_order[b->index])\n \t\tcontinue;\n-\t      bitmap_set_bit (di->fake_exit_edge, b->index);\n-\t      di->dfs_order[b->index] = di->dfsnum;\n-\t      di->dfs_to_bb[di->dfsnum] = b;\n+\t      b2 = dfs_find_deadend (b);\n+\t      gcc_checking_assert (di->dfs_order[b2->index] == 0);\n+\t      bitmap_set_bit (di->fake_exit_edge, b2->index);\n+\t      di->dfs_order[b2->index] = di->dfsnum;\n+\t      di->dfs_to_bb[di->dfsnum] = b2;\n \t      di->dfs_parent[di->dfsnum] = di->dfs_order[last_basic_block];\n \t      di->dfsnum++;\n-\t      calc_dfs_tree_nonrec (di, b, reverse);\n+\t      calc_dfs_tree_nonrec (di, b2, reverse);\n+\t      gcc_checking_assert (di->dfs_order[b->index]);\n \t    }\n \t}\n     }"}, {"sha": "1dc498d7e05858707dcbc2c8138e843a54257d58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03b06a83441cac588cf04f494915ffd3868a9bed", "patch": "@@ -1,3 +1,9 @@\n+2012-10-31  Steven Bosscher  <steven@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/55018\n+\t* gcc.dg/torture/pr55018.c: New test.\n+\n 2012-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54583"}, {"sha": "f9f34bcf953d5ede32a277c962a32c294c578706", "filename": "gcc/testsuite/gcc.dg/torture/pr55018.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55018.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b06a83441cac588cf04f494915ffd3868a9bed/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55018.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55018.c?ref=03b06a83441cac588cf04f494915ffd3868a9bed", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/55018 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized\" } */\n+\n+void\n+foo (int x)\n+{\n+  unsigned int a = 0;\n+  int b = 3;\n+  if (x)\n+    b = 0;\n+lab:\n+  if (x)\n+    goto lab;\n+  a++;\n+  if (b != 2)\n+    __builtin_printf (\"%u\", a);\n+  goto lab;\n+}\n+\n+/* { dg-final { scan-tree-dump \"printf\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}