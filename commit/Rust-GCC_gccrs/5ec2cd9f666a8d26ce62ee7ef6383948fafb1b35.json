{"sha": "5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjMmNkOWY2NjZhOGQyNmNlNjJlZTdlZjYzODM5NDhmYWZiMWIzNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-25T18:32:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-25T18:32:13Z"}, "message": "PR c++/65970 - constexpr infinite loop\n\ngcc/c-family/\n\t* c.opt (fconstexpr-loop-limit): New.\ngcc/cp/\n\t* constexpr.c (cxx_eval_loop_expr): Count iterations.\n\t* cp-gimplify.c (genericize_cp_loop): Use start_locus even for\n\tinfinite loops.\n\nFrom-SVN: r238730", "tree": {"sha": "4aaebb6731b4983f7f2b22d47f9f80c7612eae01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aaebb6731b4983f7f2b22d47f9f80c7612eae01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd2bfee51ee9b63869652ed0812df1d34aaca093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2bfee51ee9b63869652ed0812df1d34aaca093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2bfee51ee9b63869652ed0812df1d34aaca093"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "72ccd035c99af19837eb40556513e0d9b2b7ba5a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "patch": "@@ -1,3 +1,8 @@\n+2016-07-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/65970\n+\t* c.opt (fconstexpr-loop-limit): New.\n+\n 2016-07-22 Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/71675"}, {"sha": "a5358ededb30119e3922fb99e44f16dd6f2b1590", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "patch": "@@ -1174,6 +1174,10 @@ fconstexpr-depth=\n C++ ObjC++ Joined RejectNegative UInteger Var(max_constexpr_depth) Init(512)\n -fconstexpr-depth=<number>\tSpecify maximum constexpr recursion depth.\n \n+fconstexpr-loop-limit=\n+C++ ObjC++ Joined RejectNegative UInteger Var(constexpr_loop_limit) Init(262144)\n+-fconstexpr-loop-limit=<number>\tSpecify maximum constexpr loop iteration count.\n+\n fdebug-cpp\n C ObjC C++ ObjC++\n Emit debug annotations during preprocessing."}, {"sha": "5854205b3b7582f255e24c6aa72e7ecf785b5c54", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "patch": "@@ -1,5 +1,10 @@\n 2016-07-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/65970\n+\t* constexpr.c (cxx_eval_loop_expr): Count iterations.\n+\t* cp-gimplify.c (genericize_cp_loop): Use start_locus even for\n+\tinfinite loops.\n+\n \tPR c++/71972\n \t* constexpr.c (cxx_eval_array_reference): Handle looking for the\n \tvalue of an element we're currently modifying."}, {"sha": "6bcb41ae8254b70eae841085362184a998ed95aa", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "patch": "@@ -3468,6 +3468,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n   constexpr_ctx new_ctx = *ctx;\n \n   tree body = TREE_OPERAND (t, 0);\n+  int count = 0;\n   do\n     {\n       hash_set<tree> save_exprs;\n@@ -3480,6 +3481,16 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n       for (hash_set<tree>::iterator iter = save_exprs.begin();\n \t   iter != save_exprs.end(); ++iter)\n \tnew_ctx.values->remove (*iter);\n+      if (++count >= constexpr_loop_limit)\n+\t{\n+\t  if (!ctx->quiet)\n+\t    error_at (EXPR_LOC_OR_LOC (t, input_location),\n+\t\t      \"constexpr loop iteration count exceeds limit of %d \"\n+\t\t      \"(use -fconstexpr-loop-limit= to increase the limit)\",\n+\t\t      constexpr_loop_limit);\n+\t  *non_constant_p = true;\n+\t  break;\n+\t}\n     }\n   while (!returns (jump_target) && !breaks (jump_target) && !*non_constant_p);\n "}, {"sha": "d9f7ceaed5024607652fa0c1897f123c6b8aa1d5", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "patch": "@@ -264,14 +264,7 @@ genericize_cp_loop (tree *stmt_p, location_t start_locus, tree cond, tree body,\n \tloop = stmt_list;\n     }\n   else\n-    {\n-      location_t loc = start_locus;\n-      if (!cond || integer_nonzerop (cond))\n-\tloc = EXPR_LOCATION (expr_first (body));\n-      if (loc == UNKNOWN_LOCATION)\n-\tloc = start_locus;\n-      loop = build1_loc (loc, LOOP_EXPR, void_type_node, stmt_list);\n-    }\n+    loop = build1_loc (start_locus, LOOP_EXPR, void_type_node, stmt_list);\n \n   stmt_list = NULL;\n   append_to_statement_list (loop, &stmt_list);"}, {"sha": "79c842df6b327632f704614216e878becea2eb4f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "patch": "@@ -191,7 +191,8 @@ in the following sections.\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n @gccoptlist{-fabi-version=@var{n}  -fno-access-control @gol\n -fargs-in-order=@var{n} -fcheck-new @gol\n--fconstexpr-depth=@var{n}  -ffriend-injection @gol\n+-fconstexpr-depth=@var{n} -fconstexpr-loop-limit=@var{n} @gol\n+-ffriend-injection @gol\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs @gol\n -ffor-scope  -fno-for-scope  -fno-gnu-keywords @gol\n@@ -2265,6 +2266,12 @@ to @var{n}.  A limit is needed to detect endless recursion during\n constant expression evaluation.  The minimum specified by the standard\n is 512.\n \n+@item -fconstexpr-loop-limit=@var{n}\n+@opindex fconstexpr-loop-limit\n+Set the maximum number of iterations for a loop in C++14 constexpr functions\n+to @var{n}.  A limit is needed to detect infinite loops during\n+constant expression evaluation.  The default is 262144 (1<<18).\n+\n @item -fdeduce-init-list\n @opindex fdeduce-init-list\n Enable deduction of a template type parameter as"}, {"sha": "e49e53193d1c0a6a660c91934ff796974d073336", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-loop6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-loop6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-loop6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-loop6.C?ref=5ec2cd9f666a8d26ce62ee7ef6383948fafb1b35", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/65970\n+// { dg-do compile { target c++14 } }\n+// { dg-options -fconstexpr-loop-limit=5 }\n+\n+constexpr int foo() {\n+  while (true)\t\t\t// { dg-error \"-fconstexpr-loop-limit\" }\n+    ;\n+  return 0;\n+}\n+\n+constexpr int i = foo();\t// { dg-message \"\" }"}]}