{"sha": "d7111da854bd560e3ea576ef954a8e93151a198c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxMTFkYTg1NGJkNTYwZTNlYTU3NmVmOTU0YThlOTMxNTFhMTk4Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:23:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:23:00Z"}, "message": "dse.c: Include rtl-iter.h.\n\ngcc/\n\t* dse.c: Include rtl-iter.h.\n\t(check_mem_read_rtx): Change void * parameter to real type.\n\tRemove return value.\n\t(check_mem_read_use): Fix comment.  Use FOR_EACH_SUBRTX_PTR instead of\n\tfor_each_rtx.  Don't handle null rtxes.\n\nFrom-SVN: r214635", "tree": {"sha": "d56f38569eb8c598c4df6e6e8b958e9b3a0c4cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d56f38569eb8c598c4df6e6e8b958e9b3a0c4cbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7111da854bd560e3ea576ef954a8e93151a198c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7111da854bd560e3ea576ef954a8e93151a198c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7111da854bd560e3ea576ef954a8e93151a198c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7111da854bd560e3ea576ef954a8e93151a198c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42be54562a66daa12a5958897d5869d7ba0dd52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42be54562a66daa12a5958897d5869d7ba0dd52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42be54562a66daa12a5958897d5869d7ba0dd52c"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "ca63ee54b0dd37fa412349ebe6cacad4a9ceeb7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7111da854bd560e3ea576ef954a8e93151a198c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7111da854bd560e3ea576ef954a8e93151a198c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7111da854bd560e3ea576ef954a8e93151a198c", "patch": "@@ -1,3 +1,11 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* dse.c: Include rtl-iter.h.\n+\t(check_mem_read_rtx): Change void * parameter to real type.\n+\tRemove return value.\n+\t(check_mem_read_use): Fix comment.  Use FOR_EACH_SUBRTX_PTR instead of\n+\tfor_each_rtx.  Don't handle null rtxes.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* df-problems.c: Include rtl-iter.h."}, {"sha": "a2e38a535eecb61beee3218e567759a6411c5a5f", "filename": "gcc/dse.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7111da854bd560e3ea576ef954a8e93151a198c/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7111da854bd560e3ea576ef954a8e93151a198c/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=d7111da854bd560e3ea576ef954a8e93151a198c", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"is-a.h\"\n #include \"gimple.h\"\n #include \"gimple-ssa.h\"\n+#include \"rtl-iter.h\"\n \n /* This file contains three techniques for performing Dead Store\n    Elimination (dse).\n@@ -2087,15 +2088,13 @@ replace_read (store_info_t store_info, insn_info_t store_insn,\n     }\n }\n \n-/* A for_each_rtx callback in which DATA is the bb_info.  Check to see\n-   if LOC is a mem and if it is look at the address and kill any\n-   appropriate stores that may be active.  */\n+/* Check the address of MEM *LOC and kill any appropriate stores that may\n+   be active.  */\n \n-static int\n-check_mem_read_rtx (rtx *loc, void *data)\n+static void\n+check_mem_read_rtx (rtx *loc, bb_info_t bb_info)\n {\n   rtx mem = *loc, mem_addr;\n-  bb_info_t bb_info;\n   insn_info_t insn_info;\n   HOST_WIDE_INT offset = 0;\n   HOST_WIDE_INT width = 0;\n@@ -2104,10 +2103,6 @@ check_mem_read_rtx (rtx *loc, void *data)\n   int group_id;\n   read_info_t read_info;\n \n-  if (!mem || !MEM_P (mem))\n-    return 0;\n-\n-  bb_info = (bb_info_t) data;\n   insn_info = bb_info->last_insn;\n \n   if ((MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)\n@@ -2117,20 +2112,20 @@ check_mem_read_rtx (rtx *loc, void *data)\n \tfprintf (dump_file, \" adding wild read, volatile or barrier.\\n\");\n       add_wild_read (bb_info);\n       insn_info->cannot_delete = true;\n-      return 0;\n+      return;\n     }\n \n   /* If it is reading readonly mem, then there can be no conflict with\n      another write. */\n   if (MEM_READONLY_P (mem))\n-    return 0;\n+    return;\n \n   if (!canon_address (mem, &spill_alias_set, &group_id, &offset, &base))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \" adding wild read, canon_address failure.\\n\");\n       add_wild_read (bb_info);\n-      return 0;\n+      return;\n     }\n \n   if (GET_MODE (mem) == BLKmode)\n@@ -2258,7 +2253,7 @@ check_mem_read_rtx (rtx *loc, void *data)\n \t\t\t\t\t\t width)\n \t\t      && replace_read (store_info, i_ptr, read_info,\n \t\t\t\t       insn_info, loc, bb_info->regs_live))\n-\t\t    return 0;\n+\t\t    return;\n \n \t\t  /* The bases are the same, just see if the offsets\n \t\t     overlap.  */\n@@ -2325,7 +2320,7 @@ check_mem_read_rtx (rtx *loc, void *data)\n \t\t\t\t\t offset - store_info->begin, width)\n \t      && replace_read (store_info, i_ptr,  read_info, insn_info, loc,\n \t\t\t       bb_info->regs_live))\n-\t    return 0;\n+\t    return;\n \n \t  if (!store_info->alias_set)\n \t    remove = canon_true_dependence (store_info->mem,\n@@ -2349,17 +2344,22 @@ check_mem_read_rtx (rtx *loc, void *data)\n \t  i_ptr = i_ptr->next_local_store;\n \t}\n     }\n-  return 0;\n }\n \n-/* A for_each_rtx callback in which DATA points the INSN_INFO for\n+/* A note_uses callback in which DATA points the INSN_INFO for\n    as check_mem_read_rtx.  Nullify the pointer if i_m_r_m_r returns\n    true for any part of *LOC.  */\n \n static void\n check_mem_read_use (rtx *loc, void *data)\n {\n-  for_each_rtx (loc, check_mem_read_rtx, data);\n+  subrtx_ptr_iterator::array_type array;\n+  FOR_EACH_SUBRTX_PTR (iter, array, loc, NONCONST)\n+    {\n+      rtx *loc = *iter;\n+      if (MEM_P (*loc))\n+\tcheck_mem_read_rtx (loc, (bb_info_t) data);\n+    }\n }\n \n "}]}