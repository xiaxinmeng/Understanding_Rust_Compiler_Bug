{"sha": "90707ac1bbeaa670d0a93de3f4299254dd4579c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3MDdhYzFiYmVhYTY3MGQwYTkzZGUzZjQyOTkyNTRkZDQ1NzljOQ==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2015-10-26T13:14:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T13:14:49Z"}, "message": "sysdep.c (__gnat_get_task_options): Refine the workaround for the VX_USR_TASK_OPTION bug in VxWorks 7...\n\n2015-10-26  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* sysdep.c (__gnat_get_task_options): Refine the workaround for\n\tthe VX_USR_TASK_OPTION bug in VxWorks 7, as we cannot check the\n\tvalue of VX_DEALLOC_TCB in RTP mode, the macro value not being\n\tdefined in the headers.\n\t* g-arrspl.ads: Fix typo.\n\nFrom-SVN: r229356", "tree": {"sha": "7d1521ce7ef36b2e9a2683fb5fdcf8b29f91d83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d1521ce7ef36b2e9a2683fb5fdcf8b29f91d83b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90707ac1bbeaa670d0a93de3f4299254dd4579c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90707ac1bbeaa670d0a93de3f4299254dd4579c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90707ac1bbeaa670d0a93de3f4299254dd4579c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90707ac1bbeaa670d0a93de3f4299254dd4579c9/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa73fc3d39956ebf22998dea8bffa96fad34d6f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa73fc3d39956ebf22998dea8bffa96fad34d6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa73fc3d39956ebf22998dea8bffa96fad34d6f2"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "49aab446b9f207165f8bc352bf42416b742fa297", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90707ac1bbeaa670d0a93de3f4299254dd4579c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90707ac1bbeaa670d0a93de3f4299254dd4579c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90707ac1bbeaa670d0a93de3f4299254dd4579c9", "patch": "@@ -1,3 +1,11 @@\n+2015-10-26  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* sysdep.c (__gnat_get_task_options): Refine the workaround for\n+\tthe VX_USR_TASK_OPTION bug in VxWorks 7, as we cannot check the\n+\tvalue of VX_DEALLOC_TCB in RTP mode, the macro value not being\n+\tdefined in the headers.\n+\t* g-arrspl.ads: Fix typo.\n+\n 2015-10-26  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* sysdep.c (__gnat_get_task_options): Workaround a VxWorks"}, {"sha": "ce3158c5ef37ac9fdd3cbc0a0b1729f091f92dae", "filename": "gcc/ada/g-arrspl.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90707ac1bbeaa670d0a93de3f4299254dd4579c9/gcc%2Fada%2Fg-arrspl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90707ac1bbeaa670d0a93de3f4299254dd4579c9/gcc%2Fada%2Fg-arrspl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-arrspl.ads?ref=90707ac1bbeaa670d0a93de3f4299254dd4579c9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,7 +43,7 @@ generic\n    --  The array which is a sequence of element\n \n    type Element_Set is private;\n-   --  This type represent a set of elements. This set does not defined a\n+   --  This type represent a set of elements. This set does not define a\n    --  specific order of the elements. The conversion of a sequence to a\n    --  set and membership tests in the set is performed using the routines\n    --  To_Set and Is_In defined below.\n@@ -74,7 +74,7 @@ package GNAT.Array_Split is\n    type Slice_Set is private;\n    --  This type uses by-reference semantics. This is a set of slices as\n    --  returned by Create or Set routines below. The abstraction represents\n-   --  a set of items. Each item is a part of the original string named a\n+   --  a set of items. Each item is a part of the original array named a\n    --  Slice. It is possible to access individual slices by using the Slice\n    --  routine below. The first slice in the Set is at the position/index\n    --  1. The total number of slices in the set is returned by Slice_Count."}, {"sha": "1ecbd1462bcd5b1e06028b2de1dc10cca82a9a0e", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90707ac1bbeaa670d0a93de3f4299254dd4579c9/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90707ac1bbeaa670d0a93de3f4299254dd4579c9/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=90707ac1bbeaa670d0a93de3f4299254dd4579c9", "patch": "@@ -871,9 +871,13 @@ __gnat_get_task_options (void)\n      - VX_PRIVATE_UMASK as a user-definable option\n      This leads to VX_USR_TASK_OPTIONS allowing 0x8000 as VX_PRIVATE_UMASK but\n      taskCreate refusing this option (VX_DEALLOC_TCB is not allowed)\n+\n+     Note that the same error occurs in both RTP and Kernel mode, but\n+     VX_DEALLOC_TCB is not defined in the RTP headers, so we need to\n+     explicitely check if VX_PRIVATE_UMASK has value 0x8000\n   */\n-# if defined (VX_PRIVATE_UMASK) && (VX_DEALLOC_TCB == VX_PRIVATE_UMASK)\n-  options &= ~VX_DEALLOC_TCB;\n+# if defined (VX_PRIVATE_UMASK) && (0x8000 == VX_PRIVATE_UMASK)\n+  options &= ~VX_PRIVATE_UMASK;\n # endif\n   options &= VX_USR_TASK_OPTIONS;\n #endif"}]}