{"sha": "f726ea7dd51046d6d6587d99cfa8b0619a0494db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyNmVhN2RkNTEwNDZkNmQ2NTg3ZDk5Y2ZhOGIwNjE5YTA0OTRkYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-06-03T03:06:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-06-03T03:06:45Z"}, "message": "pa.h (TARGET_SWITCHES): Enable TARGET_LONG_CALLS when TARGET_PORTABLE_RUNTIME is enabled.\n\n\t * pa.h (TARGET_SWITCHES): Enable TARGET_LONG_CALLS when\n\tTARGET_PORTABLE_RUNTIME is enabled.\n\t* pa.c (output_call): If TARGET_LONG_CALLS is enabled, then emit\n\tan inline long-call sequence.\n\t* pa.md (millicode define_delay): Disable delay slots if\n\tTARGET_LONG_CALLS.\n\t(call_internal_reg, call_value_internal_reg): If TARGET_LONG_CALLS\n\tis enabled, then emit an inline long-call sequence.  Fix length\n\tcomputation for TARGET_LONG_CALLS.\n\t(millicode calls): Fix length computation for TARGET_LONG_CALLS.\n\nFrom-SVN: r7434", "tree": {"sha": "6041878a5a6236044fb20fdc122ec3bc4b02b738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6041878a5a6236044fb20fdc122ec3bc4b02b738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f726ea7dd51046d6d6587d99cfa8b0619a0494db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f726ea7dd51046d6d6587d99cfa8b0619a0494db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f726ea7dd51046d6d6587d99cfa8b0619a0494db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f726ea7dd51046d6d6587d99cfa8b0619a0494db/comments", "author": null, "committer": null, "parents": [{"sha": "b99e1ee9e93f97d187e96c98cf456c86fbe7a23a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99e1ee9e93f97d187e96c98cf456c86fbe7a23a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b99e1ee9e93f97d187e96c98cf456c86fbe7a23a"}], "stats": {"total": 93, "additions": 77, "deletions": 16}, "files": [{"sha": "7c33fc2a544fae1aebb19bfb8b3fae8affc7b020", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f726ea7dd51046d6d6587d99cfa8b0619a0494db/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f726ea7dd51046d6d6587d99cfa8b0619a0494db/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f726ea7dd51046d6d6587d99cfa8b0619a0494db", "patch": "@@ -3706,7 +3706,12 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n    CALL_DEST is the routine we are calling.\n \n    RETURN_POINTER is the register which will hold the return address.\n-   %r2 for most calls, %r31 for millicode calls.  */\n+   %r2 for most calls, %r31 for millicode calls. \n+\n+   When TARGET_LONG_CALLS is true, output_call is only called for\n+   millicode calls.  In addition, no delay slots are available when\n+   TARGET_LONG_CALLS is true.  */\n+\n char *\n output_call (insn, call_dest, return_pointer)\n   rtx insn;\n@@ -3725,7 +3730,14 @@ output_call (insn, call_dest, return_pointer)\n     {\n       xoperands[0] = call_dest;\n       xoperands[1] = return_pointer;\n-      output_asm_insn (\"bl %0,%r1%#\", xoperands);\n+      if (TARGET_LONG_CALLS)\n+\t{\n+\t  output_asm_insn (\"ldil L%%%0,%%r29\", xoperands);\n+\t  output_asm_insn (\"ldo R%%%0(%%r29),%%r29\", xoperands);\n+\t  output_asm_insn (\"blr 0,%r1\\n\\tbv,n 0(%%r29)\\n\\tnop\", xoperands);\n+\t}\n+      else\n+\toutput_asm_insn (\"bl %0,%r1%#\", xoperands);\n       return \"\";\n     }\n "}, {"sha": "4be2b0d308ebdaa0e9a5bedabf5692162253ad21", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f726ea7dd51046d6d6587d99cfa8b0619a0494db/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f726ea7dd51046d6d6587d99cfa8b0619a0494db/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f726ea7dd51046d6d6587d99cfa8b0619a0494db", "patch": "@@ -64,7 +64,9 @@ extern int target_flags;\n \n /* Emit code which follows the new portable runtime calling conventions\n    HP wants everyone to use for ELF objects.  If at all possible you want\n-   to avoid this since it's a performance loss for non-prototyped code.  */\n+   to avoid this since it's a performance loss for non-prototyped code.\n+\n+   Note TARGET_PORTABLE_RUNTIME also implies TARGET_LONG_CALLS.  */\n \n #define TARGET_PORTABLE_RUNTIME (target_flags & 64)\n \n@@ -93,8 +95,8 @@ extern int target_flags;\n    {\"no-long-calls\", -16},\t\\\n    {\"disable-indexing\", 32},\t\\\n    {\"no-disable-indexing\", -32},\\\n-   {\"portable-runtime\", 64},\t\\\n-   {\"no-portable-runtime\", -64},\\\n+   {\"portable-runtime\", 64+16},\\\n+   {\"no-portable-runtime\", -(64+16)},\\\n    {\"gas\", 128},\t\t\\\n    {\"no-gas\", -128},\t\t\\\n    { \"\", TARGET_DEFAULT}}"}, {"sha": "4c7a1afc1e060969ea3b2ea32a17d162b02f920e", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 58, "deletions": 11, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f726ea7dd51046d6d6587d99cfa8b0619a0494db/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f726ea7dd51046d6d6587d99cfa8b0619a0494db/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f726ea7dd51046d6d6587d99cfa8b0619a0494db", "patch": "@@ -88,10 +88,17 @@\n \t(const_string \"false\")))\n \n \n-;; Unconditional branch, call, and millicode call delay slot description.\n-(define_delay (eq_attr \"type\" \"uncond_branch,branch,call,milli\")\n+;; Unconditional branch and call delay slot description.\n+(define_delay (eq_attr \"type\" \"uncond_branch,branch,call\")\n   [(eq_attr \"in_call_delay\" \"true\") (nil) (nil)])\n \n+;; millicode call delay slot description.  Note it disallows delay slot\n+;; when TARGET_LONG_CALLS is true.\n+(define_delay (eq_attr \"type\" \"milli\")\n+  [(and (eq_attr \"in_call_delay\" \"true\")\n+\t(eq (symbol_ref \"TARGET_LONG_CALLS\") (const_int 0)))\n+   (nil) (nil)])\n+\n ;; Unconditional branch, return and other similar instructions.\n (define_delay (eq_attr \"type\" \"uncond_branch,branch\")\n   [(eq_attr \"in_branch_delay\" \"true\") (nil) (nil)])\n@@ -2155,7 +2162,11 @@\n    (clobber (reg:SI 31))]\n   \"\"\n   \"* return output_mul_insn (0, insn);\"\n-  [(set_attr \"type\" \"milli\")])\n+  [(set_attr \"type\" \"milli\")\n+   (set (attr \"length\") (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\")\n+\t\t\t\t\t  (const_int 0))\n+\t\t\t\t      (const_int 4)\n+\t\t\t\t      (const_int 24)))])\n \n ;;; Division and mod.\n (define_expand \"divsi3\"\n@@ -2201,7 +2212,11 @@\n   \"\"\n   \"*\n    return output_div_insn (operands, 0, insn);\"\n-  [(set_attr \"type\" \"milli\")])\n+  [(set_attr \"type\" \"milli\")\n+   (set (attr \"length\") (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\")\n+\t\t\t\t\t  (const_int 0))\n+\t\t\t\t      (const_int 4)\n+\t\t\t\t      (const_int 24)))])\n \n (define_expand \"udivsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_operand\" \"\"))\n@@ -2246,7 +2261,11 @@\n   \"\"\n   \"*\n    return output_div_insn (operands, 1, insn);\"\n-  [(set_attr \"type\" \"milli\")])\n+  [(set_attr \"type\" \"milli\")\n+   (set (attr \"length\") (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\")\n+\t\t\t\t\t  (const_int 0))\n+\t\t\t\t      (const_int 4)\n+\t\t\t\t      (const_int 24)))])\n \n (define_expand \"modsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_operand\" \"\"))\n@@ -2287,7 +2306,11 @@\n   \"\"\n   \"*\n   return output_mod_insn (0, insn);\"\n-  [(set_attr \"type\" \"milli\")])\n+  [(set_attr \"type\" \"milli\")\n+   (set (attr \"length\") (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\")\n+\t\t\t\t\t  (const_int 0))\n+\t\t\t\t      (const_int 4)\n+\t\t\t\t      (const_int 24)))])\n \n (define_expand \"umodsi3\"\n   [(set (reg:SI 26) (match_operand:SI 1 \"move_operand\" \"\"))\n@@ -2328,7 +2351,11 @@\n   \"\"\n   \"*\n   return output_mod_insn (1, insn);\"\n-  [(set_attr \"type\" \"milli\")])\n+  [(set_attr \"type\" \"milli\")\n+   (set (attr \"length\") (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\")\n+\t\t\t\t\t  (const_int 0))\n+\t\t\t\t      (const_int 4)\n+\t\t\t\t      (const_int 24)))])\n \n ;;- and instructions\n ;; We define DImode `and` so with DImode `not` we can get\n@@ -3061,9 +3088,19 @@\n    (clobber (reg:SI 2))\n    (use (const_int 1))]\n   \"\"\n-  \"copy %r0,%%r22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\"\n+  \"*\n+{\n+  /* Yuk!  bl may not be able to reach $$dyncall.  */\n+  if (TARGET_LONG_CALLS)\n+    return \\\"copy %r0,%%r22\\;ldil L%%$$dyncall,%%r31\\;ldo R%%$$dyncall(%%r31),%%r31\\;blr 0,%%r2\\;bv,n 0(%%r31)\\;nop\\\";\n+  else\n+    return \\\"copy %r0,%%r22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\\\";\n+}\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set_attr \"length\" \"12\")])\n+   (set (attr \"length\") (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\")\n+\t\t\t\t\t  (const_int 0))\n+\t\t\t\t      (const_int 12)\n+\t\t\t\t      (const_int 24)))])\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n@@ -3133,9 +3170,19 @@\n    (use (const_int 1))]\n   ;;- Don't use operand 1 for most machines.\n   \"\"\n-  \"copy %r1,%%r22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\"\n+  \"*\n+{\n+  /* Yuk!  bl may not be able to reach $$dyncall.  */\n+  if (TARGET_LONG_CALLS)\n+    return \\\"copy %r1,%%r22\\;ldil L%%$$dyncall,%%r31\\;ldo R%%$$dyncall(%%r31),%%r31\\;blr 0,%%r2\\;bv,n 0(%%r31)\\;nop\\\";\n+  else\n+    return \\\"copy %r1,%%r22\\;.CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\\\";\n+}\"\n   [(set_attr \"type\" \"dyncall\")\n-   (set_attr \"length\" \"12\")])\n+   (set (attr \"length\") (if_then_else (ne (symbol_ref \"TARGET_LONG_CALLS\")\n+\t\t\t\t\t  (const_int 0))\n+\t\t\t\t      (const_int 12)\n+\t\t\t\t      (const_int 24)))])\n \n ;; Call subroutine returning any type.\n "}]}