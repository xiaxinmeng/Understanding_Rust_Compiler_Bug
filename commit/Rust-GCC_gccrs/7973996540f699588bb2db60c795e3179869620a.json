{"sha": "7973996540f699588bb2db60c795e3179869620a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk3Mzk5NjU0MGY2OTk1ODhiYjJkYjYwYzc5NWUzMTc5ODY5NjIwYQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2012-12-06T09:55:45Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2012-12-06T09:55:45Z"}, "message": "arm.c (neon_itype): Define NEON_RINT enum element.\n\n2012-12-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/arm.c (neon_itype): Define NEON_RINT enum element.\n\t(neon_builtin_data): Register vrintn, vrinta, vrintp, vrintm,\n\tvrintz,\tvrintx neon builtins.\n\t(arm_init_neon_builtins): Handle NEON_RINT.\n\t(arm_expand_neon_builtin): Likewise.\n\t* config/arm/unspecs.md: New file.\n\t* config/arm/arm.md (\"unspec\"): Move to unspecs.md.\n\t* config/arm/iterators.md (NEON_VRINT): New int iterator.\n\t(nvrint_variant): New int attribute.\n\t* config/arm/neon.md \n\t(neon_vrint<NEON_VRINT:nvrint_variant><VCVTF:mode>): New pattern.\n\t(\"unspec\"): Move to unspecs.md.\n\t* config/arm/iwmmxt2.md (\"unspec\"): Move to unspecs.md.\n\nFrom-SVN: r194244", "tree": {"sha": "daedc57000ad7479db77d42a69cda072fb3bddbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daedc57000ad7479db77d42a69cda072fb3bddbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7973996540f699588bb2db60c795e3179869620a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7973996540f699588bb2db60c795e3179869620a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7973996540f699588bb2db60c795e3179869620a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7973996540f699588bb2db60c795e3179869620a/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f2b3dc2b49e5b375738e32966615e9ef4e5ced7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2b3dc2b49e5b375738e32966615e9ef4e5ced7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2b3dc2b49e5b375738e32966615e9ef4e5ced7"}], "stats": {"total": 562, "additions": 310, "deletions": 252}, "files": [{"sha": "f5ca6e4d360ca20f069611b2a28873b421bebe2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973996540f699588bb2db60c795e3179869620a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973996540f699588bb2db60c795e3179869620a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7973996540f699588bb2db60c795e3179869620a", "patch": "@@ -1,3 +1,19 @@\n+2012-12-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.c (neon_itype): Define NEON_RINT enum element.\n+\t(neon_builtin_data): Register vrintn, vrinta, vrintp, vrintm,\n+\tvrintz,\tvrintx neon builtins.\n+\t(arm_init_neon_builtins): Handle NEON_RINT.\n+\t(arm_expand_neon_builtin): Likewise.\n+\t* config/arm/unspecs.md: New file.\n+\t* config/arm/arm.md (\"unspec\"): Move to unspecs.md.\n+\t* config/arm/iterators.md (NEON_VRINT): New int iterator.\n+\t(nvrint_variant): New int attribute.\n+\t* config/arm/neon.md \n+\t(neon_vrint<NEON_VRINT:nvrint_variant><VCVTF:mode>): New pattern.\n+\t(\"unspec\"): Move to unspecs.md.\n+\t* config/arm/iwmmxt2.md (\"unspec\"): Move to unspecs.md.\n+\n 2012-12-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* config/pa/pa.md: Use \"const_int 0\" instead of match_test to simplify"}, {"sha": "84ce56fb84d31b35fe7a0ca8b52a4b1c923e8fa0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7973996540f699588bb2db60c795e3179869620a", "patch": "@@ -19060,6 +19060,7 @@ typedef enum {\n   NEON_GETLANE,\n   NEON_SETLANE,\n   NEON_CREATE,\n+  NEON_RINT,\n   NEON_DUP,\n   NEON_DUPLANE,\n   NEON_COMBINE,\n@@ -19259,6 +19260,12 @@ static neon_builtin_datum neon_builtin_data[] =\n   VAR4 (FIXCONV, vcvt_n, v2si, v2sf, v4si, v4sf),\n   VAR10 (SELECT, vbsl,\n \t v8qi, v4hi, v2si, v2sf, di, v16qi, v8hi, v4si, v4sf, v2di),\n+  VAR2 (RINT, vrintn, v2sf, v4sf),\n+  VAR2 (RINT, vrinta, v2sf, v4sf),\n+  VAR2 (RINT, vrintp, v2sf, v4sf),\n+  VAR2 (RINT, vrintm, v2sf, v4sf),\n+  VAR2 (RINT, vrintz, v2sf, v4sf),\n+  VAR2 (RINT, vrintx, v2sf, v4sf),\n   VAR1 (VTBL, vtbl1, v8qi),\n   VAR1 (VTBL, vtbl2, v8qi),\n   VAR1 (VTBL, vtbl3, v8qi),\n@@ -19886,6 +19893,7 @@ arm_init_neon_builtins (void)\n \t    is_store = 1;\n \t  /* Fall through.  */\n \tcase NEON_UNOP:\n+\tcase NEON_RINT:\n \tcase NEON_BINOP:\n \tcase NEON_LOGICBINOP:\n \tcase NEON_SHIFTINSERT:\n@@ -21073,6 +21081,7 @@ arm_expand_neon_builtin (int fcode, tree exp, rtx target)\n         NEON_ARG_COPY_TO_REG, NEON_ARG_STOP);\n \n     case NEON_DUP:\n+    case NEON_RINT:\n     case NEON_SPLIT:\n     case NEON_REINTERP:\n       return arm_expand_neon_args (target, icode, 1, type_mode, exp, fcode,"}, {"sha": "7f38816a14a1c7852dd5367fb7b14e2f7ed20df5", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 5, "deletions": 106, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7973996540f699588bb2db60c795e3179869620a", "patch": "@@ -58,112 +58,6 @@\n   ]\n )\n \n-;; UNSPEC Usage:\n-;; Note: sin and cos are no-longer used.\n-;; Unspec enumerators for Neon are defined in neon.md.\n-;; Unspec enumerators for iwmmxt2 are defined in iwmmxt2.md\n-\n-(define_c_enum \"unspec\" [\n-  UNSPEC_PUSH_MULT      ; `push multiple' operation:\n-                        ;   operand 0 is the first register,\n-                        ;   subsequent registers are in parallel (use ...)\n-                        ;   expressions.\n-  UNSPEC_PIC_SYM        ; A symbol that has been treated properly for pic\n-                        ; usage, that is, we will add the pic_register\n-                        ; value to it before trying to dereference it.\n-  UNSPEC_PIC_BASE       ; Add PC and all but the last operand together,\n-                        ; The last operand is the number of a PIC_LABEL\n-                        ; that points at the containing instruction.\n-  UNSPEC_PRLG_STK       ; A special barrier that prevents frame accesses\n-                        ; being scheduled before the stack adjustment insn.\n-  UNSPEC_REGISTER_USE   ; As USE insns are not meaningful after reload,\n-                        ; this unspec is used to prevent the deletion of\n-                        ; instructions setting registers for EH handling\n-                        ; and stack frame generation.  Operand 0 is the\n-                        ; register to \"use\".\n-  UNSPEC_CHECK_ARCH     ; Set CCs to indicate 26-bit or 32-bit mode.\n-  UNSPEC_WSHUFH         ; Used by the intrinsic form of the iWMMXt WSHUFH instruction.\n-  UNSPEC_WACC           ; Used by the intrinsic form of the iWMMXt WACC instruction.\n-  UNSPEC_TMOVMSK        ; Used by the intrinsic form of the iWMMXt TMOVMSK instruction.\n-  UNSPEC_WSAD           ; Used by the intrinsic form of the iWMMXt WSAD instruction.\n-  UNSPEC_WSADZ          ; Used by the intrinsic form of the iWMMXt WSADZ instruction.\n-  UNSPEC_WMACS          ; Used by the intrinsic form of the iWMMXt WMACS instruction.\n-  UNSPEC_WMACU          ; Used by the intrinsic form of the iWMMXt WMACU instruction.\n-  UNSPEC_WMACSZ         ; Used by the intrinsic form of the iWMMXt WMACSZ instruction.\n-  UNSPEC_WMACUZ         ; Used by the intrinsic form of the iWMMXt WMACUZ instruction.\n-  UNSPEC_CLRDI          ; Used by the intrinsic form of the iWMMXt CLRDI instruction.\n-  UNSPEC_WALIGNI        ; Used by the intrinsic form of the iWMMXt WALIGN instruction.\n-  UNSPEC_TLS            ; A symbol that has been treated properly for TLS usage.\n-  UNSPEC_PIC_LABEL      ; A label used for PIC access that does not appear in the\n-                        ; instruction stream.\n-  UNSPEC_PIC_OFFSET     ; A symbolic 12-bit OFFSET that has been treated\n-                        ; correctly for PIC usage.\n-  UNSPEC_GOTSYM_OFF     ; The offset of the start of the GOT from a\n-                        ; a given symbolic address.\n-  UNSPEC_THUMB1_CASESI  ; A Thumb1 compressed dispatch-table call.\n-  UNSPEC_RBIT           ; rbit operation.\n-  UNSPEC_SYMBOL_OFFSET  ; The offset of the start of the symbol from\n-                        ; another symbolic address.\n-  UNSPEC_MEMORY_BARRIER ; Represent a memory barrier.\n-  UNSPEC_UNALIGNED_LOAD\t; Used to represent ldr/ldrh instructions that access\n-\t\t\t; unaligned locations, on architectures which support\n-\t\t\t; that.\n-  UNSPEC_UNALIGNED_STORE ; Same for str/strh.\n-  UNSPEC_PIC_UNIFIED    ; Create a common pic addressing form.\n-  UNSPEC_LL\t\t; Represent an unpaired load-register-exclusive.\n-  UNSPEC_VRINTZ         ; Represent a float to integral float rounding\n-                        ; towards zero.\n-  UNSPEC_VRINTP         ; Represent a float to integral float rounding\n-                        ; towards +Inf.\n-  UNSPEC_VRINTM         ; Represent a float to integral float rounding\n-                        ; towards -Inf.\n-  UNSPEC_VRINTR         ; Represent a float to integral float rounding\n-                        ; FPSCR rounding mode.\n-  UNSPEC_VRINTX         ; Represent a float to integral float rounding\n-                        ; FPSCR rounding mode and signal inexactness.\n-  UNSPEC_VRINTA         ; Represent a float to integral float rounding\n-                        ; towards nearest, ties away from zero.\n-])\n-\n-;; UNSPEC_VOLATILE Usage:\n-\n-(define_c_enum \"unspecv\" [\n-  VUNSPEC_BLOCKAGE      ; `blockage' insn to prevent scheduling across an\n-                        ;   insn in the code.\n-  VUNSPEC_EPILOGUE      ; `epilogue' insn, used to represent any part of the\n-                        ;   instruction epilogue sequence that isn't expanded\n-                        ;   into normal RTL.  Used for both normal and sibcall\n-                        ;   epilogues.\n-  VUNSPEC_THUMB1_INTERWORK ; `prologue_thumb1_interwork' insn, used to swap\n-\t\t\t;   modes from arm to thumb.\n-  VUNSPEC_ALIGN         ; `align' insn.  Used at the head of a minipool table\n-                        ;   for inlined constants.\n-  VUNSPEC_POOL_END      ; `end-of-table'.  Used to mark the end of a minipool\n-                        ;   table.\n-  VUNSPEC_POOL_1        ; `pool-entry(1)'.  An entry in the constant pool for\n-                        ;   an 8-bit object.\n-  VUNSPEC_POOL_2        ; `pool-entry(2)'.  An entry in the constant pool for\n-                        ;   a 16-bit object.\n-  VUNSPEC_POOL_4        ; `pool-entry(4)'.  An entry in the constant pool for\n-                        ;   a 32-bit object.\n-  VUNSPEC_POOL_8        ; `pool-entry(8)'.  An entry in the constant pool for\n-                        ;   a 64-bit object.\n-  VUNSPEC_POOL_16       ; `pool-entry(16)'.  An entry in the constant pool for\n-                        ;   a 128-bit object.\n-  VUNSPEC_TMRC          ; Used by the iWMMXt TMRC instruction.\n-  VUNSPEC_TMCR          ; Used by the iWMMXt TMCR instruction.\n-  VUNSPEC_ALIGN8        ; 8-byte alignment version of VUNSPEC_ALIGN\n-  VUNSPEC_WCMP_EQ       ; Used by the iWMMXt WCMPEQ instructions\n-  VUNSPEC_WCMP_GTU      ; Used by the iWMMXt WCMPGTU instructions\n-  VUNSPEC_WCMP_GT       ; Used by the iwMMXT WCMPGT instructions\n-  VUNSPEC_EH_RETURN     ; Use to override the return address for exception\n-                        ; handling.\n-  VUNSPEC_ATOMIC_CAS\t; Represent an atomic compare swap.\n-  VUNSPEC_ATOMIC_XCHG\t; Represent an atomic exchange.\n-  VUNSPEC_ATOMIC_OP\t; Represent an atomic operation.\n-  VUNSPEC_LL\t\t; Represent a load-register-exclusive.\n-  VUNSPEC_SC\t\t; Represent a store-register-exclusive.\n-])\n \f\n ;;---------------------------------------------------------------------------\n ;; Attributes\n@@ -573,6 +467,11 @@\n ;; Used for Thumb-2 conditional execution.\n (define_attr \"ce_count\" \"\" (const_int 1))\n \n+;;---------------------------------------------------------------------------\n+;; Unspecs\n+\n+(include \"unspecs.md\")\n+\n ;;---------------------------------------------------------------------------\n ;; Mode iterators\n "}, {"sha": "5ae1aefe2b99d2bb74525c46c7a8c7eb2f917a2c", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=7973996540f699588bb2db60c795e3179869620a", "patch": "@@ -198,6 +198,9 @@\n (define_int_iterator VRINT [UNSPEC_VRINTZ UNSPEC_VRINTP UNSPEC_VRINTM\n                             UNSPEC_VRINTR UNSPEC_VRINTX UNSPEC_VRINTA])\n \n+(define_int_iterator NEON_VRINT [UNSPEC_NVRINTP UNSPEC_NVRINTZ UNSPEC_NVRINTM\n+                              UNSPEC_NVRINTX UNSPEC_NVRINTA UNSPEC_NVRINTN])\n+\n ;;----------------------------------------------------------------------------\n ;; Mode attributes\n ;;----------------------------------------------------------------------------\n@@ -483,3 +486,7 @@\n (define_int_attr vrint_predicable [(UNSPEC_VRINTZ \"yes\") (UNSPEC_VRINTP \"no\")\n                                   (UNSPEC_VRINTA \"no\") (UNSPEC_VRINTM \"no\")\n                                   (UNSPEC_VRINTR \"yes\") (UNSPEC_VRINTX \"yes\")])\n+\n+(define_int_attr nvrint_variant [(UNSPEC_NVRINTZ \"z\") (UNSPEC_NVRINTP \"p\")\n+                                (UNSPEC_NVRINTA \"a\") (UNSPEC_NVRINTM \"m\")\n+                                (UNSPEC_NVRINTX \"x\") (UNSPEC_NVRINTN \"n\")])"}, {"sha": "61628bc4ab70978d247c23f094b2d750719a9b16", "filename": "gcc/config/arm/iwmmxt2.md", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Fiwmmxt2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Fiwmmxt2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt2.md?ref=7973996540f699588bb2db60c795e3179869620a", "patch": "@@ -18,21 +18,6 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_c_enum \"unspec\" [\n-  UNSPEC_WADDC\t\t; Used by the intrinsic form of the iWMMXt WADDC instruction.\n-  UNSPEC_WABS\t\t; Used by the intrinsic form of the iWMMXt WABS instruction.\n-  UNSPEC_WQMULWMR\t; Used by the intrinsic form of the iWMMXt WQMULWMR instruction.\n-  UNSPEC_WQMULMR\t; Used by the intrinsic form of the iWMMXt WQMULMR instruction.\n-  UNSPEC_WQMULWM\t; Used by the intrinsic form of the iWMMXt WQMULWM instruction.\n-  UNSPEC_WQMULM\t\t; Used by the intrinsic form of the iWMMXt WQMULM instruction.\n-  UNSPEC_WQMIAxyn\t; Used by the intrinsic form of the iWMMXt WMIAxyn instruction.\n-  UNSPEC_WQMIAxy\t; Used by the intrinsic form of the iWMMXt WMIAxy instruction.\n-  UNSPEC_TANDC\t\t; Used by the intrinsic form of the iWMMXt TANDC instruction.\n-  UNSPEC_TORC\t\t; Used by the intrinsic form of the iWMMXt TORC instruction.\n-  UNSPEC_TORVSC\t\t; Used by the intrinsic form of the iWMMXt TORVSC instruction.\n-  UNSPEC_TEXTRC\t\t; Used by the intrinsic form of the iWMMXt TEXTRC instruction.\n-])\n-\n (define_insn \"iwmmxt_wabs<mode>3\"\n   [(set (match_operand:VMMX               0 \"register_operand\" \"=y\")\n         (unspec:VMMX [(match_operand:VMMX 1 \"register_operand\"  \"y\")] UNSPEC_WABS))]"}, {"sha": "fc382698a0d6f8a767bd506f402df48ab2e82dcb", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 13, "deletions": 131, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=7973996540f699588bb2db60c795e3179869620a", "patch": "@@ -19,137 +19,6 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-;; Enumerators for unspecs.\n-(define_c_enum \"unspec\" [\n-  UNSPEC_ASHIFT_SIGNED\n-  UNSPEC_ASHIFT_UNSIGNED\n-  UNSPEC_LOAD_COUNT\n-  UNSPEC_VABD\n-  UNSPEC_VABDL\n-  UNSPEC_VADD\n-  UNSPEC_VADDHN\n-  UNSPEC_VADDL\n-  UNSPEC_VADDW\n-  UNSPEC_VBSL\n-  UNSPEC_VCAGE\n-  UNSPEC_VCAGT\n-  UNSPEC_VCEQ\n-  UNSPEC_VCGE\n-  UNSPEC_VCGEU\n-  UNSPEC_VCGT\n-  UNSPEC_VCGTU\n-  UNSPEC_VCLS\n-  UNSPEC_VCONCAT\n-  UNSPEC_VCVT\n-  UNSPEC_VCVT_N\n-  UNSPEC_VEXT\n-  UNSPEC_VHADD\n-  UNSPEC_VHSUB\n-  UNSPEC_VLD1\n-  UNSPEC_VLD1_LANE\n-  UNSPEC_VLD2\n-  UNSPEC_VLD2_DUP\n-  UNSPEC_VLD2_LANE\n-  UNSPEC_VLD3\n-  UNSPEC_VLD3A\n-  UNSPEC_VLD3B\n-  UNSPEC_VLD3_DUP\n-  UNSPEC_VLD3_LANE\n-  UNSPEC_VLD4\n-  UNSPEC_VLD4A\n-  UNSPEC_VLD4B\n-  UNSPEC_VLD4_DUP\n-  UNSPEC_VLD4_LANE\n-  UNSPEC_VMAX\n-  UNSPEC_VMIN\n-  UNSPEC_VMLA\n-  UNSPEC_VMLAL\n-  UNSPEC_VMLA_LANE\n-  UNSPEC_VMLAL_LANE\n-  UNSPEC_VMLS\n-  UNSPEC_VMLSL\n-  UNSPEC_VMLS_LANE\n-  UNSPEC_VMLSL_LANE\n-  UNSPEC_VMOVL\n-  UNSPEC_VMOVN\n-  UNSPEC_VMUL\n-  UNSPEC_VMULL\n-  UNSPEC_VMUL_LANE\n-  UNSPEC_VMULL_LANE\n-  UNSPEC_VPADAL\n-  UNSPEC_VPADD\n-  UNSPEC_VPADDL\n-  UNSPEC_VPMAX\n-  UNSPEC_VPMIN\n-  UNSPEC_VPSMAX\n-  UNSPEC_VPSMIN\n-  UNSPEC_VPUMAX\n-  UNSPEC_VPUMIN\n-  UNSPEC_VQABS\n-  UNSPEC_VQADD\n-  UNSPEC_VQDMLAL\n-  UNSPEC_VQDMLAL_LANE\n-  UNSPEC_VQDMLSL\n-  UNSPEC_VQDMLSL_LANE\n-  UNSPEC_VQDMULH\n-  UNSPEC_VQDMULH_LANE\n-  UNSPEC_VQDMULL\n-  UNSPEC_VQDMULL_LANE\n-  UNSPEC_VQMOVN\n-  UNSPEC_VQMOVUN\n-  UNSPEC_VQNEG\n-  UNSPEC_VQSHL\n-  UNSPEC_VQSHL_N\n-  UNSPEC_VQSHLU_N\n-  UNSPEC_VQSHRN_N\n-  UNSPEC_VQSHRUN_N\n-  UNSPEC_VQSUB\n-  UNSPEC_VRECPE\n-  UNSPEC_VRECPS\n-  UNSPEC_VREV16\n-  UNSPEC_VREV32\n-  UNSPEC_VREV64\n-  UNSPEC_VRSQRTE\n-  UNSPEC_VRSQRTS\n-  UNSPEC_VSHL\n-  UNSPEC_VSHLL_N\n-  UNSPEC_VSHL_N\n-  UNSPEC_VSHR_N\n-  UNSPEC_VSHRN_N\n-  UNSPEC_VSLI\n-  UNSPEC_VSRA_N\n-  UNSPEC_VSRI\n-  UNSPEC_VST1\n-  UNSPEC_VST1_LANE\n-  UNSPEC_VST2\n-  UNSPEC_VST2_LANE\n-  UNSPEC_VST3\n-  UNSPEC_VST3A\n-  UNSPEC_VST3B\n-  UNSPEC_VST3_LANE\n-  UNSPEC_VST4\n-  UNSPEC_VST4A\n-  UNSPEC_VST4B\n-  UNSPEC_VST4_LANE\n-  UNSPEC_VSTRUCTDUMMY\n-  UNSPEC_VSUB\n-  UNSPEC_VSUBHN\n-  UNSPEC_VSUBL\n-  UNSPEC_VSUBW\n-  UNSPEC_VTBL\n-  UNSPEC_VTBX\n-  UNSPEC_VTRN1\n-  UNSPEC_VTRN2\n-  UNSPEC_VTST\n-  UNSPEC_VUZP1\n-  UNSPEC_VUZP2\n-  UNSPEC_VZIP1\n-  UNSPEC_VZIP2\n-  UNSPEC_MISALIGNED_ACCESS\n-  UNSPEC_VCLE\n-  UNSPEC_VCLT\n-])\n-\n \n ;; Attribute used to permit string comparisons against <VQH_mnem> in\n ;; neon_type attribute definitions.\n@@ -781,6 +650,19 @@\n \t\t      (const_string \"neon_fp_vmla_qqq\")))]\n )\n \n+(define_insn \"neon_vrint<NEON_VRINT:nvrint_variant><VCVTF:mode>\"\n+  [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n+        (unspec:VCVTF [(match_operand:VCVTF 1\n+\t\t         \"s_register_operand\" \"w\")]\n+\t\tNEON_VRINT))]\n+  \"TARGET_NEON && TARGET_FPU_ARMV8\"\n+  \"vrint<nvrint_variant>%?.f32\\\\t%<V_reg>0, %<V_reg>1\"\n+  [(set (attr \"neon_type\")\n+\t(if_then_else (match_test \"<Is_d_reg>\")\n+\t\t(const_string \"neon_fp_vadd_ddd_vabs_dd\")\n+\t\t(const_string \"neon_fp_vadd_qqq_vabs_qq\")))]\n+)\n+\n (define_insn \"ior<mode>3\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w,w\")\n \t(ior:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w,0\")"}, {"sha": "5537a870f965862a191e5daf81b4dacea7b20010", "filename": "gcc/config/arm/unspecs.md", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7973996540f699588bb2db60c795e3179869620a/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=7973996540f699588bb2db60c795e3179869620a", "patch": "@@ -0,0 +1,260 @@\n+;; UNSPEC Usage:\n+;; Note: sin and cos are no-longer used.\n+;; Unspec enumerators for Neon are defined in neon.md.\n+;; Unspec enumerators for iwmmxt2 are defined in iwmmxt2.md\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_PUSH_MULT      ; `push multiple' operation:\n+                        ;   operand 0 is the first register,\n+                        ;   subsequent registers are in parallel (use ...)\n+                        ;   expressions.\n+  UNSPEC_PIC_SYM        ; A symbol that has been treated properly for pic\n+                        ; usage, that is, we will add the pic_register\n+                        ; value to it before trying to dereference it.\n+  UNSPEC_PIC_BASE       ; Add PC and all but the last operand together,\n+                        ; The last operand is the number of a PIC_LABEL\n+                        ; that points at the containing instruction.\n+  UNSPEC_PRLG_STK       ; A special barrier that prevents frame accesses\n+                        ; being scheduled before the stack adjustment insn.\n+  UNSPEC_REGISTER_USE   ; As USE insns are not meaningful after reload,\n+                        ; this unspec is used to prevent the deletion of\n+                        ; instructions setting registers for EH handling\n+                        ; and stack frame generation.  Operand 0 is the\n+                        ; register to \"use\".\n+  UNSPEC_CHECK_ARCH     ; Set CCs to indicate 26-bit or 32-bit mode.\n+  UNSPEC_WSHUFH         ; Used by the intrinsic form of the iWMMXt WSHUFH instruction.\n+  UNSPEC_WACC           ; Used by the intrinsic form of the iWMMXt WACC instruction.\n+  UNSPEC_TMOVMSK        ; Used by the intrinsic form of the iWMMXt TMOVMSK instruction.\n+  UNSPEC_WSAD           ; Used by the intrinsic form of the iWMMXt WSAD instruction.\n+  UNSPEC_WSADZ          ; Used by the intrinsic form of the iWMMXt WSADZ instruction.\n+  UNSPEC_WMACS          ; Used by the intrinsic form of the iWMMXt WMACS instruction.\n+  UNSPEC_WMACU          ; Used by the intrinsic form of the iWMMXt WMACU instruction.\n+  UNSPEC_WMACSZ         ; Used by the intrinsic form of the iWMMXt WMACSZ instruction.\n+  UNSPEC_WMACUZ         ; Used by the intrinsic form of the iWMMXt WMACUZ instruction.\n+  UNSPEC_CLRDI          ; Used by the intrinsic form of the iWMMXt CLRDI instruction.\n+  UNSPEC_WALIGNI        ; Used by the intrinsic form of the iWMMXt WALIGN instruction.\n+  UNSPEC_TLS            ; A symbol that has been treated properly for TLS usage.\n+  UNSPEC_PIC_LABEL      ; A label used for PIC access that does not appear in the\n+                        ; instruction stream.\n+  UNSPEC_PIC_OFFSET     ; A symbolic 12-bit OFFSET that has been treated\n+                        ; correctly for PIC usage.\n+  UNSPEC_GOTSYM_OFF     ; The offset of the start of the GOT from a\n+                        ; a given symbolic address.\n+  UNSPEC_THUMB1_CASESI  ; A Thumb1 compressed dispatch-table call.\n+  UNSPEC_RBIT           ; rbit operation.\n+  UNSPEC_SYMBOL_OFFSET  ; The offset of the start of the symbol from\n+                        ; another symbolic address.\n+  UNSPEC_MEMORY_BARRIER ; Represent a memory barrier.\n+  UNSPEC_UNALIGNED_LOAD\t; Used to represent ldr/ldrh instructions that access\n+\t\t\t; unaligned locations, on architectures which support\n+\t\t\t; that.\n+  UNSPEC_UNALIGNED_STORE ; Same for str/strh.\n+  UNSPEC_PIC_UNIFIED    ; Create a common pic addressing form.\n+  UNSPEC_LL\t\t; Represent an unpaired load-register-exclusive.\n+  UNSPEC_VRINTZ         ; Represent a float to integral float rounding\n+                        ; towards zero.\n+  UNSPEC_VRINTP         ; Represent a float to integral float rounding\n+                        ; towards +Inf.\n+  UNSPEC_VRINTM         ; Represent a float to integral float rounding\n+                        ; towards -Inf.\n+  UNSPEC_VRINTR         ; Represent a float to integral float rounding\n+                        ; FPSCR rounding mode.\n+  UNSPEC_VRINTX         ; Represent a float to integral float rounding\n+                        ; FPSCR rounding mode and signal inexactness.\n+  UNSPEC_VRINTA         ; Represent a float to integral float rounding\n+                        ; towards nearest, ties away from zero.\n+])\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_WADDC\t\t; Used by the intrinsic form of the iWMMXt WADDC instruction.\n+  UNSPEC_WABS\t\t; Used by the intrinsic form of the iWMMXt WABS instruction.\n+  UNSPEC_WQMULWMR\t; Used by the intrinsic form of the iWMMXt WQMULWMR instruction.\n+  UNSPEC_WQMULMR\t; Used by the intrinsic form of the iWMMXt WQMULMR instruction.\n+  UNSPEC_WQMULWM\t; Used by the intrinsic form of the iWMMXt WQMULWM instruction.\n+  UNSPEC_WQMULM\t\t; Used by the intrinsic form of the iWMMXt WQMULM instruction.\n+  UNSPEC_WQMIAxyn\t; Used by the intrinsic form of the iWMMXt WMIAxyn instruction.\n+  UNSPEC_WQMIAxy\t; Used by the intrinsic form of the iWMMXt WMIAxy instruction.\n+  UNSPEC_TANDC\t\t; Used by the intrinsic form of the iWMMXt TANDC instruction.\n+  UNSPEC_TORC\t\t; Used by the intrinsic form of the iWMMXt TORC instruction.\n+  UNSPEC_TORVSC\t\t; Used by the intrinsic form of the iWMMXt TORVSC instruction.\n+  UNSPEC_TEXTRC\t\t; Used by the intrinsic form of the iWMMXt TEXTRC instruction.\n+])\n+\n+\n+;; UNSPEC_VOLATILE Usage:\n+\n+(define_c_enum \"unspecv\" [\n+  VUNSPEC_BLOCKAGE      ; `blockage' insn to prevent scheduling across an\n+                        ;   insn in the code.\n+  VUNSPEC_EPILOGUE      ; `epilogue' insn, used to represent any part of the\n+                        ;   instruction epilogue sequence that isn't expanded\n+                        ;   into normal RTL.  Used for both normal and sibcall\n+                        ;   epilogues.\n+  VUNSPEC_THUMB1_INTERWORK ; `prologue_thumb1_interwork' insn, used to swap\n+\t\t\t;   modes from arm to thumb.\n+  VUNSPEC_ALIGN         ; `align' insn.  Used at the head of a minipool table\n+                        ;   for inlined constants.\n+  VUNSPEC_POOL_END      ; `end-of-table'.  Used to mark the end of a minipool\n+                        ;   table.\n+  VUNSPEC_POOL_1        ; `pool-entry(1)'.  An entry in the constant pool for\n+                        ;   an 8-bit object.\n+  VUNSPEC_POOL_2        ; `pool-entry(2)'.  An entry in the constant pool for\n+                        ;   a 16-bit object.\n+  VUNSPEC_POOL_4        ; `pool-entry(4)'.  An entry in the constant pool for\n+                        ;   a 32-bit object.\n+  VUNSPEC_POOL_8        ; `pool-entry(8)'.  An entry in the constant pool for\n+                        ;   a 64-bit object.\n+  VUNSPEC_POOL_16       ; `pool-entry(16)'.  An entry in the constant pool for\n+                        ;   a 128-bit object.\n+  VUNSPEC_TMRC          ; Used by the iWMMXt TMRC instruction.\n+  VUNSPEC_TMCR          ; Used by the iWMMXt TMCR instruction.\n+  VUNSPEC_ALIGN8        ; 8-byte alignment version of VUNSPEC_ALIGN\n+  VUNSPEC_WCMP_EQ       ; Used by the iWMMXt WCMPEQ instructions\n+  VUNSPEC_WCMP_GTU      ; Used by the iWMMXt WCMPGTU instructions\n+  VUNSPEC_WCMP_GT       ; Used by the iwMMXT WCMPGT instructions\n+  VUNSPEC_EH_RETURN     ; Use to override the return address for exception\n+                        ; handling.\n+  VUNSPEC_ATOMIC_CAS\t; Represent an atomic compare swap.\n+  VUNSPEC_ATOMIC_XCHG\t; Represent an atomic exchange.\n+  VUNSPEC_ATOMIC_OP\t; Represent an atomic operation.\n+  VUNSPEC_LL\t\t; Represent a load-register-exclusive.\n+  VUNSPEC_SC\t\t; Represent a store-register-exclusive.\n+])\n+\n+;; Enumerators for NEON unspecs.\n+(define_c_enum \"unspec\" [\n+  UNSPEC_ASHIFT_SIGNED\n+  UNSPEC_ASHIFT_UNSIGNED\n+  UNSPEC_LOAD_COUNT\n+  UNSPEC_VABD\n+  UNSPEC_VABDL\n+  UNSPEC_VADD\n+  UNSPEC_VADDHN\n+  UNSPEC_VADDL\n+  UNSPEC_VADDW\n+  UNSPEC_VBSL\n+  UNSPEC_VCAGE\n+  UNSPEC_VCAGT\n+  UNSPEC_VCEQ\n+  UNSPEC_VCGE\n+  UNSPEC_VCGEU\n+  UNSPEC_VCGT\n+  UNSPEC_VCGTU\n+  UNSPEC_VCLS\n+  UNSPEC_VCONCAT\n+  UNSPEC_VCVT\n+  UNSPEC_VCVT_N\n+  UNSPEC_VEXT\n+  UNSPEC_VHADD\n+  UNSPEC_VHSUB\n+  UNSPEC_VLD1\n+  UNSPEC_VLD1_LANE\n+  UNSPEC_VLD2\n+  UNSPEC_VLD2_DUP\n+  UNSPEC_VLD2_LANE\n+  UNSPEC_VLD3\n+  UNSPEC_VLD3A\n+  UNSPEC_VLD3B\n+  UNSPEC_VLD3_DUP\n+  UNSPEC_VLD3_LANE\n+  UNSPEC_VLD4\n+  UNSPEC_VLD4A\n+  UNSPEC_VLD4B\n+  UNSPEC_VLD4_DUP\n+  UNSPEC_VLD4_LANE\n+  UNSPEC_VMAX\n+  UNSPEC_VMIN\n+  UNSPEC_VMLA\n+  UNSPEC_VMLAL\n+  UNSPEC_VMLA_LANE\n+  UNSPEC_VMLAL_LANE\n+  UNSPEC_VMLS\n+  UNSPEC_VMLSL\n+  UNSPEC_VMLS_LANE\n+  UNSPEC_VMLSL_LANE\n+  UNSPEC_VMOVL\n+  UNSPEC_VMOVN\n+  UNSPEC_VMUL\n+  UNSPEC_VMULL\n+  UNSPEC_VMUL_LANE\n+  UNSPEC_VMULL_LANE\n+  UNSPEC_VPADAL\n+  UNSPEC_VPADD\n+  UNSPEC_VPADDL\n+  UNSPEC_VPMAX\n+  UNSPEC_VPMIN\n+  UNSPEC_VPSMAX\n+  UNSPEC_VPSMIN\n+  UNSPEC_VPUMAX\n+  UNSPEC_VPUMIN\n+  UNSPEC_VQABS\n+  UNSPEC_VQADD\n+  UNSPEC_VQDMLAL\n+  UNSPEC_VQDMLAL_LANE\n+  UNSPEC_VQDMLSL\n+  UNSPEC_VQDMLSL_LANE\n+  UNSPEC_VQDMULH\n+  UNSPEC_VQDMULH_LANE\n+  UNSPEC_VQDMULL\n+  UNSPEC_VQDMULL_LANE\n+  UNSPEC_VQMOVN\n+  UNSPEC_VQMOVUN\n+  UNSPEC_VQNEG\n+  UNSPEC_VQSHL\n+  UNSPEC_VQSHL_N\n+  UNSPEC_VQSHLU_N\n+  UNSPEC_VQSHRN_N\n+  UNSPEC_VQSHRUN_N\n+  UNSPEC_VQSUB\n+  UNSPEC_VRECPE\n+  UNSPEC_VRECPS\n+  UNSPEC_VREV16\n+  UNSPEC_VREV32\n+  UNSPEC_VREV64\n+  UNSPEC_VRSQRTE\n+  UNSPEC_VRSQRTS\n+  UNSPEC_VSHL\n+  UNSPEC_VSHLL_N\n+  UNSPEC_VSHL_N\n+  UNSPEC_VSHR_N\n+  UNSPEC_VSHRN_N\n+  UNSPEC_VSLI\n+  UNSPEC_VSRA_N\n+  UNSPEC_VSRI\n+  UNSPEC_VST1\n+  UNSPEC_VST1_LANE\n+  UNSPEC_VST2\n+  UNSPEC_VST2_LANE\n+  UNSPEC_VST3\n+  UNSPEC_VST3A\n+  UNSPEC_VST3B\n+  UNSPEC_VST3_LANE\n+  UNSPEC_VST4\n+  UNSPEC_VST4A\n+  UNSPEC_VST4B\n+  UNSPEC_VST4_LANE\n+  UNSPEC_VSTRUCTDUMMY\n+  UNSPEC_VSUB\n+  UNSPEC_VSUBHN\n+  UNSPEC_VSUBL\n+  UNSPEC_VSUBW\n+  UNSPEC_VTBL\n+  UNSPEC_VTBX\n+  UNSPEC_VTRN1\n+  UNSPEC_VTRN2\n+  UNSPEC_VTST\n+  UNSPEC_VUZP1\n+  UNSPEC_VUZP2\n+  UNSPEC_VZIP1\n+  UNSPEC_VZIP2\n+  UNSPEC_MISALIGNED_ACCESS\n+  UNSPEC_VCLE\n+  UNSPEC_VCLT\n+  UNSPEC_NVRINTZ\n+  UNSPEC_NVRINTP\n+  UNSPEC_NVRINTM\n+  UNSPEC_NVRINTX\n+  UNSPEC_NVRINTA\n+  UNSPEC_NVRINTN\n+])\n+"}]}