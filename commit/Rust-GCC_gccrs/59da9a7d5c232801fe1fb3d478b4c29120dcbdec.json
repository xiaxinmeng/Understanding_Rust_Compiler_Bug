{"sha": "59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkYTlhN2Q1YzIzMjgwMWZlMWZiM2Q0NzhiNGMyOTEyMGRjYmRlYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-05-03T18:46:05Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-05-03T18:46:05Z"}, "message": "Patches from David Mosberger, and a patch to make bootstrap work.\n\n\t* config/ia64/ia64.c (ia64_encode_section_info): Add check for\n\tTREE_ASM_WRITTEN.\n\t* config/ia64/ia64.c (ia64_override_options): Force -mconstant-gp\n\tif -mauto-pic is on.\n\t...\n\nFrom-SVN: r33638", "tree": {"sha": "ee26260ef4cbc7c82597e332bf25789772962a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee26260ef4cbc7c82597e332bf25789772962a07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/comments", "author": null, "committer": null, "parents": [{"sha": "3ec83fc2aefe0c91d66544b5c22bd2529a1d4bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec83fc2aefe0c91d66544b5c22bd2529a1d4bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec83fc2aefe0c91d66544b5c22bd2529a1d4bb4"}], "stats": {"total": 169, "additions": 152, "deletions": 17}, "files": [{"sha": "c3559a4af11c8101bc0e4d74ec01a802e33cb729", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "patch": "@@ -1,3 +1,37 @@\n+Wed May  3 11:43:53 2000  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/ia64.c (ia64_encode_section_info): Add check for\n+\tTREE_ASM_WRITTEN.\n+\n+2000-05-03  David Mosberger  <davidm@hpl.hp.com>\n+\n+\t* config/ia64/ia64.c (ia64_override_options): Force -mconstant-gp\n+\tif -mauto-pic is on.\n+\t(ia64_epilogue_uses): Mark \"gp\" (r1) as used by the epilogue if\n+\t-mconstant-gp is in effect and function-descriptors are being used\n+\tto make indirect calls.\n+\t* config/ia64/ia64.h (MASK_CONST_GP): New macro.\n+\t(MASK_AUTO_PIC): Ditto.\n+\t(TARGET_CONST_GP): Ditto.\n+\t(TARGET_AUTO_PIC): Ditto.\n+\t(TARGET_SWITCHES): Add -mconstant-gp and -mauto-pic options.\n+\t(ASM_OUTPUT_DOUBLE_INT): Don't generate @fptr() if -mauto-pic or\n+\t-mno-pic is in effect.\n+\t(ASM_OUTPUT_XDATA_DOUBLE_INT): Ditto.\n+\t* config/ia64/ia64.md (movdi): Use gen_load_gprel64() if\n+\t-mauto-pic is in effect.\n+\t(gprel64_offset): New pattern.\n+\t(load_gprel64): Ditto.\n+\t(call): Handle -mauto-pic like -mno-pic (don't use fptr).  If\n+\t-mconstant-gp is in effect, no need to preserve gp around direct\n+\tcalls.\n+\t(call_value): Ditto.\n+\t* config/ia64/linux.h (PROFILE_BEFORE_PROLOGUE): Define.\n+\t(FUNCTION_PROFILER): Define.\n+\t* config/ia64/sysv4.h (ASM_OUTPUT_CONSTRUCTOR): Don't generate\n+\t@fptr() directive when -mno-pic or -mauto-pic is in effect.\n+\t(ASM_OUTPUT_DESTRUCTOR): Ditto.\n+\n 2000-05-03  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (STAGESTUFF): Add libgcc libgcc.mk."}, {"sha": "b334dc63c121997464d50dd13d4c93c26d30652d", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "patch": "@@ -2057,6 +2057,9 @@ ia64_mark_machine_status (p)\n void\n ia64_override_options ()\n {\n+  if (TARGET_AUTO_PIC)\n+    target_flags |= MASK_CONST_GP;\n+\n   if (ia64_fixed_range_string)\n     fix_range (ia64_fixed_range_string);\n \n@@ -2707,6 +2710,14 @@ int\n ia64_epilogue_uses (regno)\n      int regno;\n {\n+  /* When a function makes a call through a function descriptor, we\n+     will write a (potentially) new value to \"gp\".  After returning\n+     from such a call, we need to make sure the function restores the\n+     original gp-value, even if the function itself does not use the\n+     gp anymore.  */\n+  if (regno == R_GR(1) && TARGET_CONST_GP && !(TARGET_AUTO_PIC || TARGET_NO_PIC))\n+    return 1;\n+\n   /* For functions defined with the syscall_linkage attribute, all input\n      registers are marked as live at all function exits.  This prevents the\n      register allocator from using the input registers, which in turn makes it\n@@ -2812,6 +2823,14 @@ ia64_encode_section_info (decl)\n \t  || ! strcmp (str, \"__DTOR_END__\"))\n \t;\n \n+      /* If the variable has already been defined in the output file, then it\n+\t is too late to put it in sdata if it wasn't put there in the first\n+\t place.  The test is here rather than above, because if it is already\n+\t in sdata, then it can stay there.  */\n+\t \n+      else if (TREE_ASM_WRITTEN (decl))\n+\t;\n+\n       /* If this is an incomplete type with size 0, then we can't put it in\n \t sdata because it might be too big when completed.  */\n       else if (size > 0 && size <= ia64_section_threshold"}, {"sha": "e97ffef8aa84408d83499f291d4661f2c76aabe8", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "patch": "@@ -66,6 +66,10 @@ extern int target_flags;\n \n #define MASK_NO_SDATA   0x00000080\t/* Disable sdata/scommon/sbss.  */\n \n+#define MASK_CONST_GP\t0x00000100\t/* treat gp as program-wide constant */\n+\n+#define MASK_AUTO_PIC\t0x00000200\t/* generate automatically PIC */\n+\n #define MASK_DWARF2_ASM 0x40000000\t/* test dwarf2 line info via gas.  */\n \n #define TARGET_BIG_ENDIAN\t(target_flags & MASK_BIG_ENDIAN)\n@@ -84,13 +88,17 @@ extern int target_flags;\n \n #define TARGET_NO_SDATA\t\t(target_flags & MASK_NO_SDATA)\n \n+#define TARGET_CONST_GP\t\t(target_flags & MASK_CONST_GP)\n+\n+#define TARGET_AUTO_PIC\t\t(target_flags & MASK_AUTO_PIC)\n+\n #define TARGET_DWARF2_ASM\t(target_flags & MASK_DWARF2_ASM)\n \n /* This macro defines names of command options to set and clear bits in\n    `target_flags'.  Its definition is an initializer with a subgrouping for\n    each command option.  */\n \n-#define TARGET_SWITCHES \\\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"big-endian\",\tMASK_BIG_ENDIAN,\t\t\t\t\\\n       \"Generate big endian code\" },\t\t\t\t\t\\\n@@ -118,6 +126,10 @@ extern int target_flags;\n       \"Disable use of sdata/scommon/sbss\"},\t\t\t\t\\\n   { \"sdata\",\t\t-MASK_NO_SDATA,\t\t\t\t\t\\\n       \"Enable use of sdata/scommon/sbss\"},\t\t\t\t\\\n+  { \"constant-gp\",\tMASK_CONST_GP,\t\t\t\t\t\\\n+      \"gp is constant (but save/restore gp on indirect calls)\" },\t\\\n+  { \"auto-pic\",\t\tMASK_AUTO_PIC,\t\t\t\t\t\\\n+      \"Generate self-relocatable code\" },\t\t\t\t\\\n   { \"dwarf2-asm\", \tMASK_DWARF2_ASM,\t\t\t\t\\\n       \"Enable Dwarf 2 line debug info via GNU as\"},\t\t\t\\\n   { \"no-dwarf2-asm\", \t-MASK_DWARF2_ASM,\t\t\t\t\\\n@@ -2116,10 +2128,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DOUBLE_INT(FILE, VALUE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\tdata8\\t\");\t\t\t\t\t\t\\\n-  if (SYMBOL_REF_FLAG (VALUE))\t\t\t\t\t\t\\\n+  if (!(TARGET_NO_PIC || TARGET_AUTO_PIC) && SYMBOL_REF_FLAG (VALUE))\t\\\n     fprintf (FILE, \"@fptr(\");\t\t\t\t\t\t\\\n   output_addr_const (FILE, (VALUE));\t\t\t\t\t\\\n-  if (SYMBOL_REF_FLAG (VALUE))\t\t\t\t\t\t\\\n+  if (!(TARGET_NO_PIC || TARGET_AUTO_PIC) && SYMBOL_REF_FLAG (VALUE))\t\\\n     fprintf (FILE, \")\");\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n } while (0)\n@@ -2161,16 +2173,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_XDATA_DOUBLE_INT(FILE, SECTION, VALUE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n+  int need_closing_paren = 0;\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.xdata8\\t\\\"%s\\\", \", SECTION);\t\t\t\\\n-  if (GET_CODE (VALUE) == SYMBOL_REF)\t\t\t\t\t\\\n+  if (!(TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n+      && GET_CODE (VALUE) == SYMBOL_REF)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (SYMBOL_REF_FLAG (VALUE))\t\t\t\t\t\\\n-\tfprintf (FILE, \"@fptr(\");\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"@segrel(\");\t\t\t\t\t\\\n+      fprintf (FILE, SYMBOL_REF_FLAG (VALUE) ? \"@fptr(\" : \"@segrel(\");\t\\\n+      need_closing_paren = 1;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  output_addr_const (FILE, (VALUE));\t\t\t\t\t\\\n-  if (GET_CODE (VALUE) == SYMBOL_REF)\t\t\t\t\t\\\n+  output_addr_const (FILE, VALUE);\t\t\t\t\t\\\n+  if (need_closing_paren)\t\t\t\t\t\t\\\n     fprintf (FILE, \")\");\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "6f243f80a670d6372b1babfecc1aef72463c01a0", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "patch": "@@ -229,7 +229,10 @@\n       else\n \ttemp = operands[0];\n \n-      if (GET_CODE (operands[1]) == SYMBOL_REF && SYMBOL_REF_FLAG (operands[1]))\n+      if (TARGET_AUTO_PIC)\n+\temit_insn (gen_load_gprel64 (temp, operands[1]));\n+      else if (GET_CODE (operands[1]) == SYMBOL_REF\n+\t       && SYMBOL_REF_FLAG (operands[1]))\n \temit_insn (gen_load_fptr (temp, operands[1]));\n       else if (sdata_symbolic_operand (operands[1], DImode))\n \temit_insn (gen_load_gprel (temp, operands[1]));\n@@ -296,6 +299,26 @@\n   \"addl %0 = @gprel(%1), gp\"\n   [(set_attr \"type\" \"A\")])\n \n+(define_insn \"gprel64_offset\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:DI (match_operand:DI 1 \"symbolic_operand\" \"\") (reg:DI 1)))]\n+  \"\"\n+  \"movl %0 = @gprel(%1)\"\n+  [(set_attr \"type\" \"L\")])\n+\n+(define_expand \"load_gprel64\"\n+  [(set (match_dup 2)\n+\t(minus:DI (match_operand:DI 1 \"symbolic_operand\" \"\") (reg:DI 1)))\n+   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (reg:DI 1) (match_dup 2)))]\n+  \"\"\n+  \"{\n+  if (reload_in_progress)\n+    operands[2] = operands[0];\n+  else\n+    operands[2] = gen_reg_rtx (DImode);\n+}\")\n+\n (define_expand \"load_symptr\"\n   [(set (match_dup 2)\n \t(plus:DI (reg:DI 1) (match_operand:DI 1 \"symbolic_operand\" \"\")))\n@@ -2521,13 +2544,16 @@\n   rtx addr = XEXP (operands[0], 0);\n   enum machine_mode mode = GET_MODE (addr);\n \n-  if (TARGET_NO_PIC)\n+  if (TARGET_NO_PIC || TARGET_AUTO_PIC)\n     emit_call_insn (gen_call_internal (addr, operands[1],\n \t\t\t\t       gen_rtx_REG (DImode, R_BR (0))));\n \n   /* If this is an indirect call, then we have the address of a descriptor.  */\n   else if (! symbolic_operand (addr, mode))\n     emit_insn (gen_indirect_call_pic (addr, operands[1]));\n+  else if (TARGET_CONST_GP)\n+    emit_call_insn (gen_call_internal (addr, operands[1],\n+\t\t\t\t       gen_rtx_REG (DImode, R_BR (0))));\n   /* ??? This is an unsatisfying solution.  Should rethink.  */\n   else if (setjmp_operand (addr, mode))\n     emit_insn (gen_setjmp_call_pic (addr, operands[1]));\n@@ -2631,7 +2657,7 @@\n   rtx addr = XEXP (operands[1], 0);\n   enum machine_mode mode = GET_MODE (addr);\n \n-  if (TARGET_NO_PIC)\n+  if (TARGET_NO_PIC || TARGET_AUTO_PIC)\n     emit_call_insn (gen_call_value_internal (operands[0], addr, operands[2],\n \t\t\t\t\t     gen_rtx_REG (DImode, R_BR (0))));\n \n@@ -2646,6 +2672,9 @@\n \temit_insn (gen_indirect_call_value_pic (operands[0], addr,\n \t\t\t\t\t\toperands[2]));\n     }\n+  else if (TARGET_CONST_GP)\n+    emit_call_insn (gen_call_value_internal (operands[0], addr, operands[2],\n+\t\t\t\t\t     gen_rtx_REG (DImode, R_BR (0))));\n   /* ??? This is an unsatisfying solution.  Should rethink.  */\n   else if (setjmp_operand (addr, mode))\n     emit_insn (gen_setjmp_call_value_pic (operands[0], addr, operands[2]));"}, {"sha": "5108cfa8211c27d1d4ac4a0c42a77a13e0032918", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "patch": "@@ -26,4 +26,33 @@\n \n #define DONT_USE_BUILTIN_SETJMP\n #define JMP_BUF_SIZE  (8 * 76)\n+\n+/* Output any profiling code before the prologue.  */\n+\n+#undef PROFILE_BEFORE_PROLOGUE\n+#define PROFILE_BEFORE_PROLOGUE 1\n+\n+/* A C statement or compound statement to output to FILE some assembler code to\n+   call the profiling subroutine `mcount'.  */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  char buf[20];\t\t\t\t\t\t\\\n+  ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", LABELNO);\t\\\n+  fputs (\"\\talloc out0 = ar.pfs, 8, 0, 4, 0\\n\", FILE);\t\\\n+  if (TARGET_AUTO_PIC)\t\t\t\t\t\\\n+    fputs (\"\\tmovl out3 = @gprel(\", FILE);\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    fputs (\"\\taddl out3 = @ltoff(\", FILE);\t\t\\\n+  assemble_name (FILE, buf);\t\t\t\t\\\n+  if (TARGET_AUTO_PIC)\t\t\t\t\t\\\n+    fputs (\");;\\n\", FILE);\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    fputs (\"), r1;;\\n\", FILE);\t\t\t\t\\\n+  fputs (\"\\tmov out1 = r1\\n\", FILE);\t\t\t\\\n+  fputs (\"\\tmov out2 = b0\\n\", FILE);\t\t\t\\\n+  fputs (\"\\tbr.call.sptk.many b0 = _mcount;;\\n\", FILE);\t\\\n+} while (0)\n+\n /* End of linux.h */"}, {"sha": "7e9e2c97a9055ad227c25aa771c901cf9779b51e", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59da9a7d5c232801fe1fb3d478b4c29120dcbdec/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=59da9a7d5c232801fe1fb3d478b4c29120dcbdec", "patch": "@@ -84,9 +84,15 @@ while (0)\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n-    fputs (\"\\tdata8\\t @fptr(\", FILE);\t\t\t\t\t\\\n+    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n+      fputs (\"\\tdata8\\t \", FILE);\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fputs (\"\\tdata8\\t @fptr(\", FILE);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fputs (\")\\n\", FILE);\t\t\t\t\t\t\\\n+    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n+      fputs (\"\\n\", FILE);\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fputs (\")\\n\", FILE);\t\t\t\t\t\t\\\n   } while (0)\n \n /* A C statement (sans semicolon) to output an element in the table of\n@@ -96,9 +102,15 @@ while (0)\n #define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n-    fputs (\"\\tdata8\\t @fptr(\", FILE);\t\t\t\t\t\\\n+    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n+      fputs (\"\\tdata8\\t \", FILE);\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fputs (\"\\tdata8\\t @fptr(\", FILE);\t\t\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fputs (\")\\n\", FILE);\t\t\t\t\t\t\\\n+    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n+      fputs (\"\\n\", FILE);\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fputs (\")\\n\", FILE);\t\t\t\t\t\t\\\n   } while (0)\n \n /* svr4.h undefines this, so we need to define it here.  */"}]}