{"sha": "f96d6fd02e10a4f266c5c459461562887cbf0c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2ZDZmZDAyZTEwYTRmMjY2YzVjNDU5NDYxNTYyODg3Y2JmMGM2YQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2009-10-26T18:31:22Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2009-10-26T18:31:22Z"}, "message": "re PR c++/41785 ([C++0x] ICE on canonical types with variadic templates and CRTP)\n\nFix PR c++/41785\n\ngcc/cp/ChangeLog:\n\n\tPR c++/41785\n\t* pt.c (template_args_equal): Handle comparison of\n\tan ARGUMENT_PACK_SELECT node with the arguments node it selects into.\n\t* cp-tree.def: Fix a typo in the description of TYPE_PACK_EXPANSION.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/41785\n\t* gcc/testsuite/g++.dg/cpp0x/variadic96.C: New test.\n\nFrom-SVN: r153564", "tree": {"sha": "afc7e486341b3f574b937b99d93a2e7ccc1a97c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc7e486341b3f574b937b99d93a2e7ccc1a97c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f96d6fd02e10a4f266c5c459461562887cbf0c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96d6fd02e10a4f266c5c459461562887cbf0c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96d6fd02e10a4f266c5c459461562887cbf0c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96d6fd02e10a4f266c5c459461562887cbf0c6a/comments", "author": null, "committer": null, "parents": [{"sha": "65a324b459e60405cebe9e34ee6b3496559cd217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a324b459e60405cebe9e34ee6b3496559cd217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65a324b459e60405cebe9e34ee6b3496559cd217"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "2f7ec52b804594713e380a4d54bc10c7bfa0ec6e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f96d6fd02e10a4f266c5c459461562887cbf0c6a", "patch": "@@ -1,3 +1,10 @@\n+2009-10-26  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/41785\n+\t* pt.c (template_args_equal): Handle comparison of\n+\tan ARGUMENT_PACK_SELECT node with the arguments node it selects into.\n+\t* cp-tree.def: Fix a typo in the description of TYPE_PACK_EXPANSION.\n+\n 2009-10-26  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/41020"}, {"sha": "28ecc5bf68141beb0bbb9f596856f4eb5a858a0c", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=f96d6fd02e10a4f266c5c459461562887cbf0c6a", "patch": "@@ -393,7 +393,7 @@ DEFTREECODE (NONTYPE_ARGUMENT_PACK, \"nontype_argument_pack\", tcc_expression, 1)\n      };\n \n    The derivation from tuple contains a TYPE_PACK_EXPANSION for the\n-   template arguments. Its EXPR_PACK_EXPANSION is \"Values&\" and its\n+   template arguments. Its PACK_EXPANSION_PATTERN is \"Values&\" and its\n    PACK_EXPANSION_PARAMETER_PACKS will contain \"Values\".  */\n DEFTREECODE (TYPE_PACK_EXPANSION, \"type_pack_expansion\", tcc_type, 0)\n "}, {"sha": "e80bc30152ec18f863046124f5eb82a73bff2219", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f96d6fd02e10a4f266c5c459461562887cbf0c6a", "patch": "@@ -5818,6 +5818,18 @@ template_args_equal (tree ot, tree nt)\n \t  return 0;\n       return 1;\n     }\n+  else if (ot && TREE_CODE (ot) == ARGUMENT_PACK_SELECT)\n+    {\n+      /* We get here probably because we are in the middle of substituting\n+         into the pattern of a pack expansion. In that case the\n+\t ARGUMENT_PACK_SELECT temporarily replaces the pack argument we are\n+\t interested in. So we want to use the initial pack argument for\n+\t the comparison.  */\n+      ot = ARGUMENT_PACK_SELECT_FROM_PACK (ot);\n+      if (nt && TREE_CODE (nt) == ARGUMENT_PACK_SELECT)\n+\tnt = ARGUMENT_PACK_SELECT_FROM_PACK (nt);\n+      return template_args_equal (ot, nt);\n+    }\n   else if (TYPE_P (nt))\n     return TYPE_P (ot) && same_type_p (ot, nt);\n   else if (TREE_CODE (ot) == TREE_VEC || TYPE_P (ot))"}, {"sha": "cc89a761ba0174821c6ffdac4be724c8390af202", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f96d6fd02e10a4f266c5c459461562887cbf0c6a", "patch": "@@ -1,3 +1,8 @@\n+2009-10-26  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/41785\n+\t* gcc/testsuite/g++.dg/cpp0x/variadic96.C: New test.\n+\n 2009-10-26  Nick Clifton  <nickc@redhat.com>\n \n \t* lib/target-supports.exp (check_profiling_available):"}, {"sha": "d4709d074b67d23d0f7c7f96ce1507f27b46e1e1", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic96.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic96.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d6fd02e10a4f266c5c459461562887cbf0c6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic96.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic96.C?ref=f96d6fd02e10a4f266c5c459461562887cbf0c6a", "patch": "@@ -0,0 +1,26 @@\n+// Contributed by Dodji Seketeli <dodji@redhat.com>\n+// Origin: PR c++/41785\n+// { dg-options -std=c++0x }\n+\n+struct a {};\n+\n+template < typename T, typename ENCLOSING >\n+struct base;\n+\n+template < typename... T >\n+struct derived\n+  : public base< T, derived< T... > >...\n+{};\n+\n+template < typename... T>\n+struct base< a, derived< T... > >\n+{\n+  typedef derived< T... >\n+          Derived;\n+};\n+\n+int main()\n+{\n+  derived< a > instance;\n+}\n+"}]}