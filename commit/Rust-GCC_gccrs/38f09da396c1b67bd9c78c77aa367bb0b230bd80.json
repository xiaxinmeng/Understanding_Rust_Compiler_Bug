{"sha": "38f09da396c1b67bd9c78c77aa367bb0b230bd80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmMDlkYTM5NmMxYjY3YmQ5Yzc4Yzc3YWEzNjdiYjBiMjMwYmQ4MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2014-04-08T10:19:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2014-04-08T10:19:36Z"}, "message": "invoke (Wnon-virtual-dtor): Update to match implementation.\n\n\t* doc/invoke (Wnon-virtual-dtor): Update to match implementation.\n\t(Weffc++): Likewise.\n\n\tcp/\n\t* class.c (check_bases_and_members): Warn about non-virtual dtors\n\tin public bases only.  Check warn_ecpp before complaining about\n\tnon-polymorphic bases.\n\n\ttestsuite/\n\t* g++.dg/warn/Wnvdtor-2.C: Add more cases.\n\t* g++.dg/warn/Wnvdtor-3.C: Likewise.\n\t* g++.dg/warn/Wnvdtor-4.C: Likewise.\n\nFrom-SVN: r209212", "tree": {"sha": "98523bded84202160ffdfcc9ad6330b05feec074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98523bded84202160ffdfcc9ad6330b05feec074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38f09da396c1b67bd9c78c77aa367bb0b230bd80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f09da396c1b67bd9c78c77aa367bb0b230bd80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f09da396c1b67bd9c78c77aa367bb0b230bd80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f09da396c1b67bd9c78c77aa367bb0b230bd80/comments", "author": null, "committer": null, "parents": [{"sha": "55f31857d3582c2533c8c2767b05f18f657d7b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f31857d3582c2533c8c2767b05f18f657d7b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55f31857d3582c2533c8c2767b05f18f657d7b24"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "ec85f097c154e988018402fc62f4abcd4e92bc32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -1,3 +1,8 @@\n+2014-04-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/invoke (Wnon-virtual-dtor): Update to match implementation.\n+\t(Weffc++): Likewise.\n+\n 2014-04-07  Jan Hubicka  <hubcika@ucw.cz>\n \n \t* ipa-devirt.c (maybe_record_node): When node is not recorded,"}, {"sha": "60aa29f576e9f23d3baef8e1e35a9d1233148e6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -1,3 +1,9 @@\n+2014-04-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (check_bases_and_members): Warn about non-virtual dtors\n+\tin public bases only.  Check warn_ecpp before complaining about\n+\tnon-polymorphic bases.\n+\n 2014-04-04  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n \t* decl.c (duplicate_decls): Check for the return of warning_at"}, {"sha": "334bfd5eee7b54d969a2c4db09883ed6e7e3918f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -5570,21 +5570,24 @@ check_bases_and_members (tree t)\n   TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) |= TYPE_CONTAINS_VPTR_P (t);\n   TYPE_HAS_COMPLEX_DFLT (t) |= TYPE_CONTAINS_VPTR_P (t);\n \n-  /* Warn if a base of a polymorphic type has an accessible\n+  /* Warn if a public base of a polymorphic type has an accessible\n      non-virtual destructor.  It is only now that we know the class is\n      polymorphic.  Although a polymorphic base will have a already\n      been diagnosed during its definition, we warn on use too.  */\n   if (TYPE_POLYMORPHIC_P (t) && warn_nonvdtor)\n     {\n-      tree binfo, base_binfo;\n+      tree binfo = TYPE_BINFO (t);\n+      vec<tree, va_gc> *accesses = BINFO_BASE_ACCESSES (binfo);\n+      tree base_binfo;\n       unsigned i;\n       \n-      for (binfo = TYPE_BINFO (t), i = 0;\n-\t   BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n+      for (i = 0; BINFO_BASE_ITERATE (binfo, i, base_binfo); i++)\n \t{\n \t  tree basetype = TREE_TYPE (base_binfo);\n \n-\t  if (accessible_nvdtor_p (basetype))\n+\t  if ((*accesses)[i] == access_public_node\n+\t      && (TYPE_POLYMORPHIC_P (basetype) || warn_ecpp)\n+\t      && accessible_nvdtor_p (basetype))\n \t    warning (OPT_Wnon_virtual_dtor,\n \t\t     \"base class %q#T has accessible non-virtual destructor\",\n \t\t     basetype);"}, {"sha": "f70f0d6e47cb250649f2bff834a1d504fa4c8bd6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -2671,10 +2671,10 @@ the compiler to never throw an exception.\n @opindex Wnon-virtual-dtor\n @opindex Wno-non-virtual-dtor\n Warn when a class has virtual functions and an accessible non-virtual\n-destructor itself or in a base class, or has in which case it is\n-possible but unsafe to delete an instance of a derived class through a\n-pointer to the base class.  This warning is automatically enabled if\n-@option{-Weffc++} is specified.\n+destructor itself or in an accessible polymorphic base class, in which\n+case it is possible but unsafe to delete an instance of a derived\n+class through a pointer to the class itself or base class.  This\n+warning is automatically enabled if @option{-Weffc++} is specified.\n \n @item -Wreorder @r{(C++ and Objective-C++ only)}\n @opindex Wreorder\n@@ -2744,7 +2744,9 @@ Never overload @code{&&}, @code{||}, or @code{,}.\n @end itemize\n \n This option also enables @option{-Wnon-virtual-dtor}, which is also\n-one of the effective C++ recommendations.\n+one of the effective C++ recommendations.  However, the check is\n+extended to warn about the lack of virtual destructor in accessible\n+non-polymorphic bases classes too.\n \n When selecting this option, be aware that the standard library\n headers do not obey all of these guidelines; use @samp{grep -v}"}, {"sha": "04d964a6e974e045c1ed19904ab7ce784d2dd208", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -1,3 +1,9 @@\n+2014-04-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/warn/Wnvdtor-2.C: Add more cases.\n+\t* g++.dg/warn/Wnvdtor-3.C: Likewise.\n+\t* g++.dg/warn/Wnvdtor-4.C: Likewise.\n+\n 2014-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/test_raise_from_pure.adb: UnXFAIL for ARM."}, {"sha": "9f2e4bea43b51959a7d23b4fce8a8fbf600bed7c", "filename": "gcc/testsuite/g++.dg/warn/Wnvdtor-2.C", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-2.C?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -54,4 +54,23 @@ public:\n };\n \n struct H {};\n-struct I : H {};\n+\n+struct I1 : H\n+{};\n+struct I2 : private H\n+{};\n+\n+struct J1 : H\n+{ virtual ~J1 ();};\n+struct J2 : private H\n+{ virtual ~J2 ();};\n+\n+struct K // { dg-warning \"accessible non-virtual destructor\" }\n+{\n+  virtual void k ();\n+};\n+\n+struct L1 : K // { dg-warning \"accessible non-virtual destructor\" }\n+{virtual ~L1 ();};\n+struct L2 : private K\n+{virtual ~L2 ();};"}, {"sha": "e83134b062bf83a44b3e057b8207359b7a15f3d7", "filename": "gcc/testsuite/g++.dg/warn/Wnvdtor-3.C", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-3.C?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -53,4 +53,23 @@ public:\n };\n \n struct H {};\n-struct I : H {};\n+\n+struct I1 : H\n+{};\n+struct I2 : private H\n+{};\n+\n+struct J1 : H // { dg-warning \"accessible non-virtual destructor\" }\n+{ virtual ~J1 ();};\n+struct J2 : private H\n+{ virtual ~J2 ();};\n+\n+struct K // { dg-warning \"accessible non-virtual destructor\" }\n+{\n+  virtual void k ();\n+};\n+\n+struct L1 : K // { dg-warning \"accessible non-virtual destructor\" }\n+{virtual ~L1 ();};\n+struct L2 : private K\n+{virtual ~L2 ();};"}, {"sha": "dd6d9d7689ea175737c6c2c52d4b3663fc58a210", "filename": "gcc/testsuite/g++.dg/warn/Wnvdtor-4.C", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f09da396c1b67bd9c78c77aa367bb0b230bd80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnvdtor-4.C?ref=38f09da396c1b67bd9c78c77aa367bb0b230bd80", "patch": "@@ -53,4 +53,23 @@ public:\n };\n \n struct H {};\n-struct I : H {};\n+\n+struct I1 : H\n+{};\n+struct I2 : private H\n+{};\n+\n+struct J1 : H\n+{ virtual ~J1 ();};\n+struct J2 : private H\n+{ virtual ~J2 ();};\n+\n+struct K \n+{\n+  virtual void k ();\n+};\n+\n+struct L1 : K\n+{virtual ~L1 ();};\n+struct L2 : private K\n+{virtual ~L2 ();};"}]}