{"sha": "0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3N2MwN2I5YjNmZTgzNjc5MzU4YzNlZjU3NzIxZTA5ZTJhZDVmYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-01T10:49:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-01T11:38:59Z"}, "message": "tree-optimization/101280 - revise interchange fix for PR101173\n\nThe following revises the original fix for PR101173 to correctly\ncheck for a reversed dependence rather than disallowing a zero\ndistance.  It also adds a check from TSVC which asks for this\nkind of interchange (but with a valid dependence).\n\n2021-07-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101280\n\tPR tree-optimization/101173\n\t* gimple-loop-interchange.cc\n\t(tree_loop_interchange::valid_data_dependences): Revert\n\tprevious change and instead correctly handle DDR_REVERSED_P\n\tdependence.\n\n\t* gcc.dg/tree-ssa/loop-interchange-16.c: New testcase.", "tree": {"sha": "27e44924fdf36ccf4e2d4bd2f277440e76d08f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27e44924fdf36ccf4e2d4bd2f277440e76d08f71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09a7b00ac3075e3544978027f47b68fce54adabb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a7b00ac3075e3544978027f47b68fce54adabb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a7b00ac3075e3544978027f47b68fce54adabb"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "43ef112a2d0dd7566b9b0e59c9fb5485516dbaf1", "filename": "gcc/gimple-loop-interchange.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb/gcc%2Fgimple-loop-interchange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb/gcc%2Fgimple-loop-interchange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-interchange.cc?ref=0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "patch": "@@ -1043,8 +1043,11 @@ tree_loop_interchange::valid_data_dependences (unsigned i_idx, unsigned o_idx,\n \t    continue;\n \n \t  /* Be conservative, skip case if either direction at i_idx/o_idx\n-\t     levels is not '=' (for the inner loop) or '<'.  */\n-\t  if (dist_vect[i_idx] < 0 || dist_vect[o_idx] <= 0)\n+\t     levels is not '=' or '<'.  */\n+\t  if (dist_vect[i_idx] < 0\n+\t      || (DDR_REVERSED_P (ddr) && dist_vect[i_idx] > 0)\n+\t      || dist_vect[o_idx] < 0\n+\t      || (DDR_REVERSED_P (ddr) && dist_vect[o_idx] > 0))\n \t    return false;\n \t}\n     }"}, {"sha": "781555e085d12b799a509e0db57839336eb87810", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-interchange-16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a77c07b9b3fe83679358c3ef57721e09e2ad5fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-16.c?ref=0a77c07b9b3fe83679358c3ef57721e09e2ad5fb", "patch": "@@ -0,0 +1,22 @@\n+/* PR/101280 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-linterchange-details\" } */\n+\n+void dummy (double *, double *);\n+#define LEN_2D 32\n+double aa[LEN_2D][LEN_2D], bb[LEN_2D][LEN_2D];\n+double s231(int iterations)\n+{\n+//    loop interchange\n+//    loop with data dependency\n+    for (int nl = 0; nl < 100*(iterations/LEN_2D); nl++) {\n+        for (int i = 0; i < LEN_2D; ++i) {\n+            for (int j = 1; j < LEN_2D; j++) {\n+                aa[j][i] = aa[j - 1][i] + bb[j][i];\n+            }\n+        }\n+        dummy(aa[0],bb[0]);\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"loops interchanged\" \"linterchange\" } } */"}]}