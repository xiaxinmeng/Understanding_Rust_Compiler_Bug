{"sha": "28f7ff45ec593f6a2f5f76e16f32c682564794e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmN2ZmNDVlYzU5M2Y2YTJmNWY3NmUxNmYzMmM2ODI1NjQ3OTRlNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-02-11T08:11:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-02-11T08:11:34Z"}, "message": "compare-elim.c (find_comparisons_in_bb): Eliminate only compares having the same mode as previous compare.\n\n\t* compare-elim.c (find_comparisons_in_bb): Eliminate only compares\n\thaving the same mode as previous compare.\n\nFrom-SVN: r184124", "tree": {"sha": "a79a77ff63e91824a64db15c69f6b933d0f1d178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a79a77ff63e91824a64db15c69f6b933d0f1d178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f7ff45ec593f6a2f5f76e16f32c682564794e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f7ff45ec593f6a2f5f76e16f32c682564794e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f7ff45ec593f6a2f5f76e16f32c682564794e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f7ff45ec593f6a2f5f76e16f32c682564794e4/comments", "author": null, "committer": null, "parents": [{"sha": "83a5c149a6a19a98d0e5e46d43927549f210a14e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a5c149a6a19a98d0e5e46d43927549f210a14e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a5c149a6a19a98d0e5e46d43927549f210a14e"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "f0056d844dc947a0d1c78ee806cb152c2fdb351d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7ff45ec593f6a2f5f76e16f32c682564794e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7ff45ec593f6a2f5f76e16f32c682564794e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28f7ff45ec593f6a2f5f76e16f32c682564794e4", "patch": "@@ -1,3 +1,8 @@\n+2012-02-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* compare-elim.c (find_comparisons_in_bb): Eliminate only compares\n+\thaving the same mode as previous compare.\n+\n 2012-02-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (sparc_flat_expand_prologue): Use emit_use.\n@@ -19,9 +24,9 @@\n \n 2012-02-10  Richard Henderson  <rth@redhat.com>\n \n-        * tree-ssa-dce.c (propagate_necessity): Handle GIMPLE_TRANSACTION.\n-        * tree-ssa-operands.c (parse_ssa_operands): Add virtual operands\n-        for GIMPLE_TRANSACTION.  Tidy if's into a switch.\n+\t* tree-ssa-dce.c (propagate_necessity): Handle GIMPLE_TRANSACTION.\n+\t* tree-ssa-operands.c (parse_ssa_operands): Add virtual operands\n+\tfor GIMPLE_TRANSACTION.  Tidy if's into a switch.\n \n 2012-02-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \t    Ira Rosen  <irar@il.ibm.com>\n@@ -48,9 +53,8 @@\n \tPR middle-end/52177\n \t* builtins.c (fold_builtin_atomic_always_lock_free,\n \texpand_builtin_atomic_always_lock_free,\n-\tfold_builtin_atomic_is_lock_free,\n-\texpand_builtin_atomic_is_lock_free): Return and/or test\n-\tboolean_true_node/boolean_false_node instead of\n+\tfold_builtin_atomic_is_lock_free, expand_builtin_atomic_is_lock_free):\n+\tReturn and/or test boolean_true_node/boolean_false_node instead of\n \tinteger_one_node/integer_zero_node.\n \n 2012-02-10  Jan Hubicka  <jh@suse.cz>\n@@ -90,8 +94,8 @@\n 2012-02-08  Magnus Granberg  <zorry@gentoo.org>\n \n \tPR driver/48524\n-\t* gcc.c (switch_matches) Support switches with separated form, -D\n-\tand -U.\n+\t* gcc.c (switch_matches) Support switches with separated form,\n+\t-D and -U.\n \n 2012-02-08  Georg-Johann Lay  <avr@gjlay.de>\n \n@@ -113,8 +117,7 @@\n \tPR tree-optimization/46886\n \t* tree-flow.h (do_while_loop_p): Declare.\n \t* tree-ssa-loop-ch.c (do_while_loop_p): Export.\n-\t* tree-parloops.c (parallelize_loops): Only parallelize do-while\n-\tloops.\n+\t* tree-parloops.c (parallelize_loops): Only parallelize do-while loops.\n \n 2012-02-08  Andrew MacLeod  <amacleod@redhat.com>\n \n@@ -183,7 +186,7 @@\n \tnewline in -alias dumps.\n \n 2012-02-07  Kai Tietz  <ktietz@redhat.com>\n-            Dave Korn  <dave.korn.cygwin@gmail.com>\n+\t    Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR target/40068\n \t* config/i386/winnt-cxx.c (i386_pe_adjust_class_at_definition):\n@@ -216,7 +219,8 @@\n \t(epiphany_start_function): Handle multiple interrupt arguments and/or\n \tforwarder_section attribute.\n \n-\t* config/epiphany/epiphany.h (LIB_SPEC): Link libc again after libgloss.\n+\t* config/epiphany/epiphany.h (LIB_SPEC): Link libc again after\n+\tlibgloss.\n \n 2012-02-07  Alan Modra  <amodra@gmail.com>\n \n@@ -297,13 +301,11 @@\n \tto vect_is_simple_use_1 and vect_is_simple_use.\n \t(vectorizable_live_operation): Likewise.\n \t* tree-vect-patterns.c (widened_name_p,\n-\tvect_recog_vector_vector_shift_pattern, check_bool_pattern):\n-\tLikewise.\n+\tvect_recog_vector_vector_shift_pattern, check_bool_pattern): Likewise.\n \t* tree-vect-stmts.c (process_use, vect_get_vec_def_for_operand,\n-\tvectorizable_call, vectorizable_conversion,\n-\tvectorizable_assignment, vectorizable_shift,\n-\tvectorizable_operation, vectorizable_store, vectorizable_load):\n-\tLikewise.\n+\tvectorizable_call, vectorizable_conversion, vectorizable_assignment,\n+\tvectorizable_shift,vectorizable_operation, vectorizable_store,\n+\tvectorizable_load): Likewise.\n \t(vect_is_simple_cond): Add an argument, pass it to\n \tvect_is_simple_use_1.\n \t(vectorizable_condition): Update calls to vect_is_simple_cond,\n@@ -436,8 +438,7 @@\n \n 2012-01-31  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n-\tconfig/arm/thumb2.md (thumb2_mov_notscc): Use MVN for true\n-\tcondition.\n+\t* config/arm/thumb2.md (thumb2_mov_notscc): Use MVN for true condition.\n \n 2012-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -537,7 +538,7 @@\n \n 2012-01-29  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/alpha/alpha.c (alpha_option_overrride): Default to\n+\t* config/alpha/alpha.c (alpha_option_override): Default to\n \tfull IEEE compliance mode for Go language.\n \n 2011-01-29  Tijl Coosemans  <tijl@coosemans.org>"}, {"sha": "15d8d622585d3cac040548de40a61ba351715265", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7ff45ec593f6a2f5f76e16f32c682564794e4/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7ff45ec593f6a2f5f76e16f32c682564794e4/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=28f7ff45ec593f6a2f5f76e16f32c682564794e4", "patch": "@@ -297,8 +297,11 @@ find_comparisons_in_bb (struct dom_walk_data *data ATTRIBUTE_UNUSED,\n       src = conforming_compare (insn);\n       if (src)\n \t{\n+\t  enum machine_mode src_mode = GET_MODE (src);\n+\n \t  /* Eliminate a compare that's redundant with the previous.  */\n \t  if (last_cmp_valid\n+\t      && src_mode == last_cmp->orig_mode\n \t      && rtx_equal_p (last_cmp->in_a, XEXP (src, 0))\n \t      && rtx_equal_p (last_cmp->in_b, XEXP (src, 1)))\n \t    {\n@@ -311,7 +314,7 @@ find_comparisons_in_bb (struct dom_walk_data *data ATTRIBUTE_UNUSED,\n \t  last_cmp->prev_clobber = last_clobber;\n \t  last_cmp->in_a = XEXP (src, 0);\n \t  last_cmp->in_b = XEXP (src, 1);\n-\t  last_cmp->orig_mode = GET_MODE (SET_DEST (single_set (insn)));\n+\t  last_cmp->orig_mode = src_mode;\n \t  VEC_safe_push (comparison_struct_p, heap, all_compares, last_cmp);\n \n \t  /* It's unusual, but be prepared for comparison patterns that"}]}