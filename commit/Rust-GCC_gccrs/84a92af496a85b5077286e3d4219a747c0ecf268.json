{"sha": "84a92af496a85b5077286e3d4219a747c0ecf268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhOTJhZjQ5NmE4NWI1MDc3Mjg2ZTNkNDIxOWE3NDdjMGVjZjI2OA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-24T00:26:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-24T00:26:11Z"}, "message": "(abicalls): New attribute.\n\n(define_delay): Don't fill call delay slots when TARGET_ABICALLS.\n(call_internal3, call_value_internal3): Renamed from\ncall_internal2 and call_value_internal2.\n(call_internal2, call_value_internal2): New call patterns for\nTARGET_ABICALL case.\n(call_internal4, call_value_internal4): Likewise.\n\nFrom-SVN: r5876", "tree": {"sha": "2c4e0308436ad7e4d725f6f1a194a21ddd8d5abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4e0308436ad7e4d725f6f1a194a21ddd8d5abb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84a92af496a85b5077286e3d4219a747c0ecf268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a92af496a85b5077286e3d4219a747c0ecf268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a92af496a85b5077286e3d4219a747c0ecf268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a92af496a85b5077286e3d4219a747c0ecf268/comments", "author": null, "committer": null, "parents": [{"sha": "24e214e3d3fb1f44c2e77e3c142214867a7d51b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e214e3d3fb1f44c2e77e3c142214867a7d51b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24e214e3d3fb1f44c2e77e3c142214867a7d51b7"}], "stats": {"total": 115, "additions": 110, "deletions": 5}, "files": [{"sha": "2bf628312b737b785d31d505926950bde8fa0b1e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 110, "deletions": 5, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a92af496a85b5077286e3d4219a747c0ecf268/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a92af496a85b5077286e3d4219a747c0ecf268/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=84a92af496a85b5077286e3d4219a747c0ecf268", "patch": "@@ -96,6 +96,10 @@\n (define_asm_attributes\n   [(set_attr \"type\" \"multi\")])\n \n+;; whether or not generating calls to position independent functions\n+(define_attr \"abicalls\" \"no,yes\"\n+  (const (symbol_ref \"mips_abicalls\")))\n+\n \f\n \n ;; .........................\n@@ -109,7 +113,12 @@\n    (nil)\n    (and (eq_attr \"branch_likely\" \"yes\") (and (eq_attr \"dslot\" \"no\") (eq_attr \"length\" \"1\")))])\n \n-(define_delay (eq_attr \"type\" \"call,jump\")\n+(define_delay (eq_attr \"type\" \"jump\")\n+  [(and (eq_attr \"dslot\" \"no\") (eq_attr \"length\" \"1\"))\n+   (nil)\n+   (nil)])\n+\n+(define_delay (and (eq_attr \"type\" \"call\") (eq_attr \"abicalls\" \"no\"))\n   [(and (eq_attr \"dslot\" \"no\") (eq_attr \"length\" \"1\"))\n    (nil)\n    (nil)])\n@@ -4089,7 +4098,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(call (match_operand 0 \"call_insn_operand\" \"m\")\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n-  \"!TARGET_LONG_CALLS\"\n+  \"!TARGET_ABICALLS && !TARGET_LONG_CALLS\"\n   \"*\n {\n   register rtx target = XEXP (operands[0], 0);\n@@ -4114,15 +4123,62 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"1\")])\n \n (define_insn \"call_internal2\"\n+  [(call (match_operand 0 \"call_insn_operand\" \"m\")\n+\t (match_operand 1 \"\" \"i\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n+  \"TARGET_ABICALLS && !TARGET_LONG_CALLS\"\n+  \"*\n+{\n+  register rtx target = XEXP (operands[0], 0);\n+\n+  if (GET_CODE (target) == SYMBOL_REF)\n+    return \\\"jal\\\\t%0\\\";\n+\n+  else if (GET_CODE (target) == CONST_INT)\n+    {\n+      operands[0] = target;\n+      return \\\"li\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n+    }\n+\n+  else\n+    {\n+      operands[0] = target;\n+      if (REGNO (target) != PIC_FUNCTION_ADDR_REGNUM)\n+\treturn \\\"move\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n+      else\n+\treturn \\\"jal\\\\t%2,%0\\\";\n+    }\n+}\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"2\")])\n+\n+(define_insn \"call_internal3\"\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n-  \"TARGET_LONG_CALLS\"\n+  \"!TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%2,%0\"\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"1\")])\n \n+(define_insn \"call_internal4\"\n+  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n+\t (match_operand 1 \"\" \"i\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n+  \"TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"*\n+{\n+  if (REGNO (operands[0]) != PIC_FUNCTION_ADDR_REGNUM)\n+    return \\\"move\\\\t%^,%0\\\\n\\\\tjal\\\\t%2,%^\\\";\n+  else\n+    return \\\"jal\\\\t%2,%0\\\";\n+}\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"2\")])\n+\n \n ;; calls.c now passes a fourth argument, make saber happy\n \n@@ -4174,7 +4230,7 @@ move\\\\t%0,%z4\\\\n\\\\\n         (call (match_operand 1 \"call_insn_operand\" \"m\")\n               (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"!TARGET_LONG_CALLS\"\n+  \"!TARGET_ABICALLS && !TARGET_LONG_CALLS\"\n   \"*\n {\n   register rtx target = XEXP (operands[1], 0);\n@@ -4199,16 +4255,65 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"length\"\t\"1\")])\n \n (define_insn \"call_value_internal2\"\n+  [(set (match_operand 0 \"register_operand\" \"=df\")\n+        (call (match_operand 1 \"call_insn_operand\" \"m\")\n+              (match_operand 2 \"\" \"i\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n+  \"TARGET_ABICALLS && !TARGET_LONG_CALLS\"\n+  \"*\n+{\n+  register rtx target = XEXP (operands[1], 0);\n+\n+  if (GET_CODE (target) == SYMBOL_REF)\n+    return \\\"jal\\\\t%1\\\";\n+\n+  else if (GET_CODE (target) == CONST_INT)\n+    {\n+      operands[1] = target;\n+      return \\\"li\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n+    }\n+\n+  else\n+    {\n+      operands[1] = target;\n+      if (REGNO (target) != PIC_FUNCTION_ADDR_REGNUM)\n+\treturn \\\"move\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n+      else\n+\treturn \\\"jal\\\\t%3,%1\\\";\n+    }\n+}\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"2\")])\n+\n+(define_insn \"call_value_internal3\"\n   [(set (match_operand 0 \"register_operand\" \"=df\")\n         (call (mem:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"TARGET_LONG_CALLS\"\n+  \"!TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%3,%1\"\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"1\")])\n \n+(define_insn \"call_value_internal4\"\n+  [(set (match_operand 0 \"register_operand\" \"=df\")\n+        (call (mem:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t      (match_operand 2 \"\" \"i\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n+  \"TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"*\n+{\n+  if (REGNO (operands[1]) != PIC_FUNCTION_ADDR_REGNUM)\n+    return \\\"move\\\\t%^,%1\\\\n\\\\tjal\\\\t%3,%^\\\";\n+  else\n+    return \\\"jal\\\\t%3,%1\\\";\n+}\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"2\")])\n+\n ;; Call subroutine returning any type.\n \n (define_expand \"untyped_call\""}]}