{"sha": "fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5MWNhN2Y1MDZiMTYyZDVmMGFmY2ZmZDJkN2Q1NjJkYTZhYTdmYQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-24T08:49:02Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-09-25T07:06:12Z"}, "message": "[testsuite] Add effective target ident_directive\n\nOn nvptx we run into:\n...\nFAIL: c-c++-common/ident-1b.c  -Wc++-compat   scan-assembler GCC:\nFAIL: c-c++-common/ident-2b.c  -Wc++-compat   scan-assembler GCC:\n...\n\nUsing a scan-assembler directive adds -fno-indent to the compile options.\nThe test c-c++-common/ident-1b.c adds dg-options \"-fident\", and intends to\ncheck that the -fident overrides the -fno-indent, by means of the\nscan-assembler.  But for nvptx, there's no .ident directive, both with -fident\nand -fno-ident.\n\nFix this by adding an effective target ident_directive, and requiring\nit in both test-cases.\n\nTested on nvptx and x86_64.\n\ngcc/testsuite/ChangeLog:\n\n2020-09-24  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/target-supports.exp (check_effective_target_ident_directive): New proc.\n\t* c-c++-common/ident-1b.c: Require effective target ident_directive.\n\t* c-c++-common/ident-2b.c: Same.", "tree": {"sha": "03deac5eed11153302fb4bed584d615681af2a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03deac5eed11153302fb4bed584d615681af2a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b7397b501378815d1b6c5beb7cbda21f2e4ad7"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "b8b83e64ad25d92284d5d14299b0e0e412574b09", "filename": "gcc/testsuite/c-c++-common/ident-1b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fident-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fident-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fident-1b.c?ref=fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa", "patch": "@@ -2,6 +2,7 @@\n  * Make sure scan-assembler turns off .ident unless -fident in testcase */\n /* { dg-do compile } */\n /* { dg-options \"-fident\" } */\n+/* { dg-require-effective-target ident_directive }*/\n int i;\n \n /* { dg-final { scan-assembler \"GCC: \" { xfail { { hppa*-*-hpux* && { ! lp64 } } || { powerpc-ibm-aix* || powerpc*-*-darwin* } } } } } */"}, {"sha": "52f0693e164819501a24fafb3bfc4bc77672127f", "filename": "gcc/testsuite/c-c++-common/ident-2b.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fident-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fident-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fident-2b.c?ref=fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa", "patch": "@@ -2,6 +2,7 @@\n  * Make sure scan-assembler-times turns off .ident unless -fident in testcase */\n /* { dg-do compile } */\n /* { dg-options \"-fident\" } */\n+/* { dg-require-effective-target ident_directive }*/\n int ident;\n \n /* { dg-final { scan-assembler \"GCC: \" { xfail { { hppa*-*-hpux* && { ! lp64 } } || { powerpc-ibm-aix* || powerpc*-*-darwin* } } } } } */"}, {"sha": "0a00972edb592ea5f00a81c31aaba2b5a601263e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=fa91ca7f506b162d5f0afcffd2d7d562da6aa7fa", "patch": "@@ -10510,3 +10510,12 @@ proc check_symver_available { } {\n \t    }\n \t}]\n }\n+\n+# Return 1 if emitted assembly contains .ident directive.\n+\n+proc check_effective_target_ident_directive {} {\n+    return [check_no_messages_and_pattern ident_directive \\\n+\t\t\"(?n)^\\[\\t\\]+\\\\.ident\" assembly {\n+\tint i;\n+    }]\n+}"}]}