{"sha": "347669a079a7005bf211e57cba5db24d0b99f2f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3NjY5YTA3OWE3MDA1YmYyMTFlNTdjYmE1ZGIyNGQwYjk5ZjJmMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-03-24T05:45:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-03-24T05:45:45Z"}, "message": "acinclude.m4: Adjust so that _GLIBCXX_USE_C99 implies using _GLIBCXX_USE_C99_COMPLEX...\n\n\n2005-03-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4: Adjust so that _GLIBCXX_USE_C99 implies\n\tusing _GLIBCXX_USE_C99_COMPLEX, _GLIBCXX_USE_C99_MATH, and\n\t_GLIBCXX_USE_C99_WCHAR.\n\tRemove GLIBCXX_ENABLE_C_MBCHAR, consolidate in GLIBCXX_ENABLE_C99\n\tand GLIBCXX_ENABLE_WCHAR_T.\n\tTake C99 bits from GLIBCXX_CHECK_WCHAR_T_SUPPORT and put in\n\tGLIBCXX_ENABLE_C99.\n\tChange remaining parts of GLIBCXX_CHECK_WCHAR_T_SUPPORT to\n\tGLIBCXX_CHECK_ICONV_SUPPORT.\n\t* configure.ac: Remove GLIBCXX_ENABLE_C_MBCHAR, use\n\tGLIBCXX_CHECK_ICONV_SUPPORT and GLIBCXX_ENABLE_WCHAR_T.\n\t* crossconfig.m4: Same.\n\t* acconfig.h: Same, adjust comments.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* docs/html/configopts.html: Change --enable-c-mbchar to\n\t--enable-wchar_t.\n\n\t* config/locale/gnu/c++locale_internal.h: Guard wide functions\n\twith _GLIBCXX_USE_WCHAR_T.\n\t* include/c_std/std_cwctype.h: Alphabetize, remove duplicates.\n\t* include/c_std/std_cstdio.h: Spacing.\n\n\t* config/locale/gnu/c_locale.h: Tweaks for unused warnings.\n\t* src/debug.cc: Same.\n\nFrom-SVN: r96981", "tree": {"sha": "15858b7da5b678b1ba495dd35826662b01a72d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15858b7da5b678b1ba495dd35826662b01a72d3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/347669a079a7005bf211e57cba5db24d0b99f2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347669a079a7005bf211e57cba5db24d0b99f2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347669a079a7005bf211e57cba5db24d0b99f2f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347669a079a7005bf211e57cba5db24d0b99f2f3/comments", "author": null, "committer": null, "parents": [{"sha": "a53ed3ded702e70cf720a032e880756d3bd4ed0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53ed3ded702e70cf720a032e880756d3bd4ed0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53ed3ded702e70cf720a032e880756d3bd4ed0b"}], "stats": {"total": 54551, "additions": 20843, "deletions": 33708}, "files": [{"sha": "8127d70924c0754bc513a58c178f0549b50e2c08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,3 +1,31 @@\n+2005-03-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4: Adjust so that _GLIBCXX_USE_C99 implies\n+\tusing _GLIBCXX_USE_C99_COMPLEX, _GLIBCXX_USE_C99_MATH, and\n+\t_GLIBCXX_USE_C99_WCHAR.\n+\tRemove GLIBCXX_ENABLE_C_MBCHAR, consolidate in GLIBCXX_ENABLE_C99\n+\tand GLIBCXX_ENABLE_WCHAR_T.\n+\tTake C99 bits from GLIBCXX_CHECK_WCHAR_T_SUPPORT and put in \n+\tGLIBCXX_ENABLE_C99.\n+\tChange remaining parts of GLIBCXX_CHECK_WCHAR_T_SUPPORT to\n+\tGLIBCXX_CHECK_ICONV_SUPPORT.\n+\t* configure.ac: Remove GLIBCXX_ENABLE_C_MBCHAR, use\n+\tGLIBCXX_CHECK_ICONV_SUPPORT and GLIBCXX_ENABLE_WCHAR_T.\n+\t* crossconfig.m4: Same.\n+\t* acconfig.h: Same, adjust comments.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* docs/html/configopts.html: Change --enable-c-mbchar to\n+\t--enable-wchar_t.\n+\n+\t* config/locale/gnu/c++locale_internal.h: Guard wide functions\n+\twith _GLIBCXX_USE_WCHAR_T.\n+\t* include/c_std/std_cwctype.h: Alphabetize, remove duplicates.\n+\t* include/c_std/std_cstdio.h: Spacing.\n+\n+\t* config/locale/gnu/c_locale.h: Tweaks for unused warnings.\n+\t* src/debug.cc: Same.\n+\n 2005-03-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/libstdc++-dg/normal.exp: Read testsuite_files, if it"}, {"sha": "f4cb96abaafdb4468418d4cb1092bb4e0a31f268", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,4 +1,4 @@\n-// acconfig.h symbols and macros for libstdc++ v3 -*- C++ -*-\n+// Symbols and macros for libstdc++ -*- C++ -*-\n \n // Defines libstdc++ version.\n #undef PACKAGE\n@@ -10,21 +10,25 @@\n #undef HAVE_GETTEXT\n #undef HAVE_STPCPY\n \n-// Include I/O support for 'long long' and 'unsigned long long'.\n+// Define if code specialized for long long should be used.\n #undef _GLIBCXX_USE_LONG_LONG\n \n-// Define if C99 features such as lldiv_t, llabs, lldiv should be exposed.\n+// Define if code specialized for wchar_t should be used.\n+#undef _GLIBCXX_USE_WCHAR_T\n+\n+// Define if C99 functions or macros from <wchar.h>, <math.h>,\n+// <complex.h>, <stdio.h>, and <stdlib.h> can be used or exposed.\n #undef _GLIBCXX_USE_C99\n \n-// Define if C99 math functions (like fpclassify) should be exposed.\n+// Define if C99 functions or macros in <math.h> should be imported in\n+// <cmath> in namespace std.\n #undef _GLIBCXX_USE_C99_MATH\n \n-// Define if C99 complex math functions should be used in std::complex.\n+// Define if C99 functions in <complex.h> should be used in\n+// <complex>. Using compiler builtins for these functions requires\n+// corresponding C99 library functions to be present.\n #undef _GLIBCXX_USE_C99_COMPLEX\n \n-// Define if code specialized for wchar_t should be used.\n-#undef _GLIBCXX_USE_WCHAR_T\n-\n // Define if using setrlimit to set resource limits during 'make check'.\n #undef _GLIBCXX_RES_LIMITS\n "}, {"sha": "92ce9a238ecba16df2df2064ccf50ad4d79b10c4", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 239, "deletions": 291, "changes": 530, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -124,14 +124,6 @@ AC_DEFUN([GLIBCXX_CONFIGURE], [\n   ## (Right now, this only matters for enable_wchar_t, but nothing prevents\n   ## other macros from doing the same.  This should be automated.)  -pme\n   need_libmath=no\n-  enable_wchar_t=no\n-  #enable_libstdcxx_debug=no\n-  #enable_libstdcxx_pch=no\n-  #enable_cheaders=c\n-  #c_compatibility=no\n-  #enable_abi_check=no\n-  #enable_symvers=no\n-  #enable_hosted_libstdcxx=yes\n \n   # Find platform-specific directories containing configuration info.\n   # Also possibly modify flags used elsewhere, as needed by the platform.\n@@ -290,85 +282,21 @@ AC_DEFUN([GLIBCXX_CHECK_LINKER_FEATURES], [\n \n \n dnl\n-dnl Check to see if this target can enable the wchar_t parts.\n-dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n-dnl must have been previously checked.)  By default, wide characters are\n-dnl disabled.\n+dnl Check to see if this target can enable the iconv specializations.\n+dnl If --disable-c-mbchar was given, no wchar_t specialization is enabled.  \n+dnl (This must have been previously checked, along with the rest of C99 \n+dnl support.) By default, iconv support is disabled.\n dnl\n dnl Defines:\n-dnl  HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n-dnl  _GLIBCXX_USE_WCHAR_T if all the bits are found.\n+dnl  _GLIBCXX_USE_ICONV if all the bits are found.\n dnl Substs:\n dnl  LIBICONV to a -l string containing the iconv library, if needed.\n dnl\n-AC_DEFUN([GLIBCXX_CHECK_WCHAR_T_SUPPORT], [\n-  # Test wchar.h for mbstate_t, which is needed for char_traits and\n-  # others even if wchar_t support is not on.\n-  AC_MSG_CHECKING([for mbstate_t])\n-  AC_TRY_COMPILE([#include <wchar.h>],\n-  [mbstate_t teststate;],\n-  have_mbstate_t=yes, have_mbstate_t=no)\n-  AC_MSG_RESULT($have_mbstate_t)\n-  if test x\"$have_mbstate_t\" = xyes; then\n-    AC_DEFINE(HAVE_MBSTATE_T)\n-  fi\n-\n-  # Sanity check for existence of ISO C99 headers for extended encoding.\n-  AC_CHECK_HEADERS(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n-  AC_CHECK_HEADERS(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n+AC_DEFUN([GLIBCXX_CHECK_ICONV_SUPPORT], [\n \n+  enable_iconv=no\n   # Only continue checking if the ISO C99 headers exist and support is on.\n-  if test x\"$ac_has_wchar_h\" = xyes &&\n-     test x\"$ac_has_wctype_h\" = xyes &&\n-     test x\"$enable_c_mbchar\" != xno; then\n-\n-    # Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n-    # numeric_limits can instantiate type_traits<wchar_t>\n-    AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n-    AC_TRY_COMPILE([#include <wchar.h>],\n-    [int i = WCHAR_MIN; int j = WCHAR_MAX;],\n-    has_wchar_minmax=yes, has_wchar_minmax=no)\n-    AC_MSG_RESULT($has_wchar_minmax)\n-\n-    # Test wchar.h for WEOF, which is what we use to determine whether\n-    # to specialize for char_traits<wchar_t> or not.\n-    AC_MSG_CHECKING([for WEOF])\n-    AC_TRY_COMPILE([\n-      #include <wchar.h>\n-      #include <stddef.h>],\n-    [wint_t i = WEOF;],\n-    has_weof=yes, has_weof=no)\n-    AC_MSG_RESULT($has_weof)\n-\n-    # Tests for wide character functions used in char_traits<wchar_t>.\n-    ac_wfuncs=yes\n-    AC_CHECK_FUNCS([wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset],\n-    [],[ac_wfuncs=no])\n-\n-    # Checks for names injected into std:: by the c_std headers.\n-    AC_CHECK_FUNCS([btowc wctob fgetwc fgetws fputwc fputws fwide \\\n-    fwprintf fwscanf swprintf swscanf vfwprintf vswprintf \\\n-    vwprintf wprintf wscanf getwc getwchar mbsinit mbrlen mbrtowc \\\n-    mbsrtowcs wcsrtombs putwc putwchar ungetwc wcrtomb wcstod wcstol \\\n-    wcstoul wcscpy wcsncpy wcscat wcsncat wcscmp wcscoll wcsncmp wcsxfrm \\\n-    wcscspn wcsspn wcstok wcsftime wcschr wcspbrk wcsrchr wcsstr],\n-    [],[ac_wfuncs=no])\n-\n-    # Checks for wide character functions that are not required\n-    # for basic wchar_t support.  Don't disable support if they are missing.\n-    # Injection of these is wrapped with guard macros.\n-    AC_CHECK_FUNCS([vfwscanf vswscanf vwscanf wcstof iswblank],[],[])\n-\n-    AC_MSG_CHECKING([for ISO C99 wchar_t support])\n-    if test x\"$has_weof\" = xyes &&\n-       test x\"$has_wchar_minmax\" = xyes &&\n-       test x\"$ac_wfuncs\" = xyes;\n-    then\n-      ac_isoC99_wchar_t=yes\n-    else\n-      ac_isoC99_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_isoC99_wchar_t)\n+  if test x\"$enable_wchar_t\" = xyes; then\n \n     # Use iconv for wchar_t to char conversions. As such, check for\n     # X/Open Portability Guide, version 2 features (XPG2).\n@@ -386,28 +314,17 @@ AC_DEFUN([GLIBCXX_CHECK_WCHAR_T_SUPPORT], [\n \n     LIBS=\"$ac_save_LIBS\"\n \n-    AC_MSG_CHECKING([for XPG2 wchar_t support])\n     if test x\"$ac_has_iconv_h\" = xyes &&\n        test x\"$ac_has_langinfo_h\" = xyes &&\n        test x\"$ac_XPG2funcs\" = xyes;\n     then\n-      ac_XPG2_wchar_t=yes\n-    else\n-      ac_XPG2_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_XPG2_wchar_t)\n-\n-    # At the moment, only enable wchar_t specializations if all the\n-    # above support is present.\n-    if test x\"$ac_isoC99_wchar_t\" = xyes &&\n-       test x\"$ac_XPG2_wchar_t\" = xyes;\n-    then\n-      AC_DEFINE(_GLIBCXX_USE_WCHAR_T)\n-      enable_wchar_t=yes\n+      AC_DEFINE([_GLIBCXX_USE_ICONV],1,\n+\t        [Define if iconv and related functions exist and are usable.])\n+      enable_iconv=yes\n     fi\n   fi\n-  AC_MSG_CHECKING([for enabled wchar_t specializations])\n-  AC_MSG_RESULT($enable_wchar_t)\n+  AC_MSG_CHECKING([for enabled iconv specializations])\n+  AC_MSG_RESULT($enable_iconv)\n ])\n \n \n@@ -838,29 +755,43 @@ dnl\n AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   GLIBCXX_ENABLE(c99,$1,,[turns on ISO/IEC 9899:1999 support])\n \n+  # Test wchar.h for mbstate_t, which is needed for char_traits and fpos\n+  # even if C99 support is turned off.\n+  AC_CHECK_HEADERS(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n+  AC_MSG_CHECKING([for mbstate_t])\n+  AC_TRY_COMPILE([#include <wchar.h>],\n+  [mbstate_t teststate;],\n+  have_mbstate_t=yes, have_mbstate_t=no)\n+  AC_MSG_RESULT($have_mbstate_t)\n+  if test x\"$have_mbstate_t\" = xyes; then\n+    AC_DEFINE(HAVE_MBSTATE_T)\n+  fi\n+\n+  if test x\"$enable_c99\" = x\"yes\"; then\n+\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n \n   # Check for the existence of <math.h> functions used if C99 is enabled.\n-  ac_c99_math=yes;\n   AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n-  AC_TRY_COMPILE([#include <math.h>],[fpclassify(0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[isfinite(0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[isinf(0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[isnan(0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[isnormal(0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[signbit(0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[isgreater(0.0,0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],\n-                 [isgreaterequal(0.0,0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[isless(0.0,0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],[islessequal(0.0,0.0);],,[ac_c99_math=no])\n+  AC_CACHE_VAL(ac_c99_math, [\n   AC_TRY_COMPILE([#include <math.h>],\n-                 [islessgreater(0.0,0.0);],, [ac_c99_math=no])\n-  AC_TRY_COMPILE([#include <math.h>],\n-                 [isunordered(0.0,0.0);],, [ac_c99_math=no])\n+\t         [fpclassify(0.0);\n+\t          isfinite(0.0); \n+\t\t  isinf(0.0);\n+\t          isnan(0.0);\n+\t\t  isnormal(0.0);\n+\t  \t  signbit(0.0);\n+\t \t  isgreater(0.0,0.0);\n+\t\t  isgreaterequal(0.0,0.0);\n+\t\t  isless(0.0,0.0);\n+\t\t  islessequal(0.0,0.0);\n+\t\t  islessgreater(0.0,0.0);\n+\t\t  islessgreater(0.0,0.0);\n+\t\t  isunordered(0.0,0.0);\n+\t\t ],[ac_c99_math=yes], [ac_c99_math=no])\n+  ])\n   AC_MSG_RESULT($ac_c99_math)\n-\n   if test x\"$ac_c99_math\" = x\"yes\"; then\n     AC_DEFINE(_GLIBCXX_USE_C99_MATH)\n   fi\n@@ -869,200 +800,210 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   # This is necessary even though libstdc++ uses the builtin versions\n   # of these functions, because if the builtin cannot be used, a reference\n   # to the library function is emitted.\n+  # In addition, need to explicitly specify \"C\" compilation for this\n+  # one, or else the backwards C++ <complex.h> include will be selected.\n+  save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -x c\"\n   AC_CHECK_HEADERS(complex.h, ac_has_complex_h=yes, ac_has_complex_h=no)\n   ac_c99_complex=no;\n   if test x\"$ac_has_complex_h\" = x\"yes\"; then\n-    ac_c99_complex=yes;\n     AC_MSG_CHECKING([for ISO C99 support in <complex.h>])\n     AC_TRY_COMPILE([#include <complex.h>],\n-\t           [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t            cabsf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    cabs(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t \t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    cabsl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t           [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-                    cargf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    carg(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t   \t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    cargl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t       \t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    ccosf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    ccos(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    ccosl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    ccoshf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    ccosh(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    ccoshl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    cexpf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    cexp(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    cexpl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    csinf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    csin(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    csinl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n- \t\t    csinhf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    csinh(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    csinhl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    csqrtf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    csqrt(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    csqrtl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    ctanf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    ctan(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    ctanl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    ctanhf(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    ctanh(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t  \t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    ctanhl(tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ float _ComplexT; _ComplexT tmp;\n-\t\t    cpowf(tmp, tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ double _ComplexT; _ComplexT tmp;\n-\t\t    cpow(tmp, tmp);],, [ac_c99_complex=no])\n-    AC_TRY_COMPILE([#include <complex.h>],\n-\t\t   [typedef __complex__ long double _ComplexT; _ComplexT tmp;\n-\t\t    cpowl(tmp, tmp);],, [ac_c99_complex=no])\n+\t           [typedef __complex__ float float_type; float_type tmpf;\n+\t            cabsf(tmpf);\n+\t\t    cargf(tmpf);\n+\t\t    ccosf(tmpf);\n+  \t\t    ccoshf(tmpf);\n+\t\t    cexpf(tmpf);\n+\t\t    csinf(tmpf);\n+\t\t    csinhf(tmpf);\n+\t\t    csqrtf(tmpf);\n+\t\t    ctanf(tmpf);\n+\t\t    ctanhf(tmpf);\n+\t\t    cpowf(tmpf, tmpf);\n+\t\t    typedef __complex__ double double_type; double_type tmpd;\n+\t            cabs(tmpd);\n+\t\t    carg(tmpd);\n+\t\t    ccos(tmpd);\n+  \t\t    ccosh(tmpd);\n+\t\t    cexp(tmpd);\n+\t\t    csin(tmpd);\n+\t\t    csinh(tmpd);\n+\t\t    csqrt(tmpd);\n+\t\t    ctan(tmpd);\n+\t\t    ctanh(tmpd);\n+\t\t    cpow(tmpd, tmpd);\n+\t\t    typedef __complex__ long double ld_type; ld_type tmpld;\n+\t            cabsl(tmpld);\n+\t\t    cargl(tmpld);\n+\t\t    ccosl(tmpld);\n+  \t\t    ccoshl(tmpld);\n+\t\t    cexpl(tmpld);\n+\t\t    csinl(tmpld);\n+\t\t    csinhl(tmpld);\n+\t\t    csqrtl(tmpld);\n+\t\t    ctanl(tmpld);\n+\t\t    ctanhl(tmpld);\n+\t\t    cpowl(tmpld, tmpld);\n+\t\t   ],[ac_c99_complex=yes], [ac_c99_complex=no])\n   fi\n+  CXXFLAGS=\"$save_CXXFLAGS\"\n   AC_MSG_RESULT($ac_c99_complex)\n-\n   if test x\"$ac_c99_complex\" = x\"yes\"; then\n     AC_DEFINE(_GLIBCXX_USE_C99_COMPLEX)\n   fi\n \n   # Check for the existence in <stdio.h> of vscanf, et. al.\n-  ac_c99_stdio=yes;\n   AC_MSG_CHECKING([for ISO C99 support in <stdio.h>])\n-  AC_TRY_COMPILE([#include <stdio.h>],\n-                 [snprintf(\"12\", 0, \"%i\");],, [ac_c99_stdio=no])\n+  AC_CACHE_VAL(ac_c99_stdio, [\n   AC_TRY_COMPILE([#include <stdio.h>\n-                  #include <stdarg.h>\n+\t\t  #include <stdarg.h>\n                   void foo(char* fmt, ...)\n-                  {va_list args; va_start(args, fmt);\n-                  vfscanf(stderr, \"%i\", args);}],\n-                  [],, [ac_c99_stdio=no])\n-  AC_TRY_COMPILE([#include <stdio.h>\n-                  #include <stdarg.h>\n-                  void foo(char* fmt, ...)\n-                  {va_list args; va_start(args, fmt);\n-                  vscanf(\"%i\", args);}],\n-                  [],, [ac_c99_stdio=no])\n-  AC_TRY_COMPILE([#include <stdio.h>\n-                  #include <stdarg.h>\n-                  void foo(char* fmt, ...)\n-                  {va_list args; va_start(args, fmt);\n-                  vsnprintf(fmt, 0, \"%i\", args);}],\n-                  [],, [ac_c99_stdio=no])\n-  AC_TRY_COMPILE([#include <stdio.h>\n-                  #include <stdarg.h>\n-                  void foo(char* fmt, ...)\n-                  {va_list args; va_start(args, fmt);\n-                  vsscanf(fmt, \"%i\", args);}],\n-                  [],, [ac_c99_stdio=no])\n+                  {\n+\t            va_list args; va_start(args, fmt);\n+                    vfscanf(stderr, \"%i\", args); \n+\t\t    vscanf(\"%i\", args);\n+                    vsnprintf(fmt, 0, \"%i\", args);\n+                    vsscanf(fmt, \"%i\", args);\n+\t\t  }],\n+                 [snprintf(\"12\", 0, \"%i\");],\n+\t\t [ac_c99_stdio=yes], [ac_c99_stdio=no])\n+  ])\n   AC_MSG_RESULT($ac_c99_stdio)\n \n   # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n-  ac_c99_stdlib=yes;\n-  AC_MSG_CHECKING([for lldiv_t declaration])\n-  AC_CACHE_VAL(ac_c99_lldiv_t, [\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-                   [ lldiv_t mydivt;],\n-                   [ac_c99_lldiv_t=yes], [ac_c99_lldiv_t=no])\n-  ])\n-  AC_MSG_RESULT($ac_c99_lldiv_t)\n-\n   AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n+  AC_CACHE_VAL(ac_c99_stdlib, [\n   AC_TRY_COMPILE([#include <stdlib.h>],\n-                 [char* tmp; strtof(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>],\n-                 [char* tmp; strtold(\"gnu\", &tmp);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n-  AC_TRY_COMPILE([#include <stdlib.h>], [_Exit(0);],, [ac_c99_stdlib=no])\n-  if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n-    ac_c99_stdlib=no;\n-  fi;\n+                 [char* tmp; \n+\t    \t  strtof(\"gnu\", &tmp); \n+\t\t  strtold(\"gnu\", &tmp);\n+                  llabs(10); \n+\t\t  lldiv(10,1); \n+\t\t  atoll(\"10\"); \n+\t\t  _Exit(0);\n+\t\t  lldiv_t mydivt;],[ac_c99_stdlib=yes], [ac_c99_stdlib=no])\n+  ])\n   AC_MSG_RESULT($ac_c99_stdlib)\n \n-  # Check for the existence of <wchar.h> functions used if C99 is enabled.\n-  # XXX the wchar.h checks should be rolled into the general C99 bits.\n-  ac_c99_wchar=yes;\n-  AC_MSG_CHECKING([for additional ISO C99 support in <wchar.h>])\n-  AC_TRY_COMPILE([#include <wchar.h>],\n-                 [wcstold(L\"10.0\", NULL);],, [ac_c99_wchar=no])\n-  AC_TRY_COMPILE([#include <wchar.h>],\n-                 [wcstoll(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n-  AC_TRY_COMPILE([#include <wchar.h>],\n-                 [wcstoull(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n-  AC_MSG_RESULT($ac_c99_wchar)\n+  # Check for the existence in <wchar.h> of wcstoull, WEOF, etc.\n+  AC_CHECK_HEADERS(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n+  ac_c99_wchar=no;\n+  if test x\"$ac_has_wchar_h\" = xyes &&\n+     test x\"$ac_has_wctype_h\" = xyes; then\n+    AC_TRY_COMPILE([#include <wchar.h>\n+                    #include <stddef.h>\n+                    wint_t i;\n+\t\t    long l = WEOF;\n+\t\t    long j = WCHAR_MIN;\n+\t\t    long k = WCHAR_MAX;\n+                    namespace test\n+                    {\n+\t\t      using ::btowc;\n+\t\t      using ::fgetwc;\n+\t\t      using ::fgetws;\n+\t\t      using ::fputwc;\n+\t\t      using ::fputws;\n+\t\t      using ::fwide;\n+\t\t      using ::fwprintf; \n+\t\t      using ::fwscanf;\n+\t\t      using ::getwc;\n+\t\t      using ::getwchar;\n+\t\t      using ::mbrlen; \n+\t\t      using ::mbrtowc; \n+\t\t      using ::mbsinit; \n+\t\t      using ::mbsrtowcs; \n+\t\t      using ::putwc;\n+\t\t      using ::putwchar;\n+\t\t      using ::swprintf; \n+\t\t      using ::swscanf; \n+\t\t      using ::ungetwc;\n+\t\t      using ::vfwprintf; \n+\t\t      using ::vswprintf; \n+\t\t      using ::vwprintf; \n+\t\t      using ::wcrtomb; \n+\t\t      using ::wcscat; \n+\t\t      using ::wcschr; \n+\t\t      using ::wcscmp; \n+\t\t      using ::wcscoll; \n+\t\t      using ::wcscpy; \n+\t\t      using ::wcscspn; \n+\t\t      using ::wcsftime; \n+\t\t      using ::wcslen;\n+\t\t      using ::wcsncat; \n+\t\t      using ::wcsncmp; \n+\t\t      using ::wcsncpy; \n+\t\t      using ::wcspbrk;\n+\t\t      using ::wcsrchr; \n+\t\t      using ::wcsrtombs; \n+\t\t      using ::wcsspn; \n+\t\t      using ::wcsstr;\n+\t\t      using ::wcstod; \n+\t\t      using ::wcstok; \n+\t\t      using ::wcstol;\n+\t\t      using ::wcstold;\n+\t\t      using ::wcstoll;\n+\t\t      using ::wcstoul; \n+\t\t      using ::wcstoull;\n+\t\t      using ::wcsxfrm; \n+\t\t      using ::wctob; \n+\t\t      using ::wmemchr;\n+\t\t      using ::wmemcmp;\n+\t\t      using ::wmemcpy;\n+\t\t      using ::wmemmove;\n+\t\t      using ::wmemset;\n+\t\t      using ::wprintf; \n+\t\t      using ::wscanf; \n+\t\t    }\n+\t\t   ],[],[ac_c99_wchar=yes], [ac_c99_wchar=no])\n+\n+    # Checks for wide character functions that may not be present.\n+    # Injection of these is wrapped with guard macros.\n+    # NB: only put functions here, instead of immediately above, if\n+    # absolutely necessary.\n+    AC_TRY_COMPILE([#include <wchar.h>\n+                    namespace test { using ::vfwscanf; } ], [],\n+ \t    \t   [AC_DEFINE(HAVE_VFWSCANF,1,\n+\t\t\t[Defined if vfwscanf exists.])],[])\n+\n+    AC_TRY_COMPILE([#include <wchar.h>\n+                    namespace test { using ::vswscanf; } ], [],\n+ \t    \t   [AC_DEFINE(HAVE_VSWSCANF,1,\n+\t\t\t[Defined if vswscanf exists.])],[])\n+\n+    AC_TRY_COMPILE([#include <wchar.h>\n+                    namespace test { using ::vwscanf; } ], [],\n+ \t    \t   [AC_DEFINE(HAVE_VWSCANF,1,[Defined if vwscanf exists.])],[])\n+\n+    AC_TRY_COMPILE([#include <wchar.h>\n+                    namespace test { using ::wcstof; } ], [],\n+ \t    \t   [AC_DEFINE(HAVE_WCSTOF,1,[Defined if wcstof exists.])],[])\n+\n+    AC_TRY_COMPILE([#include <wctype.h>],\n+                   [ wint_t t; int i = iswblank(t);], \n+ \t    \t   [AC_DEFINE(HAVE_ISWBLANK,1,\n+\t\t\t[Defined if iswblank exists.])],[])\n+\n+    AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n+    AC_MSG_RESULT($ac_c99_wchar)\n+  fi\n \n-  AC_MSG_CHECKING([for enabled ISO C99 support])\n+  # Option parsed, now set things appropriately.\n   if test x\"$ac_c99_math\" = x\"no\" ||\n      test x\"$ac_c99_complex\" = x\"no\" ||\n      test x\"$ac_c99_stdio\" = x\"no\" ||\n      test x\"$ac_c99_stdlib\" = x\"no\" ||\n      test x\"$ac_c99_wchar\" = x\"no\"; then\n     enable_c99=no;\n-  fi;\n-  AC_MSG_RESULT($enable_c99)\n-\n-  # Option parsed, now set things appropriately\n-  if test x\"$enable_c99\" = x\"yes\"; then\n+  else\n     AC_DEFINE(_GLIBCXX_USE_C99)\n   fi\n \n   AC_LANG_RESTORE\n+  fi\t\n+\n+  AC_MSG_CHECKING([for fully enabled ISO C99 support])\n+  AC_MSG_RESULT($enable_c99)\n ])\n \n \n@@ -1296,7 +1237,7 @@ dnl\n dnl Default is new.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n-  AC_MSG_CHECKING([for std::allocator base class to use])\n+  AC_MSG_CHECKING([for std::allocator base class])\n   GLIBCXX_ENABLE(libstdcxx-allocator,auto,[=KIND],\n     [use KIND for target std::allocator base],\n     [permit new|malloc|mt|bitmap|pool|yes|no|auto])\n@@ -1444,21 +1385,6 @@ AC_DEFUN([GLIBCXX_ENABLE_CXX_FLAGS], [dnl\n ])\n \n \n-dnl\n-dnl Check for wide character support.  Has the same effect as the option\n-dnl in gcc's configure, but in a form that autoconf can mess with.\n-dnl\n-dnl --enable-c-mbchar requests all the wchar_t stuff.\n-dnl --disable-c-mbchar doesn't.\n-dnl  +  Usage:  GLIBCXX_ENABLE_C_MBCHAR[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.\n-dnl\n-AC_DEFUN([GLIBCXX_ENABLE_C_MBCHAR], [\n-  GLIBCXX_ENABLE(c-mbchar,$1,,[enable multibyte (wide) characters])\n-  # Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n-])\n-\n-\n dnl\n dnl Check to see if debugging libraries are to be built.\n dnl\n@@ -1555,7 +1481,7 @@ AC_DEFUN([GLIBCXX_ENABLE_HOSTED], [\n \n \n dnl\n-dnl Check for template specializations for the 'long long' type extension.\n+dnl Check for template specializations for the 'long long' type.\n dnl The result determines only whether 'long long' I/O is enabled; things\n dnl like numeric_limits<> specializations are always available.\n dnl\n@@ -1565,10 +1491,32 @@ dnl  +  Usage:  GLIBCXX_ENABLE_LONG_LONG[(DEFAULT)]\n dnl       Where DEFAULT is either `yes' or `no'.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_LONG_LONG], [\n-  GLIBCXX_ENABLE(long-long,$1,,[enables I/O support for 'long long'])\n+  GLIBCXX_ENABLE(long-long,$1,,[enable template specializations for 'long long'])\n   if test $enable_long_long = yes; then\n     AC_DEFINE(_GLIBCXX_USE_LONG_LONG)\n   fi\n+  AC_MSG_CHECKING([for enabled long long specializations])\n+  AC_MSG_RESULT([$enable_long_long])\n+])\n+\n+\n+dnl\n+dnl Check for template specializations for the 'wchar_t' type.\n+dnl\n+dnl --enable-wchar_t defines _GLIBCXX_USE_WCHAR_T\n+dnl --disable-wchar_t leaves _GLIBCXX_USE_WCHAR_T undefined\n+dnl  +  Usage:  GLIBCXX_ENABLE_WCHAR_T[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.\n+dnl\n+dnl Necessary support (probed along with C99 support) must also be present.\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_WCHAR_T], [\n+  GLIBCXX_ENABLE(wchar_t,$1,,[enable template specializations for 'wchar_t'])\n+  if test x\"$ac_c99_wchar\" = x\"yes\" && test x\"$enable_wchar_t\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_WCHAR_T)\n+  fi\n+  AC_MSG_CHECKING([for enabled wchar_t specializations])\n+  AC_MSG_RESULT([$enable_wchar_t])\n ])\n \n "}, {"sha": "01229cc5244d73ede16d0f8e1771eb49b28f0266", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 20, "deletions": 169, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,5 +1,5 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n-// acconfig.h symbols and macros for libstdc++ v3 -*- C++ -*-\n+// Symbols and macros for libstdc++ -*- C++ -*-\n \n // Defines libstdc++ version.\n #undef PACKAGE\n@@ -11,21 +11,25 @@\n #undef HAVE_GETTEXT\n #undef HAVE_STPCPY\n \n-// Include I/O support for 'long long' and 'unsigned long long'.\n+// Define if code specialized for long long should be used.\n #undef _GLIBCXX_USE_LONG_LONG\n \n-// Define if C99 features such as lldiv_t, llabs, lldiv should be exposed.\n+// Define if code specialized for wchar_t should be used.\n+#undef _GLIBCXX_USE_WCHAR_T\n+\n+// Define if C99 functions or macros from <wchar.h>, <math.h>,\n+// <complex.h>, <stdio.h>, and <stdlib.h> can be used or exposed.\n #undef _GLIBCXX_USE_C99\n \n-// Define if C99 math functions (like fpclassify) should be exposed.\n+// Define if C99 functions or macros in <math.h> should be imported in\n+// <cmath> in namespace std.\n #undef _GLIBCXX_USE_C99_MATH\n \n-// Define if C99 complex math functions should be used in std::complex.\n+// Define if C99 functions in <complex.h> should be used in\n+// <complex>. Using compiler builtins for these functions requires\n+// corresponding C99 library functions to be present.\n #undef _GLIBCXX_USE_C99_COMPLEX\n \n-// Define if code specialized for wchar_t should be used.\n-#undef _GLIBCXX_USE_WCHAR_T\n-\n // Define if using setrlimit to set resource limits during 'make check'.\n #undef _GLIBCXX_RES_LIMITS\n \n@@ -194,9 +198,6 @@\n /* Define to 1 if you have the `atanl' function. */\n #undef HAVE_ATANL\n \n-/* Define to 1 if you have the `btowc' function. */\n-#undef HAVE_BTOWC\n-\n /* Define to 1 if you have the `ceilf' function. */\n #undef HAVE_CEILF\n \n@@ -242,12 +243,6 @@\n /* Define to 1 if you have the `fabsl' function. */\n #undef HAVE_FABSL\n \n-/* Define to 1 if you have the `fgetwc' function. */\n-#undef HAVE_FGETWC\n-\n-/* Define to 1 if you have the `fgetws' function. */\n-#undef HAVE_FGETWS\n-\n /* Define to 1 if you have the `finite' function. */\n #undef HAVE_FINITE\n \n@@ -275,12 +270,6 @@\n /* Define to 1 if you have the `fpclass' function. */\n #undef HAVE_FPCLASS\n \n-/* Define to 1 if you have the `fputwc' function. */\n-#undef HAVE_FPUTWC\n-\n-/* Define to 1 if you have the `fputws' function. */\n-#undef HAVE_FPUTWS\n-\n /* Define to 1 if you have the <fp.h> header file. */\n #undef HAVE_FP_H\n \n@@ -290,27 +279,12 @@\n /* Define to 1 if you have the `frexpl' function. */\n #undef HAVE_FREXPL\n \n-/* Define to 1 if you have the `fwide' function. */\n-#undef HAVE_FWIDE\n-\n-/* Define to 1 if you have the `fwprintf' function. */\n-#undef HAVE_FWPRINTF\n-\n-/* Define to 1 if you have the `fwscanf' function. */\n-#undef HAVE_FWSCANF\n-\n /* Define to 1 if you have the <gconv.h> header file. */\n #undef HAVE_GCONV_H\n \n /* Define to 1 if you have the `getpagesize' function. */\n #undef HAVE_GETPAGESIZE\n \n-/* Define to 1 if you have the `getwc' function. */\n-#undef HAVE_GETWC\n-\n-/* Define to 1 if you have the `getwchar' function. */\n-#undef HAVE_GETWCHAR\n-\n /* Define to 1 if you have the `hypot' function. */\n #undef HAVE_HYPOT\n \n@@ -353,7 +327,7 @@\n /* Define to 1 if you have the `isnanl' function. */\n #undef HAVE_ISNANL\n \n-/* Define to 1 if you have the `iswblank' function. */\n+/* Defined if iswblank exists. */\n #undef HAVE_ISWBLANK\n \n /* Define to 1 if you have the `ldexpf' function. */\n@@ -404,18 +378,6 @@\n /* Define to 1 if you have the <machine/param.h> header file. */\n #undef HAVE_MACHINE_PARAM_H\n \n-/* Define to 1 if you have the `mbrlen' function. */\n-#undef HAVE_MBRLEN\n-\n-/* Define to 1 if you have the `mbrtowc' function. */\n-#undef HAVE_MBRTOWC\n-\n-/* Define to 1 if you have the `mbsinit' function. */\n-#undef HAVE_MBSINIT\n-\n-/* Define to 1 if you have the `mbsrtowcs' function. */\n-#undef HAVE_MBSRTOWCS\n-\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n@@ -440,12 +402,6 @@\n /* Define to 1 if you have the `powl' function. */\n #undef HAVE_POWL\n \n-/* Define to 1 if you have the `putwc' function. */\n-#undef HAVE_PUTWC\n-\n-/* Define to 1 if you have the `putwchar' function. */\n-#undef HAVE_PUTWCHAR\n-\n /* Define to 1 if you have the `qfpclass' function. */\n #undef HAVE_QFPCLASS\n \n@@ -500,12 +456,6 @@\n /* Define to 1 if you have the `strtold' function. */\n #undef HAVE_STRTOLD\n \n-/* Define to 1 if you have the `swprintf' function. */\n-#undef HAVE_SWPRINTF\n-\n-/* Define to 1 if you have the `swscanf' function. */\n-#undef HAVE_SWSCANF\n-\n /* Define to 1 if you have the <sys/filio.h> header file. */\n #undef HAVE_SYS_FILIO_H\n \n@@ -554,129 +504,27 @@\n /* Define to 1 if you have the `tanl' function. */\n #undef HAVE_TANL\n \n-/* Define to 1 if you have the `ungetwc' function. */\n-#undef HAVE_UNGETWC\n-\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n-/* Define to 1 if you have the `vfwprintf' function. */\n-#undef HAVE_VFWPRINTF\n-\n-/* Define to 1 if you have the `vfwscanf' function. */\n+/* Defined if vfwscanf exists. */\n #undef HAVE_VFWSCANF\n \n-/* Define to 1 if you have the `vswprintf' function. */\n-#undef HAVE_VSWPRINTF\n-\n-/* Define to 1 if you have the `vswscanf' function. */\n+/* Defined if vswscanf exists. */\n #undef HAVE_VSWSCANF\n \n-/* Define to 1 if you have the `vwprintf' function. */\n-#undef HAVE_VWPRINTF\n-\n-/* Define to 1 if you have the `vwscanf' function. */\n+/* Defined if vwscanf exists. */\n #undef HAVE_VWSCANF\n \n /* Define to 1 if you have the <wchar.h> header file. */\n #undef HAVE_WCHAR_H\n \n-/* Define to 1 if you have the `wcrtomb' function. */\n-#undef HAVE_WCRTOMB\n-\n-/* Define to 1 if you have the `wcscat' function. */\n-#undef HAVE_WCSCAT\n-\n-/* Define to 1 if you have the `wcschr' function. */\n-#undef HAVE_WCSCHR\n-\n-/* Define to 1 if you have the `wcscmp' function. */\n-#undef HAVE_WCSCMP\n-\n-/* Define to 1 if you have the `wcscoll' function. */\n-#undef HAVE_WCSCOLL\n-\n-/* Define to 1 if you have the `wcscpy' function. */\n-#undef HAVE_WCSCPY\n-\n-/* Define to 1 if you have the `wcscspn' function. */\n-#undef HAVE_WCSCSPN\n-\n-/* Define to 1 if you have the `wcsftime' function. */\n-#undef HAVE_WCSFTIME\n-\n-/* Define to 1 if you have the `wcslen' function. */\n-#undef HAVE_WCSLEN\n-\n-/* Define to 1 if you have the `wcsncat' function. */\n-#undef HAVE_WCSNCAT\n-\n-/* Define to 1 if you have the `wcsncmp' function. */\n-#undef HAVE_WCSNCMP\n-\n-/* Define to 1 if you have the `wcsncpy' function. */\n-#undef HAVE_WCSNCPY\n-\n-/* Define to 1 if you have the `wcspbrk' function. */\n-#undef HAVE_WCSPBRK\n-\n-/* Define to 1 if you have the `wcsrchr' function. */\n-#undef HAVE_WCSRCHR\n-\n-/* Define to 1 if you have the `wcsrtombs' function. */\n-#undef HAVE_WCSRTOMBS\n-\n-/* Define to 1 if you have the `wcsspn' function. */\n-#undef HAVE_WCSSPN\n-\n-/* Define to 1 if you have the `wcsstr' function. */\n-#undef HAVE_WCSSTR\n-\n-/* Define to 1 if you have the `wcstod' function. */\n-#undef HAVE_WCSTOD\n-\n-/* Define to 1 if you have the `wcstof' function. */\n+/* Defined if wcstof exists. */\n #undef HAVE_WCSTOF\n \n-/* Define to 1 if you have the `wcstok' function. */\n-#undef HAVE_WCSTOK\n-\n-/* Define to 1 if you have the `wcstol' function. */\n-#undef HAVE_WCSTOL\n-\n-/* Define to 1 if you have the `wcstoul' function. */\n-#undef HAVE_WCSTOUL\n-\n-/* Define to 1 if you have the `wcsxfrm' function. */\n-#undef HAVE_WCSXFRM\n-\n-/* Define to 1 if you have the `wctob' function. */\n-#undef HAVE_WCTOB\n-\n /* Define to 1 if you have the <wctype.h> header file. */\n #undef HAVE_WCTYPE_H\n \n-/* Define to 1 if you have the `wmemchr' function. */\n-#undef HAVE_WMEMCHR\n-\n-/* Define to 1 if you have the `wmemcmp' function. */\n-#undef HAVE_WMEMCMP\n-\n-/* Define to 1 if you have the `wmemcpy' function. */\n-#undef HAVE_WMEMCPY\n-\n-/* Define to 1 if you have the `wmemmove' function. */\n-#undef HAVE_WMEMMOVE\n-\n-/* Define to 1 if you have the `wmemset' function. */\n-#undef HAVE_WMEMSET\n-\n-/* Define to 1 if you have the `wprintf' function. */\n-#undef HAVE_WPRINTF\n-\n-/* Define to 1 if you have the `wscanf' function. */\n-#undef HAVE_WSCANF\n-\n /* Define to 1 if you have the `_acosf' function. */\n #undef HAVE__ACOSF\n \n@@ -898,6 +746,9 @@\n \n /* Define if the compiler is configured for setjmp/longjmp exceptions. */\n #undef _GLIBCXX_SJLJ_EXCEPTIONS\n+\n+/* Define if iconv and related functions exist and are usable. */\n+#undef _GLIBCXX_USE_ICONV\n //\n // Systems that have certain non-standard functions prefixed with an\n // underscore, we'll handle those here. Must come after config.h.in."}, {"sha": "dc049effe47156ec26a4ef44a01af32c0b1115bd", "filename": "libstdc++-v3/config/locale/gnu/c++locale_internal.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,6 +1,6 @@\n // Prototypes for GLIBC thread locale __-prefixed functions -*- C++ -*-\n \n-// Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,27 +29,31 @@\n \n // Written by Jakub Jelinek <jakub@redhat.com>\n \n+#include <bits/c++config.h>\n #include <clocale>\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n                                                   \n-extern \"C\" __typeof(iswctype_l) __iswctype_l;\n extern \"C\" __typeof(nl_langinfo_l) __nl_langinfo_l;\n extern \"C\" __typeof(strcoll_l) __strcoll_l;\n extern \"C\" __typeof(strftime_l) __strftime_l;\n extern \"C\" __typeof(strtod_l) __strtod_l;\n extern \"C\" __typeof(strtof_l) __strtof_l;\n extern \"C\" __typeof(strtold_l) __strtold_l;\n extern \"C\" __typeof(strxfrm_l) __strxfrm_l;\n+extern \"C\" __typeof(newlocale) __newlocale;\n+extern \"C\" __typeof(freelocale) __freelocale;\n+extern \"C\" __typeof(duplocale) __duplocale;\n+extern \"C\" __typeof(uselocale) __uselocale;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+extern \"C\" __typeof(iswctype_l) __iswctype_l;\n extern \"C\" __typeof(towlower_l) __towlower_l;\n extern \"C\" __typeof(towupper_l) __towupper_l;\n extern \"C\" __typeof(wcscoll_l) __wcscoll_l;\n extern \"C\" __typeof(wcsftime_l) __wcsftime_l;\n extern \"C\" __typeof(wcsxfrm_l) __wcsxfrm_l;\n extern \"C\" __typeof(wctype_l) __wctype_l;\n-extern \"C\" __typeof(newlocale) __newlocale;\n-extern \"C\" __typeof(freelocale) __freelocale;\n-extern \"C\" __typeof(duplocale) __duplocale;\n-extern \"C\" __typeof(uselocale) __uselocale;\n+#endif \n \n #endif // GLIBC 2.3 and later"}, {"sha": "c9955062353b24f301e16f51d95805dd562a6d80", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,7 +66,9 @@ namespace std\n   // be avoided.\n   template<typename _Tv>\n     int\n-    __convert_from_v(char* __out, const int __size, const char* __fmt,\n+    __convert_from_v(char* __out, \n+\t\t     const int __size __attribute__ ((__unused__)),\n+\t\t     const char* __fmt,\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t\t     _Tv __v, const __c_locale& __cloc, int __prec)\n     {"}, {"sha": "cae1c106237787dbb9a62f3b4f4f1473500a66a3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 20486, "deletions": 33130, "changes": 53616, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=347669a079a7005bf211e57cba5db24d0b99f2f3"}, {"sha": "f2271c1740666df3bf618171e5125476c0630d82", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -64,39 +64,36 @@ AM_INIT_AUTOMAKE([1.9.1 no-define foreign no-dependencies -Wall -Wno-portability\n # up critical shell variables.\n GLIBCXX_CONFIGURE\n \n-#AC_MSG_NOTICE([====== Starting libtool configuration])\n AC_LIBTOOL_DLOPEN\n AM_PROG_LIBTOOL\n AC_SUBST(enable_shared)\n AC_SUBST(enable_static)\n-#AC_MSG_NOTICE([====== Finished libtool configuration]) ; sleep 10\n \n # Possibly disable most of the library.\n-## XXX Consider skipping unncessary tests altogether in this case, rather\n+## TODO: Consider skipping unncessary tests altogether in this case, rather\n ## than just ignoring the results.  Faster /and/ more correct, win win.\n GLIBCXX_ENABLE_HOSTED\n \n-# Check for support bits and g++ features that don't require linking.\n+# Check for compiler support that doesn't require linking.\n GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n GLIBCXX_ENABLE_PCH($is_hosted)\n \n # Enable all the variable C++ runtime options.  \n-# NB: C_MBCHAR must come early.\n GLIBCXX_ENABLE_CSTDIO\n GLIBCXX_ENABLE_CLOCALE\n GLIBCXX_ENABLE_ALLOCATOR\n GLIBCXX_ENABLE_CHEADERS($c_model)  dnl c_model from configure.host\n-GLIBCXX_ENABLE_C_MBCHAR([yes])\n GLIBCXX_ENABLE_C99([yes])\n GLIBCXX_ENABLE_LONG_LONG([yes])\n-GLIBCXX_ENABLE_THREADS\n+GLIBCXX_ENABLE_WCHAR_T([yes])\n GLIBCXX_ENABLE_CONCEPT_CHECKS([no])\n GLIBCXX_ENABLE_DEBUG_FLAGS([\"-g3 -O0\"])\n GLIBCXX_ENABLE_DEBUG([no])\n GLIBCXX_ENABLE_CXX_FLAGS\n GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n \n # No surprises, no surprises...\n+GLIBCXX_ENABLE_THREADS\n if test $atomicity_dir = cpu/generic ; then\n   AC_MSG_WARN([No native atomic operations are provided for this platform.])\n   if test $target_thread_file = single; then\n@@ -124,7 +121,7 @@ if $GLIBCXX_IS_NATIVE; then\n   GLIBCXX_CHECK_MATH_SUPPORT\n   GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n   GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-  GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+  GLIBCXX_CHECK_ICONV_SUPPORT\n   GLIBCXX_CHECK_STDLIB_SUPPORT\n \n   # For showmanyc_helper()."}, {"sha": "598a5de4558e1856f12592dfe668fc747a3b6c58", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 13, "deletions": 65, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,5 +1,5 @@\n dnl\n-dnl This file contains stuff.\n+dnl This file contains details for non-natives builds.\n dnl\n \n # Base decisions on target environment.\n@@ -21,7 +21,7 @@ case \"${host}\" in\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n \n     # For showmanyc_helper().\n@@ -56,7 +56,7 @@ case \"${host}\" in\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n     GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n     AC_DEFINE(HAVE_WRITEV)\n@@ -71,7 +71,7 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_LC_MESSAGES)\n     AC_DEFINE(HAVE_GETPAGESIZE)\n     AC_DEFINE(HAVE_SETENV)\n@@ -126,7 +126,7 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COPYSIGN)\n     AC_DEFINE(HAVE_COPYSIGNF)\n     AC_DEFINE(HAVE_FREXPF)\n@@ -150,7 +150,7 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n \n     # For LFS.\n     AC_DEFINE(HAVE_INT64_T)\n@@ -237,7 +237,7 @@ case \"${host}\" in\n     AC_CHECK_HEADERS([sys/types.h locale.h float.h])\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     ;;\n   *-netbsd*)\n     AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n@@ -247,7 +247,7 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COPYSIGN)\n     AC_DEFINE(HAVE_COPYSIGNF)\n     AC_DEFINE(HAVE_FINITEF)\n@@ -271,7 +271,7 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n \n     # For showmanyc_helper().\n     AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h)\n@@ -287,7 +287,7 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COSF)\n     AC_DEFINE(HAVE_COSL)\n     AC_DEFINE(HAVE_COSHF)\n@@ -316,71 +316,19 @@ case \"${host}\" in\n          AC_DEFINE(HAVE_POLL)\n          AC_DEFINE(HAVE_S_ISREG)\n          AC_DEFINE(HAVE_LC_MESSAGES)\n-         AC_DEFINE(HAVE_BTOWC)\n-         AC_DEFINE(HAVE_FGETWC)\n-         AC_DEFINE(HAVE_FGETWS)\n          AC_DEFINE(HAVE_FINITE)\n          AC_DEFINE(HAVE_FPCLASS)\n-         AC_DEFINE(HAVE_FPUTWC)\n-         AC_DEFINE(HAVE_FPUTWS)\n-         AC_DEFINE(HAVE_FWIDE)\n-         AC_DEFINE(HAVE_FWPRINTF)\n-         AC_DEFINE(HAVE_FWSCANF)\n          AC_DEFINE(HAVE_GETPAGESIZE)\n-         AC_DEFINE(HAVE_GETWC)\n-         AC_DEFINE(HAVE_GETWCHAR)\n-         AC_DEFINE(HAVE_MBRLEN)\n-         AC_DEFINE(HAVE_MBRTOWC)\n-         AC_DEFINE(HAVE_MBSINIT)\n-         AC_DEFINE(HAVE_MBSRTOWCS)\n          AC_DEFINE(HAVE_NL_LANGINFO)\n-         AC_DEFINE(HAVE_PUTWC)\n-         AC_DEFINE(HAVE_PUTWCHAR)\n-         AC_DEFINE(HAVE_SWPRINTF)\n-         AC_DEFINE(HAVE_SWSCANF)\n-         AC_DEFINE(HAVE_UNGETWC)\n-         AC_DEFINE(HAVE_VFWPRINTF)\n-         AC_DEFINE(HAVE_VSWPRINTF)\n-         AC_DEFINE(HAVE_VWPRINTF)\n-         AC_DEFINE(HAVE_WCRTOMB)\n-         AC_DEFINE(HAVE_WCSCAT)\n-         AC_DEFINE(HAVE_WCSCHR)\n-         AC_DEFINE(HAVE_WCSCMP)\n-         AC_DEFINE(HAVE_WCSCOLL)\n-         AC_DEFINE(HAVE_WCSCPY)\n-         AC_DEFINE(HAVE_WCSCSPN)\n-         AC_DEFINE(HAVE_WCSFTIME)\n-         AC_DEFINE(HAVE_WCSLEN)\n-         AC_DEFINE(HAVE_WCSNCAT)\n-         AC_DEFINE(HAVE_WCSNCMP)\n-         AC_DEFINE(HAVE_WCSNCPY)\n-         AC_DEFINE(HAVE_WCSPBRK)\n-         AC_DEFINE(HAVE_WCSRCHR)\n-         AC_DEFINE(HAVE_WCSRTOMBS)\n-         AC_DEFINE(HAVE_WCSSPN)\n-         AC_DEFINE(HAVE_WCSSTR)\n-         AC_DEFINE(HAVE_WCSTOD)\n-         AC_DEFINE(HAVE_WCSTOK)\n-         AC_DEFINE(HAVE_WCSTOL)\n-         AC_DEFINE(HAVE_WCSTOUL)\n-         AC_DEFINE(HAVE_WCSXFRM)\n-         AC_DEFINE(HAVE_WCTOB)\n-         AC_DEFINE(HAVE_WMEMCHR)\n-         AC_DEFINE(HAVE_WMEMCMP)\n-         AC_DEFINE(HAVE_WMEMCPY)\n-         AC_DEFINE(HAVE_WMEMMOVE)\n-         AC_DEFINE(HAVE_WMEMSET)\n-         AC_DEFINE(HAVE_WPRINTF)\n-         AC_DEFINE(HAVE_WSCANF)\n          AC_DEFINE(HAVE_ICONV)\n          AC_DEFINE(HAVE_ICONV_CLOSE)\n          AC_DEFINE(HAVE_ICONV_OPEN)\n          # Look for the pieces required for wchar_t support in order to\n          # get all the right HAVE_* macros defined.\n-         GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+         GLIBCXX_CHECK_ICONV_SUPPORT\n          # All of the dependencies for wide character support are here, so\n          # turn it on.  This requires some syncronization with the\n-         # GLIBCXX_CHECK_WCHAR_T_SUPPORT in acinclude.m4\n+         # GLIBCXX_CHECK_ICONV_SUPPORT in acinclude.m4\n          AC_DEFINE(_GLIBCXX_USE_WCHAR_T) \n          # Are these tested for even when cross?\n          AC_DEFINE(HAVE_FLOAT_H)\n@@ -435,7 +383,7 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COPYSIGN)\n     AC_DEFINE(HAVE_COPYSIGNF)\n     AC_DEFINE(HAVE_FINITE)"}, {"sha": "80ff219a9740acf1e39d1f303817cb2308bdc2e0", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -234,14 +234,13 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n     </p>\n  </dd>\n \n- <dt><code>--enable-c-mbchar  </code>[default]</dt>\n- <dd><p>Certain template specializations are required for wide\n-        character conversion support.  This is tricky and currently\n-        changing rapidly, and can cause problems on new platforms.\n-        Disabling wide character specializations is useful for initial\n-        porting steps, but builds only a subset of what is required by\n-        ISO.  By default, this option is on.  This option can change\n-        the library ABI.\n+ <dt><code>--enable-wchar_t  </code>[default]</dt>\n+ <dd><p>Template specializations for the &quot;wchar_t&quot; type are\n+        required for wide character conversion support.  Disabling\n+        wide character specializations may be expedient for initial\n+        porting efforts, but builds only a subset of what is required by\n+        ISO, and is not recommended.  By default, this option is on.\n+        This option can change the library ABI.\n      </p>\n  </dd>\n "}, {"sha": "57bbb3ddb97270e3ab7cf1c47001b360671124f2", "filename": "libstdc++-v3/include/c_std/std_cstdio.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cstdio.h?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -154,15 +154,16 @@ namespace __gnu_cxx\n {\n #if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n   extern \"C\" int\n-    (snprintf)(char * restrict, size_t, const char * restrict, ...);\n+  (snprintf)(char * restrict, size_t, const char * restrict, ...);\n   extern \"C\" int\n-    (vfscanf)(FILE * restrict, const char * restrict, __gnuc_va_list);\n+  (vfscanf)(FILE * restrict, const char * restrict, __gnuc_va_list);\n   extern \"C\" int (vscanf)(const char * restrict, __gnuc_va_list);\n   extern \"C\" int\n-    (vsnprintf)(char * restrict, size_t, const char * restrict, __gnuc_va_list);\n+  (vsnprintf)(char * restrict, size_t, const char * restrict, __gnuc_va_list);\n   extern \"C\" int\n-    (vsscanf)(const char * restrict, const char * restrict, __gnuc_va_list);\n+  (vsscanf)(const char * restrict, const char * restrict, __gnuc_va_list);\n #endif\n+\n #if !_GLIBCXX_USE_C99_DYNAMIC\n   using ::snprintf;\n   using ::vfscanf;"}, {"sha": "86d0dfdab15628881bbcf15d736361d13573385d", "filename": "libstdc++-v3/include/c_std/std_cwctype.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cwctype.h?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -59,19 +59,18 @@\n # undef iswblank\n #endif\n #undef iswcntrl\n+#undef iswctype\n #undef iswdigit\n #undef iswgraph\n #undef iswlower\n #undef iswprint\n-#undef iswprint\n #undef iswpunct\n #undef iswspace\n #undef iswupper\n #undef iswxdigit\n-#undef iswctype\n+#undef towctrans\n #undef towlower\n #undef towupper\n-#undef towctrans\n #undef wctrans\n #undef wctype\n \n@@ -89,19 +88,18 @@ namespace std\n   using ::iswblank;\n #endif\n   using ::iswcntrl;\n+  using ::iswctype;\n   using ::iswdigit;\n   using ::iswgraph;\n   using ::iswlower;\n   using ::iswprint;\n-  using ::iswprint;\n   using ::iswpunct;\n   using ::iswspace;\n   using ::iswupper;\n   using ::iswxdigit;\n-  using ::iswctype;\n+  using ::towctrans;\n   using ::towlower;\n   using ::towupper;\n-  using ::towctrans;\n   using ::wctrans;\n   using ::wctype;\n }"}, {"sha": "3375adf1f4720fd8082e2183852fed238057d795", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347669a079a7005bf211e57cba5db24d0b99f2f3/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=347669a079a7005bf211e57cba5db24d0b99f2f3", "patch": "@@ -1,6 +1,6 @@\n // Debugging mode support code -*- C++ -*-\n \n-// Copyright (C) 2003, 2004\n+// Copyright (C) 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -507,7 +507,7 @@ namespace __gnu_debug\n   template<typename _Tp>\n     void\n     _Error_formatter::_M_format_word(char* __buf, \n-\t\t\t\t     int __n __attribute__((__unused__)), \n+\t\t\t\t     int __n __attribute__ ((__unused__)), \n \t\t\t\t     const char* __fmt, _Tp __s) const\n     {\n #ifdef _GLIBCXX_USE_C99\n@@ -653,21 +653,20 @@ namespace __gnu_debug\n   // Instantiations.\n   template\n     void\n-    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n-\t\t\t\t     const void* __s) const;\n+    _Error_formatter::_M_format_word(char*, int, const char*, \n+\t\t\t\t     const void*) const;\n \n   template\n     void\n-    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n-\t\t\t\t     long __s) const;\n+    _Error_formatter::_M_format_word(char*, int, const char*, long) const;\n \n   template\n     void\n-    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n-\t\t\t\t     std::size_t __s) const;\n+    _Error_formatter::_M_format_word(char*, int, const char*, \n+\t\t\t\t     std::size_t) const;\n \n   template\n     void\n-    _Error_formatter::_M_format_word(char* __buf, int __n, const char* __fmt, \n-\t\t\t\t     const char* __s) const;\n+    _Error_formatter::_M_format_word(char*, int, const char*, \n+\t\t\t\t     const char*) const;\n } // namespace __gnu_debug"}]}