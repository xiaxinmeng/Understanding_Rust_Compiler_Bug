{"sha": "7a3b13d103dded207b67281ead59e3cf8fe01aaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzYjEzZDEwM2RkZWQyMDdiNjcyODFlYWQ1OWUzY2Y4ZmUwMWFhYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-09T20:31:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-09T20:31:49Z"}, "message": "(rtx_equal_for_tmemref_p): Commutative operations are identical if the\noperands match in the opposite order.\n\nFrom-SVN: r6732", "tree": {"sha": "d26c5d84cd26976f5fd6cdda3bd526c8cc78c831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d26c5d84cd26976f5fd6cdda3bd526c8cc78c831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3b13d103dded207b67281ead59e3cf8fe01aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3b13d103dded207b67281ead59e3cf8fe01aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3b13d103dded207b67281ead59e3cf8fe01aaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3b13d103dded207b67281ead59e3cf8fe01aaa/comments", "author": null, "committer": null, "parents": [{"sha": "413c72c2897f295e25c0bb95ba5998f5d6d29b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413c72c2897f295e25c0bb95ba5998f5d6d29b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413c72c2897f295e25c0bb95ba5998f5d6d29b57"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "56ad42ce1d0dfd31b0cee80292ada31a11942c5f", "filename": "gcc/sched.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3b13d103dded207b67281ead59e3cf8fe01aaa/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3b13d103dded207b67281ead59e3cf8fe01aaa/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=7a3b13d103dded207b67281ead59e3cf8fe01aaa", "patch": "@@ -1,5 +1,5 @@\n /* Instruction scheduling pass.\n-   Copyright (C) 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n    Enhanced by, and currently maintained by, Jim Wilson (wilson@cygnus.com)\n \n@@ -481,6 +481,19 @@ rtx_equal_for_memref_p (x, y)\n   if (code == SYMBOL_REF)\n     return XSTR (x, 0) == XSTR (y, 0);\n \n+  /* For commutative operations, the RTX match if the operand match in any\n+     order.  Also handle the simple binary and unary cases without a loop.  */\n+  if (code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')\n+    return ((rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0))\n+\t     && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)))\n+\t    || (rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 1))\n+\t\t&& rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 0))));\n+  else if (GET_RTX_CLASS (code) == '<' || GET_RTX_CLASS (code) == '2')\n+    return (rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0))\n+\t    && rtx_equal_for_memref_p (XEXP (x, 1), XEXP (y, 1)));\n+  else if (GET_RTX_CLASS (code) == '1')\n+    return rtx_equal_for_memref_p (XEXP (x, 0), XEXP (y, 0));\n+\n   /* Compare the elements.  If any pair of corresponding elements\n      fail to match, return 0 for the whole things.  */\n "}]}