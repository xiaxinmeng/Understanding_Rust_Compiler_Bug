{"sha": "e53bfc4bb645c747242a8d5d51960acc7b509946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzYmZjNGJiNjQ1Yzc0NzI0MmE4ZDVkNTE5NjBhY2M3YjUwOTk0Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-02-21T18:10:37Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-02-21T18:10:37Z"}, "message": "* pa.md (load high pattern): Rework constraints to reduce %r1 spillage.\n\nFrom-SVN: r3510", "tree": {"sha": "e0f68e09a5d658d0a96313dadc7a2f7ded08e219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0f68e09a5d658d0a96313dadc7a2f7ded08e219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e53bfc4bb645c747242a8d5d51960acc7b509946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53bfc4bb645c747242a8d5d51960acc7b509946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53bfc4bb645c747242a8d5d51960acc7b509946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53bfc4bb645c747242a8d5d51960acc7b509946/comments", "author": null, "committer": null, "parents": [{"sha": "99efce9d6b241ddc77487a1a499e882c5e4e3fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99efce9d6b241ddc77487a1a499e882c5e4e3fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99efce9d6b241ddc77487a1a499e882c5e4e3fce"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "39d783442867b29bebecd9d4a03fe4963d717870", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53bfc4bb645c747242a8d5d51960acc7b509946/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53bfc4bb645c747242a8d5d51960acc7b509946/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=e53bfc4bb645c747242a8d5d51960acc7b509946", "patch": "@@ -934,8 +934,20 @@\n \n ;; For all symbolic operands *except* function addresses and read-only\n ;; operands (which live in TEXT space and do not require relocation).  \n+;;\n+;; The constraints are a little strange.  \n+;; The basic idea is to prefer %r1 as much as possible for register \n+;; allocation (hence we do not allow regclass to know about the general\n+;; register case (via *r).\n+;; We also want to avoid spilling %r1 as that will cause every use\n+;; of %r1 to be reloaded, so we make the %r1 case very expensive\n+;; as far as reload is concerned (via !a).\n+;;\n+;; The real solution is to not spill all pseudos allocated to %r1\n+;; when %r1 is needed as a spill register, but that is considerably\n+;; more difficult than coercing decent behavior via constraints.\n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a,!*r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=!a,*r\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"! TARGET_KERNEL && symbolic_operand(operands[1], Pmode)\n    && ! function_label_operand (operands[1])"}]}