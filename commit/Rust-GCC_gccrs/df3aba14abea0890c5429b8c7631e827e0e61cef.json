{"sha": "df3aba14abea0890c5429b8c7631e827e0e61cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzYWJhMTRhYmVhMDg5MGM1NDI5YjhjNzYzMWU4MjdlMGU2MWNlZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-12-27T23:19:15Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-12-27T23:19:15Z"}, "message": "predicates.md (const_0_to_12_operand): Rename predicate and change test from 0..11 to 0..12 to match the semantics of...\n\n[gcc]\n2016-12-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/predicates.md (const_0_to_12_operand): Rename\n\tpredicate and change test from 0..11 to 0..12 to match the\n\tsemantics of the word extract/insert instructions.  Change all\n\tcallers.\n\t(const_0_to_11_operand): Likewise.\n\t* config/rs6000/rs6000.c (altivec_expand_builtin): Likewise.\n\t* config/rs6000/vsx.md (vextract4b): Likewise.\n\t(vextract4b_internal): Likewise.\n\t(vinsert4b): Likewise.\n\t(vinsert4b_internal): Likewise.\n\t(vinsert4b_di): Likewise.\n\t(vinsert4b_di_internal): Likewise.\n\t* config/rs6000/rs6000.md (zero_extendsi<mode>2): Fix offset used\n\tin xxextractuw to zero extend the word in the vector registers.\n\t(lfiwzx): Likewise.\n\n[gcc/testsuite]\n2016-12-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-vinsert4b-2.c: Update test to test for 13\n\tbeing out of bounds instead of 12.\n\nFrom-SVN: r243948", "tree": {"sha": "126000d460d63ca5b7f997a560a4cbd5d8295e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126000d460d63ca5b7f997a560a4cbd5d8295e2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df3aba14abea0890c5429b8c7631e827e0e61cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3aba14abea0890c5429b8c7631e827e0e61cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df3aba14abea0890c5429b8c7631e827e0e61cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3aba14abea0890c5429b8c7631e827e0e61cef/comments", "author": null, "committer": null, "parents": [{"sha": "41a38208bc0acadf94bd5c6684065d6dc61d951a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a38208bc0acadf94bd5c6684065d6dc61d951a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a38208bc0acadf94bd5c6684065d6dc61d951a"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "f900ba6f0b1b0c10cf004c23d290c12a9e8a4196", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df3aba14abea0890c5429b8c7631e827e0e61cef", "patch": "@@ -1,3 +1,21 @@\n+2016-12-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/predicates.md (const_0_to_12_operand): Rename\n+\tpredicate and change test from 0..11 to 0..12 to match the\n+\tsemantics of the word extract/insert instructions.  Change all\n+\tcallers.\n+\t(const_0_to_11_operand): Likewise.\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Likewise.\n+\t* config/rs6000/vsx.md (vextract4b): Likewise.\n+\t(vextract4b_internal): Likewise.\n+\t(vinsert4b): Likewise.\n+\t(vinsert4b_internal): Likewise.\n+\t(vinsert4b_di): Likewise.\n+\t(vinsert4b_di_internal): Likewise.\n+\t* config/rs6000/rs6000.md (zero_extendsi<mode>2): Fix offset used\n+\tin xxextractuw to zero extend the word in the vector registers.\n+\t(lfiwzx): Likewise.\n+\n 2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_secondary_reload): Require QImode"}, {"sha": "8caf710adc042d587d6a5b4cedb95f617614d3ff", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=df3aba14abea0890c5429b8c7631e827e0e61cef", "patch": "@@ -211,9 +211,9 @@\n        (match_test \"IN_RANGE (INTVAL (op), 0, 7)\")))\n \n ;; Match op = 0..11\n-(define_predicate \"const_0_to_11_operand\"\n+(define_predicate \"const_0_to_12_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"IN_RANGE (INTVAL (op), 0, 11)\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 12)\")))\n \n ;; Match op = 0..15\n (define_predicate \"const_0_to_15_operand\""}, {"sha": "e100a010c591c12db51382e2f1a0b9a697c074e0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=df3aba14abea0890c5429b8c7631e827e0e61cef", "patch": "@@ -15839,9 +15839,9 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       if (arg1 == error_mark_node)\n \treturn expand_call (exp, target, false);\n \n-      if (TREE_CODE (arg1) != INTEGER_CST || TREE_INT_CST_LOW (arg1) > 11)\n+      if (TREE_CODE (arg1) != INTEGER_CST || TREE_INT_CST_LOW (arg1) > 12)\n \t{\n-\t  error (\"second argument to vec_vextract4b must 0..11\");\n+\t  error (\"second argument to vec_vextract4b must 0..12\");\n \t  return expand_call (exp, target, false);\n \t}\n       break;\n@@ -15856,9 +15856,9 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       if (arg2 == error_mark_node)\n \treturn expand_call (exp, target, false);\n \n-      if (TREE_CODE (arg2) != INTEGER_CST || TREE_INT_CST_LOW (arg2) > 11)\n+      if (TREE_CODE (arg2) != INTEGER_CST || TREE_INT_CST_LOW (arg2) > 12)\n \t{\n-\t  error (\"third argument to vec_vinsert4b must 0..11\");\n+\t  error (\"third argument to vec_vinsert4b must 0..12\");\n \t  return expand_call (exp, target, false);\n \t}\n       break;"}, {"sha": "b9f75f91f06dad2881124971c83f2deaec1d2479", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=df3aba14abea0890c5429b8c7631e827e0e61cef", "patch": "@@ -855,7 +855,7 @@\n    lxsiwzx %x0,%y1\n    mtvsrwz %x0,%1\n    mfvsrwz %0,%x1\n-   xxextractuw %x0,%x1,1\"\n+   xxextractuw %x0,%x1,4\"\n   [(set_attr \"type\" \"load,shift,fpload,fpload,mffgpr,mftgpr,vecexts\")])\n \n (define_insn_and_split \"*zero_extendsi<mode>2_dot\"\n@@ -5131,7 +5131,7 @@\n    lfiwzx %0,%y1\n    lxsiwzx %x0,%y1\n    mtvsrwz %x0,%1\n-   xxextractuw %x0,%x1,1\"\n+   xxextractuw %x0,%x1,4\"\n   [(set_attr \"type\" \"fpload,fpload,mftgpr,vecexts\")])\n \n (define_insn_and_split \"floatunssi<mode>2_lfiwzx\""}, {"sha": "0b1a5a3c5a4a8830d9a1486671943f840fe5c057", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=df3aba14abea0890c5429b8c7631e827e0e61cef", "patch": "@@ -3813,7 +3813,7 @@\n (define_expand \"vextract4b\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\")\n \t(unspec:DI [(match_operand:V16QI 1 \"vsx_register_operand\")\n-\t\t    (match_operand:QI 2 \"const_0_to_11_operand\")]\n+\t\t    (match_operand:QI 2 \"const_0_to_12_operand\")]\n \t\t   UNSPEC_XXEXTRACTUW))]\n   \"TARGET_P9_VECTOR\"\n {\n@@ -3824,7 +3824,7 @@\n (define_insn_and_split \"*vextract4b_internal\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=wj,r\")\n \t(unspec:DI [(match_operand:V16QI 1 \"vsx_register_operand\" \"wa,v\")\n-\t\t    (match_operand:QI 2 \"const_0_to_11_operand\" \"n,n\")]\n+\t\t    (match_operand:QI 2 \"const_0_to_12_operand\" \"n,n\")]\n \t\t   UNSPEC_XXEXTRACTUW))]\n   \"TARGET_P9_VECTOR\"\n   \"@\n@@ -3852,7 +3852,7 @@\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\")\n \t(unspec:V16QI [(match_operand:V4SI 1 \"vsx_register_operand\")\n \t\t       (match_operand:V16QI 2 \"vsx_register_operand\")\n-\t\t       (match_operand:QI 3 \"const_0_to_11_operand\")]\n+\t\t       (match_operand:QI 3 \"const_0_to_12_operand\")]\n \t\t   UNSPEC_XXINSERTW))]\n   \"TARGET_P9_VECTOR\"\n {\n@@ -3870,7 +3870,7 @@\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:V16QI [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")\n \t\t       (match_operand:V16QI 2 \"vsx_register_operand\" \"0\")\n-\t\t       (match_operand:QI 3 \"const_0_to_11_operand\" \"n\")]\n+\t\t       (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n \t\t   UNSPEC_XXINSERTW))]\n   \"TARGET_P9_VECTOR\"\n   \"xxinsertw %x0,%x1,%3\"\n@@ -3880,7 +3880,7 @@\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\")\n \t(unspec:V16QI [(match_operand:DI 1 \"vsx_register_operand\")\n \t\t       (match_operand:V16QI 2 \"vsx_register_operand\")\n-\t\t       (match_operand:QI 3 \"const_0_to_11_operand\")]\n+\t\t       (match_operand:QI 3 \"const_0_to_12_operand\")]\n \t\t   UNSPEC_XXINSERTW))]\n   \"TARGET_P9_VECTOR\"\n {\n@@ -3892,7 +3892,7 @@\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:V16QI [(match_operand:DI 1 \"vsx_register_operand\" \"wj\")\n \t\t       (match_operand:V16QI 2 \"vsx_register_operand\" \"0\")\n-\t\t       (match_operand:QI 3 \"const_0_to_11_operand\" \"n\")]\n+\t\t       (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n \t\t   UNSPEC_XXINSERTW))]\n   \"TARGET_P9_VECTOR\"\n   \"xxinsertw %x0,%x1,%3\""}, {"sha": "2f2db1ac9a142f91bbc0e558a408431208e4c308", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df3aba14abea0890c5429b8c7631e827e0e61cef", "patch": "@@ -1,3 +1,8 @@\n+2016-12-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-vinsert4b-2.c: Update test to test for 13\n+\tbeing out of bounds instead of 12.\n+\n 2016-12-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/78904"}, {"sha": "3b5872ebec6f52dd6ce9e5c510ed4b2dddf81a8f", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vinsert4b-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3aba14abea0890c5429b8c7631e827e0e61cef/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vinsert4b-2.c?ref=df3aba14abea0890c5429b8c7631e827e0e61cef", "patch": "@@ -8,7 +8,7 @@\n vector signed char\n ins_v4si (vector int vi, vector signed char vc)\n {\n-  return vec_vinsert4b (vi, vc, 12);\t/* { dg-error \"vec_vinsert4b\" } */\n+  return vec_vinsert4b (vi, vc, 13);\t/* { dg-error \"vec_vinsert4b\" } */\n }\n \n vector unsigned char\n@@ -20,7 +20,7 @@ ins_di (long di, vector unsigned char vc, long n)\n long\n vext1 (vector signed char vc)\n {\n-  return vec_vextract4b (vc, 12);\t/* { dg-error \"vec_vextract4b\" } */\n+  return vec_vextract4b (vc, 13);\t/* { dg-error \"vec_vextract4b\" } */\n }\n \n long"}]}