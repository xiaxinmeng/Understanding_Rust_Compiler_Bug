{"sha": "02817027ca02f32cfd4fbaa71edf879a024089a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI4MTcwMjdjYTAyZjMyY2ZkNGZiYWE3MWVkZjg3OWEwMjQwODlhMw==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-12-20T01:39:46Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2019-12-20T01:39:46Z"}, "message": "OpenACC 2.6 deep copy: Fortran execution tests\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/deep-copy-1.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-2.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-3.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-4.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-5.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-6.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-7.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-8.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/derived-type-1.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/derivedtype-1.f95: New test.\n\t* testsuite/libgomp.oacc-fortran/derivedtype-2.f95: New test.\n\t* testsuite/libgomp.oacc-fortran/multidim-slice.f95: New test.\n\t* testsuite/libgomp.oacc-fortran/update-2.f90: New test.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r279630", "tree": {"sha": "6d056e85af0da96be75bd51a69b0c23c8457c169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d056e85af0da96be75bd51a69b0c23c8457c169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02817027ca02f32cfd4fbaa71edf879a024089a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02817027ca02f32cfd4fbaa71edf879a024089a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02817027ca02f32cfd4fbaa71edf879a024089a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02817027ca02f32cfd4fbaa71edf879a024089a3/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2eb021fd2bc2ef408180acf27c33a61e3737cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2eb021fd2bc2ef408180acf27c33a61e3737cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2eb021fd2bc2ef408180acf27c33a61e3737cee"}], "stats": {"total": 849, "additions": 849, "deletions": 0}, "files": [{"sha": "b4aa47db2804de407a6e5ffe62de6314d9ac3fd7", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -1,3 +1,20 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-2.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-3.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-4.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-5.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-7.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-8.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/derived-type-1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/derivedtype-1.f95: New test.\n+\t* testsuite/libgomp.oacc-fortran/derivedtype-2.f95: New test.\n+\t* testsuite/libgomp.oacc-fortran/multidim-slice.f95: New test.\n+\t* testsuite/libgomp.oacc-fortran/update-2.f90: New test.\n+\n 2019-12-19  Julian Brown  <julian@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/deep-copy-1.c: New test."}, {"sha": "c4cea11b571b6ee33fb931096e4e10e1e51909f4", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-1.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-1.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do run }\n+\n+! Test of attach/detach with \"acc data\".\n+\n+program dtype\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+!$acc data copy(var)\n+!$acc data copy(var%a)\n+\n+!$acc parallel loop\n+  do i = 1,n\n+    var%a(i) = i\n+  end do\n+!$acc end parallel loop\n+\n+!$acc end data\n+!$acc end data\n+\n+  do i = 1,n\n+    if (i .ne. var%a(i)) stop 1\n+  end do\n+\n+  deallocate(var%a)\n+\n+end program dtype"}, {"sha": "35936617b87bb5df2cc7be367cd1b3e2e3f336c9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-2.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-2.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+\n+! Test of attach/detach with \"acc data\", two clauses at once.\n+\n+program dtype\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+!$acc data copy(var) copy(var%a)\n+\n+!$acc parallel loop\n+  do i = 1,n\n+    var%a(i) = i\n+  end do\n+!$acc end parallel loop\n+\n+!$acc end data\n+\n+  do i = 1,n\n+    if (i .ne. var%a(i)) stop 1\n+  end do\n+\n+  deallocate(var%a)\n+\n+end program dtype"}, {"sha": "667d944fecb5bb088601b211ff61ec37eb6b7089", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-3.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-3.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+\n+! Test of attach/detach with \"acc parallel\".\n+\n+program dtype\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+    integer, allocatable :: b(:)\n+  end type mytype\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+  allocate(var%b(1:n))\n+\n+!$acc parallel loop copy(var) copy(var%a(1:n)) copy(var%b(1:n))\n+  do i = 1,n\n+    var%a(i) = i\n+    var%b(i) = i\n+  end do\n+!$acc end parallel loop\n+\n+  do i = 1,n\n+    if (i .ne. var%a(i)) stop 1\n+    if (i .ne. var%b(i)) stop 2\n+  end do\n+\n+  deallocate(var%a)\n+  deallocate(var%b)\n+\n+end program dtype"}, {"sha": "6949e120c9fa60875e492ba71965deb476c51230", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-4.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-4.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+\n+! Test of attach/detach with \"acc enter/exit data\".\n+\n+program dtype\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+    integer, allocatable :: b(:)\n+  end type mytype\n+  integer, allocatable :: r(:)\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+  allocate(var%b(1:n))\n+  allocate(r(1:n))\n+\n+!$acc enter data copyin(var)\n+\n+!$acc enter data copyin(var%a, var%b, r)\n+\n+!$acc parallel loop\n+  do i = 1,n\n+    var%a(i) = i\n+    var%b(i) = i * 2\n+    r(i) = i * 3\n+  end do\n+!$acc end parallel loop\n+\n+!$acc exit data copyout(var%a)\n+!$acc exit data copyout(var%b)\n+!$acc exit data copyout(r)\n+\n+  do i = 1,n\n+    if (i .ne. var%a(i)) stop 1\n+    if (i * 2 .ne. var%b(i)) stop 2\n+    if (i * 3 .ne. r(i)) stop 3\n+  end do\n+\n+!$acc exit data delete(var)\n+\n+  deallocate(var%a)\n+  deallocate(var%b)\n+  deallocate(r)\n+\n+end program dtype"}, {"sha": "6843cf1d0fa1cabedb3f95c2e0d4153928fb3de0", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-5.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-5.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+\n+! Test of attach/detach, \"enter data\" inside \"data\", and subarray.\n+\n+program dtype\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+    integer, allocatable :: b(:)\n+  end type mytype\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+  allocate(var%b(1:n))\n+\n+!$acc data copy(var)\n+\n+  do i = 1, n\n+    var%a(i) = 0\n+    var%b(i) = 0\n+  end do\n+\n+!$acc enter data copyin(var%a(5:n - 5), var%b(5:n - 5))\n+\n+!$acc parallel loop\n+  do i = 5,n - 5\n+    var%a(i) = i\n+    var%b(i) = i * 2\n+  end do\n+!$acc end parallel loop\n+\n+!$acc exit data copyout(var%a(5:n - 5), var%b(5:n - 5))\n+\n+!$acc end data\n+\n+  do i = 1,4\n+    if (var%a(i) .ne. 0) stop 1\n+    if (var%b(i) .ne. 0) stop 2\n+  end do\n+\n+  do i = 5,n - 5\n+    if (i .ne. var%a(i)) stop 3\n+    if (i * 2 .ne. var%b(i)) stop 4\n+  end do\n+\n+  do i = n - 4,n\n+    if (var%a(i) .ne. 0) stop 5\n+    if (var%b(i) .ne. 0) stop 6\n+  end do\n+\n+  deallocate(var%a)\n+  deallocate(var%b)\n+\n+end program dtype"}, {"sha": "12910d0d655416af60fb9ac5e44c931fa859a6e2", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-6.f90", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-6.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,61 @@\n+! { dg-do run }\n+\n+! Test of attachment counters and finalize.\n+\n+program dtype\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+    integer, allocatable :: b(:)\n+  end type mytype\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+  allocate(var%b(1:n))\n+\n+!$acc data copy(var)\n+\n+  do i = 1, n\n+    var%a(i) = 0\n+    var%b(i) = 0\n+  end do\n+\n+!$acc enter data copyin(var%a(5:n - 5), var%b(5:n - 5))\n+\n+  do i = 1,20\n+    !$acc enter data attach(var%a)\n+  end do\n+\n+!$acc parallel loop\n+  do i = 5,n - 5\n+    var%a(i) = i\n+    var%b(i) = i * 2\n+  end do\n+!$acc end parallel loop\n+\n+!$acc exit data copyout(var%a(5:n - 5), var%b(5:n - 5)) finalize\n+\n+!$acc end data\n+\n+  do i = 1,4\n+    if (var%a(i) .ne. 0) stop 1\n+    if (var%b(i) .ne. 0) stop 2\n+  end do\n+\n+  do i = 5,n - 5\n+    if (i .ne. var%a(i)) stop 3\n+    if (i * 2 .ne. var%b(i)) stop 4\n+  end do\n+\n+  do i = n - 4,n\n+    if (var%a(i) .ne. 0) stop 5\n+    if (var%b(i) .ne. 0) stop 6\n+  end do\n+\n+  deallocate(var%a)\n+  deallocate(var%b)\n+\n+end program dtype"}, {"sha": "ab44f0a73b97024b2be65337d5ee8422513d7a95", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-7.f90", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-7.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,89 @@\n+! { dg-do run }\n+\n+! Test of attach/detach with scalar elements and nested derived types.\n+\n+program dtype\n+  implicit none\n+  integer, parameter :: n = 512\n+  type subtype\n+    integer :: g, h\n+    integer, allocatable :: q(:)\n+  end type subtype\n+  type mytype\n+    integer, allocatable :: a(:)\n+    integer, allocatable :: c, d\n+    integer, allocatable :: b(:)\n+    integer :: f\n+    type(subtype) :: s\n+  end type mytype\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+  allocate(var%b(1:n))\n+  allocate(var%c)\n+  allocate(var%d)\n+  allocate(var%s%q(1:n))\n+\n+  var%c = 16\n+  var%d = 20\n+  var%f = 7\n+  var%s%g = 21\n+  var%s%h = 38\n+\n+!$acc enter data copyin(var)\n+\n+  do i = 1, n\n+    var%a(i) = 0\n+    var%b(i) = 0\n+    var%s%q(i) = 0\n+  end do\n+\n+!$acc data copy(var%a(5:n - 5), var%b(5:n - 5), var%c, var%d) &\n+!$acc & copy(var%s%q)\n+\n+!$acc parallel loop default(none) present(var)\n+  do i = 5,n - 5\n+    var%a(i) = i\n+    var%b(i) = i * 2\n+    var%s%q(i) = i * 3\n+    var%s%g = 100\n+    var%s%h = 101\n+  end do\n+!$acc end parallel loop\n+\n+!$acc end data\n+\n+!$acc exit data copyout(var)\n+\n+  do i = 1,4\n+    if (var%a(i) .ne. 0) stop 1\n+    if (var%b(i) .ne. 0) stop 2\n+    if (var%s%q(i) .ne. 0) stop 3\n+  end do\n+\n+  do i = 5,n - 5\n+    if (i .ne. var%a(i)) stop 4\n+    if (i * 2 .ne. var%b(i)) stop 5\n+    if (i * 3 .ne. var%s%q(i)) stop 6\n+  end do\n+\n+  do i = n - 4,n\n+    if (var%a(i) .ne. 0) stop 7\n+    if (var%b(i) .ne. 0) stop 8\n+    if (var%s%q(i) .ne. 0) stop 9\n+  end do\n+\n+  if (var%c .ne. 16) stop 10\n+  if (var%d .ne. 20) stop 11\n+  if (var%s%g .ne. 100 .or. var%s%h .ne. 101) stop 12\n+  if (var%f .ne. 7) stop 13\n+\n+  deallocate(var%a)\n+  deallocate(var%b)\n+  deallocate(var%c)\n+  deallocate(var%d)\n+  deallocate(var%s%q)\n+\n+end program dtype"}, {"sha": "d142763ae59411517c09db3b13de7e881646be93", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-8.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-8.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+\n+! Test of explicit attach/detach clauses and attachment counters. There are no\n+! acc_attach/acc_detach API routines in Fortran.\n+\n+program dtype\n+  use openacc\n+  implicit none\n+  integer, parameter :: n = 512\n+  type mytype\n+    integer, allocatable :: a(:)\n+  end type mytype\n+  integer i\n+\n+  type(mytype) :: var\n+\n+  allocate(var%a(1:n))\n+\n+  call acc_copyin(var)\n+  call acc_copyin(var%a)\n+\n+  !$acc enter data attach(var%a)\n+\n+!$acc parallel loop attach(var%a)\n+  do i = 1,n\n+    var%a(i) = i\n+  end do\n+!$acc end parallel loop\n+\n+  !$acc exit data detach(var%a)\n+\n+  call acc_copyout(var%a)\n+  call acc_copyout(var)\n+\n+  do i = 1,n\n+    if (i .ne. var%a(i)) stop 1\n+  end do\n+\n+  deallocate(var%a)\n+\n+end program dtype"}, {"sha": "eb7812d541edb35c830ba87fb1bd48566bdd6988", "filename": "libgomp/testsuite/libgomp.oacc-fortran/derived-type-1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderived-type-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderived-type-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderived-type-1.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,28 @@\n+! Test derived types with subarrays\n+\n+! { dg-do run }\n+\n+  implicit none\n+  type dtype\n+     integer :: a, b, c\n+  end type dtype\n+  integer, parameter :: n = 100\n+  integer i\n+  type (dtype), dimension(n) :: d\n+\n+  !$acc data copy(d(1:n))\n+  !$acc parallel loop\n+  do i = 1, n\n+     d(i)%a = i\n+     d(i)%b = i-1\n+     d(i)%c = i+1\n+  end do\n+  !$acc end data\n+\n+  do i = 1, n\n+     if (d(i)%a /= i) stop 1\n+     if (d(i)%b /= i-1) stop 2\n+     if (d(i)%c /= i+1) stop 3\n+  end do\n+end program\n+"}, {"sha": "75ce48ddca289b51489e47eeea24964eb4275612", "filename": "libgomp/testsuite/libgomp.oacc-fortran/derivedtype-1.f95", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtype-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtype-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtype-1.f95?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+\n+program main\n+  implicit none\n+\n+  type mytype\n+    integer :: a, b, c\n+  end type mytype\n+\n+  type(mytype) :: myvar\n+  integer :: i\n+\n+  myvar%a = 0\n+  myvar%b = 0\n+  myvar%c = 0\n+\n+!$acc enter data copyin(myvar)\n+\n+!$acc parallel present(myvar)\n+  myvar%a = 1\n+  myvar%b = 2\n+  myvar%c = 3\n+!$acc end parallel\n+\n+!$acc exit data copyout(myvar)\n+\n+  if (myvar%a .ne. 1) stop 1\n+  if (myvar%b .ne. 2) stop 2\n+  if (myvar%c .ne. 3) stop 3\n+end program main"}, {"sha": "3088b832957aa41ee2ab0382fb88136fb740c4c9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/derivedtype-2.f95", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtype-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtype-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtype-2.f95?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+\n+program main\n+  implicit none\n+\n+  type tnest\n+    integer :: ia, ib, ic\n+  end type tnest\n+\n+  type mytype\n+    type(tnest) :: nest\n+    integer :: a, b, c\n+  end type mytype\n+\n+  type(mytype) :: myvar\n+  integer :: i\n+\n+  myvar%a = 0\n+  myvar%b = 0\n+  myvar%c = 0\n+  myvar%nest%ia = 0\n+  myvar%nest%ib = 0\n+  myvar%nest%ic = 0\n+\n+!$acc enter data copyin(myvar%nest)\n+\n+!$acc parallel present(myvar%nest)\n+  myvar%nest%ia = 4\n+  myvar%nest%ib = 5\n+  myvar%nest%ic = 6\n+!$acc end parallel\n+\n+!$acc exit data copyout(myvar%nest)\n+\n+  if (myvar%a .ne. 0) stop 1\n+  if (myvar%b .ne. 0) stop 2\n+  if (myvar%c .ne. 0) stop 3\n+  if (myvar%nest%ia .ne. 4) stop 4\n+  if (myvar%nest%ib .ne. 5) stop 5\n+  if (myvar%nest%ic .ne. 6) stop 6\n+end program main"}, {"sha": "a9b40eeab4ca76a9c6495daf42a74270a2372454", "filename": "libgomp/testsuite/libgomp.oacc-fortran/multidim-slice.f95", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmultidim-slice.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmultidim-slice.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fmultidim-slice.f95?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do run }\n+\n+program main\n+  implicit none\n+  real, allocatable :: myarr(:,:,:,:,:)\n+  integer i, j, k, l, m\n+\n+  allocate(myarr(1:10,1:10,1:10,1:10,1:10))\n+\n+  do i=1,10\n+    do j=1,10\n+      do k=1,10\n+        do l=1,10\n+          do m=1,10\n+            myarr(m,l,k,j,i) = i+j+k+l+m\n+          end do\n+        end do\n+      end do\n+    end do\n+  end do\n+\n+  do i=1,10\n+    !$acc data copy(myarr(:,:,:,:,i))\n+    !$acc parallel loop collapse(4) present(myarr(:,:,:,:,i))\n+    do j=1,10\n+      do k=1,10\n+        do l=1,10\n+          do m=1,10\n+            myarr(m,l,k,j,i) = myarr(m,l,k,j,i) + 1\n+          end do\n+        end do\n+      end do\n+    end do\n+    !$acc end parallel loop\n+    !$acc end data\n+  end do\n+\n+  do i=1,10\n+    do j=1,10\n+      do k=1,10\n+        do l=1,10\n+          do m=1,10\n+            if (myarr(m,l,k,j,i) .ne. i+j+k+l+m+1) stop 1\n+          end do\n+        end do\n+      end do\n+    end do\n+  end do\n+\n+end program main"}, {"sha": "c3c8a07868f337b6ffc75c8804b7c64c01a3d843", "filename": "libgomp/testsuite/libgomp.oacc-fortran/update-2.f90", "status": "added", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02817027ca02f32cfd4fbaa71edf879a024089a3/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-2.f90?ref=02817027ca02f32cfd4fbaa71edf879a024089a3", "patch": "@@ -0,0 +1,284 @@\n+! Test ACC UPDATE with derived types.\n+\n+! { dg-do run }\n+\n+module dt\n+  integer, parameter :: n = 10\n+  type inner\n+     integer :: d(n)\n+  end type inner\n+  type mytype\n+     integer(8) :: a, b, c(n)\n+     type(inner) :: in\n+  end type mytype\n+end module dt\n+\n+program derived_acc\n+  use dt\n+\n+  implicit none\n+  integer i, res\n+  type(mytype) :: var\n+\n+  var%a = 0\n+  var%b = 1\n+  var%c(:) = 10\n+  var%in%d(:) = 100\n+\n+  var%c(:) = 10\n+\n+  !$acc enter data copyin(var)\n+\n+  !$acc parallel loop present(var)\n+  do i = 1, 1\n+     var%a = var%b\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%a)\n+\n+  if (var%a /= var%b) stop 1\n+\n+  var%b = 100\n+\n+  !$acc update device(var%b)\n+\n+  !$acc parallel loop present(var)\n+  do i = 1, 1\n+     var%a = var%b\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%a)\n+\n+  if (var%a /= var%b) stop 2\n+\n+  !$acc parallel loop present (var)\n+  do i = 1, n\n+     var%c(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%c)\n+\n+  var%a = -1\n+\n+  do i = 1, n\n+     if (var%c(i) /= i) stop 3\n+     var%c(i) = var%a\n+  end do\n+\n+  !$acc update device(var%a)\n+  !$acc update device(var%c)\n+\n+  res = 0\n+\n+  !$acc parallel loop present(var) reduction(+:res)\n+  do i = 1, n\n+     if (var%c(i) /= var%a) res = res + 1\n+  end do\n+\n+  if (res /= 0) stop 4\n+\n+  var%c(:) = 0\n+\n+  !$acc update device(var%c)\n+\n+  !$acc parallel loop present(var)\n+  do i = 5, 5\n+     var%c(i) = 1\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%c(5))\n+\n+  do i = 1, n\n+     if (i /= 5 .and. var%c(i) /= 0) stop 5\n+     if (i == 5 .and. var%c(i) /= 1) stop 6\n+  end do\n+\n+  !$acc parallel loop present(var)\n+  do i = 1, n\n+     var%in%d = var%a\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%in%d)\n+\n+  do i = 1, n\n+     if (var%in%d(i) /= var%a) stop 7\n+  end do\n+\n+  var%c(:) = 0\n+\n+  !$acc update device(var%c)\n+\n+  var%c(:) = -1\n+\n+  !$acc parallel loop present(var)\n+  do i = n/2, n\n+     var%c(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%c(n/2:n))\n+\n+  do i = 1,n\n+     if (i < n/2 .and. var%c(i) /= -1) stop 8\n+     if (i >= n/2 .and. var%c(i) /= i) stop 9\n+  end do\n+\n+  var%in%d(:) = 0\n+  !$acc update device(var%in%d)\n+\n+  !$acc parallel loop present(var)\n+  do i = 5, 5\n+     var%in%d(i) = 1\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%in%d(5))\n+\n+  do i = 1, n\n+     if (i /= 5 .and. var%in%d(i) /= 0) stop 10\n+     if (i == 5 .and. var%in%d(i) /= 1) stop 11\n+  end do\n+\n+  !$acc exit data delete(var)\n+\n+  call derived_acc_subroutine(var)\n+end program derived_acc\n+\n+subroutine derived_acc_subroutine(var)\n+  use dt\n+\n+  implicit none\n+  integer i, res\n+  type(mytype) :: var\n+\n+  var%a = 0\n+  var%b = 1\n+  var%c(:) = 10\n+  var%in%d(:) = 100\n+\n+  var%c(:) = 10\n+\n+  !$acc enter data copyin(var)\n+\n+  !$acc parallel loop present(var)\n+  do i = 1, 1\n+     var%a = var%b\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%a)\n+\n+  if (var%a /= var%b) stop 12\n+\n+  var%b = 100\n+\n+  !$acc update device(var%b)\n+\n+  !$acc parallel loop present(var)\n+  do i = 1, 1\n+     var%a = var%b\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%a)\n+\n+  if (var%a /= var%b) stop 13\n+\n+  !$acc parallel loop present (var)\n+  do i = 1, n\n+     var%c(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%c)\n+\n+  var%a = -1\n+\n+  do i = 1, n\n+     if (var%c(i) /= i) stop 14\n+     var%c(i) = var%a\n+  end do\n+\n+  !$acc update device(var%a)\n+  !$acc update device(var%c)\n+\n+  res = 0\n+\n+  !$acc parallel loop present(var) reduction(+:res)\n+  do i = 1, n\n+     if (var%c(i) /= var%a) res = res + 1\n+  end do\n+\n+  if (res /= 0) stop 15\n+\n+  var%c(:) = 0\n+\n+  !$acc update device(var%c)\n+\n+  !$acc parallel loop present(var)\n+  do i = 5, 5\n+     var%c(i) = 1\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%c(5))\n+\n+  do i = 1, n\n+     if (i /= 5 .and. var%c(i) /= 0) stop 16\n+     if (i == 5 .and. var%c(i) /= 1) stop 17\n+  end do\n+\n+  !$acc parallel loop present(var)\n+  do i = 1, n\n+     var%in%d = var%a\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%in%d)\n+\n+  do i = 1, n\n+     if (var%in%d(i) /= var%a) stop 18\n+  end do\n+\n+  var%c(:) = 0\n+\n+  !$acc update device(var%c)\n+\n+  var%c(:) = -1\n+\n+  !$acc parallel loop present(var)\n+  do i = n/2, n\n+     var%c(i) = i\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%c(n/2:n))\n+\n+  do i = 1,n\n+     if (i < n/2 .and. var%c(i) /= -1) stop 19\n+     if (i >= n/2 .and. var%c(i) /= i) stop 20\n+  end do\n+\n+  var%in%d(:) = 0\n+  !$acc update device(var%in%d)\n+\n+  !$acc parallel loop present(var)\n+  do i = 5, 5\n+     var%in%d(i) = 1\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc update host(var%in%d(5))\n+\n+  do i = 1, n\n+     if (i /= 5 .and. var%in%d(i) /= 0) stop 21\n+     if (i == 5 .and. var%in%d(i) /= 1) stop 22\n+  end do\n+\n+  !$acc exit data delete(var)\n+end subroutine derived_acc_subroutine"}]}