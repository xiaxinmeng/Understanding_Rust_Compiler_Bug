{"sha": "96ab60fc9353bd70ad1acf041f4732fccc9a724e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhYjYwZmM5MzUzYmQ3MGFkMWFjZjA0MWY0NzMyZmNjYzlhNzI0ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T23:22:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T23:22:55Z"}, "message": "arc.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\n\t* config/arc/arc.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(arc_return_in_memory): Likewise.\n\t* config/arc/arc.h (PROMOTE_FUNCTION_ARGS): Remove.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\nFrom-SVN: r76677", "tree": {"sha": "c85d41db841f6e7c5548ac6aca6106b0332335f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c85d41db841f6e7c5548ac6aca6106b0332335f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ab60fc9353bd70ad1acf041f4732fccc9a724e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ab60fc9353bd70ad1acf041f4732fccc9a724e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ab60fc9353bd70ad1acf041f4732fccc9a724e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ab60fc9353bd70ad1acf041f4732fccc9a724e/comments", "author": null, "committer": null, "parents": [{"sha": "1aaec916ad5f7a37060a2bee39df50f158f4013e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aaec916ad5f7a37060a2bee39df50f158f4013e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aaec916ad5f7a37060a2bee39df50f158f4013e"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "4674b7c8a79e26c227457f4fdbcdd2659ab822df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ab60fc9353bd70ad1acf041f4732fccc9a724e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ab60fc9353bd70ad1acf041f4732fccc9a724e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96ab60fc9353bd70ad1acf041f4732fccc9a724e", "patch": "@@ -1,3 +1,16 @@\n+2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arc/arc.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(arc_return_in_memory): Likewise.\n+\t* config/arc/arc.h (PROMOTE_FUNCTION_ARGS): Remove.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\n 2004-01-26  Richard Henderson  <rth@redhat.com>\n \n \t* c-parse.in (extension): Use itype."}, {"sha": "e8e40199177f493e807f282faef337d3fb639380", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ab60fc9353bd70ad1acf041f4732fccc9a724e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ab60fc9353bd70ad1acf041f4732fccc9a724e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=96ab60fc9353bd70ad1acf041f4732fccc9a724e", "patch": "@@ -98,6 +98,7 @@ static void arc_file_start (void);\n static void arc_internal_label (FILE *, const char *, unsigned long);\n static bool arc_rtx_costs (rtx, int, int, int *);\n static int arc_address_cost (rtx);\n+static bool arc_return_in_memory (tree, tree);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -123,6 +124,18 @@ static int arc_address_cost (rtx);\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST arc_address_cost\n \n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY arc_return_in_memory\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n@@ -2351,3 +2364,11 @@ arc_internal_label (FILE *stream, const char *prefix, unsigned long labelno)\n   arc_ccfsm_at_label (prefix, labelno);\n   default_internal_label (stream, prefix, labelno);\n }\n+\n+static bool\n+arc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return (AGGREGATE_TYPE_P (type)\n+\t  || int_size_in_bytes (type) > 8\n+\t  || TREE_ADDRESSABLE (type));\n+}"}, {"sha": "5171849fcbe78bb2c46874144a74fbb0430425e1", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ab60fc9353bd70ad1acf041f4732fccc9a724e/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ab60fc9353bd70ad1acf041f4732fccc9a724e/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=96ab60fc9353bd70ad1acf041f4732fccc9a724e", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002\n+   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -206,13 +206,6 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n   (MODE) = SImode;\t\t\t\t\\\n }\n \n-/* Define this macro if the promotion described by `PROMOTE_MODE'\n-   should also be done for outgoing function arguments.  */\n-#define PROMOTE_FUNCTION_ARGS\n-\n-/* Likewise, if the function return value is promoted.  */\n-#define PROMOTE_FUNCTION_RETURN\n-\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY 32\n \n@@ -605,9 +598,6 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n \f\n /* Function argument passing.  */\n \n-/* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* If defined, the maximum amount of space required for outgoing\n    arguments will be computed and placed into the variable\n    `current_function_outgoing_args_size'.  No space will be pushed\n@@ -789,22 +779,8 @@ arc_setup_incoming_varargs(&ARGS_SO_FAR, MODE, TYPE, &PRETEND_SIZE, NO_RTL)\n /* ??? What about r1 in DI/DF values.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n \n-/* A C expression which can inhibit the returning of certain function\n-   values in registers, based on the type of value.  A nonzero value says\n-   to return the function value in memory, just as large structures are\n-   always returned.  Here TYPE will be a C expression of type `tree',\n-   representing the data type of the value.  */\n-#define RETURN_IN_MEMORY(TYPE) \\\n-(AGGREGATE_TYPE_P (TYPE) \\\n- || int_size_in_bytes (TYPE) > 8 \\\n- || TREE_ADDRESSABLE (TYPE))\n-\n /* Tell GCC to use RETURN_IN_MEMORY.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-/* Register in which address to store a structure value\n-   is passed to a function, or 0 to use `invisible' first argument.  */\n-#define STRUCT_VALUE 0\n \f\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}]}