{"sha": "d94611f1584bd67db5d5d61f011fd2431f055d3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0NjExZjE1ODRiZDY3ZGI1ZDVkNjFmMDExZmQyNDMxZjA1NWQzZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-05-25T05:11:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-25T05:11:42Z"}, "message": "Makefile.am (TAGS): Construct.\n\n\n2000-05-24  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* Makefile.am (TAGS): Construct.\n\t* Makefile.in: Rengerate.\n\t* src/Makefile.am: Tweak.\n\t* src/Makefile.in: Tweak.\n\t* configure.in: Tweak.\n\n\t* bits/c++config.h: Rename to ...\n\t* bits/c++config: This.\n\t* mkc++config: Adjust.\n\nFrom-SVN: r34157", "tree": {"sha": "6539048ca9ee04d228876ea6b39d13377ce1e4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6539048ca9ee04d228876ea6b39d13377ce1e4dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d94611f1584bd67db5d5d61f011fd2431f055d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94611f1584bd67db5d5d61f011fd2431f055d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94611f1584bd67db5d5d61f011fd2431f055d3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94611f1584bd67db5d5d61f011fd2431f055d3e/comments", "author": null, "committer": null, "parents": [{"sha": "ff5def207e2ff19b84c6c99f66ee72c9ab5f1014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5def207e2ff19b84c6c99f66ee72c9ab5f1014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff5def207e2ff19b84c6c99f66ee72c9ab5f1014"}], "stats": {"total": 109, "additions": 66, "deletions": 43}, "files": [{"sha": "026704eaca3dabc179e41b2da5638e1dc06f054e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "patch": "@@ -1,5 +1,15 @@\n 2000-05-24  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n+\t* Makefile.am (TAGS): Construct.\n+\t* Makefile.in: Rengerate.\n+\t* src/Makefile.am: Tweak.\n+\t* src/Makefile.in: Tweak.\n+\t* configure.in: Tweak.\n+\n+\t* bits/c++config.h: Rename to ...\n+\t* bits/c++config: This.\n+\t* mkc++config: Adjust.\n+\t\n \t* m4: Remove.\n \t* m4/lc_message.m4: Merge into acinclude.m4.\n \t* m4/mathfcts.m4: Same."}, {"sha": "3bec4532732f617bb83c9c2f76e3a60b20e7539a", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "patch": "@@ -94,6 +94,10 @@ distclean-multi:\n maintainer-clean-multi:\n \t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=maintainer-clean multi-clean\n \n+# All the machinations with string instantiations messes up the\n+# automake-genrated TAGS rule. Make a simple one here.\n+TAGS: tags-recursive $(LISP)\n+\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n@@ -138,3 +142,14 @@ AM_MAKEFLAGS = \\\n \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n \t\"DESTDIR=$(DESTDIR)\" \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "c4be5361ccc850cb967eea2d50b1204103f785bc", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "patch": "@@ -317,21 +317,6 @@ ID: $(HEADERS) $(SOURCES) $(LISP)\n \there=`pwd` && cd $(srcdir) \\\n \t  && mkid -f$$here/ID $$unique $(LISP)\n \n-TAGS: tags-recursive $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) $(LISP)\n-\ttags=; \\\n-\there=`pwd`; \\\n-\tlist='$(SUBDIRS)'; for subdir in $$list; do \\\n-   if test \"$$subdir\" = .; then :; else \\\n-\t    test -f $$subdir/TAGS && tags=\"$$tags -i $$here/$$subdir/TAGS\"; \\\n-   fi; \\\n-\tdone; \\\n-\tlist='$(SOURCES) $(HEADERS)'; \\\n-\tunique=`for i in $$list; do echo $$i; done | \\\n-\t  awk '    { files[$$0] = 1; } \\\n-\t       END { for (i in files) print i; }'`; \\\n-\ttest -z \"$(ETAGS_ARGS)config.h.in$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags config.h.in $$unique $(LISP) -o $$here/TAGS)\n-\n mostlyclean-tags:\n \n clean-tags:\n@@ -507,6 +492,10 @@ distclean-multi:\n maintainer-clean-multi:\n \t$(MULTICLEAN) $(AM_MAKEFLAGS) DO=maintainer-clean multi-clean\n \n+# All the machinations with string instantiations messes up the\n+# automake-genrated TAGS rule. Make a simple one here.\n+TAGS: tags-recursive $(LISP)\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "780d3e11cb10ae02bb2391433e19651721640301", "filename": "libstdc++-v3/bits/c++config", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fc%2B%2Bconfig?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "previous_filename": "libstdc++-v3/bits/c++config.h"}, {"sha": "522626039ebb0e3aaf29152b1e2131219d4b6add", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "patch": "@@ -1,5 +1,5 @@\n # Process this file with autoconf to produce a configure script, like so:\n-# aclocal -I m4, autoconf, autoheader, automake\n+# aclocal, autoconf, autoheader, automake\n \n AC_PREREQ(2.13)\n AC_INIT(src/complex.cc)"}, {"sha": "6c828f4c350399946c1d754bea714a3b10a88c14", "filename": "libstdc++-v3/mkc++config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "patch": "@@ -19,7 +19,7 @@ if [ ! -d \"$SRC_DIR\" ]; then\n   exit 1\n fi\n \n-BASE_H=\"$SRC_DIR/bits/c++config.h\"\n+BASE_H=\"$SRC_DIR/bits/c++config\"\n IN_H=\"$BUILD_DIR/config.h\"\n OUT_H=\"$BUILD_DIR/bits/c++config.h\"\n "}, {"sha": "24ec463238c3cee7cc79ae66668bff7e509ac688", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "patch": "@@ -176,7 +176,8 @@ libio_headers =\n endif\n \n generated_headers = \\\n-\tbits/std_limits.h bits/c++config.h bits/c++threads.h bits/c++io.h\n+\t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n+\t $(top_builddir)/bits/c++threads.h $(top_builddir)/bits/c++io.h\n \n cpu_headers = \\\n \t $(top_srcdir)/@cpu_include_dir@/bits/atomicity.h \n@@ -259,16 +260,15 @@ install: myinstallheaders\n \n # NB: As libio_headers may be empty, need this to make sure bash doesn't\n # choke on an empty for... loop by using libio_headers_install\n-\n myinstallheaders: $(headers:%=$(myincludep)%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n \t  echo \"$(INSTALL_DATA) $(top_srcdir)/std/$$i $(myincludep)\"; \\\n \t        $(INSTALL_DATA) $(top_srcdir)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(generated_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(top_builddir)/$$i $(myincludep)bits/\"; \\\n-\t        $(INSTALL_DATA) $(top_builddir)/$$i $(myincludep)bits/; \\\n+\t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\\n+\t        $(INSTALL_DATA) $$i $(myincludep)bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n@@ -286,10 +286,19 @@ $(headers:%=$(myincludep)%): $(myincludep)%: %\n \t$(INSTALL_DATA) $^ $@; \\\n \tfi;\n \n-# For the next time we have to handle misc-inst.cc and locale-inst.cc\n-# in a special way since we cannot instantiate all classes due to\n-# missing definitions for things like vptrs, type_info bits, etc. when\n-# using -fno-implicit-templates. \n+# All the machinations with string instantiations messes up the\n+# automake-genrated TAGS rule. Make a simple one here.\n+TAGS: $(generated_headers) $(cpu_headers) \n+\tetags -C $(top_srcdir)/bits/*.h $(top_srcdir)/bits/*.tcc \\\n+\t$(generated_headers) $(cpu_headers) $(libio_headers) \\\n+\t$(top_srcdir)/src/*.cc \\\n+\t$(top_builddir)/src/limitsMEMBERS.cc $(top_builddir)/src/c++io.cc \\\n+\t-o $(top_builddir)/TAGS\n+\n+# We have to handle misc-inst.cc and locale-inst.cc in a special way\n+# since we cannot instantiate all classes due to missing definitions\n+# for things like vptrs, type_info bits, etc. when using\n+# -fno-implicit-templates.\n misc-inst.o: misc-inst.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c $<\n misc-inst.lo: misc-inst.cc\n@@ -530,3 +539,4 @@ wstringSCOPY.o \\\n wstringEQ.o : string-inst.cc\n \t$(CXXCOMPILE) -fimplicit-templates \\\n \t-c -D`echo $@ | tr -dc '0-9A-Z'` -DC=wchar_t $< -o $@\n+"}, {"sha": "926f68d5001af5200987ecea4747673728658f06", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94611f1584bd67db5d5d61f011fd2431f055d3e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=d94611f1584bd67db5d5d61f011fd2431f055d3e", "patch": "@@ -257,7 +257,8 @@ std_headers = \\\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \\\n \n generated_headers = \\\n-\tbits/std_limits.h bits/c++config.h bits/c++threads.h bits/c++io.h\n+\t $(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n+\t $(top_builddir)/bits/c++threads.h $(top_builddir)/bits/c++io.h\n \n \n cpu_headers = \\\n@@ -493,16 +494,6 @@ ID: $(HEADERS) $(SOURCES) $(LISP)\n \there=`pwd` && cd $(srcdir) \\\n \t  && mkid -f$$here/ID $$unique $(LISP)\n \n-TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n-\ttags=; \\\n-\there=`pwd`; \\\n-\tlist='$(SOURCES) $(HEADERS)'; \\\n-\tunique=`for i in $$list; do echo $$i; done | \\\n-\t  awk '    { files[$$0] = 1; } \\\n-\t       END { for (i in files) print i; }'`; \\\n-\ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n-\n mostlyclean-tags:\n \n clean-tags:\n@@ -611,16 +602,15 @@ install: myinstallheaders\n \n # NB: As libio_headers may be empty, need this to make sure bash doesn't\n # choke on an empty for... loop by using libio_headers_install\n-\n myinstallheaders: $(headers:%=$(myincludep)%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n \t  echo \"$(INSTALL_DATA) $(top_srcdir)/std/$$i $(myincludep)\"; \\\n \t        $(INSTALL_DATA) $(top_srcdir)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(generated_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(top_builddir)/$$i $(myincludep)bits/\"; \\\n-\t        $(INSTALL_DATA) $(top_builddir)/$$i $(myincludep)bits/; \\\n+\t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\\n+\t        $(INSTALL_DATA) $$i $(myincludep)bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n@@ -638,10 +628,19 @@ $(headers:%=$(myincludep)%): $(myincludep)%: %\n \t$(INSTALL_DATA) $^ $@; \\\n \tfi;\n \n-# For the next time we have to handle misc-inst.cc and locale-inst.cc\n-# in a special way since we cannot instantiate all classes due to\n-# missing definitions for things like vptrs, type_info bits, etc. when\n-# using -fno-implicit-templates. \n+# All the machinations with string instantiations messes up the\n+# automake-genrated TAGS rule. Make a simple one here.\n+TAGS: $(generated_headers) $(cpu_headers) \n+\tetags -C $(top_srcdir)/bits/*.h $(top_srcdir)/bits/*.tcc \\\n+\t$(generated_headers) $(cpu_headers) $(libio_headers) \\\n+\t$(top_srcdir)/src/*.cc \\\n+\t$(top_builddir)/src/limitsMEMBERS.cc $(top_builddir)/src/c++io.cc \\\n+\t-o $(top_builddir)/TAGS\n+\n+# We have to handle misc-inst.cc and locale-inst.cc in a special way\n+# since we cannot instantiate all classes due to missing definitions\n+# for things like vptrs, type_info bits, etc. when using\n+# -fno-implicit-templates.\n misc-inst.o: misc-inst.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c $<\n misc-inst.lo: misc-inst.cc"}]}