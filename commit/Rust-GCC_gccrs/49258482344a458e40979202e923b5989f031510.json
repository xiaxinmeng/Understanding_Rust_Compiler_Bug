{"sha": "49258482344a458e40979202e923b5989f031510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyNTg0ODIzNDRhNDU4ZTQwOTc5MjAyZTkyM2I1OTg5ZjAzMTUxMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-21T11:26:06Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-21T11:26:06Z"}, "message": "[ARM/AArch64][testsuite] Add vqdmulh_lane tests.\n\n2015-01-21  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqdmulh_lane.c: New file.\n\nFrom-SVN: r219946", "tree": {"sha": "cb1241c5536ab4ccf0f15064b20b1957503d1691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb1241c5536ab4ccf0f15064b20b1957503d1691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49258482344a458e40979202e923b5989f031510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49258482344a458e40979202e923b5989f031510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49258482344a458e40979202e923b5989f031510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49258482344a458e40979202e923b5989f031510/comments", "author": null, "committer": null, "parents": [{"sha": "77566bc748adfd03b3a7935757d407e2544e1a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77566bc748adfd03b3a7935757d407e2544e1a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77566bc748adfd03b3a7935757d407e2544e1a36"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "ef2c93b1f27667f85f3652b1403215f91cfedc34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49258482344a458e40979202e923b5989f031510/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49258482344a458e40979202e923b5989f031510/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49258482344a458e40979202e923b5989f031510", "patch": "@@ -1,3 +1,7 @@\n+2015-01-21  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqdmulh_lane.c: New file.\n+\n 2015-01-21  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqdmulh.c: New file."}, {"sha": "5260676e6c527abc05ea99e24ac79ed0ef05fd9a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqdmulh_lane.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49258482344a458e40979202e923b5989f031510/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49258482344a458e40979202e923b5989f031510/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqdmulh_lane.c?ref=49258482344a458e40979202e923b5989f031510", "patch": "@@ -0,0 +1,121 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t0xffffffff, 0xffffffff };\n+\n+/* Expected values of cumulative_saturation flag when saturation\n+   occurs.  */\n+int VECT_VAR(expected_cumulative_sat2,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat2,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat2,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat2,int,32,4) = 1;\n+\n+/* Expected results when saturation occurs.  */\n+VECT_VAR_DECL(expected2,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected2,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected2,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected2,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t0x7fffffff, 0x7fffffff };\n+\n+#define INSN_NAME vqdmulh\n+#define TEST_MSG \"VQDMULH_LANE\"\n+#define FNNAME1(NAME) exec_ ## NAME ## _lane\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* vector_res = vqdmulh_lane(vector,vector2,lane), then store the result.  */\n+#define TEST_VQDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\t   VECT_VAR(vector2, T1, W, N2),\t\t\\\n+\t\t\t   L);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN.  */\n+#define TEST_VQDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQDMULH_LANE(Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQDMULH_LANE1(INSN_NAME, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  /* vector2: vqdmulh_lane and vqdmulhq_lane have a 2nd argument with\n+     the same number of elements, so we need only one variable of each\n+     type.  */\n+  DECL_VARIABLE(vector2, int, 16, 4);\n+  DECL_VARIABLE(vector2, int, 32, 2);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+\n+  /* Initialize vector2.  */\n+  VDUP(vector2, , int, s, 16, 4, 0x55);\n+  VDUP(vector2, , int, s, 32, 2, 0xBB);\n+\n+  /* Choose lane arbitrarily.  */\n+  TEST_VQDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat, \"\");\n+  TEST_VQDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat, \"\");\n+  TEST_VQDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat, \"\");\n+  TEST_VQDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat, \"\");\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+\n+  /* Choose input values to trigger saturation.  */\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector2, , int, s, 16, 4, 0x8000);\n+  VDUP(vector2, , int, s, 32, 2, 0x80000000);\n+\n+#define TEST_MSG2 \" (check mul cumulative saturation)\"\n+  TEST_VQDMULH_LANE(, int, s, 16, 4, 4, 3, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULH_LANE(q, int, s, 16, 8, 4, 2, expected_cumulative_sat2, TEST_MSG2);\n+  TEST_VQDMULH_LANE(q, int, s, 32, 4, 2, 1, expected_cumulative_sat2, TEST_MSG2);\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected2, TEST_MSG2);\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected2, TEST_MSG2);\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected2, TEST_MSG2);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected2, TEST_MSG2);\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}]}