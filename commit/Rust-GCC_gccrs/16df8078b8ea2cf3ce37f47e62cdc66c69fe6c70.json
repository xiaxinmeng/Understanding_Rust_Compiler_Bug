{"sha": "16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkZjgwNzhiOGVhMmNmM2NlMzdmNDdlNjJjZGM2NmM2OWZlNmM3MA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-11-24T11:41:38Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-11-24T11:41:38Z"}, "message": "expr.c (expand_expr_real_1): Remove cases for EXIT_BLOCK_EXPR and LABELED_BLOCK_EXPR.\n\ngcc/\n\t* expr.c (expand_expr_real_1): Remove cases for EXIT_BLOCK_EXPR\n\tand LABELED_BLOCK_EXPR.\n\t* gimplify.c (gimplify_labeled_block_expr): Remove.\n\t(gimplify_exit_block_expr): Remove.\n\t(gimplify_expr): Don't call them.\n\t* tree-inline.c (copy_body_r): Don't handle EXIT_BLOCK_EXPR\n\tand LABELED_BLOCK_EXPR.\n\t(estimate_num_insns_1): Likewise.\n\t(walk_tree): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Don't handle\n\tEXIT_BLOCK_EXPR and LABELED_BLOCK_EXPR.\n\t* tree.def (EXIT_BLOCK_EXPR): Moved to java-tree.def.\n\t(LABELED_BLOCK_EXPR): Likewise.\n\t* tree.h (LABELED_BLOCK_LABEL): Moved to java-tree.h.\n\t(LABELED_BLOCK_BODY): Likewise.\n\t(EXIT_BLOCK_LABELED_BLOCK): Likewise.\n\t(EXIT_BLOCK_RETURN): Removed.\n\njava/\n\t* java-gimplify.c (java_gimplify_labeled_block_expr): New function.\n\t(java_gimplify_exit_block_expr): New function.\n\t(java_gimplify_expr): Use them to gimplify EXIT_BLOCK_EXPR and\n\tLABELED_BLOCK_EXPR.\n\t* java-tree.def (LABELED_BLOCK_EXPR): Moved from tree.def.\n\t(EXIT_BLOCK_EXPR): Likewise.\n\t* java-tree.h (LABELED_BLOCK_LABEL): Moved from tree.h.\n\t(LABELED_BLOCK_BODY): Likewise.\n\t(EXIT_BLOCK_LABELED_BLOCK): Likewise.\n\t* jcf-write.c (generate_bytecode_insns): Don't handle the unused\n\tEXIT_BLOCK_RETURN operand.  Use EXIT_BLOCK_LABELED_BLOCK instead of\n\tTREE_OPERAND.\n\t* lang.c (java_tree_inlining_walk_subtrees): Handle EXIT_BLOCK_EXPR.\n\t(java_dump_tree): Use LABELED_BLOCK_LABEL, LABELED_BLOCK_BODY, and\n\tEXIT_BLOCK_LABELED_BLOCK instead of TREE_OPERAND.  Don't handle the\n\tsecond operand of EXIT_BLOCK_EXPR.\n\t* parse.y (find_expr_with_wfl): Use LABELED_BLOCK_BODY instead of\n\tTREE_OPERAND.\n\t(build_bc_statement): Use build1 to build EXIT_BLOCK_EXPR nodes.\n\nFrom-SVN: r91149", "tree": {"sha": "b1c2513f30d70b29ff11a260b5524e5f0785c12c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c2513f30d70b29ff11a260b5524e5f0785c12c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/comments", "author": null, "committer": null, "parents": [{"sha": "f39e46bac1fa7fa916b9d415d323fa7353c5e91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39e46bac1fa7fa916b9d415d323fa7353c5e91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39e46bac1fa7fa916b9d415d323fa7353c5e91a"}], "stats": {"total": 264, "additions": 115, "deletions": 149}, "files": [{"sha": "fb419356ed010df387c796a46891bc78bfe26ab2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -1,3 +1,23 @@\n+2004-11-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* expr.c (expand_expr_real_1): Remove cases for EXIT_BLOCK_EXPR \n+\tand LABELED_BLOCK_EXPR.\n+\t* gimplify.c (gimplify_labeled_block_expr): Remove.\n+\t(gimplify_exit_block_expr): Remove.\n+\t(gimplify_expr): Don't call them.\n+\t* tree-inline.c (copy_body_r): Don't handle EXIT_BLOCK_EXPR\n+\tand LABELED_BLOCK_EXPR.\n+\t(estimate_num_insns_1): Likewise.\n+\t(walk_tree): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Don't handle\n+\tEXIT_BLOCK_EXPR and LABELED_BLOCK_EXPR.\n+\t* tree.def (EXIT_BLOCK_EXPR): Moved to java-tree.def.\n+\t(LABELED_BLOCK_EXPR): Likewise.\n+\t* tree.h (LABELED_BLOCK_LABEL): Moved to java-tree.h.\n+\t(LABELED_BLOCK_BODY): Likewise.\n+\t(EXIT_BLOCK_LABELED_BLOCK): Likewise.\n+\t(EXIT_BLOCK_RETURN): Removed.\n+\n 2004-11-24  Steven Bosscher  <stevenb@suse.de>\n \n \t* cfgrtl.c (rtl_delete_block): Fix comment.\n@@ -88,7 +108,7 @@\n \t(record_jump_cond): Use it instead of gen_lowpart.\n \n 2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n-            Joseph Myers  <joseph@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/sol2-c.c (solaris_register_pragmas): Use\n \tc_register_pragma_with_expansion."}, {"sha": "5819a9865fef472dc0b0ce9eb012e00e4fd3924f", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -8124,8 +8124,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case POSTDECREMENT_EXPR:\n     case LOOP_EXPR:\n     case EXIT_EXPR:\n-    case LABELED_BLOCK_EXPR:\n-    case EXIT_BLOCK_EXPR:\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n       /* Lowered by gimplify.c.  */"}, {"sha": "e26868f9d1950106dd59c26e09122a41f8e1f44c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -1210,43 +1210,6 @@ gimplify_case_label_expr (tree *expr_p)\n   return GS_ALL_DONE;\n }\n \n-/* Gimplify a LABELED_BLOCK_EXPR into a LABEL_EXPR following\n-   a (possibly empty) body.  */\n-\n-static enum gimplify_status\n-gimplify_labeled_block_expr (tree *expr_p)\n-{\n-  tree body = LABELED_BLOCK_BODY (*expr_p);\n-  tree label = LABELED_BLOCK_LABEL (*expr_p);\n-  tree t;\n-\n-  DECL_CONTEXT (label) = current_function_decl;\n-  t = build (LABEL_EXPR, void_type_node, label);\n-  if (body != NULL_TREE)\n-    t = build (COMPOUND_EXPR, void_type_node, body, t);\n-  *expr_p = t;\n-\n-  return GS_OK;\n-}\n-\n-/* Gimplify a EXIT_BLOCK_EXPR into a GOTO_EXPR.  */\n-\n-static enum gimplify_status\n-gimplify_exit_block_expr (tree *expr_p)\n-{\n-  tree labeled_block = TREE_OPERAND (*expr_p, 0);\n-  tree label;\n-\n-  /* First operand must be a LABELED_BLOCK_EXPR, which should\n-     already be lowered (or partially lowered) when we get here.  */\n-  gcc_assert (TREE_CODE (labeled_block) == LABELED_BLOCK_EXPR);\n-\n-  label = LABELED_BLOCK_LABEL (labeled_block);\n-  *expr_p = build1 (GOTO_EXPR, void_type_node, label);\n-\n-  return GS_OK;\n-}\n-\n /* Build a GOTO to the LABEL_DECL pointed to by LABEL_P, building it first\n    if necessary.  */\n \n@@ -3703,14 +3666,6 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  ret = gimplify_switch_expr (expr_p, pre_p);\n \t  break;\n \n-\tcase LABELED_BLOCK_EXPR:\n-\t  ret = gimplify_labeled_block_expr (expr_p);\n-\t  break;\n-\n-\tcase EXIT_BLOCK_EXPR:\n-\t  ret = gimplify_exit_block_expr (expr_p);\n-\t  break;\n-\n \tcase EXIT_EXPR:\n \t  ret = gimplify_exit_expr (expr_p);\n \t  break;"}, {"sha": "ab96bfc78836ebc6ee59cd8bb642b71f76a94244", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -1,3 +1,25 @@\n+2004-11-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* java-gimplify.c (java_gimplify_labeled_block_expr): New function.\n+\t(java_gimplify_exit_block_expr): New function.\n+\t(java_gimplify_expr): Use them to gimplify EXIT_BLOCK_EXPR and\n+\tLABELED_BLOCK_EXPR.\n+\t* java-tree.def (LABELED_BLOCK_EXPR): Moved from tree.def.\n+\t(EXIT_BLOCK_EXPR): Likewise.\n+\t* java-tree.h (LABELED_BLOCK_LABEL): Moved from tree.h.\n+\t(LABELED_BLOCK_BODY): Likewise.\n+\t(EXIT_BLOCK_LABELED_BLOCK): Likewise.\n+\t* jcf-write.c (generate_bytecode_insns): Don't handle the unused\n+\tEXIT_BLOCK_RETURN operand.  Use EXIT_BLOCK_LABELED_BLOCK instead of\n+\tTREE_OPERAND.\n+\t* lang.c (java_tree_inlining_walk_subtrees): Handle EXIT_BLOCK_EXPR.\n+\t(java_dump_tree): Use LABELED_BLOCK_LABEL, LABELED_BLOCK_BODY, and\n+\tEXIT_BLOCK_LABELED_BLOCK instead of TREE_OPERAND.  Don't handle the\n+\tsecond operand of EXIT_BLOCK_EXPR.\n+\t* parse.y (find_expr_with_wfl): Use LABELED_BLOCK_BODY instead of\n+\tTREE_OPERAND.\n+\t(build_bc_statement): Use build1 to build EXIT_BLOCK_EXPR nodes.\n+\n 2004-11-23  Ben Elliston  <bje@au.ibm.com>\n \n \t* xref.h (xref_flag_value): Remove."}, {"sha": "51fbb84656d7a6bda26a390a2c6c226a8659b28b", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -32,6 +32,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree-gimple.h\"\n #include \"toplev.h\"\n \n+static tree java_gimplify_labeled_block_expr (tree);\n+static tree java_gimplify_exit_block_expr (tree);\n static tree java_gimplify_case_expr (tree);\n static tree java_gimplify_default_expr (tree);\n static tree java_gimplify_block (tree);\n@@ -79,6 +81,14 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n       SET_EXPR_LOCATION (*expr_p, input_location);\n       break;\n \n+    case LABELED_BLOCK_EXPR:\n+      *expr_p = java_gimplify_labeled_block_expr (*expr_p);\n+      break;\n+\n+    case EXIT_BLOCK_EXPR:\n+      *expr_p = java_gimplify_exit_block_expr (*expr_p);\n+      break;\n+\n     case CASE_EXPR:\n       *expr_p = java_gimplify_case_expr (*expr_p);\n       break;\n@@ -164,6 +174,39 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n   return GS_OK;\n }\n \n+/* Gimplify a LABELED_BLOCK_EXPR into a LABEL_EXPR following\n+   a (possibly empty) body.  */\n+\n+static tree\n+java_gimplify_labeled_block_expr (tree expr)\n+{\n+  tree body = LABELED_BLOCK_BODY (expr);\n+  tree label = LABELED_BLOCK_LABEL (expr);\n+  tree t;\n+\n+  DECL_CONTEXT (label) = current_function_decl;\n+  t = build (LABEL_EXPR, void_type_node, label);\n+  if (body != NULL_TREE)\n+    t = build (COMPOUND_EXPR, void_type_node, body, t);\n+  return t;\n+}\n+\n+/* Gimplify a EXIT_BLOCK_EXPR into a GOTO_EXPR.  */\n+\n+static tree\n+java_gimplify_exit_block_expr (tree expr)\n+{\n+  tree labeled_block = EXIT_BLOCK_LABELED_BLOCK (expr);\n+  tree label;\n+\n+  /* First operand must be a LABELED_BLOCK_EXPR, which should\n+     already be lowered (or partially lowered) when we get here.  */\n+  gcc_assert (TREE_CODE (labeled_block) == LABELED_BLOCK_EXPR);\n+\n+  label = LABELED_BLOCK_LABEL (labeled_block);\n+  return build1 (GOTO_EXPR, void_type_node, label);\n+}\n+\n /* This is specific to the bytecode compiler.  If a variable has\n    LOCAL_SLOT_P set, replace an assignment to it with an assignment to\n    the corresponding variable that holds all its aliases.  */"}, {"sha": "ac8f83a25340df345604cde65bf64a51f6d10fd2", "filename": "gcc/java/java-tree.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjava-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjava-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.def?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -41,6 +41,14 @@ DEFTREECODE (NEW_CLASS_EXPR, \"new_class_expr\", tcc_expression, 3)\n /* Defines `this' as an expression.  */\n DEFTREECODE (THIS_EXPR, \"this\", tcc_unary, 0)\n \n+/* A labeled block. Operand 0 is the label that will be generated to\n+   mark the end of the block.  Operand 1 is the labeled block body.  */\n+DEFTREECODE (LABELED_BLOCK_EXPR, \"labeled_block_expr\", tcc_expression, 2)\n+\n+/* Exit a labeled block, possibly returning a value.  Operand 0 is a\n+   LABELED_BLOCK_EXPR to exit.  */\n+DEFTREECODE (EXIT_BLOCK_EXPR, \"exit_block_expr\", tcc_statement, 1)\n+\n /* Case statement expression.\n    Operand 1 is the case value.  */\n DEFTREECODE (CASE_EXPR, \"case\", tcc_expression, 1)"}, {"sha": "558d0f50cc6617cc0b05476a1836047598346a68", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -1815,6 +1815,16 @@ enum\n \n #undef DEBUG_JAVA_BINDING_LEVELS\n \n+/* In a LABELED_BLOCK_EXPR node.  */\n+#define LABELED_BLOCK_LABEL(NODE) \\\n+  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 0)\n+#define LABELED_BLOCK_BODY(NODE) \\\n+  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 1)\n+\n+/* In an EXIT_BLOCK_EXPR node.  */\n+#define EXIT_BLOCK_LABELED_BLOCK(NODE) \\\n+  TREE_OPERAND_CHECK_CODE (NODE, EXIT_BLOCK_EXPR, 0)\n+\n /* In an EXPR_WITH_FILE_LOCATION node.  */\n #define EXPR_WFL_EMIT_LINE_NOTE(NODE) \\\n   (EXPR_WITH_FILE_LOCATION_CHECK (NODE)->common.public_flag)"}, {"sha": "638f47baf858bcf74e4cdf89c4648ba76ce7cf85", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -1898,8 +1898,7 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n     case EXIT_BLOCK_EXPR:\n       {\n \tstruct jcf_block *label = state->labeled_blocks;\n-\tif (TREE_OPERAND (exp, 1) != NULL) goto notimpl;\n-\twhile (label->u.labeled_block != TREE_OPERAND (exp, 0))\n+\twhile (label->u.labeled_block != EXIT_BLOCK_LABELED_BLOCK (exp))\n \t  label = label->next;\n \tcall_cleanups (label, state);\n \temit_goto (label, state);\n@@ -2653,7 +2652,6 @@ generate_bytecode_insns (tree exp, int target, struct jcf_partial *state)\n \t  }\n       }\n       /* fall through */\n-    notimpl:\n     default:\n       error(\"internal error in generate_bytecode_insn - tree code not implemented: %s\",\n \t    tree_code_name [(int) TREE_CODE (exp)]);"}, {"sha": "ad388da4606438209560c535faa8e4e851c6d3cb", "filename": "gcc/java/lang.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -731,6 +731,10 @@ java_tree_inlining_walk_subtrees (tree *tp ATTRIBUTE_UNUSED,\n       WALK_SUBTREE (BLOCK_EXPR_BODY (t));\n       return NULL_TREE;\n \n+    case EXIT_BLOCK_EXPR:\n+      *subtrees = 0;\n+      return NULL_TREE;\n+\n     default:\n       return NULL_TREE;\n     }\n@@ -921,13 +925,12 @@ java_dump_tree (void *dump_info, tree t)\n       return true;\n \n     case LABELED_BLOCK_EXPR:\n-      dump_child (\"label\", TREE_OPERAND (t, 0));\n-      dump_child (\"block\", TREE_OPERAND (t, 1));\n+      dump_child (\"label\", LABELED_BLOCK_LABEL (t));\n+      dump_child (\"block\", LABELED_BLOCK_BODY (t));\n       return true;\n \n     case EXIT_BLOCK_EXPR:\n-      dump_child (\"block\", TREE_OPERAND (t, 0));\n-      dump_child (\"val\", TREE_OPERAND (t, 1));\n+      dump_child (\"block\", EXIT_BLOCK_LABELED_BLOCK (t));\n       return true;\n \n     case BLOCK:"}, {"sha": "1c1a686d7277eace1c946fba517066fbca75ada3", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -3255,7 +3255,7 @@ find_expr_with_wfl (tree node)\n \t  continue;\n \n \tcase LABELED_BLOCK_EXPR:\n-\t  node = TREE_OPERAND (node, 1);\n+\t  node = LABELED_BLOCK_BODY (node);\n \t  continue;\n \n \tdefault:\n@@ -11747,8 +11747,6 @@ java_complete_lhs (tree node)\n       return node;\n \n     case EXIT_BLOCK_EXPR:\n-      /* We don't complete operand 1, because it's the return value of\n-         the EXIT_BLOCK_EXPR which doesn't exist it Java */\n       return patch_bc_statement (node);\n \n     case CASE_EXPR:\n@@ -15269,8 +15267,7 @@ build_bc_statement (int location, int is_break, tree name)\n     }\n   /* Unlabeled break/continue will be handled during the\n      break/continue patch operation */\n-  break_continue = build2 (EXIT_BLOCK_EXPR, NULL_TREE,\n-\t\t\t   label_block_expr, NULL_TREE);\n+  break_continue = build1 (EXIT_BLOCK_EXPR, NULL_TREE, label_block_expr);\n \n   IS_BREAK_STMT_P (break_continue) = is_break;\n   TREE_SIDE_EFFECTS (break_continue) = 1;"}, {"sha": "82a6a92a37708f10c433efd9ec6f8a2f1ef1abc3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -512,25 +512,6 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n     remap_save_expr (tp, id->decl_map, walk_subtrees);\n   else if (TREE_CODE (*tp) == BIND_EXPR)\n     copy_bind_expr (tp, walk_subtrees, id);\n-  else if (TREE_CODE (*tp) == LABELED_BLOCK_EXPR)\n-    {\n-      /* We need a new copy of this labeled block; the EXIT_BLOCK_EXPR\n-         will refer to it, so save a copy ready for remapping.  We\n-         save it in the decl_map, although it isn't a decl.  */\n-      tree new_block = copy_node (*tp);\n-      insert_decl_map (id, *tp, new_block);\n-      *tp = new_block;\n-    }\n-  else if (TREE_CODE (*tp) == EXIT_BLOCK_EXPR)\n-    {\n-      splay_tree_node n\n-\t= splay_tree_lookup (id->decl_map,\n-\t\t\t     (splay_tree_key) TREE_OPERAND (*tp, 0));\n-      /* We _must_ have seen the enclosing LABELED_BLOCK_EXPR.  */\n-      gcc_assert (n);\n-      *tp = copy_node (*tp);\n-      TREE_OPERAND (*tp, 0) = (tree) n->value;\n-    }\n   /* Types may need remapping as well.  */\n   else if (TYPE_P (*tp))\n     *tp = remap_type (*tp, id);\n@@ -1174,14 +1155,12 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case FILTER_EXPR: /* ??? */\n     case COMPOUND_EXPR:\n     case BIND_EXPR:\n-    case LABELED_BLOCK_EXPR:\n     case WITH_CLEANUP_EXPR:\n     case NOP_EXPR:\n     case VIEW_CONVERT_EXPR:\n     case SAVE_EXPR:\n     case ADDR_EXPR:\n     case COMPLEX_EXPR:\n-    case EXIT_BLOCK_EXPR:\n     case CASE_LABEL_EXPR:\n     case SSA_NAME:\n     case CATCH_EXPR:\n@@ -2080,8 +2059,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n \t}\n     }\n \n-  else if (code != EXIT_BLOCK_EXPR\n-\t   && code != SAVE_EXPR\n+  else if (code != SAVE_EXPR\n \t   && code != BIND_EXPR\n \t   && IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (code)))\n     {\n@@ -2171,9 +2149,6 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n \tcase CONSTRUCTOR:\n \t  WALK_SUBTREE_TAIL (CONSTRUCTOR_ELTS (*tp));\n \n-\tcase EXIT_BLOCK_EXPR:\n-\t  WALK_SUBTREE_TAIL (TREE_OPERAND (*tp, 1));\n-\n \tcase SAVE_EXPR:\n \t  WALK_SUBTREE_TAIL (TREE_OPERAND (*tp, 0));\n "}, {"sha": "6d2977369a012138cb17fd6171c747c810af1dd6", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -1247,48 +1247,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \tpp_string (buffer, \" [non-local]\");\n       break;\n \n-    case LABELED_BLOCK_EXPR:\n-      op0 = LABELED_BLOCK_LABEL (node);\n-      /* If this is for break or continue, don't bother printing it.  */\n-      if (DECL_NAME (op0))\n-\t{\n-\t  const char *name = IDENTIFIER_POINTER (DECL_NAME (op0));\n-\t  if (strcmp (name, \"break\") == 0\n-\t      || strcmp (name, \"continue\") == 0)\n-\t    {\n-\t      dump_generic_node (buffer, LABELED_BLOCK_BODY (node), spc, flags, false);\n-\t      break;\n-\t    }\n-\t}\n-      dump_generic_node (buffer, LABELED_BLOCK_LABEL (node), spc, flags, false);\n-      pp_string (buffer, \": {\");\n-      if (!(flags & TDF_SLIM))\n-\tnewline_and_indent (buffer, spc+2);\n-      dump_generic_node (buffer, LABELED_BLOCK_BODY (node), spc+2, flags, true);\n-      if (!flags)\n-\tnewline_and_indent (buffer, spc);\n-      pp_character (buffer, '}');\n-      is_expr = false;\n-      break;\n-\n-    case EXIT_BLOCK_EXPR:\n-      op0 = LABELED_BLOCK_LABEL (EXIT_BLOCK_LABELED_BLOCK (node));\n-      /* If this is for a break or continue, print it accordingly.  */\n-      if (DECL_NAME (op0))\n-\t{\n-\t  const char *name = IDENTIFIER_POINTER (DECL_NAME (op0));\n-\t  if (strcmp (name, \"break\") == 0\n-\t      || strcmp (name, \"continue\") == 0)\n-\t    {\n-\t      pp_string (buffer, name);\n-\t      break;\n-\t    }\n-\t}\n-      pp_string (buffer, \"<<<exit block \");\n-      dump_generic_node (buffer, op0, spc, flags, false);\n-      pp_string (buffer, \">>>\");\n-      break;\n-\n     case EXC_PTR_EXPR:\n       pp_string (buffer, \"<<<exception object>>>\");\n       break;"}, {"sha": "bf38d2447ce51277ab9018a050ef5522d085db46", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -499,11 +499,6 @@ DEFTREECODE (VEC_COND_EXPR, \"vec_cond_expr\", tcc_expression, 3)\n    nodes for the function.  */\n DEFTREECODE (BIND_EXPR, \"bind_expr\", tcc_expression, 3)\n \n-/* A labeled block. Operand 0 is the label that will be generated to\n-   mark the end of the block.\n-   Operand 1 is the labeled block body.  */\n-DEFTREECODE (LABELED_BLOCK_EXPR, \"labeled_block_expr\", tcc_expression, 2)\n-\n /* Function call.  Operand 0 is the function.\n    Operand 1 is the argument list, a list of expressions\n    made out of a chain of TREE_LIST nodes.\n@@ -806,11 +801,6 @@ DEFTREECODE (EXIT_EXPR, \"exit_expr\", tcc_statement, 1)\n    The type should be void and the value should be ignored.  */\n DEFTREECODE (LOOP_EXPR, \"loop_expr\", tcc_statement, 1)\n \n-/* Exit a labeled block, possibly returning a value.  Operand 0 is a\n-   LABELED_BLOCK_EXPR to exit.  Operand 1 is the value to return. It\n-   may be left null.  */\n-DEFTREECODE (EXIT_BLOCK_EXPR, \"exit_block_expr\", tcc_statement, 2)\n-\n /* Switch expression.\n \n    TREE_TYPE is the original type of the condition, before any"}, {"sha": "0f109a0c34b9e3d3e3df241b0dda37e4a3401039", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=16df8078b8ea2cf3ce37f47e62cdc66c69fe6c70", "patch": "@@ -1157,17 +1157,6 @@ struct tree_vec GTY(())\n #define REF_ORIGINAL(NODE) TREE_CHAIN (TREE_CHECK3 (NODE, \t\\\n \tINDIRECT_REF, ALIGN_INDIRECT_REF, MISALIGNED_INDIRECT_REF))\n \n-/* In a LABELED_BLOCK_EXPR node.  */\n-#define LABELED_BLOCK_LABEL(NODE) \\\n-  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 0)\n-#define LABELED_BLOCK_BODY(NODE) \\\n-  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 1)\n-\n-/* In an EXIT_BLOCK_EXPR node.  */\n-#define EXIT_BLOCK_LABELED_BLOCK(NODE) \\\n-  TREE_OPERAND_CHECK_CODE (NODE, EXIT_BLOCK_EXPR, 0)\n-#define EXIT_BLOCK_RETURN(NODE) TREE_OPERAND_CHECK_CODE (NODE, EXIT_BLOCK_EXPR, 1)\n-\n /* In a LOOP_EXPR node.  */\n #define LOOP_EXPR_BODY(NODE) TREE_OPERAND_CHECK_CODE (NODE, LOOP_EXPR, 0)\n "}]}