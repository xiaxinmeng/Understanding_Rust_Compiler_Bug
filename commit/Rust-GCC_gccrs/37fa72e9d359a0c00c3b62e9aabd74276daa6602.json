{"sha": "37fa72e9d359a0c00c3b62e9aabd74276daa6602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdmYTcyZTlkMzU5YTBjMDBjM2I2MmU5YWFiZDc0Mjc2ZGFhNjYwMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-30T19:36:25Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-30T19:36:25Z"}, "message": "c-common.c (enum c_language_kind, flag_objc): Remove.\n\n\t* c-common.c (enum c_language_kind, flag_objc): Remove.\n\t(fix_string_type, check_case_value, c_common_nodes_and_builtins,\n\tc_add_case_label, finish_label_addr_expr, boolean_increment):\n\tUse c_dialect_ macros.\n\t* c-common.h (enum c_language_kind): Extend.\n\t(c_dialect_cxx, c_dialect_objc): New.\n\t(flag_objc): Remove.\n\t(c_common_init_options): Update prototype.\n\t* c-cppbuiltin.c (define__GNUC__, c_cpp_builtins): Use c_dialect_\n\tmacros.\n\t* c-decl.c (finsih_decl, grokfield, finish_struct): Use c_dialect_\n\tmacros.\n\t* c-format.c (C_STD_VER, C_STD_NAME): Similarly.\n\t* c-lang.c (c_init_options): Remove.\n\t(c_language): Define.\n\t(LANG_HOOKS_INIT_OPTIONS): Use common hook.\n\t* c-lex.c (lex_charconst): Use c_dialect_cxx().\n\t* c-opts.c (lang_flags): Make function-local.\n\t(c_common_init_options): Use c_dialect_ macros.  Handle\n\tC++ diagnostic requirements.\n\t(c_common_handle_option, c_common_post_options): Use flag_cxx.\n\t* c-parse.in (init_reswords): Use c_dialect_objc ().\n\t* c-pch.c (get_ident): Use c_language.\n\t* c-pretty-print.c (pp_c_bool_literal): Use c_dialect_ macros.\n\t* c-typeck.c (comptypes, build_c_cast): Similarly.\n\t* objc/objc-lang.c (c_language): Define.\n\t(LANG_HOOKS_INIT_OPTIONS): Use common hook.\n\t(objc_init_options): Remove.\ncp:\n\t* Make-lang.in: Update.\n\t* cp-lang.c (c_language): Define.\n\t(LANG_HOOKS_INIT_OPTIONS): Use common hook.\n\t* cp-tree.h (cxx_init_options): Remove.\n\t* lex.c: Don't include diagnostic.h.\n\t(cxx_init_options): Remove.\n\nFrom-SVN: r68734", "tree": {"sha": "01d40120cc52c2574f790a44609bf19f0551b019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01d40120cc52c2574f790a44609bf19f0551b019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37fa72e9d359a0c00c3b62e9aabd74276daa6602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37fa72e9d359a0c00c3b62e9aabd74276daa6602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37fa72e9d359a0c00c3b62e9aabd74276daa6602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37fa72e9d359a0c00c3b62e9aabd74276daa6602/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4497827651d07fa10006fbac4cf63a92cf83c2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4497827651d07fa10006fbac4cf63a92cf83c2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4497827651d07fa10006fbac4cf63a92cf83c2a2"}], "stats": {"total": 244, "additions": 122, "deletions": 122}, "files": [{"sha": "b94a8713fe1174507fe9f68e34d31894956c1a54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -1,3 +1,34 @@\n+2003-06-30  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.c (enum c_language_kind, flag_objc): Remove.\n+\t(fix_string_type, check_case_value, c_common_nodes_and_builtins,\n+\tc_add_case_label, finish_label_addr_expr, boolean_increment):\n+\tUse c_dialect_ macros.\n+\t* c-common.h (enum c_language_kind): Extend.\n+\t(c_dialect_cxx, c_dialect_objc): New.\n+\t(flag_objc): Remove.\n+\t(c_common_init_options): Update prototype.\n+\t* c-cppbuiltin.c (define__GNUC__, c_cpp_builtins): Use c_dialect_\n+\tmacros.\n+\t* c-decl.c (finsih_decl, grokfield, finish_struct): Use c_dialect_\n+\tmacros.\n+\t* c-format.c (C_STD_VER, C_STD_NAME): Similarly.\n+\t* c-lang.c (c_init_options): Remove.\n+\t(c_language): Define.\n+\t(LANG_HOOKS_INIT_OPTIONS): Use common hook.\n+\t* c-lex.c (lex_charconst): Use c_dialect_ macros.\n+\t* c-opts.c (lang_flags): Make function-local.\n+\t(c_common_init_options): Use c_dialect_ macros.  Handle\n+\tC++ diagnostic requirements.\n+\t(c_common_handle_option, c_common_post_options): Use flag_cxx.\n+\t* c-parse.in (init_reswords): Use c_dialect_objc ().\n+\t* c-pch.c (get_ident): Use c_language.\n+\t* c-pretty-print.c (pp_c_bool_literal): Use c_dialect_ macros.\n+\t* c-typeck.c (comptypes, build_c_cast): Similarly.\n+\t* objc/objc-lang.c (c_language): Define.\n+\t(LANG_HOOKS_INIT_OPTIONS): Use common hook.\n+\t(objc_init_options): Remove.\n+\n 2003-06-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/alpha/alpha.h (FUNCTION_ARG_PADDING): Remove."}, {"sha": "9e037658507a50c48c8b74c208260daa451d7f01", "filename": "gcc/c-common.c", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -87,10 +87,6 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \t\t\t: \"long long unsigned int\"))\n #endif\n \n-/* The variant of the C language being processed.  */\n-\n-enum c_language_kind c_language;\n-\n /* The following symbols are subsumed in the c_global_trees array, and\n    listed here individually for documentation purposes.\n \n@@ -228,9 +224,6 @@ const char *pch_file;\n    user's namespace.  */\n int flag_iso;\n \n-/* Nonzero whenever Objective-C functionality is being used.  */\n-int flag_objc;\n-\n /* Nonzero if -undef was given.  It suppresses target built-in macros\n    and assertions.  */\n int flag_undef;\n@@ -1166,7 +1159,7 @@ fix_string_type (tree value)\n   /* Compute the number of elements, for the array type.  */\n   nchars = wide_flag ? length / wchar_bytes : length;\n \n-  if (pedantic && nchars - 1 > nchars_max && c_language == clk_c)\n+  if (pedantic && nchars - 1 > nchars_max && !c_dialect_cxx ())\n     pedwarn (\"string length `%d' is greater than the length `%d' ISO C%d compilers are required to support\",\n \t     nchars - 1, nchars_max, flag_isoc99 ? 99 : 89);\n \n@@ -1868,7 +1861,7 @@ check_case_value (tree value)\n        switch (...) { case i: ... }\n \n      So, we try to reduce the VALUE to a constant that way.  */\n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     {\n       value = decl_constant_value (value);\n       STRIP_TYPE_NOPS (value);\n@@ -3155,25 +3148,25 @@ c_common_nodes_and_builtins (void)\n   /* `signed' is the same as `int'.  FIXME: the declarations of \"signed\",\n      \"unsigned long\", \"long long unsigned\" and \"unsigned short\" were in C++\n      but not C.  Are the conditionals here needed?  */\n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     record_builtin_type (RID_SIGNED, NULL, integer_type_node);\n   record_builtin_type (RID_LONG, \"long int\", long_integer_type_node);\n   record_builtin_type (RID_UNSIGNED, \"unsigned int\", unsigned_type_node);\n   record_builtin_type (RID_MAX, \"long unsigned int\",\n \t\t       long_unsigned_type_node);\n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     record_builtin_type (RID_MAX, \"unsigned long\", long_unsigned_type_node);\n   record_builtin_type (RID_MAX, \"long long int\",\n \t\t       long_long_integer_type_node);\n   record_builtin_type (RID_MAX, \"long long unsigned int\",\n \t\t       long_long_unsigned_type_node);\n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     record_builtin_type (RID_MAX, \"long long unsigned\",\n \t\t\t long_long_unsigned_type_node);\n   record_builtin_type (RID_SHORT, \"short int\", short_integer_type_node);\n   record_builtin_type (RID_MAX, \"short unsigned int\",\n \t\t       short_unsigned_type_node);\n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     record_builtin_type (RID_MAX, \"unsigned short\",\n \t\t\t short_unsigned_type_node);\n \n@@ -3334,7 +3327,7 @@ c_common_nodes_and_builtins (void)\n   wchar_type_node = get_identifier (MODIFIED_WCHAR_TYPE);\n   wchar_type_node = TREE_TYPE (identifier_global_value (wchar_type_node));\n   wchar_type_size = TYPE_PRECISION (wchar_type_node);\n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     {\n       if (TREE_UNSIGNED (wchar_type_node))\n \twchar_type_node = make_unsigned_type (wchar_type_size);\n@@ -3954,12 +3947,7 @@ c_add_case_label (splay_tree cases, tree cond, tree low_value,\n \n   /* Case ranges are a GNU extension.  */\n   if (high_value && pedantic)\n-    {\n-      if (c_language == clk_cplusplus)\n-\tpedwarn (\"ISO C++ forbids range expressions in switch statements\");\n-      else\n-\tpedwarn (\"ISO C forbids range expressions in switch statements\");\n-    }\n+    pedwarn (\"range expressions in switch statements are non-standard\");\n \n   type = TREE_TYPE (cond);\n   if (low_value)\n@@ -4076,12 +4064,7 @@ finish_label_address_expr (tree label)\n   tree result;\n \n   if (pedantic)\n-    {\n-      if (c_language == clk_cplusplus)\n-\tpedwarn (\"ISO C++ forbids taking the address of a label\");\n-      else\n-\tpedwarn (\"ISO C forbids taking the address of a label\");\n-    }\n+    pedwarn (\"taking the address of a label is non-standard\");\n \n   if (label == error_mark_node)\n     return error_mark_node;\n@@ -4550,9 +4533,8 @@ tree\n boolean_increment (enum tree_code code, tree arg)\n {\n   tree val;\n-  tree true_res = (c_language == clk_cplusplus\n-\t\t   ? boolean_true_node\n-\t\t   : c_bool_true_node);\n+  tree true_res = (c_dialect_cxx () ? boolean_true_node : c_bool_true_node);\n+\n   arg = stabilize_reference (arg);\n   switch (code)\n     {"}, {"sha": "0843e11e85830b2435531c6eac2eeabc8490e532", "filename": "gcc/c-common.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -233,11 +233,20 @@ extern GTY(()) tree c_global_trees[CTI_MAX];\n \n typedef enum c_language_kind\n {\n-  clk_c = 0,      /* A dialect of C: K&R C, ANSI/ISO C89, C2000, etc.  */\n-  clk_cplusplus   /* ANSI/ISO C++ */\n+  clk_c\t\t= 0,\t\t/* C90, C94 or C99 */\n+  clk_objc\t= 1,\t\t/* clk_c with ObjC features.  */\n+  clk_cxx\t= 2,\t\t/* ANSI/ISO C++ */\n+  clk_objcxx\t= 3\t\t/* clk_cxx with ObjC features.  */\n }\n c_language_kind;\n \n+/* To test for a specific language use c_language, defined by each\n+   front end.  For \"ObjC features\" or \"not C++\" use the macros.  */\n+extern c_language_kind c_language;\n+\n+#define c_dialect_cxx()\t\t(c_language & clk_cxx)\n+#define c_dialect_objc()\t(c_language & clk_objc)\n+\n /* Information about a statement tree.  */\n \n struct stmt_tree_s GTY(()) {\n@@ -351,11 +360,6 @@ struct c_lang_decl GTY(()) {\n #define DECL_NUM_STMTS(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->decl.u1.i)\n \n-/* The variant of the C language being processed.  Each C language\n-   front-end defines this variable.  */\n-\n-extern c_language_kind c_language;\n-\n /* Nonzero if we can read a PCH file now.  */\n \n extern int allow_pch;\n@@ -394,9 +398,6 @@ extern const char *pch_file;\n \n extern int flag_iso;\n \n-/* Nonzero whenever Objective-C functionality is being used.  */\n-extern int flag_objc;\n-\n /* Nonzero if -undef was given.  It suppresses target built-in macros\n    and assertions.  */\n \n@@ -952,7 +953,7 @@ extern void disable_builtin_function (const char *);\n \n extern tree build_va_arg (tree, tree);\n \n-extern int c_common_init_options (enum c_language_kind);\n+extern int c_common_init_options (void);\n extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);\n extern void c_common_finish (void);"}, {"sha": "879d731268a3f5a94320539785ee28550a98a381", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -255,7 +255,7 @@ define__GNUC__ (void)\n   while (ISDIGIT (*v))\n     v++;\n   builtin_define_with_value_n (\"__GNUC__\", q, v - q);\n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     builtin_define_with_value_n (\"__GNUG__\", q, v - q);\n \n   if (*v != '.' || !ISDIGIT (v[1]))\n@@ -294,7 +294,7 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* For stddef.h.  They require macros defined in c-common.c.  */\n   c_stddef_cpp_builtins ();\n \n-  if (c_language == clk_cplusplus)\n+  if (c_dialect_cxx ())\n     {\n       if (SUPPORTS_ONE_ONLY)\n \tcpp_define (pfile, \"__GXX_WEAK__=1\");\n@@ -375,11 +375,11 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (!flag_signed_char)\n     cpp_define (pfile, \"__CHAR_UNSIGNED__\");\n \n-  if (c_language == clk_cplusplus && TREE_UNSIGNED (wchar_type_node))\n+  if (c_dialect_cxx () && TREE_UNSIGNED (wchar_type_node))\n     cpp_define (pfile, \"__WCHAR_UNSIGNED__\");\n \n   /* Make the choice of ObjC runtime visible to source code.  */\n-  if (flag_objc && flag_next_runtime)\n+  if (c_dialect_objc () && flag_next_runtime)\n     cpp_define (pfile, \"__NEXT_RUNTIME__\");\n \n   /* A straightforward target hook doesn't work, because of problems"}, {"sha": "70d31fe176fd0f540b94ab307e15fb6d51ebd92d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -2863,7 +2863,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n   if (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n-      if (flag_objc)\n+      if (c_dialect_objc ())\n \tobjc_check_decl (decl);\n \n       if (!DECL_CONTEXT (decl))\n@@ -2927,7 +2927,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n   if (TREE_CODE (decl) == TYPE_DECL)\n     {\n       /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n-      if (flag_objc)\n+      if (c_dialect_objc ())\n \tobjc_check_decl (decl);\n       rest_of_decl_compilation (decl, NULL, DECL_CONTEXT (decl) == 0, 0);\n     }\n@@ -4864,7 +4864,7 @@ grokfield (tree declarator, tree declspecs, tree width)\n   finish_decl (value, NULL_TREE, NULL_TREE);\n   DECL_INITIAL (value) = width;\n \n-  if (flag_objc)\n+  if (c_dialect_objc ())\n     objc_check_decl (value);\n   return value;\n }\n@@ -5160,7 +5160,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n \t    {\n \t      layout_decl (decl, 0);\n \t      /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n-\t      if (flag_objc)\n+\t      if (c_dialect_objc ())\n \t\tobjc_check_decl (decl);\n \t      rest_of_decl_compilation (decl, NULL, toplevel, 0);\n \t      if (! toplevel)\n@@ -5183,7 +5183,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n \t\t  if (TREE_CODE (decl) != TYPE_DECL)\n \t\t    {\n \t\t      layout_decl (decl, 0);\n-\t\t      if (flag_objc)\n+\t\t      if (c_dialect_objc ())\n \t\t\tobjc_check_decl (decl);\n \t\t      rest_of_decl_compilation (decl, NULL, toplevel, 0);\n \t\t      if (! toplevel)"}, {"sha": "5fa06f472679d8780335e709bcd8c312343a063d", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -261,15 +261,15 @@ enum format_std_version\n    or inheriting from, for the purpose of format features supported.  */\n #define CPLUSPLUS_STD_VER\tSTD_C94\n /* The C standard version we are checking formats against when pedantic.  */\n-#define C_STD_VER\t\t((int)(c_language == clk_cplusplus\t  \\\n+#define C_STD_VER\t\t((int)(c_dialect_cxx ()\t\t\t  \\\n \t\t\t\t ? CPLUSPLUS_STD_VER\t\t\t  \\\n \t\t\t\t : (flag_isoc99\t\t\t\t  \\\n \t\t\t\t    ? STD_C99\t\t\t\t  \\\n \t\t\t\t    : (flag_isoc94 ? STD_C94 : STD_C89))))\n /* The name to give to the standard version we are warning about when\n    pedantic.  FEATURE_VER is the version in which the feature warned out\n    appeared, which is higher than C_STD_VER.  */\n-#define C_STD_NAME(FEATURE_VER) (c_language == clk_cplusplus\t\\\n+#define C_STD_NAME(FEATURE_VER) (c_dialect_cxx ()\t\t\\\n \t\t\t\t ? \"ISO C++\"\t\t\t\\\n \t\t\t\t : ((FEATURE_VER) == STD_EXT\t\\\n \t\t\t\t    ? \"ISO C\"\t\t\t\\"}, {"sha": "5da15e5fa3c1609e46867e7d2063f7ea0fdf6bdd", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -31,7 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n-static int c_init_options (void);\n+enum c_language_kind c_language = clk_c;\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n \n@@ -42,7 +42,7 @@ static int c_init_options (void);\n #undef LANG_HOOKS_FINISH\n #define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n-#define LANG_HOOKS_INIT_OPTIONS c_init_options\n+#define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_POST_OPTIONS\n@@ -159,12 +159,6 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n-static int\n-c_init_options (void)\n-{\n-  return c_common_init_options (clk_c);\n-}\n-\n /* Used by c-lex.c, but only for objc.  */\n \n tree"}, {"sha": "2cca2313c2fe0640c86ac6c6829c7c1378aa7952", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -665,7 +665,7 @@ lex_charconst (const cpp_token *token)\n     type = wchar_type_node;\n   /* In C, a character constant has type 'int'.\n      In C++ 'char', but multi-char charconsts have type 'int'.  */\n-  else if ((c_language == clk_c) || chars_seen > 1)\n+  else if (!c_dialect_cxx () || chars_seen > 1)\n     type = integer_type_node;\n   else\n     type = char_type_node;"}, {"sha": "09c58b91569a37d8f6be2901de0122a36d403ee5", "filename": "gcc/c-opts.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -50,8 +50,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n # define TARGET_EBCDIC 0\n #endif\n \n-static const int lang_flags[] = {CL_C, CL_ObjC, CL_CXX, CL_ObjCXX};\n-\n static int saved_lineno;\n \n /* CPP's options.  */\n@@ -213,25 +211,38 @@ defer_opt (enum opt_code code, const char *arg)\n \n /* Common initialization before parsing options.  */\n int\n-c_common_init_options (enum c_language_kind lang)\n+c_common_init_options (void)\n {\n-  c_language = lang;\n-  parse_in = cpp_create_reader (lang == clk_c ? CLK_GNUC89 : CLK_GNUCXX,\n+  static const int lang_flags[] = {CL_C, CL_ObjC, CL_CXX, CL_ObjCXX};\n+\n+  /* This is conditionalized only because that is the way the front\n+     ends used to do it.  Maybe this should be unconditional?  */\n+  if (c_dialect_cxx ())\n+    {\n+      /* By default wrap lines at 80 characters.  Is getenv\n+\t (\"COLUMNS\") preferable?  */\n+      diagnostic_line_cutoff (global_dc) = 80;\n+      /* By default, emit location information once for every\n+\t diagnostic message.  */\n+      diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+    }\n+\n+  parse_in = cpp_create_reader (c_dialect_cxx () ? CLK_GNUCXX: CLK_GNUC89,\n \t\t\t\tident_hash);\n+\n   cpp_opts = cpp_get_options (parse_in);\n   cpp_opts->dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n+  cpp_opts->objc = c_dialect_objc ();\n \n   /* Reset to avoid warnings on internal definitions.  We set it just\n      before passing on command-line options to cpplib.  */\n   cpp_opts->warn_dollars = 0;\n \n-  if (flag_objc)\n-    cpp_opts->objc = 1;\n-\n-  flag_const_strings = (lang == clk_cplusplus);\n-  warn_pointer_arith = (lang == clk_cplusplus);\n+  flag_const_strings = c_dialect_cxx ();\n+  flag_exceptions = c_dialect_cxx ();\n+  warn_pointer_arith = c_dialect_cxx ();\n \n-  return lang_flags[(c_language << 1) + flag_objc];\n+  return lang_flags[c_language];\n }\n \n /* Handle switch SCODE with argument ARG.  ON is true, unless no-\n@@ -366,7 +377,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       warn_parentheses = value;\n       warn_return_type = value;\n       warn_sequence_point = value;\t/* Was C only.  */\n-      if (c_language == clk_cplusplus)\n+      if (c_dialect_cxx ())\n \twarn_sign_compare = value;\n       warn_switch = value;\n       warn_strict_aliasing = value;\n@@ -381,7 +392,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       if (warn_uninitialized != 1)\n \twarn_uninitialized = (value ? 2 : 0);\n \n-      if (c_language == clk_c)\n+      if (!c_dialect_cxx ())\n \t/* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n \t   can turn it off only if it's not explicit.  */\n \twarn_main = value * 2;\n@@ -644,14 +655,14 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_Wwrite_strings:\n-      if (c_language == clk_c)\n+      if (!c_dialect_cxx ())\n \tflag_const_strings = value;\n       else\n \twarn_write_strings = value;\n       break;\n \n     case OPT_ansi:\n-      if (c_language == clk_c)\n+      if (!c_dialect_cxx ())\n \tset_std_c89 (false, true);\n       else\n \tset_std_cxx98 (true);\n@@ -662,7 +673,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_fcond_mismatch:\n-      if (c_language == clk_c)\n+      if (!c_dialect_cxx ())\n \t{\n \t  flag_cond_mismatch = value;\n \t  break;\n@@ -1053,8 +1064,7 @@ c_common_post_options (const char **pfilename)\n   sanitize_cpp_opts ();\n \n   register_include_chains (parse_in, sysroot, iprefix,\n-\t\t\t   std_inc, std_cxx_inc && c_language == clk_cplusplus,\n-\t\t\t   verbose);\n+\t\t\t   std_inc, std_cxx_inc && c_dialect_cxx (), verbose);\n \n   flag_inline_trees = 1;\n "}, {"sha": "55d06b4030c7de066ca775a44e26c09f673379ac", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -3551,7 +3551,7 @@ init_reswords ()\n   int mask = (flag_isoc99 ? 0 : D_C89)\n \t      | (flag_no_asm ? (flag_isoc99 ? D_EXT : D_EXT|D_EXT89) : 0);\n \n-  if (!flag_objc)\n+  if (!c_dialect_objc ())\n      mask |= D_OBJC;\n \n   ridpointers = (tree *) ggc_calloc ((int) RID_MAX, sizeof (tree));"}, {"sha": "2cd9b9d1a2dae152e9e6afd4caef603f5c4289d7", "filename": "gcc/c-pch.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -60,14 +60,11 @@ get_ident(void)\n {\n   static char result[IDENT_LENGTH];\n   static const char template[IDENT_LENGTH] = \"gpch.011\";\n+  static const char c_language_chars[] = \"Co+O\";\n   \n   memcpy (result, template, IDENT_LENGTH);\n-  if (c_language == clk_c)\n-    result[4] = flag_objc ? 'o' : 'C';\n-  else if (c_language == clk_cplusplus)\n-    result[4] = flag_objc ? 'O' : '+';\n-  else\n-    abort ();\n+  result[4] = c_language_chars[c_language];\n+\n   return result;\n }\n "}, {"sha": "3fd9f55083ca450e86c5ccc91fcf8c51d8fb8adf", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -336,18 +336,18 @@ pp_c_bool_literal (c_pretty_printer ppi, tree b)\n {\n   if (b == boolean_false_node || integer_zerop (b))\n     {\n-      if (c_language == clk_cplusplus)\n+      if (c_dialect_cxx ())\n \tpp_c_identifier (ppi, \"false\");\n-      else if (c_language == clk_c && flag_isoc99)\n+      else if (flag_isoc99)\n \tpp_c_identifier (ppi, \"_False\");\n       else\n \tpp_unsupported_tree (ppi, b);\n     }\n   else if (b == boolean_true_node)\n     {\n-      if (c_language == clk_cplusplus)\n+      if (c_dialect_cxx ())\n \tpp_c_identifier (ppi, \"true\");\n-      else if (c_language == clk_c && flag_isoc99)\n+      else if (flag_isoc99)\n \tpp_c_identifier (ppi, \"_True\");\n       else\n \tpp_unsupported_tree (ppi, b);"}, {"sha": "a6213e2faf9bd1e0f94e725b4cd11bec96d60b1d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -560,7 +560,7 @@ comptypes (tree type1, tree type2)\n       }\n \n     case RECORD_TYPE:\n-      if (flag_objc && objc_comptypes (t1, t2, 0) == 1)\n+      if (c_dialect_objc () && objc_comptypes (t1, t2, 0) == 1)\n \tval = 1;\n       break;\n \n@@ -3492,7 +3492,7 @@ build_c_cast (tree type, tree expr)\n   /* The ObjC front-end uses TYPE_MAIN_VARIANT to tie together types differing\n      only in <protocol> qualifications.  But when constructing cast expressions,\n      the protocols do matter and must be kept around.  */\n-  if (!flag_objc || !objc_is_id (type))\n+  if (!c_dialect_objc () || !objc_is_id (type))\n     type = TYPE_MAIN_VARIANT (type);\n \n   if (TREE_CODE (type) == ARRAY_TYPE)\n@@ -3902,7 +3902,7 @@ convert_for_assignment (tree type, tree rhs, const char *errtype, tree fundecl,\n       /* Check for Objective-C protocols.  This will automatically\n \t issue a warning if there are protocol violations.  No need to\n \t use the return value.  */\n-      if (flag_objc)\n+      if (c_dialect_objc ())\n \tobjc_comptypes (type, rhstype, 0);\n       return rhs;\n     }"}, {"sha": "040582dc6cd8999a37a954bd10d71f682486b92c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -1,3 +1,12 @@\n+2003-06-30  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Make-lang.in: Update.\n+\t* cp-lang.c (c_language): Define.\n+\t(LANG_HOOKS_INIT_OPTIONS): Use common hook.\n+\t* cp-tree.h (cxx_init_options): Remove.\n+\t* lex.c: Don't include diagnostic.h.\n+\t(cxx_init_options): Remove.\n+\n 2003-06-30  Giovanni Bajo  <giovannibajo@libero.it>\n \n         PR c++/4933"}, {"sha": "2ca563467a01d135ec78e4b9f5a45b385e70d02d", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -232,8 +232,7 @@ CXX_TREE_H = $(TREE_H) cp/name-lookup.h cp/cp-tree.h c-common.h \\\n \t$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h\n \n cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) flags.h cp/lex.h \\\n-  c-pragma.h toplev.h output.h input.h diagnostic.h \\\n-  cp/operators.def $(TM_P_H)\n+  c-pragma.h toplev.h output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h langhooks.h \\\n   $(LANGHOOKS_DEF_H) c-common.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) flags.h cp/lex.h cp/decl.h stack.h \\"}, {"sha": "f26317bb22f501ba1e154623efcb1b6130603fbd", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -30,6 +30,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n+enum c_language_kind c_language = clk_cxx;\n+\n static HOST_WIDE_INT cxx_get_alias_set (tree);\n static bool ok_to_generate_alias_set_for_type (tree);\n static bool cxx_warn_unused_global_decl (tree);\n@@ -48,7 +50,7 @@ static bool cp_var_mod_type_p (tree);\n #undef LANG_HOOKS_CLEAR_BINDING_STACK\n #define LANG_HOOKS_CLEAR_BINDING_STACK pop_everything\n #undef LANG_HOOKS_INIT_OPTIONS\n-#define LANG_HOOKS_INIT_OPTIONS cxx_init_options\n+#define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_POST_OPTIONS"}, {"sha": "cb0bdfcc8038f96d86d9b575d7f04ca60ee46839", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -3905,7 +3905,6 @@ extern void yyhook\t\t\t\t(int);\n extern int cp_type_qual_from_rid                (tree);\n extern bool cxx_init\t\t\t\t(void);\n extern void cxx_finish (void);\n-extern int cxx_init_options (void);\n \n /* in method.c */\n extern void init_method\t(void);"}, {"sha": "a3f287878d2628671d6cb18a5bfc1a44c6291cd2", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -38,7 +38,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"tm_p.h\"\n #include \"timevar.h\"\n-#include \"diagnostic.h\"\n \n static int interface_strcmp (const char *);\n static void init_cp_pragma (void);\n@@ -147,22 +146,6 @@ int interface_unknown;\t\t/* whether or not we know this class\n \t\t\t\t   to behave according to #pragma interface.  */\n \n \f\n-/* Initialization before switch parsing.  */\n-int\n-cxx_init_options (void)\n-{\n-  /* Default exceptions on.  */\n-  flag_exceptions = 1;\n-  /* By default wrap lines at 80 characters.  Is getenv (\"COLUMNS\")\n-     preferable?  */\n-  diagnostic_line_cutoff (global_dc) = 80;\n-  /* By default, emit location information once for every\n-     diagnostic message.  */\n-  diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n-\n-  return c_common_init_options (clk_cplusplus);\n-}\n-\n void\n cxx_finish (void)\n {"}, {"sha": "4457ee84ceb1bbd3c4e06a6678e8e6d9e3b3bc89", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fa72e9d359a0c00c3b62e9aabd74276daa6602/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=37fa72e9d359a0c00c3b62e9aabd74276daa6602", "patch": "@@ -31,7 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n \n-static int objc_init_options                   PARAMS ((void));\n+enum c_language_kind c_language = clk_objc;\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU Objective-C\"\n@@ -40,7 +40,7 @@ static int objc_init_options                   PARAMS ((void));\n #undef LANG_HOOKS_FINISH\n #define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n-#define LANG_HOOKS_INIT_OPTIONS objc_init_options\n+#define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_POST_OPTIONS\n@@ -165,10 +165,3 @@ const char * const tree_code_name[] = {\n #include \"objc-tree.def\"\n };\n #undef DEFTREECODE\n-\n-static int \n-objc_init_options ()\n-{\n-  flag_objc = 1;\n-  return c_common_init_options (clk_c);\n-}"}]}