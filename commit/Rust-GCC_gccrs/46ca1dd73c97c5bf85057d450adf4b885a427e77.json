{"sha": "46ca1dd73c97c5bf85057d450adf4b885a427e77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjYTFkZDczYzk3YzViZjg1MDU3ZDQ1MGFkZjRiODg1YTQyN2U3Nw==", "commit": {"author": {"name": "Tom Honermann", "email": "tom@honermann.net", "date": "2019-02-19T02:55:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-19T02:55:05Z"}, "message": "P0482R5 char8_t: New standard library tests\n\n2019-02-19  Tom Honermann  <tom@honermann.net>\n\n\t* testsuite/18_support/numeric_limits/char8_t.cc: New test cloned\n\tfrom char16_32_t.cc; validates numeric_limits<char8_t>.\n\t* testsuite/21_strings/basic_string/literals/types-char8_t.cc: New\n\ttest cloned from types.cc; validates operator\"\"s for char8_t\n\treturns u8string.\n\t* testsuite/21_strings/basic_string/literals/values-char8_t.cc: New\n\ttest cloned from values.cc; validates construction and comparison\n\tof u8string values.\n\t* testsuite/21_strings/basic_string/requirements/\n\t/explicit_instantiation/char8_t/1.cc: New test cloned from\n\tchar16_t/1.cc; validates explicit instantiation of\n\tbasic_string<char8_t>.\n\t* testsuite/21_strings/basic_string_view/literals/types-char8_t.cc:\n\tNew test cloned from types.cc; validates operator\"\"sv for char8_t\n\treturns u8string_view.\n\t* testsuite/21_strings/basic_string_view/literals/\n\tvalues-char8_t.cc: New test cloned from values.cc; validates\n\tconstruction and comparison of u8string_view values.\n\t* testsuite/21_strings/basic_string_view/requirements/\n\texplicit_instantiation/char8_t/1.cc: New test cloned from\n\tchar16_t/1.cc; validates explicit instantiation of\n\tbasic_string_view<char8_t>.\n\t* testsuite/21_strings/char_traits/requirements/char8_t/65049.cc:\n\tNew test cloned from char16_t/65049.cc; validates that\n\tchar_traits<char8_t> is not vulnerable to the concerns in PR65049.\n\t* testsuite/21_strings/char_traits/requirements/char8_t/\n\ttypedefs.cc: New test cloned from char16_t/typedefs.cc; validates\n\tthat char_traits<char8_t> member typedefs are present and correct.\n\t* testsuite/21_strings/char_traits/requirements/\n\texplicit_instantiation/char8_t/1.cc: New test cloned from\n\tchar16_t/1.cc; validates explicit instantiation of\n\tchar_traits<char8_t>.\n\t* testsuite/22_locale/codecvt/char16_t-char8_t.cc: New test cloned\n\tfrom char16_t.cc: validates\n\tcodecvt<char16_t, char8_t, mbstate_t>.\n\t* testsuite/22_locale/codecvt/char32_t-char8_t.cc: New test cloned\n\tfrom char32_t.cc: validates\n\tcodecvt<char32_t, char8_t, mbstate_t>.\n\t* testsuite/22_locale/codecvt/utf8-char8_t.cc: New test cloned from\n\tutf8.cc; validates codecvt<char16_t, char8_t, std::mbstate_t> and\n\tcodecvt<char32_t, char8_t, std::mbstate_t>.\n\t* testsuite/27_io/filesystem/path/native/string-char8_t.cc: New\n\ttest cloned from string.cc; validates filesystem::path construction\n\tfrom char8_t input.\n\t* testsuite/experimental/feat-char8_t.cc: New test; validates that\n\tthe __cpp_lib_char8_t feature test macro is defined with the\n\tcorrect value.\n\t* testsuite/experimental/filesystem/path/native/string-char8_t.cc:\n\tNew test cloned from string.cc; validates filesystem::path\n\tconstruction from char8_t input.\n\t* testsuite/experimental/string_view/literals/types-char8_t.cc: New\n\ttest cloned from types.cc; validates operator\"\"sv for char8_t\n\treturns u8string_view.\n\t* testsuite/experimental/string_view/literals/values-char8_t.cc:\n\tNew test cloned from values.cc; validates construction and\n\tcomparison of u8string_view values.\n\t* testsuite/experimental/string_view/requirements/\n\texplicit_instantiation/char8_t/1.cc: New test cloned from\n\tchar16_t/1.cc; validates explicit instantiation of\n\tbasic_string_view<char8_t>.\n\t* testsuite/ext/char8_t/atomic-1.cc: New test; validates that\n\tATOMIC_CHAR8_T_LOCK_FREE is not defined if char8_t support is not\n\tenabled.\n\nFrom-SVN: r269005", "tree": {"sha": "bb7dac034e30fbbe342d837c64f61962be6db738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb7dac034e30fbbe342d837c64f61962be6db738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ca1dd73c97c5bf85057d450adf4b885a427e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ca1dd73c97c5bf85057d450adf4b885a427e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ca1dd73c97c5bf85057d450adf4b885a427e77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ca1dd73c97c5bf85057d450adf4b885a427e77/comments", "author": {"login": "tahonermann", "id": 2211804, "node_id": "MDQ6VXNlcjIyMTE4MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2211804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tahonermann", "html_url": "https://github.com/tahonermann", "followers_url": "https://api.github.com/users/tahonermann/followers", "following_url": "https://api.github.com/users/tahonermann/following{/other_user}", "gists_url": "https://api.github.com/users/tahonermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tahonermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tahonermann/subscriptions", "organizations_url": "https://api.github.com/users/tahonermann/orgs", "repos_url": "https://api.github.com/users/tahonermann/repos", "events_url": "https://api.github.com/users/tahonermann/events{/privacy}", "received_events_url": "https://api.github.com/users/tahonermann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c124af936b6b225eb548ccdd7f01400511d784dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c124af936b6b225eb548ccdd7f01400511d784dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c124af936b6b225eb548ccdd7f01400511d784dc"}], "stats": {"total": 1165, "additions": 1165, "deletions": 0}, "files": [{"sha": "fd9ad8fc3891606082cdfc09185617cc07b816b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -1,3 +1,69 @@\n+2019-02-19  Tom Honermann  <tom@honermann.net>\n+\n+\t* testsuite/18_support/numeric_limits/char8_t.cc: New test cloned\n+\tfrom char16_32_t.cc; validates numeric_limits<char8_t>.\n+\t* testsuite/21_strings/basic_string/literals/types-char8_t.cc: New\n+\ttest cloned from types.cc; validates operator\"\"s for char8_t\n+\treturns u8string.\n+\t* testsuite/21_strings/basic_string/literals/values-char8_t.cc: New\n+\ttest cloned from values.cc; validates construction and comparison\n+\tof u8string values.\n+\t* testsuite/21_strings/basic_string/requirements/\n+\t/explicit_instantiation/char8_t/1.cc: New test cloned from\n+\tchar16_t/1.cc; validates explicit instantiation of\n+\tbasic_string<char8_t>.\n+\t* testsuite/21_strings/basic_string_view/literals/types-char8_t.cc:\n+\tNew test cloned from types.cc; validates operator\"\"sv for char8_t\n+\treturns u8string_view.\n+\t* testsuite/21_strings/basic_string_view/literals/\n+\tvalues-char8_t.cc: New test cloned from values.cc; validates\n+\tconstruction and comparison of u8string_view values.\n+\t* testsuite/21_strings/basic_string_view/requirements/\n+\texplicit_instantiation/char8_t/1.cc: New test cloned from\n+\tchar16_t/1.cc; validates explicit instantiation of\n+\tbasic_string_view<char8_t>.\n+\t* testsuite/21_strings/char_traits/requirements/char8_t/65049.cc:\n+\tNew test cloned from char16_t/65049.cc; validates that\n+\tchar_traits<char8_t> is not vulnerable to the concerns in PR65049.\n+\t* testsuite/21_strings/char_traits/requirements/char8_t/\n+\ttypedefs.cc: New test cloned from char16_t/typedefs.cc; validates\n+\tthat char_traits<char8_t> member typedefs are present and correct.\n+\t* testsuite/21_strings/char_traits/requirements/\n+\texplicit_instantiation/char8_t/1.cc: New test cloned from\n+\tchar16_t/1.cc; validates explicit instantiation of\n+\tchar_traits<char8_t>.\n+\t* testsuite/22_locale/codecvt/char16_t-char8_t.cc: New test cloned\n+\tfrom char16_t.cc: validates\n+\tcodecvt<char16_t, char8_t, mbstate_t>.\n+\t* testsuite/22_locale/codecvt/char32_t-char8_t.cc: New test cloned\n+\tfrom char32_t.cc: validates\n+\tcodecvt<char32_t, char8_t, mbstate_t>.\n+\t* testsuite/22_locale/codecvt/utf8-char8_t.cc: New test cloned from\n+\tutf8.cc; validates codecvt<char16_t, char8_t, std::mbstate_t> and\n+\tcodecvt<char32_t, char8_t, std::mbstate_t>.\n+\t* testsuite/27_io/filesystem/path/native/string-char8_t.cc: New\n+\ttest cloned from string.cc; validates filesystem::path construction\n+\tfrom char8_t input.\n+\t* testsuite/experimental/feat-char8_t.cc: New test; validates that\n+\tthe __cpp_lib_char8_t feature test macro is defined with the\n+\tcorrect value.\n+\t* testsuite/experimental/filesystem/path/native/string-char8_t.cc:\n+\tNew test cloned from string.cc; validates filesystem::path\n+\tconstruction from char8_t input.\n+\t* testsuite/experimental/string_view/literals/types-char8_t.cc: New\n+\ttest cloned from types.cc; validates operator\"\"sv for char8_t\n+\treturns u8string_view.\n+\t* testsuite/experimental/string_view/literals/values-char8_t.cc:\n+\tNew test cloned from values.cc; validates construction and\n+\tcomparison of u8string_view values.\n+\t* testsuite/experimental/string_view/requirements/\n+\texplicit_instantiation/char8_t/1.cc: New test cloned from\n+\tchar16_t/1.cc; validates explicit instantiation of\n+\tbasic_string_view<char8_t>.\n+\t* testsuite/ext/char8_t/atomic-1.cc: New test; validates that\n+\tATOMIC_CHAR8_T_LOCK_FREE is not defined if char8_t support is not\n+\tenabled.\n+\n 2019-02-19  Tom Honermann  <tom@honermann.net>\n \n \tP0482R5 char8_t: Standard library support"}, {"sha": "346463d72440421d1e54c1c08ce3ebb480fecdfd", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/char8_t.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fchar8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fchar8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fchar8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,71 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-options \"-fchar8_t\" }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <limits>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+// Test specializations for char8_t.\n+template<typename T, typename R>\n+  void\n+  do_test()\n+  {\n+    typedef std::numeric_limits<T> char_type;\n+    typedef std::numeric_limits<R> impl_type;\n+\n+    VERIFY( char_type::is_specialized == impl_type::is_specialized );\n+    VERIFY( char_type::min() == impl_type::min() );\n+    VERIFY( char_type::max() == impl_type::max() );\n+    VERIFY( char_type::digits == impl_type::digits );\n+    VERIFY( char_type::digits10 == impl_type::digits10 );\n+    VERIFY( char_type::is_signed == impl_type::is_signed );\n+    VERIFY( char_type::is_integer == impl_type::is_integer );\n+    VERIFY( char_type::is_exact == impl_type::is_exact );\n+    VERIFY( char_type::radix == impl_type::radix );\n+    VERIFY( char_type::epsilon() == impl_type::epsilon() );\n+    VERIFY( char_type::round_error() == impl_type::round_error() );\n+    VERIFY( char_type::min_exponent == impl_type::min_exponent );\n+    VERIFY( char_type::min_exponent10 == impl_type::min_exponent10 );\n+    VERIFY( char_type::max_exponent == impl_type::max_exponent );\n+    VERIFY( char_type::max_exponent10 == impl_type::max_exponent10 );\n+    VERIFY( char_type::has_infinity == impl_type::has_infinity );\n+    VERIFY( char_type::has_quiet_NaN == impl_type::has_quiet_NaN );\n+    VERIFY( char_type::has_signaling_NaN == impl_type::has_signaling_NaN );\n+    VERIFY( char_type::has_denorm == impl_type::has_denorm );\n+    VERIFY( char_type::has_denorm_loss == impl_type::has_denorm_loss );\n+    VERIFY( char_type::infinity() == impl_type::infinity() );\n+    VERIFY( char_type::quiet_NaN() == impl_type::quiet_NaN() );\n+    VERIFY( char_type::signaling_NaN() == impl_type::signaling_NaN() );\n+    VERIFY( char_type::denorm_min() == impl_type::denorm_min() );\n+    VERIFY( char_type::is_iec559 == impl_type::is_iec559 );\n+    VERIFY( char_type::is_bounded == impl_type::is_bounded );\n+    VERIFY( char_type::is_modulo == impl_type::is_modulo );\n+    VERIFY( char_type::traps == impl_type::traps );\n+    VERIFY( char_type::tinyness_before == impl_type::tinyness_before );\n+    VERIFY( char_type::round_style == impl_type::round_style );\n+  }\n+\n+int main()\n+{\n+  do_test<char8_t, unsigned char>();\n+\n+  return 0;\n+}"}, {"sha": "8ec75f4a4d5ea7ab45338335026614758991abef", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/types-char8_t.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <type_traits>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_literals;\n+\n+  static_assert(std::is_same<decltype(\"Hello\"s), std::string>::value,\n+\t\t\"\\\"Hello\\\"s is std::string\");\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  static_assert(std::is_same<decltype(u8\"Hello\"s), std::u8string>::value,\n+\t\t\"u8\\\"Hello\\\"s is std::u8string\");\n+#else\n+  static_assert(std::is_same<decltype(u8\"Hello\"s), std::string>::value,\n+\t\t\"u8\\\"Hello\\\"s is std::string\");\n+#endif\n+\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  static_assert(std::is_same<decltype(L\"Hello\"s), std::wstring>::value,\n+\t\t\"L\\\"Hello\\\"s is std::wstring\");\n+#endif\n+\n+  static_assert(std::is_same<decltype(u\"Hello\"s), std::u16string>::value,\n+\t\t\"u\\\"Hello\\\"s is std::u16string\");\n+\n+  static_assert(std::is_same<decltype(U\"Hello\"s), std::u32string>::value,\n+\t\t\"U\\\"Hello\\\"s is std::u32string\");\n+}"}, {"sha": "ab55931697cc0f77339214ce8129e9bb6a97870f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/values-char8_t.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target c++14 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_literals;\n+\n+  std::string planet = \"Mercury\"s;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstring wplanet = L\"Venus\"s;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  std::u8string u8planet = u8\"Mars\"s;\n+#else\n+  std::string u8planet = u8\"Mars\"s;\n+#endif\n+  std::u16string u16planet = u\"Jupiter\"s;\n+  std::u32string u32planet = U\"Saturn\"s;\n+\n+  VERIFY( planet == std::string(\"Mercury\") );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet == std::wstring(L\"Venus\") );\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  VERIFY( u8planet == std::u8string(u8\"Mars\") );\n+#else\n+  VERIFY( u8planet == std::string(u8\"Mars\") );\n+#endif\n+  VERIFY( u16planet == std::u16string(u\"Jupiter\") );\n+  VERIFY( u32planet == std::u32string(U\"Saturn\") );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "0e8b0e01f6a1cea2f9363e6b26b0d8879e6fab0c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/char8_t/1.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+// Copyright (C) 2008-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+template class std::basic_string<char8_t>;"}, {"sha": "c39095960bdeccb604c4933cb194d142f5de7aa4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/types-char8_t.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++17 -fchar8_t\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <type_traits>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_view_literals;\n+\n+  static_assert(std::is_same<decltype(\"Hello\"sv), std::string_view>::value,\n+\t\t\"\\\"Hello\\\"sv is std::string_view\");\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::u8string_view>::value,\n+\t\t\"u8\\\"Hello\\\"sv is std::u8string_view\");\n+#else\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::string_view>::value,\n+\t\t\"u8\\\"Hello\\\"sv is std::string_view\");\n+#endif\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  static_assert(std::is_same<decltype(L\"Hello\"sv), std::wstring_view>::value,\n+\t\t\"L\\\"Hello\\\"sv is std::wstring_view\");\n+#endif\n+\n+  static_assert(std::is_same<decltype(u\"Hello\"sv), std::u16string_view>::value,\n+\t\t\"u\\\"Hello\\\"sv is std::u16string_view\");\n+\n+  static_assert(std::is_same<decltype(U\"Hello\"sv), std::u32string_view>::value,\n+\t\t\"U\\\"Hello\\\"sv is std::u32string_view\");\n+}"}, {"sha": "ca070988c5d31e9a14339c8527e2fcdd45f03aad", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/values-char8_t.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,88 @@\n+// { dg-options \"-std=gnu++17 -fchar8_t\" }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_view_literals;\n+\n+  std::string_view planet = \"Mercury\"sv;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstring_view wplanet = L\"Venus\"sv;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  std::u8string_view u8planet = u8\"Mars\"sv;\n+#else\n+  std::string_view u8planet = u8\"Mars\"sv;\n+#endif\n+  std::u16string_view u16planet = u\"Jupiter\"sv;\n+  std::u32string_view u32planet = U\"Saturn\"sv;\n+\n+  VERIFY( planet == std::string_view(\"Mercury\") );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet == std::wstring_view(L\"Venus\") );\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  VERIFY( u8planet == std::u8string_view(u8\"Mars\") );\n+#else\n+  VERIFY( u8planet == std::string_view(u8\"Mars\") );\n+#endif\n+  VERIFY( u16planet == std::u16string_view(u\"Jupiter\") );\n+  VERIFY( u32planet == std::u32string_view(U\"Saturn\") );\n+}\n+\n+void\n+test02()\n+{\n+  using namespace std::literals::string_view_literals;\n+\n+  std::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  std::u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+#else\n+  std::string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+#endif\n+  std::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n+  std::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n+\n+  VERIFY( planet_cratered == std::string_view(\"Mercury\\0cratered\", 16) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet_cratered == std::wstring_view(L\"Venus\\0cratered\", 14) );\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  VERIFY( u8planet_cratered == std::u8string_view(u8\"Mars\\0cratered\", 13) );\n+#else\n+  VERIFY( u8planet_cratered == std::string_view(u8\"Mars\\0cratered\", 13) );\n+#endif\n+  VERIFY( u16planet_cratered == std::u16string_view(u\"Jupiter\\0cratered\", 16) );\n+  VERIFY( u32planet_cratered == std::u32string_view(U\"Saturn\\0cratered\", 15) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "288597b23c301b0e48996d79d4e85d84e4bf925a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char8_t/1.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++17 -fchar8_t\" }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+\n+template class std::basic_string_view<char8_t>;"}, {"sha": "1721277888182411e360f4e286dacc5f7c0900c4", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char8_t/65049.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar8_t%2F65049.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar8_t%2F65049.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar8_t%2F65049.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2015-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+// libstdc++/65049\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = char8_t;\n+\n+void\n+test01()\n+{\n+  const C* p = 0;\n+  C* q = 0;\n+  auto c = std::char_traits<C>::compare(p, q, 0);\n+  VERIFY( c == 0 );\n+  auto r = std::char_traits<C>::find(p, 0, '0');\n+  VERIFY( r == nullptr );\n+  r = std::char_traits<C>::move(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::copy(q, p, 0);\n+  VERIFY( r == q );\n+  r = std::char_traits<C>::assign(q, 0, '0');\n+  VERIFY( r == q );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "41da8e94460567b0936a706abb8a2071cef7998f", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/char8_t/typedefs.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar8_t%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar8_t%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fchar8_t%2Ftypedefs.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+// Copyright (C) 2008-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+int main()\n+{\n+  // Check for required typedefs.\n+  typedef std::char_traits<char8_t> test_type;\n+  typedef test_type::char_type char_type;\n+  typedef test_type::int_type int_type;\n+  typedef test_type::off_type off_type;\n+  typedef test_type::pos_type pos_type;\n+  typedef test_type::state_type state_type;\n+\n+  // char_traits<char8_t>::int_type == unsigned int\n+  test_type::int_type* p = 0;\n+  unsigned int* q __attribute__((unused)) = p;\n+\n+  return 0;\n+}"}, {"sha": "b79206f9772b8c5d7a7c897262dab532b2e14064", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/explicit_instantiation/char8_t/1.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+// Copyright (C) 2008-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+template class std::char_traits<char8_t>;"}, {"sha": "135a377544a36cc03504828655eba3a373bdfef2", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char16_t-char8_t.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2015-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-options \"-fchar8_t\" }\n+\n+// [locale.codecvt], C++11 22.4.1.4.  specialization.\n+\n+#include <locale>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  typedef codecvt<char16_t, char8_t, mbstate_t> codecvt_c16;\n+  locale loc_c = locale::classic();\n+  VERIFY(has_facet<codecvt_c16>(loc_c));\n+  const codecvt_c16* const cvt = &use_facet<codecvt_c16>(loc_c);\n+\n+  VERIFY(!cvt->always_noconv());\n+  VERIFY(cvt->max_length() == 4);\n+  VERIFY(cvt->encoding() == 0);\n+\n+  const char8_t u8dat[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    u8\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    u8\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    u8\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char8_t* const u8dat_end = std::end(u8dat);\n+\n+  const char16_t u16dat[] = u\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    u\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    u\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    u\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char16_t* const u16dat_end = std::end(u16dat);\n+\n+  {\n+    const size_t len = u16dat_end - u16dat + 1;\n+    char16_t* const buffer = new char16_t[len];\n+    char16_t* const buffer_end = buffer + len;\n+\n+    const char8_t* from_next;\n+    char16_t* to_next;\n+\n+    codecvt_c16::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->in(state01, u8dat, u8dat_end, from_next,\n+                                       buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u8dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u16dat, sizeof(u16dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+\n+  {\n+    const size_t len = u8dat_end - u8dat + 1;\n+    char8_t* const buffer = new char8_t[len];\n+    char8_t* const buffer_end = buffer + len;\n+\n+    const char16_t* from_next;\n+    char8_t* to_next;\n+\n+    codecvt_c16::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->out(state01, u16dat, u16dat_end, from_next,\n+                                        buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u16dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u8dat, sizeof(u8dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3acfa0b76d85baacf24a093b5162f2eb5d9bf950", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char32_t-char8_t.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,100 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-options \"-fchar8_t\" }\n+\n+// 2014-04-24 R\u00fcdiger Sonderfeld\n+\n+// Copyright (C) 2015-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [locale.codecvt], C++11 22.4.1.4.  specialization.\n+\n+#include <locale>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  typedef codecvt<char32_t, char8_t, mbstate_t> codecvt_c32;\n+  locale loc_c = locale::classic();\n+  VERIFY(has_facet<codecvt_c32>(loc_c));\n+  const codecvt_c32* const cvt = &use_facet<codecvt_c32>(loc_c);\n+\n+  VERIFY(!cvt->always_noconv());\n+  VERIFY(cvt->max_length() == 4);\n+  VERIFY(cvt->encoding() == 0);\n+\n+  const char8_t u8dat[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    u8\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    u8\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    u8\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char8_t* const u8dat_end = std::end(u8dat);\n+\n+  const char32_t u32dat[] = U\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    U\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    U\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    U\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char32_t* const u32dat_end = std::end(u32dat);\n+\n+  {\n+    const size_t len = u32dat_end - u32dat + 1;\n+    char32_t* const buffer = new char32_t[len];\n+    char32_t* const buffer_end = buffer + len;\n+\n+    const char8_t* from_next;\n+    char32_t* to_next;\n+\n+    codecvt_c32::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->in(state01, u8dat, u8dat_end, from_next,\n+                                       buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u8dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u32dat, sizeof(u32dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+\n+  {\n+    const size_t len = u8dat_end - u8dat + 1;\n+    char8_t* const buffer = new char8_t[len];\n+    char8_t* const buffer_end = buffer + len;\n+\n+    const char32_t* from_next;\n+    char8_t* to_next;\n+\n+    codecvt_c32::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->out(state01, u32dat, u32dat_end, from_next,\n+                                        buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u32dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u8dat, sizeof(u8dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "62df461cd059ac82960e8a96e75c5c2f10dfd663", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/utf8-char8_t.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2015-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-options \"-fchar8_t\" }\n+\n+#include <locale>\n+#include <iterator>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+const char8_t expected[] = u8\"\u00a3\u00a5\u20ac\";\n+const std::size_t expected_len = std::char_traits<char8_t>::length(expected);\n+\n+template<typename C>\n+void test(const C* from)\n+{\n+  auto len = std::char_traits<C>::length(from);\n+  std::mbstate_t state{};\n+  char8_t buf[16] = { };\n+  using test_type = std::codecvt<C, char8_t, std::mbstate_t>;\n+  const test_type& cvt = std::use_facet<test_type>(std::locale::classic());\n+  auto from_end = from + len;\n+  auto from_next = from;\n+  auto buf_end = std::end(buf);\n+  auto buf_next = buf;\n+  auto res = cvt.out(state, from, from_end, from_next, buf, buf_end, buf_next);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( from_next == from_end );\n+  VERIFY( (buf_next - buf) == expected_len );\n+  VERIFY( 0 == std::char_traits<char8_t>::compare(buf, expected, expected_len) );\n+\n+  C buf2[16];\n+  auto exp_end = expected + expected_len;\n+  auto exp_next = expected;\n+  auto buf2_end = std::end(buf2);\n+  auto buf2_next = buf2;\n+  res = cvt.in(state, expected, exp_end, exp_next, buf2, buf2_end, buf2_next);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( exp_next == exp_end );\n+  VERIFY( (buf2_next - buf2) == len );\n+  VERIFY( 0 == std::char_traits<C>::compare(buf2, from, len) );\n+}\n+\n+void\n+test01()\n+{\n+  test(u\"\u00a3\u00a5\u20ac\");\n+}\n+\n+void\n+test02()\n+{\n+  test(U\"\u00a3\u00a5\u20ac\");\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "4f187da7804fa0edba6a73d7b6c13731d543f911", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/native/string-char8_t.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs -fchar8_t\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::filesystem;\n+  const std::string s = \"abc\";\n+  path p(s);\n+\n+  VERIFY( p.native() == s );\n+  VERIFY( p.c_str() == s );\n+  VERIFY( static_cast<std::string>(p) == s );\n+\n+  std::string s2 = p; // implicit conversion\n+  VERIFY( s2 == p.native() );\n+}\n+\n+void\n+test02()\n+{\n+  using namespace std::filesystem;\n+  const char* s = \"abc\";\n+  path p(s);\n+\n+  auto str = p.string<char>();\n+  VERIFY( str == u\"abc\" );\n+  VERIFY( str == p.string() );\n+\n+  auto strw = p.string<wchar_t>();\n+  VERIFY( strw == L\"abc\" );\n+  VERIFY( strw == p.wstring() );\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  auto str8 = p.string<char8_t>();\n+  VERIFY( str8 == u8\"abc\" );\n+  VERIFY( str8 == p.u8string() );\n+#endif\n+\n+  auto str16 = p.string<char16_t>();\n+  VERIFY( str16 == u\"abc\" );\n+  VERIFY( str16 == p.u16string() );\n+\n+  auto str32 = p.string<char32_t>();\n+  VERIFY( str32 == U\"abc\" );\n+  VERIFY( str32 == p.u32string() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "4384f98da34e853cbb33e68dc2cf54529af5ff4c", "filename": "libstdc++-v3/testsuite/experimental/feat-char8_t.cc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffeat-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do preprocess { target c++11 } }\n+// { dg-options \"-fchar8_t\" }\n+\n+#include <atomic>\n+#include <filesystem>\n+#include <istream>\n+#include <limits>\n+#include <locale>\n+#include <ostream>\n+#include <string>\n+#include <string_view>\n+\n+#ifndef  __cpp_lib_char8_t\n+#  error \"__cpp_lib_char8_t\"\n+#elif  __cpp_lib_char8_t != 201811\n+#  error \"__cpp_lib_char8_t != 201811\"\n+#endif"}, {"sha": "a0d8058bdfc8d472d6d2407eb372cdcb5afb4548", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/native/string-char8_t.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs -fchar8_t\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::experimental::filesystem;\n+  const std::string s = \"abc\";\n+  path p(s);\n+\n+  VERIFY( p.native() == s );\n+  VERIFY( p.c_str() == s );\n+  VERIFY( static_cast<std::string>(p) == s );\n+\n+  std::string s2 = p; // implicit conversion\n+  VERIFY( s2 == p.native() );\n+}\n+\n+void\n+test02()\n+{\n+  using namespace std::experimental::filesystem;\n+  const char* s = \"abc\";\n+  path p(s);\n+\n+  auto str = p.string<char>();\n+  VERIFY( str == u\"abc\" );\n+  VERIFY( str == p.string() );\n+\n+  auto strw = p.string<wchar_t>();\n+  VERIFY( strw == L\"abc\" );\n+  VERIFY( strw == p.wstring() );\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  auto str8 = p.string<char8_t>();\n+  VERIFY( str8 == u8\"abc\" );\n+  VERIFY( str8 == p.u8string() );\n+#endif\n+\n+  auto str16 = p.string<char16_t>();\n+  VERIFY( str16 == u\"abc\" );\n+  VERIFY( str16 == p.u16string() );\n+\n+  auto str32 = p.string<char32_t>();\n+  VERIFY( str32 == U\"abc\" );\n+  VERIFY( str32 == p.u32string() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "86803c5110600ffc41e7219bf96f6ce345fa2b81", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/types-char8_t.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-fchar8_t\" }\n+// { dg-do compile { target c++14 } }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <type_traits>\n+\n+void\n+test01()\n+{\n+  using namespace std::experimental::literals::string_view_literals;\n+\n+  static_assert(std::is_same<decltype(\"Hello\"sv), std::experimental::string_view>::value,\n+\t\t\"\\\"Hello\\\"sv is std::string_view\");\n+\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::experimental::u8string_view>::value,\n+\t\t\"u8\\\"Hello\\\"sv is std::u8string_view\");\n+#else\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::experimental::string_view>::value,\n+\t\t\"u8\\\"Hello\\\"sv is std::string_view\");\n+#endif\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  static_assert(std::is_same<decltype(L\"Hello\"sv), std::experimental::wstring_view>::value,\n+\t\t\"L\\\"Hello\\\"sv is std::wstring_view\");\n+#endif\n+\n+  static_assert(std::is_same<decltype(u\"Hello\"sv), std::experimental::u16string_view>::value,\n+\t\t\"u\\\"Hello\\\"sv is std::u16string_view\");\n+\n+  static_assert(std::is_same<decltype(U\"Hello\"sv), std::experimental::u32string_view>::value,\n+\t\t\"U\\\"Hello\\\"sv is std::u32string_view\");\n+}"}, {"sha": "f804c547eb4475b6db261df2897101cfc503afd7", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/values-char8_t.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues-char8_t.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,95 @@\n+// { dg-options \"-fchar8_t\" }\n+// { dg-do run { target c++14 } }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::experimental::literals::string_view_literals;\n+\n+  std::experimental::string_view planet = \"Mercury\"sv;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::experimental::wstring_view wplanet = L\"Venus\"sv;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  std::experimental::u8string_view u8planet = u8\"Mars\"sv;\n+#else\n+  std::experimental::string_view u8planet = u8\"Mars\"sv;\n+#endif\n+  std::experimental::u16string_view u16planet = u\"Jupiter\"sv;\n+  std::experimental::u32string_view u32planet = U\"Saturn\"sv;\n+\n+  VERIFY( planet == std::experimental::string_view(\"Mercury\") );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet == std::experimental::wstring_view(L\"Venus\") );\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  VERIFY( u8planet == std::experimental::u8string_view(u8\"Mars\") );\n+#else\n+  VERIFY( u8planet == std::experimental::string_view(u8\"Mars\") );\n+#endif\n+  VERIFY( u16planet == std::experimental::u16string_view(u\"Jupiter\") );\n+  VERIFY( u32planet == std::experimental::u32string_view(U\"Saturn\") );\n+}\n+\n+void\n+test02()\n+{\n+  using namespace std::experimental::literals::string_view_literals;\n+\n+  std::experimental::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::experimental::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  std::experimental::u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+#else\n+  std::experimental::string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+#endif\n+  std::experimental::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n+  std::experimental::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n+\n+  VERIFY( planet_cratered ==\n+\t  std::experimental::string_view(\"Mercury\\0cratered\", 16) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet_cratered ==\n+\t  std::experimental::wstring_view(L\"Venus\\0cratered\", 14) );\n+#endif\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  VERIFY( u8planet_cratered ==\n+\t  std::experimental::u8string_view(u8\"Mars\\0cratered\", 13) );\n+#else\n+  VERIFY( u8planet_cratered ==\n+\t  std::experimental::string_view(u8\"Mars\\0cratered\", 13) );\n+#endif\n+  VERIFY( u16planet_cratered ==\n+\t  std::experimental::u16string_view(u\"Jupiter\\0cratered\", 16) );\n+  VERIFY( u32planet_cratered ==\n+\t  std::experimental::u32string_view(U\"Saturn\\0cratered\", 15) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "0d44c4ee3cb4468452843f629baf44a195bfe8fb", "filename": "libstdc++-v3/testsuite/experimental/string_view/requirements/explicit_instantiation/char8_t/1.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Frequirements%2Fexplicit_instantiation%2Fchar8_t%2F1.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-fchar8_t\" }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2013-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string_view>\n+\n+template class std::experimental::basic_string_view<char8_t>;"}, {"sha": "cecd05df9371a5b1fa1b6ed5afadd220a7a4530f", "filename": "libstdc++-v3/testsuite/ext/char8_t/atomic-1.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fchar8_t%2Fatomic-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ca1dd73c97c5bf85057d450adf4b885a427e77/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fchar8_t%2Fatomic-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fchar8_t%2Fatomic-1.cc?ref=46ca1dd73c97c5bf85057d450adf4b885a427e77", "patch": "@@ -0,0 +1,12 @@\n+// Test that char8_t related atomic types and macros are not present when\n+// -fchar8_t is not enabled.\n+// { dg-do compile }\n+// { dg-options \"-fno-char8_t\" }\n+\n+#include <atomic>\n+\n+#if defined(ATOMIC_CHAR8_T_LOCK_FREE)\n+#error ATOMIC_CHAR8_T_LOCK_FREE is defined!\n+#endif\n+\n+std::atomic_char8_t x1; // { dg-error \"error: .atomic_char8_t. in namespace .std. does not name a type\" \"char8_t\" }"}]}