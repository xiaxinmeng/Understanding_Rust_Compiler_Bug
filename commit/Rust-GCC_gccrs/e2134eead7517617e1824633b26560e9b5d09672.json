{"sha": "e2134eead7517617e1824633b26560e9b5d09672", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxMzRlZWFkNzUxNzYxN2UxODI0NjMzYjI2NTYwZTliNWQwOTY3Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-01-02T19:29:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-01-02T19:29:12Z"}, "message": "dwarf2out.c (stack_adjust_offset): Handle PRE_MODIFY.\n\n\n\t* dwarf2out.c (stack_adjust_offset): Handle PRE_MODIFY.\n\t(dwarf2out_frame_debug_expr): Likewise.\n\t(mem_loc_descriptor): Handle PRE and POST_MODIFY.\n\nFrom-SVN: r38634", "tree": {"sha": "c21b4e2869275f5bf36b5068d330ceb1647f34ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c21b4e2869275f5bf36b5068d330ceb1647f34ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2134eead7517617e1824633b26560e9b5d09672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2134eead7517617e1824633b26560e9b5d09672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2134eead7517617e1824633b26560e9b5d09672", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2134eead7517617e1824633b26560e9b5d09672/comments", "author": null, "committer": null, "parents": [{"sha": "2b589241d86c1f2e68d5f2dbceb60f19050bd199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b589241d86c1f2e68d5f2dbceb60f19050bd199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b589241d86c1f2e68d5f2dbceb60f19050bd199"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "4537c1f42d788eae08969cbe49e383317b644679", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2134eead7517617e1824633b26560e9b5d09672/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2134eead7517617e1824633b26560e9b5d09672/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2134eead7517617e1824633b26560e9b5d09672", "patch": "@@ -1,3 +1,9 @@\n+Tue Jan  2 20:27:07 MET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* dwarf2out.c (stack_adjust_offset): Handle PRE_MODIFY.\n+\t(dwarf2out_frame_debug_expr): Likewise.\n+\t(mem_loc_descriptor): Handle PRE and POST_MODIFY.\n+\n Tue Jan  2 20:21:31 MET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_split_to_parts): Return number of part required;"}, {"sha": "dabf0d13ffd0f0aeca49091a05b5702ddb75f572", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2134eead7517617e1824633b26560e9b5d09672/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2134eead7517617e1824633b26560e9b5d09672/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e2134eead7517617e1824633b26560e9b5d09672", "patch": "@@ -1130,11 +1130,21 @@ stack_adjust_offset (pattern)\n       src = XEXP (dest, 0);\n       code = GET_CODE (src);\n \n-      if (! (code == PRE_DEC || code == PRE_INC)\n+      if (! (code == PRE_DEC || code == PRE_INC\n+\t     || code == PRE_MODIFY)\n \t  || XEXP (src, 0) != stack_pointer_rtx)\n \treturn 0;\n \n-      offset = GET_MODE_SIZE (GET_MODE (dest));\n+      if (code == PRE_MODIFY)\n+\t{\n+\t  rtx val = XEXP (XEXP (src, 1), 1);\n+\t  /* We handle only adjustments by constant amount.  */\n+\t  if (GET_CODE (XEXP (src, 1)) != PLUS ||\n+\t      GET_CODE (val) != CONST_INT)\n+\t    abort();\n+\t  offset = -INTVAL (val);\n+\t}\n+      else offset = GET_MODE_SIZE (GET_MODE (dest));\n     }\n   else\n     return 0;\n@@ -1418,6 +1428,21 @@ dwarf2out_frame_debug_expr (expr, label)\n       switch (GET_CODE (XEXP (dest, 0)))\n \t{\n \t  /* With a push.  */\n+\tcase PRE_MODIFY:\n+\t  /* We can't handle variable size modifications.  */\n+\t  if (GET_CODE (XEXP (XEXP (XEXP (dest, 0), 1), 1)) != CONST_INT)\n+\t    abort();\n+\t  offset = -INTVAL (XEXP (XEXP (XEXP (dest, 0), 1), 1));\n+\n+\t  if (REGNO (XEXP (XEXP (dest, 0), 0)) != STACK_POINTER_REGNUM\n+\t      || cfa_store.reg != STACK_POINTER_REGNUM)\n+\t    abort ();\n+\t  cfa_store.offset += offset;\n+\t  if (cfa.reg == STACK_POINTER_REGNUM)\n+\t    cfa.offset = cfa_store.offset;\n+\n+\t  offset = -cfa_store.offset;\n+\t  break;\n \tcase PRE_INC:\n \tcase PRE_DEC:\n \t  offset = GET_MODE_SIZE (GET_MODE (dest));\n@@ -7590,6 +7615,7 @@ mem_loc_descriptor (rtl, mode)\n     {\n     case POST_INC:\n     case POST_DEC:\n+    case POST_MODIFY:\n       /* POST_INC and POST_DEC can be handled just like a SUBREG.  So we\n \t just fall into the SUBREG code.  */\n \n@@ -7648,6 +7674,12 @@ mem_loc_descriptor (rtl, mode)\n       mem_loc_result->dw_loc_oprnd1.v.val_addr = save_rtx (rtl);\n       break;\n \n+    case PRE_MODIFY:\n+      /* Extract the PLUS expression nested inside and fall into\n+         PLUS code bellow.  */\n+      rtl = XEXP (rtl, 1);\n+      goto plus;\n+\n     case PRE_INC:\n     case PRE_DEC:\n       /* Turn these into a PLUS expression and fall into the PLUS code\n@@ -7660,6 +7692,7 @@ mem_loc_descriptor (rtl, mode)\n       /* Fall through.  */\n \n     case PLUS:\n+    plus:\n       if (is_based_loc (rtl))\n \tmem_loc_result = based_loc_descr (reg_number (XEXP (rtl, 0)),\n \t\t\t\t\t  INTVAL (XEXP (rtl, 1)));"}]}