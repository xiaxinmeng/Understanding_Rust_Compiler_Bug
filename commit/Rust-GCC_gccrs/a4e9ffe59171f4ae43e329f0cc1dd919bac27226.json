{"sha": "a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlOWZmZTU5MTcxZjRhZTQzZTMyOWYwY2MxZGQ5MTliYWMyNzIyNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-08-31T22:46:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-08-31T22:46:31Z"}, "message": "c-common.c (c_alignof_expr): Use DECL_ALIGN_UNIT and TYPE_ALIGN_UNIT.\n\n\t* c-common.c (c_alignof_expr): Use DECL_ALIGN_UNIT and TYPE_ALIGN_UNIT.\n\t(c_sizeof_of_alignof_type): Likewise.\n\t* expr.c (array_ref_element_size): Likewise.\n\t(highest_pow2_factor_for_target): Likewise.\n\t* gimplify.c (canonicalize_addr_expr): Likewise.\n\t(gimplify_compound_lval): Likewise.\n\t* stor-layout.c (finalize_record_size, finalize_type_size): Likewise.\n\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Likewise.\n\t* varasm.c (assemble_variable): Likewise.\n\t(output_constant_def_contents): Alignments are unsigned.\n\nFrom-SVN: r86848", "tree": {"sha": "9be28897beaae19a44d2e62ed16af91e516683e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be28897beaae19a44d2e62ed16af91e516683e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/comments", "author": null, "committer": null, "parents": [{"sha": "631b67ce1f819a4122eaf8b46f725dc5ff5ebd1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/631b67ce1f819a4122eaf8b46f725dc5ff5ebd1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/631b67ce1f819a4122eaf8b46f725dc5ff5ebd1d"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "33ecad55a403a93d72b013ce9bc07b738b40a780", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "patch": "@@ -1,3 +1,16 @@\n+2004-08-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* c-common.c (c_alignof_expr): Use DECL_ALIGN_UNIT and TYPE_ALIGN_UNIT.\n+\t(c_sizeof_of_alignof_type): Likewise.\n+\t* expr.c (array_ref_element_size): Likewise.\n+\t(highest_pow2_factor_for_target): Likewise.\n+\t* gimplify.c (canonicalize_addr_expr): Likewise.\n+\t(gimplify_compound_lval): Likewise.\n+\t* stor-layout.c (finalize_record_size, finalize_type_size): Likewise.\n+\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Likewise.\n+\t* varasm.c (assemble_variable): Likewise.\n+\t(output_constant_def_contents): Alignments are unsigned.\n+\n 2004-08-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "a47385b2e059eacb61c719379f3330b64395ce7a", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "patch": "@@ -2774,7 +2774,7 @@ c_sizeof_or_alignof_type (tree type, enum tree_code op, int complain)\n \t\t\t    size_int (TYPE_PRECISION (char_type_node)\n \t\t\t\t      / BITS_PER_UNIT));\n       else\n-\tvalue = size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n+\tvalue = size_int (TYPE_ALIGN_UNIT (type));\n     }\n \n   /* VALUE will have an integer type with TYPE_IS_SIZETYPE set.\n@@ -2798,7 +2798,7 @@ c_alignof_expr (tree expr)\n   tree t;\n \n   if (TREE_CODE (expr) == VAR_DECL)\n-    t = size_int (DECL_ALIGN (expr) / BITS_PER_UNIT);\n+    t = size_int (DECL_ALIGN_UNIT (expr));\n \n   else if (TREE_CODE (expr) == COMPONENT_REF\n \t   && DECL_C_BIT_FIELD (TREE_OPERAND (expr, 1)))\n@@ -2808,7 +2808,7 @@ c_alignof_expr (tree expr)\n     }\n   else if (TREE_CODE (expr) == COMPONENT_REF\n \t   && TREE_CODE (TREE_OPERAND (expr, 1)) == FIELD_DECL)\n-    t = size_int (DECL_ALIGN (TREE_OPERAND (expr, 1)) / BITS_PER_UNIT);\n+    t = size_int (DECL_ALIGN_UNIT (TREE_OPERAND (expr, 1)));\n \n   else if (TREE_CODE (expr) == INDIRECT_REF)\n     {"}, {"sha": "f5c229d80b903d9fcc6f28cdfad91b3fe51639a4", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "patch": "@@ -5487,7 +5487,7 @@ array_ref_element_size (tree exp)\n       if (TREE_TYPE (aligned_size) != sizetype)\n \taligned_size = fold_convert (sizetype, aligned_size);\n       return size_binop (MULT_EXPR, aligned_size,\n-\t\t         size_int (TYPE_ALIGN (elmt_type) / BITS_PER_UNIT));\n+\t\t         size_int (TYPE_ALIGN_UNIT (elmt_type)));\n     }\n \n   /* Otherwise, take the size from that of the element type.  Substitute\n@@ -6006,9 +6006,9 @@ highest_pow2_factor_for_target (tree target, tree exp)\n \n   factor = highest_pow2_factor (exp);\n   if (TREE_CODE (target) == COMPONENT_REF)\n-    target_align = DECL_ALIGN (TREE_OPERAND (target, 1)) / BITS_PER_UNIT;\n+    target_align = DECL_ALIGN_UNIT (TREE_OPERAND (target, 1));\n   else\n-    target_align = TYPE_ALIGN (TREE_TYPE (target)) / BITS_PER_UNIT;\n+    target_align = TYPE_ALIGN_UNIT (TREE_TYPE (target));\n   return MAX (factor, target_align);\n }\n \f"}, {"sha": "050f97c96019e62c731c3bea17e9383c9dc7c85e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "patch": "@@ -1392,8 +1392,7 @@ canonicalize_addr_expr (tree *expr_p)\n \t\t    TYPE_MIN_VALUE (TYPE_DOMAIN (datype)),\n \t\t    TYPE_MIN_VALUE (TYPE_DOMAIN (datype)),\n \t\t    size_binop (EXACT_DIV_EXPR, TYPE_SIZE_UNIT (dctype),\n-\t\t\t\tsize_int (TYPE_ALIGN (dctype)\n-\t\t\t\t\t  / BITS_PER_UNIT)));\n+\t\t\t\tsize_int (TYPE_ALIGN_UNIT (dctype))));\n   *expr_p = build1 (ADDR_EXPR, ctype, *expr_p);\n }\n \n@@ -1520,7 +1519,7 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n \t    {\n \t      tree elmt_type = TREE_TYPE (TREE_TYPE (TREE_OPERAND (t, 0)));\n \t      tree elmt_size = unshare_expr (array_ref_element_size (t));\n-\t      tree factor = size_int (TYPE_ALIGN (elmt_type) / BITS_PER_UNIT);\n+\t      tree factor = size_int (TYPE_ALIGN_UNIT (elmt_type));\n \n \t      /* Divide the element size by the alignment of the element\n \t\t type (above).  */"}, {"sha": "395a5f948cba0ab8ca9e74570bc20b455a18b466", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "patch": "@@ -1195,8 +1195,8 @@ finalize_record_size (record_layout_info rli)\n \n   /* Round the size up to be a multiple of the required alignment.  */\n   TYPE_SIZE (rli->t) = round_up (unpadded_size, TYPE_ALIGN (rli->t));\n-  TYPE_SIZE_UNIT (rli->t) = round_up (unpadded_size_unit,\n-\t\t\t\t      TYPE_ALIGN (rli->t) / BITS_PER_UNIT);\n+  TYPE_SIZE_UNIT (rli->t)\n+    = round_up (unpadded_size_unit, TYPE_ALIGN_UNIT (rli->t));\n \n   if (warn_padded && TREE_CONSTANT (unpadded_size)\n       && simple_cst_equal (unpadded_size, TYPE_SIZE (rli->t)) == 0)\n@@ -1357,8 +1357,8 @@ finalize_type_size (tree type)\n   if (TYPE_SIZE (type) != 0)\n     {\n       TYPE_SIZE (type) = round_up (TYPE_SIZE (type), TYPE_ALIGN (type));\n-      TYPE_SIZE_UNIT (type)\n-\t= round_up (TYPE_SIZE_UNIT (type), TYPE_ALIGN (type) / BITS_PER_UNIT);\n+      TYPE_SIZE_UNIT (type) = round_up (TYPE_SIZE_UNIT (type),\n+\t\t\t\t\tTYPE_ALIGN_UNIT (type));\n     }\n \n   /* Evaluate nonconstant sizes only once, either now or as soon as safe.  */"}, {"sha": "62c8d0271ada396c0b2ddc624386e7ea60ada210", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "patch": "@@ -1378,7 +1378,7 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n \n   return build (ARRAY_REF, orig_type, base, idx, min_idx,\n \t\tsize_int (tree_low_cst (elt_size, 1)\n-\t\t\t  / (TYPE_ALIGN (elt_type) / BITS_PER_UNIT)));\n+\t\t\t  / (TYPE_ALIGN_UNIT (elt_type))));\n }\n \n "}, {"sha": "37996c06e8208b6c502e17282dd6e0eb5cfd4fd4", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9ffe59171f4ae43e329f0cc1dd919bac27226/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a4e9ffe59171f4ae43e329f0cc1dd919bac27226", "patch": "@@ -1643,7 +1643,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \t\t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n \n #if !defined(ASM_OUTPUT_ALIGNED_COMMON) && !defined(ASM_OUTPUT_ALIGNED_DECL_COMMON) && !defined(ASM_OUTPUT_ALIGNED_BSS)\n-      if ((unsigned HOST_WIDE_INT) DECL_ALIGN (decl) / BITS_PER_UNIT > rounded)\n+      if ((unsigned HOST_WIDE_INT) DECL_ALIGN_UNIT (decl) > rounded)\n \twarning (\"%Jrequested alignment for '%D' is greater than \"\n                  \"implemented alignment of %d\", decl, decl, rounded);\n #endif\n@@ -1671,10 +1671,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \n   /* Output the alignment of this data.  */\n   if (align > BITS_PER_UNIT)\n-    {\n-      ASM_OUTPUT_ALIGN (asm_out_file,\n-\t\t\tfloor_log2 (DECL_ALIGN (decl) / BITS_PER_UNIT));\n-    }\n+    ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DECL_ALIGN_UNIT (decl)));\n \n   /* Do any machine/system dependent processing of the object.  */\n #ifdef ASM_DECLARE_OBJECT_NAME\n@@ -2659,7 +2656,7 @@ output_constant_def_contents (rtx symbol)\n   int reloc = compute_reloc_for_constant (exp);\n \n   /* Align the location counter as required by EXP's data type.  */\n-  int align = TYPE_ALIGN (TREE_TYPE (exp));\n+  unsigned int align = TYPE_ALIGN (TREE_TYPE (exp));\n #ifdef CONSTANT_ALIGNMENT\n   align = CONSTANT_ALIGNMENT (exp, align);\n #endif"}]}