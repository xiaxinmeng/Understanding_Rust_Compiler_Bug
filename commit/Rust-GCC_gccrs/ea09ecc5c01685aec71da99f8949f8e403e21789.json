{"sha": "ea09ecc5c01685aec71da99f8949f8e403e21789", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwOWVjYzVjMDE2ODVhZWM3MWRhOTlmODk0OWY4ZTQwM2UyMTc4OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-09T12:02:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-09-09T12:02:57Z"}, "message": "decl.c (gnat_to_gnu_entity): Only set the TYPE_ALIGN_OK and TYPE_BY_REFERENCE_P flags on types after various...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Only set the TYPE_ALIGN_OK\n\tand TYPE_BY_REFERENCE_P flags on types after various promotions.\n\t* gcc-interface/trans.c (node_has_volatile_full_access) <N_Identifier>:\n\tConsider all kinds of entities.\n\nFrom-SVN: r251927", "tree": {"sha": "f179eb786fd436bd2e5e931dfc5deece03859df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f179eb786fd436bd2e5e931dfc5deece03859df5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea09ecc5c01685aec71da99f8949f8e403e21789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea09ecc5c01685aec71da99f8949f8e403e21789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea09ecc5c01685aec71da99f8949f8e403e21789", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea09ecc5c01685aec71da99f8949f8e403e21789/comments", "author": null, "committer": null, "parents": [{"sha": "5bab4c9631c478b7940e952ea57de680321d5a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bab4c9631c478b7940e952ea57de680321d5a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bab4c9631c478b7940e952ea57de680321d5a8e"}], "stats": {"total": 159, "additions": 140, "deletions": 19}, "files": [{"sha": "6015967ab325349a1744e79edef814d108dc7dd4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea09ecc5c01685aec71da99f8949f8e403e21789", "patch": "@@ -1,3 +1,10 @@\n+2017-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Only set the TYPE_ALIGN_OK\n+\tand TYPE_BY_REFERENCE_P flags on types after various promotions.\n+\t* gcc-interface/trans.c (node_has_volatile_full_access) <N_Identifier>:\n+\tConsider all kinds of entities.\n+\n 2017-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (convert): When converting to a padding type,"}, {"sha": "df88ce7849e658305f9579e38bcc277746ffbace", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=ea09ecc5c01685aec71da99f8949f8e403e21789", "patch": "@@ -4277,18 +4277,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t already defined so we cannot pass true for IN_PLACE here.  */\n       process_attributes (&gnu_type, &attr_list, false, gnat_entity);\n \n-      /* Tell the middle-end that objects of tagged types are guaranteed to\n-\t be properly aligned.  This is necessary because conversions to the\n-\t class-wide type are translated into conversions to the root type,\n-\t which can be less aligned than some of its derived types.  */\n-      if (Is_Tagged_Type (gnat_entity)\n-\t  || Is_Class_Wide_Equivalent_Type (gnat_entity))\n-\tTYPE_ALIGN_OK (gnu_type) = 1;\n-\n-      /* Record whether the type is passed by reference.  */\n-      if (!VOID_TYPE_P (gnu_type) && Is_By_Reference_Type (gnat_entity))\n-\tTYPE_BY_REFERENCE_P (gnu_type) = 1;\n-\n       /* ??? Don't set the size for a String_Literal since it is either\n \t confirming or we don't handle it properly (if the low bound is\n \t non-constant).  */\n@@ -4498,17 +4486,29 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* If this is not an unconstrained array type, set some flags.  */\n       if (TREE_CODE (gnu_type) != UNCONSTRAINED_ARRAY_TYPE)\n \t{\n+\t  /* Tell the middle-end that objects of tagged types are guaranteed to\n+\t     be properly aligned.  This is necessary because conversions to the\n+\t     class-wide type are translated into conversions to the root type,\n+\t     which can be less aligned than some of its derived types.  */\n+\t  if (Is_Tagged_Type (gnat_entity)\n+\t      || Is_Class_Wide_Equivalent_Type (gnat_entity))\n+\t    TYPE_ALIGN_OK (gnu_type) = 1;\n+\n+\t  /* Record whether the type is passed by reference.  */\n+\t  if (Is_By_Reference_Type (gnat_entity) && !VOID_TYPE_P (gnu_type))\n+\t    TYPE_BY_REFERENCE_P (gnu_type) = 1;\n+\n+\t  /* Record whether an alignment clause was specified.  */\n \t  if (Present (Alignment_Clause (gnat_entity)))\n \t    TYPE_USER_ALIGN (gnu_type) = 1;\n \n+\t  /* Record whether a pragma Universal_Aliasing was specified.  */\n \t  if (Universal_Aliasing (gnat_entity) && !TYPE_IS_DUMMY_P (gnu_type))\n \t    TYPE_UNIVERSAL_ALIASING_P (gnu_type) = 1;\n \n \t  /* If it is passed by reference, force BLKmode to ensure that\n \t     objects of this type will always be put in memory.  */\n-\t  if (TYPE_MODE (gnu_type) != BLKmode\n-\t      && AGGREGATE_TYPE_P (gnu_type)\n-\t      && TYPE_BY_REFERENCE_P (gnu_type))\n+\t  if (AGGREGATE_TYPE_P (gnu_type) && TYPE_BY_REFERENCE_P (gnu_type))\n \t    SET_TYPE_MODE (gnu_type, BLKmode);\n \t}\n "}, {"sha": "2f7d497b11be1b87124ebed3d9e275df9ff2decf", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ea09ecc5c01685aec71da99f8949f8e403e21789", "patch": "@@ -4075,8 +4075,6 @@ node_has_volatile_full_access (Node_Id gnat_node)\n     case N_Identifier:\n     case N_Expanded_Name:\n       gnat_entity = Entity (gnat_node);\n-      if (Ekind (gnat_entity) != E_Variable)\n-\tbreak;\n       return Is_Volatile_Full_Access (gnat_entity)\n \t     || Is_Volatile_Full_Access (Etype (gnat_entity));\n "}, {"sha": "928a1e42006bc2ce02a0cbd2e383c12d967a01db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea09ecc5c01685aec71da99f8949f8e403e21789", "patch": "@@ -1,3 +1,9 @@\n+2017-09-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/vfa.ads: Rename into...\n+\t* gnat.dg/specs/vfa1.ads: ...this.\n+\t* gnat.dg/specs/vfa2.ads: New test.\n+\n 2017-09-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* gfortran.dg/pdt_1.f03 : New test."}, {"sha": "cf918c20a03f1c75b6a74a309777d2f7366275f6", "filename": "gcc/testsuite/gnat.dg/specs/vfa1.ads", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvfa1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvfa1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvfa1.ads?ref=ea09ecc5c01685aec71da99f8949f8e403e21789", "patch": "@@ -1,7 +1,7 @@\n -- { dg-do compile }\n -- { dg-options \"-g\" }\n \n-package VFA is\n+package VFA1 is\n \n   type Rec is record\n     A : Short_Integer;\n@@ -11,4 +11,4 @@ package VFA is\n   type Rec_VFA is new Rec;\n   pragma Volatile_Full_Access (Rec_VFA);\n \n-end VFA;\n+end VFA1;", "previous_filename": "gcc/testsuite/gnat.dg/specs/vfa.ads"}, {"sha": "8ca9687a39e366e1ff3dd4a95e68d1976405779e", "filename": "gcc/testsuite/gnat.dg/specs/vfa2.ads", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvfa2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea09ecc5c01685aec71da99f8949f8e403e21789/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvfa2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fvfa2.ads?ref=ea09ecc5c01685aec71da99f8949f8e403e21789", "patch": "@@ -0,0 +1,110 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+package VFA2 is\n+\n+   type Bit is mod 2**1\n+     with Size => 1;\n+   type UInt2 is mod 2**2\n+     with Size => 2;\n+   type UInt22 is mod 2**22\n+     with Size => 22;\n+\n+   type MODE_ENUM is\n+     (\n+      Function_0_Default,\n+      Function_1,\n+      Function_2,\n+      Function_3,\n+      Function_4,\n+      Function_5,\n+      Function_6,\n+      Function_7)\n+     with Size => 3;\n+\n+   type EPD_ENUM is\n+     (\n+      Disable_Pull_Down,\n+      Enable_Pull_Down)\n+     with Size => 1;\n+\n+   type EPUN_ENUM is\n+     (\n+      Enable_Pull_Up,\n+      Disable_Pull_Up)\n+     with Size => 1;\n+\n+   type EHS_ENUM is\n+     (\n+      Slow_Low_Noise_With,\n+      Fast_Medium_Noise_W)\n+     with Size => 1;\n+\n+   type EZI_ENUM is\n+     (\n+      Disable_Input_Buffer,\n+      Enable_Input_Buffer)\n+     with Size => 1;\n+\n+   type ZIF_ENUM is\n+     (\n+      Enable_Input_Glitch,\n+      Disable_Input_Glitch)\n+     with Size => 1;\n+\n+   type EHD_ENUM is\n+     (\n+      Normal_Drive_4_Ma_D,\n+      Medium_Drive_8_Ma_D,\n+      High_Drive_14_Ma_Dr,\n+      Ultra_High_Drive_20)\n+     with Size => 2;\n+\n+   type Pin_Type is (Normal_Drive, High_Drive, High_Speed);\n+\n+   type SFS_Register(Pin : Pin_Type := Normal_Drive) is record\n+      MODE     : MODE_ENUM;\n+      EPD      : EPD_ENUM;\n+      EPUN     : EPUN_ENUM;\n+      EZI      : EZI_ENUM;\n+      ZIF      : ZIF_ENUM;\n+      RESERVED : UInt22;\n+\n+      case Pin is\n+         when Normal_Drive =>\n+\n+            ND_EHS_RESERVED : Bit;\n+            ND_EHD_RESERVED : UInt2;\n+\n+         when High_Drive =>\n+\n+            EHD : EHD_ENUM;\n+            HD_EHS_RESERVED : Bit;\n+\n+         when High_Speed =>\n+            EHS    : EHS_ENUM;\n+            HS_EHD_RESERVED : UInt2;\n+\n+      end case;\n+   end record\n+     with Unchecked_Union, Size => 32, Volatile_Full_Access;\n+\n+   for SFS_Register use record\n+      MODE            at 0 range 0 .. 2;\n+      EPD             at 0 range 3 .. 3;\n+      EPUN            at 0 range 4 .. 4;\n+      ND_EHS_RESERVED at 0 range 5 .. 5;\n+      HD_EHS_RESERVED at 0 range 5 .. 5;\n+      EHS             at 0 range 5 .. 5;\n+      EZI             at 0 range 6 .. 6;\n+      ZIF             at 0 range 7 .. 7;\n+      ND_EHD_RESERVED at 0 range 8 .. 9;\n+      EHD             at 0 range 8 .. 9;\n+      HS_EHD_RESERVED at 0 range 8 .. 9;\n+      RESERVED        at 0 range 10 .. 31;\n+   end record;\n+\n+   type Normal_Drive_Pins is array (Integer range <>)\n+     of SFS_Register(Normal_Drive) with Volatile;\n+\n+end VFA2;"}]}