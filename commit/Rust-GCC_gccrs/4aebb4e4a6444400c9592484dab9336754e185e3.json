{"sha": "4aebb4e4a6444400c9592484dab9336754e185e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFlYmI0ZTRhNjQ0NDQwMGM5NTkyNDg0ZGFiOTMzNjc1NGUxODVlMw==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2016-08-27T02:03:23Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2016-08-27T02:03:23Z"}, "message": "re PR libstdc++/77356 (regex error for a ECMAScript syntax string)\n\n\tPR libstdc++/77356\n\t* include/bits/regex_compiler.tcc(_M_insert_bracket_matcher,\n\t_M_expression_term): Modify to support dash literal.\n\t* include/bits/regex_scanner.h: Add dash as a token type to make\n\ta different from the mandated dash literal by escaping.\n\t* include/bits/regex_scanner.tcc(_M_scan_in_bracket): Emit dash\n\ttoken in bracket expression parsing.\n\t* testsuite/28_regex/regression.cc: Add new testcases.\n\nFrom-SVN: r239794", "tree": {"sha": "e0750202a9066afec6ce77776c317ae1c32a7cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0750202a9066afec6ce77776c317ae1c32a7cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aebb4e4a6444400c9592484dab9336754e185e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aebb4e4a6444400c9592484dab9336754e185e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aebb4e4a6444400c9592484dab9336754e185e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aebb4e4a6444400c9592484dab9336754e185e3/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8921e81e9891b357f6302a0802434f6e3f6e09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8921e81e9891b357f6302a0802434f6e3f6e09e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8921e81e9891b357f6302a0802434f6e3f6e09e"}], "stats": {"total": 153, "additions": 111, "deletions": 42}, "files": [{"sha": "8e3c466740d7863272af1e9940a915802b4af5b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4aebb4e4a6444400c9592484dab9336754e185e3", "patch": "@@ -1,3 +1,14 @@\n+2016-08-27  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/77356\n+\t* include/bits/regex_compiler.tcc(_M_insert_bracket_matcher,\n+\t_M_expression_term): Modify to support dash literal.\n+\t* include/bits/regex_scanner.h: Add dash as a token type to make\n+\ta different from the mandated dash literal by escaping.\n+\t* include/bits/regex_scanner.tcc(_M_scan_in_bracket): Emit dash\n+\ttoken in bracket expression parsing.\n+\t* testsuite/28_regex/regression.cc: Add new testcases.\n+\n 2016-08-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/51960"}, {"sha": "ef6ebdd2ca065117ed781391f12f7e626832e7b7", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 71, "deletions": 39, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=4aebb4e4a6444400c9592484dab9336754e185e3", "patch": "@@ -426,13 +426,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       pair<bool, _CharT> __last_char; // Optional<_CharT>\n       __last_char.first = false;\n       if (!(_M_flags & regex_constants::ECMAScript))\n-\tif (_M_try_char())\n-\t  {\n-\t    __matcher._M_add_char(_M_value[0]);\n-\t    __last_char.first = true;\n-\t    __last_char.second = _M_value[0];\n-\t  }\n+\t{\n+\t  if (_M_try_char())\n+\t    {\n+\t      __last_char.first = true;\n+\t      __last_char.second = _M_value[0];\n+\t    }\n+\t  else if (_M_match_token(_ScannerT::_S_token_bracket_dash))\n+\t    {\n+\t      __last_char.first = true;\n+\t      __last_char.second = '-';\n+\t    }\n+\t}\n       while (_M_expression_term(__last_char, __matcher));\n+      if (__last_char.first)\n+\t__matcher._M_add_char(__last_char.second);\n       __matcher._M_ready();\n       _M_stack.push(_StateSeqT(\n \t\t      *_M_nfa,\n@@ -449,19 +457,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (_M_match_token(_ScannerT::_S_token_bracket_end))\n \treturn false;\n \n+      const auto __push_char = [&](_CharT __ch)\n+      {\n+\tif (__last_char.first)\n+\t  __matcher._M_add_char(__last_char.second);\n+\telse\n+\t  __last_char.first = true;\n+\t__last_char.second = __ch;\n+      };\n+      const auto __flush = [&]\n+      {\n+\tif (__last_char.first)\n+\t  {\n+\t    __matcher._M_add_char(__last_char.second);\n+\t    __last_char.first = false;\n+\t  }\n+      };\n+\n       if (_M_match_token(_ScannerT::_S_token_collsymbol))\n \t{\n \t  auto __symbol = __matcher._M_add_collate_element(_M_value);\n \t  if (__symbol.size() == 1)\n-\t    {\n-\t      __last_char.first = true;\n-\t      __last_char.second = __symbol[0];\n-\t    }\n+\t    __push_char(__symbol[0]);\n+\t  else\n+\t    __flush();\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))\n-\t__matcher._M_add_equivalence_class(_M_value);\n+\t{\n+\t  __flush();\n+\t  __matcher._M_add_equivalence_class(_M_value);\n+\t}\n       else if (_M_match_token(_ScannerT::_S_token_char_class_name))\n-\t__matcher._M_add_character_class(_M_value, false);\n+\t{\n+\t  __flush();\n+\t  __matcher._M_add_character_class(_M_value, false);\n+\t}\n+      else if (_M_try_char())\n+\t__push_char(_M_value[0]);\n       // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),\n       // except when the '-' is the first or last character in the bracket\n       // expression ([--0]). ECMAScript treats all '-' after a range as a\n@@ -472,55 +504,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.\n       //\n       // It turns out that no one reads BNFs ;)\n-      else if (_M_try_char())\n+      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))\n \t{\n \t  if (!__last_char.first)\n \t    {\n-\t      __matcher._M_add_char(_M_value[0]);\n-\t      if (_M_value[0] == '-'\n-\t\t  && !(_M_flags & regex_constants::ECMAScript))\n+\t      if (!(_M_flags & regex_constants::ECMAScript))\n \t\t{\n \t\t  if (_M_match_token(_ScannerT::_S_token_bracket_end))\n-\t\t    return false;\n+\t\t    {\n+\t\t      __push_char('-');\n+\t\t      return false;\n+\t\t    }\n \t\t  __throw_regex_error(\n \t\t    regex_constants::error_range,\n \t\t    \"Unexpected dash in bracket expression. For POSIX syntax, \"\n \t\t    \"a dash is not treated literally only when it is at \"\n \t\t    \"beginning or end.\");\n \t\t}\n-\t      __last_char.first = true;\n-\t      __last_char.second = _M_value[0];\n+\t      __push_char('-');\n \t    }\n \t  else\n \t    {\n-\t      if (_M_value[0] == '-')\n+\t      if (_M_try_char())\n \t\t{\n-\t\t  if (_M_try_char())\n-\t\t    {\n-\t\t      __matcher._M_make_range(__last_char.second , _M_value[0]);\n-\t\t      __last_char.first = false;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      if (_M_scanner._M_get_token()\n-\t\t\t  != _ScannerT::_S_token_bracket_end)\n-\t\t\t__throw_regex_error(\n-\t\t\t  regex_constants::error_range,\n-\t\t\t  \"Unexpected end of bracket expression.\");\n-\t\t      __matcher._M_add_char(_M_value[0]);\n-\t\t    }\n+\t\t  __matcher._M_make_range(__last_char.second, _M_value[0]);\n+\t\t  __last_char.first = false;\n+\t\t}\n+\t      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))\n+\t\t{\n+\t\t  __matcher._M_make_range(__last_char.second, '-');\n+\t\t  __last_char.first = false;\n \t\t}\n \t      else\n \t\t{\n-\t\t  __matcher._M_add_char(_M_value[0]);\n-\t\t  __last_char.second = _M_value[0];\n+\t\t  if (_M_scanner._M_get_token()\n+\t\t      != _ScannerT::_S_token_bracket_end)\n+\t\t    __throw_regex_error(\n+\t\t      regex_constants::error_range,\n+\t\t      \"Character is expected after a dash.\");\n+\t\t  __push_char('-');\n \t\t}\n \t    }\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_quoted_class))\n-\t__matcher._M_add_character_class(_M_value,\n-\t\t\t\t\t _M_ctype.is(_CtypeT::upper,\n-\t\t\t\t\t\t     _M_value[0]));\n+\t{\n+\t  __flush();\n+\t  __matcher._M_add_character_class(_M_value,\n+\t\t\t\t\t   _M_ctype.is(_CtypeT::upper,\n+\t\t\t\t\t\t       _M_value[0]));\n+\t}\n       else\n \t__throw_regex_error(regex_constants::error_brack,\n \t\t\t    \"Unexpected character in bracket expression.\");"}, {"sha": "ed0b723f3a5cc5a0d15a2133670ecf7acfc4c560", "filename": "libstdc++-v3/include/bits/regex_scanner.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h?ref=4aebb4e4a6444400c9592484dab9336754e185e3", "patch": "@@ -43,7 +43,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     /// Token types returned from the scanner.\n-    enum _TokenT\n+    enum _TokenT : unsigned\n     {\n       _S_token_anychar,\n       _S_token_ord_char,\n@@ -73,7 +73,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_token_comma,\n       _S_token_dup_count,\n       _S_token_eof,\n-      _S_token_unknown\n+      _S_token_bracket_dash,\n+      _S_token_unknown = -1u\n     };\n \n   protected:"}, {"sha": "a734bb175d72ac0c4fd67a9ceaf0480177dfb6e2", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=4aebb4e4a6444400c9592484dab9336754e185e3", "patch": "@@ -210,7 +210,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       auto __c = *_M_current++;\n \n-      if (__c == '[')\n+      if (__c == '-')\n+\t_M_token = _S_token_bracket_dash;\n+      else if (__c == '[')\n \t{\n \t  if (_M_current == _M_end)\n \t    __throw_regex_error(regex_constants::error_brack,"}, {"sha": "53a19afe4c3d0cdbe42ddf4223f4076b769822d3", "filename": "libstdc++-v3/testsuite/28_regex/regression.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregression.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aebb4e4a6444400c9592484dab9336754e185e3/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregression.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fregression.cc?ref=4aebb4e4a6444400c9592484dab9336754e185e3", "patch": "@@ -61,12 +61,35 @@ test03()\n   VERIFY(!regex_search_debug(\"a\", regex(R\"(\\b$)\"), regex_constants::match_not_eow));\n }\n \n+// PR libstdc++/77356\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  static const char* kNumericAnchor =\"(\\\\$|usd)(usd|\\\\$|to|and|up to|[0-9,\\\\.\\\\-\\\\sk])+\";\n+  const std::regex re(kNumericAnchor);\n+  (void)re;\n+}\n+\n+void\n+test05()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY(regex_match_debug(\"!\", std::regex(\"[![:alnum:]]\")));\n+  VERIFY(regex_match_debug(\"-\", std::regex(\"[a-]\", regex_constants::basic)));\n+  VERIFY(regex_match_debug(\"-\", std::regex(\"[a-]\")));\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n+  test05();\n   return 0;\n }\n "}]}