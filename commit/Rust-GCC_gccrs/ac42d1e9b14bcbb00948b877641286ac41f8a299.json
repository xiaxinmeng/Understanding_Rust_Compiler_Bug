{"sha": "ac42d1e9b14bcbb00948b877641286ac41f8a299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM0MmQxZTliMTRiY2JiMDA5NDhiODc3NjQxMjg2YWM0MWY4YTI5OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-14T23:00:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-14T23:00:20Z"}, "message": "mn10200-protos.h: New file.\n\n        * mn10200-protos.h: New file.\n\n        * mn10200.c: Include tm_p.h.  Add static prototypes.  Fix compile\n        time warnings.\n\n        * mn10200.h: Move prototypes to mn10200-protos.h.  Fix compile time\n        warnings.\n\n        * mn10200.md: Likewise.\n\nFrom-SVN: r31427", "tree": {"sha": "aeb08015b9a1d0367c0b4a5b01ce32b1a04993f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeb08015b9a1d0367c0b4a5b01ce32b1a04993f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac42d1e9b14bcbb00948b877641286ac41f8a299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac42d1e9b14bcbb00948b877641286ac41f8a299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac42d1e9b14bcbb00948b877641286ac41f8a299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac42d1e9b14bcbb00948b877641286ac41f8a299/comments", "author": null, "committer": null, "parents": [{"sha": "441d04c6db6e5b13c0d9eadf7decc1e49304174a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441d04c6db6e5b13c0d9eadf7decc1e49304174a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441d04c6db6e5b13c0d9eadf7decc1e49304174a"}], "stats": {"total": 135, "additions": 96, "deletions": 39}, "files": [{"sha": "8e491510083d186b2a47f3f328e16e297fbc70c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac42d1e9b14bcbb00948b877641286ac41f8a299", "patch": "@@ -1,3 +1,15 @@\n+2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* mn10200-protos.h: New file.\n+\n+\t* mn10200.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* mn10200.h: Move prototypes to mn10200-protos.h.  Fix compile time\n+\twarnings.\n+\t\n+\t* mn10200.md: Likewise.\n+\n 2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* h8300-protos.h: New file."}, {"sha": "4f82d61fd38704c46e2f77ef5d7382a34ae4868f", "filename": "gcc/config/mn10200/mn10200-protos.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200-protos.h?ref=ac42d1e9b14bcbb00948b877641286ac41f8a299", "patch": "@@ -0,0 +1,51 @@\n+/* Definitions of target machine for GNU compiler. Matsushita MN10200 series\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by Jeff Law (law@cygnus.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern void notice_update_cc PARAMS ((rtx, rtx));\n+extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n+\t\t\t\t\t\t      enum machine_mode,\n+\t\t\t\t\t\t      rtx, int));\n+extern const char *emit_a_shift PARAMS ((rtx, rtx *));\n+extern const char *output_tst PARAMS ((rtx, rtx));\n+extern int expand_a_shift PARAMS ((enum machine_mode, int, rtx[]));\n+\n+extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n+extern int extendpsi_operand PARAMS ((rtx, enum machine_mode));\n+extern int psimode_truncation_operand PARAMS ((rtx, enum machine_mode));\n+extern int constant_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int nshift_operator PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+#ifdef TREE_CODE\n+extern struct rtx_def *function_arg PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t     enum machine_mode, tree, int));\n+extern struct rtx_def *mn10200_va_arg PARAMS ((tree, tree));\n+extern int function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t       enum machine_mode, tree, int));\n+#endif /* TREE_CODE */\n+\n+extern void asm_file_start PARAMS ((FILE *));\n+extern void expand_prologue PARAMS ((void));\n+extern void expand_epilogue PARAMS ((void));\n+extern int total_frame_size PARAMS ((void));"}, {"sha": "9cafc33a114b33830117770c21b89e7c444bcbad", "filename": "gcc/config/mn10200/mn10200.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.c?ref=ac42d1e9b14bcbb00948b877641286ac41f8a299", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Matsushita MN10200 series\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -37,6 +37,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"obstack.h\"\n #include \"ggc.h\"\n+#include \"toplev.h\"\n+#include \"tm_p.h\"\n \n /* Global registers known to hold the value zero.\n \n@@ -58,6 +60,8 @@ Boston, MA 02111-1307, USA.  */\n rtx zero_dreg;\n rtx zero_areg;\n \n+static void count_tst_insns PARAMS ((int *));\n+\n /* Note whether or not we need an out of line epilogue.  */\n static int out_of_line_epilogue;\n \n@@ -486,7 +490,7 @@ total_frame_size ()\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n-      if (regs_ever_live[i] && !call_used_regs[i] && ! fixed_regs[i]\n+      if ((regs_ever_live[i] && !call_used_regs[i] && ! fixed_regs[i])\n \t  || (i == FRAME_POINTER_REGNUM && frame_pointer_needed))\n \tsize += 4;\n     }\n@@ -665,7 +669,7 @@ expand_prologue ()\n   for (i = 0, offset = outgoing_args_size;\n        i < FIRST_PSEUDO_REGISTER; i++)\n     {\n-      if (regs_ever_live[i] && !call_used_regs[i] && ! fixed_regs[i]\n+      if ((regs_ever_live[i] && !call_used_regs[i] && ! fixed_regs[i])\n \t  || (i == FRAME_POINTER_REGNUM && frame_pointer_needed))\n \t{\n \t  int regno;\n@@ -757,7 +761,7 @@ expand_epilogue ()\n   /* Restore each register.  */\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n-      if (regs_ever_live[i] && !call_used_regs[i] && ! fixed_regs[i]\n+      if ((regs_ever_live[i] && !call_used_regs[i] && ! fixed_regs[i])\n \t  || (i == FRAME_POINTER_REGNUM && frame_pointer_needed))\n \t{\n \t  int regno;\n@@ -860,7 +864,7 @@ notice_update_cc (body, insn)\n int\n call_address_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == REG);\n }\n@@ -870,7 +874,7 @@ call_address_operand (op, mode)\n int\n constant_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == MEM && CONSTANT_ADDRESS_P (XEXP (op, 0));\n }\n@@ -899,8 +903,6 @@ secondary_reload_class (class, mode, in, input)\n      rtx in;\n      int input;\n {\n-  int regno;\n-\n   /* Memory loads less than a full word wide can't have an\n      address or stack pointer destination.  They must use\n      a data register as an intermediate register.  */\n@@ -957,7 +959,7 @@ secondary_reload_class (class, mode, in, input)\n int\n nshift_operator (x, mode)\n      rtx x;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (x))\n     {\n@@ -1034,7 +1036,7 @@ enum shift_mode\n \n struct shift_insn\n {\n-  char *assembler;\n+  const char *assembler;\n   int cc_valid;\n };\n \n@@ -1060,6 +1062,10 @@ static const struct shift_insn shift_one[3][3] =\n   },\n };\n \n+static enum shift_alg get_shift_alg PARAMS ((enum shift_type,\n+\t\t\t\t\t     enum machine_mode, int,\n+\t\t\t\t\t     const char **, int *));\n+\n /* Given CPU, MODE, SHIFT_TYPE, and shift count COUNT, determine the best\n    algorithm for doing the shift.  The assembler code is stored in ASSEMBLER.\n    We don't achieve maximum efficiency in all cases, but the hooks are here\n@@ -1227,15 +1233,14 @@ get_shift_alg (shift_type, mode, count, assembler_p, cc_valid_p)\n \n /* Emit the assembler code for doing shifts.  */\n \n-char *\n+const char *\n emit_a_shift (insn, operands)\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\n      rtx *operands;\n {\n   static int loopend_lab;\n-  char *assembler;\n+  const char *assembler;\n   int cc_valid;\n-  rtx inside = PATTERN (insn);\n   rtx shift = operands[3];\n   enum machine_mode mode = GET_MODE (shift);\n   enum rtx_code code = GET_CODE (shift);\n@@ -1487,7 +1492,7 @@ mn10200_va_arg (valist, type)\n   return force_reg (Pmode, expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL));\n }\n \n-char *\n+const char *\n output_tst (operand, insn)\n      rtx operand, insn;\n {\n@@ -1572,6 +1577,7 @@ output_tst (operand, insn)\n \n    It accepts anything that is a general operand or the sum of the\n    stack pointer and a general operand.  */\n+int\n extendpsi_operand (op, mode)\n      rtx op;\n      enum machine_mode mode;"}, {"sha": "a976754c0fe582c91f989dfcf000d3f1bb19afa8", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=ac42d1e9b14bcbb00948b877641286ac41f8a299", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler. Matsushita MN10200 series\n-   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -53,7 +53,7 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  {{ \"\", TARGET_DEFAULT}}\n+  {{ \"\", TARGET_DEFAULT, 0}}\n \n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT 0\n@@ -249,11 +249,11 @@ enum reg_class {\n    of length N_REG_CLASSES.  */\n \n #define REG_CLASS_CONTENTS  \t\t\t\\\n-{     0,\t\t/* No regs      */\t\\\n-   0x0f,\t\t/* DATA_REGS */\t\t\\\n-   0xf0,\t\t/* ADDRESS_REGS */\t\\\n-   0xff,\t\t/* GENERAL_REGS */    \t\\\n-   0xff,\t\t/* ALL_REGS \t*/\t\\\n+{     {0},\t\t/* No regs      */\t\\\n+   {0x0f},\t\t/* DATA_REGS */\t\t\\\n+   {0xf0},\t\t/* ADDRESS_REGS */\t\\\n+   {0xff},\t\t/* GENERAL_REGS */    \t\\\n+   {0xff},\t\t/* ALL_REGS \t*/\t\\\n }\n \n /* The same information, inverted:\n@@ -504,12 +504,10 @@ struct cum_arg { int nbytes; };\n    NAMED is nonzero if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n-extern struct rtx_def *function_arg();\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&CUM, MODE, TYPE, NAMED)\n \n /* Implement `va_arg'.  */\n-extern struct rtx_def *mn10200_va_arg();\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   mn10200_va_arg (valist, type)\n \f\n@@ -1069,17 +1067,5 @@ do { char dstr[30];\t\t\t\t\t\\\n \t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG, REG, MEM }}, \\\n   {\"nshift_operator\",\t\t{ ASHIFTRT, LSHIFTRT, ASHIFT }},\n \n-extern void asm_file_start ();\n-extern void print_operand ();\n-extern void print_operand_address ();\n-extern void expand_prologue ();\n-extern void expand_epilogue ();\n-extern void notice_update_cc ();\n-extern int call_address_operand ();\n-extern enum reg_class secondary_reload_class ();\n-extern char *emit_a_shift ();\n-extern char *output_tst ();\n-extern int extendpsi_operand ();\n-extern int psimode_truncation_operand ();\n extern struct rtx_def *zero_dreg;\n extern struct rtx_def *zero_areg;"}, {"sha": "e0b3e75f75611c244c88a6c7ba6a4235f49dd583", "filename": "gcc/config/mn10200/mn10200.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac42d1e9b14bcbb00948b877641286ac41f8a299/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.md?ref=ac42d1e9b14bcbb00948b877641286ac41f8a299", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for Matsushita MN10200\n-;; Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n+;; Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n ;; Contributed by Jeff Law (law@cygnus.com).\n \n ;; This file is part of GNU CC.\n@@ -228,6 +228,8 @@\n       else\n \toutput_asm_insn (\\\"mov %o1,%L0\\\", operands);\n       return \\\"\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"cc\" \"none,clobber,clobber,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit,none_0hit\")])\n@@ -920,7 +922,7 @@\n   \"\"\n   \"\n {\n-  if (! call_address_operand (XEXP (operands[0], 0)))\n+  if (! call_address_operand (XEXP (operands[0], 0), VOIDmode))\n     XEXP (operands[0], 0) = force_reg (PSImode, XEXP (operands[0], 0));\n   emit_call_insn (gen_call_internal (XEXP (operands[0], 0), operands[1]));\n   DONE;\n@@ -943,7 +945,7 @@\n   \"\"\n   \"\n {\n-  if (! call_address_operand (XEXP (operands[1], 0)))\n+  if (! call_address_operand (XEXP (operands[1], 0), VOIDmode))\n     XEXP (operands[1], 0) = force_reg (PSImode, XEXP (operands[1], 0));\n   emit_call_insn (gen_call_value_internal (operands[0],\n \t\t\t\t\t   XEXP (operands[1], 0),"}]}