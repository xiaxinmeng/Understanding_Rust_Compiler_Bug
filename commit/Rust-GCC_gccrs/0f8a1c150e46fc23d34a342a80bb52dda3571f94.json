{"sha": "0f8a1c150e46fc23d34a342a80bb52dda3571f94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY4YTFjMTUwZTQ2ZmMyM2QzNGEzNDJhODBiYjUyZGRhMzU3MWY5NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-10T19:13:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-10T19:13:42Z"}, "message": "Document Dual ABI for std::ios_base::failure\n\n\t* doc/xml/faq.xml: Link to C++17 status. Add note to outdated answer.\n\t* doc/xml/manual/debug_mode.xml: Add array and forward_list to list\n\tof C++11 containers with Debug Mode support.\n\t* doc/xml/manual/using.xml: Document Dual ABI for ios_base::failure.\n\t* doc/html/*: Regenerate.\n\nFrom-SVN: r260129", "tree": {"sha": "29152dc62b23206fb5be3534aec3c3c82371862f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29152dc62b23206fb5be3534aec3c3c82371862f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f8a1c150e46fc23d34a342a80bb52dda3571f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8a1c150e46fc23d34a342a80bb52dda3571f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8a1c150e46fc23d34a342a80bb52dda3571f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8a1c150e46fc23d34a342a80bb52dda3571f94/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6e1cfddc4758ff6f66c5fc7a8fd54e3f141973d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e1cfddc4758ff6f66c5fc7a8fd54e3f141973d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e1cfddc4758ff6f66c5fc7a8fd54e3f141973d"}], "stats": {"total": 117, "additions": 98, "deletions": 19}, "files": [{"sha": "1d6a3fa6f4231711b219dfab7c1fe072afc247cc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -1,3 +1,11 @@\n+2018-05-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/faq.xml: Link to C++17 status. Add note to outdated answer.\n+\t* doc/xml/manual/debug_mode.xml: Add array and forward_list to list\n+\tof C++11 containers with Debug Mode support.\n+\t* doc/xml/manual/using.xml: Document Dual ABI for ios_base::failure.\n+\t* doc/html/*: Regenerate.\n+\n 2018-05-10  Jason Merrill  <jason@redhat.com>\n \n \t* include/bits/regex_compiler.h (_S_cache_size): Change from\n@@ -41,7 +49,7 @@\n \t(_Parameter::_Parameter(const _Safe_local_iterator<>&, const char*,\n \t_Is_iterator)): Likewise.\n \t(_Parameter::_S_reverse_state(_Iterator_state)): New.\n-        (_Parameter(__gnu_cxx::__normal_iterator<> const&, const char*,\n+\t(_Parameter(__gnu_cxx::__normal_iterator<> const&, const char*,\n \t_Is_iterator)): New.\n \t(_Parameter(std::reverse_iterator<> const&, const char*,\n \t_Is_iterator)): New."}, {"sha": "a0208269dd8d8858969885b499665f278e4900bf", "filename": "libstdc++-v3/doc/html/faq.html", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -538,14 +538,15 @@\n     except for some corner cases.  Support for localization\n     in <code class=\"classname\">locale</code> may be incomplete on some non-GNU\n     platforms. Also dependent on the underlying platform is support\n-    for <span class=\"type\">wchar_t</span> and <span class=\"type\">long\n-    long</span> specializations, and details of thread support.\n+    for <span class=\"type\">wchar_t</span> and <span class=\"type\">long long</span> specializations,\n+    and details of thread support.\n     </p><p>    \n     Long answer: See the implementation status pages for \n     <a class=\"link\" href=\"manual/status.html#status.iso.1998\" title=\"C++ 1998/2003\">C++98</a>,\n-    <a class=\"link\" href=\"manual/status.html#status.iso.tr1\" title=\"C++ TR1\">TR1</a>, and \n-    <a class=\"link\" href=\"manual/status.html#status.iso.2011\" title=\"C++ 2011\">C++11</a>.\n-    <a class=\"link\" href=\"manual/status.html#status.iso.2014\" title=\"C++ 2014\">C++14</a>.\n+    <a class=\"link\" href=\"manual/status.html#status.iso.tr1\" title=\"C++ TR1\">TR1</a>,\n+    <a class=\"link\" href=\"manual/status.html#status.iso.2011\" title=\"C++ 2011\">C++11</a>,\n+    <a class=\"link\" href=\"manual/status.html#status.iso.2014\" title=\"C++ 2014\">C++14</a>, and\n+    <a class=\"link\" href=\"manual/status.html#status.iso.2017\" title=\"C++ 2017\">C++17</a>.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.standard_bugs\"></a><a id=\"q-standard_bugs\"></a><p><strong>5.2.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       Bugs in the ISO C++ language or library specification\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-standard_bugs\"></a></td><td align=\"left\" valign=\"top\"><p>\n@@ -642,7 +643,7 @@\n     without other drawbacks, send us a patch.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.ambiguous_overloads\"></a><a id=\"q-ambiguous_overloads\"></a><p><strong>6.3.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       Ambiguous overloads after including an old-style header\n-    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-ambiguous_overloads\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-ambiguous_overloads\"></a></td><td align=\"left\" valign=\"top\"><div class=\"note\" style=\"margin-left: 0.5in; margin-right: 0.5in;\"><h3 class=\"title\">Note</h3><p>This answer is old and probably no longer be relevant.</p></div><p>\n     Another problem is the <code class=\"literal\">rel_ops</code> namespace and the template\n     comparison operator functions contained therein.  If they become\n     visible in the same namespace as other comparison functions"}, {"sha": "e4f7ea54d226d708b5bd517ac19e2e1b0f4875ff", "filename": "libstdc++-v3/doc/html/manual/debug_mode_using.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_using.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_using.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode_using.html?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -20,4 +20,4 @@\n   containers:\n </p><div class=\"table\"><a id=\"table.debug_mode_containers\"></a><p class=\"title\"><strong>Table\u00a017.1.\u00a0Debugging Containers</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"Debugging Containers\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::bitset</code></td><td align=\"left\"><code class=\"filename\">bitset</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::bitset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/bitset&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::deque</code></td><td align=\"left\"><code class=\"filename\">deque</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::deque</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/deque&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::list</code></td><td align=\"left\"><code class=\"filename\">list</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::list</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/list&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::map</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::map</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::multimap</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multimap</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::multiset</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multiset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::set</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::set</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::string</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::wstring</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::wstring</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::basic_string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::basic_string</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/string&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::vector</code></td><td align=\"left\"><code class=\"filename\">vector</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::vector</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/vector&gt;</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p>In addition, when compiling in C++11 mode, these additional\n containers have additional debug capability.\n-</p><div class=\"table\"><a id=\"table.debug_mode_containers_cxx11\"></a><p class=\"title\"><strong>Table\u00a017.2.\u00a0Debugging Containers C++11</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"Debugging Containers C++11\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::unordered_map</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_map</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_set</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_set</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr></tbody></table></div></div><br class=\"table-break\" /></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"debug_mode_semantics.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"debug_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug_mode_design.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Semantics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Design</td></tr></table></div></body></html>\n\\ No newline at end of file\n+</p><div class=\"table\"><a id=\"table.debug_mode_containers_cxx11\"></a><p class=\"title\"><strong>Table\u00a017.2.\u00a0Debugging Containers C++11</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"Debugging Containers C++11\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::array</code></td><td align=\"left\"><code class=\"filename\">array</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::array</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/array&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::forward_list</code></td><td align=\"left\"><code class=\"filename\">forward_list</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::forward_list</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/forward_list&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_map</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_map</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_map&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_set</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_set</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">&lt;debug/unordered_set&gt;</code></td></tr></tbody></table></div></div><br class=\"table-break\" /></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"debug_mode_semantics.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"debug_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug_mode_design.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Semantics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Design</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "7ccb4e90abc2eb903ab8b3690532ae6c9830b68c", "filename": "libstdc++-v3/doc/html/manual/using.html", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -25,5 +25,7 @@\n         <code class=\"filename\">&lt;atomic&gt;</code>.\n       </td></tr><tr><td align=\"left\"><code class=\"literal\">-lstdc++fs</code></td><td align=\"left\">Linking to <code class=\"filename\">libstdc++fs</code>\n         is required for use of the Filesystem library extensions in\n-        <code class=\"filename\">&lt;experimental/filesystem&gt;</code>.\n+        <code class=\"filename\">&lt;experimental/filesystem&gt;</code>\n+        and the C++17 Filesystem library in\n+        <code class=\"filename\">&lt;filesystem&gt;</code>.\n       </td></tr><tr><td align=\"left\"><code class=\"literal\">-fopenmp</code></td><td align=\"left\">For <a class=\"link\" href=\"parallel_mode.html\" title=\"Chapter\u00a018.\u00a0Parallel Mode\">parallel</a> mode.</td></tr></tbody></table></div></div><br class=\"table-break\" /></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"make.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"intro.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"using_headers.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Make\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Headers</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "916ac575f64b3ff05352513753bc6a62cd3694f4", "filename": "libstdc++-v3/doc/html/manual/using_dual_abi.html", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_dual_abi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_dual_abi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_dual_abi.html?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -14,7 +14,7 @@\n   for the new implementations have different names the definitions for both\n   versions can be present in the same library.\n </p><p> The <span class=\"symbol\">_GLIBCXX_USE_CXX11_ABI</span> macro (see\n-<a class=\"xref\" href=\"using_macros.html\" title=\"Macros\">Macros</a>) controls whether\n+  <a class=\"xref\" href=\"using_macros.html\" title=\"Macros\">Macros</a>) controls whether\n   the declarations in the library headers use the old or new ABI.\n   So the decision of which ABI to use can be made separately for each\n   source file being compiled.\n@@ -43,10 +43,35 @@\n   facet that derives from one or other version of\n   <code class=\"classname\">time_get</code> is installed in the locale).\n </p><p> Although the standard exception types defined in\n-  <code class=\"filename\">&lt;stdexcept&gt;</code> use strings, they\n+  <code class=\"filename\">&lt;stdexcept&gt;</code> use strings, most\n   are not defined twice, so that a <code class=\"classname\">std::out_of_range</code>\n   exception thrown in one file can always be caught by a suitable handler in\n   another file, even if the two files are compiled with different ABIs.\n+</p><p> One exception type does change when using the new ABI, namely\n+  <code class=\"classname\">std::ios_base::failure</code>.\n+  This is necessary because the 2011 standard changed its base class from\n+  <code class=\"classname\">std::exception</code> to\n+  <code class=\"classname\">std::system_error</code>, which causes its layout to change.\n+  Exceptions due to iostream errors are thrown by a function inside\n+  <code class=\"filename\">libstdc++.so</code>, so whether the thrown\n+  exception uses the old <code class=\"classname\">std::ios_base::failure</code> type\n+  or the new one depends on the ABI that was active when\n+  <code class=\"filename\">libstdc++.so</code> was built,\n+  <span class=\"emphasis\"><em>not</em></span> the ABI active in the user code that is using\n+  iostreams.\n+  This means that for a given build of GCC the type thrown is fixed.\n+  In current releases the library throws a special type that can be caught\n+  by handlers for either the old or new type,\n+  but for GCC 7.1, 7.2 and 7.3 the library throws the new\n+  <code class=\"classname\">std::ios_base::failure</code> type,\n+  and for GCC 5.x and 6.x the library throws the old type.\n+  Catch handlers of type <code class=\"classname\">std::ios_base::failure</code>\n+  will only catch the exceptions if using a newer release,\n+  or if the handler is compiled with the same ABI as the type thrown by\n+  the library.\n+  Handlers for <code class=\"classname\">std::exception</code> will always catch\n+  iostreams exceptions, because the old and new type both inherit from\n+  <code class=\"classname\">std::exception</code>.\n </p><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.abi.trouble\"></a>Troubleshooting</h3></div></div></div><p> If you get linker errors about undefined references to symbols\n   that involve types in the <code class=\"code\">std::__cxx11</code> namespace or the tag\n   <code class=\"code\">[abi:cxx11]</code> then it probably indicates that you are trying to"}, {"sha": "edc07f16acb32e4079c21bc80206e7b112ab50a2", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -742,15 +742,16 @@\n     except for some corner cases.  Support for localization\n     in <classname>locale</classname> may be incomplete on some non-GNU\n     platforms. Also dependent on the underlying platform is support\n-    for <type>wchar_t</type> and <type>long\n-    long</type> specializations, and details of thread support.\n+    for <type>wchar_t</type> and <type>long long</type> specializations,\n+    and details of thread support.\n     </para>\n     <para>    \n     Long answer: See the implementation status pages for \n     <link linkend=\"status.iso.1998\">C++98</link>,\n-    <link linkend=\"status.iso.tr1\">TR1</link>, and \n-    <link linkend=\"status.iso.2011\">C++11</link>.\n-    <link linkend=\"status.iso.2014\">C++14</link>.\n+    <link linkend=\"status.iso.tr1\">TR1</link>,\n+    <link linkend=\"status.iso.2011\">C++11</link>,\n+    <link linkend=\"status.iso.2014\">C++14</link>, and\n+    <link linkend=\"status.iso.2017\">C++17</link>.\n     </para> \n   </answer>\n </qandaentry>\n@@ -891,6 +892,9 @@\n     </para>\n   </question>\n   <answer xml:id=\"a-ambiguous_overloads\">\n+    <note>\n+      <para>This answer is old and probably no longer be relevant.</para>\n+    </note>\n     <para>\n     Another problem is the <literal>rel_ops</literal> namespace and the template\n     comparison operator functions contained therein.  If they become"}, {"sha": "570c17ba28a551cc0b1c3ae179e02fff1096ffeb", "filename": "libstdc++-v3/doc/xml/manual/debug_mode.xml", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdebug_mode.xml?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -285,7 +285,19 @@ containers have additional debug capability.\n   </row>\n </thead>\n <tbody>\n-    <row>\n+  <row>\n+    <entry><classname>std::array</classname></entry>\n+    <entry><filename class=\"headerfile\">array</filename></entry>\n+    <entry><classname>__gnu_debug::array</classname></entry>\n+    <entry><filename class=\"headerfile\">&lt;debug/array&gt;</filename></entry>\n+  </row>\n+  <row>\n+    <entry><classname>std::forward_list</classname></entry>\n+    <entry><filename class=\"headerfile\">forward_list</filename></entry>\n+    <entry><classname>__gnu_debug::forward_list</classname></entry>\n+    <entry><filename class=\"headerfile\">&lt;debug/forward_list&gt;</filename></entry>\n+  </row>\n+  <row>\n     <entry><classname>std::unordered_map</classname></entry>\n     <entry><filename class=\"headerfile\">unordered_map</filename></entry>\n     <entry><classname>__gnu_debug::unordered_map</classname></entry>"}, {"sha": "67f9cf5216b106b83d02838bde0f17ef5dc34935", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8a1c150e46fc23d34a342a80bb52dda3571f94/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=0f8a1c150e46fc23d34a342a80bb52dda3571f94", "patch": "@@ -1036,7 +1036,7 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n </para>\n \n <para> The <symbol>_GLIBCXX_USE_CXX11_ABI</symbol> macro (see\n-<xref linkend=\"manual.intro.using.macros\"/>) controls whether\n+  <xref linkend=\"manual.intro.using.macros\"/>) controls whether\n   the declarations in the library headers use the old or new ABI.\n   So the decision of which ABI to use can be made separately for each\n   source file being compiled.\n@@ -1071,12 +1071,39 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n </para>\n \n <para> Although the standard exception types defined in\n-  <filename class=\"headerfile\">&lt;stdexcept&gt;</filename> use strings, they\n+  <filename class=\"headerfile\">&lt;stdexcept&gt;</filename> use strings, most\n   are not defined twice, so that a <classname>std::out_of_range</classname>\n   exception thrown in one file can always be caught by a suitable handler in\n   another file, even if the two files are compiled with different ABIs.\n </para>\n \n+<para> One exception type does change when using the new ABI, namely\n+  <classname>std::ios_base::failure</classname>.\n+  This is necessary because the 2011 standard changed its base class from\n+  <classname>std::exception</classname> to\n+  <classname>std::system_error</classname>, which causes its layout to change.\n+  Exceptions due to iostream errors are thrown by a function inside\n+  <filename class=\"libraryfile\">libstdc++.so</filename>, so whether the thrown\n+  exception uses the old <classname>std::ios_base::failure</classname> type\n+  or the new one depends on the ABI that was active when\n+  <filename class=\"libraryfile\">libstdc++.so</filename> was built,\n+  <emphasis>not</emphasis> the ABI active in the user code that is using\n+  iostreams.\n+  This means that for a given build of GCC the type thrown is fixed.\n+  In current releases the library throws a special type that can be caught\n+  by handlers for either the old or new type,\n+  but for GCC 7.1, 7.2 and 7.3 the library throws the new\n+  <classname>std::ios_base::failure</classname> type,\n+  and for GCC 5.x and 6.x the library throws the old type.\n+  Catch handlers of type <classname>std::ios_base::failure</classname>\n+  will only catch the exceptions if using a newer release,\n+  or if the handler is compiled with the same ABI as the type thrown by\n+  the library.\n+  Handlers for <classname>std::exception</classname> will always catch\n+  iostreams exceptions, because the old and new type both inherit from\n+  <classname>std::exception</classname>.\n+</para>\n+\n <section xml:id=\"manual.intro.using.abi.trouble\" xreflabel=\"Dual ABI Troubleshooting\"><info><title>Troubleshooting</title></info>\n \n <para> If you get linker errors about undefined references to symbols"}]}