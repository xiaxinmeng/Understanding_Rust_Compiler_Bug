{"sha": "6540653bc29778a5473746bc7463c75204e07c23", "node_id": "C_kwDOANBUbNoAKDY1NDA2NTNiYzI5Nzc4YTU0NzM3NDZiYzc0NjNjNzUyMDRlMDdjMjM", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-03T18:42:21Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-03T19:21:12Z"}, "message": "gccrs: Take advantage of our new unify_and to inject inference\n\nWen computing higher ranked trait bounds where there are multiple type\nparams and ones which are not bound entirely on the impl-type we need\nto inject inference variables as required to compute the types. The\ninference variables we inject are missing the callbacks that we can compute\nthe bounds properly so this is the first part of the fix.\n\nAddresses #1893\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-trait-resolve.cc: use unify_and infer", "tree": {"sha": "63639196f347a39ddbdd6b0d03dd1e6efa2b7211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63639196f347a39ddbdd6b0d03dd1e6efa2b7211"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6540653bc29778a5473746bc7463c75204e07c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6540653bc29778a5473746bc7463c75204e07c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6540653bc29778a5473746bc7463c75204e07c23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6540653bc29778a5473746bc7463c75204e07c23/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4c851df0358389970ffe3ce1ad495954729fc5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c851df0358389970ffe3ce1ad495954729fc5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c851df0358389970ffe3ce1ad495954729fc5f"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "632a60a5366177b6cde4830cfdf67c828dece422", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6540653bc29778a5473746bc7463c75204e07c23/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6540653bc29778a5473746bc7463c75204e07c23/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=6540653bc29778a5473746bc7463c75204e07c23", "patch": "@@ -497,10 +497,12 @@ AssociatedImplTrait::setup_associated_types (\n   // the type correctly as our receiver may be generic and we are inferring its\n   // generic arguments and this Self might be the concrete version or vice\n   // versa.\n-  auto result = unify_site (get_impl_block ()->get_mappings ().get_hirid (),\n-\t\t\t    TyTy::TyWithLocation (receiver),\n-\t\t\t    TyTy::TyWithLocation (impl_self_infer),\n-\t\t\t    impl_predicate.get_locus ());\n+  auto result = unify_site_and (get_impl_block ()->get_mappings ().get_hirid (),\n+\t\t\t\tTyTy::TyWithLocation (receiver),\n+\t\t\t\tTyTy::TyWithLocation (impl_self_infer),\n+\t\t\t\timpl_predicate.get_locus (),\n+\t\t\t\ttrue /*emit-errors*/, true /*commit-if-ok*/,\n+\t\t\t\ttrue /*infer*/, true /*cleanup-on-fail*/);\n   rust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n   TyTy::BaseType *self_result = result;\n \n@@ -525,8 +527,10 @@ AssociatedImplTrait::setup_associated_types (\n       TyTy::BaseType *b = hrtb_bound_arguments.at (i);\n \n       result\n-\t= unify_site (a->get_ref (), TyTy::TyWithLocation (a),\n-\t\t      TyTy::TyWithLocation (b), impl_predicate.get_locus ());\n+\t= unify_site_and (a->get_ref (), TyTy::TyWithLocation (a),\n+\t\t\t  TyTy::TyWithLocation (b), impl_predicate.get_locus (),\n+\t\t\t  true /*emit-errors*/, true /*commit-if-ok*/,\n+\t\t\t  true /*infer*/, true /*cleanup-on-fail*/);\n       rust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n     }\n "}]}