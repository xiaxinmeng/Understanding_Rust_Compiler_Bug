{"sha": "b8020a5aafd02af1ccf99372d3d8052c40b59725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwMjBhNWFhZmQwMmFmMWNjZjk5MzcyZDNkODA1MmM0MGI1OTcyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-03T17:44:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-03T17:44:42Z"}, "message": "i386: Fix vph{add,subs?}[wd] 256-bit AVX2 RTL patterns [PR94460]\n\nThe following testcase is miscompiled, because the AVX2 patterns don't\ndescribe correctly what the insn does.  E.g. vphaddd with %ymm* operands\n(the second pattern) instruction as per:\nhttps://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm256_hadd_epi32&expand=2941\ndoes { a0+a1, a2+a3, b0+b1, b2+b3, a4+a5, a6+a7, b4+b5, b6+b7 }\nbut our RTL pattern did\n     { a0+a1, a2+a3, a4+a5, a6+a7, b0+b1, b2+b3, b4+b5, b6+b7 }\nwhere the first and last 64 bits are the same and two middle 64 bits\nswapped.\nhttps://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm256_hadd_epi16&expand=2939\nsimilarly, insn does:\n     { a0+a1, a2+a3, a4+a5, a6+a7, b0+b1, b2+b3, b4+b5, b6+b7,\n       a8+a9, a10+a11, a12+a13, a14+a15, b8+b9, b10+b11, b12+b13, b14+b15 }\nbut RTL pattern did\n     { a0+a1, a2+a3, a4+a5, a6+a7, a8+a9, a10+a11, a12+a13, a14+a15,\n       b0+b1, b2+b3, b4+b5, b6+b7, b8+b9, b10+b11, b12+b13, b14+b15 }\nagain, first and last 64 bits are the same and the two middle 64 bits\nswapped.\n\n2020-04-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94460\n\t* config/i386/sse.md (avx2_ph<plusminus_mnemonic>wv16hi3,\n\tavx2_ph<plusminus_mnemonic>dv8si3): Fix up RTL pattern to do\n\tsecond half of first lane from first lane of second operand and\n\tfirst half of second lane from second lane of first operand.\n\n\t* gcc.target/i386/avx2-pr94460.c: New test.", "tree": {"sha": "2a6c9032324a2da4dcc2d3005a6f4d94bff1b3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a6c9032324a2da4dcc2d3005a6f4d94bff1b3af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8020a5aafd02af1ccf99372d3d8052c40b59725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8020a5aafd02af1ccf99372d3d8052c40b59725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8020a5aafd02af1ccf99372d3d8052c40b59725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8020a5aafd02af1ccf99372d3d8052c40b59725/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ecad3c0327418c6e20ef47c6c5a8015bb99b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ecad3c0327418c6e20ef47c6c5a8015bb99b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ecad3c0327418c6e20ef47c6c5a8015bb99b2c"}], "stats": {"total": 96, "additions": 70, "deletions": 26}, "files": [{"sha": "7083bbb9cce925c5652457ddce57ade3d59f013f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8020a5aafd02af1ccf99372d3d8052c40b59725", "patch": "@@ -1,3 +1,11 @@\n+2020-04-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94460\n+\t* config/i386/sse.md (avx2_ph<plusminus_mnemonic>wv16hi3,\n+\tavx2_ph<plusminus_mnemonic>dv8si3): Fix up RTL pattern to do\n+\tsecond half of first lane from first lane of second operand and\n+\tfirst half of second lane from second lane of first operand.\n+\n 2020-04-03  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm_mve.h: Condition the header file on __ARM_FEATURE_MVE."}, {"sha": "24b3acd163e8ca8469feb0bb2feeff7cef4f1ca6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b8020a5aafd02af1ccf99372d3d8052c40b59725", "patch": "@@ -16057,22 +16057,6 @@\n \t\t(ssse3_plusminus:HI\n \t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 6)]))\n \t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 7)])))))\n-\t    (vec_concat:V4HI\n-\t      (vec_concat:V2HI\n-\t\t(ssse3_plusminus:HI\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 8)]))\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 9)])))\n-\t\t(ssse3_plusminus:HI\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 10)]))\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 11)]))))\n-\t      (vec_concat:V2HI\n-\t\t(ssse3_plusminus:HI\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 12)]))\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 13)])))\n-\t\t(ssse3_plusminus:HI\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 14)]))\n-\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 15)]))))))\n-\t  (vec_concat:V8HI\n \t    (vec_concat:V4HI\n \t      (vec_concat:V2HI\n \t\t(ssse3_plusminus:HI\n@@ -16089,7 +16073,23 @@\n \t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 5)])))\n \t\t(ssse3_plusminus:HI\n \t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 6)]))\n-\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 7)])))))\n+\t\t  (vec_select:HI (match_dup 2) (parallel [(const_int 7)]))))))\n+\t  (vec_concat:V8HI\n+\t    (vec_concat:V4HI\n+\t      (vec_concat:V2HI\n+\t\t(ssse3_plusminus:HI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 8)]))\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 9)])))\n+\t\t(ssse3_plusminus:HI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 10)]))\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 11)]))))\n+\t      (vec_concat:V2HI\n+\t\t(ssse3_plusminus:HI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 12)]))\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 13)])))\n+\t\t(ssse3_plusminus:HI\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 14)]))\n+\t\t  (vec_select:HI (match_dup 1) (parallel [(const_int 15)])))))\n \t    (vec_concat:V4HI\n \t      (vec_concat:V2HI\n \t\t(ssse3_plusminus:HI\n@@ -16222,14 +16222,6 @@\n \t      (plusminus:SI\n \t\t(vec_select:SI (match_dup 1) (parallel [(const_int 2)]))\n \t\t(vec_select:SI (match_dup 1) (parallel [(const_int 3)]))))\n-\t    (vec_concat:V2SI\n-\t      (plusminus:SI\n-\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 4)]))\n-\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 5)])))\n-\t      (plusminus:SI\n-\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 6)]))\n-\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 7)])))))\n-\t  (vec_concat:V4SI\n \t    (vec_concat:V2SI\n \t      (plusminus:SI\n \t\t(vec_select:SI\n@@ -16238,7 +16230,15 @@\n \t\t(vec_select:SI (match_dup 2) (parallel [(const_int 1)])))\n \t      (plusminus:SI\n \t\t(vec_select:SI (match_dup 2) (parallel [(const_int 2)]))\n-\t\t(vec_select:SI (match_dup 2) (parallel [(const_int 3)]))))\n+\t\t(vec_select:SI (match_dup 2) (parallel [(const_int 3)])))))\n+\t  (vec_concat:V4SI\n+\t    (vec_concat:V2SI\n+\t      (plusminus:SI\n+\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 4)]))\n+\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 5)])))\n+\t      (plusminus:SI\n+\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 6)]))\n+\t\t(vec_select:SI (match_dup 1) (parallel [(const_int 7)]))))\n \t    (vec_concat:V2SI\n \t      (plusminus:SI\n \t\t(vec_select:SI (match_dup 2) (parallel [(const_int 4)]))"}, {"sha": "67a14db7930d3f83501aa68056cb112e47af99b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8020a5aafd02af1ccf99372d3d8052c40b59725", "patch": "@@ -1,3 +1,8 @@\n+2020-04-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94460\n+\t* gcc.target/i386/avx2-pr94460.c: New test.\n+\n 2020-04-03  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/93211"}, {"sha": "75b7a7bf31338946d0f5e25aa5116c8c583eb2f7", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr94460.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr94460.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8020a5aafd02af1ccf99372d3d8052c40b59725/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr94460.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr94460.c?ref=b8020a5aafd02af1ccf99372d3d8052c40b59725", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/94460 */\n+/* { dg-do run { target { avx2 && int128 } } } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#include <x86intrin.h>\n+#include \"avx2-check.h\"\n+\n+typedef __int128 v2ti __attribute__ ((__vector_size__ (32)));\n+\n+static inline v2ti\n+foo (__v16hi b)\n+{\n+  return (v2ti) _mm256_hsub_epi16 ((__m256i) b, (__m256i) b);\n+}\n+\n+static inline v2ti\n+bar (__v8si b)\n+{\n+  return (v2ti) _mm256_hsub_epi32 ((__m256i) b, (__m256i) b);\n+}\n+\n+static void\n+avx2_test (void)\n+{\n+  v2ti x = foo ((__v16hi) { 1 });\n+  if (x[0] != ((__int128)1 << 64 | 1) || x[1] != 0)\n+    abort ();\n+  x = bar ((__v8si) { 1 });\n+  if (x[0] != ((__int128)1 << 64 | 1) || x[1] != 0)\n+    abort ();\n+}"}]}