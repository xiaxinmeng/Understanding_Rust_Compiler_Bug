{"sha": "50b69666aa028b3f643d69eda72bd3729428f8ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiNjk2NjZhYTAyOGIzZjY0M2Q2OWVkYTcyYmQzNzI5NDI4ZjhlZA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-07-20T22:55:50Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2005-07-20T22:55:50Z"}, "message": "sh.md (UNSPEC_SP_SET, [...]): New constants.\n\n\t* config/sh/sh.md (UNSPEC_SP_SET, UNSPEC_SP_TEST): New constants.\n\t(stack_protect_set, stack_protect_test): New expanders.\n        (stack_protect_set_si, stack_protect_set_si_media,\n\tstack_protect_set_di_media, stack_protect_test_si,\n        stack_protect_test_si_media, stack_protect_test_di_media):\n\tNew insns.\n\nFrom-SVN: r102206", "tree": {"sha": "2fc78ef2238346abd04c44f78c5e10c1fbf32d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc78ef2238346abd04c44f78c5e10c1fbf32d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b69666aa028b3f643d69eda72bd3729428f8ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b69666aa028b3f643d69eda72bd3729428f8ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b69666aa028b3f643d69eda72bd3729428f8ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b69666aa028b3f643d69eda72bd3729428f8ed/comments", "author": null, "committer": null, "parents": [{"sha": "cdcdee12daace5c1072620b1db280a6a51156c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcdee12daace5c1072620b1db280a6a51156c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcdee12daace5c1072620b1db280a6a51156c96"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "746dc8539a45ce09dbed0af7cdbf1a78d35d0a30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b69666aa028b3f643d69eda72bd3729428f8ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b69666aa028b3f643d69eda72bd3729428f8ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50b69666aa028b3f643d69eda72bd3729428f8ed", "patch": "@@ -1,3 +1,12 @@\n+2005-07-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.md (UNSPEC_SP_SET, UNSPEC_SP_TEST): New constants.\n+\t(stack_protect_set, stack_protect_test): New expanders.\n+        (stack_protect_set_si, stack_protect_set_si_media,\n+\tstack_protect_set_di_media, stack_protect_test_si,\n+        stack_protect_test_si_media, stack_protect_test_di_media):\n+\tNew insns.\n+\n 2005-07-20  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* c-typeck.c (output_init_element): Don't copy the INTEGER_CST."}, {"sha": "0c93a4d3976d6680dd76ecc201459a99156bfab2", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b69666aa028b3f643d69eda72bd3729428f8ed/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b69666aa028b3f643d69eda72bd3729428f8ed/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=50b69666aa028b3f643d69eda72bd3729428f8ed", "patch": "@@ -150,6 +150,8 @@\n   (UNSPEC_DIV_INV20\t34)\n   (UNSPEC_ASHIFTRT\t35)\n   (UNSPEC_THUNK\t\t36)\n+  (UNSPEC_SP_SET\t40)\n+  (UNSPEC_SP_TEST\t41)\n \n   ;; These are used with unspec_volatile.\n   (UNSPECV_BLOCKAGE\t0)\n@@ -13131,3 +13133,112 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   if (!n_changes)\n     FAIL;\n }\")\n+\n+; Stack Protector Patterns\n+\n+(define_expand \"stack_protect_set\"\n+  [(set (match_operand 0 \"memory_operand\" \"\")\n+\t(match_operand 1 \"memory_operand\" \"\"))]\n+  \"\"\n+{\n+  if (TARGET_SHMEDIA)\n+    {\n+      if (TARGET_SHMEDIA64)\n+\temit_insn (gen_stack_protect_set_di_media (operands[0], operands[1]));\n+      else\n+\temit_insn (gen_stack_protect_set_si_media (operands[0], operands[1]));\n+    }\n+  else\n+    emit_insn (gen_stack_protect_set_si (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_set_si\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n+  \"!TARGET_SHMEDIA\"\n+  \"mov.l\\t%1, %2\\;mov.l\\t%2, %0\\;mov\\t#0, %2\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"6\")])\n+\n+(define_insn \"stack_protect_set_si_media\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n+  \"TARGET_SHMEDIA\"\n+  \"ld%M1.l\\t%m1, %2\\;st%M0.l\\t%m0, %2\\;movi\\t0, %2\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"stack_protect_set_di_media\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n+   (set (match_scratch:DI 2 \"=&r\") (const_int 0))]\n+  \"TARGET_SHMEDIA64\"\n+  \"ld%M1.q\\t%m1, %2\\;st%M0.q\\t%m0, %2\\;movi\\t0, %2\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_expand \"stack_protect_test\"\n+  [(match_operand 0 \"memory_operand\" \"\")\n+   (match_operand 1 \"memory_operand\" \"\")\n+   (match_operand 2 \"\" \"\")]\n+  \"\"\n+{\n+  if (TARGET_SHMEDIA)\n+    {\n+      rtx tmp = gen_reg_rtx (GET_MODE (operands[0]));\n+\n+      if (TARGET_SHMEDIA64)\n+\temit_insn (gen_stack_protect_test_di_media (tmp, operands[0],\n+\t\t\t\t\t\t    operands[1]));\n+      else\n+\temit_insn (gen_stack_protect_test_si_media (tmp, operands[0],\n+\t\t\t\t\t\t    operands[1]));\n+\n+      emit_jump_insn (gen_bne_media (operands[2], tmp, const0_rtx));\n+    }\n+  else\n+    {\n+      emit_insn (gen_stack_protect_test_si (operands[0], operands[1]));\n+      emit_jump_insn (gen_branch_true (operands[2]));\n+    }\n+\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_test_si\"\n+  [(set (reg:SI T_REG)\n+        (unspec:SI [(match_operand:SI 0 \"memory_operand\" \"m\")\n+\t\t    (match_operand:SI 1 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_SP_TEST))\n+  (set (match_scratch:SI 2 \"=&r\") (const_int 0))\n+  (set (match_scratch:SI 3 \"=&r\") (const_int 0))]\n+  \"!TARGET_SHMEDIA\"\n+  \"mov.l\\t%0, %2\\;mov.l\\t%1, %3\\;cmp/eq\\t%2, %3\\;mov\\t#0, %2\\;mov\\t#0, %3\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"10\")])\n+\n+(define_insn \"stack_protect_test_si_media\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n+        (unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")\n+\t\t    (match_operand:SI 2 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_SP_TEST))\n+  (set (match_scratch:SI 3 \"=&r\") (const_int 0))]\n+  \"TARGET_SHMEDIA\"\n+  \"ld%M1.l\\t%m1, %0\\;ld%M2.l\\t%m2, %3\\;cmpeq\\t%0, %3, %0\\;movi\\t0, %3\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"16\")])\n+\n+(define_insn \"stack_protect_test_di_media\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+        (unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")\n+\t\t    (match_operand:DI 2 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_SP_TEST))\n+  (set (match_scratch:DI 3 \"=&r\") (const_int 0))]\n+  \"TARGET_SHMEDIA64\"\n+  \"ld%M1.q\\t%m1, %0\\;ld%M2.q\\t%m2, %3\\;cmpeq\\t%0, %3, %0\\;movi\\t0, %3\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"16\")])"}]}