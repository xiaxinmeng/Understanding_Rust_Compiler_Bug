{"sha": "c65b06073ce31831f65fce84a393c106c1ad5a07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1YjA2MDczY2UzMTgzMWY2NWZjZTg0YTM5M2MxMDZjMWFkNWEwNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-12-21T19:19:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-12-21T19:19:47Z"}, "message": "re PR c++/51611 ([c++0x] ICE with non-static data member initializer and virtual base class)\n\n\tPR c++/51611\n\t* cp-tree.h (CONVERT_EXPR_VBASE_PATH): New.\n\t* class.c (build_base_path): Defer vbase conversion in an NSDMI.\n\t* tree.c (bot_replace): Expand it here.\n\t* cp-gimplify.c (cp_genericize_r): Make sure deferred conversion\n\tdoesn't leak into GENERIC.\n\nFrom-SVN: r182602", "tree": {"sha": "f9cb257f4823f2b31482274185ea050dec8ef4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9cb257f4823f2b31482274185ea050dec8ef4e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c65b06073ce31831f65fce84a393c106c1ad5a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65b06073ce31831f65fce84a393c106c1ad5a07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65b06073ce31831f65fce84a393c106c1ad5a07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65b06073ce31831f65fce84a393c106c1ad5a07/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2c4d88e42f75633a0c55de1400dbee322438d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2c4d88e42f75633a0c55de1400dbee322438d70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2c4d88e42f75633a0c55de1400dbee322438d70"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "03040e13af7ab6e6d911878b70163066f513628b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c65b06073ce31831f65fce84a393c106c1ad5a07", "patch": "@@ -1,3 +1,12 @@\n+2011-12-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51611\n+\t* cp-tree.h (CONVERT_EXPR_VBASE_PATH): New.\n+\t* class.c (build_base_path): Defer vbase conversion in an NSDMI.\n+\t* tree.c (bot_replace): Expand it here.\n+\t* cp-gimplify.c (cp_genericize_r): Make sure deferred conversion\n+\tdoesn't leak into GENERIC.\n+\n 2011-12-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51305"}, {"sha": "79686a2cc0b255b6a5a6901fcb1f2e9f4bb0fc15", "filename": "gcc/cp/class.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c65b06073ce31831f65fce84a393c106c1ad5a07", "patch": "@@ -318,6 +318,19 @@ build_base_path (enum tree_code code,\n       return expr;\n     }\n \n+  /* If we're in an NSDMI, we don't have the full constructor context yet\n+     that we need for converting to a virtual base, so just build a stub\n+     CONVERT_EXPR and expand it later in bot_replace.  */\n+  if (virtual_access && fixed_type_p < 0\n+      && current_scope () != current_function_decl)\n+    {\n+      expr = build1 (CONVERT_EXPR, ptr_target_type, expr);\n+      CONVERT_EXPR_VBASE_PATH (expr) = true;\n+      if (!want_pointer)\n+\texpr = build_indirect_ref (EXPR_LOCATION (expr), expr, RO_NULL);\n+      return expr;\n+    }\n+\n   /* Do we need to check for a null pointer?  */\n   if (want_pointer && !nonnull)\n     {"}, {"sha": "e06c5454c7e23613e91b57560917272a57917bf5", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=c65b06073ce31831f65fce84a393c106c1ad5a07", "patch": "@@ -1100,6 +1100,8 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       wtd->omp_ctx = omp_ctx.outer;\n       splay_tree_delete (omp_ctx.variables);\n     }\n+  else if (TREE_CODE (stmt) == CONVERT_EXPR)\n+    gcc_assert (!CONVERT_EXPR_VBASE_PATH (stmt));\n \n   pointer_set_insert (p_set, *stmt_p);\n "}, {"sha": "6e62bd1ba50c68191b0a36fe321be217ddd87290", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c65b06073ce31831f65fce84a393c106c1ad5a07", "patch": "@@ -74,6 +74,7 @@ c-common.h, not after.\n       DECL_OVERRIDE_P (in FUNCTION_DECL)\n       IMPLICIT_CONV_EXPR_DIRECT_INIT (in IMPLICIT_CONV_EXPR)\n       TRANSACTION_EXPR_IS_STMT (in TRANSACTION_EXPR)\n+      CONVERT_EXPR_VBASE_PATH (in CONVERT_EXPR)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -4011,6 +4012,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n   (TREE_CODE (EXPR) == TARGET_EXPR && TREE_LANG_FLAG_2 (EXPR)\t\t\\\n    && same_type_ignoring_top_level_qualifiers_p (TYPE, TREE_TYPE (EXPR)))\n \n+/* True if this CONVERT_EXPR is for a conversion to virtual base in\n+   an NSDMI, and should be re-evaluated when used in a constructor.  */\n+#define CONVERT_EXPR_VBASE_PATH(NODE) \\\n+  TREE_LANG_FLAG_0 (CONVERT_EXPR_CHECK (NODE))\n+\n /* An enumeration of the kind of tags that C++ accepts.  */\n enum tag_types {\n   none_type = 0, /* Not a tag type.  */"}, {"sha": "634c2674b5cce0144064b8cc6b974316c5070fc1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c65b06073ce31831f65fce84a393c106c1ad5a07", "patch": "@@ -1944,6 +1944,20 @@ bot_replace (tree* t,\n \t parsing with the real one for this function.  */\n       *t = current_class_ptr;\n     }\n+  else if (TREE_CODE (*t) == CONVERT_EXPR\n+\t   && CONVERT_EXPR_VBASE_PATH (*t))\n+    {\n+      /* In an NSDMI build_base_path defers building conversions to virtual\n+\t bases, and we handle it here.  */\n+      tree basetype = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (*t)));\n+      VEC(tree,gc) *vbases = CLASSTYPE_VBASECLASSES (current_class_type);\n+      int i; tree binfo;\n+      FOR_EACH_VEC_ELT (tree, vbases, i, binfo)\n+\tif (BINFO_TYPE (binfo) == basetype)\n+\t  break;\n+      *t = build_base_path (PLUS_EXPR, TREE_OPERAND (*t, 0), binfo, true,\n+\t\t\t    tf_warning_or_error);\n+    }\n \n   return NULL_TREE;\n }"}, {"sha": "1592e1314083689c440bd8e50e7df885b8b725e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c65b06073ce31831f65fce84a393c106c1ad5a07", "patch": "@@ -1,3 +1,8 @@\n+2011-12-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51611\n+\t* g++.dg/cpp0x/nsdmi-virtual1.C: New.\n+\n 2011-12-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51305"}, {"sha": "4aa8d482da88dd26e9fdd6a57a3a7edd09c0479e", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-virtual1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-virtual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65b06073ce31831f65fce84a393c106c1ad5a07/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-virtual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-virtual1.C?ref=c65b06073ce31831f65fce84a393c106c1ad5a07", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/51611\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+struct A\n+{\n+  A(): i(42) { }\n+  int i;\n+  int f() { return i; }\n+};\n+\n+struct B : virtual A\n+{\n+  int j = i + f();\n+  int k = A::i + A::f();\n+};\n+\n+struct C: B { int pad; };\n+\n+int main()\n+{\n+  C c;\n+  if (c.j != 84 || c.k != 84)\n+    __builtin_abort();\n+}\n+"}]}