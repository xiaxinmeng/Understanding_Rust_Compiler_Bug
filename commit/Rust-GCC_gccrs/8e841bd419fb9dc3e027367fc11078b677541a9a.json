{"sha": "8e841bd419fb9dc3e027367fc11078b677541a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU4NDFiZDQxOWZiOWRjM2UwMjczNjdmYzExMDc4YjY3NzU0MWE5YQ==", "commit": {"author": {"name": "Benny Siegert", "email": "bsiegert@gmail.com", "date": "2020-04-20T14:11:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-04-21T04:20:53Z"}, "message": "gccgo: fix runtime compilation on NetBSD\n\nsi_code in siginfo_t is a macro on NetBSD, not a member of the\nstruct itself, so add a C trampoline for receiving its value.\n\nAlso replace references to mos.waitsemacount with the replacement and\nadd some helpers from os_netbsd.go in the GC repository.\n\nUpdate golang/go#38538.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/228918", "tree": {"sha": "6057bd268fb933a070fa9faac31f86e95b767c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6057bd268fb933a070fa9faac31f86e95b767c69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e841bd419fb9dc3e027367fc11078b677541a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e841bd419fb9dc3e027367fc11078b677541a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e841bd419fb9dc3e027367fc11078b677541a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e841bd419fb9dc3e027367fc11078b677541a9a/comments", "author": {"login": "bsiegert", "id": 866330, "node_id": "MDQ6VXNlcjg2NjMzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/866330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsiegert", "html_url": "https://github.com/bsiegert", "followers_url": "https://api.github.com/users/bsiegert/followers", "following_url": "https://api.github.com/users/bsiegert/following{/other_user}", "gists_url": "https://api.github.com/users/bsiegert/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsiegert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsiegert/subscriptions", "organizations_url": "https://api.github.com/users/bsiegert/orgs", "repos_url": "https://api.github.com/users/bsiegert/repos", "events_url": "https://api.github.com/users/bsiegert/events{/privacy}", "received_events_url": "https://api.github.com/users/bsiegert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab392f97bb51854e11fae9c2e9a15b67206efba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab392f97bb51854e11fae9c2e9a15b67206efba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab392f97bb51854e11fae9c2e9a15b67206efba"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "e48abcf71d61fbb668693e4cbdf878648aa288ab", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e841bd419fb9dc3e027367fc11078b677541a9a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e841bd419fb9dc3e027367fc11078b677541a9a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8e841bd419fb9dc3e027367fc11078b677541a9a", "patch": "@@ -1,4 +1,4 @@\n-0fe7a277c5d22265a73a4d216bd5d81799634453\n+b76c83f34c006938fe6c3311d949496990bc5db9\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "69d2c7104498afae36acb5d7cacd5f47b4d10896", "filename": "libgo/go/runtime/os_netbsd.go", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fgo%2Fruntime%2Fos_netbsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fgo%2Fruntime%2Fos_netbsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_netbsd.go?ref=8e841bd419fb9dc3e027367fc11078b677541a9a", "patch": "@@ -68,9 +68,9 @@ func semasleep(ns int64) int32 {\n \t}\n \n \tfor {\n-\t\tv := atomic.Load(&_g_.m.mos.waitsemacount)\n+\t\tv := atomic.Load(&_g_.m.waitsemacount)\n \t\tif v > 0 {\n-\t\t\tif atomic.Cas(&_g_.m.mos.waitsemacount, v, v-1) {\n+\t\t\tif atomic.Cas(&_g_.m.waitsemacount, v, v-1) {\n \t\t\t\treturn 0 // semaphore acquired\n \t\t\t}\n \t\t\tcontinue\n@@ -96,15 +96,15 @@ func semasleep(ns int64) int32 {\n \n //go:nosplit\n func semawakeup(mp *m) {\n-\tatomic.Xadd(&mp.mos.waitsemacount, 1)\n+\tatomic.Xadd(&mp.waitsemacount, 1)\n \t// From NetBSD's _lwp_unpark(2) manual:\n \t// \"If the target LWP is not currently waiting, it will return\n \t// immediately upon the next call to _lwp_park().\"\n-\tret := lwp_unpark(int32(mp.procid), unsafe.Pointer(&mp.mos.waitsemacount))\n+\tret := lwp_unpark(int32(mp.procid), unsafe.Pointer(&mp.waitsemacount))\n \tif ret != 0 && ret != _ESRCH {\n \t\t// semawakeup can be called on signal stack.\n \t\tsystemstack(func() {\n-\t\t\tprint(\"thrwakeup addr=\", &mp.mos.waitsemacount, \" sem=\", mp.mos.waitsemacount, \" ret=\", ret, \"\\n\")\n+\t\t\tprint(\"thrwakeup addr=\", &mp.waitsemacount, \" sem=\", mp.waitsemacount, \" ret=\", ret, \"\\n\")\n \t\t})\n \t}\n }\n@@ -115,3 +115,34 @@ func osinit() {\n \t\tphysPageSize = getPageSize()\n \t}\n }\n+\n+func sysargs(argc int32, argv **byte) {\n+\tn := argc + 1\n+\n+\t// skip over argv, envp to get to auxv\n+\tfor argv_index(argv, n) != nil {\n+\t\tn++\n+\t}\n+\n+\t// skip NULL separator\n+\tn++\n+\n+\t// now argv+n is auxv\n+\tauxv := (*[1 << 28]uintptr)(add(unsafe.Pointer(argv), uintptr(n)*sys.PtrSize))\n+\tsysauxv(auxv[:])\n+}\n+\n+const (\n+\t_AT_NULL   = 0 // Terminates the vector\n+\t_AT_PAGESZ = 6 // Page size in bytes\n+)\n+\n+func sysauxv(auxv []uintptr) {\n+\tfor i := 0; auxv[i] != _AT_NULL; i += 2 {\n+\t\ttag, val := auxv[i], auxv[i+1]\n+\t\tswitch tag {\n+\t\tcase _AT_PAGESZ:\n+\t\t\tphysPageSize = val\n+\t\t}\n+\t}\n+}"}, {"sha": "c555712a03cce81e8c50f384a325470fc5a28702", "filename": "libgo/go/runtime/signal_gccgo.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fgo%2Fruntime%2Fsignal_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fgo%2Fruntime%2Fsignal_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fsignal_gccgo.go?ref=8e841bd419fb9dc3e027367fc11078b677541a9a", "patch": "@@ -60,7 +60,7 @@ type sigctxt struct {\n }\n \n func (c *sigctxt) sigcode() uint64 {\n-\treturn uint64(c.info.si_code)\n+\treturn uint64(getSiginfoCode(c.info))\n }\n \n //go:nosplit"}, {"sha": "25b1836daf0896f47c3961fab3edcbed661e1b11", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=8e841bd419fb9dc3e027367fc11078b677541a9a", "patch": "@@ -297,6 +297,10 @@ func getSigactionHandler(*_sigaction) uintptr\n //go:noescape\n func setSigactionHandler(*_sigaction, uintptr)\n \n+// Get signal code, written in C.\n+//go:noescape\n+func getSiginfoCode(*_siginfo_t) uintptr\n+\n // Retrieve fields from the siginfo_t and ucontext_t pointers passed\n // to a signal handler using C, as they are often hidden in a union.\n // Returns  and, if available, PC where signal occurred."}, {"sha": "b429fdb240349c96ef84df37dc86fa8dd5e48c93", "filename": "libgo/runtime/go-signal.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fruntime%2Fgo-signal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e841bd419fb9dc3e027367fc11078b677541a9a/libgo%2Fruntime%2Fgo-signal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-signal.c?ref=8e841bd419fb9dc3e027367fc11078b677541a9a", "patch": "@@ -179,6 +179,18 @@ setSigactionHandler(struct sigaction* sa, uintptr handler)\n // C code to fetch values from the siginfo_t and ucontext_t pointers\n // passed to a signal handler.\n \n+uintptr getSiginfoCode(siginfo_t *)\n+\t__attribute__ ((no_split_stack));\n+\n+uintptr getSiginfoCode(siginfo_t *)\n+\t__asm__ (GOSYM_PREFIX \"runtime.getSiginfoCode\");\n+\n+uintptr\n+getSiginfoCode(siginfo_t *info)\n+{\n+\treturn (uintptr)(info->si_code);\n+}\n+\n struct getSiginfoRet {\n \tuintptr sigaddr;\n \tuintptr sigpc;"}]}