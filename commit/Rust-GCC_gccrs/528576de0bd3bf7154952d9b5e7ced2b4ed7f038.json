{"sha": "528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI4NTc2ZGUwYmQzYmY3MTU0OTUyZDliNWU3Y2VkMmI0ZWQ3ZjAzOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-01-22T11:43:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-04T09:11:01Z"}, "message": "[Ada] New procedure Register_Global_Unhandled_Action\n\n2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-exextr.adb (Global_Unhandled_Action): New global\n\tvariable.\n\t(Notify_Exception): Take into account Global_Unhandled_Action\n\tand fix latent race condition.\n\t(Exception_Action): Mark Favor_Top_Level so that variables can\n\tbe atomic.\n\t(Global_Action): Mark atomic to remove the need for a lock.\n\t* libgnat/g-excact.ads, libgnat/g-excact.adb\n\t(Register_Global_Unhandled_Action): New procedure.\n\t(Register_Global_Action): Remove lock.\n\t* libgnat/s-stalib.ads (Raise_Action): Mark Favor_Top_Level to\n\tbe compatible with Exception_Action.\n\t* sem_warn.adb (Warn_On_Unreferenced_Entity): Fix logic wrt\n\tVolatile entities and entities with an address clause: the code\n\tdid not match the comment/intent.", "tree": {"sha": "278e069614f29e947c238035a70b4da010954e1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/278e069614f29e947c238035a70b4da010954e1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cc67203388abd9559b8acc6997b3c26dcc7080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32cc67203388abd9559b8acc6997b3c26dcc7080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32cc67203388abd9559b8acc6997b3c26dcc7080"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "da66873d02dbd20fc29eff7f7437136c05291ee2", "filename": "gcc/ada/libgnat/a-exextr.adb", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-exextr.adb?ref=528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "patch": "@@ -43,12 +43,23 @@ package body Exception_Traces is\n    --  Convenient shortcut\n \n    type Exception_Action is access procedure (E : Exception_Occurrence);\n+   pragma Favor_Top_Level (Exception_Action);\n+\n    Global_Action : Exception_Action := null;\n+   pragma Atomic (Global_Action);\n    pragma Export\n      (Ada, Global_Action, \"__gnat_exception_actions_global_action\");\n    --  Global action, executed whenever an exception is raised.  Changing the\n    --  export name must be coordinated with code in g-excact.adb.\n \n+   Global_Unhandled_Action : Exception_Action := null;\n+   pragma Atomic (Global_Unhandled_Action);\n+   pragma Export\n+     (Ada, Global_Unhandled_Action,\n+      \"__gnat_exception_actions_global_unhandled_action\");\n+   --  Global action, executed whenever an unhandled exception is raised.\n+   --  Changing the export name must be coordinated with code in g-excact.adb.\n+\n    Raise_Hook_Initialized : Boolean := False;\n    pragma Export\n      (Ada, Raise_Hook_Initialized, \"__gnat_exception_actions_initialized\");\n@@ -77,6 +88,11 @@ package body Exception_Traces is\n    ----------------------\n \n    procedure Notify_Exception (Excep : EOA; Is_Unhandled : Boolean) is\n+      --  Save actions locally to avoid any race condition that would\n+      --  reset them to null.\n+      Action           : constant Exception_Action := Global_Action;\n+      Unhandled_Action : constant Exception_Action := Global_Unhandled_Action;\n+\n    begin\n       --  Output the exception information required by the Exception_Trace\n       --  configuration. Take care not to output information about internal\n@@ -119,8 +135,12 @@ package body Exception_Traces is\n          To_Action (Exception_Data_Ptr (Excep.Id).Raise_Hook) (Excep.all);\n       end if;\n \n-      if Global_Action /= null then\n-         Global_Action (Excep.all);\n+      if Is_Unhandled and Unhandled_Action /= null then\n+         Unhandled_Action (Excep.all);\n+      end if;\n+\n+      if Action /= null then\n+         Action (Excep.all);\n       end if;\n    end Notify_Exception;\n "}, {"sha": "202d9e20ca114f3001c96fc27898749a22034a8e", "filename": "gcc/ada/libgnat/g-excact.adb", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fg-excact.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fg-excact.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-excact.adb?ref=528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "patch": "@@ -38,9 +38,19 @@ with System.Exception_Table;  use System.Exception_Table;\n package body GNAT.Exception_Actions is\n \n    Global_Action : Exception_Action;\n-   pragma Import (C, Global_Action, \"__gnat_exception_actions_global_action\");\n+   pragma Import\n+     (Ada, Global_Action, \"__gnat_exception_actions_global_action\");\n+   pragma Atomic (Global_Action);\n    --  Imported from Ada.Exceptions. Any change in the external name needs to\n-   --  be coordinated with a-except.adb\n+   --  be coordinated with a-exextr.adb.\n+\n+   Global_Unhandled_Action : Exception_Action;\n+   pragma Import\n+     (Ada, Global_Unhandled_Action,\n+      \"__gnat_exception_actions_global_unhandled_action\");\n+   pragma Atomic (Global_Unhandled_Action);\n+   --  Imported from Ada.Exceptions. Any change in the external name needs to\n+   --  be coordinated with a-exextr.adb.\n \n    Raise_Hook_Initialized : Boolean;\n    pragma Import\n@@ -61,11 +71,18 @@ package body GNAT.Exception_Actions is\n \n    procedure Register_Global_Action (Action : Exception_Action) is\n    begin\n-      Lock_Task.all;\n       Global_Action := Action;\n-      Unlock_Task.all;\n    end Register_Global_Action;\n \n+   --------------------------------------\n+   -- Register_Global_Unhandled_Action --\n+   --------------------------------------\n+\n+   procedure Register_Global_Unhandled_Action (Action : Exception_Action) is\n+   begin\n+      Global_Unhandled_Action := Action;\n+   end Register_Global_Unhandled_Action;\n+\n    ------------------------\n    -- Register_Id_Action --\n    ------------------------"}, {"sha": "c38f6a03761d15fad8cbec8fced5a5e21222ea13", "filename": "gcc/ada/libgnat/g-excact.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fg-excact.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fg-excact.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-excact.ads?ref=528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "patch": "@@ -57,6 +57,7 @@ package GNAT.Exception_Actions is\n \n    type Exception_Action is access\n      procedure (Occurrence : Exception_Occurrence);\n+   pragma Favor_Top_Level (Exception_Action);\n    --  General callback type whenever an exception is raised. The callback\n    --  procedure must not propagate an exception (execution of the program\n    --  is erroneous if such an exception is propagated).\n@@ -69,6 +70,10 @@ package GNAT.Exception_Actions is\n    --  Action is called before the exception is propagated to user's code.\n    --  If Action is null, this will in effect cancel all exception actions.\n \n+   procedure Register_Global_Unhandled_Action (Action : Exception_Action);\n+   --  Similar to Register_Global_Action, called on unhandled exceptions\n+   --  only.\n+\n    procedure Register_Id_Action\n      (Id     : Exception_Id;\n       Action : Exception_Action);"}, {"sha": "5fbedae2e36ef690ad3294c188e48910e7f89a8a", "filename": "gcc/ada/libgnat/s-stalib.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Flibgnat%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stalib.ads?ref=528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "patch": "@@ -81,6 +81,7 @@ package System.Standard_Library is\n    -------------------------------------\n \n    type Raise_Action is access procedure;\n+   pragma Favor_Top_Level (Raise_Action);\n    --  A pointer to a procedure used in the Raise_Hook field\n \n    type Exception_Data;"}, {"sha": "0158adcd320e2904a0478dcb1f1c141c54d3be61", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/528576de0bd3bf7154952d9b5e7ced2b4ed7f038/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=528576de0bd3bf7154952d9b5e7ced2b4ed7f038", "patch": "@@ -4330,11 +4330,10 @@ package body Sem_Warn is\n                --  the message if the variable is volatile, has an address\n                --  clause, is aliased, or is a renaming, or is imported.\n \n-               if Referenced_As_LHS_Check_Spec (E)\n-                 and then No (Address_Clause (E))\n-                 and then not Is_Volatile (E)\n-               then\n+               if Referenced_As_LHS_Check_Spec (E) then\n                   if Warn_On_Modified_Unread\n+                    and then No (Address_Clause (E))\n+                    and then not Is_Volatile (E)\n                     and then not Is_Imported (E)\n                     and then not Is_Aliased (E)\n                     and then No (Renamed_Object (E))"}]}