{"sha": "e5561c83d667c75545bed093142119bc1bca530b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU1NjFjODNkNjY3Yzc1NTQ1YmVkMDkzMTQyMTE5YmMxYmNhNTMwYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-19T15:52:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-19T15:52:28Z"}, "message": "cris.c (cris_expand_prologue): Use gen_raw_REG instead of gen_rtx_raw_REG.\n\ngcc/\n\t* config/cris/cris.c (cris_expand_prologue): Use gen_raw_REG\n\tinstead of gen_rtx_raw_REG.\n\t(cris_expand_epilogue): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_classify_address):\n\tLikewise.\n\t* config/sparc/sparc.md: Likewise.\n\nFrom-SVN: r223383", "tree": {"sha": "968b60052f7966085fadedb028ddca2f2b9988b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/968b60052f7966085fadedb028ddca2f2b9988b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5561c83d667c75545bed093142119bc1bca530b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5561c83d667c75545bed093142119bc1bca530b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5561c83d667c75545bed093142119bc1bca530b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5561c83d667c75545bed093142119bc1bca530b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b2cb3e7256b7c30397460fa53e210006e32f838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2cb3e7256b7c30397460fa53e210006e32f838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2cb3e7256b7c30397460fa53e210006e32f838"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "778019dc50bc89463393b255fe98f8904dd221b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5561c83d667c75545bed093142119bc1bca530b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5561c83d667c75545bed093142119bc1bca530b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5561c83d667c75545bed093142119bc1bca530b", "patch": "@@ -1,3 +1,12 @@\n+2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/cris/cris.c (cris_expand_prologue): Use gen_raw_REG\n+\tinstead of gen_rtx_raw_REG.\n+\t(cris_expand_epilogue): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_classify_address):\n+\tLikewise.\n+\t* config/sparc/sparc.md: Likewise.\n+\n 2015-05-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_legitimize_reload_address)"}, {"sha": "7c7d6257170c27795ad7e5eec3eae7a47ab59f84", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5561c83d667c75545bed093142119bc1bca530b/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5561c83d667c75545bed093142119bc1bca530b/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=e5561c83d667c75545bed093142119bc1bca530b", "patch": "@@ -3138,7 +3138,7 @@ cris_expand_prologue (void)\n \n \t  mem = gen_rtx_MEM (SImode, stack_pointer_rtx);\n \t  set_mem_alias_set (mem, get_varargs_alias_set ());\n-\t  insn = emit_move_insn (mem, gen_rtx_raw_REG (SImode, regno));\n+\t  insn = emit_move_insn (mem, gen_raw_REG (SImode, regno));\n \n \t  /* Note the absence of RTX_FRAME_RELATED_P on the above insn:\n \t     the value isn't restored, so we don't want to tell dwarf2\n@@ -3162,7 +3162,7 @@ cris_expand_prologue (void)\n \n       mem = gen_rtx_MEM (SImode, stack_pointer_rtx);\n       set_mem_alias_set (mem, get_frame_alias_set ());\n-      insn = emit_move_insn (mem, gen_rtx_raw_REG (SImode, CRIS_SRP_REGNUM));\n+      insn = emit_move_insn (mem, gen_raw_REG (SImode, CRIS_SRP_REGNUM));\n       RTX_FRAME_RELATED_P (insn) = 1;\n       framesize += 4;\n     }\n@@ -3260,7 +3260,7 @@ cris_expand_prologue (void)\n \n \t      mem = gen_rtx_MEM (SImode, stack_pointer_rtx);\n \t      set_mem_alias_set (mem, get_frame_alias_set ());\n-\t      insn = emit_move_insn (mem, gen_rtx_raw_REG (SImode, regno));\n+\t      insn = emit_move_insn (mem, gen_raw_REG (SImode, regno));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \n \t      framesize += 4 + size;\n@@ -3426,7 +3426,7 @@ cris_expand_epilogue (void)\n \tmem = gen_rtx_MEM (SImode, gen_rtx_POST_INC (SImode,\n \t\t\t\t\t\t     stack_pointer_rtx));\n \tset_mem_alias_set (mem, get_frame_alias_set ());\n-\tinsn = emit_move_insn (gen_rtx_raw_REG (SImode, regno), mem);\n+\tinsn = emit_move_insn (gen_raw_REG (SImode, regno), mem);\n \n \t/* Whenever we emit insns with post-incremented addresses\n \t   ourselves, we must add a post-inc note manually.  */\n@@ -3512,7 +3512,7 @@ cris_expand_epilogue (void)\n \t{\n \t  rtx mem;\n \t  rtx insn;\n-\t  rtx srpreg = gen_rtx_raw_REG (SImode, CRIS_SRP_REGNUM);\n+\t  rtx srpreg = gen_raw_REG (SImode, CRIS_SRP_REGNUM);\n \t  mem = gen_rtx_MEM (SImode,\n \t\t\t     gen_rtx_POST_INC (SImode,\n \t\t\t\t\t       stack_pointer_rtx));\n@@ -3527,8 +3527,7 @@ cris_expand_epilogue (void)\n \t  if (crtl->calls_eh_return)\n \t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t   gen_rtx_raw_REG (SImode,\n-\t\t\t\t\t\t    CRIS_STACKADJ_REG)));\n+\t\t\t\t   gen_raw_REG (SImode, CRIS_STACKADJ_REG)));\n \t  cris_expand_return (false);\n \t}\n       else\n@@ -3545,7 +3544,7 @@ cris_expand_epilogue (void)\n       if (return_address_on_stack)\n \t{\n \t  rtx mem;\n-\t  rtx srpreg = gen_rtx_raw_REG (SImode, CRIS_SRP_REGNUM);\n+\t  rtx srpreg = gen_raw_REG (SImode, CRIS_SRP_REGNUM);\n \t  rtx insn;\n \n \t  mem = gen_rtx_MEM (SImode,\n@@ -3569,8 +3568,7 @@ cris_expand_epilogue (void)\n   if (crtl->calls_eh_return)\n     emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t   stack_pointer_rtx,\n-\t\t\t   gen_rtx_raw_REG (SImode,\n-\t\t\t\t\t    CRIS_STACKADJ_REG)));\n+\t\t\t   gen_raw_REG (SImode, CRIS_STACKADJ_REG)));\n   cris_expand_return (false);\n }\n "}, {"sha": "8f0f4085965f07e0a919744083f4c70f8b563788", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5561c83d667c75545bed093142119bc1bca530b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5561c83d667c75545bed093142119bc1bca530b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=e5561c83d667c75545bed093142119bc1bca530b", "patch": "@@ -866,7 +866,7 @@ microblaze_classify_address (struct microblaze_address_info *info, rtx x,\n       }\n     case CONST_INT:\n       {\n-\tinfo->regA = gen_rtx_raw_REG (mode, 0);\n+\tinfo->regA = gen_raw_REG (mode, 0);\n \tinfo->type = ADDRESS_CONST_INT;\n \tinfo->offset = x;\n \treturn true;\n@@ -878,13 +878,13 @@ microblaze_classify_address (struct microblaze_address_info *info, rtx x,\n \tinfo->type = ADDRESS_SYMBOLIC;\n \tinfo->symbol_type = SYMBOL_TYPE_GENERAL;\n \tinfo->symbol = x;\n-\tinfo->regA = gen_rtx_raw_REG (mode, get_base_reg (x));\n+\tinfo->regA = gen_raw_REG (mode, get_base_reg (x));\n \n \tif (GET_CODE (x) == CONST)\n \t  {\n \t    if (GET_CODE (XEXP (x, 0)) == UNSPEC)\n \t     {\n-\t\tinfo->regA = gen_rtx_raw_REG (mode,\n+\t\tinfo->regA = gen_raw_REG (mode,\n \t\t\t\t  get_base_reg (XVECEXP (XEXP (x,0), 0, 0)));\n \t\treturn microblaze_classify_unspec (info, XEXP (x, 0));\n \t     }"}, {"sha": "1760efff3766bdd013cfe1e223e21e65cf99e2be", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5561c83d667c75545bed093142119bc1bca530b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5561c83d667c75545bed093142119bc1bca530b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=e5561c83d667c75545bed093142119bc1bca530b", "patch": "@@ -2364,7 +2364,7 @@\n    && reload_completed\"\n   [(clobber (const_int 0))]\n {\n-  operands[0] = gen_rtx_raw_REG (DImode, REGNO (operands[0]));\n+  operands[0] = gen_raw_REG (DImode, REGNO (operands[0]));\n \n   if (TARGET_ARCH64)\n     {"}]}