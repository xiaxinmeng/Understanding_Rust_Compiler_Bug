{"sha": "2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY2ODczMDZkN2RiYmFlN2FkNDVlNzlkYWZkZTQ1ZjdiOTdmMDNjNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-08-21T16:53:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-08-21T16:53:10Z"}, "message": "c-family/c/c++: pass optional vec<location_t> to c-format.c\n\nThis patch passes along the vec<location_t> of argument locations\nat a callsite from the C frontend to check_function_arguments and\nfrom there to c-format.c, so that we can underline the pertinent\nargument to mismatched format codes even for tree codes like decls\nand constants which lack a location_t for their usage sites.\n\nThis takes e.g.:\n\n    printf(\"hello %i %i %i \", foo, bar, baz);\n                     ~^\n                     %s\n\nto:\n\n    printf(\"hello %i %i %i \", foo, bar, baz);\n                     ~^            ~~~\n                     %s\n\nwhich is useful for cases where there's more than one variadic argument.\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (check_function_arguments): Add \"arglogs\" param; pass\n\tit to check_function_format.\n\t* c-common.h (check_function_arguments): Add vec<location_t> *\n\tparam.\n\t(check_function_format): Likewise.\n\t* c-format.c (struct format_check_context): Add field \"arglocs\".\n\t(check_function_format): Add param \"arglocs\"; pass it to\n\tcheck_format_info.\n\t(check_format_info):  Add param \"arglocs\"; use it to initialize\n\tnew field of format_ctx.\n\t(check_format_arg): Pass format_ctx->arglocs to new param of\n\tcheck_format_info_main.\n\t(class argument_parser): New field \"arglocs\".\n\t(argument_parser::argument_parser): Add \"arglocs_\" param and use\n\tit to initialize new field.\n\t(argument_parser::check_argument_type): Pass new arglocs field to\n\tcheck_format_types.\n\t(check_format_info_main): Add param \"arglocs\", and use it when\n\tconstructing arg_parser.\n\t(check_format_types): Add param \"arglocs\"; use it if non-NULL when\n\t!EXPR_HAS_LOCATION (cur_param) to get at location information.\n\ngcc/c/ChangeLog:\n\t* c-typeck.c (build_function_call_vec): Pass arg_loc to call\n\tto check_function_arguments.\n\ngcc/cp/ChangeLog:\n\t* call.c (build_over_call): Pass NULL for new parameter to\n\tcheck_function_arguments.\n\t* typeck.c (cp_build_function_call_vec): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/format/diagnostic-ranges.c: Update expected results\n\tto show underlining of all pertinent params.\n\t* gcc.dg/format/pr72858.c: Likewise.\n\nFrom-SVN: r251238", "tree": {"sha": "d1aa58c4e1d14ee0744cdc88ea1963f05a0690f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1aa58c4e1d14ee0744cdc88ea1963f05a0690f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "453773df32204ae524683b098444c2fa4ace8033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453773df32204ae524683b098444c2fa4ace8033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453773df32204ae524683b098444c2fa4ace8033"}], "stats": {"total": 250, "additions": 139, "deletions": 111}, "files": [{"sha": "86a8f1c28c1ca924de0024316f278e899e848942", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -1,3 +1,27 @@\n+2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (check_function_arguments): Add \"arglogs\" param; pass\n+\tit to check_function_format.\n+\t* c-common.h (check_function_arguments): Add vec<location_t> *\n+\tparam.\n+\t(check_function_format): Likewise.\n+\t* c-format.c (struct format_check_context): Add field \"arglocs\".\n+\t(check_function_format): Add param \"arglocs\"; pass it to\n+\tcheck_format_info.\n+\t(check_format_info):  Add param \"arglocs\"; use it to initialize\n+\tnew field of format_ctx.\n+\t(check_format_arg): Pass format_ctx->arglocs to new param of\n+\tcheck_format_info_main.\n+\t(class argument_parser): New field \"arglocs\".\n+\t(argument_parser::argument_parser): Add \"arglocs_\" param and use\n+\tit to initialize new field.\n+\t(argument_parser::check_argument_type): Pass new arglocs field to\n+\tcheck_format_types.\n+\t(check_format_info_main): Add param \"arglocs\", and use it when\n+\tconstructing arg_parser.\n+\t(check_format_types): Add param \"arglocs\"; use it if non-NULL when\n+\t!EXPR_HAS_LOCATION (cur_param) to get at location information.\n+\n 2017-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/53037"}, {"sha": "156c89d02940ded84bdcc4253df9bbbe687804f0", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -5539,7 +5539,7 @@ attribute_fallthrough_p (tree attr)\n    diagnostics.  Return true if -Wnonnull warning has been diagnosed.  */\n bool\n check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,\n-\t\t\t  int nargs, tree *argarray)\n+\t\t\t  int nargs, tree *argarray, vec<location_t> *arglocs)\n {\n   bool warned_p = false;\n \n@@ -5553,7 +5553,7 @@ check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,\n   /* Check for errors in format strings.  */\n \n   if (warn_format || warn_suggest_attribute_format)\n-    check_function_format (TYPE_ATTRIBUTES (fntype), nargs, argarray);\n+    check_function_format (TYPE_ATTRIBUTES (fntype), nargs, argarray, arglocs);\n \n   if (warn_format)\n     check_function_sentinel (fntype, nargs, argarray);"}, {"sha": "8e367680600332fd9b4750221d3286468677d269", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -808,15 +808,15 @@ extern tree fname_decl (location_t, unsigned, tree);\n \n extern int check_user_alignment (const_tree, bool);\n extern bool check_function_arguments (location_t loc, const_tree, const_tree,\n-\t\t\t\t      int, tree *);\n+\t\t\t\t      int, tree *, vec<location_t> *);\n extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      (void *, tree,\n \t\t\t\t\t       unsigned HOST_WIDE_INT),\n \t\t\t\t\t      void *, tree,\n \t\t\t\t\t      unsigned HOST_WIDE_INT);\n extern bool check_builtin_function_arguments (location_t, vec<location_t>,\n \t\t\t\t\t      tree, int, tree *);\n-extern void check_function_format (tree, int, tree *);\n+extern void check_function_format (tree, int, tree *, vec<location_t> *);\n extern bool attribute_fallthrough_p (tree);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);"}, {"sha": "0dba9793311b7fbd1b2f770b6bb5b7a0e662bdff", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -989,6 +989,7 @@ struct format_check_context\n   format_check_results *res;\n   function_format_info *info;\n   tree params;\n+  vec<location_t> *arglocs;\n };\n \n /* Return the format name (as specified in the original table) for the format\n@@ -1011,14 +1012,16 @@ format_flags (int format_num)\n   gcc_unreachable ();\n }\n \n-static void check_format_info (function_format_info *, tree);\n+static void check_format_info (function_format_info *, tree,\n+\t\t\t       vec<location_t> *);\n static void check_format_arg (void *, tree, unsigned HOST_WIDE_INT);\n static void check_format_info_main (format_check_results *,\n \t\t\t\t    function_format_info *, const char *,\n \t\t\t\t    location_t, tree,\n \t\t\t\t    int, tree,\n \t\t\t\t    unsigned HOST_WIDE_INT,\n-\t\t\t\t    object_allocator<format_wanted_type> &);\n+\t\t\t\t    object_allocator<format_wanted_type> &,\n+\t\t\t\t    vec<location_t> *);\n \n static void init_dollar_format_checking (int, tree);\n static int maybe_read_dollar_number (const char **, int,\n@@ -1033,7 +1036,8 @@ static void check_format_types (const substring_loc &fmt_loc,\n \t\t\t\tformat_wanted_type *,\n \t\t\t\tconst format_kind_info *fki,\n \t\t\t\tint offset_to_type_start,\n-\t\t\t\tchar conversion_char);\n+\t\t\t\tchar conversion_char,\n+\t\t\t\tvec<location_t> *arglocs);\n static void format_type_warning (const substring_loc &fmt_loc,\n \t\t\t\t source_range *param_range,\n \t\t\t\t format_wanted_type *, tree,\n@@ -1076,7 +1080,8 @@ decode_format_type (const char *s)\n    attribute themselves.  */\n \n void\n-check_function_format (tree attrs, int nargs, tree *argarray)\n+check_function_format (tree attrs, int nargs, tree *argarray,\n+\t\t       vec<location_t> *arglocs)\n {\n   tree a;\n \n@@ -1097,7 +1102,7 @@ check_function_format (tree attrs, int nargs, tree *argarray)\n \t      int i;\n \t      for (i = nargs - 1; i >= 0; i--)\n \t\tparams = tree_cons (NULL_TREE, argarray[i], params);\n-\t      check_format_info (&info, params);\n+\t      check_format_info (&info, params, arglocs);\n \t    }\n \n \t  /* Attempt to detect whether the current function might benefit\n@@ -1400,7 +1405,8 @@ get_flag_spec (const format_flag_spec *spec, int flag, const char *predicates)\n    PARAMS is the list of argument values.  */\n \n static void\n-check_format_info (function_format_info *info, tree params)\n+check_format_info (function_format_info *info, tree params,\n+\t\t   vec<location_t> *arglocs)\n {\n   format_check_context format_ctx;\n   unsigned HOST_WIDE_INT arg_num;\n@@ -1434,6 +1440,7 @@ check_format_info (function_format_info *info, tree params)\n   format_ctx.res = &res;\n   format_ctx.info = info;\n   format_ctx.params = params;\n+  format_ctx.arglocs = arglocs;\n \n   check_function_arguments_recurse (check_format_arg, &format_ctx,\n \t\t\t\t    format_tree, arg_num);\n@@ -1518,6 +1525,7 @@ check_format_arg (void *ctx, tree format_tree,\n   format_check_results *res = format_ctx->res;\n   function_format_info *info = format_ctx->info;\n   tree params = format_ctx->params;\n+  vec<location_t> *arglocs = format_ctx->arglocs;\n \n   int format_length;\n   HOST_WIDE_INT offset;\n@@ -1703,7 +1711,7 @@ check_format_arg (void *ctx, tree format_tree,\n   res->number_other++;\n   object_allocator <format_wanted_type> fwt_pool (\"format_wanted_type pool\");\n   check_format_info_main (res, info, format_chars, fmt_param_loc, format_tree,\n-\t\t\t  format_length, params, arg_num, fwt_pool);\n+\t\t\t  format_length, params, arg_num, fwt_pool, arglocs);\n }\n \n /* Support class for argument_parser and check_format_info_main.\n@@ -1768,7 +1776,8 @@ class argument_parser\n \t\t   const char * const orig_format_chars,\n \t\t   location_t format_string_loc, flag_chars_t &flag_chars,\n \t\t   int &has_operand_number, tree first_fillin_param,\n-\t\t   object_allocator <format_wanted_type> &fwt_pool_);\n+\t\t   object_allocator <format_wanted_type> &fwt_pool_,\n+\t\t   vec<location_t> *arglocs);\n \n   bool read_any_dollar ();\n \n@@ -1847,6 +1856,7 @@ class argument_parser\n  private:\n   format_wanted_type *first_wanted_type;\n   format_wanted_type *last_wanted_type;\n+  vec<location_t> *arglocs;\n };\n \n /* flag_chars_t's constructor.  */\n@@ -1997,7 +2007,8 @@ argument_parser (function_format_info *info_, const char *&format_chars_,\n \t\t flag_chars_t &flag_chars_,\n \t\t int &has_operand_number_,\n \t\t tree first_fillin_param_,\n-\t\t object_allocator <format_wanted_type> &fwt_pool_)\n+\t\t object_allocator <format_wanted_type> &fwt_pool_,\n+\t\t vec<location_t> *arglocs_)\n : info (info_),\n   fki (&format_types[info->format_type]),\n   flag_specs (fki->flag_specs),\n@@ -2013,7 +2024,8 @@ argument_parser (function_format_info *info_, const char *&format_chars_,\n   has_operand_number (has_operand_number_),\n   first_fillin_param (first_fillin_param_),\n   first_wanted_type (NULL),\n-  last_wanted_type (NULL)\n+  last_wanted_type (NULL),\n+  arglocs (arglocs_)\n {\n }\n \n@@ -2736,7 +2748,7 @@ check_argument_type (const format_char_info *fci,\n       ptrdiff_t offset_to_type_start = type_start - orig_format_chars;\n       check_format_types (fmt_loc, first_wanted_type, fki,\n \t\t\t  offset_to_type_start,\n-\t\t\t  conversion_char);\n+\t\t\t  conversion_char, arglocs);\n     }\n \n   return true;\n@@ -2755,7 +2767,8 @@ check_format_info_main (format_check_results *res,\n \t\t\tlocation_t fmt_param_loc, tree format_string_cst,\n \t\t\tint format_length, tree params,\n \t\t\tunsigned HOST_WIDE_INT arg_num,\n-\t\t\tobject_allocator <format_wanted_type> &fwt_pool)\n+\t\t\tobject_allocator <format_wanted_type> &fwt_pool,\n+\t\t\tvec<location_t> *arglocs)\n {\n   const char * const orig_format_chars = format_chars;\n   const tree first_fillin_param = params;\n@@ -2802,7 +2815,7 @@ check_format_info_main (format_check_results *res,\n       argument_parser arg_parser (info, format_chars, format_string_cst,\n \t\t\t\t  orig_format_chars, format_string_loc,\n \t\t\t\t  flag_chars, has_operand_number,\n-\t\t\t\t  first_fillin_param, fwt_pool);\n+\t\t\t\t  first_fillin_param, fwt_pool, arglocs);\n \n       if (!arg_parser.read_any_dollar ())\n \treturn;\n@@ -3032,7 +3045,8 @@ static void\n check_format_types (const substring_loc &fmt_loc,\n \t\t    format_wanted_type *types, const format_kind_info *fki,\n \t\t    int offset_to_type_start,\n-\t\t    char conversion_char)\n+\t\t    char conversion_char,\n+\t\t    vec<location_t> *arglocs)\n {\n   for (; types != 0; types = types->next)\n     {\n@@ -3072,11 +3086,19 @@ check_format_types (const substring_loc &fmt_loc,\n \n       source_range param_range;\n       source_range *param_range_ptr;\n-      if (CAN_HAVE_LOCATION_P (cur_param))\n+      if (EXPR_HAS_LOCATION (cur_param))\n \t{\n \t  param_range = EXPR_LOCATION_RANGE (cur_param);\n \t  param_range_ptr = &param_range;\n \t}\n+      else if (arglocs)\n+\t{\n+\t  /* arg_num is 1-based.  */\n+\t  gcc_assert (types->arg_num > 0);\n+\t  location_t param_loc = (*arglocs)[types->arg_num - 1];\n+\t  param_range = get_range_from_loc (line_table, param_loc);\n+\t  param_range_ptr = &param_range;\n+\t}\n       else\n \tparam_range_ptr = NULL;\n "}, {"sha": "64497a259ae97be3e198768c538f71bd332ecc2a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -1,3 +1,8 @@\n+2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-typeck.c (build_function_call_vec): Pass arg_loc to call\n+\tto check_function_arguments.\n+\n 2017-08-18  Marek Polacek  <polacek@redhat.com>\n \n \t* c-parser.c (c_parser_postfix_expression): Remove unused code.  Update"}, {"sha": "d7ca14801b93678bf81ab1eb8ab1b9ea04a2868e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -3118,7 +3118,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n \n   /* Check that the arguments to the function are valid.  */\n   bool warned_p = check_function_arguments (loc, fundecl, fntype,\n-\t\t\t\t\t    nargs, argarray);\n+\t\t\t\t\t    nargs, argarray, &arg_loc);\n \n   if (name != NULL_TREE\n       && !strncmp (IDENTIFIER_POINTER (name), \"__builtin_\", 10))"}, {"sha": "2640f84558725de1251c2c6564fb09cc5f7730b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -1,3 +1,9 @@\n+2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call.c (build_over_call): Pass NULL for new parameter to\n+\tcheck_function_arguments.\n+\t* typeck.c (cp_build_function_call_vec): Likewise.\n+\n 2017-08-21  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/81899"}, {"sha": "067db59ae2ccedd46d8970f9423c17bc05e0f7d2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -7949,7 +7949,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \tfargs[j] = maybe_constant_value (argarray[j]);\n \n       warned_p = check_function_arguments (input_location, fn, TREE_TYPE (fn),\n-\t\t\t\t\t   nargs, fargs);\n+\t\t\t\t\t   nargs, fargs, NULL);\n     }\n \n   if (DECL_INHERITED_CTOR (fn))"}, {"sha": "63667f34e6af7ffeb9f890aa24c6745649eae3fc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -3699,7 +3699,7 @@ cp_build_function_call_vec (tree function, vec<tree, va_gc> **params,\n   /* Check for errors in format strings and inappropriately\n      null parameters.  */\n   bool warned_p = check_function_arguments (input_location, fndecl, fntype,\n-\t\t\t\t\t    nargs, argarray);\n+\t\t\t\t\t    nargs, argarray, NULL);\n \n   ret = build_cxx_call (function, nargs, argarray, complain);\n "}, {"sha": "8f1eab8cfa35d8b451a71870277565c485a6f342", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -1,3 +1,9 @@\n+2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/format/diagnostic-ranges.c: Update expected results\n+\tto show underlining of all pertinent params.\n+\t* gcc.dg/format/pr72858.c: Likewise.\n+\n 2017-08-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/46091"}, {"sha": "bc6f665600d5c28fb740f134d10b2fed74daf5de", "filename": "gcc/testsuite/gcc.dg/format/diagnostic-ranges.c", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -8,28 +8,24 @@ void test_mismatching_types (const char *msg)\n {\n   printf(\"hello %i\", msg);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char \\\\*' \" } */\n \n-/* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %i\", msg);\n-                 ~^\n+                 ~^   ~~~\n                  %s\n    { dg-end-multiline-output \"\" } */\n \n \n   printf(\"hello %s\", 42);  /* { dg-warning \"format '%s' expects argument of type 'char \\\\*', but argument 2 has type 'int'\" } */\n-/* TODO: ideally would also underline \"42\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %s\", 42);\n-                 ~^\n+                 ~^   ~~\n                  %d\n    { dg-end-multiline-output \"\" } */\n \n-\n   printf(\"hello %i\", (long)0);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'long int' \" } */\n-/* TODO: ideally would also underline the argument.  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %i\", (long)0);\n-                 ~^\n+                 ~^   ~\n                  %li\n    { dg-end-multiline-output \"\" } */\n }\n@@ -38,11 +34,12 @@ void test_multiple_arguments (void)\n {\n   printf (\"arg0: %i  arg1: %s arg 2: %i\", /* { dg-warning \"29: format '%s'\" } */\n           100, 101, 102);\n-/* TODO: ideally would also underline \"101\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf (\"arg0: %i  arg1: %s arg 2: %i\",\n                             ~^\n                             %d\n+           100, 101, 102);\n+                ~~~           \n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -84,10 +81,9 @@ void test_hex (const char *msg)\n      \"i\" is \\x69 */\n   printf(\"hello \\x25\\x69\", msg);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char \\\\*' \" } */\n \n-/* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\x25\\x69\", msg);\n-                 ~~~~^~~~\n+                 ~~~~^~~~   ~~~\n                  \\x25s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -98,10 +94,9 @@ void test_oct (const char *msg)\n      \"i\" is octal 151.  */\n   printf(\"hello \\045\\151\", msg);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char \\\\*' \" } */\n \n-/* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\045\\151\", msg);\n-                 ~~~~^~~~\n+                 ~~~~^~~~   ~~~\n                  \\045s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -115,9 +110,10 @@ void test_multiple (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"prefix\"  \"\\x25\"  \"\\151\"  \"suffix\",\n           ^~~~~~~~\n+          msg);\n+          ~~~\n   { dg-end-multiline-output \"\" } */\n \n-/* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"prefix\"  \"\\x25\"  \"\\151\"  \"suffix\",\n                      ~~~~~~~~^~~~\n@@ -128,10 +124,9 @@ void test_multiple (const char *msg)\n void test_u8 (const char *msg)\n {\n   printf(u8\"hello %i\", msg);/* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'const char \\\\*' \" } */\n-/* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(u8\"hello %i\", msg);\n-                   ~^\n+                   ~^   ~~~\n                    %s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -151,7 +146,7 @@ void test_field_width_specifier (long l, int i1, int i2)\n   printf (\" %*.*d \", l, i1, i2); /* { dg-warning \"14: field width specifier '\\\\*' expects argument of type 'int', but argument 2 has type 'long int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    printf (\" %*.*d \", l, i1, i2);\n-             ~^~~~\n+             ~^~~~    ~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -160,10 +155,9 @@ void test_field_width_specifier (long l, int i1, int i2)\n void test_field_width_specifier_2 (char *d, long foo, long bar)\n {\n   __builtin_sprintf (d, \" %*ld \", foo, foo); /* { dg-warning \"28: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n-  /* TODO: ideally we'd underline the first \"foo\" here\".  */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_sprintf (d, \" %*ld \", foo, foo);\n-                           ~^~~\n+                           ~^~~    ~~~\n    { dg-end-multiline-output \"\" } */\n \n   __builtin_sprintf (d, \" %*ld \", foo + bar, foo); /* { dg-warning \"28: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n@@ -176,10 +170,9 @@ void test_field_width_specifier_2 (char *d, long foo, long bar)\n void test_field_precision_specifier (char *d, long foo, long bar)\n {\n   __builtin_sprintf (d, \" %.*ld \", foo, foo); /* { dg-warning \"29: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n-  /* TODO: ideally we'd underline the first \"foo\" here\".  */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_sprintf (d, \" %.*ld \", foo, foo);\n-                           ~~^~~\n+                           ~~^~~    ~~~\n    { dg-end-multiline-output \"\" } */\n \n   __builtin_sprintf (d, \" %.*ld \", foo + bar, foo); /* { dg-warning \"29: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n@@ -247,7 +240,7 @@ void test_macro (const char *msg)\n   printf(\"hello \" INT_FMT \" world\", msg);  /* { dg-warning \"10: format '%i' expects argument of type 'int', but argument 2 has type 'const char \\\\*' \" } */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \" INT_FMT \" world\", msg);\n-          ^~~~~~~~\n+          ^~~~~~~~                   ~~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n  #define INT_FMT \"%i\"\n@@ -263,7 +256,7 @@ void test_macro_2 (const char *msg)\n   printf(\"hello %\" PRIu32 \" world\", msg);  /* { dg-warning \"10: format '%u' expects argument of type 'unsigned int', but argument 2 has type 'const char \\\\*' \" } */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %\" PRIu32 \" world\", msg);\n-          ^~~~~~~~~\n+          ^~~~~~~~~                  ~~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n  #define PRIu32 \"u\"\n@@ -313,7 +306,7 @@ void test_non_contiguous_strings (void)\n                                     /* { dg-message \"26: format string is defined here\" \"\" { target *-*-* } .-1 } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(\" %\" \"d \", 0.5);\n-                    ^~~~\n+                    ^~~~       ~~~\n    { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(\" %\" \"d \", 0.5);\n@@ -330,6 +323,6 @@ void test_const_arrays (void)\n   __builtin_printf(a, 0.5); /* { dg-warning \"20: format .%d. expects argument of type .int., but argument 2 has type .double.\" } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(a, 0.5);\n-                    ^\n+                    ^  ~~~\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "b8c5829ed23fcdd08c9654567aa6c82b03f73aa6", "filename": "gcc/testsuite/gcc.dg/format/pr72858.c", "status": "modified", "additions": 37, "deletions": 65, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f687306d7dbbae7ad45e79dafde45f7b97f03c4/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c?ref=2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "patch": "@@ -25,64 +25,57 @@ test_x (char *d,\n   sprintf (d, \" %-8x \", uiexpr);\n \n   sprintf (d, \" %-8x \", lexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", lexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~\n                  %-8lx\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", ulexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long unsigned int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ulexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~\n                  %-8lx\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8x \", llexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long long int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", llexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", ullexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ullexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~~\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n \n   /* Floating-point arguments.  */\n \n   sprintf (d, \" %-8x \", fexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'double'\" } */\n-/* TODO: ideally would also underline \"fexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", fexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", dexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'double'\" } */\n-/* TODO: ideally would also underline \"dexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", dexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", ldexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long double'\" } */\n-/* TODO: ideally would also underline \"ldexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ldexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~\n                  %-8Lf\n    { dg-end-multiline-output \"\" } */\n \n   /* Pointer.  */\n   sprintf (d, \" %-8x \", ptr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'void \\\\*'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ptr);\n-                 ~~~^\n+                 ~~~^    ~~~\n                  %-8p\n    { dg-end-multiline-output \"\" } */\n \n@@ -92,7 +85,7 @@ test_x (char *d,\n   sprintf (d, \" %-8x \", s); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'struct s'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", s);\n-                 ~~~^\n+                 ~~~^    ~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -109,59 +102,52 @@ test_lx (char *d,\n   /* Integer arguments.  */\n \n   sprintf (d, \" %-8lx \", iexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'int'\" } */\n-/* TODO: ideally would also underline \"iexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", iexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8x\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", uiexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'unsigned int'\" } */\n-/* TODO: ideally would also underline \"uiexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", uiexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~~\n                  %-8x\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8lx \", lexpr);\n   sprintf (d, \" %-8lx \", ulexpr);\n \n   sprintf (d, \" %-8lx \", llexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'long long int'\" } */\n-/* TODO: ideally would also underline \"llexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", llexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~~\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", ullexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n-/* TODO: ideally would also underline \"ullexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", ullexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~~~\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n \n   /* Floating-point arguments.  */\n \n   sprintf (d, \" %-8lx \", fexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'double'\" } */\n-/* TODO: ideally would also underline \"fexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", fexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", dexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'double'\" } */\n-/* TODO: ideally would also underline \"dexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", dexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", ldexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'long double'\" } */\n-/* TODO: ideally would also underline \"ldexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", ldexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~~\n                  %-8Lf\n    { dg-end-multiline-output \"\" } */\n }\n@@ -181,32 +167,28 @@ test_o (char *d,\n   sprintf (d, \" %-8o \", uiexpr);\n \n   sprintf (d, \" %-8o \", lexpr); /* { dg-warning \"20: format '%o' expects argument of type 'unsigned int', but argument 3 has type 'long int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", lexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~\n                  %-8lo\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8o \", ulexpr); /* { dg-warning \"20: format '%o' expects argument of type 'unsigned int', but argument 3 has type 'long unsigned int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", ulexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~\n                  %-8lo\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8o \", llexpr); /* { dg-warning \"20: format '%o' expects argument of type 'unsigned int', but argument 3 has type 'long long int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", llexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8o \", ullexpr); /* { dg-warning \"20: format '%o' expects argument of type 'unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n-/* TODO: ideally would also underline \"lexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", ullexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~~\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n }\n@@ -223,35 +205,31 @@ test_lo (char *d,\n   /* Integer arguments.  */\n \n   sprintf (d, \" %-8lo \", iexpr); /* { dg-warning \"21: format '%lo' expects argument of type 'long unsigned int', but argument 3 has type 'int'\" } */\n-/* TODO: ideally would also underline \"iexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", iexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8o\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lo \", uiexpr); /* { dg-warning \"21: format '%lo' expects argument of type 'long unsigned int', but argument 3 has type 'unsigned int'\" } */\n-/* TODO: ideally would also underline \"uiexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", uiexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~~\n                  %-8o\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8lo \", lexpr);\n   sprintf (d, \" %-8lo \", ulexpr);\n \n   sprintf (d, \" %-8lo \", llexpr); /* { dg-warning \"21: format '%lo' expects argument of type 'long unsigned int', but argument 3 has type 'long long int'\" } */\n-/* TODO: ideally would also underline \"llexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", llexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~~\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lo \", ullexpr); /* { dg-warning \"21: format '%lo' expects argument of type 'long unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n-/* TODO: ideally would also underline \"ullexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", ullexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~~~\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n }\n@@ -265,10 +243,9 @@ test_e (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n   /* Integer arguments.  */\n \n   sprintf (d, \" %-8e \", iexpr); /* { dg-warning \"20: format '%e' expects argument of type 'double', but argument 3 has type 'int'\" } */\n-/* TODO: ideally would also underline \"iexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8e \", iexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n@@ -277,10 +254,9 @@ test_e (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n   sprintf (d, \" %-8e \", fexpr);\n   sprintf (d, \" %-8e \", dexpr);\n   sprintf (d, \" %-8e \", ldexpr); /* { dg-warning \"20: format '%e' expects argument of type 'double', but argument 3 has type 'long double'\" } */\n-/* TODO: ideally would also underline \"ldexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8e \", ldexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~\n                  %-8Le\n    { dg-end-multiline-output \"\" } */\n }\n@@ -294,10 +270,9 @@ test_Le (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n   /* Integer arguments.  */\n \n   sprintf (d, \" %-8Le \", iexpr); /* { dg-warning \"21: format '%Le' expects argument of type 'long double', but argument 3 has type 'int'\" } */\n-/* TODO: ideally would also underline \"iexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8Le \", iexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n@@ -306,14 +281,14 @@ test_Le (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n   sprintf (d, \" %-8Le \", fexpr); /* { dg-warning \"21: format '%Le' expects argument of type 'long double', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8Le \", fexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8e\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8Le \", dexpr); /* { dg-warning \"21: format '%Le' expects argument of type 'long double', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8Le \", dexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8e\n    { dg-end-multiline-output \"\" } */\n \n@@ -329,10 +304,9 @@ test_E (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n   /* Integer arguments.  */\n \n   sprintf (d, \" %-8E \", iexpr); /* { dg-warning \"20: format '%E' expects argument of type 'double', but argument 3 has type 'int'\" } */\n-/* TODO: ideally would also underline \"iexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8E \", iexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n@@ -341,10 +315,9 @@ test_E (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n   sprintf (d, \" %-8E \", fexpr);\n   sprintf (d, \" %-8E \", dexpr);\n   sprintf (d, \" %-8E \", ldexpr); /* { dg-warning \"20: format '%E' expects argument of type 'double', but argument 3 has type 'long double'\" } */\n-/* TODO: ideally would also underline \"ldexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8E \", ldexpr);\n-                 ~~~^\n+                 ~~~^    ~~~~~~\n                  %-8LE\n    { dg-end-multiline-output \"\" } */\n }\n@@ -358,24 +331,23 @@ test_LE (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n   /* Integer arguments.  */\n \n   sprintf (d, \" %-8LE \", iexpr); /* { dg-warning \"21: format '%LE' expects argument of type 'long double', but argument 3 has type 'int'\" } */\n-/* TODO: ideally would also underline \"iexpr\".  */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8LE \", iexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8LE \", fexpr); /* { dg-warning \"21: format '%LE' expects argument of type 'long double', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8LE \", fexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8E\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8LE \", dexpr); /* { dg-warning \"21: format '%LE' expects argument of type 'long double', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8LE \", dexpr);\n-                 ~~~~^\n+                 ~~~~^    ~~~~~\n                  %-8E\n    { dg-end-multiline-output \"\" } */\n \n@@ -394,19 +366,19 @@ test_everything (char *d, long lexpr)\n   /* { dg-warning \"26: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n-                       ~~~^~~~~~\n+                       ~~~^~~~~~         ~~~~~\n    { dg-end-multiline-output \"\" } */\n \n   /* { dg-warning \"28: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 4 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n-                       ~~~~~^~~~\n+                       ~~~~~^~~~                ~~~~~\n    { dg-end-multiline-output \"\" } */\n \n   /* { dg-warning \"31: format '%lld' expects argument of type 'long long int', but argument 5 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n-                       ~~~~~~~~^\n+                       ~~~~~~~~^                       ~~~~~\n                        %-+*.*ld\n    { dg-end-multiline-output \"\" } */\n }"}]}