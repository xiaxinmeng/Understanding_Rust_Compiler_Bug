{"sha": "ad6e2a18c2013863e1cf448471e1fa243403eb50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2ZTJhMThjMjAxMzg2M2UxY2Y0NDg0NzFlMWZhMjQzNDAzZWI1MA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-07-10T02:46:54Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-07-10T02:46:54Z"}, "message": "re PR fortran/13415 (Internal error with pointer array in common)\n\n\tPR fortran/13415\n\t* trans-common.c (calculate_length): Remove ...\n\t(get_segment_info): Merge into here.  Save field type.\n\t(build_field): Use saved type.\n\t(create_common, new_condition, new_segment, finish_equivalences):\n\tUse new get_segment_info.\n\t* trans-types.c: Update comment.\ntestsuite\n\t* gfortran.dg/common_pointer_1.f90: New test.\n\nCo-Authored-By: Paul Brook <paul@codesourcery.com>\n\nFrom-SVN: r84439", "tree": {"sha": "e756fdfff64bd3ba23400ab30a45d743c4f0de8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e756fdfff64bd3ba23400ab30a45d743c4f0de8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad6e2a18c2013863e1cf448471e1fa243403eb50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6e2a18c2013863e1cf448471e1fa243403eb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6e2a18c2013863e1cf448471e1fa243403eb50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6e2a18c2013863e1cf448471e1fa243403eb50/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc"}], "stats": {"total": 143, "additions": 86, "deletions": 57}, "files": [{"sha": "7cfab030d7aece9ef5c7c430e623f5116eff3449", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ad6e2a18c2013863e1cf448471e1fa243403eb50", "patch": "@@ -1,3 +1,14 @@\n+2004-07-10 Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\tPaul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/13415\n+\t* trans-common.c (calculate_length): Remove ...\n+\t(get_segment_info): Merge into here.  Save field type.\n+\t(build_field): Use saved type.\n+\t(create_common, new_condition, new_segment, finish_equivalences):\n+\tUse new get_segment_info.\n+\t* trans-types.c: Update comment.\n+\n 2004-07-09  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \t\n \tPR fortran/14077"}, {"sha": "800ab93cb1149013e10e2daa31a64f045f21072f", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 42, "deletions": 56, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=ad6e2a18c2013863e1cf448471e1fa243403eb50", "patch": "@@ -106,11 +106,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include <assert.h>\n \n \n+/* Holds a single variable in a equivalence set.  */\n typedef struct segment_info\n {\n   gfc_symbol *sym;\n   HOST_WIDE_INT offset;\n   HOST_WIDE_INT length;\n+  /* This will contain the field type until the field is created.  */\n   tree field; \n   struct segment_info *next;\n } segment_info;\n@@ -119,11 +121,31 @@ static segment_info *current_segment, *current_common;\n static HOST_WIDE_INT current_offset;\n static gfc_namespace *gfc_common_ns = NULL;\n \n-#define get_segment_info() gfc_getmem (sizeof (segment_info))\n-\n #define BLANK_COMMON_NAME \"__BLNK__\"\n \n \n+/* Make a segment_info based on a symbol.  */\n+\n+static segment_info *\n+get_segment_info (gfc_symbol * sym, HOST_WIDE_INT offset)\n+{\n+  segment_info *s;\n+\n+  /* Make sure we've got the character length.  */\n+  if (sym->ts.type == BT_CHARACTER)\n+    gfc_conv_const_charlen (sym->ts.cl);\n+\n+  /* Create the segment_info and fill it in.  */\n+  s = (segment_info *) gfc_getmem (sizeof (segment_info));\n+  s->sym = sym;\n+  /* We will use this type when building the segment aggreagate type.  */\n+  s->field = gfc_sym_type (sym);\n+  s->length = int_size_in_bytes (s->field);\n+  s->offset = offset;\n+\n+  return s;\n+}\n+\n /* Add combine segment V and segement LIST.  */\n \n static segment_info *\n@@ -189,18 +211,19 @@ gfc_sym_mangled_common_id (const char  *name)\n }\n \n \n-/* Build a filed declaration for a common variable or a local equivalence\n+/* Build a field declaration for a common variable or a local equivalence\n    object.  */\n \n-static tree\n+static void\n build_field (segment_info *h, tree union_type, record_layout_info rli)\n {\n-  tree type = gfc_sym_type (h->sym);\n-  tree name = get_identifier (h->sym->name);\n-  tree field = build_decl (FIELD_DECL, name, type);\n+  tree field;\n+  tree name;\n   HOST_WIDE_INT offset = h->offset;\n   unsigned HOST_WIDE_INT desired_align, known_align;\n \n+  name = get_identifier (h->sym->name);\n+  field = build_decl (FIELD_DECL, name, h->field);\n   known_align = (offset & -offset) * BITS_PER_UNIT;\n   if (known_align == 0 || known_align > BIGGEST_ALIGNMENT)\n     known_align = BIGGEST_ALIGNMENT;\n@@ -218,7 +241,7 @@ build_field (segment_info *h, tree union_type, record_layout_info rli)\n                             size_binop (PLUS_EXPR,\n                                         DECL_FIELD_OFFSET (field),\n                                         DECL_SIZE_UNIT (field)));\n-  return field;\n+  h->field = field;\n }\n \n \n@@ -340,13 +363,12 @@ create_common (gfc_common_head *com, const char *name)\n \n   for (h = current_common; h; h = next_s)\n     {\n-      tree field;\n-      field = build_field (h, union_type, rli);\n+      build_field (h, union_type, rli);\n \n       /* Link the field into the type.  */\n-      *field_link = field;\n-      field_link = &TREE_CHAIN (field);\n-      h->field = field;\n+      *field_link = h->field;\n+      field_link = &TREE_CHAIN (h->field);\n+\n       /* Has initial value.  */      \n       if (h->sym->value)\n         is_init = true;\n@@ -452,31 +474,6 @@ find_segment_info (gfc_symbol *symbol)\n } \n \n \n-/* Given a variable symbol, calculate the total length in bytes of the\n-   variable.  */\n-\n-static HOST_WIDE_INT\n-calculate_length (gfc_symbol *symbol)\n-{        \n-  HOST_WIDE_INT j, element_size;        \n-  mpz_t elements;  \n-\n-  if (symbol->ts.type == BT_CHARACTER)\n-    gfc_conv_const_charlen (symbol->ts.cl);\n-  element_size = int_size_in_bytes (gfc_typenode_for_spec (&symbol->ts));\n-  if (symbol->as == NULL) \n-    return element_size;        \n-\n-  /* Calculate the number of elements in the array */  \n-  if (spec_size (symbol->as, &elements) == FAILURE)    \n-    gfc_internal_error (\"calculate_length(): Unable to determine array size\");\n-  j = mpz_get_ui (elements);          \n-  mpz_clear (elements);\n-\n-  return j*element_size;;\n-}     \n-\n-\n /* Given an expression node, make sure it is a constant integer and return\n    the mpz_t value.  */     \n \n@@ -601,11 +598,8 @@ new_condition (segment_info *v, gfc_equiv *eq1, gfc_equiv *eq2)\n   offset1 = calculate_offset (eq1->expr);\n   offset2 = calculate_offset (eq2->expr);\n \n-  a = get_segment_info ();\n- \n-  a->sym = eq2->expr->symtree->n.sym;\n-  a->offset = v->offset + offset1 - offset2;\n-  a->length = calculate_length (eq2->expr->symtree->n.sym);\n+  a = get_segment_info (eq2->expr->symtree->n.sym,\n+\t\t\tv->offset + offset1 - offset2);\n  \n   current_segment = add_segments (current_segment, a);\n }\n@@ -728,14 +722,11 @@ add_equivalences (void)\n static void\n new_segment (gfc_common_head *common, const char *name, gfc_symbol *sym)\n {\n-  HOST_WIDE_INT length;\n+  current_segment = get_segment_info (sym, current_offset);\n+\n+  /* The offset of the next common variable.  */ \n+  current_offset += current_segment->length;\n \n-  current_segment = get_segment_info ();\n-  current_segment->sym = sym;\n-  current_segment->offset = current_offset;\n-  length = calculate_length (sym);\n-  current_segment->length = length;\n- \n   /* Add all object directly or indirectly equivalenced with this common\n      variable.  */ \n   add_equivalences ();\n@@ -745,8 +736,6 @@ new_segment (gfc_common_head *common, const char *name, gfc_symbol *sym)\n \t       \"to COMMON '%s' at %L\",\n \t       sym->name, name, &common->where);\n \n-  /* The offset of the next common variable.  */ \n-  current_offset += length;\n \n   /* Add these to the common block.  */\n   current_common = add_segments (current_common, current_segment);\n@@ -768,10 +757,7 @@ finish_equivalences (gfc_namespace *ns)\n       {\n         if (y->used) continue;\n         sym = z->expr->symtree->n.sym;\n-        current_segment = get_segment_info ();\n-        current_segment->sym = sym;\n-        current_segment->offset = 0;\n-        current_segment->length = calculate_length (sym);\n+        current_segment = get_segment_info (sym, 0);\n \n         /* All objects directly or indrectly equivalenced with this symbol.  */\n         add_equivalences ();"}, {"sha": "74e3972f1aa644886bd3696a734e35ba03de226f", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=ad6e2a18c2013863e1cf448471e1fa243403eb50", "patch": "@@ -916,7 +916,9 @@ gfc_build_pointer_type (gfc_symbol * sym, tree type)\n /* Return the type for a symbol.  Special handling is required for character\n    types to get the correct level of indirection.\n    For functions return the return type.\n-   For subroutines return void_type_node.  */\n+   For subroutines return void_type_node.\n+   Calling this multiple times for the same symbol should be avoided,\n+   especially for character and array types.  */\n \n tree\n gfc_sym_type (gfc_symbol * sym)"}, {"sha": "84c1a9e90c1f40c7cf2bb51b43ece2f4d90eaa11", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad6e2a18c2013863e1cf448471e1fa243403eb50", "patch": "@@ -1,3 +1,9 @@\n+2004-07-10 Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\tPaul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/13415\n+\t* gfortran.dg/common_pointer_1.f90: New test.\n+\n 2004-07-10  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \t* g++.dg/lookup/new1.C: Fix dg-excess-error syntax."}, {"sha": "e0f90ca72be95e39cca850bd55511a3fa159d7dc", "filename": "gcc/testsuite/gfortran.dg/common_pointer_1.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_pointer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6e2a18c2013863e1cf448471e1fa243403eb50/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_pointer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_pointer_1.f90?ref=ad6e2a18c2013863e1cf448471e1fa243403eb50", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! PR13415\n+! Test pointer variables in common blocks.\n+\n+subroutine test\n+  implicit none\n+  real, pointer :: p(:), q\n+  common /block/ p, q\n+\n+  if (any (p .ne. (/1.0, 2.0/)) .or. (q .ne. 42.0)) call abort ()\n+end subroutine\n+\n+program common_pointer_1\n+  implicit none\n+  real, target :: a(2), b\n+  real, pointer :: x(:), y\n+  common /block/ x, y\n+  \n+  a = (/1.0, 2.0/)\n+  b = 42.0\n+  x=>a\n+  y=>b\n+  call test\n+end program"}]}