{"sha": "1145917c6b82ed475b84ae0dd6de241bd018721d", "node_id": "C_kwDOANBUbNoAKDExNDU5MTdjNmI4MmVkNDc1Yjg0YWUwZGQ2ZGUyNDFiZDAxODcyMWQ", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-21T16:29:53Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-02-22T07:14:56Z"}, "message": "typecheck: Refactor unify_site\n\nRefactor unify_site to be a simple function in rust-type-util.h.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-autoderef.cc: Remove TypeCheckBase qualifier.\n\t* typecheck/rust-hir-trait-resolve.cc: Remove TypeCheckBase\n\tqualifier.\n\t* typecheck/rust-hir-type-check-base.cc (TypeCheckBase::unify_site):\n\tRemove unify_site.\n\t* typecheck/rust-hir-type-check-base.h: Remove unify_site\n\theader.\n\t* typecheck/rust-hir-type-check.cc (TypeResolution::Resolve):\n\tRemove TypeCheckBase qualifier.\n\t* typecheck/rust-type-util.cc (unify_site): Add unify_site\n\tfunction.\n\t* typecheck/rust-type-util.h (unify_site): Add unify_site\n\tprototype.\n\t* typecheck/rust-tyty-call.cc (TypeCheckMethodCallExpr::check):\n\tRemove TypeCheckBase qualifier.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "686d48a23894c27c050e1e67e5a6b46035c41521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/686d48a23894c27c050e1e67e5a6b46035c41521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1145917c6b82ed475b84ae0dd6de241bd018721d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1145917c6b82ed475b84ae0dd6de241bd018721d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1145917c6b82ed475b84ae0dd6de241bd018721d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1145917c6b82ed475b84ae0dd6de241bd018721d/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429e258dbe70b8277f3cef26392503c21a68f374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429e258dbe70b8277f3cef26392503c21a68f374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429e258dbe70b8277f3cef26392503c21a68f374"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "658ddd7c2e9c107b207c9d15c519f9a500e50ade", "filename": "gcc/rust/typecheck/rust-autoderef.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -265,9 +265,9 @@ resolve_operator_overload_fn (\n \t  fn = static_cast<TyTy::FnType *> (lookup);\n \n \t  Location unify_locus = mappings->lookup_location (ty->get_ref ());\n-\t  TypeCheckBase::unify_site (\n-\t    ty->get_ref (), TyTy::TyWithLocation (fn->get_self_type ()),\n-\t    TyTy::TyWithLocation (adjusted_self), unify_locus);\n+\t  unify_site (ty->get_ref (),\n+\t\t      TyTy::TyWithLocation (fn->get_self_type ()),\n+\t\t      TyTy::TyWithLocation (adjusted_self), unify_locus);\n \n \t  lookup = fn;\n \t}"}, {"sha": "cb8d4d62fce8bb704d9a1c68893ba8566e9951bf", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -499,10 +499,10 @@ AssociatedImplTrait::setup_associated_types (\n   // the type correctly as our receiver may be generic and we are inferring its\n   // generic arguments and this Self might be the concrete version or vice\n   // versa.\n-  auto result = TypeCheckBase::unify_site (\n-    get_impl_block ()->get_mappings ().get_hirid (),\n-    TyTy::TyWithLocation (receiver), TyTy::TyWithLocation (impl_self_infer),\n-    impl_predicate.get_locus ());\n+  auto result = unify_site (get_impl_block ()->get_mappings ().get_hirid (),\n+\t\t\t    TyTy::TyWithLocation (receiver),\n+\t\t\t    TyTy::TyWithLocation (impl_self_infer),\n+\t\t\t    impl_predicate.get_locus ());\n   rust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n   TyTy::BaseType *self_result = result;\n \n@@ -527,9 +527,8 @@ AssociatedImplTrait::setup_associated_types (\n       TyTy::BaseType *b = hrtb_bound_arguments.at (i);\n \n       result\n-\t= TypeCheckBase::unify_site (a->get_ref (), TyTy::TyWithLocation (a),\n-\t\t\t\t     TyTy::TyWithLocation (b),\n-\t\t\t\t     impl_predicate.get_locus ());\n+\t= unify_site (a->get_ref (), TyTy::TyWithLocation (a),\n+\t\t      TyTy::TyWithLocation (b), impl_predicate.get_locus ());\n       rust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n     }\n "}, {"sha": "e401e831441c4592778b7f62ae35237db75c6977", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -17,13 +17,12 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-hir-type-check-base.h\"\n-#include \"rust-hir-type-check-item.h\"\n-#include \"rust-hir-type-check-type.h\"\n+#include \"rust-casts.h\"\n+#include \"rust-coercion.h\"\n #include \"rust-hir-type-check-expr.h\"\n #include \"rust-hir-type-check-implitem.h\"\n-#include \"rust-coercion.h\"\n-#include \"rust-unify.h\"\n-#include \"rust-casts.h\"\n+#include \"rust-hir-type-check-item.h\"\n+#include \"rust-hir-type-check-type.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -350,20 +349,6 @@ TypeCheckBase::parse_repr_options (const AST::AttrVec &attrs, Location locus)\n   return repr;\n }\n \n-TyTy::BaseType *\n-TypeCheckBase::unify_site (HirId id, TyTy::TyWithLocation lhs,\n-\t\t\t   TyTy::TyWithLocation rhs, Location unify_locus)\n-{\n-  TyTy::BaseType *expected = lhs.get_ty ();\n-  TyTy::BaseType *expr = rhs.get_ty ();\n-\n-  rust_debug (\"unify_site id={%u} expected={%s} expr={%s}\", id,\n-\t      expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n-\n-  return UnifyRules::Resolve (lhs, rhs, unify_locus, true /*commit*/,\n-\t\t\t      true /*emit_error*/);\n-}\n-\n TyTy::BaseType *\n TypeCheckBase::coercion_site (HirId id, TyTy::TyWithLocation lhs,\n \t\t\t      TyTy::TyWithLocation rhs, Location locus)\n@@ -434,7 +419,7 @@ TypeCheckBase::cast_site (HirId id, TyTy::TyWithLocation from,\n \n void\n TypeCheckBase::resolve_generic_params (\n-  const std::vector<std::unique_ptr<HIR::GenericParam>> &generic_params,\n+  const std::vector<std::unique_ptr<HIR::GenericParam> > &generic_params,\n   std::vector<TyTy::SubstitutionParamMapping> &substitutions)\n {\n   for (auto &generic_param : generic_params)"}, {"sha": "133c91eca0ff025aa83e91019c81d1519558ae2c", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -20,10 +20,10 @@\n #define RUST_HIR_TYPE_CHECK_BASE\n \n #include \"rust-diagnostics.h\"\n+#include \"rust-hir-map.h\"\n #include \"rust-hir-type-check.h\"\n-#include \"rust-name-resolver.h\"\n #include \"rust-hir-visitor.h\"\n-#include \"rust-hir-map.h\"\n+#include \"rust-name-resolver.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -34,10 +34,6 @@ class TypeCheckBase\n public:\n   virtual ~TypeCheckBase () {}\n \n-  static TyTy::BaseType *unify_site (HirId id, TyTy::TyWithLocation lhs,\n-\t\t\t\t     TyTy::TyWithLocation rhs,\n-\t\t\t\t     Location unify_locus);\n-\n   static TyTy::BaseType *coercion_site (HirId id, TyTy::TyWithLocation lhs,\n \t\t\t\t\tTyTy::TyWithLocation rhs,\n \t\t\t\t\tLocation coercion_locus);\n@@ -66,7 +62,7 @@ class TypeCheckBase\n \t\t\t\t\t\t Location locus);\n \n   void resolve_generic_params (\n-    const std::vector<std::unique_ptr<HIR::GenericParam>> &generic_params,\n+    const std::vector<std::unique_ptr<HIR::GenericParam> > &generic_params,\n     std::vector<TyTy::SubstitutionParamMapping> &substitutions);\n \n   Analysis::Mappings *mappings;"}, {"sha": "f5b481b3dd4e775281933555dc94c37e04bc7e79", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -18,11 +18,11 @@\n \n #include \"rust-hir-type-check.h\"\n #include \"rust-hir-full.h\"\n-#include \"rust-hir-type-check-item.h\"\n+#include \"rust-hir-inherent-impl-overlap.h\"\n #include \"rust-hir-type-check-expr.h\"\n+#include \"rust-hir-type-check-item.h\"\n #include \"rust-hir-type-check-pattern.h\"\n #include \"rust-hir-type-check-struct-field.h\"\n-#include \"rust-hir-inherent-impl-overlap.h\"\n \n extern bool\n saw_errors (void);\n@@ -64,9 +64,8 @@ TypeResolution::Resolve (HIR::Crate &crate)\n     else\n       {\n \tauto result\n-\t  = TypeCheckBase::unify_site (id, TyTy::TyWithLocation (ty),\n-\t\t\t\t       TyTy::TyWithLocation (default_type),\n-\t\t\t\t       Location ());\n+\t  = unify_site (id, TyTy::TyWithLocation (ty),\n+\t\t\tTyTy::TyWithLocation (default_type), Location ());\n \trust_assert (result);\n \trust_assert (result->get_kind () != TyTy::TypeKind::ERROR);\n \tresult->set_ref (id);\n@@ -142,10 +141,9 @@ TraitItemReference::get_type_from_constant (\n       TyTy::BaseType *expr\n \t= TypeCheckExpr::Resolve (constant.get_expr ().get ());\n \n-      return TypeCheckBase::unify_site (constant.get_mappings ().get_hirid (),\n-\t\t\t\t\tTyTy::TyWithLocation (type),\n-\t\t\t\t\tTyTy::TyWithLocation (expr),\n-\t\t\t\t\tconstant.get_locus ());\n+      return unify_site (constant.get_mappings ().get_hirid (),\n+\t\t\t TyTy::TyWithLocation (type),\n+\t\t\t TyTy::TyWithLocation (expr), constant.get_locus ());\n     }\n   return type;\n }"}, {"sha": "19935ebd922264c3864b16916ec0d42a430093df", "filename": "gcc/rust/typecheck/rust-type-util.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -18,12 +18,13 @@\n \n #include \"rust-type-util.h\"\n #include \"rust-diagnostics.h\"\n-#include \"rust-hir-type-check.h\"\n-#include \"rust-name-resolver.h\"\n-#include \"rust-hir-visitor.h\"\n #include \"rust-hir-map.h\"\n-#include \"rust-hir-type-check-item.h\"\n #include \"rust-hir-type-check-implitem.h\"\n+#include \"rust-hir-type-check-item.h\"\n+#include \"rust-hir-type-check.h\"\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-name-resolver.h\"\n+#include \"rust-unify.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -104,5 +105,19 @@ query_type (HirId reference, TyTy::BaseType **result)\n   return false;\n }\n \n+TyTy::BaseType *\n+unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t    Location unify_locus)\n+{\n+  TyTy::BaseType *expected = lhs.get_ty ();\n+  TyTy::BaseType *expr = rhs.get_ty ();\n+\n+  rust_debug (\"unify_site id={%u} expected={%s} expr={%s}\", id,\n+\t      expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n+\n+  return UnifyRules::Resolve (lhs, rhs, unify_locus, true /*commit*/,\n+\t\t\t      true /*emit_error*/);\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "e504082cec340fdb363470d7363269257bf0d26c", "filename": "gcc/rust/typecheck/rust-type-util.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.h?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -20,6 +20,7 @@\n #define RUST_TYPE_UTIL\n \n #include \"rust-mapping-common.h\"\n+#include \"rust-tyty.h\"\n \n namespace Rust {\n \n@@ -32,6 +33,10 @@ namespace Resolver {\n extern bool\n query_type (HirId reference, TyTy::BaseType **result);\n \n+TyTy::BaseType *\n+unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t    Location unify_locus);\n+\n } // namespace Resolver\n } // namespace Rust\n "}, {"sha": "3d5fc6593daa222993de3d55c35f9201510d7c4a", "filename": "gcc/rust/typecheck/rust-tyty-call.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1145917c6b82ed475b84ae0dd6de241bd018721d/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.cc?ref=1145917c6b82ed475b84ae0dd6de241bd018721d", "patch": "@@ -316,9 +316,10 @@ TypeCheckMethodCallExpr::go (FnType *ref, Analysis::NodeMapping call_mappings,\n BaseType *\n TypeCheckMethodCallExpr::check (FnType &type)\n {\n-  Resolver::TypeCheckBase::unify_site (\n-    call_mappings.get_hirid (), TyWithLocation (type.get_self_type ()),\n-    TyWithLocation (adjusted_self, receiver_locus), call_locus);\n+  Resolver::unify_site (call_mappings.get_hirid (),\n+\t\t\tTyWithLocation (type.get_self_type ()),\n+\t\t\tTyWithLocation (adjusted_self, receiver_locus),\n+\t\t\tcall_locus);\n \n   // +1 for the receiver self\n   size_t num_args_to_call = arguments.size () + 1;"}]}