{"sha": "14f50ba054079eccf9ac49997b92793e2a87b13c", "node_id": "C_kwDOANBUbNoAKDE0ZjUwYmEwNTQwNzllY2NmOWFjNDk5OTdiOTI3OTNlMmE4N2IxM2M", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-29T21:02:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-29T23:06:25Z"}, "message": "libstdc++: Enforce requirements on template argument of std::optional\n\nThe standard does not allow std::optional<T&>, std::optional<T[1]>,\nstd::optional<T()> etc. and although we do give errors, they come from\ndown inside the internals of std::optional. We could improve the static\nassertions at the top of the class so that users get a more precise\ndiagnostic:\n\noptional:721:21: error: static assertion failed\n721 |       static_assert(is_object_v<_Tp> && !is_array_v<_Tp>);\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/optional (optional): Adjust static assertion to\n\treject arrays and functions as well as references.\n\t* testsuite/20_util/optional/requirements_neg.cc: New test.", "tree": {"sha": "03adda7ad1ed84f458d6709b6d8f01713d875af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03adda7ad1ed84f458d6709b6d8f01713d875af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f50ba054079eccf9ac49997b92793e2a87b13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f50ba054079eccf9ac49997b92793e2a87b13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f50ba054079eccf9ac49997b92793e2a87b13c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f50ba054079eccf9ac49997b92793e2a87b13c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68982b98d2a7a52cfc5aada7d35d6c493c010712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68982b98d2a7a52cfc5aada7d35d6c493c010712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68982b98d2a7a52cfc5aada7d35d6c493c010712"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "90bf74143f4f8ff8bbdda4dac6e302c63ef7f295", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f50ba054079eccf9ac49997b92793e2a87b13c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f50ba054079eccf9ac49997b92793e2a87b13c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=14f50ba054079eccf9ac49997b92793e2a87b13c", "patch": "@@ -718,7 +718,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);\n       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);\n-      static_assert(!is_reference_v<_Tp>);\n+      static_assert(is_object_v<_Tp> && !is_array_v<_Tp>);\n \n     private:\n       using _Base = _Optional_base<_Tp>;"}, {"sha": "688c305803e26a0326a0f6cab55822c32f1ae0be", "filename": "libstdc++-v3/testsuite/20_util/optional/requirements_neg.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f50ba054079eccf9ac49997b92793e2a87b13c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frequirements_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f50ba054079eccf9ac49997b92793e2a87b13c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frequirements_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frequirements_neg.cc?ref=14f50ba054079eccf9ac49997b92793e2a87b13c", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <optional>\n+\n+// T shall be a type other than cv in_place_t or cv nullopt_t\n+// that meets the Cpp17Destructible requirements\n+\n+std::optional<std::nullopt_t> o1;        // { dg-error \"here\" }\n+std::optional<const std::nullopt_t> o2;  // { dg-error \"here\" }\n+std::optional<std::in_place_t> o3;       // { dg-error \"here\" }\n+std::optional<const std::in_place_t> o4; // { dg-error \"here\" }\n+std::optional<int&> o5;                  // { dg-error \"here\" }\n+std::optional<int[1]> o6;                // { dg-error \"here\" }\n+std::optional<int[]> o7;                 // { dg-error \"here\" }\n+std::optional<int()> o8;                 // { dg-error \"here\" }\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }\n+\n+// { dg-prune-output \"forming pointer to reference type\" }\n+// { dg-prune-output \"union may not have reference type\" }\n+// { dg-prune-output \"function returning an array\" }\n+// { dg-prune-output \"flexible array member .* in union\" }\n+// { dg-prune-output \"function returning a function\" }\n+// { dg-prune-output \"invalidly declared function type\" }"}]}