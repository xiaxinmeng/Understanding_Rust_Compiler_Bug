{"sha": "23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd", "node_id": "C_kwDOANBUbNoAKDIzZGI3ODllY2I1NzRlNzAyY2EzZjNhZWE2YjdkNmY5ZGRiZTk5Y2Q", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-22T14:39:34Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-25T10:34:13Z"}, "message": "resolver: Move Scope methods into source file", "tree": {"sha": "96d44ef2943bba66eb7a57f6cf782d7b102399e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96d44ef2943bba66eb7a57f6cf782d7b102399e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8466c9b1626a71641078ac2f15003aafea92961d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8466c9b1626a71641078ac2f15003aafea92961d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8466c9b1626a71641078ac2f15003aafea92961d"}], "stats": {"total": 146, "additions": 88, "deletions": 58}, "files": [{"sha": "fc1f36154dd5102f1caee6fb5c6ffb9eb44331e7", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd", "patch": "@@ -34,7 +34,8 @@\n       _R.push_back (builtin_type);                                             \\\n       tyctx->insert_builtin (_TY->get_ref (), builtin_type->get_node_id (),    \\\n \t\t\t     _TY);                                             \\\n-  } while (0)\n+    }                                                                          \\\n+  while (0)\n \n namespace Rust {\n namespace Resolver {\n@@ -122,6 +123,83 @@ Rib::decl_was_declared_here (NodeId def) const\n   return false;\n }\n \n+Scope::Scope (CrateNum crate_num) : crate_num (crate_num) {}\n+\n+void\n+Scope::insert (\n+  const CanonicalPath &ident, NodeId id, Location locus, bool shadow,\n+  std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n+{\n+  peek ()->insert_name (ident, id, locus, shadow, dup_cb);\n+}\n+\n+void\n+Scope::insert (const CanonicalPath &ident, NodeId id, Location locus)\n+{\n+  peek ()->insert_name (ident, id, locus, true,\n+\t\t\t[] (const CanonicalPath &, NodeId, Location) -> void {\n+\t\t\t});\n+}\n+\n+bool\n+Scope::lookup (const CanonicalPath &ident, NodeId *id)\n+{\n+  NodeId lookup = UNKNOWN_NODEID;\n+  iterate ([&] (Rib *r) mutable -> bool {\n+    if (r->lookup_name (ident, &lookup))\n+      return false;\n+    return true;\n+  });\n+\n+  *id = lookup;\n+  return lookup != UNKNOWN_NODEID;\n+}\n+\n+void\n+Scope::iterate (std::function<bool (Rib *)> cb)\n+{\n+  for (auto it = stack.rbegin (); it != stack.rend (); ++it)\n+    {\n+      if (!cb (*it))\n+\treturn;\n+    }\n+}\n+\n+Rib *\n+Scope::peek ()\n+{\n+  return stack.back ();\n+}\n+\n+void\n+Scope::push (NodeId id)\n+{\n+  stack.push_back (new Rib (get_crate_num (), id));\n+}\n+\n+Rib *\n+Scope::pop ()\n+{\n+  Rib *r = peek ();\n+  stack.pop_back ();\n+  return r;\n+}\n+\n+void\n+Scope::append_reference_for_def (NodeId refId, NodeId defId)\n+{\n+  bool ok = false;\n+  iterate ([&] (Rib *r) mutable -> bool {\n+    if (r->decl_was_declared_here (defId))\n+      {\n+\tok = true;\n+\tr->append_reference_for_def (defId, refId);\n+      }\n+    return true;\n+  });\n+  rust_assert (ok);\n+}\n+\n Resolver::Resolver ()\n   : mappings (Analysis::Mappings::get ()), tyctx (TypeCheckContext::get ()),\n     name_scope (Scope (mappings->get_current_crate ())),"}, {"sha": "ab7cb5567e12e9f24492a204883eee0fb81254ec", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 9, "deletions": 57, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=23db789ecb574e702ca3f3aea6b7d6f9ddbe99cd", "patch": "@@ -63,73 +63,25 @@ class Rib\n class Scope\n {\n public:\n-  Scope (CrateNum crate_num) : crate_num (crate_num) {}\n-\n-  ~Scope () {}\n+  Scope (CrateNum crate_num);\n \n   void\n   insert (const CanonicalPath &ident, NodeId id, Location locus, bool shadow,\n-\t  std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb)\n-  {\n-    peek ()->insert_name (ident, id, locus, shadow, dup_cb);\n-  }\n-\n-  void insert (const CanonicalPath &ident, NodeId id, Location locus)\n-  {\n-    peek ()->insert_name (ident, id, locus, true,\n-\t\t\t  [] (const CanonicalPath &, NodeId, Location) -> void {\n-\t\t\t  });\n-  }\n-\n-  bool lookup (const CanonicalPath &ident, NodeId *id)\n-  {\n-    NodeId lookup = UNKNOWN_NODEID;\n-    iterate ([&] (Rib *r) mutable -> bool {\n-      if (r->lookup_name (ident, &lookup))\n-\treturn false;\n-      return true;\n-    });\n-\n-    *id = lookup;\n-    return lookup != UNKNOWN_NODEID;\n-  }\n+\t  std::function<void (const CanonicalPath &, NodeId, Location)> dup_cb);\n \n-  void iterate (std::function<bool (Rib *)> cb)\n-  {\n-    for (auto it = stack.rbegin (); it != stack.rend (); ++it)\n-      {\n-\tif (!cb (*it))\n-\t  return;\n-      }\n-  }\n+  void insert (const CanonicalPath &ident, NodeId id, Location locus);\n+  bool lookup (const CanonicalPath &ident, NodeId *id);\n \n-  Rib *peek () { return stack.back (); }\n+  void iterate (std::function<bool (Rib *)> cb);\n \n-  void push (NodeId id) { stack.push_back (new Rib (get_crate_num (), id)); }\n+  Rib *peek ();\n+  void push (NodeId id);\n+  Rib *pop ();\n \n-  Rib *pop ()\n-  {\n-    Rib *r = peek ();\n-    stack.pop_back ();\n-    return r;\n-  }\n+  void append_reference_for_def (NodeId refId, NodeId defId);\n \n   CrateNum get_crate_num () const { return crate_num; }\n \n-  void append_reference_for_def (NodeId refId, NodeId defId)\n-  {\n-    bool ok = false;\n-    iterate ([&] (Rib *r) mutable -> bool {\n-      if (r->decl_was_declared_here (defId))\n-\t{\n-\t  ok = true;\n-\t  r->append_reference_for_def (defId, refId);\n-\t}\n-      return true;\n-    });\n-    rust_assert (ok);\n-  }\n-\n private:\n   CrateNum crate_num;\n   std::vector<Rib *> stack;"}]}