{"sha": "23dfa477ce8745ab198836aa6e7096c8aa7a603b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkZmE0NzdjZTg3NDVhYjE5ODgzNmFhNmU3MDk2YzhhYTdhNjAzYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-24T04:04:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-24T04:04:06Z"}, "message": "tree.h (TREE_SET_PERMANENT): New macro.\n\n\t* tree.h (TREE_SET_PERMANENT): New macro.  Document conditions\n\tunder which TREE_PERMANENT will be set.\n\t* tree.c (make_node, copy_node, make_tree_vec, tree_cons,\n\tbuild1): Use TREE_SET_PERMANENT.\n\t* print-tree.c (print_node): Don't report value of\n\tTREE_PERMANENT if ggc_p is true.\n\n\t* c-common.c (c_get_alias_set): Don't use TREE_PERMANENT to\n\tdecide whether to give a type a new alias set.\n\t* objc/objc-act.c (build_objc_string_object): Never copy the string.\n\t* tree.c (make_node): Set DECL_IN_SYSTEM_HEADER irrespective\n\tof value of 'obstack'.\n\n\t* f/com.c (ffecom_type_permanent_copy_): Delete unused function.\n        (finish_decl): Don't change TREE_PERMANENT (DECL_INITIAL (decl)).\n\nFrom-SVN: r32128", "tree": {"sha": "89b08e0a561773273c363cd6cce3def64be0ad7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b08e0a561773273c363cd6cce3def64be0ad7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23dfa477ce8745ab198836aa6e7096c8aa7a603b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23dfa477ce8745ab198836aa6e7096c8aa7a603b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23dfa477ce8745ab198836aa6e7096c8aa7a603b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23dfa477ce8745ab198836aa6e7096c8aa7a603b/comments", "author": null, "committer": null, "parents": [{"sha": "1e59bcc3071d8909494146db844644a9d4129b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e59bcc3071d8909494146db844644a9d4129b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e59bcc3071d8909494146db844644a9d4129b18"}], "stats": {"total": 120, "additions": 40, "deletions": 80}, "files": [{"sha": "991d4a7ad722221ba3fc21db5cee34ca9a9002ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -1,3 +1,19 @@\n+2000-02-23  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* tree.h (TREE_SET_PERMANENT): New macro.  Document conditions\n+\tunder which TREE_PERMANENT will be set.\n+\t* tree.c (make_node, copy_node, make_tree_vec, tree_cons,\n+\tbuild1): Use TREE_SET_PERMANENT.\n+\t* print-tree.c (print_node): Don't report value of\n+\tTREE_PERMANENT if ggc_p is true.\n+\n+\t* c-common.c (c_get_alias_set): Don't use TREE_PERMANENT to\n+\tdecide whether to give a type a new alias set.\n+\t* objc/objc-act.c (build_objc_string_object): Never copy the string.\n+\t* tree.c (make_node): Set DECL_IN_SYSTEM_HEADER irrespective\n+\tof value of 'obstack'.\n+\n+\n 2000-02-24  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_process_after_reload): Split all insns."}, {"sha": "0a7db5c78f0fa0c9b54100de2cd958f09e7a1532", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -3490,18 +3490,9 @@ c_get_alias_set (t)\n     }\n \n   if (!TYPE_ALIAS_SET_KNOWN_P (type))\n-    {\n-      /* Types that are not global ('permanent') are not\n-\t placed in the type hash table.  Thus, there can be multiple\n-\t copies of identical types in local scopes.  In the long run,\n-\t all types should be permanent.  */\n-      if (! TREE_PERMANENT (type))\n-\tTYPE_ALIAS_SET (type) = 0;\n-      else\n-\t/* TYPE is something we haven't seen before.  Put it in a new\n-\t   alias set.  */\n-\tTYPE_ALIAS_SET (type) = new_alias_set ();\n-    }\n+    /* TYPE is something we haven't seen before.  Put it in a new\n+       alias set.  */\n+    TYPE_ALIAS_SET (type) = new_alias_set ();\n \n   return TYPE_ALIAS_SET (type);\n }"}, {"sha": "aa023a57fd32014f61d0b774083efb2e1079bb84", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -1,3 +1,8 @@\n+2000-02-23  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* com.c (ffecom_type_permanent_copy_): Delete unused function.\n+        (finish_decl): Don't change TREE_PERMANENT (DECL_INITIAL (decl)).\n+\n Sat Feb 19 18:43:13 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* com.c (ffecom_sym_transform): Use DECL_SIZE_UNIT."}, {"sha": "14193ebb9a6cd46b958510c82c3019b3b32747a0", "filename": "gcc/f/com.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -444,9 +444,6 @@ static tree ffecom_type_localvar_ (ffesymbol s,\n \t\t\t\t   ffeinfoBasictype bt,\n \t\t\t\t   ffeinfoKindtype kt);\n static tree ffecom_type_namelist_ (void);\n-#if 0\n-static tree ffecom_type_permanent_copy_ (tree t);\n-#endif\n static tree ffecom_type_vardesc_ (void);\n static tree ffecom_vardesc_ (ffebld expr);\n static tree ffecom_vardesc_array_ (ffesymbol s);\n@@ -9502,41 +9499,6 @@ ffecom_type_namelist_ ()\n \n #endif\n \n-/* Make a copy of a type, assuming caller has switched to the permanent\n-   obstacks and that the type is for an aggregate (array) initializer.  */\n-\n-#if FFECOM_targetCURRENT == FFECOM_targetGCC && 0\t/* Not used now. */\n-static tree\n-ffecom_type_permanent_copy_ (tree t)\n-{\n-  tree domain;\n-  tree max;\n-\n-  assert (TREE_TYPE (t) != NULL_TREE);\n-\n-  domain = TYPE_DOMAIN (t);\n-\n-  assert (TREE_CODE (t) == ARRAY_TYPE);\n-  assert (TREE_PERMANENT (TREE_TYPE (t)));\n-  assert (TREE_PERMANENT (TREE_TYPE (domain)));\n-  assert (TREE_PERMANENT (TYPE_MIN_VALUE (domain)));\n-\n-  max = TYPE_MAX_VALUE (domain);\n-  if (!TREE_PERMANENT (max))\n-    {\n-      assert (TREE_CODE (max) == INTEGER_CST);\n-\n-      max = build_int_2 (TREE_INT_CST_LOW (max), TREE_INT_CST_HIGH (max));\n-      TREE_TYPE (max) = TREE_TYPE (TYPE_MIN_VALUE (domain));\n-    }\n-\n-  return build_array_type (TREE_TYPE (t),\n-\t\t\t   build_range_type (TREE_TYPE (domain),\n-\t\t\t\t\t     TYPE_MIN_VALUE (domain),\n-\t\t\t\t\t     max));\n-}\n-#endif\n-\n /* Build Vardesc type.  */\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n@@ -14095,9 +14057,6 @@ finish_decl (tree decl, tree init, bool is_top_level)\n \t\t\t\t0);\n     }\n \n-  /* This test used to include TREE_PERMANENT, however, we have the same\n-     problem with initializers at the function level.  Such initializers get\n-     saved until the end of the function on the momentary_obstack.  */\n   if (!(TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n       && temporary\n   /* DECL_INITIAL is not defined in PARM_DECLs, since it shares space with\n@@ -14121,11 +14080,6 @@ finish_decl (tree decl, tree init, bool is_top_level)\n \t  if (TREE_READONLY (decl))\n \t    {\n \t      preserve_initializer ();\n-\t      /* Hack?  Set the permanent bit for something that is\n-\t\t permanent, but not on the permenent obstack, so as to\n-\t\t convince output_constant_def to make its rtl on the\n-\t\t permanent obstack.  */\n-\t      TREE_PERMANENT (DECL_INITIAL (decl)) = 1;\n \n \t      /* The initializer and DECL must have the same (or equivalent\n \t\t types), but if the initializer is a STRING_CST, its type"}, {"sha": "2394400f855e3ad39f818f8ca849e7f7ec5ce5dd", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -1354,13 +1354,6 @@ build_objc_string_object (strings)\n   TREE_SET_CODE (string, STRING_CST);\n   length = TREE_STRING_LENGTH (string) - 1;\n \n-  if (! flag_next_runtime)\n-    {\n-      if (! TREE_PERMANENT (strings))\n-\tstring = my_build_string (length + 1,\n-\t\t\t\t  TREE_STRING_POINTER (string));\n-    }\n-\n   /* & ((NXConstantString) {0, string, length})  */\n \n   initlist = build_tree_list (NULL_TREE, build_int_2 (0, 0));"}, {"sha": "3bef9146c7409cf29cb692f8b590c4a610f3f446", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -301,7 +301,7 @@ print_node (file, prefix, node, indent)\n     fputs (\" used\", file);\n   if (TREE_RAISES (node))\n     fputs (\" raises\", file);\n-  if (TREE_PERMANENT (node))\n+  if (!ggc_p && TREE_PERMANENT (node))\n     fputs (\" permanent\", file);\n   if (TREE_PUBLIC (node))\n     fputs (\" public\", file);"}, {"sha": "3a3f270493e6109d8dbafa74c5bad000a553ef67", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -892,6 +892,8 @@ init_tree_codes ()\n \n /* Return a newly allocated node of code CODE.\n    Initialize the node's unique id and its TREE_PERMANENT flag.\n+   Note that if garbage collection is in use, TREE_PERMANENT will\n+   always be zero - we want to eliminate use of TREE_PERMANENT.\n    For decl and type nodes, some other fields are initialized.\n    The rest of the node is initialized to zero.\n \n@@ -1048,8 +1050,7 @@ make_node (code)\n #endif\n \n   TREE_SET_CODE (t, code);\n-  if (obstack == &permanent_obstack)\n-    TREE_PERMANENT (t) = 1;\n+  TREE_SET_PERMANENT (t);\n \n   switch (type)\n     {\n@@ -1061,8 +1062,7 @@ make_node (code)\n     case 'd':\n       if (code != FUNCTION_DECL)\n \tDECL_ALIGN (t) = 1;\n-      DECL_IN_SYSTEM_HEADER (t)\n-\t= in_system_header && (obstack == &permanent_obstack);\n+      DECL_IN_SYSTEM_HEADER (t) = in_system_header;\n       DECL_SOURCE_LINE (t) = lineno;\n       DECL_SOURCE_FILE (t) = \n \t(input_filename) ? input_filename : built_in_filename;\n@@ -1215,7 +1215,7 @@ copy_node (node)\n       TYPE_SYMTAB_ADDRESS (t) = 0;\n     }\n \n-  TREE_PERMANENT (t) = (current_obstack == &permanent_obstack);\n+  TREE_SET_PERMANENT (t);\n \n   return t;\n }\n@@ -1608,8 +1608,7 @@ make_tree_vec (len)\n \n   TREE_SET_CODE (t, TREE_VEC);\n   TREE_VEC_LENGTH (t) = len;\n-  if (obstack == &permanent_obstack)\n-    TREE_PERMANENT (t) = 1;\n+  TREE_SET_PERMANENT (t);\n \n   return t;\n }\n@@ -2114,10 +2113,8 @@ tree_cons (purpose, value, chain)\n   tree_node_sizes[(int)x_kind] += sizeof (struct tree_list);\n #endif\n \n-\n   TREE_SET_CODE (node, TREE_LIST);\n-  if (current_obstack == &permanent_obstack)\n-    TREE_PERMANENT (node) = 1;\n+  TREE_SET_PERMANENT (node);\n \n   TREE_CHAIN (node) = chain;\n   TREE_PURPOSE (node) = purpose;\n@@ -3209,9 +3206,7 @@ build1 (code, type, node)\n \n   TREE_TYPE (t) = type;\n   TREE_SET_CODE (t, code);\n-\n-  if (obstack == &permanent_obstack)\n-    TREE_PERMANENT (t) = 1;\n+  TREE_SET_PERMANENT (t);\n \n   TREE_OPERAND (t, 0) = node;\n   if (node && first_rtl_op (code) != 0)"}, {"sha": "280351444312c5b0f8393a8c5d9ef48fdea04438", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23dfa477ce8745ab198836aa6e7096c8aa7a603b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=23dfa477ce8745ab198836aa6e7096c8aa7a603b", "patch": "@@ -563,8 +563,14 @@ extern void tree_class_check_failed PARAMS ((const tree, char,\n \n /* Nonzero means permanent node;\n    node will continue to exist for the entire compiler run.\n-   Otherwise it will be recycled at the end of the function.  */\n+   Otherwise it will be recycled at the end of the function.\n+   This flag is always zero if garbage collection is in use.\n+   Try not to use this.  Only set it with TREE_SET_PERMANENT.  */\n #define TREE_PERMANENT(NODE) ((NODE)->common.permanent_flag)\n+#define TREE_SET_PERMANENT(NODE) do { \\\n+  if (!ggc_p && current_obstack == &permanent_obstack) \\\n+    TREE_PERMANENT(NODE) = 1; \\\n+} while (0) \n \n /* In INTEGER_TYPE or ENUMERAL_TYPE nodes, means an unsigned type.\n    In FIELD_DECL nodes, means an unsigned bit field."}]}