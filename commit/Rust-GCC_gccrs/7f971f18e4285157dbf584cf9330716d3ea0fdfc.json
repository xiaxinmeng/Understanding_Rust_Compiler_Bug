{"sha": "7f971f18e4285157dbf584cf9330716d3ea0fdfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5NzFmMThlNDI4NTE1N2RiZjU4NGNmOTMzMDcxNmQzZWEwZmRmYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-02-18T19:39:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-02-18T19:39:03Z"}, "message": "codecvt.cc (write_utf16_code_point): Fix code to output surrogate pairs.\n\n\t* src/c++11/codecvt.cc (write_utf16_code_point): Fix code to output\n\tsurrogate pairs.\n\t(utf16_in): Pass mode argument to write_utf16_code_point.\n\t(codecvt<char16_t, char, mbstate_t>::do_in): Set mode according to\n\tnative byte order.\n\t* testsuite/22_locale/codecvt/char16_t.cc: New.\n\t* testsuite/22_locale/codecvt/in/wchar_t/1.cc: Fix typo.\n\nFrom-SVN: r220793", "tree": {"sha": "552df56ac69d2714a1f211411ed351a3110a1d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/552df56ac69d2714a1f211411ed351a3110a1d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f971f18e4285157dbf584cf9330716d3ea0fdfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f971f18e4285157dbf584cf9330716d3ea0fdfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f971f18e4285157dbf584cf9330716d3ea0fdfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f971f18e4285157dbf584cf9330716d3ea0fdfc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0ddb385f0fa0ae6b4b9a360d3dd42060e6b0e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ddb385f0fa0ae6b4b9a360d3dd42060e6b0e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ddb385f0fa0ae6b4b9a360d3dd42060e6b0e63"}], "stats": {"total": 125, "additions": 117, "deletions": 8}, "files": [{"sha": "fb9a4bd75625836095671e0a65a2b7d6208795dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7f971f18e4285157dbf584cf9330716d3ea0fdfc", "patch": "@@ -1,3 +1,13 @@\n+2015-02-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/codecvt.cc (write_utf16_code_point): Fix code to output\n+\tsurrogate pairs.\n+\t(utf16_in): Pass mode argument to write_utf16_code_point.\n+\t(codecvt<char16_t, char, mbstate_t>::do_in): Set mode according to\n+\tnative byte order.\n+\t* testsuite/22_locale/codecvt/char16_t.cc: New.\n+\t* testsuite/22_locale/codecvt/in/wchar_t/1.cc: Fix typo.\n+\n 2015-02-17  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "aebd3f349864ca3081d196d0d7af18e0bd6d8677", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=7f971f18e4285157dbf584cf9330716d3ea0fdfc", "patch": "@@ -295,13 +295,10 @@ namespace\n       {\n \t// Algorithm from http://www.unicode.org/faq/utf_bom.html#utf16-4\n \tconst char32_t LEAD_OFFSET = 0xD800 - (0x10000 >> 10);\n-\tconst char32_t SURROGATE_OFFSET = 0x10000 - (0xD800 << 10) - 0xDC00;\n \tchar16_t lead = LEAD_OFFSET + (codepoint >> 10);\n \tchar16_t trail = 0xDC00 + (codepoint & 0x3FF);\n-\tchar32_t utf16bytes = (lead << 10) + trail + SURROGATE_OFFSET;\n-\n-\tto.next[0] = adjust_byte_order(utf16bytes >> 16, mode);\n-\tto.next[1] = adjust_byte_order(utf16bytes & 0xFFFF, mode);\n+\tto.next[0] = adjust_byte_order(lead, mode);\n+\tto.next[1] = adjust_byte_order(trail, mode);\n \tto.next += 2;\n \treturn true;\n       }\n@@ -400,7 +397,7 @@ namespace\n \t  return codecvt_base::partial;\n \tif (codepoint > maxcode)\n \t  return codecvt_base::error;\n-\tif (!write_utf16_code_point(to, codepoint, {}))\n+\tif (!write_utf16_code_point(to, codepoint, mode))\n \t  {\n \t    from.next = first;\n \t    return codecvt_base::partial;\n@@ -618,7 +615,12 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n {\n   range<const char> from{ __from, __from_end };\n   range<char16_t> to{ __to, __to_end };\n-  auto res = utf16_in(from, to);\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+  codecvt_mode mode = {};\n+#else\n+  codecvt_mode mode = little_endian;\n+#endif\n+  auto res = utf16_in(from, to, max_code_point, mode);\n   __from_next = from.next;\n   __to_next = to.next;\n   return res;"}, {"sha": "14477f5b711c4f24e77c4501b633294eb7744243", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char16_t.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc?ref=7f971f18e4285157dbf584cf9330716d3ea0fdfc", "patch": "@@ -0,0 +1,97 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+// [locale.codecvt], C++11 22.4.1.4.  specialization.\n+\n+#include <locale>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  typedef codecvt<char16_t, char, mbstate_t> codecvt_c16;\n+  locale loc_c = locale::classic();\n+  VERIFY(has_facet<codecvt_c16>(loc_c));\n+  const codecvt_c16* const cvt = &use_facet<codecvt_c16>(loc_c);\n+\n+  VERIFY(!cvt->always_noconv());\n+  VERIFY(cvt->max_length() == 3);\n+  VERIFY(cvt->encoding() == 0);\n+\n+  const char u8dat[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    u8\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    u8\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    u8\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char* const u8dat_end = std::end(u8dat);\n+\n+  const char16_t u16dat[] = u\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    u\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    u\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    u\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char16_t* const u16dat_end = std::end(u16dat);\n+\n+  {\n+    const size_t len = u16dat_end - u16dat + 1;\n+    char16_t* const buffer = new char16_t[len];\n+    char16_t* const buffer_end = buffer + len;\n+\n+    const char* from_next;\n+    char16_t* to_next;\n+\n+    codecvt_c16::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->in(state01, u8dat, u8dat_end, from_next,\n+                                       buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u8dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u16dat, sizeof(u16dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+\n+  {\n+    const size_t len = u8dat_end - u8dat + 1;\n+    char* const buffer = new char[len];\n+    char* const buffer_end = buffer + len;\n+\n+    const char16_t* from_next;\n+    char* to_next;\n+\n+    codecvt_c16::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->out(state01, u16dat, u16dat_end,\n+from_next,\n+                                        buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u16dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u8dat, sizeof(u8dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "ff0b657e88cb7edcf14a33f562a622f054bc4beb", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f971f18e4285157dbf584cf9330716d3ea0fdfc/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc?ref=7f971f18e4285157dbf584cf9330716d3ea0fdfc", "patch": "@@ -25,7 +25,7 @@\n \n // Need to explicitly set the state(mbstate_t) to zero.\n // How to do this is not specified by the ISO C99 standard, so we\n-// might need to add some operators to make the intuiative case\n+// might need to add some operators to make the intuitive case\n // work:\n //   w_codecvt::state_type state00;\n //   state00 = 0;  "}]}