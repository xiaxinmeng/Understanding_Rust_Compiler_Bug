{"sha": "9111760356ce908060b66b11d00ac0ee870e9276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExMTc2MDM1NmNlOTA4MDYwYjY2YjExZDAwYWMwZWU4NzBlOTI3Ng==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2019-05-23T18:24:22Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2019-05-23T18:24:22Z"}, "message": "rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Add OPTION_MASK_PCREL.\n\n2019-05-22  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Michael Meissner  <meissner@linux.ibm.com>\n\t    Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Add\n\tOPTION_MASK_PCREL.\n\t(POWERPC_MASKS): Add OPTION_MASK_PCREL.\n\t* config/rs6000/rs6000-protos.h (rs6000_pcrel_p): New prototype.\n\t(rs6000_fndecl_pcrel_p): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Report\n\terror if -mpcrel is requested without -mcpu=future.\n\t(rs6000_opt_masks): Add entry for pcrel.\n\t(rs6000_fndecl_pcrel_p): New function.\n\t(rs6000_pcrel_p): Likewise.\n\t* config/rs6000/rs6000.opt (mpcrel): New option.\n\t* doc/invoke.texi: Document -mpcrel and -mno-pcrel.\n\n\nCo-Authored-By: Michael Meissner <meissner@linux.ibm.com>\nCo-Authored-By: Segher Boessenkool <segher@kernel.crashing.org>\n\nFrom-SVN: r271575", "tree": {"sha": "ec28d0553217584b918d0b41e36e974d2bf84f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec28d0553217584b918d0b41e36e974d2bf84f32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9111760356ce908060b66b11d00ac0ee870e9276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9111760356ce908060b66b11d00ac0ee870e9276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9111760356ce908060b66b11d00ac0ee870e9276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9111760356ce908060b66b11d00ac0ee870e9276/comments", "author": null, "committer": null, "parents": [{"sha": "0ce91914ad6c0412be53e4e4f69bdeb43d0a58ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce91914ad6c0412be53e4e4f69bdeb43d0a58ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce91914ad6c0412be53e4e4f69bdeb43d0a58ea"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "3f183fb14277649cb0d9114e0ac71443624b37bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9111760356ce908060b66b11d00ac0ee870e9276", "patch": "@@ -1,3 +1,20 @@\n+2019-05-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\t    Michael Meissner  <meissner@linux.ibm.com>\n+\t    Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Add\n+\tOPTION_MASK_PCREL.\n+\t(POWERPC_MASKS): Add OPTION_MASK_PCREL.\n+\t* config/rs6000/rs6000-protos.h (rs6000_pcrel_p): New prototype.\n+\t(rs6000_fndecl_pcrel_p): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Report\n+\terror if -mpcrel is requested without -mcpu=future.\n+\t(rs6000_opt_masks): Add entry for pcrel.\n+\t(rs6000_fndecl_pcrel_p): New function.\n+\t(rs6000_pcrel_p): Likewise.\n+\t* config/rs6000/rs6000.opt (mpcrel): New option.\n+\t* doc/invoke.texi: Document -mpcrel and -mno-pcrel.\n+\n 2019-05-23  Jan Hubicka  <jh@suse.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "64292c923e63bfb48dccf67fea8a19f99ecfadbc", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=9111760356ce908060b66b11d00ac0ee870e9276", "patch": "@@ -74,7 +74,8 @@\n \n /* Support for a future processor's features.  */\n #define ISA_FUTURE_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n-\t\t\t\t | OPTION_MASK_FUTURE)\n+\t\t\t\t | OPTION_MASK_FUTURE\t\t\t\\\n+\t\t\t\t | OPTION_MASK_PCREL)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n@@ -129,6 +130,7 @@\n \t\t\t\t | OPTION_MASK_P9_MINMAX\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_PCREL\t\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTB\t\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n \t\t\t\t | OPTION_MASK_POWERPC64\t\t\\"}, {"sha": "18ece005a9651d0c4bac10af62d1788e90bf4f4d", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=9111760356ce908060b66b11d00ac0ee870e9276", "patch": "@@ -152,6 +152,8 @@ extern rtx rs6000_machopic_legitimize_pic_address (rtx, machine_mode,\n extern rtx rs6000_allocate_stack_temp (machine_mode, bool, bool);\n extern align_flags rs6000_loop_align (rtx);\n extern void rs6000_split_logical (rtx [], enum rtx_code, bool, bool, bool);\n+extern bool rs6000_pcrel_p (struct function *);\n+extern bool rs6000_fndecl_pcrel_p (const_tree);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "7a2e43fd72a33c0f5316b627ee88db10f3eaaa69", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9111760356ce908060b66b11d00ac0ee870e9276", "patch": "@@ -4296,6 +4296,15 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n+  /* -mpcrel requires the prefixed load/store support on FUTURE systems.  */\n+  if (!TARGET_FUTURE && TARGET_PCREL)\n+    {\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_PCREL) != 0)\n+\terror (\"%qs requires %qs\", \"-mpcrel\", \"-mcpu=future\");\n+\n+      rs6000_isa_flags &= ~OPTION_MASK_PCREL;\n+    }\n+\n   /* Print the options after updating the defaults.  */\n   if (TARGET_DEBUG_REG || TARGET_DEBUG_TARGET)\n     rs6000_print_isa_options (stderr, 0, \"after defaults\", rs6000_isa_flags);\n@@ -36274,6 +36283,7 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"modulo\",\t\t\tOPTION_MASK_MODULO,\t\tfalse, true  },\n   { \"mulhw\",\t\t\tOPTION_MASK_MULHW,\t\tfalse, true  },\n   { \"multiple\",\t\t\tOPTION_MASK_MULTIPLE,\t\tfalse, true  },\n+  { \"pcrel\",\t\t\tOPTION_MASK_PCREL,\t\tfalse, true  },\n   { \"popcntb\",\t\t\tOPTION_MASK_POPCNTB,\t\tfalse, true  },\n   { \"popcntd\",\t\t\tOPTION_MASK_POPCNTD,\t\tfalse, true  },\n   { \"power8-fusion\",\t\tOPTION_MASK_P8_FUSION,\t\tfalse, true  },\n@@ -38113,6 +38123,34 @@ rs6000_save_toc_in_prologue_p (void)\n   return (cfun && cfun->machine && cfun->machine->save_toc_in_prologue);\n }\n \n+/* Return whether we should generate PC-relative code for FNDECL.  */\n+bool\n+rs6000_fndecl_pcrel_p (const_tree fndecl)\n+{\n+  if (DEFAULT_ABI != ABI_ELFv2)\n+    return false;\n+\n+  struct cl_target_option *opts = target_opts_for_fn (fndecl);\n+\n+  return ((opts->x_rs6000_isa_flags & OPTION_MASK_PCREL) != 0\n+\t  && TARGET_CMODEL == CMODEL_MEDIUM);\n+}\n+\n+/* Return whether we should generate PC-relative code for *FN.  */\n+bool\n+rs6000_pcrel_p (struct function *fn)\n+{\n+  if (DEFAULT_ABI != ABI_ELFv2)\n+    return false;\n+\n+  /* Optimize usual case.  */\n+  if (fn == cfun)\n+    return ((rs6000_isa_flags & OPTION_MASK_PCREL) != 0\n+\t    && TARGET_CMODEL == CMODEL_MEDIUM);\n+\n+  return rs6000_fndecl_pcrel_p (fn->decl);\n+}\n+\n #ifdef HAVE_GAS_HIDDEN\n # define USE_HIDDEN_LINKONCE 1\n #else"}, {"sha": "43b04834746b567a694334e68efc981317b28999", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=9111760356ce908060b66b11d00ac0ee870e9276", "patch": "@@ -573,3 +573,7 @@ Target Undocumented Var(rs6000_speculate_indirect_jumps) Init(1) Save\n mfuture\n Target Report Mask(FUTURE) Var(rs6000_isa_flags)\n Use instructions for a future architecture.\n+\n+mpcrel\n+Target Report Mask(PCREL) Var(rs6000_isa_flags)\n+Generate (do not generate) pc-relative memory addressing."}, {"sha": "4964cc41ba388450be8403a9d4016797afe48225", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9111760356ce908060b66b11d00ac0ee870e9276/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9111760356ce908060b66b11d00ac0ee870e9276", "patch": "@@ -1121,7 +1121,7 @@ See RS/6000 and PowerPC Options.\n -mfloat128  -mno-float128  -mfloat128-hardware  -mno-float128-hardware @gol\n -mgnu-attribute  -mno-gnu-attribute @gol\n -mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{reg} @gol\n--mstack-protector-guard-offset=@var{offset}}\n+-mstack-protector-guard-offset=@var{offset} -mpcrel -mno-pcrel}\n \n @emph{RX Options}\n @gccoptlist{-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu@gol\n@@ -25095,6 +25095,13 @@ which register to use as base register for reading the canary, and from what\n offset from that base register. The default for those is as specified in the\n relevant ABI.  @option{-mstack-protector-guard-symbol=@var{symbol}} overrides\n the offset with a symbol reference to a canary in the TLS block.\n+\n+@item -mpcrel\n+@itemx -mno-pcrel\n+@opindex mpcrel\n+@opindex mno-pcrel\n+Generate (do not generate) pc-relative addressing when the option\n+@option{-mcpu=future} is used.\n @end table\n \n @node RX Options"}]}