{"sha": "84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhYjhiOGFkNTFhMzM5ZDA1YTY1NzU5YTRmNjAzYjAxZjBhYTgwYQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-12-21T09:20:12Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-12-21T09:20:12Z"}, "message": "mmcu: New folder for compile-tests with -mmcu=.\n\n\t* gcc.target/avr/mmcu: New folder for compile-tests with -mmcu=.\n\t* gcc.target/avr/mmcu/avr-mmcu.exp: New file.\n\t* gcc.target/avr/pr58545.c: Move to gcc.target/avr/mmcu.\n\t* gcc.target/avr/tiny-caller-save.c: Dito.\n\t* gcc.target/avr/tiny-memx.c: Dito.\n\nFrom-SVN: r243840", "tree": {"sha": "8f8f67c1dc8b06efee089a0503bc36b4f0946560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f8f67c1dc8b06efee089a0503bc36b4f0946560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/comments", "author": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "815ee97417d55b5cdf5ee73397a9b9a747bd3a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815ee97417d55b5cdf5ee73397a9b9a747bd3a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815ee97417d55b5cdf5ee73397a9b9a747bd3a0a"}], "stats": {"total": 115, "additions": 112, "deletions": 3}, "files": [{"sha": "4f5b6ae4702944f6c4f87b25978ac526f72cdfae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "patch": "@@ -1,4 +1,12 @@\n-2016-12-22  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n+2016-12-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* gcc.target/avr/mmcu: New folder for compile-tests with -mmcu=.\n+\t* gcc.target/avr/mmcu/avr-mmcu.exp: New file.\n+\t* gcc.target/avr/pr58545.c: Move to gcc.target/avr/mmcu.\n+\t* gcc.target/avr/tiny-caller-save.c: Dito.\n+\t* gcc.target/avr/tiny-memx.c: Dito.\n+\n+2016-12-21  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n \n \t* gcc.dg/max.c: New Testcase.\n \t* gcc.dg/min.c: New Testcase."}, {"sha": "b1e3a9c5048db64b527241cc38bd24e9c37c83d4", "filename": "gcc/testsuite/gcc.target/avr/mmcu/avr-mmcu.exp", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Favr-mmcu.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Favr-mmcu.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Favr-mmcu.exp?ref=84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "patch": "@@ -0,0 +1,101 @@\n+# Copyright (C) 2008-2016 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# This folder contains compile tests that set dg-options to\n+# some -mmcu=<MCU> which might collide with the MCU set by the\n+# target board.  This in turn will fail the test case due to\n+# \"error: specified option '-mmcu' more than once\".\n+#\n+# Hence we filter out -mmcu= from cflags and --tool_opts before\n+# running the tests in this folder.\n+\n+# Exit immediately if this isn't an AVR target.\n+if ![istarget avr-*-*] then {\n+  return\n+}\n+\n+# Return the saved values of the variable_list\n+proc save_variables { variable_list } {\n+    set saved_variable { }\n+\n+    foreach variable $variable_list {\n+\tupvar 1 $variable  var\n+\n+\tset save($variable) $var\n+\tlappend saved_variable $save($variable)\n+    }\n+    return $saved_variable\n+}\n+\n+# Restore the values of the variable_list\n+proc restore_variables { variable_list saved_variable } {\n+    foreach variable $variable_list value $saved_variable {\n+\tupvar 1 $variable  var\n+\tset var $value\n+    }\n+}\n+\n+# Filter out -mmcu= options\n+proc filter_out_mmcu { options } {\n+    set reduced {}\n+    \n+    foreach option [ split $options ] {\n+\tif { ![ regexp \"\\-mmcu=.*\" $option ] } {\n+\t    lappend reduced $option\n+\t}\n+    }\n+\n+    return [ join $reduced \" \" ]\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# If no --tool_opts were specified, use empty ones.\n+if ![info exists TOOL_OPTIONS] then {\n+    set TOOL_OPTIONS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Save\n+set variablelist [ list TOOL_OPTIONS board_info([target_info name],cflags) ]\n+set saved_value [ save_variables $variablelist ]\n+\n+# Filter-out -mmcu=\n+set TOOL_OPTIONS [ filter_out_mmcu $TOOL_OPTIONS ]\n+set board_info([ target_info name ],cflags) [ filter_out_mmcu $board_info([ target_info name ],cflags) ] \n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{\\[cCS\\],cpp}]] \\\n+    \"\" $DEFAULT_CFLAGS\n+\n+# Restore\n+restore_variables $variablelist $saved_value\n+\n+set dg_runtest_extra_prunes \"\"\n+\n+# All done.\n+dg-finish"}, {"sha": "d1b8461f7cf4ed370c339e5727f32b999a895e7c", "filename": "gcc/testsuite/gcc.target/avr/mmcu/pr58545.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Fpr58545.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Fpr58545.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Fpr58545.c?ref=84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "previous_filename": "gcc/testsuite/gcc.target/avr/pr58545.c"}, {"sha": "63fad3a1205d50787d09d9cb5d9412b08d13a697", "filename": "gcc/testsuite/gcc.target/avr/mmcu/tiny-caller-save.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Ftiny-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Ftiny-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Ftiny-caller-save.c?ref=84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target avr_tiny } } */\n+/* { dg-do compile } */\n /* { dg-options \"-mmcu=avrtiny -gdwarf -Os\" } */\n \n /* This is a stripped down piece of libgcc2.c that triggerd an ICE for avr with", "previous_filename": "gcc/testsuite/gcc.target/avr/tiny-caller-save.c"}, {"sha": "cdda86b14bfbfb3604dd9e5d9b26cbd635587538", "filename": "gcc/testsuite/gcc.target/avr/mmcu/tiny-memx.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Ftiny-memx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ab8b8ad51a339d05a65759a4f603b01f0aa80a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Ftiny-memx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fmmcu%2Ftiny-memx.c?ref=84ab8b8ad51a339d05a65759a4f603b01f0aa80a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target avr_tiny } } */\n+/* { dg-do compile } */\n /* { dg-options \"-mmcu=avrtiny\" } */\n \n const __memx char ascmonth[] = \"Jan\"; /* { dg-error \"not supported\" } */", "previous_filename": "gcc/testsuite/gcc.target/avr/tiny-memx.c"}]}