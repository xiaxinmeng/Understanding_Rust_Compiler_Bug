{"sha": "924af4dc3e6a81db5005755819350c7d5ea32a27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI0YWY0ZGMzZTZhODFkYjUwMDU3NTU4MTkzNTBjN2Q1ZWEzMmEyNw==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-05-07T14:41:17Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-05-07T14:41:17Z"}, "message": "AArch64 testcases for ANDS instruction\n\nFrom-SVN: r198684", "tree": {"sha": "16bf1fa54a17b90dbadfef630a19a98576d6ebbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16bf1fa54a17b90dbadfef630a19a98576d6ebbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/924af4dc3e6a81db5005755819350c7d5ea32a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924af4dc3e6a81db5005755819350c7d5ea32a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924af4dc3e6a81db5005755819350c7d5ea32a27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924af4dc3e6a81db5005755819350c7d5ea32a27/comments", "author": null, "committer": null, "parents": [{"sha": "8a5800b82f04303c1a6ed9094885ba79dfc4378a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5800b82f04303c1a6ed9094885ba79dfc4378a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5800b82f04303c1a6ed9094885ba79dfc4378a"}], "stats": {"total": 313, "additions": 313, "deletions": 0}, "files": [{"sha": "4b5a3570e02cc33a040f85a6e82c8dc1b24ba926", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924af4dc3e6a81db5005755819350c7d5ea32a27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924af4dc3e6a81db5005755819350c7d5ea32a27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=924af4dc3e6a81db5005755819350c7d5ea32a27", "patch": "@@ -1,3 +1,8 @@\n+2013-05-07  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/ands_1.c: New test. \n+\t* gcc.target/aarch64/ands_2.c: Likewise\n+\n 2013-05-07  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports.exp (check_effective_target_hw): New"}, {"sha": "aace0b06446a5c9a84a8ec46f1d3875b76a7bd2d", "filename": "gcc/testsuite/gcc.target/aarch64/ands_1.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924af4dc3e6a81db5005755819350c7d5ea32a27/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924af4dc3e6a81db5005755819350c7d5ea32a27/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_1.c?ref=924af4dc3e6a81db5005755819350c7d5ea32a27", "patch": "@@ -0,0 +1,151 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+int\n+ands_si_test1 (int a, int b, int c)\n+{\n+  int d = a & b;\n+\n+  /* { dg-final { scan-assembler-times \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+ands_si_test2 (int a, int b, int c)\n+{\n+  int d = a & 0xff;\n+\n+  /* { dg-final { scan-assembler \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, 255\" } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+ands_si_test3 (int a, int b, int c)\n+{\n+  int d = a & (b << 3);\n+\n+  /* { dg-final { scan-assembler \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+typedef long long s64;\n+\n+s64\n+ands_di_test1 (s64 a, s64 b, s64 c)\n+{\n+  s64 d = a & b;\n+\n+  /* { dg-final { scan-assembler-times \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+s64\n+ands_di_test2 (s64 a, s64 b, s64 c)\n+{\n+  s64 d = a & 0xff;\n+\n+  /* { dg-final { scan-assembler \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, 255\" } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+s64\n+ands_di_test3 (s64 a, s64 b, s64 c)\n+{\n+  s64 d = a & (b << 3);\n+\n+  /* { dg-final { scan-assembler \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n+  if (d == 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+main ()\n+{\n+  int x;\n+  s64 y;\n+\n+  x = ands_si_test1 (29, 4, 5);\n+  if (x != 13)\n+    abort ();\n+\n+  x = ands_si_test1 (5, 2, 20);\n+  if (x != 25)\n+    abort ();\n+\n+  x = ands_si_test2 (29, 4, 5);\n+  if (x != 38)\n+    abort ();\n+\n+  x = ands_si_test2 (1024, 2, 20);\n+  if (x != 1044)\n+    abort ();\n+\n+  x = ands_si_test3 (35, 4, 5);\n+  if (x != 41)\n+    abort ();\n+\n+  x = ands_si_test3 (5, 2, 20);\n+  if (x != 25)\n+    abort ();\n+\n+  y = ands_di_test1 (0x130000029ll,\n+                     0x320000004ll,\n+                     0x505050505ll);\n+\n+  if (y != ((0x130000029ll & 0x320000004ll) + 0x320000004ll + 0x505050505ll))\n+    abort ();\n+\n+  y = ands_di_test1 (0x5000500050005ll,\n+                     0x2111211121112ll,\n+                     0x0000000002020ll);\n+  if (y != 0x5000500052025ll)\n+    abort ();\n+\n+  y = ands_di_test2 (0x130000029ll,\n+                     0x320000004ll,\n+                     0x505050505ll);\n+  if (y != ((0x130000029ll & 0xff) + 0x320000004ll + 0x505050505ll))\n+    abort ();\n+\n+  y = ands_di_test2 (0x130002900ll,\n+                     0x320000004ll,\n+                     0x505050505ll);\n+  if (y != (0x130002900ll + 0x505050505ll))\n+    abort ();\n+\n+  y = ands_di_test3 (0x130000029ll,\n+                     0x064000008ll,\n+                     0x505050505ll);\n+  if (y != ((0x130000029ll & (0x064000008ll << 3))\n+\t    + 0x064000008ll + 0x505050505ll))\n+    abort ();\n+\n+  y = ands_di_test3 (0x130002900ll,\n+                     0x088000008ll,\n+                     0x505050505ll);\n+  if (y != (0x130002900ll + 0x505050505ll))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1c5b8213e2175d788bae6a624734bc4c95cd8b5c", "filename": "gcc/testsuite/gcc.target/aarch64/ands_2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924af4dc3e6a81db5005755819350c7d5ea32a27/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924af4dc3e6a81db5005755819350c7d5ea32a27/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fands_2.c?ref=924af4dc3e6a81db5005755819350c7d5ea32a27", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+int\n+ands_si_test1 (int a, int b, int c)\n+{\n+  int d = a & b;\n+\n+  /* { dg-final { scan-assembler-not \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" } } */\n+  /* { dg-final { scan-assembler-times \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+ands_si_test2 (int a, int b, int c)\n+{\n+  int d = a & 0x99999999;\n+\n+  /* { dg-final { scan-assembler-not \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, -1717986919\" } } */\n+  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, -1717986919\" } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+ands_si_test3 (int a, int b, int c)\n+{\n+  int d = a & (b << 3);\n+\n+  /* { dg-final { scan-assembler-not \"ands\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n+  /* { dg-final { scan-assembler \"and\\tw\\[0-9\\]+, w\\[0-9\\]+, w\\[0-9\\]+, lsl 3\" } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+typedef long long s64;\n+\n+s64\n+ands_di_test1 (s64 a, s64 b, s64 c)\n+{\n+  s64 d = a & b;\n+\n+  /* { dg-final { scan-assembler-not \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" } } */\n+  /* { dg-final { scan-assembler-times \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+s64\n+ands_di_test2 (s64 a, s64 b, s64 c)\n+{\n+  s64 d = a & 0xaaaaaaaaaaaaaaaall;\n+\n+  /* { dg-final { scan-assembler-not \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, -6148914691236517206\" } } */\n+  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, -6148914691236517206\" } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+s64\n+ands_di_test3 (s64 a, s64 b, s64 c)\n+{\n+  s64 d = a & (b << 3);\n+\n+  /* { dg-final { scan-assembler-not \"ands\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n+  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, lsl 3\" } } */\n+  if (d <= 0)\n+    return a + c;\n+  else\n+    return b + d + c;\n+}\n+\n+int\n+main ()\n+{\n+  int x;\n+  s64 y;\n+\n+  x = ands_si_test1 (29, 4, 5);\n+  if (x != 13)\n+    abort ();\n+\n+  x = ands_si_test1 (5, 2, 20);\n+  if (x != 25)\n+    abort ();\n+\n+  x = ands_si_test2 (29, 4, 5);\n+  if (x != 34)\n+    abort ();\n+\n+  x = ands_si_test2 (1024, 2, 20);\n+  if (x != 1044)\n+    abort ();\n+\n+  x = ands_si_test3 (35, 4, 5);\n+  if (x != 41)\n+    abort ();\n+\n+  x = ands_si_test3 (5, 2, 20);\n+  if (x != 25)\n+    abort ();\n+\n+  y = ands_di_test1 (0x130000029ll,\n+                     0x320000004ll,\n+                     0x505050505ll);\n+\n+  if (y != ((0x130000029ll & 0x320000004ll) + 0x320000004ll + 0x505050505ll))\n+    abort ();\n+\n+  y = ands_di_test1 (0x5000500050005ll,\n+                     0x2111211121112ll,\n+                     0x0000000002020ll);\n+  if (y != 0x5000500052025ll)\n+    abort ();\n+\n+  y = ands_di_test2 (0x130000029ll,\n+                     0x320000004ll,\n+                     0x505050505ll);\n+  if (y != ((0x130000029ll & 0xaaaaaaaaaaaaaaaall) + 0x320000004ll + 0x505050505ll))\n+    abort ();\n+\n+  y = ands_di_test2 (0x540004100ll,\n+                     0x320000004ll,\n+                     0x805050205ll);\n+  if (y != (0x540004100ll + 0x805050205ll))\n+    abort ();\n+\n+  y = ands_di_test3 (0x130000029ll,\n+                     0x064000008ll,\n+                     0x505050505ll);\n+  if (y != ((0x130000029ll & (0x064000008ll << 3))\n+\t    + 0x064000008ll + 0x505050505ll))\n+    abort ();\n+\n+  y = ands_di_test3 (0x130002900ll,\n+                     0x088000008ll,\n+                     0x505050505ll);\n+  if (y != (0x130002900ll + 0x505050505ll))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}