{"sha": "d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "node_id": "C_kwDOANBUbNoAKGQ3NGM0YzZhMWI0OTU2YjVjZDliMmE3NzBiYjcyNjE4MzZmYTEyODk", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-04-11T22:00:44Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-04-11T22:01:25Z"}, "message": "rs6000: Handle pcrel sibcalls to longcall functions [PR104894]\n\nBefore PCREL in POWER10, we were not allowed to perform sibcalls to longcall\nfunctions since callee's return would skip the TOC restore in the caller.\nHowever, with PCREL we can now safely perform a sibling call to longcall\nfunctions.  The problem with the current code is that pcrel sibcall\nbranches to a PLT stub label even though -fno-plt was used.  The solution\nhere is to check for a pcrel longcall and emit an inline plt stub in\nthat case.\n\n2022-04-11  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/104894\n\t* config/rs6000/rs6000.cc (rs6000_sibcall_aix): Handle pcrel sibcalls\n\tto longcall functions.\n\ngcc/testsuite/\n\tPR target/104894\n\t* gcc.target/powerpc/pr104894.c: New test.\n\t* gcc.target/powerpc/pr104894-2.c: New test.", "tree": {"sha": "f1fbfa0ae400258d99cfb9ea5aabbc5a5484a08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1fbfa0ae400258d99cfb9ea5aabbc5a5484a08a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5e662590c46277549cd3ee1d367983bde7d19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5e662590c46277549cd3ee1d367983bde7d19e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5e662590c46277549cd3ee1d367983bde7d19e"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "bc619592b9e1e27d2a218d5a5d0cfe29ca7d6220", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "patch": "@@ -25678,11 +25678,20 @@ rs6000_sibcall_aix (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   rtx r12 = NULL_RTX;\n   rtx func_addr = func_desc;\n \n-  gcc_assert (INTVAL (cookie) == 0);\n-\n   if (global_tlsarg)\n     tlsarg = global_tlsarg;\n \n+  /* Handle longcall attributes.  */\n+  if (INTVAL (cookie) & CALL_LONG && SYMBOL_REF_P (func_desc))\n+    {\n+      /* PCREL can do a sibling call to a longcall function\n+\t because we don't need to restore the TOC register.  */\n+      gcc_assert (rs6000_pcrel_p ());\n+      func_desc = rs6000_longcall_ref (func_desc, tlsarg);\n+    }\n+  else\n+    gcc_assert (INTVAL (cookie) == 0);\n+\n   /* For ELFv2, r12 and CTR need to hold the function address\n      for an indirect call.  */\n   if (GET_CODE (func_desc) != SYMBOL_REF && DEFAULT_ABI == ABI_ELFv2)"}, {"sha": "d1a011ef4d9054d033906a77bb823dde103d0216", "filename": "gcc/testsuite/gcc.target/powerpc/pr104894-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104894-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104894-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104894-2.c?ref=d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/104894 */\n+/* { dg-require-effective-target powerpc_elfv2 } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10 -fno-plt\" } */\n+\n+/* Verify we do not ICE on the following test case and that we emit one\n+   indirect call and one indirect sibcall, with r12 and CTR containing\n+   the function addresses.  */\n+\n+void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mmtctr 12\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mbctrl\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mbctr\\M} 1 } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M} } } */"}, {"sha": "f46fe88168f0a2d229a34413dd7ab6631ee1beec", "filename": "gcc/testsuite/gcc.target/powerpc/pr104894.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104894.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104894.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104894.c?ref=d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/104894 */\n+/* { dg-require-effective-target powerpc_elfv2 } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10 -fno-plt\" } */\n+\n+/* Verify we do not ICE on the following test case and that we emit an\n+   indirect sibcall, with r12 and CTR containing the function address.  */\n+\n+void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mmtctr 12\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mbctr\\M} 1 } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mbctrl\\M} } } */"}]}