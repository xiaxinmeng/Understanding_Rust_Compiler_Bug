{"sha": "aa6113321ae9e0391e42fc6400d932bf35068432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2MTEzMzIxYWU5ZTAzOTFlNDJmYzY0MDBkOTMyYmYzNTA2ODQzMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T09:44:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T09:44:48Z"}, "message": "[multiple changes]\n\n2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Remove checks related to SPARK\n\tvolatile types.\n\t(Freeze_Type): Volatile types are now illegal in SPARK.\n\n2014-06-13  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add aspect Thread_Local_Storage.\n\t* gnat_rm.texi: Document aspect Thread_Local_Storage.\n\n2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_cat.adb (Validate_Static_Object_Name): A constant whose\n\tvalue is a temporary that renames an aggregate is legal in a\n\tpreelaborated unit. Illegalities, if any will be detected in\n\tthe aggregate components.\n\n2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads: Minor reformatting an comment expansion.\n\nFrom-SVN: r211613", "tree": {"sha": "706da10cdd46468f8280a815a4961d183a1c9bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/706da10cdd46468f8280a815a4961d183a1c9bd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa6113321ae9e0391e42fc6400d932bf35068432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6113321ae9e0391e42fc6400d932bf35068432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6113321ae9e0391e42fc6400d932bf35068432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6113321ae9e0391e42fc6400d932bf35068432/comments", "author": null, "committer": null, "parents": [{"sha": "5af638c8755a06886c68016348d76526d544681e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af638c8755a06886c68016348d76526d544681e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af638c8755a06886c68016348d76526d544681e"}], "stats": {"total": 106, "additions": 70, "deletions": 36}, "files": [{"sha": "65feacf365c0d9e4c1d6f499020a164e78abb637", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aa6113321ae9e0391e42fc6400d932bf35068432", "patch": "@@ -1,3 +1,25 @@\n+2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Remove checks related to SPARK\n+\tvolatile types.\n+\t(Freeze_Type): Volatile types are now illegal in SPARK.\n+\n+2014-06-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add aspect Thread_Local_Storage.\n+\t* gnat_rm.texi: Document aspect Thread_Local_Storage.\n+\n+2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_cat.adb (Validate_Static_Object_Name): A constant whose\n+\tvalue is a temporary that renames an aggregate is legal in a\n+\tpreelaborated unit. Illegalities, if any will be detected in\n+\tthe aggregate components.\n+\n+2014-06-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting an comment expansion.\n+\n 2014-06-13  Robert Dewar  <dewar@adacore.com>\n \n \t* back_end.ads, back_end.adb: Make_Id, Make_SC, Set_RND are moved to"}, {"sha": "d79566d13964334ef5a73ec2b9da958b787a52b4", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=aa6113321ae9e0391e42fc6400d932bf35068432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -583,6 +583,7 @@ package body Aspects is\n     Aspect_Suppress_Debug_Info          => Aspect_Suppress_Debug_Info,\n     Aspect_Synchronization              => Aspect_Synchronization,\n     Aspect_Test_Case                    => Aspect_Test_Case,\n+    Aspect_Thread_Local_Storage         => Aspect_Thread_Local_Storage,\n     Aspect_Type_Invariant               => Aspect_Invariant,\n     Aspect_Unchecked_Union              => Aspect_Unchecked_Union,\n     Aspect_Universal_Aliasing           => Aspect_Universal_Aliasing,"}, {"sha": "8199df9f39a066e05cdb43350bfa42314974842b", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=aa6113321ae9e0391e42fc6400d932bf35068432", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -183,6 +183,7 @@ package Aspects is\n       Aspect_Shared,                        -- GNAT (equivalent to Atomic)\n       Aspect_Simple_Storage_Pool_Type,      -- GNAT\n       Aspect_Suppress_Debug_Info,           -- GNAT\n+      Aspect_Thread_Local_Storage,          -- GNAT\n       Aspect_Unchecked_Union,\n       Aspect_Universal_Aliasing,            -- GNAT\n       Aspect_Unmodified,                    -- GNAT\n@@ -237,6 +238,7 @@ package Aspects is\n       Aspect_Simple_Storage_Pool      => True,\n       Aspect_Simple_Storage_Pool_Type => True,\n       Aspect_Suppress_Debug_Info      => True,\n+      Aspect_Thread_Local_Storage     => True,\n       Aspect_Test_Case                => True,\n       Aspect_Universal_Aliasing       => True,\n       Aspect_Universal_Data           => True,\n@@ -454,6 +456,7 @@ package Aspects is\n       Aspect_Stream_Size                  => Name_Stream_Size,\n       Aspect_Suppress                     => Name_Suppress,\n       Aspect_Suppress_Debug_Info          => Name_Suppress_Debug_Info,\n+      Aspect_Thread_Local_Storage         => Name_Thread_Local_Storage,\n       Aspect_Synchronization              => Name_Synchronization,\n       Aspect_Test_Case                    => Name_Test_Case,\n       Aspect_Type_Invariant               => Name_Type_Invariant,\n@@ -647,6 +650,7 @@ package Aspects is\n       Aspect_Stream_Size                  => Always_Delay,\n       Aspect_Suppress                     => Always_Delay,\n       Aspect_Suppress_Debug_Info          => Always_Delay,\n+      Aspect_Thread_Local_Storage         => Always_Delay,\n       Aspect_Type_Invariant               => Always_Delay,\n       Aspect_Unchecked_Union              => Always_Delay,\n       Aspect_Universal_Aliasing           => Always_Delay,"}, {"sha": "51b537bb93cd9fc0c723e8cd0bd36d5ffb65fba8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=aa6113321ae9e0391e42fc6400d932bf35068432", "patch": "@@ -4057,6 +4057,11 @@ package Einfo is\n --       types, is to legitimize code where Underlying_Type is applied to an\n --       entity which may or may not be a type, with the intent that if it is a\n --       type, its underlying type is taken.\n+--\n+--       Note also that the value of this attribute is interesting only after\n+--       the full view of the parent type has been processed. If the parent\n+--       type is declared in an enclosing package, the attribute will be non-\n+--       trivial only after the full view of the type has been analyzed.\n \n --    Universal_Aliasing (Flag216) [implementation base type only]\n --       Defined in all type entities. Set to direct the back-end to avoid"}, {"sha": "e1bfc9a3bbed0dead58a7d3d6a159eca546ebbc8", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=aa6113321ae9e0391e42fc6400d932bf35068432", "patch": "@@ -3355,38 +3355,6 @@ package body Freeze is\n             end if;\n          end if;\n \n-         --  The following checks are only relevant when SPARK_Mode is on as\n-         --  they are not standard Ada legality rules.\n-\n-         if SPARK_Mode = On then\n-\n-            --  Volatile types are not allowed in SPARK (SPARK RM C.6(1))\n-\n-            if Is_SPARK_Volatile (Rec) then\n-               Error_Msg_N (\"volatile type not allowed\", Rec);\n-\n-            --  A non-volatile record type cannot contain volatile components\n-            --  (SPARK RM C.6(2)). The check is performed at freeze point\n-            --  because the volatility status of the record type and its\n-            --  components is clearly known.\n-\n-            else\n-               Comp := First_Component (Rec);\n-               while Present (Comp) loop\n-                  if Comes_From_Source (Comp)\n-                    and then Is_SPARK_Volatile (Comp)\n-                  then\n-                     Error_Msg_Name_1 := Chars (Rec);\n-                     Error_Msg_N\n-                       (\"component & of non-volatile record type % cannot be \"\n-                        & \"volatile\", Comp);\n-                  end if;\n-\n-                  Next_Component (Comp);\n-               end loop;\n-            end if;\n-         end if;\n-\n          --  All done if not a full record definition\n \n          if Ekind (Rec) /= E_Record_Type then\n@@ -3718,6 +3686,14 @@ package body Freeze is\n          Analyze_Aspects_At_Freeze_Point (E);\n       end if;\n \n+      --  The following check is only relevant when SPARK_Mode is on as this\n+      --  is not a standard Ada legality rule. Volatile types are not allowed\n+      --  (SPARK RM C.6(1)).\n+\n+      if SPARK_Mode = On and then Is_SPARK_Volatile (E) then\n+         Error_Msg_N (\"volatile type not allowed\", E);\n+      end if;\n+\n       --  Here to freeze the entity\n \n       Set_Is_Frozen (E);"}, {"sha": "f7b1afa3bc76a86a4d876a0b63923822d2458cf5", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=aa6113321ae9e0391e42fc6400d932bf35068432", "patch": "@@ -304,6 +304,7 @@ Implementation Defined Aspects\n * Aspect SPARK_Mode::\n * Aspect Suppress_Debug_Info::\n * Aspect Test_Case::\n+* Aspect Thread_Local_Storage::\n * Aspect Universal_Aliasing::\n * Aspect Universal_Data::\n * Aspect Unmodified::\n@@ -7867,6 +7868,7 @@ clause.\n * Aspect SPARK_Mode::\n * Aspect Suppress_Debug_Info::\n * Aspect Test_Case::\n+* Aspect Thread_Local_Storage::\n * Aspect Universal_Aliasing::\n * Aspect Universal_Data::\n * Aspect Unmodified::\n@@ -8125,6 +8127,12 @@ This aspect is equivalent to pragma @code{Suppress_Debug_Info}.\n @noindent\n This aspect is equivalent to pragma @code{Test_Case}.\n \n+@node Aspect Thread_Local_Storage\n+@unnumberedsec Aspect Thread_Local_Storage\n+@findex Thread_Local_Storage\n+@noindent\n+This aspect is equivalent to pragma @code{Thread_Local_Storage}.\n+\n @node Aspect Universal_Aliasing\n @unnumberedsec Aspect Universal_Aliasing\n @findex Universal_Aliasing\n@@ -20834,6 +20842,7 @@ A complete description of the AIs may be found in\n @item @code{Suppress} @tab\n @item @code{Suppress_Debug_Info} @tab           -- GNAT\n @item @code{Test_Case} @tab                     -- GNAT\n+@item @code{Thread_Local_Storage} @tab          -- GNAT\n @item @code{Type_Invariant} @tab\n @item @code{Unchecked_Union} @tab\n @item @code{Universal_Aliasing} @tab            -- GNAT"}, {"sha": "a939cea7110c41b4e93113ea4dc3753fd8ab095c", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa6113321ae9e0391e42fc6400d932bf35068432/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=aa6113321ae9e0391e42fc6400d932bf35068432", "patch": "@@ -2048,7 +2048,8 @@ package body Sem_Cat is\n    ---------------------------------\n \n    procedure Validate_Static_Object_Name (N : Node_Id) is\n-      E : Entity_Id;\n+      E   : Entity_Id;\n+      Val : Node_Id;\n \n       function Is_Primary (N : Node_Id) return Boolean;\n       --  Determine whether node is syntactically a primary in an expression\n@@ -2151,7 +2152,8 @@ package body Sem_Cat is\n          elsif Ekind (Entity (N)) = E_Constant\n            and then not Is_Static_Expression (N)\n          then\n-            E := Entity (N);\n+            E   := Entity (N);\n+            Val := Constant_Value (E);\n \n             if Is_Internal_File_Name (Unit_File_Name (Get_Source_Unit (N)))\n               and then\n@@ -2169,6 +2171,21 @@ package body Sem_Cat is\n             then\n                null;\n \n+            --  If the value of the constant is a local variable that renames\n+            --  an aggregate, this is in itself legal. The aggregate may be\n+            --  expanded into a loop, but this does not affect preelaborability\n+            --  in itself. If some aggregate components are non-static, that is\n+            --  to say if they involve non static primaries, they will be\n+            --  flagged when analyzed.\n+\n+            elsif Present (Val)\n+              and then Is_Entity_Name (Val)\n+              and then Is_Array_Type (Etype (Val))\n+              and then not Comes_From_Source (Val)\n+             and then Nkind (Original_Node (Val)) = N_Aggregate\n+            then\n+               null;\n+\n             --  This is the error case\n \n             else"}]}