{"sha": "7629ae90d817ea1cb6928b1fe7036ef309ff094f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyOWFlOTBkODE3ZWExY2I2OTI4YjFmZTcwMzZlZjMwOWZmMDk0Zg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2017-04-25T16:46:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-25T16:46:34Z"}, "message": "re PR target/77728 (Miscompilation multiple vector iteration on ARM)\n\n\tPR target/77728\n\t* config/arm/arm.c: Include gimple.h.\n\t(aapcs_layout_arg): Emit -Wpsabi note if arm_needs_doubleword_align\n\treturns negative, increment ncrn only if it returned positive.\n\t(arm_needs_doubleword_align): Return int instead of bool,\n\tignore DECL_ALIGN of non-FIELD_DECL TYPE_FIELDS chain\n\tmembers, but if there is any such non-FIELD_DECL\n\t> PARM_BOUNDARY aligned decl, return -1 instead of false.\n\t(arm_function_arg): Emit -Wpsabi note if arm_needs_doubleword_align\n\treturns negative, increment nregs only if it returned positive.\n\t(arm_setup_incoming_varargs): Likewise.\n\t(arm_function_arg_boundary): Emit -Wpsabi note if\n\tarm_needs_doubleword_align returns negative, return\n\tDOUBLEWORD_ALIGNMENT only if it returned positive.\ntestsuite/\n\t* g++.dg/abi/pr77728-1.C: New test.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r247258", "tree": {"sha": "94d3e4a8dc12f918f503afccde68915c08a6e229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d3e4a8dc12f918f503afccde68915c08a6e229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7629ae90d817ea1cb6928b1fe7036ef309ff094f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7629ae90d817ea1cb6928b1fe7036ef309ff094f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7629ae90d817ea1cb6928b1fe7036ef309ff094f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7629ae90d817ea1cb6928b1fe7036ef309ff094f/comments", "author": null, "committer": null, "parents": [{"sha": "2ef42cf92408dadf44b5418b1c369bf0aa36d657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef42cf92408dadf44b5418b1c369bf0aa36d657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef42cf92408dadf44b5418b1c369bf0aa36d657"}], "stats": {"total": 273, "additions": 256, "deletions": 17}, "files": [{"sha": "7e22408297cd8a3d207511f448352727d05b7903", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7629ae90d817ea1cb6928b1fe7036ef309ff094f", "patch": "@@ -1,3 +1,21 @@\n+2017-04-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/77728\n+\t* config/arm/arm.c: Include gimple.h.\n+\t(aapcs_layout_arg): Emit -Wpsabi note if arm_needs_doubleword_align\n+\treturns negative, increment ncrn only if it returned positive.\n+\t(arm_needs_doubleword_align): Return int instead of bool,\n+\tignore DECL_ALIGN of non-FIELD_DECL TYPE_FIELDS chain\n+\tmembers, but if there is any such non-FIELD_DECL\n+\t> PARM_BOUNDARY aligned decl, return -1 instead of false.\n+\t(arm_function_arg): Emit -Wpsabi note if arm_needs_doubleword_align\n+\treturns negative, increment nregs only if it returned positive.\n+\t(arm_setup_incoming_varargs): Likewise.\n+\t(arm_function_arg_boundary): Emit -Wpsabi note if\n+\tarm_needs_doubleword_align returns negative, return\n+\tDOUBLEWORD_ALIGNMENT only if it returned positive.\n+\n 2017-04-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/80349"}, {"sha": "d719020dcde7efb50a56a856f052102f02979f52", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 61, "deletions": 17, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7629ae90d817ea1cb6928b1fe7036ef309ff094f", "patch": "@@ -64,6 +64,7 @@\n #include \"rtl-iter.h\"\n #include \"optabs-libfuncs.h\"\n #include \"gimplify.h\"\n+#include \"gimple.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -81,7 +82,7 @@ struct four_ints\n \n /* Forward function declarations.  */\n static bool arm_const_not_ok_for_debug_p (rtx);\n-static bool arm_needs_doubleword_align (machine_mode, const_tree);\n+static int arm_needs_doubleword_align (machine_mode, const_tree);\n static int arm_compute_static_chain_stack_bytes (void);\n static arm_stack_offsets *arm_get_frame_offsets (void);\n static void arm_add_gc_roots (void);\n@@ -6349,8 +6350,20 @@ aapcs_layout_arg (CUMULATIVE_ARGS *pcum, machine_mode mode,\n   /* C3 - For double-word aligned arguments, round the NCRN up to the\n      next even number.  */\n   ncrn = pcum->aapcs_ncrn;\n-  if ((ncrn & 1) && arm_needs_doubleword_align (mode, type))\n-    ncrn++;\n+  if (ncrn & 1)\n+    {\n+      int res = arm_needs_doubleword_align (mode, type);\n+      /* Only warn during RTL expansion of call stmts, otherwise we would\n+\t warn e.g. during gimplification even on functions that will be\n+\t always inlined, and we'd warn multiple times.  Don't warn when\n+\t called in expand_function_start either, as we warn instead in\n+\t arm_function_arg_boundary in that case.  */\n+      if (res < 0 && warn_psabi && currently_expanding_gimple_stmt)\n+\tinform (input_location, \"parameter passing for argument of type \"\n+\t\t\"%qT changed in GCC 7.1\", type);\n+      else if (res > 0)\n+\tncrn++;\n+    }\n \n   nregs = ARM_NUM_REGS2(mode, type);\n \n@@ -6455,12 +6468,16 @@ arm_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n     }\n }\n \n-/* Return true if mode/type need doubleword alignment.  */\n-static bool\n+/* Return 1 if double word alignment is required for argument passing.\n+   Return -1 if double word alignment used to be required for argument\n+   passing before PR77728 ABI fix, but is not required anymore.\n+   Return 0 if double word alignment is not required and wasn't requried\n+   before either.  */\n+static int\n arm_needs_doubleword_align (machine_mode mode, const_tree type)\n {\n   if (!type)\n-    return PARM_BOUNDARY < GET_MODE_ALIGNMENT (mode);\n+    return GET_MODE_ALIGNMENT (mode) > PARM_BOUNDARY;\n \n   /* Scalar and vector types: Use natural alignment, i.e. of base type.  */\n   if (!AGGREGATE_TYPE_P (type))\n@@ -6470,12 +6487,21 @@ arm_needs_doubleword_align (machine_mode mode, const_tree type)\n   if (TREE_CODE (type) == ARRAY_TYPE)\n     return TYPE_ALIGN (TREE_TYPE (type)) > PARM_BOUNDARY;\n \n+  int ret = 0;\n   /* Record/aggregate types: Use greatest member alignment of any member.  */ \n   for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n     if (DECL_ALIGN (field) > PARM_BOUNDARY)\n-      return true;\n+      {\n+\tif (TREE_CODE (field) == FIELD_DECL)\n+\t  return 1;\n+\telse\n+\t  /* Before PR77728 fix, we were incorrectly considering also\n+\t     other aggregate fields, like VAR_DECLs, TYPE_DECLs etc.\n+\t     Make sure we can warn about that with -Wpsabi.  */\n+\t  ret = -1;\n+      }\n \n-  return false;\n+  return ret;\n }\n \n \n@@ -6532,10 +6558,15 @@ arm_function_arg (cumulative_args_t pcum_v, machine_mode mode,\n     }\n \n   /* Put doubleword aligned quantities in even register pairs.  */\n-  if (pcum->nregs & 1\n-      && ARM_DOUBLEWORD_ALIGN\n-      && arm_needs_doubleword_align (mode, type))\n-    pcum->nregs++;\n+  if ((pcum->nregs & 1) && ARM_DOUBLEWORD_ALIGN)\n+    {\n+      int res = arm_needs_doubleword_align (mode, type);\n+      if (res < 0 && warn_psabi)\n+\tinform (input_location, \"parameter passing for argument of type \"\n+\t\t\"%qT changed in GCC 7.1\", type);\n+      else if (res > 0)\n+\tpcum->nregs++;\n+    }\n \n   /* Only allow splitting an arg between regs and memory if all preceding\n      args were allocated to regs.  For args passed by reference we only count\n@@ -6554,9 +6585,15 @@ arm_function_arg (cumulative_args_t pcum_v, machine_mode mode,\n static unsigned int\n arm_function_arg_boundary (machine_mode mode, const_tree type)\n {\n-  return (ARM_DOUBLEWORD_ALIGN && arm_needs_doubleword_align (mode, type)\n-\t  ? DOUBLEWORD_ALIGNMENT\n-\t  : PARM_BOUNDARY);\n+  if (!ARM_DOUBLEWORD_ALIGN)\n+    return PARM_BOUNDARY;\n+\n+  int res = arm_needs_doubleword_align (mode, type);\n+  if (res < 0 && warn_psabi)\n+    inform (input_location, \"parameter passing for argument of type %qT \"\n+\t    \"changed in GCC 7.1\", type);\n+\n+  return res > 0 ? DOUBLEWORD_ALIGNMENT : PARM_BOUNDARY;\n }\n \n static int\n@@ -26516,8 +26553,15 @@ arm_setup_incoming_varargs (cumulative_args_t pcum_v,\n   if (pcum->pcs_variant <= ARM_PCS_AAPCS_LOCAL)\n     {\n       nregs = pcum->aapcs_ncrn;\n-      if ((nregs & 1) && arm_needs_doubleword_align (mode, type))\n-\tnregs++;\n+      if (nregs & 1)\n+\t{\n+\t  int res = arm_needs_doubleword_align (mode, type);\n+\t  if (res < 0 && warn_psabi)\n+\t    inform (input_location, \"parameter passing for argument of \"\n+\t\t    \"type %qT changed in GCC 7.1\", type);\n+\t  else if (res > 0)\n+\t    nregs++;\n+\t}\n     }\n   else\n     nregs = pcum->nregs;"}, {"sha": "cd4d1007f7f9ce8c6460774e6800bf633c6880e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7629ae90d817ea1cb6928b1fe7036ef309ff094f", "patch": "@@ -1,3 +1,9 @@\n+2017-04-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/77728\n+\t* g++.dg/abi/pr77728-1.C: New test.\n+\n 2017-04-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/80349"}, {"sha": "05f08c902f43b177c22f85958388d9d5ebb5cf3a", "filename": "gcc/testsuite/g++.dg/abi/pr77728-1.C", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7629ae90d817ea1cb6928b1fe7036ef309ff094f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr77728-1.C?ref=7629ae90d817ea1cb6928b1fe7036ef309ff094f", "patch": "@@ -0,0 +1,171 @@\n+// { dg-do compile { target arm_eabi } }\n+// { dg-options \"-Wpsabi\" }\n+\n+#include <stdarg.h>\n+\n+template <int N>\n+struct A { double p; };\n+\n+A<0> v;\n+\n+template <int N>\n+struct B\n+{\n+  typedef A<N> T;\n+  int i, j;\n+};\n+\n+struct C : public B<0> {};\n+struct D {};\n+struct E : public D, C {};\n+struct F : public B<1> {};\n+struct G : public F { static double y; };\n+struct H : public G {};\n+struct I : public D { long long z; };\n+struct J : public D { static double z; int i, j; };\n+\n+template <int N>\n+struct K : public D { typedef A<N> T; int i, j; };\n+\n+struct L { static double h; int i, j; };\n+\n+int\n+fn1 (int a, B<0> b)\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+{\n+  return a + b.i;\n+}\n+\n+int\n+fn2 (int a, B<1> b)\n+{\n+  return a + b.i;\n+}\n+\n+int\n+fn3 (int a, L b)\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+{\n+  return a + b.i;\n+}\n+\n+int\n+fn4 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, B<0> n, ...)\n+// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn5 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, B<1> n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn6 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, C n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn7 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, E n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn8 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, H n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn9 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, I n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn10 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, J n, ...)\n+// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn11 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, K<0> n, ...)\n+// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+int\n+fn12 (int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l, int m, K<2> n, ...)\n+{\n+  va_list ap;\n+  va_start (ap, n);\n+  int x = va_arg (ap, int);\n+  va_end (ap);\n+  return x;\n+}\n+\n+void\n+test ()\n+{\n+  static B<0> b0;\n+  static B<1> b1;\n+  static L l;\n+  static C c;\n+  static E e;\n+  static H h;\n+  static I i;\n+  static J j;\n+  static K<0> k0;\n+  static K<2> k2;\n+  fn1 (1, b0);\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+  fn2 (1, b1);\n+  fn3 (1, l);\t// { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" }\n+  fn4 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, b0, 1, 2, 3, 4);\n+  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+  fn5 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, b1, 1, 2, 3, 4);\n+  fn6 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, c, 1, 2, 3, 4);\n+  fn7 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, e, 1, 2, 3, 4);\n+  fn8 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, h, 1, 2, 3, 4);\n+  fn9 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, i, 1, 2, 3, 4);\n+  fn10 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, j, 1, 2, 3, 4);\n+  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+  fn11 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, k0, 1, 2, 3, 4);\n+  // { dg-message \"note: parameter passing for argument of type \\[^\\n\\r]* changed in GCC 7\\.1\" \"\" { target *-*-* } .-1 }\n+  fn12 (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, k2, 1, 2, 3, 4);\n+}"}]}