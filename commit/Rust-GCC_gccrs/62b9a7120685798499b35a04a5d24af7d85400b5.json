{"sha": "62b9a7120685798499b35a04a5d24af7d85400b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiOWE3MTIwNjg1Nzk4NDk5YjM1YTA0YTVkMjRhZjdkODU0MDBiNQ==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-08-24T10:00:19Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-08-24T10:00:19Z"}, "message": "(CLS_SETNUMBER): Clear old number\n\nFrom-SVN: r5203", "tree": {"sha": "0b523246ab121837f8566d03f8dd5558f990b540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b523246ab121837f8566d03f8dd5558f990b540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62b9a7120685798499b35a04a5d24af7d85400b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b9a7120685798499b35a04a5d24af7d85400b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b9a7120685798499b35a04a5d24af7d85400b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b9a7120685798499b35a04a5d24af7d85400b5/comments", "author": null, "committer": null, "parents": [{"sha": "499056939e05450db87c2caadd659345617d026e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/499056939e05450db87c2caadd659345617d026e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/499056939e05450db87c2caadd659345617d026e"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "407793222f42c281c17ef0bc277e8f04408584a2", "filename": "gcc/objc/objc-api.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b9a7120685798499b35a04a5d24af7d85400b5/gcc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b9a7120685798499b35a04a5d24af7d85400b5/gcc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-api.h?ref=62b9a7120685798499b35a04a5d24af7d85400b5", "patch": "@@ -236,7 +236,8 @@ struct objc_protocol_list {\n */\n #define CLS_GETNUMBER(cls) (__CLS_INFO(cls) >> (HOST_BITS_PER_LONG/2))\n #define CLS_SETNUMBER(cls, num) \\\n-  ({ assert(CLS_GETNUMBER(cls)==0); \\\n+  ({ (cls)->info <<= (HOST_BITS_PER_LONG/2); \\\n+     (cls)->info >>= (HOST_BITS_PER_LONG/2); \\\n      __CLS_SETINFO(cls, (((unsigned long)num) << (HOST_BITS_PER_LONG/2))); })\n \n /*\n@@ -274,12 +275,10 @@ typedef struct objc_super {\n \n IMP objc_msg_lookup_super(Super_t super, SEL sel);\n \n-retval_t objc_msg_sendv(id, SEL, size_t, arglist_t);\n+retval_t objc_msg_sendv(id, SEL, arglist_t);\n \n \n \n-static const ARGSIZE = 96;\t\t/* for `method_get_argsize()' */\n-\n /*\n ** This is a hook which is called by objc_lookup_class and\n ** objc_get_class if the runtime is not able to find the class.\n@@ -364,12 +363,6 @@ class_set_version(Class* class, long version)\n     class->version = version;\n }\n \n-static inline unsigned int\n-method_get_argsize(Method_t method)\n-{\n-  return ARGSIZE;\t\t/* This was a magic number (96)... */\n-}\n-\n static inline IMP\n method_get_imp(Method_t method)\n {"}]}