{"sha": "726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2ZDg1NjZjMTllZGJiZjM0N2NhYzlkZDkzZmQyNjNhN2ZkOGNlNA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2008-12-02T11:58:16Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2008-12-02T11:58:16Z"}, "message": "re PR fortran/36704 (Procedure pointer as function result)\n\n2008-12-02  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36704\n\tPR fortran/38290\n\t* decl.c (match_result): Result may be a standard variable or a\n\tprocedure pointer.\n\t* expr.c (gfc_check_pointer_assign): Additional checks for procedure\n\tpointer assignments.\n\t* primary.c (gfc_match_rvalue): Bugfix for procedure pointer\n\tassignments.\n\t* resolve.c (resolve_function): Check for attr.subroutine.\n\t* symbol.c (check_conflict): Addtional checks for RESULT statements.\n\t* trans-types.c (gfc_sym_type,gfc_get_function_type): Support procedure\n\tpointers as function result.\n\n\n2008-12-02  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/36704\n\tPR fortran/38290\n\t* gfortran.dg/entry_7.f90: Modified.\n\t* gfortran.dg/proc_ptr_2.f90: Extended.\n\t* gfortran.dg/proc_ptr_3.f90: Modified.\n\t* gfortran.dg/proc_ptr_11.f90: New.\n\t* gfortran.dg/proc_ptr_12.f90: New.\n\t* gfortran.dg/result_1.f90: New.\n\nFrom-SVN: r142351", "tree": {"sha": "1a8ed9bfe2933dce30e55e9615c3176bfb1bc126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a8ed9bfe2933dce30e55e9615c3176bfb1bc126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123"}], "stats": {"total": 153, "additions": 139, "deletions": 14}, "files": [{"sha": "d3ae07fe2736b42f61005140dafd73431561345a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -1,3 +1,18 @@\n+2008-12-02  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36704\n+\tPR fortran/38290\n+\t* decl.c (match_result): Result may be a standard variable or a\n+\tprocedure pointer.\n+\t* expr.c (gfc_check_pointer_assign): Additional checks for procedure\n+\tpointer assignments.\n+\t* primary.c (gfc_match_rvalue): Bugfix for procedure pointer\n+\tassignments.\n+\t* resolve.c (resolve_function): Check for attr.subroutine.\n+\t* symbol.c (check_conflict): Addtional checks for RESULT statements.\n+\t* trans-types.c (gfc_sym_type,gfc_get_function_type): Support procedure\n+\tpointers as function result.\n+\n 2008-12-01  Mikael Morin  <mikael.morin@tele2.fr>\n \n \tPR fortran/38252"}, {"sha": "f6677fe42e02ec15406ff6f2adbe06f7f019dae6", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -3974,8 +3974,7 @@ match_result (gfc_symbol *function, gfc_symbol **result)\n   if (gfc_get_symbol (name, NULL, &r))\n     return MATCH_ERROR;\n \n-  if (gfc_add_flavor (&r->attr, FL_VARIABLE, r->name, NULL) == FAILURE\n-      || gfc_add_result (&r->attr, r->name, NULL) == FAILURE)\n+  if (gfc_add_result (&r->attr, r->name, NULL) == FAILURE)\n     return MATCH_ERROR;\n \n   *result = r;"}, {"sha": "b94e5ac0b87e00951cd5d3e8b65aadc6e811b6ee", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -3112,9 +3112,30 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n   if (rvalue->expr_type == EXPR_NULL && rvalue->ts.type == BT_UNKNOWN)\n     return SUCCESS;\n \n-  /* TODO checks on rvalue for a procedure pointer assignment.  */\n+  /* Checks on rvalue for procedure pointer assignments.  */\n   if (lvalue->symtree->n.sym->attr.proc_pointer)\n-    return SUCCESS;\n+    {\n+      attr = gfc_expr_attr (rvalue);\n+      if (!((rvalue->expr_type == EXPR_NULL)\n+\t    || (rvalue->expr_type == EXPR_FUNCTION && attr.proc_pointer)\n+\t    || (rvalue->expr_type == EXPR_VARIABLE\n+\t\t&& attr.flavor == FL_PROCEDURE)))\n+\t{\n+\t  gfc_error (\"Invalid procedure pointer assignment at %L\",\n+\t\t     &rvalue->where);\n+\t  return FAILURE;\n+\t}\n+      if (rvalue->expr_type == EXPR_VARIABLE\n+\t  && lvalue->symtree->n.sym->attr.if_source != IFSRC_UNKNOWN\n+\t  && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n+\t\t\t\t      rvalue->symtree->n.sym, 0))\n+\t{\n+\t  gfc_error (\"Interfaces don't match \"\n+\t\t     \"in procedure pointer assignment at %L\", &rvalue->where);\n+\t  return FAILURE;\n+\t}\n+      return SUCCESS;\n+    }\n \n   if (!gfc_compare_types (&lvalue->ts, &rvalue->ts))\n     {"}, {"sha": "032fa9024b49b6d4b462dff404b2f353d3c39462", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -2509,11 +2509,10 @@ gfc_match_rvalue (gfc_expr **result)\n       if (gfc_matching_procptr_assignment)\n \t{\n \t  gfc_gobble_whitespace ();\n-\t  if (sym->attr.function && gfc_peek_ascii_char () == '(')\n+\t  if (gfc_peek_ascii_char () == '(')\n \t    /* Parse functions returning a procptr.  */\n \t    goto function0;\n \n-\t  if (sym->attr.flavor == FL_UNKNOWN) sym->attr.flavor = FL_PROCEDURE;\n \t  if (gfc_is_intrinsic (sym, 0, gfc_current_locus)\n \t      || gfc_is_intrinsic (sym, 1, gfc_current_locus))\n \t    sym->attr.intrinsic = 1;"}, {"sha": "0b6fe4c13a9895805622922b7df3cb5c6c2f1d23", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -2327,7 +2327,7 @@ resolve_function (gfc_expr *expr)\n       return FAILURE;\n     }\n \n-  if (sym && sym->attr.flavor == FL_VARIABLE)\n+  if (sym && (sym->attr.flavor == FL_VARIABLE || sym->attr.subroutine))\n     {\n       gfc_error (\"'%s' at %L is not a function\", sym->name, &expr->where);\n       return FAILURE;"}, {"sha": "7c79ef80afa86042609d0725bb9081cc328ec9f4", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -618,7 +618,10 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       break;\n \n     case FL_VARIABLE:\n+      break;\n+\n     case FL_NAMELIST:\n+      conf2 (result);\n       break;\n \n     case FL_PROCEDURE:\n@@ -672,6 +675,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf2 (function);\n       conf2 (subroutine);\n       conf2 (threadprivate);\n+      conf2 (result);\n \n       if (attr->intent != INTENT_UNKNOWN)\n \t{\n@@ -698,6 +702,7 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf2 (threadprivate);\n       conf2 (value);\n       conf2 (is_bind_c);\n+      conf2 (result);\n       break;\n \n     default:"}, {"sha": "e1ff5aadde59404a4af6c07c11a67d246ecb405a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -1613,8 +1613,8 @@ gfc_sym_type (gfc_symbol * sym)\n   tree type;\n   int byref;\n \n-  /* Procedure Pointers inside COMMON blocks.  */\n-  if (sym->attr.proc_pointer && sym->attr.in_common)\n+  /* Procedure Pointers inside COMMON blocks or as function result.  */\n+  if (sym->attr.proc_pointer && (sym->attr.in_common || sym->attr.result))\n     {\n       /* Unset proc_pointer as gfc_get_function_type calls gfc_sym_type.  */\n       sym->attr.proc_pointer = 0;\n@@ -2143,6 +2143,9 @@ gfc_get_function_type (gfc_symbol * sym)\n       type = gfc_typenode_for_spec (&sym->ts);\n       sym->ts.kind = gfc_default_real_kind;\n     }\n+  else if (sym->result && sym->result->attr.proc_pointer)\n+    /* Procedure pointer return values.  */\n+    type = gfc_sym_type (sym->result);\n   else\n     type = gfc_sym_type (sym);\n "}, {"sha": "f64db4d4cf750247484bd79b690d6d41a6086641", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -1,3 +1,14 @@\n+2008-12-02  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/36704\n+\tPR fortran/38290\n+\t* gfortran.dg/entry_7.f90: Modified.\n+\t* gfortran.dg/proc_ptr_2.f90: Extended.\n+\t* gfortran.dg/proc_ptr_3.f90: Modified.\n+\t* gfortran.dg/proc_ptr_11.f90: New.\n+\t* gfortran.dg/proc_ptr_12.f90: New.\n+\t* gfortran.dg/result_1.f90: New.\n+\n 2008-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38343"}, {"sha": "529409845519daed74a34925efc932aa2b212e7f", "filename": "gcc/testsuite/gfortran.dg/entry_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_7.f90?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -9,7 +9,7 @@\n MODULE TT\n CONTAINS\n   FUNCTION K(I) RESULT(J)\n-    ENTRY J() ! { dg-error \"conflicts with PROCEDURE attribute\" }\n+    ENTRY J() ! { dg-error \"conflicts with RESULT attribute\" }\n   END FUNCTION K\n \n   integer function foo ()"}, {"sha": "a5cdbb54890c3e5b387b898de9e246e2605c3da0", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_11.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+!\n+! PR 38290: Procedure pointer assignment checking.\n+!\n+! Test case found at http://de.wikibooks.org/wiki/Fortran:_Fortran_2003:_Zeiger\n+! Adapted by Janus Weil <janus@gcc.gnu.org>\n+\n+program bsp\n+  implicit none   \n+\n+  abstract interface\n+    subroutine up()\n+    end subroutine up\n+  end interface\n+\n+  procedure( up ) , pointer :: pptr\n+\n+  pptr => add   ! { dg-error \"Interfaces don't match\" }\n+\n+  print *, pptr()   ! { dg-error \"is not a function\" }\n+\n+  contains\n+\n+    function add( a, b )\n+      integer               :: add\n+      integer, intent( in ) :: a, b\n+      add = a + b\n+    end function add\n+\n+end program bsp "}, {"sha": "325703f499d5833c2a239ecf62203b0b708f26d2", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_12.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_12.f90?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+!\n+! PR 36704: Procedure pointer as function result\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+procedure(integer),pointer :: p\n+p => foo()\n+if (p(-1)/=1) call abort\n+contains\n+  function foo() result(bar)\n+    procedure(integer),pointer :: bar\n+    bar => iabs\n+  end function\n+end"}, {"sha": "6224dc5980ba2c86ff6b3e96d3485c48e3df6f71", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_2.f90", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_2.f90?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -6,8 +6,11 @@\n \n PROCEDURE(REAL), POINTER :: ptr\n PROCEDURE(REAL), SAVE    :: noptr    ! { dg-error \"attribute conflicts with\" }\n+REAL :: x\n \n-ptr => cos(4.0)        ! { dg-error \"Invalid character\" }\n+ptr => cos(4.0)        ! { dg-error \"Invalid procedure pointer assignment\" }\n+ptr => x               ! { dg-error \"Invalid procedure pointer assignment\" }\n+ptr => sin(x)          ! { dg-error \"Invalid procedure pointer assignment\" }\n \n ALLOCATE(ptr)          ! { dg-error \"must be ALLOCATABLE\" }\n "}, {"sha": "5c4233d60e4a3519d3d6c06ba4e0775c108fb888", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_3.f90", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_3.f90?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -6,14 +6,12 @@\n \n real function e1(x)\n   real :: x\n-  print *,'e1!',x\n   e1 = x * 3.0\n end function\n \n subroutine e2(a,b)\n   real, intent(inout) :: a\n   real, intent(in) :: b\n-  print *,'e2!',a,b\n   a = a + b\n end subroutine\n \n@@ -29,7 +27,15 @@ subroutine sp(a,b)\n   end subroutine sp\n end interface\n \n-external :: e1,e2\n+external :: e1\n+\n+interface\n+  subroutine e2(a,b)\n+    real, intent(inout) :: a\n+    real, intent(in) :: b\n+  end subroutine e2\n+end interface\n+\n real :: c = 1.2\n \n fp => e1"}, {"sha": "162ffaf5857520c3eb33cade226a272eb3874a55", "filename": "gcc/testsuite/gfortran.dg/result_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/726d8566c19edbbf347cac9dd93fd263a7fd8ce4/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fresult_1.f90?ref=726d8566c19edbbf347cac9dd93fd263a7fd8ce4", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+!\n+! PR 36704: Procedure pointer as function result\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+function f() result(r)\n+real, parameter :: r = 5.0    ! { dg-error \"attribute conflicts\" }\n+end function \n+\n+function g() result(s)\n+real :: a,b,c\n+namelist /s/ a,b,c    ! { dg-error \"attribute conflicts\" }\n+end function\n+\n+function h() result(t)\n+type t    ! { dg-error \"attribute conflicts\" }\n+end function"}]}