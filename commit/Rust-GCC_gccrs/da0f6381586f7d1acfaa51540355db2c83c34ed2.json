{"sha": "da0f6381586f7d1acfaa51540355db2c83c34ed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwZjYzODE1ODZmN2QxYWNmYWE1MTU0MDM1NWRiMmM4M2MzNGVkMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-04-02T10:07:58Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-04-02T10:07:58Z"}, "message": "re PR bootstrap/35752 (Combined gcc + binutils source tree doesn't bootstrap with --enable-shared)\n\n2008-04-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR bootstrap/35752\n\t* Makefile.in (objdir): Set it here.\n\t* configure.ac: Not here.  Find dynamic linker characteristics.\n\t* exec-tool.in: Use them.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r133832", "tree": {"sha": "898bb2254aaae08c8cf898c55adf2bbb800e06f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898bb2254aaae08c8cf898c55adf2bbb800e06f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da0f6381586f7d1acfaa51540355db2c83c34ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0f6381586f7d1acfaa51540355db2c83c34ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0f6381586f7d1acfaa51540355db2c83c34ed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0f6381586f7d1acfaa51540355db2c83c34ed2/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf1e48d172ead219afc6471252f1a7c775999070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e48d172ead219afc6471252f1a7c775999070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1e48d172ead219afc6471252f1a7c775999070"}], "stats": {"total": 6307, "additions": 6165, "deletions": 142}, "files": [{"sha": "c3cb0f5b3c64dd857d527d909d9a316ad7f5643a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da0f6381586f7d1acfaa51540355db2c83c34ed2", "patch": "@@ -1,3 +1,12 @@\n+2008-04-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR bootstrap/35752\n+\t* Makefile.in (objdir): Set it here.\n+\t* configure.ac: Not here.  Find dynamic linker characteristics.\n+\t* exec-tool.in: Use them.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\n 2008-04-02  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* expr.c (expand_var): Delete it."}, {"sha": "c39aa469fb0dd9364d0fdfa90a358004ada59693", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=da0f6381586f7d1acfaa51540355db2c83c34ed2", "patch": "@@ -79,9 +79,8 @@ abs_docdir = @abs_srcdir@/doc\n # Top build directory for this package, relative to here.\n top_builddir = .\n \n-# objdir is set by configure.\n-# It's normally the absolute path to the current directory.\n-objdir = @objdir@\n+# The absolute path to the current directory.\n+objdir := $(shell pwd)\n \n host_subdir=@host_subdir@\n build_subdir=@build_subdir@\n@@ -122,9 +121,6 @@ vpath %.texi $(gcc_docdir)/include\n \n # For ada/Make-lang.in; overridden in, for example, config/pa/x-ada.\n X_ADA_CFLAGS =\n-T_ADA_CFLAGS =\n-X_ADAFLAGS =\n-T_ADAFLAGS =\n \n # --------\n # UNSORTED\n@@ -142,9 +138,7 @@ LANGUAGES = c gcov$(exeext) gcov-dump$(exeext) $(CONFIG_LANGUAGES)\n \n # Various ways of specifying flags for compilations:\n # CFLAGS is for the user to override to, e.g., do a cross build with -O2.\n-# XCFLAGS is used for most compilations but not when using the GCC just built.\n # TCFLAGS is used for compilations with the GCC just built.\n-XCFLAGS =\n TCFLAGS =\n CFLAGS = @CFLAGS@\n LDFLAGS = @LDFLAGS@\n@@ -202,12 +196,8 @@ WARN_CFLAGS = @warn_cflags@\n CPPFLAGS = @CPPFLAGS@\n \n # These exists to be overridden by the x-* and t-* files, respectively.\n-X_CFLAGS =\n T_CFLAGS =\n \n-X_CPPFLAGS =\n-T_CPPFLAGS =\n-\n AWK = @AWK@\n CC = @CC@\n BISON = @BISON@\n@@ -318,9 +308,9 @@ UNWIND_H = $(srcdir)/unwind-generic.h\n GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) ./xgcc -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include -isystem $(build_tooldir)/sys-include -L$(objdir)/../ld\n \n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n-# It omits XCFLAGS, and specifies -B./.\n+# It specifies -B./.\n # It also specifies -isystem ./include to find, e.g., stddef.h.\n-GCC_CFLAGS=$(CFLAGS_FOR_TARGET) $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(LOOSE_WARN) -Wold-style-definition $($@-warn) -isystem ./include $(TCFLAGS)\n+GCC_CFLAGS=$(CFLAGS_FOR_TARGET) $(INTERNAL_CFLAGS) $(T_CFLAGS) $(LOOSE_WARN) -Wold-style-definition $($@-warn) -isystem ./include $(TCFLAGS)\n \n # ---------------------------------------------------\n # Programs which produce files for the target machine\n@@ -856,13 +846,13 @@ INTERNAL_CFLAGS = -DIN_GCC @CROSS@\n \n # This is the variable actually used when we compile. If you change this,\n # you probably want to update BUILD_CFLAGS in configure.ac\n-ALL_CFLAGS = $(X_CFLAGS) $(T_CFLAGS) \\\n-  $(CFLAGS) $(INTERNAL_CFLAGS) $(COVERAGE_FLAGS) $(WARN_CFLAGS) $(XCFLAGS) @DEFS@\n+ALL_CFLAGS = $(T_CFLAGS) \\\n+  $(CFLAGS) $(INTERNAL_CFLAGS) $(COVERAGE_FLAGS) $(WARN_CFLAGS) @DEFS@\n \n # Likewise.  Put INCLUDES at the beginning: this way, if some autoconf macro\n # puts -I options in CPPFLAGS, our include files in the srcdir will always\n # win against random include files in /usr/include.\n-ALL_CPPFLAGS = $(INCLUDES) $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)\n+ALL_CPPFLAGS = $(INCLUDES) $(CPPFLAGS)\n \n # Build and host support libraries.\n LIBIBERTY = ../libiberty/libiberty.a\n@@ -938,6 +928,7 @@ export libsubdir\n export slibdir\n \n FLAGS_TO_PASS = \\\n+\t\"ADA_CFLAGS=$(ADA_CFLAGS)\" \\\n \t\"BISON=$(BISON)\" \\\n \t\"BISONFLAGS=$(BISONFLAGS)\" \\\n \t\"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)\" \\"}, {"sha": "3b1d1be60297f31fdd792cef62c277f1417ad5e3", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=da0f6381586f7d1acfaa51540355db2c83c34ed2", "patch": "@@ -103,4 +103,8 @@ m4_include([../config/lib-link.m4])\n m4_include([../config/lib-prefix.m4])\n m4_include([../config/progtest.m4])\n m4_include([../config/warnings.m4])\n+m4_include([../libtool.m4])\n+m4_include([../ltoptions.m4])\n+m4_include([../ltsugar.m4])\n+m4_include([../ltversion.m4])\n m4_include([acinclude.m4])"}, {"sha": "a4923fec997b0cee713b1f505da01de8a927a0e6", "filename": "gcc/configure", "status": "modified", "additions": 6110, "deletions": 121, "changes": 6231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=da0f6381586f7d1acfaa51540355db2c83c34ed2"}, {"sha": "61d0d10091497947d8a2592165a4555c6f3b1e33", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=da0f6381586f7d1acfaa51540355db2c83c34ed2", "patch": "@@ -1814,6 +1814,21 @@ esac\n # Assembler & linker features\n # ---------------------------\n \n+# During stage 2, ld is actually gcc/collect-ld, which is a small script to\n+# discern between when to use prev-ld/ld-new and when to use ld/ld-new.\n+# However when ld-new is first executed from the build tree, libtool will\n+# relink it as .libs/lt-ld-new, so that it can give it an RPATH that refers\n+# to the build tree.  While doing this we need to use the previous-stage\n+# linker, or we have an infinite loop.  The presence of a shell script as\n+# ld/ld-new, and the fact that the script *uses ld itself*, is what confuses\n+# the gcc/collect-ld script.  So we need to know how libtool works, or\n+# exec-tool will fail.\n+\n+m4_defun([_LT_CONFIG_COMMANDS], [])\n+AC_PROG_LIBTOOL\n+AC_SUBST(objdir)\n+AC_SUBST(enable_fast_install)\n+\n # Identify the assembler which will work hand-in-glove with the newly\n # built GCC, so that we can examine its features.  This is the assembler\n # which will be driven by the driver program.\n@@ -3690,9 +3705,6 @@ else\n fi)\n AC_SUBST(slibdir)\n \n-objdir=`${PWDCMD-pwd}`\n-AC_SUBST(objdir)\n-\n AC_ARG_WITH(datarootdir,\n [  --with-datarootdir=DIR  Use DIR as the data root [[PREFIX/share]]],\n datarootdir=\"\\${prefix}/$with_datarootdir\","}, {"sha": "6bdddd1d06348b67c37498facb1c3fd29a2a7651", "filename": "gcc/exec-tool.in", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Fexec-tool.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da0f6381586f7d1acfaa51540355db2c83c34ed2/gcc%2Fexec-tool.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexec-tool.in?ref=da0f6381586f7d1acfaa51540355db2c83c34ed2", "patch": "@@ -23,6 +23,8 @@ ORIGINAL_AS_FOR_TARGET=\"@ORIGINAL_AS_FOR_TARGET@\"\n ORIGINAL_LD_FOR_TARGET=\"@ORIGINAL_LD_FOR_TARGET@\"\n ORIGINAL_NM_FOR_TARGET=\"@ORIGINAL_NM_FOR_TARGET@\"\n exeext=@host_exeext@\n+fast_install=@enable_fast_install@\n+objdir=@objdir@\n \n invoked=`basename \"$0\"`\n case \"$invoked\" in\n@@ -50,7 +52,23 @@ case \"$original\" in\n     scriptdir=`cd \"$tdir\" && pwd`\n \n     if test -x $scriptdir/../$dir/$prog; then\n-      exec $scriptdir/../$dir/$prog ${1+\"$@\"}\n+      test \"$fast_install\" = yes || exec $scriptdir/../$dir/$prog ${1+\"$@\"}\n+\n+      # if libtool did everything it needs to do, there's a fast path\n+      lt_prog=$scriptdir/../$dir/$objdir/lt-$prog \n+      test -x $lt_prog && exec $lt_prog ${1+\"$@\"}\n+\n+      # libtool has not relinked ld-new yet, but we cannot just use the\n+      # previous stage (because then the relinking would just never happen!).\n+      # So we take extra care to use prev-ld/ld-new *on recursive calls*.\n+      test -f $lt_prog-recursive && exec $scriptdir/../prev-$dir/$prog ${1+\"$@\"}\n+\n+      touch $lt_prog-recursive\n+      $scriptdir/../$dir/$prog ${1+\"$@\"}\n+      result=$?\n+      rm -f $lt_prog-recursive\n+      exit $result\n+\n     else\n       exec $scriptdir/../prev-$dir/$prog ${1+\"$@\"}\n     fi"}]}