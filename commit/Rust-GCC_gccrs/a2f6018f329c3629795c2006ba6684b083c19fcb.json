{"sha": "a2f6018f329c3629795c2006ba6684b083c19fcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmNjAxOGYzMjljMzYyOTc5NWMyMDA2YmE2Njg0YjA4M2MxOWZjYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-10-19T16:24:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-19T16:24:00Z"}, "message": "[PATCH] Don't allow FSM threader to create irreducible loops unless it eliminates a multi-way branch\n\n\t* tree-ssa-threadupdate.c (valid_jump_thread_path): Reject paths\n\tthat create irreducible loops unless the path elimiantes a multiway\n\tbranch.\n\nFrom-SVN: r228974", "tree": {"sha": "9e9d4d68b0a48de690a58abe53fae6e6f4dac8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9d4d68b0a48de690a58abe53fae6e6f4dac8c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f6018f329c3629795c2006ba6684b083c19fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f6018f329c3629795c2006ba6684b083c19fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f6018f329c3629795c2006ba6684b083c19fcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f6018f329c3629795c2006ba6684b083c19fcb/comments", "author": null, "committer": null, "parents": [{"sha": "e6503e0a45efcea6a0cdc5aeab165e084b0eb624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6503e0a45efcea6a0cdc5aeab165e084b0eb624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6503e0a45efcea6a0cdc5aeab165e084b0eb624"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "ff3d3fc6efc88b777a8d766fd88b3ad7b4516554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f6018f329c3629795c2006ba6684b083c19fcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f6018f329c3629795c2006ba6684b083c19fcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2f6018f329c3629795c2006ba6684b083c19fcb", "patch": "@@ -1,3 +1,9 @@\n+2015-10-19  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (valid_jump_thread_path): Reject paths\n+\tthat create irreducible loops unless the path elimiantes a multiway\n+\tbranch.\n+\n 2015-10-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67975"}, {"sha": "8e3437a8ff58771e2235eb7899f47fc78e372135", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f6018f329c3629795c2006ba6684b083c19fcb/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f6018f329c3629795c2006ba6684b083c19fcb/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=a2f6018f329c3629795c2006ba6684b083c19fcb", "patch": "@@ -2553,11 +2553,31 @@ static bool\n valid_jump_thread_path (vec<jump_thread_edge *> *path)\n {\n   unsigned len = path->length ();\n+  bool multiway_branch = false;\n \n-  /* Check that the path is connected.  */\n+  /* Check that the path is connected and see if there's a multi-way\n+     branch on the path.  */\n   for (unsigned int j = 0; j < len - 1; j++)\n-    if ((*path)[j]->e->dest != (*path)[j+1]->e->src)\n-      return false;\n+    {\n+      if ((*path)[j]->e->dest != (*path)[j+1]->e->src)\n+        return false;\n+      gimple *last = last_stmt ((*path)[j]->e->dest);\n+      multiway_branch |= (last && gimple_code (last) == GIMPLE_SWITCH);\n+    }\n+\n+  /* If we are trying to thread the loop latch to a block that does\n+     not dominate the loop latch, then that will create an irreducible\n+     loop.  We avoid that unless the jump thread has a multi-way\n+     branch, in which case we have deemed it worth losing other\n+     loop optimizations later if we can eliminate the multi-way branch.  */\n+  edge e = (*path)[0]->e;\n+  struct loop *loop = e->dest->loop_father;\n+  if (!multiway_branch\n+      && loop->latch\n+      && loop_latch_edge (loop) == e\n+      && (determine_bb_domination_status (loop, path->last ()->e->dest)\n+\t  == DOMST_NONDOMINATING))\n+    return false;\n \n   return true;\n }\n@@ -2650,7 +2670,9 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n       if (bitmap_bit_p (threaded_blocks, entry->src->index)\n \t  /* Verify that the jump thread path is still valid: a\n \t     previous jump-thread may have changed the CFG, and\n-\t     invalidated the current path.  */\n+\t     invalidated the current path or the requested jump\n+\t     thread might create irreducible loops which should\n+\t     generally be avoided.  */\n \t  || !valid_jump_thread_path (path))\n \t{\n \t  /* Remove invalid FSM jump-thread paths.  */"}]}