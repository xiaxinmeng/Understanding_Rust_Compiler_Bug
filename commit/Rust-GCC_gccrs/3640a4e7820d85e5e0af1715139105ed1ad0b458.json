{"sha": "3640a4e7820d85e5e0af1715139105ed1ad0b458", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0MGE0ZTc4MjBkODVlNWUwYWYxNzE1MTM5MTA1ZWQxYWQwYjQ1OA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-02-15T09:45:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:45:12Z"}, "message": "sem_elab.adb (Same_Elaboration_Scope): A package that is a compilation unit is an elaboration scope.\n\n2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb (Same_Elaboration_Scope): A package that is a\n\tcompilation unit is an elaboration scope.\n\t(Add_Task_Proc): Add '\\' in 2-line warning message.\n\t(Activate_All_Desirable): Deal with case of unit with'ed by parent\n\nFrom-SVN: r111095", "tree": {"sha": "7b85ff2e526bced7c23472b854b0f1daf435d825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b85ff2e526bced7c23472b854b0f1daf435d825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3640a4e7820d85e5e0af1715139105ed1ad0b458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3640a4e7820d85e5e0af1715139105ed1ad0b458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3640a4e7820d85e5e0af1715139105ed1ad0b458", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3640a4e7820d85e5e0af1715139105ed1ad0b458/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d97d1726450be2730e9dab700a0ffddd838a6753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97d1726450be2730e9dab700a0ffddd838a6753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97d1726450be2730e9dab700a0ffddd838a6753"}], "stats": {"total": 126, "additions": 83, "deletions": 43}, "files": [{"sha": "ec0a56db126c696ccd053e33668b48a5ab828737", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 83, "deletions": 43, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3640a4e7820d85e5e0af1715139105ed1ad0b458/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3640a4e7820d85e5e0af1715139105ed1ad0b458/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=3640a4e7820d85e5e0af1715139105ed1ad0b458", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -327,9 +327,66 @@ package body Sem_Elab is\n       Itm : Node_Id;\n       Ent : Entity_Id;\n \n+      procedure Add_To_Context_And_Mark (Itm : Node_Id);\n+      --  This procedure is called when the elaborate indication must be\n+      --  applied to a unit not in the context of the referencing unit. The\n+      --  unit gets added to the context as an implicit with.\n+\n+      function In_Withs_Of (UEs : Entity_Id) return Boolean;\n+      --  UEs is the spec entity of a unit. If the unit to be marked is\n+      --  in the context item list of this unit spec, then the call returns\n+      --  True and Itm is left set to point to the relevant N_With_Clause node.\n+\n       procedure Set_Elab_Flag (Itm : Node_Id);\n       --  Sets Elaborate_[All_]Desirable as appropriate on Itm\n \n+      -----------------------------\n+      -- Add_To_Context_And_Mark --\n+      -----------------------------\n+\n+      procedure Add_To_Context_And_Mark (Itm : Node_Id) is\n+         CW : constant Node_Id :=\n+                Make_With_Clause (Sloc (Itm),\n+                  Name => Name (Itm));\n+\n+      begin\n+         Set_Library_Unit  (CW, Library_Unit (Itm));\n+         Set_Implicit_With (CW, True);\n+\n+         --  Set elaborate all desirable on copy and then append the copy to\n+         --  the list of body with's and we are done.\n+\n+         Set_Elab_Flag (CW);\n+         Append_To (CI, CW);\n+      end Add_To_Context_And_Mark;\n+\n+      -----------------\n+      -- In_Withs_Of --\n+      -----------------\n+\n+      function In_Withs_Of (UEs : Entity_Id) return Boolean is\n+         UNs : constant Unit_Number_Type := Get_Source_Unit (UEs);\n+         CUs : constant Node_Id          := Cunit (UNs);\n+         CIs : constant List_Id          := Context_Items (CUs);\n+\n+      begin\n+         Itm := First (CIs);\n+         while Present (Itm) loop\n+            if Nkind (Itm) = N_With_Clause then\n+               Ent :=\n+                 Cunit_Entity (Get_Cunit_Unit_Number (Library_Unit (Itm)));\n+\n+               if U = Ent then\n+                  return True;\n+               end if;\n+            end if;\n+\n+            Next (Itm);\n+         end loop;\n+\n+         return False;\n+      end In_Withs_Of;\n+\n       -------------------\n       -- Set_Elab_Flag --\n       -------------------\n@@ -366,50 +423,30 @@ package body Sem_Elab is\n       --  current unit. One legitimate possibility is that the with clause\n       --  is present in the spec when we are a body.\n \n-      if Is_Body_Name (Unm) then\n+      if Is_Body_Name (Unm)\n+        and then In_Withs_Of (Spec_Entity (UE))\n+      then\n+         Add_To_Context_And_Mark (Itm);\n+         return;\n+      end if;\n+\n+      --  Similarly, we may be in the spec or body of a child unit, where\n+      --  the unit in question is with'ed by some ancestor of the child unit.\n+\n+      if Is_Child_Name (Unm) then\n          declare\n-            UEs : constant Entity_Id        := Spec_Entity (UE);\n-            UNs : constant Unit_Number_Type := Get_Source_Unit (UEs);\n-            CUs : constant Node_Id          := Cunit (UNs);\n-            CIs : constant List_Id          := Context_Items (CUs);\n+            Pkg : Entity_Id;\n \n          begin\n-            Itm := First (CIs);\n-            while Present (Itm) loop\n-               if Nkind (Itm) = N_With_Clause then\n-                  Ent :=\n-                    Cunit_Entity (Get_Cunit_Unit_Number (Library_Unit (Itm)));\n-\n-                  if U = Ent then\n-\n-                     --  If we find it, we have to create an implicit copy\n-                     --  of the with clause for the body, just so that it\n-                     --  can be marked as elaborate desirable (it would be\n-                     --  wrong to put it on the spec item, since it is the\n-                     --  body that has possible elaboration problems, not\n-                     --  the spec.\n-\n-                     declare\n-                        CW : constant Node_Id :=\n-                               Make_With_Clause (Sloc (Itm),\n-                                 Name => Name (Itm));\n-\n-                     begin\n-                        Set_Library_Unit  (CW, Library_Unit (Itm));\n-                        Set_Implicit_With (CW, True);\n-\n-                        --  Set elaborate all desirable on copy and then\n-                        --  append the copy to the list of body with's\n-                        --  and we are done.\n-\n-                        Set_Elab_Flag (CW);\n-                        Append_To (CI, CW);\n-                        return;\n-                     end;\n-                  end if;\n-               end if;\n+            Pkg := UE;\n+            loop\n+               Pkg := Scope (Pkg);\n+               exit when Pkg = Standard_Standard;\n \n-               Next (Itm);\n+               if In_Withs_Of (Pkg) then\n+                  Add_To_Context_And_Mark (Itm);\n+                  return;\n+               end if;\n             end loop;\n          end;\n       end if;\n@@ -1090,7 +1127,7 @@ package body Sem_Elab is\n       --  Nothing to do if inside a generic template\n \n       elsif Inside_A_Generic\n-        and then not Present (Enclosing_Generic_Body (N))\n+        and then No (Enclosing_Generic_Body (N))\n       then\n          return;\n       end if;\n@@ -1988,7 +2025,7 @@ package body Sem_Elab is\n                     (\"task will be activated before elaboration of its body?\",\n                       Decl);\n                   Error_Msg_N\n-                    (\"Program_Error will be raised at run-time?\", Decl);\n+                    (\"\\Program_Error will be raised at run-time?\", Decl);\n \n                elsif\n                  Present (Corresponding_Body (Unit_Declaration_Node (Proc)))\n@@ -2657,9 +2694,11 @@ package body Sem_Elab is\n \n    begin\n       --  Find elaboration scope for Scop1\n+      --  This is either a subprogram or a compilation unit.\n \n       S1 := Scop1;\n       while S1 /= Standard_Standard\n+        and then not Is_Compilation_Unit (S1)\n         and then (Ekind (S1) = E_Package\n                     or else\n                   Ekind (S1) = E_Protected_Type\n@@ -2673,6 +2712,7 @@ package body Sem_Elab is\n \n       S2 := Scop2;\n       while S2 /= Standard_Standard\n+        and then not Is_Compilation_Unit (S2)\n         and then (Ekind (S2) = E_Package\n                     or else\n                   Ekind (S2) = E_Protected_Type"}]}