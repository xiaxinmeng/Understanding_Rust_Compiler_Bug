{"sha": "94de7e225c1fda079052c3f0725c926437d56c94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRkZTdlMjI1YzFmZGEwNzkwNTJjM2YwNzI1YzkyNjQzN2Q1NmM5NA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-04-22T07:33:16Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-05-13T00:41:36Z"}, "message": "Optimize __builtin_shuffle when it's used to zero the upper bits of the dest. [PR target/94680]\n\nIf the second operand of __builtin_shuffle is const vector 0, and with\nspecific mask, it can be optimized to movq/vmovps.\n\n.i.e.\nfoo128:\n-       vxorps  %xmm1, %xmm1, %xmm1\n-       vmovlhps        %xmm1, %xmm0, %xmm0\n+       vmovq   %xmm0, %xmm0\n\n foo256:\n-       vxorps  %xmm1, %xmm1, %xmm1\n-       vshuff32x4      $0, %ymm1, %ymm0, %ymm0\n+       vmovaps %xmm0, %xmm0\n\n foo512:\n-       vxorps  %xmm1, %xmm1, %xmm1\n-       vshuff32x4      $68, %zmm1, %zmm0, %zmm0\n+       vmovaps %ymm0, %ymm0\n\ngcc/ChangeLog:\n\n\tPR target/94680\n\t* config/i386/sse.md (ssedoublevecmode): Add attribute for\n\tV64QI/V32HI/V16SI/V4DI.\n\t(ssehalfvecmode): Add attribute for V2DI/V2DF.\n\t(*vec_concatv4si_0): Extend to VI124_128.\n\t(*vec_concat<mode>_0): New pre-reload splitter.\n\t* config/i386/predicates.md (movq_parallel): New predicate.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94680\n\t* gcc.target/i386/avx-pr94680.c: New test.\n\t* gcc.target/i386/avx512f-pr94680.c: New test.\n\t* gcc.target/i386/sse2-pr94680.c: New test.", "tree": {"sha": "83382d842e2bd611018be236226148e65bb08aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83382d842e2bd611018be236226148e65bb08aed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94de7e225c1fda079052c3f0725c926437d56c94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94de7e225c1fda079052c3f0725c926437d56c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94de7e225c1fda079052c3f0725c926437d56c94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94de7e225c1fda079052c3f0725c926437d56c94/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff3a0f2b9d5cbea70d134cda2e74b674f8be9c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff3a0f2b9d5cbea70d134cda2e74b674f8be9c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ff3a0f2b9d5cbea70d134cda2e74b674f8be9c9"}], "stats": {"total": 411, "additions": 403, "deletions": 8}, "files": [{"sha": "abd307ebdb87e83c9dd3fc1e10d525a59ee178af", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=94de7e225c1fda079052c3f0725c926437d56c94", "patch": "@@ -1535,6 +1535,38 @@\n   (and (match_code \"mem\")\n        (match_test \"MEM_ALIGN (op) < GET_MODE_BITSIZE (mode)\")))\n \n+;; Return true if OP is a parallel for an mov{d,q,dqa,ps,pd} vec_select,\n+;; where one of the two operands of the vec_concat is const0_operand.\n+(define_predicate \"movq_parallel\"\n+  (match_code \"parallel\")\n+{\n+  unsigned nelt = XVECLEN (op, 0);\n+  unsigned nelt2 = nelt >> 1;\n+  unsigned i;\n+\n+  if (nelt < 2)\n+    return false;\n+\n+  /* Validate that all of the elements are constants,\n+     lower halves of permute are lower halves of the first operand,\n+     upper halves of permute come from any of the second operand.  */\n+  for (i = 0; i < nelt; ++i)\n+    {\n+      rtx er = XVECEXP (op, 0, i);\n+      unsigned HOST_WIDE_INT ei;\n+\n+      if (!CONST_INT_P (er))\n+\treturn 0;\n+      ei = INTVAL (er);\n+      if (i < nelt2 && ei != i)\n+\treturn 0;\n+      if (i >= nelt2 && (ei < nelt || ei >= nelt << 1))\n+\treturn 0;\n+    }\n+\n+  return 1;\n+})\n+\n ;; Return true if OP is a vzeroall operation, known to be a PARALLEL.\n (define_predicate \"vzeroall_operation\"\n   (match_code \"parallel\")"}, {"sha": "4072d0c2d663e475550b7c299a5c9a92b7f23a09", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=94de7e225c1fda079052c3f0725c926437d56c94", "patch": "@@ -811,19 +811,22 @@\n \n ;; Mapping of vector modes to a vector mode of double size\n (define_mode_attr ssedoublevecmode\n-  [(V32QI \"V64QI\") (V16HI \"V32HI\") (V8SI \"V16SI\") (V4DI \"V8DI\")\n+  [(V64QI \"V128QI\") (V32HI \"V64HI\") (V16SI \"V32SI\") (V8DI \"V16DI\")\n+   (V32QI \"V64QI\") (V16HI \"V32HI\") (V8SI \"V16SI\") (V4DI \"V8DI\")\n    (V16QI \"V32QI\") (V8HI \"V16HI\") (V4SI \"V8SI\") (V2DI \"V4DI\")\n+   (V16SF \"V32SF\") (V8DF \"V16DF\")\n    (V8SF \"V16SF\") (V4DF \"V8DF\")\n    (V4SF \"V8SF\") (V2DF \"V4DF\")])\n \n ;; Mapping of vector modes to a vector mode of half size\n+;; instead of V1DI/V1DF, DI/DF are used for V2DI/V2DF although they are scalar.\n (define_mode_attr ssehalfvecmode\n   [(V64QI \"V32QI\") (V32HI \"V16HI\") (V16SI \"V8SI\") (V8DI \"V4DI\") (V4TI \"V2TI\")\n    (V32QI \"V16QI\") (V16HI  \"V8HI\") (V8SI  \"V4SI\") (V4DI \"V2DI\")\n-   (V16QI  \"V8QI\") (V8HI   \"V4HI\") (V4SI  \"V2SI\")\n+   (V16QI  \"V8QI\") (V8HI   \"V4HI\") (V4SI  \"V2SI\") (V2DI \"DI\")\n    (V16SF \"V8SF\") (V8DF \"V4DF\")\n    (V8SF  \"V4SF\") (V4DF \"V2DF\")\n-   (V4SF  \"V2SF\")])\n+   (V4SF  \"V2SF\") (V2DF \"DF\")])\n \n (define_mode_attr ssehalfvecmodelower\n   [(V64QI \"v32qi\") (V32HI \"v16hi\") (V16SI \"v8si\") (V8DI \"v4di\") (V4TI \"v2ti\")\n@@ -15939,11 +15942,11 @@\n    (set_attr \"prefix\" \"orig,maybe_evex,orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI,TI,V4SF,V2SF,V2SF\")])\n \n-(define_insn \"*vec_concatv4si_0\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=v,x\")\n-\t(vec_concat:V4SI\n-\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \"vm,?!*y\")\n-\t  (match_operand:V2SI 2 \"const0_operand\"       \" C,C\")))]\n+(define_insn \"*vec_concat<mode>_0\"\n+  [(set (match_operand:VI124_128 0 \"register_operand\"       \"=v,x\")\n+\t(vec_concat:VI124_128\n+\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm,?!*y\")\n+\t  (match_operand:<ssehalfvecmode> 2 \"const0_operand\"       \" C,C\")))]\n   \"TARGET_SSE2\"\n   \"@\n    %vmovq\\t{%1, %0|%0, %1}\n@@ -22158,6 +22161,24 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*vec_concat<mode>_0_1\"\n+  [(set (match_operand:V 0 \"register_operand\")\n+\t(vec_select:V\n+\t  (vec_concat:<ssedoublevecmode>\n+\t    (match_operand:V 1 \"nonimmediate_operand\")\n+\t    (match_operand:V 2 \"const0_operand\"))\n+\t  (match_parallel 3 \"movq_parallel\"\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n+  \"ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_concat:V (match_dup 1) (match_dup 5)))]\n+{\n+  operands[1] = gen_lowpart (<ssehalfvecmode>mode, operands[1]);\n+  operands[5] = CONST0_RTX (<ssehalfvecmode>mode);\n+})\n+\n (define_insn \"vcvtph2ps<mask_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V4SF"}, {"sha": "a89e4967f64649a2e4062afe14264623d3e28590", "filename": "gcc/testsuite/gcc.target/i386/avx-pr94680.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr94680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr94680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr94680.c?ref=94de7e225c1fda079052c3f0725c926437d56c94", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx -mno-avx512f -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)vmov[a-z0-9]*[ \\t]*%xmm[0-9]} 12 } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */\n+\n+typedef float v8sf __attribute__((vector_size(32)));\n+typedef double v4df __attribute__ ((vector_size (32)));\n+typedef long long v4di __attribute__((vector_size(32)));\n+typedef int v8si __attribute__((vector_size(32)));\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+\n+v4df\n+foo_v4df (v4df x)\n+{\n+  return __builtin_shuffle (x, (v4df) { 0, 0, 0, 0 }, (v4di) { 0, 1, 4, 5 });\n+}\n+\n+v4df\n+foo_v4df_l (v4df x)\n+{\n+  return __builtin_shuffle ((v4df) { 0, 0, 0, 0 }, x, (v4di) { 4, 5, 1, 2 });\n+}\n+\n+v4di\n+foo_v4di (v4di x)\n+{\n+  return __builtin_shuffle (x, (v4di) { 0, 0, 0, 0 }, (v4di) { 0, 1, 4, 7 });\n+}\n+\n+v4di\n+foo_v4di_l (v4di x)\n+{\n+  return __builtin_shuffle ((v4di) { 0, 0, 0, 0 }, x, (v4di) { 4, 5, 3, 1 });\n+}\n+\n+v8sf\n+foo_v8sf (v8sf x)\n+{\n+  return __builtin_shuffle ((v8sf) { 0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v8si) { 8, 9, 10, 11, 0, 1, 2, 3 });\n+}\n+\n+v8sf\n+foo_v8sf_l (v8sf x)\n+{\n+  return __builtin_shuffle (x, (v8sf) { 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t    (v8si) { 0, 1, 2, 3, 8, 9, 10, 11 });\n+}\n+\n+v8si\n+foo_v8si (v8si x)\n+{\n+  return __builtin_shuffle (x, (v8si) { 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t    (v8si) { 0, 1, 2, 3, 13, 12, 11, 15 });\n+}\n+\n+v8si\n+foo_v8si_l (v8si x)\n+{\n+  return __builtin_shuffle ((v8si) { 0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v8si) { 8, 9, 10, 11, 7, 6, 5, 4 });\n+}\n+\n+v16hi\n+foo_v16hi (v16hi x)\n+{\n+  return __builtin_shuffle (x, (v16hi)  { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t  0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v16hi) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t 24, 17, 26, 19, 28, 21, 30, 23 });\n+}\n+\n+v16hi\n+foo_v16hi_l (v16hi x)\n+{\n+  return __builtin_shuffle ((v16hi)  { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t       0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v16hi) { 16, 17, 18, 20, 21, 22, 23,\n+\t\t\t\t      15, 0, 13, 2, 11, 4, 9, 6 });\n+}\n+\n+v32qi\n+foo_v32qi (v32qi x)\n+{\n+  return __builtin_shuffle (x, (v32qi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v32qi) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t 8, 9, 10, 11, 12, 13, 14, 15,\n+\t\t\t\t\t 32, 49, 34, 58, 36, 53, 38, 39,\n+\t\t\t\t\t 40, 60, 42, 43, 63, 45, 46, 47 });\n+}\n+\n+v32qi\n+foo_v32qi_l (v32qi x)\n+{\n+  return __builtin_shuffle ((v32qi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t     (v32qi) { 32, 33, 34, 35, 36, 37, 38, 39,\n+\t\t\t\t       40, 41, 42, 43, 44, 45, 46, 47,\n+\t\t\t\t       31, 0, 29, 2, 27, 4, 25, 6,\n+\t\t\t\t       23, 8, 21, 10, 19, 12, 17, 14 });\n+}"}, {"sha": "c27431aae7210ffd9624e522631895df183fefe3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr94680.c", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94680.c?ref=94de7e225c1fda079052c3f0725c926437d56c94", "patch": "@@ -0,0 +1,144 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vbmi -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)vmov[a-z0-9]*[ \\t]*%ymm[0-9]} 12} } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */\n+\n+\n+typedef float v16sf __attribute__((vector_size(64)));\n+typedef double v8df __attribute__ ((vector_size (64)));\n+typedef long long v8di __attribute__((vector_size(64)));\n+typedef int v16si __attribute__((vector_size(64)));\n+typedef short v32hi __attribute__ ((vector_size (64)));\n+typedef char v64qi __attribute__ ((vector_size (64)));\n+\n+v8df\n+foo_v8df (v8df x)\n+{\n+  return __builtin_shuffle (x, (v8df) { 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t    (v8di) { 0, 1, 2, 3, 15, 14, 10, 11 });\n+}\n+\n+v8df\n+foo_v8df_l (v8df x)\n+{\n+  return __builtin_shuffle ((v8df) { 0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v8di) { 8, 9, 10, 11, 0, 1, 2, 3 });\n+}\n+\n+v8di\n+foo_v8di (v8di x)\n+{\n+  return __builtin_shuffle (x, (v8di) { 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t    (v8di) { 0, 1, 2, 3, 8, 9, 10, 11 });\n+}\n+\n+v8di\n+foo_v8di_l (v8di x)\n+{\n+  return __builtin_shuffle ((v8di) { 0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v8di) { 8, 9, 10, 11, 7, 6, 5, 4 });\n+}\n+\n+v16sf\n+foo_v16sf (v16sf x)\n+{\n+  return __builtin_shuffle (x, (v16sf)  { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v16si) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t 16, 17, 18, 19, 20, 21, 22, 23 });\n+}\n+\n+v16sf\n+foo_v16sf_l (v16sf x)\n+{\n+  return __builtin_shuffle ((v16sf)  { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t       0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v16si) { 16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t\t      0, 15, 2, 13, 4, 11, 6, 9 });\n+}\n+\n+v16si\n+foo_v16si (v16si x)\n+{\n+    return __builtin_shuffle (x, (v16si)  { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t   0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v16si) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t 31, 30, 29, 28, 20, 21, 22, 23 });\n+}\n+\n+v16si\n+foo_v16si_l (v16si x)\n+{\n+    return __builtin_shuffle ((v16si)  { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t      (v16si) { 16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t\t\t15, 0, 13, 2, 11, 4, 9, 6 });\n+}\n+\n+v32hi\n+foo_v32hi (v32hi x)\n+{\n+  return __builtin_shuffle (x, (v32hi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v32hi) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t 8, 9, 10, 11, 12, 13, 14, 15,\n+\t\t\t\t\t 63, 33, 61, 35, 59, 37, 57, 39,\n+\t\t\t\t\t 55, 41, 53, 43, 51, 45, 49, 47 });\n+}\n+\n+v32hi\n+foo_v32hi_l (v32hi x)\n+{\n+  return __builtin_shuffle ((v32hi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t       0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t       0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t       0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t       (v32hi) { 32, 33, 34, 35, 36, 37, 38, 39,\n+\t\t\t\t\t 40, 41, 42, 43, 44, 45, 46, 47,\n+\t\t\t\t\t 31, 0, 29, 2, 27, 4, 25, 6,\n+\t\t\t\t\t 23, 8, 21, 10, 19, 12, 17, 14 });\n+}\n+\n+v64qi\n+foo_v64qi (v64qi x)\n+{\n+  return __builtin_shuffle (x, (v64qi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v64qi) {0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t  8, 9, 10, 11, 12, 13, 14, 15,\n+\t\t\t\t\t  16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t\t\t  24, 25, 26, 27, 28, 29, 30, 31,\n+\t\t\t\t\t  64, 127, 66, 125, 68, 123, 70, 121,\n+\t\t\t\t\t  72, 119, 74, 117, 76, 115, 78, 113,\n+\t\t\t\t\t  80, 111, 82, 109, 84, 107, 86, 105,\n+\t\t\t\t\t  88, 103, 90, 101, 92, 99, 94, 97 });\n+}\n+\n+v64qi\n+foo_v64qi_l (v64qi x)\n+{\n+  return __builtin_shuffle ((v64qi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t      0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v64qi) { 64, 65, 66, 67, 68, 69, 70, 71,\n+\t\t\t\t      72, 73, 74, 75, 76, 77, 78, 79,\n+\t\t\t\t      80, 81, 82, 83, 84, 85, 86, 87,\n+\t\t\t\t      88, 89, 90, 91, 92, 93, 94, 95,\n+\t\t\t\t      0, 63, 2, 61, 4, 59, 6, 57,\n+\t\t\t\t      8, 55, 10, 53, 12, 51, 14, 49,\n+\t\t\t\t      16, 47, 18, 45, 20, 43, 22, 41,\n+\t\t\t\t      24, 39, 26, 37, 28, 35, 30, 33 });\n+}"}, {"sha": "7e0ff9f6bc73ec8846fbe1c15f1df0a3598ad9d0", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr94680.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr94680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94de7e225c1fda079052c3f0725c926437d56c94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr94680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr94680.c?ref=94de7e225c1fda079052c3f0725c926437d56c94", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -mno-sse4.1 -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)(?:mov|psrldq).*%xmm[0-9]} 12 } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */\n+\n+typedef float v4sf __attribute__((vector_size(16)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size(16)));\n+typedef int v4si __attribute__((vector_size(16)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+\n+v2df\n+foo_v2df (v2df x)\n+{\n+  return __builtin_shuffle (x, (v2df) { 0, 0 }, (v2di) {0, 2});\n+}\n+\n+v2df\n+foo_v2df_l (v2df x)\n+{\n+  return __builtin_shuffle ((v2df) { 0, 0 }, x, (v2di) {3, 1});\n+}\n+\n+v2di\n+foo_v2di (v2di x)\n+{\n+  return __builtin_shuffle (x, (v2di) { 0, 0 }, (v2di) {0, 3});\n+}\n+\n+v2di\n+foo_v2di_l (v2di x)\n+{\n+  return __builtin_shuffle ((v2di) { 0, 0 }, x, (v2di) {3, 0});\n+}\n+\n+v4sf\n+foo_v4sf (v4sf x)\n+{\n+  return __builtin_shuffle (x, (v4sf) { 0, 0, 0, 0 }, (v4si) {0, 1, 4, 5});\n+}\n+\n+v4sf\n+foo_v4sf_l (v4sf x)\n+{\n+  return __builtin_shuffle ((v4sf) { 0, 0, 0, 0 }, x, (v4si) {4, 5, 3, 1});\n+}\n+\n+v4si\n+foo_v4si (v4si x)\n+{\n+  return __builtin_shuffle (x, (v4si) { 0, 0, 0, 0 }, (v4si) {0, 1, 6, 7});\n+}\n+\n+v4si\n+foo_v4si_l (v4si x)\n+{\n+  return __builtin_shuffle ((v4si) { 0, 0, 0, 0 }, x, (v4si) {4, 5, 1, 2});\n+}\n+\n+v8hi\n+foo_v8hi (v8hi x)\n+{\n+  return __builtin_shuffle (x, (v8hi) { 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v8hi) { 0, 1, 2, 3, 8, 12, 10, 13 });\n+}\n+\n+v8hi\n+foo_v8hi_l (v8hi x)\n+{\n+  return __builtin_shuffle ((v8hi) { 0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v8hi) { 8, 9, 10, 11, 7, 6, 5, 4 });\n+}\n+\n+v16qi\n+foo_v16qi (v16qi x)\n+{\n+  return __builtin_shuffle (x, (v16qi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t       (v16qi) {0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t16, 24, 18, 26, 20, 28, 22, 30 });\n+}\n+\n+v16qi\n+foo_v16qi_l (v16qi x)\n+{\n+  return __builtin_shuffle ((v16qi) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t       0, 0, 0, 0, 0, 0, 0, 0 }, x,\n+\t\t\t    (v16qi) { 16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t\t      15, 0, 13, 2, 11, 4, 9, 6 });\n+}"}]}