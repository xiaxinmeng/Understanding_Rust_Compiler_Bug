{"sha": "9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjMWJkMmUwYWI0MDRlM2FhNmY4ZTU2MmYyZjFmMzlmMWZjYjhkZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-06-08T12:49:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-06-08T12:49:02Z"}, "message": "re PR c++/2929 (gcc crash when compiling a sample)\n\ncp:\n\tPR c++/2929\n\t* friend.c (do_friend): Use push_decl_namespace for classes at\n\tnamespace scope.\ntestsuite:\n\t* g++.old-deja/g++.pt/friend49.C: New test.\n\nFrom-SVN: r43013", "tree": {"sha": "ab5762d3ebc19185880f76a0eb320ec43e23d764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab5762d3ebc19185880f76a0eb320ec43e23d764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/comments", "author": null, "committer": null, "parents": [{"sha": "9c65bbf460d325bf794a610e16ae941f723e3fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c65bbf460d325bf794a610e16ae941f723e3fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c65bbf460d325bf794a610e16ae941f723e3fef"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "5b03f596b62c51689eed1aac133d86b262da17b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "patch": "@@ -1,3 +1,9 @@\n+2001-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/2929\n+\t* friend.c (do_friend): Use push_decl_namespace for classes at\n+\tnamespace scope.\n+\n 2001-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n \t    Jason Merrill <jason_merrill@redhat.com>\n "}, {"sha": "8b2e8f8a4c725d373114200cda4c607742260d01", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "patch": "@@ -388,18 +388,31 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n \t\t      && current_template_parms\n \t\t      && uses_template_parms (decl));\n \n-\t  /* We can call pushdecl here, because the TREE_CHAIN of this\n-\t     FUNCTION_DECL is not needed for other purposes.  Don't do\n-\t     this for a template instantiation.  However, we don't\n-\t     call pushdecl() for a friend function of a template\n-\t     class, since in general, such a declaration depends on\n-\t     template parameters.  Instead, we call pushdecl when the\n-\t     class is instantiated.  */\n-\t  if (!is_friend_template\n-\t      && template_class_depth (current_class_type) == 0)\n-\t    decl = pushdecl (decl);\n-\t  else \n+\t  if (is_friend_template\n+\t      || template_class_depth (current_class_type) != 0)\n+\t    /* We can't call pushdecl for a template class, since in\n+\t       general, such a declaration depends on template\n+\t       parameters.  Instead, we call pushdecl when the class\n+\t       is instantiated.  */\n \t    decl = push_template_decl_real (decl, /*is_friend=*/1); \n+\t  else if (current_function_decl)\n+\t    /* This must be a local class, so pushdecl will be ok, and\n+\t       insert an unqualified friend into the local scope\n+\t       (rather than the containing namespace scope, which the\n+\t       next choice will do). */\n+\t    decl = pushdecl (decl);\n+\t  else\n+\t    {\n+\t      /* We can't use pushdecl, as we might be in a template\n+\t         class specialization, and pushdecl will insert an\n+\t         unqualified friend decl into the template parameter\n+\t         scope, rather than the namespace containing it. */\n+\t      tree ns = decl_namespace_context (decl);\n+\t      \n+\t      push_nested_namespace (ns);\n+\t      decl = pushdecl_namespace_level (decl);\n+\t      pop_nested_namespace (ns);\n+\t    }\n \n \t  if (warn)\n \t    {"}, {"sha": "1c83b6092475317eac3a1b358e99eaf2256240cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "patch": "@@ -1,3 +1,7 @@\n+2001-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/friend49.C: New test.\n+\n 2001-06-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.ext/anon3.C: New test."}, {"sha": "3b243f0924939f6de8905894e3359f94774e607e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend49.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend49.C?ref=9ac1bd2e0ab404e3aa6f8e562f2f1f39f1fcb8de", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link:\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 5 Jun 2001 <nathan@codesourcery.com>\n+\n+// Bug 2929. We were forgetting about template parm scope when\n+// injecting a friend decl into a class template specialization's\n+// containing scope.\n+\n+template <class Type> class Vec;\n+\n+template <> class Vec<double>\n+{\n+public:\n+  Vec ();\n+  Vec<double> & Fn (double);\n+  friend Vec<double> Fn (const Vec<double> &, double);\n+}; // pop_binding ICE\n+\n+template <class _Tp> class Alloc\n+{\n+  template <class _Tp1> struct Rebind\n+  {\n+    typedef Alloc<_Tp1> other;\n+  };\n+};"}]}