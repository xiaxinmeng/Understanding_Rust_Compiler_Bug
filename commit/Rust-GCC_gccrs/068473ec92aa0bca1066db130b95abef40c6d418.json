{"sha": "068473ec92aa0bca1066db130b95abef40c6d418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY4NDczZWM5MmFhMGJjYTEwNjZkYjEzMGI5NWFiZWY0MGM2ZDQxOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-03-07T15:38:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-03-07T15:38:00Z"}, "message": "basic-block.h (fixup_abnormal_edges): Declare.\n\n\t* basic-block.h (fixup_abnormal_edges): Declare.\n\t* reload1.c (fixup_abnormal_edges): New function.\n\t* reg-stack.c (convert_regs): Use it.\n\n\t* gcse.c (insert_insn_end_bb): Handle trapping insns.\n\n\t* gcse.c (hash_scan_set): Refuse instructions with EH edges.\n\nFrom-SVN: r50405", "tree": {"sha": "c7a003366839afcd2db5a7c045eff45c5926c4b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a003366839afcd2db5a7c045eff45c5926c4b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/068473ec92aa0bca1066db130b95abef40c6d418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/068473ec92aa0bca1066db130b95abef40c6d418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/068473ec92aa0bca1066db130b95abef40c6d418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/068473ec92aa0bca1066db130b95abef40c6d418/comments", "author": null, "committer": null, "parents": [{"sha": "a9a437be8dc325ab24c33c3e2ebec3115b3ee53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a437be8dc325ab24c33c3e2ebec3115b3ee53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a437be8dc325ab24c33c3e2ebec3115b3ee53d"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "c259bcd1cd9aeafa57288928f3d5908ae2cd464f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=068473ec92aa0bca1066db130b95abef40c6d418", "patch": "@@ -1,3 +1,13 @@\n+Thu Mar  7 16:33:54 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* basic-block.h (fixup_abnormal_edges): Declare.\n+\t* reload1.c (fixup_abnormal_edges): New function.\n+\t* reg-stack.c (convert_regs): Use it.\n+\n+\t* gcse.c (insert_insn_end_bb): Handle trapping insns.\n+\n+\t* gcse.c (hash_scan_set): Refuse instructions with EH edges.\n+\n 2002-03-07  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* defaults.h (MODE_HAS_NANS, MODE_HAS_INFINITIES): New."}, {"sha": "c9fc4b8e706067326b7d7b6a21144b3f6b9b1bc1", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=068473ec92aa0bca1066db130b95abef40c6d418", "patch": "@@ -697,6 +697,7 @@ extern conflict_graph conflict_graph_compute\n \t\t\t\t\t\t partition));\n extern bool mark_dfs_back_edges\t\tPARAMS ((void));\n extern void update_br_prob_note\t\tPARAMS ((basic_block));\n+extern void fixup_abnormal_edges\tPARAMS ((void));\n \n /* In dominance.c */\n "}, {"sha": "d78f82ee89218263b52ad1a5e62a7a0eaa754e58", "filename": "gcc/gcse.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=068473ec92aa0bca1066db130b95abef40c6d418", "patch": "@@ -2189,6 +2189,10 @@ hash_scan_set (pat, insn, set_p)\n \t  && regno >= FIRST_PSEUDO_REGISTER\n \t  /* Don't GCSE something if we can't do a reg/reg copy.  */\n \t  && can_copy_p [GET_MODE (dest)]\n+\t  /* GCSE commonly inserts instruction after the insn.  We can't\n+\t     do that easily for EH_REGION notes so disable GCSE on these\n+\t     for now.  */\n+\t  && !find_reg_note (insn, REG_EH_REGION, NULL_RTX)\n \t  /* Is SET_SRC something we want to gcse?  */\n \t  && want_to_gcse_p (src)\n \t  /* Don't CSE a nop.  */\n@@ -4609,13 +4613,23 @@ insert_insn_end_bb (expr, bb, pre)\n   pat = process_insert_insn (expr);\n \n   /* If the last insn is a jump, insert EXPR in front [taking care to\n-     handle cc0, etc. properly].  */\n+     handle cc0, etc. properly].  Similary we need to care trapping\n+     instructions in presence of non-call exceptions.  */\n \n-  if (GET_CODE (insn) == JUMP_INSN)\n+  if (GET_CODE (insn) == JUMP_INSN\n+      || (GET_CODE (insn) == INSN\n+\t  && (bb->succ->succ_next || (bb->succ->flags & EDGE_ABNORMAL))))\n     {\n #ifdef HAVE_cc0\n       rtx note;\n #endif\n+      /* It should always be the case that we can put these instructions\n+\t anywhere in the basic block with performing PRE optimizations.\n+\t Check this.  */\n+      if (GET_CODE (insn) == insn && pre\n+\t  && !TEST_BIT (antloc[bb->index], expr->bitmap_index)\n+          && !TEST_BIT (transp[bb->index], expr->bitmap_index))\n+\tabort ();\n \n       /* If this is a jump table, then we can't insert stuff here.  Since\n \t we know the previous real insn must be the tablejump, we insert\n@@ -4645,7 +4659,8 @@ insert_insn_end_bb (expr, bb, pre)\n \n   /* Likewise if the last insn is a call, as will happen in the presence\n      of exception handling.  */\n-  else if (GET_CODE (insn) == CALL_INSN)\n+  else if (GET_CODE (insn) == CALL_INSN\n+\t   && (bb->succ->succ_next || (bb->succ->flags & EDGE_ABNORMAL)))\n     {\n       /* Keeping in mind SMALL_REGISTER_CLASSES and parameters in registers,\n \t we search backward and place the instructions before the first"}, {"sha": "424b204e6a5d40c7d59872d35517f7702a56ddcd", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=068473ec92aa0bca1066db130b95abef40c6d418", "patch": "@@ -2854,6 +2854,7 @@ convert_regs (file)\n \t}\n     }\n \n+  fixup_abnormal_edges ();\n   if (inserted)\n     commit_edge_insertions ();\n "}, {"sha": "3b4bb2d0cbdecb72d11b20af1e153968ab5b02f8", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/068473ec92aa0bca1066db130b95abef40c6d418/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=068473ec92aa0bca1066db130b95abef40c6d418", "patch": "@@ -459,7 +459,7 @@ static void failed_reload\t\tPARAMS ((rtx, int));\n static int set_reload_reg\t\tPARAMS ((int, int));\n static void reload_cse_delete_noop_set\tPARAMS ((rtx, rtx));\n static void reload_cse_simplify\t\tPARAMS ((rtx));\n-static void fixup_abnormal_edges\tPARAMS ((void));\n+void fixup_abnormal_edges\t\tPARAMS ((void));\n extern void dump_needs\t\t\tPARAMS ((struct insn_chain *));\n \f\n /* Initialize the reload pass once per compilation.  */\n@@ -9465,7 +9465,7 @@ copy_eh_notes (insn, x)\n    proper call and fix the damage.\n  \n    Similar handle instructions throwing exceptions internally.  */\n-static void\n+void\n fixup_abnormal_edges ()\n {\n   int i;"}]}