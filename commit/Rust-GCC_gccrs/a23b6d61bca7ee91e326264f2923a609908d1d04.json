{"sha": "a23b6d61bca7ee91e326264f2923a609908d1d04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzYjZkNjFiY2E3ZWU5MWUzMjYyNjRmMjkyM2E2MDk5MDhkMWQwNA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-16T13:42:23Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-16T21:37:33Z"}, "message": "d: Remove dependency on front-end OutBuffer for diagnostic and deps file generation.\n\ngcc/d/ChangeLog:\n\n\t* d-diagnostic.cc (expand_d_format): Replace OutBuffer with obstack.\n\t(d_diagnostic_report_diagnostic): Don't free xformat.\n\t* d-lang.cc (struct d_option_data): Change deps_target type from\n\tOutBuffer to vec <const char *>.\n\t(deps_add_target): Update to push each target to deps_target.\n\t(deps_write_string): New function.\n\t(deps_write): Change buffer type to obstack* and remove colmax.\n\t(d_init_options): Update initialization of deps_target.\n\t(d_parse_file): Replace OutBuffer with obstack.", "tree": {"sha": "6f3e6b7e52a9572c4b7af518cfa2ecf822503557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3e6b7e52a9572c4b7af518cfa2ecf822503557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a23b6d61bca7ee91e326264f2923a609908d1d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23b6d61bca7ee91e326264f2923a609908d1d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23b6d61bca7ee91e326264f2923a609908d1d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23b6d61bca7ee91e326264f2923a609908d1d04/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a98123c7a6570b4a00b3fa01e3883224e5e8e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a98123c7a6570b4a00b3fa01e3883224e5e8e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a98123c7a6570b4a00b3fa01e3883224e5e8e69"}], "stats": {"total": 128, "additions": 68, "deletions": 60}, "files": [{"sha": "ee5f6e23df28e26666fddce0a961ce3782c7c357", "filename": "gcc/d/d-diagnostic.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23b6d61bca7ee91e326264f2923a609908d1d04/gcc%2Fd%2Fd-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23b6d61bca7ee91e326264f2923a609908d1d04/gcc%2Fd%2Fd-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-diagnostic.cc?ref=a23b6d61bca7ee91e326264f2923a609908d1d04", "patch": "@@ -36,21 +36,21 @@ along with GCC; see the file COPYING3.  If not see\n    `...`: text within backticks gets quoted as '%<...%>'.\n    %-10s: left-justify format flag is removed leaving '%s' remaining.\n    %02x: zero-padding format flag is removed leaving '%x' remaining.\n-   %X: uppercase unsigned hexadecimals are rewritten as '%x'.\n-\n-   The result should be freed by the caller.  */\n+   %X: uppercase unsigned hexadecimals are rewritten as '%x'.  */\n \n static char *\n expand_d_format (const char *format)\n {\n-  OutBuffer buf;\n+  obstack buf;\n   bool inbacktick = false;\n \n+  gcc_obstack_init (&buf);\n+\n   for (const char *p = format; *p;)\n     {\n       while (*p != '\\0' && *p != '%' && *p != '`')\n \t{\n-\t  buf.writeByte (*p);\n+\t  obstack_1grow (&buf, *p);\n \t  p++;\n \t}\n \n@@ -62,20 +62,20 @@ expand_d_format (const char *format)\n \t  /* Text enclosed by `...` are translated as a quoted string.  */\n \t  if (inbacktick)\n \t    {\n-\t      buf.writestring (\"%>\");\n+\t      obstack_grow (&buf, \"%>\", 2);\n \t      inbacktick = false;\n \t    }\n \t  else\n \t    {\n-\t      buf.writestring (\"%<\");\n+\t      obstack_grow (&buf, \"%<\", 2);\n \t      inbacktick = true;\n \t    }\n \t  p++;\n \t  continue;\n \t}\n \n       /* Check the conversion specification for unhandled flags.  */\n-      buf.writeByte (*p);\n+      obstack_1grow (&buf, *p);\n       p++;\n \n     Lagain:\n@@ -100,7 +100,7 @@ expand_d_format (const char *format)\n \n \tcase 'X':\n \t  /* Hex format only supports lower-case.  */\n-\t  buf.writeByte ('x');\n+\t  obstack_1grow (&buf, 'x');\n \t  p++;\n \t  break;\n \n@@ -110,7 +110,8 @@ expand_d_format (const char *format)\n     }\n \n   gcc_assert (!inbacktick);\n-  return buf.extractChars ();\n+  obstack_1grow (&buf, '\\0');\n+  return (char *) obstack_finish (&buf);\n }\n \n /* Helper routine for all error routines.  Reports a diagnostic specified by\n@@ -136,7 +137,6 @@ d_diagnostic_report_diagnostic (const Loc& loc, int opt, const char *format,\n \tdiagnostic.option_index = opt;\n \n       diagnostic_report_diagnostic (global_dc, &diagnostic);\n-      free (xformat);\n     }\n   else\n     {"}, {"sha": "34fbc5f41d8a73d2b3ab6db54cd3922237047601", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 57, "deletions": 49, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23b6d61bca7ee91e326264f2923a609908d1d04/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23b6d61bca7ee91e326264f2923a609908d1d04/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=a23b6d61bca7ee91e326264f2923a609908d1d04", "patch": "@@ -73,7 +73,7 @@ struct d_option_data\n   bool deps_skip_system;\t    /* -MM  */\n   const char *deps_filename;\t    /* -M[M]D  */\n   const char *deps_filename_user;   /* -MF <arg>  */\n-  OutBuffer *deps_target;\t    /* -M[QT] <arg> */\n+  vec <const char *> deps_target;   /* -M[QT] <arg> */\n   bool deps_phony;\t\t    /* -MP  */\n \n   bool stdinc;\t\t\t    /* -nostdinc  */\n@@ -104,16 +104,13 @@ static GTY(()) vec<tree, va_gc> *global_declarations;\n static void\n deps_add_target (const char *target, bool quoted)\n {\n-  if (!d_option.deps_target)\n-    d_option.deps_target = new OutBuffer ();\n-  else\n-    d_option.deps_target->writeByte (' ');\n-\n-  d_option.deps_target->reserve (strlen (target));\n+  obstack buffer;\n+  gcc_obstack_init (&buffer);\n \n   if (!quoted)\n     {\n-      d_option.deps_target->writestring (target);\n+      obstack_grow (&buffer, target, strlen (target));\n+      d_option.deps_target.safe_push ((const char *) obstack_finish (&buffer));\n       return;\n     }\n \n@@ -125,31 +122,59 @@ deps_add_target (const char *target, bool quoted)\n \tcase ' ':\n \tcase '\\t':\n \t  for (const char *q = p - 1; target <= q && *q == '\\\\';  q--)\n-\t    d_option.deps_target->writeByte ('\\\\');\n-\t  d_option.deps_target->writeByte ('\\\\');\n+\t    obstack_1grow (&buffer, '\\\\');\n+\t  obstack_1grow (&buffer, '\\\\');\n \t  break;\n \n \tcase '$':\n-\t  d_option.deps_target->writeByte ('$');\n+\t  obstack_1grow (&buffer, '$');\n \t  break;\n \n \tcase '#':\n-\t  d_option.deps_target->writeByte ('\\\\');\n+\t  obstack_1grow (&buffer, '\\\\');\n \t  break;\n \n \tdefault:\n \t  break;\n \t}\n \n-      d_option.deps_target->writeByte (*p);\n+      obstack_1grow (&buffer, *p);\n     }\n+\n+  d_option.deps_target.safe_push ((const char *) obstack_finish (&buffer));\n }\n \n-/* Write out all dependencies of a given MODULE to the specified BUFFER.\n+/* Write STR, with a leading space to BUFFER, updating COLUMN as appropriate.\n    COLMAX is the number of columns to word-wrap at (0 means don't wrap).  */\n \n static void\n-deps_write (Module *module, OutBuffer *buffer, unsigned colmax = 72)\n+deps_write_string (const char *str, obstack *buffer, unsigned &column,\n+\t\t   unsigned colmax = 72)\n+{\n+  unsigned size = strlen (str);\n+\n+  if (column != 0)\n+    {\n+      if (colmax && column + size > colmax)\n+\t{\n+\t  obstack_grow (buffer, \" \\\\\\n \", 4);\n+\t  column = 1;\n+\t}\n+      else\n+\t{\n+\t  obstack_1grow (buffer, ' ');\n+\t  column++;\n+\t}\n+    }\n+\n+  column += size;\n+  obstack_grow (buffer, str, size);\n+}\n+\n+/* Write out all dependencies of a given MODULE to the specified BUFFER.  */\n+\n+static void\n+deps_write (Module *module, obstack *buffer)\n {\n   hash_set <const char *> seen_modules;\n   vec <const char *> dependencies = vNULL;\n@@ -161,18 +186,15 @@ deps_write (Module *module, OutBuffer *buffer, unsigned colmax = 72)\n   unsigned column = 0;\n \n   /* Write out make target module name.  */\n-  if (d_option.deps_target)\n+  if (d_option.deps_target.length ())\n     {\n-      buffer->writestring (d_option.deps_target->extractChars ());\n-      column = d_option.deps_target->offset;\n+      for (unsigned i = 0; i < d_option.deps_target.length (); i++)\n+\tdeps_write_string (d_option.deps_target[i], buffer, column);\n     }\n   else\n-    {\n-      buffer->writestring (module->objfile->name->str);\n-      column = buffer->offset;\n-    }\n+    deps_write_string (module->objfile->name->str, buffer, column);\n \n-  buffer->writestring (\":\");\n+  obstack_1grow (buffer, ':');\n   column++;\n \n   /* Search all modules for file dependencies.  */\n@@ -236,33 +258,17 @@ deps_write (Module *module, OutBuffer *buffer, unsigned colmax = 72)\n \n   /* Write out all make dependencies.  */\n   for (size_t i = 0; i < dependencies.length (); i++)\n-    {\n-      const char *str = dependencies[i];\n-      unsigned size = strlen (str);\n-      column += size;\n-\n-      if (colmax && column > colmax)\n-\t{\n-\t  buffer->writestring (\" \\\\\\n \");\n-\t  column = size + 1;\n-\t}\n-      else\n-\t{\n-\t  buffer->writestring (\" \");\n-\t  column++;\n-\t}\n+    deps_write_string (dependencies[i], buffer, column);\n \n-      buffer->writestring (str);\n-    }\n-\n-  buffer->writenl ();\n+  obstack_1grow (buffer, '\\n');\n \n   /* Write out all phony targets.  */\n   for (size_t i = 0; i < phonylist.length (); i++)\n     {\n-      buffer->writenl ();\n-      buffer->writestring (phonylist[i]);\n-      buffer->writestring (\":\\n\");\n+      const char *str = phonylist[i];\n+      obstack_1grow (buffer, '\\n');\n+      obstack_grow (buffer, str, strlen (str));\n+      obstack_grow (buffer, \":\\n\", 2);\n     }\n }\n \n@@ -314,7 +320,7 @@ d_init_options (unsigned int, cl_decoded_option *decoded_options)\n   d_option.deps_skip_system = false;\n   d_option.deps_filename = NULL;\n   d_option.deps_filename_user = NULL;\n-  d_option.deps_target = NULL;\n+  d_option.deps_target = vNULL;\n   d_option.deps_phony = false;\n   d_option.stdinc = true;\n }\n@@ -1270,11 +1276,13 @@ d_parse_file (void)\n   /* Make dependencies.  */\n   if (d_option.deps)\n     {\n-      OutBuffer buf;\n+      obstack buffer;\n       FILE *deps_stream;\n \n+      gcc_obstack_init (&buffer);\n+\n       for (size_t i = 0; i < modules.length; i++)\n-\tdeps_write (modules[i], &buf);\n+\tdeps_write (modules[i], &buffer);\n \n       /* -MF <arg> overrides -M[M]D.  */\n       if (d_option.deps_filename_user)\n@@ -1293,7 +1301,7 @@ d_parse_file (void)\n       else\n \tdeps_stream = stdout;\n \n-      fprintf (deps_stream, \"%s\", buf.peekChars ());\n+      fprintf (deps_stream, \"%s\", (char *) obstack_finish (&buffer));\n \n       if (deps_stream != stdout\n \t  && (ferror (deps_stream) || fclose (deps_stream)))"}]}