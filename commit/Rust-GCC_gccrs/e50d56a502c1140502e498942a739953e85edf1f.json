{"sha": "e50d56a502c1140502e498942a739953e85edf1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUwZDU2YTUwMmMxMTQwNTAyZTQ5ODk0MmE3Mzk5NTNlODVlZGYxZg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-05-04T20:54:43Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-05-04T20:54:43Z"}, "message": "PR preprocessor/79214 - -Wno-system-header defeats strncat buffer overflow warnings\n\nPR preprocessor/79214 -  -Wno-system-header defeats strncat buffer overflow warnings\nPR middle-end/79222 - missing -Wstringop-overflow= on a stpcpy overflow\nPR middle-end/79223 - missing -Wstringop-overflow on a memmove overflow\n\ngcc/ChangeLog:\n\n\tPR preprocessor/79214\n\tPR middle-end/79222\n\tPR middle-end/79223\n\t* builtins.c (check_sizes): Add inlinining context and issue\n\twarnings even when -Wno-system-headers is set.\n\t(check_strncat_sizes): Same.\n\t(expand_builtin_strncat): Same.\n\t(expand_builtin_memmove): New function.\n\t(expand_builtin_stpncpy): Same.\n\t(expand_builtin): Handle memmove and stpncpy.\n\ngcc/testsuite/ChangeLog:\n\n\tPR preprocessor/79214\n\tPR middle-end/79222\n\tPR middle-end/79223\n\t* gcc.dg/pr79214.c: New test.\n\t* gcc.dg/pr79214.h: New test header.\n\t* gcc.dg/pr79222.c: New test.\n\t* gcc.dg/pr79223.c: New test.\n\t* gcc.dg/pr78138.c: Adjust.\n\t* gfortran.dg/unconstrained_commons.f: Same.\n\nFrom-SVN: r247618", "tree": {"sha": "052b919e3dc3dfdaf0c430202ec00ab03681aa7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/052b919e3dc3dfdaf0c430202ec00ab03681aa7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e50d56a502c1140502e498942a739953e85edf1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50d56a502c1140502e498942a739953e85edf1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e50d56a502c1140502e498942a739953e85edf1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50d56a502c1140502e498942a739953e85edf1f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f05d90543023e62bb272e6d97d0de3ddc32ab30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f05d90543023e62bb272e6d97d0de3ddc32ab30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f05d90543023e62bb272e6d97d0de3ddc32ab30"}], "stats": {"total": 284, "additions": 276, "deletions": 8}, "files": [{"sha": "856c3d3c3714d5cb9910a5a6fcb07ec355a56ecb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -1,3 +1,16 @@\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR preprocessor/79214\n+\tPR middle-end/79222\n+\tPR middle-end/79223\n+\t* builtins.c (check_sizes): Add inlinining context and issue\n+\twarnings even when -Wno-system-headers is set.\n+\t(check_strncat_sizes): Same.\n+\t(expand_builtin_strncat): Same.\n+\t(expand_builtin_memmove): New function.\n+\t(expand_builtin_stpncpy): Same.\n+\t(expand_builtin): Handle memmove and stpncpy.\n+\n 2017-05-04  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (struct cost_pair): Remove field inv_expr"}, {"sha": "9f2e447a2fd04842074a6690a0149f1c6e1740e3", "filename": "gcc/builtins.c", "status": "modified", "additions": 98, "deletions": 7, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -121,6 +121,7 @@ static rtx builtin_memcpy_read_str (void *, HOST_WIDE_INT, machine_mode);\n static rtx expand_builtin_memcpy (tree, rtx);\n static rtx expand_builtin_memcpy_with_bounds (tree, rtx);\n static rtx expand_builtin_memcpy_args (tree, tree, tree, rtx, tree);\n+static rtx expand_builtin_memmove (tree, rtx);\n static rtx expand_builtin_mempcpy (tree, rtx, machine_mode);\n static rtx expand_builtin_mempcpy_with_bounds (tree, rtx, machine_mode);\n static rtx expand_builtin_mempcpy_args (tree, tree, tree, rtx,\n@@ -129,6 +130,7 @@ static rtx expand_builtin_strcat (tree, rtx);\n static rtx expand_builtin_strcpy (tree, rtx);\n static rtx expand_builtin_strcpy_args (tree, tree, rtx);\n static rtx expand_builtin_stpcpy (tree, rtx, machine_mode);\n+static rtx expand_builtin_stpncpy (tree, rtx);\n static rtx expand_builtin_strncat (tree, rtx);\n static rtx expand_builtin_strncpy (tree, rtx);\n static rtx builtin_memset_gen_str (void *, HOST_WIDE_INT, machine_mode);\n@@ -3125,6 +3127,7 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree str, tree objsize)\n   if (range[0] && tree_int_cst_lt (maxobjsize, range[0]))\n     {\n       location_t loc = tree_nonartificial_location (exp);\n+      loc = expansion_point_location_if_in_system_header (loc);\n \n       if (range[0] == range[1])\n \twarning_at (loc, opt,\n@@ -3157,25 +3160,26 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree str, tree objsize)\n \t  unsigned HOST_WIDE_INT uwir0 = tree_to_uhwi (range[0]);\n \n \t  location_t loc = tree_nonartificial_location (exp);\n+\t  loc = expansion_point_location_if_in_system_header (loc);\n \n \t  if (at_least_one)\n \t    warning_at (loc, opt,\n-\t\t\t\"%K%qD: writing at least %wu byte into a region \"\n+\t\t\t\"%K%qD writing at least %wu byte into a region \"\n \t\t\t\"of size %wu overflows the destination\",\n \t\t\texp, get_callee_fndecl (exp), uwir0,\n \t\t\ttree_to_uhwi (objsize));\n \t  else if (range[0] == range[1])\n \t    warning_at (loc, opt,\n \t\t\t(uwir0 == 1\n-\t\t\t ? G_(\"%K%qD: writing %wu byte into a region \"\n+\t\t\t ? G_(\"%K%qD writing %wu byte into a region \"\n \t\t\t      \"of size %wu overflows the destination\")\n \t\t\t : G_(\"%K%qD writing %wu bytes into a region \"\n \t\t\t      \"of size %wu overflows the destination\")),\n \t\t\texp, get_callee_fndecl (exp), uwir0,\n \t\t\ttree_to_uhwi (objsize));\n \t  else\n \t    warning_at (loc, opt,\n-\t\t\t\"%K%qD: writing between %wu and %wu bytes \"\n+\t\t\t\"%K%qD writing between %wu and %wu bytes \"\n \t\t\t\"into a region of size %wu overflows \"\n \t\t\t\"the destination\",\n \t\t\texp, get_callee_fndecl (exp), uwir0,\n@@ -3196,6 +3200,7 @@ check_sizes (int opt, tree exp, tree size, tree maxlen, tree str, tree objsize)\n       if (range[0] && objsize && tree_fits_uhwi_p (objsize))\n \t{\n \t  location_t loc = tree_nonartificial_location (exp);\n+\t  loc = expansion_point_location_if_in_system_header (loc);\n \n \t  if (tree_int_cst_lt (maxobjsize, range[0]))\n \t    {\n@@ -3304,6 +3309,24 @@ expand_builtin_memcpy (tree exp, rtx target)\n   return expand_builtin_memcpy_args (dest, src, len, target, exp);\n }\n \n+/* Check a call EXP to the memmove built-in for validity.\n+   Return NULL_RTX on both success and failure.  */\n+\n+static rtx\n+expand_builtin_memmove (tree exp, rtx)\n+{\n+  if (!validate_arglist (exp,\n+ \t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n+    return NULL_RTX;\n+\n+  tree dest = CALL_EXPR_ARG (exp, 0);\n+  tree len = CALL_EXPR_ARG (exp, 2);\n+\n+  check_memop_sizes (exp, dest, len);\n+\n+  return NULL_RTX;\n+}\n+\n /* Expand an instrumented call EXP to the memcpy builtin.\n    Return NULL_RTX if we failed, the caller should emit a normal call,\n    otherwise try to get the result in TARGET, if convenient (and in\n@@ -3614,6 +3637,13 @@ expand_builtin_stpcpy (tree exp, rtx target, machine_mode mode)\n   dst = CALL_EXPR_ARG (exp, 0);\n   src = CALL_EXPR_ARG (exp, 1);\n \n+  if (warn_stringop_overflow)\n+    {\n+      tree destsize = compute_dest_size (dst, warn_stringop_overflow - 1);\n+      check_sizes (OPT_Wstringop_overflow_,\n+\t\t   exp, /*size=*/NULL_TREE, /*maxlen=*/NULL_TREE, src, destsize);\n+    }\n+\n   /* If return value is ignored, transform stpcpy into strcpy.  */\n   if (target == const0_rtx && builtin_decl_implicit (BUILT_IN_STRCPY))\n     {\n@@ -3674,6 +3704,47 @@ expand_builtin_stpcpy (tree exp, rtx target, machine_mode mode)\n     }\n }\n \n+/* Check a call EXP to the stpncpy built-in for validity.\n+   Return NULL_RTX on both success and failure.  */\n+\n+static rtx\n+expand_builtin_stpncpy (tree exp, rtx)\n+{\n+  if (!validate_arglist (exp,\n+\t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE)\n+      || !warn_stringop_overflow)\n+    return NULL_RTX;\n+\n+  tree dest = CALL_EXPR_ARG (exp, 0);\n+  tree src = CALL_EXPR_ARG (exp, 1);\n+\n+  /* The number of bytes to write (not the maximum).  */\n+  tree len = CALL_EXPR_ARG (exp, 2);\n+  /* The length of the source sequence.  */\n+  tree slen = c_strlen (src, 1);\n+\n+  /* Try to determine the range of lengths that the source expression\n+     refers to.  */\n+  tree lenrange[2];\n+  if (slen)\n+    lenrange[0] = lenrange[1] = slen;\n+  else\n+    {\n+      get_range_strlen (src, lenrange);\n+      slen = lenrange[0];\n+    }\n+\n+  tree destsize = compute_dest_size (dest,\n+\t\t\t\t     warn_stringop_overflow - 1);\n+\n+  /* The number of bytes to write is LEN but check_sizes will also\n+     check SLEN if LEN's value isn't known.  */\n+  check_sizes (OPT_Wstringop_overflow_,\n+\t       exp, len, /*maxlen=*/NULL_TREE, slen, destsize);\n+\n+  return NULL_RTX;\n+}\n+\n /* Callback routine for store_by_pieces.  Read GET_MODE_BITSIZE (MODE)\n    bytes from constant string DATA + OFFSET and return it as target\n    constant.  */\n@@ -3729,9 +3800,13 @@ check_strncat_sizes (tree exp, tree objsize)\n   if (tree_fits_uhwi_p (maxlen) && tree_fits_uhwi_p (objsize)\n       && tree_int_cst_equal (objsize, maxlen))\n     {\n-      warning_at (EXPR_LOCATION (exp), OPT_Wstringop_overflow_,\n-\t\t  \"specified bound %wu \"\n+      location_t loc = tree_nonartificial_location (exp);\n+      loc = expansion_point_location_if_in_system_header (loc);\n+\n+      warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t  \"%K%qD: specified bound %wu \"\n \t\t  \"equals the size of the destination\",\n+\t\t  exp, get_callee_fndecl (exp),\n \t\t  tree_to_uhwi (maxlen));\n \n       return false;\n@@ -3793,9 +3868,13 @@ expand_builtin_strncat (tree exp, rtx)\n   if (tree_fits_uhwi_p (maxlen) && tree_fits_uhwi_p (destsize)\n       && tree_int_cst_equal (destsize, maxlen))\n     {\n-      warning_at (EXPR_LOCATION (exp), OPT_Wstringop_overflow_,\n-\t\t  \"specified bound %wu \"\n+      location_t loc = tree_nonartificial_location (exp);\n+      loc = expansion_point_location_if_in_system_header (loc);\n+\n+      warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t  \"%K%qD: specified bound %wu \"\n \t\t  \"equals the size of the destination\",\n+\t\t  exp, get_callee_fndecl (exp),\n \t\t  tree_to_uhwi (maxlen));\n \n       return NULL_RTX;\n@@ -6712,12 +6791,24 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \treturn target;\n       break;\n \n+    case BUILT_IN_STPNCPY:\n+      target = expand_builtin_stpncpy (exp, target);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     case BUILT_IN_MEMCPY:\n       target = expand_builtin_memcpy (exp, target);\n       if (target)\n \treturn target;\n       break;\n \n+    case BUILT_IN_MEMMOVE:\n+      target = expand_builtin_memmove (exp, target);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     case BUILT_IN_MEMPCPY:\n       target = expand_builtin_mempcpy (exp, target, mode);\n       if (target)"}, {"sha": "89ed4db4e3e13779ee678ef3103455407bddf50c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -1,3 +1,15 @@\n+2017-05-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR preprocessor/79214\n+\tPR middle-end/79222\n+\tPR middle-end/79223\n+\t* gcc.dg/pr79214.c: New test.\n+\t* gcc.dg/pr79214.h: New test header.\n+\t* gcc.dg/pr79222.c: New test.\n+\t* gcc.dg/pr79223.c: New test.\n+\t* gcc.dg/pr78138.c: Adjust.\n+\t* gfortran.dg/unconstrained_commons.f: Same.\n+\n 2017-05-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR translation/80280"}, {"sha": "5145cb437c80d95fe8f9566c77103effc0abd5a6", "filename": "gcc/testsuite/gcc.dg/pr78138.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78138.c?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -20,5 +20,5 @@ void g (void *p)\n   extern unsigned n;\n   if (n < 17 || 32 < n) n = 7;\n \n-  memcpy (d, p, n);   /* { dg-warning \".memcpy.: writing between 7 and 32 bytes into a region of size 5\" } */\n+  memcpy (d, p, n);   /* { dg-warning \".memcpy. writing between 7 and 32 bytes into a region of size 5\" } */\n };"}, {"sha": "fbdecf496127b53c20a4964646c0b06dccd1520e", "filename": "gcc/testsuite/gcc.dg/pr79214.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -0,0 +1,88 @@\n+/* PR preprocessor/79214 - -Wno-system-header defeats strncat buffer overflow\n+   warnings\n+   { dg-do compile }\n+   { dg-options \"-O2\" } */\n+\n+#include \"pr79214.h\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+char d[3];\n+char s[4];\n+\n+size_t range (void)\n+{\n+  extern size_t size ();\n+  size_t n = size ();\n+  if (n <= sizeof d)\n+    return sizeof d + 1;\n+\n+  return n;\n+}\n+\n+void test_bzero (void)\n+{\n+  bzero (d, range ());   /* { dg-warning \".__builtin_bzero. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+void test_memcpy (void)\n+{\n+  memcpy (d, s, range ());   /* { dg-warning \".__builtin_memcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+void test_memmove (void)\n+{\n+  memmove (d, d + 1, range ());   /* { dg-warning \".__builtin_memmove. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+void test_mempcpy (void)\n+{\n+  mempcpy (d, s, range ());   /* { dg-warning \".__builtin_mempcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+void test_memset (int n)\n+{\n+  memset (d, n, range ());   /* { dg-warning \".__builtin_memset. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+void test_strcat (int i)\n+{\n+  const char *s = i < 0 ? \"123\" : \"4567\";\n+\n+  strcat (d, s);   /* { dg-warning \".__builtin_strcat. writing 4 bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+char* test_stpcpy (int i)\n+{\n+  const char *s = i < 0 ? \"123\" : \"4567\";\n+\n+  return stpcpy (d, s);   /* { dg-warning \".__builtin_stpcpy. writing 4 bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+char* test_stpncpy (int i)\n+{\n+  const char *s = i < 0 ? \"123\" : \"4567\";\n+\n+  return stpncpy (d, s, range ());   /* { dg-warning \".__builtin_stpncpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+char* test_strcpy (int i)\n+{\n+  const char *s = i < 0 ? \"123\" : \"4567\";\n+\n+  return strcpy (d, s);   /* { dg-warning \".__builtin_strcpy. writing 4 bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+char* test_strncpy (int i)\n+{\n+  const char *s = i < 0 ? \"123\" : \"4567\";\n+\n+  return strncpy (d, s, range ());   /* { dg-warning \".__builtin_strncpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+char* test_strncat (int i)\n+{\n+  const char *s = i < 0 ? \"123\" : \"4567\";\n+\n+  return strncat (d, s, range ());   /* { dg-warning \".__builtin_strncat.: specified bound between 4 and \\[0-9\\]+\" } */\n+}"}, {"sha": "14816811787ea5f4cb16ab96b8970b87c0b3cb9a", "filename": "gcc/testsuite/gcc.dg/pr79214.h", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.h?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -0,0 +1,13 @@\n+#pragma GCC system_header\n+\n+#define bzero    __builtin_bzero\n+#define memcpy   __builtin_memcpy\n+#define memmove  __builtin_memmove\n+#define mempcpy  __builtin_mempcpy\n+#define memset   __builtin_memset\n+#define strcat   __builtin_strcat\n+#define stpcpy   __builtin_stpcpy\n+#define stpncpy  __builtin_stpncpy\n+#define strcpy   __builtin_strcpy\n+#define strncpy  __builtin_strncpy\n+#define strncat  __builtin_strncat"}, {"sha": "7483a5e1e55ee39d055ada0080fdddf38679c611", "filename": "gcc/testsuite/gcc.dg/pr79222.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79222.c?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -0,0 +1,13 @@\n+/* PR middle-end/79222 - missing -Wstringop-overflow= on a stpcpy overflow\n+   { dg-do compile }\n+   { dg-options \"-O2\" } */\n+\n+extern char* stpcpy (char*, const char*);\n+\n+char d[3];\n+\n+char* f (int i)\n+{\n+  const char *s = i < 0 ? \"01234567\" : \"9876543210\";\n+  return stpcpy (d, s);   /* { dg-warning \".stpcpy. writing 9 bytes into a region of size 3 overflows the destination\" } */\n+}"}, {"sha": "5bfb1d9c59cf49da5a5e50c5b6b9b0ca37c4b11e", "filename": "gcc/testsuite/gcc.dg/pr79223.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79223.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79223.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79223.c?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -0,0 +1,37 @@\n+/* PR middle-end/79223 - missing -Wstringop-overflow on a memmove overflow\n+   { dg-do compile }\n+   { dg-additional-options \"-O2 -Wall -std=gnu99\" }  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void* memcpy (void*, const void*, size_t);\n+extern void* mempcpy (void*, const void*, size_t);\n+extern void* memmove (void*, const void*, size_t);\n+\n+char d[3];\n+char s[4];\n+\n+size_t range (void)\n+{\n+  extern size_t size ();\n+  size_t n = size ();\n+  if (n <= sizeof d)\n+    return sizeof d + 1;\n+\n+  return n;\n+}\n+\n+void test_memcpy (void)\n+{\n+  memcpy (d, s, range ());   /* { dg-warning \".memcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+void test_mempcpy (void)\n+{\n+  mempcpy (d, s, range ());   /* { dg-warning \".mempcpy. writing between 4 and \\[0-9\\]+ bytes into a region of size 3 overflows the destination\" } */\n+}\n+\n+void test_memmove (void)\n+{\n+  memmove (d + 1, d, range ());   /* { dg-warning \".memmove. writing between 4 and \\[0-9\\]+ bytes into a region of size 2 overflows the destination\" } */\n+}"}, {"sha": "cb84e7fc26fb3012e4c7a9f5a418f336e03b1ed1", "filename": "gcc/testsuite/gfortran.dg/unconstrained_commons.f", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgfortran.dg%2Funconstrained_commons.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50d56a502c1140502e498942a739953e85edf1f/gcc%2Ftestsuite%2Fgfortran.dg%2Funconstrained_commons.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funconstrained_commons.f?ref=e50d56a502c1140502e498942a739953e85edf1f", "patch": "@@ -18,3 +18,4 @@ SUBROUTINE FOO\n ! We should retain both a read and write of mycommon.x.\n ! { dg-final { scan-tree-dump-times \"  _\\[0-9\\]+ = mycommon\\\\.x\\\\\\[_\\[0-9\\]+\\\\\\];\" 1 \"dom2\" } }\n ! { dg-final { scan-tree-dump-times \"  mycommon\\\\.x\\\\\\[j?_\\[0-9\\]+\\\\\\] = _\\[0-9\\]+;\" 1 \"dom2\" } }\n+! { dg-prune-output \"overflows the destination\" }"}]}