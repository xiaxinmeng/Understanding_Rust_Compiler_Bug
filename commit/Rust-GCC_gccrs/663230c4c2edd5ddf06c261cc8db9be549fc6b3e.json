{"sha": "663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYzMjMwYzRjMmVkZDVkZGYwNmMyNjFjYzhkYjliZTU0OWZjNmIzZQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2006-06-20T06:20:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-06-20T06:20:37Z"}, "message": "re PR ada/18692 (Ada should have a dg testsuite)\n\n\tPR ada/18692\n\t* lib/gnat.exp: New file.\n\t* lib/gnat-dg.exp: Likewise.\n\t* gnat.dg: New directory.\n\t* gnat.dg/dg.exp: New driver.\n\t* gnat.dg/specs: New directory.\n\t* gnat.dg/specs/specs.exp: New driver.\n\t* gnat.dg/style: New directory.\n\t* gnat.dg/style/style.exp: New driver.\n\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r114805", "tree": {"sha": "76965c3e47f5bb4b67058bc9971d616fa3fbc985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76965c3e47f5bb4b67058bc9971d616fa3fbc985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/comments", "author": null, "committer": null, "parents": [{"sha": "83fdc7c4dbfc5f2d8cdaa54650b92c7db974cb13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fdc7c4dbfc5f2d8cdaa54650b92c7db974cb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fdc7c4dbfc5f2d8cdaa54650b92c7db974cb13"}], "stats": {"total": 447, "additions": 447, "deletions": 0}, "files": [{"sha": "71bd23591c3eef1f8579b898a352857cacdfcad9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "patch": "@@ -1,3 +1,16 @@\n+2006-06-20  James A. Morrison  <phython@gcc.gnu.org>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/18692\n+\t* lib/gnat.exp: New file.\n+\t* lib/gnat-dg.exp: Likewise.\n+\t* gnat.dg: New directory.\n+\t* gnat.dg/dg.exp: New driver.\n+\t* gnat.dg/specs: New directory.\n+\t* gnat.dg/specs/specs.exp: New driver.\n+\t* gnat.dg/style: New directory.\n+\t* gnat.dg/style/style.exp: New driver.\n+\n 2006-06-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/16206"}, {"sha": "de17fbd2015b3d6fc644a7e8091e1f568c4415ca", "filename": "gcc/testsuite/gnat.dg/dg.exp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Fgnat.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Fgnat.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdg.exp?ref=663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "patch": "@@ -0,0 +1,36 @@\n+# Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gnat-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.adb]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "8de9eed7e3c0348b0b548b58e9e423aad707335e", "filename": "gcc/testsuite/gnat.dg/specs/specs.exp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fspecs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fspecs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fspecs.exp?ref=663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "patch": "@@ -0,0 +1,36 @@\n+# Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gnat-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.ads]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "de17fbd2015b3d6fc644a7e8091e1f568c4415ca", "filename": "gcc/testsuite/gnat.dg/style/style.exp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Fgnat.dg%2Fstyle%2Fstyle.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Fgnat.dg%2Fstyle%2Fstyle.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstyle%2Fstyle.exp?ref=663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "patch": "@@ -0,0 +1,36 @@\n+# Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gnat-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.adb]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "295e8bd9e06f456773b83ba13edb13d35652b2f0", "filename": "gcc/testsuite/lib/gnat-dg.exp", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Flib%2Fgnat-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Flib%2Fgnat-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgnat-dg.exp?ref=663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "patch": "@@ -0,0 +1,45 @@\n+# Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+load_lib gcc-dg.exp\n+\n+# Define gcc callbacks for dg.exp.\n+\n+proc gnat-dg-test { prog do_what extra_tool_flags } {\n+  if { $do_what == \"compile\" } {\n+    lappend extra_tool_flags \"-c\"\n+  }\n+  return [gcc-dg-test-1 gnat_target_compile $prog $do_what $extra_tool_flags]\n+}\n+\n+proc gnat-dg-prune { system text } {\n+    global additional_prunes\n+\n+    lappend additional_prunes \"gnatmake\"\n+    lappend additional_prunes \"compilation abandoned\"\n+    lappend additional_prunes \"fatal error: maximum errors reached\"\n+    lappend additional_prunes \"linker input file\"\n+\n+    return [gcc-dg-prune $system $text]\n+}\n+\n+# Utility routines.\n+\n+# Modified dg-runtest that can cycle through a list of optimization options\n+# as c-torture does.\n+proc gnat-dg-runtest { testcases default-extra-flags } {\n+    return [gcc-dg-runtest $testcases ${default-extra-flags}]\n+}"}, {"sha": "7960672edc190095391cab2af354b65f9e5b7a96", "filename": "gcc/testsuite/lib/gnat.exp", "status": "added", "additions": 281, "deletions": 0, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663230c4c2edd5ddf06c261cc8db9be549fc6b3e/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgnat.exp?ref=663230c4c2edd5ddf06c261cc8db9be549fc6b3e", "patch": "@@ -0,0 +1,281 @@\n+# Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# This file was written by James A. Morrison (ja2morri@uwaterloo.ca)\n+# based on gcc.exp written by Rob Savoye (rob@cygnus.com).\n+\n+# This file is loaded by the tool init file (eg: unix.exp).  It provides\n+# default definitions for gnat_start, etc. and other supporting cast members.\n+\n+# These globals are used if no compiler arguments are provided.\n+# They are also used by the various testsuites to define the environment:\n+# where to find stdio.h, libc.a, etc.\n+\n+load_lib libgloss.exp\n+load_lib prune.exp\n+load_lib gcc-defs.exp\n+\n+#\n+# GNAT_UNDER_TEST is the compiler under test.\n+#\n+\n+#\n+# default_gnat_version -- extract and print the version number of the compiler\n+#\n+\n+proc default_gnat_version { } {\n+    global GNAT_UNDER_TEST\n+\n+    gnat_init\n+\n+    # ignore any arguments after the command\n+    set compiler [lindex $GNAT_UNDER_TEST 0]\n+\n+    if ![is_remote host] {\n+\tset compiler_name [which $compiler]\n+    } else {\n+\tset compiler_name $compiler\n+    }\n+\n+    # verify that the compiler exists\n+    if { $compiler_name != 0 } then {\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n+\tregexp \" version \\[^\\n\\r\\]*\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    clone_output \"$compiler_name $version\\n\"\n+\t} else {\n+\t    clone_output \"Couldn't determine version of $compiler_name: $output\\n\"\n+\t}\n+    } else {\n+\t# compiler does not exist (this should have already been detected)\n+\twarning \"$compiler does not exist\"\n+    }\n+}\n+\n+# gnat_init -- called at the start of each .exp script.\n+#\n+# There currently isn't much to do, but always using it allows us to\n+# make some enhancements without having to go back and rewrite the scripts.\n+#\n+\n+set gnat_initialized 0\n+\n+proc gnat_init { args } {\n+    global rootme\n+    global tmpdir\n+    global libdir\n+    global gluefile wrap_flags\n+    global gnat_initialized\n+    global GNAT_UNDER_TEST\n+    global TOOL_EXECUTABLE\n+    global gnat_libgcc_s_path\n+\n+    if { $gnat_initialized == 1 } { return }\n+\n+    if ![info exists GNAT_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set GNAT_UNDER_TEST $TOOL_EXECUTABLE\n+\t} else {\n+\t    set GNAT_UNDER_TEST [find_gnatmake]\n+\t}\n+    }\n+\n+    if ![info exists tmpdir] then {\n+\tset tmpdir /tmp\n+    }\n+\n+    set gnat_libgcc_s_path \"${rootme}\"\n+    # Leave this here since Ada should support multilibs at some point.\n+    set compiler [lindex $GNAT_UNDER_TEST 0]\n+#    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n+#\tforeach i \"[exec $compiler --print-multi-lib]\" {\n+#\t    set mldir \"\"\n+#\t    regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n+#\t    set mldir [string trimright $mldir \"\\;@\"]\n+#\t    if { \"$mldir\" == \".\" } {\n+#\t\tcontinue\n+#\t    }\n+#\t    if { [llength [glob -nocomplain ${rootme}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+#\t\tappend gnat_libgcc_s_path \":${rootme}/${mldir}\"\n+#\t    }\n+#\t}\n+#    }\n+}\n+\n+proc gnat_target_compile { source dest type options } {\n+    global rootme\n+    global tmpdir\n+    global gluefile wrap_flags\n+    global srcdir\n+    global GNAT_UNDER_TEST\n+    global TOOL_OPTIONS\n+    global ld_library_path\n+    global gnat_libgcc_s_path\n+\n+    setenv ADA_INCLUDE_PATH \"${rootme}/ada/rts\"\n+    set ld_library_path \".:${gnat_libgcc_s_path}\"\n+    lappend options \"compiler=$GNAT_UNDER_TEST -q\"\n+    lappend options \"incdir=${rootme}/ada/rts\"\n+\n+    if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=$wrap_flags\"\n+    }\n+\n+    # TOOL_OPTIONS must come first, so that it doesn't override testcase\n+    # specific options.\n+    if [info exists TOOL_OPTIONS] {\n+\tset options [concat \"additional_flags=$TOOL_OPTIONS\" $options]\n+    }\n+\n+    # If we have built libada along with the compiler, point the test harness\n+    # at it (and associated headers).\n+\n+#    set sourcename [string range $source 0 [expr [string length $source] - 5]]\n+#    set dest \"\"\n+    return [target_compile $source $dest $type $options]\n+}\n+\n+#\n+# gnat_pass -- utility to record a testcase passed\n+#\n+\n+proc gnat_pass { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tpass \"$testcase\"\n+    } else {\n+\tpass \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# gnat_fail -- utility to record a testcase failed\n+#\n+\n+proc gnat_fail { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tfail \"$testcase\"\n+    } else {\n+\tfail \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# gnat_finish -- called at the end of every .exp script that calls gnat_init\n+#\n+# The purpose of this proc is to hide all quirks of the testing environment\n+# from the testsuites.  It also exists to undo anything that gnat_init did\n+# (that needs undoing).\n+#\n+\n+proc gnat_finish { } {\n+    # The testing harness apparently requires this.\n+    global errorInfo\n+\n+    if [info exists errorInfo] then {\n+\tunset errorInfo\n+    }\n+\n+    # Might as well reset these (keeps our caller from wondering whether\n+    # s/he has to or not).\n+    global prms_id bug_id\n+    set prms_id 0\n+    set bug_id 0\n+}\n+\n+proc gnat_exit { } {\n+    global gluefile\n+\n+    if [info exists gluefile] {\n+\tfile_on_build delete $gluefile\n+\tunset gluefile\n+    }\n+}\n+\n+# Prune messages from GNAT that aren't useful.\n+\n+proc prune_gnat_output { text } {\n+    #send_user \"Before:$text\\n\"\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|method) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: At top level:\\[^\\n\\]*\" $text \"\" text\n+\n+    # prune the output from gnatmake.\n+    regsub -all \"(^|\\n)\\[^\\n\\]*gnatmake: [^\\n\\]*\" $text \"\" text\n+\n+    # It would be nice to avoid passing anything to gnat that would cause it to\n+    # issue these messages (since ignoring them seems like a hack on our part),\n+    # but that's too difficult in the general case.  For example, sometimes\n+    # you need to use -B to point gnat at crt0.o, but there are some targets\n+    # that don't have crt0.o.\n+    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n+\n+    #send_user \"After:$text\\n\"\n+\n+    return $text\n+}\n+\n+# If this is an older version of DejaGnu (without find_gnatmake), provide one.\n+# This can be deleted after next DejaGnu release.\n+\n+if { [info procs find_gnatmake] == \"\" } {\n+    proc find_gnatmake {} {\n+\tglobal tool_root_dir\n+\n+\tif ![is_remote host] {\n+\t    set file [lookfor_file $tool_root_dir gnatmake]\n+\t    if { $file == \"\" } {\n+\t\tset file [lookfor_file $tool_root_dir gcc/gnatmake]\n+\t    }\n+\t    if { $file != \"\" } {\n+\t\tset root [file dirname $file]\n+\t\tset CC \"$file -I$root/ada/rts --GCC=$root/xgcc --GNATBIND=$root/gnatbind --GNATLINK=$root/gnatlink -cargs -B$root -largs --GCC=$root/xgcc -B$root -margs\";\n+\t    } else {\n+\t\tset CC [transform gnatmake]\n+\t    }\n+\t} else {\n+\t    set CC [transform gnatmake]\n+\t}\n+\treturn $CC\n+    }\n+}\n+\n+# If this is an older version of DejaGnu (without runtest_file_p),\n+# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n+# This can be deleted after next DejaGnu release.\n+\n+if { [info procs runtest_file_p] == \"\" } then {\n+    proc runtest_file_p { runtests testcase } {\n+\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n+\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n+\t\treturn 1\n+\t    } else {\n+\t\treturn 0\n+\t    }\n+\t}\n+\treturn 1\n+    }\n+}\n+\n+# Provide a definition of this if missing (delete after next DejaGnu release).\n+\n+if { [info procs prune_warnings] == \"\" } then {\n+    proc prune_warnings { text } {\n+\treturn $text\n+    }\n+}"}]}