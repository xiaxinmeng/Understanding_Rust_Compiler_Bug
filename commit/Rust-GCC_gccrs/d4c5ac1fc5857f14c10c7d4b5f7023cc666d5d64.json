{"sha": "d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjNWFjMWZjNTg1N2YxNGMxMGM3ZDRiNWY3MDIzY2M2NjZkNWQ2NA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-03-23T01:53:44Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-03-23T01:53:44Z"}, "message": "combine.c (simplify_comparison): When widening modes, ignore sign extension on CONST_INTs.\n\n\t* combine.c (simplify_comparison): When widening modes, ignore\n\tsign extension on CONST_INTs.\n\nFrom-SVN: r51216", "tree": {"sha": "8ac22506bd9df94e134942c4c2aa113b8ddc8236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ac22506bd9df94e134942c4c2aa113b8ddc8236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64/comments", "author": null, "committer": null, "parents": [{"sha": "84bf8c2c66eafc037581dec88287221403d12258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84bf8c2c66eafc037581dec88287221403d12258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84bf8c2c66eafc037581dec88287221403d12258"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "b95a707cdb6eb9826603f0bf4e0aa42c20e6d3b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64", "patch": "@@ -1,3 +1,8 @@\n+2002-03-23  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* combine.c (simplify_comparison): When widening modes, ignore\n+\tsign extension on CONST_INTs.\n+\n 2002-03-22  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.c (print_operand): Fix incorrect mode"}, {"sha": "88495a69fbde75e21d01f48e2b69b29ab557eced", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d4c5ac1fc5857f14c10c7d4b5f7023cc666d5d64", "patch": "@@ -10975,14 +10975,22 @@ simplify_comparison (code, pop0, pop1)\n \t tmode = GET_MODE_WIDER_MODE (tmode))\n       if (have_insn_for (COMPARE, tmode))\n \t{\n+\t  int zero_extended;\n+\n \t  /* If the only nonzero bits in OP0 and OP1 are those in the\n \t     narrower mode and this is an equality or unsigned comparison,\n \t     we can use the wider mode.  Similarly for sign-extended\n \t     values, in which case it is true for all comparisons.  */\n-\t  if (((code == EQ || code == NE\n-\t\t|| code == GEU || code == GTU || code == LEU || code == LTU)\n-\t       && (nonzero_bits (op0, tmode) & ~GET_MODE_MASK (mode)) == 0\n-\t       && (nonzero_bits (op1, tmode) & ~GET_MODE_MASK (mode)) == 0)\n+\t  zero_extended = ((code == EQ || code == NE\n+\t\t\t    || code == GEU || code == GTU\n+\t\t\t    || code == LEU || code == LTU)\n+\t\t\t   && (nonzero_bits (op0, tmode)\n+\t\t\t       & ~GET_MODE_MASK (mode)) == 0\n+\t\t\t   && ((GET_CODE (op1) == CONST_INT\n+\t\t\t\t|| (nonzero_bits (op1, tmode)\n+\t\t\t\t    & ~GET_MODE_MASK (mode)) == 0)));\n+\n+\t  if (zero_extended\n \t      || ((num_sign_bit_copies (op0, tmode)\n \t\t   > GET_MODE_BITSIZE (tmode) - GET_MODE_BITSIZE (mode))\n \t\t  && (num_sign_bit_copies (op1, tmode)\n@@ -10999,6 +11007,8 @@ simplify_comparison (code, pop0, pop1)\n \t\t\t\t\t\t\t   XEXP (op0, 1)));\n \n \t      op0 = gen_lowpart_for_combine (tmode, op0);\n+\t      if (zero_extended && GET_CODE (op1) == CONST_INT)\n+\t\top1 = GEN_INT (INTVAL (op1) & GET_MODE_MASK (mode));\n \t      op1 = gen_lowpart_for_combine (tmode, op1);\n \t      break;\n \t    }"}]}