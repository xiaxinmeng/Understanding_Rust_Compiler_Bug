{"sha": "e73a83fc7c03a209603e2607ec3be65adb197fa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczYTgzZmM3YzAzYTIwOTYwM2UyNjA3ZWMzYmU2NWFkYjE5N2ZhOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-26T10:12:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-26T10:12:34Z"}, "message": "c-typeck.c (build_unary_op): Do not expand array-refs via pointer arithmetic.\n\n2011-04-26  Richard Guenther  <rguenther@suse.de>\n\n\t* c-typeck.c (build_unary_op): Do not expand array-refs via\n\tpointer arithmetic.  Only adjust qualifiers for function types.\n\nFrom-SVN: r172958", "tree": {"sha": "96edb3341f7f619101c03cd207ab4d1b77b6a5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96edb3341f7f619101c03cd207ab4d1b77b6a5c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73a83fc7c03a209603e2607ec3be65adb197fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73a83fc7c03a209603e2607ec3be65adb197fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73a83fc7c03a209603e2607ec3be65adb197fa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73a83fc7c03a209603e2607ec3be65adb197fa9/comments", "author": null, "committer": null, "parents": [{"sha": "961562d8d8720d823f3904050c16a2c65c9a5599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961562d8d8720d823f3904050c16a2c65c9a5599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961562d8d8720d823f3904050c16a2c65c9a5599"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "3849352708ca01ede36251ca061b483725bd89a7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73a83fc7c03a209603e2607ec3be65adb197fa9/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73a83fc7c03a209603e2607ec3be65adb197fa9/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e73a83fc7c03a209603e2607ec3be65adb197fa9", "patch": "@@ -3737,12 +3737,6 @@ build_unary_op (location_t location,\n \t  tree op0 = TREE_OPERAND (arg, 0);\n \t  if (!c_mark_addressable (op0))\n \t    return error_mark_node;\n-\t  return build_binary_op (location, PLUS_EXPR,\n-\t\t\t\t  (TREE_CODE (TREE_TYPE (op0)) == ARRAY_TYPE\n-\t\t\t\t   ? array_to_pointer_conversion (location,\n-\t\t\t\t\t\t\t\t  op0)\n-\t\t\t\t   : op0),\n-\t\t\t\t  TREE_OPERAND (arg, 1), 1);\n \t}\n \n       /* Anything not already handled and not a true memory reference\n@@ -3769,10 +3763,11 @@ build_unary_op (location_t location,\n       argtype = TREE_TYPE (arg);\n \n       /* If the lvalue is const or volatile, merge that into the type\n-\t to which the address will point.  This should only be needed\n+\t to which the address will point.  This is only needed\n \t for function types.  */\n       if ((DECL_P (arg) || REFERENCE_CLASS_P (arg))\n-\t  && (TREE_READONLY (arg) || TREE_THIS_VOLATILE (arg)))\n+\t  && (TREE_READONLY (arg) || TREE_THIS_VOLATILE (arg))\n+\t  && TREE_CODE (argtype) == FUNCTION_TYPE)\n \t{\n \t  int orig_quals = TYPE_QUALS (strip_array_types (argtype));\n \t  int quals = orig_quals;\n@@ -3782,9 +3777,6 @@ build_unary_op (location_t location,\n \t  if (TREE_THIS_VOLATILE (arg))\n \t    quals |= TYPE_QUAL_VOLATILE;\n \n-\t  gcc_assert (quals == orig_quals\n-\t\t      || TREE_CODE (argtype) == FUNCTION_TYPE);\n-\n \t  argtype = c_build_qualified_type (argtype, quals);\n \t}\n "}]}