{"sha": "6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFlNDBhZjMwYzBkMmRiMWZlM2Q5NjEwYWRlMzcwMDRlZTBjMWQzOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-31T10:47:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-31T10:47:03Z"}, "message": "[Ada] Illegal copy of limited object\n\nThis patch fixes a spurious copy of a limited object, when that object\nis a discriminated record component of a limited type LT, and the enclosing\nrecord is initialized by means of an aggregate, one of whose components is a\ncall to a build-in-place function that returns an unconstrained object of\ntype T.\n\n2018-05-31  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Apply_Discriminant_Check): Do not apply discriminant\n\tcheck to a call to a build-in-place function, given that the return\n\tobject is limited and cannot be copied.\n\ngcc/testsuite/\n\n\t* gnat.dg/limited1.adb, gnat.dg/limited1_inner.adb,\n\tgnat.dg/limited1_inner.ads, gnat.dg/limited1_outer.adb,\n\tgnat.dg/limited1_outer.ads: New testcase.\n\nFrom-SVN: r261009", "tree": {"sha": "28d48163113af5be6ce2267c4849a6b183819ed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28d48163113af5be6ce2267c4849a6b183819ed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9f357688263239dee41cef4762f0ad78c1bb442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f357688263239dee41cef4762f0ad78c1bb442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f357688263239dee41cef4762f0ad78c1bb442"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "47bf996946966cb3c72e1228a7fc1b8d801702dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -1,3 +1,9 @@\n+2018-05-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Apply_Discriminant_Check): Do not apply discriminant\n+\tcheck to a call to a build-in-place function, given that the return\n+\tobject is limited and cannot be copied.\n+\n 2018-05-31  Olivier Hainque  <hainque@adacore.com>\n \n \t* libgnat/s-atopri.ads: Update comment on __atomic_compare_exchange"}, {"sha": "8e061ebfd48731aad02a5d1093bdbee1d42229e7", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -1458,6 +1458,19 @@ package body Checks is\n          T_Typ := Typ;\n       end if;\n \n+      --  If the expression is a function call that returns a limited object\n+      --  it cannot be copied. It is not clear how to perform the proper\n+      --  discriminant check in this case because the discriminant value must\n+      --  be retrieved from the constructed object itself.\n+\n+      if Nkind (N) = N_Function_Call\n+        and then Is_Limited_Type (Typ)\n+        and then Is_Entity_Name (Name (N))\n+        and then Returns_By_Ref (Entity (Name (N)))\n+      then\n+         return;\n+      end if;\n+\n       --  Only apply checks when generating code and discriminant checks are\n       --  not suppressed. In GNATprove mode, we do not apply the checks, but we\n       --  still analyze the expression to possibly issue errors on SPARK code"}, {"sha": "a1921f1df1f0d4a88958241d161c9b0600038e73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -1,3 +1,9 @@\n+2018-05-31  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/limited1.adb, gnat.dg/limited1_inner.adb,\n+\tgnat.dg/limited1_inner.ads, gnat.dg/limited1_outer.adb,\n+\tgnat.dg/limited1_outer.ads: New testcase.\n+\n 2018-05-31  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/tampering_check1.adb, gnat.dg/tampering_check1_ivectors.ads,"}, {"sha": "0278fe103d27e0918f81fb271d3914bbf890f9df", "filename": "gcc/testsuite/gnat.dg/limited1.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1.adb?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -0,0 +1,9 @@\n+--  { dg-do run }\n+\n+with Limited1_Outer; use Limited1_Outer;\n+\n+procedure Limited1 is\n+   X : Outer_Type := Make_Outer;\n+begin\n+   null;\n+end;"}, {"sha": "c943b2d44b7a2b11f2219dc53a0de0e1c07c6283", "filename": "gcc/testsuite/gnat.dg/limited1_inner.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_inner.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_inner.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_inner.adb?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -0,0 +1,15 @@\n+package body Limited1_Inner is\n+   overriding procedure Finalize (X : in out Limited_Type) is\n+   begin\n+      if X.Self /= X'Unchecked_Access then\n+         raise Program_Error with \"Copied!\";\n+      end if;\n+   end;\n+\n+   function Make_Inner return Inner_Type is\n+   begin\n+      return Inner : Inner_Type (True) do\n+         null;\n+      end return;\n+   end;\n+end;"}, {"sha": "a06c9034f066b2bd2fdfa875a8d7e79fabffa078", "filename": "gcc/testsuite/gnat.dg/limited1_inner.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_inner.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_inner.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_inner.ads?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -0,0 +1,18 @@\n+with Ada.Finalization;\n+package Limited1_Inner is\n+   type Limited_Type is new Ada.Finalization.Limited_Controlled with record\n+      Self : access Limited_Type := Limited_Type'Unchecked_Access;\n+   end record;\n+   overriding procedure Finalize (X : in out Limited_Type);\n+\n+   type Inner_Type (What : Boolean) is record\n+      case What is\n+         when False =>\n+            null;\n+         when True =>\n+            L : Limited_Type;\n+      end case;\n+   end record;\n+\n+   function Make_Inner return Inner_Type;\n+end;"}, {"sha": "607cc938991afd24b2e3ecd8429afe59f1afc04e", "filename": "gcc/testsuite/gnat.dg/limited1_outer.adb", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_outer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_outer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_outer.adb?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -0,0 +1,6 @@\n+package body Limited1_Outer is\n+   function Make_Outer return Outer_Type is\n+   begin\n+      return (What => True, Inner => Make_Inner);\n+   end;\n+end;"}, {"sha": "d787ca8febe854bb75bf3244d0a7f177c1268998", "filename": "gcc/testsuite/gnat.dg/limited1_outer.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_outer.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae40af30c0d2db1fe3d9610ade37004ee0c1d38/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_outer.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited1_outer.ads?ref=6ae40af30c0d2db1fe3d9610ade37004ee0c1d38", "patch": "@@ -0,0 +1,9 @@\n+with Limited1_Inner; use Limited1_Inner;\n+\n+package Limited1_Outer is\n+   type Outer_Type (What : Boolean) is record\n+      Inner : Inner_Type (What);\n+   end record;\n+\n+   function Make_Outer return Outer_Type;\n+end Limited1_Outer;"}]}