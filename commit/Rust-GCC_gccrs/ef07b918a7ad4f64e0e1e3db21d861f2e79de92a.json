{"sha": "ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYwN2I5MThhN2FkNGY2NGUwZTFlM2RiMjFkODYxZjJlNzlkZTkyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T07:18:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-12T07:34:16Z"}, "message": "openmp: Diagnose another case of mixing parameter and attribute syntax\n\nThis patch diagnoses cases like:\n  #pragma omp parallel\n  [[omp::directive (declare simd)]] int foo ();\nor\n  #pragma omp taskgroup\n  int bar [[omp::directive (declare simd)]] (int);\nwhere the pragma is on the same declaration statement as the declare simd\nattribute.\n\n2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n\n\t* parser.c (cp_parser_lambda_body): Add temp overrides\n\tfor parser->{omp_declare_simd,oacc_routine,omp_attrs_forbidden_p}.\n\t(cp_parser_statement): Restore parser->omp_attrs_forbidden_p for\n\tcp_parser_declaration_statement.\n\t(cp_parser_default_argument): Add temp override for\n\tparser->omp_attrs_forbidden_p.\n\t(cp_parser_late_parsing_omp_declare_simd): Diagnose declare simd\n\tor declare variant in attribute syntax on a declaration immediately\n\tfollowing an OpenMP construct in pragma syntax.\n\n\t* g++.dg/gomp/attrs-11.C: Add new tests.", "tree": {"sha": "1215789c5a20c7c4ed3826a1d8801190ea429d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1215789c5a20c7c4ed3826a1d8801190ea429d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b7ab853bf33106fd0539e36d6ce7730269026e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7ab853bf33106fd0539e36d6ce7730269026e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7ab853bf33106fd0539e36d6ce7730269026e1"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "fbb81306c7b5b4d0e9c3a2828e9fda71613a03ca", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "patch": "@@ -11628,6 +11628,9 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n        middle of an expression.  */\n     ++function_depth;\n \n+  auto odsd = make_temp_override (parser->omp_declare_simd, NULL);\n+  auto ord = make_temp_override (parser->oacc_routine, NULL);\n+  auto oafp = make_temp_override (parser->omp_attrs_forbidden_p, false);\n   vec<tree> omp_privatization_save;\n   save_omp_privatization_clauses (omp_privatization_save);\n   /* Clear this in case we're in the middle of a default argument.  */\n@@ -12271,9 +12274,11 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t       so let's un-parse them.  */\n \t    saved_tokens.rollback();\n \n+\t  parser->omp_attrs_forbidden_p = omp_attrs_forbidden_p;\n \t  cp_parser_parse_tentatively (parser);\n \t  /* Try to parse the declaration-statement.  */\n \t  cp_parser_declaration_statement (parser);\n+\t  parser->omp_attrs_forbidden_p = false;\n \t  /* If that worked, we're done.  */\n \t  if (cp_parser_parse_definitely (parser))\n \t    return;\n@@ -24768,6 +24773,8 @@ cp_parser_default_argument (cp_parser *parser, bool template_parm_p)\n   parser->greater_than_is_operator_p = !template_parm_p;\n   auto odsd = make_temp_override (parser->omp_declare_simd, NULL);\n   auto ord = make_temp_override (parser->oacc_routine, NULL);\n+  auto oafp = make_temp_override (parser->omp_attrs_forbidden_p, false);\n+\n   /* Local variable names (and the `this' keyword) may not\n      appear in a default argument.  */\n   saved_local_variables_forbidden_p = parser->local_variables_forbidden_p;\n@@ -44503,6 +44510,14 @@ cp_parser_late_parsing_omp_declare_simd (cp_parser *parser, tree attrs)\n \t\t    continue;\n \t\t  }\n \n+\t\tif (parser->omp_attrs_forbidden_p)\n+\t\t  {\n+\t\t    error_at (first->location,\n+\t\t\t      \"mixing OpenMP directives with attribute and \"\n+\t\t\t      \"pragma syntax on the same statement\");\n+\t\t    parser->omp_attrs_forbidden_p = false;\n+\t\t  }\n+\n \t\tif (!flag_openmp && strcmp (directive[1], \"simd\") != 0)\n \t\t  continue;\n \t\tif (lexer == NULL)"}, {"sha": "44e025e7540456a859fa4c1881259d6f4a19acf2", "filename": "gcc/testsuite/g++.dg/gomp/attrs-11.C", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef07b918a7ad4f64e0e1e3db21d861f2e79de92a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-11.C?ref=ef07b918a7ad4f64e0e1e3db21d861f2e79de92a", "patch": "@@ -72,3 +72,15 @@ int f28 [[omp::directive (declare simd), omp::directive (foobar)]] (int);\t// { d\n int f29 [[omp::directive (foobar), omp::directive (declare simd)]] (int);\t// { dg-error \"unknown OpenMP directive name\" }\n int f30 [[omp::directive (threadprivate (t7)), omp::directive (declare simd)]] (int);\t// { dg-error \"OpenMP directive other than 'declare simd' or 'declare variant' appertains to a declaration\" }\n int f31 [[omp::directive (declare simd), omp::directive (threadprivate (t8))]] (int);\t// { dg-error \"OpenMP directive other than 'declare simd' or 'declare variant' appertains to a declaration\" }\n+\n+void\n+baz ()\n+{\n+  #pragma omp parallel\n+  [[omp::directive (declare simd)]] extern int f32 (int);\t// { dg-error \"mixing OpenMP directives with attribute and pragma syntax on the same statement\" }\n+  #pragma omp parallel\n+  extern int f33 [[omp::directive (declare simd)]] (int);\t// { dg-error \"mixing OpenMP directives with attribute and pragma syntax on the same statement\" }\n+  [[omp::directive (parallel)]]\n+  #pragma omp declare simd\t// { dg-error \"mixing OpenMP directives with attribute and pragma syntax on the same statement\" }\n+  extern int f34 (int);\n+}"}]}