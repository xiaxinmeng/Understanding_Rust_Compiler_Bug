{"sha": "4773afa487697ecce2e166d49785768ab79e80e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3M2FmYTQ4NzY5N2VjY2UyZTE2NmQ0OTc4NTc2OGFiNzllODBlMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-11-23T04:22:48Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-11-23T04:22:48Z"}, "message": "sh.h (FIRST_GENERAL_REG, [...]): New.\n\n* config/sh/sh.h (FIRST_GENERAL_REG, LAST_GENERAL_REG): New.\nMoved most register-number #defines...\n* config/sh/sh.md (define_constants): ... here.  Use macros to\nrefer to registers and unspecs.\n* config/sh/sh.c: Likewise.\n\nFrom-SVN: r37683", "tree": {"sha": "aca2fe1faf9ce012d8a3ec5f4f71f1cd08233914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aca2fe1faf9ce012d8a3ec5f4f71f1cd08233914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4773afa487697ecce2e166d49785768ab79e80e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4773afa487697ecce2e166d49785768ab79e80e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4773afa487697ecce2e166d49785768ab79e80e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4773afa487697ecce2e166d49785768ab79e80e0/comments", "author": null, "committer": null, "parents": [{"sha": "27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3"}], "stats": {"total": 1020, "additions": 576, "deletions": 444}, "files": [{"sha": "3ea935be48cffdbe8b7daa286d19ad4e56db528f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4773afa487697ecce2e166d49785768ab79e80e0", "patch": "@@ -1,3 +1,11 @@\n+Thu Nov 23 02:09:09 2000  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.h (FIRST_GENERAL_REG, LAST_GENERAL_REG): New.\n+\tMoved most register-number #defines...\n+\t* config/sh/sh.md (define_constants): ... here.  Use macros to\n+\trefer to registers and unspecs.\n+\t* config/sh/sh.c: Likewise.\n+\n Thu Nov 23 01:01:32 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* Makefile.in (HOST_CFLAGS): Add -DGENERATOR_FILE."}, {"sha": "8087edae41cab4245b8776f13f4bc863b3fde88e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4773afa487697ecce2e166d49785768ab79e80e0", "patch": "@@ -598,7 +598,7 @@ from_compare (operands, code)\n     }\n   else\n     insn = gen_rtx_SET (VOIDmode,\n-\t\t\tgen_rtx_REG (SImode, 18),\n+\t\t\tgen_rtx_REG (SImode, T_REG),\n \t\t\tgen_rtx (code, SImode, sh_compare_op0,\n \t\t\t\t sh_compare_op1));\n   if (TARGET_SH4 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n@@ -1596,7 +1596,7 @@ gen_shl_and (dest, left_rtx, mask_rtx, source)\n                                     (match_operand:SI 2 \"const_int_operand\" \"n\")\n                          (match_operand:SI 3 \"const_int_operand\" \"n\")\n                          (const_int 0)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   LEFT_RTX is operand 2 in the above pattern, and SIZE_RTX is operand 3.\n   return 0 for simple left / right shift combination.\n   return 1 for left shift / 8 bit sign extend / left shift.\n@@ -2097,7 +2097,7 @@ mova_p (insn)\n   return (GET_CODE (insn) == INSN\n \t  && GET_CODE (PATTERN (insn)) == SET\n \t  && GET_CODE (SET_SRC (PATTERN (insn))) == UNSPEC\n-\t  && XINT (SET_SRC (PATTERN (insn)), 1) == 1);\n+\t  && XINT (SET_SRC (PATTERN (insn)), 1) == UNSPEC_MOVA);\n }\n \n /* Find the last barrier from insn FROM which is close enough to hold the\n@@ -2786,7 +2786,7 @@ barrier_align (barrier_or_label)\n   if (GET_CODE (pat) == ADDR_DIFF_VEC)\n     return 2;\n \n-  if (GET_CODE (pat) == UNSPEC_VOLATILE && XINT (pat, 1) == 1)\n+  if (GET_CODE (pat) == UNSPEC_VOLATILE && XINT (pat, 1) == UNSPECV_ALIGN)\n     /* This is a barrier in front of a constant table.  */\n     return 0;\n \n@@ -3282,15 +3282,16 @@ machine_dependent_reorg (first)\n \t\t  /* This is a mova needing a label.  Create it.  */\n \t\t  else if (GET_CODE (src) == CONST\n \t\t\t   && GET_CODE (XEXP (src, 0)) == UNSPEC\n-\t\t\t   && XINT (XEXP (src, 0), 1) == 1\n+\t\t\t   && XINT (XEXP (src, 0), 1) == UNSPEC_MOVA\n \t\t\t   && GET_CODE (XVECEXP (XEXP (src, 0),\n \t\t\t\t\t\t 0, 0)) == CONST)\n \t\t    {\n \t\t      lab = add_constant (XVECEXP (XEXP (src, 0),\n \t\t\t\t\t\t   0, 0), mode, 0);\n \t\t      newsrc = gen_rtx_LABEL_REF (VOIDmode, lab);\n \t\t      newsrc = gen_rtx_UNSPEC (VOIDmode,\n-\t\t\t\t\t       gen_rtvec (1, newsrc), 1);\n+\t\t\t\t\t       gen_rtvec (1, newsrc),\n+\t\t\t\t\t       UNSPEC_MOVA);\n \t\t    }\n \t\t  else\n \t\t    {\n@@ -5000,7 +5001,7 @@ get_fpscr_rtx ()\n \n   if (! fpscr_rtx)\n     {\n-      fpscr_rtx = gen_rtx (REG, PSImode, 48);\n+      fpscr_rtx = gen_rtx (REG, PSImode, FPSCR_REG);\n       REG_USERVAR_P (fpscr_rtx) = 1;\n       ggc_add_rtx_root (&fpscr_rtx, 1);\n       mark_user_reg (fpscr_rtx);\n@@ -5276,7 +5277,10 @@ nonpic_symbol_mentioned_p (x)\n     return 1;\n \n   if (GET_CODE (x) == UNSPEC\n-      && (XINT (x, 1) >= 6 && XINT (x, 1) <= 9))\n+      && (XINT (x, 1) == UNSPEC_PIC\n+\t  || XINT (x, 1) == UNSPEC_GOT\n+\t  || XINT (x, 1) == UNSPEC_GOTOFF\n+\t  || XINT (x, 1) == UNSPEC_PLT))\n       return 0;\n \n   fmt = GET_RTX_FORMAT (GET_CODE (x));"}, {"sha": "5dfd213177f306253d29d7b19052c46593e34d59", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=4773afa487697ecce2e166d49785768ab79e80e0", "patch": "@@ -432,20 +432,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n    All registers that the compiler knows about must be given numbers,\n    even those that are not normally considered general registers.  */\n \n-#define AP_REG   16\n-#define PR_REG   17\n-#define T_REG    18\n-#define GBR_REG  19\n-#define MACH_REG 20\n-#define MACL_REG 21\n-#define SPECIAL_REG(REGNO) ((REGNO) >= 18 && (REGNO) <= 21)\n-#define FPUL_REG 22\n-#define RAP_REG 23\n-#define FIRST_FP_REG 24\n-#define LAST_FP_REG 39\n-#define FIRST_XD_REG 40\n-#define LAST_XD_REG 47\n-#define FPSCR_REG 48\n+/* There are many other relevant definitions in sh.md's md_constants.  */\n+\n+#define FIRST_GENERAL_REG R0_REG\n+#define LAST_GENERAL_REG (FIRST_GENERAL_REG + 15)\n+#define FIRST_FP_REG DR0_REG\n+#define LAST_FP_REG  (FIRST_FP_REG + 15)\n+#define FIRST_XD_REG XD0_REG\n+#define LAST_XD_REG  (FIRST_XD_REG + 7)\n+\n+#define SPECIAL_REG(REGNO) \\\n+  ((REGNO) == GBR_REG || (REGNO) == T_REG \\\n+   || (REGNO) == MACH_REG || (REGNO) == MACL_REG)\n \n #define FIRST_PSEUDO_REGISTER 49\n \n@@ -554,18 +552,18 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* #define PC_REGNUM\t\t15*/\n \n /* Register to use for pushing function arguments.  */\n-#define STACK_POINTER_REGNUM\t15\n+#define STACK_POINTER_REGNUM\tSP_REG\n \n /* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM\t14\n+#define FRAME_POINTER_REGNUM\tFP_REG\n \n /* Fake register that holds the address on the stack of the\n    current function's return address.  */\n-#define RETURN_ADDRESS_POINTER_REGNUM 23\n+#define RETURN_ADDRESS_POINTER_REGNUM RAP_REG\n \n /* Register to hold the addressing base for position independent\n    code access to data items.  */\n-#define PIC_OFFSET_TABLE_REGNUM\t12\n+#define PIC_OFFSET_TABLE_REGNUM\tPIC_REG\n \n #define GOT_SYMBOL_NAME \"*_GLOBAL_OFFSET_TABLE_\"\n \n@@ -831,7 +829,7 @@ extern enum reg_class reg_class_from_letter[];\n \t\t  || system_reg_operand (X, VOIDmode)))))\t\t\\\n    ? GENERAL_REGS\t\t\t\t\t\t\t\\\n    : (((CLASS) == MAC_REGS || (CLASS) == PR_REGS)\t\t\t\\\n-      && GET_CODE (X) == REG && REGNO (X) > 15\t\t\t\t\\\n+      && GET_CODE (X) == REG && REGNO (X) > SP_REG\t\t\t\\\n       && (CLASS) != REGNO_REG_CLASS (REGNO (X)))\t\t\t\\\n    ? GENERAL_REGS : NO_REGS)\n \n@@ -886,8 +884,8 @@ extern enum reg_class reg_class_from_letter[];\n    ? 8 \\\n    : 4)\n \n-#define FIRST_PARM_REG 4\n-#define FIRST_RET_REG  0\n+#define FIRST_PARM_REG (FIRST_GENERAL_REG + 4)\n+#define FIRST_RET_REG  FIRST_GENERAL_REG\n \n #define FIRST_FP_PARM_REG (FIRST_FP_REG + 4)\n #define FIRST_FP_RET_REG FIRST_FP_REG\n@@ -1269,7 +1267,7 @@ extern int current_function_anonymous_args;\n #define REGNO_OK_FOR_BASE_P(REGNO) \\\n   ((REGNO) < PR_REG || (unsigned) reg_renumber[(REGNO)] < PR_REG)\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n-  ((REGNO) == 0 || (unsigned) reg_renumber[(REGNO)] == 0)\n+  ((REGNO) == R0_REG || (unsigned) reg_renumber[(REGNO)] == R0_REG)\n \n /* Maximum number of registers that can appear in a valid memory\n    address.  */\n@@ -1299,17 +1297,17 @@ extern int current_function_anonymous_args;\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X) \\\n-  (REGNO (X) <= 16 || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n+  (REGNO (X) <= AP_REG || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_INDEX_P(X) \\\n-  (REGNO (X) == 0 || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n+  (REGNO (X) == R0_REG || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n /* Nonzero if X/OFFSET is a hard reg that can be used as an index\n    or if X is a pseudo reg.  */\n #define SUBREG_OK_FOR_INDEX_P(X, OFFSET) \\\n-  ((REGNO (X) == 0 && OFFSET == 0) || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n+  ((REGNO (X) == R0_REG && OFFSET == 0) || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n #else\n "}, {"sha": "887dcb212422694df0f36398efd15a664b521e17", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 533, "deletions": 411, "changes": 944, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4773afa487697ecce2e166d49785768ab79e80e0/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=4773afa487697ecce2e166d49785768ab79e80e0", "patch": "@@ -64,6 +64,61 @@\n ;;  general_movdst_operand -- operand is valid move destination\n ;;  general_movsrc_operand -- operand is valid move source\n ;;  logical_operand        -- operand is valid source for logical op\n+\n+;; -------------------------------------------------------------------------\n+;; Constants\n+;; -------------------------------------------------------------------------\n+\n+(define_constants [\n+  (AP_REG\t16)\n+  (PR_REG\t17)\n+  (T_REG\t18)\n+  (GBR_REG\t19)\n+  (MACH_REG\t20)\n+  (MACL_REG\t21)\n+  (FPUL_REG\t22)\n+  (RAP_REG\t23)\n+\n+  (FPSCR_REG\t48)\n+\n+  (PIC_REG\t12)\n+  (FP_REG\t14)\n+  (SP_REG\t15)\n+\n+  (R0_REG\t0)\n+  (R1_REG\t1)\n+  (R2_REG\t2)\n+  (R3_REG\t3)\n+  (R4_REG\t4)\n+  (R5_REG\t5)\n+  (R6_REG\t6)\n+\n+  (DR0_REG\t24)\n+  (DR2_REG\t26)\n+  (DR4_REG\t28)\n+\n+  (XD0_REG\t40)\n+\n+  ;; These are used with unspec.\n+  (UNSPEC_MOVA\t\t1)\n+  (UNSPEC_CASESI\t2)\n+  (UNSPEC_BBR\t\t4)\n+  (UNSPEC_SFUNC\t\t5)\n+  (UNSPEC_PIC\t\t6)\n+  (UNSPEC_GOT\t\t7)\n+  (UNSPEC_GOTOFF\t8)\n+  (UNSPEC_PLT\t\t9)\n+  (UNSPEC_ICACHE\t12)\n+\n+  ;; These are used with unspec_volatile.\n+  (UNSPECV_BLOCKAGE\t0)\n+  (UNSPECV_ALIGN\t\t1)\n+  (UNSPECV_CONST2\t2)\n+  (UNSPECV_CONST4\t4)\n+  (UNSPECV_CONST8\t6)\n+  (UNSPECV_CONST_END\t11)\n+])  \n+\n ;; -------------------------------------------------------------------------\n ;; Attributes\n ;; -------------------------------------------------------------------------\n@@ -478,7 +533,8 @@\n \n ;; ??? This should be (nil) instead of (const_int 0)\n (define_attr \"hit_stack\" \"yes,no\"\n-\t(cond [(eq (symbol_ref \"find_regno_note (insn, REG_INC, 15)\") (const_int 0))\n+\t(cond [(eq (symbol_ref \"find_regno_note (insn, REG_INC, SP_REG)\")\n+\t\t   (const_int 0))\n \t       (const_string \"no\")]\n \t      (const_string \"yes\")))\n \n@@ -536,7 +592,7 @@\n ;; -------------------------------------------------------------------------\n \n (define_insn \"\"\n-  [(set (reg:SI 18)\n+  [(set (reg:SI T_REG)\n \t(eq:SI (and:SI (match_operand:SI 0 \"arith_reg_operand\" \"z,r\")\n \t\t       (match_operand:SI 1 \"arith_operand\" \"L,r\"))\n \t       (const_int 0)))]\n@@ -550,25 +606,28 @@\n ;; register for pseudo/imm compares.\n \n (define_insn \"cmpeqsi_t\"\n-  [(set (reg:SI 18) (eq:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,z,r\")\n-\t\t\t   (match_operand:SI 1 \"arith_operand\" \"N,rI,r\")))]\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,z,r\")\n+\t       (match_operand:SI 1 \"arith_operand\" \"N,rI,r\")))]\n   \"\"\n   \"@\n \ttst\t%0,%0\n \tcmp/eq\t%1,%0\n \tcmp/eq\t%1,%0\")\n \n (define_insn \"cmpgtsi_t\"\n-  [(set (reg:SI 18) (gt:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n+  [(set (reg:SI T_REG)\n+\t(gt:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n+\t       (match_operand:SI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"\"\n   \"@\n \tcmp/gt\t%1,%0\n \tcmp/pl\t%0\")\n \n (define_insn \"cmpgesi_t\"\n-  [(set (reg:SI 18) (ge:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n+  [(set (reg:SI T_REG)\n+\t(ge:SI (match_operand:SI 0 \"arith_reg_operand\" \"r,r\")\n+\t       (match_operand:SI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"\"\n   \"@\n \tcmp/ge\t%1,%0\n@@ -579,23 +638,26 @@\n ;; -------------------------------------------------------------------------\n \n (define_insn \"cmpgeusi_t\"\n-  [(set (reg:SI 18) (geu:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n-\t\t\t    (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n+  [(set (reg:SI T_REG)\n+\t(geu:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n+\t\t(match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n   \"\"\n   \"cmp/hs\t%1,%0\")\n \n (define_insn \"cmpgtusi_t\"\n-  [(set (reg:SI 18) (gtu:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n-\t\t\t    (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n+  [(set (reg:SI T_REG)\n+\t(gtu:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n+\t\t(match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n   \"\"\n   \"cmp/hi\t%1,%0\")\n \n ;; We save the compare operands in the cmpxx patterns and use them when\n ;; we generate the branch.\n \n (define_expand \"cmpsi\"\n-  [(set (reg:SI 18) (compare (match_operand:SI 0 \"arith_operand\" \"\")\n-\t\t\t     (match_operand:SI 1 \"arith_operand\" \"\")))]\n+  [(set (reg:SI T_REG)\n+\t(compare (match_operand:SI 0 \"arith_operand\" \"\")\n+\t\t (match_operand:SI 1 \"arith_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -613,7 +675,7 @@\n ;; the sh.md size increase necessary to do that.\n \n (define_insn \"\"\n-  [(set (reg:SI 18)\n+  [(set (reg:SI T_REG)\n \t(eq:SI (and:DI (match_operand:DI 0 \"arith_reg_operand\" \"r\")\n \t\t       (match_operand:DI 1 \"arith_operand\" \"r\"))\n \t       (const_int 0)))]\n@@ -624,8 +686,9 @@\n    (set_attr \"type\" \"arith3b\")])\n \n (define_insn \"cmpeqdi_t\"\n-  [(set (reg:SI 18) (eq:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r\")))]\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n+\t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r\")))]\n   \"\"\n   \"@\n \ttst\t%S0,%S0\\;bf\t%,Ldi%=\\;tst\t%R0,%R0\\\\n%,Ldi%=:\n@@ -634,17 +697,18 @@\n    (set_attr \"type\" \"arith3b\")])\n \n (define_split\n-  [(set (reg:SI 18) (eq:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r\")))]\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n+\t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"N,r\")))]\n ;; If we applied this split when not optimizing, it would only be\n ;; applied during the machine-dependent reorg, when no new basic blocks\n ;; may be created.\n   \"reload_completed && optimize\"\n-  [(set (reg:SI 18) (eq:SI (match_dup 2) (match_dup 3)))\n-   (set (pc) (if_then_else (eq (reg:SI 18) (const_int 0))\n+  [(set (reg:SI T_REG) (eq:SI (match_dup 2) (match_dup 3)))\n+   (set (pc) (if_then_else (eq (reg:SI T_REG) (const_int 0))\n \t\t\t   (label_ref (match_dup 6))\n \t\t\t   (pc)))\n-   (set (reg:SI 18) (eq:SI (match_dup 4) (match_dup 5)))\n+   (set (reg:SI T_REG) (eq:SI (match_dup 4) (match_dup 5)))\n    (match_dup 6)]\n   \"\n {\n@@ -663,8 +727,9 @@\n }\")\n \n (define_insn \"cmpgtdi_t\"\n-  [(set (reg:SI 18) (gt:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n+  [(set (reg:SI T_REG)\n+\t(gt:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n+\t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"TARGET_SH2\"\n   \"@\n \tcmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/gt\\\\t%S1,%S0\\;cmp/hi\\\\t%R1,%R0\\\\n%,Ldi%=:\n@@ -673,8 +738,9 @@\n    (set_attr \"type\" \"arith3\")])\n \n (define_insn \"cmpgedi_t\"\n-  [(set (reg:SI 18) (ge:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n-\t\t\t   (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n+  [(set (reg:SI T_REG)\n+\t(ge:SI (match_operand:DI 0 \"arith_reg_operand\" \"r,r\")\n+\t       (match_operand:DI 1 \"arith_reg_or_0_operand\" \"r,N\")))]\n   \"TARGET_SH2\"\n   \"@\n \tcmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/ge\\\\t%S1,%S0\\;cmp/hs\\\\t%R1,%R0\\\\n%,Ldi%=:\n@@ -687,16 +753,18 @@\n ;; -------------------------------------------------------------------------\n \n (define_insn \"cmpgeudi_t\"\n-  [(set (reg:SI 18) (geu:SI (match_operand:DI 0 \"arith_reg_operand\" \"r\")\n-\t\t\t    (match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n+  [(set (reg:SI T_REG)\n+\t(geu:SI (match_operand:DI 0 \"arith_reg_operand\" \"r\")\n+\t\t(match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH2\"\n   \"cmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/hs\\\\t%S1,%S0\\;cmp/hs\\\\t%R1,%R0\\\\n%,Ldi%=:\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"arith3\")])\n \n (define_insn \"cmpgtudi_t\"\n-  [(set (reg:SI 18) (gtu:SI (match_operand:DI 0 \"arith_reg_operand\" \"r\")\n-\t\t\t    (match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n+  [(set (reg:SI T_REG)\n+\t(gtu:SI (match_operand:DI 0 \"arith_reg_operand\" \"r\")\n+\t\t(match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH2\"\n   \"cmp/eq\\\\t%S1,%S0\\;bf{.|/}s\\\\t%,Ldi%=\\;cmp/hi\\\\t%S1,%S0\\;cmp/hi\\\\t%R1,%R0\\\\n%,Ldi%=:\"\n   [(set_attr \"length\" \"8\")\n@@ -706,8 +774,9 @@\n ;; we generate the branch.\n \n (define_expand \"cmpdi\"\n-  [(set (reg:SI 18) (compare (match_operand:DI 0 \"arith_operand\" \"\")\n-\t\t\t     (match_operand:DI 1 \"arith_operand\" \"\")))]\n+  [(set (reg:SI T_REG)\n+\t(compare (match_operand:DI 0 \"arith_operand\" \"\")\n+\t\t (match_operand:DI 1 \"arith_operand\" \"\")))]\n   \"TARGET_SH2\"\n   \"\n {\n@@ -726,7 +795,7 @@\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_reg_operand\" \"%0\")\n \t\t (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"#\"\n   [(set_attr \"length\" \"6\")])\n@@ -735,7 +804,7 @@\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_reg_operand\" \"%0\")\n \t\t (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -757,8 +826,8 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(plus:SI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t\t  (match_operand:SI 2 \"arith_reg_operand\" \"r\"))\n-\t\t (reg:SI 18)))\n-   (set (reg:SI 18)\n+\t\t (reg:SI T_REG)))\n+   (set (reg:SI T_REG)\n \t(ltu:SI (plus:SI (match_dup 1) (match_dup 2)) (match_dup 1)))]\n   \"\"\n   \"addc\t%2,%0\"\n@@ -768,8 +837,8 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(plus:SI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t\t  (match_operand:SI 2 \"arith_reg_operand\" \"r\"))\n-\t\t (reg:SI 18)))\n-   (clobber (reg:SI 18))]\n+\t\t (reg:SI T_REG)))\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"addc\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -792,7 +861,7 @@\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n \t\t (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"#\"\n   [(set_attr \"length\" \"6\")])\n@@ -801,7 +870,7 @@\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n \t\t  (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -823,8 +892,8 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(minus:SI (minus:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t\t    (match_operand:SI 2 \"arith_reg_operand\" \"r\"))\n-\t\t  (reg:SI 18)))\n-   (set (reg:SI 18)\n+\t\t  (reg:SI T_REG)))\n+   (set (reg:SI T_REG)\n \t(gtu:SI (minus:SI (match_dup 1) (match_dup 2)) (match_dup 1)))]\n   \"\"\n   \"subc\t%2,%0\"\n@@ -834,8 +903,8 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(minus:SI (minus:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t\t    (match_operand:SI 2 \"arith_reg_operand\" \"r\"))\n-\t\t  (reg:SI 18)))\n-   (clobber (reg:SI 18))]\n+\t\t  (reg:SI T_REG)))\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"subc\t%2,%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -881,7 +950,8 @@\n ;; of this register for reorg.\n \n (define_insn \"use_sfunc_addr\"\n-  [(set (reg:SI 17) (unspec [(match_operand:SI 0 \"register_operand\" \"r\")] 5))]\n+  [(set (reg:SI PR_REG)\n+\t(unspec [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_SFUNC))]\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n@@ -896,10 +966,10 @@\n \n (define_insn \"udivsi3_i1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n-\t(udiv:SI (reg:SI 4) (reg:SI 5)))\n-   (clobber (reg:SI 18))\n-   (clobber (reg:SI 17))\n-   (clobber (reg:SI 4))\n+\t(udiv:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:SI R4_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"! TARGET_SH4\"\n   \"jsr\t@%1%#\"\n@@ -908,16 +978,16 @@\n \n (define_insn \"udivsi3_i4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=y\")\n-\t(udiv:SI (reg:SI 4) (reg:SI 5)))\n-   (clobber (reg:SI 17))\n-   (clobber (reg:DF 24))\n-   (clobber (reg:DF 26))\n-   (clobber (reg:DF 28))\n-   (clobber (reg:SI 0))\n-   (clobber (reg:SI 1))\n-   (clobber (reg:SI 4))\n-   (clobber (reg:SI 5))\n-   (use (reg:PSI 48))\n+\t(udiv:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:DF DR0_REG))\n+   (clobber (reg:DF DR2_REG))\n+   (clobber (reg:DF DR4_REG))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))\n+   (clobber (reg:SI R4_REG))\n+   (clobber (reg:SI R5_REG))\n+   (use (reg:PSI FPSCR_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"TARGET_SH4 && ! TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n@@ -927,15 +997,15 @@\n \n (define_insn \"udivsi3_i4_single\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=y\")\n-\t(udiv:SI (reg:SI 4) (reg:SI 5)))\n-   (clobber (reg:SI 17))\n-   (clobber (reg:DF 24))\n-   (clobber (reg:DF 26))\n-   (clobber (reg:DF 28))\n-   (clobber (reg:SI 0))\n-   (clobber (reg:SI 1))\n-   (clobber (reg:SI 4))\n-   (clobber (reg:SI 5))\n+\t(udiv:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:DF DR0_REG))\n+   (clobber (reg:DF DR2_REG))\n+   (clobber (reg:DF DR4_REG))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))\n+   (clobber (reg:SI R4_REG))\n+   (clobber (reg:SI R5_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"TARGET_HARD_SH4 && TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n@@ -944,14 +1014,14 @@\n \n (define_expand \"udivsi3\"\n   [(set (match_dup 3) (symbol_ref:SI \"__udivsi3\"))\n-   (set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"\"))\n-   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"\"))\n+   (set (reg:SI R4_REG) (match_operand:SI 1 \"general_operand\" \"\"))\n+   (set (reg:SI R5_REG) (match_operand:SI 2 \"general_operand\" \"\"))\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (udiv:SI (reg:SI 4)\n-\t\t\t    (reg:SI 5)))\n-\t      (clobber (reg:SI 18))\n-\t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 4))\n+\t\t   (udiv:SI (reg:SI R4_REG)\n+\t\t\t    (reg:SI R5_REG)))\n+\t      (clobber (reg:SI T_REG))\n+\t      (clobber (reg:SI PR_REG))\n+\t      (clobber (reg:SI R4_REG))\n \t      (use (match_dup 3))])]\n   \"\"\n   \"\n@@ -987,12 +1057,12 @@\n \n (define_insn \"divsi3_i1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n-\t(div:SI (reg:SI 4) (reg:SI 5)))\n-   (clobber (reg:SI 18))\n-   (clobber (reg:SI 17))\n-   (clobber (reg:SI 1))\n-   (clobber (reg:SI 2))\n-   (clobber (reg:SI 3))\n+\t(div:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:SI R1_REG))\n+   (clobber (reg:SI R2_REG))\n+   (clobber (reg:SI R3_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"! TARGET_SH4\"\n   \"jsr\t@%1%#\"\n@@ -1001,11 +1071,11 @@\n \n (define_insn \"divsi3_i4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=y\")\n-\t(div:SI (reg:SI 4) (reg:SI 5)))\n-   (clobber (reg:SI 17))\n-   (clobber (reg:DF 24))\n-   (clobber (reg:DF 26))\n-   (use (reg:PSI 48))\n+\t(div:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:DF DR0_REG))\n+   (clobber (reg:DF DR2_REG))\n+   (use (reg:PSI FPSCR_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"TARGET_SH4 && ! TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n@@ -1015,11 +1085,11 @@\n \n (define_insn \"divsi3_i4_single\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=y\")\n-\t(div:SI (reg:SI 4) (reg:SI 5)))\n-   (clobber (reg:SI 17))\n-   (clobber (reg:DF 24))\n-   (clobber (reg:DF 26))\n-   (clobber (reg:SI 2))\n+\t(div:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:DF DR0_REG))\n+   (clobber (reg:DF DR2_REG))\n+   (clobber (reg:SI R2_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"TARGET_HARD_SH4 && TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n@@ -1028,16 +1098,16 @@\n \n (define_expand \"divsi3\"\n   [(set (match_dup 3) (symbol_ref:SI \"__sdivsi3\"))\n-   (set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"\"))\n-   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"\"))\n+   (set (reg:SI R4_REG) (match_operand:SI 1 \"general_operand\" \"\"))\n+   (set (reg:SI R5_REG) (match_operand:SI 2 \"general_operand\" \"\"))\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (div:SI (reg:SI 4)\n-\t\t\t   (reg:SI 5)))\n-\t      (clobber (reg:SI 18))\n-\t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 1))\n-\t      (clobber (reg:SI 2))\n-\t      (clobber (reg:SI 3))\n+\t\t   (div:SI (reg:SI R4_REG)\n+\t\t\t   (reg:SI R5_REG)))\n+\t      (clobber (reg:SI T_REG))\n+\t      (clobber (reg:SI PR_REG))\n+\t      (clobber (reg:SI R1_REG))\n+\t      (clobber (reg:SI R2_REG))\n+\t      (clobber (reg:SI R3_REG))\n \t      (use (match_dup 3))])]\n   \"\"\n   \"\n@@ -1075,15 +1145,17 @@\n ;; -------------------------------------------------------------------------\n \n (define_insn \"umulhisi3_i\"\n-  [(set (reg:SI 21)\n-\t(mult:SI (zero_extend:SI (match_operand:HI 0 \"arith_reg_operand\" \"r\"))\n-\t\t (zero_extend:SI (match_operand:HI 1 \"arith_reg_operand\" \"r\"))))]\n+  [(set (reg:SI MACL_REG)\n+\t(mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 0 \"arith_reg_operand\" \"r\"))\n+\t\t (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"arith_reg_operand\" \"r\"))))]\n   \"\"\n   \"mulu\t%1,%0\"\n   [(set_attr \"type\" \"smpy\")])\n \n (define_insn \"mulhisi3_i\"\n-  [(set (reg:SI 21)\n+  [(set (reg:SI MACL_REG)\n \t(mult:SI (sign_extend:SI\n \t\t  (match_operand:HI 0 \"arith_reg_operand\" \"r\"))\n \t\t (sign_extend:SI\n@@ -1093,20 +1165,20 @@\n   [(set_attr \"type\" \"smpy\")])\n \n (define_expand \"mulhisi3\"\n-  [(set (reg:SI 21)\n+  [(set (reg:SI MACL_REG)\n \t(mult:SI (sign_extend:SI\n \t\t  (match_operand:HI 1 \"arith_reg_operand\" \"\"))\n \t\t (sign_extend:SI\n \t\t  (match_operand:HI 2 \"arith_reg_operand\" \"\"))))\n    (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-\t(reg:SI 21))]\n+\t(reg:SI MACL_REG))]\n   \"\"\n   \"\n {\n   rtx first, last;\n \n   first = emit_insn (gen_mulhisi3_i (operands[1], operands[2]));\n-  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, 21));\n+  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, MACL_REG));\n   /* Wrap the sequence in REG_LIBCALL / REG_RETVAL notes so that loop\n      invariant code motion can move it.  */\n   REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last, REG_NOTES (first));\n@@ -1115,20 +1187,20 @@\n }\")\n \n (define_expand \"umulhisi3\"\n-  [(set (reg:SI 21)\n+  [(set (reg:SI MACL_REG)\n \t(mult:SI (zero_extend:SI\n \t\t  (match_operand:HI 1 \"arith_reg_operand\" \"\"))\n \t\t (zero_extend:SI\n \t\t  (match_operand:HI 2 \"arith_reg_operand\" \"\"))))\n    (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-\t(reg:SI 21))]\n+\t(reg:SI MACL_REG))]\n   \"\"\n   \"\n {\n   rtx first, last;\n \n   first = emit_insn (gen_umulhisi3_i (operands[1], operands[2]));\n-  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, 21));\n+  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, MACL_REG));\n   /* Wrap the sequence in REG_LIBCALL / REG_RETVAL notes so that loop\n      invariant code motion can move it.  */\n   REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last, REG_NOTES (first));\n@@ -1141,49 +1213,49 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 1 \"register_operand\" \"=z\")\n-\t(mult:SI (reg:SI 4) (reg:SI 5)))\n-   (clobber (reg:SI 21))\n-   (clobber (reg:SI 18))\n-   (clobber (reg:SI 17))\n-   (clobber (reg:SI 3))\n-   (clobber (reg:SI 2))\n-   (clobber (reg:SI 1))\n+\t(mult:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI MACL_REG))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:SI R3_REG))\n+   (clobber (reg:SI R2_REG))\n+   (clobber (reg:SI R1_REG))\n    (use (match_operand:SI 0 \"arith_reg_operand\" \"r\"))]\n   \"\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_expand \"mulsi3_call\"\n-  [(set (reg:SI 4) (match_operand:SI 1 \"general_operand\" \"\"))\n-   (set (reg:SI 5) (match_operand:SI 2 \"general_operand\" \"\"))\n+  [(set (reg:SI R4_REG) (match_operand:SI 1 \"general_operand\" \"\"))\n+   (set (reg:SI R5_REG) (match_operand:SI 2 \"general_operand\" \"\"))\n    (parallel[(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t  (mult:SI (reg:SI 4)\n-\t\t\t   (reg:SI 5)))\n-\t     (clobber (reg:SI 21))\n-\t     (clobber (reg:SI 18))\n-\t     (clobber (reg:SI 17))\n-\t     (clobber (reg:SI 3))\n-\t     (clobber (reg:SI 2))\n-\t     (clobber (reg:SI 1))\n+\t\t  (mult:SI (reg:SI R4_REG)\n+\t\t\t   (reg:SI R5_REG)))\n+\t     (clobber (reg:SI MACL_REG))\n+\t     (clobber (reg:SI T_REG))\n+\t     (clobber (reg:SI PR_REG))\n+\t     (clobber (reg:SI R3_REG))\n+\t     (clobber (reg:SI R2_REG))\n+\t     (clobber (reg:SI R1_REG))\n \t     (use (match_operand:SI 3 \"register_operand\" \"\"))])]\n   \"\"\n   \"\")\n \n (define_insn \"mul_l\"\n-  [(set (reg:SI 21)\n+  [(set (reg:SI MACL_REG)\n \t(mult:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\")\n \t\t (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH2\"\n   \"mul.l\t%1,%0\"\n   [(set_attr \"type\" \"dmpy\")])\n \n (define_expand \"mulsi3\"\n-  [(set (reg:SI 21)\n+  [(set (reg:SI MACL_REG)\n \t(mult:SI  (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t  (match_operand:SI 2 \"arith_reg_operand\" \"\")))\n    (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-\t(reg:SI 21))]\n+\t(reg:SI MACL_REG))]\n   \"\"\n   \"\n {\n@@ -1219,12 +1291,14 @@\n }\")\n \n (define_insn \"mulsidi3_i\"\n-  [(set (reg:SI 20)\n+  [(set (reg:SI MACH_REG)\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))\n-   (set (reg:SI 21)\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (sign_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n+\t   (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+\t  (const_int 32))))\n+   (set (reg:SI MACL_REG)\n \t(mult:SI (match_dup 0)\n \t\t (match_dup 1)))]\n   \"TARGET_SH2\"\n@@ -1233,17 +1307,19 @@\n \n (define_insn \"mulsidi3\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))\n-   (clobber (reg:DI 20))]\n+\t(mult:DI\n+\t (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n+\t (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))\n+   (clobber (reg:DI MACH_REG))]\n   \"TARGET_SH2\"\n   \"#\")\n \n (define_split\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\"))))\n-   (clobber (reg:DI 20))]\n+\t(mult:DI\n+\t (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\"))))\n+   (clobber (reg:DI MACH_REG))]\n   \"TARGET_SH2\"\n   [(const_int 0)]\n   \"\n@@ -1253,20 +1329,22 @@\n \n   emit_insn (gen_mulsidi3_i (operands[1], operands[2]));\n \n-  emit_move_insn (low_dst, gen_rtx_REG (SImode, 21));\n-  emit_move_insn (high_dst, gen_rtx_REG (SImode, 20));\n+  emit_move_insn (low_dst, gen_rtx_REG (SImode, MACL_REG));\n+  emit_move_insn (high_dst, gen_rtx_REG (SImode, MACH_REG));\n   /* We need something to tag the possible REG_EQUAL notes on to.  */\n   emit_move_insn (operands[0], operands[0]);\n   DONE;\n }\")\n \n (define_insn \"umulsidi3_i\"\n-  [(set (reg:SI 20)\n+  [(set (reg:SI MACH_REG)\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t\t\t       (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))\n-   (set (reg:SI 21)\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (zero_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n+\t   (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+\t  (const_int 32))))\n+   (set (reg:SI MACL_REG)\n \t(mult:SI (match_dup 0)\n \t\t (match_dup 1)))]\n   \"TARGET_SH2\"\n@@ -1275,17 +1353,18 @@\n \n (define_insn \"umulsidi3\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))\n-   (clobber (reg:DI 20))]\n+\t(mult:DI\n+\t (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n+\t (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))\n+   (clobber (reg:DI MACH_REG))]\n   \"TARGET_SH2\"\n   \"#\")\n \n (define_split\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\"))))\n-   (clobber (reg:DI 20))]\n+   (clobber (reg:DI MACH_REG))]\n   \"TARGET_SH2\"\n   [(const_int 0)]\n   \"\n@@ -1295,40 +1374,45 @@\n \n   emit_insn (gen_umulsidi3_i (operands[1], operands[2]));\n \n-  emit_move_insn (low_dst, gen_rtx_REG (SImode, 21));\n-  emit_move_insn (high_dst, gen_rtx_REG (SImode, 20));\n+  emit_move_insn (low_dst, gen_rtx_REG (SImode, MACL_REG));\n+  emit_move_insn (high_dst, gen_rtx_REG (SImode, MACH_REG));\n   /* We need something to tag the possible REG_EQUAL notes on to.  */\n   emit_move_insn (operands[0], operands[0]);\n   DONE;\n }\")\n \n (define_insn \"smulsi3_highpart_i\"\n-  [(set (reg:SI 20)\n+  [(set (reg:SI MACH_REG)\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))\n-   (clobber (reg:SI 21))]\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (sign_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n+\t   (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+\t  (const_int 32))))\n+   (clobber (reg:SI MACL_REG))]\n   \"TARGET_SH2\"\n   \"dmuls.l\t%1,%0\"\n   [(set_attr \"type\" \"dmpy\")])\n \n (define_expand \"smulsi3_highpart\"\n-  [(parallel [(set (reg:SI 20)\n-\t\t   (truncate:SI\n-\t\t    (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n-\t\t\t\t\t  (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\")))\n-\t\t\t\t (const_int 32))))\n-\t      (clobber (reg:SI 21))])\n+  [(parallel\n+    [(set (reg:SI MACH_REG)\n+\t  (truncate:SI\n+\t   (lshiftrt:DI\n+\t    (mult:DI\n+\t     (sign_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t     (sign_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\")))\n+\t    (const_int 32))))\n+    (clobber (reg:SI MACL_REG))])\n    (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-\t(reg:SI 20))]\n+\t(reg:SI MACH_REG))]\n   \"TARGET_SH2\"\n   \"\n {\n   rtx first, last;\n \n   first = emit_insn (gen_smulsi3_highpart_i (operands[1], operands[2]));\n-  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, 20));\n+  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, MACH_REG));\n   /* Wrap the sequence in REG_LIBCALL / REG_RETVAL notes so that loop\n      invariant code motion can move it.  */\n   REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last, REG_NOTES (first));\n@@ -1344,32 +1428,37 @@\n }\")\n \n (define_insn \"umulsi3_highpart_i\"\n-  [(set (reg:SI 20)\n+  [(set (reg:SI MACH_REG)\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t\t\t       (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))\n-   (clobber (reg:SI 21))]\n+\t (lshiftrt:DI\n+\t  (mult:DI\n+\t   (zero_extend:DI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n+\t   (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+\t  (const_int 32))))\n+   (clobber (reg:SI MACL_REG))]\n   \"TARGET_SH2\"\n   \"dmulu.l\t%1,%0\"\n   [(set_attr \"type\" \"dmpy\")])\n \n (define_expand \"umulsi3_highpart\"\n-  [(parallel [(set (reg:SI 20)\n-\t\t   (truncate:SI\n-\t\t    (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n-\t\t\t\t\t  (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\")))\n-\t\t\t\t (const_int 32))))\n-\t      (clobber (reg:SI 21))])\n+  [(parallel\n+    [(set (reg:SI MACH_REG)\n+\t  (truncate:SI\n+\t   (lshiftrt:DI\n+\t    (mult:DI\n+\t     (zero_extend:DI (match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+\t     (zero_extend:DI (match_operand:SI 2 \"arith_reg_operand\" \"\")))\n+\t    (const_int 32))))\n+    (clobber (reg:SI MACL_REG))])\n    (set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-\t(reg:SI 20))]\n+\t(reg:SI MACH_REG))]\n   \"TARGET_SH2\"\n   \"\n {\n   rtx first, last;\n \n   first = emit_insn (gen_umulsi3_highpart_i (operands[1], operands[2]));\n-  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, 20));\n+  last = emit_move_insn (operands[0], gen_rtx_REG (SImode, MACH_REG));\n   /* Wrap the sequence in REG_LIBCALL / REG_RETVAL notes so that loop\n      invariant code motion can move it.  */\n   REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last, REG_NOTES (first));\n@@ -1431,7 +1520,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(rotate:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t   (const_int 1)))\n-   (set (reg:SI 18)\n+   (set (reg:SI T_REG)\n \t(lshiftrt:SI (match_dup 1) (const_int 31)))]\n   \"\"\n   \"rotl\t%0\"\n@@ -1441,7 +1530,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(rotate:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t   (const_int 31)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"rotr\t%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -1573,7 +1662,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"! sh_dynamicalize_shift_p (operands[2])\"\n   \"#\"\n   [(set (attr \"length\")\n@@ -1590,9 +1679,9 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n-  [(use (reg:SI 0))]\n+  [(use (reg:SI R0_REG))]\n   \"\n {\n   gen_shifty_op (ASHIFT, operands);\n@@ -1603,7 +1692,7 @@\n   [(parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t\t   (ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:SI 18))])]\n+\t      (clobber (reg:SI T_REG))])]\n   \"\"\n   \"\n {\n@@ -1623,7 +1712,7 @@\n   [(set (match_operand:HI 0 \"arith_reg_operand\" \"=r\")\n \t(ashift:HI (match_operand:HI 1 \"arith_reg_operand\" \"0\")\n \t\t   (match_operand:HI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"#\"\n   [(set (attr \"length\")\n@@ -1638,9 +1727,9 @@\n   [(set (match_operand:HI 0 \"arith_reg_operand\" \"\")\n \t(ashift:HI (match_operand:HI 1 \"arith_reg_operand\" \"\")\n \t\t   (match_operand:HI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n-  [(use (reg:SI 0))]\n+  [(use (reg:SI R0_REG))]\n   \"\n {\n   gen_shifty_hi_op (ASHIFT, operands);\n@@ -1655,7 +1744,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"M\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"INTVAL (operands[2]) == 1\"\n   \"shar\t%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -1691,7 +1780,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t     (const_int 31)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"#\"\n   [(set_attr \"length\" \"4\")])\n@@ -1700,7 +1789,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t     (const_int 31)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   [(const_int 0)]\n   \"\n@@ -1713,8 +1802,8 @@\n (define_insn \"ashlsi_c\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\") (const_int 1)))\n-   (set (reg:SI 18) (lt:SI (match_dup 1)\n-\t\t\t   (const_int 0)))]\n+   (set (reg:SI T_REG)\n+\t(lt:SI (match_dup 1) (const_int 0)))]\n   \"\"\n   \"shll\t%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -1728,11 +1817,11 @@\n   [(set_attr \"type\" \"dyn_shift\")])\n \n (define_insn \"ashrsi3_n\"\n-  [(set (reg:SI 4)\n-\t(ashiftrt:SI (reg:SI 4)\n+  [(set (reg:SI R4_REG)\n+\t(ashiftrt:SI (reg:SI R4_REG)\n \t\t     (match_operand:SI 0 \"const_int_operand\" \"i\")))\n-   (clobber (reg:SI 18))\n-   (clobber (reg:SI 17))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI PR_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"\"\n   \"jsr\t@%1%#\"\n@@ -1743,7 +1832,7 @@\n   [(parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t\t   (ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t\t\t(match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:SI 18))])]\n+\t      (clobber (reg:SI T_REG))])]\n   \"\"\n   \"if (expand_ashiftrt (operands)) DONE; else FAIL;\")\n \n@@ -1763,7 +1852,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"M\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"CONST_OK_FOR_M (INTVAL (operands[2]))\"\n   \"shlr\t%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -1781,7 +1870,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"! sh_dynamicalize_shift_p (operands[2])\"\n   \"#\"\n   [(set (attr \"length\")\n@@ -1798,9 +1887,9 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n-  [(use (reg:SI 0))]\n+  [(use (reg:SI R0_REG))]\n   \"\n {\n   gen_shifty_op (LSHIFTRT, operands);\n@@ -1811,7 +1900,7 @@\n   [(parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t\t   (lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n \t\t\t\t(match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:SI 18))])]\n+\t      (clobber (reg:SI T_REG))])]\n   \"\"\n   \"\n {\n@@ -1835,7 +1924,7 @@\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(ashift:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n \t\t   (const_int 1)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"shll\t%R0\\;rotcl\t%S0\"\n   [(set_attr \"length\" \"4\")\n@@ -1845,7 +1934,7 @@\n   [(parallel [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n \t\t   (ashift:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")\n \t\t\t      (match_operand:DI 2 \"immediate_operand\" \"\")))\n-\t      (clobber (reg:SI 18))])]\n+\t      (clobber (reg:SI T_REG))])]\n   \"\"\n   \"{ if (GET_CODE (operands[2]) != CONST_INT\n \t || INTVAL (operands[2]) != 1) FAIL;} \")\n@@ -1856,7 +1945,7 @@\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n \t\t     (const_int 1)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"shlr\t%S0\\;rotcr\t%R0\"\n   [(set_attr \"length\" \"4\")\n@@ -1866,7 +1955,7 @@\n   [(parallel [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n \t\t   (lshiftrt:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")\n \t\t\t       (match_operand:DI 2 \"immediate_operand\" \"\")))\n-\t     (clobber (reg:SI 18))])]\n+\t     (clobber (reg:SI T_REG))])]\n   \"\"\n   \"{ if (GET_CODE (operands[2]) != CONST_INT\n \t || INTVAL (operands[2]) != 1) FAIL;} \")\n@@ -1877,7 +1966,7 @@\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n \t\t     (const_int 1)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"shar\t%S0\\;rotcr\t%R0\"\n   [(set_attr \"length\" \"4\")\n@@ -1887,7 +1976,7 @@\n   [(parallel [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n \t\t   (ashiftrt:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")\n \t\t\t\t(match_operand:DI 2 \"immediate_operand\" \"\")))\n-\t      (clobber (reg:SI 18))])]\n+\t      (clobber (reg:SI T_REG))])]\n   \"\"\n   \"{ if (GET_CODE (operands[2]) != CONST_INT\n \t || INTVAL (operands[2]) != 1) FAIL; } \")\n@@ -1900,7 +1989,7 @@\n \t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"(unsigned)INTVAL (operands[2]) < 32\"\n-  [(use (reg:SI 0))]\n+  [(use (reg:SI R0_REG))]\n   \"if (gen_shl_and (operands[0], operands[2], operands[3], operands[1])) FAIL;\n    DONE;\")\n \n@@ -1909,9 +1998,9 @@\n \t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"(unsigned)INTVAL (operands[2]) < 32\"\n-  [(use (reg:SI 0))]\n+  [(use (reg:SI R0_REG))]\n   \"if (gen_shl_and (operands[0], operands[2], operands[3], operands[1])) FAIL;\n    DONE;\")\n \n@@ -1920,7 +2009,7 @@\n \t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"shl_and_kind (operands[2], operands[3], 0) == 1\"\n  \"#\"\n   [(set (attr \"length\")\n@@ -1946,7 +2035,7 @@\n \t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t(match_operand:SI 3 \"const_int_operand\" \"n\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"shl_and_kind (operands[2], operands[3], 0) == 2\"\n  \"#\"\n   [(set (attr \"length\")\n@@ -1965,12 +2054,15 @@\n ;; reload.\n (define_insn \"and_shl_scratch\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n-\t(lshiftrt:SI (ashift:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n-\t\t\t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"N,n\"))\n-\t\t\t\t\t(match_operand:SI 3 \"\" \"0,r\"))\n-\t\t\t\t(match_operand:SI 4 \"const_int_operand\" \"n,n\"))\n-\t\t     (match_operand:SI 5 \"const_int_operand\" \"n,n\")))\n-   (clobber (reg:SI 18))]\n+\t(lshiftrt:SI\n+\t (ashift:SI\n+\t  (and:SI\n+\t   (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\" \"N,n\"))\n+\t   (match_operand:SI 3 \"\" \"0,r\"))\n+\t  (match_operand:SI 4 \"const_int_operand\" \"n,n\"))\n+\t (match_operand:SI 5 \"const_int_operand\" \"n,n\")))\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"#\"\n   [(set (attr \"length\")\n@@ -1987,14 +2079,17 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n-\t(lshiftrt:SI (ashift:SI (and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n-\t\t\t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"N,n\"))\n-\t\t\t\t\t(match_operand:SI 3 \"register_operand\" \"0,r\"))\n-\t\t\t\t(match_operand:SI 4 \"const_int_operand\" \"n,n\"))\n-\t\t     (match_operand:SI 5 \"const_int_operand\" \"n,n\")))\n-   (clobber (reg:SI 18))]\n-  \"\"\n-  [(use (reg:SI 0))]\n+\t(lshiftrt:SI\n+\t (ashift:SI\n+\t  (and:SI\n+\t   (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,0\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\" \"N,n\"))\n+\t   (match_operand:SI 3 \"register_operand\" \"0,r\"))\n+\t  (match_operand:SI 4 \"const_int_operand\" \"n,n\"))\n+\t (match_operand:SI 5 \"const_int_operand\" \"n,n\")))\n+   (clobber (reg:SI T_REG))]\n+  \"\"\n+  [(use (reg:SI R0_REG))]\n   \"\n {\n   rtx and_source = operands[rtx_equal_p (operands[0], operands[1]) ? 3 : 1];\n@@ -2017,23 +2112,25 @@\n ;; signed left/right shift combination.\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (sign_extract:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n-\t\t\t (const_int 0)))\n-   (clobber (reg:SI 18))]\n-  \"\"\n-  [(use (reg:SI 0))]\n+        (sign_extract:SI\n+\t (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n+\t (const_int 0)))\n+   (clobber (reg:SI T_REG))]\n+  \"\"\n+  [(use (reg:SI R0_REG))]\n   \"if (gen_shl_sext (operands[0], operands[2], operands[3], operands[1])) FAIL;\n    DONE;\")\n \n (define_insn \"shl_sext_ext\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (sign_extract:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n-\t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n-\t\t\t (const_int 0)))\n-   (clobber (reg:SI 18))]\n+        (sign_extract:SI\n+\t (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n+\t (const_int 0)))\n+   (clobber (reg:SI T_REG))]\n   \"(unsigned)shl_sext_kind (operands[2], operands[3], 0) - 1 < 5\"\n   \"#\"\n   [(set (attr \"length\")\n@@ -2062,7 +2159,7 @@\n \t\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"n\"))\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")\n \t\t\t (const_int 0)))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"(shl_sext_kind (operands[2], operands[3], 0) & ~1) == 6\"\n   \"#\"\n   [(set (attr \"length\")\n@@ -2106,10 +2203,10 @@\n \n (define_insn \"negc\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(neg:SI (plus:SI (reg:SI 18)\n+\t(neg:SI (plus:SI (reg:SI T_REG)\n \t\t\t (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))\n-   (set (reg:SI 18)\n-\t(ne:SI (ior:SI (reg:SI 18) (match_dup 1))\n+   (set (reg:SI T_REG)\n+\t(ne:SI (ior:SI (reg:SI T_REG) (match_dup 1))\n \t       (const_int 0)))]\n   \"\"\n   \"negc\t%1,%0\"\n@@ -2118,7 +2215,7 @@\n (define_expand \"negdi2\"\n   [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n \t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n-   (clobber (reg:SI 18))]\n+   (clobber (reg:SI T_REG))]\n   \"\"\n   \"\n {\n@@ -2220,27 +2317,27 @@\n ;; define push and pop so it is easy for sh.c\n \n (define_expand \"push\"\n-  [(set (mem:SI (pre_dec:SI (reg:SI 15)))\n+  [(set (mem:SI (pre_dec:SI (reg:SI SP_REG)))\n \t(match_operand:SI 0 \"register_operand\" \"r,l,x\"))]\n   \"\"\n   \"\")\n \n (define_expand \"pop\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,l,x\")\n-\t(mem:SI (post_inc:SI (reg:SI 15))))]\n+\t(mem:SI (post_inc:SI (reg:SI SP_REG))))]\n   \"\"\n   \"\")\n \n (define_expand \"push_e\"\n-  [(parallel [(set (mem:SF (pre_dec:SI (reg:SI 15)))\n+  [(parallel [(set (mem:SF (pre_dec:SI (reg:SI SP_REG)))\n \t\t   (match_operand:SF 0 \"\" \"\"))\n-\t      (use (reg:PSI 48))\n+\t      (use (reg:PSI FPSCR_REG))\n \t      (clobber (scratch:SI))])]\n   \"\"\n   \"\")\n \n (define_insn \"push_fpul\"\n-  [(set (mem:SF (pre_dec:SI (reg:SI 15))) (reg:SF 22))]\n+  [(set (mem:SF (pre_dec:SI (reg:SI SP_REG))) (reg:SF FPUL_REG))]\n   \"TARGET_SH3E\"\n   \"sts.l\tfpul,@-r15\"\n   [(set_attr \"type\" \"store\")\n@@ -2249,31 +2346,32 @@\n ;; DFmode pushes for sh4 require a lot of what is defined for movdf_i4,\n ;; so use that.\n (define_expand \"push_4\"\n-  [(parallel [(set (mem:DF (pre_dec:SI (reg:SI 15))) (match_operand:DF 0 \"\" \"\"))\n-\t      (use (reg:PSI 48))\n+  [(parallel [(set (mem:DF (pre_dec:SI (reg:SI SP_REG)))\n+\t\t   (match_operand:DF 0 \"\" \"\"))\n+\t      (use (reg:PSI FPSCR_REG))\n \t      (clobber (scratch:SI))])]\n   \"\"\n   \"\")\n \n (define_expand \"pop_e\"\n   [(parallel [(set (match_operand:SF 0 \"\" \"\")\n-\t      (mem:SF (post_inc:SI (reg:SI 15))))\n-\t      (use (reg:PSI 48))\n+\t      (mem:SF (post_inc:SI (reg:SI SP_REG))))\n+\t      (use (reg:PSI FPSCR_REG))\n \t      (clobber (scratch:SI))])]\n   \"\"\n   \"\")\n \n (define_insn \"pop_fpul\"\n-  [(set (reg:SF 22) (mem:SF (post_inc:SI (reg:SI 15))))]\n+  [(set (reg:SF FPUL_REG) (mem:SF (post_inc:SI (reg:SI SP_REG))))]\n   \"TARGET_SH3E\"\n   \"lds.l\t@r15+,fpul\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"hit_stack\" \"yes\")])\n \n (define_expand \"pop_4\"\n   [(parallel [(set (match_operand:DF 0 \"\" \"\")\n-\t\t   (mem:DF (post_inc:SI (reg:SI 15))))\n-\t      (use (reg:PSI 48))\n+\t\t   (mem:DF (post_inc:SI (reg:SI SP_REG))))\n+\t      (use (reg:PSI FPSCR_REG))\n \t      (clobber (scratch:SI))])]\n   \"\"\n   \"\")\n@@ -2283,17 +2381,17 @@\n ;; They don't disappear completely, because the T reg is a fixed hard reg.\n \n (define_insn \"clrt\"\n-  [(set (reg:SI 18) (const_int 0))]\n+  [(set (reg:SI T_REG) (const_int 0))]\n   \"\"\n   \"clrt\")\n \n (define_insn \"sett\"\n-  [(set (reg:SI 18) (const_int 1))]\n+  [(set (reg:SI T_REG) (const_int 1))]\n   \"\"\n   \"sett\")\n \n ;; t/r must come after r/r, lest reload will try to reload stuff like\n-;; (set (subreg:SI (mem:QI (plus:SI (reg:SI 15 r15) (const_int 12)) 0) 0)\n+;; (set (subreg:SI (mem:QI (plus:SI (reg:SI SP_REG) (const_int 12)) 0) 0)\n ;; (made from (set (subreg:SI (reg:QI 73) 0) ) into T.\n (define_insn \"movsi_i\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"=r,r,t,r,r,r,m,<,<,xl,x,l,r\")\n@@ -2373,7 +2471,7 @@\n \n (define_expand \"ic_invalidate_line\"\n   [(parallel [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"+r\")\n-\t\t\t\t(match_dup 1)] 12)\n+\t\t\t\t(match_dup 1)] UNSPEC_ICACHE)\n \t      (clobber (scratch:SI))])]\n   \"TARGET_HARD_SH4\"\n   \"\n@@ -2389,7 +2487,8 @@\n ;; thus we clear the V bit of a matching entry if there is one.\n (define_insn \"ic_invalidate_line_i\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t     (match_operand:SI 1 \"register_operand\" \"r\")] 12)\n+\t\t     (match_operand:SI 1 \"register_operand\" \"r\")]\n+\t\t     UNSPEC_ICACHE)\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n   \"TARGET_HARD_SH4\"\n   \"ocbwb\\\\t@%0\\;extu.w\\\\t%0,%2\\;or\\\\t%1,%2\\;mov.l\\\\t%0,@%2\"\n@@ -2650,7 +2749,7 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"memory_operand\"  \"\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-   (clobber (reg:SI 0))]\n+   (clobber (reg:SI R0_REG))]\n   \"TARGET_SH4 && reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (use (match_dup 2))\n@@ -2660,7 +2759,7 @@\n (define_expand \"reload_indf\"\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t\t   (match_operand:DF 1 \"immediate_operand\" \"FQ\"))\n-\t      (use (reg:PSI 48))\n+\t      (use (reg:PSI FPSCR_REG))\n \t      (clobber (match_operand:SI 2 \"register_operand\" \"=&z\"))])]\n   \"\"\n   \"\")\n@@ -2822,7 +2921,7 @@\n ;; won't get a bogus tertiary reload.\n ;; We use tertiary_reload_operand instead of memory_operand here because\n ;; memory_operand rejects operands that are not directly addressible, e.g.:\n-;; (mem:SF (plus:SI (reg:SI 14 r14)\n+;; (mem:SF (plus:SI (reg:SI FP_REG)\n ;;         (const_int 132)))\n \n (define_expand \"reload_outsf\"\n@@ -2890,7 +2989,7 @@\n \t(match_operand:SI 1 \"\" \"\"))\n    (clobber (match_operand 2 \"register_operand\" \"\"))]\n   \"! reload_in_progress && ! reload_completed\"\n-  [(use (reg:SI 0))]\n+  [(use (reg:SI R0_REG))]\n   \"\n {\n   rtx addr, reg, const_int;\n@@ -2917,7 +3016,7 @@\n \t(match_operand:SI 0 \"register_operand\" \"\"))\n    (clobber (match_operand 2 \"register_operand\" \"\"))]\n   \"! reload_in_progress && ! reload_completed\"\n-  [(use (reg:SI 0))]\n+  [(use (reg:SI R0_REG))]\n   \"\n {\n   rtx addr, reg, const_int;\n@@ -3015,12 +3114,12 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(match_operand:SF 1 \"register_operand\" \"\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-   (clobber (reg:SI 22))]\n+   (clobber (reg:SI FPUL_REG))]\n   \"\"\n-  [(parallel [(set (reg:SF 22) (match_dup 1))\n+  [(parallel [(set (reg:SF FPUL_REG) (match_dup 1))\n \t      (use (match_dup 2))\n \t      (clobber (scratch:SI))])\n-   (parallel [(set (match_dup 0) (reg:SF 22))\n+   (parallel [(set (match_dup 0) (reg:SF FPUL_REG))\n \t      (use (match_dup 2))\n \t      (clobber (scratch:SI))])]\n   \"\")\n@@ -3050,7 +3149,7 @@\n (define_expand \"reload_insf\"\n   [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t\t   (match_operand:SF 1 \"immediate_operand\" \"FQ\"))\n-\t      (use (reg:PSI 48))\n+\t      (use (reg:PSI FPSCR_REG))\n \t      (clobber (match_operand:SI 2 \"register_operand\" \"=&z\"))])]\n   \"\"\n   \"\")\n@@ -3084,7 +3183,7 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"memory_operand\" \"\"))\n-   (clobber (reg:SI 0))]\n+   (clobber (reg:SI R0_REG))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n@@ -3094,15 +3193,15 @@\n ;; ------------------------------------------------------------------------\n \n (define_insn \"branch_true\"\n-  [(set (pc) (if_then_else (ne (reg:SI 18) (const_int 0))\n+  [(set (pc) (if_then_else (ne (reg:SI T_REG) (const_int 0))\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n   \"* return output_branch (1, insn, operands);\"\n   [(set_attr \"type\" \"cbranch\")])\n \n (define_insn \"branch_false\"\n-  [(set (pc) (if_then_else (eq (reg:SI 18) (const_int 0))\n+  [(set (pc) (if_then_else (eq (reg:SI T_REG) (const_int 0))\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n \t\t\t   (pc)))]\n   \"\"\n@@ -3114,7 +3213,8 @@\n ;; The const_int_operand is distinct for each branch target; it avoids\n ;; unwanted matches with redundant_insn.\n (define_insn \"block_branch_redirect\"\n-  [(set (pc) (unspec [(match_operand 0 \"const_int_operand\" \"\")] 4))]\n+  [(set (pc) (unspec [(match_operand 0 \"const_int_operand\" \"\")]\n+\t\t     UNSPEC_BBR))]\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n@@ -3123,7 +3223,7 @@\n ;; for the following branch.\n (define_insn \"indirect_jump_scratch\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(unspec [(match_operand 1 \"const_int_operand\" \"\")] 4))]\n+\t(unspec [(match_operand 1 \"const_int_operand\" \"\")] UNSPEC_BBR))]\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n@@ -3132,31 +3232,31 @@\n \n (define_expand \"beq\"\n   [(set (pc)\n-\t(if_then_else (ne (reg:SI 18) (const_int 0))\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n   \"from_compare (operands, EQ);\")\n \n (define_expand \"bne\"\n   [(set (pc)\n-\t(if_then_else (eq (reg:SI 18) (const_int 0))\n+\t(if_then_else (eq (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n   \"from_compare (operands, EQ);\")\n \n (define_expand \"bgt\"\n   [(set (pc)\n-\t(if_then_else (ne (reg:SI 18) (const_int 0))\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n   \"from_compare (operands, GT);\")\n \n (define_expand \"blt\"\n   [(set (pc)\n-\t(if_then_else (eq (reg:SI 18) (const_int 0))\n+\t(if_then_else (eq (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -3175,7 +3275,7 @@\n \n (define_expand \"ble\"\n   [(set (pc)\n-\t(if_then_else (eq (reg:SI 18) (const_int 0))\n+\t(if_then_else (eq (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -3196,7 +3296,7 @@\n \n (define_expand \"bge\"\n   [(set (pc)\n-\t(if_then_else (ne (reg:SI 18) (const_int 0))\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -3217,31 +3317,31 @@\n \n (define_expand \"bgtu\"\n   [(set (pc)\n-\t(if_then_else (ne (reg:SI 18) (const_int 0))\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n   \"from_compare (operands, GTU); \")\n \n (define_expand \"bltu\"\n   [(set (pc)\n-\t\t  (if_then_else (eq (reg:SI 18) (const_int 0))\n-\t\t\t\t(label_ref (match_operand 0 \"\" \"\"))\n-\t\t\t\t(pc)))]\n+\t(if_then_else (eq (reg:SI T_REG) (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n   \"\"\n   \"from_compare (operands, GEU);\")\n \n (define_expand \"bgeu\"\n   [(set (pc)\n-\t(if_then_else (ne (reg:SI 18) (const_int 0))\n+\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n   \"from_compare (operands, GEU);\")\n \n (define_expand \"bleu\"\n   [(set (pc)\n-\t(if_then_else (eq (reg:SI 18) (const_int 0))\n+\t(if_then_else (eq (reg:SI T_REG) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -3269,8 +3369,8 @@\n (define_insn \"calli\"\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:SI 48))\n-   (clobber (reg:SI 17))]\n+   (use (reg:SI FPSCR_REG))\n+   (clobber (reg:SI PR_REG))]\n   \"\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"call\")\n@@ -3284,9 +3384,9 @@\n (define_insn \"calli_pcrel\"\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:SI 48))\n+   (use (reg:SI FPSCR_REG))\n    (use (match_operand 2 \"\" \"\"))\n-   (clobber (reg:SI 17))]\n+   (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2\"\n   \"bsrf\t%0\\\\n%O2:%#\"\n   [(set_attr \"type\" \"call\")\n@@ -3299,8 +3399,8 @@\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:SI 48))\n-   (clobber (reg:SI 17))]\n+   (use (reg:SI FPSCR_REG))\n+   (clobber (reg:SI PR_REG))]\n   \"\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"call\")\n@@ -3313,9 +3413,9 @@\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:SI 48))\n+   (use (reg:SI FPSCR_REG))\n    (use (match_operand 3 \"\" \"\"))\n-   (clobber (reg:SI 17))]\n+   (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2\"\n   \"bsrf\t%1\\\\n%O3:%#\"\n   [(set_attr \"type\" \"call\")\n@@ -3327,8 +3427,8 @@\n (define_expand \"call\"\n   [(parallel [(call (mem:SI (match_operand 0 \"arith_reg_operand\" \"\"))\n \t\t\t    (match_operand 1 \"\" \"\"))\n-\t      (use (reg:SI 48))\n-\t      (clobber (reg:SI 17))])]\n+\t      (use (reg:SI FPSCR_REG))\n+\t      (clobber (reg:SI PR_REG))])]\n   \"\"\n   \"\n {\n@@ -3354,8 +3454,8 @@\n   [(parallel [(set (match_operand 0 \"arith_reg_operand\" \"\")\n \t\t   (call (mem:SI (match_operand 1 \"arith_reg_operand\" \"\"))\n \t\t\t\t (match_operand 2 \"\" \"\")))\n-\t      (use (reg:SI 48))\n-\t      (clobber (reg:SI 17))])]\n+\t      (use (reg:SI FPSCR_REG))\n+\t      (clobber (reg:SI PR_REG))])]\n   \"\"\n   \"\n {\n@@ -3445,7 +3545,7 @@\n ;; ------------------------------------------------------------------------\n \n (define_insn \"dect\"\n-  [(set (reg:SI 18)\n+  [(set (reg:SI T_REG)\n \t(eq:SI (match_operand:SI 0 \"arith_reg_operand\" \"+r\") (const_int 1)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (const_int -1)))]\n   \"TARGET_SH2\"\n@@ -3463,17 +3563,19 @@\n ;; within range,\n \n (define_insn \"mova\"\n-  [(set (reg:SI 0)\n-\t(unspec [(label_ref (match_operand 0 \"\" \"\"))] 1))]\n+  [(set (reg:SI R0_REG)\n+\t(unspec [(label_ref (match_operand 0 \"\" \"\"))] UNSPEC_MOVA))]\n   \"\"\n   \"mova\t%O0,r0\"\n   [(set_attr \"in_delay_slot\" \"no\")\n    (set_attr \"type\" \"arith\")])\n \n (define_expand \"GOTaddr2picreg\"\n-  [(set (reg:SI 0) (const (unspec [(const (unspec [(match_dup 1)] 6))] 1)))\n-  (set (match_dup 0) (const (unspec [(match_dup 1)] 6)))\n-  (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI 0)))]\n+  [(set (reg:SI R0_REG)\n+\t(const (unspec [(const (unspec [(match_dup 1)] UNSPEC_PIC))]\n+\t\t       UNSPEC_MOVA)))\n+   (set (match_dup 0) (const (unspec [(match_dup 1)] UNSPEC_PIC)))\n+   (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n   \"\" \"\n {\n   operands[0] = pic_offset_table_rtx;\n@@ -3485,15 +3587,16 @@\n (define_expand \"sym_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n \t(const (minus:SI\n-\t\t(unspec [(match_operand:SI 1 \"\" \"\")] 6)\n+\t\t(unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PIC)\n \t\t(const (plus:SI\n-\t\t\t(unspec [(label_ref (match_operand:SI 2 \"\" \"\"))] 6)\n+\t\t\t(unspec [(label_ref (match_operand:SI 2 \"\" \"\"))]\n+\t\t\t\tUNSPEC_PIC)\n \t\t\t(const_int 2))))))]\n   \"\" \"\")\n \n (define_expand \"symGOT2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n-        (const (unspec [(match_operand:SI 1 \"\" \"\")] 7)))\n+        (const (unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_GOT)))\n   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))\n   (set (match_dup 0) (mem:SI (match_dup 0)))]\n   \"\"\n@@ -3505,7 +3608,7 @@\n \n (define_expand \"symGOTOFF2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n-\t(const (unspec [(match_operand:SI 1 \"\" \"\")] 8)))\n+\t(const (unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_GOTOFF)))\n   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))]\n   \"\"\n   \"\n@@ -3518,10 +3621,10 @@\n   [(set (match_operand:SI 0 \"\" \"\")\n \t(const (minus:SI\n \t\t(plus:SI (pc)\n-\t\t\t (unspec [(match_operand:SI 1 \"\" \"\")] 9))\n+\t\t\t (unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT))\n \t\t(const\n \t\t (plus:SI\n-\t\t  (unspec [(label_ref (match_operand:SI 2 \"\" \"\"))] 6)\n+\t\t  (unspec [(label_ref (match_operand:SI 2 \"\" \"\"))] UNSPEC_PIC)\n \t\t  (const_int 2))))))\n    (use (match_dup 3))]\n   ;; Even though the PIC register is not really used by the call\n@@ -3581,11 +3684,11 @@\n   [(set (match_operand:SI 4 \"\" \"\") (match_operand:SI 0 \"arith_reg_operand\" \"\"))\n    (set (match_dup 4) (minus:SI (match_dup 4)\n \t\t\t\t(match_operand:SI 1 \"arith_operand\" \"\")))\n-   (set (reg:SI 18)\n+   (set (reg:SI T_REG)\n \t(gtu:SI (match_dup 4)\n \t\t(match_operand:SI 2 \"arith_reg_operand\" \"\")))\n    (set (pc)\n-\t(if_then_else (ne (reg:SI 18)\n+\t(if_then_else (ne (reg:SI T_REG)\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n@@ -3599,7 +3702,7 @@\n (define_insn \"casesi_worker_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(unspec [(match_operand 1 \"register_operand\" \"0,r\")\n-\t\t (label_ref (match_operand 2 \"\" \"\"))] 2))\n+\t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"=X,1\"))\n    (clobber (match_scratch:SI 4 \"=&z,z\"))]\n   \"\"\n@@ -3608,34 +3711,36 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(unspec [(match_operand 1 \"register_operand\" \"\")\n-\t\t (label_ref (match_operand 2 \"\" \"\"))] 2))\n+\t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n   \"! TARGET_SH2 && reload_completed\"\n-  [(set (reg:SI 0) (unspec [(label_ref (match_dup 2))] 1))\n+  [(set (reg:SI R0_REG) (unspec [(label_ref (match_dup 2))] UNSPEC_MOVA))\n    (parallel [(set (match_dup 0)\n-\t      (unspec [(reg:SI 0) (match_dup 1) (label_ref (match_dup 2))] 2))\n+\t      (unspec [(reg:SI R0_REG) (match_dup 1)\n+\t\t        (label_ref (match_dup 2))] UNSPEC_CASESI))\n \t      (clobber (match_dup 3))])\n-   (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI 0)))]\n+   (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n   \"LABEL_NUSES (operands[2])++;\")\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(unspec [(match_operand 1 \"register_operand\" \"\")\n-\t\t (label_ref (match_operand 2 \"\" \"\"))] 2))\n+\t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n   \"TARGET_SH2 && reload_completed\"\n-  [(set (reg:SI 0) (unspec [(label_ref (match_dup 2))] 1))\n+  [(set (reg:SI R0_REG) (unspec [(label_ref (match_dup 2))] UNSPEC_MOVA))\n    (parallel [(set (match_dup 0)\n-\t      (unspec [(reg:SI 0) (match_dup 1) (label_ref (match_dup 2))] 2))\n+\t      (unspec [(reg:SI R0_REG) (match_dup 1)\n+\t\t       (label_ref (match_dup 2))] UNSPEC_CASESI))\n \t      (clobber (match_dup 3))])]\n   \"LABEL_NUSES (operands[2])++;\")\n \n (define_insn \"*casesi_worker\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(unspec [(reg:SI 0) (match_operand 1 \"register_operand\" \"0,r\")\n-\t\t (label_ref (match_operand 2 \"\" \"\"))] 2))\n+\t(unspec [(reg:SI R0_REG) (match_operand 1 \"register_operand\" \"0,r\")\n+\t\t (label_ref (match_operand 2 \"\" \"\"))] UNSPEC_CASESI))\n    (clobber (match_scratch:SI 3 \"=X,1\"))]\n   \"\"\n   \"*\n@@ -3684,7 +3789,7 @@\n   \"sh_expand_epilogue ();\")\n \n (define_insn \"blockage\"\n-  [(unspec_volatile [(const_int 0)] 0)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)]\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n@@ -3695,7 +3800,7 @@\n \n (define_insn \"movt\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-\t(eq:SI (reg:SI 18) (const_int 1)))]\n+\t(eq:SI (reg:SI T_REG) (const_int 1)))]\n   \"\"\n   \"movt\t%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -3791,7 +3896,7 @@\n    (parallel [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t\t   (neg:SI (plus:SI (match_dup 1)\n \t\t\t\t    (match_dup 2))))\n-\t      (set (reg:SI 18)\n+\t      (set (reg:SI T_REG)\n \t\t   (ne:SI (ior:SI (match_dup 1) (match_dup 2))\n \t\t\t  (const_int 0)))])]  \n   \"\"\n@@ -3807,7 +3912,7 @@\n    (parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (neg:SI (plus:SI (match_dup 1)\n \t\t\t\t    (match_dup 2))))\n-\t      (set (reg:SI 18)\n+\t      (set (reg:SI T_REG)\n \t\t   (ne:SI (ior:SI (match_operand 1 \"\" \"\") (match_dup 2))\n \t\t\t  (const_int 0)))])]  \n   \"\"\n@@ -3819,10 +3924,10 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n-\t(plus:SI (reg:SI 18)\n+\t(plus:SI (reg:SI T_REG)\n \t\t (const_int -1)))]\n   \"\"\n-  [(set (match_dup 0) (eq:SI (reg:SI 18) (const_int 1)))\n+  [(set (match_dup 0) (eq:SI (reg:SI T_REG) (const_int 1)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (const_int -1)))]\n   \"\")\n \n@@ -3833,7 +3938,8 @@\n ; 2 byte integer in line\n \n (define_insn \"consttable_2\"\n- [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")] 2)]\n+ [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")]\n+\t\t   UNSPECV_CONST2)]\n  \"\"\n  \"*\n {\n@@ -3846,7 +3952,8 @@\n ; 4 byte integer in line\n \n (define_insn \"consttable_4\"\n- [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")] 4)]\n+ [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")]\n+\t\t   UNSPECV_CONST4)]\n  \"\"\n  \"*\n {\n@@ -3859,7 +3966,8 @@\n ; 8 byte integer in line\n \n (define_insn \"consttable_8\"\n- [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")] 6)]\n+ [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")]\n+\t\t   UNSPECV_CONST8)]\n  \"\"\n  \"*\n {\n@@ -3872,7 +3980,8 @@\n ; 4 byte floating point\n \n (define_insn \"consttable_sf\"\n- [(unspec_volatile [(match_operand:SF 0 \"general_operand\" \"=g\")] 4)]\n+ [(unspec_volatile [(match_operand:SF 0 \"general_operand\" \"=g\")]\n+\t\t   UNSPECV_CONST4)]\n  \"\"\n  \"*\n {\n@@ -3887,7 +3996,8 @@\n ; 8 byte floating point\n \n (define_insn \"consttable_df\"\n- [(unspec_volatile [(match_operand:DF 0 \"general_operand\" \"=g\")] 6)]\n+ [(unspec_volatile [(match_operand:DF 0 \"general_operand\" \"=g\")]\n+\t\t   UNSPECV_CONST8)]\n  \"\"\n  \"*\n {\n@@ -3908,7 +4018,7 @@\n ; align to a two byte boundary\n \n (define_expand \"align_2\"\n- [(unspec_volatile [(const_int 1)] 1)]\n+ [(unspec_volatile [(const_int 1)] UNSPECV_ALIGN)]\n  \"\"\n  \"\")\n \n@@ -3917,14 +4027,14 @@\n ;; after unconditional branches, which may take up extra room.\n \n (define_expand \"align_4\"\n- [(unspec_volatile [(const_int 2)] 1)]\n+ [(unspec_volatile [(const_int 2)] UNSPECV_ALIGN)]\n  \"\"\n  \"\")\n \n ; align to a cache line boundary\n \n (define_insn \"align_log\"\n- [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"\")] 1)]\n+ [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"\")] UNSPECV_ALIGN)]\n  \"\"\n  \"\"\n  [(set_attr \"length\" \"0\")\n@@ -3934,7 +4044,7 @@\n ; 32bit branch labels if needed.\n \n (define_insn \"consttable_end\"\n-  [(unspec_volatile [(const_int 0)] 11)]\n+  [(unspec_volatile [(const_int 0)] UNSPECV_CONST_END)]\n   \"\"\n   \"* return output_jump_label_table ();\"\n   [(set_attr \"in_delay_slot\" \"no\")])\n@@ -3950,10 +4060,10 @@\n \t\t   (mem:BLK (match_operand:BLK 1 \"\" \"\")))\n \t      (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"immediate_operand\" \"\"))\n-\t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 4))\n-\t      (clobber (reg:SI 5))\n-\t      (clobber (reg:SI 0))])]\n+\t      (clobber (reg:SI PR_REG))\n+\t      (clobber (reg:SI R4_REG))\n+\t      (clobber (reg:SI R5_REG))\n+\t      (clobber (reg:SI R0_REG))])]\n   \"\"\n   \"\n {\n@@ -3963,59 +4073,59 @@\n }\")\n \n (define_insn \"block_move_real\"\n-  [(parallel [(set (mem:BLK (reg:SI 4))\n-\t\t   (mem:BLK (reg:SI 5)))\n+  [(parallel [(set (mem:BLK (reg:SI R4_REG))\n+\t\t   (mem:BLK (reg:SI R5_REG)))\n \t      (use (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 0))])]\n+\t      (clobber (reg:SI PR_REG))\n+\t      (clobber (reg:SI R0_REG))])]\n   \"! TARGET_HARD_SH4\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_insn \"block_lump_real\"\n-  [(parallel [(set (mem:BLK (reg:SI 4))\n-\t\t   (mem:BLK (reg:SI 5)))\n+  [(parallel [(set (mem:BLK (reg:SI R4_REG))\n+\t\t   (mem:BLK (reg:SI R5_REG)))\n \t      (use (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t      (use (reg:SI 6))\n-\t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 18))\n-\t      (clobber (reg:SI 4))\n-\t      (clobber (reg:SI 5))\n-\t      (clobber (reg:SI 6))\n-\t      (clobber (reg:SI 0))])]\n+\t      (use (reg:SI R6_REG))\n+\t      (clobber (reg:SI PR_REG))\n+\t      (clobber (reg:SI T_REG))\n+\t      (clobber (reg:SI R4_REG))\n+\t      (clobber (reg:SI R5_REG))\n+\t      (clobber (reg:SI R6_REG))\n+\t      (clobber (reg:SI R0_REG))])]\n   \"! TARGET_HARD_SH4\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_insn \"block_move_real_i4\"\n-  [(parallel [(set (mem:BLK (reg:SI 4))\n-\t\t   (mem:BLK (reg:SI 5)))\n+  [(parallel [(set (mem:BLK (reg:SI R4_REG))\n+\t\t   (mem:BLK (reg:SI R5_REG)))\n \t      (use (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 0))\n-\t      (clobber (reg:SI 1))\n-\t      (clobber (reg:SI 2))])]\n+\t      (clobber (reg:SI PR_REG))\n+\t      (clobber (reg:SI R0_REG))\n+\t      (clobber (reg:SI R1_REG))\n+\t      (clobber (reg:SI R2_REG))])]\n   \"TARGET_HARD_SH4\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n (define_insn \"block_lump_real_i4\"\n-  [(parallel [(set (mem:BLK (reg:SI 4))\n-\t\t   (mem:BLK (reg:SI 5)))\n+  [(parallel [(set (mem:BLK (reg:SI R4_REG))\n+\t\t   (mem:BLK (reg:SI R5_REG)))\n \t      (use (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n-\t      (use (reg:SI 6))\n-\t      (clobber (reg:SI 17))\n-\t      (clobber (reg:SI 18))\n-\t      (clobber (reg:SI 4))\n-\t      (clobber (reg:SI 5))\n-\t      (clobber (reg:SI 6))\n-\t      (clobber (reg:SI 0))\n-\t      (clobber (reg:SI 1))\n-\t      (clobber (reg:SI 2))\n-\t      (clobber (reg:SI 3))])]\n+\t      (use (reg:SI R6_REG))\n+\t      (clobber (reg:SI PR_REG))\n+\t      (clobber (reg:SI T_REG))\n+\t      (clobber (reg:SI R4_REG))\n+\t      (clobber (reg:SI R5_REG))\n+\t      (clobber (reg:SI R6_REG))\n+\t      (clobber (reg:SI R0_REG))\n+\t      (clobber (reg:SI R1_REG))\n+\t      (clobber (reg:SI R2_REG))\n+\t      (clobber (reg:SI R3_REG))])]\n   \"TARGET_HARD_SH4\"\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n@@ -4087,7 +4197,8 @@\n    (set_attr \"type\" \"dfp_conv,dfp_conv,load,dfp_conv,dfp_conv,move,store,gp_fpul\")])\n \n (define_split\n-  [(set (reg:PSI 48) (mem:PSI (match_operand:SI 0 \"register_operand\" \"r\")))]\n+  [(set (reg:PSI FPSCR_REG)\n+\t(mem:PSI (match_operand:SI 0 \"register_operand\" \"r\")))]\n   \"find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(set (match_dup 0) (match_dup 0))]\n   \"\n@@ -4100,7 +4211,8 @@\n }\")\n \n (define_split\n-  [(set (reg:PSI 48) (mem:PSI (match_operand:SI 0 \"register_operand\" \"r\")))]\n+  [(set (reg:PSI FPSCR_REG)\n+\t(mem:PSI (match_operand:SI 0 \"register_operand\" \"r\")))]\n   \"\"\n   [(set (match_dup 0) (plus:SI (match_dup 0) (const_int -4)))]\n   \"\n@@ -4119,7 +4231,8 @@\n ;; it is probably best to claim no function unit, which matches the\n ;; current setting.\n (define_insn \"toggle_sz\"\n-  [(set (reg:PSI 48) (xor:PSI (reg:PSI 48) (const_int 1048576)))]\n+  [(set (reg:PSI FPSCR_REG)\n+\t(xor:PSI (reg:PSI FPSCR_REG) (const_int 1048576)))]\n   \"TARGET_SH4\"\n   \"fschg\")\n \n@@ -4278,8 +4391,8 @@\n ;; (define_insn \"fix_truncsfsi2_i4_2\"\n ;;  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n ;;\t(fix:SI (match_operand:SF 1 \"arith_reg_operand\" \"f\")))\n-;;   (use (reg:SI 48))\n-;;   (clobber (reg:SI 22))]\n+;;   (use (reg:SI FPSCR_REG))\n+;;   (clobber (reg:SI FPUL_REG))]\n ;;  \"TARGET_SH4\"\n ;;  \"#\"\n ;;  [(set_attr \"length\" \"4\")\n@@ -4289,11 +4402,11 @@\n ;;  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n ;;\t(fix:SI (match_operand:SF 1 \"arith_reg_operand\" \"f\")))\n ;;   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-;;   (clobber (reg:SI 22))]\n+;;   (clobber (reg:SI FPUL_REG))]\n ;;  \"TARGET_SH4\"\n-;;  [(parallel [(set (reg:SI 22) (fix:SI (match_dup 1)))\n+;;  [(parallel [(set (reg:SI FPUL_REG) (fix:SI (match_dup 1)))\n ;;\t      (use (match_dup 2))])\n-;;   (set (match_dup 0) (reg:SI 22))])\n+;;   (set (match_dup 0) (reg:SI FPUL_REG))])\n \n (define_insn \"*fixsfsi\"\n   [(set (match_operand:SI 0 \"fpul_operand\" \"=y\")\n@@ -4303,24 +4416,26 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"cmpgtsf_t\"\n-  [(set (reg:SI 18) (gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n-\t\t\t   (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n+  [(set (reg:SI T_REG)\n+\t(gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n+\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E && ! TARGET_SH4\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n (define_insn \"cmpeqsf_t\"\n-  [(set (reg:SI 18) (eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n-\t\t\t   (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n+\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E && ! TARGET_SH4\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n (define_insn \"ieee_ccmpeqsf_t\"\n-  [(set (reg:SI 18)\n-\t(ior:SI (reg:SI 18)\n+  [(set (reg:SI T_REG)\n+\t(ior:SI (reg:SI T_REG)\n \t\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\"))))]\n   \"TARGET_SH3E && TARGET_IEEE && ! TARGET_SH4\"\n@@ -4329,26 +4444,28 @@\n \n \n (define_insn \"cmpgtsf_t_i4\"\n-  [(set (reg:SI 18) (gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n-\t\t\t   (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n+  [(set (reg:SI T_REG)\n+\t(gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n+\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n   \"TARGET_SH4\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n (define_insn \"cmpeqsf_t_i4\"\n-  [(set (reg:SI 18) (eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n-\t\t\t   (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n+\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n   \"TARGET_SH4\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n (define_insn \"*ieee_ccmpeqsf_t_4\"\n-  [(set (reg:SI 18)\n-\t(ior:SI (reg:SI 18)\n+  [(set (reg:SI T_REG)\n+\t(ior:SI (reg:SI T_REG)\n \t\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\"))))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n@@ -4358,8 +4475,9 @@\n    (set_attr \"fp_mode\" \"single\")])\n \n (define_expand \"cmpsf\"\n-  [(set (reg:SI 18) (compare (match_operand:SF 0 \"arith_operand\" \"\")\n-\t\t\t     (match_operand:SF 1 \"arith_operand\" \"\")))]\n+  [(set (reg:SI T_REG)\n+\t(compare (match_operand:SF 0 \"arith_operand\" \"\")\n+\t\t (match_operand:SF 1 \"arith_operand\" \"\")))]\n   \"TARGET_SH3E\"\n   \"\n {\n@@ -4525,7 +4643,7 @@\n ;;   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n ;; \t(fix:SI (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n ;;    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-;;    (clobber (reg:SI 22))]\n+;;    (clobber (reg:SI FPUL_REG))]\n ;;   \"TARGET_SH4\"\n ;;   \"#\"\n ;;   [(set_attr \"length\" \"4\")\n@@ -4535,43 +4653,47 @@\n ;;   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n ;; \t(fix:SI (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n ;;    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-;;    (clobber (reg:SI 22))]\n+;;    (clobber (reg:SI FPUL_REG))]\n ;;   \"TARGET_SH4\"\n-;;   [(parallel [(set (reg:SI 22) (fix:SI (match_dup 1)))\n+;;   [(parallel [(set (reg:SI FPUL_REG) (fix:SI (match_dup 1)))\n ;; \t      (use (match_dup 2))])\n-;;    (set (match_dup 0) (reg:SI 22))])\n+;;    (set (match_dup 0) (reg:SI FPUL_REG))])\n \n (define_insn \"cmpgtdf_t\"\n-  [(set (reg:SI 18) (gt:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n-\t\t\t   (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n+  [(set (reg:SI T_REG)\n+\t(gt:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n+\t       (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n   \"TARGET_SH4\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_insn \"cmpeqdf_t\"\n-  [(set (reg:SI 18) (eq:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n-\t\t\t   (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n+\t       (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n   \"TARGET_SH4\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n    (set_attr \"fp_mode\" \"double\")])\n \n (define_insn \"*ieee_ccmpeqdf_t\"\n-  [(set (reg:SI 18) (ior:SI (reg:SI 18)\n-\t\t\t    (eq:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n-\t\t\t\t   (match_operand:DF 1 \"arith_reg_operand\" \"f\"))))\n+  [(set (reg:SI T_REG)\n+\t(ior:SI (reg:SI T_REG)\n+\t\t(eq:SI (match_operand:DF 0 \"arith_reg_operand\" \"f\")\n+\t\t       (match_operand:DF 1 \"arith_reg_operand\" \"f\"))))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n   \"TARGET_IEEE && TARGET_SH4\"\n   \"* return output_ieee_ccmpeq (insn, operands);\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"fp_mode\" \"double\")])\n    \n (define_expand \"cmpdf\"\n-  [(set (reg:SI 18) (compare (match_operand:DF 0 \"arith_operand\" \"\")\n-\t\t\t     (match_operand:DF 1 \"arith_operand\" \"\")))]\n+  [(set (reg:SI T_REG)\n+\t(compare (match_operand:DF 0 \"arith_operand\" \"\")\n+\t\t (match_operand:DF 1 \"arith_operand\" \"\")))]\n   \"TARGET_SH4\"\n   \"\n {\n@@ -4730,7 +4852,7 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n \t(plus:SI (match_dup 0)\n \t\t (const_int -1)))\n-   (set (reg:SI 18)\n+   (set (reg:SI T_REG)\n \t(eq:SI (match_dup 0)\n \t       (const_int 0)))]\n   \"TARGET_SH2\""}]}