{"sha": "9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkYmRjZWY5YThjOTYxNWM3ZDdjY2I2OWJjNTExMGIzYzA0YTc4Yg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-01-25T22:27:51Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-01-25T22:27:51Z"}, "message": "re PR debug/45136 (-fcompare-debug failure with -Os -fschedule-insns)\n\nPR debug/45136\nPR debug/45130\n* haifa-sched.c (get_ebb_head_tail): Move notes across boundary\ndebug insns.\n(no_real_insns_p, schedule_block, set_priorities): Drop special\ntreatment of boundary debug insns.\n* sched-deps.c (sd_init_insn, sd_finish_insn): Don't mark debug\ninsns.\n* sched-ebb.c (schedule_ebbs): Don't skip debug insns.\n* sched-int.h (DEBUG_INSN_SCHED_P): Remove.\n(BOUNDARY_DEBUG_INSN_P): Likewise.\n(SCHEDULE_DEBUG_INSN_P): Likewise.\n* sched-rgn.c (init_ready_list): Drop special treatment of\nboundary debug insns.\n* final.c (rest_of_clean-state): Clear notes' BB.\n\nFrom-SVN: r169260", "tree": {"sha": "6a6de1f5b3d7fc3e205bef331cb55788bda819b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a6de1f5b3d7fc3e205bef331cb55788bda819b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/comments", "author": null, "committer": null, "parents": [{"sha": "b28641995ca556027897488809a2c5e4a4408298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b28641995ca556027897488809a2c5e4a4408298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b28641995ca556027897488809a2c5e4a4408298"}], "stats": {"total": 115, "additions": 78, "deletions": 37}, "files": [{"sha": "f6b623f37f87c3bffe2d7ec2cbe2807ea1247ec2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "patch": "@@ -1,3 +1,21 @@\n+2011-01-25  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/45136\n+\tPR debug/45130\n+\t* haifa-sched.c (get_ebb_head_tail): Move notes across boundary\n+\tdebug insns.\n+\t(no_real_insns_p, schedule_block, set_priorities): Drop special\n+\ttreatment of boundary debug insns.\n+\t* sched-deps.c (sd_init_insn, sd_finish_insn): Don't mark debug\n+\tinsns.\n+\t* sched-ebb.c (schedule_ebbs): Don't skip debug insns.\n+\t* sched-int.h (DEBUG_INSN_SCHED_P): Remove.\n+\t(BOUNDARY_DEBUG_INSN_P): Likewise.\n+\t(SCHEDULE_DEBUG_INSN_P): Likewise.\n+\t* sched-rgn.c (init_ready_list): Drop special treatment of\n+\tboundary debug insns.\n+\t* final.c (rest_of_clean-state): Clear notes' BB.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* Makefile.in (LAMBDA_H): Removed."}, {"sha": "ceb79744c414f8f4ed58d3774c5ba2c9e7609b6a", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "patch": "@@ -4402,7 +4402,11 @@ rest_of_clean_state (void)\n \t    if (LABEL_P (insn))\n \t      INSN_UID (insn) = CODE_LABEL_NUMBER (insn);\n \t    else\n-\t      INSN_UID (insn) = 0;\n+\t      {\n+\t\tif (NOTE_P (insn))\n+\t\t  set_block_for_insn (insn, NULL);\n+\t\tINSN_UID (insn) = 0;\n+\t      }\n \t}\n     }\n \n@@ -4423,7 +4427,6 @@ rest_of_clean_state (void)\n \t       && NOTE_KIND (insn) != NOTE_INSN_BLOCK_END\n \t       && NOTE_KIND (insn) != NOTE_INSN_CFA_RESTORE_STATE)))\n \tprint_rtl_single (final_output, insn);\n-\n     }\n \n   if (final_output)"}, {"sha": "68499f12b1c2b186997d7917937aed0399351c2f", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "patch": "@@ -1900,8 +1900,30 @@ get_ebb_head_tail (basic_block beg, basic_block end, rtx *headp, rtx *tailp)\n     beg_head = NEXT_INSN (beg_head);\n \n   while (beg_head != beg_tail)\n-    if (NOTE_P (beg_head) || BOUNDARY_DEBUG_INSN_P (beg_head))\n+    if (NOTE_P (beg_head))\n       beg_head = NEXT_INSN (beg_head);\n+    else if (DEBUG_INSN_P (beg_head))\n+      {\n+\trtx note, next;\n+\n+\tfor (note = NEXT_INSN (beg_head);\n+\t     note != beg_tail;\n+\t     note = next)\n+\t  {\n+\t    next = NEXT_INSN (note);\n+\t    if (NOTE_P (note))\n+\t      {\n+\t\tif (sched_verbose >= 9)\n+\t\t  fprintf (sched_dump, \"reorder %i\\n\", INSN_UID (note));\n+\n+\t\treorder_insns_nobb (note, note, PREV_INSN (beg_head));\n+\t      }\n+\t    else if (!DEBUG_INSN_P (note))\n+\t      break;\n+\t  }\n+\n+\tbreak;\n+      }\n     else\n       break;\n \n@@ -1913,8 +1935,33 @@ get_ebb_head_tail (basic_block beg, basic_block end, rtx *headp, rtx *tailp)\n     end_head = NEXT_INSN (end_head);\n \n   while (end_head != end_tail)\n-    if (NOTE_P (end_tail) || BOUNDARY_DEBUG_INSN_P (end_tail))\n+    if (NOTE_P (end_tail))\n       end_tail = PREV_INSN (end_tail);\n+    else if (DEBUG_INSN_P (end_tail))\n+      {\n+\trtx note, prev;\n+\n+\tfor (note = PREV_INSN (end_tail);\n+\t     note != end_head;\n+\t     note = prev)\n+\t  {\n+\t    prev = PREV_INSN (note);\n+\t    if (NOTE_P (note))\n+\t      {\n+\t\tif (sched_verbose >= 9)\n+\t\t  fprintf (sched_dump, \"reorder %i\\n\", INSN_UID (note));\n+\n+\t\treorder_insns_nobb (note, note, end_tail);\n+\n+\t\tif (end_tail == BB_END (end))\n+\t\t  df_insn_change_bb (note, NULL);\n+\t      }\n+\t    else if (!DEBUG_INSN_P (note))\n+\t      break;\n+\t  }\n+\n+\tbreak;\n+      }\n     else\n       break;\n \n@@ -1928,8 +1975,7 @@ no_real_insns_p (const_rtx head, const_rtx tail)\n {\n   while (head != NEXT_INSN (tail))\n     {\n-      if (!NOTE_P (head) && !LABEL_P (head)\n-\t  && !BOUNDARY_DEBUG_INSN_P (head))\n+      if (!NOTE_P (head) && !LABEL_P (head))\n \treturn 0;\n       head = NEXT_INSN (head);\n     }\n@@ -2812,7 +2858,7 @@ schedule_block (basic_block *target_bb)\n   last_scheduled_insn = prev_head;\n \n   gcc_assert ((NOTE_P (last_scheduled_insn)\n-\t       || BOUNDARY_DEBUG_INSN_P (last_scheduled_insn))\n+\t       || DEBUG_INSN_P (last_scheduled_insn))\n \t      && BLOCK_FOR_INSN (last_scheduled_insn) == *target_bb);\n \n   /* Initialize INSN_QUEUE.  Q_SIZE is the total number of insns in the\n@@ -3319,7 +3365,7 @@ set_priorities (rtx head, rtx tail)\n \tcurrent_sched_info->sched_max_insns_priority;\n   rtx prev_head;\n \n-  if (head == tail && (! INSN_P (head) || BOUNDARY_DEBUG_INSN_P (head)))\n+  if (head == tail && ! INSN_P (head))\n     gcc_unreachable ();\n \n   n_insn = 0;"}, {"sha": "590f4deb4838b157b377e619353033587f2d60fc", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "patch": "@@ -715,9 +715,6 @@ sd_init_insn (rtx insn)\n   INSN_FORW_DEPS (insn) = create_deps_list ();\n   INSN_RESOLVED_FORW_DEPS (insn) = create_deps_list ();\n \n-  if (DEBUG_INSN_P (insn))\n-    DEBUG_INSN_SCHED_P (insn) = TRUE;\n-\n   /* ??? It would be nice to allocate dependency caches here.  */\n }\n \n@@ -727,12 +724,6 @@ sd_finish_insn (rtx insn)\n {\n   /* ??? It would be nice to deallocate dependency caches here.  */\n \n-  if (DEBUG_INSN_P (insn))\n-    {\n-      gcc_assert (DEBUG_INSN_SCHED_P (insn));\n-      DEBUG_INSN_SCHED_P (insn) = FALSE;\n-    }\n-\n   free_deps_list (INSN_HARD_BACK_DEPS (insn));\n   INSN_HARD_BACK_DEPS (insn) = NULL;\n "}, {"sha": "264f694739e9d0d4b7d689bd77fb73551be1eead", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "patch": "@@ -598,9 +598,9 @@ schedule_ebbs (void)\n \t a note or two.  */\n       while (head != tail)\n \t{\n-\t  if (NOTE_P (head) || BOUNDARY_DEBUG_INSN_P (head))\n+\t  if (NOTE_P (head))\n \t    head = NEXT_INSN (head);\n-\t  else if (NOTE_P (tail) || BOUNDARY_DEBUG_INSN_P (tail))\n+\t  else if (NOTE_P (tail))\n \t    tail = PREV_INSN (tail);\n \t  else if (LABEL_P (head))\n \t    head = NEXT_INSN (head);"}, {"sha": "9077c881ce69a73c673286af9c40dab1c053b5ea", "filename": "gcc/sched-int.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "patch": "@@ -887,23 +887,6 @@ extern VEC(haifa_deps_insn_data_def, heap) *h_d_i_d;\n #define IS_SPECULATION_BRANCHY_CHECK_P(INSN) \\\n   (RECOVERY_BLOCK (INSN) != NULL && RECOVERY_BLOCK (INSN) != EXIT_BLOCK_PTR)\n \n-/* The unchanging bit tracks whether a debug insn is to be handled\n-   like an insn (i.e., schedule it) or like a note (e.g., it is next\n-   to a basic block boundary.  */\n-#define DEBUG_INSN_SCHED_P(insn) \\\n-  (RTL_FLAG_CHECK1(\"DEBUG_INSN_SCHED_P\", (insn), DEBUG_INSN)->unchanging)\n-\n-/* True if INSN is a debug insn that is next to a basic block\n-   boundary, i.e., it is to be handled by the scheduler like a\n-   note.  */\n-#define BOUNDARY_DEBUG_INSN_P(insn) \\\n-  (DEBUG_INSN_P (insn) && !DEBUG_INSN_SCHED_P (insn))\n-/* True if INSN is a debug insn that is not next to a basic block\n-   boundary, i.e., it is to be handled by the scheduler like an\n-   insn.  */\n-#define SCHEDULE_DEBUG_INSN_P(insn) \\\n-  (DEBUG_INSN_P (insn) && DEBUG_INSN_SCHED_P (insn))\n-\n /* Dep status (aka ds_t) of the link encapsulates information, that is needed\n    for speculative scheduling.  Namely, it is 4 integers in the range\n    [0, MAX_DEP_WEAK] and 3 bits."}, {"sha": "6c4fd46a50f0e2d11d679d32609b5cc24200411f", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=9bdbdcef9a8c9615c7d7ccb69bc5110b3c04a78b", "patch": "@@ -2138,7 +2138,7 @@ init_ready_list (void)\n \tsrc_head = head;\n \n \tfor (insn = src_head; insn != src_next_tail; insn = NEXT_INSN (insn))\n-\t  if (INSN_P (insn) && !BOUNDARY_DEBUG_INSN_P (insn))\n+\t  if (INSN_P (insn))\n \t    try_ready (insn);\n       }\n }"}]}