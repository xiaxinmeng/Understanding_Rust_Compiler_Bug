{"sha": "e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjNGY4ZGY0Mzk4NTVjN2YyNTcxMDkyY2FkYTdlOGZkOWUzOGMwZg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-01-13T20:54:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-13T20:54:16Z"}, "message": "netbsd.h (DWARF2_UNWIND_INFO): Define as zero for now.\n\n        * arm/netbsd.h (DWARF2_UNWIND_INFO): Define as zero for now.\n        * i386/netbsd.h, m68k/netbsd.h, ns32k/netbsd.h: Likewise.\n        * sparc/netbsd.h, vax/netbsd.h: Likewise.\n\nFrom-SVN: r17339", "tree": {"sha": "978eb78ea4e19c563c8afdbf1f2ed120118c85a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978eb78ea4e19c563c8afdbf1f2ed120118c85a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/comments", "author": null, "committer": null, "parents": [{"sha": "4aa0c2a5c1bcc232698edb1065e87537a86541a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa0c2a5c1bcc232698edb1065e87537a86541a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa0c2a5c1bcc232698edb1065e87537a86541a7"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "bc8afae96a8c5558f1c32ee3598c396c9e749ec5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "patch": "@@ -1,3 +1,9 @@\n+Tue Jan 13 21:55:06 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* arm/netbsd.h (DWARF2_UNWIND_INFO): Define as zero for now.\n+\t* i386/netbsd.h, m68k/netbsd.h, ns32k/netbsd.h: Likewise.\n+\t* sparc/netbsd.h, vax/netbsd.h: Likewise.\n+\n Tue Jan 13 21:37:07 1998  Shigeya Suzuki <shigeya@foretune.co.jp>\n \n \t* i386/bsd386.h (DWARF2_UNWIND_INFO): Define as zero for now."}, {"sha": "01811101b198c1e3deb6f906ede2c0250cf6fabd", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "patch": "@@ -1,6 +1,5 @@\n-/*\n-   NetBSD/arm (RiscBSD) version.\n-   Copyright (C) 1993, 1994 Free Software Foundation, Inc.\n+/* NetBSD/arm (RiscBSD) version.\n+   Copyright (C) 1993, 1994, 1997 Free Software Foundation, Inc.\n    Contributed by Mark Brinicombe (amb@physig.ph.kcl.ac.uk)\n \n This file is part of GNU CC.\n@@ -50,7 +49,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    arm32 is the NetBSD port name, so we always define arm32 and __arm32__.  */\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"\\\n--Dunix -Driscbsd -Darm32 -D__arm32__ -D__NetBSD__ \\\n+-Dunix -Driscbsd -Darm32 -D__arm32__ -D__arm__ -D__NetBSD__ \\\n -Asystem(unix) -Asystem(NetBSD) -Acpu(arm) -Amachine(arm)\"\n \n /* Define _POSIX_SOURCE if necessary.  */\n@@ -64,6 +63,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef CPP_APCS_PC_DEFAULT_SPEC\n #define CPP_APCS_PC_DEFAULT_SPEC \"-D__APCS_32__\"\n \n+/* Pass -X to the linker so that it will strip symbols starting with 'L' */\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+-X %{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{R*} \\\n+%{static:-Bstatic} %{assert*} \\\n+\"\n+\n #undef SIZE_TYPE\n #define SIZE_TYPE \"unsigned int\"\n \n@@ -97,12 +103,17 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   fprintf(STREAM, \"\\tbl\\tmcount\\n\");\t\t\t\t\t    \\\n }\n \n+/* On the ARM `@' introduces a comment, so we must use something else\n+   for .type directives.  */\n+#undef TYPE_OPERAND_FMT\n+#define TYPE_OPERAND_FMT \"%%%s\"\n+\n /* VERY BIG NOTE : Change of structure alignment for RiscBSD.\n    There are consequences you should be aware of...\n \n    Normally GCC/arm uses a structure alignment of 32 for compatibility\n    with armcc.  This means that structures are padded to a word\n-   boundry.  However this causes problems with bugged NetBSD kernel\n+   boundary.  However this causes problems with bugged NetBSD kernel\n    code (possibly userland code as well - I have not checked every\n    binary).  The nature of this bugged code is to rely on sizeof()\n    returning the correct size of various structures rounded to the\n@@ -118,7 +129,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n            structures containing shorts will be half word alinged.\n            structures containing ints will be word aligned.\n \n-      This means structures should be padded to a word boundry if\n+      This means structures should be padded to a word boundary if\n       alignment of 32 is required for byte structures etc.\n       \n    2. A potential performance penalty may exist if strings are no longer\n@@ -130,3 +141,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    requirements.  */\n #undef STRUCTURE_SIZE_BOUNDARY\n #define STRUCTURE_SIZE_BOUNDARY 8\n+\n+/* Until they use ELF or something that handles dwarf2 unwinds\n+   and initialization stuff better.  */\n+#define DWARF2_UNWIND_INFO 0\n+"}, {"sha": "3442aeadb872d1a8a4f720d5f17de40ffe85b365", "filename": "gcc/config/i386/netbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fi386%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd.h?ref=e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "patch": "@@ -71,3 +71,8 @@\n       fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n+\n+/* Until they use ELF or something that handles dwarf2 unwinds\n+   and initialization stuff better.  */\n+#define DWARF2_UNWIND_INFO 0\n+"}, {"sha": "1e2f9a530461d00f6c8b0f2716d8d49f8f667e4b", "filename": "gcc/config/m68k/netbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fm68k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd.h?ref=e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "patch": "@@ -56,3 +56,8 @@\n /* Don't default to pcc-struct-return, because gcc is the only compiler, and\n    we want to retain compatibility with older gcc versions.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Until they use ELF or something that handles dwarf2 unwinds\n+   and initialization stuff better.  */\n+#define DWARF2_UNWIND_INFO 0\n+"}, {"sha": "f2f4895b23a8a524ed7e543767d0f3ade0636a95", "filename": "gcc/config/ns32k/netbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fns32k%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fnetbsd.h?ref=e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "patch": "@@ -105,3 +105,8 @@ Boston, MA 02111-1307, USA.\n \n #undef PCC_STATIC_STRUCT_RETURN\n #define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Until they use ELF or something that handles dwarf2 unwinds\n+   and initialization stuff better.  */\n+#define DWARF2_UNWIND_INFO 0\n+"}, {"sha": "3fd6fe920202064ac11bba676e02f758b9653c92", "filename": "gcc/config/sparc/netbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fsparc%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fsparc%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd.h?ref=e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "patch": "@@ -38,3 +38,8 @@\n /* Don't default to pcc-struct-return, because gcc is the only compiler, and\n    we want to retain compatibility with older gcc versions.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Until they use ELF or something that handles dwarf2 unwinds\n+   and initialization stuff better.  */\n+#define DWARF2_UNWIND_INFO 0\n+"}, {"sha": "dba70237d472c38ad2d4ab2290df5ee0fcf0e13a", "filename": "gcc/config/vax/netbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fvax%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c4f8df439855c7f2571092cada7e8fd9e38c0f/gcc%2Fconfig%2Fvax%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fnetbsd.h?ref=e4c4f8df439855c7f2571092cada7e8fd9e38c0f", "patch": "@@ -17,3 +17,8 @@\n \n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE 32\n+\n+/* Until they use ELF or something that handles dwarf2 unwinds\n+   and initialization stuff better.  */\n+#define DWARF2_UNWIND_INFO 0\n+"}]}