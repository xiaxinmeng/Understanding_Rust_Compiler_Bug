{"sha": "d863830b531a8ccb7b230dec7f65322870c66ff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2MzgzMGI1MzFhOGNjYjdiMjMwZGVjN2Y2NTMyMjg3MGM2NmZmNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-14T01:56:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-14T01:56:51Z"}, "message": "Add -frepo docs.\n\nFrom-SVN: r16478", "tree": {"sha": "154336f932d55defea8fe17652c4d12376f11559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/154336f932d55defea8fe17652c4d12376f11559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d863830b531a8ccb7b230dec7f65322870c66ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d863830b531a8ccb7b230dec7f65322870c66ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d863830b531a8ccb7b230dec7f65322870c66ff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d863830b531a8ccb7b230dec7f65322870c66ff7/comments", "author": null, "committer": null, "parents": [{"sha": "966f5dffabfcd251a7fe66b38b713ca75c52f49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966f5dffabfcd251a7fe66b38b713ca75c52f49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966f5dffabfcd251a7fe66b38b713ca75c52f49d"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "75131d7fa3ba6323d86b764f87020800a71593c0", "filename": "gcc/extend.texi", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d863830b531a8ccb7b230dec7f65322870c66ff7/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d863830b531a8ccb7b230dec7f65322870c66ff7/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=d863830b531a8ccb7b230dec7f65322870c66ff7", "patch": "@@ -1669,7 +1669,7 @@ old-style non-prototype definition.  Consider the following example:\n \n @example\n /* @r{Use prototypes unless the compiler is old-fashioned.}  */\n-#if __STDC__\n+#ifdef __STDC__\n #define P(x) x\n #else\n #define P(x) ()\n@@ -2026,7 +2026,7 @@ typedef int more_aligned_int __attribute__ ((aligned (8));\n @end smallexample\n \n @noindent\n-force the compiler to insure (as fas as it can) that each variable whose\n+force the compiler to insure (as far as it can) that each variable whose\n type is @code{struct S} or @code{more_aligned_int} will be allocated and\n aligned @emph{at least} on a 8-byte boundary.  On a Sparc, having all\n variables of type @code{struct S} aligned to 8-byte boundaries allows\n@@ -2166,6 +2166,16 @@ pid_t wait (wait_status_ptr_t p)\n   return waitpid (-1, p.__ip, 0);\n @}\n @end example\n+\n+@item unused\n+When attached to a type (including a @code{union} or a @code{struct}),\n+this attribute means that variables of that type are meant to appear\n+possibly unused.  GNU CC will not produce a warning for any variables of\n+that type, even if the variable appears to do nothing.  This is often\n+the case with lock or thread classes, which are usually defined and then\n+not referenced, but contain constructors and destructors that have\n+non-trivial bookeeping functions.\n+\n @end table\n \n To specify multiple attributes, separate them by commas within the\n@@ -3230,6 +3240,30 @@ In the mean time, you have the following options for dealing with\n template instantiations:\n \n @enumerate\n+@item\n+Compile your template-using code with @samp{-frepo}.  The compiler will\n+generate files with the extension @samp{.rpo} listing all of the\n+template instantiations used in the corresponding object files which\n+could be instantiated there; the link wrapper, @samp{collect2}, will\n+then update the @samp{.rpo} files to tell the compiler where to place\n+those instantiations and rebuild any affected object files.  The\n+link-time overhead is negligible after the first pass, as the compiler\n+will continue to place the instantiations in the same files.\n+\n+This is your best option for application code written for the Borland\n+model, as it will just work.  Code written for the Cfront model will\n+need to be modified so that the template definitions are available at\n+one or more points of instantiation; usually this is as simple as adding\n+@code{#include <tmethods.cc>} to the end of each template header.\n+\n+For library code, if you want the library to provide all of the template\n+instantiations it needs, just try to link all of its object files\n+together; the link will fail, but cause the instantiations to be\n+generated as a side effect.  Be warned, however, that this may cause\n+conflicts if multiple libraries try to provide the same instantiations.\n+For greater control, use explicit instantiation as described in the next\n+option.\n+\n @item\n Compile your code with @samp{-fno-implicit-templates} to disable the\n implicit generation of template instances, and explicitly instantiate"}]}