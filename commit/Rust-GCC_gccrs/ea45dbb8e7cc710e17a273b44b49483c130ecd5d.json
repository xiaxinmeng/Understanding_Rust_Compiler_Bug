{"sha": "ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0NWRiYjhlN2NjNzEwZTE3YTI3M2I0NGI0OTQ4M2MxMzBlY2Q1ZA==", "commit": {"author": {"name": "Tom Rix", "email": "trix@redhat.com", "date": "2002-05-08T21:22:06Z"}, "committer": {"name": "Tom Rix", "email": "trix@gcc.gnu.org", "date": "2002-05-08T21:22:06Z"}, "message": "New tests for rotating.\n\nFrom-SVN: r53305", "tree": {"sha": "0713a9a316da97e68b5883f06b36bcd6ff22eef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0713a9a316da97e68b5883f06b36bcd6ff22eef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/comments", "author": {"login": "trixirt", "id": 7824193, "node_id": "MDQ6VXNlcjc4MjQxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7824193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trixirt", "html_url": "https://github.com/trixirt", "followers_url": "https://api.github.com/users/trixirt/followers", "following_url": "https://api.github.com/users/trixirt/following{/other_user}", "gists_url": "https://api.github.com/users/trixirt/gists{/gist_id}", "starred_url": "https://api.github.com/users/trixirt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trixirt/subscriptions", "organizations_url": "https://api.github.com/users/trixirt/orgs", "repos_url": "https://api.github.com/users/trixirt/repos", "events_url": "https://api.github.com/users/trixirt/events{/privacy}", "received_events_url": "https://api.github.com/users/trixirt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f8ffc7cffc8ac2ce106921ad7e9f79adf96de93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8ffc7cffc8ac2ce106921ad7e9f79adf96de93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8ffc7cffc8ac2ce106921ad7e9f79adf96de93"}], "stats": {"total": 314, "additions": 314, "deletions": 0}, "files": [{"sha": "bcecf51d0ac3fb86a306968a8055e360e2d85ced", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "patch": "@@ -1,3 +1,9 @@\n+2002-05-08  Tom Rix  <trix@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020508-1.c: New test.\n+\t* gcc.c-torture/execute/20020508-2.c: New test.\n+\t* gcc.c-torture/execute/20020508-3.c: New test.\n+\n 2002-05-08  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/cpp/charconst-4.c: More tests."}, {"sha": "612be8dcc23e86032f4cfe637db14c38e7007d0f", "filename": "gcc/testsuite/gcc.c-torture/execute/20020508-1.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-1.c?ref=ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "patch": "@@ -0,0 +1,104 @@\n+/* This tests the rotate patterns that some machines support.  */\n+\n+#include <limits.h>\n+\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n+#define ROR(a,b) (((a) >> (b)) | ((a) << ((sizeof (a) * CHAR_BIT) - (b))))\n+#define ROL(a,b) (((a) << (b)) | ((a) >> ((sizeof (a) * CHAR_BIT) - (b))))\n+\n+#define CHAR_VALUE ((unsigned char)0xf234U)\n+#define SHORT_VALUE ((unsigned short)0xf234U)\n+#define INT_VALUE 0xf234U\n+#define LONG_VALUE 0xf2345678LU\n+#define LL_VALUE 0xf2345678abcdef0LLU\n+\n+#define SHIFT1 4\n+#define SHIFT2 ((sizeof (long long) * CHAR_BIT) - SHIFT1)\n+\n+unsigned char uc = CHAR_VALUE;\n+unsigned short us = SHORT_VALUE;\n+unsigned int ui = INT_VALUE;\n+unsigned long ul = LONG_VALUE;\n+unsigned long long ull = LL_VALUE;\n+int shift1 = SHIFT1;\n+int shift2 = SHIFT2;\n+\n+main ()\n+{\n+  if (ROR (uc, shift1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (uc, SHIFT1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (us, shift1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (us, SHIFT1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ui, shift1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ui, SHIFT1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ul, shift1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ul, SHIFT1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ull, shift1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ull, SHIFT1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ull, shift2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROR (ull, SHIFT2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (uc, shift1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (uc, SHIFT1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (us, shift1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (us, SHIFT1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ui, shift1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ui, SHIFT1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ul, shift1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ul, SHIFT1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ull, shift1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ull, SHIFT1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ull, shift2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (ull, SHIFT2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "533805a969eee3648a345707b6486612fabc7904", "filename": "gcc/testsuite/gcc.c-torture/execute/20020508-2.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-2.c?ref=ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "patch": "@@ -0,0 +1,102 @@\n+#include <limits.h>\n+\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n+#define ROR(a,b) (((a) >> (b)) | ((a) << ((sizeof (a) * CHAR_BIT) - (b))))\n+#define ROL(a,b) (((a) << (b)) | ((a) >> ((sizeof (a) * CHAR_BIT) - (b))))\n+\n+#define CHAR_VALUE ((char)0x1234)\n+#define SHORT_VALUE ((short)0x1234)\n+#define INT_VALUE ((int)0x1234)\n+#define LONG_VALUE ((long)0x12345678L)\n+#define LL_VALUE ((long long)0x12345678abcdef0LL)\n+\n+#define SHIFT1 4\n+#define SHIFT2 ((sizeof (long long) * CHAR_BIT) - SHIFT1)\n+\n+char c = CHAR_VALUE;\n+short s = SHORT_VALUE;\n+int i = INT_VALUE;\n+long l = LONG_VALUE;\n+long long ll = LL_VALUE;\n+int shift1 = SHIFT1;\n+int shift2 = SHIFT2;\n+\n+main ()\n+{\n+  if (ROR (c, shift1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (c, SHIFT1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (s, shift1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (s, SHIFT1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (i, shift1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (i, SHIFT1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (l, shift1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (l, SHIFT1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ll, shift1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ll, SHIFT1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ll, shift2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROR (ll, SHIFT2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (c, shift1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (c, SHIFT1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (s, shift1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (s, SHIFT1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (i, shift1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (i, SHIFT1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (l, shift1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (l, SHIFT1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ll, shift1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ll, SHIFT1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ll, shift2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (ll, SHIFT2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "b41adffda9986cc29f13d0e0b10a0749b38474c5", "filename": "gcc/testsuite/gcc.c-torture/execute/20020508-3.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea45dbb8e7cc710e17a273b44b49483c130ecd5d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020508-3.c?ref=ea45dbb8e7cc710e17a273b44b49483c130ecd5d", "patch": "@@ -0,0 +1,102 @@\n+#include <limits.h>\n+\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n+#define ROR(a,b) (((a) >> (b)) | ((a) << ((sizeof (a) * CHAR_BIT) - (b))))\n+#define ROL(a,b) (((a) << (b)) | ((a) >> ((sizeof (a) * CHAR_BIT) - (b))))\n+\n+#define CHAR_VALUE ((char)0xf234)\n+#define SHORT_VALUE ((short)0xf234)\n+#define INT_VALUE ((int)0xf234)\n+#define LONG_VALUE ((long)0xf2345678L)\n+#define LL_VALUE ((long long)0xf2345678abcdef0LL)\n+\n+#define SHIFT1 4\n+#define SHIFT2 ((sizeof (long long) * CHAR_BIT) - SHIFT1)\n+\n+char c = CHAR_VALUE;\n+short s = SHORT_VALUE;\n+int i = INT_VALUE;\n+long l = LONG_VALUE;\n+long long ll = LL_VALUE;\n+int shift1 = SHIFT1;\n+int shift2 = SHIFT2;\n+\n+main ()\n+{\n+  if (ROR (c, shift1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (c, SHIFT1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (s, shift1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (s, SHIFT1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (i, shift1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (i, SHIFT1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (l, shift1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (l, SHIFT1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ll, shift1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ll, SHIFT1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ll, shift2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROR (ll, SHIFT2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (c, shift1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (c, SHIFT1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (s, shift1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (s, SHIFT1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (i, shift1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (i, SHIFT1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (l, shift1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (l, SHIFT1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ll, shift1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ll, SHIFT1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ll, shift2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (ll, SHIFT2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  exit (0);\n+}"}]}