{"sha": "8cc43cb40362b9120858264a853c0222c35fe7e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjNDNjYjQwMzYyYjkxMjA4NTgyNjRhODUzYzAyMjJjMzVmZTdlNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-10-18T23:02:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-10-18T23:02:27Z"}, "message": "Revert SVN revision 264561, incorrectly committed directly to the GCC\nrepo rather than to the master repo.\n\nFrom-SVN: r265294", "tree": {"sha": "1bac7b3644e81e33e652af19554db46415c47971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bac7b3644e81e33e652af19554db46415c47971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cc43cb40362b9120858264a853c0222c35fe7e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc43cb40362b9120858264a853c0222c35fe7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc43cb40362b9120858264a853c0222c35fe7e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc43cb40362b9120858264a853c0222c35fe7e7/comments", "author": null, "committer": null, "parents": [{"sha": "0799a08b5c6a2087de9512252be6d9192e92395a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0799a08b5c6a2087de9512252be6d9192e92395a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0799a08b5c6a2087de9512252be6d9192e92395a"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "b56b4d0b57dc8e64be69487c76999f602f2eeb7d", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=8cc43cb40362b9120858264a853c0222c35fe7e7", "patch": "@@ -979,7 +979,7 @@ Gogo::analyze_escape()\n       for (std::vector<Named_object*>::iterator fn = stack.begin();\n            fn != stack.end();\n            ++fn)\n-\tthis->tag_function(*fn);\n+        this->tag_function(context, *fn);\n \n       if (this->debug_escape_level() != 0)\n \t{\n@@ -1232,10 +1232,10 @@ Escape_analysis_loop::statement(Block*, size_t*, Statement* s)\n class Escape_analysis_assign : public Traverse\n {\n public:\n-  Escape_analysis_assign(Escape_context* context)\n+  Escape_analysis_assign(Escape_context* context, Named_object* fn)\n     : Traverse(traverse_statements\n \t       | traverse_expressions),\n-      context_(context)\n+      context_(context), fn_(fn)\n   { }\n \n   // Model statements within a function as assignments and flows between nodes.\n@@ -1272,6 +1272,8 @@ class Escape_analysis_assign : public Traverse\n private:\n   // The escape context for this set of functions.\n   Escape_context* context_;\n+  // The current function being analyzed.\n+  Named_object* fn_;\n };\n \n // Helper function to detect self assignment like the following.\n@@ -2702,7 +2704,7 @@ Gogo::assign_connectivity(Escape_context* context, Named_object* fn)\n   int save_depth = context->loop_depth();\n   context->set_loop_depth(1);\n \n-  Escape_analysis_assign ea(context);\n+  Escape_analysis_assign ea(context, fn);\n   Function::Results* res = fn->func_value()->result_variables();\n   if (res != NULL)\n     {\n@@ -3265,13 +3267,17 @@ Gogo::propagate_escape(Escape_context* context, Node* dst)\n class Escape_analysis_tag\n {\n  public:\n-  Escape_analysis_tag()\n+  Escape_analysis_tag(Escape_context* context)\n+    : context_(context)\n   { }\n \n   // Add notes to the function's type about the escape information of its\n   // input parameters.\n   void\n   tag(Named_object* fn);\n+\n+ private:\n+  Escape_context* context_;\n };\n \n void\n@@ -3379,9 +3385,9 @@ Escape_analysis_tag::tag(Named_object* fn)\n // retain analysis results across imports.\n \n void\n-Gogo::tag_function(Named_object* fn)\n+Gogo::tag_function(Escape_context* context, Named_object* fn)\n {\n-  Escape_analysis_tag eat;\n+  Escape_analysis_tag eat(context);\n   eat.tag(fn);\n }\n "}, {"sha": "e1feb66f66a7176a271e1f5117d78bbe70ce860a", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=8cc43cb40362b9120858264a853c0222c35fe7e7", "patch": "@@ -10108,7 +10108,7 @@ Call_expression::do_type()\n   else if (results->size() == 1)\n     ret = results->begin()->type();\n   else\n-    ret = Type::make_call_multiple_result_type();\n+    ret = Type::make_call_multiple_result_type(this);\n \n   this->type_ = ret;\n "}, {"sha": "0864ee1d72a8d41fee3a851ba4e073bad8595b75", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=8cc43cb40362b9120858264a853c0222c35fe7e7", "patch": "@@ -680,7 +680,7 @@ class Gogo\n   // Add notes about the escape level of a function's input and output\n   // parameters for exporting and importing top level functions. \n   void\n-  tag_function(Named_object*);\n+  tag_function(Escape_context*, Named_object*);\n \n   // Reclaim memory of escape analysis Nodes.\n   void"}, {"sha": "e368ee0a754a6e654c9a5df80f34868dd5adc50c", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=8cc43cb40362b9120858264a853c0222c35fe7e7", "patch": "@@ -5441,8 +5441,9 @@ Type::make_nil_type()\n class Call_multiple_result_type : public Type\n {\n  public:\n-  Call_multiple_result_type()\n-    : Type(TYPE_CALL_MULTIPLE_RESULT)\n+  Call_multiple_result_type(Call_expression* call)\n+    : Type(TYPE_CALL_MULTIPLE_RESULT),\n+      call_(call)\n   { }\n \n  protected:\n@@ -5475,14 +5476,18 @@ class Call_multiple_result_type : public Type\n   void\n   do_mangled_name(Gogo*, std::string*) const\n   { go_assert(saw_errors()); }\n+\n+ private:\n+  // The expression being called.\n+  Call_expression* call_;\n };\n \n // Make a call result type.\n \n Type*\n-Type::make_call_multiple_result_type()\n+Type::make_call_multiple_result_type(Call_expression* call)\n {\n-  return new Call_multiple_result_type();\n+  return new Call_multiple_result_type(call);\n }\n \n // Class Struct_field."}, {"sha": "8d0faad8b8c9c80ac3e2afd500bca1dfa49bc9fd", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=8cc43cb40362b9120858264a853c0222c35fe7e7", "patch": "@@ -511,7 +511,7 @@ class Type\n   make_nil_type();\n \n   static Type*\n-  make_call_multiple_result_type();\n+  make_call_multiple_result_type(Call_expression*);\n \n   static Struct_type*\n   make_struct_type(Struct_field_list* fields, Location);"}, {"sha": "ccd318d0440d238a3dd3560a26bff2db949735d0", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cc43cb40362b9120858264a853c0222c35fe7e7/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=8cc43cb40362b9120858264a853c0222c35fe7e7", "patch": "@@ -189,15 +189,19 @@ Mark_address_taken::expression(Expression** pexpr)\n class Check_escape : public Traverse\n {\n  public:\n-  Check_escape()\n-    : Traverse(traverse_expressions | traverse_variables)\n+  Check_escape(Gogo* gogo)\n+    : Traverse(traverse_expressions | traverse_variables),\n+      gogo_(gogo)\n   { }\n \n   int\n   expression(Expression**);\n \n   int\n   variable(Named_object*);\n+\n+ private:\n+  Gogo* gogo_;\n };\n \n int\n@@ -617,7 +621,7 @@ Gogo::add_write_barriers()\n     {\n       this->propagate_writebarrierrec();\n \n-      Check_escape chk;\n+      Check_escape chk(this);\n       this->traverse(&chk);\n     }\n "}]}