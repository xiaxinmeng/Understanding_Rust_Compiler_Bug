{"sha": "e17936f842d2885447b6b8b82c2fb9cbf2679d7e", "node_id": "C_kwDOANBUbNoAKGUxNzkzNmY4NDJkMjg4NTQ0N2I2YjhiODJjMmZiOWNiZjI2NzlkN2U", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-14T07:25:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-14T07:26:56Z"}, "message": "New testcase\n\nThis is a reduced testcase for an issue I ran into when trying to\nimprove PTA compile-time further, there wasn't any C family runfail\nin the testsuite for this.\n\n\t* g++.dg/torture/20230313.C: New testcase.", "tree": {"sha": "883412537107611ac7a627d16a1d230568148f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/883412537107611ac7a627d16a1d230568148f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e17936f842d2885447b6b8b82c2fb9cbf2679d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e17936f842d2885447b6b8b82c2fb9cbf2679d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e17936f842d2885447b6b8b82c2fb9cbf2679d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e17936f842d2885447b6b8b82c2fb9cbf2679d7e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9835599fdb56f33da23e4514a9e21d8c2d51d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9835599fdb56f33da23e4514a9e21d8c2d51d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9835599fdb56f33da23e4514a9e21d8c2d51d71"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "d1f348003bdd5f5b936caa2ed97afa78e915326d", "filename": "gcc/testsuite/g++.dg/torture/20230313.C", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e17936f842d2885447b6b8b82c2fb9cbf2679d7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20230313.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e17936f842d2885447b6b8b82c2fb9cbf2679d7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20230313.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20230313.C?ref=e17936f842d2885447b6b8b82c2fb9cbf2679d7e", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fno-exceptions -fno-rtti\" } */\n+\n+extern \"C\" void free (void *);\n+void fancy_abort () { __builtin_abort (); }\n+struct vec_prefix\n+{\n+  unsigned m_alloc : 1;\n+  unsigned m_using_auto_storage : 1;\n+  unsigned m_num;\n+};\n+struct vl_ptr\n+;\n+struct va_heap\n+{\n+  typedef vl_ptr default_layout;\n+};\n+template<typename ,\n+         typename A ,\n+         typename = typename A::default_layout>\n+struct vec\n+;\n+template<typename T, typename A>\n+struct vec<T, A, int>\n+{\n+  T & operator[] (unsigned ix)\n+    {\n+      int *__trans_tmp_2;\n+      !m_vecpfx.m_num ? fancy_abort (), 0 : 0;\n+      __trans_tmp_2 =  reinterpret_cast <T *> (this + 1);\n+      return __trans_tmp_2[ix];\n+    }\n+  bool iterate (unsigned , T *ptr) {\n+      *ptr = 0;\n+      return false;\n+  }\n+  void embedded_init (unsigned , unsigned num, unsigned aut)\n+    {\n+      m_vecpfx.m_alloc =\n+\t  m_vecpfx.m_using_auto_storage = aut;\n+      m_vecpfx.m_num = num;\n+    }\n+  void quick_grow (unsigned len)\n+    {\n+      !m_vecpfx.m_alloc ? fancy_abort (), 0 : m_vecpfx.m_num = len;\n+    }\n+  vec_prefix m_vecpfx;\n+};\n+template<typename T, int N >\n+struct auto_vec : vec<T, va_heap>\n+{\n+  auto_vec ()\n+  {\n+    m_auto.embedded_init (N, 0, 1);\n+    long off = (char *) &m_auto - (char *) this;\n+    this->m_vec = (vec<T, va_heap, int> *) ((char *) this + off);\n+  }\n+  ~auto_vec ()\n+  {\n+    this->release ();\n+  }\n+  vec<T, va_heap, int> m_auto;\n+  char m_data;\n+};\n+template<typename T>\n+struct vec<T, va_heap>\n+{\n+void\n+release ()\n+{\n+  bool __trans_tmp_1 =  m_vec ? m_vec->m_vecpfx.m_using_auto_storage : false;\n+  if (__trans_tmp_1)\n+      return;\n+  vec<int, va_heap, int> *&v = m_vec;\n+    free (m_vec);\n+    v = nullptr;\n+}\n+T &operator[] (unsigned ix) { return (*m_vec)[ix]; }\n+bool\n+iterate (unsigned ix, T *ptr) {\n+    m_vec->iterate (ix, ptr);\n+    return false;\n+}\n+void\n+quick_grow (unsigned len)\n+{\n+  m_vec->quick_grow (len);\n+}\n+  vec<T, va_heap, int> *m_vec;\n+};\n+void test_auto_alias ()\n+{\n+  volatile int i = 1;\n+  auto_vec<int, 8> v;\n+  v.quick_grow (2);\n+  v[0] = 1;\n+  v[1] = 2;\n+  int val;\n+  for (int ix = i; v.iterate (ix, &val); ix++)\n+    if (val != 2)\n+      __builtin_abort ();\n+  if (val != 0)\n+    __builtin_abort ();\n+}\n+int main()\n+{\n+  test_auto_alias ();\n+  return 0;\n+}"}]}