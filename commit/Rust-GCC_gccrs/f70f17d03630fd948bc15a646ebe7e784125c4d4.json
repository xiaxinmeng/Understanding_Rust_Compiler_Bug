{"sha": "f70f17d03630fd948bc15a646ebe7e784125c4d4", "node_id": "C_kwDOANBUbNoAKGY3MGYxN2QwMzYzMGZkOTQ4YmMxNWE2NDZlYmU3ZTc4NDEyNWM0ZDQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-28T14:46:46Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-28T14:46:46Z"}, "message": "c++: CTAD within template argument [PR102933]\n\nHere when checking for erroneous occurrences of 'auto' inside a template\nargument (which is allowed by the concepts TS for class templates),\nextract_autos_r picks up the CTAD placeholder for X{T{0}} which causes\ncheck_auto_in_tmpl_args to reject this valid template argument.  This\npatch fixes this by making extract_autos_r ignore CTAD placeholders.\n\nHowever, it seems we don't need to call check_auto_in_tmpl_args at all\noutside of the concepts TS since using 'auto' as a type-id is otherwise\nrejected more generally at parse time.  So this patch makes the function\njust exit early if !flag_concepts_ts.\n\nSimilarly, I think the concepts code paths in do_auto_deduction and\ntype_uses_auto are only necessary for the concepts TS, so this patch\nalso restricts these code paths accordingly.\n\n\tPR c++/102933\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_simple_type_specifier): Adjust diagnostic\n\tfor using auto in parameter declaration.\n\t* pt.c (extract_autos_r): Ignore CTAD placeholders.\n\t(extract_autos): Use range-based for.\n\t(do_auto_deduction): Use extract_autos only for the concepts TS\n\tand not also for standard concepts.\n\t(type_uses_auto): Likewise with for_each_template_parm.\n\t(check_auto_in_tmpl_args): Just return false outside of the\n\tconcepts TS.  Simplify.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/nontype-class50.C: New test.\n\t* g++.dg/cpp2a/nontype-class50a.C: New test.", "tree": {"sha": "c8a7da7cf918f8f6d565f41a3962aa6c38655759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8a7da7cf918f8f6d565f41a3962aa6c38655759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f70f17d03630fd948bc15a646ebe7e784125c4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70f17d03630fd948bc15a646ebe7e784125c4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70f17d03630fd948bc15a646ebe7e784125c4d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70f17d03630fd948bc15a646ebe7e784125c4d4/comments", "author": null, "committer": null, "parents": [{"sha": "e5ddbbf992b909d8e38851bd3179d29389e6ac97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ddbbf992b909d8e38851bd3179d29389e6ac97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5ddbbf992b909d8e38851bd3179d29389e6ac97"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "4c2075742d6a899d00b9f3c81331aac1d1467681", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f70f17d03630fd948bc15a646ebe7e784125c4d4", "patch": "@@ -19513,7 +19513,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t  else if (!flag_concepts)\n \t    pedwarn (token->location, 0,\n \t\t     \"use of %<auto%> in parameter declaration \"\n-\t\t     \"only available with %<-fconcepts-ts%>\");\n+\t\t     \"only available with %<-std=c++20%> or %<-fconcepts%>\");\n \t}\n       else\n \ttype = make_auto ();"}, {"sha": "66040035b2fba83aac52720dc82c1e0bf9c854f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f70f17d03630fd948bc15a646ebe7e784125c4d4", "patch": "@@ -28560,7 +28560,7 @@ static int\n extract_autos_r (tree t, void *data)\n {\n   hash_table<auto_hash> &hash = *(hash_table<auto_hash>*)data;\n-  if (is_auto (t))\n+  if (is_auto (t) && !template_placeholder_p (t))\n     {\n       /* All the autos were built with index 0; fix that up now.  */\n       tree *p = hash.find_slot (t, INSERT);\n@@ -28594,10 +28594,8 @@ extract_autos (tree type)\n   for_each_template_parm (type, extract_autos_r, &hash, &visited, true);\n \n   tree tree_vec = make_tree_vec (hash.elements());\n-  for (hash_table<auto_hash>::iterator iter = hash.begin();\n-       iter != hash.end(); ++iter)\n+  for (tree elt : hash)\n     {\n-      tree elt = *iter;\n       unsigned i = TEMPLATE_PARM_IDX (TEMPLATE_TYPE_PARM_INDEX (elt));\n       TREE_VEC_ELT (tree_vec, i)\n \t= build_tree_list (NULL_TREE, TYPE_NAME (elt));\n@@ -29837,7 +29835,7 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n       tree parms = build_tree_list (NULL_TREE, type);\n       tree tparms;\n \n-      if (flag_concepts)\n+      if (flag_concepts_ts)\n \ttparms = extract_autos (type);\n       else\n \t{\n@@ -30025,7 +30023,7 @@ type_uses_auto (tree type)\n {\n   if (type == NULL_TREE)\n     return NULL_TREE;\n-  else if (flag_concepts)\n+  else if (flag_concepts_ts)\n     {\n       /* The Concepts TS allows multiple autos in one type-specifier; just\n \t return the first one we find, do_auto_deduction will collect all of\n@@ -30048,6 +30046,11 @@ type_uses_auto (tree type)\n bool\n check_auto_in_tmpl_args (tree tmpl, tree args)\n {\n+  if (!flag_concepts_ts)\n+    /* Only the concepts TS allows 'auto' as a type-id; it'd otherwise\n+       have already been rejected by the parser more generally.  */\n+    return false;\n+\n   /* If there were previous errors, nevermind.  */\n   if (!args || TREE_CODE (args) != TREE_VEC)\n     return false;\n@@ -30057,11 +30060,10 @@ check_auto_in_tmpl_args (tree tmpl, tree args)\n      We'll only be able to tell during template substitution, so we\n      expect to be called again then.  If concepts are enabled and we\n      know we have a type, we're ok.  */\n-  if (flag_concepts\n-      && (identifier_p (tmpl)\n-\t  || (DECL_P (tmpl)\n-\t      &&  (DECL_TYPE_TEMPLATE_P (tmpl)\n-\t\t   || DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl)))))\n+  if (identifier_p (tmpl)\n+      || (DECL_P (tmpl)\n+\t  &&  (DECL_TYPE_TEMPLATE_P (tmpl)\n+\t       || DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl))))\n     return false;\n \n   /* Quickly search for any occurrences of auto; usually there won't"}, {"sha": "1c2786a59e7be715a536e6268785c2739ef75091", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class50.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class50.C?ref=f70f17d03630fd948bc15a646ebe7e784125c4d4", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/102933\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> struct X { T t; };\n+\n+template<X> void f();\n+\n+template<class T>\n+void g() {\n+  f<X{T{0}}>();\n+}\n+\n+template void g<int>();"}, {"sha": "eb8a6ad93755937171376c14678b101bfaa2a1ec", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class50a.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class50a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70f17d03630fd948bc15a646ebe7e784125c4d4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class50a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class50a.C?ref=f70f17d03630fd948bc15a646ebe7e784125c4d4", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/102933\n+// { dg-do compile { target c++20 } }\n+// { dg-additional-options \"-fconcepts-ts\" }\n+\n+#include \"nontype-class50.C\""}]}