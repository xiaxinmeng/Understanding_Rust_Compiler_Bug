{"sha": "ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZjNDE1NWI2ZTQ1YjhhYjcxZDQ5YTRiNTg0ZjdjYWNiNjkzZTZiOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-12T23:01:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-12T23:01:45Z"}, "message": "combine: Fix up expand_compound_operation [PR99905]\n\nThe following testcase is miscompiled on x86_64-linux.\nexpand_compound_operation is called on\n(zero_extract:DI (mem/c:TI (reg/f:DI 16 argp) [3 i+0 S16 A128])\n    (const_int 16 [0x10])\n    (const_int 63 [0x3f]))\nso mode is DImode, inner_mode is TImode, pos 63, len 16 and modewidth 64.\n\nA couple of lines above the problematic spot we have:\n  if (modewidth >= pos + len)\n    {\n      tem = gen_lowpart (mode, XEXP (x, 0));\nwhere the code uses gen_lowpart and then shift left/right to extract it\nin mode.  But the guarding condition is false - 64 >= 63 + 16\nand so we enter the next condition, where the code shifts XEXP (x, 0)\nright by pos and then adds AND.  It does so incorrectly though.\nGiven the modewidth < pos + len, inner_mode must be necessarily larger\nthan mode and XEXP (x, 0) has the innermode, but it was calling\nsimplify_shift_const with mode rather than inner_mode, which meant\ninconsistent arguments to simplify_shift_const and in this case made\na DImode MEM shift out of it.\n\nThe following patch fixes it, by doing the shift in inner_mode properly\nand then after the shift doing the lowpart subreg and masking already\nin mode.\n\n2021-04-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/99905\n\t* combine.c (expand_compound_operation): If pos + len > modewidth,\n\tperform the right shift by pos in inner_mode and then convert to mode,\n\tinstead of trying to simplify a shift of rtx with inner_mode by pos\n\tas if it was a shift in mode.\n\n\t* gcc.target/i386/pr99905.c: New test.", "tree": {"sha": "5b6889ccf8bf4f7f7b9ac5de8217a67961020795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6889ccf8bf4f7f7b9ac5de8217a67961020795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1c8ad8339d551ac91a7af5614f29b9a687189a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1c8ad8339d551ac91a7af5614f29b9a687189a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1c8ad8339d551ac91a7af5614f29b9a687189a"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "6cb5b0ca1021e96cd8a3673d588a93fb382403b1", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9", "patch": "@@ -7409,11 +7409,15 @@ expand_compound_operation (rtx x)\n \t\t\t\t  mode, tem, modewidth - len);\n     }\n   else if (unsignedp && len < HOST_BITS_PER_WIDE_INT)\n-    tem = simplify_and_const_int (NULL_RTX, mode,\n-\t\t\t\t  simplify_shift_const (NULL_RTX, LSHIFTRT,\n-\t\t\t\t\t\t\tmode, XEXP (x, 0),\n-\t\t\t\t\t\t\tpos),\n-\t\t\t\t  (HOST_WIDE_INT_1U << len) - 1);\n+    {\n+      tem = simplify_shift_const (NULL_RTX, LSHIFTRT, inner_mode,\n+\t\t\t\t  XEXP (x, 0), pos);\n+      tem = gen_lowpart (mode, tem);\n+      if (!tem || GET_CODE (tem) == CLOBBER)\n+\treturn x;\n+      tem = simplify_and_const_int (NULL_RTX, mode, tem,\n+\t\t\t\t    (HOST_WIDE_INT_1U << len) - 1);\n+    }\n   else\n     /* Any other cases we can't handle.  */\n     return x;"}, {"sha": "6d1b2305a768ca19178fedf5e846e671bb7efcfc", "filename": "gcc/testsuite/gcc.target/i386/pr99905.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99905.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99905.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99905.c?ref=ffc4155b6e45b8ab71d49a4b584f7cacb693e6b9", "patch": "@@ -0,0 +1,33 @@\n+/* PR rtl-optimization/99905 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-Os -mno-mmx -mno-sse\" } */\n+\n+typedef unsigned char U;\n+typedef unsigned char __attribute__((__vector_size__ (8))) A;\n+typedef unsigned char __attribute__((__vector_size__ (16))) B;\n+typedef unsigned char __attribute__((__vector_size__ (32))) C;\n+typedef unsigned int __attribute__((__vector_size__ (8))) D;\n+typedef unsigned long long __attribute__((__vector_size__ (8))) E;\n+typedef unsigned __int128 I;\n+typedef unsigned long long L;\n+\n+D gv;\n+I gi;\n+\n+L __attribute__((__noipa__))\n+foo (int ua, int ub, int uc, int ud, E ue, I i)\n+{\n+  D d = (U) __builtin_bswap16 (i >> 63) + gv;\n+  B y = ((union { C a; B b[2];}) (C){ }).b[0] + (B) gi;\n+  A z = ((union { B a; A b[2];}) y).b[0] + (A) d;\n+  return (L)z;\n+}\n+\n+int\n+main ()\n+{\n+  L x = foo (0, 0, 0, 0, (E) { }, (I) 0x100 << 63);\n+  if (x != 0x100000001)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}