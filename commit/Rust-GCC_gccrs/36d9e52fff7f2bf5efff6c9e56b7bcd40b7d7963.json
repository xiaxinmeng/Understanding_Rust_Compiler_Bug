{"sha": "36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkOWU1MmZmZjdmMmJmNWVmZmY2YzllNTZiN2JjZDQwYjdkNzk2Mw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-02T22:29:53Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-02T22:29:53Z"}, "message": "trans-intrinsic.c (gfc_conv_intrinsic_aint): Fix whitespace.\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic_aint): Fix whitespace.\n\t(gfc_conv_intrinsic_ishft): Only evaluate arguments once.\n\t(gfc_conv_intrinsic_ishftc): Only evaluate arguments once.\n\t* intrinsic.texi (RSHIFT): Fix documentation.\n\n\t* gfortran.dg/ishft_4.f90: New test.\n\nFrom-SVN: r163792", "tree": {"sha": "10b30bedfdd9903621bc39b34ee04a0aa7c85f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10b30bedfdd9903621bc39b34ee04a0aa7c85f73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "184866c501bce726b5d01349036e43d7090d40dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184866c501bce726b5d01349036e43d7090d40dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184866c501bce726b5d01349036e43d7090d40dd"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "477c839249117979bf3f2554fef42d7740e0164b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "patch": "@@ -1,3 +1,10 @@\n+2010-09-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_aint): Fix whitespace.\n+\t(gfc_conv_intrinsic_ishft): Only evaluate arguments once.\n+\t(gfc_conv_intrinsic_ishftc): Only evaluate arguments once.\n+\t* intrinsic.texi (RSHIFT): Fix documentation.\n+\n 2010-09-02  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45186"}, {"sha": "e78bb0dc22915dc081581d7b95d8bc46d7980569", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "patch": "@@ -9706,9 +9706,10 @@ The value returned is equal to\n @item @emph{Description}:\n @code{RSHIFT} returns a value corresponding to @var{I} with all of the\n bits shifted right by @var{SHIFT} places.  If the absolute value of\n-@var{SHIFT} is greater than @code{BIT_SIZE(I)}, the value is undefined. \n-Bits shifted out from the left end are lost; zeros are shifted in from\n-the opposite end.\n+@var{SHIFT} is greater than @code{BIT_SIZE(I)}, the value is undefined.\n+Bits shifted out from the right end are lost. The fill is arithmetic: the\n+bits shifted in from the left end are equal to the leftmost bit, which in\n+two's complement representation is the sign bit.\n \n This function has been superseded by the @code{ISHFT} intrinsic, which\n is standard in Fortran 95 and later."}, {"sha": "8f50e6dcf701a0d6170f2b04cdf8dccc432501e9", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "patch": "@@ -456,7 +456,7 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n   int kind;\n \n   kind = expr->ts.kind;\n-  nargs =  gfc_intrinsic_argument_list_length (expr);\n+  nargs = gfc_intrinsic_argument_list_length (expr);\n \n   decl = NULL_TREE;\n   /* We have builtin functions for some cases.  */\n@@ -3235,6 +3235,10 @@ gfc_conv_intrinsic_ishft (gfc_se * se, gfc_expr * expr)\n   tree rshift;\n \n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n+\n+  args[0] = gfc_evaluate_now (args[0], &se->pre);\n+  args[1] = gfc_evaluate_now (args[1], &se->pre);\n+\n   type = TREE_TYPE (args[0]);\n   utype = unsigned_type_for (type);\n \n@@ -3320,7 +3324,7 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n \t  gcc_unreachable ();\n \t}\n       se->expr = build_call_expr_loc (input_location,\n-\t\t\t\t  tmp, 3, args[0], args[1], args[2]);\n+\t\t\t\t      tmp, 3, args[0], args[1], args[2]);\n       /* Convert the result back to the original type, if we extended\n \t the first argument's width above.  */\n       if (expr->ts.kind < 4)\n@@ -3330,6 +3334,10 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n     }\n   type = TREE_TYPE (args[0]);\n \n+  /* Evaluate arguments only once.  */\n+  args[0] = gfc_evaluate_now (args[0], &se->pre);\n+  args[1] = gfc_evaluate_now (args[1], &se->pre);\n+\n   /* Rotate left if positive.  */\n   lrot = fold_build2 (LROTATE_EXPR, type, args[0], args[1]);\n "}, {"sha": "34cccd1875974fe07792a5c121992fff329626ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "patch": "@@ -1,3 +1,7 @@\n+2010-09-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/ishft_4.f90: New test.\n+\n 2010-09-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/ppc-fpconv-10.c: New file to test generating"}, {"sha": "4e2ad2b137f6acf1aa9404c8de8e6e0568eb0197", "filename": "gcc/testsuite/gfortran.dg/ishft_4.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft_4.f90?ref=36d9e52fff7f2bf5efff6c9e56b7bcd40b7d7963", "patch": "@@ -0,0 +1,40 @@\n+! We want to check that ISHFT evaluates its arguments only once\n+!\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+\n+program test\n+\n+  if (ishft (foo(), 2) /= 4) call abort\n+  if (ishft (foo(), -1) /= 1) call abort\n+  if (ishft (1, foo()) /= 8) call abort\n+  if (ishft (16, -foo()) /= 1) call abort\n+\n+  if (ishftc (bar(), 2) /= 4) call abort\n+  if (ishftc (bar(), -1) /= 1) call abort\n+  if (ishftc (1, bar()) /= 8) call abort\n+  if (ishftc (16, -bar()) /= 1) call abort\n+\n+contains\n+  \n+  integer function foo ()\n+    integer, save :: i = 0\n+    i = i + 1\n+    foo = i\n+  end function\n+\n+  integer function bar ()\n+    integer, save :: i = 0\n+    i = i + 1\n+    bar = i\n+  end function\n+\n+end program\n+\n+! The regexp \"foo ()\" should be seen once in the dump:\n+!   -- once in the function definition itself\n+!   -- plus as many times as the function is called\n+!\n+! { dg-final { scan-tree-dump-times \"foo *\\\\\\(\\\\\\)\" 5 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"bar *\\\\\\(\\\\\\)\" 5 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}