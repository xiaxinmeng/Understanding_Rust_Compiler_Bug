{"sha": "37545fa7226bfa3aa72244dd119a9a82ed26d077", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1NDVmYTcyMjZiZmEzYWE3MjI0NGRkMTE5YTlhODJlZDI2ZDA3Nw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-07-25T22:35:24Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-07-25T22:35:24Z"}, "message": "Implement N4051 - Allow typename in a template template parameter\n\ncp/\n\n2014-07-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N4051 - Allow typename in a template template parameter\n\t* parser.c (cp_parser_type_parameter_key): New funtion;\n\t(cp_parser_token_is_type_parameter_key): Ditto;\n\t(cp_parser_type_parameter): Look for type-parameter-key for all versions\n\tbut pedwarn for less than cxx1z.\n\n\ntestsuite/\n\n2014-07-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N4051 - Allow typename in a template template parameter\n\t* lib/target-supports.exp (check_effective_target_c++1y): Now\n\tmeans C++1y and up.\n\t(check_effective_target_c++1y_down): New.\n\t(check_effective_target_c++1z_only): New.\n\t(check_effective_target_c++1z): New.\n\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm.C: New.\n\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C: New.\n\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm-.C: New.\n\nFrom-SVN: r213065", "tree": {"sha": "efcf15526658a36e2836301e944f391c42dd576a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efcf15526658a36e2836301e944f391c42dd576a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37545fa7226bfa3aa72244dd119a9a82ed26d077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37545fa7226bfa3aa72244dd119a9a82ed26d077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37545fa7226bfa3aa72244dd119a9a82ed26d077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37545fa7226bfa3aa72244dd119a9a82ed26d077/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a634323ae02c99a5a7e2b7c9674109ed2af6c969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a634323ae02c99a5a7e2b7c9674109ed2af6c969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a634323ae02c99a5a7e2b7c9674109ed2af6c969"}], "stats": {"total": 166, "additions": 163, "deletions": 3}, "files": [{"sha": "cfe0a48082487f5081f75f10145e3722a4da91a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37545fa7226bfa3aa72244dd119a9a82ed26d077", "patch": "@@ -1,3 +1,11 @@\n+2014-07-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N4051 - Allow typename in a template template parameter\n+\t* parser.c (cp_parser_type_parameter_key): New funtion;\n+\t(cp_parser_token_is_type_parameter_key): Ditto;\n+\t(cp_parser_type_parameter): Look for type-parameter-key for all versions\n+\tbut pedwarn for less than cxx1z.\n+\n 2014-07-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50961"}, {"sha": "32c7a3fe1469531c18536e74ff52c890335bc757", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=37545fa7226bfa3aa72244dd119a9a82ed26d077", "patch": "@@ -2151,6 +2151,8 @@ static tree cp_parser_class_head\n   (cp_parser *, bool *);\n static enum tag_types cp_parser_class_key\n   (cp_parser *);\n+static void cp_parser_type_parameter_key\n+  (cp_parser* parser);\n static void cp_parser_member_specification_opt\n   (cp_parser *);\n static void cp_parser_member_declaration\n@@ -2409,6 +2411,8 @@ static bool cp_parser_nth_token_starts_template_argument_list_p\n   (cp_parser *, size_t);\n static enum tag_types cp_parser_token_is_class_key\n   (cp_token *);\n+static enum tag_types cp_parser_token_is_type_parameter_key\n+  (cp_token *);\n static void cp_parser_check_class_key\n   (enum tag_types, tree type);\n static void cp_parser_check_access_in_redeclaration\n@@ -13375,8 +13379,8 @@ cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)\n \tcp_parser_template_parameter_list (parser);\n \t/* Look for the `>'.  */\n \tcp_parser_require (parser, CPP_GREATER, RT_GREATER);\n-\t/* Look for the `class' keyword.  */\n-\tcp_parser_require_keyword (parser, RID_CLASS, RT_CLASS);\n+\t/* Look for the `class' or 'typename' keywords.  */\n+\tcp_parser_type_parameter_key (parser);\n         /* If the next token is an ellipsis, we have a template\n            argument pack. */\n         if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n@@ -20258,6 +20262,35 @@ cp_parser_class_key (cp_parser* parser)\n   return tag_type;\n }\n \n+/* Parse a type-parameter-key.\n+\n+   type-parameter-key:\n+     class\n+     typename\n+ */\n+\n+static void\n+cp_parser_type_parameter_key (cp_parser* parser)\n+{\n+  /* Look for the type-parameter-key.  */\n+  enum tag_types tag_type = none_type;\n+  cp_token *token = cp_lexer_peek_token (parser->lexer);\n+  if ((tag_type = cp_parser_token_is_type_parameter_key (token)) != none_type)\n+    {\n+      cp_lexer_consume_token (parser->lexer);\n+      if (pedantic && tag_type == typename_type && cxx_dialect < cxx1z)\n+\t/* typename is not allowed in a template template parameter\n+\t   by the standard until C++1Z.  */\n+\tpedwarn (token->location, OPT_Wpedantic, \n+\t\t \"ISO C++ forbids typename key in template template parameter;\"\n+\t\t \" use -std=c++1z or -std=gnu++1z\");\n+    }\n+  else\n+    cp_parser_error (parser, \"expected %<class%> or %<typename%>\");\n+\n+  return;\n+}\n+\n /* Parse an (optional) member-specification.\n \n    member-specification:\n@@ -24776,6 +24809,27 @@ cp_parser_token_is_class_key (cp_token* token)\n     }\n }\n \n+/* Returns the kind of tag indicated by TOKEN, if it is a type-parameter-key,\n+   or none_type otherwise or if the token is null.  */\n+\n+static enum tag_types\n+cp_parser_token_is_type_parameter_key (cp_token* token)\n+{\n+  if (!token)\n+    return none_type;\n+\n+  switch (token->keyword)\n+    {\n+    case RID_CLASS:\n+      return class_type;\n+    case RID_TYPENAME:\n+      return typename_type;\n+\n+    default:\n+      return none_type;\n+    }\n+}\n+\n /* Issue an error message if the CLASS_KEY does not match the TYPE.  */\n \n static void"}, {"sha": "92d1f9693d7918e0c3d15c2aa9dcc049c91eb2a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37545fa7226bfa3aa72244dd119a9a82ed26d077", "patch": "@@ -1,3 +1,15 @@\n+2014-07-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N4051 - Allow typename in a template template parameter\n+\t* lib/target-supports.exp (check_effective_target_c++1y): Now\n+\tmeans C++1y and up.\n+\t(check_effective_target_c++1y_down): New.\n+\t(check_effective_target_c++1z_only): New.\n+\t(check_effective_target_c++1z): New.\n+\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm.C: New.\n+\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C: New.\n+\t* g++.dg/cpp1z/typename-tmpl-tmpl-parm-.C: New.\n+\n 2014-07-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/storage_size_5.f90: New."}, {"sha": "29c699d0fd21c8c76c4c807ba511c12fc1d67862", "filename": "gcc/testsuite/g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-neg.C?ref=37545fa7226bfa3aa72244dd119a9a82ed26d077", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+template<template<typename> struct X> // { dg-error \"expected .class. or .typename. before\" }\n+  struct D {};\n+\n+template<template<typename> X> // { dg-error \"expected .class. or .typename. before\" }\n+  struct E {};\n+\n+// { dg-error \"expected identifier\" \"expected\" { target *-*-* } 4 }\n+// { dg-error \"expected .>.\" \"expected\" { target *-*-* } 4 }"}, {"sha": "48cb8ab0892e8108c17a8af50d3daa748ee1b5d2", "filename": "gcc/testsuite/g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-ped-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-ped-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm-ped-neg.C?ref=37545fa7226bfa3aa72244dd119a9a82ed26d077", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile { target c++1y_down } }\n+// { dg-options \"-pedantic\" }\n+\n+template<typename T>\n+  struct A {};\n+\n+#if __cplusplus >= 201103L\n+template<typename T>\n+  using B = int;\n+#endif\n+\n+template<template<typename> class X>\n+  struct C {};\n+\n+C<A> ca;\n+\n+#if __cplusplus >= 201103L\n+C<B> cb;\n+#endif\n+\n+template<template<typename> typename X> // { dg-warning \"ISO C.. forbids typename key in template template parameter\" }\n+  struct D {};\n+\n+D<A> da;\n+\n+#if __cplusplus >= 201103L\n+D<B> db;\n+#endif"}, {"sha": "4c3eae11203483f3eb2222e3760f62f3007a4d5b", "filename": "gcc/testsuite/g++.dg/cpp1z/typename-tmpl-tmpl-parm.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename-tmpl-tmpl-parm.C?ref=37545fa7226bfa3aa72244dd119a9a82ed26d077", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+template<typename T>\n+  struct A {};\n+\n+#if __cplusplus >= 201103L\n+template<typename T>\n+  using B = int;\n+#endif\n+\n+template<template<typename> class X>\n+  struct C {};\n+\n+C<A> ca;\n+\n+#if __cplusplus >= 201103L\n+C<B> cb;\n+#endif\n+\n+template<template<typename> typename X>\n+  struct D {};\n+\n+D<A> da;\n+\n+#if __cplusplus >= 201103L\n+D<B> db;\n+#endif"}, {"sha": "fa5137ea472e1773be60759caad32bbc7ab4c551", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37545fa7226bfa3aa72244dd119a9a82ed26d077/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=37545fa7226bfa3aa72244dd119a9a82ed26d077", "patch": "@@ -5707,7 +5707,16 @@ proc check_effective_target_c++1y_only { } {\n     return [check-flags { { } { } { -std=c++1y -std=gnu++1y -std=c++14 -std=gnu++14 } }]\n }\n proc check_effective_target_c++1y { } {\n-    return [check_effective_target_c++1y_only]\n+    if [check_effective_target_c++1y_only] {\n+\treturn 1\n+    }\n+    return [check_effective_target_c++1z]\n+}\n+proc check_effective_target_c++1y_down { } {\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    return ![check_effective_target_c++1z]\n }\n \n proc check_effective_target_c++98_only { } {\n@@ -5717,6 +5726,16 @@ proc check_effective_target_c++98_only { } {\n     return ![check_effective_target_c++11]\n }\n \n+proc check_effective_target_c++1z_only { } {\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    return [check-flags { { } { } { -std=c++1z -std=gnu++1z } }]\n+}\n+proc check_effective_target_c++1z { } {\n+    return [check_effective_target_c++1z_only]\n+}\n+\n # Return 1 if expensive testcases should be run.\n \n proc check_effective_target_run_expensive_tests { } {"}]}