{"sha": "910f72e78fe76993b8a9bcc9e385a788446f1f10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwZjcyZTc4ZmU3Njk5M2I4YTliY2M5ZTM4NWE3ODg0NDZmMWYxMA==", "commit": {"author": {"name": "Shaokun Zhang", "email": "zhangshaokun@hisilicon.com", "date": "2018-09-21T12:25:12Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-09-21T12:25:12Z"}, "message": "[aarch64] Add HiSilicon tsv110 CPU support\n\nThis patch adds HiSilicon's an mcpu: tsv110, which supports v8_4A.\nIt has been tested on aarch64 and no regressions from this patch.\n\n2018-09-21  Shaokun Zhang  <zhangshaokun@hisilicon.com>\n            Bo Zhou  <zbo.zhou@hisilicon.com>\n\n\t* config/aarch64/aarch64-cores.def (tsv110): New CPU.\n\t* config/aarch64/aarch64-tune.md: Regenerated.\n\t* doc/invoke.texi (AArch64 Options/-mtune): Add \"tsv110\".\n\t* config/aarch64/aarch64.c (tsv110_tunings): New tuning table.\n\t* config/aarch64/aarch64-cost-tables.h: Add \"tsv110\" extra costs.\n\nCo-Authored-By: Bo Zhou <zbo.zhou@hisilicon.com>\n\nFrom-SVN: r264470", "tree": {"sha": "a2920ca60e143c4c7d92dcc97d9a938e0f2377af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2920ca60e143c4c7d92dcc97d9a938e0f2377af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/910f72e78fe76993b8a9bcc9e385a788446f1f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910f72e78fe76993b8a9bcc9e385a788446f1f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910f72e78fe76993b8a9bcc9e385a788446f1f10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910f72e78fe76993b8a9bcc9e385a788446f1f10/comments", "author": {"login": "zhangshk", "id": 25894465, "node_id": "MDQ6VXNlcjI1ODk0NDY1", "avatar_url": "https://avatars.githubusercontent.com/u/25894465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangshk", "html_url": "https://github.com/zhangshk", "followers_url": "https://api.github.com/users/zhangshk/followers", "following_url": "https://api.github.com/users/zhangshk/following{/other_user}", "gists_url": "https://api.github.com/users/zhangshk/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangshk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangshk/subscriptions", "organizations_url": "https://api.github.com/users/zhangshk/orgs", "repos_url": "https://api.github.com/users/zhangshk/repos", "events_url": "https://api.github.com/users/zhangshk/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangshk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbd29d0eaeb29c5549cfac6a2d5ea936be118429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd29d0eaeb29c5549cfac6a2d5ea936be118429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd29d0eaeb29c5549cfac6a2d5ea936be118429"}], "stats": {"total": 202, "additions": 200, "deletions": 2}, "files": [{"sha": "ae51a82f604bcb749341ae4f8e9f3b522d48fc68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=910f72e78fe76993b8a9bcc9e385a788446f1f10", "patch": "@@ -1,3 +1,12 @@\n+2018-09-21  Shaokun Zhang  <zhangshaokun@hisilicon.com>\n+            Bo Zhou  <zbo.zhou@hisilicon.com>\n+\n+\t* config/aarch64/aarch64-cores.def (tsv110): New CPU.\n+\t* config/aarch64/aarch64-tune.md: Regenerated.\n+\t* doc/invoke.texi (AArch64 Options/-mtune): Add \"tsv110\".\n+\t* config/aarch64/aarch64.c (tsv110_tunings): New tuning table.\n+\t* config/aarch64/aarch64-cost-tables.h: Add \"tsv110\" extra costs.\n+\n 2018-09-21  Andrew Stubbs  <ams@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "b1278fc263665e6ef4b175be8ab00502e7d005c4", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=910f72e78fe76993b8a9bcc9e385a788446f1f10", "patch": "@@ -92,6 +92,9 @@ AARCH64_CORE(\"cortex-a76\",  cortexa76, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2\n \n /* ARMv8.4-A Architecture Processors.  */\n \n+/* HiSilicon ('H') cores. */\n+AARCH64_CORE(\"tsv110\",     tsv110,    cortexa57,    8_4A, AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n+\n /* Qualcomm ('Q') cores. */\n AARCH64_CORE(\"saphira\",     saphira,    falkor,    8_4A,  AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC, saphira,   0x51, 0xC01, -1)\n "}, {"sha": "b138aa3053837ad8a2e0f2055572b38ccd1e28ab", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=910f72e78fe76993b8a9bcc9e385a788446f1f10", "patch": "@@ -334,4 +334,108 @@ const struct cpu_cost_table thunderx2t99_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table tsv110_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    0,                 /* shift_reg.  */\n+    COSTS_N_INSNS (1), /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    COSTS_N_INSNS (1), /* log_shift.  */\n+    COSTS_N_INSNS (1), /* log_shift_reg.  */\n+    0,                 /* extend.  */\n+    COSTS_N_INSNS (1), /* extend_arith.  */\n+    0,                 /* bfi.  */\n+    0,                 /* bfx.  */\n+    0,                 /* clz.  */\n+    0,                 /* rev.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (2),       /* simple.  */\n+      COSTS_N_INSNS (2),       /* flag_setting.  */\n+      COSTS_N_INSNS (2),       /* extend.  */\n+      COSTS_N_INSNS (2),       /* add.  */\n+      COSTS_N_INSNS (2),       /* extend_add.  */\n+      COSTS_N_INSNS (11)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (3),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (3),       /* extend.  */\n+      COSTS_N_INSNS (3),       /* add.  */\n+      COSTS_N_INSNS (3),       /* extend_add.  */\n+      COSTS_N_INSNS (19)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (3),         /* load.  */\n+    COSTS_N_INSNS (4),         /* load_sign_extend.  */\n+    COSTS_N_INSNS (3),         /* ldrd.  */\n+    COSTS_N_INSNS (3),         /* ldm_1st.  */\n+    1,                         /* ldm_regs_per_insn_1st.  */\n+    2,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (4),         /* loadf.  */\n+    COSTS_N_INSNS (4),         /* loadd.  */\n+    COSTS_N_INSNS (4),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    1,                         /* stm_regs_per_insn_1st.  */\n+    2,                         /* stm_regs_per_insn_subsequent.  */\n+    0,                         /* storef.  */\n+    0,                         /* stored.  */\n+    COSTS_N_INSNS (1),         /* store_unaligned.  */\n+    COSTS_N_INSNS (4),         /* loadv.  */\n+    COSTS_N_INSNS (4)          /* storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (10),      /* div.  */\n+      COSTS_N_INSNS (4),       /* mult.  */\n+      COSTS_N_INSNS (4),       /* mult_addsub.  */\n+      COSTS_N_INSNS (4),       /* fma.  */\n+      COSTS_N_INSNS (4),       /* addsub.  */\n+      COSTS_N_INSNS (1),       /* fpconst.  */\n+      COSTS_N_INSNS (1),       /* neg.  */\n+      COSTS_N_INSNS (1),       /* compare.  */\n+      COSTS_N_INSNS (2),       /* widen.  */\n+      COSTS_N_INSNS (2),       /* narrow.  */\n+      COSTS_N_INSNS (2),       /* toint.  */\n+      COSTS_N_INSNS (1),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (17),      /* div.  */\n+      COSTS_N_INSNS (4),       /* mult.  */\n+      COSTS_N_INSNS (6),       /* mult_addsub.  */\n+      COSTS_N_INSNS (6),       /* fma.  */\n+      COSTS_N_INSNS (3),       /* addsub.  */\n+      COSTS_N_INSNS (1),       /* fpconst.  */\n+      COSTS_N_INSNS (1),       /* neg.  */\n+      COSTS_N_INSNS (1),       /* compare.  */\n+      COSTS_N_INSNS (2),       /* widen.  */\n+      COSTS_N_INSNS (2),       /* narrow.  */\n+      COSTS_N_INSNS (2),       /* toint.  */\n+      COSTS_N_INSNS (1),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (1)  /* alu.  */\n+  }\n+};\n+\n #endif"}, {"sha": "ad52d89d247329e88a01626d2f03a370e8f75d58", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=910f72e78fe76993b8a9bcc9e385a788446f1f10", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,thunderxt81,thunderxt83,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n+\t\"cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,thunderxt81,thunderxt83,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,tsv110,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "9c68025e1f19236305ab41b0f7ed0cbfa039d3e1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=910f72e78fe76993b8a9bcc9e385a788446f1f10", "patch": "@@ -276,6 +276,22 @@ static const struct cpu_addrcost_table thunderx2t99_addrcost_table =\n   0, /* imm_offset  */\n };\n \n+static const struct cpu_addrcost_table tsv110_addrcost_table =\n+{\n+    {\n+      1, /* hi  */\n+      0, /* si  */\n+      0, /* di  */\n+      1, /* ti  */\n+    },\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  0, /* register_offset  */\n+  1, /* register_sextend  */\n+  1, /* register_zextend  */\n+  0, /* imm_offset  */\n+};\n+\n static const struct cpu_addrcost_table qdf24xx_addrcost_table =\n {\n     {\n@@ -368,6 +384,16 @@ static const struct cpu_regmove_cost thunderx2t99_regmove_cost =\n   4  /* FP2FP  */\n };\n \n+static const struct cpu_regmove_cost tsv110_regmove_cost =\n+{\n+  1, /* GP2GP  */\n+  /* Avoid the use of slow int<->fp moves for spilling by setting\n+     their cost higher than memmov_cost.  */\n+  2, /* GP2FP  */\n+  3, /* FP2GP  */\n+  2  /* FP2FP  */\n+};\n+\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost generic_vector_cost =\n {\n@@ -428,6 +454,25 @@ static const struct cpu_vector_cost thunderx_vector_cost =\n   3 /* cond_not_taken_branch_cost  */\n };\n \n+static const struct cpu_vector_cost tsv110_vector_cost =\n+{\n+  1, /* scalar_int_stmt_cost  */\n+  1, /* scalar_fp_stmt_cost  */\n+  5, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  2, /* vec_int_stmt_cost  */\n+  2, /* vec_fp_stmt_cost  */\n+  2, /* vec_permute_cost  */\n+  3, /* vec_to_scalar_cost  */\n+  2, /* scalar_to_vec_cost  */\n+  5, /* vec_align_load_cost  */\n+  5, /* vec_unalign_load_cost  */\n+  1, /* vec_unalign_store_cost  */\n+  1, /* vec_store_cost  */\n+  1, /* cond_taken_branch_cost  */\n+  1 /* cond_not_taken_branch_cost  */\n+};\n+\n /* Generic costs for vector insn classes.  */\n static const struct cpu_vector_cost cortexa57_vector_cost =\n {\n@@ -605,6 +650,17 @@ static const cpu_prefetch_tune thunderx2t99_prefetch_tune =\n   -1\t\t\t/* default_opt_level  */\n };\n \n+static const cpu_prefetch_tune tsv110_prefetch_tune =\n+{\n+  0,                    /* num_slots  */\n+  64,                   /* l1_cache_size  */\n+  64,                   /* l1_cache_line_size  */\n+  512,                  /* l2_cache_size  */\n+  true,                 /* prefetch_dynamic_strides */\n+  -1,                   /* minimum_stride */\n+  -1                    /* default_opt_level  */\n+};\n+\n static const struct tune_params generic_tunings =\n {\n   &cortexa57_extra_costs,\n@@ -838,6 +894,32 @@ static const struct tune_params thunderx_tunings =\n   &thunderx_prefetch_tune\n };\n \n+static const struct tune_params tsv110_tunings =\n+{\n+  &tsv110_extra_costs,\n+  &tsv110_addrcost_table,\n+  &tsv110_regmove_cost,\n+  &tsv110_vector_cost,\n+  &generic_branch_cost,\n+  &generic_approx_modes,\n+  4,    /* memmov_cost  */\n+  4,    /* issue_rate  */\n+  (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_CMP_BRANCH\n+   | AARCH64_FUSE_ALU_BRANCH), /* fusible_ops  */\n+  \"16\", /* function_align.  */\n+  \"4\",  /* jump_align.  */\n+  \"8\",  /* loop_align.  */\n+  2,    /* int_reassoc_width.  */\n+  4,    /* fp_reassoc_width.  */\n+  1,    /* vec_reassoc_width.  */\n+  2,    /* min_div_recip_mul_sf.  */\n+  2,    /* min_div_recip_mul_df.  */\n+  0,    /* max_case_values.  */\n+  tune_params::AUTOPREFETCHER_WEAK,     /* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE),     /* tune_flags.  */\n+  &tsv110_prefetch_tune\n+};\n+\n static const struct tune_params xgene1_tunings =\n {\n   &xgene1_extra_costs,"}, {"sha": "abbd9ecf3dc602a9dec13cff02d373bbf32ae916", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910f72e78fe76993b8a9bcc9e385a788446f1f10/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=910f72e78fe76993b8a9bcc9e385a788446f1f10", "patch": "@@ -14998,7 +14998,7 @@ performance of the code.  Permissible values for this option are:\n @samp{cortex-a57}, @samp{cortex-a72}, @samp{cortex-a73}, @samp{cortex-a75},\n @samp{cortex-a76}, @samp{exynos-m1}, @samp{falkor}, @samp{qdf24xx},\n @samp{saphira}, @samp{phecda}, @samp{xgene1}, @samp{vulcan}, @samp{thunderx},\n-@samp{thunderxt88}, @samp{thunderxt88p1}, @samp{thunderxt81},\n+@samp{thunderxt88}, @samp{thunderxt88p1}, @samp{thunderxt81},@samp{tsv110},\n @samp{thunderxt83}, @samp{thunderx2t99}, @samp{cortex-a57.cortex-a53},\n @samp{cortex-a72.cortex-a53}, @samp{cortex-a73.cortex-a35},\n @samp{cortex-a73.cortex-a53}, @samp{cortex-a75.cortex-a55},"}]}