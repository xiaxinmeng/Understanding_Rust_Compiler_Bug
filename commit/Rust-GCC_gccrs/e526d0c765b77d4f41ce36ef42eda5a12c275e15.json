{"sha": "e526d0c765b77d4f41ce36ef42eda5a12c275e15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUyNmQwYzc2NWI3N2Q0ZjQxY2UzNmVmNDJlZGE1YTEyYzI3NWUxNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:39:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:39:06Z"}, "message": "[multiple changes]\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_disp.adb (Make_DT): Generate call to Check_TSD in Ada 2005 mode.\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* s-imenne.ads: Minor reformatting.\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* a-stunau.ads: Add pragma Suppress_Initialization for Big_String\n\t* freeze.adb (Warn_Overlay): Don't warn if initialization suppressed\n\t* s-stalib.ads: Add pragma Suppress_Initialization for Big_String\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads (Materialize_Entity): Document this is only for renamings\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Make sure we generate\n\trequired debug information in the case where we transform the object\n\tdeclaration into a renaming declaration.\n\t* exp_ch4.adb (Expand_Concatenate): Generate debug info for result\n\tobject\n\t* exp_dbug.ads (Debug_Renaming_Declaration): Document setting of\n\tMaterialize_Entity.\n\nFrom-SVN: r177162", "tree": {"sha": "3ed100ea6f52f8e75b9c390d9b63d1834d2a0a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ed100ea6f52f8e75b9c390d9b63d1834d2a0a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e526d0c765b77d4f41ce36ef42eda5a12c275e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e526d0c765b77d4f41ce36ef42eda5a12c275e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e526d0c765b77d4f41ce36ef42eda5a12c275e15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e526d0c765b77d4f41ce36ef42eda5a12c275e15/comments", "author": null, "committer": null, "parents": [{"sha": "5b1e6aca6a6a9957a08823e04393f50fa2d48150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1e6aca6a6a9957a08823e04393f50fa2d48150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1e6aca6a6a9957a08823e04393f50fa2d48150"}], "stats": {"total": 121, "additions": 99, "deletions": 22}, "files": [{"sha": "61efaa8bdb0ab9836f34e2e96ce9531ebfe8b165", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -1,3 +1,28 @@\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Generate call to Check_TSD in Ada 2005 mode.\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-imenne.ads: Minor reformatting.\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-stunau.ads: Add pragma Suppress_Initialization for Big_String\n+\t* freeze.adb (Warn_Overlay): Don't warn if initialization suppressed\n+\t* s-stalib.ads: Add pragma Suppress_Initialization for Big_String\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads (Materialize_Entity): Document this is only for renamings\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Make sure we generate\n+\trequired debug information in the case where we transform the object\n+\tdeclaration into a renaming declaration.\n+\t* exp_ch4.adb (Expand_Concatenate): Generate debug info for result\n+\tobject\n+\t* exp_dbug.ads (Debug_Renaming_Declaration): Document setting of\n+\tMaterialize_Entity.\n+\n 2011-08-02  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, einfo.adb (Suppress_Initialization): Replaces"}, {"sha": "fa82740b7de6da9c617f9224a42438de695e2902", "filename": "gcc/ada/a-stunau.ads", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fa-stunau.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fa-stunau.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stunau.ads?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,18 @@ package Ada.Strings.Unbounded.Aux is\n    pragma Preelaborate;\n \n    subtype Big_String is String (1 .. Positive'Last);\n+   pragma Suppress_Initialization (Big_String);\n+   --  Type used to obtain string access to given address. Initialization is\n+   --  suppressed, since we never want to have variables of this type, and\n+   --  we never want to attempt initialiazation of virtual variables of this\n+   --  type (e.g. when pragma Normalize_Scalars is used).\n+\n    type Big_String_Access is access all Big_String;\n+   for Big_String_Access'Storage_Size use 0;\n+   --  We use this access type to pass a pointer to an area of storage to be\n+   --  accessed as a string. Of course when this pointer is used, it is the\n+   --  responsibility of the accessor to ensure proper bounds. The storage\n+   --  size clause ensures we do not allocate variables of this type.\n \n    procedure Get_String\n      (U : Unbounded_String;"}, {"sha": "ae8921269d92a7ebde91fa3f284c6e119fdbf0f2", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -2943,11 +2943,10 @@ package Einfo is\n --       used to reference tasks implementing such interface.\n \n --    Materialize_Entity (Flag168)\n---       Present in all entities. Set only for constant or renamed entities\n---       which should be materialized for debugging purposes. In the case of\n---       a constant, a memory location should be allocated containing the\n---       value. In the case of a renaming, a memory location containing the\n---       renamed address should be allocated.\n+--       Present in all entities. Set only for renamed obects which should be\n+--       materialized for debugging purposes. This means that a memory location\n+--       containing the renamed address should be allocated. This is needed so\n+--       that the debugger can find the entity.\n \n --    Mechanism (Uint8) (returned as Mechanism_Type)\n --       Present in functions and non-generic formal parameters. Indicates"}, {"sha": "561b138cc711e8f02e1c55343ee600ca64dc3816", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -34,6 +34,7 @@ with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Ch9;  use Exp_Ch9;\n with Exp_Ch11; use Exp_Ch11;\n+with Exp_Dbug; use Exp_Dbug;\n with Exp_Disp; use Exp_Disp;\n with Exp_Dist; use Exp_Dist;\n with Exp_Smem; use Exp_Smem;\n@@ -5215,6 +5216,26 @@ package body Exp_Ch3 is\n \n             Set_Renamed_Object (Defining_Identifier (N), Expr_Q);\n             Set_Analyzed (N);\n+\n+            --  We do need to deal with debug issues for this renaming\n+\n+            --  First, if entity comes from source, then mark it as needing\n+            --  debug information, even though it is defined by a generated\n+            --  renaming that does not come from source.\n+\n+            if Comes_From_Source (Defining_Identifier (N)) then\n+               Set_Needs_Debug_Info (Defining_Identifier (N));\n+            end if;\n+\n+            --  Now call the routine to generate debug info for the renaming\n+\n+            declare\n+               Decl : constant Node_Id := Debug_Renaming_Declaration (N);\n+            begin\n+               if Present (Decl) then\n+                  Insert_Action (N, Decl);\n+               end if;\n+            end;\n          end if;\n       end if;\n "}, {"sha": "e92e1062a8ebf3d221b5b5f3887a248b725b1bec", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -2875,10 +2875,12 @@ package body Exp_Ch4 is\n \n       --  Now we construct an array object with appropriate bounds. We mark\n       --  the target as internal to prevent useless initialization when\n-      --  Initialize_Scalars is enabled.\n+      --  Initialize_Scalars is enabled. Also since this is the actual result\n+      --  entity, we make sure we have debug information for the result.\n \n       Ent := Make_Temporary (Loc, 'S');\n       Set_Is_Internal (Ent);\n+      Set_Needs_Debug_Info (Ent);\n \n       --  If the bound is statically known to be out of range, we do not want\n       --  to abort, we want a warning and a runtime constraint error. Note that"}, {"sha": "ac722d7876f2fee581668d5aa48e052c673503b4", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -1082,7 +1082,8 @@ package Exp_Dbug is\n    function Debug_Renaming_Declaration (N : Node_Id) return Node_Id;\n    --  The argument N is a renaming declaration. The result is a variable\n    --  declaration as described in the above paragraphs. If N is not a special\n-   --  debug declaration, then Empty is returned.\n+   --  debug declaration, then Empty is returned. This function also takes care\n+   --  of setting Materialize_Entity on the renamed entity where required.\n \n    ---------------------------\n    -- Packed Array Encoding --"}, {"sha": "541abe7b6aa53b8c4ef0e4a9c24e5dcba1d473e2", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -5995,10 +5995,17 @@ package body Exp_Disp is\n \n       --     Check_TSD (TSD'Unrestricted_Access);\n \n-      --  Seems wrong to restrict this BI to Ada 2012 ???\n+      --  This check is a consequence of AI05-0113-1/06, so it officially\n+      --  applies to Ada 2005 (and Ada 2012). It might be argued that it is\n+      --  a desirable check to add in Ada 95 mode, but we hesitate to make\n+      --  this change, as it would be incompatible, and could conceivably\n+      --  cause a problem in existing Aa 95 code.\n+\n+      --  We check for No_Run_Time_Mode here, because we do not want to pick\n+      --  up the RE_Check_TSD entity and call it in No_Run_Time mode.\n \n       if not No_Run_Time_Mode\n-        and then Ada_Version >= Ada_2012\n+        and then Ada_Version >= Ada_2005\n         and then RTE_Available (RE_Check_TSD)\n       then\n          Append_To (Elab_Code,"}, {"sha": "c9d47bd8a069ff931dc1aa0cd3609dab73872193", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -5874,15 +5874,16 @@ package body Freeze is\n       --  tested for because predefined String types are initialized by inline\n       --  code rather than by an init_proc). Note that we do not give the\n       --  warning for Initialize_Scalars, since we suppressed initialization\n-      --  in this case.\n+      --  in this case. Also, do not warn if Suppress_Initialization is set.\n \n       if Present (Expr)\n         and then not Is_Imported (Ent)\n+        and then not Initialization_Suppressed (Typ)\n         and then (Has_Non_Null_Base_Init_Proc (Typ)\n-                    or else Is_Access_Type (Typ)\n-                    or else (Normalize_Scalars\n-                              and then (Is_Scalar_Type (Typ)\n-                                         or else Is_String_Type (Typ))))\n+                   or else Is_Access_Type (Typ)\n+                   or else (Normalize_Scalars\n+                             and then (Is_Scalar_Type (Typ)\n+                                        or else Is_String_Type (Typ))))\n       then\n          if Nkind (Expr) = N_Attribute_Reference\n            and then Is_Entity_Name (Prefix (Expr))"}, {"sha": "7d0c1141dfaadcee13a603b111fe9c13b8d9cdb5", "filename": "gcc/ada/s-imenne.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fs-imenne.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fs-imenne.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imenne.ads?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -70,16 +70,16 @@ package System.Img_Enum_New is\n       P       : out Natural;\n       Names   : String;\n       Indexes : System.Address);\n-   --  Identical to Set_Image_Enumeration_8 except that it handles types\n-   --  using array (0 .. Num) of Natural_16 for the Indexes table.\n+   --  Identical to Set_Image_Enumeration_8 except that it handles types using\n+   --  array (0 .. Num) of Natural_16 for the Indexes table.\n \n    procedure Image_Enumeration_32\n      (Pos     : Natural;\n       S       : in out String;\n       P       : out Natural;\n       Names   : String;\n       Indexes : System.Address);\n-   --  Identical to Set_Image_Enumeration_8 except that it handles types\n-   --  using array (0 .. Num) of Natural_32 for the Indexes table.\n+   --  Identical to Set_Image_Enumeration_8 except that it handles types using\n+   --  array (0 .. Num) of Natural_32 for the Indexes table.\n \n end System.Img_Enum_New;"}, {"sha": "4f1b90a6ed6a564521d0916679df599d3cb34560", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e526d0c765b77d4f41ce36ef42eda5a12c275e15/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=e526d0c765b77d4f41ce36ef42eda5a12c275e15", "patch": "@@ -57,9 +57,19 @@ package System.Standard_Library is\n    pragma Preelaborate_05;\n    pragma Warnings (On);\n \n-   type Big_String_Ptr is access all String (Positive);\n+   subtype Big_String is String (1 .. Positive'Last);\n+   pragma Suppress_Initialization (Big_String);\n+   --  Type used to obtain string access to given address. Initialization is\n+   --  suppressed, since we never want to have variables of this type, and\n+   --  we never want to attempt initialiazation of virtual variables of this\n+   --  type (e.g. when pragma Normalize_Scalars is used).\n+\n+   type Big_String_Ptr is access all Big_String;\n    for Big_String_Ptr'Storage_Size use 0;\n-   --  A non-fat pointer type for null terminated strings\n+   --  We use this access type to pass a pointer to an area of storage to be\n+   --  accessed as a string. Of course when this pointer is used, it is the\n+   --  responsibility of the accessor to ensure proper bounds. The storage\n+   --  size clause ensures we do not allocate variables of this type.\n \n    function To_Ptr is\n      new Ada.Unchecked_Conversion (System.Address, Big_String_Ptr);"}]}