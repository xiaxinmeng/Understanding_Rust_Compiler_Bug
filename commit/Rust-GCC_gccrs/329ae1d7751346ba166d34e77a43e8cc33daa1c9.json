{"sha": "329ae1d7751346ba166d34e77a43e8cc33daa1c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5YWUxZDc3NTEzNDZiYTE2NmQzNGU3N2E0M2U4Y2MzM2RhYTFjOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T15:35:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T15:35:23Z"}, "message": "c++: Extend build_array_type API\n\nThe modules machinery needs to construct array types, and that wanted\nto determine type dependency.  That doesn't work during loading, but\nthe module loader can stream that fact too and tell the array builder.\nThus this extends the API to allow a caller to specify the dependency\nexplicitly.  The call in cp_build_qualified_type_real is unreachable\nduring the loading, so that one's ok as is.\n\n\tgcc/cp/\n\t* cp-tree.h (build_cplus_array_type): Add defaulted DEP parm.\n\t* tree.c (set_array_type_common): Add DEP parm.\n\t(build_cplus_array_type): Add DEP parm, determine dependency if\n\tneeded.\n\t(cp_build_qualified_type_real): Adjust array-building call.\n\t(strip_typedefs): Likewise.", "tree": {"sha": "ef42194e4e5c62b7eb3f3a735bb4eb7561bac96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef42194e4e5c62b7eb3f3a735bb4eb7561bac96c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329ae1d7751346ba166d34e77a43e8cc33daa1c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329ae1d7751346ba166d34e77a43e8cc33daa1c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329ae1d7751346ba166d34e77a43e8cc33daa1c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329ae1d7751346ba166d34e77a43e8cc33daa1c9/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744ca1bf1cc07627f85c2f73a2ced3fb551e1f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744ca1bf1cc07627f85c2f73a2ced3fb551e1f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744ca1bf1cc07627f85c2f73a2ced3fb551e1f60"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "ae1147d4589b355acc83ff58a27e2ddc5694f371", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ae1d7751346ba166d34e77a43e8cc33daa1c9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ae1d7751346ba166d34e77a43e8cc33daa1c9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=329ae1d7751346ba166d34e77a43e8cc33daa1c9", "patch": "@@ -7377,7 +7377,7 @@ extern bool is_local_temp\t\t\t(tree);\n extern tree build_aggr_init_expr\t\t(tree, tree);\n extern tree get_target_expr\t\t\t(tree);\n extern tree get_target_expr_sfinae\t\t(tree, tsubst_flags_t);\n-extern tree build_cplus_array_type\t\t(tree, tree);\n+extern tree build_cplus_array_type\t\t(tree, tree, int is_dep = -1);\n extern tree build_array_of_n_type\t\t(tree, int);\n extern bool array_of_runtime_bound_p\t\t(tree);\n extern bool vla_type_p\t\t\t\t(tree);"}, {"sha": "5932777be0449d65dd7c305e05711954acc8822d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329ae1d7751346ba166d34e77a43e8cc33daa1c9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329ae1d7751346ba166d34e77a43e8cc33daa1c9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=329ae1d7751346ba166d34e77a43e8cc33daa1c9", "patch": "@@ -998,7 +998,7 @@ build_min_array_type (tree elt_type, tree index_type)\n    build_cplus_array_type.  */\n \n static void\n-set_array_type_canon (tree t, tree elt_type, tree index_type)\n+set_array_type_canon (tree t, tree elt_type, tree index_type, bool dep)\n {\n   /* Set the canonical type for this new node.  */\n   if (TYPE_STRUCTURAL_EQUALITY_P (elt_type)\n@@ -1009,30 +1009,33 @@ set_array_type_canon (tree t, tree elt_type, tree index_type)\n     TYPE_CANONICAL (t)\n       = build_cplus_array_type (TYPE_CANONICAL (elt_type),\n \t\t\t\tindex_type\n-\t\t\t\t? TYPE_CANONICAL (index_type) : index_type);\n+\t\t\t\t? TYPE_CANONICAL (index_type) : index_type,\n+\t\t\t\tdep);\n   else\n     TYPE_CANONICAL (t) = t;\n }\n \n /* Like build_array_type, but handle special C++ semantics: an array of a\n    variant element type is a variant of the array of the main variant of\n-   the element type.  */\n+   the element type.  IS_DEPENDENT is -ve if we should determine the\n+   dependency.  Otherwise its bool value indicates dependency.  */\n \n tree\n-build_cplus_array_type (tree elt_type, tree index_type)\n+build_cplus_array_type (tree elt_type, tree index_type, int dependent)\n {\n   tree t;\n \n   if (elt_type == error_mark_node || index_type == error_mark_node)\n     return error_mark_node;\n \n-  bool dependent = (uses_template_parms (elt_type)\n-\t\t    || (index_type && uses_template_parms (index_type)));\n+  if (dependent < 0)\n+    dependent = (uses_template_parms (elt_type)\n+\t\t || (index_type && uses_template_parms (index_type)));\n \n   if (elt_type != TYPE_MAIN_VARIANT (elt_type))\n     /* Start with an array of the TYPE_MAIN_VARIANT.  */\n     t = build_cplus_array_type (TYPE_MAIN_VARIANT (elt_type),\n-\t\t\t\tindex_type);\n+\t\t\t\tindex_type, dependent);\n   else if (dependent)\n     {\n       /* Since type_hash_canon calls layout_type, we need to use our own\n@@ -1062,7 +1065,11 @@ build_cplus_array_type (tree elt_type, tree index_type)\n \t  *e = t;\n \n \t  /* Set the canonical type for this new node.  */\n-\t  set_array_type_canon (t, elt_type, index_type);\n+\t  set_array_type_canon (t, elt_type, index_type, dependent);\n+\n+\t  /* Mark it as dependent now, this saves time later.  */\n+\t  TYPE_DEPENDENT_P_VALID (t) = true;\n+\t  TYPE_DEPENDENT_P (t) = true;\n \t}\n     }\n   else\n@@ -1083,7 +1090,7 @@ build_cplus_array_type (tree elt_type, tree index_type)\n       if (!t)\n \t{\n \t  t = build_min_array_type (elt_type, index_type);\n-\t  set_array_type_canon (t, elt_type, index_type);\n+\t  set_array_type_canon (t, elt_type, index_type, dependent);\n \t  if (!dependent)\n \t    {\n \t      layout_type (t);\n@@ -1319,7 +1326,8 @@ cp_build_qualified_type_real (tree type,\n \n       if (!t)\n \t{\n-\t  t = build_cplus_array_type (element_type, TYPE_DOMAIN (type));\n+\t  t = build_cplus_array_type (element_type, TYPE_DOMAIN (type),\n+\t\t\t\t      TYPE_DEPENDENT_P (type));\n \n \t  /* Keep the typedef name.  */\n \t  if (TYPE_NAME (t) != TYPE_NAME (type))\n@@ -1555,7 +1563,7 @@ strip_typedefs (tree t, bool *remove_attributes, unsigned int flags)\n     case ARRAY_TYPE:\n       type = strip_typedefs (TREE_TYPE (t), remove_attributes, flags);\n       t0  = strip_typedefs (TYPE_DOMAIN (t), remove_attributes, flags);\n-      result = build_cplus_array_type (type, t0);\n+      result = build_cplus_array_type (type, t0, TYPE_DEPENDENT_P (t));\n       break;\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:"}]}