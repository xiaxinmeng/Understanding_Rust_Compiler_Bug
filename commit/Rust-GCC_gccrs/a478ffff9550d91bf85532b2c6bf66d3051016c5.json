{"sha": "a478ffff9550d91bf85532b2c6bf66d3051016c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3OGZmZmY5NTUwZDkxYmY4NTUzMmIyYzZiZjY2ZDMwNTEwMTZjNQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2010-08-31T16:58:46Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2010-08-31T16:58:46Z"}, "message": "common.opt (fwhopr=): Update for -fwhopr=jobserver\n\n\n       * common.opt (fwhopr=): Update for -fwhopr=jobserver\n       * doc/invoke.texi (fwhopr): Document -fwhopr=jobserver.\n       * lto-wrapper.c (run_gcc): Add jobserver mode.\n       * opts.c (common_handle_option): Fix OPT_fwhopr for non numeric\n         argument.\n\nFrom-SVN: r163680", "tree": {"sha": "1a55d621cc882fdcee8205efa2e197b4379a4ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a55d621cc882fdcee8205efa2e197b4379a4ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a478ffff9550d91bf85532b2c6bf66d3051016c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a478ffff9550d91bf85532b2c6bf66d3051016c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a478ffff9550d91bf85532b2c6bf66d3051016c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a478ffff9550d91bf85532b2c6bf66d3051016c5/comments", "author": null, "committer": null, "parents": [{"sha": "7d2c38c0b9ae835080e7273bf61884e54b875961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2c38c0b9ae835080e7273bf61884e54b875961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d2c38c0b9ae835080e7273bf61884e54b875961"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "c25c88920c62cce54804f7095c72ae1114125f3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a478ffff9550d91bf85532b2c6bf66d3051016c5", "patch": "@@ -1,3 +1,11 @@\n+2010-08-31  Andi Kleen      <ak@linux.intel.com>\n+\n+\t* common.opt (fwhopr=): Update for -fwhopr=jobserver\n+\t* doc/invoke.texi (fwhopr): Document -fwhopr=jobserver.\n+\t* lto-wrapper.c (run_gcc): Add jobserver mode.\n+\t* opts.c (common_handle_option): Fix OPT_fwhopr for non numeric\n+\targument.\n+\n 2010-08-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (popdi1): Rewrite using POST_INC memory operand."}, {"sha": "2147be83e64dd87d8463dacaf9e6e8d100220a76", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a478ffff9550d91bf85532b2c6bf66d3051016c5", "patch": "@@ -1579,8 +1579,8 @@ Common\n Enable partitioned link-time optimization\n \n fwhopr=\n-Common RejectNegative UInteger Joined Var(flag_whopr)\n-Enable partitioned link-time optimization with specified number of parallel jobs\n+Common RejectNegative Joined Var(flag_whopr)\n+Partitioned link-time optimization with number of parallel jobs or jobserver.\n \n ftree-builtin-call-dce\n Common Report Var(flag_tree_builtin_call_dce) Init(0) Optimization"}, {"sha": "cdd8d9805149358f8e98f6dccfb5577efa1da9ac", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a478ffff9550d91bf85532b2c6bf66d3051016c5", "patch": "@@ -7619,6 +7619,13 @@ parallel using @var{n} parallel jobs by utilizing an installed\n @command{make} program.  The environment variable @env{MAKE} may be\n used to override the program used.\n \n+You can also specify @option{-fwhopr=jobserver} to use GNU make's \n+job server mode to determine the number of parallel jobs. This \n+is useful when the Makefile calling GCC is already parallel.\n+The parent Makefile will need a @samp{+} prepended to the command recipe\n+for this to work. This will likely only work if @env{MAKE} is \n+GNU make.\n+\n Disabled by default.\n \n @item -fwpa"}, {"sha": "0ef8b8729aef3a2abb83891cff63e7ef68312111", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=a478ffff9550d91bf85532b2c6bf66d3051016c5", "patch": "@@ -303,6 +303,7 @@ run_gcc (unsigned argc, char *argv[])\n   struct obstack env_obstack;\n   bool seen_o = false;\n   int parallel = 0;\n+  int jobserver = 0;\n \n   /* Get the driver and options.  */\n   collect_gcc = getenv (\"COLLECT_GCC\");\n@@ -373,9 +374,17 @@ run_gcc (unsigned argc, char *argv[])\n \t    lto_mode = LTO_MODE_WHOPR;\n \t    if (option[7] == '=')\n \t      {\n-\t\tparallel = atoi (option+8);\n-\t\tif (parallel <= 1)\n-\t\t  parallel = 0;\n+\t\tif (!strcmp (option + 8, \"jobserver\"))\n+\t\t  {\n+\t\t    jobserver = 1;\n+\t\t    parallel = 1;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    parallel = atoi (option+8);\n+\t\t    if (parallel <= 1)\n+\t\t      parallel = 0;\n+\t\t  }\n \t      }\n \t  }\n \telse\n@@ -567,23 +576,32 @@ run_gcc (unsigned argc, char *argv[])\n \t{\n \t  struct pex_obj *pex;\n \t  char jobs[32];\n+\n \t  fprintf (mstream, \"all:\");\n \t  for (i = 0; i < nr; ++i)\n \t    fprintf (mstream, \" \\\\\\n\\t%s\", output_names[i]);\n \t  fprintf (mstream, \"\\n\");\n \t  fclose (mstream);\n-\t  /* Avoid passing --jobserver-fd= and similar flags.  */\n-\t  putenv (xstrdup (\"MAKEFLAGS=\"));\n-\t  putenv (xstrdup (\"MFLAGS=\"));\n+\t  if (!jobserver)\n+\t    {\n+\t      /* Avoid passing --jobserver-fd= and similar flags \n+\t\t unless jobserver mode is explicitly enabled.  */\n+\t      putenv (xstrdup (\"MAKEFLAGS=\"));\n+\t      putenv (xstrdup (\"MFLAGS=\"));\n+\t    }\n \t  new_argv[0] = getenv (\"MAKE\");\n \t  if (!new_argv[0])\n \t    new_argv[0] = \"make\";\n \t  new_argv[1] = \"-f\";\n \t  new_argv[2] = makefile;\n-\t  snprintf (jobs, 31, \"-j%d\", parallel);\n-\t  new_argv[3] = jobs;\n-\t  new_argv[4] = \"all\";\n-\t  new_argv[5] = NULL;\n+\t  i = 3;\n+\t  if (!jobserver)\n+\t    {\n+\t      snprintf (jobs, 31, \"-j%d\", parallel);\n+\t      new_argv[i++] = jobs;\n+\t    }\n+\t  new_argv[i++] = \"all\";\n+\t  new_argv[i++] = NULL;\n \t  pex = collect_execute (CONST_CAST (char **, new_argv));\n \t  collect_wait (new_argv[0], pex);\n \t  maybe_unlink_file (makefile);"}, {"sha": "fbee8f63ab477a6cfe9f7d3c12adac2ef26d6a55", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a478ffff9550d91bf85532b2c6bf66d3051016c5/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a478ffff9550d91bf85532b2c6bf66d3051016c5", "patch": "@@ -2089,7 +2089,7 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       break;\n \n     case OPT_fwhopr:\n-      flag_whopr = value;\n+      flag_whopr = arg;\n       break;\n \n     case OPT_w:"}]}