{"sha": "1e29e4d36f701712b541e989ff091d7a6ce1afcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyOWU0ZDM2ZjcwMTcxMmI1NDFlOTg5ZmYwOTFkN2E2Y2UxYWZjZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-10T21:17:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-10T21:17:28Z"}, "message": "invoke.texi: (-devirtualize-at-ltrans): Document.\n\n\t* doc/invoke.texi: (-devirtualize-at-ltrans): Document.\n\t* lto-cgraph.c (lto_output_varpool_node): Mark initializer as removed\n\twhen it is not streamed to the given ltrans.\n\t(compute_ltrans_boundary): Make code adding all polymorphic\n\tcall targets conditional with !flag_wpa || flag_ltrans_devirtualize.\n\t* common.opt (fdevirtualize-at-ltrans): New flag.\n\nFrom-SVN: r218609", "tree": {"sha": "1431b495e7d6781af6da4f0b74dbc84b5cde4b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1431b495e7d6781af6da4f0b74dbc84b5cde4b77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e29e4d36f701712b541e989ff091d7a6ce1afcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e29e4d36f701712b541e989ff091d7a6ce1afcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e29e4d36f701712b541e989ff091d7a6ce1afcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e29e4d36f701712b541e989ff091d7a6ce1afcd/comments", "author": null, "committer": null, "parents": [{"sha": "a06478dd6c5f0e3fb334ab88adc4de7c6fd5789e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a06478dd6c5f0e3fb334ab88adc4de7c6fd5789e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a06478dd6c5f0e3fb334ab88adc4de7c6fd5789e"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "a9378a560c467c33a2fcf0dfdc5c94bd5baf4c60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e29e4d36f701712b541e989ff091d7a6ce1afcd", "patch": "@@ -1,3 +1,12 @@\n+2014-12-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* doc/invoke.texi: (-devirtualize-at-ltrans): Document.\n+\t* lto-cgraph.c (lto_output_varpool_node): Mark initializer as removed\n+\twhen it is not streamed to the given ltrans.\n+\t(compute_ltrans_boundary): Make code adding all polymorphic\n+\tcall targets conditional with !flag_wpa || flag_ltrans_devirtualize.\n+\t* common.opt (fdevirtualize-at-ltrans): New flag.\n+\n 2014-12-10  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* varpool.c (varpool_node::get_create): Force output of vars with"}, {"sha": "3b8b14d4626842fc5b1f208981bb8764a39cc479", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1e29e4d36f701712b541e989ff091d7a6ce1afcd", "patch": "@@ -1062,6 +1062,10 @@ fdelete-null-pointer-checks\n Common Report Var(flag_delete_null_pointer_checks) Init(1) Optimization\n Delete useless null pointer checks\n \n+fdevirtualize-at-ltrans\n+Common Report Var(flag_ltrans_devirtualize)\n+Perofrm extra streaming to support more agressive devirtualization at LTO ltrans stage.\n+\n fdevirtualize-speculatively\n Common Report Var(flag_devirtualize_speculatively) Optimization\n Perform speculative devirtualization"}, {"sha": "1579702e20a4ce9736b650483cc930a9075cabe0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1e29e4d36f701712b541e989ff091d7a6ce1afcd", "patch": "@@ -375,7 +375,8 @@ Objective-C and Objective-C++ Dialects}.\n -fcse-follow-jumps -fcse-skip-blocks -fcx-fortran-rules @gol\n -fcx-limited-range @gol\n -fdata-sections -fdce -fdelayed-branch @gol\n--fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively -fdse @gol\n+-fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively @gol\n+-devirtualize-at-ltrans -fdse @gol\n -fearly-inlining -fipa-sra -fexpensive-optimizations -ffat-lto-objects @gol\n -ffast-math -ffinite-math-only -ffloat-store -fexcess-precision=@var{style} @gol\n -fforward-propagate -ffp-contract=@var{style} -ffunction-sections @gol\n@@ -7730,6 +7731,13 @@ the call into an conditional deciding on direct and indirect call.  The\n speculative calls enable more optimizations, such as inlining.  When they seem\n useless after further optimization, they are converted back into original form.\n \n+@item -fdevirtualize-at-ltrans\n+@opindex fdevirtualize-at-ltrans\n+Perform extra streaming needed for agressive devirtualization during LTO local\n+transformation stage. This option enables more devirtualization but\n+significantly increases the size of streamed data. For this reason it is\n+disabled by default.\n+\n @item -fexpensive-optimizations\n @opindex fexpensive-optimizations\n Perform a number of minor optimizations that are relatively expensive."}, {"sha": "cf92892ba00ce42493e9fb35b2d368830f779881", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e29e4d36f701712b541e989ff091d7a6ce1afcd/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=1e29e4d36f701712b541e989ff091d7a6ce1afcd", "patch": "@@ -615,7 +615,8 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n   bp_pack_value (&bp, node->force_output, 1);\n   bp_pack_value (&bp, node->forced_by_abi, 1);\n   bp_pack_value (&bp, node->unique_name, 1);\n-  bp_pack_value (&bp, node->body_removed, 1);\n+  bp_pack_value (&bp, node->body_removed\n+\t\t || !lto_symtab_encoder_encode_initializer_p (encoder, node), 1);\n   bp_pack_value (&bp, node->implicit_section, 1);\n   bp_pack_value (&bp, node->writeonly, 1);\n   bp_pack_value (&bp, node->definition, 1);\n@@ -910,8 +911,11 @@ compute_ltrans_boundary (lto_symtab_encoder_t in_encoder)\n \t{\n \t  if (!lto_symtab_encoder_encode_initializer_p (encoder,\n \t\t\t\t\t\t\tvnode)\n-\t      && (vnode->ctor_useable_for_folding_p ()\n-\t\t  || POINTER_BOUNDS_P (vnode->decl)))\n+\t      && (((vnode->ctor_useable_for_folding_p ()\n+\t\t   && (!DECL_VIRTUAL_P (vnode->decl)\n+\t\t       || !flag_wpa\n+\t\t       || flag_ltrans_devirtualize))\n+\t\t  || POINTER_BOUNDS_P (vnode->decl))))\n \t    {\n \t      lto_set_symtab_encoder_encode_initializer (encoder, vnode);\n \t      create_references (encoder, vnode);\n@@ -936,7 +940,7 @@ compute_ltrans_boundary (lto_symtab_encoder_t in_encoder)\n \t    }\n \t}\n       /* Add all possible targets for late devirtualization.  */\n-      if (flag_devirtualize)\n+      if (flag_ltrans_devirtualize || !flag_wpa)\n \tfor (edge = node->indirect_calls; edge; edge = edge->next_callee)\n \t  if (edge->indirect_info->polymorphic)\n \t    {"}]}