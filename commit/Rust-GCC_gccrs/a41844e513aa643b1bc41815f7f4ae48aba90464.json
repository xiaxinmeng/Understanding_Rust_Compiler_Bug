{"sha": "a41844e513aa643b1bc41815f7f4ae48aba90464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQxODQ0ZTUxM2FhNjQzYjFiYzQxODE1ZjdmNGFlNDhhYmE5MDQ2NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-07-30T17:27:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-07-30T17:27:20Z"}, "message": "re PR ipa/61659 (Extra undefined symbol because of devirtualization)\n\n\tPR c++/61659\n\tPR c++/61687\nRevert:\ngcc/c-family/\n\t* c.opt (-fuse-all-virtuals): New.\ngcc/cp/\n\t* decl2.c (mark_all_virtuals): New variable.\n\t(maybe_emit_vtables): Check it instead of flag_devirtualize.\n\t(cp_write_global_declarations): Set it and give helpful diagnostic\n\tif it introduces errors.\n\t* class.c (finish_struct_1): Check it.\n\nFrom-SVN: r213308", "tree": {"sha": "650ed490795a4de522819f365890e79a8ced42af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/650ed490795a4de522819f365890e79a8ced42af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a41844e513aa643b1bc41815f7f4ae48aba90464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41844e513aa643b1bc41815f7f4ae48aba90464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a41844e513aa643b1bc41815f7f4ae48aba90464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41844e513aa643b1bc41815f7f4ae48aba90464/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5d0ed2d89a56273efe30331c3e94651134615e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d0ed2d89a56273efe30331c3e94651134615e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d0ed2d89a56273efe30331c3e94651134615e7"}], "stats": {"total": 85, "additions": 18, "deletions": 67}, "files": [{"sha": "645b9403b7ebfa8a9857bc8cfc26b09d0cb0ba3a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a41844e513aa643b1bc41815f7f4ae48aba90464", "patch": "@@ -1,3 +1,10 @@\n+2014-07-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/61659\n+\tPR c++/61687\n+\tRevert:\n+\t* c.opt (-fuse-all-virtuals): New.\n+\n 2014-07-30  Tom Tromey  <tromey@redhat.com>\n \n \tPR c/59855"}, {"sha": "f427da10fb88e7eb0034fe279af4fb76c93d518c", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a41844e513aa643b1bc41815f7f4ae48aba90464", "patch": "@@ -1276,10 +1276,6 @@ funsigned-char\n C ObjC C++ ObjC++ LTO Var(flag_signed_char, 0)\n Make \\\"char\\\" unsigned by default\n \n-fuse-all-virtuals\n-C++ ObjC++ Var(flag_use_all_virtuals) Init(1)\n-Treat all virtual functions as odr-used\n-\n fuse-cxa-atexit\n C++ ObjC++ Var(flag_use_cxa_atexit) Init(DEFAULT_USE_CXA_ATEXIT)\n Use __cxa_atexit to register destructors"}, {"sha": "25d9b8acb3215675d75e92a2bf26962ffd88142f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a41844e513aa643b1bc41815f7f4ae48aba90464", "patch": "@@ -1,5 +1,14 @@\n 2014-07-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/61659\n+\tPR c++/61687\n+\tRevert:\n+\t* decl2.c (mark_all_virtuals): New variable.\n+\t(maybe_emit_vtables): Check it instead of flag_devirtualize.\n+\t(cp_write_global_declarations): Set it and give helpful diagnostic\n+\tif it introduces errors.\n+\t* class.c (finish_struct_1): Check it.\n+\n \tPR lto/53808\n \tPR c++/61659\n \t* pt.c (push_template_decl_real): Set DECL_COMDAT on templates."}, {"sha": "235c68a962e20107de6416816e8ddf3226f98b13", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a41844e513aa643b1bc41815f7f4ae48aba90464", "patch": "@@ -6408,7 +6408,7 @@ finish_struct_1 (tree t)\n \t in every translation unit where the class definition appears.  If\n \t we're devirtualizing, we can look into the vtable even if we\n \t aren't emitting it.  */\n-      if (CLASSTYPE_KEY_METHOD (t) == NULL_TREE || flag_use_all_virtuals)\n+      if (CLASSTYPE_KEY_METHOD (t) == NULL_TREE)\n \tkeyed_classes = tree_cons (NULL_TREE, t, keyed_classes);\n     }\n "}, {"sha": "eafdce5769067467eab52088a4afaf6ae056243e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a41844e513aa643b1bc41815f7f4ae48aba90464", "patch": "@@ -106,11 +106,6 @@ static GTY(()) vec<tree, va_gc> *no_linkage_decls;\n /* Nonzero if we're done parsing and into end-of-file activities.  */\n \n int at_eof;\n-\n-/* Nonzero if we've instantiated everything used directly, and now want to\n-   mark all virtual functions as used so that they are available for\n-   devirtualization.  */\n-static int mark_all_virtuals;\n \f\n \n /* Return a member function type (a METHOD_TYPE), given FNTYPE (a\n@@ -2020,15 +2015,6 @@ maybe_emit_vtables (tree ctype)\n       if (DECL_COMDAT (primary_vtbl)\n \t  && CLASSTYPE_DEBUG_REQUESTED (ctype))\n \tnote_debug_info_needed (ctype);\n-      if (mark_all_virtuals && !DECL_ODR_USED (primary_vtbl))\n-\t{\n-\t  /* Make sure virtual functions get instantiated/synthesized so that\n-\t     they can be inlined after devirtualization even if the vtable is\n-\t     never emitted.  */\n-\t  mark_used (primary_vtbl);\n-\t  mark_vtable_entries (primary_vtbl);\n-\t  return true;\n-\t}\n       return false;\n     }\n \n@@ -4345,8 +4331,6 @@ cp_write_global_declarations (void)\n      instantiated, etc., etc.  */\n \n   emit_support_tinfos ();\n-  int errs = errorcount + sorrycount;\n-  bool explained_devirt = false;\n \n   do\n     {\n@@ -4579,27 +4563,6 @@ cp_write_global_declarations (void)\n \t\t\t\t\t pending_statics->length ()))\n \treconsider = true;\n \n-      if (flag_use_all_virtuals)\n-\t{\n-\t  if (!reconsider && !mark_all_virtuals)\n-\t    {\n-\t      mark_all_virtuals = true;\n-\t      reconsider = true;\n-\t      errs = errorcount + sorrycount;\n-\t    }\n-\t  else if (mark_all_virtuals\n-\t\t   && !explained_devirt\n-\t\t   && (errorcount + sorrycount > errs))\n-\t    {\n-\t      inform (global_dc->last_location, \"this error is seen due to \"\n-\t\t      \"instantiation of all virtual functions, which the C++ \"\n-\t\t      \"standard says are always considered used; this is done \"\n-\t\t      \"to support devirtualization optimizations, but can be \"\n-\t\t      \"disabled with -fno-use-all-virtuals\");\n-\t      explained_devirt = true;\n-\t    }\n-\t}\n-\n       retries++;\n     }\n   while (reconsider);"}, {"sha": "51757f07efa73b69249ddd76ee245576efa1cad4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a41844e513aa643b1bc41815f7f4ae48aba90464", "patch": "@@ -189,7 +189,7 @@ in the following sections.\n -fno-pretty-templates @gol\n -frepo  -fno-rtti  -fstats  -ftemplate-backtrace-limit=@var{n} @gol\n -ftemplate-depth=@var{n} @gol\n--fno-threadsafe-statics  -fno-use-all-virtuals  -fuse-cxa-atexit @gol\n+-fno-threadsafe-statics  -fuse-cxa-atexit @gol\n -fno-weak  -nostdinc++ @gol\n -fvisibility-inlines-hidden @gol\n -fvtable-verify=@var{std|preinit|none} @gol\n@@ -2319,16 +2319,6 @@ ABI for thread-safe initialization of local statics.  You can use this\n option to reduce code size slightly in code that doesn't need to be\n thread-safe.\n \n-@item -fno-use-all-virtuals\n-@opindex fno-use-all-virtuals\n-By default, G++ now treats all virtual functions declared in a\n-translation unit as odr-used, so they will be instantiated or\n-synthesized if possible even if they are not needed for the final\n-output.  This is done so that such functions can be inlined after\n-devirtualization changes an indirect call into a direct call.  If this\n-instantiation and synthesis prevents your code from compiling\n-successfully, you can disable it with this option.\n-\n @item -fuse-cxa-atexit\n @opindex fuse-cxa-atexit\n Register destructors for objects with static storage duration with the"}, {"sha": "fd71389b865bc9f440bd4494b46fbc7fa7cc95e9", "filename": "gcc/testsuite/g++.dg/template/dtor9.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a41844e513aa643b1bc41815f7f4ae48aba90464/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9.C?ref=a41844e513aa643b1bc41815f7f4ae48aba90464", "patch": "@@ -1,5 +1,4 @@\n // PR c++/60347\n-// { dg-options \"-fno-use-all-virtuals\" }\n \n struct A;\n "}, {"sha": "aaae8b6add04fec6d59d60340cf562a24ca5ee48", "filename": "gcc/testsuite/g++.dg/template/dtor9a.C", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d0ed2d89a56273efe30331c3e94651134615e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d0ed2d89a56273efe30331c3e94651134615e7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor9a.C?ref=d5d0ed2d89a56273efe30331c3e94651134615e7", "patch": "@@ -1,13 +0,0 @@\n-// PR c++/60347\n-// { dg-options \"-fuse-all-virtuals\" }\n-\n-struct A;\n-\n-template <class T>\n-struct B\n-{\n-  T* p;\n-  virtual ~B() { p->~T(); }\t// { dg-error \"incomplete\" }\n-};\n-\n-struct C: B<A> { };"}]}