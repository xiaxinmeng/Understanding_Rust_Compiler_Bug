{"sha": "ca06b86c2fda0d21f44f047983528a9723cb6fea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwNmI4NmMyZmRhMGQyMWY0NGYwNDc5ODM1MjhhOTcyM2NiNmZlYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2019-10-23T20:53:08Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-10-23T20:53:08Z"}, "message": "Rework how prefixed instruction length is calculated.\n\n2019-10-23  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000-protos.h (rs6000_adjust_insn_length): New\n\tdeclaration.\n\t* config/rs6000/rs6000.c (rs6000_insn_cost): Use num_insns insn\n\tattribute if it exists, rather than the insn size.  If we use the\n\tinsn size, adjust the size to remove the extra size that prefixed\n\tinstructions take.\n\t(rs6000_adjust_insn_length): New function.\n\t* config/rs6000/rs6000.h (ADJUST_INSN_LENGTH): New target hook to\n\tupdate the instruction sized if prefixed instructions are used.\n\t* config/rs6000/rs6000.md (prefixed_length attribute): Delete.\n\t(non_prefixed_length attribute): Delete.\n\t(num_insns attribute): New insn attribute to return the number of\n\tinstructions.\n\t(max_prefixed_insns attribute): New insn attribute to return the\n\tmaximum number of prefixed instructions in an insn.\n\t(length attribute): Do not adjust for prefix instructions here,\n\tpunt to ADJUST_INSN_LENGTH.\n\t(mov<mode>_64bit): Set max_prefixed_insns and num_insns.\n\t(movtd_64bit_nodm): Set max_prefixed_insns and num_insns.\n\t(mov<mode>_ppc64): Set max_prefixed_insns and num_insns.\n\t* config/rs6000/vsx.md: (vsx_mov<mode>_64bit): Set\n\tmax_prefixed_insns and num_insns.\n\nFrom-SVN: r277352", "tree": {"sha": "c9f88b3e63627ee7a8cf17799c6340eff9d57c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9f88b3e63627ee7a8cf17799c6340eff9d57c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca06b86c2fda0d21f44f047983528a9723cb6fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca06b86c2fda0d21f44f047983528a9723cb6fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca06b86c2fda0d21f44f047983528a9723cb6fea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca06b86c2fda0d21f44f047983528a9723cb6fea/comments", "author": null, "committer": null, "parents": [{"sha": "0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0998d2fd59e7a5eb3a3566c57625702bbdc6a05f"}], "stats": {"total": 142, "additions": 121, "deletions": 21}, "files": [{"sha": "0c81a1077afe8f78494961fa67d094eda06c24eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca06b86c2fda0d21f44f047983528a9723cb6fea", "patch": "@@ -1,5 +1,28 @@\n 2019-10-23  Michael Meissner  <meissner@linux.ibm.com>\n \n+\t* config/rs6000/rs6000-protos.h (rs6000_adjust_insn_length): New\n+\tdeclaration.\n+\t* config/rs6000/rs6000.c (rs6000_insn_cost): Use num_insns insn\n+\tattribute if it exists, rather than the insn size.  If we use the\n+\tinsn size, adjust the size to remove the extra size that prefixed\n+\tinstructions take.\n+\t(rs6000_adjust_insn_length): New function.\n+\t* config/rs6000/rs6000.h (ADJUST_INSN_LENGTH): New target hook to\n+\tupdate the instruction sized if prefixed instructions are used.\n+\t* config/rs6000/rs6000.md (prefixed_length attribute): Delete.\n+\t(non_prefixed_length attribute): Delete.\n+\t(num_insns attribute): New insn attribute to return the number of\n+\tinstructions.\n+\t(max_prefixed_insns attribute): New insn attribute to return the\n+\tmaximum number of prefixed instructions in an insn.\n+\t(length attribute): Do not adjust for prefix instructions here,\n+\tpunt to ADJUST_INSN_LENGTH.\n+\t(mov<mode>_64bit): Set max_prefixed_insns and num_insns.\n+\t(movtd_64bit_nodm): Set max_prefixed_insns and num_insns.\n+\t(mov<mode>_ppc64): Set max_prefixed_insns and num_insns.\n+\t* config/rs6000/vsx.md: (vsx_mov<mode>_64bit): Set\n+\tmax_prefixed_insns and num_insns.\n+\n \t* config/rs6000/rs6000.md (mov<mode>_64bit_dm): Reformat.\n \t(movtd_64bit_nodm): Reformat.\n \t(mov<mode>_32bit): Reformat."}, {"sha": "6b27d73023af833a40b73cbeac192e83bf6e75fe", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=ca06b86c2fda0d21f44f047983528a9723cb6fea", "patch": "@@ -194,6 +194,7 @@ extern bool prefixed_store_p (rtx_insn *);\n extern bool prefixed_paddi_p (rtx_insn *);\n extern void rs6000_asm_output_opcode (FILE *);\n extern void rs6000_final_prescan_insn (rtx_insn *, rtx [], int);\n+extern int rs6000_adjust_insn_length (rtx_insn *, int);\n \n /* Return true if the address can be used for a prefixed load, store, or add\n    immediate instructions that cannot be used with a non-prefixed instruction."}, {"sha": "13992217fd686dda2e57b36c13af9cdb238f1dc6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ca06b86c2fda0d21f44f047983528a9723cb6fea", "patch": "@@ -21076,14 +21076,32 @@ rs6000_insn_cost (rtx_insn *insn, bool speed)\n   if (recog_memoized (insn) < 0)\n     return 0;\n \n+  /* If we are optimizing for size, just use the length.  */\n   if (!speed)\n     return get_attr_length (insn);\n \n+  /* Use the cost if provided.  */\n   int cost = get_attr_cost (insn);\n   if (cost > 0)\n     return cost;\n \n-  int n = get_attr_length (insn) / 4;\n+  /* If the insn tells us how many insns there are, use that.  Otherwise use\n+     the length/4.  Adjust the insn length to remove the extra size that\n+     prefixed instructions take.  */\n+  int n = get_attr_num_insns (insn);\n+  if (n == 0)\n+    {\n+      int length = get_attr_length (insn);\n+      if (get_attr_prefixed (insn) == PREFIXED_YES)\n+\t{\n+\t  int adjust = 0;\n+\t  ADJUST_INSN_LENGTH (insn, adjust);\n+\t  length -= adjust;\n+\t}\n+\n+      n = length / 4;\n+    }\n+\n   enum attr_type type = get_attr_type (insn);\n \n   switch (type)\n@@ -25087,6 +25105,37 @@ rs6000_asm_output_opcode (FILE *stream)\n   return;\n }\n \n+/* Adjust the length of an INSN.  LENGTH is the currently-computed length and\n+   should be adjusted to reflect any required changes.  This macro is used when\n+   there is some systematic length adjustment required that would be difficult\n+   to express in the length attribute.\n+\n+   In the PowerPC, we use this to adjust the length of an instruction if one or\n+   more prefixed instructions are generated, using the attribute\n+   num_prefixed_insns.  A prefixed instruction is 8 bytes instead of 4, but the\n+   hardware requires that a prefied instruciton does not cross a 64-byte\n+   boundary.  This means the compiler has to assume the length of the first\n+   prefixed instruction is 12 bytes instead of 8 bytes.  Since the length is\n+   already set for the non-prefixed instruction, we just need to udpate for the\n+   difference.  */\n+\n+int\n+rs6000_adjust_insn_length (rtx_insn *insn, int length)\n+{\n+  if (TARGET_PREFIXED_ADDR && NONJUMP_INSN_P (insn))\n+    {\n+      rtx pattern = PATTERN (insn);\n+      if (GET_CODE (pattern) != USE && GET_CODE (pattern) != CLOBBER\n+\t  && get_attr_prefixed (insn) == PREFIXED_YES)\n+\t{\n+\t  int num_prefixed = get_attr_max_prefixed_insns (insn);\n+\t  length += 4 * (num_prefixed + 1);\n+\t}\n+    }\n+\n+  return length;\n+}\n+\n \f\n #ifdef HAVE_GAS_HIDDEN\n # define USE_HIDDEN_LINKONCE 1"}, {"sha": "a4ad3f8fc3eaf63663364f2cb0948cc946ff54d4", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ca06b86c2fda0d21f44f047983528a9723cb6fea", "patch": "@@ -1847,9 +1847,19 @@ extern scalar_int_mode rs6000_pmode;\n /* Adjust the length of an INSN.  LENGTH is the currently-computed length and\n    should be adjusted to reflect any required changes.  This macro is used when\n    there is some systematic length adjustment required that would be difficult\n-   to express in the length attribute.  */\n-\n-/* #define ADJUST_INSN_LENGTH(X,LENGTH) */\n+   to express in the length attribute.\n+\n+   In the PowerPC, we use this to adjust the length of an instruction if one or\n+   more prefixed instructions are generated, using the attribute\n+   num_prefixed_insns.  A prefixed instruction is 8 bytes instead of 4, but the\n+   hardware requires that a prefied instruciton does not cross a 64-byte\n+   boundary.  This means the compiler has to assume the length of the first\n+   prefixed instruction is 12 bytes instead of 8 bytes.  Since the length is\n+   already set for the non-prefixed instruction, we just need to udpate for the\n+   difference.  */\n+\n+#define ADJUST_INSN_LENGTH(INSN,LENGTH)\t\t\t\t\t\\\n+  (LENGTH) = rs6000_adjust_insn_length ((INSN), (LENGTH))\n \n /* Given a comparison code (EQ, NE, etc.) and the first operand of a\n    COMPARE, return the mode to be used for the comparison.  For"}, {"sha": "a3c909fabfb545718cc58e7eb4039dc8bb8c321e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ca06b86c2fda0d21f44f047983528a9723cb6fea", "patch": "@@ -285,20 +285,24 @@\n \n \t(const_string \"no\")))\n \n-;; Length in bytes of instructions that use prefixed addressing and length in\n-;; bytes of instructions that does not use prefixed addressing.  This allows\n-;; both lengths to be defined as constants, and the length attribute can pick\n-;; the size as appropriate.\n-(define_attr \"prefixed_length\" \"\" (const_int 12))\n-(define_attr \"non_prefixed_length\" \"\" (const_int 4))\n-\n-;; Length of the instruction (in bytes).  Prefixed insns are 8 bytes, but the\n-;; assembler might issue need to issue a NOP so that the prefixed instruction\n-;; does not cross a cache boundary, which makes them possibly 12 bytes.\n-(define_attr \"length\" \"\"\n-  (if_then_else (eq_attr \"prefixed\" \"yes\")\n-\t\t(attr \"prefixed_length\")\n-\t\t(attr \"non_prefixed_length\")))\n+;; Return the number of real hardware instructions in a combined insn.  If it\n+;; is 0, just use the length / 4.\n+(define_attr \"num_insns\" \"\" (const_int 0))\n+\n+;; If an insn is prefixed, return the maximum number of prefixed instructions\n+;; in the insn.  The macro ADJUST_INSN_LENGTH uses this number to adjust the\n+;; insn length.\n+(define_attr \"max_prefixed_insns\" \"\" (const_int 1))\n+\n+;; Length of the instruction (in bytes).  This length does not consider the\n+;; length for prefixed instructions.  The macro ADJUST_INSN_LENGTH will adjust\n+;; the length if there are prefixed instructions.\n+;;\n+;; While it might be tempting to use num_insns to calculate the length, it can\n+;; be problematical unless all insn lengths are adjusted to use num_insns\n+;; (i.e. if num_insns is 0, it will get the length, which in turn will get\n+;; num_insns and recurse).\n+(define_attr \"length\" \"\" (const_int 4))\n \n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000-opts.h.\n@@ -7766,7 +7770,9 @@\n   DONE;\n }\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"isa\" \"*,*,*,*,*,*,*,*,p8v,p8v\")])\n+   (set_attr \"isa\" \"*,*,*,*,*,*,*,*,p8v,p8v\")\n+   (set_attr \"max_prefixed_insns\" \"2\")\n+   (set_attr \"num_insns\" \"2\")])\n \n (define_insn_and_split \"*movtd_64bit_nodm\"\n   [(set (match_operand:TD 0 \"nonimmediate_operand\" \"=m,d,d,Y,r,r\")\n@@ -7781,7 +7787,9 @@\n   rs6000_split_multireg_move (operands[0], operands[1]);\n   DONE;\n }\n-  [(set_attr \"length\" \"8,8,8,12,12,8\")])\n+  [(set_attr \"length\" \"8,8,8,12,12,8\")\n+   (set_attr \"max_prefixed_insns\" \"2\")\n+   (set_attr \"num_insns\" \"2,2,2,3,3,2\")])\n \n (define_insn_and_split \"*mov<mode>_32bit\"\n   [(set (match_operand:FMOVE128_FPR 0 \"nonimmediate_operand\" \"=m,d,d,d,Y,r,r\")\n@@ -8990,7 +8998,8 @@\n   return rs6000_output_move_128bit (operands);\n }\n   [(set_attr \"type\" \"store,store,load,load,*,*\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"max_prefixed_insns\" \"2\")])\n \n (define_split\n   [(set (match_operand:TI2 0 \"int_reg_operand\")"}, {"sha": "a0b2e7b1fc016a76b365b43308d3ea46e7a26178", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca06b86c2fda0d21f44f047983528a9723cb6fea/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=ca06b86c2fda0d21f44f047983528a9723cb6fea", "patch": "@@ -1149,6 +1149,14 @@\n                \"vecstore,  vecload,   vecsimple, mffgpr,    mftgpr,    load,\n                 store,     load,      store,     *,         vecsimple, vecsimple,\n                 vecsimple, *,         *,         vecstore,  vecload\")\n+   (set_attr \"num_insns\"\n+               \"*,         *,         *,         2,         *,         2,\n+                2,         2,         2,         2,         *,         *,\n+                *,         5,         2,         *,         *\")\n+   (set_attr \"max_prefixed_insns\"\n+               \"*,         *,         *,         *,         *,         2,\n+                2,         2,         2,         2,         *,         *,\n+                *,         *,         *,         *,         *\")\n    (set_attr \"length\"\n                \"*,         *,         *,         8,         *,         8,\n                 8,         8,         8,         8,         *,         *,"}]}