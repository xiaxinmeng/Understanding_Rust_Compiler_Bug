{"sha": "24ea113f75cfad38894dc1ad16b23c0538ef17d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRlYTExM2Y3NWNmYWQzODg5NGRjMWFkMTZiMjNjMDUzOGVmMTdkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-12T10:04:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-12T10:04:46Z"}, "message": "widening_mul: Fix up ICE caused by my signed multiplication overflow pattern recognition changes [PR98629]\n\nAs the testcase shows, my latest changes caused ICE on that testcase.\nThe problem is that arith_overflow_check_p now can change the use_stmt\nargument (has a reference), so that if it succeeds (returns non-zero),\nit points it to the GIMPLE_COND or EQ/NE or COND_EXPR assignment from the\nTRUNC_DIV_EXPR assignment.\nThe problem was that it would change use_stmt also if it returned 0 in some\ncases, such as multiple imm uses of the division, and in one of the callers\nif arith_overflow_check_p returns 0 it looks at use_stmt again and performs\nother checks, which of course assumes that use_stmt is the one passed\nto arith_overflow_check_p and not e.g. NULL instead or some other unrelated\nstmt.\n\nThe following patch fixes that by only changing use_stmt when we are about\nto return non-zero (for the MULT_EXPR case, which is the only one with the\nneed to use different use_stmt).\n\n2021-01-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98629\n\t* tree-ssa-math-opts.c (arith_overflow_check_p): Don't update use_stmt\n\tunless returning non-zero.\n\n\t* gcc.c-torture/compile/pr98629.c: New test.", "tree": {"sha": "1340c30d7161c93e6435fbccf4198251a6e76efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1340c30d7161c93e6435fbccf4198251a6e76efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24ea113f75cfad38894dc1ad16b23c0538ef17d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea113f75cfad38894dc1ad16b23c0538ef17d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ea113f75cfad38894dc1ad16b23c0538ef17d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea113f75cfad38894dc1ad16b23c0538ef17d4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d47c37a2c043f3e5981e73e4c82158a39f41e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d47c37a2c043f3e5981e73e4c82158a39f41e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d47c37a2c043f3e5981e73e4c82158a39f41e8"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "3c7f08cb8fce4e903888842498b13c60ca93445a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr98629.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea113f75cfad38894dc1ad16b23c0538ef17d4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98629.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea113f75cfad38894dc1ad16b23c0538ef17d4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98629.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98629.c?ref=24ea113f75cfad38894dc1ad16b23c0538ef17d4", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/98629 */\n+\n+unsigned int a;\n+int b, c;\n+\n+void\n+foo (void)\n+{\n+  unsigned int *e = &a;\n+  (a /= a |= b) - (0 <= (*e += *e)) * (c *= *e);\n+}"}, {"sha": "5175ab524dc90fd20e94f05bbb2422da1e397a0b", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ea113f75cfad38894dc1ad16b23c0538ef17d4/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ea113f75cfad38894dc1ad16b23c0538ef17d4/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=24ea113f75cfad38894dc1ad16b23c0538ef17d4", "patch": "@@ -3667,6 +3667,7 @@ arith_overflow_check_p (gimple *stmt, gimple *cast_stmt, gimple *&use_stmt,\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n   tree rhs2 = gimple_assign_rhs2 (stmt);\n   tree multop = NULL_TREE, divlhs = NULL_TREE;\n+  gimple *cur_use_stmt = use_stmt;\n \n   if (code == MULT_EXPR)\n     {\n@@ -3697,26 +3698,26 @@ arith_overflow_check_p (gimple *stmt, gimple *cast_stmt, gimple *&use_stmt,\n       if (!divlhs)\n \treturn 0;\n       use_operand_p use;\n-      if (!single_imm_use (divlhs, &use, &use_stmt))\n+      if (!single_imm_use (divlhs, &use, &cur_use_stmt))\n \treturn 0;\n     }\n-  if (gimple_code (use_stmt) == GIMPLE_COND)\n+  if (gimple_code (cur_use_stmt) == GIMPLE_COND)\n     {\n-      ccode = gimple_cond_code (use_stmt);\n-      crhs1 = gimple_cond_lhs (use_stmt);\n-      crhs2 = gimple_cond_rhs (use_stmt);\n+      ccode = gimple_cond_code (cur_use_stmt);\n+      crhs1 = gimple_cond_lhs (cur_use_stmt);\n+      crhs2 = gimple_cond_rhs (cur_use_stmt);\n     }\n-  else if (is_gimple_assign (use_stmt))\n+  else if (is_gimple_assign (cur_use_stmt))\n     {\n-      if (gimple_assign_rhs_class (use_stmt) == GIMPLE_BINARY_RHS)\n+      if (gimple_assign_rhs_class (cur_use_stmt) == GIMPLE_BINARY_RHS)\n \t{\n-\t  ccode = gimple_assign_rhs_code (use_stmt);\n-\t  crhs1 = gimple_assign_rhs1 (use_stmt);\n-\t  crhs2 = gimple_assign_rhs2 (use_stmt);\n+\t  ccode = gimple_assign_rhs_code (cur_use_stmt);\n+\t  crhs1 = gimple_assign_rhs1 (cur_use_stmt);\n+\t  crhs2 = gimple_assign_rhs2 (cur_use_stmt);\n \t}\n-      else if (gimple_assign_rhs_code (use_stmt) == COND_EXPR)\n+      else if (gimple_assign_rhs_code (cur_use_stmt) == COND_EXPR)\n \t{\n-\t  tree cond = gimple_assign_rhs1 (use_stmt);\n+\t  tree cond = gimple_assign_rhs1 (cur_use_stmt);\n \t  if (COMPARISON_CLASS_P (cond))\n \t    {\n \t      ccode = TREE_CODE (cond);\n@@ -3792,11 +3793,17 @@ arith_overflow_check_p (gimple *stmt, gimple *cast_stmt, gimple *&use_stmt,\n \t    {\n \t      if ((crhs1 == divlhs && arith_cast_equal_p (crhs2, multop))\n \t\t  || (crhs2 == divlhs && arith_cast_equal_p (crhs1, multop)))\n-\t\treturn ccode == NE_EXPR ? 1 : -1;\n+\t\t{\n+\t\t  use_stmt = cur_use_stmt;\n+\t\t  return ccode == NE_EXPR ? 1 : -1;\n+\t\t}\n \t    }\n \t  else if ((crhs1 == divlhs && operand_equal_p (crhs2, multop, 0))\n \t\t   || (crhs2 == divlhs && crhs1 == multop))\n-\t    return ccode == NE_EXPR ? 1 : -1;\n+\t    {\n+\t      use_stmt = cur_use_stmt;\n+\t      return ccode == NE_EXPR ? 1 : -1;\n+\t    }\n \t}\n       break;\n     default:"}]}