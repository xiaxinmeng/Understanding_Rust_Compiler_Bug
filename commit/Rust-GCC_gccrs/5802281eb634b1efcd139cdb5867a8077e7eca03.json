{"sha": "5802281eb634b1efcd139cdb5867a8077e7eca03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgwMjI4MWViNjM0YjFlZmNkMTM5Y2RiNTg2N2E4MDc3ZTdlY2EwMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-08-15T21:59:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-15T21:59:40Z"}, "message": "re PR c++/61566 (ICE in write_unscoped_name)\n\n\tPR c++/61566\n\t* pt.c (instantiate_class_template_1): Ignore lambda on\n\tCLASSTYPE_DECL_LIST.\n\t(push_template_decl_real): A lambda is not primary.\n\t(lookup_template_class_1): Don't look for a lambda partial\n\tinstantiation.\n\t* lambda.c (maybe_add_lambda_conv_op): Distinguish between being\n\tcurrently in a function and the lambda living in a function.\n\t* mangle.c (CLASSTYPE_TEMPLATE_ID_P): False for lambda.\n\nFrom-SVN: r214046", "tree": {"sha": "e67cb1575d9bbab9d61cafcb08483a12596b5273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e67cb1575d9bbab9d61cafcb08483a12596b5273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5802281eb634b1efcd139cdb5867a8077e7eca03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5802281eb634b1efcd139cdb5867a8077e7eca03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5802281eb634b1efcd139cdb5867a8077e7eca03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5802281eb634b1efcd139cdb5867a8077e7eca03/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b33845084ba98bc0bc87c7220254b3ab4999ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b33845084ba98bc0bc87c7220254b3ab4999ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b33845084ba98bc0bc87c7220254b3ab4999ed5"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "c926978bdcd33bda528a3708bde0c677270d61b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5802281eb634b1efcd139cdb5867a8077e7eca03", "patch": "@@ -1,3 +1,15 @@\n+2014-08-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/61566\n+\t* pt.c (instantiate_class_template_1): Ignore lambda on\n+\tCLASSTYPE_DECL_LIST.\n+\t(push_template_decl_real): A lambda is not primary.\n+\t(lookup_template_class_1): Don't look for a lambda partial\n+\tinstantiation.\n+\t* lambda.c (maybe_add_lambda_conv_op): Distinguish between being\n+\tcurrently in a function and the lambda living in a function.\n+\t* mangle.c (CLASSTYPE_TEMPLATE_ID_P): False for lambda.\n+\n 2014-08-15  Richard Biener  <rguenther@suse.de>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "ddaa940672785c781803fc48ef52ca6c7aff5c24", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=5802281eb634b1efcd139cdb5867a8077e7eca03", "patch": "@@ -824,6 +824,7 @@ void\n maybe_add_lambda_conv_op (tree type)\n {\n   bool nested = (current_function_decl != NULL_TREE);\n+  bool nested_def = decl_function_context (TYPE_MAIN_DECL (type));\n   tree callop = lambda_function (type);\n \n   if (LAMBDA_EXPR_CAPTURE_LIST (CLASSTYPE_LAMBDA_EXPR (type)) != NULL_TREE)\n@@ -976,7 +977,7 @@ maybe_add_lambda_conv_op (tree type)\n   DECL_NOT_REALLY_EXTERN (fn) = 1;\n   DECL_DECLARED_INLINE_P (fn) = 1;\n   DECL_ARGUMENTS (fn) = build_this_parm (fntype, TYPE_QUAL_CONST);\n-  if (nested)\n+  if (nested_def)\n     DECL_INTERFACE_KNOWN (fn) = 1;\n \n   if (generic_lambda_p)\n@@ -1016,7 +1017,7 @@ maybe_add_lambda_conv_op (tree type)\n       DECL_NAME (arg) = NULL_TREE;\n       DECL_CONTEXT (arg) = fn;\n     }\n-  if (nested)\n+  if (nested_def)\n     DECL_INTERFACE_KNOWN (fn) = 1;\n \n   if (generic_lambda_p)"}, {"sha": "ac165e021d99305999355cc13a169a940c8db445", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5802281eb634b1efcd139cdb5867a8077e7eca03", "patch": "@@ -87,6 +87,7 @@ along with GCC; see the file COPYING3.  If not see\n   (TYPE_LANG_SPECIFIC (NODE) != NULL\t\t\t\t\t\\\n    && (TREE_CODE (NODE) == BOUND_TEMPLATE_TEMPLATE_PARM\t\t\t\\\n        || (CLASSTYPE_TEMPLATE_INFO (NODE) != NULL\t\t\t\\\n+\t   && !LAMBDA_TYPE_P (NODE)\t\t\t\t\t\\\n \t   && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))))\n \n /* Things we only need one of.  This module is not reentrant.  */"}, {"sha": "611bfd6b7a1f72f0e93c521f73b52a2196f0b024", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5802281eb634b1efcd139cdb5867a8077e7eca03", "patch": "@@ -4722,6 +4722,9 @@ push_template_decl_real (tree decl, bool is_friend)\n          template <typename T> friend void A<T>::f();\n        is not primary.  */\n     is_primary = false;\n+  else if (TREE_CODE (decl) == TYPE_DECL\n+\t   && LAMBDA_TYPE_P (TREE_TYPE (decl)))\n+    is_primary = false;\n   else\n     is_primary = template_parm_scope_p ();\n \n@@ -7875,6 +7878,8 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t  && TMPL_ARGS_HAVE_MULTIPLE_LEVELS (arglist)\n \t  /* the enclosing class must be an instantiation...  */\n \t  && CLASS_TYPE_P (context)\n+\t  /* We don't do partial instantiation of closures.  */\n+\t  && !LAMBDA_TYPE_P (TREE_TYPE (gen_tmpl))\n \t  && !same_type_p (context, DECL_CONTEXT (gen_tmpl)))\n \t{\n \t  tree partial_inst_args;\n@@ -9237,6 +9242,11 @@ instantiate_class_template_1 (tree type)\n \t\t  && DECL_OMP_DECLARE_REDUCTION_P (r))\n \t\tcp_check_omp_declare_reduction (r);\n \t    }\n+\t  else if (DECL_CLASS_TEMPLATE_P (t)\n+\t\t   && LAMBDA_TYPE_P (TREE_TYPE (t)))\n+\t    /* A closure type for a lambda in a default argument for a\n+\t       member template.  Ignore it; it will be instantiated with\n+\t       the default argument.  */;\n \t  else\n \t    {\n \t      /* Build new TYPE_FIELDS.  */"}, {"sha": "2b1a605acd00277d67f7aff6d9697b32d088bd00", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template13.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5802281eb634b1efcd139cdb5867a8077e7eca03/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C?ref=5802281eb634b1efcd139cdb5867a8077e7eca03", "patch": "@@ -7,6 +7,7 @@ struct function\n   function (_Functor);\n };\n \n+template <class U>\n struct C\n {\n   template <typename T>\n@@ -15,6 +16,9 @@ struct C\n \n void bar ()\n {\n-  C c;\n+  C<int> c;\n   c.foo (1);\n }\n+\n+// { dg-final { scan-assembler \"_ZN8functionC1IZN1CIiE3fooIiEEvT_S_Ed_UlvE_EET_\" } }\n+// { dg-final { scan-assembler-not \"_ZZN1CIiE3fooIiEEvT_8functionEd_NKUlvE_clEv\" } }"}]}