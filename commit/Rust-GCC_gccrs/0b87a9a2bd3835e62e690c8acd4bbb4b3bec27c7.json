{"sha": "0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4N2E5YTJiZDM4MzVlNjJlNjkwYzhhY2Q0YmJiNGIzYmVjMjdjNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-11-24T20:26:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-11-24T20:26:48Z"}, "message": "tree.c (make_vector_type): Properly compute canonical type of the main variant.\n\n\t* tree.c (make_vector_type): Properly compute canonical type of the\n\tmain variant.\n\t(verify_type): Verify that TYPE_CANONICAL of TYPE_MAIN_VARIANT is\n\ta main variant.\n\nFrom-SVN: r230837", "tree": {"sha": "996665907662bd11e9174a1bb035070a2a4512d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/996665907662bd11e9174a1bb035070a2a4512d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7/comments", "author": null, "committer": null, "parents": [{"sha": "d74792629d41383f6ff4543aeed9bc6080d77809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74792629d41383f6ff4543aeed9bc6080d77809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74792629d41383f6ff4543aeed9bc6080d77809"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "8744fd733137d2940baaa4ebbc23706de1b25308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "patch": "@@ -1,3 +1,10 @@\n+2015-11-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (make_vector_type): Properly compute canonical type of the\n+\tmain variant.\n+\t(verify_type): Verify that TYPE_CANONICAL of TYPE_MAIN_VARIANT is\n+\ta main variant.\n+\n 2015-11-24  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.c (maybe_split_mode): Return new mode or"}, {"sha": "f68a824c6a42d161546d9c802249b1c7953f91c1", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0b87a9a2bd3835e62e690c8acd4bbb4b3bec27c7", "patch": "@@ -9860,19 +9860,20 @@ make_vector_type (tree innertype, int nunits, machine_mode mode)\n {\n   tree t;\n   inchash::hash hstate;\n+  tree mv_innertype = TYPE_MAIN_VARIANT (innertype);\n \n   t = make_node (VECTOR_TYPE);\n-  TREE_TYPE (t) = TYPE_MAIN_VARIANT (innertype);\n+  TREE_TYPE (t) = mv_innertype;\n   SET_TYPE_VECTOR_SUBPARTS (t, nunits);\n   SET_TYPE_MODE (t, mode);\n \n-  if (TYPE_STRUCTURAL_EQUALITY_P (innertype) || in_lto_p)\n+  if (TYPE_STRUCTURAL_EQUALITY_P (mv_innertype) || in_lto_p)\n     SET_TYPE_STRUCTURAL_EQUALITY (t);\n-  else if ((TYPE_CANONICAL (innertype) != innertype\n+  else if ((TYPE_CANONICAL (mv_innertype) != innertype\n \t    || mode != VOIDmode)\n \t   && !VECTOR_BOOLEAN_TYPE_P (t))\n     TYPE_CANONICAL (t)\n-      = make_vector_type (TYPE_CANONICAL (innertype), nunits, VOIDmode);\n+      = make_vector_type (TYPE_CANONICAL (mv_innertype), nunits, VOIDmode);\n \n   layout_type (t);\n \n@@ -13540,6 +13541,13 @@ verify_type (const_tree t)\n       debug_tree (ct);\n       error_found = true;\n     }\n+  if (TYPE_MAIN_VARIANT (t) == t && ct && TYPE_MAIN_VARIANT (ct) != ct)\n+   {\n+      error (\"TYPE_CANONICAL of main variant is not main variant\");\n+      debug_tree (ct);\n+      debug_tree (TYPE_MAIN_VARIANT (ct));\n+      error_found = true;\n+   }\n \n \n   /* Check various uses of TYPE_MINVAL.  */"}]}