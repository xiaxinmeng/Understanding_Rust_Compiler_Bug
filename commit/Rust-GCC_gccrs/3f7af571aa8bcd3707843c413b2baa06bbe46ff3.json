{"sha": "3f7af571aa8bcd3707843c413b2baa06bbe46ff3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y3YWY1NzFhYThiY2QzNzA3ODQzYzQxM2IyYmFhMDZiYmU0NmZmMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-04T05:17:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-12-04T05:17:54Z"}, "message": "compiler: Fix crash in go/defer of some builtin functions.\n\nFrom-SVN: r194114", "tree": {"sha": "fc45f7b721523284e00758f9174c0e8d2878b20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc45f7b721523284e00758f9174c0e8d2878b20d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f7af571aa8bcd3707843c413b2baa06bbe46ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7af571aa8bcd3707843c413b2baa06bbe46ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f7af571aa8bcd3707843c413b2baa06bbe46ff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7af571aa8bcd3707843c413b2baa06bbe46ff3/comments", "author": null, "committer": null, "parents": [{"sha": "114d8843e607fd4856c2a35741a80cddb965f278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114d8843e607fd4856c2a35741a80cddb965f278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114d8843e607fd4856c2a35741a80cddb965f278"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "bfc1b625d71b6e90e9e05872a6564d98c071c741", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7af571aa8bcd3707843c413b2baa06bbe46ff3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7af571aa8bcd3707843c413b2baa06bbe46ff3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3f7af571aa8bcd3707843c413b2baa06bbe46ff3", "patch": "@@ -80,10 +80,11 @@ Expression::do_traverse(Traverse*)\n // expression is being discarded.  By default, we give an error.\n // Expressions with side effects override.\n \n-void\n+bool\n Expression::do_discarding_value()\n {\n   this->unused_value_error();\n+  return false;\n }\n \n // This virtual function is called to export expressions.  This will\n@@ -100,7 +101,7 @@ Expression::do_export(Export*) const\n void\n Expression::unused_value_error()\n {\n-  error_at(this->location(), \"value computed is not used\");\n+  this->report_error(_(\"value computed is not used\"));\n }\n \n // Note that this expression is an error.  This is called by children\n@@ -786,9 +787,9 @@ class Error_expression : public Expression\n     return true;\n   }\n \n-  void\n+  bool\n   do_discarding_value()\n-  { }\n+  { return true; }\n \n   Type*\n   do_type()\n@@ -1149,9 +1150,9 @@ class Sink_expression : public Expression\n   { }\n \n  protected:\n-  void\n+  bool\n   do_discarding_value()\n-  { }\n+  { return true; }\n \n   Type*\n   do_type();\n@@ -5326,13 +5327,16 @@ Binary_expression::do_numeric_constant_value(Numeric_constant* nc) const\n \n // Note that the value is being discarded.\n \n-void\n+bool\n Binary_expression::do_discarding_value()\n {\n   if (this->op_ == OPERATOR_OROR || this->op_ == OPERATOR_ANDAND)\n-    this->right_->discarding_value();\n+    return this->right_->discarding_value();\n   else\n-    this->unused_value_error();\n+    {\n+      this->unused_value_error();\n+      return false;\n+    }\n }\n \n // Get type.\n@@ -6536,7 +6540,7 @@ class Builtin_call_expression : public Call_expression\n   bool\n   do_numeric_constant_value(Numeric_constant*) const;\n \n-  void\n+  bool\n   do_discarding_value();\n \n   Type*\n@@ -7338,7 +7342,7 @@ Builtin_call_expression::do_numeric_constant_value(Numeric_constant* nc) const\n // discarding the value of an ordinary function call, but we do for\n // builtin functions, purely for consistency with the gc compiler.\n \n-void\n+bool\n Builtin_call_expression::do_discarding_value()\n {\n   switch (this->code_)\n@@ -7359,7 +7363,7 @@ Builtin_call_expression::do_discarding_value()\n     case BUILTIN_OFFSETOF:\n     case BUILTIN_SIZEOF:\n       this->unused_value_error();\n-      break;\n+      return false;\n \n     case BUILTIN_CLOSE:\n     case BUILTIN_COPY:\n@@ -7368,7 +7372,7 @@ Builtin_call_expression::do_discarding_value()\n     case BUILTIN_PRINT:\n     case BUILTIN_PRINTLN:\n     case BUILTIN_RECOVER:\n-      break;\n+      return true;\n     }\n }\n "}, {"sha": "66e05a7bcfde770d56e8fcc17ff27523b9661c0d", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7af571aa8bcd3707843c413b2baa06bbe46ff3/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7af571aa8bcd3707843c413b2baa06bbe46ff3/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=3f7af571aa8bcd3707843c413b2baa06bbe46ff3", "patch": "@@ -360,10 +360,11 @@ class Expression\n \n   // This is called if the value of this expression is being\n   // discarded.  This issues warnings about computed values being\n-  // unused.\n-  void\n+  // unused.  This returns true if all is well, false if it issued an\n+  // error message.\n+  bool\n   discarding_value()\n-  { this->do_discarding_value(); }\n+  { return this->do_discarding_value(); }\n \n   // Return whether this is an error expression.\n   bool\n@@ -689,7 +690,7 @@ class Expression\n   { return false; }\n \n   // Called by the parser if the value is being discarded.\n-  virtual void\n+  virtual bool\n   do_discarding_value();\n \n   // Child class holds type.\n@@ -1205,7 +1206,7 @@ class Binary_expression : public Expression\n   bool\n   do_numeric_constant_value(Numeric_constant*) const;\n \n-  void\n+  bool\n   do_discarding_value();\n \n   Type*\n@@ -1373,9 +1374,9 @@ class Call_expression : public Expression\n   virtual Expression*\n   do_lower(Gogo*, Named_object*, Statement_inserter*, int);\n \n-  void\n+  bool\n   do_discarding_value()\n-  { }\n+  { return true; }\n \n   virtual Type*\n   do_type();\n@@ -2056,9 +2057,9 @@ class Receive_expression : public Expression\n   do_traverse(Traverse* traverse)\n   { return Expression::traverse(&this->channel_, traverse); }\n \n-  void\n+  bool\n   do_discarding_value()\n-  { }\n+  { return true; }\n \n   Type*\n   do_type();"}, {"sha": "fb1322f42f3df976127b3509a2d1087fa079b359", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7af571aa8bcd3707843c413b2baa06bbe46ff3/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7af571aa8bcd3707843c413b2baa06bbe46ff3/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=3f7af571aa8bcd3707843c413b2baa06bbe46ff3", "patch": "@@ -2006,6 +2006,8 @@ Thunk_statement::do_determine_types()\n void\n Thunk_statement::do_check_types(Gogo*)\n {\n+  if (!this->call_->discarding_value())\n+    return;\n   Call_expression* ce = this->call_->call_expression();\n   if (ce == NULL)\n     {\n@@ -2471,11 +2473,15 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n       Expression_statement* es =\n \tstatic_cast<Expression_statement*>(call_statement);\n       Call_expression* ce = es->expr()->call_expression();\n-      go_assert(ce != NULL);\n-      if (may_call_recover)\n-\tce->set_is_deferred();\n-      if (recover_arg != NULL)\n-\tce->set_recover_arg(recover_arg);\n+      if (ce == NULL)\n+\tgo_assert(saw_errors());\n+      else\n+\t{\n+\t  if (may_call_recover)\n+\t    ce->set_is_deferred();\n+\t  if (recover_arg != NULL)\n+\t    ce->set_recover_arg(recover_arg);\n+\t}\n     }\n \n   // That is all the thunk has to do."}]}