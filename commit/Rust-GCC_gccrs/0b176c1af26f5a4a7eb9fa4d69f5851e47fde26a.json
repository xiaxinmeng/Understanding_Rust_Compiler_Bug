{"sha": "0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxNzZjMWFmMjZmNWE0YTdlYjlmYTRkNjlmNTg1MWU0N2ZkZTI2YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-04-18T13:55:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-04-18T13:55:22Z"}, "message": "According to 5.9 para 2 (second bullet) for pointers p...\n\n2003-04-18  Paolo Carlini  <pcarlini@unitus.it>\n\n\tAccording to 5.9 para 2 (second bullet) for pointers p, q\n\tpointing to the same type, with  p == 0 and q == 0, (p < q)\n\tis false.\n\t* include/bits/fstream.tcc (close, overflow, _M_really_overflow,\n\tseekoff): Remove redundant NULL pointer checks from tests\n\tinvolving _M_out_* and _M_in_*, const qualify bool variables.\n\t(showmanyc, pbackfail, _M_convert_to_external, imbue): Const\n\tqualify bool variables.\n\t* include/bits/streambuf.tcc (sbumpc, sputbackc, sungetc, sputc):\n\tRemove redundant NULL pointer checks from tests involving\n\t_M_out_* and _M_in_*, const qualify bool variables.\n\t* include/std/std_fstream.h (sync): Likewise.\n\t(_M_is_indeterminate): Const qualify bool variables.\n\t* include/std/std_streambuf.h (sgetc, uflow): Remove redundant\n\tNULL pointer checks from tests involving _M_out_* and _M_in_*,\n\tconst qualify bool variables.\n\t(_M_in_cur_move, _M_out_cur_move, uflow): Const qualify bool\n\tvariables.\n\nFrom-SVN: r65783", "tree": {"sha": "1db6b55db6c5212e9bc439cdef2fb282dbf03525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db6b55db6c5212e9bc439cdef2fb282dbf03525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/comments", "author": null, "committer": null, "parents": [{"sha": "c553b7026a36d035a298064ea62e9035ba2b3edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c553b7026a36d035a298064ea62e9035ba2b3edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c553b7026a36d035a298064ea62e9035ba2b3edd"}], "stats": {"total": 100, "additions": 59, "deletions": 41}, "files": [{"sha": "0837473b35dc8652ae5150205b1e9b3c30bdfa03", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "patch": "@@ -1,3 +1,24 @@\n+2003-04-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tAccording to 5.9 para 2 (second bullet) for pointers p, q\n+\tpointing to the same type, with  p == 0 and q == 0, (p < q)\n+\tis false.\n+\t* include/bits/fstream.tcc (close, overflow, _M_really_overflow,\n+\tseekoff): Remove redundant NULL pointer checks from tests\n+\tinvolving _M_out_* and _M_in_*, const qualify bool variables.\n+\t(showmanyc, pbackfail, _M_convert_to_external, imbue): Const\n+\tqualify bool variables.\n+\t* include/bits/streambuf.tcc (sbumpc, sputbackc, sungetc, sputc):\n+\tRemove redundant NULL pointer checks from tests involving\n+\t_M_out_* and _M_in_*, const qualify bool variables.\n+\t* include/std/std_fstream.h (sync): Likewise.\n+\t(_M_is_indeterminate): Const qualify bool variables.\n+\t* include/std/std_streambuf.h (sgetc, uflow): Remove redundant\n+\tNULL pointer checks from tests involving _M_out_* and _M_in_*,\n+\tconst qualify bool variables.\n+\t(_M_in_cur_move, _M_out_cur_move, uflow): Const qualify bool\n+\tvariables.\n+\n 2003-04-18  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* include/c_std/std_cmath.h (C99 FP capture): Only undefine said"}, {"sha": "a3daccaf8b33998b3ddec47bdedf0c8f92e7e430", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "patch": "@@ -116,8 +116,8 @@ namespace std\n \t{\n \t  bool __testfail = false;\n \t  const int_type __eof = traits_type::eof();\n-\t  bool __testput = this->_M_out_cur\n-\t                   && this->_M_out_beg < this->_M_out_lim;\n+\t  const bool __testput = this->_M_out_beg < this->_M_out_lim;\n+\n \t  if (__testput \n \t      && traits_type::eq_int_type(_M_really_overflow(__eof), __eof))\n \t    __testfail = true;\n@@ -152,11 +152,11 @@ namespace std\n     showmanyc()\n     {\n       streamsize __ret = -1;\n-      bool __testin = this->_M_mode & ios_base::in;\n+      const bool __testin = this->_M_mode & ios_base::in;\n       const locale __loc = this->getloc();\n       const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n       // Sync with stdio.\n-      bool __sync = this->_M_buf_size <= 1;\n+      const bool __sync = this->_M_buf_size <= 1;\n \n       if (__testin && this->is_open())\n \t{\n@@ -178,18 +178,18 @@ namespace std\n     pbackfail(int_type __i)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testin = this->_M_mode & ios_base::in;\n+      const bool __testin = this->_M_mode & ios_base::in;\n \n       if (__testin)\n \t{\n-\t  bool __testpb = this->_M_in_beg < this->_M_in_cur;\n+\t  const bool __testpb = this->_M_in_beg < this->_M_in_cur;\n \t  char_type __c = traits_type::to_char_type(__i);\n-\t  bool __testeof = traits_type::eq_int_type(__i, __ret);\n+\t  const bool __testeof = traits_type::eq_int_type(__i, __ret);\n \n \t  if (__testpb)\n \t    {\n-\t      bool __testout = this->_M_mode & ios_base::out;\n-\t      bool __testeq = traits_type::eq(__c, this->gptr()[-1]);\n+\t      const bool __testout = this->_M_mode & ios_base::out;\n+\t      const bool __testeq = traits_type::eq(__c, this->gptr()[-1]);\n \n \t      // Try to put back __c into input sequence in one of three ways.\n \t      // Order these tests done in is unspecified by the standard.\n@@ -251,9 +251,8 @@ namespace std\n     overflow(int_type __c)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testput =\n-\tthis->_M_out_cur && this->_M_out_cur < this->_M_out_end;\n-      bool __testout = this->_M_mode & ios_base::out;\n+      const bool __testput = this->_M_out_cur < this->_M_out_end;\n+      const bool __testout = this->_M_mode & ios_base::out;\n       \n       if (__testout)\n \t{\n@@ -282,7 +281,7 @@ namespace std\n       const locale __loc = this->getloc();\n       const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n       // Sync with stdio.\n-      bool __sync = this->_M_buf_size <= 1;\n+      const bool __sync = this->_M_buf_size <= 1;\n \n       if (__cvt.always_noconv() && __ilen)\n \t{\n@@ -352,10 +351,10 @@ namespace std\n     _M_really_overflow(int_type __c)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testput = this->_M_out_cur && this->_M_out_beg < this->_M_out_lim;\n-      bool __testunbuffered = _M_file.is_open() && !this->_M_buf_size;\n+      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n+      const bool __testunbuffered = _M_file.is_open() && !this->_M_buf_size;\n       // Sync with stdio.\n-      bool __sync = this->_M_buf_size <= 1;\n+      const bool __sync = this->_M_buf_size <= 1;\n \n       if (__testput || __testunbuffered)\n \t{\n@@ -440,16 +439,16 @@ namespace std\n     seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)\n     {\n       pos_type __ret =  pos_type(off_type(-1)); \n-      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n-      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n+      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n+      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n       // Sync with stdio.\n-      bool __sync = this->_M_buf_size <= 1;\n+      const bool __sync = this->_M_buf_size <= 1;\n       \n       // Should probably do has_facet checks here.\n       int __width = use_facet<__codecvt_type>(this->_M_buf_locale).encoding();\n       if (__width < 0)\n \t__width = 0;\n-      bool __testfail = __off != 0 && __width <= 0;\n+      const bool __testfail = __off != 0 && __width <= 0;\n       \n       if (this->is_open() && !__testfail && (__testin || __testout)) \n \t{\n@@ -460,10 +459,8 @@ namespace std\n \t    { \n \t      off_type __computed_off = __width * __off;\n \t      \n-\t      bool __testget = this->_M_in_cur\n-\t\t&& this->_M_in_beg < this->_M_in_end;\n-\t      bool __testput = this->_M_out_cur\n-\t\t&& this->_M_out_beg < this->_M_out_lim;\n+\t      const bool __testget = this->_M_in_beg < this->_M_in_end;\n+\t      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n \t      // Sync the internal and external streams.\n \t      // out\n \t      if (__testput || _M_last_overflowed)\n@@ -523,7 +520,7 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     imbue(const locale& __loc)\n     {\n-      bool __testbeg = gptr() == eback() && pptr() == pbase();\n+      const bool __testbeg = gptr() == eback() && pptr() == pbase();\n \n       if (__testbeg && this->_M_buf_locale != __loc)\n \tthis->_M_buf_locale = __loc;"}, {"sha": "09dd14ce876d0da8f7545c1d9d54727df2ea6ebe", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "patch": "@@ -49,7 +49,7 @@ namespace std\n     sbumpc()\n     {\n       int_type __ret;\n-      if (_M_in_cur && _M_in_cur < _M_in_end)\n+      if (_M_in_cur < _M_in_end)\n \t{\n \t  char_type __c = *(this->gptr());\n \t  _M_in_cur_move(1);\n@@ -66,7 +66,7 @@ namespace std\n     sputbackc(char_type __c) \n     {\n       int_type __ret;\n-      bool __testpos = _M_in_cur && _M_in_beg < _M_in_cur;\n+      const bool __testpos = _M_in_beg < _M_in_cur;\n       if (!__testpos || !traits_type::eq(__c, this->gptr()[-1]))\n \t__ret = this->pbackfail(traits_type::to_int_type(__c));\n       else \n@@ -83,7 +83,7 @@ namespace std\n     sungetc()\n     {\n       int_type __ret;\n-      if (_M_in_cur && _M_in_beg < _M_in_cur)\n+      if (_M_in_beg < _M_in_cur)\n \t{\n \t  _M_in_cur_move(-1);\n \t  __ret = traits_type::to_int_type(*_M_in_cur);\n@@ -99,7 +99,7 @@ namespace std\n     sputc(char_type __c)\n     {\n       int_type __ret;\n-      if (_M_out_cur && _M_out_cur < _M_out_end)\n+      if (_M_out_cur < _M_out_end)\n \t{\n \t  *_M_out_cur = __c;\n \t  _M_out_cur_move(1);"}, {"sha": "c341aaa6ce18bb4de46fd302e2673597a71e8b69", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "patch": "@@ -312,10 +312,9 @@ namespace std\n       sync()\n       {\n \tint __ret = 0;\n-\tbool __testput = this->_M_out_cur\n-\t  && this->_M_out_beg < this->_M_out_lim;\n+\tconst bool __testput = this->_M_out_beg < this->_M_out_lim;\n \t// Sync with stdio.\n-\tbool __sync = this->_M_buf_size <= 1;\n+\tconst bool __sync = this->_M_buf_size <= 1;\n \n \t// Make sure that the internal buffer resyncs its idea of\n \t// the file position with the external file.\n@@ -404,8 +403,8 @@ namespace std\n       void\n       _M_set_determinate(off_type __off)\n       {\n-\tbool __testin = this->_M_mode & ios_base::in;\n-\tbool __testout = this->_M_mode & ios_base::out;\n+\tconst bool __testin = this->_M_mode & ios_base::in;\n+\tconst bool __testout = this->_M_mode & ios_base::out;\n \tif (__testin)\n \t  this->setg(this->_M_buf, this->_M_buf, this->_M_buf + __off);\n \tif (__testout)\n@@ -424,8 +423,8 @@ namespace std\n       bool\n       _M_is_indeterminate(void)\n       { \n-\tbool __testin = this->_M_mode & ios_base::in;\n-\tbool __testout = this->_M_mode & ios_base::out;\n+\tconst bool __testin = this->_M_mode & ios_base::in;\n+\tconst bool __testout = this->_M_mode & ios_base::out;\n \tbool __ret = false;\n \t// Don't return true if unbuffered.\n \tif (this->_M_buf)"}, {"sha": "b180c87794077bcafa1f14a5121ab96214c79e23", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=0b176c1af26f5a4a7eb9fa4d69f5851e47fde26a", "patch": "@@ -303,7 +303,7 @@ namespace std\n       void \n       _M_in_cur_move(off_type __n) // argument needs to be +-\n       {\n-\tbool __testout = _M_out_cur;\n+\tconst bool __testout = _M_out_cur;\n \t_M_in_cur += __n;\n \tif (__testout && _M_buf_unified)\n \t  _M_out_cur += __n;\n@@ -320,7 +320,7 @@ namespace std\n       void \n       _M_out_cur_move(off_type __n) // argument needs to be +-\n       {\n-\tbool __testin = _M_in_cur;\n+\tconst bool __testin = _M_in_cur;\n \n \t_M_out_cur += __n;\n \tif (__testin && _M_buf_unified)\n@@ -453,7 +453,7 @@ namespace std\n       sgetc()\n       {\n \tint_type __ret;\n-\tif (_M_in_cur && _M_in_cur < _M_in_end)\n+\tif (_M_in_cur < _M_in_end)\n \t  __ret = traits_type::to_int_type(*(this->gptr()));\n \telse \n \t  __ret = this->underflow();\n@@ -787,8 +787,9 @@ namespace std\n       uflow() \n       {\n \tint_type __ret = traits_type::eof();\n-\tbool __testeof = traits_type::eq_int_type(this->underflow(), __ret);\n-\tbool __testpending = _M_in_cur && _M_in_cur < _M_in_end;\n+\tconst bool __testeof =\n+\t  traits_type::eq_int_type(this->underflow(), __ret);\n+\tconst bool __testpending = _M_in_cur < _M_in_end;\n \tif (!__testeof && __testpending)\n \t  {\n \t    __ret = traits_type::to_int_type(*_M_in_cur);"}]}