{"sha": "ad774d0d6351789e9e412291cf280c8e3f72bf81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ3NzRkMGQ2MzUxNzg5ZTllNDEyMjkxY2YyODBjOGUzZjcyYmY4MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-12-05T08:59:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-12-05T08:59:24Z"}, "message": "typeck2.c (build_functional_cast): Add location_t parameter and use it.\n\n/gcc/cp\n2019-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck2.c (build_functional_cast): Add location_t parameter\n\tand use it.\n\t* cp-tree.h: Update declaration.\n\t* parser.c (cp_parser_functional_cast): Adjust call.\n\t* call.c (build_op_delete_call): Likewise.\n\t(build_new_method_call_1): Likewise.\n\t* decl.c (check_initializer): Likewise.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* semantics.c (finish_compound_literal): Likewise.\n\n/libcc1\n2019-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* libcp1plugin.cc (plugin_build_expression_list_expr): Adjust\n\tbuild_functional_cast call.\n\n/testsuite\n2019-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/functional-cast-to-array-type-1.C: New.\n\t* g++.dg/cpp0x/auto25.C: Check location(s) too.\n\t* g++.dg/cpp0x/auto28.C: Likewise.\n\t* g++.dg/init/reference2.C: Likewise.\n\t* g++.dg/parse/template2.C: Likewise.\n\t* g++.dg/template/error8.C: Likewise.\n\t* g++.old-deja/g++.ns/crash3.C: Likewise.\n\t* g++.old-deja/g++.ns/template7.C: Likewise.\n\t* g++.old-deja/g++.pt/crash8.C: Likewise.\n\nFrom-SVN: r278987", "tree": {"sha": "bd8237a0ca5be9e56071dbd6e347fe6349b1358e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8237a0ca5be9e56071dbd6e347fe6349b1358e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad774d0d6351789e9e412291cf280c8e3f72bf81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad774d0d6351789e9e412291cf280c8e3f72bf81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad774d0d6351789e9e412291cf280c8e3f72bf81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad774d0d6351789e9e412291cf280c8e3f72bf81/comments", "author": null, "committer": null, "parents": [{"sha": "ad80ec460bf0747541d016e7159d5262560204ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad80ec460bf0747541d016e7159d5262560204ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad80ec460bf0747541d016e7159d5262560204ab"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "6cda4e72d52f4328f59f297d5c00785d7676b11d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -1,3 +1,15 @@\n+2019-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck2.c (build_functional_cast): Add location_t parameter\n+\tand use it.\n+\t* cp-tree.h: Update declaration.\n+\t* parser.c (cp_parser_functional_cast): Adjust call.\n+\t* call.c (build_op_delete_call): Likewise.\n+\t(build_new_method_call_1): Likewise.\n+\t* decl.c (check_initializer): Likewise.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* semantics.c (finish_compound_literal): Likewise.\n+\n 2019-12-04  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* cp-gimplify.c: Include tm_p.h."}, {"sha": "92d3d688f0cf5e4b31030ad7927fd8ba719485b7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -6933,7 +6933,8 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t      rtype = cv_unqualified (rtype);\n \t      rtype = TYPE_POINTER_TO (rtype);\n \t      addr = cp_convert (rtype, oaddr, complain);\n-\t      destroying = build_functional_cast (destroying, NULL_TREE,\n+\t      destroying = build_functional_cast (input_location,\n+\t\t\t\t\t\t  destroying, NULL_TREE,\n \t\t\t\t\t\t  complain);\n \t    }\n \n@@ -9997,7 +9998,8 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t\t     basetype, name))\n \tinform (input_location, \"for a function-style cast, remove the \"\n \t\t\"redundant %<::%D%>\", name);\n-      call = build_functional_cast (basetype, build_tree_list_vec (user_args),\n+      call = build_functional_cast (input_location, basetype,\n+\t\t\t\t    build_tree_list_vec (user_args),\n \t\t\t\t    complain);\n       return call;\n     }"}, {"sha": "a392be6b24fca88f6b9ed4685ff5bbf09ebeabc3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -7681,7 +7681,8 @@ extern tree build_scoped_ref\t\t\t(tree, tree, tree *);\n extern tree build_x_arrow\t\t\t(location_t, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_m_component_ref\t\t(tree, tree, tsubst_flags_t);\n-extern tree build_functional_cast\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_functional_cast\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree add_exception_specifier\t\t(tree, tree, tsubst_flags_t);\n extern tree merge_exception_specifiers\t\t(tree, tree);\n "}, {"sha": "7897327ad9a9a49d512e9a8500b854d25911a1b1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -6764,7 +6764,8 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \t      if (CLASS_TYPE_P (type)\n \t\t  && (!init || TREE_CODE (init) == TREE_LIST))\n \t\t{\n-\t\t  init = build_functional_cast (type, init, tf_none);\n+\t\t  init = build_functional_cast (input_location, type,\n+\t\t\t\t\t\tinit, tf_none);\n \t\t  if (TREE_CODE (init) == TARGET_EXPR)\n \t\t    TARGET_EXPR_DIRECT_INIT_P (init) = true;\n \t\t}"}, {"sha": "05be440cb9b8e0b968c345e8110991ddb3149840", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -29268,8 +29268,17 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n       release_tree_vector (vec);\n     }\n \n-  cast = build_functional_cast (type, expression_list,\n+  /* Create a location of the form:\n+       float(i)\n+       ^~~~~~~~\n+     with caret == start at the start of the type name,\n+     finishing at the closing paren.  */\n+  location_t combined_loc = make_location (start_loc, start_loc,\n+\t\t\t\t\t   parser->lexer);\n+  cast = build_functional_cast (combined_loc, type, expression_list,\n                                 tf_warning_or_error);\n+  cast.set_location (combined_loc);\n+  \n   /* [expr.const]/1: In an integral constant expression \"only type\n      conversions to integral or enumeration type can be used\".  */\n   if (TREE_CODE (type) == TYPE_DECL)\n@@ -29280,13 +29289,6 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n \t\t\t\t\t\t     NIC_CONSTRUCTOR))\n     return error_mark_node;\n \n-  /* Create a location of the form:\n-       float(i)\n-       ^~~~~~~~\n-     with caret == start at the start of the type name,\n-     finishing at the closing paren.  */\n-  location_t combined_loc = make_location (start_loc, start_loc, parser->lexer);\n-  cast.set_location (combined_loc);\n   return cast;\n }\n "}, {"sha": "0990297892e54d21a59080e1adf9f17add361c80", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -19017,7 +19017,7 @@ tsubst_copy_and_build (tree t,\n \tswitch (TREE_CODE (t))\n \t  {\n \t  case CAST_EXPR:\n-\t    r = build_functional_cast (type, op, complain);\n+\t    r = build_functional_cast (input_location, type, op, complain);\n \t    break;\n \t  case REINTERPRET_CAST_EXPR:\n \t    r = build_reinterpret_cast (type, op, complain);"}, {"sha": "83a7891e57beedaf8cf98ae1e50ab2dec6ed7d65", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -2929,7 +2929,8 @@ finish_compound_literal (tree type, tree compound_literal,\n \t that it came from T{} rather than T({}).  */\n       CONSTRUCTOR_IS_DIRECT_INIT (compound_literal) = 1;\n       compound_literal = build_tree_list (NULL_TREE, compound_literal);\n-      return build_functional_cast (type, compound_literal, complain);\n+      return build_functional_cast (input_location, type,\n+\t\t\t\t    compound_literal, complain);\n     }\n \n   if (TREE_CODE (type) == ARRAY_TYPE"}, {"sha": "ca321f3e35e7e785abec176db8a47cb55c8114b5", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -2228,7 +2228,8 @@ build_m_component_ref (tree datum, tree component, tsubst_flags_t complain)\n /* Return a tree node for the expression TYPENAME '(' PARMS ')'.  */\n \n tree\n-build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n+build_functional_cast (location_t loc, tree exp, tree parms,\n+\t\t       tsubst_flags_t complain)\n {\n   /* This is either a call to a constructor,\n      or a C cast in C++'s `functional' notation.  */\n@@ -2254,7 +2255,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n       if (complain & tf_error)\n-\terror (\"functional cast to array type %qT\", type);\n+\terror_at (loc, \"functional cast to array type %qT\", type);\n       return error_mark_node;\n     }\n \n@@ -2263,7 +2264,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n       if (!CLASS_PLACEHOLDER_TEMPLATE (anode))\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"invalid use of %qT\", anode);\n+\t    error_at (loc, \"invalid use of %qT\", anode);\n \t  return error_mark_node;\n \t}\n       else if (!parms)\n@@ -2276,8 +2277,8 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n \t  if (type == error_mark_node)\n \t    {\n \t      if (complain & tf_error)\n-\t\terror (\"cannot deduce template arguments for %qT from %<()%>\",\n-\t\t       anode);\n+\t\terror_at (loc, \"cannot deduce template arguments \"\n+\t\t\t  \"for %qT from %<()%>\", anode);\n \t      return error_mark_node;\n \t    }\n \t}\n@@ -2296,7 +2297,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n       if (TYPE_REF_P (type) && !parms)\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"invalid value-initialization of reference type\");\n+\t    error_at (loc, \"invalid value-initialization of reference type\");\n \t  return error_mark_node;\n \t}\n "}, {"sha": "75050022f0ed3a4fb50c52a6d82f2acc146efbfd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -1,3 +1,15 @@\n+2019-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/functional-cast-to-array-type-1.C: New.\n+\t* g++.dg/cpp0x/auto25.C: Check location(s) too.\n+\t* g++.dg/cpp0x/auto28.C: Likewise.\n+\t* g++.dg/init/reference2.C: Likewise.\n+\t* g++.dg/parse/template2.C: Likewise.\n+\t* g++.dg/template/error8.C: Likewise.\n+\t* g++.old-deja/g++.ns/crash3.C: Likewise.\n+\t* g++.old-deja/g++.ns/template7.C: Likewise.\n+\t* g++.old-deja/g++.pt/crash8.C: Likewise.\n+\n 2019-12-03  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/91582"}, {"sha": "19d51bc8590feefec1d717b92e011534e33c15e9", "filename": "gcc/testsuite/g++.dg/cpp0x/auto25.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto25.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -3,10 +3,10 @@\n \n template<int> struct A\n {\n-  int a[auto(1)]; // { dg-error \"invalid use of\" }\n+  int a[auto(1)]; // { dg-error \"9:invalid use of\" }\n };\n \n template<int> void foo()\n {\n-  int a[auto(1)]; // { dg-error \"invalid use of\" }\n+  int a[auto(1)]; // { dg-error \"9:invalid use of\" }\n }"}, {"sha": "1ffd9b76255a1641e376bb04f2f42d4d1c45f8b8", "filename": "gcc/testsuite/g++.dg/cpp0x/auto28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto28.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -1,4 +1,4 @@\n // PR c++/51404\n // { dg-do compile { target c++11 } }\n \n-int i = auto().x;  // { dg-error \"invalid use of\" }\n+int i = auto().x;  // { dg-error \"9:invalid use of\" }"}, {"sha": "e9bdb643f43c3d85b8281fe7ec9008bd79c2fcfe", "filename": "gcc/testsuite/g++.dg/diagnostic/functional-cast-to-array-type-1.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ffunctional-cast-to-array-type-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ffunctional-cast-to-array-type-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ffunctional-cast-to-array-type-1.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -0,0 +1,2 @@\n+typedef int A [1];\n+A a = A(1);  // { dg-error \"7:functional cast to array type\" }"}, {"sha": "08d3d97c998ab9639a729c890bbd06a6a053b560", "filename": "gcc/testsuite/g++.dg/init/reference2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Freference2.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -8,6 +8,6 @@ template <int a1>\n void f()\n {\n   typedef int& T;\n-  T a = T();  // { dg-error \"value-initialization of reference\" }\n+  T a = T();  // { dg-error \"9:invalid value-initialization of reference\" }\n }\n "}, {"sha": "3cb27a85c007df09b97363e7b721f781862df664", "filename": "gcc/testsuite/g++.dg/parse/template2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -3,5 +3,6 @@ namespace N {\n }\n \n int main() {\n-  N::C(); // { dg-error \"template|deduction\" }\n+  N::C(); // { dg-error \"6:cannot deduce template arguments\" \"\" { target c++17 } }\n+  // { dg-error \"7:missing template arguments\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "6cae360aa161ac65c9c3a81ecde6d39d6d7d8ac2", "filename": "gcc/testsuite/g++.dg/template/error8.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror8.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -3,5 +3,6 @@\n template <typename T> struct S {};\n \n void f() {\n-  throw S (); // { dg-error \"template\" }\n+  throw S (); // { dg-error \"9:cannot deduce template arguments\" \"\" { target c++17 } }\n+  // { dg-error \"11:missing template arguments\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "189298de6c58f4a71dd92f3a229df30be429a875", "filename": "gcc/testsuite/g++.old-deja/g++.ns/crash3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fcrash3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fcrash3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fcrash3.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -6,5 +6,6 @@ namespace N {\n \n void f()\n {\n-  N::S(); // { dg-error \"\" } invalid use of template\n+  N::S(); // { dg-error \"6:cannot deduce template arguments\" \"\" { target c++17 } } invalid use of template\n+  // { dg-error \"7:missing template arguments\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "71366b79d02c2c674206c82f8555fb0c8fd593d8", "filename": "gcc/testsuite/g++.old-deja/g++.ns/template7.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Ftemplate7.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -8,5 +8,6 @@ namespace foo {\n }\n \n void baz() {\n-  foo::bar(); // { dg-error \"\" } template used as expression\n+  foo::bar(); // { dg-error \"8:cannot deduce template arguments\" \"\" { target c++17 } } template used as expression\n+  // { dg-error \"11:missing template arguments\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "7b4eff595bfc24ce378769a8c0b0d8a67a147fe2", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash8.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash8.C?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -21,10 +21,12 @@ void doit(T x) {\n   q2 = TestClass2<T>();\n \n   TestClass1<T> p1;\n-  p1 = TestClass1(); // { dg-error \"\" } template used as expression\n+  p1 = TestClass1(); // { dg-error \"8:cannot deduce template arguments\" \"\" { target c++17 } } template used as expression\n+  // { dg-error \"18:missing template arguments\" \"\" { target c++14_down } .-1 }\n \n   TestClass2<T> p2;\n-  p2 = TestClass2(); // { dg-error \"\" } template used as expression\n+  p2 = TestClass2(); // { dg-error \"8:cannot deduce template arguments\" \"\" { target c++17 } } template used as expression\n+  // { dg-error \"18:missing template arguments\" \"\" { target c++14_down } .-1 }\n }\n \n int main() {"}, {"sha": "169a0a9eeeb4fcd6915a9099ca2dbbc6abbe0c84", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -1,3 +1,8 @@\n+2019-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* libcp1plugin.cc (plugin_build_expression_list_expr): Adjust\n+\tbuild_functional_cast call.\n+\n 2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* libcp1plugin.cc (plugin_pragma_push_user_expression): Update"}, {"sha": "c728310618f3aa67e4981eb50810db214479c58e", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad774d0d6351789e9e412291cf280c8e3f72bf81/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad774d0d6351789e9e412291cf280c8e3f72bf81/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=ad774d0d6351789e9e412291cf280c8e3f72bf81", "patch": "@@ -3155,7 +3155,7 @@ plugin_build_expression_list_expr (cc1_plugin::connection *self,\n     case CHARS2 ('c', 'v'): // conversion with parenthesized expression list\n       gcc_assert (TYPE_P (type));\n       args = args_to_tree_list (values_in);\n-      result = build_functional_cast (type, args, tf_error);\n+      result = build_functional_cast (input_location, type, args, tf_error);\n       break;\n \n     case CHARS2 ('t', 'l'): // conversion with braced expression list"}]}