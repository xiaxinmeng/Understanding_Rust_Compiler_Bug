{"sha": "9d1ae52c147f15b4cd6d6625b4667c73cd2ee558", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQxYWU1MmMxNDdmMTViNGNkNmQ2NjI1YjQ2NjdjNzNjZDJlZTU1OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-16T13:48:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-16T13:48:51Z"}, "message": "re PR tree-optimization/46590 (long compile time with -O2 and many loops)\n\n2014-01-16  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/46590\n\t* lcm.c (compute_antinout_edge): Use postorder iteration.\n\t(compute_laterin): Use inverted postorder iteration.\n\nFrom-SVN: r206663", "tree": {"sha": "d817cd44228cfb7d85772f21d53ff970f6238bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d817cd44228cfb7d85772f21d53ff970f6238bf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54c7a7f3b07b2198ecd84cdab579ec41057389f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c7a7f3b07b2198ecd84cdab579ec41057389f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c7a7f3b07b2198ecd84cdab579ec41057389f9"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "7d57619b071bfaabac9889ac4a15f9c4c40d644e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d1ae52c147f15b4cd6d6625b4667c73cd2ee558", "patch": "@@ -1,3 +1,9 @@\n+2014-01-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/46590\n+\t* lcm.c (compute_antinout_edge): Use postorder iteration.\n+\t(compute_laterin): Use inverted postorder iteration.\n+\n 2014-01-16  Nick Clifton  <nickc@redhat.com>\n \n \tPR middle-end/28865"}, {"sha": "2f02129aaeb187220ad11f2c0aedbaae700058a4", "filename": "gcc/lcm.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d1ae52c147f15b4cd6d6625b4667c73cd2ee558/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=9d1ae52c147f15b4cd6d6625b4667c73cd2ee558", "patch": "@@ -109,11 +109,15 @@ compute_antinout_edge (sbitmap *antloc, sbitmap *transp, sbitmap *antin,\n \n   /* Put every block on the worklist; this is necessary because of the\n      optimistic initialization of ANTIN above.  */\n-  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n+  int *postorder = XNEWVEC (int, n_basic_blocks_for_fn (cfun));\n+  int postorder_num = post_order_compute (postorder, false, false);\n+  for (int i = 0; i < postorder_num; ++i)\n     {\n+      bb = BASIC_BLOCK_FOR_FN (cfun, postorder[i]);\n       *qin++ = bb;\n       bb->aux = bb;\n     }\n+  free (postorder);\n \n   qin = worklist;\n   qend = &worklist[n_basic_blocks_for_fn (cfun) - NUM_FIXED_BLOCKS];\n@@ -281,11 +285,18 @@ compute_laterin (struct edge_list *edge_list, sbitmap *earliest,\n \n   /* Add all the blocks to the worklist.  This prevents an early exit from\n      the loop given our optimistic initialization of LATER above.  */\n-  FOR_EACH_BB_FN (bb, cfun)\n+  int *postorder = XNEWVEC (int, n_basic_blocks_for_fn (cfun));\n+  int postorder_num = inverted_post_order_compute (postorder);\n+  for (int i = 0; i < postorder_num; ++i)\n     {\n+      bb = BASIC_BLOCK_FOR_FN (cfun, postorder[i]);\n+      if (bb == EXIT_BLOCK_PTR_FOR_FN (cfun)\n+\t  || bb == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n+\tcontinue;\n       *qin++ = bb;\n       bb->aux = bb;\n     }\n+  free (postorder);\n \n   /* Note that we do not use the last allocated element for our queue,\n      as EXIT_BLOCK is never inserted into it. */\n@@ -307,14 +318,14 @@ compute_laterin (struct edge_list *edge_list, sbitmap *earliest,\n       bitmap_ones (laterin[bb->index]);\n       FOR_EACH_EDGE (e, ei, bb->preds)\n \tbitmap_and (laterin[bb->index], laterin[bb->index],\n-\t\t\t later[(size_t)e->aux]);\n+\t\t    later[(size_t)e->aux]);\n \n       /* Calculate LATER for all outgoing edges.  */\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \tif (bitmap_ior_and_compl (later[(size_t) e->aux],\n-\t\t\t\t      earliest[(size_t) e->aux],\n-\t\t\t\t      laterin[e->src->index],\n-\t\t\t\t      antloc[e->src->index])\n+\t\t\t\t  earliest[(size_t) e->aux],\n+\t\t\t\t  laterin[bb->index],\n+\t\t\t\t  antloc[bb->index])\n \t    /* If LATER for an outgoing edge was changed, then we need\n \t       to add the target of the outgoing edge to the worklist.  */\n \t    && e->dest != EXIT_BLOCK_PTR_FOR_FN (cfun) && e->dest->aux == 0)\n@@ -333,8 +344,8 @@ compute_laterin (struct edge_list *edge_list, sbitmap *earliest,\n   bitmap_ones (laterin[last_basic_block_for_fn (cfun)]);\n   FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n     bitmap_and (laterin[last_basic_block_for_fn (cfun)],\n-\t\t     laterin[last_basic_block_for_fn (cfun)],\n-\t\t     later[(size_t) e->aux]);\n+\t\tlaterin[last_basic_block_for_fn (cfun)],\n+\t\tlater[(size_t) e->aux]);\n \n   clear_aux_for_edges ();\n   free (worklist);"}]}