{"sha": "525a1a73a5a563c829a5f76858fe122c9b39f254", "node_id": "C_kwDOANBUbNoAKDUyNWExYTczYTVhNTYzYzgyOWE1Zjc2ODU4ZmUxMjJjOWIzOWYyNTQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-31T20:51:44Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-31T20:51:44Z"}, "message": "Add rotl64ti2_doubleword pattern to i386.md\n\nThis patch adds rot[lr]64ti2_doubleword patterns to the x86_64 backend,\nto move splitting of 128-bit TImode rotates by 64 bits after reload,\nmatching what we now do for 64-bit DImode rotations by 32 bits with -m32.\n\nIn theory moving when this rotation is split should have little\ninfluence on code generation, but in practice \"reload\" sometimes\ndecides to make use of the increased flexibility to reduce the number\nof registers used, and the code size, by using xchg.\n\nFor example:\n__int128 x;\n__int128 y;\n__int128 a;\n__int128 b;\n\nvoid foo()\n{\n    unsigned __int128 t = x;\n    t ^= a;\n    t = (t<<64) | (t>>64);\n    t ^= b;\n    y = t;\n}\n\nBefore:\n        movq    x(%rip), %rsi\n        movq    x+8(%rip), %rdi\n        xorq    a(%rip), %rsi\n        xorq    a+8(%rip), %rdi\n        movq    %rdi, %rax\n        movq    %rsi, %rdx\n        xorq    b(%rip), %rax\n        xorq    b+8(%rip), %rdx\n        movq    %rax, y(%rip)\n        movq    %rdx, y+8(%rip)\n        ret\n\nAfter:\n        movq    x(%rip), %rax\n        movq    x+8(%rip), %rdx\n        xorq    a(%rip), %rax\n        xorq    a+8(%rip), %rdx\n        xchgq   %rdx, %rax\n        xorq    b(%rip), %rax\n        xorq    b+8(%rip), %rdx\n        movq    %rax, y(%rip)\n        movq    %rdx, y+8(%rip)\n        ret\n\nOne some modern architectures this is a small win, on some older\narchitectures this is a small loss.  The decision which code to\ngenerate is made in \"reload\", and could probably be tweaked by\nregister preferencing.  The much bigger win is that (eventually) all\nTImode mode shifts and rotates by constants will become potential\ncandidates for TImode STV.\n\n2022-07-31  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (define_expand <any_rotate>ti3): For\n\trotations by 64 bits use new rot[lr]64ti2_doubleword pattern.\n\t(rot[lr]64ti2_doubleword): New post-reload splitter.", "tree": {"sha": "aadf0f3dff93c8bc031b06fcbc456d2bedaf3db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aadf0f3dff93c8bc031b06fcbc456d2bedaf3db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/525a1a73a5a563c829a5f76858fe122c9b39f254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525a1a73a5a563c829a5f76858fe122c9b39f254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525a1a73a5a563c829a5f76858fe122c9b39f254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525a1a73a5a563c829a5f76858fe122c9b39f254/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493f4e6cf081ea2d016547629b29d130c1533ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493f4e6cf081ea2d016547629b29d130c1533ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493f4e6cf081ea2d016547629b29d130c1533ccb"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "f1158e1356b8fde13c7c50b34c01823e9ebd3419", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525a1a73a5a563c829a5f76858fe122c9b39f254/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525a1a73a5a563c829a5f76858fe122c9b39f254/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=525a1a73a5a563c829a5f76858fe122c9b39f254", "patch": "@@ -13820,6 +13820,8 @@\n   if (const_1_to_63_operand (operands[2], VOIDmode))\n     emit_insn (gen_ix86_<insn>ti3_doubleword\n \t\t(operands[0], operands[1], operands[2]));\n+  else if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) == 64)\n+    emit_insn (gen_<insn>64ti2_doubleword (operands[0], operands[1]));\n   else\n     {\n       rtx amount = force_reg (QImode, operands[2]);\n@@ -14045,6 +14047,24 @@\n     }\n })\n \n+(define_insn_and_split \"<insn>64ti2_doubleword\"\n+ [(set (match_operand:TI 0 \"register_operand\" \"=r,r,r\")\n+       (any_rotate:TI (match_operand:TI 1 \"nonimmediate_operand\" \"0,r,o\")\n+                      (const_int 64)))]\n+ \"TARGET_64BIT\"\n+ \"#\"\n+ \"&& reload_completed\"\n+ [(set (match_dup 0) (match_dup 3))\n+  (set (match_dup 2) (match_dup 1))]\n+{\n+  split_double_mode (TImode, &operands[0], 2, &operands[0], &operands[2]);\n+  if (rtx_equal_p (operands[0], operands[1]))\n+    {\n+      emit_insn (gen_swapdi (operands[0], operands[2]));\n+      DONE;\n+    }\n+})\n+\n (define_mode_attr rorx_immediate_operand\n \t[(SI \"const_0_to_31_operand\")\n \t (DI \"const_0_to_63_operand\")])"}]}