{"sha": "1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "node_id": "C_kwDOANBUbNoAKDFiZTYxMGFmYWIyZDFmM2ZjZTQzM2JlMmVlYjliNGI4ZDExYmRmMGQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-01T11:52:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-01T11:52:51Z"}, "message": "Merge #783\n\n783: Get rid of lambda within `AST::TypePath` and provide a method to return a reference r=philberty a=diohabara\n\n## Related issue\r\n\r\nThis PR will fix <https://github.com/Rust-GCC/gccrs/issues/718>\r\n\r\n- \\[x] GCC development requires copyright assignment or the Developer's Certificate of Origin sign-off, see https://gcc.gnu.org/contribute.html or https://gcc.gnu.org/dco.html\r\n- \\[x] Read contributing guidlines\r\n- \\[x] `make check-rust` passes locally\r\n- \\[x] Run `clang-format`\r\n- \\[x] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n\r\n\n\nCo-authored-by: Kadoi Takemaru <diohabara@gmail.com>", "tree": {"sha": "56a34e691457a303c5b987b8d8996e16268d8228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56a34e691457a303c5b987b8d8996e16268d8228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhf9UUCRBK7hj4Ov3rIwAAAgUIAGbJDHBc06i9NBx/++xLwqi6\nkBZySiNIeQVW51GnDJPjFzP3tXoGFmqPfrJCgstI1djsnP9dq2jbjW4ecz52DfOY\nAc0v0zaBH37l5+AXAe780kQTOPjQw71MTDD7OgzcVyfL4QO66wi8C6xNpra43svo\nh8LgQDI4DWqa+mxI/7HFnEzx1GBWsNMd3BPnQlYczMvoJhckGo8LoUXzl20CgVsA\nV2gaQ3iWEy7dbw68D67pKbv07wQw7tyVNeKGKmseSR08l7T1z3riCweoKkU4Oh5x\n11c3siWL96ipQ/FSDdHZV/KAzJaBwGvkY97CHwyFXaBJ4NbsCz8ZlGem+lVfmTU=\n=YOok\n-----END PGP SIGNATURE-----\n", "payload": "tree 56a34e691457a303c5b987b8d8996e16268d8228\nparent ca0b06f86fd44bd6067563dcbf4a2c021f2a79a5\nparent 66832f312a7db436110a3b08ff51eac349d5fdbf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635767571 +0000\ncommitter GitHub <noreply@github.com> 1635767571 +0000\n\nMerge #783\n\n783: Get rid of lambda within `AST::TypePath` and provide a method to return a reference r=philberty a=diohabara\n\n## Related issue\r\n\r\nThis PR will fix <https://github.com/Rust-GCC/gccrs/issues/718>\r\n\r\n- \\[x] GCC development requires copyright assignment or the Developer's Certificate of Origin sign-off, see https://gcc.gnu.org/contribute.html or https://gcc.gnu.org/dco.html\r\n- \\[x] Read contributing guidlines\r\n- \\[x] `make check-rust` passes locally\r\n- \\[x] Run `clang-format`\r\n- \\[x] Added any relevant test cases to `gcc/testsuite/rust/`\r\n\r\nNote that you can skip the above if you are just opening a WIP PR in\r\norder to get feedback.\r\n\r\n\n\nCo-authored-by: Kadoi Takemaru <diohabara@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0b06f86fd44bd6067563dcbf4a2c021f2a79a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0b06f86fd44bd6067563dcbf4a2c021f2a79a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0b06f86fd44bd6067563dcbf4a2c021f2a79a5"}, {"sha": "66832f312a7db436110a3b08ff51eac349d5fdbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66832f312a7db436110a3b08ff51eac349d5fdbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66832f312a7db436110a3b08ff51eac349d5fdbf"}], "stats": {"total": 70, "additions": 24, "deletions": 46}, "files": [{"sha": "4c437cc3646e2a50aa3c7bbe7727bc06011f3560", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "patch": "@@ -754,15 +754,6 @@ class TypePath : public TypeNoBounds\n   }\n \n   size_t get_num_segments () const { return segments.size (); }\n-\n-  void iterate_segments (std::function<bool (TypePathSegment *)> cb)\n-  {\n-    for (auto it = segments.begin (); it != segments.end (); it++)\n-      {\n-\tif (!cb ((*it).get ()))\n-\t  return;\n-      }\n-  }\n };\n \n struct QualifiedPathType\n@@ -1029,15 +1020,6 @@ class QualifiedPathInType : public TypeNoBounds\n   }\n \n   Location get_locus () const override final { return locus; }\n-\n-  void iterate_segments (std::function<bool (TypePathSegment *)> cb)\n-  {\n-    for (auto it = segments.begin (); it != segments.end (); it++)\n-      {\n-\tif (!cb ((*it).get ()))\n-\t  return;\n-      }\n-  }\n };\n } // namespace AST\n } // namespace Rust"}, {"sha": "c6679321e7f5858edf2231fbec33dd61466fafc7", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "patch": "@@ -62,20 +62,18 @@ class ASTLowerTypePath : public ASTLoweringBase\n   {\n     std::vector<std::unique_ptr<HIR::TypePathSegment>> translated_segments;\n \n-    path.iterate_segments ([&] (AST::TypePathSegment *seg) mutable -> bool {\n-      translated_segment = nullptr;\n-      seg->accept_vis (*this);\n-      if (translated_segment == nullptr)\n-\t{\n-\t  rust_fatal_error (seg->get_locus (),\n-\t\t\t    \"failed to translate AST TypePathSegment\");\n-\t  return false;\n-\t}\n-\n-      translated_segments.push_back (\n-\tstd::unique_ptr<HIR::TypePathSegment> (translated_segment));\n-      return true;\n-    });\n+    for (auto &seg : path.get_segments ())\n+      {\n+\ttranslated_segment = nullptr;\n+\tseg->accept_vis (*this);\n+\tif (translated_segment == nullptr)\n+\t  {\n+\t    rust_fatal_error (seg->get_locus (),\n+\t\t\t      \"failed to translate AST TypePathSegment\");\n+\t  }\n+\ttranslated_segments.push_back (\n+\t  std::unique_ptr<HIR::TypePathSegment> (translated_segment));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     auto hirid = mappings->get_next_hir_id (crate_num);"}, {"sha": "5f269b14ff6733e5ccf1f129e4bcbfc889ae4f64", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "patch": "@@ -490,20 +490,18 @@ ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n   std::unique_ptr<HIR::TypePathSegment> associated_segment (translated_segment);\n \n   std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n-  path.iterate_segments ([&] (AST::TypePathSegment *seg) mutable -> bool {\n-    translated_segment = nullptr;\n-    seg->accept_vis (*this);\n-    if (translated_segment == nullptr)\n-      {\n-\trust_fatal_error (seg->get_locus (),\n-\t\t\t  \"failed to translate AST TypePathSegment\");\n-\treturn false;\n-      }\n-\n-    translated_segments.push_back (\n-      std::unique_ptr<HIR::TypePathSegment> (translated_segment));\n-    return true;\n-  });\n+  for (auto &seg : path.get_segments ())\n+    {\n+      translated_segment = nullptr;\n+      seg->accept_vis (*this);\n+      if (translated_segment == nullptr)\n+\t{\n+\t  rust_fatal_error (seg->get_locus (),\n+\t\t\t    \"failed to translte AST TypePathSegment\");\n+\t}\n+      translated_segments.push_back (\n+\tstd::unique_ptr<HIR::TypePathSegment> (translated_segment));\n+    }\n \n   Analysis::NodeMapping mapping (crate_num, path.get_node_id (), hirid,\n \t\t\t\t mappings->get_next_localdef_id (crate_num));"}]}