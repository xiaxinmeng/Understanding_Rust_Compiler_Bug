{"sha": "2092ee7d08be8897d85309fbffc395602e67a3fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5MmVlN2QwOGJlODg5N2Q4NTMwOWZiZmZjMzk1NjAyZTY3YTNmZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-01-03T08:33:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-01-03T08:33:57Z"}, "message": "re PR tree-optimization/29484 (tree-inline.c bug with local static vars)\n\n\tPR tree-optimization/29484\n\t* tree-inline.c (inline_forbidden_p_2): New function.\n\t(inline_forbidden_p): Disallow inlining if some static var\n\thas an address of a local LABEL_DECL in its initializer.\n\t* doc/extend.texi (Labels as Values): Document &&foo behaviour\n\tvs. inlining.\n\n\t* gcc.c-torture/execute/20071220-1.c: New test.\n\t* gcc.c-torture/execute/20071220-2.c: New test.\n\nFrom-SVN: r131300", "tree": {"sha": "c01a04f37d6590c350dcd0b897f1ffa43b5099c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c01a04f37d6590c350dcd0b897f1ffa43b5099c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2092ee7d08be8897d85309fbffc395602e67a3fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2092ee7d08be8897d85309fbffc395602e67a3fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2092ee7d08be8897d85309fbffc395602e67a3fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2092ee7d08be8897d85309fbffc395602e67a3fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "097392de6b7eb5cba34ed8f367ab79837d7cedd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097392de6b7eb5cba34ed8f367ab79837d7cedd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097392de6b7eb5cba34ed8f367ab79837d7cedd2"}], "stats": {"total": 140, "additions": 138, "deletions": 2}, "files": [{"sha": "e7098d095f9a984abeedea3276a1496cd2290f91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2092ee7d08be8897d85309fbffc395602e67a3fd", "patch": "@@ -1,3 +1,12 @@\n+2008-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/29484\n+\t* tree-inline.c (inline_forbidden_p_2): New function.\n+\t(inline_forbidden_p): Disallow inlining if some static var\n+\thas an address of a local LABEL_DECL in its initializer.\n+\t* doc/extend.texi (Labels as Values): Document &&foo behaviour\n+\tvs. inlining.\n+\n 2007-12-19  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/34635"}, {"sha": "34a5a460effc2c1367d78363ae2894065eda2e40", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2092ee7d08be8897d85309fbffc395602e67a3fd", "patch": "@@ -370,6 +370,12 @@ This is more friendly to code living in shared libraries, as it reduces\n the number of dynamic relocations that are needed, and by consequence,\n allows the data to be read-only.\n \n+The @code{&&foo} expressions for the same label might have different values\n+if the containing function is inlined or cloned.  If a program relies on\n+them being always the same, @code{__attribute__((__noinline__))} should\n+be used to prevent inlining.  If @code{&&foo} is used\n+in a static variable initializer, inlining is forbidden.\n+\n @node Nested Functions\n @section Nested Functions\n @cindex nested functions"}, {"sha": "abf7969ffe577a69bda899211402ee6fba950730", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2092ee7d08be8897d85309fbffc395602e67a3fd", "patch": "@@ -1,3 +1,9 @@\n+2008-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/29484\n+\t* gcc.c-torture/execute/20071220-1.c: New test.\n+\t* gcc.c-torture/execute/20071220-2.c: New test.\n+\n 2007-12-19  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/34635"}, {"sha": "00c2fa57bec7588d8d06e1e39698a0e877aa0f12", "filename": "gcc/testsuite/gcc.c-torture/execute/20071220-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071220-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071220-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071220-1.c?ref=2092ee7d08be8897d85309fbffc395602e67a3fd", "patch": "@@ -0,0 +1,40 @@\n+/* PR tree-optimization/29484 */\n+\n+extern void abort (void);\n+\n+void *__attribute__((noinline))\n+baz (void **lab)\n+{\n+  asm volatile (\"\" : \"+r\" (lab));\n+  return *lab;\n+}\n+\n+static inline\n+int bar (void)\n+{\n+  static void *b[] = { &&addr };\n+  void *p = baz (b);\n+  goto *p;\n+addr:\n+  return 17;\n+}\n+\n+int __attribute__((noinline))\n+f1 (void)\n+{\n+  return bar ();\n+}\n+\n+int __attribute__((noinline))\n+f2 (void)\n+{\n+  return bar ();\n+}\n+\n+int\n+main (void)\n+{\n+  if (f1 () != 17 || f1 () != 17 || f2 () != 17 || f2 () != 17)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "93fa9de0275c3d07e5deb77a8d2cdbe0c43b2bc4", "filename": "gcc/testsuite/gcc.c-torture/execute/20071220-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071220-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071220-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071220-2.c?ref=2092ee7d08be8897d85309fbffc395602e67a3fd", "patch": "@@ -0,0 +1,39 @@\n+/* PR tree-optimization/29484 */\n+\n+extern void abort (void);\n+\n+void *__attribute__((noinline))\n+baz (void **lab)\n+{\n+  asm volatile (\"\" : \"+r\" (lab));\n+  return *lab;\n+}\n+\n+static inline\n+int bar (void)\n+{\n+  static void *b[] = { &&addr };\n+  baz (b);\n+addr:\n+  return 17;\n+}\n+\n+int __attribute__((noinline))\n+f1 (void)\n+{\n+  return bar ();\n+}\n+\n+int __attribute__((noinline))\n+f2 (void)\n+{\n+  return bar ();\n+}\n+\n+int\n+main (void)\n+{\n+  if (f1 () != 17 || f1 () != 17 || f2 () != 17 || f2 () != 17)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "ebb413ae9bc760fd497d3f0592bf9b22e89c409e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2092ee7d08be8897d85309fbffc395602e67a3fd/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2092ee7d08be8897d85309fbffc395602e67a3fd", "patch": "@@ -1951,6 +1951,27 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n   return NULL_TREE;\n }\n \n+static tree\n+inline_forbidden_p_2 (tree *nodep, int *walk_subtrees,\n+\t\t      void *fnp)\n+{\n+  tree node = *nodep;\n+  tree fn = (tree) fnp;\n+\n+  if (TREE_CODE (node) == LABEL_DECL && DECL_CONTEXT (node) == fn)\n+    {\n+      inline_forbidden_reason\n+\t= G_(\"function %q+F can never be inlined \"\n+\t     \"because it saves address of local label in a static variable\");\n+      return node;\n+    }\n+\n+  if (TYPE_P (node))\n+    *walk_subtrees = 0;\n+\n+  return NULL_TREE;\n+}\n+\n /* Return subexpression representing possible alloca call, if any.  */\n static tree\n inline_forbidden_p (tree fndecl)\n@@ -1959,16 +1980,31 @@ inline_forbidden_p (tree fndecl)\n   block_stmt_iterator bsi;\n   basic_block bb;\n   tree ret = NULL_TREE;\n+  struct function *fun = DECL_STRUCT_FUNCTION (fndecl);\n+  tree step;\n \n-  FOR_EACH_BB_FN (bb, DECL_STRUCT_FUNCTION (fndecl))\n+  FOR_EACH_BB_FN (bb, fun)\n     for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n       {\n \tret = walk_tree_without_duplicates (bsi_stmt_ptr (bsi),\n-\t\t\t\t    inline_forbidden_p_1, fndecl);\n+\t\t\t\t\t    inline_forbidden_p_1, fndecl);\n \tif (ret)\n \t  goto egress;\n       }\n \n+  for (step = fun->unexpanded_var_list; step; step = TREE_CHAIN (step))\n+    {\n+      tree decl = TREE_VALUE (step);\n+      if (TREE_CODE (decl) == VAR_DECL\n+\t  && TREE_STATIC (decl)\n+\t  && !DECL_EXTERNAL (decl)\n+\t  && DECL_INITIAL (decl))\n+\tret = walk_tree_without_duplicates (&DECL_INITIAL (decl),\n+\t\t\t\t\t    inline_forbidden_p_2, fndecl);\n+\tif (ret)\n+\t  goto egress;\n+    }\n+\n egress:\n   input_location = saved_loc;\n   return ret;"}]}