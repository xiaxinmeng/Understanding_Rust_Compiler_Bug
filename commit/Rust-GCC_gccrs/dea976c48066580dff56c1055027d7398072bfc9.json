{"sha": "dea976c48066580dff56c1055027d7398072bfc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhOTc2YzQ4MDY2NTgwZGZmNTZjMTA1NTAyN2Q3Mzk4MDcyYmZjOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-25T15:42:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-25T15:42:00Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not promote the alignment if this doesn't prevent BLKmode access to the object.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Do not promote\n\tthe alignment if this doesn't prevent BLKmode access to the object.\n\nFrom-SVN: r179167", "tree": {"sha": "ded5b46f411df22844abab53b3af309efe8c7a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ded5b46f411df22844abab53b3af309efe8c7a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea976c48066580dff56c1055027d7398072bfc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea976c48066580dff56c1055027d7398072bfc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea976c48066580dff56c1055027d7398072bfc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea976c48066580dff56c1055027d7398072bfc9/comments", "author": null, "committer": null, "parents": [{"sha": "960dcaf528c16597fc89da7e0fa6ec75038a8e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960dcaf528c16597fc89da7e0fa6ec75038a8e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960dcaf528c16597fc89da7e0fa6ec75038a8e87"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "03adb2a348e2febbf125d816b70d52121380cd0a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dea976c48066580dff56c1055027d7398072bfc9", "patch": "@@ -1,3 +1,8 @@\n+2011-09-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Do not promote\n+\tthe alignment if this doesn't prevent BLKmode access to the object.\n+\n 2011-09-24  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* gcc-interface/Makefile.in (darwin): Do not issue the"}, {"sha": "d96f68383eb92c2862835108ac496ab7dcea5393", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=dea976c48066580dff56c1055027d7398072bfc9", "patch": "@@ -817,16 +817,30 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    && No (Address_Clause (gnat_entity))))\n \t    && TREE_CODE (TYPE_SIZE (gnu_type)) == INTEGER_CST)\n \t  {\n-\t    /* No point in jumping through all the hoops needed in order\n+\t    unsigned int size_cap, align_cap;\n+\n+\t    /* No point in promoting the alignment if this doesn't prevent\n+\t       BLKmode access to the object, in particular block copy, as\n+\t       this will for example disable the NRV optimization for it.\n+\t       No point in jumping through all the hoops needed in order\n \t       to support BIGGEST_ALIGNMENT if we don't really have to.\n \t       So we cap to the smallest alignment that corresponds to\n \t       a known efficient memory access pattern of the target.  */\n-\t    unsigned int align_cap = Is_Atomic (gnat_entity)\n-\t\t\t\t     ? BIGGEST_ALIGNMENT\n-\t\t\t\t     : get_mode_alignment (ptr_mode);\n+\t    if (Is_Atomic (gnat_entity))\n+\t      {\n+\t\tsize_cap = UINT_MAX;\n+\t\talign_cap = BIGGEST_ALIGNMENT;\n+\t      }\n+\t    else\n+\t      {\n+\t\tsize_cap = MAX_FIXED_MODE_SIZE;\n+\t\talign_cap = get_mode_alignment (ptr_mode);\n+\t      }\n \n \t    if (!host_integerp (TYPE_SIZE (gnu_type), 1)\n-\t\t|| compare_tree_int (TYPE_SIZE (gnu_type), align_cap) >= 0)\n+\t\t|| compare_tree_int (TYPE_SIZE (gnu_type), size_cap) > 0)\n+\t      align = 0;\n+\t    else if (compare_tree_int (TYPE_SIZE (gnu_type), align_cap) > 0)\n \t      align = align_cap;\n \t    else\n \t      align = ceil_alignment (tree_low_cst (TYPE_SIZE (gnu_type), 1));"}, {"sha": "7bd46ae17b53daefe3e22bb3755e2bb14e5e3f4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dea976c48066580dff56c1055027d7398072bfc9", "patch": "@@ -1,3 +1,9 @@\n+2011-09-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/frame_overflow.ads: New.\n+\t* gnat.dg/frame_overflow.adb: Adjust.\n+\t* gnat.dg/specs/addr1.ads: Likewise.\n+\n 2011-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/tree-ssa/restrict2.C: New test."}, {"sha": "1e7405fa5258c89751a79a3c959e9f7f22f65eb7", "filename": "gcc/testsuite/gnat.dg/frame_overflow.adb", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2Fgnat.dg%2Fframe_overflow.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2Fgnat.dg%2Fframe_overflow.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fframe_overflow.adb?ref=dea976c48066580dff56c1055027d7398072bfc9", "patch": "@@ -1,34 +1,25 @@\n -- { dg-do compile }\n \n-with System;\n+package body Frame_Overflow is\n \n-procedure frame_overflow is\n-\n-   type Bitpos_Range_T is range 1..2**(System.Word_Size-1)-1;\n-   type Bitmap_Array_T is array (Bitpos_Range_T) of Boolean;\n-\n-   type Bitmap_T is record\n-      Bits : Bitmap_Array_T := (others => False);\n-   end record;\n-\n-   function\n+   function -- { dg-error \"too large\" }\n      Set_In (Bitmap : Bitmap_T; Bitpos : Bitpos_Range_T)  return Bitmap_T\n    is\n-      Result: Bitmap_T := Bitmap; -- { dg-error \"Storage_Error\" }\n+      Result: Bitmap_T := Bitmap;\n    begin\n       Result.Bits (Bitpos) := True;\n       return Result;\n    end;\n \n-   function Negate (Bitmap : Bitmap_T) return Bitmap_T is\n-      Result: Bitmap_T; -- { dg-error \"Storage_Error\" }\n+   function -- { dg-error \"too large\" }\n+     Negate (Bitmap : Bitmap_T) return Bitmap_T\n+   is\n+      Result: Bitmap_T;\n    begin\n       for E in Bitpos_Range_T loop\n         Result.Bits (E) := not Bitmap.Bits (E);\n       end loop;\n       return Result;\n   end;\n \n-begin\n-   null;\n-end;\n+end Frame_Overflow;"}, {"sha": "898e37a67d1781f54273db0a4f32662b7a8c59e2", "filename": "gcc/testsuite/gnat.dg/frame_overflow.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2Fgnat.dg%2Fframe_overflow.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2Fgnat.dg%2Fframe_overflow.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fframe_overflow.ads?ref=dea976c48066580dff56c1055027d7398072bfc9", "patch": "@@ -0,0 +1,17 @@\n+with System;\n+\n+package Frame_Overflow is\n+\n+   type Bitpos_Range_T is range 1..2**(System.Word_Size-1)-1;\n+   type Bitmap_Array_T is array (Bitpos_Range_T) of Boolean;\n+\n+   type Bitmap_T is record\n+      Bits : Bitmap_Array_T := (others => False);\n+   end record;\n+\n+   function\n+     Set_In (Bitmap : Bitmap_T; Bitpos : Bitpos_Range_T)  return Bitmap_T;\n+\n+   function Negate (Bitmap : Bitmap_T) return Bitmap_T;\n+\n+end Frame_Overflow;"}, {"sha": "ed048f68ef3b59a5e71cf0d704c40dc3b10b9b3f", "filename": "gcc/testsuite/gnat.dg/specs/addr1.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faddr1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea976c48066580dff56c1055027d7398072bfc9/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faddr1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faddr1.ads?ref=dea976c48066580dff56c1055027d7398072bfc9", "patch": "@@ -15,7 +15,7 @@ package Addr1 is\n   end record;\n   for Rec2'Size use 64;\n \n-  A: Arr (1 .. 12);\n+  A: Arr (1 .. 4);\n \n   Obj1: Rec1;\n   for Obj1'Address use A'Address; -- { dg-bogus \"alignment\" }"}]}