{"sha": "ec5e777c3e15c4de3f0fbe329dceebd730f7b231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1ZTc3N2MzZTE1YzRkZTNmMGZiZTMyOWRjZWViZDczMGY3YjIzMQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-11T13:35:00Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-11T13:35:00Z"}, "message": "sse.md (V): Extended with wider modes.\n\n       * config/i386/sse.md (V): Extended with wider modes.\n        (VF2): Ditto.\n        (ssehalfvecmode): Ditto.\n        (i128): Ditto.\n        (ssepackfltmode): Ditto.\n        (avx_vec_concat<mode>): Ditto.\n        (V_256_512): New iterator.\n        (VF2_512_256): Ditto.\n        (si2dfmode): New attribute.\n        (si2dfmodelower): Ditto.\n        (sf2dfmode): Ditto.\n        (concat_tg_mode): Ditto.\n        (floatv4siv4df2): Changed to ...\n        (float<si2dfmodelower><mode>2): This.\n        (avx_cvtps2pd256): Changed to ...\n        (<sse2_avx_avx512f>_cvtps2pd<avxsizesuffix>): This.\n        (vec_pack_trunc_v4df): Changed to ...\n        (vec_pack_trunc_<mode>): This.\n        (avx_vpermil<mode>): Changed to ...\n        (<sse2_avx_avx512f>_vpermil<mode>): This.\n        (<fixsuffix>fix_truncv8dfv8si2): New.\n        (vec_pack_sfix_trunc_v8df): Ditto.\n        (avx512f_rndscale<mode>): Ditto.\n        (avx512f_roundpd512): Ditto.\n        (vec_pack_ufix_trunc_<mode>): Updated iterator.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203431", "tree": {"sha": "f790c57d48fc203ffa86619d4159fa9e821f9841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f790c57d48fc203ffa86619d4159fa9e821f9841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec5e777c3e15c4de3f0fbe329dceebd730f7b231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e777c3e15c4de3f0fbe329dceebd730f7b231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5e777c3e15c4de3f0fbe329dceebd730f7b231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e777c3e15c4de3f0fbe329dceebd730f7b231/comments", "author": null, "committer": null, "parents": [{"sha": "a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4"}], "stats": {"total": 211, "additions": 167, "deletions": 44}, "files": [{"sha": "45cd4efd6c6820c51c46dbc6c59ddc076222d1b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e777c3e15c4de3f0fbe329dceebd730f7b231/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e777c3e15c4de3f0fbe329dceebd730f7b231/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec5e777c3e15c4de3f0fbe329dceebd730f7b231", "patch": "@@ -1,3 +1,39 @@\n+2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (V): Extended with wider modes.\n+\t(VF2): Ditto.\n+\t(ssehalfvecmode): Ditto.\n+\t(i128): Ditto.\n+\t(ssepackfltmode): Ditto.\n+\t(avx_vec_concat<mode>): Ditto.\n+\t(V_256_512): New iterator.\n+\t(VF2_512_256): Ditto.\n+\t(si2dfmode): New attribute.\n+\t(si2dfmodelower): Ditto.\n+\t(sf2dfmode): Ditto.\n+\t(concat_tg_mode): Ditto.\n+\t(floatv4siv4df2): Changed to ...\n+\t(float<si2dfmodelower><mode>2): This.\n+\t(avx_cvtps2pd256): Changed to ...\n+\t(<sse2_avx_avx512f>_cvtps2pd<avxsizesuffix>): This.\n+\t(vec_pack_trunc_v4df): Changed to ...\n+\t(vec_pack_trunc_<mode>): This.\n+\t(avx_vpermil<mode>): Changed to ...\n+\t(<sse2_avx_avx512f>_vpermil<mode>): This.\n+\t(<fixsuffix>fix_truncv8dfv8si2): New.\n+\t(vec_pack_sfix_trunc_v8df): Ditto.\n+\t(avx512f_rndscale<mode>): Ditto.\n+\t(avx512f_roundpd512): Ditto.\n+\t(vec_pack_ufix_trunc_<mode>): Updated iterator.\n+\n 2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "cdb9ae09366dc8604d183f756dec905d1715d4bb", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 131, "deletions": 44, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e777c3e15c4de3f0fbe329dceebd730f7b231/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e777c3e15c4de3f0fbe329dceebd730f7b231/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ec5e777c3e15c4de3f0fbe329dceebd730f7b231", "patch": "@@ -109,10 +109,10 @@\n (define_mode_iterator V\n   [(V32QI \"TARGET_AVX\") V16QI\n    (V16HI \"TARGET_AVX\") V8HI\n-   (V8SI \"TARGET_AVX\") V4SI\n-   (V4DI \"TARGET_AVX\") V2DI\n-   (V8SF \"TARGET_AVX\") V4SF\n-   (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n+   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n+   (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX\") V2DI\n+   (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n+   (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")])\n \n ;; All 128bit vector modes\n (define_mode_iterator V_128\n@@ -122,6 +122,12 @@\n (define_mode_iterator V_256\n   [V32QI V16HI V8SI V4DI V8SF V4DF])\n \n+;; All 256bit and 512bit vector modes\n+(define_mode_iterator V_256_512\n+  [V32QI V16HI V8SI V4DI V8SF V4DF\n+   (V64QI \"TARGET_AVX512F\") (V32HI \"TARGET_AVX512F\") (V16SI \"TARGET_AVX512F\")\n+   (V8DI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")])\n+\n ;; All vector float modes\n (define_mode_iterator VF\n   [(V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n@@ -142,8 +148,15 @@\n \n ;; All DFmode vector float modes\n (define_mode_iterator VF2\n+  [(V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF])\n+\n+;; 128- and 256-bit DF vector modes\n+(define_mode_iterator VF2_128_256\n   [(V4DF \"TARGET_AVX\") V2DF])\n \n+(define_mode_iterator VF2_512_256\n+  [(V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\")])\n+\n ;; All 128bit vector float modes\n (define_mode_iterator VF_128\n   [V4SF (V2DF \"TARGET_SSE2\")])\n@@ -380,10 +393,12 @@\n \n ;; Mapping of vector modes to a vector mode of half size\n (define_mode_attr ssehalfvecmode\n-  [(V32QI \"V16QI\") (V16HI \"V8HI\") (V8SI \"V4SI\") (V4DI \"V2DI\")\n-   (V16QI  \"V8QI\") (V8HI  \"V4HI\") (V4SI \"V2SI\")\n-   (V8SF \"V4SF\") (V4DF \"V2DF\")\n-   (V4SF \"V2SF\")])\n+  [(V64QI \"V32QI\") (V32HI \"V16HI\") (V16SI \"V8SI\") (V8DI \"V4DI\")\n+   (V32QI \"V16QI\") (V16HI  \"V8HI\") (V8SI  \"V4SI\") (V4DI \"V2DI\")\n+   (V16QI  \"V8QI\") (V8HI   \"V4HI\") (V4SI  \"V2SI\")\n+   (V16SF \"V8SF\") (V8DF \"V4DF\")\n+   (V8SF  \"V4SF\") (V4DF \"V2DF\")\n+   (V4SF  \"V2SF\")])\n \n ;; Mapping of vector modes ti packed single mode of the same size\n (define_mode_attr ssePSmode\n@@ -474,9 +489,11 @@\n (define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n \n ;; i128 for integer vectors and TARGET_AVX2, f128 otherwise.\n+;; i64x4 or f64x4 for 512bit modes.\n (define_mode_attr i128\n-  [(V8SF \"f128\") (V4DF \"f128\") (V32QI \"%~128\") (V16HI \"%~128\")\n-   (V8SI \"%~128\") (V4DI \"%~128\")])\n+  [(V16SF \"f64x4\") (V8SF \"f128\") (V8DF \"f64x4\") (V4DF \"f128\")\n+   (V64QI \"i64x4\") (V32QI \"%~128\") (V32HI \"i64x4\") (V16HI \"%~128\")\n+   (V16SI \"i64x4\") (V8SI \"%~128\") (V8DI \"i64x4\") (V4DI \"%~128\")])\n \n ;; Mix-n-match\n (define_mode_iterator AVX256MODE2P [V8SI V8SF V4DF])\n@@ -3004,14 +3021,20 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"floatv4siv4df2\"\n-  [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n-\t(float:V4DF (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")))]\n+;; For float<si2dfmode><mode>2 insn pattern\n+(define_mode_attr si2dfmode\n+  [(V8DF \"V8SI\") (V4DF \"V4SI\")])\n+(define_mode_attr si2dfmodelower\n+  [(V8DF \"v8si\") (V4DF \"v4si\")])\n+\n+(define_insn \"float<si2dfmodelower><mode>2\"\n+  [(set (match_operand:VF2_512_256 0 \"register_operand\" \"=v\")\n+\t(float:VF2_512_256 (match_operand:<si2dfmode> 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX\"\n   \"vcvtdq2pd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V4DF\")])\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx_cvtdq2pd256_2\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n@@ -3101,6 +3124,15 @@\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"double\")])\n \n+(define_insn \"<fixsuffix>fix_truncv8dfv8si2\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n+\t(any_fix:V8SI (match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vcvttpd2<fixsuffix>dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"OI\")])\n+\n (define_insn \"fix_truncv4dfv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(fix:V4SI (match_operand:V4DF 1 \"nonimmediate_operand\" \"xm\")))]\n@@ -3243,15 +3275,19 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"avx_cvtps2pd256\"\n-  [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n-\t(float_extend:V4DF\n-\t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")))]\n+;; For <sse2_avx_avx512f>_cvtps2pd<avxsizesuffix> insn pattern\n+(define_mode_attr sf2dfmode\n+  [(V8DF \"V8SF\") (V4DF \"V4SF\")])\n+\n+(define_insn \"<sse2_avx_avx512f>_cvtps2pd<avxsizesuffix>\"\n+  [(set (match_operand:VF2_512_256 0 \"register_operand\" \"=v\")\n+\t(float_extend:VF2_512_256\n+\t  (match_operand:<sf2dfmode> 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX\"\n   \"vcvtps2pd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V4DF\")])\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*avx_cvtps2pd256_2\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n@@ -3542,21 +3578,21 @@\n   DONE;\n })\n \n-(define_expand \"vec_pack_trunc_v4df\"\n+(define_expand \"vec_pack_trunc_<mode>\"\n   [(set (match_dup 3)\n-\t(float_truncate:V4SF\n-\t  (match_operand:V4DF 1 \"nonimmediate_operand\")))\n+\t(float_truncate:<sf2dfmode>\n+\t  (match_operand:VF2_512_256 1 \"nonimmediate_operand\")))\n    (set (match_dup 4)\n-\t(float_truncate:V4SF\n-\t  (match_operand:V4DF 2 \"nonimmediate_operand\")))\n-   (set (match_operand:V8SF 0 \"register_operand\")\n-\t(vec_concat:V8SF\n+\t(float_truncate:<sf2dfmode>\n+\t  (match_operand:VF2_512_256 2 \"nonimmediate_operand\")))\n+   (set (match_operand:<ssePSmode> 0 \"register_operand\")\n+\t(vec_concat:<ssePSmode>\n \t  (match_dup 3)\n \t  (match_dup 4)))]\n   \"TARGET_AVX\"\n {\n-  operands[3] = gen_reg_rtx (V4SFmode);\n-  operands[4] = gen_reg_rtx (V4SFmode);\n+  operands[3] = gen_reg_rtx (<sf2dfmode>mode);\n+  operands[4] = gen_reg_rtx (<sf2dfmode>mode);\n })\n \n (define_expand \"vec_pack_trunc_v2df\"\n@@ -3587,6 +3623,23 @@\n   DONE;\n })\n \n+(define_expand \"vec_pack_sfix_trunc_v8df\"\n+  [(match_operand:V16SI 0 \"register_operand\")\n+   (match_operand:V8DF 1 \"nonimmediate_operand\")\n+   (match_operand:V8DF 2 \"nonimmediate_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  rtx r1, r2;\n+\n+  r1 = gen_reg_rtx (V8SImode);\n+  r2 = gen_reg_rtx (V8SImode);\n+\n+  emit_insn (gen_fix_truncv8dfv8si2 (r1, operands[1]));\n+  emit_insn (gen_fix_truncv8dfv8si2 (r2, operands[2]));\n+  emit_insn (gen_avx_vec_concatv16si (operands[0], r1, r2));\n+  DONE;\n+})\n+\n (define_expand \"vec_pack_sfix_trunc_v4df\"\n   [(match_operand:V8SI 0 \"register_operand\")\n    (match_operand:V4DF 1 \"nonimmediate_operand\")\n@@ -3636,12 +3689,12 @@\n })\n \n (define_mode_attr ssepackfltmode\n-  [(V4DF \"V8SI\") (V2DF \"V4SI\")])\n+  [(V8DF \"V16SI\") (V4DF \"V8SI\") (V2DF \"V4SI\")])\n \n (define_expand \"vec_pack_ufix_trunc_<mode>\"\n   [(match_operand:<ssepackfltmode> 0 \"register_operand\")\n-   (match_operand:VF2 1 \"register_operand\")\n-   (match_operand:VF2 2 \"register_operand\")]\n+   (match_operand:VF2_128_256 1 \"register_operand\")\n+   (match_operand:VF2_128_256 2 \"register_operand\")]\n   \"TARGET_SSE2\"\n {\n   rtx tmp[7];\n@@ -4949,6 +5002,18 @@\n   operands[1] = adjust_address (operands[1], DFmode, INTVAL (operands[2]) * 8);\n })\n \n+(define_insn \"avx512f_rndscale<mode>\"\n+  [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n+       (unspec:VF_512\n+         [(match_operand:VF_512 1 \"nonimmediate_operand\" \"vm\")\n+          (match_operand:SI 2 \"const_0_to_255_operand\")]\n+         UNSPEC_ROUND))]\n+  \"TARGET_AVX512F\"\n+  \"vrndscale<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_expand \"avx_shufpd256\"\n   [(match_operand:V4DF 0 \"register_operand\")\n    (match_operand:V4DF 1 \"register_operand\")\n@@ -9111,6 +9176,16 @@\n   DONE;\n })\n \n+(define_expand \"avx512f_roundpd512\"\n+  [(match_operand:V8DF 0 \"register_operand\")\n+   (match_operand:V8DF 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_0_to_15_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_rndscalev8df (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"<sse4_1>_round<ssemodesuffix>_vec_pack_sfix<avxsizesuffix>\"\n   [(match_operand:<ssepackfltmode> 0 \"register_operand\")\n    (match_operand:VF2 1 \"nonimmediate_operand\")\n@@ -10870,7 +10945,7 @@\n \t\t\t\telt * GET_MODE_SIZE (<ssescalarmode>mode));\n })\n \n-(define_expand \"avx_vpermil<mode>\"\n+(define_expand \"<sse2_avx_avx512f>_vpermil<mode>\"\n   [(set (match_operand:VF2 0 \"register_operand\")\n \t(vec_select:VF2\n \t  (match_operand:VF2 1 \"nonimmediate_operand\")\n@@ -10880,12 +10955,11 @@\n   int mask = INTVAL (operands[2]);\n   rtx perm[<ssescalarnum>];\n \n-  perm[0] = GEN_INT (mask & 1);\n-  perm[1] = GEN_INT ((mask >> 1) & 1);\n-  if (<MODE>mode == V4DFmode)\n+  int i;\n+  for (i = 0; i < <ssescalarnum>; i = i + 2)\n     {\n-      perm[2] = GEN_INT (((mask >> 2) & 1) + 2);\n-      perm[3] = GEN_INT (((mask >> 3) & 1) + 2);\n+      perm[i]     = GEN_INT (((mask >> i)       & 1) + i);\n+      perm[i + 1] = GEN_INT (((mask >> (i + 1)) & 1) + i);\n     }\n \n   operands[2]\n@@ -11352,26 +11426,39 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+;; For avx_vec_concat<mode> insn pattern\n+(define_mode_attr concat_tg_mode\n+  [(V32QI \"t\") (V16HI \"t\") (V8SI \"t\") (V4DI \"t\") (V8SF \"t\") (V4DF \"t\")\n+   (V64QI \"g\") (V32HI \"g\") (V16SI \"g\") (V8DI \"g\") (V16SF \"g\") (V8DF \"g\")])\n+\n (define_insn \"avx_vec_concat<mode>\"\n-  [(set (match_operand:V_256 0 \"register_operand\" \"=x,x\")\n-\t(vec_concat:V_256\n+  [(set (match_operand:V_256_512 0 \"register_operand\" \"=x,x\")\n+\t(vec_concat:V_256_512\n \t  (match_operand:<ssehalfvecmode> 1 \"register_operand\" \"x,x\")\n \t  (match_operand:<ssehalfvecmode> 2 \"vector_move_operand\" \"xm,C\")))]\n   \"TARGET_AVX\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"vinsert<i128>\\t{$0x1, %2, %t1, %0|%0, %t1, %2, 0x1}\";\n+      return \"vinsert<i128>\\t{$0x1, %2, %<concat_tg_mode>1, %0|%0, %<concat_tg_mode>1, %2, 0x1}\";\n     case 1:\n       switch (get_attr_mode (insn))\n \t{\n+\tcase MODE_V16SF:\n+\t  return \"vmovaps\\t{%1, %t0|%t0, %1}\";\n+\tcase MODE_V8DF:\n+\t  return \"vmovapd\\t{%1, %t0|%t0, %1}\";\n \tcase MODE_V8SF:\n \t  return \"vmovaps\\t{%1, %x0|%x0, %1}\";\n \tcase MODE_V4DF:\n \t  return \"vmovapd\\t{%1, %x0|%x0, %1}\";\n-\tdefault:\n+\tcase MODE_XI:\n+\t  return \"vmovdqa\\t{%1, %t0|%t0, %1}\";\n+\tcase MODE_OI:\n \t  return \"vmovdqa\\t{%1, %x0|%x0, %1}\";\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n     default:\n       gcc_unreachable ();\n@@ -11380,7 +11467,7 @@\n   [(set_attr \"type\" \"sselog,ssemov\")\n    (set_attr \"prefix_extra\" \"1,*\")\n    (set_attr \"length_immediate\" \"1,*\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vcvtph2ps\""}]}