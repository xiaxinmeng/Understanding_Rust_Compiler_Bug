{"sha": "57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjNTc4YTZiZmVkNWZmYTRkYTE2OTg0YjlmOTJhNDFkNWJkNjhjYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-04T16:21:29Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-04T16:21:29Z"}, "message": "cpphash.h: #define __extension__ away if GCC_VERSION < 2095 (overly conservative).\n\n\t* cpphash.h: #define __extension__ away if GCC_VERSION < 2095\n\t(overly conservative).  Change extern inline wrappers to\n\tstatic inline, define them always, use PARAMS properly.\n\t* cpplex.c (_cpp_get_directive_token): Don't issue pedantic\n\twhitespace warnings for \\f and \\v at the beginning of a line.\n\nFrom-SVN: r33674", "tree": {"sha": "54a0badd8c16d499639fe79565ba47c91ae1a822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a0badd8c16d499639fe79565ba47c91ae1a822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb/comments", "author": null, "committer": null, "parents": [{"sha": "4e95db71c294f64af199bc6feaca0e3a1923106e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e95db71c294f64af199bc6feaca0e3a1923106e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e95db71c294f64af199bc6feaca0e3a1923106e"}], "stats": {"total": 91, "additions": 60, "deletions": 31}, "files": [{"sha": "0fcc6a56f31d4d369dd06050558335b56b19c6ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "patch": "@@ -1,3 +1,11 @@\n+2000-05-04  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpphash.h: #define __extension__ away if GCC_VERSION < 2095\n+\t(overly conservative).  Change extern inline wrappers to\n+\tstatic inline, define them always, use PARAMS properly.\n+\t* cpplex.c (_cpp_get_directive_token): Don't issue pedantic\n+\twhitespace warnings for \\f and \\v at the beginning of a line.\n+\n Thu May  4 10:03:50 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* haifa-sched.c (schedule_insns): Free the flow edge list when it"}, {"sha": "16de5bb1259fef56dced8202fe5ed60a4411318e", "filename": "gcc/cpphash.h", "status": "modified", "additions": 47, "deletions": 30, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "patch": "@@ -25,6 +25,13 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n typedef unsigned char U_CHAR;\n #define U (const U_CHAR *)  /* Intended use: U\"string\" */\n \n+/* gcc 2.7.2 can't handle __extension__ const char array[] = { ... }.\n+   I don't know when this was added - be conservative, assume it only\n+   works in 2.95.  */\n+#if GCC_VERSION < 2095\n+#define __extension__\n+#endif\n+\n /* The structure of a node in the hash table.  The hash table\n    has entries for all tokens defined by #define commands (type T_MACRO),\n    plus some special tokens like __LINE__ (these each have their own\n@@ -257,41 +264,51 @@ extern int _cpp_handle_directive\tPARAMS ((cpp_reader *));\n extern void _cpp_unwind_if_stack\tPARAMS ((cpp_reader *, cpp_buffer *));\n extern void _cpp_check_directive        PARAMS ((cpp_toklist *, cpp_token *));\n \n-/* These are inline functions (if __GNUC__) instead of macros so we\n-   can get type checking.  */\n-#if GCC_VERSION >= 2007 && defined __OPTIMIZE__\n-extern inline int ustrcmp (const U_CHAR *, const U_CHAR *);\n-extern inline int ustrncmp (const U_CHAR *, const U_CHAR *, size_t);\n-extern inline size_t ustrlen (const U_CHAR *);\n-extern inline U_CHAR *uxstrdup (const U_CHAR *);\n-extern inline U_CHAR *ustrchr (const U_CHAR *, int);\n+/* These are inline functions instead of macros so we can get type\n+   checking.  */\n \n-extern inline int\n-ustrcmp (const U_CHAR *s1, const U_CHAR *s2)\n-{ return strcmp ((const char *)s1, (const char *)s2); }\n+static inline int ustrcmp\tPARAMS ((const U_CHAR *, const U_CHAR *));\n+static inline int ustrncmp\tPARAMS ((const U_CHAR *, const U_CHAR *,\n+\t\t\t\t\t size_t));\n+static inline size_t ustrlen\tPARAMS ((const U_CHAR *));\n+static inline U_CHAR *uxstrdup\tPARAMS ((const U_CHAR *));\n+static inline U_CHAR *ustrchr\tPARAMS ((const U_CHAR *, int));\n \n-extern inline int\n-ustrncmp (const U_CHAR *s1, const U_CHAR *s2, size_t n)\n-{ return strncmp ((const char *)s1, (const char *)s2, n); }\n+static inline int\n+ustrcmp (s1, s2)\n+     const U_CHAR *s1, *s2;\n+{\n+  return strcmp ((const char *)s1, (const char *)s2);\n+}\n \n-extern inline size_t\n-ustrlen (const U_CHAR *s1)\n-{ return strlen ((const char *)s1); }\n+static inline int\n+ustrncmp (s1, s2, n)\n+     const U_CHAR *s1, *s2;\n+     size_t n;\n+{\n+  return strncmp ((const char *)s1, (const char *)s2, n);\n+}\n \n-extern inline U_CHAR *\n-uxstrdup (const U_CHAR *s1)\n-{ return (U_CHAR *) xstrdup ((const char *)s1); }\n+static inline size_t\n+ustrlen (s1)\n+     const U_CHAR *s1;\n+{\n+  return strlen ((const char *)s1);\n+}\n \n-extern inline U_CHAR *\n-ustrchr (const U_CHAR *s1, int c)\n-{ return (U_CHAR *) strchr ((const char *)s1, c); }\n+static inline U_CHAR *\n+uxstrdup (s1)\n+     const U_CHAR *s1;\n+{\n+  return (U_CHAR *) xstrdup ((const char *)s1);\n+}\n \n-#else\n-#define ustrcmp(s1_, s2_) strcmp((const char *)s1_, (const char *)s2_)\n-#define ustrncmp(s1_, s2_, n_) strncmp((const char *)s1_, (const char *)s2_, n_)\n-#define ustrlen(s1_) strlen((const char *)s1_)\n-#define uxstrdup(s1_) (U_CHAR *) xstrdup((const char *)s1_)\n-#define ustrchr(s1_, c_) (U_CHAR *) strchr((const char *)s1_, c_)\n-#endif\n+static inline U_CHAR *\n+ustrchr (s1, c)\n+     const U_CHAR *s1;\n+     int c;\n+{\n+  return (U_CHAR *) strchr ((const char *)s1, c);\n+}\n \n #endif"}, {"sha": "78df852670dd4ae62b45af674f7323f6f8658b8a", "filename": "gcc/cpplex.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c578a6bfed5ffa4da16984b9f92a41d5bd68cb/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=57c578a6bfed5ffa4da16984b9f92a41d5bd68cb", "patch": "@@ -1641,8 +1641,10 @@ _cpp_get_directive_token (pfile)\n {\n   long old_written;\n   enum cpp_ttype token;\n+  int at_bol;\n \n  get_next:\n+  at_bol = (CPP_BUFFER (pfile)->cur == CPP_BUFFER (pfile)->line_base);\n   old_written = CPP_WRITTEN (pfile);\n   token = _cpp_lex_token (pfile);\n   switch (token)\n@@ -1657,7 +1659,9 @@ _cpp_get_directive_token (pfile)\n       return CPP_VSPACE;\n \n     case CPP_HSPACE:\n-      if (CPP_PEDANTIC (pfile))\n+      /* The purpose of this rather strange check is to prevent pedantic\n+\t warnings for ^L in an #ifdefed out block.  */\n+      if (CPP_PEDANTIC (pfile) && ! at_bol)\n \tpedantic_whitespace (pfile, pfile->token_buffer + old_written,\n \t\t\t     CPP_WRITTEN (pfile) - old_written);\n       CPP_SET_WRITTEN (pfile, old_written);"}]}