{"sha": "6245441e124846d0c3551f312d2feef598fe251c", "node_id": "C_kwDOANBUbNoAKDYyNDU0NDFlMTI0ODQ2ZDBjMzU1MWYzMTJkMmZlZWY1OThmZTI1MWM", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-17T16:00:12Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-17T16:00:12Z"}, "message": "ii386: Generate QImode binary ops with high-part input register [PR108831]\n\nFollowing testcase:\n\n--cut here--\nstruct S\n{\n  unsigned char pad1;\n  unsigned char val;\n  unsigned short pad2;\n};\n\nunsigned char\ntest_add (unsigned char a, struct S b)\n{\n  a += b.val;\n\n  return a;\n}\n--cut here--\n\nshould be compiled to something like:\n\n        addb %dh, %al\n\nbut is currently compiled to:\n\n        movzbl  %dh, %edx\n        addl    %edx, %eax\n\nThe patch implements insn patterns that model QImode binary ops with\nhigh-part QImode input register.  These ops can not be encoded with\nREX prefix, so only Q registers and constant memory output operands\nare allowed on x86_64 targets.\n\n2023-02-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/108831\n\t* config/i386/predicates.md\n\t(nonimm_x64constmem_operand): New predicate.\n\t* config/i386/i386.md (*addqi_ext<mode>_0): New insn pattern.\n\t(*subqi_ext<mode>_0): Ditto.\n\t(*andqi_ext<mode>_0): Ditto.\n\t(*<any_or:code>qi_ext<mode>_0): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/108831\n\t* gcc.target/i386/pr108831-1.c: New test.\n\t* gcc.target/i386/pr108831-2.c: Ditto.", "tree": {"sha": "dfe7182168c6286506401f44e0c29a32364c7ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfe7182168c6286506401f44e0c29a32364c7ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6245441e124846d0c3551f312d2feef598fe251c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6245441e124846d0c3551f312d2feef598fe251c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6245441e124846d0c3551f312d2feef598fe251c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6245441e124846d0c3551f312d2feef598fe251c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ac3ebed5ffbac0d81c5a1d0cb1e345cfad202a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac3ebed5ffbac0d81c5a1d0cb1e345cfad202a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac3ebed5ffbac0d81c5a1d0cb1e345cfad202a8"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "55042e7ae15b635c6d7ce82c1c1d024780ce468c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6245441e124846d0c3551f312d2feef598fe251c", "patch": "@@ -6641,6 +6641,22 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*addqi_ext<mode>_0\"\n+  [(set (match_operand:QI 0 \"nonimm_x64constmem_operand\" \"=QBc,m\")\n+\t(plus:QI\n+\t  (subreg:QI\n+\t    (zero_extract:SWI248\n+\t      (match_operand 2 \"int248_register_operand\" \"Q,Q\")\n+\t      (const_int 8)\n+\t      (const_int 8)) 0)\n+\t  (match_operand:QI 1 \"nonimm_x64constmem_operand\" \"0,0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"add{b}\\t{%h2, %0|%0, %h2}\"\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_expand \"addqi_ext_1\"\n   [(parallel\n      [(set (zero_extract:HI (match_operand:HI 0 \"register_operand\")\n@@ -7265,6 +7281,22 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*subqi_ext<mode>_0\"\n+  [(set (match_operand:QI 0 \"nonimm_x64constmem_operand\" \"=QBc,m\")\n+\t(minus:QI\n+\t  (match_operand:QI 1 \"nonimm_x64constmem_operand\" \"0,0\")\n+\t  (subreg:QI\n+\t    (zero_extract:SWI248\n+\t      (match_operand 2 \"int248_register_operand\" \"Q,Q\")\n+\t      (const_int 8)\n+\t      (const_int 8)) 0)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"sub{b}\\t{%h2, %0|%0, %h2}\"\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*subqi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n \t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n@@ -10528,6 +10560,22 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*andqi_ext<mode>_0\"\n+  [(set (match_operand:QI 0 \"nonimm_x64constmem_operand\" \"=QBc,m\")\n+\t(and:QI\n+\t  (subreg:QI\n+\t    (zero_extract:SWI248\n+\t      (match_operand 2 \"int248_register_operand\" \"Q,Q\")\n+\t      (const_int 8)\n+\t      (const_int 8)) 0)\n+\t  (match_operand:QI 1 \"nonimm_x64constmem_operand\" \"0,0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"and{b}\\t{%h2, %0|%0, %h2}\"\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_expand \"andqi_ext_1\"\n   [(parallel\n      [(set (zero_extract:HI (match_operand:HI 0 \"register_operand\")\n@@ -11269,6 +11317,22 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*<code>qi_ext<mode>_0\"\n+  [(set (match_operand:QI 0 \"nonimm_x64constmem_operand\" \"=QBc,m\")\n+\t(any_or:QI\n+\t  (subreg:QI\n+\t    (zero_extract:SWI248\n+\t      (match_operand 2 \"int248_register_operand\" \"Q,Q\")\n+\t      (const_int 8)\n+\t      (const_int 8)) 0)\n+\t  (match_operand:QI 1 \"nonimm_x64constmem_operand\" \"0,0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"<logic>{b}\\t{%h2, %0|%0, %h2}\"\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*<code>qi_ext<mode>_1\"\n   [(set (zero_extract:SWI248\n \t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")"}, {"sha": "7b3db0cc851a8a96736c4556c2af2f403e3d910b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=6245441e124846d0c3551f312d2feef598fe251c", "patch": "@@ -109,6 +109,13 @@\n \t    (match_test \"GET_MODE (op) == HImode\")\n \t    (match_test \"GET_MODE (op) == QImode\"))))\n \n+;; Match nonimmediate operand, but exclude non-constant addresses for x86_64.\n+(define_predicate \"nonimm_x64constmem_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_operand 0 \"memory_operand\")\n+\t    (ior (not (match_test \"TARGET_64BIT\"))\n+\t\t (match_test \"constant_address_p (XEXP (op, 0))\")))))\n+\n ;; Match register operands, but include memory operands for TARGET_SSE_MATH.\n (define_predicate \"register_ssemem_operand\"\n   (if_then_else"}, {"sha": "3499b187cbeb1c3bbb77ffcb22abcd01b4f7017d", "filename": "gcc/testsuite/gcc.target/i386/pr108831-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108831-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108831-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108831-1.c?ref=6245441e124846d0c3551f312d2feef598fe251c", "patch": "@@ -0,0 +1,63 @@\n+/* PR target/108831 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-additional-options \"-mregparm=3\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+/* { dg-final { scan-assembler-not \"movb\" } } */\n+\n+struct S\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+unsigned char\n+test_and (unsigned char a, struct S b)\n+{\n+  a &= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\" } } */\n+\n+unsigned char\n+test_or (unsigned char a, struct S b)\n+{\n+  a |= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\" } } */\n+\n+unsigned char\n+test_xor (unsigned char a, struct S b)\n+{\n+  a ^= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\" } } */\n+\n+unsigned char\n+test_add (unsigned char a, struct S b)\n+{\n+  a += b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\" } } */\n+\n+unsigned char\n+test_sub (unsigned char a, struct S b)\n+{\n+  a -= b.val;\n+\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]subb\" } } */"}, {"sha": "a415391f69d2a81dd631f7968fa622f7a2ab9179", "filename": "gcc/testsuite/gcc.target/i386/pr108831-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108831-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6245441e124846d0c3551f312d2feef598fe251c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108831-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr108831-2.c?ref=6245441e124846d0c3551f312d2feef598fe251c", "patch": "@@ -0,0 +1,55 @@\n+/* PR target/108831 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-additional-options \"-mregparm=3\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"movzbl\" } } */\n+/* { dg-final { scan-assembler-not \"movb\" } } */\n+\n+struct S\n+{\n+  unsigned char pad1;\n+  unsigned char val;\n+  unsigned short pad2;\n+};\n+\n+unsigned char a;\n+\n+void\n+test_and (struct S b)\n+{\n+  a &= b.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]andb\" } } */\n+\n+void\n+test_or (struct S b)\n+{\n+  a |= b.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]orb\" } } */\n+\n+void\n+test_xor (struct S b)\n+{\n+  a ^= b.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xorb\" } } */\n+\n+void\n+test_add (struct S b)\n+{\n+  a += b.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]addb\" } } */\n+\n+void\n+test_sub (struct S b)\n+{\n+  a -= b.val;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]subb\" } } */"}]}