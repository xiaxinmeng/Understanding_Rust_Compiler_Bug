{"sha": "0a9c0d4ae5519c404682425da9522c46c38712fd", "node_id": "C_kwDOANBUbNoAKDBhOWMwZDRhZTU1MTljNDA0NjgyNDI1ZGE5NTIyYzQ2YzM4NzEyZmQ", "commit": {"author": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-09-04T19:07:14Z"}, "committer": {"name": "Tim Lange", "email": "mail@tim-lange.me", "date": "2022-09-05T14:22:57Z"}, "message": "analyzer: strcpy semantics\n\nThis patch adds modelling for the semantics of strcpy in the simple case\nwhere the analyzer is able to infer a concrete string size.\n\nRegrtested on Linux x86_64.\n\n2022-09-04  Tim Lange  <mail@tim-lange.me>\n\ngcc/analyzer/ChangeLog:\n\n\t* region-model-impl-calls.cc (region_model::impl_call_strcpy):\n\tHandle the constant string case.\n\t* region-model.cc (region_model::get_string_size):\n\tNew function to get the string size from a region or svalue.\n\t* region-model.h (class region_model): Add get_string_size.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/analyzer/out-of-bounds-4.c: New test.\n\t* gcc.dg/analyzer/strcpy-3.c: New test.", "tree": {"sha": "86e3c426e4cdc483f544792e7ba90ee7a60144de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e3c426e4cdc483f544792e7ba90ee7a60144de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a9c0d4ae5519c404682425da9522c46c38712fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9c0d4ae5519c404682425da9522c46c38712fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9c0d4ae5519c404682425da9522c46c38712fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9c0d4ae5519c404682425da9522c46c38712fd/comments", "author": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timll", "id": 10032775, "node_id": "MDQ6VXNlcjEwMDMyNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/10032775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timll", "html_url": "https://github.com/timll", "followers_url": "https://api.github.com/users/timll/followers", "following_url": "https://api.github.com/users/timll/following{/other_user}", "gists_url": "https://api.github.com/users/timll/gists{/gist_id}", "starred_url": "https://api.github.com/users/timll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timll/subscriptions", "organizations_url": "https://api.github.com/users/timll/orgs", "repos_url": "https://api.github.com/users/timll/repos", "events_url": "https://api.github.com/users/timll/events{/privacy}", "received_events_url": "https://api.github.com/users/timll/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc7e31c41a555c53d6f0a88ecd71bbf09b9dd8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc7e31c41a555c53d6f0a88ecd71bbf09b9dd8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc7e31c41a555c53d6f0a88ecd71bbf09b9dd8d"}], "stats": {"total": 136, "additions": 133, "deletions": 3}, "files": [{"sha": "3790eaf2d79dbaccc4ee2920a29cca6ecc2c88a5", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=0a9c0d4ae5519c404682425da9522c46c38712fd", "patch": "@@ -1019,13 +1019,23 @@ region_model::impl_call_strcpy (const call_details &cd)\n   const svalue *dest_sval = cd.get_arg_svalue (0);\n   const region *dest_reg = deref_rvalue (dest_sval, cd.get_arg_tree (0),\n \t\t\t\t\t cd.get_ctxt ());\n+  const svalue *src_sval = cd.get_arg_svalue (1);\n+  const region *src_reg = deref_rvalue (src_sval, cd.get_arg_tree (1),\n+\t\t\t\t\tcd.get_ctxt ());\n+  const svalue *src_contents_sval = get_store_value (src_reg,\n+\t\t\t\t\t\t     cd.get_ctxt ());\n \n   cd.maybe_set_lhs (dest_sval);\n \n-  check_region_for_write (dest_reg, cd.get_ctxt ());\n+  /* Try to get the string size if SRC_REG is a string_region.  */\n+  const svalue *copied_bytes_sval = get_string_size (src_reg);\n+  /* Otherwise, check if the contents of SRC_REG is a string.  */\n+  if (copied_bytes_sval->get_kind () == SK_UNKNOWN)\n+    copied_bytes_sval = get_string_size (src_contents_sval);\n \n-  /* For now, just mark region's contents as unknown.  */\n-  mark_region_as_unknown (dest_reg, cd.get_uncertainty ());\n+  const region *sized_dest_reg\n+    = m_mgr->get_sized_region (dest_reg, NULL_TREE, copied_bytes_sval);\n+  set_value (sized_dest_reg, src_contents_sval, cd.get_ctxt ());\n }\n \n /* Handle the on_call_pre part of \"strlen\".  */"}, {"sha": "e84087abc1f7be23cbd5d27ef5620a7ef4570749", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=0a9c0d4ae5519c404682425da9522c46c38712fd", "patch": "@@ -3218,6 +3218,35 @@ region_model::get_capacity (const region *reg) const\n   return m_mgr->get_or_create_unknown_svalue (sizetype);\n }\n \n+/* Return the string size, including the 0-terminator, if SVAL is a\n+   constant_svalue holding a string.  Otherwise, return an unknown_svalue.  */\n+\n+const svalue *\n+region_model::get_string_size (const svalue *sval) const\n+{\n+  tree cst = sval->maybe_get_constant ();\n+  if (!cst || TREE_CODE (cst) != STRING_CST)\n+    return m_mgr->get_or_create_unknown_svalue (size_type_node);\n+\n+  tree out = build_int_cst (size_type_node, TREE_STRING_LENGTH (cst));\n+  return m_mgr->get_or_create_constant_svalue (out);\n+}\n+\n+/* Return the string size, including the 0-terminator, if REG is a\n+   string_region.  Otherwise, return an unknown_svalue.  */\n+\n+const svalue *\n+region_model::get_string_size (const region *reg) const\n+{\n+  const string_region *str_reg = dyn_cast <const string_region *> (reg);\n+  if (!str_reg)\n+    return m_mgr->get_or_create_unknown_svalue (size_type_node);\n+\n+  tree cst = str_reg->get_string_cst ();\n+  tree out = build_int_cst (size_type_node, TREE_STRING_LENGTH (cst));\n+  return m_mgr->get_or_create_constant_svalue (out);\n+}\n+\n /* If CTXT is non-NULL, use it to warn about any problems accessing REG,\n    using DIR to determine if this access is a read or write.  */\n "}, {"sha": "a1f2165e145bb9552da80b5adccd252ef1fb5e4f", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=0a9c0d4ae5519c404682425da9522c46c38712fd", "patch": "@@ -793,6 +793,9 @@ class region_model\n \n   const svalue *get_capacity (const region *reg) const;\n \n+  const svalue *get_string_size (const svalue *sval) const;\n+  const svalue *get_string_size (const region *reg) const;\n+\n   /* Implemented in sm-malloc.cc  */\n   void on_realloc_with_move (const call_details &cd,\n \t\t\t     const svalue *old_ptr_sval,"}, {"sha": "46f600de6582ca8ed7c195b47716ce20d2c8ecbe", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-4.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-4.c?ref=0a9c0d4ae5519c404682425da9522c46c38712fd", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-additional-options \"-Wno-stringop-overflow -Wno-stringop-truncation\" } */\n+#include <string.h>\n+\n+/* Wanalyzer-out-of-bounds tests for strpy-related overflows.\n+  \n+   The intra-procedural tests are all caught by Wstringop-overflow.\n+   The inter-procedural out-of-bounds are only found by the analyzer.  */\n+\n+void test1 (void)\n+{\n+  char dst[5];\n+  strcpy (dst, \"Hello\"); /* { dg-line test1 } */\n+\n+  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test1 } */\n+  /* { dg-message \"dst\" \"note\" { target *-*-* } test1 } */\n+}\n+\n+void test2 (void)\n+{\n+  char dst[6];\n+  strcpy (dst, \"Hello\");\n+}\n+\n+void test3 (void)\n+{\n+  char *src = \"Hello\";\n+  char dst[5];\n+  strcpy (dst, src); /* { dg-line test3 } */\n+\n+  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test3 } */\n+  /* { dg-message \"dst\" \"note\" { target *-*-* } test3 } */\n+}\n+\n+void test4 (void)\n+{\n+  char *src = \"Hello\";\n+  char dst[6];\n+  strcpy (dst, src);\n+}\n+\n+const char *return_hello (void)\n+{\n+  return \"hello\";\n+}\n+\n+void test5 (void)\n+{\n+  const char *str = return_hello ();\n+  if (!str)\n+    return;\n+  char dst[5];\n+  strcpy (dst, str); /* { dg-line test5 } */\n+\n+  /* { dg-warning \"overflow\" \"warning\" { target *-*-* } test5 } */\n+  /* { dg-message \"dst\" \"note\" { target *-*-* } test5 } */\n+}\n+\n+void test6 (void)\n+{\n+  const char *str = return_hello ();\n+  if (!str)\n+    return;\n+  char dst[6];\n+  strcpy (dst, str);\n+}"}, {"sha": "a38f9a7641fed657aff4405e508a03e3ef8324a6", "filename": "gcc/testsuite/gcc.dg/analyzer/strcpy-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9c0d4ae5519c404682425da9522c46c38712fd/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-3.c?ref=0a9c0d4ae5519c404682425da9522c46c38712fd", "patch": "@@ -0,0 +1,23 @@\n+#include <string.h>\n+#include \"analyzer-decls.h\"\n+\n+void test_1 (void)\n+{\n+  char str[] = \"Hello\";\n+  char buf[6];\n+  char *result = strcpy (buf, str);\n+  __analyzer_describe (1, result); /* { dg-warning \"region_svalue.*?'buf'\" } */\n+  __analyzer_eval (result == buf); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (buf[0] == 'H'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (buf[1] == 'e'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (buf[2] == 'l'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (buf[3] == 'l'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (buf[4] == 'o'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (buf[5] == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (result[0] == 'H'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (result[1] == 'e'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (result[2] == 'l'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (result[3] == 'l'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (result[4] == 'o'); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (result[5] == 0); /* { dg-warning \"TRUE\" } */\n+}"}]}