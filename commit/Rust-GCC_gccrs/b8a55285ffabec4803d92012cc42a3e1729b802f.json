{"sha": "b8a55285ffabec4803d92012cc42a3e1729b802f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhNTUyODVmZmFiZWM0ODAzZDkyMDEyY2M0MmEzZTE3MjliODAyZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-11-08T04:42:36Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-11-08T04:42:36Z"}, "message": "re PR target/18269 (-m64 -fPIC does not work on ppc-darwin)\n\n2004-11-07  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR target/18269\n        * config/darwin.c (machopic_indirect_data_reference):\n        Call gen_macho_high and gen_macho_low instead of\n        checking the mode and calling gen_macho_high_di directly.\n        * config/rs6000/rs6000.c (rs6000_emit_move): Likewise.\n        * config/rs6000/rs6000.md: Move most of TARGET_MACHO expand/insns\n        to darwin.md.\n        (movdf_low, movsf_low, movsf_low_st, movsi_low, macho_correct_pic,\n        load_macho_picbase, macho_low, macho_high): Removed.\n        (builtin_setjmp_receiver): Call gen_macho_high and\n        gen_macho_low instead of checking the mode and calling\n        gen_macho_high_di directly.\n        * config/rs6000/darwin.md (load_macho_picbase_di): Use the MD constant.\n        (movdf_low_si, movsf_low_si, movsf_low_st_si, movsi_low_st):\n        Moved from rs6000.md.\n        (macho_high): New expander.\n        (macho_high_si): Renamed version of macho_high from rs6000.md.\n        (macho_low): New expander.\n        (macho_low_si): Renamed version of macho_low from rs6000.md.\n        (load_macho_picbase): New expander.\n        (load_macho_picbase_si): Renamed version of load_macho_picbase\n        from rs6000.md.\n        (macho_correct_pic): New expander.\n        (macho_correct_pic_si): Renamed version of macho_correct_pic\n        from rs6000.md.\n\nFrom-SVN: r90257", "tree": {"sha": "6c021f55a1153c8f7ced79bcd0b7d343f6b17bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c021f55a1153c8f7ced79bcd0b7d343f6b17bba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a55285ffabec4803d92012cc42a3e1729b802f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a55285ffabec4803d92012cc42a3e1729b802f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a55285ffabec4803d92012cc42a3e1729b802f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a55285ffabec4803d92012cc42a3e1729b802f/comments", "author": null, "committer": null, "parents": [{"sha": "79fd859270b76814800f67c8aea0345356efd8d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fd859270b76814800f67c8aea0345356efd8d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79fd859270b76814800f67c8aea0345356efd8d8"}], "stats": {"total": 355, "additions": 214, "deletions": 141}, "files": [{"sha": "a4965d929fca0608141ae02aec155ce2080c0349", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8a55285ffabec4803d92012cc42a3e1729b802f", "patch": "@@ -1,3 +1,31 @@\n+2004-11-07  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR target/18269\n+\t* config/darwin.c (machopic_indirect_data_reference):\n+\tCall gen_macho_high and gen_macho_low instead of\n+\tchecking the mode and calling gen_macho_high_di directly.\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Likewise.\n+\t* config/rs6000/rs6000.md: Move most of TARGET_MACHO expand/insns\n+\tto darwin.md.\n+\t(movdf_low, movsf_low, movsf_low_st, movsi_low, macho_correct_pic,\n+\tload_macho_picbase, macho_low, macho_high): Removed.\n+\t(builtin_setjmp_receiver): Call gen_macho_high and\n+\tgen_macho_low instead of checking the mode and calling\n+\tgen_macho_high_di directly.\n+\t* config/rs6000/darwin.md (load_macho_picbase_di): Use the MD constant.\n+\t(movdf_low_si, movsf_low_si, movsf_low_st_si, movsi_low_st):\n+\tMoved from rs6000.md.\n+\t(macho_high): New expander.\n+\t(macho_high_si): Renamed version of macho_high from rs6000.md.\n+\t(macho_low): New expander.\n+\t(macho_low_si): Renamed version of macho_low from rs6000.md.\n+\t(load_macho_picbase): New expander.\n+\t(load_macho_picbase_si): Renamed version of load_macho_picbase\n+\tfrom rs6000.md.\n+\t(macho_correct_pic): New expander.\n+\t(macho_correct_pic_si): Renamed version of macho_correct_pic\n+\tfrom rs6000.md.\n+\n 2004-11-07  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (finish_struct): Use complete sentences for diagnostic"}, {"sha": "e01b383a4f211aae34dda0b6fc34b9aba75cf32f", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=b8a55285ffabec4803d92012cc42a3e1729b802f", "patch": "@@ -412,12 +412,8 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n       if (defined && MACHO_DYNAMIC_NO_PIC_P)\n \t{\n #if defined (TARGET_TOC)\n- \t  emit_insn (GET_MODE (orig) == DImode\n-\t\t     ? gen_macho_high_di (reg, orig)\n-\t\t     : gen_macho_high (reg, orig));\n- \t  emit_insn (GET_MODE (orig) == DImode\n-\t\t     ? gen_macho_low_di (reg, reg, orig)\n-\t\t     : gen_macho_low (reg, reg, orig));\n+ \t  emit_insn (gen_macho_high (reg, orig));\n+ \t  emit_insn (gen_macho_low (reg, reg, orig));\n #else\n \t   /* some other cpu -- writeme!  */\n \t   abort ();\n@@ -613,9 +609,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t      rtx asym = XEXP (orig, 0);\n \t      rtx mem;\n \n-\t      emit_insn (mode == DImode\n-\t\t\t ? gen_macho_high_di (temp_reg, asym)\n-\t\t\t : gen_macho_high (temp_reg, asym));\n+\t      emit_insn (gen_macho_high (temp_reg, asym));\n \t      mem = gen_const_mem (GET_MODE (orig),\n \t\t\t\t   gen_rtx_LO_SUM (Pmode, temp_reg, asym));\n \t      emit_insn (gen_rtx_SET (VOIDmode, reg, mem));"}, {"sha": "d77555d899487c2da5dbfde93ab1754a3a55bab1", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 179, "deletions": 1, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=b8a55285ffabec4803d92012cc42a3e1729b802f", "patch": "@@ -27,6 +27,49 @@ Boston, MA 02111-1307, USA.  */\n   \"{cau|addis} %0,%1,ha16(%2)\"\n   [(set_attr \"length\" \"4\")])\n \n+(define_insn \"movdf_low_si\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \\\"lfd %0,lo16(%2)(%1)\\\";\n+      case 1:\n+\t{\n+\t  rtx operands2[4];\n+\t  operands2[0] = operands[0];\n+\t  operands2[1] = operands[1];\n+\t  operands2[2] = operands[2];\n+\t  if (TARGET_POWERPC64 && TARGET_32BIT)\n+\t    /* Note, old assemblers didn't support relocation here.  */\n+\t    return \\\"ld %0,lo16(%2)(%1)\\\";\n+\t  else\n+\t  {\n+\t    operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n+\t    output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n+#if TARGET_MACHO\n+\t    if (MACHO_DYNAMIC_NO_PIC_P)\n+\t      output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n+\t    else\n+\t    /* We cannot rely on ha16(low half)==ha16(high half), alas,\n+\t       although in practice it almost always is.  */\n+\t    output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n+#endif\n+\t    return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n+\t  }\n+\t}\n+      default:\n+\tabort();\n+    }\n+}\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4,12\")])\n+\n+\n (define_insn \"movdf_low_di\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n         (mem:DF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n@@ -69,6 +112,15 @@ Boston, MA 02111-1307, USA.  */\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4,12\")])\n \n+(define_insn \"movdf_low_st_si\"\n+  [(set (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:DF 0 \"gpc_reg_operand\" \"f\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n+  \"stfd %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"movdf_low_st_di\"\n   [(set (mem:DF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n                            (match_operand 2 \"\" \"\")))\n@@ -78,6 +130,17 @@ Boston, MA 02111-1307, USA.  */\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"movsf_low_si\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\"))))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n+  \"@\n+   lfs %0,lo16(%2)(%1)\n+   {l|lwz} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"movsf_low_di\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n         (mem:SF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n@@ -89,6 +152,17 @@ Boston, MA 02111-1307, USA.  */\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"movsf_low_st_si\"\n+  [(set (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SF 0 \"gpc_reg_operand\" \"f,!r\"))]\n+  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n+  \"@\n+   stfs %0,lo16(%2)(%1)\n+   {st|stw} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"movsf_low_st_di\"\n   [(set (mem:SF (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\")))\n@@ -110,6 +184,15 @@ Boston, MA 02111-1307, USA.  */\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"movsi_low_st\"\n+  [(set (mem:SI (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n+                           (match_operand 2 \"\" \"\")))\n+\t(match_operand:SI 0 \"gpc_reg_operand\" \"r\"))]\n+  \"TARGET_MACHO && ! TARGET_64BIT\"\n+  \"{st|stw} %0,lo16(%2)(%1)\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"movdi_low_st\"\n   [(set (mem:DI (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n                            (match_operand 2 \"\" \"\")))\n@@ -119,12 +202,56 @@ Boston, MA 02111-1307, USA.  */\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n+;; Mach-O PIC trickery.\n+(define_expand \"macho_high\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(high (match_operand 1 \"\" \"\")))]\n+  \"TARGET_MACHO\"\n+{\n+  if (TARGET_64BIT)\n+    emit_insn (gen_macho_high_di (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_macho_high_si (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"macho_high_si\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b*r\")\n+\t(high:SI (match_operand 1 \"\" \"\")))]\n+  \"TARGET_MACHO && ! TARGET_64BIT\"\n+  \"{liu|lis} %0,ha16(%1)\")\n+  \n+\n (define_insn \"macho_high_di\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b*r\")\n \t(high:DI (match_operand 1 \"\" \"\")))]\n   \"TARGET_MACHO && TARGET_64BIT\"\n   \"{liu|lis} %0,ha16(%1)\")\n \n+(define_expand \"macho_low\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(lo_sum (match_operand 1 \"\" \"\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+   \"TARGET_MACHO\"\n+{\n+  if (TARGET_64BIT)\n+    emit_insn (gen_macho_low_di (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_macho_low_si (operands[0], operands[1], operands[2]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"macho_low_si\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,!*r\")\n+\t\t   (match_operand 2 \"\" \"\")))]\n+   \"TARGET_MACHO && ! TARGET_64BIT\"\n+   \"@\n+    {cal %0,%a2@l(%1)|la %0,lo16(%2)(%1)}\n+    {cal %0,%a2@l(%1)|addic %0,%1,lo16(%2)}\")\n+\n (define_insn \"macho_low_di\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,!*r\")\n@@ -145,14 +272,65 @@ Boston, MA 02111-1307, USA.  */\n \t(match_dup 2))]\n   \"\")\n \n+(define_expand \"load_macho_picbase\"\n+  [(set (match_operand 0 \"\" \"\")\n+        (unspec [(match_operand 1 \"\" \"\")]\n+                   UNSPEC_LD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+{\n+  if (TARGET_32BIT)\n+    emit_insn (gen_load_macho_picbase_si (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_load_macho_picbase_di (operands[0], operands[1]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"load_macho_picbase_si\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n+\t(unspec:SI [(match_operand:SI 1 \"immediate_operand\" \"s\")]\n+\t\t   UNSPEC_LD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+  \"bcl 20,31,%1\\\\n%1:\"\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"load_macho_picbase_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n-\t(unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")] 15))]\n+\t(unspec:DI [(match_operand:DI 1 \"immediate_operand\" \"s\")] UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n   \"bcl 20,31,%1\\\\n%1:\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n+(define_expand \"macho_correct_pic\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(plus (match_operand 1 \"\" \"\")\n+\t\t (unspec [(match_operand 2 \"\" \"\")\n+\t\t\t     (match_operand 3 \"\" \"\")]\n+\t\t\t    UNSPEC_MPIC_CORRECT)))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+{\n+  if (TARGET_32BIT)\n+    emit_insn (gen_macho_correct_pic_si (operands[0], operands[1], operands[2],\n+\t       operands[3]));\n+  else\n+    emit_insn (gen_macho_correct_pic_di (operands[0], operands[1], operands[2],\n+\t       operands[3]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"macho_correct_pic_si\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"s\")\n+\t\t\t     (match_operand:SI 3 \"immediate_operand\" \"s\")]\n+\t\t\t    UNSPEC_MPIC_CORRECT)))]\n+  \"DEFAULT_ABI == ABI_DARWIN\"\n+  \"addis %0,%1,ha16(%2-%3)\\n\\taddi %0,%0,lo16(%2-%3)\"\n+  [(set_attr \"length\" \"8\")])\n+\n (define_insn \"macho_correct_pic_di\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")"}, {"sha": "abd3473e830bdb6f2b63dc27dd9ec2024ba0c81b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b8a55285ffabec4803d92012cc42a3e1729b802f", "patch": "@@ -4428,16 +4428,8 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t\t  return;\n \t\t}\n #endif\n-\t      if (mode == DImode)\n-\t\t{\n-\t\t  emit_insn (gen_macho_high_di (target, operands[1]));\n-\t\t  emit_insn (gen_macho_low_di (operands[0], target, operands[1]));\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  emit_insn (gen_macho_high (target, operands[1]));\n-\t\t  emit_insn (gen_macho_low (operands[0], target, operands[1]));\n-\t\t}\n+\t      emit_insn (gen_macho_high (target, operands[1]));\n+\t      emit_insn (gen_macho_low (operands[0], target, operands[1]));\n \t      return;\n \t    }\n "}, {"sha": "79a9ad1558d90480bc55f8a795e96dea5f591cce", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 121, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a55285ffabec4803d92012cc42a3e1729b802f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b8a55285ffabec4803d92012cc42a3e1729b802f", "patch": "@@ -7660,21 +7660,6 @@\n     {cal|la} %0,%2@l(%1)\n     {ai|addic} %0,%1,%K2\")\n \n-;; Mach-O PIC trickery.\n-(define_insn \"macho_high\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b*r\")\n-\t(high:SI (match_operand 1 \"\" \"\")))]\n-  \"TARGET_MACHO && ! TARGET_64BIT\"\n-  \"{liu|lis} %0,ha16(%1)\")\n-\n-(define_insn \"macho_low\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,!*r\")\n-\t\t   (match_operand 2 \"\" \"\")))]\n-   \"TARGET_MACHO && ! TARGET_64BIT\"\n-   \"@\n-    {cal %0,%a2@l(%1)|la %0,lo16(%2)(%1)}\n-    {cal %0,%a2@l(%1)|addic %0,%1,lo16(%2)}\")\n \n ;; Set up a register with a value from the GOT table\n \n@@ -7747,88 +7732,6 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"movsi_low_st\"\n-  [(set (mem:SI (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-                           (match_operand 2 \"\" \"\")))\n-\t(match_operand:SI 0 \"gpc_reg_operand\" \"r\"))]\n-  \"TARGET_MACHO && ! TARGET_64BIT\"\n-  \"{st|stw} %0,lo16(%2)(%1)\"\n-  [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"movdf_low\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n-        (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n-                           (match_operand 2 \"\" \"\"))))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-      case 0:\n-\treturn \\\"lfd %0,lo16(%2)(%1)\\\";\n-      case 1:\n-\t{\n-\t  rtx operands2[4];\n-\t  operands2[0] = operands[0];\n-\t  operands2[1] = operands[1];\n-\t  operands2[2] = operands[2];\n-\t  if (TARGET_POWERPC64 && TARGET_32BIT)\n-\t    /* Note, old assemblers didn't support relocation here.  */\n-\t    return \\\"ld %0,lo16(%2)(%1)\\\";\n-\t  else\n-\t  {\n-\t    operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n-\t    output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n-#if TARGET_MACHO\n-\t    if (MACHO_DYNAMIC_NO_PIC_P)\n-\t      output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n-\t    else\n-\t    /* We cannot rely on ha16(low half)==ha16(high half), alas,\n-\t       although in practice it almost always is.  */\n-\t    output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n-#endif\n-\t    return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n-\t  }\n-\t}\n-      default:\n-\tabort();\n-    }\n-}\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4,12\")])\n-\n-(define_insn \"movdf_low_st\"\n-  [(set (mem:DF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n-                           (match_operand 2 \"\" \"\")))\n-\t(match_operand:DF 0 \"gpc_reg_operand\" \"f\"))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n-  \"stfd %0,lo16(%2)(%1)\"\n-  [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"movsf_low\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,!r\")\n-        (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n-                           (match_operand 2 \"\" \"\"))))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n-  \"@\n-   lfs %0,lo16(%2)(%1)\n-   {l|lwz} %0,lo16(%2)(%1)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"movsf_low_st\"\n-  [(set (mem:SF (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,b\")\n-                           (match_operand 2 \"\" \"\")))\n-\t(match_operand:SF 0 \"gpc_reg_operand\" \"f,!r\"))]\n-  \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n-  \"@\n-   stfs %0,lo16(%2)(%1)\n-   {st|stw} %0,lo16(%2)(%1)\"\n-  [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"4\")])\n-\n (define_insn \"*movsi_internal1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m,r,r,r,r,r,*q,*c*l,*h,*h\")\n \t(match_operand:SI 1 \"input_operand\" \"r,U,m,r,I,L,n,R,*h,r,r,r,0\"))]\n@@ -10168,24 +10071,6 @@\n   \"{l|lwz} %0,%2-%3(%1)\"\n   [(set_attr \"type\" \"load\")])\n \n-(define_insn \"load_macho_picbase\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=l\")\n-\t(unspec:SI [(match_operand:SI 1 \"immediate_operand\" \"s\")]\n-\t\t   UNSPEC_LD_MPIC))]\n-  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n-  \"bcl 20,31,%1\\\\n%1:\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"macho_correct_pic\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"s\")\n-\t\t\t     (match_operand:SI 3 \"immediate_operand\" \"s\")]\n-\t\t\t    UNSPEC_MPIC_CORRECT)))]\n-  \"DEFAULT_ABI == ABI_DARWIN\"\n-  \"addis %0,%1,ha16(%2-%3)\\n\\taddi %0,%0,lo16(%2-%3)\"\n-  [(set_attr \"length\" \"8\")])\n \n ;; If the TOC is shared over a translation unit, as happens with all\n ;; the kinds of PIC that we support, we need to restore the TOC\n@@ -10212,12 +10097,8 @@\n \t\t\t\t  CODE_LABEL_NUMBER (operands[0]));\n       tmplabrtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (tmplab));\n \n-      emit_insn (TARGET_64BIT\n-\t ? gen_load_macho_picbase_di (picreg, tmplabrtx)\n-\t : gen_load_macho_picbase (picreg, tmplabrtx));\n-      emit_insn (TARGET_64BIT\n-\t ? gen_macho_correct_pic_di (picreg, picreg, picrtx, tmplabrtx)\n-\t : gen_macho_correct_pic (picreg, picreg, picrtx, tmplabrtx));\n+      emit_insn (gen_load_macho_picbase (picreg, tmplabrtx));\n+      emit_insn (gen_macho_correct_pic (picreg, picreg, picrtx, tmplabrtx));\n     }\n   else\n #endif"}]}