{"sha": "dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0ODZlYjI3Y2UzZmM3NWUwMjMxMWQzZTM2ZDllMTBhOWY1NmVlZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-06T14:51:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-06T14:51:48Z"}, "message": "gcov-io.h: Add a local time stamp.\n\n\t* gcov-io.h: Add a local time stamp.\n\t(struct gcov_info): Add stamp field.\n\t(gcov_truncate): New.\n\t* coverage.c (read_counts_file): Skip the stamp.\n\t(coverage_begin_output): Write the stamp.\n\t(build_gcov_info): Declare and init the stamp.\n\t(coverage_finish): Only unlink data file, if stamp is zero.\n\t* gcov-dump.c (dump_file): Dump the stamp.\n\t* gcov.c (bbg_stamp): New.\n\t(release_structures): Clear bbg_stamp.\n\t(read_graph_file): Read stamp.\n\t(read_count_file): Check stamp.\n\t* libgcov.c (gcov_exit): Check stamp and truncate if needed.\n\nFrom-SVN: r69006", "tree": {"sha": "a94f984308aa02ce879de7afc0672f6a1d92a100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a94f984308aa02ce879de7afc0672f6a1d92a100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/comments", "author": null, "committer": null, "parents": [{"sha": "c07e547752171cafffdbae0c46f90251d266141b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07e547752171cafffdbae0c46f90251d266141b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07e547752171cafffdbae0c46f90251d266141b"}], "stats": {"total": 94, "additions": 80, "deletions": 14}, "files": [{"sha": "5fa2546a82bada0b7e0bea5ed7af3dada5d0dab1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "patch": "@@ -1,3 +1,19 @@\n+2003-07-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcov-io.h: Add a local time stamp.\n+\t(struct gcov_info): Add stamp field.\n+\t(gcov_truncate): New.\n+\t* coverage.c (read_counts_file): Skip the stamp.\n+\t(coverage_begin_output): Write the stamp.\n+\t(build_gcov_info): Declare and init the stamp.\n+\t(coverage_finish): Only unlink data file, if stamp is zero.\n+\t* gcov-dump.c (dump_file): Dump the stamp.\n+\t* gcov.c (bbg_stamp): New.\n+\t(release_structures): Clear bbg_stamp.\n+\t(read_graph_file): Read stamp.\n+\t(read_count_file): Check stamp.\n+\t* libgcov.c (gcov_exit): Check stamp and truncate if needed.\n+\n 2003-07-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree.h (default_flag_random_seed): Remove."}, {"sha": "4a0033247ade2b2afacd646c4fab06bfc9ff3dc3", "filename": "gcc/coverage.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "patch": "@@ -182,6 +182,9 @@ read_counts_file (void)\n       return;\n     }\n \n+  /* Read and discard the stamp. */\n+  gcov_read_unsigned ();\n+  \n   counts_hash = htab_create (10,\n \t\t\t     htab_counts_entry_hash, htab_counts_entry_eq,\n \t\t\t     htab_counts_entry_del);\n@@ -445,6 +448,7 @@ coverage_begin_output (void)\n \t    {\n \t      gcov_write_unsigned (GCOV_GRAPH_MAGIC);\n \t      gcov_write_unsigned (GCOV_VERSION);\n+\t      gcov_write_unsigned (local_tick);\n \t    }\n \t  bbg_file_opened = 1;\n \t}\n@@ -708,6 +712,14 @@ build_gcov_info (void)\n   fields = field;\n   value = tree_cons (field, null_pointer_node, value);\n \n+  /* stamp */\n+  field = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n+  TREE_CHAIN (field) = fields;\n+  fields = field;\n+  value = tree_cons (field, convert (unsigned_intSI_type_node,\n+\t\t\t\t     build_int_2 (local_tick, 0)),\n+\t\t     value);\n+\n   /* Filename */\n   string_type = build_pointer_type (build_qualified_type (char_type_node,\n \t\t\t\t\t\t    TYPE_QUAL_CONST));\n@@ -905,13 +917,9 @@ coverage_finish (void)\n \n       if (error)\n \tunlink (bbg_file_name);\n-#if SELF_COVERAGE\n-      /* If the compiler is instrumented, we should not\n-         unconditionally remove the counts file, because we might be\n-         recompiling ourselves. The .da files are all removed during\n-         copying the stage1 files.  */\n-      if (error)\n-#endif\n+      if (!local_tick)\n+\t/* Only remove the da file, if we cannot stamp it. If we can\n+\t   stamp it, libgcov will DTRT.  */\n \tunlink (da_file_name);\n     }\n }"}, {"sha": "67a34dcfff760dd4d9698e0cccc798cf0a2a8a9c", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "patch": "@@ -184,6 +184,13 @@ dump_file (const char *filename)\n       printf (\"%s:warning:current version is `%.4s'\\n\", filename, e);\n   }\n \n+  /* stamp */\n+  {\n+    unsigned stamp = gcov_read_unsigned ();\n+\n+    printf (\"%s:stamp %lu\\n\", filename, (unsigned long)stamp);\n+  }\n+  \n   while (1)\n     {\n       gcov_position_t base, position = gcov_position ();"}, {"sha": "999d07eea08fb831a84678e3fa644eb867b035d0", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "patch": "@@ -52,11 +52,17 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    The basic format of the files is\n \n-   \tfile : int32:magic int32:version record*\n+   \tfile : int32:magic int32:version int32:stamp record*\n \n    The magic ident is different for the bbg and the counter files.\n    The version is the same for both files and is derived from gcc's\n-   version number.  Although the ident and version are formally 32 bit\n+   version number. The stamp value is used to synchronize bbg and\n+   counter files and to synchronize merging within a counter file. It\n+   need not be an absolute time stamp, merely a ticker that increments\n+   fast enough and cycles slow enough to distinguish different\n+   compile/run/compile cycles.\n+   \n+   Although the ident and version are formally 32 bit\n    numbers, they are derived from 4 character ASCII strings.  The\n    version number consists of the single character major version\n    number, a two character minor version number (leading zero for\n@@ -370,8 +376,9 @@ struct gcov_info\n   gcov_unsigned_t version;\t/* expected version number */\n   struct gcov_info *next;\t/* link to next, used by libgcc */\n \n+  gcov_unsigned_t stamp;\t/* uniquifying time stamp */\n   const char *filename;\t\t/* output file name */\n-\n+  \n   unsigned n_functions;\t\t/* number of functions */\n   const struct gcov_fn_info *functions; /* table of functions */\n \n@@ -453,6 +460,7 @@ GCOV_LINKAGE void gcov_write_counter (gcov_type);\n GCOV_LINKAGE void gcov_write_tag_length (gcov_unsigned_t, gcov_unsigned_t);\n GCOV_LINKAGE void gcov_write_summary (gcov_unsigned_t /*tag*/,\n \t\t\t\t      const struct gcov_summary *);\n+static void gcov_truncate (void);\n static void gcov_rewrite (void);\n GCOV_LINKAGE void gcov_seek (gcov_position_t /*position*/);\n #else\n@@ -525,6 +533,12 @@ gcov_rewrite (void)\n   gcov_var.offset = 0;\n   fseek (gcov_var.file, 0L, SEEK_SET);\n }\n+\n+static inline void\n+gcov_truncate (void)\n+{\n+  ftruncate (fileno (gcov_var.file), 0L);\n+}\n #endif\n \n #endif /* IN_LIBGCOV >= 0 */"}, {"sha": "c8fc6ad5d31c0d8d47c318e52b4359eda4d8b16c", "filename": "gcc/gcov.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "patch": "@@ -269,6 +269,9 @@ static time_t bbg_file_time;\n \n static char *bbg_file_name;\n \n+/* Stamp of the bbg file */\n+static unsigned bbg_stamp;\n+\n /* Name and file pointer of the input file for the arc count data.  */\n \n static char *da_file_name;\n@@ -583,6 +586,7 @@ release_structures ()\n   free (da_file_name);\n   da_file_name = bbg_file_name = NULL;\n   bbg_file_time = 0;\n+  bbg_stamp = 0;\n   \n   while ((src = sources))\n     {\n@@ -740,7 +744,8 @@ read_graph_file ()\n       fnotice (stderr, \"%s:version `%.4s', prefer `%.4s'\\n\",\n \t       bbg_file_name, v, e);\n     }\n-  \n+  bbg_stamp = gcov_read_unsigned ();\n+\n   while ((tag = gcov_read_unsigned ()))\n     {\n       unsigned length = gcov_read_unsigned ();\n@@ -1008,6 +1013,12 @@ read_count_file ()\n       fnotice (stderr, \"%s:version `%.4s', prefer version `%.4s'\\n\",\n \t       da_file_name, v, e);\n     }\n+  tag = gcov_read_unsigned ();\n+  if (tag != bbg_stamp)\n+    {\n+      fnotice (stderr, \"%s:stamp mismatch with graph file\\n\", da_file_name);\n+      goto cleanup;\n+    }\n   \n   while ((tag = gcov_read_unsigned ()))\n     {"}, {"sha": "72126466f66c40235836dad14d0dccd83ff4ecf9", "filename": "gcc/libgcov.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd486eb27ce3fc75e02311d3e36d9e10a9f56eee/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=dd486eb27ce3fc75e02311d3e36d9e10a9f56eee", "patch": "@@ -167,8 +167,10 @@ gcov_exit (void)\n       gcov_unsigned_t tag, length;\n       gcov_position_t summary_pos = 0;\n \n-      /* Totals for this object file.  */\n       memset (&this_object, 0, sizeof (this_object));\n+      memset (&object, 0, sizeof (object));\n+      \n+      /* Totals for this object file.  */\n       for (t_ix = c_ix = 0,\n \t     ci_ptr = gi_ptr->counts, cs_ptr = this_object.ctrs;\n \t   t_ix != GCOV_COUNTERS_SUMMABLE; t_ix++, cs_ptr++)\n@@ -223,6 +225,15 @@ gcov_exit (void)\n \t      gcov_version_mismatch (gi_ptr, length);\n \t      goto read_fatal;\n \t    }\n+\n+\t  length = gcov_read_unsigned ();\n+\t  if (length != gi_ptr->stamp)\n+\t    {\n+\t      /* Read from a different compilation. Overwrite the\n+\t\t file.  */\n+\t      gcov_truncate ();\n+\t      goto rewrite;\n+\t    }\n \t  \n \t  /* Merge execution counts for each function.  */\n \t  for (f_ix = gi_ptr->n_functions, fi_ptr = gi_ptr->functions;\n@@ -298,8 +309,6 @@ gcov_exit (void)\n \trewrite:;\n \t  gcov_rewrite ();\n \t}\n-      else\n-\tmemset (&object, 0, sizeof (object));\n       if (!summary_pos)\n \tmemset (&program, 0, sizeof (program));\n \n@@ -355,6 +364,7 @@ gcov_exit (void)\n       \n       /* Write out the data.  */\n       gcov_write_tag_length (GCOV_DATA_MAGIC, GCOV_VERSION);\n+      gcov_write_unsigned (gi_ptr->stamp);\n       \n       /* Write execution counts for each function.  */\n       for (f_ix = gi_ptr->n_functions, fi_ptr = gi_ptr->functions; f_ix--;"}]}