{"sha": "62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJmYjY3ZDc3YTdhNjhjNWNmYTdkNzhkNzUxODE3YjY4ZWE3OGE4Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-23T13:33:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-23T13:33:43Z"}, "message": "gimple-fold.c (fold_gimple_cond): Do not require folding results to pass valid_gimple_rhs_p.\n\n2015-07-23  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (fold_gimple_cond): Do not require folding\n\tresults to pass valid_gimple_rhs_p.\n\t* tree-cfg.h (fold_cond_expr_cond): Remove.\n\t* tree-cfg.c (fold_cond_expr_cond): Likewise.\n\t(make_edges): Do not call it.\n\t* tree-inline.c (tree_function_versioning): Likewise.\n\nFrom-SVN: r226109", "tree": {"sha": "33af7bd1b422b29f5e10d468c464e32d51540b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33af7bd1b422b29f5e10d468c464e32d51540b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/comments", "author": null, "committer": null, "parents": [{"sha": "bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcdaf3708453cc9f0ad23598f682e17ffd1e5afc"}], "stats": {"total": 61, "additions": 12, "deletions": 49}, "files": [{"sha": "f5bb227c33830b978d532b048150b8b15c8865bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "patch": "@@ -1,3 +1,12 @@\n+2015-07-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (fold_gimple_cond): Do not require folding\n+\tresults to pass valid_gimple_rhs_p.\n+\t* tree-cfg.h (fold_cond_expr_cond): Remove.\n+\t* tree-cfg.c (fold_cond_expr_cond): Likewise.\n+\t(make_edges): Do not call it.\n+\t* tree-inline.c (tree_function_versioning): Likewise.\n+\n 2015-07-23  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-parloops.c (gather_scalar_reductions): Add arg to call to\n@@ -8,7 +17,8 @@\n \t(vect_is_simple_reduction, vect_force_simple_reduction): Add and pass\n \tneed_wrapping_integral_overflow parameter.\n \t(vectorizable_reduction): Add arg to call to vect_is_simple_reduction.\n-\t* tree-vectorizer.h (vect_force_simple_reduction): Add parameter to decl.\n+\t* tree-vectorizer.h (vect_force_simple_reduction): Add parameter to\n+\tdecl.\n \n 2015-07-23  Yuri Rumyantsev  <ysrumyan@gmail.com>\n "}, {"sha": "2909c42ef19a6dd8454232fc3194a9e53d9b9c7d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "patch": "@@ -546,7 +546,7 @@ fold_gimple_cond (gcond *stmt)\n   if (result)\n     {\n       STRIP_USELESS_TYPE_CONVERSION (result);\n-      if (is_gimple_condexpr (result) && valid_gimple_rhs_p (result))\n+      if (is_gimple_condexpr (result))\n         {\n           gimple_cond_set_condition_from_tree (stmt, result);\n           return true;"}, {"sha": "66f999e3c42d8d609dfc04dd36285847e69ccb9f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "patch": "@@ -606,48 +606,6 @@ create_bb (void *h, void *e, basic_block after)\n \t\t\t\t Edge creation\n ---------------------------------------------------------------------------*/\n \n-/* Fold COND_EXPR_COND of each COND_EXPR.  */\n-\n-void\n-fold_cond_expr_cond (void)\n-{\n-  basic_block bb;\n-\n-  FOR_EACH_BB_FN (bb, cfun)\n-    {\n-      gimple stmt = last_stmt (bb);\n-\n-      if (stmt && gimple_code (stmt) == GIMPLE_COND)\n-\t{\n-\t  gcond *cond_stmt = as_a <gcond *> (stmt);\n-\t  location_t loc = gimple_location (stmt);\n-\t  tree cond;\n-\t  bool zerop, onep;\n-\n-\t  fold_defer_overflow_warnings ();\n-\t  cond = fold_binary_loc (loc, gimple_cond_code (cond_stmt),\n-\t\t\t\t  boolean_type_node,\n-\t\t\t\t  gimple_cond_lhs (cond_stmt),\n-\t\t\t\t  gimple_cond_rhs (cond_stmt));\n-\t  if (cond)\n-\t    {\n-\t      zerop = integer_zerop (cond);\n-\t      onep = integer_onep (cond);\n-\t    }\n-\t  else\n-\t    zerop = onep = false;\n-\n-\t  fold_undefer_overflow_warnings (zerop || onep,\n-\t\t\t\t\t  stmt,\n-\t\t\t\t\t  WARN_STRICT_OVERFLOW_CONDITIONAL);\n-\t  if (zerop)\n-\t    gimple_cond_make_false (cond_stmt);\n-\t  else if (onep)\n-\t    gimple_cond_make_true (cond_stmt);\n-\t}\n-    }\n-}\n-\n /* If basic block BB has an abnormal edge to a basic block\n    containing IFN_ABNORMAL_DISPATCHER internal call, return\n    that the dispatcher's basic block, otherwise return NULL.  */\n@@ -1000,9 +958,6 @@ make_edges (void)\n   XDELETE (bb_to_omp_idx);\n \n   free_omp_regions ();\n-\n-  /* Fold COND_EXPR_COND of each COND_EXPR.  */\n-  fold_cond_expr_cond ();\n }\n \n /* Add SEQ after GSI.  Start new bb after GSI, and created further bbs as"}, {"sha": "6c4b1d9b241ddc6ca6a101f25a7e17e5587de3ee", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "patch": "@@ -31,7 +31,6 @@ extern void gt_pch_nx (edge_def *e, gt_pointer_operator, void *);\n \n extern void init_empty_tree_cfg_for_function (struct function *);\n extern void init_empty_tree_cfg (void);\n-extern void fold_cond_expr_cond (void);\n extern void start_recording_case_labels (void);\n extern void end_recording_case_labels (void);\n extern basic_block label_to_block_fn (struct function *, tree);"}, {"sha": "e1ceea417101a861a45ab630b7dbd4c6847875b6", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fb67d77a7a68c5cfa7d78d751817b68ea78a87/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=62fb67d77a7a68c5cfa7d78d751817b68ea78a87", "patch": "@@ -5847,7 +5847,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \n   fold_marked_statements (0, id.statements_to_fold);\n   delete id.statements_to_fold;\n-  fold_cond_expr_cond ();\n   delete_unreachable_blocks_update_callgraph (&id);\n   if (id.dst_node->definition)\n     cgraph_edge::rebuild_references ();"}]}