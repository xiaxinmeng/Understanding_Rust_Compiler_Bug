{"sha": "82318c57607ca983742630c9884e5d30920a3ce1", "node_id": "C_kwDOANBUbNoAKDgyMzE4YzU3NjA3Y2E5ODM3NDI2MzBjOTg4NGU1ZDMwOTIwYTNjZTE", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-02-24T19:07:23Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-03-07T00:12:16Z"}, "message": "testsuite: Provide means to regexp in multiline patterns\n\nThose multi-line-patterns are literal.  Sometimes a regexp\nneeds to be matched.  This is a start: just three elements\nare supported: \"(\" \")\" and the compound \")?\" (and on second\nthought, it can be argued that \"(...)\" alone is not useful).\nNote that Tcl \"string map\" is documented to have the desired\neffect: a once-over but no re-recognitions of previously\nreplaced mapped elements.  Also, drop a doubled \"containing\".\n\ntestsuite:\n\t* lib/multiline.exp (_build_multiline_regex): Map\n\t\"{re:\" to \"(\", similarly \")?\" from \":re?}\" and the\n\tsame without question mark.", "tree": {"sha": "9d9cda75b800ac5957899f0ff8ed7a5d9dd8e0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d9cda75b800ac5957899f0ff8ed7a5d9dd8e0dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82318c57607ca983742630c9884e5d30920a3ce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82318c57607ca983742630c9884e5d30920a3ce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82318c57607ca983742630c9884e5d30920a3ce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82318c57607ca983742630c9884e5d30920a3ce1/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfb14cdd796ad9df6b5f2def047ef36b29385902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb14cdd796ad9df6b5f2def047ef36b29385902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb14cdd796ad9df6b5f2def047ef36b29385902"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "73621a0bdbdc3fd7091d734cbfbb7f26760a4c96", "filename": "gcc/testsuite/lib/multiline.exp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82318c57607ca983742630c9884e5d30920a3ce1/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82318c57607ca983742630c9884e5d30920a3ce1/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmultiline.exp?ref=82318c57607ca983742630c9884e5d30920a3ce1", "patch": "@@ -297,7 +297,7 @@ proc _get_lines { filename first_line last_line } {\n \n # Convert $multiline from a list of strings to a multiline regex\n # We need to support matching arbitrary followup text on each line,\n-# to deal with comments containing containing DejaGnu directives.\n+# to deal with comments containing DejaGnu directives.\n \n proc _build_multiline_regex { multiline index } {\n     verbose \"_build_multiline_regex: $multiline $index\" 4\n@@ -307,7 +307,10 @@ proc _build_multiline_regex { multiline index } {\n \tverbose \"  line: $line\" 4\n \n \t# We need to escape \"^\" and other regexp metacharacters.\n-\tset line [string map {\"^\" \"\\\\^\"\n+\tset line [string map {\"\\{re:\" \"(\"\n+\t                      \":re?\\}\" \")?\"\n+\t                      \":re\\}\" \")\"\n+\t                      \"^\" \"\\\\^\"\n \t                      \"(\" \"\\\\(\"\n \t                      \")\" \"\\\\)\"\n \t                      \"[\" \"\\\\[\""}]}