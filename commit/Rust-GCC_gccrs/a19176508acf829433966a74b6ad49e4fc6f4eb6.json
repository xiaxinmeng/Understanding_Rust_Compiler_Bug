{"sha": "a19176508acf829433966a74b6ad49e4fc6f4eb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5MTc2NTA4YWNmODI5NDMzOTY2YTc0YjZhZDQ5ZTRmYzZmNGViNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-25T19:24:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-25T19:24:30Z"}, "message": "(expand_call): In inlining case, if BEFORE_CALLS is zero, start\nlooking at first insn (one more place).\n\nFrom-SVN: r11888", "tree": {"sha": "046f356546cb1b6c9e42c78ca678e97429446bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/046f356546cb1b6c9e42c78ca678e97429446bff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a19176508acf829433966a74b6ad49e4fc6f4eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19176508acf829433966a74b6ad49e4fc6f4eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19176508acf829433966a74b6ad49e4fc6f4eb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19176508acf829433966a74b6ad49e4fc6f4eb6/comments", "author": null, "committer": null, "parents": [{"sha": "c388525f7aa3c3d914e5323d5c71ecef69305849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c388525f7aa3c3d914e5323d5c71ecef69305849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c388525f7aa3c3d914e5323d5c71ecef69305849"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "7f18a8f4ff75322e4e38fc4688a16db2bc9f896b", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19176508acf829433966a74b6ad49e4fc6f4eb6/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19176508acf829433966a74b6ad49e4fc6f4eb6/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=a19176508acf829433966a74b6ad49e4fc6f4eb6", "patch": "@@ -739,16 +739,17 @@ expand_call (exp, target, ignore)\n \n \t  if (stack_arg_under_construction || i >= 0)\n \t    {\n-\t      rtx insn = before_call ? NEXT_INSN (before_call) : get_insns ();\n-\t      rtx seq;\n+\t      rtx first_insn\n+\t\t= before_call ? NEXT_INSN (before_call) : get_insns ();\n+\t      rtx insn, seq;\n \n \t      /* Look for a call in the inline function code.\n \t\t If OUTGOING_ARGS_SIZE (DECL_SAVED_INSNS (fndecl)) is\n \t\t nonzero then there is a call and it is not necessary\n \t\t to scan the insns.  */\n \n \t      if (OUTGOING_ARGS_SIZE (DECL_SAVED_INSNS (fndecl)) == 0)\n-\t\tfor (; insn; insn = NEXT_INSN (insn))\n+\t\tfor (insn = first_insn; insn; insn = NEXT_INSN (insn))\n \t\t  if (GET_CODE (insn) == CALL_INSN)\n \t\t    break;\n \n@@ -780,7 +781,7 @@ expand_call (exp, target, ignore)\n \t\t\t\t\t\tNULL_RTX, BITS_PER_UNIT);\n \t\t  seq = get_insns ();\n \t\t  end_sequence ();\n-\t\t  emit_insns_before (seq, NEXT_INSN (before_call));\n+\t\t  emit_insns_before (seq, first_insn);\n \t\t  emit_stack_restore (SAVE_BLOCK, old_stack_level, NULL_RTX);\n \t\t}\n \t    }"}]}