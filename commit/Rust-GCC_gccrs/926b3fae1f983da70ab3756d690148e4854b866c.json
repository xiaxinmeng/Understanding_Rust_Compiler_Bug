{"sha": "926b3fae1f983da70ab3756d690148e4854b866c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2YjNmYWUxZjk4M2RhNzBhYjM3NTZkNjkwMTQ4ZTQ4NTRiODY2Yw==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-03T17:18:07Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-03T17:18:07Z"}, "message": "(movesicc, movehicc) Pentium Pro conditional move insns\n\nFrom-SVN: r11917", "tree": {"sha": "843766c0a997bc25440586493f8ac685c0f6bf02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843766c0a997bc25440586493f8ac685c0f6bf02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/926b3fae1f983da70ab3756d690148e4854b866c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926b3fae1f983da70ab3756d690148e4854b866c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926b3fae1f983da70ab3756d690148e4854b866c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926b3fae1f983da70ab3756d690148e4854b866c/comments", "author": null, "committer": null, "parents": [{"sha": "3a0433fd4d7b371aa2b11f0861d79b2b83cc30ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0433fd4d7b371aa2b11f0861d79b2b83cc30ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0433fd4d7b371aa2b11f0861d79b2b83cc30ff"}], "stats": {"total": 125, "additions": 121, "deletions": 4}, "files": [{"sha": "d585652c638dc4efcb6fac8571d532ae23a74810", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 121, "deletions": 4, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926b3fae1f983da70ab3756d690148e4854b866c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926b3fae1f983da70ab3756d690148e4854b866c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=926b3fae1f983da70ab3756d690148e4854b866c", "patch": "@@ -103,9 +103,9 @@\n ;; after the tstM or cmp) will actually emit the tstM or cmpM.\n \n ;; Processor type -- this attribute must exactly match the processor_type\n-;; enumeration in rs6000.h.\n+;; enumeration in i386.h.\n \n-(define_attr \"cpu\" \"i386,i486,pentium\"\n+(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro\"\n   (const (symbol_ref \"ix86_cpu\")))\n \n (define_insn \"tstsi_1\"\n@@ -418,6 +418,16 @@\n   \"TARGET_80387\"\n   \"* return output_float_compare (insn, operands);\")\n \n+(define_insn \"\"\n+  [(set (cc0)\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(float_extend:XF\n+\t\t\t  (match_operand:DF 1 \"nonimmediate_operand\" \"fm\"))\n+\t\t\t (match_operand:XF 0 \"register_operand\" \"f\")]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n+  \"TARGET_80387\"\n+  \"* return output_float_compare (insn, operands);\")\n+\n (define_insn \"\"\n   [(set (cc0)\n \t(match_operator 2 \"VOIDmode_compare_op\"\n@@ -4299,7 +4309,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const_int_operand\" \"J\")))]\n-  \"\"\n+  \"CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')\"\n   \"*\n {\n   rtx xops[4], low[1], high[1];\n@@ -4460,7 +4470,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const_int_operand\" \"J\")))]\n-  \"\"\n+  \"CONST_OK_FOR_LETTER_P (INTVAL (operands[2]), 'J')\"\n   \"*\n {\n   rtx xops[4], low[1], high[1];\n@@ -6630,6 +6640,113 @@\n   return \\\"repnz\\;scas%B2\\\";\n }\")\n \n+/* Conditional move define_insns.  */\n+\n+(define_expand \"movsicc\"\n+  [(match_dup 4)\n+   (set (match_operand 0 \"register_operand\" \"\")\n+\t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"\")\n+\t\t\t (match_operand:SI 3 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_CMOVE\"\n+  \"\n+{\n+  operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n+}\")\n+\n+(define_expand \"movhicc\"\n+  [(match_dup 4)\n+   (set (match_operand 0 \"register_operand\" \"\")\n+\t(if_then_else:HI (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t (match_operand:HI 2 \"nonimmediate_operand\" \"\")\n+\t\t\t (match_operand:HI 3 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_CMOVE\"\n+  \"\n+{\n+  operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n+}\")\n+\n+(define_insn \"movsicc_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,&r,&r\")\n+\t(if_then_else:SI (match_operator 1 \"comparison_operator\" \n+\t\t\t\t[(cc0) (const_int 0)])\n+\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0,rm,g\")\n+\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm,rm,g\")))]\n+  \"TARGET_CMOVE\"\n+  \"*\n+{\n+  if (cc_prev_status.flags & CC_IN_80387)\n+    abort ();\n+\n+  if (which_alternative == 0)\n+    {\n+      /* r <- cond ? arg : r */\n+      output_asm_insn (AS2 (cmov%C1,%2,%0), operands);\n+    }\n+  else if (which_alternative == 1)\n+    {\n+      /* r <- cond ? r : arg */\n+      output_asm_insn (AS2 (cmov%N1,%3,%0), operands);\n+    }\n+  else if (which_alternative == 2)\n+    {\n+      /* r <- cond ? arg1 : arg2 */\n+      output_asm_insn (AS2 (cmov%C1,%2,%0), operands);\n+      output_asm_insn (AS2 (cmov%N1,%3,%0), operands);\n+    }\n+  else \n+    {\n+      /* r <- cond ? arg1 : arg2 */\n+      operands[4] = gen_label_rtx ();\n+      output_asm_insn (AS2 (mov%L0,%2,%0), operands);\n+      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      output_asm_insn (AS2 (mov%L0,%3,%0), operands);\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+    }\n+  RET;\n+}\")\n+\n+(define_insn \"movhicc_1\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r,&r,&r\")\n+\t(if_then_else:HI (match_operator 1 \"comparison_operator\" \n+\t\t\t\t[(cc0) (const_int 0)])\n+\t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0,rm,g\")\n+\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm,rm,g\")))]\n+  \"TARGET_CMOVE\"\n+  \"*\n+{\n+  if (cc_prev_status.flags & CC_IN_80387)\n+    abort ();\n+\n+  if (which_alternative == 0)\n+    {\n+      /* r <- cond ? arg : r */\n+      output_asm_insn (AS2 (cmov%C1,%2,%0), operands);\n+    }\n+  else if (which_alternative == 1)\n+    {\n+      /* r <- cond ? r : arg */\n+      output_asm_insn (AS2 (cmov%N1,%3,%0), operands);\n+    }\n+  else if (which_alternative == 2)\n+    {\n+      /* r <- cond ? arg1 : arg2 */\n+      output_asm_insn (AS2 (cmov%C1,%2,%0), operands);\n+      output_asm_insn (AS2 (cmov%N1,%3,%0), operands);\n+    }\n+  else \n+    {\n+      /* r <- cond ? arg1 : arg2 */\n+      operands[4] = gen_label_rtx ();\n+      output_asm_insn (AS2 (mov%L0,%2,%0), operands);\n+      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      output_asm_insn (AS2 (mov%L0,%3,%0), operands);\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+    }\n+  RET;\n+}\")\n+\n+\n (define_insn \"strlensi_unroll\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r,&r\")\n \t(unspec:SI [(mem:BLK (match_operand:SI 1 \"address_operand\" \"r,r\"))"}]}