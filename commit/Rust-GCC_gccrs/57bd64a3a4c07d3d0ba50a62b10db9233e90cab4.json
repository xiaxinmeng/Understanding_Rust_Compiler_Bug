{"sha": "57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiZDY0YTNhNGMwN2QzZDBiYTUwYTYyYjEwZGI5MjMzZTkwY2FiNA==", "commit": {"author": {"name": "Rask Ingemann Lambertsen", "email": "rask@sygehus.dk", "date": "2007-07-16T20:01:20Z"}, "committer": {"name": "Rask Ingemann Lambertsen", "email": "rask@gcc.gnu.org", "date": "2007-07-16T20:01:20Z"}, "message": "20061101-2.c: Variant of 20061101-1.c adapted to work on targets with 16-bit or wider int.\n\n2007-07-16  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n\n\t* gcc.c-torture/execute/20061101-2.c: Variant of 20061101-1.c\n\t  adapted to work on targets with 16-bit or wider int.\n\t* gcc.c-torture/execute/pr29797-2.c: Likewise for pr29797-1.c.\n\t* gcc.c-torture/execute/pr31448-2.c: Likewise for pr31448.c.\n\t* gcc.dg/20061109-2.c: Likewise for 20061109-1.c.\n\t* gcc.dg/pr27959-2.c: Likewise for pr27959.c.\n\nFrom-SVN: r126693", "tree": {"sha": "3af515038a16c8b8d0893cd19741a7a4a5b5d4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3af515038a16c8b8d0893cd19741a7a4a5b5d4e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/comments", "author": null, "committer": null, "parents": [{"sha": "fd95ee7ca0a96acef25efefe3cd5eb08cc4325d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd95ee7ca0a96acef25efefe3cd5eb08cc4325d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd95ee7ca0a96acef25efefe3cd5eb08cc4325d4"}], "stats": {"total": 202, "additions": 202, "deletions": 0}, "files": [{"sha": "3700cb1fdde83091ce25c3255ccbd3a9a0fa67ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "patch": "@@ -1,3 +1,12 @@\n+2007-07-16  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n+\n+\t* gcc.c-torture/execute/20061101-2.c: Variant of 20061101-1.c\n+\t  adapted to work on targets with 16-bit or wider int.\n+\t* gcc.c-torture/execute/pr29797-2.c: Likewise for pr29797-1.c.\n+\t* gcc.c-torture/execute/pr31448-2.c: Likewise for pr31448.c.\n+\t* gcc.dg/20061109-2.c: Likewise for 20061109-1.c.\n+\t* gcc.dg/pr27959-2.c: Likewise for pr27959.c.\n+\n 2007-07-16  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \t* gcc.dg/tree-ssa/ltrans-5.c: Only run test on targets which"}, {"sha": "d5b1046e523ff5b326eac84def654a5435c7fca8", "filename": "gcc/testsuite/gcc.c-torture/execute/20061101-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20061101-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20061101-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20061101-2.c?ref=57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "patch": "@@ -0,0 +1,32 @@\n+/* PR rtl-optimization/28970 */\n+/* Origin: Peter Bergner <bergner@vnet.ibm.com> */\n+\n+extern void abort (void);\n+\n+int tar (long i)\n+{\n+  if (i != 36863)\n+    abort ();\n+\n+  return -1;\n+}\n+\n+void bug(int q, long bcount)\n+{\n+  int j = 0;\n+  int outgo = 0;\n+\n+  while(j != -1)\n+    {\n+      outgo++;\n+      if (outgo > q-1)\n+        outgo = q-1;\n+      j = tar (outgo*bcount);\n+    }\n+}\n+\n+int main(void)\n+{\n+  bug(5, 36863);\n+  return 0;\n+}"}, {"sha": "9313bf4c635b3d4ac8a5e8ef4d22e2a3ddfa650e", "filename": "gcc/testsuite/gcc.c-torture/execute/pr29797-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29797-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29797-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29797-2.c?ref=57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "patch": "@@ -0,0 +1,14 @@\n+extern void abort(void);\n+\n+unsigned long bar(void) { return 32768; }\n+\n+int main()\n+{\n+  unsigned long nStyle = bar ();\n+  if (nStyle & 32768)\n+    nStyle |= 65536;\n+  if (nStyle != (32768 | 65536))\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "ad920c9d00e52d1637778f03f4e2a0ca740fe8b3", "filename": "gcc/testsuite/gcc.c-torture/execute/pr31448-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr31448-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr31448-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr31448-2.c?ref=57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "patch": "@@ -0,0 +1,36 @@\n+/* PR middle-end/31448, this used to ICE during expand because\n+   reduce_to_bit_field_precision was not ready to handle constants. */\n+\n+typedef struct _st {\n+    long int iIndex : 24;\n+    long int iIndex1 : 24;\n+} st;\n+st *next;\n+void g(void)\n+{\n+    st *next = 0;\n+    int nIndx;\n+    const static int constreg[] = { 0,};\n+    nIndx = 0;\n+    next->iIndex = constreg[nIndx];\n+}\n+void f(void)\n+{\n+    int nIndx;\n+    const static long int constreg[] = { 0xFEFEFEFE,};\n+    nIndx = 0;\n+    next->iIndex = constreg[nIndx];\n+    next->iIndex1 = constreg[nIndx];\n+}\n+int main(void)\n+{\n+  st a;\n+  next = &a;\n+  f();\n+  if (next->iIndex != 0xFFFEFEFE)\n+    __builtin_abort ();\n+  if (next->iIndex1 != 0xFFFEFEFE)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}, {"sha": "30be434d53c347e567936efe4f2367fb5c44c34b", "filename": "gcc/testsuite/gcc.dg/20061109-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.dg%2F20061109-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.dg%2F20061109-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20061109-2.c?ref=57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* This assignment might be implemented with a mem copy from the\n+   literal pool with two BLKmode operands.  This produced an ICE on S/390\n+   since simplify_subreg was called for such a BLKmode operand.  */\n+\n+struct a\n+{\n+  unsigned long b:24;\n+};\n+\n+void\n+foo (struct a *t)\n+{\n+  t->b = 32;\n+}"}, {"sha": "65894756b9ecb79490e4d9c4792bc561ccf5c1b5", "filename": "gcc/testsuite/gcc.dg/pr27959-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27959-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bd64a3a4c07d3d0ba50a62b10db9233e90cab4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27959-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27959-2.c?ref=57bd64a3a4c07d3d0ba50a62b10db9233e90cab4", "patch": "@@ -0,0 +1,94 @@\n+/* PR middle-end/27959 */\n+/* { dg-do run { target { stdint_types } } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mtune=z990\" { target s390*-*-* } } */\n+\n+#include <stdint.h>\n+extern void abort (void);\n+\n+struct B\n+{\n+  unsigned int b1, b2, b3;\n+  char b4;\n+};\n+\n+struct C\n+{\n+  char c1;\n+};\n+\n+struct D\n+{\n+  char *d1;\n+  struct C **d2;\n+  unsigned int d3;\n+};\n+\n+void\n+__attribute__((noinline))\n+foo (void *x, struct B *y, unsigned int *z)\n+{\n+  if (x)\n+    abort ();\n+  if (y->b1 != 7 || y->b2 != 5 || y->b3 != 3 || y->b4)\n+    abort ();\n+  if (*z != 2)\n+    abort ();\n+}\n+\n+int\n+__attribute__((noinline))\n+baz (unsigned int *x, unsigned int y)\n+{\n+  asm volatile (\"\" : : \"r\" (&x), \"r\" (&y) : \"memory\");\n+  return *x + y;\n+}\n+\n+inline int bar (unsigned int *x, unsigned int y)\n+{\n+  if (y < *x)\n+    return 0;\n+  return baz (x, y);\n+}\n+\n+unsigned int *\n+__attribute__((noinline))\n+test (struct D *x, unsigned int *y)\n+{\n+  struct B b;\n+  uint32_t c;\n+\n+  bar (y, x->d3);\n+  if ((*(x->d2))->c1)\n+    c = ((uint32_t) x->d1[0]\n+\t + ((uint32_t) x->d1[1] << 8)\n+\t + ((uint32_t) x->d1[2] << 16)\n+\t + ((uint32_t) x->d1[3] << 24));\n+  else\n+    {\n+      int32_t d;\n+      ((char *) &d)[0] = x->d1[0];\n+      ((char *) &d)[1] = x->d1[1];\n+      ((char *) &d)[2] = x->d1[2];\n+      ((char *) &d)[3] = x->d1[3];\n+      c = d;\n+    }\n+  b.b4 = 0;\n+  b.b1 = c / 10000L % 10000;\n+  b.b2 = c / 100 % 100;\n+  b.b3 = c % 100;\n+  foo (0, &b, y);\n+  return y;\n+}\n+\n+int\n+main (void)\n+{\n+  uint32_t x = 900070503;\n+  unsigned int y = 2;\n+  struct C c = { 0 }, *cptr = &c;\n+  struct D d = { (char *) &x, &cptr, 0 };\n+  if (test (&d, &y) != &y)\n+    abort ();\n+  return 0;\n+}"}]}