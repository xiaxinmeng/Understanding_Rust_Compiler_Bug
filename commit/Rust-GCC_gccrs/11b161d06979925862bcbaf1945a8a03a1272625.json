{"sha": "11b161d06979925862bcbaf1945a8a03a1272625", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiMTYxZDA2OTc5OTI1ODYyYmNiYWYxOTQ1YThhMDNhMTI3MjYyNQ==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2001-11-09T05:27:51Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2001-11-09T05:27:51Z"}, "message": "fold-const.c (lshift_double): Honor PREC.\n\n\t* fold-const.c (lshift_double): Honor PREC.\n\t(rshift_double): Likewise.\n\nFrom-SVN: r46872", "tree": {"sha": "5ea49b0b7937215806e9fc55e17820acf7ca6a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ea49b0b7937215806e9fc55e17820acf7ca6a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b161d06979925862bcbaf1945a8a03a1272625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b161d06979925862bcbaf1945a8a03a1272625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b161d06979925862bcbaf1945a8a03a1272625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b161d06979925862bcbaf1945a8a03a1272625/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "702020d6585adb08b31c395ece13c9120d865549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702020d6585adb08b31c395ece13c9120d865549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702020d6585adb08b31c395ece13c9120d865549"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "59f6cd6f117073b22cd743edda2d254b2290d3ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b161d06979925862bcbaf1945a8a03a1272625/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b161d06979925862bcbaf1945a8a03a1272625/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11b161d06979925862bcbaf1945a8a03a1272625", "patch": "@@ -1,3 +1,8 @@\n+Fri Nov  9 00:25:18 EST 2001  John Wehle  (john@feith.com)\n+\n+\t* fold-const.c (lshift_double): Honor PREC.\n+\t(rshift_double): Likewise.\n+\n 2001-11-08  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/1750a/1750a.c: Fix comment formatting."}, {"sha": "a60930bade610758be6eecaa6fe6a6e37b31379b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b161d06979925862bcbaf1945a8a03a1272625/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b161d06979925862bcbaf1945a8a03a1272625/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=11b161d06979925862bcbaf1945a8a03a1272625", "patch": "@@ -383,6 +383,8 @@ lshift_double (l1, h1, count, prec, lv, hv, arith)\n      HOST_WIDE_INT *hv;\n      int arith;\n {\n+  unsigned HOST_WIDE_INT signmask;\n+\n   if (count < 0)\n     {\n       rshift_double (l1, h1, -count, prec, lv, hv, arith);\n@@ -412,6 +414,26 @@ lshift_double (l1, h1, count, prec, lv, hv, arith)\n \t     | (l1 >> (HOST_BITS_PER_WIDE_INT - count - 1) >> 1));\n       *lv = l1 << count;\n     }\n+\n+  /* Sign extend all bits that are beyond the precision.  */\n+\n+  signmask = -((prec > HOST_BITS_PER_WIDE_INT\n+\t\t? (*hv >> (prec - HOST_BITS_PER_WIDE_INT - 1))\n+\t\t: (*lv >> (prec - 1))) & 1);\n+\n+  if (prec >= 2 * HOST_BITS_PER_WIDE_INT)\n+    ;\n+  else if (prec >= HOST_BITS_PER_WIDE_INT)\n+    {\n+      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - HOST_BITS_PER_WIDE_INT));\n+      *hv |= signmask << (prec - HOST_BITS_PER_WIDE_INT);\n+    }\n+  else\n+    {\n+      *hv = signmask;\n+      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << prec);\n+      *lv |= signmask << prec;\n+    }\n }\n \n /* Shift the doubleword integer in L1, H1 right by COUNT places\n@@ -423,7 +445,7 @@ void\n rshift_double (l1, h1, count, prec, lv, hv, arith)\n      unsigned HOST_WIDE_INT l1;\n      HOST_WIDE_INT h1, count;\n-     unsigned int prec ATTRIBUTE_UNUSED;\n+     unsigned int prec;\n      unsigned HOST_WIDE_INT *lv;\n      HOST_WIDE_INT *hv;\n      int arith;\n@@ -443,21 +465,40 @@ rshift_double (l1, h1, count, prec, lv, hv, arith)\n     {\n       /* Shifting by the host word size is undefined according to the\n \t ANSI standard, so we must handle this as a special case.  */\n-      *hv = signmask;\n-      *lv = signmask;\n+      *hv = 0;\n+      *lv = 0;\n     }\n   else if (count >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv = signmask;\n-      *lv = ((signmask << (2 * HOST_BITS_PER_WIDE_INT - count - 1) << 1)\n-\t     | ((unsigned HOST_WIDE_INT) h1 >> (count - HOST_BITS_PER_WIDE_INT)));\n+      *hv = 0;\n+      *lv = (unsigned HOST_WIDE_INT) h1 >> (count - HOST_BITS_PER_WIDE_INT);\n     }\n   else\n     {\n+      *hv = (unsigned HOST_WIDE_INT) h1 >> count;\n       *lv = ((l1 >> count)\n \t     | ((unsigned HOST_WIDE_INT) h1 << (HOST_BITS_PER_WIDE_INT - count - 1) << 1));\n-      *hv = ((signmask << (HOST_BITS_PER_WIDE_INT - count))\n-\t     | ((unsigned HOST_WIDE_INT) h1 >> count));\n+    }\n+\n+  /* Zero / sign extend all bits that are beyond the precision.  */\n+\n+  if (count >= (HOST_WIDE_INT)prec)\n+    {\n+      *hv = signmask;\n+      *lv = signmask;\n+    }\n+  else if ((prec - count) >= 2 * HOST_BITS_PER_WIDE_INT)\n+    ;\n+  else if ((prec - count) >= HOST_BITS_PER_WIDE_INT)\n+    {\n+      *hv &= ~((HOST_WIDE_INT) (-1) << (prec - count - HOST_BITS_PER_WIDE_INT));\n+      *hv |= signmask << (prec - count - HOST_BITS_PER_WIDE_INT);\n+    }\n+  else\n+    {\n+      *hv = signmask;\n+      *lv &= ~((unsigned HOST_WIDE_INT) (-1) << (prec - count));\n+      *lv |= signmask << (prec - count);\n     }\n }\n \f"}]}