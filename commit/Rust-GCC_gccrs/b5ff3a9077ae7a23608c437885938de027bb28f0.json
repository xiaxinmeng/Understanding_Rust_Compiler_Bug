{"sha": "b5ff3a9077ae7a23608c437885938de027bb28f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmZjNhOTA3N2FlN2EyMzYwOGM0Mzc4ODU5MzhkZTAyN2JiMjhmMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-12-19T08:18:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-12-19T08:18:14Z"}, "message": "documentation.html: Add link for debug.html.\n\n\n2002-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n \t* docs/html/documentation.html: Add link for debug.html.\n\t* docs/html/debug.html: New.\n\nFrom-SVN: r60302", "tree": {"sha": "d1cf7bdf7b149c17b77e4dedf061e35e3cc9dec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1cf7bdf7b149c17b77e4dedf061e35e3cc9dec2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ff3a9077ae7a23608c437885938de027bb28f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ff3a9077ae7a23608c437885938de027bb28f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ff3a9077ae7a23608c437885938de027bb28f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ff3a9077ae7a23608c437885938de027bb28f0/comments", "author": null, "committer": null, "parents": [{"sha": "c034372c80b3f5f8519c586ee292bad7ac0a64ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c034372c80b3f5f8519c586ee292bad7ac0a64ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c034372c80b3f5f8519c586ee292bad7ac0a64ed"}], "stats": {"total": 247, "additions": 242, "deletions": 5}, "files": [{"sha": "9378d5e7120627cadf92b5287c23510df2d12379", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ff3a9077ae7a23608c437885938de027bb28f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ff3a9077ae7a23608c437885938de027bb28f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b5ff3a9077ae7a23608c437885938de027bb28f0", "patch": "@@ -1,3 +1,8 @@\n+2002-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+ \t* docs/html/documentation.html: Add link for debug.html.\n+\t* docs/html/debug.html: New.\n+\t\n 2002-12-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* testsuite/23_containers/vector_capacity.cc (test03): Move ...\n@@ -189,14 +194,17 @@\n \tconst unsigned char*)): Fully qualify min() with std::.\n \t* include/bits/stl_bvector.h (_M_insert_range(iterator,\n \t_ForwardIterator, _ForwardIterator, forward_iterator_tag),\n-\t_M_assign_aux(_ForwardIterator, _ForwardIterator, forward_iterator_tag),\n+\t_M_assign_aux(_ForwardIterator, _ForwardIterator,\n+\tforward_iterator_tag),\n \t_M_initialize_range(_ForwardIterator, _ForwardIterator,\n \tforward_iterator_tag), _M_fill_insert(iterator, size_type, bool)):\n \tFully qualify distance() and max() with std::.\n-\t* include/bits/stl_deque.h (_Deque_base::_M_initialize_map(size_t),\n-\t_M_assign_aux(_ForwardIterator, _ForwardIterator, forward_iterator_tag)):\n-\tDitto.\n-\t* include/bits/stl_list.h (size()): Fully qualify distance() with std::.\n+\t* include/bits/stl_deque.h\n+\t(_Deque_base::_M_initialize_map(size_t),\n+\t_M_assign_aux(_ForwardIterator, _ForwardIterator,\n+\tforward_iterator_tag)):\n+\tDitto.  * include/bits/stl_list.h (size()): Fully qualify\n+\tdistance() with std::.\n \t* include/bits/stl_tempbuf.h (_Temporary_buffer::_Temporary_buffer\n \t(_ForwardIterator, _ForwardIterator)): Ditto.\n \t* include/bits/stl_tree.h (_Rb_tree::erase(const _Key&),"}, {"sha": "73d592ffc25e6a873ef0ee91fd2cad67c7ba4a77", "filename": "libstdc++-v3/docs/html/debug.html", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ff3a9077ae7a23608c437885938de027bb28f0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ff3a9077ae7a23608c437885938de027bb28f0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug.html?ref=b5ff3a9077ae7a23608c437885938de027bb28f0", "patch": "@@ -0,0 +1,228 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!DOCTYPE html\n+          PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n+<head>\n+   <meta name=\"AUTHOR\" content=\"bkoz@gcc.gnu.org (Benjamin Kosnik)\" />\n+   <meta name=\"KEYWORDS\" content=\"c++, libstdc++, gdb, g++, debug\" />\n+   <meta name=\"DESCRIPTION\" content=\"Debugging C++ binaries\" />\n+   <meta name=\"GENERATOR\" content=\"vi and ten fingers\" />\n+   <title>Debugging schemes and strategies</title>\n+<link rel=\"StyleSheet\" href=\"lib3styles.css\" />\n+</head>\n+<body>\n+\n+<h1 class=\"centered\"><a name=\"top\">Debugging schemes and strategies</a></h1>\n+\n+<p class=\"fineprint\"><em>\n+<p>The latest version of this document is always available at\n+   <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/debug.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/debug.html</a>.\n+</p>\n+\n+<p>To the <a href=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</a>.\n+</p>\n+</em></p>\n+\n+<!-- ####################################################### -->\n+<hr />\n+<p>\n+   There are numerous things that can be done to improve the ease with\n+   which C++ binaries are debugged when using the GNU C++\n+   tool chain. Here are some things to keep in mind when debugging C++\n+   code with GNU tools.\n+</p>\n+\n+<h3 class=\"left\"><a name=\"g++\">Compiler flags determine debug info</a></h3>\n+<p>\n+   The default optimizations and debug flags for a libstdc++ build are\n+   <code>-g -O2</code>. However, both debug and optimization flags can\n+   be varied to change debugging characteristics. For instance,\n+   turning off all optimization via the <code>-g -O0</code> flag will\n+   disable inlining, so that stepping through all functions, including\n+   inlined constructors and destructors, is possible. Or, the debug\n+   format that the compiler and debugger use to communicate\n+   information about source constructs can be changed via <code>\n+   -gdwarf-2 </code> or <code> -gstabs </code> flags: some debugging\n+   formats permit more expressive type and scope information to be\n+   shown in gdb.\n+   The default debug information for a particular platform can be\n+   identified via the value set by the PREFERRED_DEBUGGING_TYPE macro\n+   in the gcc sources.\n+</p>\n+\n+<p>\n+   Many other options are available: please see\n+<a href=http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging%20Options> \"Options for Debugging Your Program\" </a>\n+   in Using the GNU Compiler Collection (GCC) for a complete list.\n+</p>\n+\n+\n+<h3 class=\"left\"><a name=\"lib\">Using special flags to make a debug binary</a></h3>\n+<p>\n+   There are two ways to build libstdc++ with debug flags. The first\n+   is to run make from the toplevel in a freshly-configured tree with\n+   specialized debug <code>CXXFLAGS</code>, as in <dd> <code> make\n+   CXXFLAGS='-g3 -O0' all </code></dd>\n+</p>\n+\n+<p>\n+   This quick and dirty approach is often sufficient for quick\n+   debugging tasks, but the lack of state can be confusing in the long\n+   term.\n+</p>\n+\n+<p>\n+   A second approach is to use the configuration flags \n+</p>\n+\n+   <dd><code>--enable-debug  </code></dd>\n+\n+<p>\n+   and perhaps \n+</p>\n+\n+   <dd><code>--enable-debug-flags  </code></dd>\n+\n+<p>\n+   to create a separate debug build. Both the normal build and the\n+   debug build will persist, without having to specify\n+   <code>CXXFLAGS</code>, and the debug library will be installed in a\n+   separate directory tree, in <code>(prefix)/lib/debug</code>. For\n+   more information, look at the configuration options document \n+<a href=http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html> here</a>\n+</p>\n+\n+\n+<h3 class=\"left\"><a name=\"mem\">Tips for memory leak hunting</a></h3>\n+\n+<p>\n+   There are various third party memory tracing and debug utilities\n+   that can be used to provide detailed memory allocation information\n+   about C++ code. An exhaustive list of tools is not going to be\n+   attempted, but include <code>mtrace</code>, <code>valgrind</code>,\n+   <code>mudflap</code>, and <code>purify</code>. Also highly\n+   recommended are <code>libcwd</code> and some other one that I\n+   forget right now.\n+</p>\n+\n+<p>\n+   Regardless of the memory debugging tool being used, there is one\n+   thing of great importance to keep in mind when debugging C++ code\n+   that uses <code>new</code> and <code>delete</code>:\n+   there are different kinds of allocation schemes that can be used by\n+   <code> std::allocator </code>. For implementation details, see this\n+   <a href=http://gcc.gnu.org/onlinedocs/libstdc++/ext/howto.html#3>\n+   document </a> and look specifically for <code>GLIBCPP_FORCE_NEW</code>. \n+</p>\n+\n+<p>\n+   In a nutshell, the default allocator used by <code>\n+   std::allocator</code> is a high-performance pool allocator, and can\n+   give the mistaken impression that memory is being leaked, when in\n+   reality the memory is reclaimed after program termination.\n+</p>\n+\n+<p> For valgrind, there are some specific items to keep in mind. First\n+   of all, use a version of valgrind that will work with current GNU\n+   C++ tools: the first that can do this is valgrind 1.0.4, but later\n+   versions should work at least as well. Second of all, use a\n+   completely unoptimized build to avoid confusing valgrind. Third,\n+   use GLIBCPP_FORCE_NEW to keep extraneous pool allocation noise from\n+   cluttering debug information. \n+</p>\n+\n+<p>\n+   Fourth, it may be necessary to force deallocation in other\n+   libraries as well, namely the \"C\" library. On linux, this can be\n+   accomplished with the appropriate use of the\n+   <code>__cxa_atexit</code> or <code>atexit</code> functions.\n+</p>\n+\n+<pre>\n+   #include <cstdlib>\n+\n+   extern \"C\" void __libc_freeres(void);\n+\n+   void do_something() { }\n+\n+   int main()\n+   {\n+     atexit(__libc_freeres);\n+     do_test();\n+     return 0;\n+   }\n+</pre>\n+\n+\n+<p>\n+   or, using <code>__cxa_atexit</code>:\n+</p>\n+\n+<pre>\n+   extern \"C\" void __libc_freeres(void);\n+   extern \"C\" int __cxa_atexit(void (*func) (void *), void *arg, void *d);\n+\n+   void do_something() { }\n+\n+   int main()\n+   {\n+      extern void* __dso_handle __attribute__ ((__weak__));\n+      __cxa_atexit((void (*) (void *)) __libc_freeres, NULL, \n+\t           &__dso_handle ? __dso_handle : NULL);\n+      do_test();\n+      return 0;\n+   }\n+</pre>\n+\n+<p>\n+   Suggested valgrind flags, given the suggestions above about setting\n+   up the runtime environment, library, and test file, might be:\n+ \n+   <dd><code>valgrind -v --num-callers=20 --leak-check=yes\n+   --leak-resolution=high --show-reachable=yes a.out</code></dd>\n+</p>\n+\n+\n+<h3 class=\"left\"><a name=\"gdb\">Some gdb strategies</a></h3>\n+<p>\n+   Many options are available for gdb itself: please see <a\n+href=http://sources.redhat.com/gdb/current/onlinedocs/gdb_13.html#SEC109>\n+\"GDB features for C++\" </a> in the gdb documentation. Also\n+recommended: the other parts of this manual.\n+</p>\n+<p> \n+   These settings can either be switched on in at the gdb command\n+   line, or put into a .gdbint file to establish default debugging\n+   characteristics, like so:\n+</p>\n+\n+<pre>\n+   set print pretty on\n+   set print object on\n+   set print static-members on\n+   set print vtbl on\n+   set print demangle on\n+   set demangle-style gnu-v3\n+</pre>\n+\n+\n+<p>Return <a href=\"#top\">to the top of the page</a> or\n+   <a href=\"http://gcc.gnu.org/libstdc++/\">to the libstdc++ homepage</a>.\n+</p>\n+\n+\n+<!-- ####################################################### -->\n+\n+<hr />\n+<p class=\"fineprint\"><em>\n+See <a href=\"17_intro/license.html\">license.html</a> for copying conditions.\n+Comments and suggestions are welcome, and may be sent to\n+<a href=\"mailto:libstdc++@gcc.gnu.org\">the libstdc++ mailing list</a>.\n+</em></p>\n+\n+\n+</body>\n+</html>"}, {"sha": "d805c66ea9ee72bb2a0a222d08d16e870a88a540", "filename": "libstdc++-v3/docs/html/documentation.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ff3a9077ae7a23608c437885938de027bb28f0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ff3a9077ae7a23608c437885938de027bb28f0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdocumentation.html?ref=b5ff3a9077ae7a23608c437885938de027bb28f0", "patch": "@@ -47,6 +47,7 @@ <h2><a name=\"2\">Configuring, Building, Installing</a></h2>\n <ul>\n    <li><a href=\"configopts.html\">Configure options</a></li>\n    <li><a href=\"install.html\">Getting started: configure, build, install</a>\n+   <li><a href=\"debug.html\">Debugging schemes and strategies</a>\n    </li>\n </ul>\n "}]}