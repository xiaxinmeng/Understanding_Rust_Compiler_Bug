{"sha": "f4ea81123d3ff9daf97046a95b3a31a185501084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlYTgxMTIzZDNmZjlkYWY5NzA0NmE5NWIzYTMxYTE4NTUwMTA4NA==", "commit": {"author": {"name": "Sandeep Kumar Singh", "email": "Sandeep.Singh2@kpitcummins.com", "date": "2012-04-03T17:09:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2012-04-03T17:09:53Z"}, "message": "h8300.c (h8300_current_function_monitor_function_p): New function.\n\n\t* h8300/h8300.c (h8300_current_function_monitor_function_p):\n\tNew function. Added to check monitor functions. \n\t(h8300_option_override): Modified to generate error/warning \n\tmessages for invalid combinations of different command line \n\toptions.\n\t* h8300/h8300.md: Generate 'rte' for monitor functions. Do not\n\tsave EXR on stack for monitor function in case of H8S target \n\twhen \"-mno-exr\" is passed.\n\t* h8300/h8300-protos.h \n\t(h8300_current_function_monitor_function_p): Add prototype.\n\t* doc/invoke.texi: Document H8S options.\n\nFrom-SVN: r186109", "tree": {"sha": "b2edac3b6d3857700848f93e9ecf3f0664463d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2edac3b6d3857700848f93e9ecf3f0664463d49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ea81123d3ff9daf97046a95b3a31a185501084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ea81123d3ff9daf97046a95b3a31a185501084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ea81123d3ff9daf97046a95b3a31a185501084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ea81123d3ff9daf97046a95b3a31a185501084/comments", "author": {"login": "Sandy007", "id": 2338996, "node_id": "MDQ6VXNlcjIzMzg5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2338996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sandy007", "html_url": "https://github.com/Sandy007", "followers_url": "https://api.github.com/users/Sandy007/followers", "following_url": "https://api.github.com/users/Sandy007/following{/other_user}", "gists_url": "https://api.github.com/users/Sandy007/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sandy007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sandy007/subscriptions", "organizations_url": "https://api.github.com/users/Sandy007/orgs", "repos_url": "https://api.github.com/users/Sandy007/repos", "events_url": "https://api.github.com/users/Sandy007/events{/privacy}", "received_events_url": "https://api.github.com/users/Sandy007/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f6935f455d9bb51da4a3038c2f987d78b07fccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6935f455d9bb51da4a3038c2f987d78b07fccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6935f455d9bb51da4a3038c2f987d78b07fccb"}], "stats": {"total": 103, "additions": 94, "deletions": 9}, "files": [{"sha": "e1fc73b86fde05cbbc58322d041962fedac1cfcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4ea81123d3ff9daf97046a95b3a31a185501084", "patch": "@@ -1,3 +1,17 @@\n+2012-04-03  Sandeep Kumar Singh  <Sandeep.Singh2@kpitcummins.com>\n+\n+\t* h8300/h8300.c (h8300_current_function_monitor_function_p):\n+\tNew function. Added to check monitor functions. \n+\t(h8300_option_override): Modified to generate error/warning \n+\tmessages for invalid combinations of different command line \n+\toptions.\n+\t* h8300/h8300.md: Generate 'rte' for monitor functions. Do not\n+\tsave EXR on stack for monitor function in case of H8S target \n+\twhen \"-mno-exr\" is passed.\n+\t* h8300/h8300-protos.h \n+\t(h8300_current_function_monitor_function_p): Add prototype.\n+\t* doc/invoke.texi: Document H8S options.\n+\n 2012-04-03  Tristan Gingold  <gingold@adacore.com>\n \n \t* configure.ac: Use GCC_AC_FUNC_MMAP_BLACKLIST instead"}, {"sha": "428a86a316caeabbe9051b691575faf87cb73495", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=f4ea81123d3ff9daf97046a95b3a31a185501084", "patch": "@@ -96,6 +96,7 @@ extern int h8300_can_use_return_insn_p (void);\n extern void h8300_expand_prologue (void);\n extern void h8300_expand_epilogue (void);\n extern int h8300_current_function_interrupt_function_p (void);\n+extern int h8300_current_function_monitor_function_p (void);\n extern int h8300_initial_elimination_offset (int, int);\n extern int h8300_regs_ok_for_stm (int, rtx[]);\n extern int h8300_hard_regno_rename_ok (unsigned int, unsigned int);"}, {"sha": "7eaaf202f008449b8a83756b68652db68d0081f9", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f4ea81123d3ff9daf97046a95b3a31a185501084", "patch": "@@ -316,6 +316,14 @@ h8300_option_override (void)\n   static const char *const h8_pop_ops[2]  = { \"pop\"  , \"pop.l\"  };\n   static const char *const h8_mov_ops[2]  = { \"mov.w\", \"mov.l\"  };\n \n+#ifndef OBJECT_FORMAT_ELF\n+  if (TARGET_H8300SX)\n+    {\n+      error (\"-msx is not supported in coff\");\n+      target_flags |= MASK_H8300S;\n+    }\n+#endif\n+\n   if (TARGET_H8300)\n     {\n       cpu_type = (int) CPU_H8300;\n@@ -339,10 +347,34 @@ h8300_option_override (void)\n \n   if (TARGET_H8300 && TARGET_NORMAL_MODE)\n     {\n-      error (\"-mn is used without -mh or -ms\");\n+      error (\"-mn is used without -mh or -ms or -msx\");\n       target_flags ^= MASK_NORMAL_MODE;\n     }\n \n+  if (! TARGET_H8300S &&  TARGET_EXR)\n+    {\n+      error (\"-mexr is used without -ms\");\n+      target_flags |= MASK_H8300S_1;\n+    }\n+\n+  if (TARGET_H8300 && TARGET_INT32)\n+   {\n+      error (\"-mint32 is not supported for H8300 and H8300L targets\");\n+      target_flags ^= MASK_INT32;\n+   }\n+\n+ if ((!TARGET_H8300S  &&  TARGET_EXR) && (!TARGET_H8300SX && TARGET_EXR))\n+   {\n+      error (\"-mexr is used without -ms or -msx\");\n+      target_flags |= MASK_H8300S_1;\n+   }\n+\n+ if ((!TARGET_H8300S  &&  TARGET_NEXR) && (!TARGET_H8300SX && TARGET_NEXR))\n+   {\n+      warning (OPT_mno_exr, \"-mno-exr valid only with -ms or -msx    \\\n+               - Option ignored!\");\n+   }\n+\n   /* Some of the shifts are optimized for speed by default.\n      See http://gcc.gnu.org/ml/gcc-patches/2002-07/msg01858.html\n      If optimizing for size, change shift_alg for those shift to\n@@ -795,9 +827,9 @@ h8300_expand_prologue (void)\n     return;\n \n   if (h8300_monitor_function_p (current_function_decl))\n-    /* My understanding of monitor functions is they act just like\n-       interrupt functions, except the prologue must mask\n-       interrupts.  */\n+ /* The monitor function act as normal functions, which means it\n+    can accept parameters and return values. In addition to this, \n+    interrupts are masked in prologue and return with \"rte\" in epilogue. */\n     emit_insn (gen_monitor_prologue ());\n \n   if (frame_pointer_needed)\n@@ -925,8 +957,13 @@ h8300_expand_epilogue (void)\n int\n h8300_current_function_interrupt_function_p (void)\n {\n-  return (h8300_interrupt_function_p (current_function_decl)\n-\t  || h8300_monitor_function_p (current_function_decl));\n+  return (h8300_interrupt_function_p (current_function_decl));\n+}\n+\n+int\n+h8300_current_function_monitor_function_p ()\n+{\n+  return (h8300_monitor_function_p (current_function_decl));\n }\n \n /* Output assembly code for the start of the file.  */"}, {"sha": "df983e136348d2334c499c27f0a8d41019ebabdf", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=f4ea81123d3ff9daf97046a95b3a31a185501084", "patch": "@@ -2609,7 +2609,8 @@\n   {\n     operands[3] = SET_DEST (XVECEXP (operands[0], 0,\n \t\t\t\t     XVECLEN (operands[0], 0) - 2));\n-    if (h8300_current_function_interrupt_function_p ())\n+    if (h8300_current_function_interrupt_function_p ()\n+        || h8300_current_function_monitor_function_p ())\n       return \"rte/l\\t%S1-%S3\";\n     else\n       return \"rts/l\\t%S1-%S3\";\n@@ -2628,7 +2629,8 @@\n   \"reload_completed\"\n   \"*\n {\n-  if (h8300_current_function_interrupt_function_p ())\n+  if (h8300_current_function_interrupt_function_p ()\n+      || h8300_current_function_monitor_function_p ())\n     return \\\"rte\\\";\n   else\n     return \\\"rts\\\";\n@@ -2654,8 +2656,16 @@\n {\n   if (TARGET_H8300)\n     return \\\"subs\\\\t#2,r7\\;mov.w\\\\tr0,@-r7\\;stc\\\\tccr,r0l\\;mov.b\\tr0l,@(2,r7)\\;mov.w\\\\t@r7+,r0\\;orc\\t#128,ccr\\\";\n+  else if (TARGET_H8300H && TARGET_NORMAL_MODE)\n+    return \\\"subs\\\\t#2,er7\\;mov.l\\\\ter0,@-er7\\;stc\\\\tccr,r0l\\;mov.b\\\\tr0l,@(4,er7)\\;mov.l\\\\t@er7+,er0\\;orc\\\\t#128,ccr\\\";\n   else if (TARGET_H8300H)\n     return \\\"mov.l\\\\ter0,@-er7\\;stc\\\\tccr,r0l\\;mov.b\\\\tr0l,@(4,er7)\\;mov.l\\\\t@er7+,er0\\;orc\\\\t#128,ccr\\\";\n+  else if (TARGET_H8300S && TARGET_NEXR )\n+    return \\\"mov.l\\\\ter0,@-er7\\;stc\\tccr,r0l\\;mov.b\\tr0l,@(4,er7)\\;mov.l\\\\t@er7+,er0\\;orc\\t#128,ccr\\\"; \n+  else if (TARGET_H8300S && TARGET_NEXR && TARGET_NORMAL_MODE)\n+    return \\\"subs\\\\t#2,er7\\;mov.l\\\\ter0,@-er7\\;stc\\tccr,r0l\\;mov.b\\tr0l,@(4,er7)\\;mov.l\\\\t@er7+,er0\\;orc\\t#128,ccr\\\";\n+  else if (TARGET_H8300S && TARGET_NORMAL_MODE)\n+    return \\\"subs\\\\t#2,er7\\;stc\\texr,@-er7\\;mov.l\\\\ter0,@-er7\\;stc\\tccr,r0l\\;mov.b\\tr0l,@(6,er7)\\;mov.l\\\\t@er7+,er0\\;orc\\t#128,ccr\\\";\n   else if (TARGET_H8300S)\n     return \\\"stc\\texr,@-er7\\;mov.l\\\\ter0,@-er7\\;stc\\tccr,r0l\\;mov.b\\tr0l,@(6,er7)\\;mov.l\\\\t@er7+,er0\\;orc\\t#128,ccr\\\";\n   gcc_unreachable ();\n@@ -6199,3 +6209,5 @@\n    && !reg_overlap_mentioned_p (operands[0], operands[2])\"\n   [(set (match_dup 2)\n \t(match_dup 1))])\n+\t\n+"}, {"sha": "16c6ef5e029673a5e5070700e715294ee569d42a", "filename": "gcc/config/h8300/h8300.opt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fconfig%2Fh8300%2Fh8300.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.opt?ref=f4ea81123d3ff9daf97046a95b3a31a185501084", "patch": "@@ -60,3 +60,12 @@ Enable the normal mode\n malign-300\n Target RejectNegative Mask(ALIGN_300)\n Use H8/300 alignment rules\n+\n+mexr\n+Target Mask(EXR)\n+Push extended registers on stack in monitor functions\n+\n+mno-exr\n+Target Mask(NEXR)\n+Do not push extended registers on stack in monitor functions\n+"}, {"sha": "36d09cde9d3ca52b28c5e73c75bfb0ea02ecbfb7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ea81123d3ff9daf97046a95b3a31a185501084/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f4ea81123d3ff9daf97046a95b3a31a185501084", "patch": "@@ -596,7 +596,7 @@ Objective-C and Objective-C++ Dialects}.\n -tno-android-cc -tno-android-ld}\n \n @emph{H8/300 Options}\n-@gccoptlist{-mrelax  -mh  -ms  -mn  -mint32  -malign-300}\n+@gccoptlist{-mrelax  -mh  -ms  -mn  -mexr -mno-exr  -mint32  -malign-300}\n \n @emph{HPPA Options}\n @gccoptlist{-march=@var{architecture-type} @gol\n@@ -12815,6 +12815,18 @@ must be used either with @option{-mh} or @option{-ms}.\n @opindex ms2600\n Generate code for the H8S/2600.  This switch must be used with @option{-ms}.\n \n+@item -mexr\n+@opindex mexr\n+Extended registers are stored on stack before execution of function\n+with monitor attribute. Default option is @option{-mexr}.\n+This option is valid only for H8S targets.\n+\n+@item -mno-exr\n+@opindex mno-exr\n+Extended registers are not stored on stack before execution of function \n+with monitor attribute. Default option is @option{-mno-exr}. \n+This option is valid only for H8S targets.\n+\n @item -mint32\n @opindex mint32\n Make @code{int} data 32 bits by default."}]}