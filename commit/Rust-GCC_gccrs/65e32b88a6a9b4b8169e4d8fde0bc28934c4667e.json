{"sha": "65e32b88a6a9b4b8169e4d8fde0bc28934c4667e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlMzJiODhhNmE5YjRiODE2OWU0ZDhmZGUwYmMyODkzNGM0NjY3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-04T23:22:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-04T23:22:18Z"}, "message": "std_limits.h (__glibcpp_f32_infinity_bytes, [...]): Remove.\n\n        * include/std/std_limits.h (__glibcpp_f32_infinity_bytes,\n        __glibcpp_f32_has_infinity, __glibcpp_f64_infinity_bytes,\n        __glibcpp_f64_has_infinity, __glibcpp_f80_infinity_bytes,\n        __glibcpp_f80_has_infinity, __glibcpp_f96_infinity_bytes,\n        __glibcpp_f96_has_infinity, __glibcpp_f128_infinity_bytes,\n        __glibcpp_f128_has_infinity, __glibcpp_float_infinity_bytes,\n        __glibcpp_float_has_infinity, __glibcpp_double_infinity_bytes,\n        __glibcpp_double_has_infinity, __glibcpp_long_double_infinity_bytes,\n        __glibcpp_long_double_has_infinity): Remove.\n        (std::numeric_limits<float>, std::numeric_limits<double>,\n        std::numeric_limits<long double>): Use __builtin_huge_val\n        to implement has_infinity and infinity().\n        * src/limits.cc (__glibcpp_float_infinity, __glibcpp_double_infinity,\n        __glibcpp_long_double_infinity): Remove.\n\nFrom-SVN: r56821", "tree": {"sha": "565637e91008ee2392bcc6bc256215a0a1177d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/565637e91008ee2392bcc6bc256215a0a1177d2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e/comments", "author": null, "committer": null, "parents": [{"sha": "ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab5e26156fb28eb59e0a259ccb0ab49485a1b94c"}], "stats": {"total": 120, "additions": 26, "deletions": 94}, "files": [{"sha": "702cb67041ed6080445275775e8e1546f7ac286b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=65e32b88a6a9b4b8169e4d8fde0bc28934c4667e", "patch": "@@ -1,3 +1,20 @@\n+2002-09-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* include/std/std_limits.h (__glibcpp_f32_infinity_bytes,\n+\t__glibcpp_f32_has_infinity, __glibcpp_f64_infinity_bytes,\n+\t__glibcpp_f64_has_infinity, __glibcpp_f80_infinity_bytes,\n+\t__glibcpp_f80_has_infinity, __glibcpp_f96_infinity_bytes,\n+\t__glibcpp_f96_has_infinity, __glibcpp_f128_infinity_bytes,\n+\t__glibcpp_f128_has_infinity, __glibcpp_float_infinity_bytes,\n+\t__glibcpp_float_has_infinity, __glibcpp_double_infinity_bytes,\n+\t__glibcpp_double_has_infinity, __glibcpp_long_double_infinity_bytes,\n+\t__glibcpp_long_double_has_infinity): Remove.\n+\t(std::numeric_limits<float>, std::numeric_limits<double>,\n+\tstd::numeric_limits<long double>): Use __builtin_huge_val\n+\tto implement has_infinity and infinity().\n+\t* src/limits.cc (__glibcpp_float_infinity, __glibcpp_double_infinity,\n+\t__glibcpp_long_double_infinity): Remove.\n+\n 2002-09-03  Richard Henderson  <rth@redhat.com>\n \n \t* include/std/std_limits.h (__glibcpp_f32_min, __glibcpp_f32_max,"}, {"sha": "320c3ab10c90d62635a8acbff160e728a9b8b393", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 9, "deletions": 88, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=65e32b88a6a9b4b8169e4d8fde0bc28934c4667e", "patch": "@@ -152,8 +152,6 @@\n \n #define __glibcpp_f32_round_error 1.0F\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n-#  define __glibcpp_f32_infinity_bytes { 0x7f800000 }\n-#  define __glibcpp_f32_has_infinity true\n #  define __glibcpp_f32_QNaN_bytes { 0x7fc00000 }\n #  define __glibcpp_f32_has_QNaN true\n #  define __glibcpp_f32_SNaN_bytes { 0x7f800001 }\n@@ -162,10 +160,6 @@\n #  define __glibcpp_f32_has_denorm denorm_present\n #  define __glibcpp_f32_is_iec559  true\n #endif\n-#ifndef __glibcpp_f32_infinity_bytes\n-#  define __glibcpp_f32_infinity_bytes { }\n-#  define __glibcpp_f32_has_infinity false\n-#endif\n #ifndef __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_f32_QNaN_bytes { }\n #  define __glibcpp_f32_has_QNaN false\n@@ -184,26 +178,19 @@\n #define __glibcpp_f64_round_error 1.0\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n-#    define __glibcpp_f64_infinity_bytes { 0x7ff00000, 0x0 }\n #    define __glibcpp_f64_QNaN_bytes { 0x7ff80000, 0x0 }\n #    define __glibcpp_f64_SNaN_bytes { 0x7ff00000, 0x1 }\n #    define __glibcpp_f64_denorm_min_bytes { 0x0, 0x1 }\n #  else\n-#    define __glibcpp_f64_infinity_bytes { 0x0, 0x7ff00000 }\n #    define __glibcpp_f64_QNaN_bytes { 0x0, 0x7ff80000 }\n #    define __glibcpp_f64_SNaN_bytes { 0x1, 0x7ff00000 }\n #    define __glibcpp_f64_denorm_min_bytes { 0x1, 0x0 }\n #  endif\n-#  define __glibcpp_f64_has_infinity true\n #  define __glibcpp_f64_has_QNaN true\n #  define __glibcpp_f64_has_SNaN true\n #  define __glibcpp_f64_has_denorm denorm_present\n #  define __glibcpp_f64_is_iec559 true\n #endif\n-#ifndef __glibcpp_f64_infinity_bytes\n-#  define __glibcpp_f64_infinity_bytes { }\n-#  define __glibcpp_f64_has_infinity false\n-#endif\n #ifndef __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_f64_QNaN_bytes { }\n #  define __glibcpp_f64_has_QNaN false\n@@ -222,34 +209,25 @@\n #define __glibcpp_f80_round_error 1.0L\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_BYTES_ORDER__ == __GCC_BIG_ENDIAN__\n-#    define __glibcpp_f80_infinity_bytes   \\\n-       { 0x7f, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n #    define __glibcpp_f80_QNaN_bytes       \\\n        { 0x7f, 0xff, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n #    define __glibcpp_f80_SNaN_bytes       \\\n        { 0x7f, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 }\n #    define __glibcpp_f80_denorm_min_bytes \\\n        { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 }\n #  else\n-#    define __glibcpp_f80_infinity_bytes   \\\n-       { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xff, 0x7f }\n #    define __glibcpp_f80_QNaN_bytes       \\\n        { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC0, 0xff, 0x7f }\n #    define __glibcpp_f80_SNaN_bytes       \\\n        { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xff, 0x7f }\n #    define __glibcpp_f80_denorm_min_bytes \\\n        { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n #  endif\n-#  define __glibcpp_f80_has_infinity true\n #  define __glibcpp_f80_has_QNaN true\n #  define __glibcpp_f80_has_SNaN true\n #  define __glibcpp_f80_has_denorm denorm_present\n #  define __glibcpp_f80_is_iec559 true\n #endif\n-#ifndef __glibcpp_f80_infinity_bytes\n-#  define __glibcpp_f80_infinity_bytes { }\n-#  define __glibcpp_f80_has_infinity false\n-#endif\n #ifndef __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_f80_QNaN_bytes { }\n #  define __glibcpp_f80_has_QNaN false\n@@ -268,26 +246,19 @@\n #define __glibcpp_f96_round_error 1.0L\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_BYTES_ORDER__ == __GCC_BIG_ENDIAN__\n-#    define __glibcpp_f96_infinity_bytes { 0x7ff0000, 0x0, 0x0 } \n #    define __glibcpp_f96_QNaN_bytes { 0x7ff80000, 0x0, 0x0 }\n #    define __glibcpp_f96_SNaN_bytes { 0x7ff00000, 0x0, 0x1 }\n #    define __glibcpp_f96_denorm_min_bytes { 0x0, 0x0, 0x1 }\n #  else\n-#    define __glibcpp_f96_infinity_bytes { 0x0, 0x0, 0x7ff0000 }\n #    define __glibcpp_f96_QNaN_bytes { 0x0, 0x0, 0x7ff80000 }\n #    define __glibcpp_f96_SNaN_bytes { 0x1, 0x0, 0x7ff00000 }\n #    define __glibcpp_f96_denorm_min_bytes { 0x1, 0x0, 0x0 }\n #  endif\n-#  define __glibcpp_f96_has_infinity true\n #  define __glibcpp_f96_has_QNaN true\n #  define __glibcpp_f96_has_SNaN true\n #  define __glibcpp_f96_has_denorm denorm_present\n #  define __glibcpp_f96_is_iec559 true\n #endif\n-#ifndef __glibcpp_f96_infinity_bytes\n-#  define __glibcpp_f96_infinity_bytes { }\n-#  define __glibcpp_f96_has_infinity false\n-#endif\n #ifndef __glibcpp_f96_QNaN_bytes\n #  define __glibcpp_f96_QNaN_bytes { }\n #  define __glibcpp_f96_has_QNaN false\n@@ -303,25 +274,18 @@\n #define __glibcpp_f128_round_error 1.0L\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n-#    define __glibcpp_f128_infinity_bytes { 0x7fff0000, 0x0, 0x0, 0x0 }\n #    define __glibcpp_f128_QNaN_bytes { 0x7fff0800, 0x0, 0x0, 0x0 }\n #    define __glibcpp_f128_SNaN_bytes { 0x7fff0000, 0x0, 0x0, 0x1 }\n #    define __glibcpp_f128_denorm_min_bytes { 0x0, 0x0, 0x0, 0x1 }\n #  else\n-#    define __glibcpp_f128_infinity_bytes { 0x0, 0x0, 0x0, 0x7fff0000 }\n #    define __glibcpp_f128_QNaN_bytes { 0x0, 0x0, 0x0, 0x7fff0800 }\n #    define __glibcpp_f128_SNaN_bytes { 0x1, 0x0, 0x0, 0x7fff0000 }\n #    define __glibcpp_f128_denorm_min_bytes { 0x1, 0x0, 0x0, 0x0 }\n #  endif\n-#  define __glibcpp_f128_has_infinity true\n #  define __glibcpp_f128_has_QNaN true\n #  define __glibcpp_f128_has_SNaN true\n #  define __glibcpp_f128_has_denorm denorm_present\n #endif\n-#ifndef __glibcpp_f128_infinity_bytes\n-#  define __glibcpp_f128_infinity_bytes { }\n-#  define __glibcpp_f128_has_infinity false\n-#endif\n #ifndef __glibcpp_f128_QNaN_bytes\n #  define __glibcpp_f128_QNaN_bytes { }\n #  define __glibcpp_f128_has_QNaN false\n@@ -659,33 +623,27 @@\n \n #if __FLOAT_BIT__ == 32\n #  define __glibcpp_float_round_error __glibcpp_f32_round_error\n-#  define __glibcpp_float_infinity_bytes __glibcpp_f32_infinity_bytes\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f32_SNaN_bytes\n #  define __glibcpp_float_denorm_min_bytes  __glibcpp_f32_denorm_min_bytes\n-#  define __glibcpp_float_has_infinity __glibcpp_f32_has_infinity\n #  define __glibcpp_float_has_QNaN __glibcpp_f32_has_QNaN\n #  define __glibcpp_float_has_SNaN __glibcpp_f32_has_SNaN\n #  define __glibcpp_float_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f32_is_iec559\n #elif __FLOAT_BIT__ == 64\n #  define __glibcpp_float_round_error __glibcpp_f64_round_error\n-#  define __glibcpp_float_infinity_bytes __glibcpp_f64_infinity_bytes\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f64_SNaN_bytes\n #  define __glibcpp_float_denorm_min_bytes  __glibcpp_f64_denorm_min_bytes\n-#  define __glibcpp_float_has_infinity __glibcpp_f64_has_infinity\n #  define __glibcpp_float_has_QNaN __glibcpp_f64_has_QNaN\n #  define __glibcpp_float_has_SNaN __glibcpp_f64_has_SNaN\n #  define __glibcpp_float_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f64_is_iec559\n #elif __FLOAT_BIT__ == 80\n #  define __glibcpp_float_round_error __glibcpp_f80_round_error\n-#  define __glibcpp_float_infinity_bytes __glibcpp_f80_infinity_bytes\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f80_SNaN_bytes\n #  define __glibcpp_float_denorm_min_bytes  __glibcpp_f80_denorm_min_bytes\n-#  define __glibcpp_float_has_infinity __glibcpp_f80_has_infinity\n #  define __glibcpp_float_has_QNaN __glibcpp_f80_has_QNaN\n #  define __glibcpp_float_has_SNaN __glibcpp_f80_has_SNaN\n #  define __glibcpp_float_has_denorm __glibcpp_f80_has_denorm\n@@ -696,11 +654,6 @@\n \n // Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_float_infinity_bytes\n-#  define __glibcpp_float_infinity_bytes { }\n-#  define __glibcpp_float_has_infinty false\n-#endif\n-\n #ifndef __glibcpp_float_QNaN_bytes\n #  define __glibcpp_float_QNaN_bytes { }\n #  define __glibcpp_float_has_QNaN false\n@@ -748,33 +701,27 @@\n \n #if __DOUBLE_BIT__ == 32\n #  define __glibcpp_double_round_error __glibcpp_f32_round_error\n-#  define __glibcpp_double_infinity_bytes __glibcpp_f32_infinity_bytes\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n #  define __glibcpp_double_denorm_min_bytes __glibcpp_f32_denorm_min_bytes\n-#  define __glibcpp_double_has_infinity __glibcpp_f32_has_infinity\n #  define __glibcpp_double_has_QNaN __glibcpp_f32_has_QNaN\n #  define __glibcpp_double_has_SNaN __glibcpp_f32_has_SNaN\n #  define __glibcpp_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __DOUBLE_BIT__ == 64\n #  define __glibcpp_double_round_error __glibcpp_f64_round_error\n-#  define __glibcpp_double_infinity_bytes __glibcpp_f64_infinity_bytes\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n #  define __glibcpp_double_denorm_min_bytes __glibcpp_f64_denorm_min_bytes\n-#  define __glibcpp_double_has_infinity __glibcpp_f64_has_infinity\n #  define __glibcpp_double_has_QNaN __glibcpp_f64_has_QNaN\n #  define __glibcpp_double_has_SNaN __glibcpp_f64_has_SNaN\n #  define __glibcpp_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __DOUBLE_BIT__ == 80\n #  define __glibcpp_double_round_error __glibcpp_f80_round_error\n-#  define __glibcpp_double_infinity_bytes __glibcpp_f80_infinity_bytes\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n #  define __glibcpp_double_denorm_min_bytes __glibcpp_f80_denorm_min_bytes\n-#  define __glibcpp_double_has_infinity __glibcpp_f80_has_infinity\n #  define __glibcpp_double_has_QNaN __glibcpp_f80_has_QNaN\n #  define __glibcpp_double_has_SNaN __glibcpp_f80_has_SNaN\n #  define __glibcpp_double_has_denorm __glibcpp_f80_has_denorm\n@@ -785,11 +732,6 @@\n \n // Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_double_infinity_bytes\n-#  define __glibcpp_double_infinity_bytes { }\n-#  define __glibcpp_double_has_infinty false\n-#endif\n-\n #ifndef __glibcpp_double_QNaN_bytes\n #  define __glibcpp_double_QNaN_bytes { }\n #  define __glibcpp_double_has_QNaN false\n@@ -837,55 +779,45 @@\n \n #if __LONG_DOUBLE_BIT__ == 32\n #  define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n-#  define __glibcpp_long_double_infinity_bytes __glibcpp_f32_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n #  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f32_denorm_min_bytes\n-#  define __glibcpp_long_double_has_infinity __glibcpp_f32_has_infinity\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f32_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f32_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 64\n #  define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n-#  define __glibcpp_long_double_infinity_bytes __glibcpp_f64_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n #  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f64_denorm_min_bytes\n-#  define __glibcpp_long_double_has_infinity __glibcpp_f64_has_infinity\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f64_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f64_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 80\n #  define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n-#  define __glibcpp_long_double_infinity_bytes __glibcpp_f80_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n #  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f80_denorm_min_bytes\n-#  define __glibcpp_long_double_has_infinity __glibcpp_f80_has_infinity\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f80_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f80_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f80_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f80_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 96\n #  define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n-#  define __glibcpp_long_double_infinity_bytes __glibcpp_f96_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f96_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f96_SNaN_bytes\n #  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f96_denorm_min_bytes\n-#  define __glibcpp_long_double_has_infinity __glibcpp_f96_has_infinity\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f96_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f96_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f96_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f96_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 128\n #  define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n-#  define __glibcpp_long_double_infinity_bytes __glibcpp_f128_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f128_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f128_SNaN_bytes\n #  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f128_denorm_min_bytes\n-#  define __glibcpp_long_double_has_infinity __glibcpp_f128_has_infinity\n #  define __glibcpp_long_double_has_QNaN __glibcpp_f128_has_QNaN\n #  define __glibcpp_long_double_has_SNaN __glibcpp_f128_has_SNaN\n #  define __glibcpp_long_double_has_denorm __glibcpp_f128_has_denorm\n@@ -896,11 +828,6 @@\n \n // Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_long_double_infinity_bytes\n-#  define __glibcpp_long_double_infinity_bytes { }\n-#  define __glibcpp_long_double_has_infinty false\n-#endif\n-\n #ifndef __glibcpp_long_double_QNaN_bytes\n #  define __glibcpp_long_double_QNaN_bytes { }\n #  define __glibcpp_long_double_has_QNaN false\n@@ -989,17 +916,14 @@ namespace std\n #endif  \n     __attribute__((__aligned__(__alignof__(long double))));\n \n-  extern const __float_storage __glibcpp_float_infinity;\n   extern const __float_storage __glibcpp_float_QNaN;\n   extern const __float_storage __glibcpp_float_SNaN;\n   extern const __float_storage __glibcpp_float_denorm_min;\n   \n-  extern const __double_storage __glibcpp_double_infinity;\n   extern const __double_storage __glibcpp_double_QNaN;\n   extern const __double_storage __glibcpp_double_SNaN;\n   extern const __double_storage __glibcpp_double_denorm_min;\n \n-  extern const __long_double_storage __glibcpp_long_double_infinity;\n   extern const __long_double_storage __glibcpp_long_double_QNaN;\n   extern const __long_double_storage __glibcpp_long_double_SNaN;\n   extern const __long_double_storage __glibcpp_long_double_denorm_min;\n@@ -1830,14 +1754,15 @@ namespace std\n       static const int max_exponent = __FLT_MAX_EXP__;\n       static const int max_exponent10 = __FLT_MAX_10_EXP__;\n \n-      static const bool has_infinity = __glibcpp_float_has_infinity;\n+      static const bool has_infinity\n+\t= __builtin_huge_valf () / 2 == __builtin_huge_valf ();\n       static const bool has_quiet_NaN = __glibcpp_float_has_QNaN;\n       static const bool has_signaling_NaN = __glibcpp_float_has_SNaN;\n       static const float_denorm_style has_denorm = __glibcpp_float_has_denorm;\n       static const bool has_denorm_loss = __glibcpp_float_has_denorm_loss;\n \n       static float infinity() throw()\n-      { return *reinterpret_cast<const float*>(__glibcpp_float_infinity); }\n+      { return __builtin_huge_valf (); }\n       static float quiet_NaN() throw()\n       { return *reinterpret_cast<const float*>(__glibcpp_float_QNaN); }\n       static float signaling_NaN() throw()\n@@ -1855,7 +1780,6 @@ namespace std\n     };\n \n #undef __glibcpp_float_round_error\n-#undef __glibcpp_float_has_infinity\n #undef __glibcpp_float_has_QNaN\n #undef __glibcpp_float_has_SNaN\n #undef __glibcpp_float_has_denorm\n@@ -1893,15 +1817,16 @@ namespace std\n       static const int max_exponent = __DBL_MAX_EXP__;\n       static const int max_exponent10 = __DBL_MAX_10_EXP__;\n \n-      static const bool has_infinity = __glibcpp_double_has_infinity;\n+      static const bool has_infinity\n+\t= __builtin_huge_val () / 2 == __builtin_huge_val ();\n       static const bool has_quiet_NaN = __glibcpp_double_has_QNaN;\n       static const bool has_signaling_NaN = __glibcpp_double_has_SNaN;\n       static const float_denorm_style has_denorm =\n               __glibcpp_double_has_denorm;\n       static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;\n \n       static double infinity() throw()\n-      { return *reinterpret_cast<const double*>(__glibcpp_double_infinity); }\n+      { return __builtin_huge_val(); }\n       static double quiet_NaN() throw()\n       { return *reinterpret_cast<const double*>(__glibcpp_double_QNaN); }\n       static double signaling_NaN() throw()\n@@ -1920,7 +1845,6 @@ namespace std\n     };\n \n #undef __glibcpp_double_round_error\n-#undef __glibcpp_double_has_infinity\n #undef __glibcpp_double_has_QNaN\n #undef __glibcpp_double_has_SNaN\n #undef __glibcpp_double_has_denorm\n@@ -1959,7 +1883,8 @@ namespace std\n       static const int max_exponent = __LDBL_MAX_EXP__;\n       static const int max_exponent10 = __LDBL_MAX_10_EXP__;\n \n-      static const bool has_infinity = __glibcpp_long_double_has_infinity;\n+      static const bool has_infinity\n+\t= __builtin_huge_vall () / 2 == __builtin_huge_vall ();\n       static const bool has_quiet_NaN = __glibcpp_long_double_has_SNaN;\n       static const bool has_signaling_NaN = __glibcpp_long_double_has_SNaN;\n       static const float_denorm_style has_denorm =\n@@ -1968,10 +1893,7 @@ namespace std\n                 __glibcpp_long_double_has_denorm_loss;\n \n       static long double infinity() throw()\n-      {\n-        return *reinterpret_cast<const long double*>\n-          (__glibcpp_long_double_infinity);\n-      } \n+      { return __builtin_huge_vall (); } \n \n       static long double quiet_NaN() throw()\n       {\n@@ -2002,7 +1924,6 @@ namespace std\n     };\n \n #undef __glibcpp_long_double_round_error\n-#undef __glibcpp_long_double_has_infinity\n #undef __glibcpp_long_double_has_QNaN\n #undef __glibcpp_long_double_has_SNaN\n #undef __glibcpp_long_double_has_denorm"}, {"sha": "9c5aabb6a0a2b6abf3fcd85d01ba5c86265c13a9", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e32b88a6a9b4b8169e4d8fde0bc28934c4667e/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=65e32b88a6a9b4b8169e4d8fde0bc28934c4667e", "patch": "@@ -38,22 +38,16 @@\n \n namespace std \n {\n-  const __float_storage __glibcpp_float_infinity =\n-    __glibcpp_float_infinity_bytes;\n   const __float_storage __glibcpp_float_QNaN = __glibcpp_float_QNaN_bytes;\n   const __float_storage __glibcpp_float_SNaN = __glibcpp_float_SNaN_bytes;\n   const __float_storage __glibcpp_float_denorm_min =\n     __glibcpp_float_denorm_min_bytes;\n \n-  const __double_storage __glibcpp_double_infinity =\n-    __glibcpp_double_infinity_bytes;\n   const __double_storage __glibcpp_double_QNaN = __glibcpp_double_QNaN_bytes;\n   const __double_storage __glibcpp_double_SNaN = __glibcpp_double_SNaN_bytes;\n   const __double_storage __glibcpp_double_denorm_min =\n     __glibcpp_double_denorm_min_bytes;\n \n-  const __long_double_storage __glibcpp_long_double_infinity =\n-    __glibcpp_long_double_infinity_bytes;\n   const __long_double_storage __glibcpp_long_double_QNaN =\n     __glibcpp_long_double_QNaN_bytes;\n   const __long_double_storage __glibcpp_long_double_SNaN ="}]}