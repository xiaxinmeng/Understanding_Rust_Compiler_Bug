{"sha": "b6f517556c28d471237718e472f0c49fef99804d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmNTE3NTU2YzI4ZDQ3MTIzNzcxOGU0NzJmMGM0OWZlZjk5ODA0ZA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-10-25T14:23:31Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2018-10-25T14:23:31Z"}, "message": "S/390: Merge movdi_larl into movdi_64\n\nConsider the following RTL:\n\n(insn (set (mem/f/c:DI (reg/f:DI 60))\n           (const:DI (plus:DI (symbol_ref:DI (\"*.LANCHOR0\"))\n                              (const_int 8)))))\n\ngenerated by cse2 pass.  It is matched to movdi_64, resulting in\nthe following inefficient code:\n\n\tlarl\t%r5,.L6\t\t\t# Load literal pool@\n\tlg\t%r1,.L7-.L6(%r5)\t# Load .LANCHOR0+8\n\tstgrl\t%r1,.LANCHOR0\n\tbr\t%r14\n\nMatching it to movdi_larl improves the code, eliminating one\ninstruction and the literal pool entry:\n\n\tlarl\t%r1,.LANCHOR0+8\n\tstgrl\t%r1,.LANCHOR0\n\tbr\t%r14\n\nTaking it one step further, there is no reason to keep movdi_64 and\nmovdi_larl separate, since this could potentially improve code in other\nways by giving lra one more alternative to choose from.\n\ngcc/ChangeLog:\n\n2018-10-25  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/constraints.md (ZL): New constraint.\n\t* config/s390/s390.c (legitimate_pic_operand_p): Accept LARL\n\toperands.\n\t* config/s390/s390.md (movdi_larl): Remove.\n\t(movdi_64): Add the LARL alternative.\n\ngcc/testsuite/ChangeLog:\n\n2018-10-25  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/global-array-almost-huge-element.c: New test.\n\t* gcc.target/s390/global-array-almost-negative-huge-element.c: New test.\n\t* gcc.target/s390/global-array-element-pic.c: New test.\n\t* gcc.target/s390/global-array-even-element.c: New test.\n\t* gcc.target/s390/global-array-huge-element.c: New test.\n\t* gcc.target/s390/global-array-negative-huge-element.c: New test.\n\t* gcc.target/s390/global-array-odd-element.c: New test.\n\nFrom-SVN: r265490", "tree": {"sha": "e6d3ba00618a1f516668784acf1579b0178d2e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6d3ba00618a1f516668784acf1579b0178d2e1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6f517556c28d471237718e472f0c49fef99804d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f517556c28d471237718e472f0c49fef99804d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6f517556c28d471237718e472f0c49fef99804d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f517556c28d471237718e472f0c49fef99804d/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dd7c0dcd87c86aad3d2cd45a08798eb445a9d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd7c0dcd87c86aad3d2cd45a08798eb445a9d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd7c0dcd87c86aad3d2cd45a08798eb445a9d3c"}], "stats": {"total": 139, "additions": 122, "deletions": 17}, "files": [{"sha": "22db60649df8952345d1c01efd16d35d60be56e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -3,6 +3,14 @@\n \t* tree-if-conv.c: Include tree-ssa-sccvn.h.\n \t(tree_if_conversion): Run CSE on the if-converted loop body.\n \n+2018-10-25  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/constraints.md (ZL): New constraint.\n+\t* config/s390/s390.c (legitimate_pic_operand_p): Accept LARL\n+\toperands.\n+\t* config/s390/s390.md (movdi_larl): Remove.\n+\t(movdi_64): Add the LARL alternative.\n+\n 2018-10-25  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \tPR bootstrap/87747"}, {"sha": "63c7fd368bec334ba6288a4dce17ef4f5a25a894", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -89,6 +89,7 @@\n ;;    ZR -- Pointer with index register and short displacement.\n ;;    ZS -- Pointer without index register but with long displacement.\n ;;    ZT -- Pointer with index register and long displacement.\n+;;    ZL -- LARL operand when in 64-bit mode, otherwise nothing.\n ;;\n ;;\n \n@@ -562,3 +563,7 @@\n (define_address_constraint \"ZT\"\n   \"Pointer with index register and long displacement.\"\n   (match_test \"s390_mem_constraint (\\\"ZT\\\", op)\"))\n+\n+(define_constraint \"ZL\"\n+  \"LARL operand when in 64-bit mode, otherwise nothing.\"\n+  (match_test \"TARGET_64BIT && larl_operand (op, VOIDmode)\"))"}, {"sha": "762c6bff07ba22dac44604560f561169f6e20b4b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -3859,6 +3859,10 @@ legitimate_pic_operand_p (rtx op)\n   if (!SYMBOLIC_CONST (op))\n     return 1;\n \n+  /* Accept addresses that can be expressed relative to (pc).  */\n+  if (larl_operand (op, VOIDmode))\n+    return 1;\n+\n   /* Reject everything else; must be handled\n      via emit_symbolic_move.  */\n   return 0;"}, {"sha": "e4049c254063d452087e6659d6798e3c0dbcc0a2", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -1729,21 +1729,11 @@\n     emit_symbolic_move (operands);\n })\n \n-(define_insn \"*movdi_larl\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (match_operand:DI 1 \"larl_operand\" \"X\"))]\n-  \"TARGET_64BIT\n-   && !FP_REG_P (operands[0])\"\n-  \"larl\\t%0,%1\"\n-   [(set_attr \"op_type\" \"RIL\")\n-    (set_attr \"type\"    \"larl\")\n-    (set_attr \"z10prop\" \"z10_super_A1\")])\n-\n (define_insn \"*movdi_64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-         \"=d,    d,    d,    d,    d, d,    d,    d,f,d,d,d,d,d,T,!*f,!*f,!*f,!R,!T,b,Q,d,t,Q,t,v,v,v,d,v,R\")\n+         \"=d,    d,    d,    d,    d, d,    d,    d,f,d,d,d,d,d,T,!*f,!*f,!*f,!R,!T,b,Q,d,t,Q,t,v,v,v,d,v,R,d\")\n         (match_operand:DI 1 \"general_operand\"\n-         \" K,N0HD0,N1HD0,N2HD0,N3HD0,Os,N0SD0,N1SD0,d,f,L,b,d,T,d, *f,  R,  T,*f,*f,d,K,t,d,t,Q,K,v,d,v,R,v\"))]\n+         \" K,N0HD0,N1HD0,N2HD0,N3HD0,Os,N0SD0,N1SD0,d,f,L,b,d,T,d, *f,  R,  T,*f,*f,d,K,t,d,t,Q,K,v,d,v,R,v,ZL\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    lghi\\t%0,%h1\n@@ -1777,15 +1767,17 @@\n    vlvgg\\t%v0,%1,0\n    vlgvg\\t%0,%v1,0\n    vleg\\t%v0,%1,0\n-   vsteg\\t%v1,%0,0\"\n+   vsteg\\t%v1,%0,0\n+   larl\\t%0,%1\"\n   [(set_attr \"op_type\" \"RI,RI,RI,RI,RI,RIL,RIL,RIL,RRE,RRE,RXY,RIL,RRE,RXY,\n-                        RXY,RR,RX,RXY,RX,RXY,RIL,SIL,*,*,RS,RS,VRI,VRR,VRS,VRS,VRX,VRX\")\n+                        RXY,RR,RX,RXY,RX,RXY,RIL,SIL,*,*,RS,RS,VRI,VRR,VRS,VRS,\n+                        VRX,VRX,RIL\")\n    (set_attr \"type\" \"*,*,*,*,*,*,*,*,floaddf,floaddf,la,larl,lr,load,store,\n                      floaddf,floaddf,floaddf,fstoredf,fstoredf,larl,*,*,*,*,\n-                     *,*,*,*,*,*,*\")\n+                     *,*,*,*,*,*,*,larl\")\n    (set_attr \"cpu_facility\" \"*,*,*,*,*,extimm,extimm,extimm,dfp,dfp,longdisp,\n                              z10,*,*,*,*,*,longdisp,*,longdisp,\n-                             z10,z10,*,*,*,*,vx,vx,vx,vx,vx,vx\")\n+                             z10,z10,*,*,*,*,vx,vx,vx,vx,vx,vx,*\")\n    (set_attr \"z10prop\" \"z10_fwd_A1,\n                         z10_fwd_E1,\n                         z10_fwd_E1,\n@@ -1811,7 +1803,8 @@\n                         *,\n                         *,\n                         *,\n-                        *,*,*,*,*,*,*\")\n+                        *,*,*,*,*,*,*,\n+                        z10_super_A1\")\n ])\n \n (define_split"}, {"sha": "ef5adb8f9261dc15fc5c1dcd446be2bd3aa590ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -1,3 +1,13 @@\n+2018-10-25  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/global-array-almost-huge-element.c: New test.\n+\t* gcc.target/s390/global-array-almost-negative-huge-element.c: New test.\n+\t* gcc.target/s390/global-array-element-pic.c: New test.\n+\t* gcc.target/s390/global-array-even-element.c: New test.\n+\t* gcc.target/s390/global-array-huge-element.c: New test.\n+\t* gcc.target/s390/global-array-negative-huge-element.c: New test.\n+\t* gcc.target/s390/global-array-odd-element.c: New test.\n+\n 2018-10-25  Jan Hubicka  <jh@suse.cz>\n \n \t* g++.dg/lto/odr-1_0.C: New test."}, {"sha": "28e4ccd9bdd5db9416ae3e3c199594b01ee1dfb6", "filename": "gcc/testsuite/gcc.target/s390/global-array-almost-huge-element.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-almost-huge-element.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-almost-huge-element.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-almost-huge-element.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -0,0 +1,12 @@\n+/* Test the maximum possible LARL offset.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+extern char a[] __attribute__ ((aligned (2)));\n+extern char *b;\n+\n+void almost_huge()\n+{\n+  b = a + 0x7ffffffeULL;\n+  /* { dg-final { scan-assembler {(?n)\\n\\tlarl\\t%r\\d+,a\\+2147483646\\n} } } */\n+}"}, {"sha": "0012ceb8d498dad4ecd216f398ce56d8023f5212", "filename": "gcc/testsuite/gcc.target/s390/global-array-almost-negative-huge-element.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-almost-negative-huge-element.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-almost-negative-huge-element.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-almost-negative-huge-element.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -0,0 +1,12 @@\n+/* Test the minimum LARL offset.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+extern char a[] __attribute__ ((aligned (2)));\n+extern char *b;\n+\n+void almost_negative_huge()\n+{\n+  b = a - 0x80000000ULL;\n+  /* { dg-final { scan-assembler {(?n)\\n\\tlarl\\t%r\\d+,a-2147483648\\n} } } */\n+}"}, {"sha": "7872120615187d3dd25b0c66a447da59114393cc", "filename": "gcc/testsuite/gcc.target/s390/global-array-element-pic.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-element-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-element-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-element-pic.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -0,0 +1,13 @@\n+/* Test accesses to global array elements in PIC code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fPIC\" } */\n+\n+extern char a[] __attribute__ ((aligned (2)));\n+extern char *b;\n+\n+void c()\n+{\n+  b = a + 4;\n+  /* { dg-final { scan-assembler {(?n)\\n\\tlarl\\t%r\\d+,a@GOTENT\\n} } } */\n+  /* { dg-final { scan-assembler-not {(?n)\\n\\tlarl\\t%r\\d+,a[^@]} } } */\n+}"}, {"sha": "5737f7e34960e02d6a8bce5cd683165214517e5f", "filename": "gcc/testsuite/gcc.target/s390/global-array-even-element.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-even-element.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-even-element.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-even-element.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -0,0 +1,12 @@\n+/* Test accesses to even global array elements.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+extern char a[] __attribute__ ((aligned (2)));\n+extern char *b;\n+\n+void even()\n+{\n+  b = a + 4;\n+  /* { dg-final { scan-assembler {(?n)\\n\\tlarl\\t%r\\d+,a\\+4\\n} } } */\n+}"}, {"sha": "d4aad5764fd86f3967d63defe6764eb31037e116", "filename": "gcc/testsuite/gcc.target/s390/global-array-huge-element.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-huge-element.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-huge-element.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-huge-element.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -0,0 +1,12 @@\n+/* Test minimum invalid LARL offset.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+extern char a[] __attribute__ ((aligned (2)));\n+extern char *b;\n+\n+void huge()\n+{\n+  b = a + 0x80000000ULL;\n+  /* { dg-final { scan-assembler-not {(?n)\\n\\tlarl\\t%r\\d+,a} } } */\n+}"}, {"sha": "bd72d01a53bd0b133bab7d2b5e6537621f7d757c", "filename": "gcc/testsuite/gcc.target/s390/global-array-negative-huge-element.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-negative-huge-element.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-negative-huge-element.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-negative-huge-element.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -0,0 +1,12 @@\n+/* Test maximum invalid LARL offset.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+extern char a[] __attribute__ ((aligned (2)));\n+extern char *b;\n+\n+void negative_huge()\n+{\n+  b = a - 0x80000004ULL;\n+  /* { dg-final { scan-assembler-not {(?n)\\n\\tlarl\\t%r\\d+,a} } } */\n+}"}, {"sha": "84a65e556262b8ce04ead402ce31a6b0a7d9cb04", "filename": "gcc/testsuite/gcc.target/s390/global-array-odd-element.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-odd-element.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6f517556c28d471237718e472f0c49fef99804d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-odd-element.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fglobal-array-odd-element.c?ref=b6f517556c28d471237718e472f0c49fef99804d", "patch": "@@ -0,0 +1,12 @@\n+/* Test accesses to odd global array elements.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+extern char a[] __attribute__ ((aligned (2)));\n+extern char *b;\n+\n+void odd()\n+{\n+  b = a + 1;\n+  /* { dg-final { scan-assembler-not {(?n)\\n\\tlarl\\t%r\\d+,a} } } */\n+}"}]}