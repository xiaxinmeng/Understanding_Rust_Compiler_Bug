{"sha": "ef903ecaa925f7a3479b9c9e5d735b56c640ddf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5MDNlY2FhOTI1ZjdhMzQ3OWI5YzllNWQ3MzViNTZjNjQwZGRmNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-11T19:54:59Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-03-11T19:54:59Z"}, "message": "(sleu+4, sleu+7, extendsftf2, extenddftf2, trunctfsf2,\n\ntrunctfdf2, floatsitf2, fix_trunctfsi2, addtf3, subtf3, multf3,\ndivtf3, sqrttf2): Disable when -msoft-quad-float.\n(beq, bne, bgt, blt, bge, ble): When -msoft-quad-float, account\nfor return value of SPARC ABI routines that differs from libgcc.\n\nFrom-SVN: r6752", "tree": {"sha": "982c3f35cc74d70ea95c607b26bc297bb32f65fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/982c3f35cc74d70ea95c607b26bc297bb32f65fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6/comments", "author": null, "committer": null, "parents": [{"sha": "8248e2bc367d28c3176b41364c75ad0b59fae666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8248e2bc367d28c3176b41364c75ad0b59fae666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8248e2bc367d28c3176b41364c75ad0b59fae666"}], "stats": {"total": 90, "additions": 71, "deletions": 19}, "files": [{"sha": "fa937c13c6367b8981eff5f7ae9d8e7ab30e3344", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 71, "deletions": 19, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ef903ecaa925f7a3479b9c9e5d735b56c640ddf6", "patch": "@@ -413,7 +413,7 @@\n   [(set (reg:CCFPE 0)\n \t(compare:CCFPE (match_operand:TF 0 \"register_operand\" \"f\")\n \t\t       (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fcmpeq %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n@@ -437,7 +437,7 @@\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:TF 0 \"register_operand\" \"f\")\n \t\t      (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fcmpq %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n@@ -644,14 +644,26 @@\n \f\n ;; These control RTL generation for conditional jump insns\n \n+;; The quad-word fp compare library routines all return nonzero to indicate\n+;; true, which is different from the equivalent libgcc routines, so we must\n+;; handle them specially here.\n+\n (define_expand \"beq\"\n   [(set (pc)\n \t(if_then_else (eq (match_dup 1) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (EQ, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, EQ);\n+      emit_insn (gen_bne (operands[0]));\n+      DONE;\n+    }      \n+  operands[1] = gen_compare_reg (EQ, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"bne\"\n   [(set (pc)\n@@ -660,7 +672,15 @@\n \t\t      (pc)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (NE, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, NE);\n+      emit_insn (gen_bne (operands[0]));\n+      DONE;\n+    }      \n+  operands[1] = gen_compare_reg (NE, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"bgt\"\n   [(set (pc)\n@@ -669,7 +689,15 @@\n \t\t      (pc)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (GT, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, GT);\n+      emit_insn (gen_bne (operands[0]));\n+      DONE;\n+    }      \n+  operands[1] = gen_compare_reg (GT, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"bgtu\"\n   [(set (pc)\n@@ -688,7 +716,15 @@\n \t\t      (pc)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (LT, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, LT);\n+      emit_insn (gen_bne (operands[0]));\n+      DONE;\n+    }      \n+  operands[1] = gen_compare_reg (LT, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"bltu\"\n   [(set (pc)\n@@ -707,7 +743,15 @@\n \t\t      (pc)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (GE, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, GE);\n+      emit_insn (gen_bne (operands[0]));\n+      DONE;\n+    }      \n+  operands[1] = gen_compare_reg (GE, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"bgeu\"\n   [(set (pc)\n@@ -726,7 +770,15 @@\n \t\t      (pc)))]\n   \"\"\n   \"\n-{ operands[1] = gen_compare_reg (LE, sparc_compare_op0, sparc_compare_op1); }\")\n+{\n+  if (GET_MODE (sparc_compare_op0) == TFmode && ! TARGET_HARD_QUAD)\n+    {\n+      emit_float_lib_cmp (sparc_compare_op0, sparc_compare_op1, LE);\n+      emit_insn (gen_bne (operands[0]));\n+      DONE;\n+    }      \n+  operands[1] = gen_compare_reg (LE, sparc_compare_op0, sparc_compare_op1);\n+}\")\n \n (define_expand \"bleu\"\n   [(set (pc)\n@@ -1585,15 +1637,15 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(float_extend:TF\n \t (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fstoq %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"extenddftf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(float_extend:TF\n \t (match_operand:DF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fdtoq %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -1609,15 +1661,15 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float_truncate:SF\n \t (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fqtos %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float_truncate:DF\n \t (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fqtod %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \f\n@@ -1640,7 +1692,7 @@\n (define_insn \"floatsitf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(float:TF (match_operand:SI 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fitoq %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -1664,7 +1716,7 @@\n (define_insn \"fix_trunctfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n \t(fix:SI (fix:TF (match_operand:TF 1 \"register_operand\" \"f\"))))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fqtoi %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \f\n@@ -2409,7 +2461,7 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(plus:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t (match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"faddq %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2433,7 +2485,7 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(minus:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t  (match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fsubq %1,%2,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2457,7 +2509,7 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(mult:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t (match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fmulq %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n@@ -2497,7 +2549,7 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(div:TF (match_operand:TF 1 \"register_operand\" \"f\")\n \t\t(match_operand:TF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fdivq %1,%2,%0\"\n   [(set_attr \"type\" \"fpdiv\")])\n \n@@ -2574,7 +2626,7 @@\n (define_insn \"sqrttf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t(sqrt:TF (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fsqrtq %1,%0\"\n   [(set_attr \"type\" \"fpsqrt\")])\n "}]}