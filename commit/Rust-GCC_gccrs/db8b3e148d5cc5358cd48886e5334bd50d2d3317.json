{"sha": "db8b3e148d5cc5358cd48886e5334bd50d2d3317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4YjNlMTQ4ZDVjYzUzNThjZDQ4ODg2ZTUzMzRiZDUwZDJkMzMxNw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-26T12:45:23Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-04T05:06:08Z"}, "message": "Fix invalid address for special_memory_constraint.\n\ngcc/ChangeLog\n\tPR target/97532\n\t* lra-constraints.c (valid_address_p): Handle operand of\n\tspecial memory constraint.\n\t(process_address_1): Ditto.", "tree": {"sha": "986b75442d63a61b61ac0de4956ddb90a0b67ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/986b75442d63a61b61ac0de4956ddb90a0b67ffc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db8b3e148d5cc5358cd48886e5334bd50d2d3317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8b3e148d5cc5358cd48886e5334bd50d2d3317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8b3e148d5cc5358cd48886e5334bd50d2d3317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8b3e148d5cc5358cd48886e5334bd50d2d3317/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "22e7075c4a51c8c898a43a5f7631a8c87828211e", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db8b3e148d5cc5358cd48886e5334bd50d2d3317/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db8b3e148d5cc5358cd48886e5334bd50d2d3317/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=db8b3e148d5cc5358cd48886e5334bd50d2d3317", "patch": "@@ -406,8 +406,10 @@ valid_address_p (rtx op, struct address_info *ad,\n   address_eliminator eliminator (ad);\n \n   /* Allow a memory OP if it matches CONSTRAINT, even if CONSTRAINT is more\n-     forgiving than \"m\".  */\n-  if (MEM_P (op)\n+     forgiving than \"m\".\n+     Need to extract memory from op for special memory constraint,\n+     i.e. bcst_mem_operand in i386 backend.  */\n+  if (MEM_P (extract_mem_from_operand (op))\n       && (insn_extra_memory_constraint (constraint)\n \t  || insn_extra_special_memory_constraint (constraint))\n       && constraint_satisfied_p (op, constraint))\n@@ -3427,13 +3429,14 @@ process_address_1 (int nop, bool check_only_p,\n   rtx new_reg;\n   HOST_WIDE_INT scale;\n   rtx op = *curr_id->operand_loc[nop];\n+  rtx mem = extract_mem_from_operand (op);\n   const char *constraint = curr_static_id->operand[nop].constraint;\n   enum constraint_num cn = lookup_constraint (constraint);\n   bool change_p = false;\n \n-  if (MEM_P (op)\n-      && GET_MODE (op) == BLKmode\n-      && GET_CODE (XEXP (op, 0)) == SCRATCH)\n+  if (MEM_P (mem)\n+      && GET_MODE (mem) == BLKmode\n+      && GET_CODE (XEXP (mem, 0)) == SCRATCH)\n     return false;\n \n   if (insn_extra_address_constraint (cn)\n@@ -3446,12 +3449,14 @@ process_address_1 (int nop, bool check_only_p,\n       && curr_static_id->operand[nop].is_address)\n     decompose_lea_address (&ad, curr_id->operand_loc[nop]);\n   /* Do not attempt to decompose arbitrary addresses generated by combine\n-     for asm operands with loose constraints, e.g 'X'.  */\n-  else if (MEM_P (op)\n+     for asm operands with loose constraints, e.g 'X'.\n+     Need to extract memory from op for special memory constraint,\n+     i.e. bcst_mem_operand in i386 backend.  */\n+  else if (MEM_P (mem)\n \t   && !(INSN_CODE (curr_insn) < 0\n \t\t&& get_constraint_type (cn) == CT_FIXED_FORM\n \t        && constraint_satisfied_p (op, cn)))\n-    decompose_mem_address (&ad, op);\n+    decompose_mem_address (&ad, mem);\n   else if (GET_CODE (op) == SUBREG\n \t   && MEM_P (SUBREG_REG (op)))\n     decompose_mem_address (&ad, SUBREG_REG (op));"}]}