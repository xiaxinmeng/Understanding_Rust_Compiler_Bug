{"sha": "3a179232a743b2b1987b21034cd5bb3bc660ee85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ExNzkyMzJhNzQzYjJiMTk4N2IyMTAzNGNkNWJiM2JjNjYwZWU4NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-06-12T07:16:48Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-06-12T07:16:48Z"}, "message": "recog: Use parameter packs for operator()\n\nThis patch uses parameter packs to define insn_gen_fn::operator().\nI guess in some ways it's C++-ification for its own sake, but it does\nmake things simpler and removes the current artificial limit of 16\narguments.\n\nNote that the call is still strongly typed: all arguments have to have\nimplicit conversions to rtx.  Error messages for bad arguments look\nreasonable.\n\nI'm sure there are more elegant ways of getting the function type,\nbut this version at least fits on one line, so I didn't try too\nhard to find an alternative.\n\n2020-06-12  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* recog.h (insn_gen_fn::f0, insn_gen_fn::f1, insn_gen_fn::f2)\n\t(insn_gen_fn::f3, insn_gen_fn::f4, insn_gen_fn::f5, insn_gen_fn::f6)\n\t(insn_gen_fn::f7, insn_gen_fn::f8, insn_gen_fn::f9, insn_gen_fn::f10)\n\t(insn_gen_fn::f11, insn_gen_fn::f12, insn_gen_fn::f13)\n\t(insn_gen_fn::f14, insn_gen_fn::f15, insn_gen_fn::f16): Delete.\n\t(insn_gen_fn::operator()): Replace overloaded definitions with\n\ta parameter-pack version.", "tree": {"sha": "bd8b841004cabe1bc8d2fd5e2bfac407fb1fd7c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8b841004cabe1bc8d2fd5e2bfac407fb1fd7c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a179232a743b2b1987b21034cd5bb3bc660ee85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a179232a743b2b1987b21034cd5bb3bc660ee85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a179232a743b2b1987b21034cd5bb3bc660ee85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a179232a743b2b1987b21034cd5bb3bc660ee85/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dcea658c9e2ac84f0726e679fd7d3b14f9106f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcea658c9e2ac84f0726e679fd7d3b14f9106f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dcea658c9e2ac84f0726e679fd7d3b14f9106f0"}], "stats": {"total": 40, "additions": 5, "deletions": 35}, "files": [{"sha": "0a71a02c4a9b9d3b2154459a6b6f36f791ff78e8", "filename": "gcc/recog.h", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a179232a743b2b1987b21034cd5bb3bc660ee85/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a179232a743b2b1987b21034cd5bb3bc660ee85/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=3a179232a743b2b1987b21034cd5bb3bc660ee85", "patch": "@@ -292,43 +292,13 @@ typedef const char * (*insn_output_fn) (rtx *, rtx_insn *);\n \n struct insn_gen_fn\n {\n-  typedef rtx_insn * (*f0) (void);\n-  typedef rtx_insn * (*f1) (rtx);\n-  typedef rtx_insn * (*f2) (rtx, rtx);\n-  typedef rtx_insn * (*f3) (rtx, rtx, rtx);\n-  typedef rtx_insn * (*f4) (rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f5) (rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f6) (rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f7) (rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f8) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f9) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f10) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f11) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f12) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f13) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f14) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f15) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-  typedef rtx_insn * (*f16) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n-\n   typedef void (*stored_funcptr) (void);\n \n-  rtx_insn * operator () (void) const { return ((f0)func) (); }\n-  rtx_insn * operator () (rtx a0) const { return ((f1)func) (a0); }\n-  rtx_insn * operator () (rtx a0, rtx a1) const { return ((f2)func) (a0, a1); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2) const { return ((f3)func) (a0, a1, a2); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3) const { return ((f4)func) (a0, a1, a2, a3); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4) const { return ((f5)func) (a0, a1, a2, a3, a4); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5) const { return ((f6)func) (a0, a1, a2, a3, a4, a5); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6) const { return ((f7)func) (a0, a1, a2, a3, a4, a5, a6); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7) const { return ((f8)func) (a0, a1, a2, a3, a4, a5, a6, a7); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8) const { return ((f9)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9) const { return ((f10)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10) const { return ((f11)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11) const { return ((f12)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12) const { return ((f13)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12, rtx a13) const { return ((f14)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12, rtx a13, rtx a14) const { return ((f15)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); }\n-  rtx_insn * operator () (rtx a0, rtx a1, rtx a2, rtx a3, rtx a4, rtx a5, rtx a6, rtx a7, rtx a8, rtx a9, rtx a10, rtx a11, rtx a12, rtx a13, rtx a14, rtx a15) const { return ((f16)func) (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); }\n+  template<typename ...Ts>\n+  rtx_insn *operator() (Ts... args...) const\n+  {\n+    return ((rtx_insn *(*) (decltype(args, NULL_RTX)...)) func) (args...);\n+  }\n \n   // This is for compatibility of code that invokes functions like\n   //   (*funcptr) (arg)"}]}