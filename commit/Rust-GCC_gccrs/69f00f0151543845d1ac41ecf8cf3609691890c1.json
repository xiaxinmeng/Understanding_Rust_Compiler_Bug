{"sha": "69f00f0151543845d1ac41ecf8cf3609691890c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmMDBmMDE1MTU0Mzg0NWQxYWM0MWVjZjhjZjM2MDk2OTE4OTBjMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-06-22T07:21:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-06-22T07:21:50Z"}, "message": "init.c (expand_aggr_vbase_init): Rename to construct_virtual_bases.\n\n\t* init.c (expand_aggr_vbase_init): Rename to\n\tconstruct_virtual_bases.  Conditionalize construction here,\n\trather than ...\n\t(emit_base_init): Here.\n\nFrom-SVN: r27701", "tree": {"sha": "caf1a3e11146b0f4b09a305822e174a85bc9f096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caf1a3e11146b0f4b09a305822e174a85bc9f096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f00f0151543845d1ac41ecf8cf3609691890c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f00f0151543845d1ac41ecf8cf3609691890c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f00f0151543845d1ac41ecf8cf3609691890c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f00f0151543845d1ac41ecf8cf3609691890c1/comments", "author": null, "committer": null, "parents": [{"sha": "90fb0c24988b0aa9a250761c457f6c22ee6f3651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fb0c24988b0aa9a250761c457f6c22ee6f3651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90fb0c24988b0aa9a250761c457f6c22ee6f3651"}], "stats": {"total": 101, "additions": 71, "deletions": 30}, "files": [{"sha": "d7eeea4a2d710706eb362aaf75e59ddced6b7a00", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f00f0151543845d1ac41ecf8cf3609691890c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f00f0151543845d1ac41ecf8cf3609691890c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=69f00f0151543845d1ac41ecf8cf3609691890c1", "patch": "@@ -1,3 +1,10 @@\n+1999-06-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* init.c (expand_aggr_vbase_init): Rename to\n+\tconstruct_virtual_bases.  Conditionalize construction here, \n+\trather than ...\n+\t(emit_base_init): Here.\n+\n 1999-06-19  Mark Mitchell  <mark@codesourcery.com>\n \n \t* semantics.c (finish_asm_statement): Apply decay conversions to"}, {"sha": "cba2842fe6b47d03a276198117ca0be7b1c3881c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 51, "deletions": 30, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f00f0151543845d1ac41ecf8cf3609691890c1/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f00f0151543845d1ac41ecf8cf3609691890c1/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=69f00f0151543845d1ac41ecf8cf3609691890c1", "patch": "@@ -44,7 +44,7 @@ Boston, MA 02111-1307, USA.  */\n tree current_base_init_list, current_member_init_list;\n \n static void expand_aggr_vbase_init_1 PROTO((tree, tree, tree, tree));\n-static void expand_aggr_vbase_init PROTO((tree, tree, tree, tree, tree));\n+static void construct_virtual_bases PROTO((tree, tree, tree, tree, tree));\n static void expand_aggr_init_1 PROTO((tree, tree, tree, tree, int));\n static void expand_default_init PROTO((tree, tree, tree, tree, int));\n static tree build_vec_delete_1 PROTO((tree, tree, tree, tree, tree,\n@@ -541,14 +541,13 @@ emit_base_init (t, immediately)\n   sort_base_init (t, &rbase_init_list, &vbase_init_list);\n   current_base_init_list = NULL_TREE;\n \n+  /* First, initialize the virtual base classes, if we are\n+     constructing the most-derived object.  */\n   if (TYPE_USES_VIRTUAL_BASECLASSES (t))\n     {\n       tree first_arg = TREE_CHAIN (DECL_ARGUMENTS (current_function_decl));\n-\n-      expand_start_cond (first_arg, 0);\n-      expand_aggr_vbase_init (t_binfo, current_class_ref, current_class_ptr,\n-\t\t\t      vbase_init_list, first_arg);\n-      expand_end_cond ();\n+      construct_virtual_bases (t, current_class_ref, current_class_ptr,\n+\t\t\t       vbase_init_list, first_arg);\n     }\n \n   /* Now, perform initialization of non-virtual base classes.  */\n@@ -798,38 +797,60 @@ expand_aggr_vbase_init_1 (binfo, exp, addr, init_list)\n   free_temp_slots ();\n }\n \n-/* Initialize this object's virtual base class pointers.  This must be\n-   done only at the top-level of the object being constructed.\n-\n-   INIT_LIST is list of initialization for constructor to perform.  */\n+/* Construct the virtual base-classes of THIS_REF (whose address is\n+   THIS_PTR).  The object has the indicated TYPE.  The construction\n+   actually takes place only if FLAG is non-zero.  INIT_LIST is list\n+   of initialization for constructor to perform.  */\n \n static void\n-expand_aggr_vbase_init (binfo, exp, addr, init_list, flag)\n-     tree binfo;\n-     tree exp;\n-     tree addr;\n+construct_virtual_bases (type, this_ref, this_ptr, init_list, flag)\n+     tree type;\n+     tree this_ref;\n+     tree this_ptr;\n      tree init_list;\n      tree flag;\n {\n-  tree type = BINFO_TYPE (binfo);\n+  tree vbases;\n+  tree result;\n \n-  if (TYPE_USES_VIRTUAL_BASECLASSES (type))\n-    {\n-      tree result = init_vbase_pointers (type, addr);\n-      tree vbases;\n+  /* If there are no virtual baseclasses, we shouldn't even be here.  */\n+  my_friendly_assert (TYPE_USES_VIRTUAL_BASECLASSES (type), 19990621);\n \n-      if (result)\n-\texpand_expr_stmt (build_compound_expr (result));\n+  /* First set the pointers in our object that tell us where to find\n+     our virtual baseclasses.  */\n+  expand_start_cond (flag, 0);\n+  result = init_vbase_pointers (type, this_ptr);\n+  if (result)\n+    expand_expr_stmt (build_compound_expr (result));\n+  expand_end_cond ();\n \n-      for (vbases = CLASSTYPE_VBASECLASSES (type); vbases;\n-\t   vbases = TREE_CHAIN (vbases))\n-\t{\n-\t  tree tmp = purpose_member (vbases, result);\n-\t  expand_aggr_vbase_init_1 (vbases, exp,\n-\t\t\t\t    TREE_OPERAND (TREE_VALUE (tmp), 0),\n-\t\t\t\t    init_list);\n-\t  expand_cleanup_for_base (vbases, flag);\n-\t}\n+  /* Now, run through the baseclasses, initializing each.  */ \n+  for (vbases = CLASSTYPE_VBASECLASSES (type); vbases;\n+       vbases = TREE_CHAIN (vbases))\n+    {\n+      tree tmp = purpose_member (vbases, result);\n+      \n+      /* If there are virtual base classes with destructors, we need to\n+\t emit cleanups to destroy them if an exception is thrown during\n+\t the construction process.  These exception regions (i.e., the\n+\t period during which the cleanups must occur) begin from the time\n+\t the construction is complete to the end of the function.  If we\n+\t create a conditional block in which to initialize the\n+\t base-classes, then the cleanup region for the virtual base begins\n+\t inside a block, and ends outside of that block.  This situation\n+\t confuses the sjlj exception-handling code.  Therefore, we do not\n+\t create a single conditional block, but one for each\n+\t initialization.  (That way the cleanup regions always begin\n+\t in the outer block.)  We trust the back-end to figure out\n+\t that the FLAG will not change across initializations, and\n+\t avoid doing multiple tests.  */\n+      expand_start_cond (flag, 0);\n+      expand_aggr_vbase_init_1 (vbases, this_ref,\n+\t\t\t\tTREE_OPERAND (TREE_VALUE (tmp), 0),\n+\t\t\t\tinit_list);\n+      expand_end_cond ();\n+      \n+      expand_cleanup_for_base (vbases, flag);\n     }\n }\n "}, {"sha": "7cffa6c0cb08d9964213aa01e9652f29bf099c72", "filename": "gcc/testsuite/g++.old-deja/g++.eh/vbase3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f00f0151543845d1ac41ecf8cf3609691890c1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fvbase3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f00f0151543845d1ac41ecf8cf3609691890c1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fvbase3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fvbase3.C?ref=69f00f0151543845d1ac41ecf8cf3609691890c1", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link:\n+// Special g++ Options: -fsjlj-exceptions\n+// Origin: Donn Terry <donn@interix.com>\n+\n+struct ios {\n+  virtual ~ios();\n+};\n+struct fstreambase : virtual public ios {\n+  fstreambase();\n+};\n+fstreambase::fstreambase()\n+{\n+}"}]}