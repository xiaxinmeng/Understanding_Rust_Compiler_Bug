{"sha": "036546e58ac96338a9167fb1b239670fdca99ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2NTQ2ZTU4YWM5NjMzOGE5MTY3ZmIxYjIzOTY3MGZkY2E5OWFiMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-05-29T07:31:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-29T07:31:11Z"}, "message": "cgraph.c (clone_function_name): Take SUFFIX argument; export.\n\n\t* cgraph.c (clone_function_name): Take SUFFIX argument; export.\n\t(cgraph_create_virtual_clone): Take SUFFIX argument; udpate\n\tuse of clone_function_name.\n\t* cgraph.h (cgraph_create_virtual_clone, \n\tcgraph_function_versioning): update prototypes.\n\t(clone_function_name): Declare.\n\t* ipa-cp.c (ipcp_insert_stage): Update call of\n\tcgraph_create_virtual_clone.\n\t* omp-low.c (create_omp_child_function_name): Use\n\tcgraph_create_virtual_clone.\n\t* cgraphunit.c (cgraph_copy_node_for_versioning): Fix edges updating.\n\t(cgraph_function_versioning): Take SUFFIX argument; produce new name\n\tand make decl local.\n\n\t* gcc.dg/tree-ssa/ipa-cp-1.c: Update testcase.\n\nFrom-SVN: r160016", "tree": {"sha": "2bccbc03becb82b7caf9f75dcea83ae37194f46b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bccbc03becb82b7caf9f75dcea83ae37194f46b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036546e58ac96338a9167fb1b239670fdca99ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036546e58ac96338a9167fb1b239670fdca99ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036546e58ac96338a9167fb1b239670fdca99ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036546e58ac96338a9167fb1b239670fdca99ab3/comments", "author": null, "committer": null, "parents": [{"sha": "6c6081113be59aa5fa6cc20c3978c7661ff43696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6081113be59aa5fa6cc20c3978c7661ff43696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6081113be59aa5fa6cc20c3978c7661ff43696"}], "stats": {"total": 107, "additions": 54, "deletions": 53}, "files": [{"sha": "60983962deb48e9994a4ffb0ad8dc8a190021a6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -1,3 +1,19 @@\n+2010-05-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (clone_function_name): Take SUFFIX argument; export.\n+\t(cgraph_create_virtual_clone): Take SUFFIX argument; udpate\n+\tuse of clone_function_name.\n+\t* cgraph.h (cgraph_create_virtual_clone, \n+\tcgraph_function_versioning): update prototypes.\n+\t(clone_function_name): Declare.\n+\t* ipa-cp.c (ipcp_insert_stage): Update call of\n+\tcgraph_create_virtual_clone.\n+\t* omp-low.c (create_omp_child_function_name): Use\n+\tcgraph_create_virtual_clone.\n+\t* cgraphunit.c (cgraph_copy_node_for_versioning): Fix edges updating.\n+\t(cgraph_function_versioning): Take SUFFIX argument; produce new name\n+\tand make decl local.\n+\n 2010-05-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* vec.h: Include statistics.h"}, {"sha": "04ff9c98f20e8fe10ea489cdbc3be608f607fcf7", "filename": "gcc/cgraph.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -2143,24 +2143,26 @@ cgraph_clone_node (struct cgraph_node *n, tree decl, gcov_type count, int freq,\n   return new_node;\n }\n \n-/* Create a new name for omp child function.  Returns an identifier.  */\n+/* Create a new name for clone of DECL, add SUFFIX.  Returns an identifier.  */\n \n static GTY(()) unsigned int clone_fn_id_num;\n \n-static tree\n-clone_function_name (tree decl)\n+tree\n+clone_function_name (tree decl, const char *suffix)\n {\n   tree name = DECL_ASSEMBLER_NAME (decl);\n   size_t len = IDENTIFIER_LENGTH (name);\n   char *tmp_name, *prefix;\n \n-  prefix = XALLOCAVEC (char, len + strlen (\"_clone\") + 1);\n+  prefix = XALLOCAVEC (char, len + strlen (suffix) + 2);\n   memcpy (prefix, IDENTIFIER_POINTER (name), len);\n-  strcpy (prefix + len, \"_clone\");\n+  strcpy (prefix + len + 1, suffix);\n #ifndef NO_DOT_IN_LABEL\n   prefix[len] = '.';\n #elif !defined NO_DOLLAR_IN_LABEL\n   prefix[len] = '$';\n+#else\n+  prefix[len] = '_';\n #endif\n   ASM_FORMAT_PRIVATE_NAME (tmp_name, prefix, clone_fn_id_num++);\n   return get_identifier (tmp_name);\n@@ -2176,7 +2178,8 @@ struct cgraph_node *\n cgraph_create_virtual_clone (struct cgraph_node *old_node,\n \t\t\t     VEC(cgraph_edge_p,heap) *redirect_callers,\n \t\t\t     VEC(ipa_replace_map_p,gc) *tree_map,\n-\t\t\t     bitmap args_to_skip)\n+\t\t\t     bitmap args_to_skip,\n+\t\t\t     const char * suffix)\n {\n   tree old_decl = old_node->decl;\n   struct cgraph_node *new_node = NULL;\n@@ -2197,7 +2200,7 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n   DECL_STRUCT_FUNCTION (new_decl) = NULL;\n \n   /* Generate a new name for the new version. */\n-  DECL_NAME (new_decl) = clone_function_name (old_decl);\n+  DECL_NAME (new_decl) = clone_function_name (old_decl, suffix);\n   SET_DECL_ASSEMBLER_NAME (new_decl, DECL_NAME (new_decl));\n   SET_DECL_RTL (new_decl, NULL);\n "}, {"sha": "b4ce531f7b37ae913f9fe1eef7249c1ea10f6351", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -588,12 +588,14 @@ const char* cgraph_inline_failed_string (cgraph_inline_failed_t);\n struct cgraph_node * cgraph_create_virtual_clone (struct cgraph_node *old_node,\n \t\t\t                          VEC(cgraph_edge_p,heap)*,\n \t\t\t                          VEC(ipa_replace_map_p,gc)* tree_map,\n-\t\t\t                          bitmap args_to_skip);\n+\t\t\t                          bitmap args_to_skip,\n+\t\t\t\t\t\t  const char *clone_name);\n \n void cgraph_set_nothrow_flag (struct cgraph_node *, bool);\n void cgraph_set_readonly_flag (struct cgraph_node *, bool);\n void cgraph_set_pure_flag (struct cgraph_node *, bool);\n void cgraph_set_looping_const_or_pure_flag (struct cgraph_node *, bool);\n+tree clone_function_name (tree decl, const char *);\n \n /* In cgraphunit.c  */\n void cgraph_finalize_function (tree, bool);\n@@ -613,7 +615,7 @@ void init_cgraph (void);\n struct cgraph_node *cgraph_function_versioning (struct cgraph_node *,\n \t\t\t\t\t\tVEC(cgraph_edge_p,heap)*,\n \t\t\t\t\t\tVEC(ipa_replace_map_p,gc)*,\n-\t\t\t\t\t\tbitmap);\n+\t\t\t\t\t\tbitmap, const char *);\n void tree_function_versioning (tree, tree, VEC (ipa_replace_map_p,gc)*, bool, bitmap);\n struct cgraph_node *save_inline_function_body (struct cgraph_node *);\n void record_references_in_initializer (tree, bool);"}, {"sha": "e7e9e29659e2ac4903c903b18be7ca4d7fcf20d3", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -2106,10 +2106,9 @@ static struct cgraph_node *\n cgraph_copy_node_for_versioning (struct cgraph_node *old_version,\n \t\t\t\t tree new_decl,\n \t\t\t\t VEC(cgraph_edge_p,heap) *redirect_callers)\n- {\n+{\n    struct cgraph_node *new_version;\n    struct cgraph_edge *e;\n-   struct cgraph_edge *next_callee;\n    unsigned i;\n \n    gcc_assert (old_version);\n@@ -2118,34 +2117,24 @@ cgraph_copy_node_for_versioning (struct cgraph_node *old_version,\n \n    new_version->analyzed = true;\n    new_version->local = old_version->local;\n+   new_version->local.externally_visible = false;\n+   new_version->local.local = true;\n+   new_version->local.vtable_method = false;\n    new_version->global = old_version->global;\n    new_version->rtl = new_version->rtl;\n    new_version->reachable = true;\n    new_version->count = old_version->count;\n \n-   /* Clone the old node callees.  Recursive calls are\n-      also cloned.  */\n-   for (e = old_version->callees;e; e=e->next_callee)\n-     {\n-       cgraph_clone_edge (e, new_version, e->call_stmt,\n-\t\t\t  e->lto_stmt_uid, REG_BR_PROB_BASE,\n-\t\t\t  CGRAPH_FREQ_BASE,\n-\t\t\t  e->loop_nest, true);\n-     }\n-   /* Fix recursive calls.\n-      If OLD_VERSION has a recursive call after the\n-      previous edge cloning, the new version will have an edge\n-      pointing to the old version, which is wrong;\n-      Redirect it to point to the new version. */\n-   for (e = new_version->callees ; e; e = next_callee)\n-     {\n-       next_callee = e->next_callee;\n-       if (e->callee == old_version)\n-\t cgraph_redirect_edge_callee (e, new_version);\n-\n-       if (!next_callee)\n-\t break;\n-     }\n+   for (e = old_version->callees; e; e=e->next_callee)\n+     cgraph_clone_edge (e, new_version, e->call_stmt,\n+\t\t\te->lto_stmt_uid, REG_BR_PROB_BASE,\n+\t\t\tCGRAPH_FREQ_BASE,\n+\t\t\te->loop_nest, true);\n+   for (e = old_version->indirect_calls; e; e=e->next_callee)\n+     cgraph_clone_edge (e, new_version, e->call_stmt,\n+\t\t\te->lto_stmt_uid, REG_BR_PROB_BASE,\n+\t\t\tCGRAPH_FREQ_BASE,\n+\t\t\te->loop_nest, true);\n    for (i = 0; VEC_iterate (cgraph_edge_p, redirect_callers, i, e); i++)\n      {\n        /* Redirect calls to the old version node to point to its new\n@@ -2175,7 +2164,8 @@ struct cgraph_node *\n cgraph_function_versioning (struct cgraph_node *old_version_node,\n \t\t\t    VEC(cgraph_edge_p,heap) *redirect_callers,\n \t\t\t    VEC (ipa_replace_map_p,gc)* tree_map,\n-\t\t\t    bitmap args_to_skip)\n+\t\t\t    bitmap args_to_skip,\n+\t\t\t    const char *clone_name)\n {\n   tree old_decl = old_version_node->decl;\n   struct cgraph_node *new_version_node = NULL;"}, {"sha": "0efdb47b315482c6676da716d1454697cdac9b5f", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -1186,7 +1186,7 @@ ipcp_insert_stage (void)\n          new versioned node.  */\n       node1 =\n \tcgraph_create_virtual_clone (node, redirect_callers, replace_trees,\n-\t\t\t\t     args_to_skip);\n+\t\t\t\t     args_to_skip, \"clone\");\n       args_to_skip = NULL;\n       VEC_free (cgraph_edge_p, heap, redirect_callers);\n       replace_trees = NULL;"}, {"sha": "12bd4c6560876101adac9506c107763608da51d2", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -1531,22 +1531,8 @@ static GTY(()) unsigned int tmp_ompfn_id_num;\n static tree\n create_omp_child_function_name (bool task_copy)\n {\n-  tree name = DECL_ASSEMBLER_NAME (current_function_decl);\n-  size_t len = IDENTIFIER_LENGTH (name);\n-  char *tmp_name, *prefix;\n-  const char *suffix;\n-\n-  suffix = task_copy ? \"_omp_cpyfn\" : \"_omp_fn\";\n-  prefix = XALLOCAVEC (char, len + strlen (suffix) + 1);\n-  memcpy (prefix, IDENTIFIER_POINTER (name), len);\n-  strcpy (prefix + len, suffix);\n-#ifndef NO_DOT_IN_LABEL\n-  prefix[len] = '.';\n-#elif !defined NO_DOLLAR_IN_LABEL\n-  prefix[len] = '$';\n-#endif\n-  ASM_FORMAT_PRIVATE_NAME (tmp_name, prefix, tmp_ompfn_id_num++);\n-  return get_identifier (tmp_name);\n+  return (clone_function_name (current_function_decl,\n+\t\t\t       task_copy ? \"_omp_cpyfn\" : \"_omp_fn\"));\n }\n \n /* Build a decl for the omp child function.  It'll not contain a body"}, {"sha": "1dc4528c16068ddcce94317d30741581f1149ab4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -1,3 +1,7 @@\n+2010-05-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/ipa-cp-1.c: Update testcase.\n+\n 2010-05-28  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gcc.dg/vect/vect-outer-fir-lb.c: Un-XFAIL-ed."}, {"sha": "7918eb7562d6fe9c6e913487311940edf409aa02", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-cp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036546e58ac96338a9167fb1b239670fdca99ab3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c?ref=036546e58ac96338a9167fb1b239670fdca99ab3", "patch": "@@ -12,5 +12,5 @@ main()\n   very_long_function (1);\n }\n /* One appereance for dump, one self recursive call and one call from main.  */\n-/* { dg-final { scan-tree-dump-times \"very_long_function.clone.0 \\\\(\\\\)\" 3 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"very_long_function.constprop.0 \\\\(\\\\)\" 3 \"optimized\"} } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}