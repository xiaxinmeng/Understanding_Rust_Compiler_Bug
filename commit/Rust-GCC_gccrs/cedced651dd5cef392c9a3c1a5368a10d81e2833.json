{"sha": "cedced651dd5cef392c9a3c1a5368a10d81e2833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkY2VkNjUxZGQ1Y2VmMzkyYzlhM2MxYTUzNjhhMTBkODFlMjgzMw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-20T04:16:45Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-20T04:16:45Z"}, "message": "Use can_create_pseudo_p() in the sparc backend.\n\ngcc/\n\n\t* config/sparc/sparc.c (sparc_expand_move): Use\n\tcan_create_pseudo_p.\n\t(sparc_emit_set_const32): Likewise.\n\t(sparc_emit_set_const64_longway): Likewise.\n\t(sparc_emit_set_const64): Likewise.\n\t(sparc_legitimize_pic_address): Likewise.\n\t(memory_ok_for_ldd): Likewise.\n\nFrom-SVN: r180235", "tree": {"sha": "7a352c504b1597a2d8d543881c70e1ad9469c931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a352c504b1597a2d8d543881c70e1ad9469c931"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cedced651dd5cef392c9a3c1a5368a10d81e2833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedced651dd5cef392c9a3c1a5368a10d81e2833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cedced651dd5cef392c9a3c1a5368a10d81e2833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedced651dd5cef392c9a3c1a5368a10d81e2833/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa2988b4ff261844ea2e02ca8f0188b984e3cb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2988b4ff261844ea2e02ca8f0188b984e3cb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2988b4ff261844ea2e02ca8f0188b984e3cb26"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "1da349155d2bb91998f8f37f67d8584fe7759239", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedced651dd5cef392c9a3c1a5368a10d81e2833/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedced651dd5cef392c9a3c1a5368a10d81e2833/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cedced651dd5cef392c9a3c1a5368a10d81e2833", "patch": "@@ -1,3 +1,13 @@\n+2011-10-19  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.c (sparc_expand_move): Use\n+\tcan_create_pseudo_p.\n+\t(sparc_emit_set_const32): Likewise.\n+\t(sparc_emit_set_const64_longway): Likewise.\n+\t(sparc_emit_set_const64): Likewise.\n+\t(sparc_legitimize_pic_address): Likewise.\n+\t(memory_ok_for_ldd): Likewise.\n+\n 2011-10-20  Dehao Chen  <dehao@google.com>\n \n \t* profile.c (compute_branch_probabilities): Compute and dump the"}, {"sha": "a6809ddaae326141dbabe2b27aac3ea0bb5240d0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedced651dd5cef392c9a3c1a5368a10d81e2833/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedced651dd5cef392c9a3c1a5368a10d81e2833/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=cedced651dd5cef392c9a3c1a5368a10d81e2833", "patch": "@@ -1316,7 +1316,7 @@ sparc_expand_move (enum machine_mode mode, rtx *operands)\n \t  && (mode == SFmode\n \t      /* And any DF constant in integer registers.  */\n \t      || (mode == DFmode\n-\t\t  && (reload_completed || reload_in_progress))))\n+\t\t  && ! can_create_pseudo_p ())))\n \treturn false;\n \n       operands[1] = force_const_mem (mode, operands[1]);\n@@ -1362,11 +1362,9 @@ static void\n sparc_emit_set_const32 (rtx op0, rtx op1)\n {\n   enum machine_mode mode = GET_MODE (op0);\n-  rtx temp;\n+  rtx temp = op0;\n \n-  if (reload_in_progress || reload_completed)\n-    temp = op0;\n-  else\n+  if (can_create_pseudo_p ())\n     temp = gen_reg_rtx (mode);\n \n   if (GET_CODE (op1) == CONST_INT)\n@@ -1739,11 +1737,9 @@ sparc_emit_set_const64_longway (rtx op0, rtx temp,\n \t\t\t\tunsigned HOST_WIDE_INT high_bits,\n \t\t\t\tunsigned HOST_WIDE_INT low_bits)\n {\n-  rtx sub_temp;\n+  rtx sub_temp = op0;\n \n-  if (reload_in_progress || reload_completed)\n-    sub_temp = op0;\n-  else\n+  if (can_create_pseudo_p ())\n     sub_temp = gen_reg_rtx (DImode);\n \n   if ((high_bits & 0xfffffc00) != 0)\n@@ -1762,7 +1758,7 @@ sparc_emit_set_const64_longway (rtx op0, rtx temp,\n       sub_temp = temp;\n     }\n \n-  if (!reload_in_progress && !reload_completed)\n+  if (can_create_pseudo_p ())\n     {\n       rtx temp2 = gen_reg_rtx (DImode);\n       rtx temp3 = gen_reg_rtx (DImode);\n@@ -1970,7 +1966,7 @@ sparc_emit_set_const64 (rtx op0, rtx op1)\n \t      && (GET_CODE (op0) == SUBREG\n \t\t  || (REG_P (op0) && ! SPARC_FP_REG_P (REGNO (op0)))));\n \n-  if (reload_in_progress || reload_completed)\n+  if (! can_create_pseudo_p ())\n     temp = op0;\n \n   if (GET_CODE (op1) != CONST_INT)\n@@ -3685,7 +3681,7 @@ sparc_legitimize_pic_address (rtx orig, rtx reg)\n \n       if (reg == 0)\n \t{\n-\t  gcc_assert (! reload_in_progress && ! reload_completed);\n+\t  gcc_assert (can_create_pseudo_p ());\n \t  reg = gen_reg_rtx (Pmode);\n \t}\n \n@@ -3694,7 +3690,7 @@ sparc_legitimize_pic_address (rtx orig, rtx reg)\n \t  /* If not during reload, allocate another temp reg here for loading\n \t     in the address, so that these instructions can be optimized\n \t     properly.  */\n-\t  rtx temp_reg = ((reload_in_progress || reload_completed)\n+\t  rtx temp_reg = (! can_create_pseudo_p ()\n \t\t\t  ? reg : gen_reg_rtx (Pmode));\n \n \t  /* Must put the SYMBOL_REF inside an UNSPEC here so that cse\n@@ -3753,7 +3749,7 @@ sparc_legitimize_pic_address (rtx orig, rtx reg)\n \n       if (reg == 0)\n \t{\n-\t  gcc_assert (! reload_in_progress && ! reload_completed);\n+\t  gcc_assert (can_create_pseudo_p ());\n \t  reg = gen_reg_rtx (Pmode);\n \t}\n \n@@ -3766,7 +3762,7 @@ sparc_legitimize_pic_address (rtx orig, rtx reg)\n \t{\n \t  if (SMALL_INT (offset))\n \t    return plus_constant (base, INTVAL (offset));\n-\t  else if (! reload_in_progress && ! reload_completed)\n+\t  else if (can_create_pseudo_p ())\n \t    offset = force_reg (Pmode, offset);\n \t  else\n \t    /* If we reach here, then something is seriously wrong.  */\n@@ -7900,7 +7896,7 @@ memory_ok_for_ldd (rtx op)\n       if (TARGET_ARCH32 && !mem_min_alignment (op, 8))\n \treturn 0;\n \n-      if ((reload_in_progress || reload_completed)\n+      if (! can_create_pseudo_p ()\n \t  && !strict_memory_address_p (Pmode, XEXP (op, 0)))\n \treturn 0;\n     }"}]}