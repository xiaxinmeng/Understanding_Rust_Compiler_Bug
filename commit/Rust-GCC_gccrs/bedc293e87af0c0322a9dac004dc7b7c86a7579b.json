{"sha": "bedc293e87af0c0322a9dac004dc7b7c86a7579b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkYzI5M2U4N2FmMGMwMzIyYTlkYWMwMDRkYzdiN2M4NmE3NTc5Yg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-06-27T21:29:22Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-06-27T21:29:22Z"}, "message": "re PR c++/57509 (Segmentation fault when using __builtin_shuffle in templated class.)\n\n2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/57509\n\ngcc/c-family/\n\t* c-common.h (c_build_vec_perm_expr): New complain argument.\n\t* c-common.c (c_build_vec_perm_expr): Likewise.\n\tUse save_expr also in C++.\n\ngcc/cp/\n\t* typeck.c (cp_build_vec_perm_expr): New function.\n\t* cp-tree.h: Declare it.\n\t* parser.c (cp_parser_postfix_expression): Call it.\n\t* pt.c (tsubst_copy): Handle VEC_PERM_EXPR.\n\t(tsubst_copy_and_build): Likewise.\n\ngcc/testsuite/\n\t* g++.dg/ext/pr57509.C: New file.\n\nFrom-SVN: r200495", "tree": {"sha": "37a7ba1615b56c5f026c57c7156e10579e63abcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37a7ba1615b56c5f026c57c7156e10579e63abcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bedc293e87af0c0322a9dac004dc7b7c86a7579b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedc293e87af0c0322a9dac004dc7b7c86a7579b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedc293e87af0c0322a9dac004dc7b7c86a7579b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedc293e87af0c0322a9dac004dc7b7c86a7579b/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a197d64cbb29606c45e52b66dcab8ba287c9177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a197d64cbb29606c45e52b66dcab8ba287c9177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a197d64cbb29606c45e52b66dcab8ba287c9177"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "c9a4f70e8bcc0396328d0414f9493ce30a5c68c7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -1,3 +1,10 @@\n+2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/57509\n+\t* c-common.h (c_build_vec_perm_expr): New complain argument.\n+\t* c-common.c (c_build_vec_perm_expr): Likewise.\n+\tUse save_expr also in C++.\n+\n 2013-06-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-common.c (c_common_nodes_and_builtins): Use cxx11 in lieu of cxx0x."}, {"sha": "8f7f5e52b0a9b487b1cbcbaeda5e0293a74ad06e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -2260,7 +2260,8 @@ vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n    an implementation accident and this semantics is not guaranteed to\n    the user.  */\n tree\n-c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n+c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n+\t\t       bool complain)\n {\n   tree ret;\n   bool wrap = true;\n@@ -2280,22 +2281,25 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n   if (TREE_CODE (TREE_TYPE (mask)) != VECTOR_TYPE\n       || TREE_CODE (TREE_TYPE (TREE_TYPE (mask))) != INTEGER_TYPE)\n     {\n-      error_at (loc, \"__builtin_shuffle last argument must \"\n-\t\t     \"be an integer vector\");\n+      if (complain)\n+\terror_at (loc, \"__builtin_shuffle last argument must \"\n+\t\t       \"be an integer vector\");\n       return error_mark_node;\n     }\n \n   if (TREE_CODE (TREE_TYPE (v0)) != VECTOR_TYPE\n       || TREE_CODE (TREE_TYPE (v1)) != VECTOR_TYPE)\n     {\n-      error_at (loc, \"__builtin_shuffle arguments must be vectors\");\n+      if (complain)\n+\terror_at (loc, \"__builtin_shuffle arguments must be vectors\");\n       return error_mark_node;\n     }\n \n   if (TYPE_MAIN_VARIANT (TREE_TYPE (v0)) != TYPE_MAIN_VARIANT (TREE_TYPE (v1)))\n     {\n-      error_at (loc, \"__builtin_shuffle argument vectors must be of \"\n-\t\t     \"the same type\");\n+      if (complain)\n+\terror_at (loc, \"__builtin_shuffle argument vectors must be of \"\n+\t\t       \"the same type\");\n       return error_mark_node;\n     }\n \n@@ -2304,17 +2308,19 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n       && TYPE_VECTOR_SUBPARTS (TREE_TYPE (v1))\n \t != TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask)))\n     {\n-      error_at (loc, \"__builtin_shuffle number of elements of the \"\n-\t\t     \"argument vector(s) and the mask vector should \"\n-\t\t     \"be the same\");\n+      if (complain)\n+\terror_at (loc, \"__builtin_shuffle number of elements of the \"\n+\t\t       \"argument vector(s) and the mask vector should \"\n+\t\t       \"be the same\");\n       return error_mark_node;\n     }\n \n   if (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (v0))))\n       != GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (mask)))))\n     {\n-      error_at (loc, \"__builtin_shuffle argument vector(s) inner type \"\n-\t\t     \"must have the same size as inner type of the mask\");\n+      if (complain)\n+\terror_at (loc, \"__builtin_shuffle argument vector(s) inner type \"\n+\t\t       \"must have the same size as inner type of the mask\");\n       return error_mark_node;\n     }\n \n@@ -2335,6 +2341,8 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n       mask = c_fully_fold (mask, false, &maybe_const);\n       wrap &= maybe_const;\n     }\n+  else if (two_arguments)\n+    v1 = v0 = save_expr (v0);\n \n   ret = build3_loc (loc, VEC_PERM_EXPR, TREE_TYPE (v0), v0, v1, mask);\n "}, {"sha": "6dfcffd79218395f029f5dd833f278453a3ef486", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -911,7 +911,7 @@ extern bool lvalue_p (const_tree);\n \n extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n-extern tree c_build_vec_perm_expr (location_t, tree, tree, tree);\n+extern tree c_build_vec_perm_expr (location_t, tree, tree, tree, bool = true);\n \n extern rtx c_expand_expr (tree, rtx, enum machine_mode, int, rtx *);\n "}, {"sha": "4f74133c2e7521b01e55782d17fae2e58b0bc7be", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -1,3 +1,12 @@\n+2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/57509\n+\t* typeck.c (cp_build_vec_perm_expr): New function.\n+\t* cp-tree.h: Declare it.\n+\t* parser.c (cp_parser_postfix_expression): Call it.\n+\t* pt.c (tsubst_copy): Handle VEC_PERM_EXPR.\n+\t(tsubst_copy_and_build): Likewise.\n+\n 2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/57172"}, {"sha": "4b2cd512f1c6cbae065c451c83e0dcc87311e19f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -6042,6 +6042,9 @@ extern tree check_return_expr\t\t\t(tree, bool *);\n extern tree cp_build_binary_op                  (location_t,\n \t\t\t\t\t\t enum tree_code, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n+extern tree build_x_vec_perm_expr               (location_t,\n+\t\t\t\t\t\t tree, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n #define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, true)\n extern tree build_simple_component_ref\t\t(tree, tree);\n extern tree build_ptrmemfunc_access_expr\t(tree, tree);"}, {"sha": "ad2fe257731a9d7ce2262d7c3455d97685165053", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -5691,9 +5691,11 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t  mark_exp_read (p);\n \n \tif (vec->length () == 2)\n-\t  return c_build_vec_perm_expr (loc, (*vec)[0], NULL_TREE, (*vec)[1]); \n+\t  return build_x_vec_perm_expr (loc, (*vec)[0], NULL_TREE, (*vec)[1],\n+\t\t\t\t\t tf_warning_or_error);\n \telse if (vec->length () == 3)\n-\t  return c_build_vec_perm_expr (loc, (*vec)[0], (*vec)[1], (*vec)[2]);\n+\t  return build_x_vec_perm_expr (loc, (*vec)[0], (*vec)[1], (*vec)[2],\n+\t\t\t\t\t tf_warning_or_error);\n \telse\n \t{\n \t  error_at (loc, \"wrong number of arguments to \""}, {"sha": "4ab64c9d826a5ba4a93f9bf9b4ab942c8cba75eb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -12464,6 +12464,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case COND_EXPR:\n     case MODOP_EXPR:\n     case PSEUDO_DTOR_EXPR:\n+    case VEC_PERM_EXPR:\n       {\n \tr = build_nt\n \t  (code, tsubst_copy (TREE_OPERAND (t, 0), args, complain, in_decl),\n@@ -14628,6 +14629,13 @@ tsubst_copy_and_build (tree t,\n     case PAREN_EXPR:\n       RETURN (finish_parenthesized_expr (RECUR (TREE_OPERAND (t, 0))));\n \n+    case VEC_PERM_EXPR:\n+      RETURN (build_x_vec_perm_expr (input_location,\n+\t\tRECUR (TREE_OPERAND (t, 0)),\n+\t\tRECUR (TREE_OPERAND (t, 1)),\n+\t\tRECUR (TREE_OPERAND (t, 2)),\n+\t\tcomplain));\n+\n     default:\n       /* Handle Objective-C++ constructs, if appropriate.  */\n       {"}, {"sha": "4a7f1f68c71c46f06546b963d66bc49eeaaacc4a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -4871,6 +4871,21 @@ cp_build_binary_op (location_t location,\n \n   return result;\n }\n+\n+/* Build a VEC_PERM_EXPR.\n+   This is a simple wrapper for c_build_vec_perm_expr.  */\n+tree\n+build_x_vec_perm_expr (location_t loc,\n+\t\t\ttree arg0, tree arg1, tree arg2,\n+\t\t\ttsubst_flags_t complain)\n+{\n+  if (processing_template_decl\n+      && (type_dependent_expression_p (arg0)\n+\t  || type_dependent_expression_p (arg1)\n+\t  || type_dependent_expression_p (arg2)))\n+    return build_min_nt_loc (loc, VEC_PERM_EXPR, arg0, arg1, arg2);\n+  return c_build_vec_perm_expr (loc, arg0, arg1, arg2, complain & tf_error);\n+}\n \f\n /* Return a tree for the sum or difference (RESULTCODE says which)\n    of pointer PTROP and integer INTOP.  */"}, {"sha": "22b10523acb1f217c59755d8797dafcbe58c45de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -1,3 +1,8 @@\n+2013-06-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/57509\n+\t* g++.dg/ext/pr57509.C: New file.\n+\n 2013-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/57623"}, {"sha": "d44ee81e091bab516c5edf6e9205591e24a8c4da", "filename": "gcc/testsuite/g++.dg/ext/pr57509.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57509.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedc293e87af0c0322a9dac004dc7b7c86a7579b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57509.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57509.C?ref=bedc293e87af0c0322a9dac004dc7b7c86a7579b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++11\" } */\n+\n+template <bool> struct enable_if {};\n+template <> struct enable_if<true> {typedef void type;};\n+template <class T> void f (T& v) { v = __builtin_shuffle (v, v); }\n+template <class T> void g (T) {}\n+template <class T> auto g (T x) -> typename enable_if<sizeof(__builtin_shuffle(x,x))!=2>::type {}\n+typedef int v4i __attribute__((vector_size(4*sizeof(int))));\n+typedef float v4f __attribute__((vector_size(4*sizeof(float))));\n+int main(){\n+  v4i a = {1,2,3,0};\n+  f(a);\n+  v4f b = {1,2,3,0};\n+  g(b);\n+}"}]}