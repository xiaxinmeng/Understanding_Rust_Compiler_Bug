{"sha": "33959d1d3c8f791c6b293367fdfb8acacab17534", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5NTlkMWQzYzhmNzkxYzZiMjkzMzY3ZmRmYjhhY2FjYWIxNzUzNA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-16T08:30:26Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-16T08:30:26Z"}, "message": "Share vtables instead of replicating them for each unit.\n\n2012-03-16  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* io/unix.h (struct stream): Rename to stream_vtable.\n\t(struct stream): New struct definition.\n\t(sread): Dereference vtable pointer.\n\t(swrite): Likewise.\n\t(sseek): Likewise.\n\t(struncate): Likewise.\n\t(sflush): Likewise.\n\t(sclose): Likewise.\n\t* io/unix.c (raw_vtable): New variable.\n\t(buf_vtable): Likewise.\n\t(mem_vtable): Likewise.\n\t(mem4_vtable): Likewise.\n\t(raw_init): Assign vtable pointer.\n\t(buf_init): Likewise.\n\t(open_internal): Likewise.\n\t(open_internal4): Likewise.\n\nFrom-SVN: r185454", "tree": {"sha": "a57a717a913b31ddd91e573fff313fe1d159570e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a57a717a913b31ddd91e573fff313fe1d159570e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33959d1d3c8f791c6b293367fdfb8acacab17534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33959d1d3c8f791c6b293367fdfb8acacab17534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33959d1d3c8f791c6b293367fdfb8acacab17534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33959d1d3c8f791c6b293367fdfb8acacab17534/comments", "author": null, "committer": null, "parents": [{"sha": "c4256b35bfb6a4395951053536300ca1725b0521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4256b35bfb6a4395951053536300ca1725b0521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4256b35bfb6a4395951053536300ca1725b0521"}], "stats": {"total": 145, "additions": 91, "deletions": 54}, "files": [{"sha": "d2b74accdc592cd28ad15540a31188403a8d5e04", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33959d1d3c8f791c6b293367fdfb8acacab17534/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33959d1d3c8f791c6b293367fdfb8acacab17534/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=33959d1d3c8f791c6b293367fdfb8acacab17534", "patch": "@@ -1,3 +1,22 @@\n+2012-03-16  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* io/unix.h (struct stream): Rename to stream_vtable.\n+\t(struct stream): New struct definition.\n+\t(sread): Dereference vtable pointer.\n+\t(swrite): Likewise.\n+\t(sseek): Likewise.\n+\t(struncate): Likewise.\n+\t(sflush): Likewise.\n+\t(sclose): Likewise.\n+\t* io/unix.c (raw_vtable): New variable.\n+\t(buf_vtable): Likewise.\n+\t(mem_vtable): Likewise.\n+\t(mem4_vtable): Likewise.\n+\t(raw_init): Assign vtable pointer.\n+\t(buf_init): Likewise.\n+\t(open_internal): Likewise.\n+\t(open_internal4): Likewise.\n+\n 2012-03-15  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         PR libfortran/52434"}, {"sha": "978c3fffc9106c09c1f7f669f519b289c3fd079d", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33959d1d3c8f791c6b293367fdfb8acacab17534/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33959d1d3c8f791c6b293367fdfb8acacab17534/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=33959d1d3c8f791c6b293367fdfb8acacab17534", "patch": "@@ -401,17 +401,21 @@ raw_close (unix_stream * s)\n   return retval;\n }\n \n+static const struct stream_vtable raw_vtable = {\n+  .read = (void *) raw_read,\n+  .write = (void *) raw_write,\n+  .seek = (void *) raw_seek,\n+  .tell = (void *) raw_tell,\n+  .size = (void *) raw_size,\n+  .trunc = (void *) raw_truncate,\n+  .close = (void *) raw_close,\n+  .flush = (void *) raw_flush \n+};\n+\n static int\n raw_init (unix_stream * s)\n {\n-  s->st.read = (void *) raw_read;\n-  s->st.write = (void *) raw_write;\n-  s->st.seek = (void *) raw_seek;\n-  s->st.tell = (void *) raw_tell;\n-  s->st.size = (void *) raw_size;\n-  s->st.trunc = (void *) raw_truncate;\n-  s->st.close = (void *) raw_close;\n-  s->st.flush = (void *) raw_flush;\n+  s->st.vptr = &raw_vtable;\n \n   s->buffer = NULL;\n   return 0;\n@@ -619,17 +623,21 @@ buf_close (unix_stream * s)\n   return raw_close (s);\n }\n \n+static const struct stream_vtable buf_vtable = {\n+  .read = (void *) buf_read,\n+  .write = (void *) buf_write,\n+  .seek = (void *) buf_seek,\n+  .tell = (void *) buf_tell,\n+  .size = (void *) buf_size,\n+  .trunc = (void *) buf_truncate,\n+  .close = (void *) buf_close,\n+  .flush = (void *) buf_flush \n+};\n+\n static int\n buf_init (unix_stream * s)\n {\n-  s->st.read = (void *) buf_read;\n-  s->st.write = (void *) buf_write;\n-  s->st.seek = (void *) buf_seek;\n-  s->st.tell = (void *) buf_tell;\n-  s->st.size = (void *) buf_size;\n-  s->st.trunc = (void *) buf_truncate;\n-  s->st.close = (void *) buf_close;\n-  s->st.flush = (void *) buf_flush;\n+  s->st.vptr = &buf_vtable;\n \n   s->buffer = get_mem (BUFFER_SIZE);\n   return 0;\n@@ -872,6 +880,31 @@ mem_close (unix_stream * s)\n   return 0;\n }\n \n+static const struct stream_vtable mem_vtable = {\n+  .read = (void *) mem_read,\n+  .write = (void *) mem_write,\n+  .seek = (void *) mem_seek,\n+  .tell = (void *) mem_tell,\n+  /* buf_size is not a typo, we just reuse an identical\n+     implementation.  */\n+  .size = (void *) buf_size,\n+  .trunc = (void *) mem_truncate,\n+  .close = (void *) mem_close,\n+  .flush = (void *) mem_flush \n+};\n+\n+static const struct stream_vtable mem4_vtable = {\n+  .read = (void *) mem_read4,\n+  .write = (void *) mem_write4,\n+  .seek = (void *) mem_seek,\n+  .tell = (void *) mem_tell,\n+  /* buf_size is not a typo, we just reuse an identical\n+     implementation.  */\n+  .size = (void *) buf_size,\n+  .trunc = (void *) mem_truncate,\n+  .close = (void *) mem_close,\n+  .flush = (void *) mem_flush \n+};\n \n /*********************************************************************\n   Public functions -- A reimplementation of this module needs to\n@@ -895,16 +928,7 @@ open_internal (char *base, int length, gfc_offset offset)\n   s->logical_offset = 0;\n   s->active = s->file_length = length;\n \n-  s->st.close = (void *) mem_close;\n-  s->st.seek = (void *) mem_seek;\n-  s->st.tell = (void *) mem_tell;\n-  /* buf_size is not a typo, we just reuse an identical\n-     implementation.  */\n-  s->st.size = (void *) buf_size;\n-  s->st.trunc = (void *) mem_truncate;\n-  s->st.read = (void *) mem_read;\n-  s->st.write = (void *) mem_write;\n-  s->st.flush = (void *) mem_flush;\n+  s->st.vptr = &mem_vtable;\n \n   return (stream *) s;\n }\n@@ -926,16 +950,7 @@ open_internal4 (char *base, int length, gfc_offset offset)\n   s->logical_offset = 0;\n   s->active = s->file_length = length;\n \n-  s->st.close = (void *) mem_close;\n-  s->st.seek = (void *) mem_seek;\n-  s->st.tell = (void *) mem_tell;\n-  /* buf_size is not a typo, we just reuse an identical\n-     implementation.  */\n-  s->st.size = (void *) buf_size;\n-  s->st.trunc = (void *) mem_truncate;\n-  s->st.read = (void *) mem_read4;\n-  s->st.write = (void *) mem_write4;\n-  s->st.flush = (void *) mem_flush;\n+  s->st.vptr = &mem4_vtable;\n \n   return (stream *) s;\n }"}, {"sha": "f4f3ab687e28e04382016d644def77d6ecac8d41", "filename": "libgfortran/io/unix.h", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33959d1d3c8f791c6b293367fdfb8acacab17534/libgfortran%2Fio%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33959d1d3c8f791c6b293367fdfb8acacab17534/libgfortran%2Fio%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.h?ref=33959d1d3c8f791c6b293367fdfb8acacab17534", "patch": "@@ -28,68 +28,71 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"io.h\"\n \n-\n-struct stream\n+struct stream_vtable\n {\n-  ssize_t (*read) (struct stream *, void *, ssize_t);\n-  ssize_t (*write) (struct stream *, const void *, ssize_t);\n-  gfc_offset (*seek) (struct stream *, gfc_offset, int);\n-  gfc_offset (*tell) (struct stream *);\n-  gfc_offset (*size) (struct stream *);\n+  ssize_t (* const read) (struct stream *, void *, ssize_t);\n+  ssize_t (* const write) (struct stream *, const void *, ssize_t);\n+  gfc_offset (* const seek) (struct stream *, gfc_offset, int);\n+  gfc_offset (* const tell) (struct stream *);\n+  gfc_offset (* const size) (struct stream *);\n   /* Avoid keyword truncate due to AIX namespace collision.  */\n-  int (*trunc) (struct stream *, gfc_offset);\n-  int (*flush) (struct stream *);\n-  int (*close) (struct stream *);\n+  int (* const trunc) (struct stream *, gfc_offset);\n+  int (* const flush) (struct stream *);\n+  int (* const close) (struct stream *);\n };\n \n+struct stream\n+{\n+  const struct stream_vtable *vptr;\n+};\n \n /* Inline functions for doing file I/O given a stream.  */\n static inline ssize_t\n sread (stream * s, void * buf, ssize_t nbyte)\n {\n-  return s->read (s, buf, nbyte);\n+  return s->vptr->read (s, buf, nbyte);\n }\n \n static inline ssize_t\n swrite (stream * s, const void * buf, ssize_t nbyte)\n {\n-  return s->write (s, buf, nbyte);\n+  return s->vptr->write (s, buf, nbyte);\n }\n \n static inline gfc_offset\n sseek (stream * s, gfc_offset offset, int whence)\n {\n-  return s->seek (s, offset, whence);\n+  return s->vptr->seek (s, offset, whence);\n }\n \n static inline gfc_offset\n stell (stream * s)\n {\n-  return s->tell (s);\n+  return s->vptr->tell (s);\n }\n \n static inline gfc_offset\n ssize (stream * s)\n {\n-  return s->size (s);\n+  return s->vptr->size (s);\n }\n \n static inline int\n struncate (stream * s, gfc_offset length)\n {\n-  return s->trunc (s, length);\n+  return s->vptr->trunc (s, length);\n }\n \n static inline int\n sflush (stream * s)\n {\n-  return s->flush (s);\n+  return s->vptr->flush (s);\n }\n \n static inline int\n sclose (stream * s)\n {\n-  return s->close (s);\n+  return s->vptr->close (s);\n }\n \n "}]}