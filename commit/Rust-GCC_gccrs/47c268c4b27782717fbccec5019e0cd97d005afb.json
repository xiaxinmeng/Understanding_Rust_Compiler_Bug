{"sha": "47c268c4b27782717fbccec5019e0cd97d005afb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjMjY4YzRiMjc3ODI3MTdmYmNjZWM1MDE5ZTBjZDk3ZDAwNWFmYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-16T15:18:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-16T15:18:24Z"}, "message": "re PR libgomp/83590 ([nvptx] openacc reduction C regressions)\n\n\tPR libgomp/83590\n\t* gimplify.c (gimplify_one_sizepos): For is_gimple_constant (expr)\n\treturn early, inline manually is_gimple_sizepos.  Make sure if we\n\tcall gimplify_expr we don't end up with a gimple constant.\n\t* tree.c (variably_modified_type_p): Don't return true for\n\tis_gimple_constant (_t).  Inline manually is_gimple_sizepos.\n\t* gimplify.h (is_gimple_sizepos): Remove.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r256748", "tree": {"sha": "5c745cb7d58bf3c4f7d5f54233cd961caf3125d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c745cb7d58bf3c4f7d5f54233cd961caf3125d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c268c4b27782717fbccec5019e0cd97d005afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c268c4b27782717fbccec5019e0cd97d005afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c268c4b27782717fbccec5019e0cd97d005afb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c268c4b27782717fbccec5019e0cd97d005afb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "343aefdc0deb4729b3d1ee08107206f989c657f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47c268c4b27782717fbccec5019e0cd97d005afb", "patch": "@@ -1,3 +1,14 @@\n+2018-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Biener  <rguenth@suse.de>\n+\n+\tPR libgomp/83590\n+\t* gimplify.c (gimplify_one_sizepos): For is_gimple_constant (expr)\n+\treturn early, inline manually is_gimple_sizepos.  Make sure if we\n+\tcall gimplify_expr we don't end up with a gimple constant.\n+\t* tree.c (variably_modified_type_p): Don't return true for\n+\tis_gimple_constant (_t).  Inline manually is_gimple_sizepos.\n+\t* gimplify.h (is_gimple_sizepos): Remove.\n+\n 2018-01-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83857"}, {"sha": "8e86c338fc1f6ff6a4012ac9c377cf1087dca1df", "filename": "gcc/gimplify.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=47c268c4b27782717fbccec5019e0cd97d005afb", "patch": "@@ -12562,14 +12562,23 @@ gimplify_one_sizepos (tree *expr_p, gimple_seq *stmt_p)\n      a VAR_DECL.  If it's a VAR_DECL from another function, the gimplifier\n      will want to replace it with a new variable, but that will cause problems\n      if this type is from outside the function.  It's OK to have that here.  */\n-  if (is_gimple_sizepos (expr))\n+  if (expr == NULL_TREE\n+      || is_gimple_constant (expr)\n+      || TREE_CODE (expr) == VAR_DECL\n+      || CONTAINS_PLACEHOLDER_P (expr))\n     return;\n \n   *expr_p = unshare_expr (expr);\n \n   /* SSA names in decl/type fields are a bad idea - they'll get reclaimed\n      if the def vanishes.  */\n   gimplify_expr (expr_p, stmt_p, NULL, is_gimple_val, fb_rvalue, false);\n+\n+  /* If expr wasn't already is_gimple_sizepos or is_gimple_constant from the\n+     FE, ensure that it is a VAR_DECL, otherwise we might handle some decls\n+     as gimplify_vla_decl even when they would have all sizes INTEGER_CSTs.  */\n+  if (is_gimple_constant (*expr_p))\n+    *expr_p = get_initialized_tmp_var (*expr_p, stmt_p, NULL, false);\n }\n \n /* Gimplify the body of statements of FNDECL and return a GIMPLE_BIND node"}, {"sha": "dd0e4c01752bc919cd6b8d3eaf35e8c874409d72", "filename": "gcc/gimplify.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=47c268c4b27782717fbccec5019e0cd97d005afb", "patch": "@@ -85,23 +85,4 @@ extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n \t\t\t\t\t\t  gimple_seq *);\n gimple *gimplify_assign (tree, tree, gimple_seq *);\n \n-/* Return true if gimplify_one_sizepos doesn't need to gimplify\n-   expr (when in TYPE_SIZE{,_UNIT} and similar type/decl size/bitsize\n-   fields).  */\n-\n-static inline bool\n-is_gimple_sizepos (tree expr)\n-{\n-  /* gimplify_one_sizepos doesn't need to do anything if the value isn't there,\n-     is constant, or contains A PLACEHOLDER_EXPR.  We also don't want to do\n-     anything if it's already a VAR_DECL.  If it's a VAR_DECL from another\n-     function, the gimplifier will want to replace it with a new variable,\n-     but that will cause problems if this type is from outside the function.\n-     It's OK to have that here.  */\n-  return (expr == NULL_TREE\n-\t  || TREE_CODE (expr) == INTEGER_CST\n-\t  || TREE_CODE (expr) == VAR_DECL\n-\t  || CONTAINS_PLACEHOLDER_P (expr));\n-}                                        \n-\n #endif /* GCC_GIMPLIFY_H */"}, {"sha": "b3e93b87eb2dc0079b05fc20804531876bd52b90", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c268c4b27782717fbccec5019e0cd97d005afb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=47c268c4b27782717fbccec5019e0cd97d005afb", "patch": "@@ -8825,11 +8825,12 @@ variably_modified_type_p (tree type, tree fn)\n   do { tree _t = (T);\t\t\t\t\t\t\t\\\n     if (_t != NULL_TREE\t\t\t\t\t\t\t\\\n \t&& _t != error_mark_node\t\t\t\t\t\\\n-\t&& TREE_CODE (_t) != INTEGER_CST\t\t\t\t\\\n+\t&& !CONSTANT_CLASS_P (_t)\t\t\t\t\t\\\n \t&& TREE_CODE (_t) != PLACEHOLDER_EXPR\t\t\t\t\\\n \t&& (!fn\t\t\t\t\t\t\t\t\\\n \t    || (!TYPE_SIZES_GIMPLIFIED (type)\t\t\t\t\\\n-\t\t&& !is_gimple_sizepos (_t))\t\t\t\t\\\n+\t\t&& (TREE_CODE (_t) != VAR_DECL\t\t\t\t\\\n+\t\t    && !CONTAINS_PLACEHOLDER_P (_t)))\t\t\t\\\n \t    || walk_tree (&_t, find_var_from_fn, fn, NULL)))\t\t\\\n       return true;  } while (0)\n "}]}