{"sha": "98f3c1dbd3f00fd828ed32416ac4c3eaffd28063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmM2MxZGJkM2YwMGZkODI4ZWQzMjQxNmFjNGMzZWFmZmQyODA2Mw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-02-26T02:05:35Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-02-26T02:05:35Z"}, "message": "parse.y (resolve_expression_name): Use `orig' as a second argument to resolve_field_access.\n\nFri Feb 25 18:00:37 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (resolve_expression_name): Use `orig' as a second\n \targument to resolve_field_access.\n\t(resolve_field_access): Removed unecessary code when dealing with\n \tstatic fields.\n\nFrom-SVN: r32158", "tree": {"sha": "d671a89d7dbb78fdc73a15387b6f6a851e846f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d671a89d7dbb78fdc73a15387b6f6a851e846f00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063/comments", "author": null, "committer": null, "parents": [{"sha": "3924a5783b6d59796b7c2b14c278769f45d04aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3924a5783b6d59796b7c2b14c278769f45d04aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3924a5783b6d59796b7c2b14c278769f45d04aca"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "0fbdaae120d3fa4efc9c3c53a317869b9ba64cf8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=98f3c1dbd3f00fd828ed32416ac4c3eaffd28063", "patch": "@@ -1,3 +1,10 @@\n+Fri Feb 25 18:00:37 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (resolve_expression_name): Use `orig' as a second\n+ \targument to resolve_field_access.\n+\t(resolve_field_access): Removed unecessary code when dealing with\n+ \tstatic fields.\n+\n 2000-02-23  Tom Tromey  <tromey@cygnus.com>\n \n \t* gjavah.c (print_name): In JNI case, correctly quote string."}, {"sha": "35ab269a925732b1b7a067f1c05828946cbf1b3d", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f3c1dbd3f00fd828ed32416ac4c3eaffd28063/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=98f3c1dbd3f00fd828ed32416ac4c3eaffd28063", "patch": "@@ -6532,7 +6532,7 @@ resolve_expression_name (id, orig)\n       qualify_ambiguous_name (id);\n       /* 15.10.1 Field Access Using a Primary and/or Expression Name */\n       /* 15.10.2: Accessing Superclass Members using super */\n-      return resolve_field_access (id, NULL, NULL);\n+      return resolve_field_access (id, orig, NULL);\n     }\n \n   /* We've got an error here */\n@@ -6605,21 +6605,7 @@ resolve_field_access (qual_wfl, field_decl, field_type)\n \treturn error_mark_node;\n       if (is_static && !static_final_found \n \t  && !flag_emit_class_files && !flag_emit_xref)\n-\t{\n-\t  field_ref = build_class_init (type_found, field_ref);\n-\t  /* If the static field was identified by an expression that\n-\t     needs to be generated, make the field access a compound\n-\t     expression whose first part is the evaluation of the\n-\t     field selector part. */\n-\t  if (where_found && TREE_CODE (where_found) != TYPE_DECL \n-\t      && TREE_CODE (where_found) != RECORD_TYPE)\n-\t    {\n-\t      tree type = QUAL_DECL_TYPE (field_ref);\n-\t      if (TREE_CODE (type) == RECORD_TYPE)\n-\t\ttype = build_pointer_type (type);\n-\t      field_ref = build (COMPOUND_EXPR, type, where_found, field_ref);\n-\t    }\n-\t}\n+\tfield_ref = build_class_init (type_found, field_ref);\n     }\n   else\n     field_ref = decl;"}]}