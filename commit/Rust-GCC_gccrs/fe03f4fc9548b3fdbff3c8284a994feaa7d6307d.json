{"sha": "fe03f4fc9548b3fdbff3c8284a994feaa7d6307d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwM2Y0ZmM5NTQ4YjNmZGJmZjNjODI4NGE5OTRmZWFhN2Q2MzA3ZA==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-05-23T18:51:14Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-05-23T18:51:14Z"}, "message": "Fortran: fix passing return value to class(*) dummy argument\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100551\n\t* trans-expr.c (gfc_conv_procedure_call): Adjust check for\n\timplicit conversion of actual argument to an unlimited polymorphic\n\tprocedure argument.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100551\n\t* gfortran.dg/pr100551.f90: New test.", "tree": {"sha": "0bfbd5616997e2a502a6dc32f0a545fb434087da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bfbd5616997e2a502a6dc32f0a545fb434087da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4dbd5cffa6acb100dd75017ef95dadc3d8a136f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4dbd5cffa6acb100dd75017ef95dadc3d8a136f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4dbd5cffa6acb100dd75017ef95dadc3d8a136f"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "3432cd4fdfd00898973c8b36e4d6844083aff566", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=fe03f4fc9548b3fdbff3c8284a994feaa7d6307d", "patch": "@@ -5826,7 +5826,9 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t\t     &derived_array);\n \t}\n       else if (UNLIMITED_POLY (fsym) && e->ts.type != BT_CLASS\n-\t       && gfc_expr_attr (e).flavor != FL_PROCEDURE)\n+\t       && e->ts.type != BT_PROCEDURE\n+\t       && (gfc_expr_attr (e).flavor != FL_PROCEDURE\n+\t\t   || gfc_expr_attr (e).proc != PROC_UNKNOWN))\n \t{\n \t  /* The intrinsic type needs to be converted to a temporary\n \t     CLASS object for the unlimited polymorphic formal.  */"}, {"sha": "f82f505e73409489f196bd250fbb65dacfc8f098", "filename": "gcc/testsuite/gfortran.dg/pr100551.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100551.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe03f4fc9548b3fdbff3c8284a994feaa7d6307d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100551.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr100551.f90?ref=fe03f4fc9548b3fdbff3c8284a994feaa7d6307d", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+! PR fortran/100551 - Passing return value to class(*) dummy argument\n+\n+program p\n+  implicit none\n+  integer :: result\n+  result = 1\n+  result = test (    (result)) ! works\n+  if (result /= 1) stop 1\n+  result = test (int (result)) ! issue 1\n+! write(*,*) result\n+  if (result /= 1) stop 2\n+  result = test (f   (result)) ! issue 2\n+! write(*,*) result\n+  if (result /= 2) stop 3\n+contains\n+  integer function test(x)\n+    class(*), intent(in) :: x\n+    select type (x)\n+    type is (integer)\n+       test = x\n+    class default\n+       test = -1\n+    end select\n+  end function test\n+  integer function f(x)\n+    integer, intent(in) :: x\n+    f = 2*x\n+  end function f\n+end program"}]}