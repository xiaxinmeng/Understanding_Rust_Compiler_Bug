{"sha": "da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1YjFlYzEyMGNkNGY4ZTY4ZmY5ZjgzZjUyYTkzZjNhMTViZmI3NA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-04T07:14:11Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-04T07:14:11Z"}, "message": "predicates (post_inc_mem, [...]): New predicates.\n\ngcc/\n\t* config/sh/predicates (post_inc_mem, pre_dec_mem): New predicates.\n\t* config/sh/sh-protos.h (sh_find_set_of_reg): Return null result if\n\tresult.set_rtx is null instead of aborting.\n\t* config/sh/sh.h (USE_LOAD_POST_INCREMENT, USE_STORE_PRE_DECREMENT):\n\tAlways enable.\n\t(USE_LOAD_PRE_DECREMENT, USE_STORE_POST_INCREMENT): Enable for SH2A.\n\t* config/sh/sh.md (*extend<mode>si2_predec, *mov<mode>_load_predec,\n\t*mov<mode>_store_postinc): New patterns.\n\nFrom-SVN: r235859", "tree": {"sha": "b83fc185cc0166a1c0a9e4730902267830baed4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83fc185cc0166a1c0a9e4730902267830baed4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/comments", "author": null, "committer": null, "parents": [{"sha": "e07ab2feaf8f83bfab64ef0746b4fb8ee65033d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07ab2feaf8f83bfab64ef0746b4fb8ee65033d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e07ab2feaf8f83bfab64ef0746b4fb8ee65033d3"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "272b1ed1cc2bdedf7dc06dc8b84bc74dbc793447", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "patch": "@@ -1,3 +1,14 @@\n+2016-05-04  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/predicates (post_inc_mem, pre_dec_mem): New predicates.\n+\t* config/sh/sh-protos.h (sh_find_set_of_reg): Return null result if\n+\tresult.set_rtx is null instead of aborting.\n+\t* config/sh/sh.h (USE_LOAD_POST_INCREMENT, USE_STORE_PRE_DECREMENT):\n+\tAlways enable.\n+\t(USE_LOAD_PRE_DECREMENT, USE_STORE_POST_INCREMENT): Enable for SH2A.\n+\t* config/sh/sh.md (*extend<mode>si2_predec, *mov<mode>_load_predec,\n+\t*mov<mode>_store_postinc): New patterns.\n+\n 2016-05-04  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd ((A | B) & (A | C)): Generalize to BIT_XOR_EXPR.  Mark"}, {"sha": "b582637642a6e1ea3f1738606c0bfa69c3547a83", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "patch": "@@ -230,6 +230,18 @@\n        (match_test \"sh_disp_addr_displacement (op)\n \t\t    <= sh_max_mov_insn_displacement (GET_MODE (op), false)\")))\n \n+;; Returns true if OP is a post-increment addressing mode memory reference.\n+(define_predicate \"post_inc_mem\"\n+  (and (match_code \"mem\")\n+       (match_code \"post_inc\" \"0\")\n+       (match_code \"reg\" \"00\")))\n+\n+;; Returns true if OP is a pre-decrement addressing mode memory reference.\n+(define_predicate \"pre_dec_mem\"\n+  (and (match_code \"mem\")\n+       (match_code \"pre_dec\" \"0\")\n+       (match_code \"reg\" \"00\")))\n+\n ;; Returns 1 if the operand can be used in an SH2A movu.{b|w} insn.\n (define_predicate \"zero_extend_movu_operand\"\n   (and (ior (match_operand 0 \"displacement_mem_operand\")"}, {"sha": "c47e2eade1534134c27e9feae98cbbbbd34bed6a", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "patch": "@@ -224,8 +224,12 @@ sh_find_set_of_reg (rtx reg, rtx_insn* insn, F stepfunc,\n \t}\n     }\n \n-  if (result.set_src != NULL)\n-    gcc_assert (result.insn != NULL && result.set_rtx != NULL);\n+  /* If the searched reg is found inside a (mem (post_inc:SI (reg))), set_of\n+     will return NULL and set_rtx will be NULL.\n+     In this case report a 'not found'.  result.insn will always be non-null\n+     at this point, so no need to check it.  */\n+  if (result.set_src != NULL && result.set_rtx == NULL)\n+    result.set_src = NULL;\n \n   return result;\n }"}, {"sha": "16b4a8e69007478454143a7c3da957fcdd06deae", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "patch": "@@ -1307,12 +1307,10 @@ struct sh_args {\n #define HAVE_POST_INCREMENT  TARGET_SH1\n #define HAVE_PRE_DECREMENT   TARGET_SH1\n \n-#define USE_LOAD_POST_INCREMENT(mode)    ((mode == SImode || mode == DImode) \\\n-\t\t\t\t\t  ? 0 : TARGET_SH1)\n-#define USE_LOAD_PRE_DECREMENT(mode)     0\n-#define USE_STORE_POST_INCREMENT(mode)   0\n-#define USE_STORE_PRE_DECREMENT(mode)    ((mode == SImode || mode == DImode) \\\n-\t\t\t\t\t  ? 0 : TARGET_SH1)\n+#define USE_LOAD_POST_INCREMENT(mode) TARGET_SH1\n+#define USE_LOAD_PRE_DECREMENT(mode) TARGET_SH2A\n+#define USE_STORE_POST_INCREMENT(mode) TARGET_SH2A\n+#define USE_STORE_PRE_DECREMENT(mode) TARGET_SH1\n \n /* If a memory clear move would take CLEAR_RATIO or more simple\n    move-instruction pairs, we will do a setmem instead.  */"}, {"sha": "2a8fbc8df9b954d282cf8fd82a25dfe3d83714ea", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=da5b1ec120cd4f8e68ff9f83f52a93f3a15bfb74", "patch": "@@ -4820,6 +4820,15 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"2,2,4\")])\n \n+;; The pre-dec and post-inc mems must be captured by the '<' and '>'\n+;; constraints, otherwise wrong code might get generated.\n+(define_insn \"*extend<mode>si2_predec\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=z\")\n+\t(sign_extend:SI (match_operand:QIHI 1 \"pre_dec_mem\" \"<\")))]\n+  \"TARGET_SH2A\"\n+  \"mov.<bw>\t%1,%0\"\n+  [(set_attr \"type\" \"load\")])\n+\n ;; The *_snd patterns will take care of other QImode/HImode addressing\n ;; modes than displacement addressing.  They must be defined _after_ the\n ;; displacement addressing patterns.  Otherwise the displacement addressing\n@@ -5261,6 +5270,22 @@\n   prepare_move_operands (operands, <MODE>mode);\n })\n \n+;; The pre-dec and post-inc mems must be captured by the '<' and '>'\n+;; constraints, otherwise wrong code might get generated.\n+(define_insn \"*mov<mode>_load_predec\"\n+  [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=z\")\n+\t(match_operand:QIHISI 1 \"pre_dec_mem\" \"<\"))]\n+  \"TARGET_SH2A\"\n+  \"mov.<bwl>\t%1,%0\"\n+  [(set_attr \"type\" \"load\")])\n+\n+(define_insn \"*mov<mode>_store_postinc\"\n+  [(set (match_operand:QIHISI 0 \"post_inc_mem\" \"=>\")\n+\t(match_operand:QIHISI 1 \"arith_reg_operand\" \"z\"))]\n+  \"TARGET_SH2A\"\n+  \"mov.<bwl>\t%1,%0\"\n+  [(set_attr \"type\" \"store\")])\n+\n ;; Specifying the displacement addressing load / store patterns separately\n ;; before the generic movqi / movhi pattern allows controlling the order\n ;; in which load / store insns are selected in a more fine grained way."}]}