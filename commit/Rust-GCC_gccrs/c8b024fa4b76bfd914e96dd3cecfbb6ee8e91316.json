{"sha": "c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiMDI0ZmE0Yjc2YmZkOTE0ZTk2ZGQzY2VjZmJiNmVlOGU5MTMxNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-05T15:46:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-05T18:01:51Z"}, "message": "libstdc++: Move [[nodiscard]] attributes again [PR101782]\n\nWhere I moved these nodiscard attributes to made them apply to the\nfunction type, not to the function. This meant they no longer generated\nthe desired -Wunused-result warnings, and were ill-formed with Clang\n(but only a pedwarn with GCC).\n\nClang also detected ill-formed attributes in <queue> which this fixes.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101782\n\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n\t(ranges::rbegin, ranges::rend, ranges::size, ranges::ssize)\n\t(ranges::empty, ranges::data): Move attribute after the\n\tdeclarator-id instead of at the end of the declarator.\n\t* include/bits/stl_iterator.h (__gnu_cxx::__normal_iterator):\n\tMove attributes back to the start of the function declarator,\n\tbut move the requires-clause to the end.\n\t(common_iterator): Move attribute after the declarator-id.\n\t* include/bits/stl_queue.h (queue): Remove ill-formed attributes\n\tfrom friend declaration that are not definitions.\n\t* include/std/ranges (views::all, views::filter)\n\t(views::transform, views::take, views::take_while,\n\tviews::drop) (views::drop_while, views::join,\n\tviews::lazy_split) (views::split, views::counted,\n\tviews::common, views::reverse) (views::elements): Move\n\tattributes after the declarator-id.", "tree": {"sha": "afb7a2985f449804455cbe65e9c7c848d63dc5d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afb7a2985f449804455cbe65e9c7c848d63dc5d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4739344d36e6d24764cbedde44a3fff6edc70f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4739344d36e6d24764cbedde44a3fff6edc70f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4739344d36e6d24764cbedde44a3fff6edc70f6c"}], "stats": {"total": 93, "additions": 33, "deletions": 60}, "files": [{"sha": "49c7d9c9f066371ee419f1d7d0361a0ee456619d", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "patch": "@@ -111,8 +111,7 @@ namespace ranges\n \trequires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>\n \t  || __adl_begin<_Tp>\n \tconstexpr auto\n-\toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n-\t[[nodiscard]]\n+\toperator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n \t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n \t    {\n@@ -163,8 +162,7 @@ namespace ranges\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n \t  || __member_end<_Tp> || __adl_end<_Tp>\n \tconstexpr auto\n-\toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n-\t[[nodiscard]]\n+\toperator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n \t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    {\n@@ -268,9 +266,8 @@ namespace ranges\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rbegin<_Tp> || __adl_rbegin<_Tp> || __reversable<_Tp>\n \tconstexpr auto\n-\toperator()(_Tp&& __t) const\n+\toperator()[[nodiscard]](_Tp&& __t) const\n \tnoexcept(_S_noexcept<_Tp&>())\n-\t[[nodiscard]]\n \t{\n \t  if constexpr (__member_rbegin<_Tp>)\n \t    return __t.rbegin();\n@@ -327,9 +324,8 @@ namespace ranges\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_rend<_Tp> || __adl_rend<_Tp> || __reversable<_Tp>\n \tconstexpr auto\n-\toperator()(_Tp&& __t) const\n+\toperator()[[nodiscard]](_Tp&& __t) const\n \tnoexcept(_S_noexcept<_Tp&>())\n-\t[[nodiscard]]\n \t{\n \t  if constexpr (__member_rend<_Tp>)\n \t    return __t.rend();\n@@ -417,8 +413,7 @@ namespace ranges\n \trequires is_bounded_array_v<remove_reference_t<_Tp>>\n \t  || __member_size<_Tp> || __adl_size<_Tp> || __sentinel_size<_Tp>\n \tconstexpr auto\n-\toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n-\t[[nodiscard]]\n+\toperator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n \t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    return extent_v<remove_reference_t<_Tp>>;\n@@ -438,8 +433,7 @@ namespace ranges\n       template<typename _Tp>\n \trequires requires (_Tp& __t) { _Size{}(__t); }\n \tconstexpr auto\n-\toperator()(_Tp&& __t) const noexcept(noexcept(_Size{}(__t)))\n-\t[[nodiscard]]\n+\toperator()[[nodiscard]](_Tp&& __t) const noexcept(noexcept(_Size{}(__t)))\n \t{\n \t  auto __size = _Size{}(__t);\n \t  using __size_type = decltype(__size);\n@@ -498,8 +492,7 @@ namespace ranges\n \trequires __member_empty<_Tp> || __size0_empty<_Tp>\n \t  || __eq_iter_empty<_Tp>\n \tconstexpr bool\n-\toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n-\t[[nodiscard]]\n+\toperator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())\n \t{\n \t  if constexpr (__member_empty<_Tp>)\n \t    return bool(__t.empty());\n@@ -540,8 +533,7 @@ namespace ranges\n       template<__maybe_borrowed_range _Tp>\n \trequires __member_data<_Tp> || __begin_data<_Tp>\n \tconstexpr auto\n-\toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())\n-\t[[nodiscard]]\n+\toperator()[[nodiscard]](_Tp&& __t) const noexcept(_S_noexcept<_Tp>())\n \t{\n \t  if constexpr (__member_data<_Tp>)\n \t    return __t.data();"}, {"sha": "c5b02408c1c918160d434c40b3308443ac187406", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "patch": "@@ -1118,21 +1118,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cpp_lib_three_way_comparison\n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n-    requires requires (_IteratorL __lhs, _IteratorR __rhs)\n-    { { __lhs == __rhs } -> std::convertible_to<bool>; }\n+    [[nodiscard]]\n     constexpr bool\n     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t       const __normal_iterator<_IteratorR, _Container>& __rhs)\n     noexcept(noexcept(__lhs.base() == __rhs.base()))\n-    [[nodiscard]]\n+    requires requires {\n+      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;\n+    }\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Container>\n+    [[nodiscard]]\n     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>\n     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n \t\tconst __normal_iterator<_IteratorR, _Container>& __rhs)\n     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))\n-    [[nodiscard]]\n     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }\n #else\n    // Forward iterator requirements\n@@ -1985,9 +1986,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2>\n       friend bool\n-      operator==(const common_iterator& __x,\n-\t\t const common_iterator<_It2, _Sent2>& __y)\n-      [[nodiscard]]\n+      operator== [[nodiscard]] (const common_iterator& __x,\n+\t\t\t\tconst common_iterator<_It2, _Sent2>& __y)\n       {\n \tswitch(__x._M_index << 2 | __y._M_index)\n \t  {\n@@ -2008,9 +2008,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _It2, sentinel_for<_It> _Sent2>\n       requires sentinel_for<_Sent, _It2> && equality_comparable_with<_It, _It2>\n       friend bool\n-      operator==(const common_iterator& __x,\n-\t\t const common_iterator<_It2, _Sent2>& __y)\n-      [[nodiscard]]\n+      operator== [[nodiscard]] (const common_iterator& __x,\n+\t\t\t\tconst common_iterator<_It2, _Sent2>& __y)\n       {\n \tswitch(__x._M_index << 2 | __y._M_index)\n \t  {\n@@ -2032,9 +2031,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<sized_sentinel_for<_It> _It2, sized_sentinel_for<_It> _Sent2>\n       requires sized_sentinel_for<_Sent, _It2>\n       friend iter_difference_t<_It2>\n-      operator-(const common_iterator& __x,\n-\t\tconst common_iterator<_It2, _Sent2>& __y)\n-      [[nodiscard]]\n+      operator- [[nodiscard]] (const common_iterator& __x,\n+\t\t\t       const common_iterator<_It2, _Sent2>& __y)\n       {\n \tswitch(__x._M_index << 2 | __y._M_index)\n \t  {"}, {"sha": "41ffc50d3808761ddef7736a4fd7f4a278003739", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "patch": "@@ -107,18 +107,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       template<typename _Tp1, typename _Seq1>\n-\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n \n       template<typename _Tp1, typename _Seq1>\n-\t_GLIBCXX_NODISCARD\n \tfriend bool\n \toperator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n \n #if __cpp_lib_three_way_comparison\n       template<typename _Tp1, three_way_comparable _Seq1>\n-\t[[nodiscard]]\n \tfriend compare_three_way_result_t<_Seq1>\n \toperator<=>(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n #endif"}, {"sha": "fb8905fab089e55c52e1bce23ffcddb97711abfc", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=c8b024fa4b76bfd914e96dd3cecfbb6ee8e91316", "patch": "@@ -1127,9 +1127,8 @@ namespace views::__adaptor\n \t  || __detail::__can_ref_view<_Range>\n \t  || __detail::__can_subrange<_Range>\n \tconstexpr auto\n-\toperator()(_Range&& __r) const\n+\toperator() [[nodiscard]] (_Range&& __r) const\n \tnoexcept(_S_noexcept<_Range>())\n-\t[[nodiscard]]\n \t{\n \t  if constexpr (view<decay_t<_Range>>)\n \t    return std::forward<_Range>(__r);\n@@ -1554,8 +1553,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_filter_view<_Range, _Pred>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Pred&& __p) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Pred&& __p) const\n \t{\n \t  return filter_view(std::forward<_Range>(__r), std::forward<_Pred>(__p));\n \t}\n@@ -1932,8 +1930,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Fp>\n \trequires __detail::__can_transform_view<_Range, _Fp>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Fp&& __f) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Fp&& __f) const\n \t{\n \t  return transform_view(std::forward<_Range>(__r), std::forward<_Fp>(__f));\n \t}\n@@ -2114,8 +2111,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Tp>\n \trequires __detail::__can_take_view<_Range, _Tp>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Tp&& __n) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Tp&& __n) const\n \t{\n \t  return take_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n \t}\n@@ -2242,8 +2238,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_take_while_view<_Range, _Pred>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Pred&& __p) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Pred&& __p) const\n \t{\n \t  return take_while_view(std::forward<_Range>(__r), std::forward<_Pred>(__p));\n \t}\n@@ -2363,8 +2358,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Tp>\n \trequires __detail::__can_drop_view<_Range, _Tp>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Tp&& __n) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Tp&& __n) const\n \t{\n \t  return drop_view(std::forward<_Range>(__r), std::forward<_Tp>(__n));\n \t}\n@@ -2452,8 +2446,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Pred>\n \trequires __detail::__can_drop_while_view<_Range, _Pred>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Pred&& __p) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Pred&& __p) const\n \t{\n \t  return drop_while_view(std::forward<_Range>(__r),\n \t\t\t\t std::forward<_Pred>(__p));\n@@ -2815,8 +2808,7 @@ namespace views::__adaptor\n       template<viewable_range _Range>\n \trequires __detail::__can_join_view<_Range>\n \tconstexpr auto\n-\toperator()(_Range&& __r) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r) const\n \t{\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 3474. Nesting join_views is broken because of CTAD\n@@ -3267,8 +3259,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Pattern>\n \trequires __detail::__can_lazy_split_view<_Range, _Pattern>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Pattern&& __f) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Pattern&& __f) const\n \t{\n \t  return lazy_split_view(std::forward<_Range>(__r), std::forward<_Pattern>(__f));\n \t}\n@@ -3476,8 +3467,7 @@ namespace views::__adaptor\n       template<viewable_range _Range, typename _Pattern>\n \trequires __detail::__can_split_view<_Range, _Pattern>\n \tconstexpr auto\n-\toperator()(_Range&& __r, _Pattern&& __f) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r, _Pattern&& __f) const\n \t{\n \t  return split_view(std::forward<_Range>(__r), std::forward<_Pattern>(__f));\n \t}\n@@ -3498,8 +3488,7 @@ namespace views::__adaptor\n     {\n       template<input_or_output_iterator _Iter>\n       constexpr auto\n-      operator()(_Iter __i, iter_difference_t<_Iter> __n) const\n-      [[nodiscard]]\n+      operator() [[nodiscard]] (_Iter __i, iter_difference_t<_Iter> __n) const\n       {\n \tif constexpr (random_access_iterator<_Iter>)\n \t  return subrange(__i, __i + __n);\n@@ -3620,8 +3609,7 @@ namespace views::__adaptor\n \trequires __detail::__already_common<_Range>\n \t  || __detail::__can_common_view<_Range>\n \tconstexpr auto\n-\toperator()(_Range&& __r) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r) const\n \t{\n \t  if constexpr (__detail::__already_common<_Range>)\n \t    return views::all(std::forward<_Range>(__r));\n@@ -3743,8 +3731,7 @@ namespace views::__adaptor\n \t  || __detail::__is_reversible_subrange<remove_cvref_t<_Range>>\n \t  || __detail::__can_reverse_view<_Range>\n \tconstexpr auto\n-\toperator()(_Range&& __r) const\n-\t[[nodiscard]]\n+\toperator() [[nodiscard]] (_Range&& __r) const\n \t{\n \t  using _Tp = remove_cvref_t<_Range>;\n \t  if constexpr (__detail::__is_reverse_view<_Tp>)\n@@ -4142,8 +4129,7 @@ namespace views::__adaptor\n \ttemplate<viewable_range _Range>\n \t  requires __detail::__can_elements_view<_Nm, _Range>\n \t  constexpr auto\n-\t  operator()(_Range&& __r) const\n-\t  [[nodiscard]]\n+\t  operator() [[nodiscard]] (_Range&& __r) const\n \t  {\n \t    return elements_view<all_t<_Range>, _Nm>{std::forward<_Range>(__r)};\n \t  }"}]}