{"sha": "147e276b580b674a46bc3b9c461ae7837fd48aba", "node_id": "C_kwDOANBUbNoAKDE0N2UyNzZiNTgwYjY3NGE0NmJjM2I5YzQ2MWFlNzgzN2ZkNDhhYmE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-15T21:07:09Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-15T21:07:09Z"}, "message": "c++: class-scope qualified constrained auto [PR107188]\n\nHere when parsing the class-scope auto constrained by a qualified\nconcept-id, we first tentatively parse the overall member-declaration as\na deprecated access-declaration, during which we parse C<int> as a\nstandalone TEMPLATE_ID_EXPR (separate from the auto) and end up emitting\nthe stray error\n\nconcepts-placeholder11.C:9:6: error: wrong number of template arguments (1, should be 2)\n    9 |   N::C<int> auto f() { return 0; }\n      |      ^~~~~~\nconcepts-placeholder11.C:5:34: note: provided for \u2018template<class, class> concept N::C\u2019\n    5 |   template<class, class> concept C = true;\n      |                                  ^\n\nfrom build_concept_id called from cp_parser_template_id_expr.\n\nWe could fix this by adding a complain parameter to build_concept_id and\npassing tf_none when parsing tentatively.  However, it seems this can\nalso be fixed in a more general way that might benefit non-concepts\ncode: when tentatively parsing an access-declaration, abort the parse\nearly if the qualifying scope isn't possibly a class or enumeration\ntype, so that we avoid parsing C<int> as a TEMPLATE_ID_EXPR here in the\nfirst place.  This patch takes this latter approach.\n\n\tPR c++/107188\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_using_declaration): Give up early if the\n\tscope of an access-declaration isn't possibly a class type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-placeholder11.C: New test.", "tree": {"sha": "192e57b9cd779198287b423416a45984e21a7fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192e57b9cd779198287b423416a45984e21a7fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/147e276b580b674a46bc3b9c461ae7837fd48aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147e276b580b674a46bc3b9c461ae7837fd48aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147e276b580b674a46bc3b9c461ae7837fd48aba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147e276b580b674a46bc3b9c461ae7837fd48aba/comments", "author": null, "committer": null, "parents": [{"sha": "18499b9f848707aee42d810e99ac0a4c9788433c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18499b9f848707aee42d810e99ac0a4c9788433c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18499b9f848707aee42d810e99ac0a4c9788433c"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "1d59ccd9de834054a8e6c073acbeb1725b05d370", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e276b580b674a46bc3b9c461ae7837fd48aba/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e276b580b674a46bc3b9c461ae7837fd48aba/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=147e276b580b674a46bc3b9c461ae7837fd48aba", "patch": "@@ -21673,6 +21673,13 @@ cp_parser_using_declaration (cp_parser* parser,\n \n   cp_warn_deprecated_use_scopes (qscope);\n \n+  if (access_declaration_p\n+      && !MAYBE_CLASS_TYPE_P (qscope)\n+      && TREE_CODE (qscope) != ENUMERAL_TYPE)\n+    /* If the qualifying scope of an access-declaration isn't a class\n+       or enumeration type then it can't be valid.  */\n+    cp_parser_simulate_error (parser);\n+\n   if (access_declaration_p && cp_parser_error_occurred (parser))\n     /* Something has already gone wrong; there's no need to parse\n        further.  Since an error has occurred, the return value of"}, {"sha": "61eef743bae8bbe5cef0e47c44ca5449d9e0ff73", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e276b580b674a46bc3b9c461ae7837fd48aba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e276b580b674a46bc3b9c461ae7837fd48aba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder11.C?ref=147e276b580b674a46bc3b9c461ae7837fd48aba", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/107188\n+// { dg-do compile { target c++20 } }\n+\n+namespace N {\n+  template<class, class> concept C = true;\n+}\n+\n+struct X {\n+  N::C<int> auto f() { return 0; }\n+};"}]}