{"sha": "3493b0c32815faf003cbd18dd2c1ff30818f5770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ5M2IwYzMyODE1ZmFmMDAzY2JkMThkZDJjMWZmMzA4MThmNTc3MA==", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2020-11-26T06:23:45Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2020-11-27T01:11:20Z"}, "message": "This patch adds absolute jump table support for rs6000.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-protos.h (rs6000_output_addr_vec_elt): Declare.\n\t* config/rs6000/rs6000.c (TARGET_ASM_GENERATE_PIC_ADDR_DIFF_VEC):\n\tDefine.\n\t(rs6000_gen_pic_addr_diff_vec, rs6000_output_addr_vec_elt): Implement.\n\t* config/rs6000/rs6000.h (CASE_VECTOR_PC_RELATIVE,\n\tCASE_VECTOR_MODE, ASM_OUTPUT_ADDR_VEC_ELT): Define.\n\t* config/rs6000/rs6000.md (tablejump<mode>_absolute,\n\ttablejump<mode>_absolute_nospec): New expanders.\n\t* config/rs6000/rs6000.opt (mrelative-jumptables): New.", "tree": {"sha": "de324fb40c91dc5aa019223a26be49b2db1d3015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de324fb40c91dc5aa019223a26be49b2db1d3015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3493b0c32815faf003cbd18dd2c1ff30818f5770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3493b0c32815faf003cbd18dd2c1ff30818f5770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3493b0c32815faf003cbd18dd2c1ff30818f5770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3493b0c32815faf003cbd18dd2c1ff30818f5770/comments", "author": null, "committer": null, "parents": [{"sha": "d48df6f24ba999ad662d3b7c30f7e2180e842149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48df6f24ba999ad662d3b7c30f7e2180e842149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48df6f24ba999ad662d3b7c30f7e2180e842149"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "49ab51042c55334349189c33e4594d7e56925f06", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=3493b0c32815faf003cbd18dd2c1ff30818f5770", "patch": "@@ -155,6 +155,7 @@ extern void rs6000_split_logical (rtx [], enum rtx_code, bool, bool, bool);\n extern bool rs6000_function_pcrel_p (struct function *);\n extern bool rs6000_pcrel_p (void);\n extern bool rs6000_fndecl_pcrel_p (const_tree);\n+extern void rs6000_output_addr_vec_elt (FILE *, int);\n \n /* Different PowerPC instruction formats that are used by GCC.  There are\n    various other instruction formats used by the PowerPC hardware, but these"}, {"sha": "a4979dbdd42391798d7669ffb3b5bc07db43ff3b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3493b0c32815faf003cbd18dd2c1ff30818f5770", "patch": "@@ -1367,6 +1367,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n #define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA rs6000_output_addr_const_extra\n \n+#undef  TARGET_ASM_GENERATE_PIC_ADDR_DIFF_VEC\n+#define TARGET_ASM_GENERATE_PIC_ADDR_DIFF_VEC rs6000_gen_pic_addr_diff_vec\n+\n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS rs6000_legitimize_address\n \n@@ -27279,6 +27282,26 @@ rs6000_emit_xxspltidp_v2df (rtx dst, long value)\n   emit_insn( gen_xxspltidp_v2df_inst (dst, GEN_INT (value)));\n }\n \n+/* Implement TARGET_ASM_GENERATE_PIC_ADDR_DIFF_VEC.  */\n+\n+static bool\n+rs6000_gen_pic_addr_diff_vec (void)\n+{\n+  return rs6000_relative_jumptables;\n+}\n+\n+void\n+rs6000_output_addr_vec_elt (FILE *file, int value)\n+{\n+  const char *directive = TARGET_64BIT ? DOUBLE_INT_ASM_OP : \"\\t.long\\t\";\n+  char buf[100];\n+\n+  fprintf (file, \"%s\", directive);\n+  ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", value);\n+  assemble_name (file, buf);\n+  fprintf (file, \"\\n\");\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rs6000.h\""}, {"sha": "5bf9c83fc1ec724ec1f3e3579c62298a99cbbbe5", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3493b0c32815faf003cbd18dd2c1ff30818f5770", "patch": "@@ -1756,15 +1756,15 @@ typedef struct rs6000_args\n \n /* #define LEGITIMATE_PIC_OPERAND_P (X) */\n \f\n-/* Specify the machine mode that this machine uses\n-   for the index in the tablejump instruction.  */\n-#define CASE_VECTOR_MODE SImode\n-\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n    Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE 1\n+#define CASE_VECTOR_PC_RELATIVE rs6000_relative_jumptables\n+\n+/* Specify the machine mode that this machine uses\n+   for the index in the tablejump instruction.  */\n+#define CASE_VECTOR_MODE (rs6000_relative_jumptables ? SImode : Pmode)\n \n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n@@ -2194,6 +2194,11 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n        putc ('\\n', FILE);\t\t\t\t\\\n      } while (0)\n \n+/* This is how to output an element of a case-vector\n+   that is non-relative.  */\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n+  rs6000_output_addr_vec_elt ((FILE), (VALUE))\n+\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */"}, {"sha": "b89990f46bf142edca8102ba1b552ccefce77b7b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3493b0c32815faf003cbd18dd2c1ff30818f5770", "patch": "@@ -12713,15 +12713,22 @@\n   \"\"\n {\n   if (rs6000_speculate_indirect_jumps)\n-    emit_jump_insn (gen_tablejump_normal (Pmode, operands[0], operands[1]));\n+    {\n+      if (rs6000_relative_jumptables)\n+\temit_jump_insn (gen_tablejump_normal (Pmode, operands[0], operands[1]));\n+      else\n+\temit_jump_insn (gen_tablejump_absolute (Pmode, operands[0],\n+\t\t\t\t\t\toperands[1]));\n+    }\n   else\n     {\n       rtx ccreg = gen_reg_rtx (CCmode);\n       rtx jump;\n-      if (TARGET_32BIT)\n-\tjump = gen_tablejumpsi_nospec (operands[0], operands[1], ccreg);\n+      if (rs6000_relative_jumptables)\n+\tjump = gen_tablejump_nospec (Pmode, operands[0], operands[1], ccreg);\n       else\n-\tjump = gen_tablejumpdi_nospec (operands[0], operands[1], ccreg);\n+\tjump = gen_tablejump_absolute_nospec (Pmode, operands[0], operands[1],\n+\t\t\t\t\t      ccreg);\n       emit_jump_insn (jump);\n     }\n   DONE;\n@@ -12730,7 +12737,7 @@\n (define_expand \"@tablejump<mode>_normal\"\n   [(use (match_operand:SI 0))\n    (use (match_operand:P 1))]\n-  \"rs6000_speculate_indirect_jumps\"\n+  \"rs6000_speculate_indirect_jumps && rs6000_relative_jumptables\"\n {\n   rtx off = force_reg (SImode, operands[0]);\n   if (<MODE>mode != SImode)\n@@ -12748,11 +12755,23 @@\n   DONE;\n })\n \n+(define_expand \"@tablejump<mode>_absolute\"\n+  [(use (match_operand:P 0))\n+   (use (match_operand:P 1))]\n+  \"rs6000_speculate_indirect_jumps && !rs6000_relative_jumptables\"\n+{\n+  rtx addr = gen_reg_rtx (Pmode);\n+  emit_move_insn (addr, operands[0]);\n+\n+  emit_jump_insn (gen_tablejump_insn_normal (Pmode, addr, operands[1]));\n+  DONE;\n+})\n+\n (define_expand \"@tablejump<mode>_nospec\"\n   [(use (match_operand:SI 0))\n    (use (match_operand:P 1))\n    (use (match_operand:CC 2))]\n-  \"!rs6000_speculate_indirect_jumps\"\n+  \"!rs6000_speculate_indirect_jumps && rs6000_relative_jumptables\"\n {\n   rtx off = force_reg (SImode, operands[0]);\n   if (<MODE>mode != SImode)\n@@ -12771,6 +12790,20 @@\n   DONE;\n })\n \n+(define_expand \"@tablejump<mode>_absolute_nospec\"\n+  [(use (match_operand:P 0))\n+   (use (match_operand:P 1))\n+   (use (match_operand:CC 2))]\n+  \"!rs6000_speculate_indirect_jumps && !rs6000_relative_jumptables\"\n+{\n+  rtx addr = gen_reg_rtx (Pmode);\n+  emit_move_insn (addr, operands[0]);\n+\n+  emit_jump_insn (gen_tablejump_insn_nospec (Pmode, addr, operands[1],\n+\t\t\t\t\t     operands[2]));\n+  DONE;\n+})\n+\n (define_insn \"@tablejump<mode>_insn_normal\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"c,*l\"))"}, {"sha": "2888172cb27334090dcebffb1732895be1c487bb", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3493b0c32815faf003cbd18dd2c1ff30818f5770/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=3493b0c32815faf003cbd18dd2c1ff30818f5770", "patch": "@@ -589,3 +589,6 @@ Generate (do not generate) pc-relative memory addressing.\n mmma\n Target Report Mask(MMA) Var(rs6000_isa_flags)\n Generate (do not generate) MMA instructions.\n+\n+mrelative-jumptables\n+Target Undocumented Var(rs6000_relative_jumptables) Init(1) Save"}]}