{"sha": "7d473569a2ed06c37387b27bb8ca9dbd8d398646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0NzM1NjlhMmVkMDZjMzczODdiMjdiYjhjYTlkYmQ4ZDM5ODY0Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@ultra.linux.cz", "date": "1999-08-02T23:17:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-08-02T23:17:06Z"}, "message": "Jakub Jelinek  <jj@ultra.linux.cz>\n\n        * c-decl.c (get_parm_info, store_parm_decls): Change all uses of\n        PROMOTE_PROTOTYPES, so that it tests it as a C expression.\n        Ensure expr.h is included.\n        * c-typecheck.c (convert_arguments): Ditto.\n\n        * expr.h: Supply default for PROMOTE_PROTOTYPES (0).\n\nFrom-SVN: r28420", "tree": {"sha": "7a67b77ab73f97ff628e4f1a4e684f4e27bea700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a67b77ab73f97ff628e4f1a4e684f4e27bea700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d473569a2ed06c37387b27bb8ca9dbd8d398646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d473569a2ed06c37387b27bb8ca9dbd8d398646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d473569a2ed06c37387b27bb8ca9dbd8d398646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d473569a2ed06c37387b27bb8ca9dbd8d398646/comments", "author": null, "committer": null, "parents": [{"sha": "e438e1b788a2877778e1592d914e6285964faac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e438e1b788a2877778e1592d914e6285964faac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e438e1b788a2877778e1592d914e6285964faac4"}], "stats": {"total": 74, "additions": 58, "deletions": 16}, "files": [{"sha": "69857347cdf2d09e034f11f37161abc1bd1ec5ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d473569a2ed06c37387b27bb8ca9dbd8d398646", "patch": "@@ -1,3 +1,38 @@\n+1999-08-02  Jakub Jelinek  <jj@ultra.linux.cz>\n+\n+\t* c-decl.c (get_parm_info, store_parm_decls): Change all uses of\n+\tPROMOTE_PROTOTYPES, so that it tests it as a C expression.\n+\tEnsure expr.h is included.\n+\t* c-typecheck.c (convert_arguments): Ditto.\n+\n+\t* expr.h: Supply default for PROMOTE_PROTOTYPES (0).\n+\n+\t* config/arc/arc.h: Define PROMOTE_PROTOTYPES to 1.\n+\t* config/convex/convex.h: Ditto.\n+\t* config/dsp16xx/dsp16xx.h: Ditto.\n+\t* config/fx80/fx80.h: Ditto.\n+\t* config/gmicro/gmicro.h: Ditto.\n+\t* config/i370/i370.h: Ditto.\n+\t* config/i386/i386.h: Ditto.\n+\t* config/m32r/m32r.h: Ditto.\n+\t* config/m68k/m68k.h: Ditto.\n+\t* config/m88k/m88k.h: Ditto.\n+\t* config/mips/mips.h: Ditto.\n+\t* config/pa/pa.h: Ditto.\n+\t* config/pyr/pyr.h: Ditto.\n+\t* config/tahoe/tahoe.h: Ditto.\n+\t* config/we32k/we32k.h: Ditto.\n+\n+\t* config/sparc/sparc.h: Define PROMOTE_PROTOTYPES\n+\tbased on arch size.\n+\n+\t* config/i1750a/i1750a.h: Define PROMOTE_PROTOTYPES to 0.\n+\n+\t* config/i860/paragon.h: Remove PROMOTE_PROTOTYPES\n+\tfrom comment.\n+\n+\t* tm.texi: Document new usage of PROMOTE_PROTOTYPES.\n+\n 1999-08-02  Richard Henderson  <rth@cygnus.com>\n \n \t* m32r.c (m32r_setup_incoming_varargs): Use get_varargs_alias_set"}, {"sha": "2c1dacdbccca63f80a359637279662dca993545f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7d473569a2ed06c37387b27bb8ca9dbd8d398646", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-tree.h\"\n #include \"c-lex.h\"\n #include \"toplev.h\"\n+#include \"expr.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -5219,12 +5220,11 @@ get_parm_info (void_at_end)\n \t   args are passed in their declared types.  */\n \ttree type = TREE_TYPE (decl);\n \tDECL_ARG_TYPE (decl) = type;\n-#ifdef PROMOTE_PROTOTYPES\n-\tif ((TREE_CODE (type) == INTEGER_TYPE\n-\t     || TREE_CODE (type) == ENUMERAL_TYPE)\n+\tif (PROMOTE_PROTOTYPES\n+\t    && (TREE_CODE (type) == INTEGER_TYPE\n+\t\t|| TREE_CODE (type) == ENUMERAL_TYPE)\n \t    && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n \t  DECL_ARG_TYPE (decl) = integer_type_node;\n-#endif\n \n \ttypes = saveable_tree_cons (NULL_TREE, TREE_TYPE (decl), types);\n \tif (TYPE_MAIN_VARIANT (TREE_VALUE (types)) == void_type_node && ! erred\n@@ -6557,13 +6557,14 @@ store_parm_decls ()\n \t\t\t `int foo(float x) {...}'.  This is particularly\n \t\t\t useful for argument types like uid_t.  */\n \t\t      DECL_ARG_TYPE (parm) = TREE_TYPE (parm);\n-#ifdef PROMOTE_PROTOTYPES\n-\t\t      if ((TREE_CODE (TREE_TYPE (parm)) == INTEGER_TYPE\n-\t\t\t   || TREE_CODE (TREE_TYPE (parm)) == ENUMERAL_TYPE)\n+\n+\t\t      if (PROMOTE_PROTOTYPES\n+\t\t\t  && (TREE_CODE (TREE_TYPE (parm)) == INTEGER_TYPE\n+\t\t\t      || TREE_CODE (TREE_TYPE (parm)) == ENUMERAL_TYPE)\n \t\t\t  && TYPE_PRECISION (TREE_TYPE (parm))\n \t\t\t  < TYPE_PRECISION (integer_type_node))\n \t\t\tDECL_ARG_TYPE (parm) = integer_type_node;\n-#endif\n+\n \t\t      if (pedantic)\n \t\t\t{\n \t\t\t  pedwarn (\"promoted argument `%s' doesn't match prototype\","}, {"sha": "1d9e9e37caf563aca0032aeb0e61f78115cbd9e5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7d473569a2ed06c37387b27bb8ca9dbd8d398646", "patch": "@@ -1682,12 +1682,11 @@ convert_arguments (typelist, values, name, fundecl)\n \t\t\t\t\t        (char *) 0, /* arg passing  */\n \t\t\t\t\t\tfundecl, name, parmnum + 1);\n \t      \n-#ifdef PROMOTE_PROTOTYPES\n-\t      if ((TREE_CODE (type) == INTEGER_TYPE\n-\t\t   || TREE_CODE (type) == ENUMERAL_TYPE)\n+\t      if (PROMOTE_PROTOTYPES\n+\t\t  && (TREE_CODE (type) == INTEGER_TYPE\n+\t\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n \t\t  && (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)))\n \t\tparmval = default_conversion (parmval);\n-#endif\n \t    }\n \t  result = tree_cons (NULL_TREE, parmval, result);\n \t}"}, {"sha": "6bc7bb9939b3baa11354707107dceb971073370c", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=7d473569a2ed06c37387b27bb8ca9dbd8d398646", "patch": "@@ -251,6 +251,11 @@ enum direction {none, upward, downward};  /* Value has this type.  */\n #define PRETEND_OUTGOING_VARARGS_NAMED 0\n #endif\n \n+/* Supply a default definition for PROMOTE_PROTOTYPES.  */\n+#ifndef PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES\t0\n+#endif\n+\n /* Nonzero if we do not know how to pass TYPE solely in registers.\n    We cannot do so in the following cases:\n "}, {"sha": "0704ff5925c622e22821bfb81038bd4e32b85f0a", "filename": "gcc/tm.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d473569a2ed06c37387b27bb8ca9dbd8d398646/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=7d473569a2ed06c37387b27bb8ca9dbd8d398646", "patch": "@@ -2608,10 +2608,12 @@ control passing certain arguments in registers.\n @table @code\n @findex PROMOTE_PROTOTYPES\n @item PROMOTE_PROTOTYPES\n-Define this macro if an argument declared in a prototype as an\n-integral type smaller than @code{int} should actually be passed as an\n-@code{int}.  In addition to avoiding errors in certain cases of\n-mismatch, it also makes for better code on certain machines.\n+A C expression whose value is nonzero if an argument declared in\n+a prototype as an integral type smaller than @code{int} should\n+actually be passed as an @code{int}.  In addition to avoiding\n+errors in certain cases of mismatch, it also makes for better\n+code on certain machines.  If the macro is not defined in target\n+header files, it defaults to 0.\n \n @findex PUSH_ROUNDING\n @item PUSH_ROUNDING (@var{npushed})"}]}