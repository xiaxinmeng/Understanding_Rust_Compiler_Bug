{"sha": "21a8ccc02f643458b82780ac1b884f8454b89871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhOGNjYzAyZjY0MzQ1OGI4Mjc4MGFjMWI4ODRmODQ1NGI4OTg3MQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2012-09-25T03:26:36Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2012-09-25T03:26:36Z"}, "message": "Implement the K-distribution as an extension.\n\nFrom-SVN: r191688", "tree": {"sha": "8d6734d639f87cf43341496655f951ebde7ad300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d6734d639f87cf43341496655f951ebde7ad300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21a8ccc02f643458b82780ac1b884f8454b89871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a8ccc02f643458b82780ac1b884f8454b89871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a8ccc02f643458b82780ac1b884f8454b89871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a8ccc02f643458b82780ac1b884f8454b89871/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ab47844f5646b949bf6a2f2a1e591b1a7db41af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab47844f5646b949bf6a2f2a1e591b1a7db41af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab47844f5646b949bf6a2f2a1e591b1a7db41af"}], "stats": {"total": 653, "additions": 653, "deletions": 0}, "files": [{"sha": "42576bf29b415d9306b601561196355594fdbc2c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -1,3 +1,18 @@\n+2012-09-24  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/ext/random: Add __gnu_cxx::k_distribution<> class.\n+\t* include/ext/random.tcc: Add out-of-line functions for\n+\t__gnu_cxx::k_distribution<>.\n+\t* testsuite/ext/random/k_distribution/operators/equal.cc: New file.\n+\t* testsuite/ext/random/k_distribution/operators/serialize.cc: New file.\n+\t* testsuite/ext/random/k_distribution/operators/inequal.cc: New file.\n+\t* testsuite/ext/random/k_distribution/cons/parms.cc: New file.\n+\t* testsuite/ext/random/k_distribution/cons/default.cc: New file.\n+\t* testsuite/ext/random/k_distribution/requirements/typedefs.cc:\n+\tNew file.\n+\t* testsuite/ext/random/k_distribution/requirements/\n+\texplicit_instantiation/1.cc: New file.\n+\n 2012-09-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/44436"}, {"sha": "c7321a996238c36dcf133d47076dd13a0fbc4a32", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -1596,6 +1596,250 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const pareto_distribution<_RealType>& __d2)\n     { return !(__d1 == __d2); }\n \n+\n+  /**\n+   * @brief A K continuous distribution for random numbers.\n+   *\n+   * The formula for the K probability density function is\n+   * @f[\n+   *     p(x|\\lambda, \\mu, \\nu) = \\frac{2}{x}\n+   *             \\left(\\frac{\\lambda\\nu x}{\\mu}\\right)^{\\frac{\\lambda + \\nu}{2}}\n+   *             \\frac{1}{\\Gamma(\\lambda)\\Gamma(\\nu)}\n+   *             K_{\\nu - \\lambda}\\left(2\\sqrt{\\frac{\\lambda\\nu x}{\\mu}}\\right)\n+   * @f]\n+   * where @f$I_0(z)@f$ is the modified Bessel function of the second kind\n+   * of order @f$\\nu - \\lambda@f$ and @f$\\lambda > 0@f$, @f$\\mu > 0@f$\n+   * and @f$\\nu > 0@f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$\\mu@f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$\\mu^2\\frac{\\lambda + \\nu + 1}{\\lambda\\nu}@f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[0, \\infty)@f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class\n+    k_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef k_distribution<result_type> distribution_type;\n+\n+\tparam_type(result_type __lambda_val = result_type(1),\n+\t\t   result_type __mu_val = result_type(1),\n+\t\t   result_type __nu_val = result_type(1))\n+\t: _M_lambda(__lambda_val), _M_mu(__mu_val), _M_nu(__nu_val)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_lambda > result_type(0));\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_mu > result_type(0));\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_nu > result_type(0));\n+\t}\n+\n+\tresult_type\n+\tlambda() const\n+\t{ return _M_lambda; }\n+\n+\tresult_type\n+\tmu() const\n+\t{ return _M_mu; }\n+\n+\tresult_type\n+\tnu() const\n+\t{ return _M_nu; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_lambda == __p2._M_lambda\n+              && __p1._M_mu == __p2._M_mu\n+\t      && __p1._M_nu == __p2._M_nu; }\n+\n+      private:\n+\tvoid _M_initialize();\n+\n+\tresult_type _M_lambda;\n+\tresult_type _M_mu;\n+\tresult_type _M_nu;\n+      };\n+\n+      /**\n+       * @brief Constructors.\n+       */\n+      explicit\n+      k_distribution(result_type __lambda_val = result_type(1),\n+\t\t     result_type __mu_val = result_type(1),\n+\t\t     result_type __nu_val = result_type(1))\n+      : _M_param(__lambda_val, __mu_val, __nu_val),\n+\t_M_gd1(__lambda_val, result_type(1) / __lambda_val),\n+\t_M_gd2(__nu_val, __mu_val / __nu_val)\n+      { }\n+\n+      explicit\n+      k_distribution(const param_type& __p)\n+      : _M_param(__p),\n+\t_M_gd1(__p.lambda(), result_type(1) / __p.lambda()),\n+\t_M_gd2(__p.nu(), __p.mu() / __p.nu())\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      {\n+\t_M_gd1.reset();\n+\t_M_gd2.reset();\n+      }\n+\n+      /**\n+       * @brief Return the parameters of the distribution.\n+       */\n+      result_type\n+      lambda() const\n+      { return _M_param.lambda(); }\n+\n+      result_type\n+      mu() const\n+      { return _M_param.mu(); }\n+\n+      result_type\n+      nu() const\n+      { return _M_param.nu(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return result_type(0); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return std::numeric_limits<result_type>::max(); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator&);\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator&, const param_type&);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two K distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      friend bool\n+      operator==(const k_distribution& __d1,\n+\t\t const k_distribution& __d2)\n+      { return (__d1.param() == __d2.param()\n+\t\t&& __d1._M_gd1 == __d2._M_gd1\n+\t\t&& __d1._M_gd2 == __d2._M_gd2); }\n+\n+      /**\n+       * @brief Inserts a %k_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %k_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const k_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %k_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %k_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   k_distribution<_RealType1>&);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+\n+      std::gamma_distribution<result_type> _M_gd1;\n+      std::gamma_distribution<result_type> _M_gd2;\n+    };\n+\n+  /**\n+   * @brief Return true if two K distributions are not equal.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const k_distribution<_RealType>& __d1,\n+\t       const k_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "86bb67fedf9155f4574fa2accc0f420ae1ac20c0", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -912,6 +912,103 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename k_distribution<_RealType>::result_type\n+      k_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __x = this->_M_gd1(__urng);\n+\tresult_type __y = this->_M_gd2(__urng);\n+\treturn std::sqrt(__x * __y);\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename k_distribution<_RealType>::result_type\n+      k_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\ttypename std::gamma_distribution<result_type>::param_type\n+\t  __p1(__p.lambda(), result_type(1) / __p.lambda()),\n+\t  __p2(__p.nu(), __p.mu() / __p.nu());\n+\tresult_type __x = this->_M_gd1(__p1, __urng);\n+\tresult_type __y = this->_M_gd2(__p2, __urng);\n+\treturn std::sqrt(__x * __y);\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      k_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\ttypename std::gamma_distribution<result_type>::param_type\n+\t  __p1(__p.lambda(), result_type(1) / __p.lambda()),\n+\t  __p2(__p.nu(), __p.mu() / __p.nu());\n+\twhile (__f != __t)\n+\t  {\n+\t    result_type __x = this->_M_gd1(__p1, __urng);\n+\t    result_type __y = this->_M_gd2(__p2, __urng);\n+\t    *__f++ = std::sqrt(__x * __y);\n+\t  }\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const k_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.lambda() << __space << __x.mu() << __space << __x.nu();\n+      __os << __space << __x._M_gd1;\n+      __os << __space << __x._M_gd2;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       k_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __lambda_val, __mu_val, __nu_val;\n+      __is >> __lambda_val >> __mu_val >> __nu_val;\n+      __is >> __x._M_gd1;\n+      __is >> __x._M_gd2;\n+      __x.param(typename k_distribution<_RealType>::\n+\t\tparam_type(__lambda_val, __mu_val, __nu_val));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "3a7ade894d9e2448fd5a54ccb5c4e143e27adb9e", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/cons/default.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fdefault.cc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template k_distribution [rand.dist.ext.k]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::k_distribution<> u;\n+  VERIFY( u.lambda() == 1.0 );\n+  VERIFY( u.mu() == 1.0 );\n+  VERIFY( u.nu() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef __gnu_cxx::k_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "396be380fcb270da7dc56f338dcbd1e50064ec3d", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/cons/parms.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Fcons%2Fparms.cc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template k_distribution [rand.dist.ext.k]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::k_distribution<> u(2.0, 1.5, 3.0);\n+  VERIFY( u.lambda() == 2.0 );\n+  VERIFY( u.mu() == 1.5 );\n+  VERIFY( u.nu() == 3.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef __gnu_cxx::k_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "51e1081a08b266e4686e488e928723310e4991a4", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Fequal.cc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-24  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template k_distribution [rand.dist.ext.k]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::k_distribution<double> u(2.0, 1.5, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "082ed2812629d83f03731c08e86ca4eb4ab7eea5", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/operators/inequal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Finequal.cc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-24  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template k_distribution [rand.dist.ext.k]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::k_distribution<double> u(2.0, 1.5, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a7647adadc0a3ac2570faa584f62f8d8e1219a83", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/operators/serialize.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Foperators%2Fserialize.cc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-24  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template k_distribution [rand.dist.ext.k]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::k_distribution<double> u(2.0, 1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "539c7748af5714441a1cbd72bd82b2cab9c7082d", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2012 Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::k_distribution<float>;\n+template class __gnu_cxx::k_distribution<double>;\n+template class __gnu_cxx::k_distribution<long double>;"}, {"sha": "2286fbbddfe076dccaf4522f2975a514de6ecebe", "filename": "libstdc++-v3/testsuite/ext/random/k_distribution/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a8ccc02f643458b82780ac1b884f8454b89871/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fk_distribution%2Frequirements%2Ftypedefs.cc?ref=21a8ccc02f643458b82780ac1b884f8454b89871", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2012-09-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template k_distribution [rand.dist.ext.k]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::k_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}