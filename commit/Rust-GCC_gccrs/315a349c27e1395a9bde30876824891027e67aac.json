{"sha": "315a349c27e1395a9bde30876824891027e67aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1YTM0OWMyN2UxMzk1YTliZGUzMDg3NjgyNDg5MTAyN2U2N2FhYw==", "commit": {"author": {"name": "David Sherwood", "email": "david.sherwood@arm.com", "date": "2015-05-19T17:37:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-05-19T17:37:45Z"}, "message": "loop-invariant.c (create_new_invariant): Don't calculate address cost if mode is not a scalar integer.\n\n2015-05-19  David Sherwood  <david.sherwood@arm.com>\n\n\t* loop-invariant.c (create_new_invariant): Don't calculate address cost\n\tif mode is not a scalar integer.\n\t(get_inv_cost): Increase computational cost for unused invariants.\n\n\t* gcc.dg/loop-invariant.c: New testcase.\n\nFrom-SVN: r223402", "tree": {"sha": "4a838115d14ebe93303016d8ff822904c206b25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a838115d14ebe93303016d8ff822904c206b25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/315a349c27e1395a9bde30876824891027e67aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315a349c27e1395a9bde30876824891027e67aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/315a349c27e1395a9bde30876824891027e67aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/315a349c27e1395a9bde30876824891027e67aac/comments", "author": {"login": "david-arm", "id": 57997763, "node_id": "MDQ6VXNlcjU3OTk3NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/57997763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-arm", "html_url": "https://github.com/david-arm", "followers_url": "https://api.github.com/users/david-arm/followers", "following_url": "https://api.github.com/users/david-arm/following{/other_user}", "gists_url": "https://api.github.com/users/david-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-arm/subscriptions", "organizations_url": "https://api.github.com/users/david-arm/orgs", "repos_url": "https://api.github.com/users/david-arm/repos", "events_url": "https://api.github.com/users/david-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/david-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0aaaa54a73ed57a95e13403158e345f7bab01ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aaaa54a73ed57a95e13403158e345f7bab01ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aaaa54a73ed57a95e13403158e345f7bab01ff9"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "fcde743994816c91d8cffb41e1c2c3cfac47524c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315a349c27e1395a9bde30876824891027e67aac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315a349c27e1395a9bde30876824891027e67aac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=315a349c27e1395a9bde30876824891027e67aac", "patch": "@@ -1,3 +1,9 @@\n+2015-05-19  David Sherwood  <david.sherwood@arm.com>\n+\n+\t* loop-invariant.c (create_new_invariant): Don't calculate address cost\n+\tif mode is not a scalar integer.\n+\t(get_inv_cost): Increase computational cost for unused invariants.\n+\n 2015-05-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config.gcc: Add vecintrin.h to extra_headers.  Add s390-c.o to"}, {"sha": "85270fe14bcf0b5aafdb773bf98f71acebc87d8c", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315a349c27e1395a9bde30876824891027e67aac/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315a349c27e1395a9bde30876824891027e67aac/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=315a349c27e1395a9bde30876824891027e67aac", "patch": "@@ -741,8 +741,11 @@ create_new_invariant (struct def *def, rtx_insn *insn, bitmap depends_on,\n \t enough to not regress 410.bwaves either (by still moving reg+reg\n \t invariants).\n \t See http://gcc.gnu.org/ml/gcc-patches/2009-10/msg01210.html .  */\n-      inv->cheap_address = address_cost (SET_SRC (set), word_mode,\n-\t\t\t\t\t ADDR_SPACE_GENERIC, speed) < 3;\n+      if (SCALAR_INT_MODE_P (GET_MODE (SET_DEST (set))))\n+\tinv->cheap_address = address_cost (SET_SRC (set), word_mode,\n+\t\t\t\t\t   ADDR_SPACE_GENERIC, speed) < 3;\n+      else\n+\tinv->cheap_address = false;\n     }\n   else\n     {\n@@ -1173,6 +1176,7 @@ get_inv_cost (struct invariant *inv, int *comp_cost, unsigned *regs_needed,\n     }\n \n   if (!inv->cheap_address\n+      || inv->def->n_uses == 0\n       || inv->def->n_addr_uses < inv->def->n_uses)\n     (*comp_cost) += inv->cost * inv->eqno;\n "}, {"sha": "1b9a956e044abd0b87216e566f40e23cd5b2cb9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315a349c27e1395a9bde30876824891027e67aac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315a349c27e1395a9bde30876824891027e67aac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=315a349c27e1395a9bde30876824891027e67aac", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gcc.dg/loop-invariant.c: New testcase.\n+\n 2015-05-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.dg/tree-ssa/gen-vect-11b.c: Disable vector instructions on"}, {"sha": "9571269084fe166c98bd9cff6c1489c183d0515a", "filename": "gcc/testsuite/gcc.dg/loop-invariant.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/315a349c27e1395a9bde30876824891027e67aac/gcc%2Ftestsuite%2Fgcc.dg%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/315a349c27e1395a9bde30876824891027e67aac/gcc%2Ftestsuite%2Fgcc.dg%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-invariant.c?ref=315a349c27e1395a9bde30876824891027e67aac", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_invariant\" } */\n+/* NOTE: The target list above could be extended to other targets that have\n+         conditional moves, but don't have zero registers.  */\n+\n+enum test_type\n+{\n+  TYPE0,\n+  TYPE1\n+};\n+\n+struct type_node\n+{\n+  enum test_type type;\n+};\n+\n+struct test_ref\n+{\n+  struct type_node *referring;\n+};\n+\n+struct test_node\n+{\n+  struct test_node *next;\n+};\n+\n+int iterate (struct test_node *, unsigned, struct test_ref **);\n+\n+int\n+loop_invar (struct test_node *node)\n+{\n+  struct test_ref *ref;\n+\n+  for (unsigned i = 0; iterate (node, i, &ref); i++)\n+    if (loop_invar ((ref->referring && ref->referring->type == TYPE0)\n+                    ? ((struct test_node *) (ref->referring)) : 0))\n+      return 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-rtl-dump \"Decided to move invariant\" \"loop2_invariant\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop2_invariant\" } } */"}]}