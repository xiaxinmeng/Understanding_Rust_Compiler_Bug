{"sha": "e227594789d909fbad56f6036910938678738f92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIyNzU5NDc4OWQ5MDlmYmFkNTZmNjAzNjkxMDkzODY3ODczOGY5Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-24T12:11:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-24T12:11:27Z"}, "message": "re PR tree-optimization/92205 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1688 since r277322)\n\n2019-10-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92205\n\t* tree-vect-loop.c (vectorizable_reduction): Restrict\n\tsearch for alternate vectype_in to lane-reducing patterns\n\twe support.\n\n\t* gcc.dg/vect/pr92205.c: New testcase.\n\nFrom-SVN: r277375", "tree": {"sha": "fc40e6db2f5f4aa160621e6bd05391f349b18ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc40e6db2f5f4aa160621e6bd05391f349b18ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e227594789d909fbad56f6036910938678738f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e227594789d909fbad56f6036910938678738f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e227594789d909fbad56f6036910938678738f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e227594789d909fbad56f6036910938678738f92/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee80f0c6ba50ebf0300fb0cfe1079a1321295749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee80f0c6ba50ebf0300fb0cfe1079a1321295749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee80f0c6ba50ebf0300fb0cfe1079a1321295749"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "d09b72d2b163a2bda188352640902193ffd3930f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e227594789d909fbad56f6036910938678738f92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e227594789d909fbad56f6036910938678738f92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e227594789d909fbad56f6036910938678738f92", "patch": "@@ -1,3 +1,10 @@\n+2019-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92205\n+\t* tree-vect-loop.c (vectorizable_reduction): Restrict\n+\tsearch for alternate vectype_in to lane-reducing patterns\n+\twe support.\n+\n 2019-10-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92203"}, {"sha": "2742e10bb6f32d09e2b94217b8ec454d78432070", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e227594789d909fbad56f6036910938678738f92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e227594789d909fbad56f6036910938678738f92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e227594789d909fbad56f6036910938678738f92", "patch": "@@ -1,3 +1,8 @@\n+2019-10-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92205\n+\t* gcc.dg/vect/pr92205.c: New testcase.\n+\n 2019-10-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92203"}, {"sha": "ea06660de1effa54f9d4ce61a9072ac1569d1fab", "filename": "gcc/testsuite/gcc.dg/vect/pr92205.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e227594789d909fbad56f6036910938678738f92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e227594789d909fbad56f6036910938678738f92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92205.c?ref=e227594789d909fbad56f6036910938678738f92", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int b(int n, unsigned char *a)\n+{\n+  int d = 0;\n+  a = __builtin_assume_aligned (a, __BIGGEST_ALIGNMENT__);\n+  for (int c = 0; c < n; ++c)\n+    d |= a[c];\n+  return d;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target { vect_unpack && { ! vect_no_bitwise } } } } } */"}, {"sha": "9c5ce47249c2b6da9d6f83baa022b97dbc2542d2", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e227594789d909fbad56f6036910938678738f92/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e227594789d909fbad56f6036910938678738f92/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=e227594789d909fbad56f6036910938678738f92", "patch": "@@ -5697,6 +5697,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \n   gassign *stmt = as_a <gassign *> (stmt_info->stmt);\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n+  bool lane_reduc_code_p\n+    = (code == DOT_PROD_EXPR || code == WIDEN_SUM_EXPR || code == SAD_EXPR);\n   int op_type = TREE_CODE_LENGTH (code);\n \n   scalar_dest = gimple_assign_lhs (stmt);\n@@ -5749,8 +5751,10 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \treturn false;\n \n       /* To properly compute ncopies we are interested in the widest\n-\t input type in case we're looking at a widening accumulation.  */\n-      if (tem\n+\t non-reduction input type in case we're looking at a widening\n+\t accumulation that we later handle in vect_transform_reduction.  */\n+      if (lane_reduc_code_p\n+\t  && tem\n \t  && (!vectype_in\n \t      || (GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (vectype_in)))\n \t\t  < GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (tem))))))\n@@ -6233,8 +6237,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n       && vect_stmt_to_vectorize (use_stmt_info) == stmt_info)\n     single_defuse_cycle = true;\n \n-  bool lane_reduc_code_p\n-    = (code == DOT_PROD_EXPR || code == WIDEN_SUM_EXPR || code == SAD_EXPR);\n   if (single_defuse_cycle || lane_reduc_code_p)\n     {\n       gcc_assert (code != COND_EXPR);"}]}