{"sha": "8c92e4522ddd3015e19ec339fa18455078c30435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5MmU0NTIyZGRkMzAxNWUxOWVjMzM5ZmExODQ1NTA3OGMzMDQzNQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-14T12:49:45Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-14T12:49:45Z"}, "message": "re PR fortran/78780 ([Coarray] ICE in conv_caf_send, at fortran/trans-intrinsic.c:1936)\n\ngcc/testsuite/ChangeLog:\n\n2016-12-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/78780\n\t* gfortran.dg/coarray/alloc_comp_5.f90: New test.\n\t* gfortran.dg/coarray_42.f90: New test.\n\n\ngcc/fortran/ChangeLog:\n\n2016-12-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/78780\n\t* trans-expr.c (gfc_trans_assignment_1): Improve check whether detour\n\tcaf-runtime routines is needed.\n\nFrom-SVN: r243648", "tree": {"sha": "ed8425094da3122291186b03d4e3ee9a23706911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed8425094da3122291186b03d4e3ee9a23706911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c92e4522ddd3015e19ec339fa18455078c30435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c92e4522ddd3015e19ec339fa18455078c30435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c92e4522ddd3015e19ec339fa18455078c30435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c92e4522ddd3015e19ec339fa18455078c30435/comments", "author": null, "committer": null, "parents": [{"sha": "eb401400f59e4d1f28bbdc788c3234e0968081d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb401400f59e4d1f28bbdc788c3234e0968081d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb401400f59e4d1f28bbdc788c3234e0968081d7"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "c7acf44c88458a74a4cc5055eab351316ecb5a44", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8c92e4522ddd3015e19ec339fa18455078c30435", "patch": "@@ -1,3 +1,9 @@\n+2016-12-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78780\n+\t* trans-expr.c (gfc_trans_assignment_1): Improve check whether detour\n+\tcaf-runtime routines is needed.\n+\n 2016-12-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/78672"}, {"sha": "f908c25b9cb36b86ba4081a3af877e96d479818e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=8c92e4522ddd3015e19ec339fa18455078c30435", "patch": "@@ -9718,7 +9718,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   bool scalar_to_array;\n   tree string_length;\n   int n;\n-  bool maybe_workshare = false;\n+  bool maybe_workshare = false, lhs_refs_comp = false, rhs_refs_comp = false;\n   symbol_attribute lhs_caf_attr, rhs_caf_attr, lhs_attr;\n   bool is_poly_assign;\n \n@@ -9758,8 +9758,8 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      mode.  */\n   if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n-      lhs_caf_attr = gfc_caf_attr (expr1);\n-      rhs_caf_attr = gfc_caf_attr (expr2);\n+      lhs_caf_attr = gfc_caf_attr (expr1, false, &lhs_refs_comp);\n+      rhs_caf_attr = gfc_caf_attr (expr2, false, &rhs_refs_comp);\n     }\n \n   if (lss != gfc_ss_terminator)\n@@ -9959,10 +9959,19 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n     }\n   else if (flag_coarray == GFC_FCOARRAY_LIB\n \t   && lhs_caf_attr.codimension && rhs_caf_attr.codimension\n-\t   && lhs_caf_attr.alloc_comp && rhs_caf_attr.alloc_comp)\n+\t   && ((lhs_caf_attr.allocatable && lhs_refs_comp)\n+\t       || (rhs_caf_attr.allocatable && rhs_refs_comp)))\n     {\n+      /* Only detour to caf_send[get][_by_ref] () when the lhs or rhs is an\n+\t allocatable component, because those need to be accessed via the\n+\t caf-runtime.  No need to check for coindexes here, because resolve\n+\t has rewritten those already.  */\n       gfc_code code;\n       gfc_actual_arglist a1, a2;\n+      /* Clear the structures to prevent accessing garbage.  */\n+      memset (&code, '\\0', sizeof (gfc_code));\n+      memset (&a1, '\\0', sizeof (gfc_actual_arglist));\n+      memset (&a2, '\\0', sizeof (gfc_actual_arglist));\n       a1.expr = expr1;\n       a1.next = &a2;\n       a2.expr = expr2;"}, {"sha": "e353ee051ec06715812cffaa82350074a29f0acc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c92e4522ddd3015e19ec339fa18455078c30435", "patch": "@@ -1,3 +1,9 @@\n+2016-12-14  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78780\n+\t* gfortran.dg/coarray/alloc_comp_5.f90: New test.\n+\t* gfortran.dg/coarray_42.f90: New test.\n+\n 2016-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/78796"}, {"sha": "bf4fd55430339715a3dd517f4f3ec5bdd8e5fcb4", "filename": "gcc/testsuite/gfortran.dg/coarray/alloc_comp_5.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Falloc_comp_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Falloc_comp_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Falloc_comp_5.f90?ref=8c92e4522ddd3015e19ec339fa18455078c30435", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+\n+program Jac\n+  type Domain\n+    integer :: n=64\n+    integer,allocatable :: endsi(:)\n+  end type\n+  type(Domain),allocatable :: D[:,:,:]\n+\n+  allocate(D[2,2,*])\n+  allocate(D%endsi(2), source = 0)\n+  ! No caf-runtime call needed her.\n+  D%endsi(2) = D%n\n+  if (any(D%endsi /= [ 0, 64])) error stop\n+  deallocate(D)\n+end program\n+"}, {"sha": "e8db60d496d29f4b329b87d036b24ef9c1254314", "filename": "gcc/testsuite/gfortran.dg/coarray_42.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_42.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c92e4522ddd3015e19ec339fa18455078c30435/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_42.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_42.f90?ref=8c92e4522ddd3015e19ec339fa18455078c30435", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib -lcaf_single\" }\n+\n+program Jac\n+  type Domain\n+    integer :: n=64\n+    integer,allocatable :: endsi(:)\n+  end type\n+  type(Domain),allocatable :: D[:,:,:]\n+\n+  allocate(D[2,2,*])\n+  allocate(D%endsi(2), source = 0)\n+  ! Lhs may be reallocate, so caf_send_by_ref needs to be used.\n+  D%endsi = D%n\n+  if (any(D%endsi /= [ 64, 64])) error stop\n+  deallocate(D)\n+end program\n+\n+! { dg-final { scan-tree-dump-times \"caf_send_by_ref\" 1 \"original\" } }\n+"}]}