{"sha": "5b97c77f8caedb9434ef5feab416154403d24123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5N2M3N2Y4Y2FlZGI5NDM0ZWY1ZmVhYjQxNjE1NDQwM2QyNDEyMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:46:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:46:57Z"}, "message": "semantics.c (finish_decltype_type): Add complain parm.\n\n\t* semantics.c (finish_decltype_type): Add complain parm.\n\t* cp-tree.h: Adjust.\n\t* parser.c (cp_parser_decltype): Adjust.\n\t* pt.c (tsubst): Adjust.\n\nFrom-SVN: r172139", "tree": {"sha": "b64c1b85c092e3d9f6bf16001c2ca4d87f53360a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b64c1b85c092e3d9f6bf16001c2ca4d87f53360a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b97c77f8caedb9434ef5feab416154403d24123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b97c77f8caedb9434ef5feab416154403d24123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b97c77f8caedb9434ef5feab416154403d24123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b97c77f8caedb9434ef5feab416154403d24123/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ee44b260d206b5ebc51466d672adffcdcebf4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee44b260d206b5ebc51466d672adffcdcebf4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee44b260d206b5ebc51466d672adffcdcebf4f2"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "b9c94ac331edb58ecbbaa230db73a07b972ff34b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b97c77f8caedb9434ef5feab416154403d24123", "patch": "@@ -1,5 +1,10 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (finish_decltype_type): Add complain parm.\n+\t* cp-tree.h: Adjust.\n+\t* parser.c (cp_parser_decltype): Adjust.\n+\t* pt.c (tsubst): Adjust.\n+\n \tPR c++/48450\n \t* cvt.c (ocp_convert): Handle converting scoped enum to bool.\n "}, {"sha": "06b0b3e89903c3d395f9c46da86bceab0faaa936", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5b97c77f8caedb9434ef5feab416154403d24123", "patch": "@@ -5346,7 +5346,7 @@ extern tree baselink_for_fns                    (tree);\n extern void finish_static_assert                (tree, tree, location_t,\n                                                  bool);\n extern tree describable_type\t\t\t(tree);\n-extern tree finish_decltype_type                (tree, bool);\n+extern tree finish_decltype_type                (tree, bool, tsubst_flags_t);\n extern tree finish_trait_expr\t\t\t(enum cp_trait_kind, tree, tree);\n extern tree build_lambda_expr                   (void);\n extern tree build_lambda_object\t\t\t(tree);"}, {"sha": "607e9b8f3285784b5960fe36b5f2ad0cd602db69", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5b97c77f8caedb9434ef5feab416154403d24123", "patch": "@@ -10197,7 +10197,8 @@ cp_parser_decltype (cp_parser *parser)\n       return error_mark_node;\n     }\n \n-  return finish_decltype_type (expr, id_expression_or_member_access_p);\n+  return finish_decltype_type (expr, id_expression_or_member_access_p,\n+\t\t\t       tf_warning_or_error);\n }\n \n /* Special member functions [gram.special] */"}, {"sha": "66db880acd5dd2204b9a77fe36345a3da197faa8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5b97c77f8caedb9434ef5feab416154403d24123", "patch": "@@ -11025,7 +11025,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  type = lambda_return_type (type);\n \telse\n \t  type = finish_decltype_type\n-\t    (type, DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (t));\n+\t    (type, DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (t), complain);\n \treturn cp_build_qualified_type_real (type,\n \t\t\t\t\t     cp_type_quals (t)\n \t\t\t\t\t     | cp_type_quals (type),"}, {"sha": "80ec028b9b6824d34f9fbe23ebdee5609e6f02b6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5b97c77f8caedb9434ef5feab416154403d24123", "patch": "@@ -4785,7 +4785,8 @@ describable_type (tree expr)\n    a full expression.  */\n \n tree\n-finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n+finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n+\t\t      tsubst_flags_t complain)\n {\n   tree orig_expr = expr;\n   tree type = NULL_TREE;\n@@ -4798,7 +4799,8 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n       || (TREE_CODE (expr) == BIT_NOT_EXPR\n \t  && TYPE_P (TREE_OPERAND (expr, 0))))\n     {\n-      error (\"argument to decltype must be an expression\");\n+      if (complain & tf_error)\n+\terror (\"argument to decltype must be an expression\");\n       return error_mark_node;\n     }\n \n@@ -4864,7 +4866,9 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n           if (OVL_CHAIN (expr)\n \t      || TREE_CODE (OVL_FUNCTION (expr)) == TEMPLATE_DECL)\n             {\n-              error (\"%qE refers to a set of overloaded functions\", orig_expr);\n+\t      if (complain & tf_error)\n+\t\terror (\"%qE refers to a set of overloaded functions\",\n+\t\t       orig_expr);\n               return error_mark_node;\n             }\n           else\n@@ -4916,7 +4920,8 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n         default:\n \t  gcc_assert (TYPE_P (expr) || DECL_P (expr)\n \t\t      || TREE_CODE (expr) == SCOPE_REF);\n-          error (\"argument to decltype must be an expression\");\n+\t  if (complain & tf_error)\n+\t    error (\"argument to decltype must be an expression\");\n           return error_mark_node;\n         }\n     }\n@@ -4954,7 +4959,8 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n \n   if (!type || type == unknown_type_node)\n     {\n-      error (\"type of %qE is unknown\", expr);\n+      if (complain & tf_error)\n+\terror (\"type of %qE is unknown\", expr);\n       return error_mark_node;\n     }\n "}, {"sha": "9d5f63d1a179adad7942d7078bf5a209707061d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b97c77f8caedb9434ef5feab416154403d24123", "patch": "@@ -1,5 +1,7 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/sfinae7.C: New.\n+\n \t* g++.dg/cpp0x/enum9.C: New.\n \n 2011-04-07  Mike Stump  <mikestump@comcast.net>"}, {"sha": "0a95a9644c74b800be9416a93a7aafdb4b4e4ecc", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae7.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b97c77f8caedb9434ef5feab416154403d24123/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae7.C?ref=5b97c77f8caedb9434ef5feab416154403d24123", "patch": "@@ -0,0 +1,20 @@\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  void f();\n+  void f(int);\n+  typedef int g;\n+};\n+\n+template <class T> decltype (T::f) f();\n+template <class T> void f();\n+\n+template <class T> decltype (T::g) g();\n+template <class T> void g();\n+\n+int main()\n+{\n+  f<A>();\n+  g<A>();\n+}"}]}