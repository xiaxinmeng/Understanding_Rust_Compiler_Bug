{"sha": "e6a3991ea15c0b14117b5693d77e15fd0477ce51", "node_id": "C_kwDOANBUbNoAKGU2YTM5OTFlYTE1YzBiMTQxMTdiNTY5M2Q3N2UxNWZkMDQ3N2NlNTE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-23T12:37:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-23T12:37:06Z"}, "message": "analyzer: use tainted_allocation_size::m_mem_space [PR105017]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105017\n\t* sm-taint.cc (taint_diagnostic::subclass_equal_p): Check\n\tm_has_bounds as well as m_arg.\n\t(tainted_allocation_size::subclass_equal_p): Chain up to base\n\tclass implementation.  Also check m_mem_space.\n\t(tainted_allocation_size::emit): Add note showing stack-based vs\n\theap-based allocations.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105017\n\t* gcc.dg/analyzer/taint-alloc-1.c: Add expected messages relating\n\tto heap vs stack.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "018e41209bb84b124cb0184a440d7923ca1016d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/018e41209bb84b124cb0184a440d7923ca1016d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6a3991ea15c0b14117b5693d77e15fd0477ce51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a3991ea15c0b14117b5693d77e15fd0477ce51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a3991ea15c0b14117b5693d77e15fd0477ce51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a3991ea15c0b14117b5693d77e15fd0477ce51/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a"}], "stats": {"total": 84, "additions": 58, "deletions": 26}, "files": [{"sha": "17669ae768562aa02a962499b393c64364ffc272", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a3991ea15c0b14117b5693d77e15fd0477ce51/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a3991ea15c0b14117b5693d77e15fd0477ce51/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=e6a3991ea15c0b14117b5693d77e15fd0477ce51", "patch": "@@ -137,7 +137,9 @@ class taint_diagnostic : public pending_diagnostic\n \n   bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n   {\n-    return same_tree_p (m_arg, ((const taint_diagnostic &)base_other).m_arg);\n+    const taint_diagnostic &other = (const taint_diagnostic &)base_other;\n+    return (same_tree_p (m_arg, other.m_arg)\n+\t    && m_has_bounds == other.m_has_bounds);\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n@@ -523,6 +525,15 @@ class tainted_allocation_size : public taint_diagnostic\n     return \"tainted_allocation_size\";\n   }\n \n+  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  {\n+    if (!taint_diagnostic::subclass_equal_p (base_other))\n+      return false;\n+    const tainted_allocation_size &other\n+      = (const tainted_allocation_size &)base_other;\n+    return m_mem_space == other.m_mem_space;\n+  }\n+\n   int get_controlling_option () const FINAL OVERRIDE\n   {\n     return OPT_Wanalyzer_tainted_allocation_size;\n@@ -533,29 +544,32 @@ class tainted_allocation_size : public taint_diagnostic\n     diagnostic_metadata m;\n     /* \"CWE-789: Memory Allocation with Excessive Size Value\".  */\n     m.add_cwe (789);\n-    // TODO: make use of m_mem_space\n+\n+    bool warned;\n     if (m_arg)\n       switch (m_has_bounds)\n \t{\n \tdefault:\n \t  gcc_unreachable ();\n \tcase BOUNDS_NONE:\n-\t  return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t       \"use of attacker-controlled value %qE as\"\n-\t\t\t       \" allocation size without bounds checking\",\n-\t\t\t       m_arg);\n+\t  warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t \"use of attacker-controlled value %qE as\"\n+\t\t\t\t \" allocation size without bounds checking\",\n+\t\t\t\t m_arg);\n \t  break;\n \tcase BOUNDS_UPPER:\n-\t  return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t       \"use of attacker-controlled value %qE as\"\n-\t\t\t       \" allocation size without lower-bounds checking\",\n-\t\t\t       m_arg);\n+\t  warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t \"use of attacker-controlled value %qE as\"\n+\t\t\t\t \" allocation size without\"\n+\t\t\t\t \" lower-bounds checking\",\n+\t\t\t\t m_arg);\n \t  break;\n \tcase BOUNDS_LOWER:\n-\t  return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t       \"use of attacker-controlled value %qE as\"\n-\t\t\t       \" allocation size without upper-bounds checking\",\n-\t\t\t     m_arg);\n+\t  warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t \"use of attacker-controlled value %qE as\"\n+\t\t\t\t \" allocation size without\"\n+\t\t\t\t \" upper-bounds checking\",\n+\t\t\t\t m_arg);\n \t  break;\n \t}\n     else\n@@ -564,24 +578,40 @@ class tainted_allocation_size : public taint_diagnostic\n \tdefault:\n \t  gcc_unreachable ();\n \tcase BOUNDS_NONE:\n-\t  return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t       \"use of attacker-controlled value as\"\n-\t\t\t       \" allocation size without bounds\"\n-\t\t\t       \" checking\");\n+\t  warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t \"use of attacker-controlled value as\"\n+\t\t\t\t \" allocation size without bounds\"\n+\t\t\t\t \" checking\");\n \t  break;\n \tcase BOUNDS_UPPER:\n-\t  return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t       \"use of attacker-controlled value as\"\n-\t\t\t       \" allocation size without lower-bounds\"\n-\t\t\t       \" checking\");\n+\t  warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t \"use of attacker-controlled value as\"\n+\t\t\t\t \" allocation size without\"\n+\t\t\t\t \" lower-bounds checking\");\n \t  break;\n \tcase BOUNDS_LOWER:\n-\t  return warning_meta (rich_loc, m, get_controlling_option (),\n-\t\t\t       \"use of attacker-controlled value as\"\n-\t\t\t       \" allocation size without upper-bounds\"\n-\t\t\t       \" checking\");\n+\t  warned = warning_meta (rich_loc, m, get_controlling_option (),\n+\t\t\t\t \"use of attacker-controlled value as\"\n+\t\t\t\t \" allocation size without\"\n+\t\t\t\t \" upper-bounds checking\");\n \t  break;\n \t}\n+    if (warned)\n+      {\n+\tlocation_t loc = rich_loc->get_loc ();\n+\tswitch (m_mem_space)\n+\t  {\n+\t  default:\n+\t    break;\n+\t  case MEMSPACE_STACK:\n+\t    inform (loc, \"stack-based allocation\");\n+\t    break;\n+\t  case MEMSPACE_HEAP:\n+\t    inform (loc, \"heap-based allocation\");\n+\t    break;\n+\t  }\n+      }\n+    return warned;\n   }\n \n   label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE"}, {"sha": "cb2db6c69cfc4261e9d5da4d491f21e924c960f3", "filename": "gcc/testsuite/gcc.dg/analyzer/taint-alloc-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a3991ea15c0b14117b5693d77e15fd0477ce51/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-alloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a3991ea15c0b14117b5693d77e15fd0477ce51/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-alloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-alloc-1.c?ref=e6a3991ea15c0b14117b5693d77e15fd0477ce51", "patch": "@@ -25,6 +25,7 @@ void *test_1 (FILE *f)\n     return malloc (tmp.sz); /* { dg-warning \"use of attacker-controlled value 'tmp\\\\.sz' as allocation size without upper-bounds checking\" \"warning\" } */\n     /* { dg-message \"23: \\\\(\\[0-9\\]+\\\\) 'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" \"event: tmp.i has an unchecked value\" { xfail *-*-* } .-1 } */\n     /* { dg-message \"\\\\(\\[0-9\\]+\\\\) use of attacker-controlled value 'tmp\\\\.sz' as allocation size without upper-bounds checking\" \"final event\" { target *-*-* } .-2 } */\n+    /* { dg-message \"heap-based allocation\" \"memory space\" { target *-*-* } .-3 } */\n     \n     // TOOD: better messages for state changes\n   }\n@@ -46,6 +47,7 @@ void *test_2 (FILE *f)\n       char buf[tmp.sz]; /* { dg-warning \"use of attacker-controlled value 'tmp\\\\.sz' as allocation size without upper-bounds checking\" \"warning\" } */\n       /* { dg-message \"\\\\(\\[0-9\\]+\\\\) 'tmp.i' has an unchecked value here \\\\(from 'tmp'\\\\)\" \"event: tmp.i has an unchecked value\" { xfail *-*-* } .-1 } */\n       /* { dg-message \"\\\\(\\[0-9\\]+\\\\) use of attacker-controlled value 'tmp\\\\.sz' as allocation size without upper-bounds checking\" \"final event\" { target *-*-* } .-2 } */\n+      /* { dg-message \"stack-based allocation\" \"memory space\" { target *-*-* } .-3 } */\n       fread (buf, tmp.sz, 1, f);\n     }\n     "}]}