{"sha": "0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhNTI4MTJhOGE2YzYwYzU4MDUyOWQxZDNkYmUxNDRmOGU2ZmMyZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-11-19T10:25:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-11-19T10:25:35Z"}, "message": "compare-elim.c (struct comparison): Add not_in_a field.\n\n\t* compare-elim.c (struct comparison): Add not_in_a field.\n\t(is_not): New static function.\n\t(strip_not): Likewise.\n\t(conforming_compare): Handle a NOT in the first operand.\n\t(can_eliminate_compare): Likewise.\n\t(find_comparison_dom_walker::before_dom_children): Likewise.\n\t(try_eliminate_compare): Likewise.\n\t* config/visium/visium.md (negsi2_insn_set_carry): Turn into...\n\t(neg<mode>2_insn_set_carry): ...this and add missing NEG operation.\n\nFrom-SVN: r266268", "tree": {"sha": "6c9ca6f8eaa675d23da1de4346ac91ba6454a6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c9ca6f8eaa675d23da1de4346ac91ba6454a6bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/comments", "author": null, "committer": null, "parents": [{"sha": "fc315b476948df23d6d9594b0d0107daafeaf8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc315b476948df23d6d9594b0d0107daafeaf8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc315b476948df23d6d9594b0d0107daafeaf8a7"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "98038718e7d31d18789bac5830538983692ddbd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "patch": "@@ -1,3 +1,15 @@\n+2018-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* compare-elim.c (struct comparison): Add not_in_a field.\n+\t(is_not): New static function.\n+\t(strip_not): Likewise.\n+\t(conforming_compare): Handle a NOT in the first operand.\n+\t(can_eliminate_compare): Likewise.\n+\t(find_comparison_dom_walker::before_dom_children): Likewise.\n+\t(try_eliminate_compare): Likewise.\n+\t* config/visium/visium.md (negsi2_insn_set_carry): Turn into...\n+\t(neg<mode>2_insn_set_carry): ...this and add missing NEG operation.\n+\n 2018-11-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/extend.texi (Common Type Attributes): Fix typos."}, {"sha": "f38e57605744af9506d3e42dcbdb0ee7d67cac78", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "patch": "@@ -123,10 +123,32 @@ struct comparison\n \n   /* True if its inputs are still valid at the end of the block.  */\n   bool inputs_valid;\n+\n+  /* Whether IN_A is wrapped in a NOT before being compared.  */\n+  bool not_in_a;\n };\n   \n static vec<comparison *> all_compares;\n \n+/* Return whether X is a NOT unary expression.  */\n+\n+static bool\n+is_not (rtx x)\n+{\n+  return GET_CODE (x) == NOT;\n+}\n+\n+/* Strip a NOT unary expression around X, if any.  */\n+\n+static rtx\n+strip_not (rtx x)\n+{\n+  if (is_not (x))\n+    return XEXP (x, 0);\n+\n+  return x;\n+}\n+\n /* Look for a \"conforming\" comparison, as defined above.  If valid, return\n    the rtx for the COMPARE itself.  */\n \n@@ -147,7 +169,7 @@ conforming_compare (rtx_insn *insn)\n   if (!REG_P (dest) || REGNO (dest) != targetm.flags_regnum)\n     return NULL;\n \n-  if (!REG_P (XEXP (src, 0)))\n+  if (!REG_P (strip_not (XEXP (src, 0))))\n     return NULL;\n \n   if (CONSTANT_P (XEXP (src, 1)) || REG_P (XEXP (src, 1)))\n@@ -278,10 +300,13 @@ can_eliminate_compare (rtx compare, rtx eh_note, struct comparison *cmp)\n     return false;\n \n   /* Make sure the compare is redundant with the previous.  */\n-  if (!rtx_equal_p (XEXP (compare, 0), cmp->in_a)\n+  if (!rtx_equal_p (strip_not (XEXP (compare, 0)), cmp->in_a)\n       || !rtx_equal_p (XEXP (compare, 1), cmp->in_b))\n     return false;\n \n+  if (is_not (XEXP (compare, 0)) != cmp->not_in_a)\n+    return false;\n+\n   /* New mode must be compatible with the previous compare mode.  */\n   machine_mode new_mode\n     = targetm.cc_modes_compatible (GET_MODE (compare), cmp->orig_mode);\n@@ -365,8 +390,9 @@ find_comparison_dom_walker::before_dom_children (basic_block bb)\n \t  last_cmp = XCNEW (struct comparison);\n \t  last_cmp->insn = insn;\n \t  last_cmp->prev_clobber = last_clobber;\n-\t  last_cmp->in_a = XEXP (src, 0);\n+\t  last_cmp->in_a = strip_not (XEXP (src, 0));\n \t  last_cmp->in_b = XEXP (src, 1);\n+\t  last_cmp->not_in_a = is_not (XEXP (src, 0));\n \t  last_cmp->eh_note = eh_note;\n \t  last_cmp->orig_mode = GET_MODE (src);\n \t  if (last_cmp->in_b == const0_rtx\n@@ -837,7 +863,9 @@ try_eliminate_compare (struct comparison *cmp)\n     flags = gen_rtx_REG (cmp->orig_mode, targetm.flags_regnum);\n \n   /* Generate a new comparison for installation in the setter.  */\n-  rtx y = copy_rtx (cmp_a);\n+  rtx y = cmp->not_in_a\n+\t  ? gen_rtx_NOT (GET_MODE (cmp_a), copy_rtx (cmp_a))\n+\t  : copy_rtx (cmp_a);\n   y = gen_rtx_COMPARE (GET_MODE (flags), y, copy_rtx (cmp_b));\n   y = gen_rtx_SET (flags, y);\n "}, {"sha": "c5100b7027d53e730d1a3576a41bebbb2935d9ca", "filename": "gcc/config/visium/visium.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Fconfig%2Fvisium%2Fvisium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Fconfig%2Fvisium%2Fvisium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.md?ref=0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "patch": "@@ -1208,14 +1208,14 @@\n   \"sub<s>   %0,r0,%1\"\n   [(set_attr \"type\" \"arith\")])\n \n-(define_insn \"negsi2_insn_set_carry\"\n+(define_insn \"neg<mode>2_insn_set_carry\"\n   [(set (reg:CCC R_FLAGS)\n-\t(compare:CCC (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t(compare:CCC (not:I (neg:I (match_operand:I 1 \"register_operand\" \"r\")))\n \t\t     (const_int -1)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (neg:SI (match_dup 1)))]\n+   (set (match_operand:I 0 \"register_operand\" \"=r\")\n+        (neg:I (match_dup 1)))]\n   \"reload_completed\"\n-  \"sub.l   %0,r0,%1\"\n+  \"sub<s>   %0,r0,%1\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*neg<mode>2_insn_set_overflow\""}, {"sha": "271055d349a4f09a860a4215a1037a2effe1370c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "patch": "@@ -1,3 +1,10 @@\n+2018-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/visium/overflow8.c: Remove -fno-if-conversion and\n+\tunrelated final test.\n+\t* gcc.target/visium/overflow16: Likewise.\n+\t* gcc.target/visium/overflow32.c: Likewise.\n+\n 2018-11-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/template/crash91.C: Check location too."}, {"sha": "665b4c39be4f06876bf583d31de821c2c903b6f7", "filename": "gcc/testsuite/gcc.target/visium/overflow16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow16.c?ref=0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-if-conversion\" } */\n+/* { dg-options \"-O2\" } */\n \n #include <stdbool.h>\n \n@@ -36,4 +36,3 @@ bool my_neg_overflow (short a, short *res)\n /* { dg-final { scan-assembler-times \"add.w\" 2 } } */\n /* { dg-final { scan-assembler-times \"sub.w\" 4 } } */\n /* { dg-final { scan-assembler-not \"cmp.w\" } } */\n-/* { dg-final { scan-assembler-not \"mov.w\" } } */"}, {"sha": "c9c509508ac916ee4a5a0508c7cab059c34ea47a", "filename": "gcc/testsuite/gcc.target/visium/overflow32.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow32.c?ref=0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-if-conversion\" } */\n+/* { dg-options \"-O2\" } */\n \n #include <stdbool.h>\n \n@@ -36,4 +36,3 @@ bool my_neg_overflow (int a, int *res)\n /* { dg-final { scan-assembler-times \"add.l\" 2 } } */\n /* { dg-final { scan-assembler-times \"sub.l\" 4 } } */\n /* { dg-final { scan-assembler-not \"cmp.l\" } } */\n-/* { dg-final { scan-assembler-not \"mov.l\" } } */"}, {"sha": "1f96ecbeba62187ceae412a7b89b9a75f2674344", "filename": "gcc/testsuite/gcc.target/visium/overflow8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Foverflow8.c?ref=0ea52812a8a6c60c580529d1d3dbe144f8e6fc2f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-if-conversion\" } */\n+/* { dg-options \"-O2\" } */\n \n #include <stdbool.h>\n \n@@ -36,4 +36,3 @@ bool my_neg_overflow (signed char a, signed char *res)\n /* { dg-final { scan-assembler-times \"add.b\" 2 } } */\n /* { dg-final { scan-assembler-times \"sub.b\" 4 } } */\n /* { dg-final { scan-assembler-not \"cmp.b\" } } */\n-/* { dg-final { scan-assembler-not \"mov.b\" } } */"}]}