{"sha": "6a08f7b337df863c8835f0fc66fd65d72c3824c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwOGY3YjMzN2RmODYzYzg4MzVmMGZjNjZmZDY1ZDcyYzM4MjRjOA==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2003-06-27T03:04:40Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2003-06-27T03:04:40Z"}, "message": "final.c (debug_flush_symbol_queue): New function.\n\n        * final.c (debug_flush_symbol_queue): New function.\n        (debug_queue_symbol): New function.\n        (debug_free_queue): New function.\n        (debug_nesting): New variable.\n        (symbol_queue): New variable.\n        (symbol_queue_index): Same.\n        (symbol_queue_size): Same.\n        * debug.h (debug_flush_symbol_queue): New.\n        (debug_queue_symbol): New.\n        (debug_free_queue): New.\n        (debug_nesting): New.\n        (symbol_queue_index): New.\n        * dbxout.c (DBXOUT_DECR_NESTING): New macro.\n        (DBXOUT_DECR_NESTING_AND_RETURN): New macro.\n        (dbxout_init): Delay symbol output.\n        (dbxout_global_decl): Save, set and reset TREE_USED bit around dbxout_symbol()\n        call.\n        (dbxout_begin_function): Same.\n        (dbxout_finish): Free symbol queue.\n        (dbxout_type): Put appropriate symbols in queue.\n        (dbxout_symbol): Put info for symbol's type in queue. Decrement/Increment\n        nesting counts flush symbol queue appropriately.\n        (dbxout_parms): Increment dbxout nesting.\n        (dbxout_reg_parms): Same.\n        * flags.h (flag_debug_only_used_symbols): New.\n        * toplev.c (flag_debug_only_used_symbols): New variable.\n        (lang_independent_options): Add entries for new option -feliminate-unused-debug-symbols.\n        * common.opt: Add entry for -feliminate-unused-debug-symbols.\n        * opts.c (common_handle_options): Same.\n        * config/rs6000/darwin.h (CC1_SPEC): Interpret -gused as -feliminate-unused-debug-symbols.\n        * doc/invoke.texi (Debugging Options): Document -feliminate-unused-debug-symbols.\n\nFrom-SVN: r68556", "tree": {"sha": "d83a8d6ed732288799e53eadf75a909cdffd8111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d83a8d6ed732288799e53eadf75a909cdffd8111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a08f7b337df863c8835f0fc66fd65d72c3824c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a08f7b337df863c8835f0fc66fd65d72c3824c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a08f7b337df863c8835f0fc66fd65d72c3824c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a08f7b337df863c8835f0fc66fd65d72c3824c8/comments", "author": null, "committer": null, "parents": [{"sha": "6ba701c8e99bcf81604a3bf9f69544434edd239e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba701c8e99bcf81604a3bf9f69544434edd239e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba701c8e99bcf81604a3bf9f69544434edd239e"}], "stats": {"total": 314, "additions": 292, "deletions": 22}, "files": [{"sha": "4291f67ba8548565f30bf0bff3be1df530b42e56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -1,3 +1,37 @@\n+2003-06-26  Devang Patel <dpatel@apple.com>\n+\n+\t* final.c (debug_flush_symbol_queue): New function.\n+\t(debug_queue_symbol): New function.\n+\t(debug_free_queue): New function.\n+\t(debug_nesting): New variable.\n+\t(symbol_queue): New variable.\n+\t(symbol_queue_index): Same.\n+\t(symbol_queue_size): Same.\n+\t* debug.h (debug_flush_symbol_queue): New.\n+\t(debug_queue_symbol): New.\n+\t(debug_free_queue): New.\n+\t(debug_nesting): New.\n+\t(symbol_queue_index): New.\n+\t* dbxout.c (DBXOUT_DECR_NESTING): New macro.\n+\t(DBXOUT_DECR_NESTING_AND_RETURN): New macro.\n+\t(dbxout_init): Delay symbol output.\n+\t(dbxout_global_decl): Save, set and reset TREE_USED bit around dbxout_symbol() \n+\tcall.\n+\t(dbxout_begin_function): Same.\n+\t(dbxout_finish): Free symbol queue.\n+\t(dbxout_type): Put appropriate symbols in queue.\n+\t(dbxout_symbol): Put info for symbol's type in queue. Decrement/Increment \n+\tnesting counts flush symbol queue appropriately.\n+\t(dbxout_parms): Increment dbxout nesting.\n+\t(dbxout_reg_parms): Same.\n+\t* flags.h (flag_debug_only_used_symbols): New.\n+\t* toplev.c (flag_debug_only_used_symbols): New variable.\n+\t(lang_independent_options): Add entries for new option -feliminate-unused-debug-symbols.\n+\t* common.opt: Add entry for -feliminate-unused-debug-symbols.\n+\t* opts.c (common_handle_options): Same.\n+\t* config/rs6000/darwin.h (CC1_SPEC): Interpret -gused as -feliminate-unused-debug-symbols.\n+\t* doc/invoke.texi (Debugging Options): Document -feliminate-unused-debug-symbols.\n+\t\n 2003-06-26  Roger Sayle  <roger@eyesopen.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "347b59f2483d4e556164725c550619fe8668b155", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -241,6 +241,9 @@ Common\n feliminate-dwarf2-dups\n Common\n \n+feliminate-unused-debug-symbols\n+Common\n+\n feliminate-unused-debug-types\n Common\n "}, {"sha": "52340a8e029e8595a058c083d50bd76e2a04504b", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -93,6 +93,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n \n #define CC1_SPEC \"\\\n+%{gused: -feliminate-unused-debug-symbols %<gused }\\\n %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n %{!static:%{!mdynamic-no-pic:-fPIC}}\"\n "}, {"sha": "71557486a4d7bc952f0f3ef9f813ccba8eabc4c9", "filename": "gcc/dbxout.c", "status": "modified", "additions": 132, "deletions": 21, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -93,6 +93,17 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"xcoffout.h\"\n #endif\n \n+extern int flag_debug_only_used_symbols;\n+\n+#undef DBXOUT_DECR_NESTING\n+#define DBXOUT_DECR_NESTING \\\n+  if (--debug_nesting == 0 && symbol_queue_index > 0) \\\n+    debug_flush_symbol_queue ()\n+\n+#undef DBXOUT_DECR_NESTING_AND_RETURN\n+#define DBXOUT_DECR_NESTING_AND_RETURN(x) \\\n+  do {--debug_nesting; return (x);} while (0)\n+\n #ifndef ASM_STABS_OP\n #define ASM_STABS_OP \"\\t.stabs\\t\"\n #endif\n@@ -505,9 +516,6 @@ dbxout_init (input_file_name)\n \n #ifdef DBX_OUTPUT_STANDARD_TYPES\n   DBX_OUTPUT_STANDARD_TYPES (syms);\n-#else\n-  dbxout_symbol (TYPE_NAME (integer_type_node), 0);\n-  dbxout_symbol (TYPE_NAME (char_type_node), 0);\n #endif\n \n   /* Get all permanent types that have typedef names,\n@@ -705,7 +713,12 @@ dbxout_global_decl (decl)\n   if (TREE_CODE (decl) == VAR_DECL\n       && ! DECL_EXTERNAL (decl)\n       && DECL_RTL_SET_P (decl))\t/* Not necessary?  */\n-    dbxout_symbol (decl, 0);\n+    {\n+      int saved_tree_used = TREE_USED (decl);\n+      TREE_USED (decl) = 1;\n+      dbxout_symbol (decl, 0);\n+      TREE_USED (decl) = saved_tree_used;\n+    }\n }\n \n /* At the end of compilation, finish writing the symbol table.\n@@ -719,6 +732,8 @@ dbxout_finish (filename)\n #ifdef DBX_OUTPUT_MAIN_SOURCE_FILE_END\n   DBX_OUTPUT_MAIN_SOURCE_FILE_END (asmfile, filename);\n #endif /* DBX_OUTPUT_MAIN_SOURCE_FILE_END */\n+\n+  debug_free_queue ();\n }\n \n /* Output floating point type values used by the 'R' stab letter.\n@@ -1125,6 +1140,7 @@ dbxout_range_type (type)\n     }\n }\n \f\n+\n /* Output a reference to a type.  If the type has not yet been\n    described in the dbx output, output its definition now.\n    For a type already defined, just refer to its definition\n@@ -1200,6 +1216,21 @@ dbxout_type (type, full)\n #endif\n     }\n \n+  if (flag_debug_only_used_symbols)\n+    {\n+      if ((TREE_CODE (type) == RECORD_TYPE\n+\t   || TREE_CODE (type) == UNION_TYPE\n+\t   || TREE_CODE (type) == QUAL_UNION_TYPE\n+\t   || TREE_CODE (type) == ENUMERAL_TYPE)\n+\t  && TYPE_STUB_DECL (type)\n+\t  && TREE_CODE_CLASS (TREE_CODE (TYPE_STUB_DECL (type))) == 'd'\n+\t  && ! DECL_IGNORED_P (TYPE_STUB_DECL (type)))\n+\tdebug_queue_symbol (TYPE_STUB_DECL (type));\n+      else if (TYPE_NAME (type)\n+\t       && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL)\n+\tdebug_queue_symbol (TYPE_NAME (type));\n+    }\n+  \n   /* Output the number of this type, to refer to it.  */\n   dbxout_type_index (type);\n \n@@ -1283,6 +1314,18 @@ dbxout_type (type, full)\n     }\n   else if (main_variant != TYPE_MAIN_VARIANT (type))\n     {\n+      if (flag_debug_only_used_symbols)\n+        {\n+          tree orig_type = DECL_ORIGINAL_TYPE (TYPE_NAME (type));\n+\n+          if ((TREE_CODE (orig_type) == RECORD_TYPE  \n+               || TREE_CODE (orig_type) == UNION_TYPE\n+               || TREE_CODE (orig_type) == QUAL_UNION_TYPE\n+               || TREE_CODE (orig_type) == ENUMERAL_TYPE)\n+              && TYPE_STUB_DECL (orig_type)\n+              && ! DECL_IGNORED_P (TYPE_STUB_DECL (orig_type)))\n+            debug_queue_symbol (TYPE_STUB_DECL (orig_type));\n+        }\n       /* 'type' is a typedef; output the type it refers to.  */\n       dbxout_type (DECL_ORIGINAL_TYPE (TYPE_NAME (type)), 0);\n       return;\n@@ -1992,6 +2035,9 @@ dbxout_symbol (decl, local)\n   tree context = NULL_TREE;\n   int result = 0;\n \n+  /* \"Intercept\" dbxout_symbol() calls like we do all debug_hooks.  */\n+  ++debug_nesting;\n+\n   /* Cast avoids warning in old compilers.  */\n   current_sym_code = (STAB_CODE_TYPE) 0;\n   current_sym_value = 0;\n@@ -2001,7 +2047,62 @@ dbxout_symbol (decl, local)\n \n   if ((DECL_NAME (decl) == 0 && TREE_CODE (decl) != TYPE_DECL)\n       || DECL_IGNORED_P (decl))\n-    return 0;\n+    DBXOUT_DECR_NESTING_AND_RETURN (0);\n+\n+  /* If we are to generate only the symbols actualy used then such\n+     symbol nodees are flagged with TREE_USED.  Ignore any that\n+     aren't flaged as TREE_USED.  */\n+    \n+  if (flag_debug_only_used_symbols)\n+    {\n+      tree t;\n+\n+      if (!TREE_USED (decl)\n+          && (TREE_CODE (decl) != VAR_DECL || !DECL_INITIAL (decl)))\n+        DBXOUT_DECR_NESTING_AND_RETURN (0);\n+\n+      /* We now have a used symbol.  We need to generate the info for\n+         the symbol's type in addition to the symbol itself.  These\n+         type symbols are queued to be generated after were done with\n+         the symbol itself (done because the symbol's info is generated\n+         with fprintf's, etc. as it determines what's needed).\n+\n+         Note, because the TREE_TYPE(type) might be something like a\n+         pointer to a named type we need to look for the first name\n+         we see following the TREE_TYPE chain.  */\n+\n+      t = type;    \n+      while (POINTER_TYPE_P (t))\n+        t = TREE_TYPE (t);\n+\n+      /* RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE, and ENUMERAL_TYPE\n+         need special treatment.  The TYPE_STUB_DECL field in these\n+         types generally represents the tag name type we want to\n+         output.  In addition there  could be a typedef type with\n+         a different name.  In that case we also want to output\n+         that.  */\n+\n+      if ((TREE_CODE (t) == RECORD_TYPE\n+           || TREE_CODE (t) == UNION_TYPE\n+           || TREE_CODE (t) == QUAL_UNION_TYPE\n+           || TREE_CODE (t) == ENUMERAL_TYPE)\n+          && TYPE_STUB_DECL (t)\n+          && TYPE_STUB_DECL (t) != decl\n+          && TREE_CODE_CLASS (TREE_CODE (TYPE_STUB_DECL (t))) == 'd'\n+          && ! DECL_IGNORED_P (TYPE_STUB_DECL (t)))\n+        {\n+          debug_queue_symbol (TYPE_STUB_DECL (t));\n+          if (TYPE_NAME (t)\n+              && TYPE_NAME (t) != TYPE_STUB_DECL (t)\n+              && TYPE_NAME (t) != decl\n+              && TREE_CODE_CLASS (TREE_CODE (TYPE_NAME (t))) == 'd')\n+            debug_queue_symbol (TYPE_NAME (t));\n+        }\n+      else if (TYPE_NAME (t)\n+\t       && TYPE_NAME (t) != decl\n+\t       && TREE_CODE_CLASS (TREE_CODE (TYPE_NAME (t))) == 'd')\n+        debug_queue_symbol (TYPE_NAME (t));\n+    }\n \n   dbxout_prepare_symbol (decl);\n \n@@ -2019,7 +2120,7 @@ dbxout_symbol (decl, local)\n \n     case FUNCTION_DECL:\n       if (DECL_RTL (decl) == 0)\n-\treturn 0;\n+\tDBXOUT_DECR_NESTING_AND_RETURN (0);\n       if (DECL_EXTERNAL (decl))\n \tbreak;\n       /* Don't mention a nested function under its parent.  */\n@@ -2056,22 +2157,10 @@ dbxout_symbol (decl, local)\n       break;\n \n     case TYPE_DECL:\n-#if 0\n-      /* This seems all wrong.  Outputting most kinds of types gives no name\n-\t at all.  A true definition gives no name; a cross-ref for a\n-\t structure can give the tag name, but not a type name.\n-\t It seems that no typedef name is defined by outputting a type.  */\n-\n-      /* If this typedef name was defined by outputting the type,\n-\t don't duplicate it.  */\n-      if (typevec[TYPE_SYMTAB_ADDRESS (type)].status == TYPE_DEFINED\n-\t  && TYPE_NAME (TREE_TYPE (decl)) == decl)\n-\treturn 0;\n-#endif\n       /* Don't output the same typedef twice.\n          And don't output what language-specific stuff doesn't want output.  */\n       if (TREE_ASM_WRITTEN (decl) || TYPE_DECL_SUPPRESS_DEBUG (decl))\n-\treturn 0;\n+\tDBXOUT_DECR_NESTING_AND_RETURN (0);\n \n       FORCE_TEXT;\n       result = 1;\n@@ -2097,6 +2186,8 @@ dbxout_symbol (decl, local)\n \t\t/* Distinguish the implicit typedefs of C++\n \t\t   from explicit ones that might be found in C.  */\n \t\t&& DECL_ARTIFICIAL (decl)\n+                /* Do not generate a tag for incomplete records.  */\n+                && COMPLETE_TYPE_P (type)\n \t\t/* Do not generate a tag for records of variable size,\n \t\t   since this type can not be properly described in the\n \t\t   DBX format, and it confuses some tools such as objdump.  */\n@@ -2218,7 +2309,7 @@ dbxout_symbol (decl, local)\n       /* Named return value, treat like a VAR_DECL.  */\n     case VAR_DECL:\n       if (! DECL_RTL_SET_P (decl))\n-\treturn 0;\n+\tDBXOUT_DECR_NESTING_AND_RETURN (0);\n       /* Don't mention a variable that is external.\n \t Let the file that defines it describe it.  */\n       if (DECL_EXTERNAL (decl))\n@@ -2245,6 +2336,7 @@ dbxout_symbol (decl, local)\n \t\t  fprintf (asmfile, \"%s\\\"%s:c=i\" HOST_WIDE_INT_PRINT_DEC\n \t\t\t   \"\\\",0x%x,0,0,0\\n\",\n \t\t\t   ASM_STABS_OP, name, ival, N_LSYM);\n+\t\t  DBXOUT_DECR_NESTING;\n \t\t  return 1;\n \t\t}\n \t      else if (TREE_CODE (TREE_TYPE (decl)) == REAL_TYPE)\n@@ -2268,6 +2360,7 @@ dbxout_symbol (decl, local)\n     default:\n       break;\n     }\n+  DBXOUT_DECR_NESTING;\n   return result;\n }\n \f\n@@ -2604,6 +2697,8 @@ void\n dbxout_parms (parms)\n      tree parms;\n {\n+  ++debug_nesting;\n+\n   for (; parms; parms = TREE_CHAIN (parms))\n     if (DECL_NAME (parms) && TREE_TYPE (parms) != error_mark_node)\n       {\n@@ -2861,6 +2956,7 @@ dbxout_parms (parms)\n \t    dbxout_finish_symbol (parms);\n \t  }\n       }\n+  DBXOUT_DECR_NESTING;\n }\n \n /* Output definitions for the places where parms live during the function,\n@@ -2878,6 +2974,8 @@ void\n dbxout_reg_parms (parms)\n      tree parms;\n {\n+  ++debug_nesting;\n+\n   for (; parms; parms = TREE_CHAIN (parms))\n     if (DECL_NAME (parms) && PARM_PASSED_IN_MEMORY (parms))\n       {\n@@ -2898,6 +2996,7 @@ dbxout_reg_parms (parms)\n \t  dbxout_symbol_location (parms, TREE_TYPE (parms),\n \t\t\t\t  0, DECL_RTL (parms));\n       }\n+  DBXOUT_DECR_NESTING;\n }\n \f\n /* Given a chain of ..._TYPE nodes (as come in a parameter list),\n@@ -3035,7 +3134,19 @@ static void\n dbxout_begin_function (decl)\n      tree decl;\n {\n-  dbxout_symbol (decl, 0);\n+  int saved_tree_used1 = TREE_USED (decl);\n+  TREE_USED (decl) = 1;\n+  if (DECL_NAME (DECL_RESULT (decl)) != 0)\n+    {\n+      int saved_tree_used2 = TREE_USED (DECL_RESULT (decl));       \n+      TREE_USED (DECL_RESULT (decl)) = 1;\n+      dbxout_symbol (decl, 0);\n+      TREE_USED (DECL_RESULT (decl)) = saved_tree_used2;\n+    }\n+  else\n+    dbxout_symbol (decl, 0);\n+  TREE_USED (decl) = saved_tree_used1;\n+\n   dbxout_parms (DECL_ARGUMENTS (decl));\n   if (DECL_NAME (DECL_RESULT (decl)) != 0)\n     dbxout_symbol (DECL_RESULT (decl), 1);"}, {"sha": "c1c0842069d59388e42255137602ff37e85d85f8", "filename": "gcc/debug.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -146,4 +146,10 @@ extern void dwarf2out_frame_finish\tPARAMS ((void));\n    translation unit.  */\n extern int dwarf2out_do_frame\t\tPARAMS ((void));\n \n+extern void debug_flush_symbol_queue    PARAMS ((void));\n+extern void debug_queue_symbol          PARAMS ((tree));\n+extern void debug_free_queue            PARAMS ((void));\n+extern int debug_nesting;\n+extern int symbol_queue_index;\n+\n #endif /* !GCC_DEBUG_H  */"}, {"sha": "a751d8e419ff889b9f8f54f7ea21887e4e727adb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -244,7 +244,7 @@ in the following sections.\n -fdump-tree-optimized@r{[}-@var{n}@r{]} @gol\n -fdump-tree-inlined@r{[}-@var{n}@r{]} @gol\n -feliminate-dwarf2-dups -feliminate-unused-debug-types @gol\n--fmem-report -fprofile-arcs @gol\n+-feliminate-unused-debug-symbols -fmem-report -fprofile-arcs @gol\n -frandom-seed=@var{string} -fsched-verbose=@var{n} @gol\n -ftest-coverage  -ftime-report @gol\n -g  -g@var{level}  -gcoff  -gdwarf  -gdwarf-1  -gdwarf-1+  -gdwarf-2 @gol\n@@ -2916,6 +2916,11 @@ systems.  On MIPS, Alpha and System V Release 4 systems this option\n produces stabs debugging output which is not understood by DBX or SDB@.\n On System V Release 4 systems this option requires the GNU assembler.\n \n+@item -feliminate-unused-debug-symbols\n+@opindex feliminate-unused-debug-symbols\n+Produce debugging information in stabs format (if that is supported),\n+for only symbols that are actualy used.\n+\n @item -gstabs+\n @opindex gstabs+\n Produce debugging information in stabs format (if that is supported),"}, {"sha": "b7a04f5d5109544c308c14f7a644ad2347b12157", "filename": "gcc/final.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -81,6 +81,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"dwarf2out.h\"\n #endif\n \n+#ifdef DBX_DEBUGGING_INFO\n+#include \"dbxout.h\"\n+#endif\n+\n /* If we aren't using cc0, CC_STATUS_INIT shouldn't exist.  So define a\n    null default for it to save conditionalization later.  */\n #ifndef CC_STATUS_INIT\n@@ -3847,3 +3851,85 @@ leaf_renumber_regs_insn (in_rtx)\n       }\n }\n #endif\n+\n+\n+/* When -gused is used, emit debug info for only used symbols. But in\n+   addition to the standard intercepted debug_hooks there are some direct\n+   calls into this file, i.e., dbxout_symbol, dbxout_parms, and dbxout_reg_params.\n+   Those routines may also be called from a higher level intercepted routine. So\n+   to prevent recording data for an inner call to one of these for an intercept,\n+   we maintain a intercept nesting counter (debug_nesting). We only save the\n+   intercepted arguments if the nesting is 1.  */\n+int debug_nesting = 0;\n+\n+static tree *symbol_queue;\n+int symbol_queue_index = 0;\n+static int symbol_queue_size = 0;\n+\n+/* Generate the symbols for any queued up type symbols we encountered\n+   while generating the type info for some originally used symbol.\n+   This might generate additional entries in the queue.  Only when\n+   the nesting depth goes to 0 is this routine called.  */\n+\n+void\n+debug_flush_symbol_queue ()\n+{\n+  int i;\n+ \n+  /* Make sure that additionally queued items are not flushed\n+     prematurely.  */\n+    \n+  ++debug_nesting;\n+ \n+  for (i = 0; i < symbol_queue_index; ++i)\n+    {\n+      /* If we pushed queued symbols then such symbols are must be\n+         output no matter what anyone else says.  Specifically,\n+         we need to make sure dbxout_symbol() thinks the symbol was\n+         used and also we need to override TYPE_DECL_SUPPRESS_DEBUG\n+         which may be set for outside reasons.  */\n+      int saved_tree_used = TREE_USED (symbol_queue[i]);\n+      int saved_suppress_debug = TYPE_DECL_SUPPRESS_DEBUG (symbol_queue[i]);\n+      TREE_USED (symbol_queue[i]) = 1;\n+      TYPE_DECL_SUPPRESS_DEBUG (symbol_queue[i]) = 0;\n+\n+#ifdef DBX_DEBUGGING_INFO\n+      dbxout_symbol (symbol_queue[i], 0);\n+#endif\n+\n+      TREE_USED (symbol_queue[i]) = saved_tree_used;\n+      TYPE_DECL_SUPPRESS_DEBUG (symbol_queue[i]) = saved_suppress_debug;\n+    }\n+\n+  symbol_queue_index = 0;\n+  --debug_nesting;       \n+}\n+\n+/* Queue a type symbol needed as part of the definition of a decl\n+   symbol.  These symbols are generated when debug_flush_symbol_queue()\n+   is called.  */\n+\n+void     \n+debug_queue_symbol (tree decl)\n+{\n+  if (symbol_queue_index >= symbol_queue_size)    \n+    {\n+      symbol_queue_size += 10;\n+      symbol_queue = (tree *) xrealloc (symbol_queue,\n+                                        symbol_queue_size * sizeof (tree));\n+    }\n+\n+  symbol_queue[symbol_queue_index++] = decl;\n+}     \n+\n+/* Free symbol queue */\n+void\n+debug_free_queue ()\n+{\n+  if (symbol_queue)\n+    {\n+      free (symbol_queue);\n+      symbol_queue = NULL;\n+      symbol_queue_size = 0;\n+    }\n+}"}, {"sha": "b1238beb291630fcef67584b957ec538b76f7365", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -737,6 +737,10 @@ common_handle_option (size_t scode, const char *arg,\n       flag_eliminate_unused_debug_types = value;\n       break;\n \n+    case OPT_feliminate_unused_debug_symbols:\n+      flag_debug_only_used_symbols = value;\n+      break;\n+\n     case OPT_fexceptions:\n       flag_exceptions = value;\n       break;"}, {"sha": "6fd02eb6ad4b00fd0c9ea82f58ca47c30dc7eac3", "filename": "gcc/toplev.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a08f7b337df863c8835f0fc66fd65d72c3824c8/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=6a08f7b337df863c8835f0fc66fd65d72c3824c8", "patch": "@@ -402,6 +402,9 @@ int flag_eliminate_dwarf2_dups = 0;\n \n int flag_eliminate_unused_debug_types = 1;\n \n+/* Nonzero means emit debugging information only for symbols which are used.  */\n+int flag_debug_only_used_symbols = 0;\n+\n /* Nonzero if generating code to do profiling.  */\n \n int profile_flag = 0;\n@@ -1056,6 +1059,8 @@ static const lang_independent_options f_options[] =\n    N_(\"Perform DWARF2 duplicate elimination\") },\n   {\"eliminate-unused-debug-types\", &flag_dummy, 1,\n    N_(\"Perform unused type elimination in debug info\") },\n+  {\"eliminate-unused-debug-symbols\", &flag_dummy, 1,\n+   N_(\"Perform unused type elimination in debug info\") },\n   {\"float-store\", &flag_dummy, 1,\n    N_(\"Do not store floats in registers\") },\n   {\"defer-pop\", &flag_dummy, 1,\n@@ -4584,6 +4589,21 @@ general_init (char *argv0)\n   init_ggc ();\n   init_stringpool ();\n   init_ttree ();\n+\n+  /* APPLE LOCAL setrlimit */\n+#ifdef RLIMIT_STACK\n+  /* Get rid of any avoidable limit on stack size.  */\n+  {\n+    struct rlimit rlim;\n+\n+    /* Set the stack limit huge.  (Compiles normally work within\n+       a megabyte of stack, but the normal limit on OSX is 512K for\n+       some reason.) */\n+    getrlimit (RLIMIT_STACK, &rlim);\n+    rlim.rlim_cur = rlim.rlim_max;\n+    setrlimit (RLIMIT_STACK, &rlim);\n+  }\n+#endif /* RLIMIT_STACK defined */\n }\n \n /* Parse command line options and set default flag values, called"}]}