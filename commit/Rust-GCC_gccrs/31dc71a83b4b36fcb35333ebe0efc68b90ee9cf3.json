{"sha": "31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkYzcxYTgzYjRiMzZmY2IzNTMzM2ViZTBlZmM2OGI5MGVlOWNmMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-03-17T21:50:16Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-03-17T21:50:16Z"}, "message": "* c-parser.c: Add C11 references.\n\nFrom-SVN: r246249", "tree": {"sha": "b1827700cf2b2d044b7ed7c122ae7634155fba0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1827700cf2b2d044b7ed7c122ae7634155fba0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dba937c321471119dad87e4524e002e494837de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba937c321471119dad87e4524e002e494837de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba937c321471119dad87e4524e002e494837de0"}], "stats": {"total": 91, "additions": 48, "deletions": 43}, "files": [{"sha": "ac8db9b88138240d5818354625f43d345e3e0689", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3", "patch": "@@ -1,3 +1,7 @@\n+2017-03-17  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-parser.c: Add C11 references.\n+\n 2017-03-15  Marek Polacek  <polacek@redhat.com>\n \n \t* c-parser.c (c_parser_enum_specifier): Remove redundant line."}, {"sha": "988369e41938ed65171ff1f97492f87929484a6a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=31dc71a83b4b36fcb35333ebe0efc68b90ee9cf3", "patch": "@@ -1316,7 +1316,7 @@ static void c_parser_cilk_grainsize (c_parser *, bool *);\n \n static void c_parser_parse_rtl_body (c_parser *parser, char *start_with_pass);\n \n-/* Parse a translation unit (C90 6.7, C99 6.9).\n+/* Parse a translation unit (C90 6.7, C99 6.9, C11 6.9).\n \n    translation-unit:\n      external-declarations\n@@ -1359,7 +1359,7 @@ c_parser_translation_unit (c_parser *parser)\n       error (\"storage size of %q+D isn%'t known\", decl);\n }\n \n-/* Parse an external declaration (C90 6.7, C99 6.9).\n+/* Parse an external declaration (C90 6.7, C99 6.9, C11 6.9).\n \n    external-declaration:\n      function-definition\n@@ -1475,8 +1475,8 @@ static void c_finish_omp_declare_simd (c_parser *, tree, tree, vec<c_token>);\n static void c_finish_oacc_routine (struct oacc_routine_data *, tree, bool);\n \n /* Parse a declaration or function definition (C90 6.5, 6.7.1, C99\n-   6.7, 6.9.1).  If FNDEF_OK is true, a function definition is\n-   accepted; otherwise (old-style parameter declarations) only other\n+   6.7, 6.9.1, C11 6.7, 6.9.1).  If FNDEF_OK is true, a function definition\n+   is accepted; otherwise (old-style parameter declarations) only other\n    declarations are accepted.  If STATIC_ASSERT_OK is true, a static\n    assertion is accepted; otherwise (old-style parameter declarations)\n    it is not.  If NESTED is true, we are inside a function or parsing\n@@ -2262,7 +2262,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n }\n \n /* Parse some declaration specifiers (possibly none) (C90 6.5, C99\n-   6.7), adding them to SPECS (which may already include some).\n+   6.7, C11 6.7), adding them to SPECS (which may already include some).\n    Storage class specifiers are accepted iff SCSPEC_OK; type\n    specifiers are accepted iff TYPESPEC_OK; alignment specifiers are\n    accepted iff ALIGNSPEC_OK; attributes are accepted at the start\n@@ -2279,7 +2279,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n    handled as storage class specifiers, as is __thread.  Alignment\n    specifiers are from C11.\n \n-   C90 6.5.1, C99 6.7.1:\n+   C90 6.5.1, C99 6.7.1, C11 6.7.1:\n    storage-class-specifier:\n      typedef\n      extern\n@@ -2290,14 +2290,14 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n \n    (_Thread_local is new in C11.)\n \n-   C99 6.7.4:\n+   C99 6.7.4, C11 6.7.4:\n    function-specifier:\n      inline\n      _Noreturn\n \n    (_Noreturn is new in C11.)\n \n-   C90 6.5.2, C99 6.7.2:\n+   C90 6.5.2, C99 6.7.2, C11 6.7.2:\n    type-specifier:\n      void\n      char\n@@ -2319,7 +2319,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n    (_Bool and _Complex are new in C99.)\n    (atomic-type-specifier is new in C11.)\n \n-   C90 6.5.3, C99 6.7.3:\n+   C90 6.5.3, C99 6.7.3, C11 6.7.3:\n \n    type-qualifier:\n      const\n@@ -2656,7 +2656,7 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n  out: ;\n }\n \n-/* Parse an enum specifier (C90 6.5.2.2, C99 6.7.2.2).\n+/* Parse an enum specifier (C90 6.5.2.2, C99 6.7.2.2, C11 6.7.2.2).\n \n    enum-specifier:\n      enum attributes[opt] identifier[opt] { enumerator-list } attributes[opt]\n@@ -2819,7 +2819,7 @@ c_parser_enum_specifier (c_parser *parser)\n   return ret;\n }\n \n-/* Parse a struct or union specifier (C90 6.5.2.1, C99 6.7.2.1).\n+/* Parse a struct or union specifier (C90 6.5.2.1, C99 6.7.2.1, C11 6.7.2.1).\n \n    struct-or-union-specifier:\n      struct-or-union attributes[opt] identifier[opt]\n@@ -3014,8 +3014,8 @@ c_parser_struct_or_union_specifier (c_parser *parser)\n   return ret;\n }\n \n-/* Parse a struct-declaration (C90 6.5.2.1, C99 6.7.2.1), *without*\n-   the trailing semicolon.\n+/* Parse a struct-declaration (C90 6.5.2.1, C99 6.7.2.1, C11 6.7.2.1),\n+   *without* the trailing semicolon.\n \n    struct-declaration:\n      specifier-qualifier-list struct-declarator-list\n@@ -3300,13 +3300,13 @@ c_parser_alignas_specifier (c_parser * parser)\n }\n \n /* Parse a declarator, possibly an abstract declarator (C90 6.5.4,\n-   6.5.5, C99 6.7.5, 6.7.6).  If TYPE_SEEN_P then a typedef name may\n-   be redeclared; otherwise it may not.  KIND indicates which kind of\n-   declarator is wanted.  Returns a valid declarator except in the\n-   case of a syntax error in which case NULL is returned.  *SEEN_ID is\n-   set to true if an identifier being declared is seen; this is used\n-   to diagnose bad forms of abstract array declarators and to\n-   determine whether an identifier list is syntactically permitted.\n+   6.5.5, C99 6.7.5, 6.7.6, C11 6.7.6, 6.7.7).  If TYPE_SEEN_P then\n+   a typedef name may be redeclared; otherwise it may not.  KIND\n+   indicates which kind of declarator is wanted.  Returns a valid\n+   declarator except in the case of a syntax error in which case NULL is\n+   returned.  *SEEN_ID is set to true if an identifier being declared is\n+   seen; this is used to diagnose bad forms of abstract array declarators\n+   and to determine whether an identifier list is syntactically permitted.\n \n    declarator:\n      pointer[opt] direct-declarator\n@@ -4272,7 +4272,7 @@ c_parser_attributes (c_parser *parser)\n   return attrs;\n }\n \n-/* Parse a type name (C90 6.5.5, C99 6.7.6).\n+/* Parse a type name (C90 6.5.5, C99 6.7.6, C11 6.7.7).\n \n    type-name:\n      specifier-qualifier-list abstract-declarator[opt]\n@@ -4308,7 +4308,7 @@ c_parser_type_name (c_parser *parser)\n   return ret;\n }\n \n-/* Parse an initializer (C90 6.5.7, C99 6.7.8).\n+/* Parse an initializer (C90 6.5.7, C99 6.7.8, C11 6.7.9).\n \n    initializer:\n      assignment-expression\n@@ -4670,7 +4670,7 @@ c_parser_initval (c_parser *parser, struct c_expr *after,\n }\n \n /* Parse a compound statement (possibly a function body) (C90 6.6.2,\n-   C99 6.8.2).\n+   C99 6.8.2, C11 6.8.2).\n \n    compound-statement:\n      { block-item-list[opt] }\n@@ -4940,7 +4940,7 @@ c_parser_all_labels (c_parser *parser)\n     c_parser_label (parser);\n }\n \n-/* Parse a label (C90 6.6.1, C99 6.8.1).\n+/* Parse a label (C90 6.6.1, C99 6.8.1, C11 6.8.1).\n \n    label:\n      identifier : attributes[opt]\n@@ -5053,7 +5053,7 @@ c_parser_label (c_parser *parser)\n     }\n }\n \n-/* Parse a statement (C90 6.6, C99 6.8).\n+/* Parse a statement (C90 6.6, C99 6.8, C11 6.8).\n \n    statement:\n      labeled-statement\n@@ -5583,7 +5583,7 @@ c_parser_maybe_reclassify_token (c_parser *parser)\n     }\n }\n \n-/* Parse an if statement (C90 6.6.4, C99 6.8.4).\n+/* Parse an if statement (C90 6.6.4, C99 6.8.4, C11 6.8.4).\n \n    if-statement:\n      if ( expression ) statement\n@@ -5684,7 +5684,7 @@ c_parser_if_statement (c_parser *parser, bool *if_p, vec<tree> *chain)\n   c_parser_maybe_reclassify_token (parser);\n }\n \n-/* Parse a switch statement (C90 6.6.4, C99 6.8.4).\n+/* Parse a switch statement (C90 6.6.4, C99 6.8.4, C11 6.8.4).\n \n    switch-statement:\n      switch (expression) statement\n@@ -5741,7 +5741,7 @@ c_parser_switch_statement (c_parser *parser, bool *if_p)\n   c_parser_maybe_reclassify_token (parser);\n }\n \n-/* Parse a while statement (C90 6.6.5, C99 6.8.5).\n+/* Parse a while statement (C90 6.6.5, C99 6.8.5, C11 6.8.5).\n \n    while-statement:\n       while (expression) statement\n@@ -5791,7 +5791,7 @@ c_parser_while_statement (c_parser *parser, bool ivdep, bool *if_p)\n   c_cont_label = save_cont;\n }\n \n-/* Parse a do statement (C90 6.6.5, C99 6.8.5).\n+/* Parse a do statement (C90 6.6.5, C99 6.8.5, C11 6.8.5).\n \n    do-statement:\n      do statement while ( expression ) ;\n@@ -5835,7 +5835,7 @@ c_parser_do_statement (c_parser *parser, bool ivdep)\n   add_stmt (c_end_compound_stmt (loc, block, flag_isoc99));\n }\n \n-/* Parse a for statement (C90 6.6.5, C99 6.8.5).\n+/* Parse a for statement (C90 6.6.5, C99 6.8.5, C11 6.8.5).\n \n    for-statement:\n      for ( expression[opt] ; expression[opt] ; expression[opt] ) statement\n@@ -6361,9 +6361,9 @@ c_parser_asm_goto_operands (c_parser *parser)\n }\n \n /* Parse an expression other than a compound expression; that is, an\n-   assignment expression (C90 6.3.16, C99 6.5.16).  If AFTER is not\n-   NULL then it is an Objective-C message expression which is the\n-   primary-expression starting the expression as an initializer.\n+   assignment expression (C90 6.3.16, C99 6.5.16, C11 6.5.16).  If\n+   AFTER is not NULL then it is an Objective-C message expression which\n+   is the primary-expression starting the expression as an initializer.\n \n    assignment-expression:\n      conditional-expression\n@@ -6444,8 +6444,8 @@ c_parser_expr_no_commas (c_parser *parser, struct c_expr *after,\n   return ret;\n }\n \n-/* Parse a conditional expression (C90 6.3.15, C99 6.5.15).  If AFTER\n-   is not NULL then it is an Objective-C message expression which is\n+/* Parse a conditional expression (C90 6.3.15, C99 6.5.15, C11 6.5.15).  If\n+   AFTER is not NULL then it is an Objective-C message expression which is\n    the primary-expression starting the expression as an initializer.\n \n    conditional-expression:\n@@ -6558,9 +6558,9 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n }\n \n /* Parse a binary expression; that is, a logical-OR-expression (C90\n-   6.3.5-6.3.14, C99 6.5.5-6.5.14).  If AFTER is not NULL then it is\n-   an Objective-C message expression which is the primary-expression\n-   starting the expression as an initializer.\n+   6.3.5-6.3.14, C99 6.5.5-6.5.14, C11 6.5.5-6.5.14).  If AFTER is not\n+   NULL then it is an Objective-C message expression which is the\n+   primary-expression starting the expression as an initializer.\n \n    OMP_ATOMIC_LHS is NULL, unless parsing OpenMP #pragma omp atomic,\n    when it should be the unfolded lhs.  In a valid OpenMP source,\n@@ -6832,8 +6832,8 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n #undef POP\n }\n \n-/* Parse a cast expression (C90 6.3.4, C99 6.5.4).  If AFTER is not\n-   NULL then it is an Objective-C message expression which is the\n+/* Parse a cast expression (C90 6.3.4, C99 6.5.4, C11 6.5.4).  If AFTER\n+   is not NULL then it is an Objective-C message expression which is the\n    primary-expression starting the expression as an initializer.\n \n    cast-expression:\n@@ -6893,7 +6893,7 @@ c_parser_cast_expression (c_parser *parser, struct c_expr *after)\n     return c_parser_unary_expression (parser);\n }\n \n-/* Parse an unary expression (C90 6.3.3, C99 6.5.3).\n+/* Parse an unary expression (C90 6.3.3, C99 6.5.3, C11 6.5.3).\n \n    unary-expression:\n      postfix-expression\n@@ -7493,7 +7493,8 @@ c_parser_generic_selection (c_parser *parser)\n   return matched_assoc.expression;\n }\n \n-/* Parse a postfix expression (C90 6.3.1-6.3.2, C99 6.5.1-6.5.2).\n+/* Parse a postfix expression (C90 6.3.1-6.3.2, C99 6.5.1-6.5.2,\n+   C11 6.5.1-6.5.2).\n \n    postfix-expression:\n      primary-expression\n@@ -8572,7 +8573,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n     }\n }\n \n-/* Parse an expression (C90 6.3.17, C99 6.5.17).\n+/* Parse an expression (C90 6.3.17, C99 6.5.17, C11 6.5.17).\n \n    expression:\n      assignment-expression"}]}