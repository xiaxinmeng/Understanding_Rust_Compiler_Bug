{"sha": "31bfc9b9dd65ecddff3afa690906d94ef7b773da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiZmM5YjlkZDY1ZWNkZGZmM2FmYTY5MDkwNmQ5NGVmN2I3NzNkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-12-21T19:39:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-12-21T19:39:04Z"}, "message": "Implement P0522R0, matching of template template arguments.\n\ngcc/c-family/\n\t* c.opt (-fnew-ttp-matching): New flag.\n\t* c-opts.c (c_common_post_options): Default on if -std=c++1z.\ngcc/cp/\n\t* pt.c (coerce_template_template_parms): Allow a template argument\n\tthat's less specialized than the parameter.\n\t(unify_bound_ttp_args): Adjust parm's args to apply to arg's\n\ttemplate.\n\t(coerce_template_args_for_ttp): Split out from\n\tlookup_template_class_1.\n\t(coerce_ttp_args_for_tta, store_defaulted_ttp)\n\t(lookup_defaulted_ttp, add_defaults_to_ttp): New.\n\t(process_partial_specialization): Set DECL_CONTEXT of\n\ttemplate template-parameters.\n\t(coerce_template_parms): Only inform when complain.\n\t(expand_template_argument_pack): Handle error_mark_node.\n\t(convert_template_argument, template_args_equal, unify): Handle\n\tany_targ_node.\n\t* cp-tree.h (enum cp_tree_index): Add CPTI_ANY_TARG.\n\t(any_targ_node): New.\n\t* decl.c (cxx_init_decl_processing): Set it.\n\t* name-lookup.c (consider_binding_level): Ignore names with embedded\n\tspaces.\n\nFrom-SVN: r243871", "tree": {"sha": "6a4c3f49466411d75b33e5d43dd222039ad777dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a4c3f49466411d75b33e5d43dd222039ad777dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31bfc9b9dd65ecddff3afa690906d94ef7b773da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bfc9b9dd65ecddff3afa690906d94ef7b773da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31bfc9b9dd65ecddff3afa690906d94ef7b773da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bfc9b9dd65ecddff3afa690906d94ef7b773da/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5"}], "stats": {"total": 476, "additions": 417, "deletions": 59}, "files": [{"sha": "13ba2f314a94aea915212edc1e67500e48ff3474", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,3 +1,8 @@\n+2016-12-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt (-fnew-ttp-matching): New flag.\n+\t* c-opts.c (c_common_post_options): Default on if -std=c++1z.\n+\n 2016-12-14  Martin Jambor  <mjambor@suse.cz>\n \n \t* c-omp.c: Include omp-general.h instead of omp-low.h."}, {"sha": "62d2f46f926063527273e4744981c59534e7a72f", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -920,6 +920,10 @@ c_common_post_options (const char **pfilename)\n   if (!global_options_set.x_flag_new_inheriting_ctors)\n     flag_new_inheriting_ctors = abi_version_at_least (11);\n \n+  /* For GCC 7, only enable DR150 resolution by default if -std=c++1z.  */\n+  if (!global_options_set.x_flag_new_ttp)\n+    flag_new_ttp = (cxx_dialect >= cxx1z);\n+\n   if (cxx_dialect >= cxx11)\n     {\n       /* If we're allowing C++0x constructs, don't warn about C++98"}, {"sha": "a5333a35e4149e64e89ad03939ed25b6b37ec306", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1443,6 +1443,10 @@ C++ ObjC++ Joined Ignore Warn(switch %qs is no longer supported)\n fnew-abi\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n+fnew-ttp-matching\n+C++ ObjC++ Var(flag_new_ttp)\n+Implement resolution of DR 150 for matching of template template arguments.\n+\n fnext-runtime\n ObjC ObjC++ LTO Report RejectNegative Var(flag_next_runtime)\n Generate code for NeXT (Apple Mac OS X) runtime environment."}, {"sha": "db3582af2bccb48253800a84d3680ad8d409cfe1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,5 +1,26 @@\n 2016-12-21  Jason Merrill  <jason@redhat.com>\n \n+\tImplement P0522R0, matching of template template arguments.\n+\t* pt.c (coerce_template_template_parms): Allow a template argument\n+\tthat's less specialized than the parameter.\n+\t(unify_bound_ttp_args): Adjust parm's args to apply to arg's\n+\ttemplate.\n+\t(coerce_template_args_for_ttp): Split out from\n+\tlookup_template_class_1.\n+\t(coerce_ttp_args_for_tta, store_defaulted_ttp)\n+\t(lookup_defaulted_ttp, add_defaults_to_ttp): New.\n+\t(process_partial_specialization): Set DECL_CONTEXT of\n+\ttemplate template-parameters.\n+\t(coerce_template_parms): Only inform when complain.\n+\t(expand_template_argument_pack): Handle error_mark_node.\n+\t(convert_template_argument, template_args_equal, unify): Handle\n+\tany_targ_node.\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_ANY_TARG.\n+\t(any_targ_node): New.\n+\t* decl.c (cxx_init_decl_processing): Set it.\n+\t* name-lookup.c (consider_binding_level): Ignore names with embedded\n+\tspaces.\n+\n \tPR c++/42329\n \t* pt.c (unify_bound_ttp_args): Split out from unify.\n \t(try_class_unification): Handle BOUND_TEMPLATE_TEMPLATE_PARM."}, {"sha": "ef6265e9b4e5e3e426d13eb84717ef662555a9a1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1140,6 +1140,8 @@ enum cp_tree_index\n \n     CPTI_ALIGN_TYPE,\n \n+    CPTI_ANY_TARG,\n+\n     CPTI_MAX\n };\n \n@@ -1245,6 +1247,9 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n \n #define keyed_classes\t\t\tcp_global_trees[CPTI_KEYED_CLASSES]\n \n+/* A node which matches any template argument.  */\n+#define any_targ_node\t\t\tcp_global_trees[CPTI_ANY_TARG]\n+\n /* Node to indicate default access. This must be distinct from the\n    access nodes in tree.h.  */\n "}, {"sha": "e70b34c9a179cc37186964289fb830f4002aa327", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -4161,6 +4161,9 @@ cxx_init_decl_processing (void)\n   global_type_node = make_node (LANG_TYPE);\n   record_unknown_type (global_type_node, \"global type\");\n \n+  any_targ_node = make_node (LANG_TYPE);\n+  record_unknown_type (any_targ_node, \"any type\");\n+\n   /* Now, C++.  */\n   current_lang_name = lang_name_cplusplus;\n "}, {"sha": "a0cadb8d6e74592d1f960a7c4746cfe11fc56c96", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -4758,8 +4758,10 @@ consider_binding_level (tree name, best_match <tree, tree> &bm,\n \t  && DECL_ANTICIPATED (d))\n \tcontinue;\n \n-      if (DECL_NAME (d))\n-\tbm.consider (DECL_NAME (d));\n+      if (tree name = DECL_NAME (d))\n+\t/* Ignore internal names with spaces in them.  */\n+\tif (!strchr (IDENTIFIER_POINTER (name), ' '))\n+\t  bm.consider (DECL_NAME (d));\n     }\n }\n "}, {"sha": "301eb5271bae5779c2e870191b4992f625a06206", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 238, "deletions": 54, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -3836,6 +3836,9 @@ check_for_bare_parameter_packs (tree t)\n tree\n expand_template_argument_pack (tree args)\n {\n+  if (args == error_mark_node)\n+    return error_mark_node;\n+\n   tree result_args = NULL_TREE;\n   int in_arg, out_arg = 0, nargs = args ? TREE_VEC_LENGTH (args) : 0;\n   int num_result_args = -1;\n@@ -4758,6 +4761,15 @@ process_partial_specialization (tree decl)\n   DECL_TEMPLATE_INFO (tmpl) = build_template_info (maintmpl, specargs);\n   DECL_PRIMARY_TEMPLATE (tmpl) = maintmpl;\n \n+  /* Give template template parms a DECL_CONTEXT of the template\n+     for which they are a parameter.  */\n+  for (i = 0; i < ntparms; ++i)\n+    {\n+      tree parm = TREE_VALUE (TREE_VEC_ELT (inner_parms, i));\n+      if (TREE_CODE (parm) == TEMPLATE_DECL)\n+\tDECL_CONTEXT (parm) = tmpl;\n+    }\n+\n   if (VAR_P (decl))\n     /* We didn't register this in check_explicit_specialization so we could\n        wait until the constraints were set.  */\n@@ -6863,11 +6875,164 @@ coerce_template_template_parm (tree parm,\n   return 1;\n }\n \n+/* Coerce template argument list ARGLIST for use with template\n+   template-parameter TEMPL.  */\n+\n+static tree\n+coerce_template_args_for_ttp (tree templ, tree arglist,\n+\t\t\t      tsubst_flags_t complain)\n+{\n+  /* Consider an example where a template template parameter declared as\n+\n+     template <class T, class U = std::allocator<T> > class TT\n+\n+     The template parameter level of T and U are one level larger than\n+     of TT.  To proper process the default argument of U, say when an\n+     instantiation `TT<int>' is seen, we need to build the full\n+     arguments containing {int} as the innermost level.  Outer levels,\n+     available when not appearing as default template argument, can be\n+     obtained from the arguments of the enclosing template.\n+\n+     Suppose that TT is later substituted with std::vector.  The above\n+     instantiation is `TT<int, std::allocator<T> >' with TT at\n+     level 1, and T at level 2, while the template arguments at level 1\n+     becomes {std::vector} and the inner level 2 is {int}.  */\n+\n+  tree outer = DECL_CONTEXT (templ);\n+  if (outer)\n+    {\n+      if (DECL_TEMPLATE_SPECIALIZATION (outer))\n+\t/* We want arguments for the partial specialization, not arguments for\n+\t   the primary template.  */\n+\touter = template_parms_to_args (DECL_TEMPLATE_PARMS (outer));\n+      else\n+\touter = TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (outer)));\n+    }\n+  else if (current_template_parms)\n+    {\n+      /* This is an argument of the current template, so we haven't set\n+\t DECL_CONTEXT yet.  */\n+      tree relevant_template_parms;\n+\n+      /* Parameter levels that are greater than the level of the given\n+\t template template parm are irrelevant.  */\n+      relevant_template_parms = current_template_parms;\n+      while (TMPL_PARMS_DEPTH (relevant_template_parms)\n+\t     != TEMPLATE_TYPE_LEVEL (TREE_TYPE (templ)))\n+\trelevant_template_parms = TREE_CHAIN (relevant_template_parms);\n+\n+      outer = template_parms_to_args (relevant_template_parms);\n+    }\n+\n+  if (outer)\n+    arglist = add_to_template_args (outer, arglist);\n+\n+  tree parmlist = DECL_INNERMOST_TEMPLATE_PARMS (templ);\n+  return coerce_template_parms (parmlist, arglist, templ,\n+\t\t\t\tcomplain,\n+\t\t\t\t/*require_all_args=*/true,\n+\t\t\t\t/*use_default_args=*/true);\n+}\n+\n+/* A cache of template template parameters with match-all default\n+   arguments.  */\n+static GTY((deletable)) hash_map<tree,tree> *defaulted_ttp_cache;\n+static void\n+store_defaulted_ttp (tree v, tree t)\n+{\n+  if (!defaulted_ttp_cache)\n+    defaulted_ttp_cache = hash_map<tree,tree>::create_ggc (13);\n+  defaulted_ttp_cache->put (v, t);\n+}\n+static tree\n+lookup_defaulted_ttp (tree v)\n+{\n+  if (defaulted_ttp_cache)\n+    if (tree *p = defaulted_ttp_cache->get (v))\n+      return *p;\n+  return NULL_TREE;\n+}\n+\n+/* T is a bound template template-parameter.  Copy its arguments into default\n+   arguments of the template template-parameter's template parameters.  */\n+\n+static tree\n+add_defaults_to_ttp (tree otmpl)\n+{\n+  if (tree c = lookup_defaulted_ttp (otmpl))\n+    return c;\n+\n+  tree ntmpl = copy_node (otmpl);\n+\n+  tree ntype = copy_node (TREE_TYPE (otmpl));\n+  TYPE_STUB_DECL (ntype) = TYPE_NAME (ntype) = ntmpl;\n+  TYPE_MAIN_VARIANT (ntype) = ntype;\n+  TYPE_POINTER_TO (ntype) = TYPE_REFERENCE_TO (ntype) = NULL_TREE;\n+  TYPE_NAME (ntype) = ntmpl;\n+  SET_TYPE_STRUCTURAL_EQUALITY (ntype);\n+\n+  tree idx = TEMPLATE_TYPE_PARM_INDEX (ntype)\n+    = copy_node (TEMPLATE_TYPE_PARM_INDEX (ntype));\n+  TEMPLATE_PARM_DECL (idx) = ntmpl;\n+  TREE_TYPE (ntmpl) = TREE_TYPE (idx) = ntype;\n+\n+  tree oparms = DECL_TEMPLATE_PARMS (otmpl);\n+  tree parms = DECL_TEMPLATE_PARMS (ntmpl) = copy_node (oparms);\n+  TREE_CHAIN (parms) = TREE_CHAIN (oparms);\n+  tree vec = TREE_VALUE (parms) = copy_node (TREE_VALUE (parms));\n+  for (int i = 0; i < TREE_VEC_LENGTH (vec); ++i)\n+    {\n+      tree o = TREE_VEC_ELT (vec, i);\n+      if (!template_parameter_pack_p (TREE_VALUE (o)))\n+\t{\n+\t  tree n = TREE_VEC_ELT (vec, i) = copy_node (o);\n+\t  TREE_PURPOSE (n) = any_targ_node;\n+\t}\n+    }\n+\n+  store_defaulted_ttp (otmpl, ntmpl);\n+  return ntmpl;\n+}\n+\n+/* ARG is a bound potential template template-argument, and PARGS is a list\n+   of arguments for the corresponding template template-parameter.  Adjust\n+   PARGS as appropriate for application to ARG's template, and if ARG is a\n+   BOUND_TEMPLATE_TEMPLATE_PARM, possibly adjust it to add default template\n+   arguments to the template template parameter.  */\n+\n+static tree\n+coerce_ttp_args_for_tta (tree& arg, tree pargs, tsubst_flags_t complain)\n+{\n+  ++processing_template_decl;\n+  tree arg_tmpl = TYPE_TI_TEMPLATE (arg);\n+  if (DECL_TEMPLATE_TEMPLATE_PARM_P (arg_tmpl))\n+    {\n+      /* When comparing two template template-parameters in partial ordering,\n+\t rewrite the one currently being used as an argument to have default\n+\t arguments for all parameters.  */\n+      arg_tmpl = add_defaults_to_ttp (arg_tmpl);\n+      pargs = coerce_template_args_for_ttp (arg_tmpl, pargs, complain);\n+      if (pargs != error_mark_node)\n+\targ = bind_template_template_parm (TREE_TYPE (arg_tmpl),\n+\t\t\t\t\t   TYPE_TI_ARGS (arg));\n+    }\n+  else\n+    {\n+      tree aparms\n+\t= INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (arg_tmpl));\n+      pargs = coerce_template_parms (aparms, pargs, arg_tmpl, complain,\n+\t\t\t\t       /*require_all*/true,\n+\t\t\t\t       /*use_default*/true);\n+    }\n+  --processing_template_decl;\n+  return pargs;\n+}\n+\n /* Subroutine of unify for the case when PARM is a\n    BOUND_TEMPLATE_TEMPLATE_PARM.  */\n \n static int\n-unify_bound_ttp_args (tree tparms, tree targs, tree parm, tree arg,\n+unify_bound_ttp_args (tree tparms, tree targs, tree parm, tree& arg,\n \t\t      bool explain_p)\n {\n   tree parmvec = TYPE_TI_ARGS (parm);\n@@ -6878,10 +7043,27 @@ unify_bound_ttp_args (tree tparms, tree targs, tree parm, tree arg,\n   parmvec = expand_template_argument_pack (parmvec);\n   argvec = expand_template_argument_pack (argvec);\n \n-  if (unify (tparms, targs, parmvec, argvec,\n+  tree nparmvec = parmvec;\n+  if (flag_new_ttp)\n+    {\n+      /* In keeping with P0522R0, adjust P's template arguments\n+\t to apply to A's template; then flatten it again.  */\n+      nparmvec = coerce_ttp_args_for_tta (arg, parmvec, tf_none);\n+      nparmvec = expand_template_argument_pack (nparmvec);\n+    }\n+\n+  if (unify (tparms, targs, nparmvec, argvec,\n \t     UNIFY_ALLOW_NONE, explain_p))\n     return 1;\n \n+  /* If the P0522 adjustment eliminated a pack expansion, deduce\n+     empty packs.  */\n+  if (flag_new_ttp\n+      && TREE_VEC_LENGTH (nparmvec) < TREE_VEC_LENGTH (parmvec)\n+      && unify_pack_expansion (tparms, targs, parmvec, argvec,\n+\t\t\t       DEDUCE_EXACT, /*sub*/true, explain_p))\n+    return 1;\n+\n   return 0;\n }\n \n@@ -6914,6 +7096,48 @@ coerce_template_template_parms (tree parm_parms,\n   nparms = TREE_VEC_LENGTH (parm_parms);\n   nargs = TREE_VEC_LENGTH (arg_parms);\n \n+  if (flag_new_ttp)\n+    {\n+      /* P0522R0: A template template-parameter P is at least as specialized as\n+\t a template template-argument A if, given the following rewrite to two\n+\t function templates, the function template corresponding to P is at\n+\t least as specialized as the function template corresponding to A\n+\t according to the partial ordering rules for function templates\n+\t ([temp.func.order]). Given an invented class template X with the\n+\t template parameter list of A (including default arguments):\n+\n+\t * Each of the two function templates has the same template parameters,\n+\t respectively, as P or A.\n+\n+\t * Each function template has a single function parameter whose type is\n+\t a specialization of X with template arguments corresponding to the\n+\t template parameters from the respective function template where, for\n+\t each template parameter PP in the template parameter list of the\n+\t function template, a corresponding template argument AA is formed. If\n+\t PP declares a parameter pack, then AA is the pack expansion\n+\t PP... ([temp.variadic]); otherwise, AA is the id-expression PP.\n+\n+\t If the rewrite produces an invalid type, then P is not at least as\n+\t specialized as A.  */\n+\n+      /* So coerce P's args to apply to A's parms, and then deduce between A's\n+\t args and the converted args.  If that succeeds, A is at least as\n+\t specialized as P, so they match.*/\n+      tree pargs = template_parms_level_to_args (parm_parms);\n+      ++processing_template_decl;\n+      pargs = coerce_template_parms (arg_parms, pargs, NULL_TREE, tf_none,\n+\t\t\t\t     /*require_all*/true, /*use_default*/true);\n+      --processing_template_decl;\n+      if (pargs != error_mark_node)\n+\t{\n+\t  tree targs = make_tree_vec (nargs);\n+\t  tree aargs = template_parms_level_to_args (arg_parms);\n+\t  if (!unify (arg_parms, targs, aargs, pargs, UNIFY_ALLOW_NONE,\n+\t\t      /*explain*/false))\n+\t    return 1;\n+\t}\n+    }\n+\n   /* Determine whether we have a parameter pack at the end of the\n      template template parameter's template parameter list.  */\n   if (TREE_VEC_ELT (parm_parms, nparms - 1) != error_mark_node)\n@@ -7172,6 +7396,9 @@ convert_template_argument (tree parm,\n   if (TREE_CODE (arg) == WILDCARD_DECL)\n     return convert_wildcard_argument (parm, arg);\n \n+  if (arg == any_targ_node)\n+    return arg;\n+\n   if (TREE_CODE (arg) == TREE_LIST\n       && TREE_CODE (TREE_VALUE (arg)) == OFFSET_REF)\n     {\n@@ -7822,8 +8049,9 @@ coerce_template_parms (tree parms,\n \t\t\t\t\t\t     in_decl);\n \t      if (conv == error_mark_node)\n \t\t{\n-\t\t  inform (input_location, \"so any instantiation with a \"\n-\t\t\t \"non-empty parameter pack would be ill-formed\");\n+\t\t  if (complain & tf_error)\n+\t\t    inform (input_location, \"so any instantiation with a \"\n+\t\t\t    \"non-empty parameter pack would be ill-formed\");\n \t\t  ++lost;\n \t\t}\n \t      else if (TYPE_P (conv) && !TYPE_P (pattern))\n@@ -7987,6 +8215,8 @@ template_args_equal (tree ot, tree nt)\n     return 1;\n   if (nt == NULL_TREE || ot == NULL_TREE)\n     return false;\n+  if (nt == any_targ_node || ot == any_targ_node)\n+    return true;\n \n   if (TREE_CODE (nt) == TREE_VEC)\n     /* For member templates */\n@@ -8328,57 +8558,8 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \n   if (DECL_TEMPLATE_TEMPLATE_PARM_P (templ))\n     {\n-      /* Create a new TEMPLATE_DECL and TEMPLATE_TEMPLATE_PARM node to store\n-\t template arguments */\n-\n       tree parm;\n-      tree arglist2;\n-      tree outer;\n-\n-      parmlist = DECL_INNERMOST_TEMPLATE_PARMS (templ);\n-\n-      /* Consider an example where a template template parameter declared as\n-\n-\t   template <class T, class U = std::allocator<T> > class TT\n-\n-\t The template parameter level of T and U are one level larger than\n-\t of TT.  To proper process the default argument of U, say when an\n-\t instantiation `TT<int>' is seen, we need to build the full\n-\t arguments containing {int} as the innermost level.  Outer levels,\n-\t available when not appearing as default template argument, can be\n-\t obtained from the arguments of the enclosing template.\n-\n-\t Suppose that TT is later substituted with std::vector.  The above\n-\t instantiation is `TT<int, std::allocator<T> >' with TT at\n-\t level 1, and T at level 2, while the template arguments at level 1\n-\t becomes {std::vector} and the inner level 2 is {int}.  */\n-\n-      outer = DECL_CONTEXT (templ);\n-      if (outer)\n-\touter = TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (outer)));\n-      else if (current_template_parms)\n-\t{\n-\t  /* This is an argument of the current template, so we haven't set\n-\t     DECL_CONTEXT yet.  */\n-\t  tree relevant_template_parms;\n-\n-\t  /* Parameter levels that are greater than the level of the given\n-\t     template template parm are irrelevant.  */\n-\t  relevant_template_parms = current_template_parms;\n-\t  while (TMPL_PARMS_DEPTH (relevant_template_parms)\n-\t\t != TEMPLATE_TYPE_LEVEL (TREE_TYPE (templ)))\n-\t    relevant_template_parms = TREE_CHAIN (relevant_template_parms);\n-\n-\t  outer = template_parms_to_args (relevant_template_parms);\n-\t}\n-\n-      if (outer)\n-\targlist = add_to_template_args (outer, arglist);\n-\n-      arglist2 = coerce_template_parms (parmlist, arglist, templ,\n-\t\t\t\t\tcomplain,\n-\t\t\t\t\t/*require_all_args=*/true,\n-\t\t\t\t\t/*use_default_args=*/true);\n+      tree arglist2 = coerce_template_args_for_ttp (templ, arglist, complain);\n       if (arglist2 == error_mark_node\n \t  || (!uses_template_parms (arglist2)\n \t      && check_instantiated_args (templ, arglist2, complain)))\n@@ -19950,6 +20131,9 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n        template args from other function args.  */\n     return unify_success (explain_p);\n \n+  if (parm == any_targ_node || arg == any_targ_node)\n+    return unify_success (explain_p);\n+\n   /* If PARM uses template parameters, then we can't bail out here,\n      even if ARG == PARM, since we won't record unifications for the\n      template parameters.  We might need them if we're trying to"}, {"sha": "1096254085fa08900b56c316f6105a4f9c786401", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -201,6 +201,7 @@ in the following sections.\n -fno-implicit-inline-templates @gol\n -fno-implement-inlines  -fms-extensions @gol\n -fnew-inheriting-ctors @gol\n+-fnew-ttp-matching @gol\n -fno-nonansi-builtins  -fnothrow-opt  -fno-operator-names @gol\n -fno-optional-diags  -fpermissive @gol\n -fno-pretty-templates @gol\n@@ -2455,6 +2456,14 @@ inheritance.  This is part of C++17 but also considered to be a Defect\n Report against C++11 and C++14.  This flag is enabled by default\n unless @option{-fabi-version=10} or lower is specified.\n \n+@item -fnew-ttp-matching\n+@opindex fnew-ttp-matching\n+Enable the P0522 resolution to Core issue 150, template template\n+parameters and default arguments: this allows a template with default\n+template arguments as an argument for a template template parameter\n+with fewer template parameters.  This flag is enabled by default for\n+@option{-std=c++1z}.\n+\n @item -fno-nonansi-builtins\n @opindex fno-nonansi-builtins\n Disable built-in declarations of functions that are not mandated by"}, {"sha": "5ec05cd426412abf0e80e345fbf3f6b79f8556f7", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile { target c++11 } }\n-\n+// { dg-options -fno-new-ttp-matching }\n template<class T> class A { /* ... */ };\n template<class T, class U = T> class B { /* ... */ };\n template<class... Types> class C { /* ... */ };"}, {"sha": "8887033e722824ab6a192505462e18f4c00e1976", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex14a.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex14a.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,24 @@\n+// CWG 150: Matching of template template-arguments excludes compatible\n+// templates\n+// { dg-options -fnew-ttp-matching }\n+\n+template<class T> class A { /* ... */ };\n+template<class T, class U = T> class B { /* ... */ };\n+template<template<class> class P> class X { /* ... */ };\n+X<A> xa; // OK\n+X<B> xb; // OK since P0522R0\n+\n+#if __cpp_variadic_templates\n+template <class ... Types> class C { /* ... */ };\n+template<template<class ...> class Q> class Y { /* ... */ };\n+X<C> xc; // OK since P0522R0\n+Y<A> ya; // OK\n+Y<B> yb; // OK\n+Y<C> yc; // OK\n+#endif\n+\n+#if __cpp_template_auto\n+template<auto n> class D { /* ... */ };\n+template<template<int> class R> class Z { /* ... */ };\n+Z<D> zd; // OK\n+#endif"}, {"sha": "72cff3874cb4e616da3921ddde35e2d5b67d5dc7", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ttp4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp4.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++11 } }\n+\n+template<typename _Tp>\n+struct get_first_arg;\n+\n+template<template<typename, typename...> class _Template, typename _Tp,\n+\t typename... _Types>\n+struct get_first_arg<_Template<_Tp, _Types...>>\n+{ using type = _Tp; };\n+\n+template<typename T> struct A { };\n+\n+template<class,class> struct same;\n+template<class T> struct same<T,T> {};\n+\n+same<get_first_arg<A<int>>::type,\n+     int> x;"}, {"sha": "43f951a028620a64e949308e7cf4765adb73ef10", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ttp5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp5.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <typename, typename> struct A { };\n+template <typename T> struct B { };\n+\n+template <typename T, template <T...> class C, T... Is>\n+struct A<B<T>, C<Is...>>\n+{\n+  using type = C<Is...>;\n+};"}, {"sha": "ed5e0284d2316aec8c9117cb2b73b9f0eb25b24a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic79.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,5 +1,6 @@\n // PR c++/33213\n // { dg-do compile { target c++11 } }\n+// { dg-options -fno-new-ttp-matching }\n \n template<template<typename> class...> struct A;\n "}, {"sha": "67376cc4f233b1014dc0302e1a9d67a99b30ca67", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic79a.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic79a.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/33213\n+// { dg-do compile { target c++11 } }\n+// { dg-options -fnew-ttp-matching }\n+\n+template<template<typename> class...> struct A;\n+\n+template<template<typename...> class... B> struct A<B...> {};"}, {"sha": "c1d6ab9092c8dd58ad169fa094b47f2fd1cc85e2", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic85.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,5 +1,6 @@\n // PR c++/32565\n // { dg-do compile { target c++11 } }\n+// { dg-options -fno-new-ttp-matching }\n \n template<typename...> struct A1;\n template<template<int, int...> class T> struct A1<T<0, 1> > {};"}, {"sha": "b3cfeee968a66fd3fc73ca022c9d13b1e834a5e9", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic85a.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic85a.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/32565\n+// { dg-do compile { target c++11 } }\n+// { dg-options -fnew-ttp-matching }\n+\n+template<typename...> struct A1;\n+template<template<int, int...> class T> struct A1<T<0, 1> > {};\n+template<int, int, int...> struct B1 {};\n+A1<B1<0, 1> > a1;\n+template<int...> struct B2 {};\n+A1<B2<0, 1> > a2;"}, {"sha": "7577b5e328079e699085864a7da6a992a040168d", "filename": "gcc/testsuite/g++.dg/cpp1z/ttp1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fttp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fttp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fttp1.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,19 @@\n+// CWG 150: Matching of template template-arguments excludes compatible\n+// templates\n+\n+// { dg-options -fnew-ttp-matching }\n+\n+template<class T, class U = T> class B { /* ... */ };\n+#if __cpp_variadic_templates\n+template <class ... Types> class C { /* ... */ };\n+#endif\n+template<template<class> class P, class T> void f(P<T>);\n+\n+int main()\n+{\n+  f(B<int>());\n+  f(B<int,float>());\t\t// { dg-error \"no match\" }\n+#if __cpp_variadic_templates\n+  f(C<int>());\n+#endif\n+}"}, {"sha": "510ef6529654e1d64ea4ccaa2f9a743174955bc6", "filename": "gcc/testsuite/g++.dg/template/ttp16.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -fno-new-ttp-matching }\n+\n template <template <typename> class C>\n void f() {}\n "}, {"sha": "0ecada17c00aed630fe1d7bf513dbf8689c4678e", "filename": "gcc/testsuite/g++.dg/template/ttp16a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp16a.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options -fnew-ttp-matching }\n+\n+template <template <typename> class C>\n+void f() {}\n+\n+template <typename T, typename U = int>\n+struct S {};\n+\n+template void f<S>();"}, {"sha": "cc9bc6ed46fe57b00bc3016281b895347ff54fd3", "filename": "gcc/testsuite/g++.dg/template/ttp17.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -fno-new-ttp-matching }\n+\n template <template <typename> class C>\n void f(C<double>) {}\n "}, {"sha": "3bd0b0c42df946420acdb03d62c78109d3d76923", "filename": "gcc/testsuite/g++.dg/template/ttp17a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp17a.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options -fnew-ttp-matching }\n+\n+template <template <typename> class C>\n+void f(C<double>) {}\n+\n+template <typename T, typename U = int>\n+struct S {};\n+\n+template void f(S<double>);"}, {"sha": "9522e2f841989c91501b15592d2a4db0837e10e6", "filename": "gcc/testsuite/g++.dg/torture/pr68220.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68220.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68220.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr68220.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,3 +1,4 @@\n+// { dg-options -fno-new-ttp-matching }\n // { dg-do compile }\n namespace mpl {\n template <typename, typename = int> struct lambda;"}, {"sha": "c60a16064c4ff8cbe0f3489f320bb8a09b24df6a", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp49.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp49.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble  }\n+// { dg-options -fno-new-ttp-matching }\n \n template <int i> class C {};\n template <template <long> class TT> class D {};"}, {"sha": "88a1c5033118b857bb94bc54337bf14949e35f89", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp49a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp49a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp49a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp49a.C?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options -fnew-ttp-matching }\n+\n+template <int i> class C {};\n+template <template <long> class TT> class D {};\n+\n+int main()\n+{\n+  D<C> d;\n+}"}, {"sha": "793be154ac033edf37d1ac59653f2d369cbddbac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfc9b9dd65ecddff3afa690906d94ef7b773da/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfc9b9dd65ecddff3afa690906d94ef7b773da/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=31bfc9b9dd65ecddff3afa690906d94ef7b773da", "patch": "@@ -1,4 +1,4 @@\n-2016-12-16  Jason Merrill  <jason@redhat.com>\n+2016-12-21  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/util/testsuite_tr1.h (test_property): Don't define both\n \tvariadic and non-variadic overloads."}]}