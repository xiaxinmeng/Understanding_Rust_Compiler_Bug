{"sha": "3da557ec145823c3f51ff3fa7c619d0064134800", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RhNTU3ZWMxNDU4MjNjM2Y1MWZmM2ZhN2M2MTlkMDA2NDEzNDgwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-17T02:27:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-17T02:27:59Z"}, "message": "PR c++/81102 - Wrong error with partial specialization.\n\n\t* pt.c (unify) [TEMPLATE_PARM_INDEX]: Strip reference when comparing\n\ttypes.  Do type deduction later.\n\nFrom-SVN: r249320", "tree": {"sha": "a47647c0daf7d0a6e9c7479a928f0e1cfcfb75e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a47647c0daf7d0a6e9c7479a928f0e1cfcfb75e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3da557ec145823c3f51ff3fa7c619d0064134800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da557ec145823c3f51ff3fa7c619d0064134800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3da557ec145823c3f51ff3fa7c619d0064134800", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3da557ec145823c3f51ff3fa7c619d0064134800/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "157420b4bd936f18b64d8143a6b3f32f89689412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157420b4bd936f18b64d8143a6b3f32f89689412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157420b4bd936f18b64d8143a6b3f32f89689412"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "2d47d7b4a7f4a0b5dd67bb7f84bba0d685c4c16a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3da557ec145823c3f51ff3fa7c619d0064134800", "patch": "@@ -1,5 +1,9 @@\n 2017-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/81102 - Wrong error with partial specialization.\n+\t* pt.c (unify) [TEMPLATE_PARM_INDEX]: Strip reference when comparing\n+\ttypes.  Do type deduction later.\n+\n \tPR c++/80174 - ICE with partial specialization of member template.\n \tPR c++/71747\n \t* pt.c (get_partial_spec_bindings): Only coerce innermost args."}, {"sha": "d2b91b2435642883b177c746d5dc575a51d7686b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3da557ec145823c3f51ff3fa7c619d0064134800", "patch": "@@ -20628,18 +20628,6 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t  return x;\n \t}\n \n-      if (cxx_dialect >= cxx1z\n-\t  /* We deduce from array bounds in try_array_deduction.  */\n-\t  && !(strict & UNIFY_ALLOW_INTEGER)\n-\t  && uses_template_parms (TREE_TYPE (parm))\n-\t  && !type_uses_auto (TREE_TYPE (parm)))\n-\t{\n-\t  tree atype = TREE_TYPE (arg);\n-\t  RECUR_AND_CHECK_FAILURE (tparms, targs,\n-\t\t\t\t   TREE_TYPE (parm), atype,\n-\t\t\t\t   UNIFY_ALLOW_NONE, explain_p);\n-\t}\n-\n       /* [temp.deduct.type] If, in the declaration of a function template\n \t with a non-type template-parameter, the non-type\n \t template-parameter is used in an expression in the function\n@@ -20660,7 +20648,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t/* Template-parameter dependent expression.  Just accept it for now.\n \t   It will later be processed in convert_template_argument.  */\n \t;\n-      else if (same_type_p (TREE_TYPE (arg), tparm))\n+      else if (same_type_p (non_reference (TREE_TYPE (arg)),\n+\t\t\t    non_reference (tparm)))\n \t/* OK */;\n       else if ((strict & UNIFY_ALLOW_INTEGER)\n \t       && CP_INTEGRAL_TYPE_P (tparm))\n@@ -20669,9 +20658,22 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t   corresponding parameter.  */\n \targ = fold (build_nop (tparm, arg));\n       else if (uses_template_parms (tparm))\n-\t/* We haven't deduced the type of this parameter yet.  Try again\n-\t   later.  */\n-\treturn unify_success (explain_p);\n+\t{\n+\t  /* We haven't deduced the type of this parameter yet.  */\n+\t  if (cxx_dialect >= cxx1z\n+\t      /* We deduce from array bounds in try_array_deduction.  */\n+\t      && !(strict & UNIFY_ALLOW_INTEGER))\n+\t    {\n+\t      /* Deduce it from the non-type argument.  */\n+\t      tree atype = TREE_TYPE (arg);\n+\t      RECUR_AND_CHECK_FAILURE (tparms, targs,\n+\t\t\t\t       tparm, atype,\n+\t\t\t\t       UNIFY_ALLOW_NONE, explain_p);\n+\t    }\n+\t  else\n+\t    /* Try again later.  */\n+\t    return unify_success (explain_p);\n+\t}\n       else\n \treturn unify_type_mismatch (explain_p, tparm, TREE_TYPE (arg));\n "}, {"sha": "aa42191e178db0c1888ac12e9e83971c6d2fb5a9", "filename": "gcc/testsuite/g++.dg/template/partial-specialization7.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial-specialization7.C?ref=3da557ec145823c3f51ff3fa7c619d0064134800", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/81102\n+\n+template <typename FuncSig, FuncSig f>\n+struct HelperWrapper;\n+\n+// [...]\n+\n+template <typename Ret, Ret (&Func)()>\n+struct HelperWrapper<Ret (&)(), Func>\n+{\n+    static inline int WrapFuncT(const int)\n+    {\n+        return 0; // Changed\n+    }\n+};\n+\n+// Unary\n+template <typename Ret, typename Arg1, Ret (&Func)(Arg1)>\n+struct HelperWrapper<Ret (&)(Arg1), Func>\n+{\n+    static inline int WrapFuncT(const int)\n+    {\n+        return 1; // Changed\n+    }\n+};\n+\n+// Binary\n+template <typename Ret, typename Arg1, typename Arg2, Ret (&Func)(Arg1, Arg2)>\n+struct HelperWrapper<Ret (&)(Arg1, Arg2), Func>\n+{\n+    static inline int WrapFuncT(const int)\n+    {\n+        return 2; // Changed\n+    }\n+};\n+\n+int main()\n+{\n+  return 0;\n+}"}, {"sha": "ee45a936a0c88e647e41c8d7d9d54af385bed122", "filename": "gcc/testsuite/g++.dg/template/partial5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3da557ec145823c3f51ff3fa7c619d0064134800/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C?ref=3da557ec145823c3f51ff3fa7c619d0064134800", "patch": "@@ -14,7 +14,7 @@ template<typename T, typename T::foo V>\n struct Y { };\n \n template<typename T, typename U, U v>\n-struct Y<T, v> { }; // { dg-error \"\" }\n+struct Y<T, v> { }; // { dg-error \"\" \"\" { target { ! c++1z } } }\n \n \n template<typename T, T V>"}]}