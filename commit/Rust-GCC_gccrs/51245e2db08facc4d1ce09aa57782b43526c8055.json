{"sha": "51245e2db08facc4d1ce09aa57782b43526c8055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyNDVlMmRiMDhmYWNjNGQxY2UwOWFhNTc3ODJiNDM1MjZjODA1NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2013-10-17T13:54:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T13:54:29Z"}, "message": "sem_aux.ads, [...] (Is_Immutably_Limited_Type): Make predicate compatible with Ada 2012 definition\n\n2013-10-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aux.ads, sem_aux.adb (Is_Immutably_Limited_Type): Make\n\tpredicate compatible with Ada 2012 definition\n\t(Is_Limited_View): New name for previous version of\n\tIs_Immutably_Limited_Type.  Predicate is true for an untagged\n\trecord type with a limited component.\n\t* exp_ch7.adb, exp_ch6.adb, exp_ch4.adb, exp_ch3.adb, exp_aggr.adb,\n\tsem_util.adb, sem_res.adb, sem_prag.adb, sem_attr.adb, sem_ch8.adb,\n\tsem_ch6.adb, sem_ch3.adb, exp_util.adb: Use Is_Limited_View\n\t* freeze.adb Use Is_Immutably_Limited_Type to check the legality\n\tof references to the current instance, Is_Limited_View otherwise.\n\nFrom-SVN: r203762", "tree": {"sha": "0b88e4eff12d32b76d44fc67466e570f14688c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b88e4eff12d32b76d44fc67466e570f14688c6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51245e2db08facc4d1ce09aa57782b43526c8055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51245e2db08facc4d1ce09aa57782b43526c8055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51245e2db08facc4d1ce09aa57782b43526c8055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51245e2db08facc4d1ce09aa57782b43526c8055/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9072f0698d42b378d15906853349780d6564a76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9072f0698d42b378d15906853349780d6564a76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9072f0698d42b378d15906853349780d6564a76b"}], "stats": {"total": 157, "additions": 117, "deletions": 40}, "files": [{"sha": "0580bf2d97293903df1ea38172138dcef481b000", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -1,3 +1,16 @@\n+2013-10-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aux.ads, sem_aux.adb (Is_Immutably_Limited_Type): Make\n+\tpredicate compatible with Ada 2012 definition\n+\t(Is_Limited_View): New name for previous version of\n+\tIs_Immutably_Limited_Type.  Predicate is true for an untagged\n+\trecord type with a limited component.\n+\t* exp_ch7.adb, exp_ch6.adb, exp_ch4.adb, exp_ch3.adb, exp_aggr.adb,\n+\tsem_util.adb, sem_res.adb, sem_prag.adb, sem_attr.adb, sem_ch8.adb,\n+\tsem_ch6.adb, sem_ch3.adb, exp_util.adb: Use Is_Limited_View\n+\t* freeze.adb Use Is_Immutably_Limited_Type to check the legality\n+\tof references to the current instance, Is_Limited_View otherwise.\n+\n 2013-10-17  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Aspect_Specifications): Flag aspect"}, {"sha": "20a82b1d7f113b54f3c2cebb71e43785133be4cb", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -628,7 +628,7 @@ package body Exp_Aggr is\n       --  If component is limited, aggregate must be expanded because each\n       --  component assignment must be built in place.\n \n-      if Is_Immutably_Limited_Type (Component_Type (Typ)) then\n+      if Is_Limited_View (Component_Type (Typ)) then\n          return False;\n       end if;\n \n@@ -3347,7 +3347,7 @@ package body Exp_Aggr is\n          --  in place within the caller's scope).\n \n          or else\n-           (Is_Immutably_Limited_Type (Typ)\n+           (Is_Limited_View (Typ)\n              and then\n                (Nkind (Parent (Parent_Node)) = N_Extended_Return_Statement\n                  or else Nkind (Parent_Node) = N_Simple_Return_Statement))\n@@ -5668,7 +5668,7 @@ package body Exp_Aggr is\n       --  Extension aggregates, aggregates in extended return statements, and\n       --  aggregates for C++ imported types must be expanded.\n \n-      if Ada_Version >= Ada_2005 and then Is_Immutably_Limited_Type (Typ) then\n+      if Ada_Version >= Ada_2005 and then Is_Limited_View (Typ) then\n          if not Nkind_In (Parent (N), N_Object_Declaration,\n                                       N_Component_Association)\n          then"}, {"sha": "f1ab0c5e76557329b41d3ddd28b65ffb15ad0f43", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -1893,7 +1893,7 @@ package body Exp_Ch3 is\n \n          if Needs_Finalization (Typ)\n            and then not (Nkind_In (Kind, N_Aggregate, N_Extension_Aggregate))\n-           and then not Is_Immutably_Limited_Type (Typ)\n+           and then not Is_Limited_View (Typ)\n          then\n             Append_To (Res,\n               Make_Adjust_Call\n@@ -5310,7 +5310,7 @@ package body Exp_Ch3 is\n             --  creating the object (via allocator) and initializing it.\n \n             if Is_Return_Object (Def_Id)\n-              and then Is_Immutably_Limited_Type (Typ)\n+              and then Is_Limited_View (Typ)\n             then\n                null;\n \n@@ -5578,7 +5578,7 @@ package body Exp_Ch3 is\n             --  renaming declaration.\n \n             if Needs_Finalization (Typ)\n-              and then not Is_Immutably_Limited_Type (Typ)\n+              and then not Is_Limited_View (Typ)\n               and then not Rewrite_As_Renaming\n             then\n                Insert_Action_After (Init_After,"}, {"sha": "00da14726b1cdd9cafb37f819851d4d1eb9e0d0d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -1244,7 +1244,7 @@ package body Exp_Ch4 is\n             --  want to Adjust.\n \n             if not Aggr_In_Place\n-              and then not Is_Immutably_Limited_Type (T)\n+              and then not Is_Limited_View (T)\n             then\n                Insert_Action (N,\n "}, {"sha": "adc0987fc44bb3403fa1272767ad69d2b07d9d2c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -3947,7 +3947,7 @@ package body Exp_Ch6 is\n       --  result from the secondary stack.\n \n       if Needs_Finalization (Etype (Subp)) then\n-         if not Is_Immutably_Limited_Type (Etype (Subp))\n+         if not Is_Limited_View (Etype (Subp))\n            and then\n              (No (First_Formal (Subp))\n                 or else\n@@ -7100,7 +7100,7 @@ package body Exp_Ch6 is\n          then\n             null;\n \n-         elsif Is_Immutably_Limited_Type (Typ) then\n+         elsif Is_Limited_View (Typ) then\n             Set_Returns_By_Ref (Spec_Id);\n \n          elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n@@ -7702,7 +7702,7 @@ package body Exp_Ch6 is\n       --  the type of the expression may be.\n \n       if not Comes_From_Extended_Return_Statement (N)\n-        and then Is_Immutably_Limited_Type (Etype (Expression (N)))\n+        and then Is_Limited_View (Etype (Expression (N)))\n         and then Ada_Version >= Ada_2005\n         and then not Debug_Flag_Dot_L\n \n@@ -7781,7 +7781,7 @@ package body Exp_Ch6 is\n       --  type that requires special processing (indicated by the fact that\n       --  it requires a cleanup scope for the secondary stack case).\n \n-      if Is_Immutably_Limited_Type (Exptyp)\n+      if Is_Limited_View (Exptyp)\n         or else Is_Limited_Interface (Exptyp)\n       then\n          null;\n@@ -9572,7 +9572,7 @@ package body Exp_Ch6 is\n          --  may return objects of nonlimited descendants.\n \n          else\n-            return Is_Immutably_Limited_Type (Etype (E))\n+            return Is_Limited_View (Etype (E))\n               and then Ada_Version >= Ada_2005\n               and then not Debug_Flag_Dot_L;\n          end if;\n@@ -9813,7 +9813,7 @@ package body Exp_Ch6 is\n          Typ  : constant Entity_Id := Etype (Subp);\n          Utyp : constant Entity_Id := Underlying_Type (Typ);\n       begin\n-         if Is_Immutably_Limited_Type (Typ) then\n+         if Is_Limited_View (Typ) then\n             Set_Returns_By_Ref (Subp);\n          elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n             Set_Returns_By_Ref (Subp);"}, {"sha": "8449f6aba1fef372931741db3df2c239e8a92ea1", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -432,7 +432,7 @@ package body Exp_Ch7 is\n            Typ   => Typ,\n            Stmts => Make_Deep_Array_Body (Initialize_Case, Typ)));\n \n-      if not Is_Immutably_Limited_Type (Typ) then\n+      if not Is_Limited_View (Typ) then\n          Set_TSS (Typ,\n            Make_Deep_Proc\n              (Prim  => Adjust_Case,\n@@ -3227,7 +3227,7 @@ package body Exp_Ch7 is\n            Typ   => Typ,\n            Stmts => Make_Deep_Record_Body (Initialize_Case, Typ)));\n \n-      if not Is_Immutably_Limited_Type (Typ) then\n+      if not Is_Limited_View (Typ) then\n          Set_TSS (Typ,\n            Make_Deep_Proc\n              (Prim  => Adjust_Case,"}, {"sha": "2e0185ea7fab3f85fcb021ec8b999b9bd5f1de72", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -2227,7 +2227,7 @@ package body Exp_Util is\n       --  function being called is build-in-place. This will have to be revised\n       --  when build-in-place functions are generalized to other types.\n \n-      elsif Is_Immutably_Limited_Type (Exp_Typ)\n+      elsif Is_Limited_View (Exp_Typ)\n         and then\n          (Is_Class_Wide_Type (Exp_Typ)\n            or else Is_Interface (Exp_Typ)\n@@ -7081,7 +7081,7 @@ package body Exp_Util is\n \n          if Ada_Version >= Ada_2005\n            and then Nkind (Exp) = N_Function_Call\n-           and then Is_Immutably_Limited_Type (Etype (Exp))\n+           and then Is_Limited_View (Etype (Exp))\n            and then Nkind (Parent (Exp)) /= N_Object_Declaration\n          then\n             declare"}, {"sha": "a554eceaf3e28d2621f476e197222310a43290eb", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -4786,7 +4786,7 @@ package body Freeze is\n \n                if Has_Private_Declaration (E) then\n                   if (not Is_Record_Type (E)\n-                       or else not Is_Immutably_Limited_Type (E))\n+                       or else not Is_Limited_View (E))\n                     and then not Is_Private_Type (E)\n                   then\n                      Error_Msg_Name_1 := Name_Simple_Storage_Pool_Type;"}, {"sha": "231d0b2e296ea9318c7eb1265585d217598769af", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -3893,7 +3893,7 @@ package body Sem_Attr is\n          --  Loop_Entry must create a constant initialized by the evaluated\n          --  prefix.\n \n-         if Is_Immutably_Limited_Type (Etype (P)) then\n+         if Is_Limited_View (Etype (P)) then\n             Error_Attr_P (\"prefix of attribute % cannot be limited\");\n          end if;\n \n@@ -5994,7 +5994,7 @@ package body Sem_Attr is\n          then\n             Error_Attr_P (\"prefix of attribute % must be a record or array\");\n \n-         elsif Is_Immutably_Limited_Type (P_Type) then\n+         elsif Is_Limited_View (P_Type) then\n             Error_Attr (\"prefix of attribute % cannot be limited\", N);\n \n          elsif Nkind (E1) /= N_Aggregate then"}, {"sha": "24470edfafc1abe271be04f28b5118d27e72ac70", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 65, "deletions": 8, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -813,11 +813,11 @@ package body Sem_Aux is\n       end if;\n    end Is_Generic_Formal;\n \n-   -------------------------------\n-   -- Is_Immutably_Limited_Type --\n-   -------------------------------\n+   ---------------------\n+   -- Is_Limited_View --\n+   ---------------------\n \n-   function Is_Immutably_Limited_Type (Ent : Entity_Id) return Boolean is\n+   function Is_Limited_View (Ent : Entity_Id) return Boolean is\n       Btype : constant Entity_Id := Available_View (Base_Type (Ent));\n \n    begin\n@@ -857,7 +857,7 @@ package body Sem_Aux is\n                if No (Utyp) then\n                   return False;\n                else\n-                  return Is_Immutably_Limited_Type (Utyp);\n+                  return Is_Limited_View (Utyp);\n                end if;\n             end;\n          end if;\n@@ -875,7 +875,7 @@ package body Sem_Aux is\n          --  of a type that is not inherently limited.\n \n          if Is_Class_Wide_Type (Btype) then\n-            return Is_Immutably_Limited_Type (Root_Type (Btype));\n+            return Is_Limited_View (Root_Type (Btype));\n \n          else\n             declare\n@@ -892,7 +892,7 @@ package body Sem_Aux is\n                   --  limited interfaces.\n \n                   if not Is_Interface (Etype (C))\n-                    and then Is_Immutably_Limited_Type (Etype (C))\n+                    and then Is_Limited_View (Etype (C))\n                   then\n                      return True;\n                   end if;\n@@ -905,7 +905,64 @@ package body Sem_Aux is\n          end if;\n \n       elsif Is_Array_Type (Btype) then\n-         return Is_Immutably_Limited_Type (Component_Type (Btype));\n+         return Is_Limited_View (Component_Type (Btype));\n+\n+      else\n+         return False;\n+      end if;\n+   end Is_Limited_View;\n+\n+   -------------------------------\n+   -- Is_Immutably_Limited_Type --\n+   -------------------------------\n+\n+   function Is_Immutably_Limited_Type (Ent : Entity_Id) return Boolean is\n+      Btype : constant Entity_Id := Available_View (Base_Type (Ent));\n+\n+   begin\n+      if Is_Limited_Record (Btype) then\n+         return True;\n+\n+      elsif Ekind (Btype) = E_Limited_Private_Type\n+        and then Nkind (Parent (Btype)) = N_Formal_Type_Declaration\n+      then\n+         return not In_Package_Body (Scope ((Btype)));\n+\n+      elsif Is_Private_Type (Btype) then\n+\n+         --  AI05-0063: A type derived from a limited private formal type is\n+         --  not immutably limited in a generic body.\n+\n+         if Is_Derived_Type (Btype)\n+           and then Is_Generic_Type (Etype (Btype))\n+         then\n+            if not Is_Limited_Type (Etype (Btype)) then\n+               return False;\n+\n+            --  A descendant of a limited formal type is not immutably limited\n+            --  in the generic body, or in the body of a generic child.\n+\n+            elsif Ekind (Scope (Etype (Btype))) = E_Generic_Package then\n+               return not In_Package_Body (Scope (Btype));\n+\n+            else\n+               return False;\n+            end if;\n+\n+         else\n+            declare\n+               Utyp : constant Entity_Id := Underlying_Type (Btype);\n+            begin\n+               if No (Utyp) then\n+                  return False;\n+               else\n+                  return Is_Immutably_Limited_Type (Utyp);\n+               end if;\n+            end;\n+         end if;\n+\n+      elsif Is_Concurrent_Type (Btype) then\n+         return True;\n \n       else\n          return False;"}, {"sha": "0e2818e7bb5d199243fc9f59945dbc256dd2c1a3", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -281,6 +281,12 @@ package Sem_Aux is\n    --  so. False for other type entities, or any entities that are not types.\n \n    function Is_Immutably_Limited_Type (Ent : Entity_Id) return Boolean;\n+   --  Implements definition in Ada 2012 RM-7.5 (8.1/3). This differs from the\n+   --  following predicate in that an untagged record with immutably limited\n+   --  components is NOT by itself immutably limited. This matters, eg. when\n+   --  checking the legality of an access to the current instance.\n+\n+   function Is_Limited_View (Ent : Entity_Id) return Boolean;\n    --  Ent is any entity. True for a type that is \"inherently\" limited (i.e.\n    --  cannot become nonlimited). From the Ada 2005 RM-7.5(8.1/2), \"a type with\n    --  a part that is of a task, protected, or explicitly limited record type\".\n@@ -294,7 +300,8 @@ package Sem_Aux is\n    --  Ent is any entity. Returns true if Ent is a limited type (limited\n    --  private type, limited interface type, task type, protected type,\n    --  composite containing a limited component, or a subtype of any of\n-   --  these types).\n+   --  these types). This older routine overlaps with the previous one, this\n+   --  should be cleaned up?\n \n    function Nearest_Ancestor (Typ : Entity_Id) return Entity_Id;\n    --  Given a subtype Typ, this function finds out the nearest ancestor from"}, {"sha": "3dffc053d6ac00b3fefae21c7d33004ae730a75f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -9556,7 +9556,7 @@ package body Sem_Ch3 is\n       --  or else be a partial view.\n \n       if Nkind (Discriminant_Type (D)) = N_Access_Definition then\n-         if Is_Immutably_Limited_Type (Current_Scope)\n+         if Is_Limited_View (Current_Scope)\n            or else\n              (Nkind (Parent (Current_Scope)) = N_Private_Type_Declaration\n                and then Limited_Present (Parent (Current_Scope)))"}, {"sha": "3b5eee1680b94222ffc89cc0f94803bc2d9c16cf", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -586,7 +586,7 @@ package body Sem_Ch6 is\n                  (\"(Ada 2005) cannot copy object of a limited type \" &\n                   \"(RM-2005 6.5(5.5/2))\", Expr);\n \n-               if Is_Immutably_Limited_Type (R_Type) then\n+               if Is_Limited_View (R_Type) then\n                   Error_Msg_N\n                     (\"\\return by reference not permitted in Ada 2005\", Expr);\n                end if;\n@@ -606,7 +606,7 @@ package body Sem_Ch6 is\n                     (\"return of limited object not permitted in Ada 2005 \"\n                      & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n \n-               elsif Is_Immutably_Limited_Type (R_Type) then\n+               elsif Is_Limited_View (R_Type) then\n                   Error_Msg_N\n                     (\"return by reference not permitted in Ada 2005 \"\n                      & \"(RM-2005 6.5(5.5/2))?y?\", Expr);\n@@ -880,7 +880,7 @@ package body Sem_Ch6 is\n                     (\"aliased only allowed for limited\"\n                      & \" return objects in Ada 2012?\", N);\n \n-               elsif not Is_Immutably_Limited_Type (R_Type) then\n+               elsif not Is_Limited_View (R_Type) then\n                   Error_Msg_N (\"aliased only allowed for limited\"\n                      & \" return objects\", N);\n                end if;\n@@ -963,7 +963,7 @@ package body Sem_Ch6 is\n          --  check the static cases.\n \n          if (Ada_Version < Ada_2005 or else Debug_Flag_Dot_L)\n-           and then Is_Immutably_Limited_Type (Etype (Scope_Id))\n+           and then Is_Limited_View (Etype (Scope_Id))\n            and then Object_Access_Level (Expr) >\n                       Subprogram_Access_Level (Scope_Id)\n          then\n@@ -6593,7 +6593,7 @@ package body Sem_Ch6 is\n             Typ  : constant Entity_Id := Etype (Designator);\n             Utyp : constant Entity_Id := Underlying_Type (Typ);\n          begin\n-            if Is_Immutably_Limited_Type (Typ) then\n+            if Is_Limited_View (Typ) then\n                Set_Returns_By_Ref (Designator);\n             elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n                Set_Returns_By_Ref (Designator);"}, {"sha": "61d97667840fb66a18a57851ae084753d2152cf4", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -883,7 +883,7 @@ package body Sem_Ch8 is\n          --  there is no copy involved and no performance hit.\n \n          if Nkind (Nam) = N_Function_Call\n-           and then Is_Immutably_Limited_Type (Etype (Nam))\n+           and then Is_Limited_View (Etype (Nam))\n            and then not Is_Constrained (Etype (Nam))\n            and then Comes_From_Source (N)\n          then"}, {"sha": "62aa1b1ea04709c9c6be745f1f99344fbf016b6a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -17678,7 +17678,7 @@ package body Sem_Prag is\n             --  in Freeze_Entity).\n \n             if Is_Record_Type (Typ)\n-              and then not Is_Immutably_Limited_Type (Typ)\n+              and then not Is_Limited_View (Typ)\n             then\n                Error_Pragma\n                  (\"pragma% can only apply to explicitly limited record type\");"}, {"sha": "805dc68a9238162ce850854f054eaabe29971d63", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -4356,7 +4356,7 @@ package body Sem_Res is\n          --  of the current b-i-p implementation to unify the handling for\n          --  multiple kinds of storage pools). ???\n \n-         if Is_Immutably_Limited_Type (Desig_T)\n+         if Is_Limited_View (Desig_T)\n            and then Nkind (Expression (E)) = N_Function_Call\n          then\n             declare\n@@ -4595,7 +4595,7 @@ package body Sem_Res is\n \n                if Ada_Version >= Ada_2012\n                  and then Is_Limited_Type (Desig_T)\n-                 and then not Is_Immutably_Limited_Type (Scope (Discr))\n+                 and then not Is_Limited_View (Scope (Discr))\n                then\n                   Error_Msg_N\n                     (\"only immutably limited types can have anonymous \""}, {"sha": "f0dcd0333c33c112ee6c7d7172d14ccc2b61f07b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51245e2db08facc4d1ce09aa57782b43526c8055/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=51245e2db08facc4d1ce09aa57782b43526c8055", "patch": "@@ -8145,7 +8145,7 @@ package body Sem_Util is\n            --  statement is aliased if its type is immutably limited.\n \n            or else (Is_Return_Object (E)\n-                     and then Is_Immutably_Limited_Type (Etype (E)));\n+                     and then Is_Limited_View (Etype (E)));\n \n       elsif Nkind (Obj) = N_Selected_Component then\n          return Is_Aliased (Entity (Selector_Name (Obj)));"}]}