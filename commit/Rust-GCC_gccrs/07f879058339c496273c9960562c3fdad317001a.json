{"sha": "07f879058339c496273c9960562c3fdad317001a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdmODc5MDU4MzM5YzQ5NjI3M2M5OTYwNTYyYzNmZGFkMzE3MDAxYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-09-14T22:02:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-09-14T22:02:58Z"}, "message": "Fix overeager spelling corrections (PR c/82967)\n\nThis patch tunes class best_match's cutoff for rejecting meaningless\nspelling suggestions.\n\nPreviously, we allowed an edit distance of up to half of the length of the\nlonger of the goal string and closest candidate strings, rounded down.\n\nWith this patch, we now allow only up to a third - with some tuning of\nrounding (and for very short strings), to ensure that:\n(a) everything that worked before still works (with the removal of a\ncouple of cases that shouldn't), and that\n(b) the new threshold is always at least as conservative as the old\nthreshold and thus shouldn't offer new nonsensical suggestions (with\nthe possible exception of cases where transposition has helped; see\nr261521 aka Damerau-Levenshtein; PR other/69968).\n\nIn particular, all of the bogus suggestions from PR c/82967 are now\nno longer offered.\n\ngcc/ChangeLog:\n\tPR c/82967\n\t* spellcheck.c (get_edit_distance_cutoff): New function.\n\t(selftest::test_edit_distance_unit_test_oneway): Rename to...\n\t(selftest::test_get_edit_distance_one_way): ...this.\n\t(selftest::test_get_edit_distance_unit): Rename to...\n\t(selftest::test_get_edit_distance_both_ways): ...this.\n\t(selftest::test_edit_distances): Move tests to this new function,\n\tand test some more pairs of strings.  Update for above renaming.\n\t(selftest::get_old_cutoff): New function.\n\t(selftest::test_get_edit_distance_cutoff): New function.\n\t(selftest::assert_suggested_for): New function.\n\t(ASSERT_SUGGESTED_FOR): New macro.\n\t(selftest::assert_not_suggested_for): New function.\n\t(ASSERT_NOT_SUGGESTED_FOR): New macro.\n\t(selftest::test_suggestions): New function.\n\t(selftest::spellcheck_c_tests): Move test_get_edit_distance_unit\n\ttests to selftest::test_edit_distances and call it.  Add calls to\n\tselftest::test_get_edit_distance_cutoff and\n\tselftest::test_suggestions.\n\t* spellcheck.h (get_edit_distance_cutoff): New function declaration.\n\t(best_match::consider): Replace hard-coded cutoff calculation with\n\ta call to...\n\t(best_match::get_cutoff): New declaration.\n\t(best_match::get_best_meaningful_candidate): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR c/82967\n\t* c-c++-common/attributes-1.c: Remove bogus suggestion from\n\tdg-prune-output.\n\t* gcc.dg/diagnostic-token-ranges.c (undeclared_identifier): Remove\n\tbogus suggestion.\n\t* gcc.dg/spellcheck-identifiers-4.c: New test.\n\nFrom-SVN: r264335", "tree": {"sha": "dffa8594bdd703d9173c44e0a09d4bbf7051c6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dffa8594bdd703d9173c44e0a09d4bbf7051c6de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07f879058339c496273c9960562c3fdad317001a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f879058339c496273c9960562c3fdad317001a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f879058339c496273c9960562c3fdad317001a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f879058339c496273c9960562c3fdad317001a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2870a4da4f2c928346ac92e69aef16515c76049e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2870a4da4f2c928346ac92e69aef16515c76049e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2870a4da4f2c928346ac92e69aef16515c76049e"}], "stats": {"total": 301, "additions": 260, "deletions": 41}, "files": [{"sha": "a2088aa9587380ad76842ced0586e8550f6bf706", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f879058339c496273c9960562c3fdad317001a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f879058339c496273c9960562c3fdad317001a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07f879058339c496273c9960562c3fdad317001a", "patch": "@@ -1,3 +1,30 @@\n+2018-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/82967\n+\t* spellcheck.c (get_edit_distance_cutoff): New function.\n+\t(selftest::test_edit_distance_unit_test_oneway): Rename to...\n+\t(selftest::test_get_edit_distance_one_way): ...this.\n+\t(selftest::test_get_edit_distance_unit): Rename to...\n+\t(selftest::test_get_edit_distance_both_ways): ...this.\n+\t(selftest::test_edit_distances): Move tests to this new function,\n+\tand test some more pairs of strings.  Update for above renaming.\n+\t(selftest::get_old_cutoff): New function.\n+\t(selftest::test_get_edit_distance_cutoff): New function.\n+\t(selftest::assert_suggested_for): New function.\n+\t(ASSERT_SUGGESTED_FOR): New macro.\n+\t(selftest::assert_not_suggested_for): New function.\n+\t(ASSERT_NOT_SUGGESTED_FOR): New macro.\n+\t(selftest::test_suggestions): New function.\n+\t(selftest::spellcheck_c_tests): Move test_get_edit_distance_unit\n+\ttests to selftest::test_edit_distances and call it.  Add calls to\n+\tselftest::test_get_edit_distance_cutoff and\n+\tselftest::test_suggestions.\n+\t* spellcheck.h (get_edit_distance_cutoff): New function declaration.\n+\t(best_match::consider): Replace hard-coded cutoff calculation with\n+\ta call to...\n+\t(best_match::get_cutoff): New declaration.\n+\t(best_match::get_best_meaningful_candidate): Likewise.\n+\n 2018-09-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* builtins.c (fold_builtin_strlen): Remove TODO comment."}, {"sha": "690e6fa674fc900558f890d6c53a4f0fd908e350", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 197, "deletions": 34, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f879058339c496273c9960562c3fdad317001a/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f879058339c496273c9960562c3fdad317001a/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=07f879058339c496273c9960562c3fdad317001a", "patch": "@@ -162,6 +162,36 @@ find_closest_string (const char *target,\n   return bm.get_best_meaningful_candidate ();\n }\n \n+/* Generate the maximum edit distance for which we consider a suggestion\n+   to be meaningful, given a goal of length GOAL_LEN and a candidate of\n+   length CANDIDATE_LEN.\n+\n+   This is a third of the the length of the candidate or of the goal,\n+   whichever is bigger.  */\n+\n+edit_distance_t\n+get_edit_distance_cutoff (size_t goal_len, size_t candidate_len)\n+{\n+  size_t max_length = MAX (goal_len, candidate_len);\n+  size_t min_length = MIN (goal_len, candidate_len);\n+\n+  gcc_assert (max_length >= min_length);\n+\n+  /* Special case: don't offer suggestions for a pair of\n+     length == 1 strings (or empty strings).  */\n+  if (max_length <= 1)\n+    return 0;\n+\n+  /* If the lengths are close, then round down.  */\n+  if (max_length - min_length <= 1)\n+    /* ...but allow an edit distance of at least 1.  */\n+    return MAX (max_length / 3, 1);\n+\n+  /* Otherwise, round up (thus giving a little extra leeway to some cases\n+     involving insertions/deletions).  */\n+  return (max_length + 2) / 3;\n+}\n+\n #if CHECKING_P\n \n namespace selftest {\n@@ -171,8 +201,8 @@ namespace selftest {\n /* Verify that get_edit_distance (A, B) equals the expected value.  */\n \n static void\n-test_edit_distance_unit_test_oneway (const char *a, const char *b,\n-\t\t\t\t    edit_distance_t expected)\n+test_get_edit_distance_one_way (const char *a, const char *b,\n+\t\t\t\tedit_distance_t expected)\n {\n   edit_distance_t actual = get_edit_distance (a, b);\n   ASSERT_EQ (actual, expected);\n@@ -185,11 +215,169 @@ test_edit_distance_unit_test_oneway (const char *a, const char *b,\n    equal the expected value, to ensure that the function is symmetric.  */\n \n static void\n-test_get_edit_distance_unit (const char *a, const char *b,\n+test_get_edit_distance_both_ways (const char *a, const char *b,\n \t\t\t     edit_distance_t expected)\n {\n-  test_edit_distance_unit_test_oneway (a, b, expected);\n-  test_edit_distance_unit_test_oneway (b, a, expected);\n+  test_get_edit_distance_one_way (a, b, expected);\n+  test_get_edit_distance_one_way (b, a, expected);\n+}\n+\n+/* Verify get_edit_distance for a variety of pairs of pre-canned\n+   inputs, comparing against known-good values.  */\n+\n+static void\n+test_edit_distances ()\n+{\n+  test_get_edit_distance_both_ways (\"\", \"nonempty\", strlen (\"nonempty\"));\n+  test_get_edit_distance_both_ways (\"saturday\", \"sunday\", 3);\n+  test_get_edit_distance_both_ways (\"foo\", \"m_foo\", 2);\n+  test_get_edit_distance_both_ways (\"hello_world\", \"HelloWorld\", 3);\n+  test_get_edit_distance_both_ways\n+    (\"the quick brown fox jumps over the lazy dog\", \"dog\", 40);\n+  test_get_edit_distance_both_ways\n+    (\"the quick brown fox jumps over the lazy dog\",\n+     \"the quick brown dog jumps over the lazy fox\",\n+     4);\n+  test_get_edit_distance_both_ways\n+    (\"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\",\n+     \"All your base are belong to us\",\n+     44);\n+  test_get_edit_distance_both_ways (\"foo\", \"FOO\", 3);\n+  test_get_edit_distance_both_ways (\"fee\", \"deed\", 2);\n+  test_get_edit_distance_both_ways (\"coorzd1\", \"coordx1\", 2);\n+  test_get_edit_distance_both_ways (\"assert\", \"sqrt\", 3);\n+  test_get_edit_distance_both_ways (\"PATH_MAX\", \"INT8_MAX\", 3);\n+  test_get_edit_distance_both_ways (\"time\", \"nice\", 2);\n+  test_get_edit_distance_both_ways (\"bar\", \"carg\", 2);\n+  test_get_edit_distance_both_ways (\"gtk_widget_show_all\",\n+\t\t\t\t    \"GtkWidgetShowAll\", 7);\n+  test_get_edit_distance_both_ways (\"m_bar\", \"bar\", 2);\n+  test_get_edit_distance_both_ways (\"MACRO\", \"MACRAME\", 3);\n+  test_get_edit_distance_both_ways (\"ab\", \"ac\", 1);\n+  test_get_edit_distance_both_ways (\"ab\", \"a\", 1);\n+  test_get_edit_distance_both_ways (\"a\", \"b\", 1);\n+  test_get_edit_distance_both_ways (\"nanl\", \"name\", 2);\n+  test_get_edit_distance_both_ways (\"char\", \"bar\", 2);\n+  test_get_edit_distance_both_ways (\"-optimize\", \"fsanitize\", 5);\n+  test_get_edit_distance_both_ways (\"__DATE__\", \"__i386__\", 4);\n+\n+  /* Examples where transposition helps.  */\n+  test_get_edit_distance_both_ways (\"ab\", \"ba\", 1);\n+  test_get_edit_distance_both_ways (\"ba\", \"abc\", 2);\n+  test_get_edit_distance_both_ways (\"coorzd1\", \"coordz1\", 1);\n+  test_get_edit_distance_both_ways (\"abcdefghijklmnopqrstuvwxyz\",\n+\t\t\t\t    \"bacdefghijklmnopqrstuvwxzy\", 2);\n+  test_get_edit_distance_both_ways (\"saturday\", \"sundya\", 4);\n+  test_get_edit_distance_both_ways (\"signed\", \"singed\", 1);\n+}\n+\n+/* Subroutine of test_get_edit_distance_cutoff, for emulating the\n+   spellchecking cutoff in up to GCC 8.  */\n+\n+static edit_distance_t\n+get_old_cutoff (size_t goal_len, size_t candidate_len)\n+{\n+  return MAX (goal_len, candidate_len) / 2;\n+}\n+\n+/* Verify that the cutoff for \"meaningfulness\" of suggestions is at least as\n+   conservative as in older GCC releases.\n+\n+   This should ensure that we don't offer additional meaningless\n+   suggestions (apart from those for which transposition has helped).  */\n+\n+static void\n+test_get_edit_distance_cutoff ()\n+{\n+  for (size_t goal_len = 0; goal_len < 30; goal_len++)\n+    for (size_t candidate_len = 0; candidate_len < 30; candidate_len++)\n+      ASSERT_TRUE (get_edit_distance_cutoff (goal_len, candidate_len)\n+\t\t   <= get_old_cutoff (goal_len, candidate_len));\n+}\n+\n+/* Assert that CANDIDATE is offered as a suggestion for TARGET.  */\n+\n+static void\n+assert_suggested_for (const location &loc, const char *candidate,\n+\t\t      const char *target)\n+{\n+  auto_vec<const char *> candidates;\n+  candidates.safe_push (candidate);\n+  ASSERT_EQ_AT (loc, candidate, find_closest_string (target, &candidates));\n+}\n+\n+/* Assert that CANDIDATE is offered as a suggestion for TARGET.  */\n+\n+#define ASSERT_SUGGESTED_FOR(CANDIDATE, TARGET)\t\t\t\\\n+  SELFTEST_BEGIN_STMT\t\t\t\t\t\t\t\\\n+    assert_suggested_for (SELFTEST_LOCATION, CANDIDATE, TARGET);\t\\\n+  SELFTEST_END_STMT\n+\n+/* Assert that CANDIDATE is not offered as a suggestion for TARGET.  */\n+\n+static void\n+assert_not_suggested_for (const location &loc, const char *candidate,\n+\t\t\t  const char *target)\n+{\n+  auto_vec<const char *> candidates;\n+  candidates.safe_push (candidate);\n+  ASSERT_EQ_AT (loc, NULL, find_closest_string (target, &candidates));\n+}\n+\n+/* Assert that CANDIDATE is not offered as a suggestion for TARGET.  */\n+\n+#define ASSERT_NOT_SUGGESTED_FOR(CANDIDATE, TARGET)\t\t\t\\\n+  SELFTEST_BEGIN_STMT\t\t\t\t\t\t\t\\\n+    assert_not_suggested_for (SELFTEST_LOCATION, CANDIDATE, TARGET);\t\\\n+  SELFTEST_END_STMT\n+\n+/* Verify that we offer varous suggestions that are meaningful,\n+   and that we don't offer various other ones that aren't (PR c/82967).  */\n+\n+static void\n+test_suggestions ()\n+{\n+  /* Good suggestions.  */\n+\n+  ASSERT_SUGGESTED_FOR (\"m_bar\", \"bar\");\n+  // dist == 2, max_length == 5, min_length == 3\n+\n+  ASSERT_SUGGESTED_FOR (\"MACRO\", \"MACRAME\");\n+  // dist == 3, max_length == 7, min_length == 5\n+\n+  ASSERT_SUGGESTED_FOR (\"gtk_widget_show_all\", \"GtkWidgetShowAll\");\n+  // dist == 7, max_length == 16, min_length = 19\n+\n+  ASSERT_SUGGESTED_FOR (\"ab\", \"ac\");\n+  // dist == 1, max_length == min_length = 2\n+\n+  ASSERT_SUGGESTED_FOR (\"ab\", \"a\");\n+  // dist == 1, max_length == 2, min_length = 1\n+\n+  /* Bad suggestions.  */\n+\n+  ASSERT_NOT_SUGGESTED_FOR (\"a\", \"b\");\n+  // dist == 1, max_length == min_length = 1\n+\n+  ASSERT_NOT_SUGGESTED_FOR (\"sqrt\", \"assert\");\n+  // dist == 3, max_length 6, min_length == 4\n+\n+  ASSERT_NOT_SUGGESTED_FOR (\"INT8_MAX\", \"PATH_MAX\");\n+  // dist == 3, max_length == min_length == 8\n+\n+  ASSERT_NOT_SUGGESTED_FOR (\"nice\", \"time\");\n+  ASSERT_NOT_SUGGESTED_FOR (\"nanl\", \"name\");\n+  // dist == 2, max_length == min_length == 4\n+\n+  ASSERT_NOT_SUGGESTED_FOR (\"carg\", \"bar\");\n+  ASSERT_NOT_SUGGESTED_FOR (\"char\", \"bar\");\n+  // dist == 2, max_length == 4, min_length == 3\n+\n+  ASSERT_NOT_SUGGESTED_FOR (\"-optimize\", \"fsanitize\");\n+  // dist == 5, max_length == min_length == 9\n+\n+  ASSERT_NOT_SUGGESTED_FOR (\"__DATE__\", \"__i386__\");\n+  // dist == 4, max_length == min_length == 8\n }\n \n /* Verify that find_closest_string is sane.  */\n@@ -291,39 +479,14 @@ test_metric_conditions ()\n     }\n }\n \n-/* Verify get_edit_distance for a variety of pairs of pre-canned\n-   inputs, comparing against known-good values.  */\n+/* Run all of the selftests within this file.  */\n \n void\n spellcheck_c_tests ()\n {\n-  test_get_edit_distance_unit (\"\", \"nonempty\", strlen (\"nonempty\"));\n-  test_get_edit_distance_unit (\"saturday\", \"sunday\", 3);\n-  test_get_edit_distance_unit (\"foo\", \"m_foo\", 2);\n-  test_get_edit_distance_unit (\"hello_world\", \"HelloWorld\", 3);\n-  test_get_edit_distance_unit\n-    (\"the quick brown fox jumps over the lazy dog\", \"dog\", 40);\n-  test_get_edit_distance_unit\n-    (\"the quick brown fox jumps over the lazy dog\",\n-     \"the quick brown dog jumps over the lazy fox\",\n-     4);\n-  test_get_edit_distance_unit\n-    (\"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\",\n-     \"All your base are belong to us\",\n-     44);\n-  test_get_edit_distance_unit (\"foo\", \"FOO\", 3);\n-  test_get_edit_distance_unit (\"fee\", \"deed\", 2);\n-  test_get_edit_distance_unit (\"coorzd1\", \"coordx1\", 2);\n-\n-  /* Examples where transposition helps.  */\n-  test_get_edit_distance_unit (\"ab\", \"ba\", 1);\n-  test_get_edit_distance_unit (\"ba\", \"abc\", 2);\n-  test_get_edit_distance_unit (\"coorzd1\", \"coordz1\", 1);\n-  test_get_edit_distance_unit (\"abcdefghijklmnopqrstuvwxyz\",\n-\t\t\t       \"bacdefghijklmnopqrstuvwxzy\", 2);\n-  test_get_edit_distance_unit (\"saturday\", \"sundya\", 4);\n-  test_get_edit_distance_unit (\"signed\", \"singed\", 1);\n-\n+  test_edit_distances ();\n+  test_get_edit_distance_cutoff ();\n+  test_suggestions ();\n   test_find_closest_string ();\n   test_metric_conditions ();\n }"}, {"sha": "e8fa77ceaa810d91580aae903edf90ca6debaa71", "filename": "gcc/spellcheck.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f879058339c496273c9960562c3fdad317001a/gcc%2Fspellcheck.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f879058339c496273c9960562c3fdad317001a/gcc%2Fspellcheck.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.h?ref=07f879058339c496273c9960562c3fdad317001a", "patch": "@@ -66,6 +66,9 @@ struct edit_distance_traits<const char *>\n   }\n };\n \n+extern edit_distance_t get_edit_distance_cutoff (size_t goal_len,\n+\t\t\t\t\t\t size_t candidate_len);\n+\n /* A type for use when determining the best match against a string,\n    expressed as a template so that we can match against various\n    string-like types (const char *, frontend identifiers, and preprocessor\n@@ -119,7 +122,7 @@ class best_match\n     /* If the candidate will be unable to beat the criterion in\n        get_best_meaningful_candidate, reject it without computing\n        the exact distance.  */\n-    unsigned int cutoff = MAX (m_goal_len, candidate_len) / 2;\n+    edit_distance_t cutoff = get_cutoff (candidate_len);\n     if (min_candidate_distance > cutoff)\n       return;\n \n@@ -151,17 +154,25 @@ class best_match\n     m_best_candidate_len = best_candidate_len;\n   }\n \n+  /* Generate the maximum edit distance for which we consider a suggestion\n+     to be meaningful, given a candidate of length CANDIDATE_LEN.  */\n+\n+  edit_distance_t get_cutoff (size_t candidate_len) const\n+  {\n+    return ::get_edit_distance_cutoff (m_goal_len, candidate_len);\n+  }\n+\n   /* Get the best candidate so far, but applying a filter to ensure\n      that we return NULL if none of the candidates are close to the goal,\n      to avoid offering nonsensical suggestions to the user.  */\n \n   candidate_t get_best_meaningful_candidate () const\n   {\n-    /* If more than half of the letters were misspelled, the suggestion is\n-       likely to be meaningless.  */\n+    /* If the edit distance is too high, the suggestion is likely to be\n+       meaningless.  */\n     if (m_best_candidate)\n       {\n-\tunsigned int cutoff = MAX (m_goal_len, m_best_candidate_len) / 2;\n+\tedit_distance_t cutoff = get_cutoff (m_best_candidate_len);\n \tif (m_best_distance > cutoff)\n \t  return NULL;\n     }"}, {"sha": "25c253fe9afbbfee801130006a2625e9c47cffdc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07f879058339c496273c9960562c3fdad317001a", "patch": "@@ -1,3 +1,12 @@\n+2018-09-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/82967\n+\t* c-c++-common/attributes-1.c: Remove bogus suggestion from\n+\tdg-prune-output.\n+\t* gcc.dg/diagnostic-token-ranges.c (undeclared_identifier): Remove\n+\tbogus suggestion.\n+\t* gcc.dg/spellcheck-identifiers-4.c: New test.\n+\n 2018-09-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.dg/warn-strlen-no-nul.c: Add some missing test cases."}, {"sha": "1657da10d5e40023250544aed9f5e1c03121292e", "filename": "gcc/testsuite/c-c++-common/attributes-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-1.c?ref=07f879058339c496273c9960562c3fdad317001a", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-prune-output \"undeclared here \\\\(not in a function\\\\); did you mean .char..|\\[^\\n\\r\\]* was not declared in this scope\" } */\n+/* { dg-prune-output \"undeclared here \\\\(not in a function\\\\)|\\[^\\n\\r\\]* was not declared in this scope\" } */\n \n void* my_calloc(unsigned, unsigned) __attribute__((alloc_size(1,bar))); /* { dg-warning \"outside range\" } */\n void* my_realloc(void*, unsigned) __attribute__((alloc_size(bar))); /* { dg-warning \"outside range\" } */"}, {"sha": "406bd323cc816e0ccf4810159a5ce1efe03b6311", "filename": "gcc/testsuite/gcc.dg/diagnostic-token-ranges.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-token-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-token-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-token-ranges.c?ref=07f879058339c496273c9960562c3fdad317001a", "patch": "@@ -8,12 +8,11 @@ long double nanl (const char *);\n \n void undeclared_identifier (void)\n {\n-  name; /* { dg-error \"'name' undeclared .first use in this function.; did you mean .nanl.\" } */\n+  name; /* { dg-error \"'name' undeclared\" } */\n /*\n { dg-begin-multiline-output \"\" }\n    name;\n    ^~~~\n-   nanl\n { dg-end-multiline-output \"\" }\n */\n }"}, {"sha": "f9b7d8d0cab89bffd04fd7d9be2616241e184bee", "filename": "gcc/testsuite/gcc.dg/spellcheck-identifiers-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-identifiers-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07f879058339c496273c9960562c3fdad317001a/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-identifiers-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-identifiers-4.c?ref=07f879058339c496273c9960562c3fdad317001a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-Wimplicit-function-declaration\" } */\n+\n+extern double sqrt (double);\n+\n+void test (float pf, float inff)\n+{\n+  assert (pf == inff); /* { dg-bogus \"sqrt\" } */\n+  /* { dg-warning \"implicit declaration of function 'assert'\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-message \"header '<assert.h>'\" \"\" { target *-*-* } .-2 } */\n+}"}]}