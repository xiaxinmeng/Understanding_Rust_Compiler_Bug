{"sha": "fe932e504bb0efaaa874d1caffdc25e4d34c5484", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5MzJlNTA0YmIwZWZhYWE4NzRkMWNhZmZkYzI1ZTRkMzRjNTQ4NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-21T09:26:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-21T09:26:35Z"}, "message": "locale_facets.h (class money_base): Add { _S_minus, _S_zero, _S_end } enum, _S_atoms.\n\n2004-02-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.h (class money_base): Add { _S_minus,\n\t_S_zero, _S_end } enum, _S_atoms.\n\t(struct __moneypunct_cache<>): Parameterize on _Intl too; add\n\t_M_grouping_size, _M_curr_symbol_size, _M_positive_sign_size,\n\t_M_negative_sign_size, _M_atoms; tweak constructor consistently.\n\t(__moneypunct_cache<>::~__moneypunct_cache): Update.\n\t(__moneypunct_cache<>::_M_cache): Fill the cache.\n\t(class moneypunct): Tweak __cache_type typedef.\n\t(class money_put): Inherit from money_base too; tweak declaration\n\tof _M_insert, now parameterized on _Intl.\n\t* include/bits/locale_facets.tcc\n\t(struct __use_cache<__moneypunct_cache<_CharT, _Intl> >): New.\n\t(money_put<>::_M_insert): Update definition to use the cache;\n\tcall reserve on __res to avoid multiple reallocations.\n\t(money_put<>::do_put(long double),\n\tmoney_put<>::do_put(const string_type&): Update calls of _M_insert.\n\t* config/locale/generic/monetary_members.cc\n\t(moneypunct<char, true>::_M_initialize_moneypunct,\n\tmoneypunct<char, false>::_M_initialize_moneypunct,\n\tmoneypunct<wchar_t, true>::_M_initialize_moneypunct,\n\tmoneypunct<wchar_t, false>::_M_initialize_moneypunct): Update.\n\t* config/locale/gnu/monetary_members.cc: Likewise.\n\t* config/locale/gnu/monetary_members.cc\n\t(moneypunct<wchar_t, true>::~moneypunct(),\n\tmoneypunct<wchar_t, false>::~moneypunct()): Likewise.\n\t* src/globals_locale.cc: Tweak fake_money_cache_c.\n\t* src/locale-inst.cc: Add instantiations for\n\tmoney_put::_M_insert<false> and money_put::_M_insert<true> and\n\t__moneypunct_cache<C, false>, __moneypunct_cache<C, true>.\n\t* src/locale_facets.cc: Define money_base::_S_atoms.\n\t* src/locale_init.cc: Update placement new of\n\t__moneypunct_cache<char, false>, __moneypunct_cache<char, true>,\n\t__moneypunct_cache<wchar_t, false>, __moneypunct_cache<wchar_T, true>.\n\n\t* config/locale/generic/numeric_members.cc: Clean up.\n\t* config/locale/gnu/numeric_members.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/char/1.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/char/2.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/char/3.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/1.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/2.cc: Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/3.cc: Likewise.\n\nFrom-SVN: r78216", "tree": {"sha": "658b1a60aa9e4e6e7272da508ab2dff3e4f6d74b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/658b1a60aa9e4e6e7272da508ab2dff3e4f6d74b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe932e504bb0efaaa874d1caffdc25e4d34c5484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe932e504bb0efaaa874d1caffdc25e4d34c5484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe932e504bb0efaaa874d1caffdc25e4d34c5484", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe932e504bb0efaaa874d1caffdc25e4d34c5484/comments", "author": null, "committer": null, "parents": [{"sha": "8bb418a3d5c47572c382c7b8f195526247c02a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb418a3d5c47572c382c7b8f195526247c02a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb418a3d5c47572c382c7b8f195526247c02a1f"}], "stats": {"total": 815, "additions": 505, "deletions": 310}, "files": [{"sha": "fbbf8f5b8244ca3c6092cfdb5d9781bcd2565f08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,3 +1,48 @@\n+2004-02-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.h (class money_base): Add { _S_minus,\n+\t_S_zero, _S_end } enum, _S_atoms.\n+\t(struct __moneypunct_cache<>): Parameterize on _Intl too; add\n+\t_M_grouping_size, _M_curr_symbol_size, _M_positive_sign_size,\n+\t_M_negative_sign_size, _M_atoms; tweak constructor consistently.\n+\t(__moneypunct_cache<>::~__moneypunct_cache): Update.\n+\t(__moneypunct_cache<>::_M_cache): Fill the cache.\n+\t(class moneypunct): Tweak __cache_type typedef.\n+\t(class money_put): Inherit from money_base too; tweak declaration\n+\tof _M_insert, now parameterized on _Intl.\n+\t* include/bits/locale_facets.tcc\n+\t(struct __use_cache<__moneypunct_cache<_CharT, _Intl> >): New.\n+\t(money_put<>::_M_insert): Update definition to use the cache;\n+\tcall reserve on __res to avoid multiple reallocations.\n+\t(money_put<>::do_put(long double),\n+\tmoney_put<>::do_put(const string_type&): Update calls of _M_insert.\n+\t* config/locale/generic/monetary_members.cc\n+\t(moneypunct<char, true>::_M_initialize_moneypunct,\n+\tmoneypunct<char, false>::_M_initialize_moneypunct,\n+\tmoneypunct<wchar_t, true>::_M_initialize_moneypunct,\n+\tmoneypunct<wchar_t, false>::_M_initialize_moneypunct): Update.\n+\t* config/locale/gnu/monetary_members.cc: Likewise.\n+\t* config/locale/gnu/monetary_members.cc\n+\t(moneypunct<wchar_t, true>::~moneypunct(),\n+\tmoneypunct<wchar_t, false>::~moneypunct()): Likewise.\n+\t* src/globals_locale.cc: Tweak fake_money_cache_c.\n+\t* src/locale-inst.cc: Add instantiations for\n+\tmoney_put::_M_insert<false> and money_put::_M_insert<true> and\n+\t__moneypunct_cache<C, false>, __moneypunct_cache<C, true>.\n+\t* src/locale_facets.cc: Define money_base::_S_atoms.\n+\t* src/locale_init.cc: Update placement new of\n+\t__moneypunct_cache<char, false>, __moneypunct_cache<char, true>,\n+\t__moneypunct_cache<wchar_t, false>, __moneypunct_cache<wchar_T, true>.\n+\n+\t* config/locale/generic/numeric_members.cc: Clean up.\n+\t* config/locale/gnu/numeric_members.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/char/1.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/char/2.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/char/3.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/1.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/2.cc: Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/3.cc: Likewise.\n+\n 2004-02-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/27_io/basic_filebuf/showmanyc/char/9533-1.cc: Open"}, {"sha": "957a326dbd42f22e23dec5243e0aea4d26d41eae", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,17 +49,24 @@ namespace std\n     {\n       // \"C\" locale.\n       if (!_M_data)\n-\t_M_data = new __moneypunct_cache<char>;\n+\t_M_data = new __moneypunct_cache<char, true>;\n \n       _M_data->_M_decimal_point = '.';\n       _M_data->_M_thousands_sep = ',';\n       _M_data->_M_grouping = \"\";\n+      _M_data->_M_grouping_size = 0;\n       _M_data->_M_curr_symbol = \"\";\n+      _M_data->_M_curr_symbol_size = 0;\n       _M_data->_M_positive_sign = \"\";\n+      _M_data->_M_positive_sign_size = 0;\n       _M_data->_M_negative_sign = \"\";\n+      _M_data->_M_negative_sign_size = 0;\n       _M_data->_M_frac_digits = 0;\n       _M_data->_M_pos_format = money_base::_S_default_pattern;\n       _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+      for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t_M_data->_M_atoms[__i] = money_base::_S_atoms[__i];\n     }\n \n   template<> \n@@ -68,17 +75,24 @@ namespace std\n     {\n       // \"C\" locale.\n       if (!_M_data)\n-\t_M_data = new __moneypunct_cache<char>;\n+\t_M_data = new __moneypunct_cache<char, false>;\n \n       _M_data->_M_decimal_point = '.';\n       _M_data->_M_thousands_sep = ',';\n       _M_data->_M_grouping = \"\";\n+      _M_data->_M_grouping_size = 0;\n       _M_data->_M_curr_symbol = \"\";\n+      _M_data->_M_curr_symbol_size = 0;\n       _M_data->_M_positive_sign = \"\";\n+      _M_data->_M_positive_sign_size = 0;\n       _M_data->_M_negative_sign = \"\";\n+      _M_data->_M_negative_sign_size = 0;\n       _M_data->_M_frac_digits = 0;\n       _M_data->_M_pos_format = money_base::_S_default_pattern;\n       _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+      for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t_M_data->_M_atoms[__i] = money_base::_S_atoms[__i];\n     }\n \n   template<> \n@@ -97,17 +111,28 @@ namespace std\n     {\n       // \"C\" locale\n       if (!_M_data)\n-\t_M_data = new __moneypunct_cache<wchar_t>;\n+\t_M_data = new __moneypunct_cache<wchar_t, true>;\n \n       _M_data->_M_decimal_point = L'.';\n       _M_data->_M_thousands_sep = L',';\n       _M_data->_M_grouping = \"\";\n+      _M_data->_M_grouping_size = 0;\n       _M_data->_M_curr_symbol = L\"\";\n+      _M_data->_M_curr_symbol_size = 0;\n       _M_data->_M_positive_sign = L\"\";\n+      _M_data->_M_positive_sign_size = 0;      \n       _M_data->_M_negative_sign = L\"\";\n+      _M_data->_M_negative_sign_size = 0;      \n       _M_data->_M_frac_digits = 0;\n       _M_data->_M_pos_format = money_base::_S_default_pattern;\n       _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+      unsigned char uc;\n+      for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t{\n+\t  uc = static_cast<unsigned char>(money_base::_S_atoms[__i]);\n+\t  _M_data->_M_atoms[__i] = btowc(uc);\n+\t}\n     }\n \n   template<> \n@@ -117,17 +142,28 @@ namespace std\n     {\n       // \"C\" locale\n       if (!_M_data)\n-\t_M_data = new __moneypunct_cache<wchar_t>;\n+\t_M_data = new __moneypunct_cache<wchar_t, false>;\n \n       _M_data->_M_decimal_point = L'.';\n       _M_data->_M_thousands_sep = L',';\n       _M_data->_M_grouping = \"\";\n+      _M_data->_M_grouping_size = 0;\n       _M_data->_M_curr_symbol = L\"\";\n+      _M_data->_M_curr_symbol_size = 0;\n       _M_data->_M_positive_sign = L\"\";\n+      _M_data->_M_positive_sign_size = 0;\n       _M_data->_M_negative_sign = L\"\";\n+      _M_data->_M_negative_sign_size = 0;\n       _M_data->_M_frac_digits = 0;\n       _M_data->_M_pos_format = money_base::_S_default_pattern;\n       _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+      unsigned char uc;\n+      for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t{\n+\t  uc = static_cast<unsigned char>(money_base::_S_atoms[__i]);\n+\t  _M_data->_M_atoms[__i] = btowc(uc);\n+\t}\n     }\n \n   template<> "}, {"sha": "e2afed9c193f950541360753b14e6cee35e93324", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -46,6 +46,7 @@ namespace std\n \t_M_data = new __numpunct_cache<char>;\n \n       _M_data->_M_grouping = \"\";\n+      _M_data->_M_grouping_size = 0;\n       _M_data->_M_use_grouping = false;\n \n       _M_data->_M_decimal_point = '.';\n@@ -57,8 +58,6 @@ namespace std\n       for (size_t __i = 0; __i < __num_base::_S_iend; ++__i)\n \t_M_data->_M_atoms_in[__i] = __num_base::_S_atoms_in[__i];\n \n-      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n-\n       _M_data->_M_truename = \"true\";\n       _M_data->_M_truename_size = strlen(_M_data->_M_truename);\n       _M_data->_M_falsename = \"false\";\n@@ -79,6 +78,7 @@ namespace std\n \t_M_data = new __numpunct_cache<wchar_t>;\n \n       _M_data->_M_grouping = \"\";\n+      _M_data->_M_grouping_size = 0;\n       _M_data->_M_use_grouping = false;\n       \n       _M_data->_M_decimal_point = L'.';\n@@ -98,8 +98,6 @@ namespace std\n \t  _M_data->_M_atoms_in[__i] = btowc(uc);\n \t}\n \n-      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n-\n       _M_data->_M_truename = L\"true\";\n       _M_data->_M_truename_size = wcslen(_M_data->_M_truename);\n       _M_data->_M_falsename = L\"false\";"}, {"sha": "63bcdd821369e9992910b8b4ba5d9e8ac91807dc", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 68, "deletions": 14, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -210,20 +210,27 @@ namespace std\n \t\t\t\t\t\t     const char*)\n     {\n       if (!_M_data)\n-\t_M_data = new __moneypunct_cache<char>;\n+\t_M_data = new __moneypunct_cache<char, true>;\n \n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_data->_M_decimal_point = '.';\n \t  _M_data->_M_thousands_sep = ',';\n \t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_grouping_size = 0;\n \t  _M_data->_M_curr_symbol = \"\";\n+\t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = \"\";\n+\t  _M_data->_M_positive_sign_size = 0;\n \t  _M_data->_M_negative_sign = \"\";\n+\t  _M_data->_M_negative_sign_size = 0;\n \t  _M_data->_M_frac_digits = 0;\n \t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n \t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+\t  for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t    _M_data->_M_atoms[__i] = money_base::_S_atoms[__i];\n \t}\n       else\n \t{\n@@ -233,17 +240,21 @@ namespace std\n \t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n \t\t\t\t\t\t\t__cloc));\n \t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  _M_data->_M_positive_sign_size = strlen(_M_data->_M_positive_sign);\n \n \t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_data->_M_negative_sign = \"()\";\n \t  else\n \t    _M_data->_M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, \n \t\t\t\t\t\t\t__cloc);\n+\t  _M_data->_M_negative_sign_size = strlen(_M_data->_M_negative_sign);\n \n \t  // _Intl == true\n \t  _M_data->_M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n+\t  _M_data->_M_curr_symbol_size = strlen(_M_data->_M_curr_symbol);\n \t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n \t\t\t\t\t\t      __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n@@ -264,20 +275,27 @@ namespace std\n \t\t\t\t\t\t      const char*)\n     {\n       if (!_M_data)\n-\t_M_data = new __moneypunct_cache<char>;\n+\t_M_data = new __moneypunct_cache<char, false>;\n \n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_data->_M_decimal_point = '.';\n \t  _M_data->_M_thousands_sep = ',';\n \t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_grouping_size = 0;\n \t  _M_data->_M_curr_symbol = \"\";\n+\t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = \"\";\n+\t  _M_data->_M_positive_sign_size = 0;\n \t  _M_data->_M_negative_sign = \"\";\n+\t  _M_data->_M_negative_sign_size = 0;\n \t  _M_data->_M_frac_digits = 0;\n \t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n \t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+\t  for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t    _M_data->_M_atoms[__i] = money_base::_S_atoms[__i];\n \t}\n       else\n \t{\n@@ -287,17 +305,21 @@ namespace std\n \t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n \t\t\t\t\t\t\t__cloc));\n \t  _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  _M_data->_M_positive_sign_size = strlen(_M_data->_M_positive_sign);\n \n \t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n \t  if (!__nposn)\n \t    _M_data->_M_negative_sign = \"()\";\n \t  else\n-\t    _M_data->_M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, \n+\t    _M_data->_M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN,\n \t\t\t\t\t\t\t__cloc);\n+\t  _M_data->_M_negative_sign_size = strlen(_M_data->_M_negative_sign);\n \n \t  // _Intl == false\n \t  _M_data->_M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n+\t  _M_data->_M_curr_symbol_size = strlen(_M_data->_M_curr_symbol);\n \t  _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n@@ -330,20 +352,32 @@ namespace std\n #endif\n     {\n       if (!_M_data)\n-\t_M_data = new __moneypunct_cache<wchar_t>;\n+\t_M_data = new __moneypunct_cache<wchar_t, true>;\n \n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_data->_M_decimal_point = L'.';\n \t  _M_data->_M_thousands_sep = L',';\n \t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_grouping_size = 0;\n \t  _M_data->_M_curr_symbol = L\"\";\n+\t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = L\"\";\n+\t  _M_data->_M_positive_sign_size = 0;\n \t  _M_data->_M_negative_sign = L\"\";\n+\t  _M_data->_M_negative_sign_size = 0;\n \t  _M_data->_M_frac_digits = 0;\n \t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n \t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+\t  // Use ctype::widen code without the facet...\n+\t  unsigned char uc;\n+\t  for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t    {\n+\t      uc = static_cast<unsigned char>(money_base::_S_atoms[__i]);\n+\t      _M_data->_M_atoms[__i] = btowc(uc);\n+\t    }\n \t}\n       else\n \t{\n@@ -363,6 +397,7 @@ namespace std\n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc);\n \t  _M_data->_M_thousands_sep = static_cast<wchar_t>(__u.__w);\n \t  _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n@@ -385,6 +420,7 @@ namespace std\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n+\t      _M_data->_M_positive_sign_size = wcslen(_M_data->_M_positive_sign);\n \t      \n \t      __len = strlen(__cnegsign);\n \t      if (!__nposn)\n@@ -399,6 +435,7 @@ namespace std\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n+\t      _M_data->_M_negative_sign_size = wcslen(_M_data->_M_negative_sign);\n \t      \n \t      // _Intl == true.\n \t      __len = strlen(__ccurr);\n@@ -412,6 +449,7 @@ namespace std\n \t\t}\n \t      else\n \t\t_M_data->_M_curr_symbol = L\"\";\n+\t      _M_data->_M_curr_symbol_size = wcslen(_M_data->_M_curr_symbol);\n \t    }\n \t  catch (...)\n \t    {\n@@ -459,20 +497,32 @@ namespace std\n #endif\n   {\n     if (!_M_data)\n-      _M_data = new __moneypunct_cache<wchar_t>;\n+      _M_data = new __moneypunct_cache<wchar_t, false>;\n \n     if (!__cloc)\n \t{\n \t  // \"C\" locale\n \t  _M_data->_M_decimal_point = L'.';\n \t  _M_data->_M_thousands_sep = L',';\n \t  _M_data->_M_grouping = \"\";\n+          _M_data->_M_grouping_size = 0;\n \t  _M_data->_M_curr_symbol = L\"\";\n+\t  _M_data->_M_curr_symbol_size = 0;\n \t  _M_data->_M_positive_sign = L\"\";\n+\t  _M_data->_M_positive_sign_size = 0;\n \t  _M_data->_M_negative_sign = L\"\";\n+\t  _M_data->_M_negative_sign_size = 0;\n \t  _M_data->_M_frac_digits = 0;\n \t  _M_data->_M_pos_format = money_base::_S_default_pattern;\n \t  _M_data->_M_neg_format = money_base::_S_default_pattern;\n+\n+\t  // Use ctype::widen code without the facet...\n+\t  unsigned char uc;\n+\t  for (size_t __i = 0; __i < money_base::_S_end; ++__i)\n+\t    {\n+\t      uc = static_cast<unsigned char>(money_base::_S_atoms[__i]);\n+\t      _M_data->_M_atoms[__i] = btowc(uc);\n+\t    }\n \t}\n       else\n \t{\n@@ -492,6 +542,7 @@ namespace std\n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc);\n \t  _M_data->_M_thousands_sep = static_cast<wchar_t>(__u.__w);\n \t  _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+          _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n@@ -515,6 +566,7 @@ namespace std\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n+              _M_data->_M_positive_sign_size = wcslen(_M_data->_M_positive_sign);\n \t      \n \t      __len = strlen(__cnegsign);\n \t      if (!__nposn)\n@@ -529,7 +581,8 @@ namespace std\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n-\t      \n+              _M_data->_M_negative_sign_size = wcslen(_M_data->_M_negative_sign);\n+\n \t      // _Intl == true.\n \t      __len = strlen(__ccurr);\n \t      if (__len)\n@@ -542,6 +595,7 @@ namespace std\n \t\t}\n \t      else\n \t\t_M_data->_M_curr_symbol = L\"\";\n+              _M_data->_M_curr_symbol_size = wcslen(_M_data->_M_curr_symbol);\n \t    }\n           catch (...)\n \t    {\n@@ -581,25 +635,25 @@ namespace std\n   template<> \n     moneypunct<wchar_t, true>::~moneypunct()\n     {\n-      if (wcslen(_M_data->_M_positive_sign))\n+      if (_M_data->_M_positive_sign_size)\n \tdelete [] _M_data->_M_positive_sign;\n-      if (wcslen(_M_data->_M_negative_sign) \n-\t&& (wcscmp(_M_data->_M_negative_sign, L\"()\") != 0))\n+      if (_M_data->_M_negative_sign_size\n+          && wcscmp(_M_data->_M_negative_sign, L\"()\") != 0)\n \tdelete [] _M_data->_M_negative_sign;\n-      if (wcslen(_M_data->_M_curr_symbol))\n+      if (_M_data->_M_curr_symbol_size)\n \tdelete [] _M_data->_M_curr_symbol;\n       delete _M_data;\n     }\n \n   template<> \n     moneypunct<wchar_t, false>::~moneypunct()\n     {\n-      if (wcslen(_M_data->_M_positive_sign))\n+      if (_M_data->_M_positive_sign_size)\n \tdelete [] _M_data->_M_positive_sign;\n-      if (wcslen(_M_data->_M_negative_sign) \n-\t&& (wcscmp(_M_data->_M_negative_sign, L\"()\") != 0))\n+      if (_M_data->_M_negative_sign_size\n+          && wcscmp(_M_data->_M_negative_sign, L\"()\") != 0)\n \tdelete [] _M_data->_M_negative_sign;\n-      if (wcslen(_M_data->_M_curr_symbol))\n+      if (_M_data->_M_curr_symbol_size)\n \tdelete [] _M_data->_M_curr_symbol;\n       delete _M_data;\n     }"}, {"sha": "e2bb089082b4e8c020f9465e835ab349b41a39b2", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -49,6 +49,7 @@ namespace std\n \t{\n \t  // \"C\" locale\n \t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_grouping_size = 0;\n \t  _M_data->_M_use_grouping = false;\n \n \t  _M_data->_M_decimal_point = '.';\n@@ -71,8 +72,8 @@ namespace std\n \t    _M_data->_M_grouping = \"\";\n \t  else\n \t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \t}\n-      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \n       // NB: There is no way to extact this info from posix locales.\n       // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n@@ -99,6 +100,7 @@ namespace std\n \t{\n \t  // \"C\" locale\n \t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_grouping_size = 0;\n \t  _M_data->_M_use_grouping = false;\n \n \t  _M_data->_M_decimal_point = L'.';\n@@ -138,8 +140,8 @@ namespace std\n \t    _M_data->_M_grouping = \"\";\n \t  else\n \t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t  _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \t}\n-      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n \n       // NB: There is no way to extact this info from posix locales.\n       // _M_truename = __nl_langinfo_l(YESSTR, __cloc);"}, {"sha": "9f24cde80dd0bdef185f32d0421d20f31009dba1", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 81, "deletions": 12, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -3464,32 +3464,55 @@ namespace std\n \n     static const pattern _S_default_pattern;\n \n+    enum\n+    {\n+      _S_minus,\n+      _S_zero,\n+      _S_end = 11\n+    };\n+\n+    // String literal of acceptable (narrow) input/output, for\n+    // money_get/money_put. \"-0123456789\"\n+    static const char* _S_atoms;\n+\n     // Construct and return valid pattern consisting of some combination of:\n     // space none symbol sign value\n     static pattern\n     _S_construct_pattern(char __precedes, char __space, char __posn);\n   };\n \n-  template<typename _CharT>\n+  template<typename _CharT, bool _Intl>\n     struct __moneypunct_cache : public locale::facet\n     {\n       const char*\t\t\t_M_grouping;\n+      size_t                            _M_grouping_size;\n       bool\t\t\t\t_M_use_grouping;\n       _CharT\t\t\t\t_M_decimal_point;\n       _CharT\t\t\t\t_M_thousands_sep;\n       const _CharT*\t\t\t_M_curr_symbol;\n+      size_t                            _M_curr_symbol_size;\n       const _CharT*\t\t\t_M_positive_sign;\n+      size_t                            _M_positive_sign_size;\n       const _CharT*\t\t\t_M_negative_sign;\n+      size_t                            _M_negative_sign_size;\n       int\t\t\t\t_M_frac_digits;\n       money_base::pattern\t\t_M_pos_format;\n       money_base::pattern\t        _M_neg_format;\n \n+      // A list of valid numeric literals for input and output: in the standard\n+      // \"C\" locale, this is \"-0123456789\". This array contains the chars after\n+      // having been passed through the current locale's ctype<_CharT>.widen().\n+      _CharT\t\t\t\t_M_atoms[money_base::_S_end];\n+\n       bool\t\t\t\t_M_allocated;\n \n       __moneypunct_cache(size_t __refs = 0) : facet(__refs),\n-      _M_grouping(NULL), _M_use_grouping(false), _M_decimal_point(_CharT()),\n-      _M_thousands_sep(_CharT()), _M_curr_symbol(NULL), _M_positive_sign(NULL),\n-      _M_negative_sign(NULL), _M_frac_digits(0),\n+      _M_grouping(NULL), _M_grouping_size(0), _M_use_grouping(false),\n+      _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()),\n+      _M_curr_symbol(NULL), _M_curr_symbol_size(0),\n+      _M_positive_sign(NULL), _M_positive_sign_size(0),\n+      _M_negative_sign(NULL), _M_negative_sign_size(0),\n+      _M_frac_digits(0),\n       _M_pos_format(money_base::pattern()),\n       _M_neg_format(money_base::pattern()), _M_allocated(false)\n       { }\n@@ -3500,15 +3523,60 @@ namespace std\n       _M_cache(const locale& __loc);\n     };\n \n-  template<typename _CharT>\n-    __moneypunct_cache<_CharT>::~__moneypunct_cache()\n+  template<typename _CharT, bool _Intl>\n+    __moneypunct_cache<_CharT, _Intl>::~__moneypunct_cache()\n     {\n       if (_M_allocated)\n \t{\n-\t  // XXX.\n+\t  delete [] _M_grouping;\n+\t  delete [] _M_curr_symbol;\n+\t  delete [] _M_positive_sign;\n+\t  delete [] _M_negative_sign;\n \t}\n     }\n \n+  template<typename _CharT, bool _Intl>\n+    void\n+    __moneypunct_cache<_CharT, _Intl>::_M_cache(const locale& __loc)\n+    {\n+      _M_allocated = true;\n+\n+      const moneypunct<_CharT, _Intl>& __mp =\n+\tuse_facet<moneypunct<_CharT, _Intl> >(__loc);\n+\n+      _M_grouping_size = __mp.grouping().size();\n+      char* __grouping = new char[_M_grouping_size];\n+      __mp.grouping().copy(__grouping, _M_grouping_size);\n+      _M_grouping = __grouping;\n+      _M_use_grouping = _M_grouping_size && __mp.grouping()[0] != 0;\n+      \n+      _M_decimal_point = __mp.decimal_point();\n+      _M_thousands_sep = __mp.thousands_sep();\n+      _M_frac_digits = __mp.frac_digits();\n+      \n+      _M_curr_symbol_size = __mp.curr_symbol().size();\n+      _CharT* __curr_symbol = new _CharT[_M_curr_symbol_size];\n+      __mp.curr_symbol().copy(__curr_symbol, _M_curr_symbol_size);\n+      _M_curr_symbol = __curr_symbol;\n+      \n+      _M_positive_sign_size = __mp.positive_sign().size();\n+      _CharT* __positive_sign = new _CharT[_M_positive_sign_size];\n+      __mp.positive_sign().copy(__positive_sign, _M_positive_sign_size);\n+      _M_positive_sign = __positive_sign;\n+\n+      _M_negative_sign_size = __mp.negative_sign().size();\n+      _CharT* __negative_sign = new _CharT[_M_negative_sign_size];\n+      __mp.negative_sign().copy(__negative_sign, _M_negative_sign_size);\n+      _M_negative_sign = __negative_sign;\n+      \n+      _M_pos_format = __mp.pos_format();\n+      _M_neg_format = __mp.neg_format();\n+\n+      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n+      __ct.widen(money_base::_S_atoms,\n+\t\t money_base::_S_atoms + money_base::_S_end, _M_atoms);\n+    }\n+\n   /**\n    *  @brief  Facet for formatting data for money amounts.\n    *\n@@ -3525,7 +3593,7 @@ namespace std\n       typedef _CharT\t\t\tchar_type;\n       typedef basic_string<_CharT>\tstring_type;\n       //@}\n-      typedef __moneypunct_cache<_CharT>\t__cache_type;\n+      typedef __moneypunct_cache<_CharT, _Intl>     __cache_type;\n \n     private:\n       __cache_type*\t\t\t_M_data;\n@@ -4078,7 +4146,7 @@ namespace std\n    *  the money_put facet.\n   */\n   template<typename _CharT, typename _OutIter>\n-    class money_put : public locale::facet\n+  class money_put : public locale::facet, public money_base\n     {\n     public:\n       //@{\n@@ -4194,9 +4262,10 @@ namespace std\n       do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t     const string_type& __digits) const;\n \n-      iter_type\n-      _M_insert(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n-\t\tconst string_type& __digits) const;\n+      template<bool _Intl>\n+        iter_type\n+        _M_insert(iter_type __s, ios_base& __io, char_type __fill,\n+\t\t  const string_type& __digits) const;\n     };\n \n   template<typename _CharT, typename _OutIter>"}, {"sha": "0b56c5fb1534f7cd17827b320448aba48bd58fd4", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 190, "deletions": 160, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1130,6 +1130,34 @@ namespace std\n       return __s;\n     }\n \n+  template<typename _CharT, bool _Intl>\n+    struct __use_cache<__moneypunct_cache<_CharT, _Intl> >\n+    {\n+      const __moneypunct_cache<_CharT, _Intl>*\n+      operator() (const locale& __loc) const\n+      {\n+\tconst size_t __i = moneypunct<_CharT, _Intl>::id._M_id();\n+\tconst locale::facet** __caches = __loc._M_impl->_M_caches;\n+\tif (!__caches[__i])\n+\t  {\n+\t    __moneypunct_cache<_CharT, _Intl>* __tmp = NULL;\n+\t    try\n+\t      {\n+\t\t__tmp = new __moneypunct_cache<_CharT, _Intl>;\n+\t\t__tmp->_M_cache(__loc);\n+\t      }\n+\t    catch(...)\n+\t      {\n+\t\tdelete __tmp;\n+\t\t__throw_exception_again;\n+\t      }\n+\t    __loc._M_impl->_M_install_cache(__tmp, __i);\n+\t  }\n+\treturn static_cast<\n+\t  const __moneypunct_cache<_CharT, _Intl>*>(__caches[__i]);\n+      }\n+    };\n+\n   template<typename _CharT, typename _InIter>\n     _InIter\n     money_get<_CharT, _InIter>::\n@@ -1365,168 +1393,168 @@ namespace std\n     { return _M_extract(__beg, __end, __intl, __io, __err, __units); }\n \n   template<typename _CharT, typename _OutIter>\n-    _OutIter\n-    money_put<_CharT, _OutIter>::\n-    _M_insert(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n-\t      const string_type& __digits) const\n-    {\n-      typedef typename string_type::size_type\tsize_type;\n-      typedef money_base::part\t\t\tpart;\n+    template<bool _Intl>\n+      _OutIter\n+      money_put<_CharT, _OutIter>::\n+      _M_insert(iter_type __s, ios_base& __io, char_type __fill,\n+\t\tconst string_type& __digits) const\n+      {\n+\ttypedef typename string_type::size_type\t          size_type;\n+\ttypedef money_base::part                          part;\n+\ttypedef moneypunct<_CharT, _Intl>                 __moneypunct_type;\n+\ttypedef typename __moneypunct_type::__cache_type  __cache_type;\n       \n-      const locale __loc = __io.getloc();\n-      const size_type __width = static_cast<size_type>(__io.width());\n-\n-      // These contortions are quite unfortunate.\n-      typedef moneypunct<_CharT, true> __money_true;\n-      typedef moneypunct<_CharT, false> __money_false;\n-      const __money_true& __mpt = use_facet<__money_true>(__loc);\n-      const __money_false& __mpf = use_facet<__money_false>(__loc);\n-      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n-\n-      // Determine if negative or positive formats are to be used, and\n-      // discard leading negative_sign if it is present.\n-      const char_type* __beg = __digits.data();\n-      const char_type* __end = __beg + __digits.size();\n-      money_base::pattern __p;\n-      string_type __sign;\n-      if (*__beg != __ctype.widen('-'))\n-\t{\n-\t  __p = __intl ? __mpt.pos_format() : __mpf.pos_format();\n-\t  __sign = __intl ? __mpt.positive_sign() : __mpf.positive_sign();\n-\t}\n-      else\n-\t{\n-\t  __p = __intl ? __mpt.neg_format() : __mpf.neg_format();\n-\t  __sign = __intl ? __mpt.negative_sign() : __mpf.negative_sign();\n-\t  ++__beg;\n-\t}\n-\n-      // Look for valid numbers in the current ctype facet within input digits.\n-      __end = __ctype.scan_not(ctype_base::digit, __beg, __end);\n-      if (__beg != __end)\n-\t{\n-\t  // Assume valid input, and attempt to format.\n-\t  // Break down input numbers into base components, as follows:\n-\t  //   final_value = grouped units + (decimal point) + (digits)\n-\t  string_type __res;\n-\t  string_type __value;\n-\t  const string_type __symbol = __intl ? __mpt.curr_symbol()\n-\t\t\t\t\t      : __mpf.curr_symbol();\n-\n-\t  // Deal with decimal point, decimal digits.\n-\t  const int __frac = __intl ? __mpt.frac_digits()\n-\t\t\t\t    : __mpf.frac_digits();\n-\t  if (__frac > 0)\n-\t    {\n-\t      const char_type __d = __intl ? __mpt.decimal_point()\n-\t\t\t\t\t   : __mpf.decimal_point();\n-\t      if (__end - __beg >= __frac)\n-\t\t{\n-\t\t  __value = string_type(__end - __frac, __end);\n-\t\t  __value.insert(__value.begin(), __d);\n-\t\t  __end -= __frac;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  // Have to pad zeros in the decimal position.\n-\t\t  __value = string_type(__beg, __end);\n-\t\t  const int __paddec = __frac - (__end - __beg);\n-\t\t  const char_type __zero = __ctype.widen('0');\n-\t\t  __value.insert(__value.begin(), __paddec, __zero);\n-\t\t  __value.insert(__value.begin(), __d);\n-\t\t  __beg = __end;\n-\t\t}\n-\t    }\n-\n-\t  // Add thousands separators to non-decimal digits, per\n-\t  // grouping rules.\n-\t  if (__beg != __end)\n-\t    {\n-\t      const string __grouping = __intl ? __mpt.grouping()\n-\t\t\t\t\t       : __mpf.grouping();\n-\t      if (__grouping.size())\n-\t\t{\n-\t\t  const char_type __sep = __intl ? __mpt.thousands_sep()\n-\t\t\t\t\t         : __mpf.thousands_sep();\n-\t\t  const char* __gbeg = __grouping.data();\n-\t\t  const size_t __glen = __grouping.size();\n-\t\t  const int __n = (__end - __beg) * 2;\n-\t\t  _CharT* __ws2 =\n-\t          static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));\n-\t\t  _CharT* __ws_end = std::__add_grouping(__ws2, __sep, __gbeg,\n-\t\t\t\t\t\t\t __glen, __beg, __end);\n-\t\t  __value.insert(0, __ws2, __ws_end - __ws2);\n-\t\t}\n-\t      else\n-\t\t__value.insert(0, string_type(__beg, __end));\n-\t    }\n-\n-\t  // Calculate length of resulting string.\n-\t  const ios_base::fmtflags __f = __io.flags() & ios_base::adjustfield;\n-\t  size_type __len = __value.size() + __sign.size();\n-\t  __len += (__io.flags() & ios_base::showbase) ? __symbol.size() : 0;\n-\t  const bool __testipad = __f == ios_base::internal && __len < __width;\n-\n-\t  // Fit formatted digits into the required pattern.\n-\t  for (int __i = 0; __i < 4; ++__i)\n-\t    {\n-\t      const part __which = static_cast<part>(__p.field[__i]);\n-\t      switch (__which)\n-\t\t{\n-\t\tcase money_base::symbol:\n-\t\t  if (__io.flags() & ios_base::showbase)\n-\t\t    __res += __symbol;\n-\t\t  break;\n-\t\tcase money_base::sign:\n-\t\t  // Sign might not exist, or be more than one\n-\t\t  // charater long. In that case, add in the rest\n-\t\t  // below.\n-\t\t  if (__sign.size())\n-\t\t    __res += __sign[0];\n-\t\t  break;\n-\t\tcase money_base::value:\n-\t\t  __res += __value;\n-\t\t  break;\n-\t\tcase money_base::space:\n-\t\t  // At least one space is required, but if internal\n-\t\t  // formatting is required, an arbitrary number of\n-\t\t  // fill spaces will be necessary.\n-\t\t  if (__testipad)\n-\t\t    __res += string_type(__width - __len, __fill);\n-\t\t  else\n-\t\t    __res += __ctype.widen(__fill);\n-\t\t  break;\n-\t\tcase money_base::none:\n-\t\t  if (__testipad)\n-\t\t    __res += string_type(__width - __len, __fill);\n-\t\t  break;\n-\t\t}\n-\t    }\n+\tconst locale& __loc = __io._M_getloc();\n+\tconst ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n \n-\t  // Special case of multi-part sign parts.\n-\t  if (__sign.size() > 1)\n-\t    __res += string_type(__sign.begin() + 1, __sign.end());\n+\t__use_cache<__cache_type> __uc;\n+\tconst __cache_type* __lc = __uc(__loc);\n+\tconst char_type* __lit = __lc->_M_atoms;\n \n-\t  // Pad, if still necessary.\n-\t  __len = __res.size();\n-\t  if (__width > __len)\n-\t    {\n-\t      if (__f == ios_base::left)\n-\t\t// After.\n-\t\t__res.append(__width - __len, __fill);\n-\t      else\n-\t\t// Before.\n-\t\t__res.insert(0, string_type(__width - __len, __fill));\n-\t      __len = __width;\n-\t    }\n-\n-\t  // Write resulting, fully-formatted string to output iterator.\n-\t  __s = std::__write(__s, __res.data(), __len);\n-\t}\n-      __io.width(0);\n-      return __s;    \n-    }\n+\t// Determine if negative or positive formats are to be used, and\n+\t// discard leading negative_sign if it is present.\n+\tconst char_type* __beg = __digits.data();\n+\tconst char_type* __end = __beg + __digits.size();\n \n+\tmoney_base::pattern __p;\n+\tconst char_type* __sign;\n+\tsize_type __sign_size;\n+\tif (*__beg != __lit[_S_minus])\n+\t  {\n+\t    __p = __lc->_M_pos_format;\n+\t    __sign = __lc->_M_positive_sign;\n+\t    __sign_size = __lc->_M_positive_sign_size;\n+\t  }\n+\telse\n+\t  {\n+\t    __p = __lc->_M_neg_format;\n+\t    __sign = __lc->_M_negative_sign;\n+\t    __sign_size = __lc->_M_negative_sign_size;\n+\t    ++__beg;\n+\t  }\n+       \n+\t// Look for valid numbers in the ctype facet within input digits.\n+\t__end = __ctype.scan_not(ctype_base::digit, __beg, __end);\n+\tif (__beg != __end)\n+\t  {\n+\t    // Assume valid input, and attempt to format.\n+\t    // Break down input numbers into base components, as follows:\n+\t    //   final_value = grouped units + (decimal point) + (digits)\n+\t    string_type __res;\n+\t    string_type __value;\n+\t   \n+\t    // Deal with decimal point, decimal digits.\n+\t    if (__lc->_M_frac_digits > 0)\n+\t      {\n+\t\tif (__end - __beg >= __lc->_M_frac_digits)\n+\t\t  {\n+\t\t    __value = string_type(__end - __lc->_M_frac_digits, __end);\n+\t\t    __value.insert(__value.begin(), __lc->_M_decimal_point);\n+\t\t    __end -= __lc->_M_frac_digits;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    // Have to pad zeros in the decimal position.\n+\t\t    __value = string_type(__beg, __end);\n+\t\t    const int __paddec = __lc->_M_frac_digits - (__end - __beg);\n+\t\t    __value.insert(__value.begin(), __paddec, __lit[_S_zero]);\n+\t\t    __value.insert(__value.begin(), __lc->_M_decimal_point);\n+\t\t    __beg = __end;\n+\t\t  }\n+\t      }\n+\t    \n+\t    // Add thousands separators to non-decimal digits, per\n+\t    // grouping rules.\n+\t    if (__beg != __end)\n+\t      {\n+\t\tif (__lc->_M_grouping_size)\n+\t\t  {\n+\t\t    const int __n = (__end - __beg) * 2;\n+\t\t    _CharT* __ws2 =\n+\t\t      static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n+\t\t\t\t\t\t\t    * __n));\n+\t\t    _CharT* __ws_end =\n+\t\t      std::__add_grouping(__ws2, __lc->_M_thousands_sep,\n+\t\t\t\t\t  __lc->_M_grouping,\n+\t\t\t\t\t  __lc->_M_grouping_size,\n+\t\t\t\t\t  __beg, __end);\n+\t\t    __value.insert(0, __ws2, __ws_end - __ws2);\n+\t\t  }\n+\t\telse\n+\t\t  __value.insert(0, string_type(__beg, __end));\n+\t      }\n+\t    \n+\t    // Calculate length of resulting string.\n+\t    const ios_base::fmtflags __f = __io.flags() & ios_base::adjustfield;\n+\t    size_type __len = __value.size() + __sign_size;\n+\t    __len += ((__io.flags() & ios_base::showbase)\n+\t\t      ? __lc->_M_curr_symbol_size : 0);\n+\t    __res.reserve(__len);\n+\t    \n+\t    const size_type __width = static_cast<size_type>(__io.width());\t  \n+\t    const bool __testipad = (__f == ios_base::internal\n+\t\t\t\t     && __len < __width);\n+\t    // Fit formatted digits into the required pattern.\n+\t    for (int __i = 0; __i < 4; ++__i)\n+\t      {\n+\t\tconst part __which = static_cast<part>(__p.field[__i]);\n+\t\tswitch (__which)\n+\t\t  {\n+\t\t  case money_base::symbol:\n+\t\t    if (__io.flags() & ios_base::showbase)\n+\t\t      __res.append(__lc->_M_curr_symbol,\n+\t\t\t\t   __lc->_M_curr_symbol_size);\n+\t\t    break;\n+\t\t  case money_base::sign:\n+\t\t    // Sign might not exist, or be more than one\n+\t\t    // charater long. In that case, add in the rest\n+\t\t    // below.\n+\t\t    if (__sign_size)\n+\t\t      __res += __sign[0];\n+\t\t    break;\n+\t\t  case money_base::value:\n+\t\t    __res += __value;\n+\t\t    break;\n+\t\t  case money_base::space:\n+\t\t    // At least one space is required, but if internal\n+\t\t    // formatting is required, an arbitrary number of\n+\t\t    // fill spaces will be necessary.\n+\t\t    if (__testipad)\n+\t\t      __res += string_type(__width - __len, __fill);\n+\t\t    else\n+\t\t      __res += __fill;\n+\t\t    break;\n+\t\t  case money_base::none:\n+\t\t    if (__testipad)\n+\t\t      __res += string_type(__width - __len, __fill);\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t    \n+\t    // Special case of multi-part sign parts.\n+\t    if (__sign_size > 1)\n+\t      __res.append(__sign + 1, __sign_size - 1);\n+\t    \n+\t    // Pad, if still necessary.\n+\t    __len = __res.size();\n+\t    if (__width > __len)\n+\t      {\n+\t\tif (__f == ios_base::left)\n+\t\t  // After.\n+\t\t  __res.append(__width - __len, __fill);\n+\t\telse\n+\t\t  // Before.\n+\t\t  __res.insert(0, string_type(__width - __len, __fill));\n+\t\t__len = __width;\n+\t      }\n+\t    \n+\t    // Write resulting, fully-formatted string to output iterator.\n+\t    __s = std::__write(__s, __res.data(), __len);\n+\t  }\n+\t__io.width(0);\n+\treturn __s;    \n+      }\n+  \n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     money_put<_CharT, _OutIter>::\n@@ -1562,15 +1590,17 @@ namespace std\n \t\t\t\t\t\t\t   * __cs_size));\n       __ctype.widen(__cs, __cs + __len, __ws);\n       const string_type __digits(__ws, __len);\n-      return _M_insert(__s, __intl, __io, __fill, __digits);\n+      return __intl ? _M_insert<true>(__s, __io, __fill, __digits)\n+\t            : _M_insert<false>(__s, __io, __fill, __digits);\n     }\n \n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     money_put<_CharT, _OutIter>::\n     do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t   const string_type& __digits) const\n-    { return _M_insert(__s, __intl, __io, __fill, __digits); }\n+    { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)\n+\t            : _M_insert<false>(__s, __io, __fill, __digits); }\n \n   // NB: Not especially useful. Without an ios_base object or some\n   // kind of locale reference, we are left clawing at the air where"}, {"sha": "67192c462a6d3e71e6604ef2626cb27e0d71abd1", "filename": "libstdc++-v3/src/globals_locale.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Fglobals_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Fglobals_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals_locale.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -184,8 +184,8 @@ namespace __gnu_internal\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<char>))));\n   fake_num_cache_c numpunct_cache_c;\n \n-  typedef char fake_money_cache_c[sizeof(std::__moneypunct_cache<char>)]\n-  __attribute__ ((aligned(__alignof__(std::__moneypunct_cache<char>))));\n+  typedef char fake_money_cache_c[sizeof(std::__moneypunct_cache<char, true>)]\n+  __attribute__ ((aligned(__alignof__(std::__moneypunct_cache<char, true>))));\n   fake_money_cache_c moneypunct_cache_ct;\n   fake_money_cache_c moneypunct_cache_cf;\n \n@@ -198,8 +198,8 @@ namespace __gnu_internal\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<wchar_t>))));\n   fake_num_cache_w numpunct_cache_w;\n \n-  typedef char fake_money_cache_w[sizeof(std::__moneypunct_cache<wchar_t>)]\n-  __attribute__ ((aligned(__alignof__(std::__moneypunct_cache<wchar_t>))));\n+  typedef char fake_money_cache_w[sizeof(std::__moneypunct_cache<wchar_t,true>)]\n+  __attribute__ ((aligned(__alignof__(std::__moneypunct_cache<wchar_t,true>))));\n   fake_money_cache_w moneypunct_cache_wt;\n   fake_money_cache_w moneypunct_cache_wf;\n "}, {"sha": "737716c245e8574d9fd8c1e44d3041d4b8877c2e", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,11 +44,23 @@ namespace std\n   // moneypunct, money_get, and money_put\n   template class moneypunct<C, false>;\n   template class moneypunct<C, true>;\n-  template struct __moneypunct_cache<C>;\n+  template struct __moneypunct_cache<C, false>;\n+  template struct __moneypunct_cache<C, true>;\n   template class moneypunct_byname<C, false>;\n   template class moneypunct_byname<C, true>;\n   template class money_get<C, istreambuf_iterator<C> >;\n   template class money_put<C, ostreambuf_iterator<C> >;\n+  template\n+    ostreambuf_iterator<C>\n+    money_put<C, ostreambuf_iterator<C> >::\n+    _M_insert<true>(ostreambuf_iterator<C>, ios_base&, C, \n+\t\t    const string_type&) const;\n+\n+  template\n+    ostreambuf_iterator<C>\n+    money_put<C, ostreambuf_iterator<C> >::\n+    _M_insert<false>(ostreambuf_iterator<C>, ios_base&, C, \n+\t\t     const string_type&) const;\n \n   // numpunct, numpunct_byname, num_get, and num_put\n   template class numpunct<C>;"}, {"sha": "db8c9e0fba41d667c7ebafecd3656b61f1fe0553", "filename": "libstdc++-v3/src/locale_facets.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -53,6 +53,8 @@ namespace std\n   const money_base::pattern \n   money_base::_S_default_pattern =  { {symbol, sign, none, value} };\n \n+  const char* money_base::_S_atoms = \"-0123456789\";\n+\n   const char* __num_base::_S_atoms_in = \"-+xX0123456789abcdefABCDEF\";\n   const char* __num_base::_S_atoms_out =\"-+xX0123456789abcdef0123456789ABCDEF\";\n "}, {"sha": "78f91d24887d0fdc751103020d4567356f9fb2b0", "filename": "libstdc++-v3/src/locale_init.cc", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_init.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -45,48 +45,48 @@ namespace __gnu_internal\n   extern char* name_vec[6 + _GLIBCXX_NUM_CATEGORIES];\n   extern char name_c[6 + _GLIBCXX_NUM_CATEGORIES][2];\n \n-  extern std::ctype<char>\t\t\tctype_c;\n-  extern std::collate<char> \t\t\tcollate_c;\n-  extern std::numpunct<char> \t\t\tnumpunct_c;\n-  extern std::num_get<char> \t\t\tnum_get_c;\n-  extern std::num_put<char> \t\t\tnum_put_c;  \n-  extern std::codecvt<char, char, mbstate_t>\tcodecvt_c;\n-  extern std::moneypunct<char, false> \t\tmoneypunct_cf;\n-  extern std::moneypunct<char, true> \t\tmoneypunct_ct;\n-  extern std::money_get<char> \t\t\tmoney_get_c;\n-  extern std::money_put<char> \t\t\tmoney_put_c;\n-  extern std::__timepunct<char> \t\ttimepunct_c;\n-  extern std::time_get<char> \t\t\ttime_get_c;\n-  extern std::time_put<char> \t\t\ttime_put_c;\n-  extern std::messages<char> \t\t\tmessages_c;\n+  extern std::ctype<char>\t\t\t ctype_c;\n+  extern std::collate<char> \t\t\t collate_c;\n+  extern std::numpunct<char> \t\t\t numpunct_c;\n+  extern std::num_get<char> \t\t\t num_get_c;\n+  extern std::num_put<char> \t\t\t num_put_c;  \n+  extern std::codecvt<char, char, mbstate_t>\t codecvt_c;\n+  extern std::moneypunct<char, false> \t\t moneypunct_cf;\n+  extern std::moneypunct<char, true> \t\t moneypunct_ct;\n+  extern std::money_get<char> \t\t\t money_get_c;\n+  extern std::money_put<char> \t\t\t money_put_c;\n+  extern std::__timepunct<char> \t\t timepunct_c;\n+  extern std::time_get<char> \t\t\t time_get_c;\n+  extern std::time_put<char> \t\t\t time_put_c;\n+  extern std::messages<char> \t\t\t messages_c;\n #ifdef  _GLIBCXX_USE_WCHAR_T\n-  extern std::ctype<wchar_t>\t\t\tctype_w;\n-  extern std::collate<wchar_t> \t\t\tcollate_w;\n-  extern std::numpunct<wchar_t> \t\tnumpunct_w;\n-  extern std::num_get<wchar_t> \t\t\tnum_get_w;\n-  extern std::num_put<wchar_t> \t\t\tnum_put_w;\n-  extern std::codecvt<wchar_t, char, mbstate_t>\tcodecvt_w;\n-  extern std::moneypunct<wchar_t, false> \tmoneypunct_wf;\n-  extern std::moneypunct<wchar_t, true> \tmoneypunct_wt;\n-  extern std::money_get<wchar_t> \t\tmoney_get_w;\n-  extern std::money_put<wchar_t> \t\tmoney_put_w;\n-  extern std::__timepunct<wchar_t> \t\ttimepunct_w;\n-  extern std::time_get<wchar_t> \t\ttime_get_w;\n-  extern std::time_put<wchar_t> \t\ttime_put_w;\n-  extern std::messages<wchar_t> \t\tmessages_w;\n+  extern std::ctype<wchar_t>\t\t\t ctype_w;\n+  extern std::collate<wchar_t> \t\t\t collate_w;\n+  extern std::numpunct<wchar_t> \t\t numpunct_w;\n+  extern std::num_get<wchar_t> \t\t\t num_get_w;\n+  extern std::num_put<wchar_t> \t\t\t num_put_w;\n+  extern std::codecvt<wchar_t, char, mbstate_t>\t codecvt_w;\n+  extern std::moneypunct<wchar_t, false> \t moneypunct_wf;\n+  extern std::moneypunct<wchar_t, true> \t moneypunct_wt;\n+  extern std::money_get<wchar_t> \t\t money_get_w;\n+  extern std::money_put<wchar_t> \t \t money_put_w;\n+  extern std::__timepunct<wchar_t> \t\t timepunct_w;\n+  extern std::time_get<wchar_t> \t\t time_get_w;\n+  extern std::time_put<wchar_t> \t\t time_put_w;\n+  extern std::messages<wchar_t> \t\t messages_w;\n #endif\n \n   // And the caches....\n   extern std::locale::facet* cache_vec[_GLIBCXX_NUM_FACETS];\n-  extern std::__numpunct_cache<char>\t\tnumpunct_cache_c;\n-  extern std::__moneypunct_cache<char>\t\tmoneypunct_cache_cf;\n-  extern std::__moneypunct_cache<char>\t\tmoneypunct_cache_ct;\n-  extern std::__timepunct_cache<char>\t\ttimepunct_cache_c;\n+  extern std::__numpunct_cache<char>\t\t numpunct_cache_c;\n+  extern std::__moneypunct_cache<char, false>\t moneypunct_cache_cf;\n+  extern std::__moneypunct_cache<char, true>\t moneypunct_cache_ct;\n+  extern std::__timepunct_cache<char>\t\t timepunct_cache_c;\n #ifdef  _GLIBCXX_USE_WCHAR_T\n-  extern std::__numpunct_cache<wchar_t>\t\tnumpunct_cache_w;\n-  extern std::__moneypunct_cache<wchar_t>\tmoneypunct_cache_wf;\n-  extern std::__moneypunct_cache<wchar_t>\tmoneypunct_cache_wt;\n-  extern std::__timepunct_cache<wchar_t>\ttimepunct_cache_w;\n+  extern std::__numpunct_cache<wchar_t>\t\t numpunct_cache_w;\n+  extern std::__moneypunct_cache<wchar_t, false> moneypunct_cache_wf;\n+  extern std::__moneypunct_cache<wchar_t, true>\t moneypunct_cache_wt;\n+  extern std::__timepunct_cache<wchar_t>\t timepunct_cache_w;\n #endif\n } // namespace __gnu_internal\n \n@@ -273,10 +273,11 @@ namespace std\n     _M_init_facet(new (&num_put_c) num_put<char>(1));\n     _M_init_facet(new (&collate_c) std::collate<char>(1));\n \n-    typedef __moneypunct_cache<char> money_cache_c;\n-    money_cache_c* __mpcf = new (&moneypunct_cache_cf) money_cache_c(2);\n+    typedef __moneypunct_cache<char, false> money_cache_cf;\n+    typedef __moneypunct_cache<char, true> money_cache_ct;\n+    money_cache_cf* __mpcf = new (&moneypunct_cache_cf) money_cache_cf(2);\n     _M_init_facet(new (&moneypunct_cf) moneypunct<char, false>(__mpcf, 1));\n-    money_cache_c* __mpct = new (&moneypunct_cache_ct) money_cache_c(2);\n+    money_cache_ct* __mpct = new (&moneypunct_cache_ct) money_cache_ct(2);\n     _M_init_facet(new (&moneypunct_ct) moneypunct<char, true>(__mpct, 1));\n \n     _M_init_facet(new (&money_get_c) money_get<char>(1));\n@@ -302,10 +303,11 @@ namespace std\n     _M_init_facet(new (&num_put_w) num_put<wchar_t>(1));\n     _M_init_facet(new (&collate_w) std::collate<wchar_t>(1));\n \n-    typedef __moneypunct_cache<wchar_t> money_cache_w;\n-    money_cache_w* __mpwf = new (&moneypunct_cache_wf) money_cache_w(2);\n+    typedef __moneypunct_cache<wchar_t, false> money_cache_wf;\n+    typedef __moneypunct_cache<wchar_t, true> money_cache_wt;\n+    money_cache_wf* __mpwf = new (&moneypunct_cache_wf) money_cache_wf(2);\n     _M_init_facet(new (&moneypunct_wf) moneypunct<wchar_t, false>(__mpwf, 1));\n-    money_cache_w* __mpwt = new (&moneypunct_cache_wt) money_cache_w(2);\n+    money_cache_wt* __mpwt = new (&moneypunct_cache_wt) money_cache_wt(2);\n     _M_init_facet(new (&moneypunct_wt) moneypunct<wchar_t, true>(__mpwt, 1));\n \n     _M_init_facet(new (&money_get_w) money_get<wchar_t>(1));"}, {"sha": "85998856cd58af40e23204b3b12daafa97bc548b", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,8 +28,6 @@\n void test01()\n {\n   using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n   bool test __attribute__((unused)) = true;\n@@ -39,10 +37,6 @@ void test01()\n   locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n   VERIFY( loc_c != loc_de );\n \n-  // cache the moneypunct facets\n-  typedef moneypunct<char, true> __money_true;\n-  typedef moneypunct<char, false> __money_false;\n-\n   // sanity check the data is correct.\n   const string empty;\n "}, {"sha": "2833afbcaa371474d5f8c6bb55520b2fee94a3a2", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/2.cc", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,25 +28,14 @@\n void test02()\n {\n   using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n   bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n   locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n-  locale loc_fr = __gnu_test::try_named_locale(\"fr_FR@euro\");\n-  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<char, true> __money_true;\n-  typedef moneypunct<char, false> __money_false;\n+  VERIFY( loc_c != loc_hk );\n \n   // sanity check the data is correct.\n   const string empty;"}, {"sha": "f4e70ec8d69444c9da9f8d3898492ea4b7c07525", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/3.cc", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,25 +28,14 @@\n void test03()\n {\n   using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<char> iterator_type;\n \n   bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n-  locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n-  locale loc_fr = __gnu_test::try_named_locale(\"fr_FR@euro\");\n   locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n   VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<char, true> __money_true;\n-  typedef moneypunct<char, false> __money_false;\n \n   // sanity check the data is correct.\n   const string empty;"}, {"sha": "9518d16f37afcf566b2096c824c26caee71e9ddc", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,8 +28,6 @@\n void test01()\n {\n   using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n   bool test __attribute__((unused)) = true;\n@@ -39,10 +37,6 @@ void test01()\n   locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n   VERIFY( loc_c != loc_de );\n \n-  // cache the moneypunct facets\n-  typedef moneypunct<wchar_t, true> __money_true;\n-  typedef moneypunct<wchar_t, false> __money_false;\n-\n   // sanity check the data is correct.\n   const wstring empty;\n "}, {"sha": "312a50519894480fa2cc8a0a85f29b34bab35fa7", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/2.cc", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,25 +28,14 @@\n void test02()\n {\n   using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n   bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n   locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n-  locale loc_fr = __gnu_test::try_named_locale(\"fr_FR@euro\");\n-  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<wchar_t, true> __money_true;\n-  typedef moneypunct<wchar_t, false> __money_false;\n+  VERIFY( loc_c != loc_hk );\n \n   // sanity check the data is correct.\n   const wstring empty;"}, {"sha": "7e381d9dc4879074953d80b348a0c19203aa24a5", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/3.cc", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe932e504bb0efaaa874d1caffdc25e4d34c5484/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc?ref=fe932e504bb0efaaa874d1caffdc25e4d34c5484", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,25 +28,14 @@\n void test03()\n {\n   using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n   typedef ostreambuf_iterator<wchar_t> iterator_type;\n \n   bool test __attribute__((unused)) = true;\n \n   // basic construction\n   locale loc_c = locale::classic();\n-  locale loc_hk = __gnu_test::try_named_locale(\"en_HK\");\n-  locale loc_fr = __gnu_test::try_named_locale(\"fr_FR@euro\");\n   locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n   VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<wchar_t, true> __money_true;\n-  typedef moneypunct<wchar_t, false> __money_false;\n \n   // sanity check the data is correct.\n   const wstring empty;"}]}