{"sha": "f9e5e530391d9a98b7c965b79bebf305d2630ad7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllNWU1MzAzOTFkOWE5OGI3Yzk2NWI3OWJlYmYzMDVkMjYzMGFkNw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-25T23:36:09Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-26T19:03:20Z"}, "message": "Get rid of get_locus_slow\n\nIn various places there was the following hack:\n\n  /* HACK: slow way of getting location from base expression through\n     virtual methods. */\n  virtual Location get_locus_slow () const { return Location (); }\n\nThe problem with get_locus_slow () is that if a subclass didn't\noverride it then there was no real location. get_locus_slow was\nmissing for Module, ExternCrate, UseDeclaration, Function, TypeAlias,\nStructStruct, TupleStruct, Enum, Union, ConstantItem, StaticItem,\nTrait, ImplBlock, ExternBlock, EmptyStmt, ExprStmtWithoutBlock and\nExprStmtWithBlock. All do have a get_locus () function.\n\nSimply replace the get_locus_slow virtual method with a real virtual\nLocation get_locus () const = 0 method so we know if something\nreally doesn't have a location. This was only the case for\nMacroRulesDefinition.", "tree": {"sha": "5b21a3e1a29b6df29649ea993cb79434fe86d906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b21a3e1a29b6df29649ea993cb79434fe86d906"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9e5e530391d9a98b7c965b79bebf305d2630ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e5e530391d9a98b7c965b79bebf305d2630ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e5e530391d9a98b7c965b79bebf305d2630ad7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e5e530391d9a98b7c965b79bebf305d2630ad7/comments", "author": null, "committer": null, "parents": [{"sha": "40042ce11fc5d7f62e31be99e82bf6a0db83234a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40042ce11fc5d7f62e31be99e82bf6a0db83234a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40042ce11fc5d7f62e31be99e82bf6a0db83234a"}], "stats": {"total": 941, "additions": 393, "deletions": 548}, "files": [{"sha": "2bfaeb1d364bdc7dbacc302803912ad6716a81c7", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -816,9 +816,7 @@ class Stmt\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n-  /* HACK: slow way of getting location from base expression through virtual\n-   * methods. */\n-  virtual Location get_locus_slow () const { return Location (); }\n+  virtual Location get_locus () const = 0;\n \n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n@@ -885,9 +883,7 @@ class Expr\n \n   virtual ~Expr () {}\n \n-  /* HACK: slow way of getting location from base expression through virtual\n-   * methods. */\n-  virtual Location get_locus_slow () const { return Location (); }\n+  virtual Location get_locus () const = 0;\n \n   // HACK: strictly not needed, but faster than full downcast clone\n   virtual bool is_expr_without_block () const = 0;\n@@ -966,8 +962,7 @@ class IdentifierExpr : public ExprWithoutBlock\n \n   std::string as_string () const override { return ident; }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   Identifier get_ident () const { return ident; }\n \n@@ -1026,9 +1021,7 @@ class Pattern\n   virtual void mark_for_strip () {}\n   virtual bool is_marked_for_strip () const { return false; }\n \n-  /* HACK: slow way of getting location from base expression through virtual\n-   * methods. */\n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n   virtual NodeId get_node_id () const { return node_id; }\n \n@@ -1071,7 +1064,7 @@ class Type\n   virtual void mark_for_strip () {}\n   virtual bool is_marked_for_strip () const { return false; }\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n   NodeId get_node_id () const { return node_id; }\n \n@@ -1128,7 +1121,7 @@ class TypeParamBound\n \n   NodeId get_node_id () const { return node_id; }\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n protected:\n   // Clone function implementation as pure virtual method\n@@ -1185,9 +1178,7 @@ class Lifetime : public TypeParamBound\n \n   LifetimeType get_lifetime_type () { return lifetime_type; }\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override final { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   std::string get_lifetime_name () const { return lifetime_name; }\n \n@@ -1217,7 +1208,7 @@ class GenericParam\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n   NodeId get_node_id () { return node_id; }\n \n@@ -1270,9 +1261,7 @@ class LifetimeParam : public GenericParam\n \n   void accept_vis (ASTVisitor &vis) override;\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override final { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1342,7 +1331,7 @@ class InherentImplItem\n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n };\n \n // Abstract base class for items used in a trait impl\n@@ -1517,9 +1506,7 @@ class MacroInvocationSemi : public MacroItem,\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n   std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   MacroInvocationSemi *clone_macro_invocation_semi_impl () const"}, {"sha": "88e45fef3303b81dd41cf2221d914a1ec53e4962", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 37, "deletions": 72, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -65,8 +65,7 @@ class LiteralExpr : public ExprWithoutBlock\n     return std::unique_ptr<LiteralExpr> (clone_literal_expr_impl ());\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   Literal get_literal () const { return literal; }\n \n@@ -243,8 +242,7 @@ class OperatorExpr : public ExprWithoutBlock\n   OperatorExpr &operator= (OperatorExpr &&other) = default;\n \n public:\n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   // Invalid if expr is null, so base stripping on that.\n   void mark_for_strip () override { main_or_left_expr = nullptr; }\n@@ -895,8 +893,7 @@ class GroupedExpr : public ExprWithoutBlock\n   GroupedExpr (GroupedExpr &&other) = default;\n   GroupedExpr &operator= (GroupedExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1139,8 +1136,7 @@ class ArrayExpr : public ExprWithoutBlock\n   ArrayExpr (ArrayExpr &&other) = default;\n   ArrayExpr &operator= (ArrayExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1223,8 +1219,7 @@ class ArrayIndexExpr : public ExprWithoutBlock\n   ArrayIndexExpr (ArrayIndexExpr &&other) = default;\n   ArrayIndexExpr &operator= (ArrayIndexExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1337,8 +1332,7 @@ class TupleExpr : public ExprWithoutBlock\n   /* Note: syntactically, can disambiguate single-element tuple from parens with\n    * comma, i.e. (0,) rather than (0) */\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1422,8 +1416,7 @@ class TupleIndexExpr : public ExprWithoutBlock\n   TupleIndexExpr (TupleIndexExpr &&other) = default;\n   TupleIndexExpr &operator= (TupleIndexExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1512,8 +1505,7 @@ class StructExprStruct : public StructExpr\n       inner_attrs (std::move (inner_attribs)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1600,7 +1592,7 @@ class StructExprField\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n   NodeId get_node_id () const { return node_id; }\n \n@@ -1628,8 +1620,7 @@ class StructExprFieldIdentifier : public StructExprField\n \n   std::string as_string () const override { return field_name; }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1703,8 +1694,7 @@ class StructExprFieldIdentifierValue : public StructExprFieldWithVal\n \n   std::string get_field_name () const { return field_name; }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1734,8 +1724,7 @@ class StructExprFieldIndexValue : public StructExprFieldWithVal\n \n   TupleIndex get_index () const { return index; }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -1913,8 +1902,7 @@ class StructExprTuple : public StructExpr\n   StructExprTuple (StructExprTuple &&other) = default;\n   StructExprTuple &operator= (StructExprTuple &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1950,8 +1938,7 @@ class StructExprUnit : public StructExpr\n       locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2022,7 +2009,7 @@ class EnumExprField\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n protected:\n   // Clone function implementation as pure virtual method\n@@ -2044,8 +2031,7 @@ class EnumExprFieldIdentifier : public EnumExprField\n \n   std::string as_string () const override { return field_name; }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2113,8 +2099,7 @@ class EnumExprFieldIdentifierValue : public EnumExprFieldWithVal\n \n   void accept_vis (ASTVisitor &vis) override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2144,8 +2129,7 @@ class EnumExprFieldIndexValue : public EnumExprFieldWithVal\n \n   void accept_vis (ASTVisitor &vis) override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -2199,8 +2183,7 @@ class EnumExprStruct : public EnumVariantExpr\n   EnumExprStruct (EnumExprStruct &&other) = default;\n   EnumExprStruct &operator= (EnumExprStruct &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2263,8 +2246,7 @@ class EnumExprTuple : public EnumVariantExpr\n   EnumExprTuple (EnumExprTuple &&other) = default;\n   EnumExprTuple &operator= (EnumExprTuple &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2302,8 +2284,7 @@ class EnumExprFieldless : public EnumVariantExpr\n       locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2381,8 +2362,7 @@ class CallExpr : public ExprWithoutBlock\n   // Returns whether function call has parameters.\n   bool has_params () const { return !params.empty (); }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2491,8 +2471,7 @@ class MethodCallExpr : public ExprWithoutBlock\n   MethodCallExpr (MethodCallExpr &&other) = default;\n   MethodCallExpr &operator= (MethodCallExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2594,8 +2573,7 @@ class FieldAccessExpr : public ExprWithoutBlock\n   FieldAccessExpr (FieldAccessExpr &&other) = default;\n   FieldAccessExpr &operator= (FieldAccessExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2733,8 +2711,7 @@ class ClosureExpr : public ExprWithoutBlock\n public:\n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<ClosureParam> &get_params () const { return params; }\n@@ -2898,8 +2875,7 @@ class BlockExpr : public ExprWithBlock\n     return std::unique_ptr<BlockExpr> (clone_block_expr_impl ());\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3075,8 +3051,7 @@ class ContinueExpr : public ExprWithoutBlock\n       locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3165,8 +3140,7 @@ class BreakExpr : public ExprWithoutBlock\n   BreakExpr (BreakExpr &&other) = default;\n   BreakExpr &operator= (BreakExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3210,8 +3184,7 @@ class RangeExpr : public ExprWithoutBlock\n   RangeExpr (Location locus) : locus (locus) {}\n \n public:\n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   // should never be called - error if called\n   void set_outer_attrs (std::vector<Attribute> /* new_attrs */) override\n@@ -3657,8 +3630,7 @@ class ReturnExpr : public ExprWithoutBlock\n   ReturnExpr (ReturnExpr &&other) = default;\n   ReturnExpr &operator= (ReturnExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3740,8 +3712,7 @@ class UnsafeBlockExpr : public ExprWithBlock\n   UnsafeBlockExpr (UnsafeBlockExpr &&other) = default;\n   UnsafeBlockExpr &operator= (UnsafeBlockExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3862,8 +3833,7 @@ class BaseLoopExpr : public ExprWithBlock\n \n   LoopLabel &get_loop_label () { return loop_label; }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   // Invalid if loop block is null, so base stripping on that.\n   void mark_for_strip () override { loop_block = nullptr; }\n@@ -4187,8 +4157,7 @@ class IfExpr : public ExprWithBlock\n    * vector of else ifs - i.e. not like a switch statement. TODO - is this a\n    * better approach? or does it not parse correctly and have downsides? */\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -4430,8 +4399,7 @@ class IfLetExpr : public ExprWithBlock\n     return std::unique_ptr<IfLetExpr> (clone_if_let_expr_impl ());\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -5049,8 +5017,7 @@ class MatchExpr : public ExprWithBlock\n   MatchExpr (MatchExpr &&other) = default;\n   MatchExpr &operator= (MatchExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -5136,8 +5103,7 @@ class AwaitExpr : public ExprWithoutBlock\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -5218,8 +5184,7 @@ class AsyncBlockExpr : public ExprWithBlock\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "dcfc3d1d6b45d48c076ab7ad3d3a0f9a524cf1fe", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -130,9 +130,7 @@ class TypeParam : public GenericParam\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override final { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -889,9 +887,7 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   NodeId get_node_id () const { return node_id; }\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object\n@@ -1080,7 +1076,7 @@ class Module : public VisItem\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   // Invalid if name is empty, so base stripping on that.\n   void mark_for_strip () override { module_name = \"\"; }\n@@ -1127,7 +1123,7 @@ class ExternCrate : public VisItem\n       as_clause_name (std::move (as_clause_name)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1399,7 +1395,7 @@ class UseDeclaration : public VisItem\n   UseDeclaration (UseDeclaration &&other) = default;\n   UseDeclaration &operator= (UseDeclaration &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1536,9 +1532,7 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n   Function (Function &&other) = default;\n   Function &operator= (Function &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1687,7 +1681,7 @@ class TypeAlias : public VisItem, public TraitImplItem\n   TypeAlias (TypeAlias &&other) = default;\n   TypeAlias &operator= (TypeAlias &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1760,9 +1754,7 @@ class Struct : public VisItem\n   // Returns whether struct has a where clause.\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const final { return get_locus (); };\n+  Location get_locus () const override final { return locus; }\n \n   // Invalid if name is empty, so base stripping on that.\n   void mark_for_strip () override { struct_name = \"\"; }\n@@ -2378,7 +2370,7 @@ class Enum : public VisItem\n   Enum (Enum &&other) = default;\n   Enum &operator= (Enum &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2482,7 +2474,7 @@ class Union : public VisItem\n   Union (Union &&other) = default;\n   Union &operator= (Union &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2592,9 +2584,7 @@ class ConstantItem : public VisItem,\n    * as identifier) constant. */\n   bool is_unnamed () const { return identifier == \"_\"; }\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -2706,7 +2696,7 @@ class StaticItem : public VisItem\n   StaticItem (StaticItem &&other) = default;\n   StaticItem &operator= (StaticItem &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3497,7 +3487,7 @@ class Trait : public VisItem\n   Trait (Trait &&other) = default;\n   Trait &operator= (Trait &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -3585,7 +3575,7 @@ class Impl : public VisItem\n   // Returns whether impl has inner attributes.\n   bool has_inner_attrs () const { return !inner_attrs.empty (); }\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   // Invalid if trait type is null, so base stripping on that.\n   void mark_for_strip () override { trait_type = nullptr; }\n@@ -3861,7 +3851,7 @@ class ExternalItem\n \n   virtual std::string as_string () const;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n@@ -4350,7 +4340,7 @@ class ExternBlock : public VisItem\n   ExternBlock (ExternBlock &&other) = default;\n   ExternBlock &operator= (ExternBlock &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "0fb16d61fe21699984bf8c4ef86ce54892b6c92d", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -345,6 +345,8 @@ class MacroRulesDefinition : public MacroItem\n   std::vector<MacroRule> &get_macro_rules () { return rules; }\n   const std::vector<MacroRule> &get_macro_rules () const { return rules; }\n \n+  Location get_locus () const override final { return locus; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -373,8 +375,7 @@ class MacroInvocation : public TypeNoBounds,\n       invoc_data (std::move (invoc_data)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "c042a8f1ff1134c2c6042aa39c29bf69319df7f7", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -357,8 +357,7 @@ class PathInExpression : public PathPattern, public PathExpr\n     return convert_to_simple_path (has_opening_scope_resolution);\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -740,8 +739,7 @@ class TypePath : public TypeNoBounds\n   // Creates a trait bound with a clone of this type path as its only element.\n   TraitBound *to_trait_bound (bool in_parens) const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -885,8 +883,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n \t\t\t\t      {}, Location ());\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1023,8 +1020,7 @@ class QualifiedPathInType : public TypeNoBounds\n     return segments;\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n };\n } // namespace AST\n } // namespace Rust"}, {"sha": "7fd1fa50aa425d57c6c0683d95ad6960004cc1f4", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -51,8 +51,7 @@ class LiteralPattern : public Pattern\n       has_minus (has_minus), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -134,8 +133,7 @@ class IdentifierPattern : public Pattern\n   IdentifierPattern (IdentifierPattern &&other) = default;\n   IdentifierPattern &operator= (IdentifierPattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -170,8 +168,7 @@ class WildcardPattern : public Pattern\n \n   WildcardPattern (Location locus) : locus (locus) {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -347,8 +344,7 @@ class RangePattern : public Pattern\n   RangePattern (RangePattern &&other) = default;\n   RangePattern &operator= (RangePattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -412,8 +408,7 @@ class ReferencePattern : public Pattern\n   ReferencePattern (ReferencePattern &&other) = default;\n   ReferencePattern &operator= (ReferencePattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -806,7 +801,6 @@ class StructPattern : public Pattern\n   bool has_struct_pattern_elems () const { return !elems.is_empty (); }\n \n   Location get_locus () const { return path.get_locus (); }\n-  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1028,7 +1022,6 @@ class TupleStructPattern : public Pattern\n   TupleStructPattern &operator= (TupleStructPattern &&other) = default;\n \n   Location get_locus () const { return path.get_locus (); }\n-  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1280,8 +1273,7 @@ class TuplePattern : public Pattern\n     return *this;\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1336,8 +1328,7 @@ class GroupedPattern : public Pattern\n   GroupedPattern (GroupedPattern &&other) = default;\n   GroupedPattern &operator= (GroupedPattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1394,8 +1385,7 @@ class SlicePattern : public Pattern\n   SlicePattern (SlicePattern &&other) = default;\n   SlicePattern &operator= (SlicePattern &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "4f7399ef6ab27166ccd0dd880420d45e83d985c7", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -38,9 +38,7 @@ class EmptyStmt : public Stmt\n \n   EmptyStmt (Location locus) : locus (locus) {}\n \n-  Location get_locus_slow () const final override { return get_locus (); }\n-\n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -137,9 +135,7 @@ class LetStmt : public Stmt\n   LetStmt (LetStmt &&other) = default;\n   LetStmt &operator= (LetStmt &&other) = default;\n \n-  Location get_locus_slow () const final override { return get_locus (); }\n-\n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -188,9 +184,7 @@ class ExprStmt : public Stmt\n   Location locus;\n \n public:\n-  Location get_locus_slow () const final override { return get_locus (); }\n-\n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   ExprStmt (Location locus) : locus (locus) {}"}, {"sha": "fd695649d7bc9ac32b95a0823773ffac5453e2d8", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -68,9 +68,7 @@ class TraitBound : public TypeParamBound\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override final { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -144,8 +142,7 @@ class ImplTraitType : public Type\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -214,8 +211,7 @@ class TraitObjectType : public Type\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -283,8 +279,7 @@ class ParenthesisedType : public TypeNoBounds\n     return type_in_parens->to_trait_bound (true);\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -317,8 +312,7 @@ class ImplTraitTypeOneBound : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -363,8 +357,7 @@ class TraitObjectTypeOneBound : public TypeNoBounds\n     return new TraitBound (trait_bound);\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -419,8 +412,7 @@ class TupleType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -460,8 +452,7 @@ class NeverType : public TypeNoBounds\n \n   std::string as_string () const override { return \"! (never type)\"; }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n };\n@@ -513,8 +504,7 @@ class RawPointerType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -581,8 +571,7 @@ class ReferenceType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -643,8 +632,7 @@ class ArrayType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -704,8 +692,7 @@ class SliceType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -745,8 +732,7 @@ class InferredType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n };\n@@ -923,8 +909,7 @@ class BareFunctionType : public TypeNoBounds\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const final override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "ac33ccd247d93d5a30c69c969dcc98404c87d6fc", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -611,7 +611,7 @@ class CompileExpr : public HIRCompileBase\n     if (!ctx->get_tyctx ()->lookup_type (\n \t  expr.get_receiver_expr ()->get_mappings ().get_hirid (), &receiver))\n       {\n-\trust_error_at (expr.get_receiver_expr ()->get_locus_slow (),\n+\trust_error_at (expr.get_receiver_expr ()->get_locus (),\n \t\t       \"unresolved type for receiver\");\n \treturn;\n       }\n@@ -772,7 +772,7 @@ class CompileExpr : public HIRCompileBase\n \n \tBvariable *loop_result_holder = ctx->peek_loop_context ();\n \tBexpression *result_reference = ctx->get_backend ()->var_expression (\n-\t  loop_result_holder, expr.get_expr ()->get_locus_slow ());\n+\t  loop_result_holder, expr.get_expr ()->get_locus ());\n \n \tBstatement *assignment = ctx->get_backend ()->assignment_statement (\n \t  fnctx.fndecl, result_reference, compiled_expr, expr.get_locus ());"}, {"sha": "0a65b155e1dc967b0d4451254337ec5383a5d2db", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -352,7 +352,7 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n \t    {\n \t      Bexpression *result_reference\n \t\t= ctx->get_backend ()->var_expression (\n-\t\t  result, expr.get_final_expr ()->get_locus_slow ());\n+\t\t  result, expr.get_final_expr ()->get_locus ());\n \n \t      Bstatement *assignment\n \t\t= ctx->get_backend ()->assignment_statement (fnctx.fndecl,\n@@ -490,7 +490,7 @@ HIRCompileBase::compile_function_body (\n \n \t      auto ret = ctx->get_backend ()->return_statement (\n \t\tfndecl, retstmts,\n-\t\tfunction_body->get_final_expr ()->get_locus_slow ());\n+\t\tfunction_body->get_final_expr ()->get_locus ());\n \t      ctx->add_statement (ret);\n \t    }\n \t  else"}, {"sha": "407992d828fef67844c70c2133f1286a2175729f", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 144, "deletions": 155, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -49,7 +49,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = field.get_field_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n \n \t// if nothing else happens, increment\n@@ -75,7 +75,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = field.get_field_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n \n \t// if nothing else happens, increment\n@@ -101,13 +101,13 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &pattern = param.get_pattern ();\n \tpattern->accept_vis (*this);\n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \n \tauto &type = param.get_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n \n \t// increment\n@@ -124,7 +124,7 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -134,7 +134,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = binding.get_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n   }\n@@ -144,8 +144,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = path_type.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     if (path_type.has_as_clause ())\n       {\n@@ -174,15 +173,15 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &pattern = param.get_pattern ();\n \tpattern->accept_vis (*this);\n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \n \tif (param.has_type_given ())\n \t  {\n \t    auto &type = param.get_type ();\n \t    type->accept_vis (*this);\n \t    if (type->is_marked_for_strip ())\n-\t      rust_error_at (type->get_locus_slow (),\n+\t      rust_error_at (type->get_locus (),\n \t\t\t     \"cannot strip type in this position\");\n \t  }\n \n@@ -198,7 +197,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = self_param.get_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n     /* TODO: maybe check for invariants being violated - e.g. both type and\n@@ -227,7 +226,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &return_type = decl.get_return_type ();\n \treturn_type->accept_vis (*this);\n \tif (return_type->is_marked_for_strip ())\n-\t  rust_error_at (return_type->get_locus_slow (),\n+\t  rust_error_at (return_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -255,7 +254,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &return_type = decl.get_return_type ();\n \treturn_type->accept_vis (*this);\n \tif (return_type->is_marked_for_strip ())\n-\t  rust_error_at (return_type->get_locus_slow (),\n+\t  rust_error_at (return_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -363,7 +362,7 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -372,7 +371,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &return_type = type_path_function.get_return_type ();\n \treturn_type->accept_vis (*this);\n \tif (return_type->is_marked_for_strip ())\n-\t  rust_error_at (return_type->get_locus_slow (),\n+\t  rust_error_at (return_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n   }\n@@ -447,7 +446,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &borrowed_expr = expr.get_borrowed_expr ();\n     borrowed_expr->accept_vis (*this);\n     if (borrowed_expr->is_marked_for_strip ())\n-      rust_error_at (borrowed_expr->get_locus_slow (),\n+      rust_error_at (borrowed_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -467,7 +466,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &dereferenced_expr = expr.get_dereferenced_expr ();\n     dereferenced_expr->accept_vis (*this);\n     if (dereferenced_expr->is_marked_for_strip ())\n-      rust_error_at (dereferenced_expr->get_locus_slow (),\n+      rust_error_at (dereferenced_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -487,7 +486,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &propagating_expr = expr.get_propagating_expr ();\n     propagating_expr->accept_vis (*this);\n     if (propagating_expr->is_marked_for_strip ())\n-      rust_error_at (propagating_expr->get_locus_slow (),\n+      rust_error_at (propagating_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -507,7 +506,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &negated_expr = expr.get_negated_expr ();\n     negated_expr->accept_vis (*this);\n     if (negated_expr->is_marked_for_strip ())\n-      rust_error_at (negated_expr->get_locus_slow (),\n+      rust_error_at (negated_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -525,12 +524,12 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (expr.get_left_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_left_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_left_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed \"\n \t\t     \"before binary op exprs\");\n     if (expr.get_right_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_right_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_right_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -548,12 +547,12 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (expr.get_left_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_left_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_left_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed \"\n \t\t     \"before binary op exprs\");\n     if (expr.get_right_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_right_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_right_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -571,12 +570,12 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (expr.get_left_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_left_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_left_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed \"\n \t\t     \"before binary op exprs\");\n     if (expr.get_right_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_right_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_right_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -592,16 +591,15 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (casted_expr->is_marked_for_strip ())\n-      rust_error_at (casted_expr->get_locus_slow (),\n+      rust_error_at (casted_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed before cast exprs\");\n \n     // TODO: strip sub-types of type\n     auto &type = expr.get_type_to_cast_to ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n   }\n   void visit (AST::AssignmentExpr &expr) override\n   {\n@@ -617,12 +615,12 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (expr.get_left_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_left_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_left_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed \"\n \t\t     \"before binary op exprs\");\n     if (expr.get_right_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_right_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_right_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -640,12 +638,12 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (expr.get_left_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_left_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_left_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed \"\n \t\t     \"before binary op exprs\");\n     if (expr.get_right_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_right_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_right_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -674,7 +672,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &inner_expr = expr.get_expr_in_parens ();\n     inner_expr->accept_vis (*this);\n     if (inner_expr->is_marked_for_strip ())\n-      rust_error_at (inner_expr->get_locus_slow (),\n+      rust_error_at (inner_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -695,14 +693,14 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &copied_expr = elems.get_elem_to_copy ();\n     copied_expr->accept_vis (*this);\n     if (copied_expr->is_marked_for_strip ())\n-      rust_error_at (copied_expr->get_locus_slow (),\n+      rust_error_at (copied_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     auto &copy_count = elems.get_num_copies ();\n     copy_count->accept_vis (*this);\n     if (copy_count->is_marked_for_strip ())\n-      rust_error_at (copy_count->get_locus_slow (),\n+      rust_error_at (copy_count->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -748,14 +746,14 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &array_expr = expr.get_array_expr ();\n     array_expr->accept_vis (*this);\n     if (array_expr->is_marked_for_strip ())\n-      rust_error_at (array_expr->get_locus_slow (),\n+      rust_error_at (array_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     auto &index_expr = expr.get_index_expr ();\n     index_expr->accept_vis (*this);\n     if (index_expr->is_marked_for_strip ())\n-      rust_error_at (index_expr->get_locus_slow (),\n+      rust_error_at (index_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -801,7 +799,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &tuple_expr = expr.get_tuple_expr ();\n     tuple_expr->accept_vis (*this);\n     if (tuple_expr->is_marked_for_strip ())\n-      rust_error_at (tuple_expr->get_locus_slow (),\n+      rust_error_at (tuple_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -842,7 +840,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &value = field.get_value ();\n     value->accept_vis (*this);\n     if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus_slow (),\n+      rust_error_at (value->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -853,7 +851,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &value = field.get_value ();\n     value->accept_vis (*this);\n     if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus_slow (),\n+      rust_error_at (value->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -900,7 +898,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &base_struct_expr = expr.get_struct_base ().get_base_struct ();\n \tbase_struct_expr->accept_vis (*this);\n \tif (base_struct_expr->is_marked_for_strip ())\n-\t  rust_error_at (base_struct_expr->get_locus_slow (),\n+\t  rust_error_at (base_struct_expr->get_locus (),\n \t\t\t \"cannot strip expression in this position - outer \"\n \t\t\t \"attributes not allowed\");\n       }\n@@ -937,7 +935,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &base_struct_expr = expr.get_struct_base ().get_base_struct ();\n     base_struct_expr->accept_vis (*this);\n     if (base_struct_expr->is_marked_for_strip ())\n-      rust_error_at (base_struct_expr->get_locus_slow (),\n+      rust_error_at (base_struct_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -999,7 +997,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &value = field.get_value ();\n     value->accept_vis (*this);\n     if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus_slow (),\n+      rust_error_at (value->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1010,7 +1008,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &value = field.get_value ();\n     value->accept_vis (*this);\n     if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus_slow (),\n+      rust_error_at (value->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1093,7 +1091,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &function = expr.get_function_expr ();\n     function->accept_vis (*this);\n     if (function->is_marked_for_strip ())\n-      rust_error_at (function->get_locus_slow (),\n+      rust_error_at (function->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n@@ -1117,7 +1115,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &receiver = expr.get_receiver_expr ();\n     receiver->accept_vis (*this);\n     if (receiver->is_marked_for_strip ())\n-      rust_error_at (receiver->get_locus_slow (),\n+      rust_error_at (receiver->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n@@ -1145,7 +1143,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &receiver = expr.get_receiver_expr ();\n     receiver->accept_vis (*this);\n     if (receiver->is_marked_for_strip ())\n-      rust_error_at (receiver->get_locus_slow (),\n+      rust_error_at (receiver->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1167,7 +1165,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &definition_expr = expr.get_definition_expr ();\n     definition_expr->accept_vis (*this);\n     if (definition_expr->is_marked_for_strip ())\n-      rust_error_at (definition_expr->get_locus_slow (),\n+      rust_error_at (definition_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1222,14 +1220,13 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = expr.get_return_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     // can't strip expression itself, but can strip sub-expressions\n     auto &definition_block = expr.get_definition_block ();\n     definition_block->accept_vis (*this);\n     if (definition_block->is_marked_for_strip ())\n-      rust_error_at (definition_block->get_locus_slow (),\n+      rust_error_at (definition_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1263,7 +1260,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tbreak_expr->accept_vis (*this);\n \n \tif (break_expr->is_marked_for_strip ())\n-\t  rust_error_at (break_expr->get_locus_slow (),\n+\t  rust_error_at (break_expr->get_locus (),\n \t\t\t \"cannot strip expression in this position - outer \"\n \t\t\t \"attributes not allowed\");\n       }\n@@ -1282,12 +1279,12 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (expr.get_from_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_from_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_from_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed \"\n \t\t     \"before range exprs\");\n     if (expr.get_to_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_to_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_to_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1303,7 +1300,7 @@ class AttrVisitor : public AST::ASTVisitor\n     from_expr->accept_vis (*this);\n \n     if (from_expr->is_marked_for_strip ())\n-      rust_error_at (from_expr->get_locus_slow (),\n+      rust_error_at (from_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed before range exprs\");\n   }\n@@ -1319,7 +1316,7 @@ class AttrVisitor : public AST::ASTVisitor\n     to_expr->accept_vis (*this);\n \n     if (to_expr->is_marked_for_strip ())\n-      rust_error_at (to_expr->get_locus_slow (),\n+      rust_error_at (to_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1341,12 +1338,12 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // ensure that they are not marked for strip\n     if (expr.get_from_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_from_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_from_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes are never allowed \"\n \t\t     \"before range exprs\");\n     if (expr.get_to_expr ()->is_marked_for_strip ())\n-      rust_error_at (expr.get_to_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_to_expr ()->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1362,7 +1359,7 @@ class AttrVisitor : public AST::ASTVisitor\n     to_expr->accept_vis (*this);\n \n     if (to_expr->is_marked_for_strip ())\n-      rust_error_at (to_expr->get_locus_slow (),\n+      rust_error_at (to_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1386,7 +1383,7 @@ class AttrVisitor : public AST::ASTVisitor\n \treturned_expr->accept_vis (*this);\n \n \tif (returned_expr->is_marked_for_strip ())\n-\t  rust_error_at (returned_expr->get_locus_slow (),\n+\t  rust_error_at (returned_expr->get_locus (),\n \t\t\t \"cannot strip expression in this position - outer \"\n \t\t\t \"attributes not allowed\");\n       }\n@@ -1410,7 +1407,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &block_expr = expr.get_block_expr ();\n     block_expr->accept_vis (*this);\n     if (block_expr->is_marked_for_strip ())\n-      rust_error_at (block_expr->get_locus_slow (),\n+      rust_error_at (block_expr->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1428,7 +1425,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &loop_block = expr.get_loop_block ();\n     loop_block->accept_vis (*this);\n     if (loop_block->is_marked_for_strip ())\n-      rust_error_at (loop_block->get_locus_slow (),\n+      rust_error_at (loop_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1446,15 +1443,15 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &predicate_expr = expr.get_predicate_expr ();\n     predicate_expr->accept_vis (*this);\n     if (predicate_expr->is_marked_for_strip ())\n-      rust_error_at (predicate_expr->get_locus_slow (),\n+      rust_error_at (predicate_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip block itself, but can strip sub-expressions\n     auto &loop_block = expr.get_loop_block ();\n     loop_block->accept_vis (*this);\n     if (loop_block->is_marked_for_strip ())\n-      rust_error_at (loop_block->get_locus_slow (),\n+      rust_error_at (loop_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1472,23 +1469,23 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \tpattern->accept_vis (*this);\n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n       }\n \n     // can't strip scrutinee expr itself, but can strip sub-expressions\n     auto &scrutinee_expr = expr.get_scrutinee_expr ();\n     scrutinee_expr->accept_vis (*this);\n     if (scrutinee_expr->is_marked_for_strip ())\n-      rust_error_at (scrutinee_expr->get_locus_slow (),\n+      rust_error_at (scrutinee_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip block itself, but can strip sub-expressions\n     auto &loop_block = expr.get_loop_block ();\n     loop_block->accept_vis (*this);\n     if (loop_block->is_marked_for_strip ())\n-      rust_error_at (loop_block->get_locus_slow (),\n+      rust_error_at (loop_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1506,22 +1503,22 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &pattern = expr.get_pattern ();\n     pattern->accept_vis (*this);\n     if (pattern->is_marked_for_strip ())\n-      rust_error_at (pattern->get_locus_slow (),\n+      rust_error_at (pattern->get_locus (),\n \t\t     \"cannot strip pattern in this position\");\n \n     // can't strip scrutinee expr itself, but can strip sub-expressions\n     auto &iterator_expr = expr.get_iterator_expr ();\n     iterator_expr->accept_vis (*this);\n     if (iterator_expr->is_marked_for_strip ())\n-      rust_error_at (iterator_expr->get_locus_slow (),\n+      rust_error_at (iterator_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip block itself, but can strip sub-expressions\n     auto &loop_block = expr.get_loop_block ();\n     loop_block->accept_vis (*this);\n     if (loop_block->is_marked_for_strip ())\n-      rust_error_at (loop_block->get_locus_slow (),\n+      rust_error_at (loop_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1542,15 +1539,15 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &condition_expr = expr.get_condition_expr ();\n     condition_expr->accept_vis (*this);\n     if (condition_expr->is_marked_for_strip ())\n-      rust_error_at (condition_expr->get_locus_slow (),\n+      rust_error_at (condition_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1568,23 +1565,23 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &condition_expr = expr.get_condition_expr ();\n     condition_expr->accept_vis (*this);\n     if (condition_expr->is_marked_for_strip ())\n-      rust_error_at (condition_expr->get_locus_slow (),\n+      rust_error_at (condition_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip else block itself, but can strip sub-expressions\n     auto &else_block = expr.get_else_block ();\n     else_block->accept_vis (*this);\n     if (else_block->is_marked_for_strip ())\n-      rust_error_at (else_block->get_locus_slow (),\n+      rust_error_at (else_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1602,23 +1599,23 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &condition_expr = expr.get_condition_expr ();\n     condition_expr->accept_vis (*this);\n     if (condition_expr->is_marked_for_strip ())\n-      rust_error_at (condition_expr->get_locus_slow (),\n+      rust_error_at (condition_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if expr itself, but can strip sub-expressions\n     auto &conseq_if_expr = expr.get_conseq_if_expr ();\n     conseq_if_expr->accept_vis (*this);\n     if (conseq_if_expr->is_marked_for_strip ())\n-      rust_error_at (conseq_if_expr->get_locus_slow (),\n+      rust_error_at (conseq_if_expr->get_locus (),\n \t\t     \"cannot strip consequent if expression in this \"\n \t\t     \"position - outer attributes not allowed\");\n   }\n@@ -1636,23 +1633,23 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &condition_expr = expr.get_condition_expr ();\n     condition_expr->accept_vis (*this);\n     if (condition_expr->is_marked_for_strip ())\n-      rust_error_at (condition_expr->get_locus_slow (),\n+      rust_error_at (condition_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if let expr itself, but can strip sub-expressions\n     auto &conseq_if_let_expr = expr.get_conseq_if_let_expr ();\n     conseq_if_let_expr->accept_vis (*this);\n     if (conseq_if_let_expr->is_marked_for_strip ())\n-      rust_error_at (conseq_if_let_expr->get_locus_slow (),\n+      rust_error_at (conseq_if_let_expr->get_locus (),\n \t\t     \"cannot strip consequent if let expression in this \"\n \t\t     \"position - outer attributes not \"\n \t\t     \"allowed\");\n@@ -1671,23 +1668,23 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \tpattern->accept_vis (*this);\n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n       }\n \n     // can't strip value expr itself, but can strip sub-expressions\n     auto &value_expr = expr.get_value_expr ();\n     value_expr->accept_vis (*this);\n     if (value_expr->is_marked_for_strip ())\n-      rust_error_at (value_expr->get_locus_slow (),\n+      rust_error_at (value_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1705,31 +1702,31 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \tpattern->accept_vis (*this);\n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n       }\n \n     // can't strip value expr itself, but can strip sub-expressions\n     auto &value_expr = expr.get_value_expr ();\n     value_expr->accept_vis (*this);\n     if (value_expr->is_marked_for_strip ())\n-      rust_error_at (value_expr->get_locus_slow (),\n+      rust_error_at (value_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip else block itself, but can strip sub-expressions\n     auto &else_block = expr.get_else_block ();\n     else_block->accept_vis (*this);\n     if (else_block->is_marked_for_strip ())\n-      rust_error_at (else_block->get_locus_slow (),\n+      rust_error_at (else_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1747,31 +1744,31 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \tpattern->accept_vis (*this);\n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n       }\n \n     // can't strip value expr itself, but can strip sub-expressions\n     auto &value_expr = expr.get_value_expr ();\n     value_expr->accept_vis (*this);\n     if (value_expr->is_marked_for_strip ())\n-      rust_error_at (value_expr->get_locus_slow (),\n+      rust_error_at (value_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if expr itself, but can strip sub-expressions\n     auto &conseq_if_expr = expr.get_conseq_if_expr ();\n     conseq_if_expr->accept_vis (*this);\n     if (conseq_if_expr->is_marked_for_strip ())\n-      rust_error_at (conseq_if_expr->get_locus_slow (),\n+      rust_error_at (conseq_if_expr->get_locus (),\n \t\t     \"cannot strip consequent if expression in this \"\n \t\t     \"position - outer attributes not allowed\");\n   }\n@@ -1789,31 +1786,31 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \tpattern->accept_vis (*this);\n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n       }\n \n     // can't strip value expr itself, but can strip sub-expressions\n     auto &value_expr = expr.get_value_expr ();\n     value_expr->accept_vis (*this);\n     if (value_expr->is_marked_for_strip ())\n-      rust_error_at (value_expr->get_locus_slow (),\n+      rust_error_at (value_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if block itself, but can strip sub-expressions\n     auto &if_block = expr.get_if_block ();\n     if_block->accept_vis (*this);\n     if (if_block->is_marked_for_strip ())\n-      rust_error_at (if_block->get_locus_slow (),\n+      rust_error_at (if_block->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n     // can't strip if let expr itself, but can strip sub-expressions\n     auto &conseq_if_let_expr = expr.get_conseq_if_let_expr ();\n     conseq_if_let_expr->accept_vis (*this);\n     if (conseq_if_let_expr->is_marked_for_strip ())\n-      rust_error_at (conseq_if_let_expr->get_locus_slow (),\n+      rust_error_at (conseq_if_let_expr->get_locus (),\n \t\t     \"cannot strip consequent if let expression in this \"\n \t\t     \"position - outer attributes not \"\n \t\t     \"allowed\");\n@@ -1840,7 +1837,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &scrutinee_expr = expr.get_scrutinee_expr ();\n     scrutinee_expr->accept_vis (*this);\n     if (scrutinee_expr->is_marked_for_strip ())\n-      rust_error_at (scrutinee_expr->get_locus_slow (),\n+      rust_error_at (scrutinee_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n \n@@ -1864,7 +1861,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t  {\n \t    pattern->accept_vis (*this);\n \t    if (pattern->is_marked_for_strip ())\n-\t      rust_error_at (pattern->get_locus_slow (),\n+\t      rust_error_at (pattern->get_locus (),\n \t\t\t     \"cannot strip pattern in this position\");\n \t  }\n \n@@ -1877,7 +1874,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t    auto &guard_expr = match_arm.get_guard_expr ();\n \t    guard_expr->accept_vis (*this);\n \t    if (guard_expr->is_marked_for_strip ())\n-\t      rust_error_at (guard_expr->get_locus_slow (),\n+\t      rust_error_at (guard_expr->get_locus (),\n \t\t\t     \"cannot strip expression in this position - outer \"\n \t\t\t     \"attributes not allowed\");\n \t  }\n@@ -1886,7 +1883,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &case_expr = match_case.get_expr ();\n \tcase_expr->accept_vis (*this);\n \tif (case_expr->is_marked_for_strip ())\n-\t  rust_error_at (case_expr->get_locus_slow (),\n+\t  rust_error_at (case_expr->get_locus (),\n \t\t\t \"cannot strip expression in this position - outer \"\n \t\t\t \"attributes not allowed\");\n \n@@ -1909,7 +1906,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &awaited_expr = expr.get_awaited_expr ();\n     awaited_expr->accept_vis (*this);\n     if (awaited_expr->is_marked_for_strip ())\n-      rust_error_at (awaited_expr->get_locus_slow (),\n+      rust_error_at (awaited_expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1927,7 +1924,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &block_expr = expr.get_block_expr ();\n     block_expr->accept_vis (*this);\n     if (block_expr->is_marked_for_strip ())\n-      rust_error_at (block_expr->get_locus_slow (),\n+      rust_error_at (block_expr->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -1948,7 +1945,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = param.get_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n   }\n@@ -1963,8 +1960,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = item.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     // don't strip directly, only components of bounds\n     for (auto &bound : item.get_type_param_bounds ())\n@@ -1998,7 +1994,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &return_type = method.get_return_type ();\n \treturn_type->accept_vis (*this);\n \tif (return_type->is_marked_for_strip ())\n-\t  rust_error_at (return_type->get_locus_slow (),\n+\t  rust_error_at (return_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -2011,7 +2007,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &block_expr = method.get_definition ();\n     block_expr->accept_vis (*this);\n     if (block_expr->is_marked_for_strip ())\n-      rust_error_at (block_expr->get_locus_slow (),\n+      rust_error_at (block_expr->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -2099,7 +2095,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &return_type = function.get_return_type ();\n \treturn_type->accept_vis (*this);\n \tif (return_type->is_marked_for_strip ())\n-\t  rust_error_at (return_type->get_locus_slow (),\n+\t  rust_error_at (return_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -2112,7 +2108,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &block_expr = function.get_definition ();\n     block_expr->accept_vis (*this);\n     if (block_expr->is_marked_for_strip ())\n-      rust_error_at (block_expr->get_locus_slow (),\n+      rust_error_at (block_expr->get_locus (),\n \t\t     \"cannot strip block expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -2136,8 +2132,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = type_alias.get_type_aliased ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n   }\n   void visit (AST::StructStruct &struct_item) override\n   {\n@@ -2235,7 +2230,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &expr = item.get_expr ();\n     expr->accept_vis (*this);\n     if (expr->is_marked_for_strip ())\n-      rust_error_at (expr->get_locus_slow (),\n+      rust_error_at (expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -2295,16 +2290,15 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = const_item.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     /* strip any internal sub-expressions - expression itself isn't\n      * allowed to have external attributes in this position so can't be\n      * stripped. */\n     auto &expr = const_item.get_expr ();\n     expr->accept_vis (*this);\n     if (expr->is_marked_for_strip ())\n-      rust_error_at (expr->get_locus_slow (),\n+      rust_error_at (expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -2322,16 +2316,15 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = static_item.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     /* strip any internal sub-expressions - expression itself isn't\n      * allowed to have external attributes in this position so can't be\n      * stripped. */\n     auto &expr = static_item.get_expr ();\n     expr->accept_vis (*this);\n     if (expr->is_marked_for_strip ())\n-      rust_error_at (expr->get_locus_slow (),\n+      rust_error_at (expr->get_locus (),\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n@@ -2355,7 +2348,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &block = item.get_definition ();\n \tblock->accept_vis (*this);\n \tif (block->is_marked_for_strip ())\n-\t  rust_error_at (block->get_locus_slow (),\n+\t  rust_error_at (block->get_locus (),\n \t\t\t \"cannot strip block expression in this \"\n \t\t\t \"position - outer attributes not allowed\");\n       }\n@@ -2380,7 +2373,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &block = item.get_definition ();\n \tblock->accept_vis (*this);\n \tif (block->is_marked_for_strip ())\n-\t  rust_error_at (block->get_locus_slow (),\n+\t  rust_error_at (block->get_locus (),\n \t\t\t \"cannot strip block expression in this \"\n \t\t\t \"position - outer attributes not allowed\");\n       }\n@@ -2399,8 +2392,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = item.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     /* strip any internal sub-expressions - expression itself isn't\n      * allowed to have external attributes in this position so can't be\n@@ -2410,7 +2402,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &expr = item.get_expr ();\n \texpr->accept_vis (*this);\n \tif (expr->is_marked_for_strip ())\n-\t  rust_error_at (expr->get_locus_slow (),\n+\t  rust_error_at (expr->get_locus (),\n \t\t\t \"cannot strip expression in this position - outer \"\n \t\t\t \"attributes not allowed\");\n       }\n@@ -2492,8 +2484,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = impl.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     if (impl.has_where_clause ())\n       expand_where_clause (impl.get_where_clause ());\n@@ -2526,8 +2517,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = impl.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n \n     auto &trait_path = impl.get_trait_path ();\n     visit (trait_path);\n@@ -2554,8 +2544,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &type = item.get_type ();\n     type->accept_vis (*this);\n     if (type->is_marked_for_strip ())\n-      rust_error_at (type->get_locus_slow (),\n-\t\t     \"cannot strip type in this position\");\n+      rust_error_at (type->get_locus (), \"cannot strip type in this position\");\n   }\n   void visit (AST::ExternalFunctionItem &item) override\n   {\n@@ -2589,7 +2578,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = param.get_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n \n \t// increment if nothing else happens\n@@ -2607,7 +2596,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &return_type = item.get_return_type ();\n \treturn_type->accept_vis (*this);\n \tif (return_type->is_marked_for_strip ())\n-\t  rust_error_at (return_type->get_locus_slow (),\n+\t  rust_error_at (return_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -2686,7 +2675,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &sub_pattern = pattern.get_pattern_to_bind ();\n     sub_pattern->accept_vis (*this);\n     if (sub_pattern->is_marked_for_strip ())\n-      rust_error_at (sub_pattern->get_locus_slow (),\n+      rust_error_at (sub_pattern->get_locus (),\n \t\t     \"cannot strip pattern in this position\");\n   }\n   void visit (AST::WildcardPattern &) override\n@@ -2724,7 +2713,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &sub_pattern = pattern.get_referenced_pattern ();\n     sub_pattern->accept_vis (*this);\n     if (sub_pattern->is_marked_for_strip ())\n-      rust_error_at (sub_pattern->get_locus_slow (),\n+      rust_error_at (sub_pattern->get_locus (),\n \t\t     \"cannot strip pattern in this position\");\n   }\n   void visit (AST::StructPatternFieldTuplePat &field) override\n@@ -2741,7 +2730,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &sub_pattern = field.get_index_pattern ();\n     sub_pattern->accept_vis (*this);\n     if (sub_pattern->is_marked_for_strip ())\n-      rust_error_at (sub_pattern->get_locus_slow (),\n+      rust_error_at (sub_pattern->get_locus (),\n \t\t     \"cannot strip pattern in this position\");\n   }\n   void visit (AST::StructPatternFieldIdentPat &field) override\n@@ -2758,7 +2747,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &sub_pattern = field.get_ident_pattern ();\n     sub_pattern->accept_vis (*this);\n     if (sub_pattern->is_marked_for_strip ())\n-      rust_error_at (sub_pattern->get_locus_slow (),\n+      rust_error_at (sub_pattern->get_locus (),\n \t\t     \"cannot strip pattern in this position\");\n   }\n   void visit (AST::StructPatternFieldIdent &field) override\n@@ -2805,7 +2794,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tpattern->accept_vis (*this);\n \n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \t// TODO: quit stripping now? or keep going?\n       }\n@@ -2818,7 +2807,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tlower_pattern->accept_vis (*this);\n \n \tif (lower_pattern->is_marked_for_strip ())\n-\t  rust_error_at (lower_pattern->get_locus_slow (),\n+\t  rust_error_at (lower_pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \t// TODO: quit stripping now? or keep going?\n       }\n@@ -2827,7 +2816,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tupper_pattern->accept_vis (*this);\n \n \tif (upper_pattern->is_marked_for_strip ())\n-\t  rust_error_at (upper_pattern->get_locus_slow (),\n+\t  rust_error_at (upper_pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \t// TODO: quit stripping now? or keep going?\n       }\n@@ -2851,7 +2840,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tpattern->accept_vis (*this);\n \n \tif (pattern->is_marked_for_strip ())\n-\t  rust_error_at (pattern->get_locus_slow (),\n+\t  rust_error_at (pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \t// TODO: quit stripping now? or keep going?\n       }\n@@ -2864,7 +2853,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tlower_pattern->accept_vis (*this);\n \n \tif (lower_pattern->is_marked_for_strip ())\n-\t  rust_error_at (lower_pattern->get_locus_slow (),\n+\t  rust_error_at (lower_pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \t// TODO: quit stripping now? or keep going?\n       }\n@@ -2873,7 +2862,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tupper_pattern->accept_vis (*this);\n \n \tif (upper_pattern->is_marked_for_strip ())\n-\t  rust_error_at (upper_pattern->get_locus_slow (),\n+\t  rust_error_at (upper_pattern->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \t// TODO: quit stripping now? or keep going?\n       }\n@@ -2891,7 +2880,7 @@ class AttrVisitor : public AST::ASTVisitor\n     pattern_in_parens->accept_vis (*this);\n \n     if (pattern_in_parens->is_marked_for_strip ())\n-      rust_error_at (pattern_in_parens->get_locus_slow (),\n+      rust_error_at (pattern_in_parens->get_locus (),\n \t\t     \"cannot strip pattern in this position\");\n   }\n   void visit (AST::SlicePattern &pattern) override\n@@ -2902,7 +2891,7 @@ class AttrVisitor : public AST::ASTVisitor\n \titem->accept_vis (*this);\n \n \tif (item->is_marked_for_strip ())\n-\t  rust_error_at (item->get_locus_slow (),\n+\t  rust_error_at (item->get_locus (),\n \t\t\t \"cannot strip pattern in this position\");\n \t// TODO: quit stripping now? or keep going?\n       }\n@@ -2926,7 +2915,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &pattern = stmt.get_pattern ();\n     pattern->accept_vis (*this);\n     if (pattern->is_marked_for_strip ())\n-      rust_error_at (pattern->get_locus_slow (),\n+      rust_error_at (pattern->get_locus (),\n \t\t     \"cannot strip pattern in this position\");\n \n     // similar for type\n@@ -2935,7 +2924,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = stmt.get_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n \n@@ -2947,7 +2936,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &init_expr = stmt.get_init_expr ();\n \tinit_expr->accept_vis (*this);\n \tif (init_expr->is_marked_for_strip ())\n-\t  rust_error_at (init_expr->get_locus_slow (),\n+\t  rust_error_at (init_expr->get_locus (),\n \t\t\t \"cannot strip expression in this position - outer \"\n \t\t\t \"attributes not allowed\");\n       }\n@@ -3016,7 +3005,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &inner_type = type.get_type_in_parens ();\n     inner_type->accept_vis (*this);\n     if (inner_type->is_marked_for_strip ())\n-      rust_error_at (inner_type->get_locus_slow (),\n+      rust_error_at (inner_type->get_locus (),\n \t\t     \"cannot strip type in this position\");\n   }\n   void visit (AST::ImplTraitTypeOneBound &type) override\n@@ -3037,7 +3026,7 @@ class AttrVisitor : public AST::ASTVisitor\n       {\n \telem_type->accept_vis (*this);\n \tif (elem_type->is_marked_for_strip ())\n-\t  rust_error_at (elem_type->get_locus_slow (),\n+\t  rust_error_at (elem_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n   }\n@@ -3051,7 +3040,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &pointed_type = type.get_type_pointed_to ();\n     pointed_type->accept_vis (*this);\n     if (pointed_type->is_marked_for_strip ())\n-      rust_error_at (pointed_type->get_locus_slow (),\n+      rust_error_at (pointed_type->get_locus (),\n \t\t     \"cannot strip type in this position\");\n   }\n   void visit (AST::ReferenceType &type) override\n@@ -3060,7 +3049,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &referenced_type = type.get_type_referenced ();\n     referenced_type->accept_vis (*this);\n     if (referenced_type->is_marked_for_strip ())\n-      rust_error_at (referenced_type->get_locus_slow (),\n+      rust_error_at (referenced_type->get_locus (),\n \t\t     \"cannot strip type in this position\");\n   }\n   void visit (AST::ArrayType &type) override\n@@ -3069,14 +3058,14 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &base_type = type.get_elem_type ();\n     base_type->accept_vis (*this);\n     if (base_type->is_marked_for_strip ())\n-      rust_error_at (base_type->get_locus_slow (),\n+      rust_error_at (base_type->get_locus (),\n \t\t     \"cannot strip type in this position\");\n \n     // same for expression\n     auto &size_expr = type.get_size_expr ();\n     size_expr->accept_vis (*this);\n     if (size_expr->is_marked_for_strip ())\n-      rust_error_at (size_expr->get_locus_slow (),\n+      rust_error_at (size_expr->get_locus (),\n \t\t     \"cannot strip expression in this position\");\n   }\n   void visit (AST::SliceType &type) override\n@@ -3085,7 +3074,7 @@ class AttrVisitor : public AST::ASTVisitor\n     auto &elem_type = type.get_elem_type ();\n     elem_type->accept_vis (*this);\n     if (elem_type->is_marked_for_strip ())\n-      rust_error_at (elem_type->get_locus_slow (),\n+      rust_error_at (elem_type->get_locus (),\n \t\t     \"cannot strip type in this position\");\n   }\n   void visit (AST::InferredType &) override\n@@ -3113,7 +3102,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &type = param.get_type ();\n \ttype->accept_vis (*this);\n \tif (type->is_marked_for_strip ())\n-\t  rust_error_at (type->get_locus_slow (),\n+\t  rust_error_at (type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n \n \t// increment if nothing else happens\n@@ -3128,7 +3117,7 @@ class AttrVisitor : public AST::ASTVisitor\n \tauto &return_type = type.get_return_type ();\n \treturn_type->accept_vis (*this);\n \tif (return_type->is_marked_for_strip ())\n-\t  rust_error_at (return_type->get_locus_slow (),\n+\t  rust_error_at (return_type->get_locus (),\n \t\t\t \"cannot strip type in this position\");\n       }\n "}, {"sha": "ff4c181d0e2e317dd085eaea6b623ff011f535e7", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -81,7 +81,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n     expr->accept_vis (resolver);\n     if (resolver.translated == nullptr)\n       {\n-\trust_fatal_error (expr->get_locus_slow (), \"Failed to lower expr: [%s]\",\n+\trust_fatal_error (expr->get_locus (), \"Failed to lower expr: [%s]\",\n \t\t\t  expr->as_string ().c_str ());\n \treturn nullptr;\n       }\n@@ -91,8 +91,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n       resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n     resolver.mappings->insert_location (\n       resolver.translated->get_mappings ().get_crate_num (),\n-      resolver.translated->get_mappings ().get_hirid (),\n-      expr->get_locus_slow ());\n+      resolver.translated->get_mappings ().get_hirid (), expr->get_locus ());\n \n     if (terminated != nullptr)\n       *terminated = resolver.terminated;"}, {"sha": "7efcffaf05b6a54e2dfa7c7d7772786670f32285", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -47,7 +47,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     // this is useful for debugging\n     // if (resolver.translated == nullptr)\n     //   {\n-    //     rust_fatal_error (item->get_locus_slow (), \"failed to lower: %s\",\n+    //     rust_fatal_error (item->get_locus (), \"failed to lower: %s\",\n     //     \t\t  item->as_string ().c_str ());\n     //     return nullptr;\n     //   }"}, {"sha": "e6322dbb514edf15d8013fd21b546c548c8685d9", "filename": "gcc/rust/hir/rust-ast-lower-struct-field-expr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -41,8 +41,7 @@ class ASTLowerStructExprField : public ASTLoweringBase\n       compiler.translated->get_mappings ().get_hirid (), compiler.translated);\n     compiler.mappings->insert_location (\n       compiler.translated->get_mappings ().get_crate_num (),\n-      compiler.translated->get_mappings ().get_hirid (),\n-      field->get_locus_slow ());\n+      compiler.translated->get_mappings ().get_hirid (), field->get_locus ());\n \n     return compiler.translated;\n   }"}, {"sha": "c16025d137b9002e33e415aa2e9691e06d6c37ec", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -106,8 +106,7 @@ class ASTLoweringType : public ASTLoweringBase\n     rust_assert (resolver.translated != nullptr);\n     resolver.mappings->insert_location (\n       resolver.translated->get_mappings ().get_crate_num (),\n-      resolver.translated->get_mappings ().get_hirid (),\n-      type->get_locus_slow ());\n+      resolver.translated->get_mappings ().get_hirid (), type->get_locus ());\n \n     return resolver.translated;\n   }\n@@ -282,8 +281,7 @@ class ASTLowerGenericParam : public ASTLoweringBase\n     rust_assert (resolver.translated != nullptr);\n     resolver.mappings->insert_location (\n       resolver.translated->get_mappings ().get_crate_num (),\n-      resolver.translated->get_mappings ().get_hirid (),\n-      param->get_locus_slow ());\n+      resolver.translated->get_mappings ().get_hirid (), param->get_locus ());\n     resolver.mappings->insert_hir_generic_param (\n       resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n@@ -356,7 +354,7 @@ class ASTLoweringTypeBounds : public ASTLoweringBase\n     resolver.mappings->insert_location (\n       resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (),\n-      resolver.translated->get_locus_slow ());\n+      resolver.translated->get_locus ());\n \n     return resolver.translated;\n   }"}, {"sha": "d5138fd64ac641f9112da91d66f3cc8346590a29", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -66,7 +66,7 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n   bool block_did_terminate = false;\n   expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n     if (block_did_terminate)\n-      rust_warning_at (s->get_locus_slow (), 0, \"unreachable statement\");\n+      rust_warning_at (s->get_locus (), 0, \"unreachable statement\");\n \n     bool terminated = false;\n     auto translated_stmt = ASTLoweringStmt::translate (s, &terminated);\n@@ -78,7 +78,7 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n   if (expr.has_tail_expr () && block_did_terminate)\n     {\n       // warning unreachable tail expressions\n-      rust_warning_at (expr.get_tail_expr ()->get_locus_slow (), 0,\n+      rust_warning_at (expr.get_tail_expr ()->get_locus (), 0,\n \t\t       \"unreachable expression\");\n     }\n "}, {"sha": "bb15d4f9901485e62a143c42100473b672b8b291", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 30, "deletions": 59, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -90,8 +90,7 @@ class LiteralExpr : public ExprWithoutBlock\n     return std::unique_ptr<LiteralExpr> (clone_literal_expr_impl ());\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -163,8 +162,7 @@ class OperatorExpr : public ExprWithoutBlock\n   OperatorExpr &operator= (OperatorExpr &&other) = default;\n \n public:\n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   std::unique_ptr<Expr> &get_expr () { return main_or_left_expr; }\n };\n@@ -710,8 +708,7 @@ class GroupedExpr : public ExprWithoutBlock\n   GroupedExpr (GroupedExpr &&other) = default;\n   GroupedExpr &operator= (GroupedExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -915,8 +912,7 @@ class ArrayExpr : public ExprWithoutBlock\n   ArrayExpr (ArrayExpr &&other) = default;\n   ArrayExpr &operator= (ArrayExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -981,8 +977,7 @@ class ArrayIndexExpr : public ExprWithoutBlock\n   ArrayIndexExpr (ArrayIndexExpr &&other) = default;\n   ArrayIndexExpr &operator= (ArrayIndexExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1060,8 +1055,7 @@ class TupleExpr : public ExprWithoutBlock\n   /* Note: syntactically, can disambiguate single-element tuple from parens with\n    * comma, i.e. (0,) rather than (0) */\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1144,8 +1138,7 @@ class TupleIndexExpr : public ExprWithoutBlock\n   TupleIndexExpr (TupleIndexExpr &&other) = default;\n   TupleIndexExpr &operator= (TupleIndexExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1211,8 +1204,7 @@ class StructExprStruct : public StructExpr\n       inner_attrs (std::move (inner_attribs)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1640,8 +1632,7 @@ class StructExprTuple : public StructExpr\n   StructExprTuple (StructExprTuple &&other) = default;\n   StructExprTuple &operator= (StructExprTuple &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1676,8 +1667,7 @@ class StructExprUnit : public StructExpr\n       locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1894,8 +1884,7 @@ class EnumExprStruct : public EnumVariantExpr\n   EnumExprStruct (EnumExprStruct &&other) = default;\n   EnumExprStruct &operator= (EnumExprStruct &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1964,8 +1953,7 @@ class EnumExprTuple : public EnumVariantExpr\n   EnumExprTuple (EnumExprTuple &&other) = default;\n   EnumExprTuple &operator= (EnumExprTuple &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2005,8 +1993,7 @@ class EnumExprFieldless : public EnumVariantExpr\n       locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2082,8 +2069,7 @@ class CallExpr : public ExprWithoutBlock\n   // Returns whether function call has parameters.\n   bool has_params () const { return !params.empty (); }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2172,8 +2158,7 @@ class MethodCallExpr : public ExprWithoutBlock\n   MethodCallExpr (MethodCallExpr &&other) = default;\n   MethodCallExpr &operator= (MethodCallExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2257,8 +2242,7 @@ class FieldAccessExpr : public ExprWithoutBlock\n   FieldAccessExpr (FieldAccessExpr &&other) = default;\n   FieldAccessExpr &operator= (FieldAccessExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2361,8 +2345,7 @@ class ClosureExpr : public ExprWithoutBlock\n public:\n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n };\n \n // Represents a non-type-specified closure expression HIR node\n@@ -2497,8 +2480,7 @@ class BlockExpr : public ExprWithBlock\n     return std::unique_ptr<BlockExpr> (clone_block_expr_impl ());\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2518,7 +2500,7 @@ class BlockExpr : public ExprWithBlock\n     if (statements.size () == 0)\n       return get_locus ();\n \n-    return statements[statements.size () - 1]->get_locus_slow ();\n+    return statements[statements.size () - 1]->get_locus ();\n   }\n \n   std::unique_ptr<Expr> &get_final_expr () { return expr; }\n@@ -2632,8 +2614,7 @@ class ContinueExpr : public ExprWithoutBlock\n       label (std::move (label)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2712,8 +2693,7 @@ class BreakExpr : public ExprWithoutBlock\n   BreakExpr (BreakExpr &&other) = default;\n   BreakExpr &operator= (BreakExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2746,8 +2726,7 @@ class RangeExpr : public ExprWithoutBlock\n   {}\n \n public:\n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n };\n \n // Range from (inclusive) and to (exclusive) expression HIR node object\n@@ -3089,8 +3068,7 @@ class ReturnExpr : public ExprWithoutBlock\n   ReturnExpr (ReturnExpr &&other) = default;\n   ReturnExpr &operator= (ReturnExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -3151,8 +3129,7 @@ class UnsafeBlockExpr : public ExprWithBlock\n   UnsafeBlockExpr (UnsafeBlockExpr &&other) = default;\n   UnsafeBlockExpr &operator= (UnsafeBlockExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -3250,8 +3227,7 @@ class BaseLoopExpr : public ExprWithBlock\n public:\n   bool has_loop_label () const { return !loop_label.is_error (); }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   std::unique_ptr<HIR::BlockExpr> &get_loop_block () { return loop_block; };\n \n@@ -3540,8 +3516,7 @@ class IfExpr : public ExprWithBlock\n    * vector of else ifs - i.e. not like a switch statement. TODO - is this a\n    * better approach? or does it not parse correctly and have downsides? */\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -3765,8 +3740,7 @@ class IfLetExpr : public ExprWithBlock\n     return std::unique_ptr<IfLetExpr> (clone_if_let_expr_impl ());\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -4341,8 +4315,7 @@ class MatchExpr : public ExprWithBlock\n   MatchExpr (MatchExpr &&other) = default;\n   MatchExpr &operator= (MatchExpr &&other) = default;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -4396,8 +4369,7 @@ class AwaitExpr : public ExprWithoutBlock\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -4450,8 +4422,7 @@ class AsyncBlockExpr : public ExprWithBlock\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n "}, {"sha": "99fc91de11725354c915a31cadd31a6d93f0f161", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -104,9 +104,7 @@ class TypeParam : public GenericParam\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override final { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -704,7 +702,7 @@ class Module : public VisItem\n    * the module. */\n   void add_crate_name (std::vector<std::string> &names) const override;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object\n@@ -754,7 +752,7 @@ class ExternCrate : public VisItem\n       as_clause_name (std::move (as_clause_name)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1019,7 +1017,7 @@ class UseDeclaration : public VisItem\n   UseDeclaration (UseDeclaration &&other) = default;\n   UseDeclaration &operator= (UseDeclaration &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1126,7 +1124,7 @@ class Function : public VisItem, public ImplItem\n   Function (Function &&other) = default;\n   Function &operator= (Function &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n@@ -1268,7 +1266,7 @@ class TypeAlias : public VisItem, public ImplItem\n   TypeAlias (TypeAlias &&other) = default;\n   TypeAlias &operator= (TypeAlias &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n@@ -1340,7 +1338,7 @@ class Struct : public VisItem\n   // Returns whether struct has a where clause.\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n   {\n@@ -1863,7 +1861,7 @@ class Enum : public VisItem\n   Enum (Enum &&other) = default;\n   Enum &operator= (Enum &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -1953,7 +1951,7 @@ class Union : public VisItem\n \n   Identifier get_identifier () const { return union_name; }\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2017,7 +2015,7 @@ class ConstantItem : public VisItem, public ImplItem\n   // as identifier) constant.\n   bool is_unnamed () const { return identifier == std::string (\"_\"); }\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n@@ -2095,7 +2093,7 @@ class StaticItem : public VisItem\n   StaticItem (StaticItem &&other) = default;\n   StaticItem &operator= (StaticItem &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2534,7 +2532,7 @@ class Trait : public VisItem\n   Trait (Trait &&other) = default;\n   Trait &operator= (Trait &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -2642,7 +2640,7 @@ class ImplBlock : public VisItem\n   // Returns whether impl has inner attributes.\n   bool has_inner_attrs () const { return !inner_attrs.empty (); }\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   std::unique_ptr<Type> &get_type () { return impl_type; };\n \n@@ -2998,7 +2996,7 @@ class ExternBlock : public VisItem\n   ExternBlock (ExternBlock &&other) = default;\n   ExternBlock &operator= (ExternBlock &&other) = default;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n "}, {"sha": "0e3c430edb7c89a908dd9856ecf60821fd0ef134", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -315,8 +315,7 @@ class PathInExpression : public PathPattern, public PathExpr\n     return convert_to_simple_path (has_opening_scope_resolution);\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -791,8 +790,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n       path_type (std::move (qual_path_type)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n "}, {"sha": "b049ea9bd8d1392e39579c8422fd120ec4800973", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -37,7 +37,7 @@ class EmptyStmt : public Stmt\n     : Stmt (std::move (mappings)), locus (locus)\n   {}\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -109,9 +109,7 @@ class LetStmt : public Stmt\n   LetStmt (LetStmt &&other) = default;\n   LetStmt &operator= (LetStmt &&other) = default;\n \n-  Location get_locus_slow () const override { return get_locus (); }\n-\n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -136,7 +134,7 @@ class ExprStmt : public Stmt\n   Location locus;\n \n public:\n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   ExprStmt (Analysis::NodeMapping mappings, Location locus)"}, {"sha": "cf33b9dfaee2dc7b654446f5d9ef0322deaacede", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -54,7 +54,7 @@ class TraitBound : public TypeParamBound\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -63,8 +63,6 @@ class TraitBound : public TypeParamBound\n     return mappings;\n   }\n \n-  Location get_locus_slow () const override final { return get_locus (); }\n-\n   BoundType get_bound_type () const final override { return TRAITBOUND; }\n \n   TypePath &get_path () { return type_path; }"}, {"sha": "b994d0634521c62c87a3bf44c65d863aaf369ea2", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -100,9 +100,7 @@ class Stmt\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n-  /* HACK: slow way of getting location from base expression through virtual\n-   * methods. */\n-  virtual Location get_locus_slow () const { return Location (); }\n+  virtual Location get_locus () const = 0;\n \n   virtual bool is_unit_check_needed () const { return false; }\n \n@@ -194,9 +192,7 @@ class Expr\n \n   virtual ~Expr () {}\n \n-  /* HACK: slow way of getting location from base expression through virtual\n-   * methods. */\n-  virtual Location get_locus_slow () const { return Location (); }\n+  virtual Location get_locus () const = 0;\n \n   // HACK: strictly not needed, but faster than full downcast clone\n   virtual bool is_expr_without_block () const = 0;\n@@ -284,8 +280,7 @@ class IdentifierExpr : public ExprWithoutBlock\n     return \"( \" + ident + \" (\" + get_mappings ().as_string () + \"))\";\n   }\n \n-  Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n@@ -426,7 +421,7 @@ class TypeParamBound\n \n   virtual Analysis::NodeMapping get_mappings () const = 0;\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n   virtual BoundType get_bound_type () const = 0;\n \n@@ -476,15 +471,13 @@ class Lifetime : public TypeParamBound\n     return lifetime_type;\n   }\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override final { return locus; }\n \n   Analysis::NodeMapping get_mappings () const override final\n   {\n     return mappings;\n   }\n \n-  Location get_locus_slow () const override final { return get_locus (); }\n-\n   BoundType get_bound_type () const final override { return LIFETIME; }\n \n protected:\n@@ -522,7 +515,7 @@ class GenericParam\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n \n-  virtual Location get_locus_slow () const = 0;\n+  virtual Location get_locus () const = 0;\n \n   Analysis::NodeMapping get_mappings () const { return mappings; }\n \n@@ -609,9 +602,7 @@ class LifetimeParam : public GenericParam\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  Location get_locus () const { return locus; }\n-\n-  Location get_locus_slow () const override final { return get_locus (); }\n+  Location get_locus () const override final { return locus; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}, {"sha": "f383d48377e696aec6119e0c6f9000031562ab2f", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -211,7 +211,7 @@ MarkLive::visit (HIR::FieldAccessExpr &expr)\n   if (!tyctx->lookup_type (\n \texpr.get_receiver_expr ()->get_mappings ().get_hirid (), &receiver))\n     {\n-      rust_error_at (expr.get_receiver_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_receiver_expr ()->get_locus (),\n \t\t     \"unresolved type for receiver\");\n     }\n   bool ok = receiver->get_kind () == TyTy::TypeKind::ADT;\n@@ -223,7 +223,7 @@ MarkLive::visit (HIR::FieldAccessExpr &expr)\n   adt->get_field (expr.get_field_name (), &index);\n   if (index >= adt->num_fields ())\n     {\n-      rust_error_at (expr.get_receiver_expr ()->get_locus_slow (),\n+      rust_error_at (expr.get_receiver_expr ()->get_locus (),\n \t\t     \"cannot access struct %s by index: %ld\",\n \t\t     adt->get_name ().c_str (), index);\n       return;"}, {"sha": "8ee9e42f9440281627dca793ab8e947400f98995", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -11431,7 +11431,7 @@ Parser<ManagedTokenSource>::parse_stmt_or_expr_with_block (\n     return ExprOrStmt (std::move (expr));\n \n   // internal block expr must either have semicolons followed, or evaluate to ()\n-  auto locus = expr->get_locus_slow ();\n+  auto locus = expr->get_locus ();\n   std::unique_ptr<AST::ExprStmtWithBlock> stmt (\n     new AST::ExprStmtWithBlock (std::move (expr), locus,\n \t\t\t\ttok->get_id () == SEMICOLON));\n@@ -12823,7 +12823,7 @@ Parser<ManagedTokenSource>::left_denotation (const_TokenPtr tok,\n     {\n       // FIXME: allow for outer attributes to be applied\n       case QUESTION_MARK: {\n-\tLocation left_locus = left->get_locus_slow ();\n+\tLocation left_locus = left->get_locus ();\n \t// error propagation expression - unary postfix\n \treturn std::unique_ptr<AST::ErrorPropagationExpr> (\n \t  new AST::ErrorPropagationExpr (std::move (left),\n@@ -13185,7 +13185,7 @@ Parser<ManagedTokenSource>::parse_arithmetic_or_logical_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13206,7 +13206,7 @@ Parser<ManagedTokenSource>::parse_binary_plus_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13227,7 +13227,7 @@ Parser<ManagedTokenSource>::parse_binary_minus_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13249,7 +13249,7 @@ Parser<ManagedTokenSource>::parse_binary_mult_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13271,7 +13271,7 @@ Parser<ManagedTokenSource>::parse_binary_div_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13293,7 +13293,7 @@ Parser<ManagedTokenSource>::parse_binary_mod_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13316,7 +13316,7 @@ Parser<ManagedTokenSource>::parse_bitwise_and_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13339,7 +13339,7 @@ Parser<ManagedTokenSource>::parse_bitwise_or_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13362,7 +13362,7 @@ Parser<ManagedTokenSource>::parse_bitwise_xor_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13384,7 +13384,7 @@ Parser<ManagedTokenSource>::parse_left_shift_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13406,7 +13406,7 @@ Parser<ManagedTokenSource>::parse_right_shift_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ArithmeticOrLogicalExpr> (\n     new AST::ArithmeticOrLogicalExpr (std::move (left), std::move (right),\n@@ -13458,7 +13458,7 @@ Parser<ManagedTokenSource>::parse_comparison_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ComparisonExpr> (\n     new AST::ComparisonExpr (std::move (left), std::move (right), expr_type,\n@@ -13479,7 +13479,7 @@ Parser<ManagedTokenSource>::parse_binary_equal_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ComparisonExpr> (\n     new AST::ComparisonExpr (std::move (left), std::move (right),\n@@ -13500,7 +13500,7 @@ Parser<ManagedTokenSource>::parse_binary_not_equal_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ComparisonExpr> (\n     new AST::ComparisonExpr (std::move (left), std::move (right),\n@@ -13521,7 +13521,7 @@ Parser<ManagedTokenSource>::parse_binary_greater_than_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ComparisonExpr> (\n     new AST::ComparisonExpr (std::move (left), std::move (right),\n@@ -13542,7 +13542,7 @@ Parser<ManagedTokenSource>::parse_binary_less_than_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ComparisonExpr> (\n     new AST::ComparisonExpr (std::move (left), std::move (right),\n@@ -13563,7 +13563,7 @@ Parser<ManagedTokenSource>::parse_binary_greater_equal_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ComparisonExpr> (\n     new AST::ComparisonExpr (std::move (left), std::move (right),\n@@ -13584,7 +13584,7 @@ Parser<ManagedTokenSource>::parse_binary_less_equal_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::ComparisonExpr> (\n     new AST::ComparisonExpr (std::move (left), std::move (right),\n@@ -13605,7 +13605,7 @@ Parser<ManagedTokenSource>::parse_lazy_or_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::LazyBooleanExpr> (\n     new AST::LazyBooleanExpr (std::move (left), std::move (right),\n@@ -13626,7 +13626,7 @@ Parser<ManagedTokenSource>::parse_lazy_and_expr (\n     return nullptr;\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::LazyBooleanExpr> (\n     new AST::LazyBooleanExpr (std::move (left), std::move (right),\n@@ -13648,7 +13648,7 @@ Parser<ManagedTokenSource>::parse_type_cast_expr (\n   // FIXME: how do I get precedence put in here?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = expr_to_cast->get_locus_slow ();\n+  Location locus = expr_to_cast->get_locus ();\n \n   return std::unique_ptr<AST::TypeCastExpr> (\n     new AST::TypeCastExpr (std::move (expr_to_cast), std::move (type), locus));\n@@ -13669,7 +13669,7 @@ Parser<ManagedTokenSource>::parse_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::AssignmentExpr> (\n     new AST::AssignmentExpr (std::move (left), std::move (right), locus));\n@@ -13728,7 +13728,7 @@ Parser<ManagedTokenSource>::parse_compound_assignment_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13750,7 +13750,7 @@ Parser<ManagedTokenSource>::parse_plus_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13772,7 +13772,7 @@ Parser<ManagedTokenSource>::parse_minus_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13795,7 +13795,7 @@ Parser<ManagedTokenSource>::parse_mult_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13818,7 +13818,7 @@ Parser<ManagedTokenSource>::parse_div_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13841,7 +13841,7 @@ Parser<ManagedTokenSource>::parse_mod_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13864,7 +13864,7 @@ Parser<ManagedTokenSource>::parse_and_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13887,7 +13887,7 @@ Parser<ManagedTokenSource>::parse_or_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13910,7 +13910,7 @@ Parser<ManagedTokenSource>::parse_xor_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13933,7 +13933,7 @@ Parser<ManagedTokenSource>::parse_left_shift_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13956,7 +13956,7 @@ Parser<ManagedTokenSource>::parse_right_shift_assig_expr (\n   // FIXME: ensure right-associativity for this - 'LBP - 1' may do this?\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::CompoundAssignmentExpr> (\n     new AST::CompoundAssignmentExpr (std::move (left), std::move (right),\n@@ -13985,7 +13985,7 @@ Parser<ManagedTokenSource>::parse_await_expr (\n     }\n \n   // TODO: check inside async block in semantic analysis\n-  Location locus = expr_to_await->get_locus_slow ();\n+  Location locus = expr_to_await->get_locus ();\n \n   return std::unique_ptr<AST::AwaitExpr> (\n     new AST::AwaitExpr (std::move (expr_to_await), std::move (outer_attrs),\n@@ -14008,7 +14008,7 @@ Parser<ManagedTokenSource>::parse_led_range_exclusive_expr (\n   std::unique_ptr<AST::Expr> right\n     = parse_expr (LBP_DOT_DOT, AST::AttrVec (), restrictions);\n \n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   if (right == nullptr)\n     {\n@@ -14066,7 +14066,7 @@ Parser<ManagedTokenSource>::parse_range_inclusive_expr (\n   // FIXME: make non-associative\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = left->get_locus_slow ();\n+  Location locus = left->get_locus ();\n \n   return std::unique_ptr<AST::RangeFromToInclExpr> (\n     new AST::RangeFromToInclExpr (std::move (left), std::move (right), locus));\n@@ -14114,7 +14114,7 @@ Parser<ManagedTokenSource>::parse_tuple_index_expr (\n     }\n   int index_int = atoi (index.c_str ());\n \n-  Location locus = tuple_expr->get_locus_slow ();\n+  Location locus = tuple_expr->get_locus ();\n \n   return std::unique_ptr<AST::TupleIndexExpr> (\n     new AST::TupleIndexExpr (std::move (tuple_expr), index_int,\n@@ -14145,7 +14145,7 @@ Parser<ManagedTokenSource>::parse_index_expr (\n     }\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = array_expr->get_locus_slow ();\n+  Location locus = array_expr->get_locus ();\n \n   return std::unique_ptr<AST::ArrayIndexExpr> (\n     new AST::ArrayIndexExpr (std::move (array_expr), std::move (index_expr),\n@@ -14167,7 +14167,7 @@ Parser<ManagedTokenSource>::parse_field_access_expr (\n \n   Identifier ident = ident_tok->get_str ();\n \n-  Location locus = struct_expr->get_locus_slow ();\n+  Location locus = struct_expr->get_locus ();\n \n   // TODO: check types. actually, do so during semantic analysis\n   return std::unique_ptr<AST::FieldAccessExpr> (\n@@ -14230,7 +14230,7 @@ Parser<ManagedTokenSource>::parse_method_call_expr (\n     }\n \n   // TODO: check types. actually do so in semantic analysis pass.\n-  Location locus = receiver_expr->get_locus_slow ();\n+  Location locus = receiver_expr->get_locus ();\n \n   return std::unique_ptr<AST::MethodCallExpr> (\n     new AST::MethodCallExpr (std::move (receiver_expr), std::move (segment),\n@@ -14277,7 +14277,7 @@ Parser<ManagedTokenSource>::parse_function_call_expr (\n     }\n \n   // TODO: check types. actually, do so during semantic analysis\n-  Location locus = function_expr->get_locus_slow ();\n+  Location locus = function_expr->get_locus ();\n \n   return std::unique_ptr<AST::CallExpr> (\n     new AST::CallExpr (std::move (function_expr), std::move (params),\n@@ -14772,7 +14772,7 @@ Parser<ManagedTokenSource>::parse_tuple_index_expr_float (\n   // get int from string\n   int index = atoi (index_str.c_str ());\n \n-  Location locus = tuple_expr->get_locus_slow ();\n+  Location locus = tuple_expr->get_locus ();\n \n   return std::unique_ptr<AST::TupleIndexExpr> (\n     new AST::TupleIndexExpr (std::move (tuple_expr), index,"}, {"sha": "d3c053b609f880a5dfd5d1a30a773817db5ed42a", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -400,9 +400,9 @@ class ResolveItem : public ResolverBase\n     auto Self\n       = CanonicalPath::get_big_self (impl_block.get_type ()->get_node_id ());\n \n-    resolver->get_type_scope ().insert (\n-      Self, impl_block.get_type ()->get_node_id (),\n-      impl_block.get_type ()->get_locus_slow ());\n+    resolver->get_type_scope ().insert (Self,\n+\t\t\t\t\timpl_block.get_type ()->get_node_id (),\n+\t\t\t\t\timpl_block.get_type ()->get_locus ());\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n@@ -519,9 +519,9 @@ class ResolveItem : public ResolverBase\n     auto Self\n       = CanonicalPath::get_big_self (impl_block.get_type ()->get_node_id ());\n \n-    resolver->get_type_scope ().insert (\n-      Self, impl_block.get_type ()->get_node_id (),\n-      impl_block.get_type ()->get_locus_slow ());\n+    resolver->get_type_scope ().insert (Self,\n+\t\t\t\t\timpl_block.get_type ()->get_node_id (),\n+\t\t\t\t\timpl_block.get_type ()->get_locus ());\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       {"}, {"sha": "97c031199b307a9d4fa0aafaf03d099e6c292e23", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -211,7 +211,7 @@ class ResolveRelativeTypePath\n     // https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler/rustc_resolve/src/lib.rs#L1722\n     if (!resolver->get_type_scope ().lookup (canonical_path, &resolved_node))\n       {\n-\trust_error_at (path.get_locus_slow (), \"failed to resolve TypePath: %s\",\n+\trust_error_at (path.get_locus (), \"failed to resolve TypePath: %s\",\n \t\t       canonical_path.get ().c_str ());\n \treturn UNKNOWN_NODEID;\n       }\n@@ -231,7 +231,7 @@ class ResolveType : public ResolverBase\n     ResolveType resolver (parent, canonicalize_type_with_generics);\n     type->accept_vis (resolver);\n     if (!resolver.ok)\n-      rust_error_at (type->get_locus_slow (), \"unresolved type\");\n+      rust_error_at (type->get_locus (), \"unresolved type\");\n \n     return resolver.resolved_node;\n   };\n@@ -311,7 +311,7 @@ class ResolveTypeBound : public ResolverBase\n     ResolveTypeBound resolver (parent, canonicalize_type_with_generics);\n     type->accept_vis (resolver);\n     if (!resolver.ok)\n-      rust_error_at (type->get_locus_slow (), \"unresolved type bound\");\n+      rust_error_at (type->get_locus (), \"unresolved type bound\");\n \n     return resolver.resolved_node;\n   };\n@@ -346,7 +346,7 @@ class ResolveGenericParam : public ResolverBase\n     ResolveGenericParam resolver (parent);\n     param->accept_vis (resolver);\n     if (!resolver.ok)\n-      rust_error_at (param->get_locus_slow (), \"unresolved generic parameter\");\n+      rust_error_at (param->get_locus (), \"unresolved generic parameter\");\n \n     return resolver.resolved_node;\n   };"}, {"sha": "9da3883220d320836a81b4c00b40d867f52f88b0", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -35,7 +35,7 @@ class VerifyAsignee : public ResolverBase\n     VerifyAsignee checker (parent);\n     assignee->accept_vis (checker);\n     if (!checker.ok)\n-      rust_error_at (assignee->get_locus_slow (),\n+      rust_error_at (assignee->get_locus (),\n \t\t     \"invalid left-hand side of assignment\");\n     return checker.ok;\n   }"}, {"sha": "1bff7ef13b7686df7854c0bf612916eec4edb0ab", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -211,7 +211,7 @@ class ConstFoldItem : public ConstFoldBase\n     item.accept_vis (folder);\n     if (folder.ctx->get_backend ()->is_error_expression (folder.folded))\n       {\n-\trust_error_at (item.get_locus_slow (), \"non const value\");\n+\trust_error_at (item.get_locus (), \"non const value\");\n \treturn nullptr;\n       }\n \n@@ -240,7 +240,7 @@ class ConstFoldExpr : public ConstFoldBase\n     expr->accept_vis (folder);\n     if (folder.ctx->get_backend ()->is_error_expression (folder.folded))\n       {\n-\trust_error_at (expr->get_locus_slow (), \"non const value\");\n+\trust_error_at (expr->get_locus (), \"non const value\");\n \treturn nullptr;\n       }\n "}, {"sha": "274451606cbd18984344df2fcecc04e53ceace8e", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -49,8 +49,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     if (resolver.infered == nullptr)\n       {\n-\trust_error_at (expr->get_locus_slow (),\n-\t\t       \"failed to type resolve expression\");\n+\trust_error_at (expr->get_locus (), \"failed to type resolve expression\");\n \treturn new TyTy::ErrorType (expr->get_mappings ().get_hirid ());\n       }\n \n@@ -67,7 +66,7 @@ class TypeCheckExpr : public TypeCheckBase\n       = TypeCheckExpr::Resolve (expr.get_tuple_expr ().get (), inside_loop);\n     if (resolved == nullptr)\n       {\n-\trust_error_at (expr.get_tuple_expr ()->get_locus_slow (),\n+\trust_error_at (expr.get_tuple_expr ()->get_locus (),\n \t\t       \"failed to resolve TupleIndexExpr receiver\");\n \treturn;\n       }\n@@ -76,7 +75,7 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t\t || resolved->get_kind () == TyTy::TypeKind::TUPLE;\n     if (!is_valid_type)\n       {\n-\trust_error_at (expr.get_tuple_expr ()->get_locus_slow (),\n+\trust_error_at (expr.get_tuple_expr ()->get_locus (),\n \t\t       \"Expected Tuple or ADT got: %s\",\n \t\t       resolved->as_string ().c_str ());\n \treturn;\n@@ -203,7 +202,7 @@ class TypeCheckExpr : public TypeCheckBase\n       = TypeCheckExpr::Resolve (expr.get_receiver ().get (), false);\n     if (receiver_tyty == nullptr)\n       {\n-\trust_error_at (expr.get_receiver ()->get_locus_slow (),\n+\trust_error_at (expr.get_receiver ()->get_locus (),\n \t\t       \"failed to resolve receiver in MethodCallExpr\");\n \treturn;\n       }\n@@ -771,7 +770,7 @@ class TypeCheckExpr : public TypeCheckBase\n       = size_ty->unify (TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n     if (resolved_index_expr == nullptr)\n       {\n-\trust_error_at (expr.get_index_expr ()->get_locus_slow (),\n+\trust_error_at (expr.get_index_expr ()->get_locus (),\n \t\t       \"Type Resolver failure in Index for ArrayIndexExpr\");\n \treturn;\n       }\n@@ -782,13 +781,13 @@ class TypeCheckExpr : public TypeCheckBase\n     expr.get_array_expr ()->accept_vis (*this);\n     if (infered == nullptr)\n       {\n-\trust_error_at (expr.get_index_expr ()->get_locus_slow (),\n+\trust_error_at (expr.get_index_expr ()->get_locus (),\n \t\t       \"failed to resolve array reference expression\");\n \treturn;\n       }\n     else if (infered->get_kind () != TyTy::TypeKind::ARRAY)\n       {\n-\trust_error_at (expr.get_index_expr ()->get_locus_slow (),\n+\trust_error_at (expr.get_index_expr ()->get_locus (),\n \t\t       \"expected an ArrayType got [%s]\",\n \t\t       infered->as_string ().c_str ());\n \tinfered = nullptr;\n@@ -936,7 +935,7 @@ class TypeCheckExpr : public TypeCheckBase\n       = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n     if (!block_expr->is_unit ())\n       {\n-\trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n+\trust_error_at (expr.get_loop_block ()->get_locus (),\n \t\t       \"expected %<()%> got %s\",\n \t\t       block_expr->as_string ().c_str ());\n \treturn;\n@@ -965,7 +964,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     if (!block_expr->is_unit ())\n       {\n-\trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n+\trust_error_at (expr.get_loop_block ()->get_locus (),\n \t\t       \"expected %<()%> got %s\",\n \t\t       block_expr->as_string ().c_str ());\n \treturn;"}, {"sha": "0cc1cfb3d40a74b70ee8012e5775d7026c3e1680", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -257,7 +257,7 @@ class TypeResolveGenericParam : public TypeCheckBase\n \n     if (resolver.resolved == nullptr)\n       {\n-\trust_error_at (param->get_locus_slow (),\n+\trust_error_at (param->get_locus (),\n \t\t       \"failed to setup generic parameter\");\n \treturn nullptr;\n       }"}, {"sha": "7f0e0ffdb30871f80310bc1310bcf50c97cd54b3", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -97,7 +97,7 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     auto resolved = TypeCheckStmt::Resolve (s, inside_loop);\n     if (resolved == nullptr)\n       {\n-\trust_error_at (s->get_locus_slow (), \"failure to resolve type\");\n+\trust_error_at (s->get_locus (), \"failure to resolve type\");\n \treturn false;\n       }\n \n@@ -145,9 +145,8 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \t= (TyTy::ADTType *) struct_path_resolved->unify (base_resolved);\n       if (struct_def == nullptr)\n \t{\n-\t  rust_fatal_error (\n-\t    struct_expr.struct_base->base_struct->get_locus_slow (),\n-\t    \"incompatible types for base struct reference\");\n+\t  rust_fatal_error (struct_expr.struct_base->base_struct->get_locus (),\n+\t\t\t    \"incompatible types for base struct reference\");\n \t  return;\n \t}\n     }\n@@ -229,11 +228,11 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \t      HIR::Expr *field_value = new HIR::FieldAccessExpr (\n \t\tmapping, std::unique_ptr<HIR::Expr> (receiver), missing,\n \t\tstd::move (outer_attribs),\n-\t\tstruct_expr.struct_base->base_struct->get_locus_slow ());\n+\t\tstruct_expr.struct_base->base_struct->get_locus ());\n \n \t      implicit_field = new HIR::StructExprFieldIdentifierValue (\n \t\tmapping, missing, std::unique_ptr<HIR::Expr> (field_value),\n-\t\tstruct_expr.struct_base->base_struct->get_locus_slow ());\n+\t\tstruct_expr.struct_base->base_struct->get_locus ());\n \n \t      size_t field_index;\n \t      bool ok = struct_path_resolved->get_field (missing, &field_index);"}, {"sha": "e449b55f41ee08436d98f04359a63a8ce1aae527", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -2207,7 +2207,7 @@ TypeCheckCallExpr::visit (ADTType &type)\n     BaseType *arg = Resolver::TypeCheckExpr::Resolve (p, false);\n     if (arg == nullptr)\n       {\n-\trust_error_at (p->get_locus_slow (), \"failed to resolve argument type\");\n+\trust_error_at (p->get_locus (), \"failed to resolve argument type\");\n \treturn false;\n       }\n \n@@ -2262,7 +2262,7 @@ TypeCheckCallExpr::visit (FnType &type)\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n     if (argument_expr_tyty == nullptr)\n       {\n-\trust_error_at (param->get_locus_slow (),\n+\trust_error_at (param->get_locus (),\n \t\t       \"failed to resolve type for argument expr in CallExpr\");\n \treturn false;\n       }\n@@ -2276,7 +2276,7 @@ TypeCheckCallExpr::visit (FnType &type)\n \tresolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n \tif (resolved_argument_type == nullptr)\n \t  {\n-\t    rust_error_at (param->get_locus_slow (),\n+\t    rust_error_at (param->get_locus (),\n \t\t\t   \"Type Resolution failure on parameter\");\n \t    return false;\n \t  }\n@@ -2327,15 +2327,15 @@ TypeCheckCallExpr::visit (FnPtr &type)\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n     if (argument_expr_tyty == nullptr)\n       {\n-\trust_error_at (param->get_locus_slow (),\n+\trust_error_at (param->get_locus (),\n \t\t       \"failed to resolve type for argument expr in CallExpr\");\n \treturn false;\n       }\n \n     auto resolved_argument_type = fnparam->unify (argument_expr_tyty);\n     if (resolved_argument_type == nullptr)\n       {\n-\trust_error_at (param->get_locus_slow (),\n+\trust_error_at (param->get_locus (),\n \t\t       \"Type Resolution failure on parameter\");\n \treturn false;\n       }\n@@ -2378,15 +2378,15 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n     if (argument_expr_tyty == nullptr)\n       {\n-\trust_error_at (param->get_locus_slow (),\n+\trust_error_at (param->get_locus (),\n \t\t       \"failed to resolve type for argument expr in CallExpr\");\n \treturn false;\n       }\n \n     auto resolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n     if (resolved_argument_type == nullptr)\n       {\n-\trust_error_at (param->get_locus_slow (),\n+\trust_error_at (param->get_locus (),\n \t\t       \"Type Resolution failure on parameter\");\n \treturn false;\n       }"}, {"sha": "deade08db37c7b59a8478514473013f47fb557ea", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e5e530391d9a98b7c965b79bebf305d2630ad7/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=f9e5e530391d9a98b7c965b79bebf305d2630ad7", "patch": "@@ -380,7 +380,7 @@ Mappings::insert_hir_expr (CrateNum crateNum, HirId id, HIR::Expr *expr)\n {\n   hirExprMappings[crateNum][id] = expr;\n   nodeIdToHirMappings[crateNum][expr->get_mappings ().get_nodeid ()] = id;\n-  insert_location (crateNum, id, expr->get_locus_slow ());\n+  insert_location (crateNum, id, expr->get_locus ());\n }\n \n HIR::Expr *\n@@ -430,7 +430,7 @@ Mappings::insert_hir_generic_param (CrateNum crateNum, HirId id,\n \n   hirGenericParamMappings[crateNum][id] = param;\n   nodeIdToHirMappings[crateNum][param->get_mappings ().get_nodeid ()] = id;\n-  insert_location (crateNum, id, param->get_locus_slow ());\n+  insert_location (crateNum, id, param->get_locus ());\n }\n \n HIR::GenericParam *"}]}