{"sha": "c74e2214108d712dc032877cbb60436070cfeafa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0ZTIyMTQxMDhkNzEyZGMwMzI4NzdjYmI2MDQzNjA3MGNmZWFmYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-05-31T23:50:37Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-31T23:50:37Z"}, "message": "prims.cc (DECLARE_PRIM_TYPE): Define a vtable as well.\n\n\t* prims.cc (DECLARE_PRIM_TYPE): Define a vtable as well.\n\t(_Jv_PrimClass): Set `methods' by calling _Jv_FindArrayClass.\n\t* include/jvm.h (struct _Jv_ArrayVTable): Declare.\n\t(NUM_OBJECT_METHODS): New define.\n\t* java/lang/natClassLoader.cc (_Jv_FindArrayClass): Added\n\t`array_vtable' parameter.  Added assertion.\n\t* java/lang/Class.h (_Jv_FindArrayClass): Added `array_vtable'\n\tparameter.\n\nFrom-SVN: r34312", "tree": {"sha": "4b05280dd0f1b3a4def3323eb6da74ef8279da45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b05280dd0f1b3a4def3323eb6da74ef8279da45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c74e2214108d712dc032877cbb60436070cfeafa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74e2214108d712dc032877cbb60436070cfeafa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74e2214108d712dc032877cbb60436070cfeafa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74e2214108d712dc032877cbb60436070cfeafa/comments", "author": null, "committer": null, "parents": [{"sha": "f1aa7a521a31b60380cf5c2e6913823c8bd18ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1aa7a521a31b60380cf5c2e6913823c8bd18ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1aa7a521a31b60380cf5c2e6913823c8bd18ce5"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "7ec5cb1185fa9ee0e7e8078c898ba900e2ec39ce", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c74e2214108d712dc032877cbb60436070cfeafa", "patch": "@@ -1,3 +1,14 @@\n+2000-05-31  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* prims.cc (DECLARE_PRIM_TYPE): Define a vtable as well.\n+\t(_Jv_PrimClass): Set `methods' by calling _Jv_FindArrayClass.\n+\t* include/jvm.h (struct _Jv_ArrayVTable): Declare.\n+\t(NUM_OBJECT_METHODS): New define.\n+\t* java/lang/natClassLoader.cc (_Jv_FindArrayClass): Added\n+\t`array_vtable' parameter.  Added assertion.\n+\t* java/lang/Class.h (_Jv_FindArrayClass): Added `array_vtable'\n+\tparameter.\n+\n 2000-05-31  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* gcj/cni.h: Include <string.h>."}, {"sha": "ad187c090b05e73c33c7dc3e1e34ce5ab290f6ad", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=c74e2214108d712dc032877cbb60436070cfeafa", "patch": "@@ -34,6 +34,18 @@ struct _Jv_VTable\n   void *method[1];\n };\n \n+// Number of virtual methods on object.  FIXME: it sucks that we have\n+// to keep this up to date by hand.\n+#define NUM_OBJECT_METHODS 5\n+\n+// This structure is the type of an array's vtable.\n+struct _Jv_ArrayVTable\n+{\n+  jclass clas;\n+  // `+1' because there is an extra slot for C++ RTTI compatibility.\n+  void *method[NUM_OBJECT_METHODS + 1];\n+};\n+\n union _Jv_word\n {\n   jobject o;"}, {"sha": "9ea375976a43483585e4e4db543e6439243d5dee", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=c74e2214108d712dc032877cbb60436070cfeafa", "patch": "@@ -251,7 +251,8 @@ class java::lang::Class : public java::lang::Object\n   friend jclass _Jv_FindClassInCache (_Jv_Utf8Const *name,\n \t\t\t\t      java::lang::ClassLoader *loader);\n   friend jclass _Jv_FindArrayClass (jclass element,\n-\t\t\t\t    java::lang::ClassLoader *loader);\n+\t\t\t\t    java::lang::ClassLoader *loader,\n+\t\t\t\t    _Jv_VTable *array_vtable = 0);\n   friend jclass _Jv_NewClass (_Jv_Utf8Const *name, jclass superclass,\n \t\t\t      java::lang::ClassLoader *loader);\n "}, {"sha": "b4a9e49b71c1126720a0bb44df30c0c9feaa8e98", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=c74e2214108d712dc032877cbb60436070cfeafa", "patch": "@@ -514,7 +514,8 @@ _Jv_NewClass (_Jv_Utf8Const *name, jclass superclass,\n }\n \n jclass\n-_Jv_FindArrayClass (jclass element, java::lang::ClassLoader *loader)\n+_Jv_FindArrayClass (jclass element, java::lang::ClassLoader *loader,\n+\t\t    _Jv_VTable *array_vtable)\n {\n   _Jv_Utf8Const *array_name;\n   int len;\n@@ -561,6 +562,7 @@ _Jv_FindArrayClass (jclass element, java::lang::ClassLoader *loader)\n \n       // Note that `vtable_method_count' doesn't include the initial\n       // NULL slot.\n+      JvAssert (ObjectClass.vtable_method_count == NUM_OBJECT_METHODS);\n       int dm_count = ObjectClass.vtable_method_count + 1;\n \n       // Create a new vtable by copying Object's vtable (except the\n@@ -569,7 +571,11 @@ _Jv_FindArrayClass (jclass element, java::lang::ClassLoader *loader)\n       // GC.\n       int size = (sizeof (_Jv_VTable) +\n \t\t  ((dm_count - 1) * sizeof (void *)));\n-      _Jv_VTable *vtable = (_Jv_VTable *) _Jv_AllocBytes (size);\n+      _Jv_VTable *vtable;\n+      if (array_vtable)\n+\tvtable = array_vtable;\n+      else\n+\tvtable = (_Jv_VTable *) _Jv_AllocBytes (size);\n       vtable->clas = array_class;\n       memcpy (vtable->method, ObjectClass.vtable->method,\n \t      dm_count * sizeof (void *));\n@@ -607,5 +613,3 @@ _Jv_FindArrayClass (jclass element, java::lang::ClassLoader *loader)\n \n   return array_class;\n }\n-\n-"}, {"sha": "3a022f0380a7ec52a4b0e3d11a88144ba88f5bf0", "filename": "libjava/prims.cc", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74e2214108d712dc032877cbb60436070cfeafa/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=c74e2214108d712dc032877cbb60436070cfeafa", "patch": "@@ -519,7 +519,7 @@ class _Jv_PrimClass : public java::lang::Class\n public:\n   // FIXME: calling convention is weird.  If we use the natural types\n   // then the compiler will complain because they aren't Java types.\n-  _Jv_PrimClass (jobject cname, jbyte sig, jint len)\n+  _Jv_PrimClass (jobject cname, jbyte sig, jint len, jobject array_vtable)\n     {\n       using namespace java::lang::reflect;\n \n@@ -545,11 +545,21 @@ class _Jv_PrimClass : public java::lang::Class\n       interface_count = 0;\n       state = JV_STATE_NOTHING;\n       thread = NULL;\n+\n+      // Note that we have to set `methods' to NULL.\n+      if (sig != 'V')\n+\t_Jv_FindArrayClass (this, NULL, (_Jv_VTable *) array_vtable);\n     }\n };\n \n+// We use this to define both primitive classes and the vtables for\n+// arrays of primitive classes.  The latter are given names so that we\n+// can refer to them from the compiler, allowing us to construct\n+// arrays of primitives statically.\n #define DECLARE_PRIM_TYPE(NAME, SIG, LEN) \\\n-  _Jv_PrimClass _Jv_##NAME##Class((jobject) #NAME, (jbyte) SIG, (jint) LEN)\n+  _Jv_ArrayVTable _Jv_##NAME##VTable; \\\n+  _Jv_PrimClass _Jv_##NAME##Class((jobject) #NAME, (jbyte) SIG, (jint) LEN, \\\n+                                  (jobject) &_Jv_##NAME##VTable)\n \n DECLARE_PRIM_TYPE(byte, 'B', 1);\n DECLARE_PRIM_TYPE(short, 'S', 2);"}]}