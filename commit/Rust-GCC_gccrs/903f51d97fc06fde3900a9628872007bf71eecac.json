{"sha": "903f51d97fc06fde3900a9628872007bf71eecac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzZjUxZDk3ZmMwNmZkZTM5MDBhOTYyODg3MjAwN2JmNzFlZWNhYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-26T16:42:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-26T16:42:23Z"}, "message": "[multiple changes]\n\n2000-06-26  Joseph S. Myers  <jsm28@cam.ac.uk>\n\n        * c-decl.c (grokdeclarator): Don't warn about `long long' in C99.\n        Make warnings about implicit int be pedwarns in C99.  Don't warn\n        about duplicate type qualifiers in C99.\n        (start_function): Make warning about implict int return type be a\n        pedwarn in C99.\n        * c-lex.c (yylex): Don't warn about `long long' in C99.\n        * c-typeck.c (c_expand_return): In C99, always pedwarn about\n        `return' with no value in function returning non-void.\n\n2000-06-26  Richard Henderson  <rth@cygnus.com>\n\n        * c-typeck.c (pedwarn_c99): New.\n        * diagnostic.c (verror, vwarning, vpedwarn): Export.\n        * toplev.h: Prototype them.\n\nFrom-SVN: r34713", "tree": {"sha": "3775b34b16d78fb402deb53f4c3ecccc2f5d7168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3775b34b16d78fb402deb53f4c3ecccc2f5d7168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903f51d97fc06fde3900a9628872007bf71eecac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903f51d97fc06fde3900a9628872007bf71eecac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903f51d97fc06fde3900a9628872007bf71eecac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903f51d97fc06fde3900a9628872007bf71eecac/comments", "author": null, "committer": null, "parents": [{"sha": "774d2baf5040b0a86bb07931e01b4d2811611eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774d2baf5040b0a86bb07931e01b4d2811611eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774d2baf5040b0a86bb07931e01b4d2811611eab"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "f4a7d8e13eb2fe6562dcd6809807988383eb5e5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=903f51d97fc06fde3900a9628872007bf71eecac", "patch": "@@ -1,3 +1,20 @@\n+2000-06-26  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-decl.c (grokdeclarator): Don't warn about `long long' in C99.\n+\tMake warnings about implicit int be pedwarns in C99.  Don't warn\n+\tabout duplicate type qualifiers in C99.\n+\t(start_function): Make warning about implict int return type be a\n+\tpedwarn in C99.\n+\t* c-lex.c (yylex): Don't warn about `long long' in C99.\n+\t* c-typeck.c (c_expand_return): In C99, always pedwarn about\n+\t`return' with no value in function returning non-void.\n+\n+2000-06-26  Richard Henderson  <rth@cygnus.com>\n+\n+\t* c-typeck.c (pedwarn_c99): New.\n+\t* diagnostic.c (verror, vwarning, vpedwarn): Export.\n+\t* toplev.h: Prototype them.\n+\n 2000-06-26  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* c-typeck.c (digest_init): Return error_mark_node node when\n@@ -11,7 +28,7 @@\n \n 2000-06-25 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \n-        * gengenrtl.c (special_rtx): Fix typo in comment.\n+\t* gengenrtl.c (special_rtx): Fix typo in comment.\n \n 2000-06-26  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n@@ -50,7 +67,7 @@\n \t\n 2000-06-25  John David Anglin  <dave.anglin@nrc.ca>\n \n-        * config/vax/vax.h (TARGET_SWITCHES): Provide descriptions.\n+\t* config/vax/vax.h (TARGET_SWITCHES): Provide descriptions.\n \n 2000-06-25 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n "}, {"sha": "54acc37b45959058b70165a46adde29ca6a3c967", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=903f51d97fc06fde3900a9628872007bf71eecac", "patch": "@@ -3955,7 +3955,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t      error (\"`long long long' is too long for GCC\");\n \t\t    else\n \t\t      {\n-\t\t\tif (pedantic && ! in_system_header && warn_long_long)\n+\t\t\tif (pedantic && !flag_isoc99 && ! in_system_header\n+\t\t\t    && warn_long_long)\n \t\t\t  pedwarn (\"ANSI C does not support `long long'\");\n \t\t\tlonglong = 1;\n \t\t      }\n@@ -4018,7 +4019,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  if ((warn_implicit_int || warn_return_type) && funcdef_flag)\n \t    warn_about_return_type = 1;\n \t  else if (warn_implicit_int || flag_isoc99)\n-\t    warning (\"type defaults to `int' in declaration of `%s'\", name);\n+\t    pedwarn_c99 (\"type defaults to `int' in declaration of `%s'\", name);\n \t}\n \n       defaulted_int = 1;\n@@ -4168,11 +4169,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   restrictp = !! (specbits & 1 << (int) RID_RESTRICT) + TYPE_RESTRICT (type);\n   volatilep = !! (specbits & 1 << (int) RID_VOLATILE) + TYPE_VOLATILE (type);\n   inlinep = !! (specbits & (1 << (int) RID_INLINE));\n-  if (constp > 1)\n+  if (constp > 1 && ! flag_isoc99)\n     pedwarn (\"duplicate `const'\");\n-  if (restrictp > 1)\n+  if (restrictp > 1 && ! flag_isoc99)\n     pedwarn (\"duplicate `restrict'\");\n-  if (volatilep > 1)\n+  if (volatilep > 1 && ! flag_isoc99)\n     pedwarn (\"duplicate `volatile'\");\n   if (! flag_gen_aux_info && (TYPE_QUALS (type)))\n     type = TYPE_MAIN_VARIANT (type);\n@@ -4526,11 +4527,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t      error (\"invalid type modifier within pointer declarator\");\n \t\t    }\n \t\t}\n-\t      if (constp > 1)\n+\t      if (constp > 1 && ! flag_isoc99)\n \t\tpedwarn (\"duplicate `const'\");\n-\t      if (volatilep > 1)\n+\t      if (volatilep > 1 && ! flag_isoc99)\n \t\tpedwarn (\"duplicate `volatile'\");\n-\t      if (restrictp > 1)\n+\t      if (restrictp > 1 && ! flag_isoc99)\n \t\tpedwarn (\"duplicate `restrict'\");\n \n \t      type_quals = ((constp ? TYPE_QUAL_CONST : 0)\n@@ -5743,15 +5744,15 @@ start_function (declspecs, declarator, prefix_attributes, attributes)\n \n   if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl1))))\n     {\n-      error (\"return-type is an incomplete type\");\n+      error (\"return type is an incomplete type\");\n       /* Make it return void instead.  */\n       TREE_TYPE (decl1)\n \t= build_function_type (void_type_node,\n \t\t\t       TYPE_ARG_TYPES (TREE_TYPE (decl1)));\n     }\n \n   if (warn_about_return_type)\n-    warning (\"return-type defaults to `int'\");\n+    pedwarn_c99 (\"return type defaults to `int'\");\n \n   /* Save the parm names or decls from this function's declarator\n      where store_parm_decls will find them.  */"}, {"sha": "8b917ff56a25303adfe343965b3c2aba3c01cf9d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=903f51d97fc06fde3900a9628872007bf71eecac", "patch": "@@ -1781,7 +1781,8 @@ yylex ()\n \t\t      {\n \t\t\tif (spec_long_long)\n \t\t\t  error (\"three `l's in integer constant\");\n-\t\t\telse if (pedantic && ! in_system_header && warn_long_long)\n+\t\t\telse if (pedantic && ! flag_isoc99\n+\t\t\t\t && ! in_system_header && warn_long_long)\n \t\t\t  pedwarn (\"ANSI C forbids long long integer constants\");\n \t\t\tspec_long_long = 1;\n \t\t      }"}, {"sha": "474aaaec1d5cd6bfccaf417b3b865c5615a3eb53", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=903f51d97fc06fde3900a9628872007bf71eecac", "patch": "@@ -297,6 +297,8 @@ extern void c_expand_asm_operands\t\tPARAMS ((tree, tree, tree,\n \t\t\t\t\t\t\t const char *, int));\n extern void c_expand_return\t\t\tPARAMS ((tree));\n extern tree c_expand_start_case                 PARAMS ((tree));\n+extern void pedwarn_c99\t\t\t\tPARAMS ((const char *, ...))\n+\t\t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n \n /* in c-iterate.c */\n extern void init_iterators\t\t\tPARAMS ((void));"}, {"sha": "c882dd9038631c73e0699e3883bf7d5efb0eb7e5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=903f51d97fc06fde3900a9628872007bf71eecac", "patch": "@@ -6623,8 +6623,9 @@ c_expand_return (retval)\n   if (!retval)\n     {\n       current_function_returns_null = 1;\n-      if (warn_return_type && valtype != 0 && TREE_CODE (valtype) != VOID_TYPE)\n-\twarning (\"`return' with no value, in function returning non-void\");\n+      if ((warn_return_type || flag_isoc99)\n+\t  && valtype != 0 && TREE_CODE (valtype) != VOID_TYPE)\n+\tpedwarn_c99 (\"`return' with no value, in function returning non-void\");\n       expand_null_return ();\n     }\n   else if (valtype == 0 || TREE_CODE (valtype) == VOID_TYPE)\n@@ -6752,3 +6753,27 @@ c_expand_start_case (exp)\n \n   return exp;\n }\n+\n+/* Issue an ISO C99 pedantic warning MSGID.  */\n+\n+void\n+pedwarn_c99 VPARAMS ((const char *msgid, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  const char *msgid;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, msgid);\n+\n+#ifndef ANSI_PROTOTYPES\n+  msgid = va_arg (ap, const char *);\n+#endif\n+\n+  if (flag_isoc99)\n+    vpedwarn (msgid, ap);\n+  else\n+    vwarning (msgid, ap);\n+\n+  va_end (ap);\n+}"}, {"sha": "564c4883cf63ef71931c4f665f2d32cced0f09d1", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=903f51d97fc06fde3900a9628872007bf71eecac", "patch": "@@ -64,14 +64,11 @@ static void v_error_with_file_and_line PARAMS ((const char *, int,\n \t\t\t\t\t\tconst char *, va_list));\n static void v_error_with_decl PARAMS ((tree, const char *, va_list));\n static void v_error_for_asm PARAMS ((rtx, const char *, va_list));\n-static void verror PARAMS ((const char *, va_list));\n static void vfatal PARAMS ((const char *, va_list)) ATTRIBUTE_NORETURN;\n static void v_warning_with_file_and_line PARAMS ((const char *, int,\n \t\t\t\t\t\t  const char *, va_list));\n static void v_warning_with_decl PARAMS ((tree, const char *, va_list));\n static void v_warning_for_asm PARAMS ((rtx, const char *, va_list));\n-static void vwarning PARAMS ((const char *, va_list));\n-static void vpedwarn PARAMS ((const char *, va_list));\n static void v_pedwarn_with_decl PARAMS ((tree, const char *, va_list));\n static void v_pedwarn_with_file_and_line PARAMS ((const char *, int,\n \t\t\t\t\t\t  const char *, va_list));\n@@ -858,7 +855,7 @@ v_error_for_asm (insn, msgid, ap)\n \n /* Report an error at the current line number.  */\n \n-static void\n+void\n verror (msgid, ap)\n      const char *msgid;\n      va_list ap;\n@@ -946,7 +943,7 @@ v_warning_for_asm (insn, msgid, ap)\n \n /* Report a warning at the current line number.  */\n \n-static void\n+void\n vwarning (msgid, ap)\n      const char *msgid;\n      va_list ap;\n@@ -957,7 +954,7 @@ vwarning (msgid, ap)\n /* These functions issue either warnings or errors depending on\n    -pedantic-errors.  */\n \n-static void\n+void\n vpedwarn (msgid, ap)\n      const char *msgid;\n      va_list ap;"}, {"sha": "dd359f770a03d45a0624c92f3cb022bb7f7c9193", "filename": "gcc/toplev.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903f51d97fc06fde3900a9628872007bf71eecac/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=903f51d97fc06fde3900a9628872007bf71eecac", "patch": "@@ -70,10 +70,13 @@ extern void _fatal_insn\t\t\tPARAMS ((const char *,\n #endif\n extern void warning\t\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void vwarning\t\t\tPARAMS ((const char *, va_list));\n extern void error\t\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void verror\t\t\tPARAMS ((const char *, va_list));\n extern void pedwarn\t\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n+extern void vpedwarn\t\t\tPARAMS ((const char *, va_list));\n extern void pedwarn_with_file_and_line\tPARAMS ((const char *, int,\n \t\t\t\t\t\t  const char *, ...))\n   ATTRIBUTE_PRINTF_3;"}]}