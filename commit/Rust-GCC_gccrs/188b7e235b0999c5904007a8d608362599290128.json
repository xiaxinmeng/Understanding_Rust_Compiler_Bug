{"sha": "188b7e235b0999c5904007a8d608362599290128", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg4YjdlMjM1YjA5OTljNTkwNDAwN2E4ZDYwODM2MjU5OTI5MDEyOA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2011-12-10T10:22:56Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2011-12-10T10:22:56Z"}, "message": "epiphany-protos.h (epiphany_start_function): Declare.\n\ngcc:\n        * config/epiphany/epiphany-protos.h (epiphany_start_function): Declare.\n        * config/epiphany/epiphany.c (epiphany_handle_interrupt_attribute):\n        Split \"timer\" value into \"timer0\" and \"timer1\".\n        Handle page_miss, message and wand.  Don't handle static_flag.\n        Adjust warning text.\n        (epiphany_start_function): New function.\n        (epiphany_compute_function_type): Split \"timer\" value into \"timer0\"\n        and \"timer1\".  Handle page_miss, message and wand.\n        Don't handle static_flag.\n        (epiphany_expand_epilogue): Don't use frame_insn for status / iret\n        restore.\n        * config/epiphany/epiphany.h: ASM_DECLARE_FUNCTION_NAME: Define.\n        (enum epiphany_function_type):\n        Split EPIPHANY_FUNCTION_TIMER value into EPIPHANY_FUNCTION_TIMER0\n        and EPIPHANY_FUNCTION_TIMER1.\n        Remove EPIPHANY_FUNCTION_ILINK1 and EPIPHANY_FUNCTION_ILINK2 values.\n        Add EPIPHANY_FUNCTION_PAGE_MISS and EPIPHANY_FUNCTION_MESSAGE values.\n        Rename EPIPHANY_FUNCTION_STATIC_FLAG to EPIPHANY_FUNCTION_WAND.\ngcc/testsuite:\n        * gcc.target/epiphany/interrupt.c: Add dg-options \"-g\".\n        Add a scan-assembler-time clause to test for the interupt vector jump.\n        (f): Rename to ...\n        (dma0_handler): ... this.\n\nFrom-SVN: r182187", "tree": {"sha": "943dce0bd2aacee3cd16ef980feeabf5af97aa23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/943dce0bd2aacee3cd16ef980feeabf5af97aa23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/188b7e235b0999c5904007a8d608362599290128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188b7e235b0999c5904007a8d608362599290128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188b7e235b0999c5904007a8d608362599290128", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188b7e235b0999c5904007a8d608362599290128/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b149e5a261f228d455f223b0447ae1bc1bde2b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b149e5a261f228d455f223b0447ae1bc1bde2b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b149e5a261f228d455f223b0447ae1bc1bde2b74"}], "stats": {"total": 104, "additions": 85, "deletions": 19}, "files": [{"sha": "811ea3181ca7aab7ec37d4d6db808b4bdf52ebfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188b7e235b0999c5904007a8d608362599290128/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188b7e235b0999c5904007a8d608362599290128/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=188b7e235b0999c5904007a8d608362599290128", "patch": "@@ -9,6 +9,25 @@\n \t(INCOMING_RETURN_ADDR_RTX) .. this.  Use EPIPHANY_RETURN_REGNO.\n \t(DWARF_FRAME_RETURN_COLUMN): New macro.\n \n+\t* config/epiphany/epiphany-protos.h (epiphany_start_function): Declare.\n+\t* config/epiphany/epiphany.c (epiphany_handle_interrupt_attribute):\n+\tSplit \"timer\" value into \"timer0\" and \"timer1\".\n+\tHandle page_miss, message and wand.  Don't handle static_flag.\n+\tAdjust warning text.\n+\t(epiphany_start_function): New function.\n+\t(epiphany_compute_function_type): Split \"timer\" value into \"timer0\"\n+\tand \"timer1\".  Handle page_miss, message and wand.\n+\tDon't handle static_flag.\n+\t(epiphany_expand_epilogue): Don't use frame_insn for status / iret\n+\trestore.\n+\t* config/epiphany/epiphany.h: ASM_DECLARE_FUNCTION_NAME: Define.\n+\t(enum epiphany_function_type):\n+\tSplit EPIPHANY_FUNCTION_TIMER value into EPIPHANY_FUNCTION_TIMER0\n+\tand EPIPHANY_FUNCTION_TIMER1.\n+\tRemove EPIPHANY_FUNCTION_ILINK1 and EPIPHANY_FUNCTION_ILINK2 values.\n+\tAdd EPIPHANY_FUNCTION_PAGE_MISS and EPIPHANY_FUNCTION_MESSAGE values.\n+\tRename EPIPHANY_FUNCTION_STATIC_FLAG to EPIPHANY_FUNCTION_WAND.\n+\n 2011-12-10  Nathan Sidwell  <nathan@acm.org>\n \n \tPR gcov-profile/51449"}, {"sha": "2e787da857992964ae35cf5c103f6be293f9be16", "filename": "gcc/config/epiphany/epiphany-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188b7e235b0999c5904007a8d608362599290128/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188b7e235b0999c5904007a8d608362599290128/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h?ref=188b7e235b0999c5904007a8d608362599290128", "patch": "@@ -53,3 +53,4 @@ extern bool epiphany_optimize_mode_switching (int entity);\n extern bool epiphany_is_interrupt_p (tree);\n extern unsigned epiphany_special_round_type_align (tree, unsigned, unsigned);\n extern unsigned epiphany_adjust_field_align (tree, unsigned);\n+extern void epiphany_start_function (FILE *f, const char *name, tree decl);"}, {"sha": "a8fc034811ba19047156555633270d8899f0002a", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188b7e235b0999c5904007a8d608362599290128/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188b7e235b0999c5904007a8d608362599290128/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=188b7e235b0999c5904007a8d608362599290128", "patch": "@@ -435,14 +435,17 @@ epiphany_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n     }\n   else if (strcmp (TREE_STRING_POINTER (value), \"reset\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"software_exception\")\n-\t   && strcmp (TREE_STRING_POINTER (value), \"timer\")\n+\t   && strcmp (TREE_STRING_POINTER (value), \"page_miss\")\n+\t   && strcmp (TREE_STRING_POINTER (value), \"timer0\")\n+\t   && strcmp (TREE_STRING_POINTER (value), \"timer1\")\n+\t   && strcmp (TREE_STRING_POINTER (value), \"message\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"dma0\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"dma1\")\n-\t   && strcmp (TREE_STRING_POINTER (value), \"static_flag\")\n+\t   && strcmp (TREE_STRING_POINTER (value), \"wand\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"swi\"))\n     {\n       warning (OPT_Wattributes,\n-\t       \"argument of %qE attribute is not \\\"reset\\\", \\\"software_exception\\\", \\\"timer\\\", \\\"dma0\\\", \\\"dma1\\\", \\\"static_flag\\\" or \\\"swi\\\"\",\n+\t       \"argument of %qE attribute is not \\\"reset\\\", \\\"software_exception\\\", \\\"page_miss\\\", \\\"timer0\\\", \\\"timer1\\\", \\\"message\\\", \\\"dma0\\\", \\\"dma1\\\", \\\"wand\\\" or \\\"swi\\\"\",\n \t       name);\n       *no_add_attrs = true;\n     }\n@@ -892,14 +895,20 @@ epiphany_compute_function_type (tree decl)\n \t    fn_type = EPIPHANY_FUNCTION_RESET;\n \t  else if (!strcmp (TREE_STRING_POINTER (value), \"software_exception\"))\n \t    fn_type = EPIPHANY_FUNCTION_SOFTWARE_EXCEPTION;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"timer\"))\n-\t    fn_type = EPIPHANY_FUNCTION_TIMER;\n+\t  else if (!strcmp (TREE_STRING_POINTER (value), \"page_miss\"))\n+\t    fn_type = EPIPHANY_FUNCTION_PAGE_MISS;\n+\t  else if (!strcmp (TREE_STRING_POINTER (value), \"timer0\"))\n+\t    fn_type = EPIPHANY_FUNCTION_TIMER0;\n+\t  else if (!strcmp (TREE_STRING_POINTER (value), \"timer1\"))\n+\t    fn_type = EPIPHANY_FUNCTION_TIMER1;\n+\t  else if (!strcmp (TREE_STRING_POINTER (value), \"message\"))\n+\t    fn_type = EPIPHANY_FUNCTION_MESSAGE;\n \t  else if (!strcmp (TREE_STRING_POINTER (value), \"dma0\"))\n \t    fn_type = EPIPHANY_FUNCTION_DMA0;\n \t  else if (!strcmp (TREE_STRING_POINTER (value), \"dma1\"))\n \t    fn_type = EPIPHANY_FUNCTION_DMA1;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"static_flag\"))\n-\t    fn_type = EPIPHANY_FUNCTION_STATIC_FLAG;\n+\t  else if (!strcmp (TREE_STRING_POINTER (value), \"wand\"))\n+\t    fn_type = EPIPHANY_FUNCTION_WAND;\n \t  else if (!strcmp (TREE_STRING_POINTER (value), \"swi\"))\n \t    fn_type = EPIPHANY_FUNCTION_SWI;\n \t  else\n@@ -1812,14 +1821,14 @@ epiphany_expand_epilogue (int sibcall_p)\n     }\n   if (interrupt_p)\n     {\n-      frame_move_insn (gen_rtx_REG (word_mode, STATUS_REGNUM),\n-\t\t       gen_rtx_REG (SImode, GPR_0));\n-      frame_move_insn (gen_rtx_REG (word_mode, IRET_REGNUM),\n-\t\t       gen_rtx_REG (SImode, GPR_0+1));\n+      emit_move_insn (gen_rtx_REG (word_mode, STATUS_REGNUM),\n+\t\t      gen_rtx_REG (SImode, GPR_0));\n+      emit_move_insn (gen_rtx_REG (word_mode, IRET_REGNUM),\n+\t\t      gen_rtx_REG (SImode, GPR_0+1));\n       addr = plus_constant (stack_pointer_rtx,\n \t\t\t    - (HOST_WIDE_INT) 2 * UNITS_PER_WORD);\n-      frame_move_insn (gen_rtx_REG (DImode, GPR_0),\n-\t\t       gen_frame_mem (DImode, addr));\n+      emit_move_insn (gen_rtx_REG (DImode, GPR_0),\n+\t\t      gen_frame_mem (DImode, addr));\n     }\n   addr = plus_constant (stack_pointer_rtx,\n \t\t\tepiphany_stack_offset - (HOST_WIDE_INT) UNITS_PER_WORD);\n@@ -2748,4 +2757,28 @@ epiphany_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n     }\n }\n \n+void\n+epiphany_start_function (FILE *file, const char *name, tree decl)\n+{\n+  tree attrs, int_attr;\n+\n+  attrs = DECL_ATTRIBUTES (decl);\n+  int_attr = lookup_attribute (\"interrupt\", attrs);\n+  if (int_attr)\n+    {\n+      char buf[99];\n+      const char *fname;\n+\n+      int_attr = TREE_VALUE (TREE_VALUE (int_attr));\n+      sprintf (buf, \"ivt_entry_%.80s\", TREE_STRING_POINTER (int_attr));\n+      switch_to_section (get_section (buf, SECTION_CODE, decl));\n+      fname = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+      fputs (\"\\tb\\t\", file);\n+      assemble_name (file, fname);\n+      fputc ('\\n', file);\n+      switch_to_section (function_section (decl));\n+    }\n+  ASM_OUTPUT_FUNCTION_LABEL (file, name, decl);\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "f92e1973e36f84ce1721a87cebaf33dff986fb5b", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188b7e235b0999c5904007a8d608362599290128/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188b7e235b0999c5904007a8d608362599290128/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=188b7e235b0999c5904007a8d608362599290128", "patch": "@@ -831,14 +831,12 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.balign %d\\n\", 1 << (LOG)); } while (0)\n enum epiphany_function_type\n {\n   EPIPHANY_FUNCTION_UNKNOWN, EPIPHANY_FUNCTION_NORMAL,\n-  /* These are interrupt handlers.  The name corresponds to the register\n-     name that contains the return address.  */\n-  EPIPHANY_FUNCTION_ILINK1, EPIPHANY_FUNCTION_ILINK2,\n   /* These are interrupt handlers. The name corresponds to which type\n      of interrupt handler we're dealing with. */\n   EPIPHANY_FUNCTION_RESET, EPIPHANY_FUNCTION_SOFTWARE_EXCEPTION,\n-  EPIPHANY_FUNCTION_TIMER, EPIPHANY_FUNCTION_DMA0,\n-  EPIPHANY_FUNCTION_DMA1, EPIPHANY_FUNCTION_STATIC_FLAG,\n+  EPIPHANY_FUNCTION_PAGE_MISS,\n+  EPIPHANY_FUNCTION_TIMER0, EPIPHANY_FUNCTION_TIMER1, EPIPHANY_FUNCTION_MESSAGE,\n+  EPIPHANY_FUNCTION_DMA0, EPIPHANY_FUNCTION_DMA1, EPIPHANY_FUNCTION_WAND,\n   EPIPHANY_FUNCTION_SWI\n };\n \n@@ -895,4 +893,8 @@ extern struct rtl_opt_pass pass_resolve_sw_modes;\n    implemented.  */\n #define TARGET_FUSED_MADD (flag_fp_contract_mode == FP_CONTRACT_FAST)\n \n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n+  epiphany_start_function ((FILE), (NAME), (DECL))\n+\n #endif /* !GCC_EPIPHANY_H */"}, {"sha": "83e73b2a9ba0f0d41700e5e9ea079bba743c6d43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188b7e235b0999c5904007a8d608362599290128/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188b7e235b0999c5904007a8d608362599290128/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=188b7e235b0999c5904007a8d608362599290128", "patch": "@@ -1,3 +1,10 @@\n+2011-12-10  Joern Rennecke <joern.rennecke@embecosm.com>\n+\n+\t* gcc.target/epiphany/interrupt.c: Add dg-options \"-g\".\n+\tAdd a scan-assembler-time clause to test for the interupt vector jump.\n+\t(f): Rename to ...\n+\t(dma0_handler): ... this.\n+\n 2011-12-10  Nathan Sidwell  <nathan@acm.org>\n \n \tPR gcov-profile/51449"}, {"sha": "86fb255613b3e5bfd8a51ea685ddfc08c444029a", "filename": "gcc/testsuite/gcc.target/epiphany/interrupt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/188b7e235b0999c5904007a8d608362599290128/gcc%2Ftestsuite%2Fgcc.target%2Fepiphany%2Finterrupt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/188b7e235b0999c5904007a8d608362599290128/gcc%2Ftestsuite%2Fgcc.target%2Fepiphany%2Finterrupt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fepiphany%2Finterrupt.c?ref=188b7e235b0999c5904007a8d608362599290128", "patch": "@@ -1,5 +1,7 @@\n+/* { dg-options \"-g\" } */\n+\n void __attribute__((interrupt(\"dma0\")))\n-f (void)\n+dma0_handler (void)\n {\n }\n \n@@ -12,3 +14,5 @@ void __attribute__((interrupt(42)))\n h (void)\n { /* { dg-warning \"is not a string constant\" } */\n }\n+\n+/* { dg-final { scan-assembler-times \"b\\[ \\t\\]*_dma0_handler\" 1 } } */"}]}