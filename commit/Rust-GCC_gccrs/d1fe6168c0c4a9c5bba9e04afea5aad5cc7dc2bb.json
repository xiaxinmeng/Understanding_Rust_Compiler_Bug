{"sha": "d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmZTYxNjhjMGM0YTljNWJiYTllMDRhZmVhNWFhZDVjYzdkYzJiYg==", "commit": {"author": {"name": "Peter Barada", "email": "peter@the-baradas.com", "date": "2004-05-29T15:10:41Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-05-29T15:10:41Z"}, "message": "m68k.h (EXTRA_CONSTRAINT): add 'U' for register offset addressing.\n\n\t* config/m68k/m68k.h(EXTRA_CONSTRAINT): add 'U' for register offset\n\taddressing.\n\t* config/m68k/m68k.md: Add 'U,U' alternative to ColdFire variants of\n\tmovsi,movhi,movqi insn patterns.\n\nFrom-SVN: r82420", "tree": {"sha": "8ebf935ce774bc4229a4d85e2e6675da192056ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ebf935ce774bc4229a4d85e2e6675da192056ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb/comments", "author": null, "committer": null, "parents": [{"sha": "803cb0b5c9ff81ba0b4ec018fff529a9b7cf43f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/803cb0b5c9ff81ba0b4ec018fff529a9b7cf43f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/803cb0b5c9ff81ba0b4ec018fff529a9b7cf43f2"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "ca2b422b8febc858def7aac507611af77240bba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "patch": "@@ -1,3 +1,10 @@\n+2004-05-29  Peter Barada  <peter@the-baradas.com>\n+\n+\t* config/m68k/m68k.h(EXTRA_CONSTRAINT): add 'U' for register offset\n+\taddressing.\n+\t* config/m68k/m68k.md: Add 'U,U' alternative to ColdFire variants of\n+\tmovsi,movhi,movqi insn patterns.\n+\n 2005-05-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* c-semantics.c (emit_local_var): Remove code for DECL_INITIAL."}, {"sha": "c7cc76b7d458502fd201a04c30e7f87fe61a4998", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "patch": "@@ -735,7 +735,8 @@ extern enum reg_class regno_reg_class[];\n \n    `Q' means address register indirect addressing mode.\n    `S' is for operands that satisfy 'm' when -mpcrel is in effect.\n-   `T' is for operands that satisfy 's' when -mpcrel is not in effect.  */\n+   `T' is for operands that satisfy 's' when -mpcrel is not in effect.\n+   `U' is for register offset addressing.  */\n \n #define EXTRA_CONSTRAINT(OP,CODE)\t\t\t\\\n   (((CODE) == 'S')\t\t\t\t\t\\\n@@ -755,7 +756,13 @@ extern enum reg_class regno_reg_class[];\n    ? (GET_CODE (OP) == MEM \t\t\t\t\\\n       && GET_CODE (XEXP (OP, 0)) == REG)\t\t\\\n    :\t\t\t\t\t\t\t\\\n-   0)))\n+  (((CODE) == 'U')\t\t\t\t\t\\\n+   ? (GET_CODE (OP) == MEM \t\t\t\t\\\n+      && GET_CODE (XEXP (OP, 0)) == PLUS\t\t\\\n+      && GET_CODE (XEXP (XEXP (OP, 0), 0)) == REG\t\\\n+      && GET_CODE (XEXP (XEXP (OP, 0), 1)) == CONST_INT) \\\n+   :\t\t\t\t\t\t\t\\\n+   0))))\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use."}, {"sha": "2603195224dc97f199a62f838ec0641e13336025", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "patch": "@@ -676,8 +676,8 @@\n })\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r<Q>,g\")\n-\t(match_operand:SI 1 \"general_operand\" \"g,r<Q>\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r<Q>,g,U\")\n+\t(match_operand:SI 1 \"general_operand\" \"g,r<Q>,U\"))]\n   \"TARGET_COLDFIRE\"\n   \"* return output_move_simode (operands);\")\n \n@@ -706,8 +706,8 @@\n   \"* return output_move_himode (operands);\")\n \n  (define_insn \"\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r<Q>,g\")\n-\t(match_operand:HI 1 \"general_operand\" \"g,r<Q>\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r<Q>,g,U\")\n+\t(match_operand:HI 1 \"general_operand\" \"g,r<Q>,U\"))]\n   \"TARGET_COLDFIRE\"\n   \"* return output_move_himode (operands);\")\n \n@@ -742,8 +742,8 @@\n   \"* return output_move_qimode (operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d<Q>,dm,d*a\")\n-\t(match_operand:QI 1 \"general_src_operand\" \"dmi,d<Q>,di*a\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d<Q>,dm,U,d*a\")\n+\t(match_operand:QI 1 \"general_src_operand\" \"dmi,d<Q>,U,di*a\"))]\n   \"TARGET_COLDFIRE\"\n   \"* return output_move_qimode (operands);\")\n "}]}