{"sha": "21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkN2JiYTI0MmYxYTczNDlhZGM2YTU3YWE0Yzg3NGY3YmIxNTlmOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-24T09:18:21Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-31T09:25:37Z"}, "message": "LTO: stream properly FUNCTION_DECL_DECL_TYPE.\n\ngcc/lto/ChangeLog:\n\n\t* lto-common.c (compare_tree_sccs_1): Compare\n\tFUNCTION_DECL_DECL_TYPE.\n\ngcc/ChangeLog:\n\n\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields):\n\tUnpack FUNCTION_DECL_DECL_TYPE.\n\t* tree-streamer-out.c (pack_ts_function_decl_value_fields):\n\tStream FUNCTION_DECL_DECL_TYPE instead of\n\tDECL_IS_OPERATOR_NEW_P.\n\t* tree.h (set_function_decl_type): Use FUNCTION_DECL_DECL_TYPE\n\tmacro.\n\t(DECL_IS_OPERATOR_NEW_P): Likewise.\n\t(DECL_IS_OPERATOR_DELETE_P): Likewise.\n\t(DECL_LAMBDA_FUNCTION_P): Likewise.", "tree": {"sha": "f044c9d3fc396d158dc9e1cc2d5f7cb497d20cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f044c9d3fc396d158dc9e1cc2d5f7cb497d20cfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "bfe52a2e94218a36fc1b1480c792d82bd7862342", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "patch": "@@ -1235,7 +1235,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_IS_NOVOPS);\n       compare_values (DECL_IS_RETURNS_TWICE);\n       compare_values (DECL_IS_MALLOC);\n-      compare_values (DECL_IS_OPERATOR_NEW_P);\n+      compare_values (FUNCTION_DECL_DECL_TYPE);\n       compare_values (DECL_DECLARED_INLINE_P);\n       compare_values (DECL_STATIC_CHAIN);\n       compare_values (DECL_NO_INLINE_WARNING_P);"}, {"sha": "e0522bf2ac16ab956b6ea47820d4dab0ac953def", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "patch": "@@ -333,7 +333,7 @@ unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_IS_NOVOPS (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IS_RETURNS_TWICE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IS_MALLOC (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  DECL_SET_IS_OPERATOR_NEW (expr, (unsigned) bp_unpack_value (bp, 1));\n+  FUNCTION_DECL_DECL_TYPE (expr) = (function_decl_type) bp_unpack_value (bp, 2);\n   DECL_SET_IS_OPERATOR_DELETE (expr, (unsigned) bp_unpack_value (bp, 1));\n   DECL_DECLARED_INLINE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_STATIC_CHAIN (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "855d1cd59b9f14638ba632488fc11dfc98695b99", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "patch": "@@ -298,7 +298,7 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_IS_NOVOPS (expr), 1);\n   bp_pack_value (bp, DECL_IS_RETURNS_TWICE (expr), 1);\n   bp_pack_value (bp, DECL_IS_MALLOC (expr), 1);\n-  bp_pack_value (bp, DECL_IS_OPERATOR_NEW_P (expr), 1);\n+  bp_pack_value (bp, FUNCTION_DECL_DECL_TYPE (expr), 2);\n   bp_pack_value (bp, DECL_IS_OPERATOR_DELETE_P (expr), 1);\n   bp_pack_value (bp, DECL_DECLARED_INLINE_P (expr), 1);\n   bp_pack_value (bp, DECL_STATIC_CHAIN (expr), 1);"}, {"sha": "260a3ae6c83a120c91ea201c252fa3b7f65ac2e3", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d7bba242f1a7349adc6a57aa4c874f7bb159f8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=21d7bba242f1a7349adc6a57aa4c874f7bb159f8", "patch": "@@ -3111,7 +3111,7 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n     {\n       gcc_assert (FUNCTION_DECL_DECL_TYPE (decl) == NONE\n \t\t  || FUNCTION_DECL_DECL_TYPE (decl) == t);\n-      decl->function_decl.decl_type = t;\n+      FUNCTION_DECL_DECL_TYPE (decl) = t;\n     }\n   else if (FUNCTION_DECL_DECL_TYPE (decl) == t)\n     FUNCTION_DECL_DECL_TYPE (decl) = NONE;\n@@ -3126,7 +3126,7 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n    C++ operator new, meaning that it returns a pointer for which we\n    should not use type based aliasing.  */\n #define DECL_IS_OPERATOR_NEW_P(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_NEW)\n+  (FUNCTION_DECL_DECL_TYPE (FUNCTION_DECL_CHECK (NODE)) == OPERATOR_NEW)\n \n #define DECL_IS_REPLACEABLE_OPERATOR_NEW_P(NODE) \\\n   (DECL_IS_OPERATOR_NEW_P (NODE) && DECL_IS_REPLACEABLE_OPERATOR (NODE))\n@@ -3137,7 +3137,7 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n /* Nonzero in a FUNCTION_DECL means this function should be treated as\n    C++ operator delete.  */\n #define DECL_IS_OPERATOR_DELETE_P(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_DELETE)\n+  (FUNCTION_DECL_DECL_TYPE (FUNCTION_DECL_CHECK (NODE)) == OPERATOR_DELETE)\n \n #define DECL_SET_IS_OPERATOR_DELETE(NODE, VAL) \\\n   set_function_decl_type (FUNCTION_DECL_CHECK (NODE), OPERATOR_DELETE, VAL)\n@@ -3288,7 +3288,7 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n \n /* In FUNCTION_DECL, this is set if this function is a lambda function.  */\n #define DECL_LAMBDA_FUNCTION_P(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == LAMBDA_FUNCTION)\n+  (FUNCTION_DECL_DECL_TYPE (FUNCTION_DECL_CHECK (NODE)) == LAMBDA_FUNCTION)\n \n #define DECL_SET_LAMBDA_FUNCTION(NODE, VAL) \\\n   set_function_decl_type (FUNCTION_DECL_CHECK (NODE), LAMBDA_FUNCTION, VAL)"}]}