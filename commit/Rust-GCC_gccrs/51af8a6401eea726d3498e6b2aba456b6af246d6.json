{"sha": "51af8a6401eea726d3498e6b2aba456b6af246d6", "node_id": "C_kwDOANBUbNoAKDUxYWY4YTY0MDFlZWE3MjZkMzQ5OGU2YjJhYmE0NTZiNmFmMjQ2ZDY", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-02-27T15:02:21Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-03T00:24:28Z"}, "message": "d: vector float comparison doesn't result in 0 or -1 [PR108945]\n\nWhen comparing two vectors, the type of vector was used as the result of\nthe condition result.  This meant that for floating point comparisons,\neach value would either be `0.0' or `-1.0' reinterpreted as an integer,\nnot the expected integral bitmask values `0' and `-1'.\n\nInstead, use the comparison type determined by truth_type_for as the\nresult of the comparison.  If a reinterpret is later required by the\nfinal conversion for generating CmpExp, it is still only going to\nreinterpret one integer kind as another.\n\n\tPR d/108945\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (build_boolop): Evaluate vector comparison as\n\tthe truth_type_for vector type.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr108945.d: New test.", "tree": {"sha": "896bb861a63434eca3f5aec7c30de518ab106b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/896bb861a63434eca3f5aec7c30de518ab106b89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51af8a6401eea726d3498e6b2aba456b6af246d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51af8a6401eea726d3498e6b2aba456b6af246d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51af8a6401eea726d3498e6b2aba456b6af246d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51af8a6401eea726d3498e6b2aba456b6af246d6/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14db9ed505d9eb84695f900017a95bc3f6c27ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14db9ed505d9eb84695f900017a95bc3f6c27ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14db9ed505d9eb84695f900017a95bc3f6c27ffe"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "5a041927ec9a9d4f8ae5c23fa03d0822e67e240b", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51af8a6401eea726d3498e6b2aba456b6af246d6/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51af8a6401eea726d3498e6b2aba456b6af246d6/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=51af8a6401eea726d3498e6b2aba456b6af246d6", "patch": "@@ -1453,13 +1453,12 @@ build_boolop (tree_code code, tree arg0, tree arg1)\n     {\n       /* Build a vector comparison.\n \t VEC_COND_EXPR <e1 op e2, { -1, -1, -1, -1 }, { 0, 0, 0, 0 }>; */\n-      tree type = TREE_TYPE (arg0);\n-      tree cmptype = truth_type_for (type);\n+      tree cmptype = truth_type_for (TREE_TYPE (arg0));\n       tree cmp = fold_build2_loc (input_location, code, cmptype, arg0, arg1);\n \n-      return fold_build3_loc (input_location, VEC_COND_EXPR, type, cmp,\n-\t\t\t      build_minus_one_cst (type),\n-\t\t\t      build_zero_cst (type));\n+      return fold_build3_loc (input_location, VEC_COND_EXPR, cmptype, cmp,\n+\t\t\t      build_minus_one_cst (cmptype),\n+\t\t\t      build_zero_cst (cmptype));\n     }\n \n   if (code == EQ_EXPR || code == NE_EXPR)"}, {"sha": "03b9de8e75870350202dd2b01761920c3917d4cc", "filename": "gcc/testsuite/gdc.dg/pr108945.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51af8a6401eea726d3498e6b2aba456b6af246d6/gcc%2Ftestsuite%2Fgdc.dg%2Fpr108945.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51af8a6401eea726d3498e6b2aba456b6af246d6/gcc%2Ftestsuite%2Fgdc.dg%2Fpr108945.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr108945.d?ref=51af8a6401eea726d3498e6b2aba456b6af246d6", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-fdump-tree-gimple\" }\n+// { dg-additional-options \"-mavx\" { target avx_runtime } }\n+// { dg-do compile { target { avx_runtime || vect_sizes_16B_8B } } }\n+\n+alias f4 = __vector(float[4]);\n+\n+auto pr108945(f4 a, f4 b)\n+{\n+    return a < b;\n+}\n+\n+// { dg-final { scan-tree-dump-not \"VEC_COND_EXPR\" \"gimple\" } }"}]}