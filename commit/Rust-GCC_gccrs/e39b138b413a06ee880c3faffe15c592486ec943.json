{"sha": "e39b138b413a06ee880c3faffe15c592486ec943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM5YjEzOGI0MTNhMDZlZTg4MGMzZmFmZmUxNWM1OTI0ODZlYzk0Mw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-10-08T05:01:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-08T05:01:10Z"}, "message": "typeck (type_for_mode): Only return TItype nodes when HOST_BITS_PER_WIDE_INT is >= 64 bits.\n\n        * typeck (type_for_mode): Only return TItype nodes when\n        HOST_BITS_PER_WIDE_INT is >= 64 bits.\n        (type_for_size): Similarly.\n        * decl.c (intTI_type_node, unsigned_intTI_type_node): Only declare\n        when HOST_BITS_PER_WIDE_INT is >= 64 bits.\n        (init_decl_processing): Only create TItype nodes when\n        HOST_BITS_PER_WIDE_INT is >= 64 bits.\n\nFrom-SVN: r22914", "tree": {"sha": "2dcfde163394cfd7c439dedb88942b64ef934f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dcfde163394cfd7c439dedb88942b64ef934f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e39b138b413a06ee880c3faffe15c592486ec943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39b138b413a06ee880c3faffe15c592486ec943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39b138b413a06ee880c3faffe15c592486ec943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39b138b413a06ee880c3faffe15c592486ec943/comments", "author": null, "committer": null, "parents": [{"sha": "b03fc8c9bd81309b56cb3eba1e178ec6feab0dd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03fc8c9bd81309b56cb3eba1e178ec6feab0dd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03fc8c9bd81309b56cb3eba1e178ec6feab0dd8"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "558632dc1ad519d3af8a86c9e6d175ad2d6dee91", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39b138b413a06ee880c3faffe15c592486ec943/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39b138b413a06ee880c3faffe15c592486ec943/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=e39b138b413a06ee880c3faffe15c592486ec943", "patch": "@@ -1,3 +1,13 @@\n+Thu Oct  8 05:57:41 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* typeck (type_for_mode): Only return TItype nodes when\n+\tHOST_BITS_PER_WIDE_INT is >= 64 bits.\n+\t(type_for_size): Similarly.\n+\t* decl.c (intTI_type_node, unsigned_intTI_type_node): Only declare\n+\twhen HOST_BITS_PER_WIDE_INT is >= 64 bits.\n+\t(init_decl_processing): Only create TItype nodes when\n+\tHOST_BITS_PER_WIDE_INT is >= 64 bits.\n+\n Wed Oct  7 12:19:21 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (hash.h): Add -L KR-C -F ', 0, 0, 0' flags to gperf."}, {"sha": "bf2561f421918a15db2d3921d04668301fe87b48", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39b138b413a06ee880c3faffe15c592486ec943/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39b138b413a06ee880c3faffe15c592486ec943/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=e39b138b413a06ee880c3faffe15c592486ec943", "patch": "@@ -353,13 +353,17 @@ tree intQI_type_node;\n tree intHI_type_node;\n tree intSI_type_node;\n tree intDI_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n tree intTI_type_node;\n+#endif\n \n tree unsigned_intQI_type_node;\n tree unsigned_intHI_type_node;\n tree unsigned_intSI_type_node;\n tree unsigned_intDI_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n tree unsigned_intTI_type_node;\n+#endif\n \n /* a VOID_TYPE node.  */\n \n@@ -3531,12 +3535,16 @@ init_decl_processing ()\n   intHI_type_node = make_signed_type (GET_MODE_BITSIZE (HImode));\n   intSI_type_node = make_signed_type (GET_MODE_BITSIZE (SImode));\n   intDI_type_node = make_signed_type (GET_MODE_BITSIZE (DImode));\n+#if HOST_BITS_PER_WIDE_INT >= 64\n   intTI_type_node = make_signed_type (GET_MODE_BITSIZE (TImode));\n+#endif\n   unsigned_intQI_type_node = make_unsigned_type (GET_MODE_BITSIZE (QImode));\n   unsigned_intHI_type_node = make_unsigned_type (GET_MODE_BITSIZE (HImode));\n   unsigned_intSI_type_node = make_unsigned_type (GET_MODE_BITSIZE (SImode));\n   unsigned_intDI_type_node = make_unsigned_type (GET_MODE_BITSIZE (DImode));\n+#if HOST_BITS_PER_WIDE_INT >= 64\n   unsigned_intTI_type_node = make_unsigned_type (GET_MODE_BITSIZE (TImode));\n+#endif\n \n   float_type_node = make_node (REAL_TYPE);\n   TYPE_PRECISION (float_type_node) = FLOAT_TYPE_SIZE;"}, {"sha": "1132babc896cfaccb68dcdecec7f0d4df5137d8c", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e39b138b413a06ee880c3faffe15c592486ec943/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e39b138b413a06ee880c3faffe15c592486ec943/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=e39b138b413a06ee880c3faffe15c592486ec943", "patch": "@@ -41,13 +41,17 @@ extern tree intQI_type_node;\n extern tree intHI_type_node;\n extern tree intSI_type_node;\n extern tree intDI_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n extern tree intTI_type_node;\n+#endif\n \n extern tree unsigned_intQI_type_node;\n extern tree unsigned_intHI_type_node;\n extern tree unsigned_intSI_type_node;\n extern tree unsigned_intDI_type_node;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n extern tree unsigned_intTI_type_node;\n+#endif\n \n /* forward declarations */\n static int chill_l_equivalent PROTO((tree, tree, struct mode_chain*));\n@@ -3838,8 +3842,10 @@ type_for_size (bits, unsignedp)\n   if (bits <= TYPE_PRECISION (intDI_type_node))\n     return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n \n+#if HOST_BITS_PER_WIDE_INT >= 64\n   if (bits <= TYPE_PRECISION (intTI_type_node))\n     return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n+#endif\n \n   return 0;\n }\n@@ -3880,8 +3886,10 @@ type_for_mode (mode, unsignedp)\n   if (mode == TYPE_MODE (intDI_type_node))\n     return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n \n+#if HOST_BITS_PER_WIDE_INT >= 64\n   if (mode == TYPE_MODE (intTI_type_node))\n     return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n+#endif\n \n   if (mode == TYPE_MODE (float_type_node))\n     return float_type_node;"}]}