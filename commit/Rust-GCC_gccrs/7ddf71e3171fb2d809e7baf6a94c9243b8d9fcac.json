{"sha": "7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkZjcxZTMxNzFmYjJkODA5ZTdiYWY2YTk0YzkyNDNiOGQ5ZmNhYw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-04-08T15:00:34Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-08T15:00:34Z"}, "message": "genoutput.c (validate_optab_operands): New.\n\n2009-04-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* genoutput.c (validate_optab_operands): New.\n\t(gen_insn, gen_expand): Call it.\n\n\t* genflags.c (gen_insn): Detect misused iterators.\n\t(main): Pass line_no to gen_insn, exit with status 1 on error.\n\n\t* genextract.c (line_no): Make global.\n\t(VEC_safe_set_locstr): Change assertion to error message.\n\t(main): Exit with status 1 on error.\n\nFrom-SVN: r145746", "tree": {"sha": "a0c23b6e97fff3605468cc753addf1d49c74ad81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0c23b6e97fff3605468cc753addf1d49c74ad81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed57136d4a6bbf190126322a818175debee588b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed57136d4a6bbf190126322a818175debee588b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed57136d4a6bbf190126322a818175debee588b4"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "4f3d18d41e50934d89ebeea6399cb259c1316d4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "patch": "@@ -1,3 +1,15 @@\n+2009-04-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* genoutput.c (validate_optab_operands): New.\n+\t(gen_insn, gen_expand): Call it.\n+\n+\t* genflags.c (gen_insn): Detect misused iterators.\n+\t(main): Pass line_no to gen_insn, exit with status 1 on error.\n+\n+\t* genextract.c (line_no): Make global.\n+\t(VEC_safe_set_locstr): Change assertion to error message.\n+\t(main): Exit with status 1 on error.\n+\n 2009-04-08  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/39614"}, {"sha": "c414891bb6bfa6788696cd5c97488e89c85fa1c4", "filename": "gcc/genextract.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "patch": "@@ -80,6 +80,8 @@ struct accum_extract\n   VEC(char,heap)   *pathstr;\n };\n \n+int line_no;\n+\n /* Forward declarations.  */\n static void walk_rtx (rtx, struct accum_extract *);\n \n@@ -187,8 +189,13 @@ VEC_safe_set_locstr (VEC(locstr,heap) **vp, unsigned int ix, char *str)\n {\n   if (ix < VEC_length (locstr, *vp))\n     {\n-      gcc_assert (VEC_index (locstr, *vp, ix) == 0);\n-      VEC_replace (locstr, *vp, ix, str);\n+      if (VEC_index (locstr, *vp, ix))\n+\t{\n+\t  message_with_line (line_no, \"repeated operand number %d\", ix);\n+\t  have_error = 1;\n+\t}\n+      else\n+        VEC_replace (locstr, *vp, ix, str);\n     }\n   else\n     {\n@@ -399,7 +406,6 @@ main (int argc, char **argv)\n   struct code_ptr *link;\n   const char *name;\n   int insn_code_number;\n-  int line_no;\n \n   progname = \"genextract\";\n \n@@ -423,6 +429,9 @@ main (int argc, char **argv)\n \t}\n     }\n \n+  if (have_error)\n+    return FATAL_EXIT_CODE;\n+\n   print_header ();\n \n   /* Write out code to handle peepholes and the insn_codes that it should"}, {"sha": "53641010935493baa3a3cee9b5f5f36347582c1f", "filename": "gcc/genflags.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "patch": "@@ -43,7 +43,7 @@ static void max_operand_1 (rtx);\n static int num_operands (rtx);\n static void gen_proto (rtx);\n static void gen_macro (const char *, int, int);\n-static void gen_insn (rtx);\n+static void gen_insn (int, rtx);\n \n /* Count the number of match_operand's found.  */\n \n@@ -187,13 +187,32 @@ gen_proto (rtx insn)\n }\n \n static void\n-gen_insn (rtx insn)\n+gen_insn (int line_no, rtx insn)\n {\n   const char *name = XSTR (insn, 0);\n   const char *p;\n+  const char *lt, *gt;\n   int len;\n   int truth = maybe_eval_c_test (XSTR (insn, 2));\n \n+  lt = strchr (name, '<'); \n+  if (lt && strchr (lt + 1, '>'))\n+    {\n+      message_with_line (line_no, \"unresolved iterator\");\n+      have_error = 1;\n+      return;\n+    }\n+\n+  gt = strchr (name, '>'); \n+  if (lt || gt)\n+    {\n+      message_with_line (line_no,\n+\t\t\t \"unmatched angle brackets, likely \"\n+\t\t\t \"an error in iterator syntax\");\n+      have_error = 1;\n+      return;\n+    }\n+\n   /* Don't mention instructions whose names are the null string\n      or begin with '*'.  They are in the machine description just\n      to be recognized.  */\n@@ -260,7 +279,7 @@ main (int argc, char **argv)\n       if (desc == NULL)\n \tbreak;\n       if (GET_CODE (desc) == DEFINE_INSN || GET_CODE (desc) == DEFINE_EXPAND)\n-\tgen_insn (desc);\n+\tgen_insn (line_no, desc);\n     }\n \n   /* Print out the prototypes now.  */\n@@ -273,7 +292,7 @@ main (int argc, char **argv)\n \n   puts(\"\\n#endif /* GCC_INSN_FLAGS_H */\");\n \n-  if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n+  if (have_error || ferror (stdout) || fflush (stdout) || fclose (stdout))\n     return FATAL_EXIT_CODE;\n \n   return SUCCESS_EXIT_CODE;"}, {"sha": "e651cb4d8788ebf5873dc8cf80a7914180100b0a", "filename": "gcc/genoutput.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=7ddf71e3171fb2d809e7baf6a94c9243b8d9fcac", "patch": "@@ -830,6 +830,22 @@ validate_insn_operands (struct data *d)\n \thave_error = 1;\n       }\n }\n+\n+static void\n+validate_optab_operands (struct data *d)\n+{\n+  if (!d->name || d->name[0] == '\\0' || d->name[0] == '*')\n+    return;\n+\n+  /* Miscellaneous tests.  */\n+  if (strncmp (d->name, \"cstore\", 6) == 0\n+      && d->name[strlen (d->name) - 1] == '4'\n+      && d->operand[0].mode == VOIDmode)\n+    {\n+      message_with_line (d->lineno, \"missing mode for operand 0 of cstore\");\n+      have_error = 1;\n+    }\n+}\n \f\n /* Look at a define_insn just read.  Assign its code number.  Record\n    on idata the template and the number of arguments.  If the insn has\n@@ -871,6 +887,7 @@ gen_insn (rtx insn, int lineno)\n #endif\n   validate_insn_operands (d);\n   validate_insn_alternatives (d);\n+  validate_optab_operands (d);\n   place_operands (d);\n   process_template (d, XTMPL (insn, 3));\n }\n@@ -956,6 +973,7 @@ gen_expand (rtx insn, int lineno)\n   d->output_format = INSN_OUTPUT_FORMAT_NONE;\n \n   validate_insn_alternatives (d);\n+  validate_optab_operands (d);\n   place_operands (d);\n }\n \f"}]}