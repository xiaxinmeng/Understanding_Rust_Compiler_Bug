{"sha": "0ebc109a5ea094a942ce928f6e9d89a682ce9971", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGViYzEwOWE1ZWEwOTRhOTQyY2U5MjhmNmU5ZDg5YTY4MmNlOTk3MQ==", "commit": {"author": {"name": "Vincent Pucci", "email": "pucci@adacore.com", "date": "2012-08-06T08:12:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-08-06T08:12:10Z"}, "message": "re PR ada/54125 (s-atopri.adb:40:10: \"Support_Atomic_Primitives\" is undefined broke Ada on multiple platforms)\n\n2012-08-06  Vincent Pucci  <pucci@adacore.com>\n\nPR ada/54125\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Expand new\n\tAtomic_Always_Lock_Free attribute.\n\t* sem_attr.adb (Analyze_Attribute): Analyze new\n\tAtomic_Always_Lock_Free attribute.\n\t(Eval_Attribute): Nothing to do with new Atomic_Always_Lock_Free\n\tattribute.\n\t* sem_ch9.adb (Allows_Lock_Free_Implementation):\n\tSupport_Atomic_Primitives check replaces previous erroneous\n\tsize check.\n\t* sem_util.adb, sem_util.ads (Support_Atomic_Primitives):\n\tNew routine.\n\t* snames.ads-tmpl: New name Name_Atomic_Always_Lock_Free and\n\tnew attribute Attribute_Atomic_Always_Lock_Free defined.\n\t* s-atopri.adb: Support_Atomic_Primitives checks replaced by\n\tAtomic_Always_Lock_Free queries.\n\t* system-aix64.ads, system-aix.ads, system-darwin-ppc.ads,\n\tsystem-hpux.ads, system-linux-alpha.ads, system-linux-hppa.ads,\n\tsystem-linux-ppc.ads, system-linux-s390.ads,\n\tsystem-linux-s390x.ads, system-linux-sh4.ads,\n\tsystem-linux-sparc.ads, system-lynxos178-ppc.ads,\n\tsystem-lynxos-ppc.ads, system-mingw.ads,\n\tsystem-vxworks-arm.ads, system-solaris-sparc.ads,\n\tsystem-solaris-sparcv9.ads, system-vms_64.ads,\n\tsystem-vxworks-m68k.ads, system-vxworks-mips.ads,\n\tsystem-vxworks-ppc.ads, system-vxworks-sparcv9.ads: Flag\n\tSupport_Atomic_Primitives removed.\n\nFrom-SVN: r190163", "tree": {"sha": "f0cc8703a3dd5b12c3179ab47811052a3e29feef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0cc8703a3dd5b12c3179ab47811052a3e29feef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ebc109a5ea094a942ce928f6e9d89a682ce9971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebc109a5ea094a942ce928f6e9d89a682ce9971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ebc109a5ea094a942ce928f6e9d89a682ce9971", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebc109a5ea094a942ce928f6e9d89a682ce9971/comments", "author": null, "committer": null, "parents": [{"sha": "a39a553eacce1f39fac4cffc0f5768bee425c1a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39a553eacce1f39fac4cffc0f5768bee425c1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39a553eacce1f39fac4cffc0f5768bee425c1a1"}], "stats": {"total": 223, "additions": 137, "deletions": 86}, "files": [{"sha": "6516d3bc1995c72c51e5b7530f1044f5f3ff62cf", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -3100,19 +3100,6 @@ package body Exp_Attr is\n          end if;\n       end;\n \n-      ---------------\n-      -- Lock_Free --\n-      ---------------\n-\n-      --  Rewrite the attribute reference with the value of Uses_Lock_Free\n-\n-      when Attribute_Lock_Free => Lock_Free : declare\n-         V : constant Entity_Id := Boolean_Literals (Uses_Lock_Free (Ptyp));\n-      begin\n-         Rewrite (N, New_Occurrence_Of (V, Loc));\n-         Analyze_And_Resolve (N, Standard_Boolean);\n-      end Lock_Free;\n-\n       -------------\n       -- Machine --\n       -------------\n@@ -6018,6 +6005,7 @@ package body Exp_Attr is\n \n       when Attribute_Abort_Signal                 |\n            Attribute_Address_Size                 |\n+           Attribute_Atomic_Always_Lock_Free      |\n            Attribute_Base                         |\n            Attribute_Class                        |\n            Attribute_Compiler_Version             |\n@@ -6035,6 +6023,7 @@ package body Exp_Attr is\n            Attribute_Has_Tagged_Values            |\n            Attribute_Large                        |\n            Attribute_Last_Valid                   |\n+           Attribute_Lock_Free                    |\n            Attribute_Machine_Emax                 |\n            Attribute_Machine_Emin                 |\n            Attribute_Machine_Mantissa             |"}, {"sha": "145cbb6c9dbeb6c7eef5caa27d21056dc3d8d0ed", "filename": "gcc/ada/s-atopri.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fs-atopri.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fs-atopri.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atopri.adb?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -37,7 +37,7 @@ package body System.Atomic_Primitives is\n \n    function Lock_Free_Read_8 (Ptr : Address) return uint8 is\n    begin\n-      if Support_Atomic_Primitives then\n+      if uint8'Atomic_Always_Lock_Free then\n          return Atomic_Load_8 (Ptr, Acquire);\n       else\n          raise Program_Error;\n@@ -50,7 +50,7 @@ package body System.Atomic_Primitives is\n \n    function Lock_Free_Read_16 (Ptr : Address) return uint16 is\n    begin\n-      if Support_Atomic_Primitives then\n+      if uint16'Atomic_Always_Lock_Free then\n          return Atomic_Load_16 (Ptr, Acquire);\n       else\n          raise Program_Error;\n@@ -63,7 +63,7 @@ package body System.Atomic_Primitives is\n \n    function Lock_Free_Read_32 (Ptr : Address) return uint32 is\n    begin\n-      if Support_Atomic_Primitives then\n+      if uint32'Atomic_Always_Lock_Free then\n          return Atomic_Load_32 (Ptr, Acquire);\n       else\n          raise Program_Error;\n@@ -76,7 +76,7 @@ package body System.Atomic_Primitives is\n \n    function Lock_Free_Read_64 (Ptr : Address) return uint64 is\n    begin\n-      if Support_Atomic_Primitives then\n+      if uint64'Atomic_Always_Lock_Free then\n          return Atomic_Load_64 (Ptr, Acquire);\n       else\n          raise Program_Error;\n@@ -97,7 +97,7 @@ package body System.Atomic_Primitives is\n    begin\n       if Expected /= Desired then\n \n-         if Support_Atomic_Primitives then\n+         if uint8'Atomic_Always_Lock_Free then\n             Actual := Sync_Compare_And_Swap_8 (Ptr, Expected, Desired);\n          else\n             raise Program_Error;\n@@ -126,7 +126,7 @@ package body System.Atomic_Primitives is\n    begin\n       if Expected /= Desired then\n \n-         if Support_Atomic_Primitives then\n+         if uint16'Atomic_Always_Lock_Free then\n             Actual := Sync_Compare_And_Swap_16 (Ptr, Expected, Desired);\n          else\n             raise Program_Error;\n@@ -155,7 +155,7 @@ package body System.Atomic_Primitives is\n    begin\n       if Expected /= Desired then\n \n-         if Support_Atomic_Primitives then\n+         if uint32'Atomic_Always_Lock_Free then\n             Actual := Sync_Compare_And_Swap_32 (Ptr, Expected, Desired);\n          else\n             raise Program_Error;\n@@ -184,7 +184,7 @@ package body System.Atomic_Primitives is\n    begin\n       if Expected /= Desired then\n \n-         if Support_Atomic_Primitives then\n+         if uint64'Atomic_Always_Lock_Free then\n             Actual := Sync_Compare_And_Swap_64 (Ptr, Expected, Desired);\n          else\n             raise Program_Error;"}, {"sha": "b2af6ae85b84dc9a499a2a6454318650f1226d64", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 68, "deletions": 10, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -2573,6 +2573,15 @@ package body Sem_Attr is\n          Set_Etype (N, RTE (RE_AST_Handler));\n       end AST_Entry;\n \n+      -----------------------------\n+      -- Atomic_Always_Lock_Free --\n+      -----------------------------\n+\n+      when Attribute_Atomic_Always_Lock_Free =>\n+         Check_E0;\n+         Check_Type;\n+         Set_Etype (N, Standard_Boolean);\n+\n       ----------\n       -- Base --\n       ----------\n@@ -5956,6 +5965,13 @@ package body Sem_Attr is\n                return;\n             end if;\n \n+         --  For Lock_Free, we apply the attribute to the type of the object.\n+         --  This is allowed since we have already verified that the type is a\n+         --  protected type.\n+\n+         elsif Id = Attribute_Lock_Free then\n+            P_Entity := Etype (P);\n+\n          --  No other attributes for objects are folded\n \n          else\n@@ -6021,17 +6037,22 @@ package body Sem_Attr is\n \n       --  Definite must be folded if the prefix is not a generic type,\n       --  that is to say if we are within an instantiation. Same processing\n-      --  applies to the GNAT attributes Has_Discriminants, Type_Class,\n-      --  Has_Tagged_Value, and Unconstrained_Array.\n+      --  applies to the GNAT attributes Atomic_Always_Lock_Free,\n+      --  Has_Discriminants, Lock_Free, Type_Class, Has_Tagged_Value, and\n+      --  Unconstrained_Array.\n \n-      elsif (Id = Attribute_Definite\n+      elsif (Id = Attribute_Atomic_Always_Lock_Free\n+               or else\n+             Id = Attribute_Definite\n                or else\n              Id = Attribute_Has_Access_Values\n                or else\n              Id = Attribute_Has_Discriminants\n                or else\n              Id = Attribute_Has_Tagged_Values\n                or else\n+             Id = Attribute_Lock_Free\n+               or else\n              Id = Attribute_Type_Class\n                or else\n              Id = Attribute_Unconstrained_Array\n@@ -6136,23 +6157,28 @@ package body Sem_Attr is\n       --  since we can't do anything with unconstrained arrays. In addition,\n       --  only the First, Last and Length attributes are possibly static.\n \n-      --  Definite, Has_Access_Values, Has_Discriminants, Has_Tagged_Values,\n-      --  Type_Class, and Unconstrained_Array are again exceptions, because\n-      --  they apply as well to unconstrained types.\n+      --  Atomic_Always_Lock_Free, Definite, Has_Access_Values,\n+      --  Has_Discriminants, Has_Tagged_Values, Lock_Free, Type_Class, and\n+      --  Unconstrained_Array are again exceptions, because they apply as well\n+      --  to unconstrained types.\n \n       --  In addition Component_Size is an exception since it is possibly\n       --  foldable, even though it is never static, and it does apply to\n       --  unconstrained arrays. Furthermore, it is essential to fold this\n       --  in the packed case, since otherwise the value will be incorrect.\n \n-      elsif Id = Attribute_Definite\n+      elsif Id = Attribute_Atomic_Always_Lock_Free\n+              or else\n+            Id = Attribute_Definite\n               or else\n             Id = Attribute_Has_Access_Values\n               or else\n             Id = Attribute_Has_Discriminants\n               or else\n             Id = Attribute_Has_Tagged_Values\n               or else\n+            Id = Attribute_Lock_Free\n+              or else\n             Id = Attribute_Type_Class\n               or else\n             Id = Attribute_Unconstrained_Array\n@@ -6381,6 +6407,30 @@ package body Sem_Attr is\n             null;\n          end if;\n \n+      -----------------------------\n+      -- Atomic_Always_Lock_Free --\n+      -----------------------------\n+\n+      --  Atomic_Always_Lock_Free attribute is a Boolean, thus no need to fold\n+      --  here.\n+\n+      when Attribute_Atomic_Always_Lock_Free => Atomic_Always_Lock_Free :\n+      declare\n+         V : constant Entity_Id :=\n+               Boolean_Literals\n+                 (Support_Atomic_Primitives_On_Target\n+                   and then Support_Atomic_Primitives (P_Type));\n+\n+      begin\n+         Rewrite (N, New_Occurrence_Of (V, Loc));\n+\n+         --  Analyze and resolve as boolean. Note that this attribute is a\n+         --  static attribute in GNAT.\n+\n+         Analyze_And_Resolve (N, Standard_Boolean);\n+         Static := True;\n+      end Atomic_Always_Lock_Free;\n+\n       ---------\n       -- Bit --\n       ---------\n@@ -6801,10 +6851,18 @@ package body Sem_Attr is\n       -- Lock_Free --\n       ---------------\n \n-      --  Lock_Free attribute is a Boolean, thus no need to fold here.\n+      when Attribute_Lock_Free => Lock_Free : declare\n+         V : constant Entity_Id := Boolean_Literals (Uses_Lock_Free (P_Type));\n \n-      when Attribute_Lock_Free =>\n-         null;\n+      begin\n+         Rewrite (N, New_Occurrence_Of (V, Loc));\n+\n+         --  Analyze and resolve as boolean. Note that this attribute is a\n+         --  static attribute in GNAT.\n+\n+         Analyze_And_Resolve (N, Standard_Boolean);\n+         Static := True;\n+      end Lock_Free;\n \n       ----------\n       -- Last --"}, {"sha": "6ee0bceeb81eb3cde6293a3c08150fc2748e5450", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -557,7 +557,6 @@ package body Sem_Ch9 is\n                         Id        : constant Entity_Id := Entity (N);\n                         Comp_Decl : Node_Id;\n                         Comp_Id   : Entity_Id := Empty;\n-                        Comp_Size : Int := 0;\n                         Comp_Type : Entity_Id;\n \n                      begin\n@@ -591,40 +590,19 @@ package body Sem_Ch9 is\n \n                                  Layout_Type (Comp_Type);\n \n-                                 if Known_Static_Esize (Comp_Type) then\n-                                    Comp_Size := UI_To_Int (Esize (Comp_Type));\n-\n-                                 --  If the Esize (Object_Size) is unknown at\n-                                 --  compile-time, look at the RM_Size\n-                                 --  (Value_Size) since it may have been set by\n-                                 --  an explicit representation clause.\n-\n-                                 elsif Known_Static_RM_Size (Comp_Type) then\n-                                    Comp_Size :=\n-                                      UI_To_Int (RM_Size (Comp_Type));\n-\n-                                    --  Worrisome missing else raise PE???\n+                                 if not\n+                                   Support_Atomic_Primitives (Comp_Type)\n+                                 then\n+                                    if Lock_Free_Given then\n+                                       Error_Msg_NE\n+                                         (\"type of& must support atomic \" &\n+                                          \"operations\",\n+                                          N, Comp_Id);\n+                                       return Skip;\n+                                    end if;\n+\n+                                    return Abandon;\n                                  end if;\n-\n-                                 --  Check that the size of the component is 8,\n-                                 --  16, 32 or 64 bits.\n-\n-                                 --  What about AAMP here???\n-\n-                                 case Comp_Size is\n-                                    when 8 | 16 | 32 | 64 =>\n-                                       null;\n-                                    when others           =>\n-                                       if Lock_Free_Given then\n-                                          Error_Msg_NE\n-                                            (\"type of& must support atomic \" &\n-                                             \"operations\",\n-                                             N, Comp_Id);\n-                                          return Skip;\n-                                       end if;\n-\n-                                       return Abandon;\n-                                 end case;\n                               end if;\n \n                               --  Check if another protected component has"}, {"sha": "9d095309f82f1363c4a49cf7dc9d5a847ff8e62b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -12833,6 +12833,47 @@ package body Sem_Util is\n       end if;\n    end Subprogram_Access_Level;\n \n+   -------------------------------\n+   -- Support_Atomic_Primitives --\n+   -------------------------------\n+\n+   function Support_Atomic_Primitives (Typ : Entity_Id) return Boolean is\n+      Size : Int;\n+\n+   begin\n+      --  Verify the alignment of Typ is known\n+\n+      if not Known_Alignment (Typ) then\n+         return False;\n+      end if;\n+\n+      if Known_Static_Esize (Typ) then\n+         Size := UI_To_Int (Esize (Typ));\n+\n+      --  If the Esize (Object_Size) is unknown at compile-time, look at the\n+      --  RM_Size (Value_Size) since it may have been set by an explicit rep\n+      --  item.\n+\n+      elsif Known_Static_RM_Size (Typ) then\n+         Size := UI_To_Int (RM_Size (Typ));\n+\n+      --  Otherwise, the size is considered to be unknown.\n+\n+      else\n+         return False;\n+      end if;\n+\n+      --  Check that the size of the component is 8, 16, 32 or 64 bits and that\n+      --  Typ is properly aligned.\n+\n+      case Size is\n+         when 8 | 16 | 32 | 64 =>\n+            return Size = UI_To_Int (Alignment (Typ)) * 8;\n+         when others           =>\n+            return False;\n+      end case;\n+   end Support_Atomic_Primitives;\n+\n    -----------------\n    -- Trace_Scope --\n    -----------------"}, {"sha": "8d1f7cfadb22f7a4cf53876d9c7575d9ef164301", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -1477,6 +1477,10 @@ package Sem_Util is\n    function Subprogram_Access_Level (Subp : Entity_Id) return Uint;\n    --  Return the accessibility level of the view denoted by Subp\n \n+   function Support_Atomic_Primitives (Typ : Entity_Id) return Boolean;\n+   --  Return True if Typ supports the GCC built-in atomic operations (i.e. if\n+   --  Typ is properly sized and aligned).\n+\n    procedure Trace_Scope (N : Node_Id; E : Entity_Id; Msg : String);\n    --  Print debugging information on entry to each unit being analyzed\n "}, {"sha": "d0c20153b0a5e4ed8aa689dd2e65e0816257dd9f", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -766,6 +766,7 @@ package Snames is\n    Name_Asm_Input                      : constant Name_Id := N + $; -- GNAT\n    Name_Asm_Output                     : constant Name_Id := N + $; -- GNAT\n    Name_AST_Entry                      : constant Name_Id := N + $; -- VMS\n+   Name_Atomic_Always_Lock_Free        : constant Name_Id := N + $; -- GNAT\n    Name_Bit                            : constant Name_Id := N + $; -- GNAT\n    Name_Bit_Order                      : constant Name_Id := N + $;\n    Name_Bit_Position                   : constant Name_Id := N + $; -- GNAT\n@@ -1363,6 +1364,7 @@ package Snames is\n       Attribute_Asm_Input,\n       Attribute_Asm_Output,\n       Attribute_AST_Entry,\n+      Attribute_Atomic_Always_Lock_Free,\n       Attribute_Bit,\n       Attribute_Bit_Order,\n       Attribute_Bit_Position,"}, {"sha": "19d65bdfcddb17319d1b6bd7cd5853cf1eca20ef", "filename": "gcc/ada/system-aix.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-aix.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -142,7 +142,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "568c24f2569730666159f3488787bfdfa05b412e", "filename": "gcc/ada/system-aix64.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-aix64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-aix64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-aix64.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -142,7 +142,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "d45ab4ee846c08c52f7a9bcb72fcb56285c073cd", "filename": "gcc/ada/system-darwin-ppc.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-darwin-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-darwin-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-darwin-ppc.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -158,7 +158,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "47793e55f670f79510065ef9cc8979c4d31f2856", "filename": "gcc/ada/system-hpux.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-hpux.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -132,7 +132,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "5d845020446f9b1b32a4ad84d5211e6be83b8650", "filename": "gcc/ada/system-linux-alpha.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-alpha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-alpha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-alpha.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -130,7 +130,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "5ec908708bb8772ecb051af145a5772248b6a3e8", "filename": "gcc/ada/system-linux-hppa.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-hppa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-hppa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-hppa.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -132,7 +132,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "fac85a52fe5896c13a89901638d7c2bd55fb36b3", "filename": "gcc/ada/system-linux-ppc.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-ppc.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -140,7 +140,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "28107a0b46422583c26c18ee5a6550a4890050f4", "filename": "gcc/ada/system-linux-s390.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-s390.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-s390.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-s390.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -130,7 +130,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "135b5a3b174e9e195effe51b189d120e65064892", "filename": "gcc/ada/system-linux-s390x.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-s390x.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-s390x.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-s390x.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -130,7 +130,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "8ee07e374db60dffa797a73d7685c9762790b589", "filename": "gcc/ada/system-linux-sh4.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-sh4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-sh4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-sh4.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -140,7 +140,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "ff93463cf8668d35d810e2c2fa6511a068c44428", "filename": "gcc/ada/system-linux-sparc.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-sparc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-linux-sparc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-sparc.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -130,7 +130,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "3f701b2dcf9776fea365557c2f266ff615a3fc28", "filename": "gcc/ada/system-lynxos-ppc.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-lynxos-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-lynxos-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-lynxos-ppc.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -146,7 +146,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "dfb485208cf87877fa3ac321dae37434ff676ce3", "filename": "gcc/ada/system-mingw.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-mingw.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -132,7 +132,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "ac695c543fe32d217d84a0d385d00d01300a5503", "filename": "gcc/ada/system-solaris-sparc.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-solaris-sparc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-solaris-sparc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-solaris-sparc.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -132,7 +132,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "6c059244e97eacbe0682baa960dcb47b8c27637c", "filename": "gcc/ada/system-solaris-sparcv9.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-solaris-sparcv9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-solaris-sparcv9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-solaris-sparcv9.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -132,7 +132,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "946f0341d1cbd553aed0b3d7d51f9b9041734f2b", "filename": "gcc/ada/system-vms_64.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms_64.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -150,7 +150,6 @@ private\n    Stack_Check_Probes        : constant Boolean := True;\n    Stack_Check_Limits        : constant Boolean := False;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "ae8ddd510655251708f0fde111718e0d5ded1049", "filename": "gcc/ada/system-vxworks-arm.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-arm.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -145,7 +145,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "d747792a56ef5b307bf98ed9896856387a180985", "filename": "gcc/ada/system-vxworks-m68k.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-m68k.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-m68k.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-m68k.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -145,7 +145,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "47b46fa2f7d459fa207dd942385775d9beb8eb63", "filename": "gcc/ada/system-vxworks-mips.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-mips.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-mips.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-mips.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -145,7 +145,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "62d604f63192f2c1dbc77d0697a7f3edb822d8fb", "filename": "gcc/ada/system-vxworks-ppc.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-ppc.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -154,7 +154,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}, {"sha": "96601676a24ebaa3187f759ec95b5f156a48580c", "filename": "gcc/ada/system-vxworks-sparcv9.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-sparcv9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ebc109a5ea094a942ce928f6e9d89a682ce9971/gcc%2Fada%2Fsystem-vxworks-sparcv9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-sparcv9.ads?ref=0ebc109a5ea094a942ce928f6e9d89a682ce9971", "patch": "@@ -147,7 +147,6 @@ private\n    Stack_Check_Probes        : constant Boolean := False;\n    Stack_Check_Limits        : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := False;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;"}]}