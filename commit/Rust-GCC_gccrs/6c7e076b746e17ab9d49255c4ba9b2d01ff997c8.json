{"sha": "6c7e076b746e17ab9d49255c4ba9b2d01ff997c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3ZTA3NmI3NDZlMTdhYjlkNDkyNTVjNGJhOWIyZDAxZmY5OTdjOA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-10-03T17:48:36Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2019-10-03T17:48:36Z"}, "message": "Libgomp magic offset value self-documentation\n\n2019-10-02  Julian Brown  <julian@codesourcery.com>\n\t    Cesar Philippidis  <cesar@codesourcery.com>\n\n\tlibgomp/\n\t* libgomp.h (OFFSET_INLINED, OFFSET_POINTER, OFFSET_STRUCT): Define.\n\t* target.c (FIELD_TGT_EMPTY): Define.\n\t(gomp_map_val): Use OFFSET_* macros instead of magic constants.  Write\n\tas switch instead of list of ifs.\n\t(gomp_map_vars_internal): Use OFFSET_* and FIELD_TGT_EMPTY macros.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r276519", "tree": {"sha": "15eadd016ac0f31fca59993208ac90e51181b972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15eadd016ac0f31fca59993208ac90e51181b972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dbe01a1ffe4a3920f81a2b4349d31ec6871b9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dbe01a1ffe4a3920f81a2b4349d31ec6871b9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dbe01a1ffe4a3920f81a2b4349d31ec6871b9de"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "2059e053457e2694247c816777a2ebfcc99b887f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6c7e076b746e17ab9d49255c4ba9b2d01ff997c8", "patch": "@@ -1,3 +1,12 @@\n+2019-10-02  Julian Brown  <julian@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* libgomp.h (OFFSET_INLINED, OFFSET_POINTER, OFFSET_STRUCT): Define.\n+\t* target.c (FIELD_TGT_EMPTY): Define.\n+\t(gomp_map_val): Use OFFSET_* macros instead of magic constants.  Write\n+\tas switch instead of list of ifs.\n+\t(gomp_map_vars_internal): Use OFFSET_* and FIELD_TGT_EMPTY macros.\n+\n 2019-10-02  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* testsuite/libgomp.oacc-c-c++-common/loop-default.h: Remove alloca.h"}, {"sha": "178eb600ccde9765de4cfd49ec338e0a87bf2aca", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=6c7e076b746e17ab9d49255c4ba9b2d01ff997c8", "patch": "@@ -903,6 +903,11 @@ struct target_mem_desc {\n    artificial pointer to \"omp declare target link\" object.  */\n #define REFCOUNT_LINK (~(uintptr_t) 1)\n \n+/* Special offset values.  */\n+#define OFFSET_INLINED (~(uintptr_t) 0)\n+#define OFFSET_POINTER (~(uintptr_t) 1)\n+#define OFFSET_STRUCT (~(uintptr_t) 2)\n+\n struct splay_tree_key_s {\n   /* Address of the host object.  */\n   uintptr_t host_start;"}, {"sha": "a83cb48108a9c5b7c71aef9b051957628e965fa3", "filename": "libgomp/target.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7e076b746e17ab9d49255c4ba9b2d01ff997c8/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=6c7e076b746e17ab9d49255c4ba9b2d01ff997c8", "patch": "@@ -44,6 +44,8 @@\n #include \"plugin-suffix.h\"\n #endif\n \n+#define FIELD_TGT_EMPTY (~(size_t) 0)\n+\n static void gomp_target_init (void);\n \n /* The whole initialization code for offloading plugins is only run one.  */\n@@ -497,17 +499,25 @@ gomp_map_val (struct target_mem_desc *tgt, void **hostaddrs, size_t i)\n     return tgt->list[i].key->tgt->tgt_start\n \t   + tgt->list[i].key->tgt_offset\n \t   + tgt->list[i].offset;\n-  if (tgt->list[i].offset == ~(uintptr_t) 0)\n-    return (uintptr_t) hostaddrs[i];\n-  if (tgt->list[i].offset == ~(uintptr_t) 1)\n-    return 0;\n-  if (tgt->list[i].offset == ~(uintptr_t) 2)\n-    return tgt->list[i + 1].key->tgt->tgt_start\n-\t   + tgt->list[i + 1].key->tgt_offset\n-\t   + tgt->list[i + 1].offset\n-\t   + (uintptr_t) hostaddrs[i]\n-\t   - (uintptr_t) hostaddrs[i + 1];\n-  return tgt->tgt_start + tgt->list[i].offset;\n+\n+  switch (tgt->list[i].offset)\n+    {\n+    case OFFSET_INLINED:\n+      return (uintptr_t) hostaddrs[i];\n+\n+    case OFFSET_POINTER:\n+      return 0;\n+\n+    case OFFSET_STRUCT:\n+      return tgt->list[i + 1].key->tgt->tgt_start\n+\t     + tgt->list[i + 1].key->tgt_offset\n+\t     + tgt->list[i + 1].offset\n+\t     + (uintptr_t) hostaddrs[i]\n+\t     - (uintptr_t) hostaddrs[i + 1];\n+\n+    default:\n+      return tgt->tgt_start + tgt->list[i].offset;\n+    }\n }\n \n static inline __attribute__((always_inline)) struct target_mem_desc *\n@@ -575,7 +585,7 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t  || (kind & typemask) == GOMP_MAP_FIRSTPRIVATE_INT)\n \t{\n \t  tgt->list[i].key = NULL;\n-\t  tgt->list[i].offset = ~(uintptr_t) 0;\n+\t  tgt->list[i].offset = OFFSET_INLINED;\n \t  continue;\n \t}\n       else if ((kind & typemask) == GOMP_MAP_USE_DEVICE_PTR)\n@@ -596,7 +606,7 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t  cur_node.host_end = (uintptr_t) hostaddrs[last]\n \t\t\t      + sizes[last];\n \t  tgt->list[i].key = NULL;\n-\t  tgt->list[i].offset = ~(uintptr_t) 2;\n+\t  tgt->list[i].offset = OFFSET_STRUCT;\n \t  splay_tree_key n = splay_tree_lookup (mem_map, &cur_node);\n \t  if (n == NULL)\n \t    {\n@@ -629,7 +639,7 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n       else if ((kind & typemask) == GOMP_MAP_ALWAYS_POINTER)\n \t{\n \t  tgt->list[i].key = NULL;\n-\t  tgt->list[i].offset = ~(uintptr_t) 1;\n+\t  tgt->list[i].offset = OFFSET_POINTER;\n \t  has_firstprivate = true;\n \t  continue;\n \t}\n@@ -659,7 +669,7 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t  if (!n)\n \t    {\n \t      tgt->list[i].key = NULL;\n-\t      tgt->list[i].offset = ~(uintptr_t) 1;\n+\t      tgt->list[i].offset = OFFSET_POINTER;\n \t      continue;\n \t    }\n \t}\n@@ -884,12 +894,12 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t\tsize_t align = (size_t) 1 << (kind >> rshift);\n \t\ttgt->list[i].key = k;\n \t\tk->tgt = tgt;\n-\t\tif (field_tgt_clear != ~(size_t) 0)\n+\t\tif (field_tgt_clear != FIELD_TGT_EMPTY)\n \t\t  {\n \t\t    k->tgt_offset = k->host_start - field_tgt_base\n \t\t\t\t    + field_tgt_offset;\n \t\t    if (i == field_tgt_clear)\n-\t\t      field_tgt_clear = ~(size_t) 0;\n+\t\t      field_tgt_clear = FIELD_TGT_EMPTY;\n \t\t  }\n \t\telse\n \t\t  {"}]}