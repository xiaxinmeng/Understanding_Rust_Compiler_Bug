{"sha": "73243d6301a2bd8a9dcae589d6cfb0a459542a94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyNDNkNjMwMWEyYmQ4YTlkY2FlNTg5ZDZjZmIwYTQ1OTU0MmE5NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-04-02T11:45:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-04-02T11:45:31Z"}, "message": "cp-tree.h (TAGGED_TYPE_P): Remove.\n\n2013-04-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.h (TAGGED_TYPE_P): Remove.\n\t(IS_OVERLOAD_TYPE): Rename to OVERLOAD_TYPE_P, adjust.\n\t(TYPE_ANONYMOUS_P): Adjust.\n\t* call.c (build_new_op_1): Likewise.\n\t* class.c (find_abi_tags_r): Likewise.\n\t* decl.c (warn_misplaced_attr_for_class_type, start_decl,\n\ttype_is_deprecated): Likewise.\n\t* decl2.c (grokfield, min_vis_r): Likewise.\n\t* pt.c (get_template_info): Likewise.\n\t* tree.c (handle_abi_tag_attribute): Likewise.\n\nFrom-SVN: r197347", "tree": {"sha": "b0d352a9b72a46bacfdf04a1ebc42330dcaaeacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d352a9b72a46bacfdf04a1ebc42330dcaaeacc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73243d6301a2bd8a9dcae589d6cfb0a459542a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73243d6301a2bd8a9dcae589d6cfb0a459542a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73243d6301a2bd8a9dcae589d6cfb0a459542a94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73243d6301a2bd8a9dcae589d6cfb0a459542a94/comments", "author": null, "committer": null, "parents": [{"sha": "d8c69a9281025fd57590799c70c4d96158b748e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c69a9281025fd57590799c70c4d96158b748e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c69a9281025fd57590799c70c4d96158b748e6"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "7c9ba7422f43897a55bbb539d5ec0fe08140290a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -1,3 +1,16 @@\n+2013-04-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cp-tree.h (TAGGED_TYPE_P): Remove.\n+\t(IS_OVERLOAD_TYPE): Rename to OVERLOAD_TYPE_P, adjust.\n+\t(TYPE_ANONYMOUS_P): Adjust.\n+\t* call.c (build_new_op_1): Likewise.\n+\t* class.c (find_abi_tags_r): Likewise.\n+\t* decl.c (warn_misplaced_attr_for_class_type, start_decl,\n+\ttype_is_deprecated): Likewise.\n+\t* decl2.c (grokfield, min_vis_r): Likewise.\n+\t* pt.c (get_template_info): Likewise.\n+\t* tree.c (handle_abi_tag_attribute): Likewise.\n+\n 2013-04-01  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (maybe_constant_value): Check"}, {"sha": "9b0cbe4ea5f8d5548f0fe7ee6ef0335803f4c101", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -5097,8 +5097,8 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n   if (code == COND_EXPR)\n     /* Use build_conditional_expr instead.  */\n     gcc_unreachable ();\n-  else if (! IS_OVERLOAD_TYPE (TREE_TYPE (arg1))\n-\t   && (! arg2 || ! IS_OVERLOAD_TYPE (TREE_TYPE (arg2))))\n+  else if (! OVERLOAD_TYPE_P (TREE_TYPE (arg1))\n+\t   && (! arg2 || ! OVERLOAD_TYPE_P (TREE_TYPE (arg2))))\n     goto builtin;\n \n   if (code == POSTINCREMENT_EXPR || code == POSTDECREMENT_EXPR)"}, {"sha": "58248bf0a1e2cb4e54573a8f34ab463058465ff4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -1319,7 +1319,7 @@ struct abi_tag_data\n static tree\n find_abi_tags_r (tree *tp, int */*walk_subtrees*/, void *data)\n {\n-  if (!TAGGED_TYPE_P (*tp))\n+  if (!OVERLOAD_TYPE_P (*tp))\n     return NULL_TREE;\n \n   if (tree attributes = lookup_attribute (\"abi_tag\", TYPE_ATTRIBUTES (*tp)))"}, {"sha": "83164a28524b6323d8c5246884c19449bcba0572", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -1233,7 +1233,7 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n \n /* Nonzero if NODE has no name for linkage purposes.  */\n #define TYPE_ANONYMOUS_P(NODE) \\\n-  (TAGGED_TYPE_P (NODE) && ANON_AGGRNAME_P (TYPE_LINKAGE_IDENTIFIER (NODE)))\n+  (OVERLOAD_TYPE_P (NODE) && ANON_AGGRNAME_P (TYPE_LINKAGE_IDENTIFIER (NODE)))\n \n /* The _DECL for this _TYPE.  */\n #define TYPE_MAIN_DECL(NODE) (TYPE_STUB_DECL (TYPE_MAIN_VARIANT (NODE)))\n@@ -1270,9 +1270,8 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n /* Keep these checks in ascending code order.  */\n #define RECORD_OR_UNION_CODE_P(T)\t\\\n   ((T) == RECORD_TYPE || (T) == UNION_TYPE)\n-#define TAGGED_TYPE_P(T) \\\n+#define OVERLOAD_TYPE_P(T) \\\n   (CLASS_TYPE_P (T) || TREE_CODE (T) == ENUMERAL_TYPE)\n-#define IS_OVERLOAD_TYPE(T) TAGGED_TYPE_P (T)\n \n /* True if this a \"Java\" type, defined in 'extern \"Java\"'.  */\n #define TYPE_FOR_JAVA(NODE) TYPE_LANG_FLAG_3 (NODE)"}, {"sha": "40200b005f9f3eaaea9291936a636aecf537df05", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -4182,7 +4182,7 @@ void\n warn_misplaced_attr_for_class_type (source_location location,\n \t\t\t\t    tree class_type)\n {\n-  gcc_assert (TAGGED_TYPE_P (class_type));\n+  gcc_assert (OVERLOAD_TYPE_P (class_type));\n \n   warning_at (location, OPT_Wattributes,\n \t      \"attribute ignored in declaration \"\n@@ -4497,7 +4497,7 @@ start_decl (const cp_declarator *declarator,\n   /* If this is a typedef that names the class for linkage purposes\n      (7.1.3p8), apply any attributes directly to the type.  */\n   if (TREE_CODE (decl) == TYPE_DECL\n-      && TAGGED_TYPE_P (TREE_TYPE (decl))\n+      && OVERLOAD_TYPE_P (TREE_TYPE (decl))\n       && decl == TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (decl))))\n     flags = ATTR_FLAG_TYPE_IN_PLACE;\n   else\n@@ -10938,7 +10938,7 @@ type_is_deprecated (tree type)\n     return type;\n \n   /* Do warn about using typedefs to a deprecated class.  */\n-  if (TAGGED_TYPE_P (type) && type != TYPE_MAIN_VARIANT (type))\n+  if (OVERLOAD_TYPE_P (type) && type != TYPE_MAIN_VARIANT (type))\n     return type_is_deprecated (TYPE_MAIN_VARIANT (type));\n \n   code = TREE_CODE (type);"}, {"sha": "407b46159d2f90161fa57f01717ef0ba7d5e5e39", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -868,7 +868,7 @@ grokfield (const cp_declarator *declarator,\n \n \t  /* If this is a typedef that names the class for linkage purposes\n \t     (7.1.3p8), apply any attributes directly to the type.  */\n-\t  if (TAGGED_TYPE_P (TREE_TYPE (value))\n+\t  if (OVERLOAD_TYPE_P (TREE_TYPE (value))\n \t      && value == TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (value))))\n \t    attrflags = ATTR_FLAG_TYPE_IN_PLACE;\n \n@@ -1934,7 +1934,7 @@ min_vis_r (tree *tp, int *walk_subtrees, void *data)\n     {\n       *walk_subtrees = 0;\n     }\n-  else if (TAGGED_TYPE_P (*tp)\n+  else if (OVERLOAD_TYPE_P (*tp)\n \t   && !TREE_PUBLIC (TYPE_MAIN_DECL (*tp)))\n     {\n       *vis_p = VISIBILITY_ANON;"}, {"sha": "8671bd95d4a964c0b981a9af1f874b31909b1506", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -324,7 +324,7 @@ get_template_info (const_tree t)\n   if (!tinfo && DECL_IMPLICIT_TYPEDEF_P (t))\n     t = TREE_TYPE (t);\n \n-  if (TAGGED_TYPE_P (t))\n+  if (OVERLOAD_TYPE_P (t))\n     tinfo = TYPE_TEMPLATE_INFO (t);\n   else if (TREE_CODE (t) == BOUND_TEMPLATE_TEMPLATE_PARM)\n     tinfo = TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO (t);"}, {"sha": "580b6770ae7bcc7d98e06c80eee5614a516c2023", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73243d6301a2bd8a9dcae589d6cfb0a459542a94/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=73243d6301a2bd8a9dcae589d6cfb0a459542a94", "patch": "@@ -3306,7 +3306,7 @@ handle_abi_tag_attribute (tree* node, tree name, tree args,\n {\n   if (TYPE_P (*node))\n     {\n-      if (!TAGGED_TYPE_P (*node))\n+      if (!OVERLOAD_TYPE_P (*node))\n \t{\n \t  error (\"%qE attribute applied to non-class, non-enum type %qT\",\n \t\t name, *node);"}]}