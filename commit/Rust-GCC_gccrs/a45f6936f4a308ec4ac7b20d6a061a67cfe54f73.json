{"sha": "a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1ZjY5MzZmNGEzMDhlYzRhYzdiMjBkNmEwNjFhNjdjZmU1NGY3Mw==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2005-04-18T15:50:53Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2005-04-18T15:50:53Z"}, "message": "atlivec.md (mulv4si3): New pattern.\n\n        * config/rs6000/atlivec.md (mulv4si3): New pattern.\n\n        * gcc.dg/vect/vect-11.c: Require effective target vect_int_mult.\n        * gcc.dg/vect/vect-11a.c: New.\n        * gcc.dg/vect/vect-none.c: Update.\n        * lib/target-supports.exp (check_effective_target_vect_int_mult): New.\n\nFrom-SVN: r98323", "tree": {"sha": "0b1ba401bc29a1efb672d7945326be158f0bdbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b1ba401bc29a1efb672d7945326be158f0bdbeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/comments", "author": null, "committer": null, "parents": [{"sha": "0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eeb03e6fb26e4602a421d74a4c5e76b8e46605d"}], "stats": {"total": 151, "additions": 148, "deletions": 3}, "files": [{"sha": "924cf2624e513959630371e53447fb2ed90177b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "patch": "@@ -1,3 +1,7 @@\n+2005-04-18  Devang Patel  <dpatel@apple.com>\n+\n+\t* config/rs6000/atlivec.md (mulv4si3): New pattern.\n+\t\n 2005-04-18  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR tree-optimization/20922"}, {"sha": "6f11d7c0ebe99796924473af8e8b588d4f9c5edc", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "patch": "@@ -477,6 +477,65 @@\n   DONE;\n }\")\n \n+;; 32 bit integer multiplication\n+;; A_high = Operand_0 & 0xFFFF0000 >> 16\n+;; A_low = Operand_0 & 0xFFFF\n+;; B_high = Operand_1 & 0xFFFF0000 >> 16\n+;; B_low = Operand_1 & 0xFFFF\n+;; result = A_low * B_low + (A_high * B_low + B_high * A_low) << 16\n+\n+;; (define_insn \"mulv4si3\"\n+;;   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+;;         (mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"v\")\n+;;                    (match_operand:V4SI 2 \"register_operand\" \"v\")))]\n+(define_expand \"mulv4si3\"\n+  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n+   (use (match_operand:V4SI 1 \"register_operand\" \"\"))\n+   (use (match_operand:V4SI 2 \"register_operand\" \"\"))]\n+   \"TARGET_ALTIVEC\"\n+   \"\n+ {\n+   rtx zero;\n+   rtx swap;\n+   rtx small_swap;\n+   rtx sixteen;\n+   rtx one;\n+   rtx two;\n+   rtx low_product;\n+   rtx high_product;\n+       \n+   zero = gen_reg_rtx (V4SImode);\n+   emit_insn (gen_altivec_vspltisw (zero, const0_rtx));\n+ \n+   sixteen = gen_reg_rtx (V4SImode);   \n+   emit_insn (gen_altivec_vspltisw (sixteen,  gen_rtx_CONST_INT (V4SImode, -16)));\n+ \n+   swap = gen_reg_rtx (V4SImode);\n+   emit_insn (gen_altivec_vrlw (swap, operands[2], sixteen));\n+ \n+   one = gen_reg_rtx (V8HImode);\n+   convert_move (one, operands[1], 0);\n+ \n+   two = gen_reg_rtx (V8HImode);\n+   convert_move (two, operands[2], 0);\n+ \n+   small_swap = gen_reg_rtx (V8HImode);\n+   convert_move (small_swap, swap, 0);\n+ \n+   low_product = gen_reg_rtx (V4SImode);\n+   emit_insn (gen_altivec_vmulouh (low_product, one, two));\n+ \n+   high_product = gen_reg_rtx (V4SImode);\n+   emit_insn (gen_altivec_vmsumuhm (high_product, one, small_swap, zero));\n+ \n+   emit_insn (gen_altivec_vslw (high_product, high_product, sixteen));\n+ \n+   emit_insn (gen_addv4si3 (operands[0], high_product, low_product));\n+   \n+   DONE;\n+ }\")\n+ \n+\n ;; Fused multiply subtract \n (define_insn \"altivec_vnmsubfp\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")"}, {"sha": "d4697206f3fbe76eca0023b3c42aaa4ccbc1a62d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "patch": "@@ -1,3 +1,10 @@\n+2005-04-18  Devang Patel  <dpatel@apple.com>\n+\n+\t* gcc.dg/vect/vect-11.c: Require effective target vect_int_mult.\n+\t* gcc.dg/vect/vect-11a.c: New.\n+\t* gcc.dg/vect/vect-none.c: Update.\n+\t* lib/target-supports.exp (check_effective_target_vect_int_mult): New.\n+\n 2005-04-18  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR tree-optimization/20922"}, {"sha": "0633b6c50899f512e2aa488edbd14cfc630f8b86", "filename": "gcc/testsuite/gcc.dg/vect/vect-11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11.c?ref=a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_int_mult } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\"\n@@ -35,5 +36,5 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c77d6c92f892af5ceea9cbccc7dca3e74cf24e99", "filename": "gcc/testsuite/gcc.dg/vect/vect-11a.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11a.c?ref=a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_int_mult } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+void u ()\n+{  \n+  unsigned int A[4] = {0x08000000,0xffffffff,0xff0000ff,0xf0000001};\n+  unsigned int B[4] = {0x08000000,0x08000001,0xff0000ff,0xf0000001};\n+  unsigned int Answer[4] = {0,0xf7ffffff,0x0200fe01,0xe0000001};\n+  unsigned int C[4];\n+  int i, j;\n+  \n+  for (i=0; i<4; i++)\n+    C[i] = A[i] * B[i];\n+  for (i=0; i<4; i++)\n+    if (C[i] != Answer[i])\n+      abort ();\n+}\n+void s()\n+{\n+  signed int A[4] = {0x08000000,0xffffffff,0xff0000ff,0xf0000001};\n+  signed int B[4] = {0x08000000,0x08000001,0xff0000ff,0xf0000001};\n+  signed int Answer[4] = {0,0xf7ffffff,0x0200fe01, 0xe0000001};\n+  signed int C[4];\n+  int i, j;\n+  \n+  for (i=0; i<4; i++)\n+    C[i] = A[i] * B[i];\n+  for (i=0; i<4; i++)\n+    if (C[i] != Answer[i])\n+      abort ();\n+}\n+\n+int main1 ()\n+{\n+  u();\n+  s();\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e36f4871cd406bc11924346834efdefa70514168", "filename": "gcc/testsuite/gcc.dg/vect/vect-none.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-none.c?ref=a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "patch": "@@ -107,6 +107,7 @@ foo (int n)\n \n \n   /* Test 3 - no target support for integer mult.  */\n+  /* This loop is vectorized on platforms that support vect_int_mult.  */\n   for (i = 0; i < N; i++)\n     {\n       ia[i] = ib[i] * ic[i];\n@@ -133,6 +134,7 @@ foo (int n)\n \n \n   /* Test 6 - condition in loop.  */\n+  /* This loop is vectorized on platformst that support vect_condition.  */\n   for (i = 0; i < N; i++){\n     a[i] = (b[i] > 0 ? b[i] : 0);\n   }\n@@ -181,6 +183,9 @@ foo (int n)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized \" 3 \"vect\"} } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"} } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\"} } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" { xfail powerpc*-*-* i?86-*-* x86_64-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target powerpc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" { target powerpc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target i?86-*-* x86_64-*-* ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" { target i?86-*-* x86_64-*-* ia64-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "18d0e9da86333d0dae3e73563b42a8c61ab32b77", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45f6936f4a308ec4ac7b20d6a061a67cfe54f73/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a45f6936f4a308ec4ac7b20d6a061a67cfe54f73", "patch": "@@ -856,6 +856,23 @@ proc check_effective_target_vect_condition { } {\n     return $et_vect_cond_saved\n }\n \n+# Return 1 if the target supports vector int multiplication, 0 otherwise.\n+\n+proc check_effective_target_vect_int_mult { } {\n+    global et_vect_int_mult_saved\n+\n+    if [info exists et_vect_int_mult] {\n+\tverbose \"check_effective_target_vect_int_mult: using cached result\" 2\n+    } else {\n+\tset et_vect_int_mult_saved 0\n+\tif { [istarget powerpc*-*-*] } {\n+\t   set et_vect_int_mult_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_int_mult: returning $et_vect_int_mult_saved\" 2\n+    return $et_vect_int_mult_saved\n+}\n \n # Return 1 if the target matches the effective target 'arg', 0 otherwise.\n # This can be used with any check_* proc that takes no argument and"}]}