{"sha": "71156bccaa2aadde4cc420bb719626c59380561b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNTZiY2NhYTJhYWRkZTRjYzQyMGJiNzE5NjI2YzU5MzgwNTYxYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-08-04T17:05:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-08-04T17:05:38Z"}, "message": "re PR rtl-optimization/26655 (ICE in ix86_secondary_memory_needed, at config/i386/i386.c:16446)\n\n\tPR target/26655\n\tPR target/28270\n\t* reload.c (push_reload): Patch out the mismathcing instruction; return early.\n\t(find_reload): Bail out if the instruction was patched out.\n\nFrom-SVN: r115928", "tree": {"sha": "a50ac1e9c87f293121ff982b05433d7b518a7269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a50ac1e9c87f293121ff982b05433d7b518a7269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71156bccaa2aadde4cc420bb719626c59380561b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71156bccaa2aadde4cc420bb719626c59380561b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71156bccaa2aadde4cc420bb719626c59380561b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71156bccaa2aadde4cc420bb719626c59380561b/comments", "author": null, "committer": null, "parents": [{"sha": "9659ce8b6160434d90f8b7985921f0b05e74d2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9659ce8b6160434d90f8b7985921f0b05e74d2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9659ce8b6160434d90f8b7985921f0b05e74d2d7"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "eb198c84acec4aa53381671df38976f37b7e479f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71156bccaa2aadde4cc420bb719626c59380561b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71156bccaa2aadde4cc420bb719626c59380561b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71156bccaa2aadde4cc420bb719626c59380561b", "patch": "@@ -1,3 +1,10 @@\n+2006-08-04  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR target/26655\n+\tPR target/28270\n+\t* reload.c (push_reload): Patch out the mismathcing instruction; return early.\n+\t(find_reload): Bail out if the instruction was patched out.\n+\n 2006-08-04  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/24888"}, {"sha": "c8c48b1dc78fb2c4bb72de494af3173dc739d5fe", "filename": "gcc/reload.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71156bccaa2aadde4cc420bb719626c59380561b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71156bccaa2aadde4cc420bb719626c59380561b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=71156bccaa2aadde4cc420bb719626c59380561b", "patch": "@@ -1254,7 +1254,19 @@ push_reload (rtx in, rtx out, rtx *inloc, rtx *outloc,\n \t{\n \t  error_for_asm (this_insn, \"impossible register constraint \"\n \t\t\t \"in %<asm%>\");\n-\t  class = ALL_REGS;\n+\t  /* Avoid further trouble with this insn.  */\n+\t  PATTERN (this_insn) = gen_rtx_USE (VOIDmode, const0_rtx);\n+\t  /* We used to continue here setting class to ALL_REGS, but it triggers\n+\t     sanity check on i386 for:\n+\t     void foo(long double d)\n+\t     {\n+\t       asm(\"\" :: \"a\" (d));\n+\t     }\n+\t     Returning zero here ought to be safe as we take care in\n+\t     find_reloads to not process the reloads when instruction was\n+\t     replaced by USE.  */\n+\t    \n+\t  return 0;\n \t}\n     }\n \n@@ -4133,6 +4145,12 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n       }\n #endif\n \n+  /* If we detected error and replaced asm instruction by USE, forget about the\n+     reloads.  */\n+  if (GET_CODE (PATTERN (insn)) == USE\n+      && GET_CODE (XEXP (PATTERN (insn), 0)) == CONST_INT)\n+    n_reloads = 0;\n+\n   /* Perhaps an output reload can be combined with another\n      to reduce needs by one.  */\n   if (!goal_earlyclobber)"}]}