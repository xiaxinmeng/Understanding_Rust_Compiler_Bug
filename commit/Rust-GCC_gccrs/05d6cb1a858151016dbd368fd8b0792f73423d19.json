{"sha": "05d6cb1a858151016dbd368fd8b0792f73423d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkNmNiMWE4NTgxNTEwMTZkYmQzNjhmZDhiMDc5MmY3MzQyM2QxOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-26T21:57:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-26T21:57:27Z"}, "message": "re PR c++/61414 (enum class bitfield size-checking needs a separate warning flag controlling it)\n\n\tPR c++/61414\n\t* c-attribs.c (handle_mode_attribute): Add mode attribute to\n\tENUMERAL_TYPEs.\n\n\t* class.c (enum_to_min_precision): New hash_map.\n\t(enum_min_precision): New function.\n\t(check_bitfield_decl): Use it.\n\n\t* g++.dg/cpp0x/enum23.C: Remove xfail.\n\t* g++.dg/cpp0x/enum28.C: New test.\n\nFrom-SVN: r278736", "tree": {"sha": "635c4e4e72fcee7a26baab3ee60c186fc36a56a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/635c4e4e72fcee7a26baab3ee60c186fc36a56a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05d6cb1a858151016dbd368fd8b0792f73423d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d6cb1a858151016dbd368fd8b0792f73423d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d6cb1a858151016dbd368fd8b0792f73423d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d6cb1a858151016dbd368fd8b0792f73423d19/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f7ed00ebf23f881421f302e5371bd0957deb1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7ed00ebf23f881421f302e5371bd0957deb1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7ed00ebf23f881421f302e5371bd0957deb1ef"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "89292175846929fb4a330d16d9b6398fc9fe22dd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=05d6cb1a858151016dbd368fd8b0792f73423d19", "patch": "@@ -1,3 +1,9 @@\n+2019-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/61414\n+\t* c-attribs.c (handle_mode_attribute): Add mode attribute to\n+\tENUMERAL_TYPEs.\n+\n 2019-11-25  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/91985"}, {"sha": "35388e83a83a936b231f4fe2338e795aa28beaaf", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=05d6cb1a858151016dbd368fd8b0792f73423d19", "patch": "@@ -1866,6 +1866,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t\ttypefm = make_signed_type (TYPE_PRECISION (typefm));\n \t      TREE_TYPE (typefm) = type;\n \t    }\n+\t  *no_add_attrs = false;\n \t}\n       else if (VECTOR_MODE_P (mode)\n \t       ? TREE_CODE (type) != TREE_CODE (TREE_TYPE (typefm))"}, {"sha": "be36daaa516c8226f54407781544e0f517691fbb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05d6cb1a858151016dbd368fd8b0792f73423d19", "patch": "@@ -1,3 +1,10 @@\n+2019-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/61414\n+\t* class.c (enum_to_min_precision): New hash_map.\n+\t(enum_min_precision): New function.\n+\t(check_bitfield_decl): Use it.\n+\n 2019-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (cp_build_indirect_ref_1): Add location_t parameter"}, {"sha": "f36f75fa0db84ba964cceaa5c4a4fee95ecb1a9e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=05d6cb1a858151016dbd368fd8b0792f73423d19", "patch": "@@ -3265,6 +3265,60 @@ add_implicitly_declared_members (tree t, tree* access_decls,\n     }\n }\n \n+/* Cache of enum_min_precision values.  */\n+static GTY((deletable)) hash_map<tree, int> *enum_to_min_precision;\n+\n+/* Return the minimum precision of a bit-field needed to store all\n+   enumerators of ENUMERAL_TYPE TYPE.  */\n+\n+static int\n+enum_min_precision (tree type)\n+{\n+  type = TYPE_MAIN_VARIANT (type);\n+  /* For unscoped enums without fixed underlying type and without mode\n+     attribute we can just use precision of the underlying type.  */\n+  if (UNSCOPED_ENUM_P (type)\n+      && !ENUM_FIXED_UNDERLYING_TYPE_P (type)\n+      && !lookup_attribute (\"mode\", TYPE_ATTRIBUTES (type)))\n+    return TYPE_PRECISION (ENUM_UNDERLYING_TYPE (type));\n+\n+  if (enum_to_min_precision == NULL)\n+    enum_to_min_precision = hash_map<tree, int>::create_ggc (37);\n+\n+  bool existed;\n+  int prec = enum_to_min_precision->get_or_insert (type, &existed);\n+  if (existed)\n+    return prec;\n+\n+  tree minnode, maxnode;\n+  if (TYPE_VALUES (type))\n+    {\n+      minnode = maxnode = NULL_TREE;\n+      for (tree values = TYPE_VALUES (type);\n+\t   values; values = TREE_CHAIN (values))\n+\t{\n+\t  tree decl = TREE_VALUE (values);\n+\t  tree value = DECL_INITIAL (decl);\n+\t  if (value == error_mark_node)\n+\t    value = integer_zero_node;\n+\t  if (!minnode)\n+\t    minnode = maxnode = value;\n+\t  else if (tree_int_cst_lt (maxnode, value))\n+\t    maxnode = value;\n+\t  else if (tree_int_cst_lt (value, minnode))\n+\t    minnode = value;\n+\t}\n+    }\n+  else\n+    minnode = maxnode = integer_zero_node;\n+\n+  signop sgn = tree_int_cst_sgn (minnode) >= 0 ? UNSIGNED : SIGNED;\n+  int lowprec = tree_int_cst_min_precision (minnode, sgn);\n+  int highprec = tree_int_cst_min_precision (maxnode, sgn);\n+  prec = MAX (lowprec, highprec);\n+  return prec;\n+}\n+\n /* FIELD is a bit-field.  We are finishing the processing for its\n    enclosing type.  Issue any appropriate messages and set appropriate\n    flags.  Returns false if an error has been diagnosed.  */\n@@ -3326,7 +3380,7 @@ check_bitfield_decl (tree field)\n \t\t    \"width of %qD exceeds its type\", field);\n       else if (TREE_CODE (type) == ENUMERAL_TYPE)\n \t{\n-\t  int prec = TYPE_PRECISION (ENUM_UNDERLYING_TYPE (type));\n+\t  int prec = enum_min_precision (type);\n \t  if (compare_tree_int (w, prec) < 0)\n \t    warning_at (DECL_SOURCE_LOCATION (field), 0,\n \t\t\t\"%qD is too small to hold all values of %q#T\","}, {"sha": "6a777328d5059ee9d2339e22d8dea2f859b4be27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05d6cb1a858151016dbd368fd8b0792f73423d19", "patch": "@@ -1,5 +1,9 @@\n 2019-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/61414\n+\t* g++.dg/cpp0x/enum23.C: Remove xfail.\n+\t* g++.dg/cpp0x/enum28.C: New test.\n+\n \tPR tree-optimization/92644\n \t* g++.dg/opt/pr92644.C: New test.\n "}, {"sha": "53ad990bf93d561b23abd440fd19b127d0de44de", "filename": "gcc/testsuite/g++.dg/cpp0x/enum23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum23.C?ref=05d6cb1a858151016dbd368fd8b0792f73423d19", "patch": "@@ -5,5 +5,5 @@ enum class MyEnum { A = 1 };\n \n struct MyClass\n {\n-  MyEnum Field1 : 3; // { dg-bogus \"warning: 'MyClass::Field1' is too small\" \"\" { xfail *-*-* } }\n+  MyEnum Field1 : 3; // { dg-bogus \"warning: 'MyClass::Field1' is too small\" }\n };"}, {"sha": "f0dd8a1fc6bb4932b6d5748bab5d409fa557b96d", "filename": "gcc/testsuite/g++.dg/cpp0x/enum38.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d6cb1a858151016dbd368fd8b0792f73423d19/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum38.C?ref=05d6cb1a858151016dbd368fd8b0792f73423d19", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/61414\n+// { dg-do compile { target c++11 } }\n+\n+enum C { C0 = -4, C1 = 3 };\n+enum D { D0 = 0, D1 = 15 };\n+enum class E { E0 = -4, E1 = 3 };\n+enum F : unsigned { F0 = 0, F1 = 15 };\n+enum __attribute__((__mode__ (__QI__))) G { G0 = -4, G1 = 3 };\n+enum __attribute__((__mode__ (__HI__))) H { H0 = 0, H1 = 15 };\n+\n+struct S\n+{\n+  C a : 2;\t// { dg-warning \"'S::a' is too small to hold all values of 'enum C'\" }\n+  C b : 3;\t// { dg-bogus \"'S::b' is too small to hold all values of 'enum C'\" }\n+  D c : 3;\t// { dg-warning \"'S::c' is too small to hold all values of 'enum D'\" }\n+  D d : 4;\t// { dg-bogus \"'S::d' is too small to hold all values of 'enum D'\" }\n+  E e : 2;\t// { dg-warning \"'S::e' is too small to hold all values of 'enum class E'\" }\n+  E f : 3;\t// { dg-bogus \"'S::f' is too small to hold all values of 'enum class E'\" }\n+  F g : 3;\t// { dg-warning \"'S::g' is too small to hold all values of 'enum F'\" }\n+  F h : 4;\t// { dg-bogus \"'S::h' is too small to hold all values of 'enum F'\" }\n+  G i : 2;\t// { dg-warning \"'S::i' is too small to hold all values of 'enum G'\" }\n+  G j : 3;\t// { dg-bogus \"'S::j' is too small to hold all values of 'enum G'\" }\n+  H k : 3;\t// { dg-warning \"'S::k' is too small to hold all values of 'enum H'\" }\n+  H l : 4;\t// { dg-bogus \"'S::l' is too small to hold all values of 'enum H'\" }\n+};"}]}