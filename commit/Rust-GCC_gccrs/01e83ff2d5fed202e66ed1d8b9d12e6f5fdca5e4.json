{"sha": "01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlODNmZjJkNWZlZDIwMmU2NmVkMWQ4YjlkMTJlNmY1ZmRjYTVlNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-09T22:53:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-09T22:53:31Z"}, "message": "visium.h (PRINT_OPERAND): Delete.\n\n\t* config/visium/visium.h (PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Likewise.\n\t(PRINT_OPERAND_ADDRESS): Likewise.\n\t* config/visium/visium.c (TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define\n\tto...\n\t(visium_print_operand_punct_valid_p): ...this.  New function.\n\t(TARGET_PRINT_OPERAND): Define to...\n\t(print_operand): Rename to...\n\t(visium_print_operand): ...this.\n\t(TARGET_PRINT_OPERAND_ADDRESS): Define to...\n\t(visium_output_address): Rename to...\n\t(visium_print_operand_address): ...this.\n\t(print_operand_address): Delete.\n\nFrom-SVN: r230060", "tree": {"sha": "2eb1e405bcdd32d4965951cf56e4d09d94171ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eb1e405bcdd32d4965951cf56e4d09d94171ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4/comments", "author": null, "committer": null, "parents": [{"sha": "a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91c72e2141bbad97e7017a467d80ae0cdcd8eaf"}], "stats": {"total": 109, "additions": 45, "deletions": 64}, "files": [{"sha": "622f8602bafb0b54ea0482ecd97c6e5602ad64ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4", "patch": "@@ -1,3 +1,19 @@\n+2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/visium/visium.h (PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Likewise.\n+\t(PRINT_OPERAND_ADDRESS): Likewise.\n+\t* config/visium/visium.c (TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define\n+\tto...\n+\t(visium_print_operand_punct_valid_p): ...this.  New function.\n+\t(TARGET_PRINT_OPERAND): Define to...\n+\t(print_operand): Rename to...\n+\t(visium_print_operand): ...this.\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Define to...\n+\t(visium_output_address): Rename to...\n+\t(visium_print_operand_address): ...this.\n+\t(print_operand_address): Delete.\n+\n 2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/68259"}, {"sha": "0bf275c454aa5541bf40da875d1980290edaeb27", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4", "patch": "@@ -99,7 +99,6 @@ int visium_indent_opcode = 0;\n    given how unlikely it is to have a long branch in a leaf function.  */\n static unsigned int long_branch_regnum = 31;\n \n-static void visium_output_address (FILE *, enum machine_mode, rtx);\n static tree visium_handle_interrupt_attr (tree *, tree, tree, int, bool *);\n static inline bool current_function_saves_fp (void);\n static inline bool current_function_saves_lr (void);\n@@ -157,6 +156,10 @@ static bool visium_legitimate_constant_p (enum machine_mode, rtx);\n \n static bool visium_legitimate_address_p (enum machine_mode, rtx, bool);\n \n+static bool visium_print_operand_punct_valid_p (unsigned char);\n+static void visium_print_operand (FILE *, rtx, int);\n+static void visium_print_operand_address (FILE *, machine_mode, rtx);\n+\n static void visium_conditional_register_usage (void);\n \n static rtx visium_legitimize_address (rtx, rtx, enum machine_mode);\n@@ -227,6 +230,13 @@ static unsigned int visium_reorg (void);\n #undef  TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P visium_legitimate_address_p\n \n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P visium_print_operand_punct_valid_p\n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND visium_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS visium_print_operand_address\n+\n #undef  TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE visium_attribute_table\n \n@@ -3038,12 +3048,19 @@ output_cbranch (rtx label, enum rtx_code code, enum machine_mode cc_mode,\n   return output_branch (label, cond, insn);\n }\n \n-/* Helper function for PRINT_OPERAND (STREAM, X, CODE).  Output to stdio\n-   stream FILE the assembler syntax for an instruction operand OP subject\n-   to the modifier LETTER.  */\n+/* Implement TARGET_PRINT_OPERAND_PUNCT_VALID_P.  */\n \n-void\n-print_operand (FILE *file, rtx op, int letter)\n+static bool\n+visium_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return code == '#';\n+}\n+\n+/* Implement TARGET_PRINT_OPERAND.  Output to stdio stream FILE the assembler\n+   syntax for an instruction operand OP subject to the modifier LETTER.  */\n+\n+static void\n+visium_print_operand (FILE *file, rtx op, int letter)\n {\n   switch (letter)\n     {\n@@ -3104,7 +3121,7 @@ print_operand (FILE *file, rtx op, int letter)\n       break;\n \n     case MEM:\n-      visium_output_address (file, GET_MODE (op), XEXP (op, 0));\n+      visium_print_operand_address (file, GET_MODE (op), XEXP (op, 0));\n       break;\n \n     case CONST_INT:\n@@ -3116,19 +3133,20 @@ print_operand (FILE *file, rtx op, int letter)\n       break;\n \n     case HIGH:\n-      print_operand (file, XEXP (op, 1), letter);\n+      visium_print_operand (file, XEXP (op, 1), letter);\n       break;\n \n     default:\n       fatal_insn (\"illegal operand \", op);\n     }\n }\n \n-/* Output to stdio stream FILE the assembler syntax for an instruction operand\n-   that is a memory reference in MODE and whose address is ADDR.  */\n+/* Implement TARGET_PRINT_OPERAND_ADDRESS.  Output to stdio stream FILE the\n+   assembler syntax for an instruction operand that is a memory reference\n+   whose address is ADDR.  */\n \n static void\n-visium_output_address (FILE *file, enum machine_mode mode, rtx addr)\n+visium_print_operand_address (FILE *file, enum machine_mode mode, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -3205,16 +3223,6 @@ visium_output_address (FILE *file, enum machine_mode mode, rtx addr)\n     }\n }\n \n-/* Helper function for PRINT_OPERAND_ADDRESS (STREAM, X).  Output to stdio\n-   stream FILE the assembler syntax for an instruction operand that is a\n-   memory reference whose address is ADDR.  */\n-\n-void\n-print_operand_address (FILE *file, rtx addr)\n-{\n-  visium_output_address (file, QImode, addr);\n-}\n-\n /* The Visium stack frames look like:\n \n               Before call                      After call"}, {"sha": "9b92a74380be20537eed0ef0404072dec5dc2763", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=01e83ff2d5fed202e66ed1d8b9d12e6f5fdca5e4", "patch": "@@ -1477,49 +1477,6 @@ do\t\t\t\t\t\t\t\t\t\\\n #define ADDITIONAL_REGISTER_NAMES \\\n   {{\"r22\", HARD_FRAME_POINTER_REGNUM}, {\"r23\", STACK_POINTER_REGNUM}}\n \n-/* `PRINT_OPERAND (STREAM, X, CODE)'\n-\n-   A C compound statement to output to stdio stream STREAM the\n-   assembler syntax for an instruction operand X.  X is an RTL\n-   expression.\n-\n-   CODE is a value that can be used to specify one of several ways of\n-   printing the operand.  It is used when identical operands must be\n-   printed differently depending on the context.  CODE comes from the\n-   `%' specification that was used to request printing of the operand.\n-   If the specification was just `%DIGIT' then CODE is 0; if the\n-   specification was `%LTR DIGIT' then CODE is the ASCII code for LTR.\n-\n-   If X is a register, this macro should print the register's name.\n-   The names can be found in an array `reg_names' whose type is `char\n-   *[]'.  `reg_names' is initialized from `REGISTER_NAMES'.\n-\n-   When the machine description has a specification `%PUNCT' (a `%'\n-   followed by a punctuation character), this macro is called with a\n-   null pointer for X and the punctuation character for CODE. */\n-#define PRINT_OPERAND(STREAM, X, CODE) print_operand (STREAM, X, CODE)\n-\n-/* `PRINT_OPERAND_PUNCT_VALID_P (CODE)'\n-\n-   A C expression which evaluates to true if CODE is a valid\n-   punctuation character for use in the `PRINT_OPERAND' macro.  If\n-   `PRINT_OPERAND_PUNCT_VALID_P' is not defined, it means that no\n-   punctuation characters (except for the standard one, `%') are used */\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '#')\n-\n-/* `PRINT_OPERAND_ADDRESS (STREAM, X)'\n-\n-   A C compound statement to output to stdio stream STREAM the\n-   assembler syntax for an instruction operand that is a memory\n-   reference whose address is X.  X is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on the\n-   section that the address refers to.  On these machines, define the\n-   macro `ENCODE_SECTION_INFO' to store the information into the\n-   `symbol_ref', and then check for it here. */\n-#define PRINT_OPERAND_ADDRESS(STREAM, ADDR) \\\n-  print_operand_address (STREAM, ADDR)\n-\n /* `REGISTER_PREFIX'\n    `LOCAL_LABEL_PREFIX'\n    `USER_LABEL_PREFIX'"}]}