{"sha": "77a8368ea3251a9f331100de6c077f0c783c473d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhODM2OGVhMzI1MWE5ZjMzMTEwMGRlNmMwNzdmMGM3ODNjNDczZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-01-13T02:03:49Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-01-13T02:03:49Z"}, "message": "(norsi3, nordi3): Use canonical RTL.\n\n(norsi3, nordi3): Use canonical RTL.  Prepend `*' to pattern\nname.  Don't match immediates.\n(norsi3_const, nordi3_const): New patterns.\n(anddi3, iordi3, xordi3): Test TARGET_64BIT, not mips_isa\nin length attribute calculation.\n\nFrom-SVN: r13485", "tree": {"sha": "c270625009b1eb8ee1ebb5afab229fdc744c2ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c270625009b1eb8ee1ebb5afab229fdc744c2ace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77a8368ea3251a9f331100de6c077f0c783c473d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a8368ea3251a9f331100de6c077f0c783c473d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a8368ea3251a9f331100de6c077f0c783c473d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a8368ea3251a9f331100de6c077f0c783c473d/comments", "author": null, "committer": null, "parents": [{"sha": "fb5bc063a6655320aae1110b6bfca28d909d6acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5bc063a6655320aae1110b6bfca28d909d6acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5bc063a6655320aae1110b6bfca28d909d6acd"}], "stats": {"total": 114, "additions": 66, "deletions": 48}, "files": [{"sha": "9d8bd5496d0f72e75302589e2cc43a7d86813dd5", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 66, "deletions": 48, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a8368ea3251a9f331100de6c077f0c783c473d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a8368ea3251a9f331100de6c077f0c783c473d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=77a8368ea3251a9f331100de6c077f0c783c473d", "patch": "@@ -2029,51 +2029,6 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set (subreg:SI (match_dup 0) 1) (not:SI (subreg:SI (match_dup 1) 1)))]\n   \"\")\n \n-;; Simple hack to recognize the \"nor\" instruction on the MIPS\n-;; This must appear before the normal or patterns, so that the\n-;; combiner will correctly fold things.\n-\n-(define_insn \"norsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(not:SI (ior:SI (match_operand:SI 1 \"reg_or_0_operand\" \"dJ\")\n-\t\t\t(match_operand:SI 2 \"reg_or_0_operand\" \"dJ\"))))]\n-  \"\"\n-  \"nor\\\\t%0,%z1,%z2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n-\n-(define_insn \"nordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(not:DI (ior:DI (match_operand:DI 1 \"se_register_operand\" \"d\")\n-\t\t\t(match_operand:DI 2 \"se_register_operand\" \"d\"))))]\n-  \"\"\n-  \"*\n-{\n-  if (TARGET_64BIT)\n-    return \\\"nor\\\\t%0,%z1,%z2\\\";\n-  return \\\"nor\\\\t%M0,%M1,%M2\\;nor\\\\t%L0,%L1,%L2\\\";\n-}\"\n-  [(set_attr \"type\"\t\"darith\")\n-   (set_attr \"mode\"\t\"DI\")\n-   (set (attr \"length\")\n-\t(if_then_else (ge (symbol_ref \"mips_isa\") (const_int 3))\n-\t\t       (const_int 1)\n-\t\t       (const_int 2)))])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(not:DI (ior:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t(match_operand:DI 2 \"register_operand\" \"\"))))]\n-  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n-   && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n-   && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n-   && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n-\n-  [(set (subreg:SI (match_dup 0) 0) (not:SI (ior:SI (subreg:SI (match_dup 1) 0) (subreg:SI (match_dup 2) 0))))\n-   (set (subreg:SI (match_dup 0) 1) (not:SI (ior:SI (subreg:SI (match_dup 1) 1) (subreg:SI (match_dup 2) 1))))]\n-  \"\")\n-\n \f\n ;;\n ;;  ....................\n@@ -2109,7 +2064,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set_attr \"type\"\t\"darith\")\n    (set_attr \"mode\"\t\"DI\")\n    (set (attr \"length\")\n-\t(if_then_else (ge (symbol_ref \"mips_isa\") (const_int 3))\n+\t(if_then_else (ne (symbol_ref \"TARGET_64BIT\") (const_int 0))\n \t\t       (const_int 1)\n \t\t       (const_int 2)))])\n \n@@ -2167,7 +2122,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set_attr \"type\"\t\"darith\")\n    (set_attr \"mode\"\t\"DI\")\n    (set (attr \"length\")\n-\t(if_then_else (ge (symbol_ref \"mips_isa\") (const_int 3))\n+\t(if_then_else (ne (symbol_ref \"TARGET_64BIT\") (const_int 0))\n \t\t       (const_int 1)\n \t\t       (const_int 2)))])\n \n@@ -2212,7 +2167,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set_attr \"type\"\t\"darith\")\n    (set_attr \"mode\"\t\"DI\")\n    (set (attr \"length\")\n-\t(if_then_else (ge (symbol_ref \"mips_isa\") (const_int 3))\n+\t(if_then_else (ne (symbol_ref \"TARGET_64BIT\") (const_int 0))\n \t\t       (const_int 1)\n \t\t       (const_int 2)))])\n \n@@ -2239,6 +2194,69 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"\t\"1\")])\n \n+(define_insn \"*norsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(not:SI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+  \"\"\n+  \"nor\\\\t%0,%z1,%z2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"1\")])\n+\n+(define_insn \"*nordi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(and:DI (not:DI (match_operand:DI 1 \"se_register_operand\" \"d\"))\n+\t\t(not:DI (match_operand:DI 2 \"se_register_operand\" \"d\"))))]\n+  \"\"\n+  \"*\n+{\n+  if (TARGET_64BIT)\n+    return \\\"nor\\\\t%0,%z1,%z2\\\";\n+  return \\\"nor\\\\t%M0,%M1,%M2\\;nor\\\\t%L0,%L1,%L2\\\";\n+}\"\n+  [(set_attr \"type\"\t\"darith\")\n+   (set_attr \"mode\"\t\"DI\")\n+   (set (attr \"length\")\n+\t(if_then_else (ne (symbol_ref \"TARGET_64BIT\") (const_int 0))\n+\t\t       (const_int 1)\n+\t\t       (const_int 2)))])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"\"))\n+\t\t(not:DI (match_operand:DI 2 \"register_operand\" \"\"))))]\n+  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+   && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n+   && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n+   && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n+\n+  [(set (subreg:SI (match_dup 0) 0) (and:SI (not:SI (subreg:SI (match_dup 1) 0)) (not:SI (subreg:SI (match_dup 2) 0))))\n+   (set (subreg:SI (match_dup 0) 1) (and:SI (not:SI (subreg:SI (match_dup 1) 1)) (not:SI (subreg:SI (match_dup 2) 1))))]\n+  \"\")\n+\n+(define_insn \"*norsi3_const\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t(match_operand:SI 2 \"complemented_arith_operand\" \"\")))]\n+  \"\"\n+  \"nor\\\\t%0,%z1,%e2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"1\")])\n+\n+(define_insn \"*nordi3_const\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(and:DI (not:DI (match_operand:DI 1 \"se_register_operand\" \"d\"))\n+\t\t(match_operand:DI 2 \"complemented_arith_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"nor\\\\t%0,%z1,%e2\"\n+  [(set_attr \"type\"\t\"darith\")\n+   (set_attr \"mode\"\t\"DI\")\n+   (set (attr \"length\")\n+\t(if_then_else (ne (symbol_ref \"TARGET_64BIT\") (const_int 0))\n+\t\t       (const_int 1)\n+\t\t       (const_int 2)))])\n \f\n ;;\n ;;  ...................."}]}