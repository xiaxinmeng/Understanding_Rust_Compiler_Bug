{"sha": "9f8e747867f0b4824c02c7745491b8ef2110b814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4ZTc0Nzg2N2YwYjQ4MjRjMDJjNzc0NTQ5MWI4ZWYyMTEwYjgxNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-25T21:18:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-25T21:18:55Z"}, "message": "bitmap.c (bitmap_malloc_alloc, [...]): Remove.\n\n\t* bitmap.c (bitmap_malloc_alloc, bitmap_malloc_free): Remove.\n\t* bitmap.h (bitmap_malloc_alloc, bitmap_malloc_free): Remove.\n\t(BITMAP_XMALLOC): Forward to BITMAP_OBSTACK_ALLOC.\n\t(BITMAP_XFREE): Forward to BITMAP_OBSTACK_FREE.\n\nFrom-SVN: r91306", "tree": {"sha": "c397daea9bbf7bc76c15c811734f6b7d0e25582c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c397daea9bbf7bc76c15c811734f6b7d0e25582c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f8e747867f0b4824c02c7745491b8ef2110b814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8e747867f0b4824c02c7745491b8ef2110b814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8e747867f0b4824c02c7745491b8ef2110b814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8e747867f0b4824c02c7745491b8ef2110b814/comments", "author": null, "committer": null, "parents": [{"sha": "e288e2f51bed5d45a8a89479bc2f98337bc18c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e288e2f51bed5d45a8a89479bc2f98337bc18c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e288e2f51bed5d45a8a89479bc2f98337bc18c80"}], "stats": {"total": 68, "additions": 22, "deletions": 46}, "files": [{"sha": "96aebd523169d4c5cb4a716f99719fbc47868f44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8e747867f0b4824c02c7745491b8ef2110b814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8e747867f0b4824c02c7745491b8ef2110b814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f8e747867f0b4824c02c7745491b8ef2110b814", "patch": "@@ -1,31 +1,39 @@\n+2004-11-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* bitmap.c (bitmap_malloc_alloc, bitmap_malloc_free): Remove.\n+\t* bitmap.h (bitmap_malloc_alloc, bitmap_malloc_free): Remove.\n+\t(BITMAP_XMALLOC): Forward to BITMAP_OBSTACK_ALLOC.\n+\t(BITMAP_XFREE): Forward to BITMAP_OBSTACK_FREE.\n+\n 2004-11-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/18587\n \t* tree-flow-inline.h (mark_call_clobbered, mark_non_addressable): Flag\n \tcall clobbered caches as invalid.\n \t* tree-ssa-operands.c (ssa_call_clobbered_cache_valid): New.  Flag \n \tindicating whether the call clobbered operand cache is valid.\n-\t(ssa_ro_call_cache_valid): New.  Flag indicating whether the pure/const\n-\tcall operand cache is valid.\n+\t(ssa_ro_call_cache_valid): New.  Flag indicating whether the\n+\tpure/const call operand cache is valid.\n \t(clobbered_v_may_defs, clobbered_vuses, ro_call_vuses): New.  Cached \n \tlist of operands for cached call virtual operands.\n \t(clobbered_aliased_loads, clobbered_aliased_stores, \n-\tro_call_aliased_load): New.  flags caching whether alias bits are to be\n-\tset in call stmt's.\n+\tro_call_aliased_load): New.  flags caching whether alias bits are\n+\tto be set in call stmt's.\n \t(fini_ssa_operands): Remove call operand caches if present.\n-\t(get_expr_operands, get_asm_expr_operands, get_indirect_ref_operands): \n-\tPass stmt annotation to add_stmt_operand.\n+\t(get_expr_operands, get_asm_expr_operands,\n+\tget_indirect_ref_operands): Pass stmt annotation to add_stmt_operand.\n \t(get_call_expr_operands): Add call clobbered variables first.\n \t(add_stmt_operand): Take stmt annotation rather than stmt as a param.\n \t(add_call_clobber_ops, add_call_read_ops): Use the call operand cache\n \tif it is valid, otherise fill the cache.\n \t* tree-ssa-operands.h (ssa_clobbered_cache_valid): Declare extern.\n-\t* tree-flow.h (struct var_ann_d): Add in_vuse_list and in_v_may_def_list\n-\tbits.\n-\t* tree-ssa-operands.c (cleanup_v_may_defs): New.  Clear the in_list bits\n-\tfor the v_may_def elements and empty the operand build array.\n-\t(finalize_ssa_vuses): Use cleanup_v_may_defs and remove redundant VUSES\n-\tby checking the in_v_may_def_list bit.\n+\t* tree-flow.h (struct var_ann_d): Add in_vuse_list and\n+\tin_v_may_def_list bits.\n+\t* tree-ssa-operands.c (cleanup_v_may_defs): New.  Clear the\n+\tin_list bits for the v_may_def elements and empty the operand\n+\tbuild array\n+\t(finalize_ssa_vuses): Use cleanup_v_may_defs and remove redundant\n+\tVUSES by checking the in_v_may_def_list bit.\n \t(append_v_may_def, append_vuse): Use the in_list bit rather than \n \tscanning the array for duplicates.\n "}, {"sha": "f633505eeba153539687eab527ae05351c61e28e", "filename": "gcc/bitmap.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8e747867f0b4824c02c7745491b8ef2110b814/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8e747867f0b4824c02c7745491b8ef2110b814/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=9f8e747867f0b4824c02c7745491b8ef2110b814", "patch": "@@ -222,20 +222,6 @@ bitmap_gc_alloc (void)\n   return map;\n }\n \n-/* Create a new malloced bitmap.  Elements will be allocated from the\n-   default bitmap obstack.  */\n-\n-bitmap\n-bitmap_malloc_alloc (void)\n-{\n-  bitmap map;\n-\n-  map = xmalloc (sizeof (bitmap_head));\n-  bitmap_initialize (map, &bitmap_default_obstack);\n-\n-  return map;\n-}\n-\n /* Release an obstack allocated bitmap.  */\n \n void\n@@ -249,15 +235,6 @@ bitmap_obstack_free (bitmap map)\n     }\n }\n \n-/* Release a malloc allocated bitmap.  */\n-\n-void\n-bitmap_malloc_free (bitmap map)\n-{\n-  bitmap_clear (map);\n-  free (map);\n-}\n-\n \f\n /* Return nonzero if all bits in an element are zero.  */\n "}, {"sha": "a5531d9b1868416e5aea53e72f10cfd55a214081", "filename": "gcc/bitmap.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8e747867f0b4824c02c7745491b8ef2110b814/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8e747867f0b4824c02c7745491b8ef2110b814/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=9f8e747867f0b4824c02c7745491b8ef2110b814", "patch": "@@ -145,10 +145,8 @@ bitmap_initialize (bitmap head, bitmap_obstack *obstack)\n \n /* Allocate and free bitmaps from obstack, malloc and gc'd memory.  */\n extern bitmap bitmap_obstack_alloc (bitmap_obstack *obstack);\n-extern bitmap bitmap_malloc_alloc (void);\n extern bitmap bitmap_gc_alloc (void);\n extern void bitmap_obstack_free (bitmap);\n-extern void bitmap_malloc_free (bitmap);\n \n /* A few compatibility/functions macros for compatibility with sbitmaps */\n #define dump_bitmap(file, bitmap) bitmap_print (file, bitmap, \"\", \"\\n\")\n@@ -162,21 +160,14 @@ extern unsigned bitmap_first_set_bit (bitmap);\n #define BITMAP_GGC_ALLOC() bitmap_gc_alloc ()\n \n /* Allocate a bitmap with xmalloc.  */\n-#define BITMAP_XMALLOC() bitmap_malloc_alloc ()\n+#define BITMAP_XMALLOC() BITMAP_OBSTACK_ALLOC (NULL)\n \n /* Do any cleanup needed on a bitmap when it is no longer used.  */\n #define BITMAP_FREE(BITMAP)\t\t\t\\\n       \t((void)(bitmap_obstack_free (BITMAP), (BITMAP) = NULL))\n \n /* Do any cleanup needed on an xmalloced bitmap when it is no longer used.  */\n-#define BITMAP_XFREE(BITMAP)\t\t\t\\\n-do {\t\t\t\t\t\t\\\n-  if (BITMAP)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      bitmap_malloc_free (BITMAP);\t\t\\\n-      (BITMAP) = 0;\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-} while (0)\n+#define BITMAP_XFREE(BITMAP) BITMAP_OBSTACK_FREE (BITMAP)\n \n /* Iterator for bitmaps.  */\n "}]}