{"sha": "8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2MTk4ZDBmOGVmOWY3ZmJmNjhjYjUzNDBiOWNiZTE3NGQ0ZTU4YQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-24T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-24T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "ee7afeb3dfb4653be14742a59b41280b558696b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7afeb3dfb4653be14742a59b41280b558696b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/comments", "author": null, "committer": null, "parents": [{"sha": "ed431431e069b59a1cfdd877134873248d8c93a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed431431e069b59a1cfdd877134873248d8c93a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed431431e069b59a1cfdd877134873248d8c93a6"}], "stats": {"total": 256, "additions": 255, "deletions": 1}, "files": [{"sha": "7b26c1b5dfb58594c1d543ecfcee4faf2350bac9", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1,3 +1,8 @@\n+2020-11-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config.guess: Import latest upstream.\n+\t* config.sub: Import latest upstream.\n+\n 2020-11-16  Martin Liska  <mliska@suse.cz>\n \n \t* .gitignore: Add cache as clangd uses it now."}, {"sha": "c3b3201c9b6e5568b950f56d480a55031463a23c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1,3 +1,93 @@\n+2020-11-23  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (ipa_pass_through_data): Expand comment describing\n+\toperation.\n+\t* ipa-prop.c (analyze_agg_content_value): Detect new special case and\n+\tencode it as ASSERT_EXPR.\n+\t* ipa-cp.c (values_equal_for_ipcp_p): Move before\n+\tipa_get_jf_arith_result.\n+\t(ipa_get_jf_arith_result): Special case ASSERT_EXPR.\n+\n+2020-11-23  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/h8300.c (h8300_rtx_costs): Handle the various\n+\tcomparison rtx codes too.\n+\n+2020-11-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-prop.c (build_agg_jump_func_from_list,\n+\tipa_read_jump_function): Reserve agg.items precisely.\n+\t* ipa-prop.h (ipa_node_params::~ipa_node_params): Release descriptors\n+\t(ipa_edge_args::~ipa_edge_args): Release agg.items.\n+\n+2020-11-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer-in.c (input_cfg): Do not init ssa operands.\n+\t(input_function): Do not init tree_ssa and set in_ssa_p.\n+\t(input_ssa_names): Do it here.\n+\t* tree-ssa.c (init_tree_ssa): Add additional SIZE parameter, default\n+\tto 0\n+\t* tree-ssanames.c (init_ssanames): Do not round size up to 50, allocate\n+\tprecisely.\n+\t* tree-ssa.h (init_tree_ssa): Update prototype.\n+\n+2020-11-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* diagnostic.c (diagnostic_report_current_module): Adjust for C++\n+\tmodule importation.\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (msp430_section_attr): Don't warn for \"lower\"\n+\tattribute used with \"noinit\" or \"persistent\" attributes.\n+\t(msp430_persist_attr): Remove.\n+\t(attr_lower_exclusions): Remove ATTR_PERSIST exclusion.\n+\t(attr_upper_exclusions): Likewise.\n+\t(attr_either_exclusions): Likewise.\n+\t(attr_persist_exclusions): Remove.\n+\t(msp430_attribute_table): Remove ATTR_PERSIST handling.\n+\t(msp430_handle_generic_attribute): Remove ATTR_PERSIST section conflict\n+\thandling.\n+\t(TARGET_ASM_INIT_SECTIONS): Remove.\n+\t(msp430_init_sections): Remove.\n+\t(msp430_select_section): Use default_elf_select_section for decls with\n+\tthe \"persistent\" attribute.\n+\t(msp430_section_type_flags): Remove \".persistent\" section handling.\n+\t* doc/extend.texi (MSP430 Variable Attributes): Remove \"noinit\" and\n+\t\"persistent\" documentation.\n+\n+2020-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (maybe_push_to_hybrid_worklist): Skip\n+\tdebug stmts.\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* doc/extend.texi (Common Variable Attributes): Document the\n+\t\"persistent\" variable attribute.\n+\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n+\tthe \"persistent\" effective target keyword.\n+\t* tree.h (DECL_PERSISTENT_P): Define.\n+\t* varasm.c (bss_initializer_p): Return false for a\n+\tDECL_PERSISTENT_P decl initialized to zero.\n+\t(default_section_type_flags): Handle the \".persistent\" section.\n+\t(default_elf_select_section): Likewise.\n+\t(default_unique_section): Likewise.\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* tree.h (DECL_NOINIT_P): Define.\n+\t* varasm.c (DECL_NOINIT_P): Check DECL_NOINIT_P before using\n+\tunnamed bss/lcomm sections for bss_initializer variables.\n+\t(default_elf_select_section): Use DECL_NOINIT_P instead of\n+\tlooking up attribute for .noinit section selection.\n+\t(default_unique_section): Check DECL_NOINIT_P for .noinit\n+\tsection selection.\n+\n+2020-11-23  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* doc/install.texi: Document bootstrap-asan option.\n+\n 2020-11-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/97873"}, {"sha": "b33fafcefbd313b70ea24dee4d77fcf2d8f32bd2", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1 +1 @@\n-20201123\n+20201124"}, {"sha": "10cb51dcd3806706d3586004976410283556ede7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1,3 +1,12 @@\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* c-attribs.c (handle_special_var_sec_attribute): New.\n+\t(handle_noinit_attribute): Remove.\n+\t(attr_noinit_exclusions): Rename to...\n+\t(attr_section_exclusions): ...this, and add \"persistent\" attribute\n+\texclusion.\n+\t(c_common_attribute_table): Add \"persistent\" attribute.\n+\n 2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* c-pretty-print.c (c_pretty_printer::simple_type_specifier):"}, {"sha": "e5060340b17dff864c6e9462531392319c5fa870", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1,3 +1,9 @@\n+2020-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/95630\n+\t* c-typeck.c (build_binary_op): Use pedwarn_c99 with OPT_Wpedantic\n+\tfor comparisons of complete and incomplete pointers.\n+\n 2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* c-aux-info.c (gen_type): Support opaque types."}, {"sha": "76c1f158c09dc1b0e56305202843be69edb098bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1,3 +1,19 @@\n+2020-11-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc: New dummy file.\n+\t* Make-lang.in: Add rules to build module.o\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* decl.c (start_decl): Set DECL_INITIAL for initialized decls\n+\tbefore attribute processing.\n+\n+2020-11-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/97904\n+\t* pt.c (tsubst): Use verify_type_context to check the type\n+\tof an array element.\n+\n 2020-11-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94695"}, {"sha": "f1cd406f38472c76f3c47511e8b3250ac69f769b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1,3 +1,81 @@\n+2020-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/95630\n+\t* gcc.dg/c11-compare-incomplete-1.c,\n+\tgcc.dg/c11-compare-incomplete-2.c,\n+\tgcc.dg/c99-compare-incomplete-1.c,\n+\tgcc.dg/c99-compare-incomplete-2.c: New tests.\n+\n+2020-11-23  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gfortran.dg/ipcp-array-2.f90: New test.\n+\n+2020-11-23  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lib/prune.exp (prune_gcc_output): Adjust include stack pruning\n+\tfor modules.\n+\t(print_ices): Relax regexp.\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* g++.target/msp430/data-attributes.C: Remove expected warnings for\n+\t\"lower\" attribute conflicts.\n+\tAdjust expected wording for \"persistent\" attribute misuse.\n+\t* gcc.target/msp430/data-attributes-2.c: Likewise.\n+\t* gcc.target/msp430/pr78818-auto-warn.c: Likewise.\n+\n+2020-11-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/vect/simd-12.cc: New testcase.\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.c-torture/execute/noinit-attribute.c: Moved to...\n+\t* c-c++-common/torture/attr-noinit-main.inc: ...here.\n+\t* lib/target-supports.exp (check_effective_target_persistent): New.\n+\t* c-c++-common/torture/attr-noinit-1.c: New test.\n+\t* c-c++-common/torture/attr-noinit-2.c: New test.\n+\t* c-c++-common/torture/attr-noinit-3.c: New test.\n+\t* c-c++-common/torture/attr-noinit-invalid.c: New test.\n+\t* c-c++-common/torture/attr-persistent-1.c: New test.\n+\t* c-c++-common/torture/attr-persistent-2.c: New test.\n+\t* c-c++-common/torture/attr-persistent-3.c: New test.\n+\t* c-c++-common/torture/attr-persistent-invalid.c: New test.\n+\t* c-c++-common/torture/attr-persistent-main.inc: New test.\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/data-attributes-2.c: Adjust test.\n+\t* g++.target/msp430/data-attributes.C: New test.\n+\t* g++.target/msp430/msp430.exp: New test.\n+\n+2020-11-23  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.c-torture/execute/noinit-attribute.c: Don't override\n+\toptimization options set by torture test harness.\n+\t* lib/target-supports.exp (check_effective_target_noinit): Adjust\n+\tcomment formatting.\n+\n+2020-11-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/cortex-m55-nodsp-flag-hard.c: Add -mthumb.\n+\t* gcc.target/arm/cortex-m55-nodsp-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nodsp-nofp-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nofp-flag-hard.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nofp-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nofp-nomve-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nomve-flag-hard.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nomve-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nomve.fp-flag-hard.c: Likewise.\n+\t* gcc.target/arm/cortex-m55-nomve.fp-flag-softfp.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/pr97327.c: Likewise.\n+\n+2020-11-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR c++/97904\n+\t* g++.dg/ext/sve-sizeless-1.C: Add more template tests.\n+\t* g++.dg/ext/sve-sizeless-2.C: Likewise.\n+\n 2020-11-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/97873"}, {"sha": "28e8fc3c5d59c2af5b57a6108a68f2778d7ba04b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8e6198d0f8ef9f7fbf68cb5340b9cbe174d4e58a", "patch": "@@ -1,3 +1,53 @@\n+2020-11-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/semaphore_base.h\n+\t(__platform_semaphore::_M_try_acquire_until): Fix type of\n+\tvariable.\n+\n+2020-11-23  Stephan Bergmann  <sbergman@redhat.com>\n+\n+\t* include/bits/atomic_wait.h (__thread_relax, __thread_yield):\n+\tAdd 'inline'.\n+\n+2020-11-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_GTHREADS): Check for\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/bits/semaphore_base.h (_GLIBCXX_HAVE_POSIX_SEMAPHORE):\n+\tCheck autoconf macro instead of defining it here.\n+\n+2020-11-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_wait.h: Do not define anything unless\n+\tgthreads or futexes are available.\n+\t* include/bits/atomic_timed_wait.h: Likewise.\n+\t* include/bits/semaphore_base.h: Likewise.\n+\t* include/std/semaphore: Likewise.\n+\t* include/bits/atomic_base.h (atomic_flag::wait)\n+\t(atomic_flag::notify_one, atomic_flag::notify_all)\n+\t(__atomic_base<I>::wait, __atomic_base<I>::notify_one)\n+\t(__atomic_base<I>::notify_all, __atomic_base<P*>::wait)\n+\t(__atomic_base<P*>::notify_one, __atomic_base<P*>::notify_all)\n+\t(__atomic_impl::wait, __atomic_impl::notify_one)\n+\t(__atomic_impl::notify_all, __atomic_float::wait)\n+\t(__atomic_float::notify_one, __atomic_float::notify_all)\n+\t(__atomic_ref::wait, __atomic_ref::notify_one)\n+\t(__atomic_ref::notify_all): Only define if gthreads or futexes\n+\tare available.\n+\t* include/std/atomic (atomic::wait, atomic::notify_one)\n+\t(atomic::notify_all): Likewise.\n+\t* include/std/version (__cpp_lib_semaphore): Define\n+\tconditionally.\n+\n+2020-11-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97948\n+\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Add options\n+\tfor libatomic.\n+\t* testsuite/29_atomics/atomic_integral/wait_notify.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Likewise.\n+\n 2020-11-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/atomic_base.h (atomic_flag::wait): Use correct"}]}