{"sha": "879e23f05867aed40198a68fcd3ba8df62ee104c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc5ZTIzZjA1ODY3YWVkNDAxOThhNjhmY2QzYmE4ZGY2MmVlMTA0Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T17:11:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T17:11:54Z"}, "message": "[multiple changes]\n\n2010-06-22  Doug Rupp  <rupp@adacore.com>\n\n\t* system-vms.ads, system-vms-zcx.ads: Remove old unused VMS system\n\tpackages.\n\t* system-vms_64.ads, system-vms-ia64.ads: Minor reformatting.\n\t(pragma Ident): Add a default ident string in the private part.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* cstand.adb: Minor reformatting.\n\n2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Build_And_Analyze_Renamed_Body): For expansion purposes,\n\trecognize the Shift and Rotation intrinsics that are known to the\n\tcompiler but have no interface name.\n\n2010-06-22  Geert Bosch  <bosch@adacore.com>\n\n\t* a-ngcoty.adb (\"*\"): Rewrite complex multiplication to use proper\n\tscaling in case of overflow or NaN results.\n\nFrom-SVN: r161210", "tree": {"sha": "141d2277fcef0319ec39cd5f3d34a697ef848949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/141d2277fcef0319ec39cd5f3d34a697ef848949"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/879e23f05867aed40198a68fcd3ba8df62ee104c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879e23f05867aed40198a68fcd3ba8df62ee104c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/879e23f05867aed40198a68fcd3ba8df62ee104c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879e23f05867aed40198a68fcd3ba8df62ee104c/comments", "author": null, "committer": null, "parents": [{"sha": "153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1"}], "stats": {"total": 568, "additions": 75, "deletions": 493}, "files": [{"sha": "723187c5af847a4e9afb7fa3759d24d22cd1507b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=879e23f05867aed40198a68fcd3ba8df62ee104c", "patch": "@@ -1,3 +1,25 @@\n+2010-06-22  Doug Rupp  <rupp@adacore.com>\n+\n+\t* system-vms.ads, system-vms-zcx.ads: Remove old unused VMS system\n+\tpackages.\n+\t* system-vms_64.ads, system-vms-ia64.ads: Minor reformatting.\n+\t(pragma Ident): Add a default ident string in the private part.\n+\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* cstand.adb: Minor reformatting.\n+\n+2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Build_And_Analyze_Renamed_Body): For expansion purposes,\n+\trecognize the Shift and Rotation intrinsics that are known to the\n+\tcompiler but have no interface name.\n+\n+2010-06-22  Geert Bosch  <bosch@adacore.com>\n+\n+\t* a-ngcoty.adb (\"*\"): Rewrite complex multiplication to use proper\n+\tscaling in case of overflow or NaN results.\n+\n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* cstand.adb: Complete previous change."}, {"sha": "d45dcd2a9adebd39e27edea9bc4c0262c32d04e7", "filename": "gcc/ada/a-ngcoty.adb", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fa-ngcoty.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fa-ngcoty.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngcoty.adb?ref=879e23f05867aed40198a68fcd3ba8df62ee104c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,6 +43,12 @@ package body Ada.Numerics.Generic_Complex_Types is\n    ---------\n \n    function \"*\" (Left, Right : Complex) return Complex is\n+\n+      Scale : constant R := R (R'Machine_Radix) ** ((R'Machine_Emax - 1) / 2);\n+      --  In case of overflow, scale the operands by the largest power of the\n+      --  radix (to avoid rounding error), so that the square of the scale does\n+      --  not overflow itself.\n+\n       X : R;\n       Y : R;\n \n@@ -53,14 +59,19 @@ package body Ada.Numerics.Generic_Complex_Types is\n       --  If either component overflows, try to scale (skip in fast math mode)\n \n       if not Standard'Fast_Math then\n-         if abs (X) > R'Last then\n-            X := R'(4.0) * (R'(Left.Re / 2.0)  * R'(Right.Re / 2.0)\n-                            - R'(Left.Im / 2.0) * R'(Right.Im / 2.0));\n+\n+         --  ??? the test below is weird, it needs a comment, otherwise I or\n+         --  someone else will change it back to R'Last > abs (X) ???\n+\n+         if not (abs (X) <= R'Last) then\n+            X := Scale**2 * ((Left.Re / Scale) * (Right.Re / Scale) -\n+                             (Left.Im / Scale) * (Right.Im / Scale));\n          end if;\n \n-         if abs (Y) > R'Last then\n-            Y := R'(4.0) * (R'(Left.Re / 2.0)  * R'(Right.Im / 2.0)\n-                            - R'(Left.Im / 2.0) * R'(Right.Re / 2.0));\n+         --  ??? same weird test ???\n+         if not (abs (Y) <= R'Last) then\n+            Y := Scale**2 * ((Left.Re / Scale) * (Right.Im / Scale)\n+                           + (Left.Im / Scale) * (Right.Re / Scale));\n          end if;\n       end if;\n \n@@ -569,7 +580,8 @@ package body Ada.Numerics.Generic_Complex_Types is\n          --  in order to prevent inaccuracies on machines where not all\n          --  immediate expressions are rounded, such as PowerPC.\n \n-         if Re2 > R'Last then\n+         --  ??? same weird test, why not Re2 > R'Last ???\n+         if not (Re2 <= R'Last) then\n             raise Constraint_Error;\n          end if;\n \n@@ -582,7 +594,8 @@ package body Ada.Numerics.Generic_Complex_Types is\n       begin\n          Im2 := X.Im ** 2;\n \n-         if Im2 > R'Last then\n+         --  ??? same weird test\n+         if not (Im2 <= R'Last) then\n             raise Constraint_Error;\n          end if;\n "}, {"sha": "7cabe91b9023432801bfcf36f406aacdbd01b514", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=879e23f05867aed40198a68fcd3ba8df62ee104c", "patch": "@@ -287,11 +287,10 @@ package body CStand is\n       Set_Etype (Last_Entity  (Standard_Op_Concatw), Standard_Wide_String);\n \n       Set_Etype (First_Entity (Standard_Op_Concatww),\n-                  Standard_Wide_Wide_String);\n+                 Standard_Wide_Wide_String);\n \n       Set_Etype (Last_Entity (Standard_Op_Concatww),\n-                   Standard_Wide_Wide_String);\n-\n+                 Standard_Wide_Wide_String);\n    end Create_Operators;\n \n    ---------------------\n@@ -350,13 +349,13 @@ package body CStand is\n \n       procedure Pack_String_Type (String_Type : Entity_Id) is\n          Prag : constant Node_Id :=\n-           Make_Pragma (Stloc,\n-             Chars                        => Name_Pack,\n-             Pragma_Argument_Associations =>\n-               New_List (\n-                 Make_Pragma_Argument_Association (Stloc,\n-                   Expression => New_Occurrence_Of (String_Type, Stloc))));\n-\n+                  Make_Pragma (Stloc,\n+                    Chars                        => Name_Pack,\n+                    Pragma_Argument_Associations =>\n+                      New_List (\n+                        Make_Pragma_Argument_Association (Stloc,\n+                          Expression =>\n+                            New_Occurrence_Of (String_Type, Stloc))));\n       begin\n          Append (Prag, Decl_S);\n          Record_Rep_Item (String_Type, Prag);"}, {"sha": "48e679b4bedd1f665b1eab1d0aff666c3e403199", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=879e23f05867aed40198a68fcd3ba8df62ee104c", "patch": "@@ -230,10 +230,21 @@ package body Freeze is\n \n       if Present (Renamed_Subp)\n         and then Is_Intrinsic_Subprogram (Renamed_Subp)\n-        and then Present (Interface_Name (Renamed_Subp))\n         and then\n           (not In_Same_Source_Unit (Renamed_Subp, Ent)\n             or else Sloc (Renamed_Subp) < Sloc (Ent))\n+        and then\n+\n+         --  We can make the renaming entity intrisic if the renamed function\n+         --  has an interface name, or it is one of the shift/rotate operations\n+         --  known to the compiler.\n+\n+        (Present (Interface_Name (Renamed_Subp))\n+          or else Chars (Renamed_Subp) = Name_Rotate_Left\n+          or else Chars (Renamed_Subp) = Name_Rotate_Right\n+          or else Chars (Renamed_Subp) = Name_Shift_Left\n+          or else Chars (Renamed_Subp) = Name_Shift_Right\n+          or else Chars (Renamed_Subp) = Name_Shift_Right_Arithmetic)\n       then\n          Set_Interface_Name (Ent, Interface_Name (Renamed_Subp));\n          if Present (Alias (Renamed_Subp)) then"}, {"sha": "f5d806ddf77d0541bad85084935494d27b3cedf0", "filename": "gcc/ada/system-vms-ia64.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fsystem-vms-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fsystem-vms-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms-ia64.ads?ref=879e23f05867aed40198a68fcd3ba8df62ee104c", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --            (OpenVMS 64bit Itanium GCC_ZCX DEC Threads Version)           --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -239,7 +239,7 @@ private\n    -- Special VMS Interfaces --\n    ----------------------------\n \n-   procedure Lib_Stop (I : Integer);\n+   procedure Lib_Stop (Cond_Value : Integer);\n    pragma Interface (C, Lib_Stop);\n    pragma Import_Procedure (Lib_Stop, \"LIB$STOP\", Mechanism => (Value));\n    --  Interface to VMS condition handling. Used by RTSfind and pragma\n@@ -251,4 +251,7 @@ private\n    --  Ubiquitous global symbol identifying a GNAT compiled image to VMS Debug.\n    --  Do not remove!\n \n+   pragma Ident (\"GNAT\"); --  Gnat_Static_Version_String\n+   --  Default ident for all VMS images.\n+\n end System;"}, {"sha": "5b4c3edb5d6ad0fe607cdd043b00dd1d4fcb321f", "filename": "gcc/ada/system-vms-zcx.ads", "status": "removed", "additions": 0, "deletions": 232, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1/gcc%2Fada%2Fsystem-vms-zcx.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1/gcc%2Fada%2Fsystem-vms-zcx.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms-zcx.ads?ref=153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1", "patch": "@@ -1,232 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                   (OpenVMS GCC_ZCX DEC Threads Version)                  --\n---                                                                          --\n---          Copyright (C) 2002-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int               : constant := Long_Long_Integer'First;\n-   Max_Int               : constant := Long_Long_Integer'Last;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := 63;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 0.01;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   Max_Priority           : constant Positive := 30;\n-   Max_Interrupt_Priority : constant Positive := 31;\n-\n-   subtype Any_Priority       is Integer      range  0 .. 31;\n-   subtype Priority           is Any_Priority range  0 .. 30;\n-   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n-\n-   Default_Priority : constant Priority := 15;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := False;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Fractional_Fixed_Ops      : constant Boolean := False;\n-   Frontend_Layout           : constant Boolean := False;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   OpenVMS                   : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := True;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_64_Bit_Divides    : constant Boolean := True;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := True;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-   GCC_ZCX_Support           : constant Boolean := True;\n-\n-   --------------------------\n-   -- Underlying Priorities --\n-   ---------------------------\n-\n-   --  Important note: this section of the file must come AFTER the\n-   --  definition of the system implementation parameters to ensure\n-   --  that the value of these parameters is available for analysis\n-   --  of the declarations here (using Rtsfind at compile time).\n-\n-   --  The underlying priorities table provides a generalized mechanism\n-   --  for mapping from Ada priorities to system priorities. In some\n-   --  cases a 1-1 mapping is not the convenient or optimal choice.\n-\n-   --  For DEC Threads OpenVMS, we use the full range of 31 priorities\n-   --  in the Ada model, but map them by compression onto the more limited\n-   --  range of priorities available in OpenVMS.\n-\n-   --  To replace the default values of the Underlying_Priorities mapping,\n-   --  copy this source file into your build directory, edit the file to\n-   --  reflect your desired behavior, and recompile with the command:\n-\n-   --     $ gcc -c -O3 -gnatpgn system.ads\n-\n-   --  then recompile the run-time parts that depend on this package:\n-\n-   --     $ gnatmake -a -gnatn -O3 <your application>\n-\n-   --  then force rebuilding your application if you need different options:\n-\n-   --     $ gnatmake -f <your options> <your application>\n-\n-   type Priorities_Mapping is array (Any_Priority) of Integer;\n-   pragma Suppress_Initialization (Priorities_Mapping);\n-   --  Suppress initialization in case gnat.adc specifies Normalize_Scalars\n-\n-   Underlying_Priorities : constant Priorities_Mapping :=\n-\n-     (Priority'First => 16,\n-\n-      1  => 17,\n-      2  => 18,\n-      3  => 18,\n-      4  => 18,\n-      5  => 18,\n-      6  => 19,\n-      7  => 19,\n-      8  => 19,\n-      9  => 20,\n-      10 => 20,\n-      11 => 21,\n-      12 => 21,\n-      13 => 22,\n-      14 => 23,\n-\n-      Default_Priority   => 24,\n-\n-      16 => 25,\n-      17 => 25,\n-      18 => 25,\n-      19 => 26,\n-      20 => 26,\n-      21 => 26,\n-      22 => 27,\n-      23 => 27,\n-      24 => 27,\n-      25 => 28,\n-      26 => 28,\n-      27 => 29,\n-      28 => 29,\n-      29 => 30,\n-\n-      Priority'Last      => 30,\n-\n-      Interrupt_Priority => 31);\n-\n-   ----------------------------\n-   -- Special VMS Interfaces --\n-   ----------------------------\n-\n-   procedure Lib_Stop (I : Integer);\n-   pragma Interface (C, Lib_Stop);\n-   pragma Import_Procedure (Lib_Stop, \"LIB$STOP\", Mechanism => (Value));\n-   --  Interface to VMS condition handling. Used by RTSfind and pragma\n-   --  {Import,Export}_Exception. Put here because this is the only\n-   --  VMS specific package that doesn't drag in tasking.\n-\n-end System;"}, {"sha": "4b6f1eacdadcb98091ecb8460398026dbadac065", "filename": "gcc/ada/system-vms.ads", "status": "removed", "additions": 0, "deletions": 237, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1/gcc%2Fada%2Fsystem-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1/gcc%2Fada%2Fsystem-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms.ads?ref=153b6955c8f5cc3bd4253aa9f656d1a90a21b5d1", "patch": "@@ -1,237 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                       (OpenVMS DEC Threads Version)                      --\n---                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int               : constant := Long_Long_Integer'First;\n-   Max_Int               : constant := Long_Long_Integer'Last;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := 63;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 0.01;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   Max_Priority           : constant Positive := 30;\n-   Max_Interrupt_Priority : constant Positive := 31;\n-\n-   subtype Any_Priority       is Integer      range  0 .. 31;\n-   subtype Priority           is Any_Priority range  0 .. 30;\n-   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n-\n-   Default_Priority : constant Priority := 15;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := True;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := False;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Fractional_Fixed_Ops      : constant Boolean := False;\n-   Frontend_Layout           : constant Boolean := False;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   OpenVMS                   : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := True;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_64_Bit_Divides    : constant Boolean := True;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := True;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := True;\n-   GCC_ZCX_Support           : constant Boolean := False;\n-\n-   --------------------------\n-   -- Underlying Priorities --\n-   ---------------------------\n-\n-   --  Important note: this section of the file must come AFTER the\n-   --  definition of the system implementation parameters to ensure\n-   --  that the value of these parameters is available for analysis\n-   --  of the declarations here (using Rtsfind at compile time).\n-\n-   --  The underlying priorities table provides a generalized mechanism\n-   --  for mapping from Ada priorities to system priorities. In some\n-   --  cases a 1-1 mapping is not the convenient or optimal choice.\n-\n-   --  For DEC Threads OpenVMS, we use the full range of 31 priorities\n-   --  in the Ada model, but map them by compression onto the more limited\n-   --  range of priorities available in OpenVMS.\n-\n-   --  To replace the default values of the Underlying_Priorities mapping,\n-   --  copy this source file into your build directory, edit the file to\n-   --  reflect your desired behavior, and recompile with the command:\n-\n-   --     $ gcc -c -O3 -gnatpgn system.ads\n-\n-   --  then recompile the run-time parts that depend on this package:\n-\n-   --     $ gnatmake -a -gnatn -O3 <your application>\n-\n-   --  then force rebuilding your application if you need different options:\n-\n-   --     $ gnatmake -f <your options> <your application>\n-\n-   type Priorities_Mapping is array (Any_Priority) of Integer;\n-   pragma Suppress_Initialization (Priorities_Mapping);\n-   --  Suppress initialization in case gnat.adc specifies Normalize_Scalars\n-\n-   Underlying_Priorities : constant Priorities_Mapping :=\n-\n-     (Priority'First => 16,\n-\n-      1  => 17,\n-      2  => 18,\n-      3  => 18,\n-      4  => 18,\n-      5  => 18,\n-      6  => 19,\n-      7  => 19,\n-      8  => 19,\n-      9  => 20,\n-      10 => 20,\n-      11 => 21,\n-      12 => 21,\n-      13 => 22,\n-      14 => 23,\n-\n-      Default_Priority   => 24,\n-\n-      16 => 25,\n-      17 => 25,\n-      18 => 25,\n-      19 => 26,\n-      20 => 26,\n-      21 => 26,\n-      22 => 27,\n-      23 => 27,\n-      24 => 27,\n-      25 => 28,\n-      26 => 28,\n-      27 => 29,\n-      28 => 29,\n-      29 => 30,\n-\n-      Priority'Last      => 30,\n-\n-      Interrupt_Priority => 31);\n-\n-   ----------------------------\n-   -- Special VMS Interfaces --\n-   ----------------------------\n-\n-   procedure Lib_Stop (I : Integer);\n-   pragma Interface (C, Lib_Stop);\n-   pragma Import_Procedure (Lib_Stop, \"LIB$STOP\", Mechanism => (Value));\n-   --  Interface to VMS condition handling. Used by RTSfind and pragma\n-   --  {Import,Export}_Exception. Put here because this is the only\n-   --  VMS specific package that doesn't drag in tasking.\n-\n-   ADA_GNAT : constant Boolean := True;\n-   pragma Export_Object (ADA_GNAT, \"ADA$GNAT\");\n-   --  Ubiquitous global symbol identifying a GNAT compiled image to VMS Debug.\n-   --  Do not remove!\n-\n-end System;"}, {"sha": "2934699420aaa1434dbbd9d4b9e554da04ecb8a2", "filename": "gcc/ada/system-vms_64.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fsystem-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/879e23f05867aed40198a68fcd3ba8df62ee104c/gcc%2Fada%2Fsystem-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms_64.ads?ref=879e23f05867aed40198a68fcd3ba8df62ee104c", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                (OpenVMS 64bit GCC_ZCX DEC Threads Version)               --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -239,7 +239,7 @@ private\n    -- Special VMS Interfaces --\n    ----------------------------\n \n-   procedure Lib_Stop (I : Integer);\n+   procedure Lib_Stop (Cond_Value : Integer);\n    pragma Interface (C, Lib_Stop);\n    pragma Import_Procedure (Lib_Stop, \"LIB$STOP\", Mechanism => (Value));\n    --  Interface to VMS condition handling. Used by RTSfind and pragma\n@@ -251,4 +251,7 @@ private\n    --  Ubiquitous global symbol identifying a GNAT compiled image to VMS Debug.\n    --  Do not remove!\n \n+   pragma Ident (\"GNAT\"); --  Gnat_Static_Version_String\n+   --  Default ident for all VMS images.\n+\n end System;"}]}