{"sha": "b195fae7c11b35c8ee551cd302e3daf8e08c78d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5NWZhZTdjMTFiMzVjOGVlNTUxY2QzMDJlM2RhZjhlMDhjNzhkMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-12T14:18:57Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-12T14:18:57Z"}, "message": "Also preserve SUBREG_PROMOTED_VAR_P in expr.c's convert_move.\n\nThis patch catches another place in the middle-end where it's possible\nto preserve the SUBREG_PROMOTED_VAR_P annotation on a subreg to the\nbenefit of later RTL optimizations.  This adds the same logic to\nexpr.c's convert_move as recently added to convert_modes.\n\nOn nvptx-none, the simple test program:\n\nshort foo (char c) { return c; }\n\ncurrently generates three instructions:\n\nmov.u32\t%r23, %ar0;\ncvt.u16.u32     %r24, %r23;\ncvt.s32.s16     %value, %r24;\n\nwith this patch, we now generate just one:\n\nmov.u32 %value, %ar0;\n\nThis patch should look familiar, it's almost identical to the recent patch\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-August/578331.html but with\nthe fix https://gcc.gnu.org/pipermail/gcc-patches/2021-August/578519.html\n\n2021-09-12  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* expr.c (convert_move): Preserve SUBREG_PROMOTED_VAR_P when\n\tcreating a (wider) partial subreg from a SUBREG_PROMOTED_VAR_P\n\tsubreg.", "tree": {"sha": "5846979797bcefad6ea01f4c68a03b966ba4fb25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5846979797bcefad6ea01f4c68a03b966ba4fb25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b195fae7c11b35c8ee551cd302e3daf8e08c78d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b195fae7c11b35c8ee551cd302e3daf8e08c78d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b195fae7c11b35c8ee551cd302e3daf8e08c78d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b195fae7c11b35c8ee551cd302e3daf8e08c78d0/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71126eeea5c324115c8825b3cec55e5c2fd1627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71126eeea5c324115c8825b3cec55e5c2fd1627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71126eeea5c324115c8825b3cec55e5c2fd1627"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "e0bcbccd9053df168c2e861414729fc7cf017f85", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b195fae7c11b35c8ee551cd302e3daf8e08c78d0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b195fae7c11b35c8ee551cd302e3daf8e08c78d0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b195fae7c11b35c8ee551cd302e3daf8e08c78d0", "patch": "@@ -236,8 +236,27 @@ convert_move (rtx to, rtx from, int unsignedp)\n \t  >= GET_MODE_PRECISION (to_int_mode))\n       && SUBREG_CHECK_PROMOTED_SIGN (from, unsignedp))\n     {\n+      scalar_int_mode int_orig_mode;\n+      scalar_int_mode int_inner_mode;\n+      machine_mode orig_mode = GET_MODE (from);\n+\n       from = gen_lowpart (to_int_mode, SUBREG_REG (from));\n       from_mode = to_int_mode;\n+\n+      /* Preserve SUBREG_PROMOTED_VAR_P if the new mode is wider than\n+\t the original mode, but narrower than the inner mode.  */\n+      if (GET_CODE (from) == SUBREG\n+\t  && is_a <scalar_int_mode> (orig_mode, &int_orig_mode)\n+\t  && GET_MODE_PRECISION (to_int_mode)\n+\t     > GET_MODE_PRECISION (int_orig_mode)\n+\t  && is_a <scalar_int_mode> (GET_MODE (SUBREG_REG (from)),\n+\t\t\t\t     &int_inner_mode)\n+\t  && GET_MODE_PRECISION (int_inner_mode)\n+\t     > GET_MODE_PRECISION (to_int_mode))\n+\t{\n+\t  SUBREG_PROMOTED_VAR_P (from) = 1;\n+\t  SUBREG_PROMOTED_SET (from, unsignedp);\n+\t}\n     }\n \n   gcc_assert (GET_CODE (to) != SUBREG || !SUBREG_PROMOTED_VAR_P (to));"}]}