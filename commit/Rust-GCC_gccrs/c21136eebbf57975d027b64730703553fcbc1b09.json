{"sha": "c21136eebbf57975d027b64730703553fcbc1b09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxMTM2ZWViYmY1Nzk3NWQwMjdiNjQ3MzA3MDM1NTNmY2JjMWIwOQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-09-25T09:40:19Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-09-25T09:40:19Z"}, "message": "avr.h (CLASS_LIKELY_SPILLED_P): Remove.\n\n\t* config/avr/avr.h (CLASS_LIKELY_SPILLED_P): Remove.\n\t* config/avr/avr-protos.h (class_likely_spilled_p): Remove.\n\t* config/avr/avr.c (TARGET_CLASS_LIKELY_SPILLED_P): Define.\n\t(class_likely_spilled_p): Rename to...\n\t(avr_class_likely_spilled_p): ...this. Make static. Change argument\n\ttype to reg_class_t.\n\nFrom-SVN: r164618", "tree": {"sha": "8e7fc4a8f5ef72743b57393ec490c22036c31598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e7fc4a8f5ef72743b57393ec490c22036c31598"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21136eebbf57975d027b64730703553fcbc1b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21136eebbf57975d027b64730703553fcbc1b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21136eebbf57975d027b64730703553fcbc1b09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21136eebbf57975d027b64730703553fcbc1b09/comments", "author": null, "committer": null, "parents": [{"sha": "915acec49bf7ffb41ff2bec3e149809c552496c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915acec49bf7ffb41ff2bec3e149809c552496c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/915acec49bf7ffb41ff2bec3e149809c552496c4"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "fb424bdad8f46cf2a2ab08ef44a6cbdd23b5a71a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c21136eebbf57975d027b64730703553fcbc1b09", "patch": "@@ -1,3 +1,12 @@\n+2010-09-25  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.h (CLASS_LIKELY_SPILLED_P): Remove.\n+\t* config/avr/avr-protos.h (class_likely_spilled_p): Remove.\n+\t* config/avr/avr.c (TARGET_CLASS_LIKELY_SPILLED_P): Define.\n+\t(class_likely_spilled_p): Rename to...\n+\t(avr_class_likely_spilled_p): ...this. Make static. Change argument\n+\ttype to reg_class_t.\n+\n 2010-09-24  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-symtab.c (lto_symtab_entry_def): Add guessed field."}, {"sha": "83de685e76c7414538f138770f3219ebbfe4852c", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=c21136eebbf57975d027b64730703553fcbc1b09", "patch": "@@ -24,7 +24,6 @@\n extern int function_arg_regno_p (int r);\n extern void avr_cpu_cpp_builtins (struct cpp_reader * pfile);\n extern int avr_ret_register (void);\n-extern bool class_likely_spilled_p (int c);\n extern enum reg_class avr_regno_reg_class (int r);\n extern void asm_globalize_label (FILE *file, const char *name);\n extern void avr_asm_declare_function_name (FILE *, const char *, tree);"}, {"sha": "2c7a8ad020400833e077b5ae348ff01d1b25ee0a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c21136eebbf57975d027b64730703553fcbc1b09", "patch": "@@ -92,6 +92,7 @@ static bool avr_hard_regno_scratch_ok (unsigned int);\n static unsigned int avr_case_values_threshold (void);\n static bool avr_frame_pointer_required_p (void);\n static bool avr_can_eliminate (const int, const int);\n+static bool avr_class_likely_spilled_p (reg_class_t c);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -193,6 +194,9 @@ static const struct attribute_spec avr_attribute_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE avr_can_eliminate\n \n+#undef TARGET_CLASS_LIKELY_SPILLED_P\n+#define TARGET_CLASS_LIKELY_SPILLED_P avr_class_likely_spilled_p\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE avr_option_override\n \n@@ -4762,8 +4766,8 @@ gas_output_ascii(FILE *file, const char *str, size_t length)\n    assigned to registers of class CLASS would likely be spilled\n    because registers of CLASS are needed for spill registers.  */\n \n-bool\n-class_likely_spilled_p (int c)\n+static bool\n+avr_class_likely_spilled_p (reg_class_t c)\n {\n   return (c != ALL_REGS && c != ADDW_REGS);\n }"}, {"sha": "60a589935170372d261ed93f6cb7291d6b7db6bf", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21136eebbf57975d027b64730703553fcbc1b09/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c21136eebbf57975d027b64730703553fcbc1b09", "patch": "@@ -333,8 +333,6 @@ enum reg_class {\n \n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P hook_bool_mode_true\n \n-#define CLASS_LIKELY_SPILLED_P(c) class_likely_spilled_p(c)\n-\n #define CLASS_MAX_NREGS(CLASS, MODE)   class_max_nregs (CLASS, MODE)\n \n #define STACK_PUSH_CODE POST_DEC"}]}