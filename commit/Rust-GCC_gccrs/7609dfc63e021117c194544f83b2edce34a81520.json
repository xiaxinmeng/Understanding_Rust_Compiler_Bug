{"sha": "7609dfc63e021117c194544f83b2edce34a81520", "node_id": "C_kwDOANBUbNoAKDc2MDlkZmM2M2UwMjExMTdjMTk0NTQ0ZjgzYjJlZGNlMzRhODE1MjA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-12T12:20:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-12T12:49:30Z"}, "message": "Add missing unify rules for inference variables\n\nInference variables can unify with anything so this includes these\ncovariant types like references/slices etc. This patch is needed for more\ncomplex type-checking in libcore and generics.", "tree": {"sha": "7721c333d9f3ad0e5b35b7b03726b109a54a70f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7721c333d9f3ad0e5b35b7b03726b109a54a70f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7609dfc63e021117c194544f83b2edce34a81520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7609dfc63e021117c194544f83b2edce34a81520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7609dfc63e021117c194544f83b2edce34a81520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7609dfc63e021117c194544f83b2edce34a81520/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b38698aa439a935f0c0f4c55611f2173a28b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b38698aa439a935f0c0f4c55611f2173a28b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b38698aa439a935f0c0f4c55611f2173a28b57"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "f95e7bf7cd183698fb418915b974b7c1cb25fb35", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7609dfc63e021117c194544f83b2edce34a81520/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7609dfc63e021117c194544f83b2edce34a81520/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=7609dfc63e021117c194544f83b2edce34a81520", "patch": "@@ -867,6 +867,18 @@ class ArrayRules : public BaseRules\n \t\t       TyVar (base_resolved->get_ref ()));\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -896,6 +908,18 @@ class SliceRules : public BaseRules\n \t\t\t      TyVar (base_resolved->get_ref ()));\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1140,6 +1164,18 @@ class TupleRules : public BaseRules\n \t\t\t\t    type.get_ident ().locus, fields);\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1263,6 +1299,18 @@ class ReferenceRules : public BaseRules\n \t\t\t\t  base->mutability ());\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1303,6 +1351,18 @@ class PointerRules : public BaseRules\n \t\t\t\tbase->mutability ());\n   }\n \n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+    resolved->set_ref (type.get_ref ());\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}]}