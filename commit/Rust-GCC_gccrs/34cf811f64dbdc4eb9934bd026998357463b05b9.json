{"sha": "34cf811f64dbdc4eb9934bd026998357463b05b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjZjgxMWY2NGRiZGM0ZWI5OTM0YmQwMjY5OTgzNTc0NjNiMDViOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-04-25T10:49:56Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-04-25T10:49:56Z"}, "message": "re PR c/60114 (Incorrect column number for -pedantic and -Wconversion)\n\n\tPR c/60114\nc/\n\t* c-parser.c (c_parser_initelt): Pass input_location to\n\tprocess_init_element.\n\t(c_parser_initval): Pass loc to process_init_element.\n\t* c-tree.h (process_init_element): Adjust declaration.\n\t* c-typeck.c (push_init_level): Pass input_location to\n\tprocess_init_element.\n\t(pop_init_level): Likewise.\n\t(set_designator): Likewise.\n\t(output_init_element): Add location_t parameter.  Pass loc to\n\tdigest_init.\n\t(output_pending_init_elements): Pass input_location to\n\toutput_init_element.\n\t(process_init_element): Add location_t parameter.  Pass loc to\n\toutput_init_element.\ntestsuite/\n\t* gcc.dg/pr60114.c: New test.\n\nFrom-SVN: r209794", "tree": {"sha": "f4d8a50111777846844df804a7eadd99ced2527f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4d8a50111777846844df804a7eadd99ced2527f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34cf811f64dbdc4eb9934bd026998357463b05b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cf811f64dbdc4eb9934bd026998357463b05b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cf811f64dbdc4eb9934bd026998357463b05b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cf811f64dbdc4eb9934bd026998357463b05b9/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b357d40d0a22b6a60ac6b8b08681f096a4ef7da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b357d40d0a22b6a60ac6b8b08681f096a4ef7da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b357d40d0a22b6a60ac6b8b08681f096a4ef7da0"}], "stats": {"total": 133, "additions": 96, "deletions": 37}, "files": [{"sha": "7369065d20efae65b85df4bca0e8acac39ab57d7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=34cf811f64dbdc4eb9934bd026998357463b05b9", "patch": "@@ -1,3 +1,21 @@\n+2014-04-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60114\n+\t* c-parser.c (c_parser_initelt): Pass input_location to\n+\tprocess_init_element.\n+\t(c_parser_initval): Pass loc to process_init_element.\n+\t* c-tree.h (process_init_element): Adjust declaration.\n+\t* c-typeck.c (push_init_level): Pass input_location to\n+\tprocess_init_element.\n+\t(pop_init_level): Likewise.\n+\t(set_designator): Likewise.\n+\t(output_init_element): Add location_t parameter.  Pass loc to\n+\tdigest_init.\n+\t(output_pending_init_elements): Pass input_location to\n+\toutput_init_element.\n+\t(process_init_element): Add location_t parameter.  Pass loc to\n+\toutput_init_element.\n+\n 2014-04-24  Prathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n \n \t* c-parser.c (c_parser_sizeof_expression): Reorganize slightly to"}, {"sha": "56f79f6a795b61af07f49743dfead069f5a759a5", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=34cf811f64dbdc4eb9934bd026998357463b05b9", "patch": "@@ -4219,7 +4219,8 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n \t\t  init.original_type = NULL;\n \t\t  c_parser_error (parser, \"expected identifier\");\n \t\t  c_parser_skip_until_found (parser, CPP_COMMA, NULL);\n-\t\t  process_init_element (init, false, braced_init_obstack);\n+\t\t  process_init_element (input_location, init, false,\n+\t\t\t\t\tbraced_init_obstack);\n \t\t  return;\n \t\t}\n \t    }\n@@ -4351,7 +4352,8 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n \t\t  init.original_type = NULL;\n \t\t  c_parser_error (parser, \"expected %<=%>\");\n \t\t  c_parser_skip_until_found (parser, CPP_COMMA, NULL);\n-\t\t  process_init_element (init, false, braced_init_obstack);\n+\t\t  process_init_element (input_location, init, false,\n+\t\t\t\t\tbraced_init_obstack);\n \t\t  return;\n \t\t}\n \t    }\n@@ -4372,18 +4374,19 @@ c_parser_initval (c_parser *parser, struct c_expr *after,\n {\n   struct c_expr init;\n   gcc_assert (!after || c_dialect_objc ());\n+  location_t loc = c_parser_peek_token (parser)->location;\n+\n   if (c_parser_next_token_is (parser, CPP_OPEN_BRACE) && !after)\n     init = c_parser_braced_init (parser, NULL_TREE, true);\n   else\n     {\n-      location_t loc = c_parser_peek_token (parser)->location;\n       init = c_parser_expr_no_commas (parser, after);\n       if (init.value != NULL_TREE\n \t  && TREE_CODE (init.value) != STRING_CST\n \t  && TREE_CODE (init.value) != COMPOUND_LITERAL_EXPR)\n \tinit = convert_lvalue_to_rvalue (loc, init, true, true);\n     }\n-  process_init_element (init, false, braced_init_obstack);\n+  process_init_element (loc, init, false, braced_init_obstack);\n }\n \n /* Parse a compound statement (possibly a function body) (C90 6.6.2,"}, {"sha": "53768d619b7c0f525ac244691b7d90a479ef71f4", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=34cf811f64dbdc4eb9934bd026998357463b05b9", "patch": "@@ -612,7 +612,8 @@ extern void push_init_level (int, struct obstack *);\n extern struct c_expr pop_init_level (int, struct obstack *);\n extern void set_init_index (tree, tree, struct obstack *);\n extern void set_init_label (tree, struct obstack *);\n-extern void process_init_element (struct c_expr, bool, struct obstack *);\n+extern void process_init_element (location_t, struct c_expr, bool,\n+\t\t\t\t  struct obstack *);\n extern tree build_compound_literal (location_t, tree, tree, bool);\n extern void check_compound_literal_type (location_t, struct c_type_name *);\n extern tree c_start_case (location_t, location_t, tree);"}, {"sha": "62c72dfdd70884d29d5a330ab3765a4121e551a4", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=34cf811f64dbdc4eb9934bd026998357463b05b9", "patch": "@@ -102,8 +102,8 @@ static int spelling_length (void);\n static char *print_spelling (char *);\n static void warning_init (int, const char *);\n static tree digest_init (location_t, tree, tree, tree, bool, bool, int);\n-static void output_init_element (tree, tree, bool, tree, tree, int, bool,\n-\t\t\t\t struct obstack *);\n+static void output_init_element (location_t, tree, tree, bool, tree, tree, int,\n+\t\t\t\t bool, struct obstack *);\n static void output_pending_init_elements (int, struct obstack *);\n static int set_designator (int, struct obstack *);\n static void push_range_stack (tree, struct obstack *);\n@@ -7183,13 +7183,15 @@ push_init_level (int implicit, struct obstack * braced_init_obstack)\n \t  if ((TREE_CODE (constructor_type) == RECORD_TYPE\n \t       || TREE_CODE (constructor_type) == UNION_TYPE)\n \t      && constructor_fields == 0)\n-\t    process_init_element (pop_init_level (1, braced_init_obstack),\n+\t    process_init_element (input_location,\n+\t\t\t\t  pop_init_level (1, braced_init_obstack),\n \t\t\t\t  true, braced_init_obstack);\n \t  else if (TREE_CODE (constructor_type) == ARRAY_TYPE\n \t\t   && constructor_max_index\n \t\t   && tree_int_cst_lt (constructor_max_index,\n \t\t\t\t       constructor_index))\n-\t    process_init_element (pop_init_level (1, braced_init_obstack),\n+\t    process_init_element (input_location,\n+\t\t\t\t  pop_init_level (1, braced_init_obstack),\n \t\t\t\t  true, braced_init_obstack);\n \t  else\n \t    break;\n@@ -7389,10 +7391,9 @@ pop_init_level (int implicit, struct obstack * braced_init_obstack)\n       /* When we come to an explicit close brace,\n \t pop any inner levels that didn't have explicit braces.  */\n       while (constructor_stack->implicit)\n-\t{\n-\t  process_init_element (pop_init_level (1, braced_init_obstack),\n-\t\t\t\ttrue, braced_init_obstack);\n-\t}\n+\tprocess_init_element (input_location,\n+\t\t\t      pop_init_level (1, braced_init_obstack),\n+\t\t\t      true, braced_init_obstack);\n       gcc_assert (!constructor_range_stack);\n     }\n \n@@ -7570,10 +7571,9 @@ set_designator (int array, struct obstack * braced_init_obstack)\n       /* Designator list starts at the level of closest explicit\n \t braces.  */\n       while (constructor_stack->implicit)\n-\t{\n-\t  process_init_element (pop_init_level (1, braced_init_obstack),\n-\t\t\t\ttrue, braced_init_obstack);\n-\t}\n+\tprocess_init_element (input_location,\n+\t\t\t      pop_init_level (1, braced_init_obstack),\n+\t\t\t      true, braced_init_obstack);\n       constructor_designated = 1;\n       return 0;\n     }\n@@ -8193,9 +8193,9 @@ find_init_member (tree field, struct obstack * braced_init_obstack)\n    existing initializer.  */\n \n static void\n-output_init_element (tree value, tree origtype, bool strict_string, tree type,\n-\t\t     tree field, int pending, bool implicit,\n-\t\t     struct obstack * braced_init_obstack)\n+output_init_element (location_t loc, tree value, tree origtype,\n+\t\t     bool strict_string, tree type, tree field, int pending,\n+\t\t     bool implicit, struct obstack * braced_init_obstack)\n {\n   tree semantic_type = NULL_TREE;\n   bool maybe_const = true;\n@@ -8293,8 +8293,8 @@ output_init_element (tree value, tree origtype, bool strict_string, tree type,\n \n   if (semantic_type)\n     value = build1 (EXCESS_PRECISION_EXPR, semantic_type, value);\n-  value = digest_init (input_location, type, value, origtype, npc,\n-      \t\t       strict_string, require_constant_value);\n+  value = digest_init (loc, type, value, origtype, npc, strict_string,\n+\t\t       require_constant_value);\n   if (value == error_mark_node)\n     {\n       constructor_erroneous = 1;\n@@ -8421,8 +8421,8 @@ output_pending_init_elements (int all, struct obstack * braced_init_obstack)\n \t{\n \t  if (tree_int_cst_equal (elt->purpose,\n \t\t\t\t  constructor_unfilled_index))\n-\t    output_init_element (elt->value, elt->origtype, true,\n-\t\t\t\t TREE_TYPE (constructor_type),\n+\t    output_init_element (input_location, elt->value, elt->origtype,\n+\t\t\t\t true, TREE_TYPE (constructor_type),\n \t\t\t\t constructor_unfilled_index, 0, false,\n \t\t\t\t braced_init_obstack);\n \t  else if (tree_int_cst_lt (constructor_unfilled_index,\n@@ -8476,8 +8476,8 @@ output_pending_init_elements (int all, struct obstack * braced_init_obstack)\n \t  if (tree_int_cst_equal (elt_bitpos, ctor_unfilled_bitpos))\n \t    {\n \t      constructor_unfilled_fields = elt->purpose;\n-\t      output_init_element (elt->value, elt->origtype, true,\n-\t\t\t\t   TREE_TYPE (elt->purpose),\n+\t      output_init_element (input_location, elt->value, elt->origtype,\n+\t\t\t\t   true, TREE_TYPE (elt->purpose),\n \t\t\t\t   elt->purpose, 0, false,\n \t\t\t\t   braced_init_obstack);\n \t    }\n@@ -8550,7 +8550,7 @@ output_pending_init_elements (int all, struct obstack * braced_init_obstack)\n    existing initializer.  */\n \n void\n-process_init_element (struct c_expr value, bool implicit,\n+process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t\t      struct obstack * braced_init_obstack)\n {\n   tree orig_value = value.value;\n@@ -8594,14 +8594,14 @@ process_init_element (struct c_expr value, bool implicit,\n       if ((TREE_CODE (constructor_type) == RECORD_TYPE\n \t   || TREE_CODE (constructor_type) == UNION_TYPE)\n \t  && constructor_fields == 0)\n-\tprocess_init_element (pop_init_level (1, braced_init_obstack),\n+\tprocess_init_element (loc, pop_init_level (1, braced_init_obstack),\n \t\t\t      true, braced_init_obstack);\n       else if ((TREE_CODE (constructor_type) == ARRAY_TYPE\n \t        || TREE_CODE (constructor_type) == VECTOR_TYPE)\n \t       && constructor_max_index\n \t       && tree_int_cst_lt (constructor_max_index,\n \t\t\t\t   constructor_index))\n-\tprocess_init_element (pop_init_level (1, braced_init_obstack),\n+\tprocess_init_element (loc, pop_init_level (1, braced_init_obstack),\n \t\t\t      true, braced_init_obstack);\n       else\n \tbreak;\n@@ -8679,7 +8679,7 @@ process_init_element (struct c_expr value, bool implicit,\n \t  if (value.value)\n \t    {\n \t      push_member_name (constructor_fields);\n-\t      output_init_element (value.value, value.original_type,\n+\t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, fieldtype,\n \t\t\t\t   constructor_fields, 1, implicit,\n \t\t\t\t   braced_init_obstack);\n@@ -8771,7 +8771,7 @@ process_init_element (struct c_expr value, bool implicit,\n \t  if (value.value)\n \t    {\n \t      push_member_name (constructor_fields);\n-\t      output_init_element (value.value, value.original_type,\n+\t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, fieldtype,\n \t\t\t\t   constructor_fields, 1, implicit,\n \t\t\t\t   braced_init_obstack);\n@@ -8823,7 +8823,7 @@ process_init_element (struct c_expr value, bool implicit,\n \t  if (value.value)\n \t    {\n \t      push_array_bounds (tree_to_uhwi (constructor_index));\n-\t      output_init_element (value.value, value.original_type,\n+\t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, elttype,\n \t\t\t\t   constructor_index, 1, implicit,\n \t\t\t\t   braced_init_obstack);\n@@ -8858,7 +8858,7 @@ process_init_element (struct c_expr value, bool implicit,\n \t    {\n \t      if (TREE_CODE (value.value) == VECTOR_CST)\n \t\telttype = TYPE_MAIN_VARIANT (constructor_type);\n-\t      output_init_element (value.value, value.original_type,\n+\t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, elttype,\n \t\t\t\t   constructor_index, 1, implicit,\n \t\t\t\t   braced_init_obstack);\n@@ -8887,7 +8887,7 @@ process_init_element (struct c_expr value, bool implicit,\n       else\n \t{\n \t  if (value.value)\n-\t    output_init_element (value.value, value.original_type,\n+\t    output_init_element (loc, value.value, value.original_type,\n \t\t\t\t strict_string, constructor_type,\n \t\t\t\t NULL_TREE, 1, implicit,\n \t\t\t\t braced_init_obstack);\n@@ -8906,16 +8906,17 @@ process_init_element (struct c_expr value, bool implicit,\n \t  while (constructor_stack != range_stack->stack)\n \t    {\n \t      gcc_assert (constructor_stack->implicit);\n-\t      process_init_element (pop_init_level (1,\n-\t\t\t\t\t\t    braced_init_obstack),\n+\t      process_init_element (loc,\n+\t\t\t\t    pop_init_level (1, braced_init_obstack),\n \t\t\t\t    true, braced_init_obstack);\n \t    }\n \t  for (p = range_stack;\n \t       !p->range_end || tree_int_cst_equal (p->index, p->range_end);\n \t       p = p->prev)\n \t    {\n \t      gcc_assert (constructor_stack->implicit);\n-\t      process_init_element (pop_init_level (1, braced_init_obstack),\n+\t      process_init_element (loc,\n+\t\t\t\t    pop_init_level (1, braced_init_obstack),\n \t\t\t\t    true, braced_init_obstack);\n \t    }\n "}, {"sha": "9aa2a25792691b2b527d8f34d2446f668ca97b54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34cf811f64dbdc4eb9934bd026998357463b05b9", "patch": "@@ -1,3 +1,8 @@\n+2014-04-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60114\n+\t* gcc.dg/pr60114.c: New test.\n+\n 2014-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20140425-1.c: New test."}, {"sha": "83f985257045212d909d54660a1e41753d0d10d7", "filename": "gcc/testsuite/gcc.dg/pr60114.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34cf811f64dbdc4eb9934bd026998357463b05b9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60114.c?ref=34cf811f64dbdc4eb9934bd026998357463b05b9", "patch": "@@ -0,0 +1,31 @@\n+/* PR c/60114 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion\" } */\n+\n+struct S { int n, u[2]; };\n+const char z[] = {\n+  [0] = 0x100, /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n+  [2] = 0x101, /* { dg-warning \"9:overflow in implicit constant conversion\" } */\n+};\n+int A[] = {\n+            0, 0x80000000, /* { dg-warning \"16:conversion of unsigned constant value to negative integer\" } */\n+            0xA, 0x80000000, /* { dg-warning \"18:conversion of unsigned constant value to negative integer\" } */\n+            0xA, 0xA, 0x80000000 /* { dg-warning \"23:conversion of unsigned constant value to negative integer\" } */\n+          };\n+int *p = (int []) { 0x80000000 }; /* { dg-warning \"21:conversion of unsigned constant value to negative integer\" } */\n+union { int k; } u = { .k = 0x80000000 }; /* { dg-warning \"29:conversion of unsigned constant value to negative integer\" } */\n+typedef int H[];\n+void\n+foo (void)\n+{\n+  char a[][3] = { { 0x100, /* { dg-warning \"21:overflow in implicit constant conversion\" } */\n+                    1, 0x100 }, /* { dg-warning \"24:overflow in implicit constant conversion\" } */\n+                  { '\\0', 0x100, '\\0' } /* { dg-warning \"27:overflow in implicit constant conversion\" } */\n+                };\n+  (const char []) { 0x100 }; /* { dg-warning \"21:overflow in implicit constant conversion\" } */\n+  (const float []) { 1e0, 1e1, 1e100 }; /* { dg-warning \"32:conversion\" } */\n+  struct S s1 = { 0x80000000 }; /* { dg-warning \"19:conversion of unsigned constant value to negative integer\" } */\n+  struct S s2 = { .n = 0x80000000 }; /* { dg-warning \"24:conversion of unsigned constant value to negative integer\" } */\n+  struct S s3 = { .u[1] = 0x80000000 }; /* { dg-warning \"27:conversion of unsigned constant value to negative integer\" } */\n+  H h = { 1, 2, 0x80000000 }; /* { dg-warning \"17:conversion of unsigned constant value to negative integer\" } */\n+}"}]}