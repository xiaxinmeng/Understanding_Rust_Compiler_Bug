{"sha": "ddc203a7b15306287792a3eed6abfe306e3d26ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjMjAzYTdiMTUzMDYyODc3OTJhM2VlZDZhYmZlMzA2ZTNkMjZhZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-05T19:57:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-05T19:57:28Z"}, "message": "Add mode_for_int_vector helper functions\n\nThere are at least a few places that want to create an integer vector\nwith a specified element size and element count, or to create the\ninteger equivalent of an existing mode.  This patch adds helpers\nfor doing that.\n\nThe require ()s are all used in functions that go on to emit\ninstructions that use the result as a vector mode.\n\n2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* machmode.h (mode_for_int_vector): New function.\n\t* stor-layout.c (mode_for_int_vector): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_emit_approx_sqrt): Use it.\n\t* config/powerpcspe/powerpcspe.c (rs6000_do_expand_vec_perm): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_do_expand_vec_perm): Likewise.\n\t* config/s390/s390.c (s390_expand_vec_compare_cc): Likewise.\n\t(s390_expand_vcond): Likewise.\n\nFrom-SVN: r251729", "tree": {"sha": "70d42d6bad62e909cc47a2cbfc83768e6d71f952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d42d6bad62e909cc47a2cbfc83768e6d71f952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc203a7b15306287792a3eed6abfe306e3d26ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc203a7b15306287792a3eed6abfe306e3d26ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc203a7b15306287792a3eed6abfe306e3d26ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc203a7b15306287792a3eed6abfe306e3d26ad/comments", "author": null, "committer": null, "parents": [{"sha": "61b2290a5c248efd43dd45b1b256e7f792f21f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b2290a5c248efd43dd45b1b256e7f792f21f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b2290a5c248efd43dd45b1b256e7f792f21f02"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "03f690fecf4ca9eae3967ef5fe9fab47e187ced4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddc203a7b15306287792a3eed6abfe306e3d26ad", "patch": "@@ -1,3 +1,13 @@\n+2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* machmode.h (mode_for_int_vector): New function.\n+\t* stor-layout.c (mode_for_int_vector): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_emit_approx_sqrt): Use it.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_do_expand_vec_perm): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_do_expand_vec_perm): Likewise.\n+\t* config/s390/s390.c (s390_expand_vec_compare_cc): Likewise.\n+\t(s390_expand_vcond): Likewise.\n+\n 2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* machmode.h (opt_machine_mode): New type."}, {"sha": "2a5a075e62bbe9d15b563b44569e6ff85066bd95", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ddc203a7b15306287792a3eed6abfe306e3d26ad", "patch": "@@ -8282,9 +8282,6 @@ aarch64_emit_approx_sqrt (rtx dst, rtx src, bool recp)\n       return false;\n     }\n \n-  machine_mode mmsk\n-    = mode_for_vector (int_mode_for_mode (GET_MODE_INNER (mode)).require (),\n-\t\t       GET_MODE_NUNITS (mode));\n   if (!recp)\n     {\n       if (!(flag_mlow_precision_sqrt\n@@ -8302,7 +8299,7 @@ aarch64_emit_approx_sqrt (rtx dst, rtx src, bool recp)\n     /* Caller assumes we cannot fail.  */\n     gcc_assert (use_rsqrt_p (mode));\n \n-\n+  machine_mode mmsk = mode_for_int_vector (mode).require ();\n   rtx xmsk = gen_reg_rtx (mmsk);\n   if (!recp)\n     /* When calculating the approximate square root, compare the"}, {"sha": "82c36dee6783bc38810304c0ed47e6a671e2aa1f", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=ddc203a7b15306287792a3eed6abfe306e3d26ad", "patch": "@@ -38739,8 +38739,7 @@ rs6000_do_expand_vec_perm (rtx target, rtx op0, rtx op1,\n \n   imode = vmode;\n   if (GET_MODE_CLASS (vmode) != MODE_VECTOR_INT)\n-    imode = mode_for_vector\n-      (int_mode_for_mode (GET_MODE_INNER (vmode)).require (), nelt);\n+    imode = mode_for_int_vector (vmode).require ();\n \n   x = gen_rtx_CONST_VECTOR (imode, gen_rtvec_v (nelt, perm));\n   x = expand_vec_perm (vmode, op0, op1, x, target);"}, {"sha": "5f3d36133b4287fdb72ee9b62ec08bf2bd90aae5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ddc203a7b15306287792a3eed6abfe306e3d26ad", "patch": "@@ -35584,8 +35584,7 @@ rs6000_do_expand_vec_perm (rtx target, rtx op0, rtx op1,\n \n   imode = vmode;\n   if (GET_MODE_CLASS (vmode) != MODE_VECTOR_INT)\n-    imode = mode_for_vector\n-      (int_mode_for_mode (GET_MODE_INNER (vmode)).require (), nelt);\n+    imode = mode_for_int_vector (vmode).require ();\n \n   x = gen_rtx_CONST_VECTOR (imode, gen_rtvec_v (nelt, perm));\n   x = expand_vec_perm (vmode, op0, op1, x, target);"}, {"sha": "36bc67db1da6308597cb5130830c21597b587b0d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ddc203a7b15306287792a3eed6abfe306e3d26ad", "patch": "@@ -6472,10 +6472,7 @@ s390_expand_vec_compare_cc (rtx target, enum rtx_code code,\n \tcase LE:   cc_producer_mode = CCVFHEmode; code = GE; swap_p = true; break;\n \tdefault: gcc_unreachable ();\n \t}\n-      scratch_mode = mode_for_vector\n-\t(int_mode_for_mode (GET_MODE_INNER (GET_MODE (cmp1))).require (),\n-\t GET_MODE_NUNITS (GET_MODE (cmp1)));\n-      gcc_assert (scratch_mode != BLKmode);\n+      scratch_mode = mode_for_int_vector (GET_MODE (cmp1)).require ();\n \n       if (inv_p)\n \tall_p = !all_p;\n@@ -6581,9 +6578,7 @@ s390_expand_vcond (rtx target, rtx then, rtx els,\n \n   /* We always use an integral type vector to hold the comparison\n      result.  */\n-  result_mode = mode_for_vector\n-    (int_mode_for_mode (GET_MODE_INNER (cmp_mode)).require (),\n-     GET_MODE_NUNITS (cmp_mode));\n+  result_mode = mode_for_int_vector (cmp_mode).require ();\n   result_target = gen_reg_rtx (result_mode);\n \n   /* We allow vector immediates as comparison operands that"}, {"sha": "7dd71e90d3db7bec48c491100ffd5e924cd070d4", "filename": "gcc/machmode.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=ddc203a7b15306287792a3eed6abfe306e3d26ad", "patch": "@@ -706,6 +706,21 @@ extern machine_mode bitwise_mode_for_mode (machine_mode);\n \n extern machine_mode mode_for_vector (scalar_mode, unsigned);\n \n+extern opt_machine_mode mode_for_int_vector (unsigned int, unsigned int);\n+\n+/* Return the integer vector equivalent of MODE, if one exists.  In other\n+   words, return the mode for an integer vector that has the same number\n+   of bits as MODE and the same number of elements as MODE, with the\n+   latter being 1 if MODE is scalar.  The returned mode can be either\n+   an integer mode or a vector mode.  */\n+\n+inline opt_machine_mode\n+mode_for_int_vector (machine_mode mode)\n+{\n+  return mode_for_int_vector (GET_MODE_UNIT_BITSIZE (mode),\n+\t\t\t      GET_MODE_NUNITS (mode));\n+}\n+\n /* A class for iterating through possible bitfield modes.  */\n class bit_field_mode_iterator\n {"}, {"sha": "6bb7b246c25d03388e6506245aacb1ebdc593900", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc203a7b15306287792a3eed6abfe306e3d26ad/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ddc203a7b15306287792a3eed6abfe306e3d26ad", "patch": "@@ -517,6 +517,23 @@ mode_for_vector (scalar_mode innermode, unsigned nunits)\n   return mode;\n }\n \n+/* Return the mode for a vector that has NUNITS integer elements of\n+   INT_BITS bits each, if such a mode exists.  The mode can be either\n+   an integer mode or a vector mode.  */\n+\n+opt_machine_mode\n+mode_for_int_vector (unsigned int int_bits, unsigned int nunits)\n+{\n+  scalar_int_mode int_mode;\n+  if (int_mode_for_size (int_bits, 0).exists (&int_mode))\n+    {\n+      machine_mode vec_mode = mode_for_vector (int_mode, nunits);\n+      if (vec_mode != BLKmode)\n+\treturn vec_mode;\n+    }\n+  return opt_machine_mode ();\n+}\n+\n /* Return the alignment of MODE. This will be bounded by 1 and\n    BIGGEST_ALIGNMENT.  */\n "}]}