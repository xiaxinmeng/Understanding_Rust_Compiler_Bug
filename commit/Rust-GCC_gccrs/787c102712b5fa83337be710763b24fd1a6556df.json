{"sha": "787c102712b5fa83337be710763b24fd1a6556df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3YzEwMjcxMmI1ZmE4MzMzN2JlNzEwNzYzYjI0ZmQxYTY1NTZkZg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-12-10T01:32:10Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-12-10T01:32:10Z"}, "message": "fptr.c (__canonicalize_funcptr_for_compare): Remove code to initialize call to __dl_fixup once.\n\n\t* config/pa/fptr.c (__canonicalize_funcptr_for_compare): Remove code\n\tto initialize call to __dl_fixup once.\n\nFrom-SVN: r231486", "tree": {"sha": "13ff22e36b3cf484f65489c517a4733f6104977e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ff22e36b3cf484f65489c517a4733f6104977e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/787c102712b5fa83337be710763b24fd1a6556df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787c102712b5fa83337be710763b24fd1a6556df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/787c102712b5fa83337be710763b24fd1a6556df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787c102712b5fa83337be710763b24fd1a6556df/comments", "author": null, "committer": null, "parents": [{"sha": "2f401a8f1888e889386aecdf7eca6e0e31196626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f401a8f1888e889386aecdf7eca6e0e31196626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f401a8f1888e889386aecdf7eca6e0e31196626"}], "stats": {"total": 75, "additions": 33, "deletions": 42}, "files": [{"sha": "6c73ab852b7ec76d4a9e22752af66306f9010160", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787c102712b5fa83337be710763b24fd1a6556df/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787c102712b5fa83337be710763b24fd1a6556df/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=787c102712b5fa83337be710763b24fd1a6556df", "patch": "@@ -1,3 +1,8 @@\n+2015-12-09  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/fptr.c (__canonicalize_funcptr_for_compare): Remove code\n+\tto initialize call to __dl_fixup once.\n+\n 2015-12-04  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/mpy.c (__mulhi3): Use a faster algorithm."}, {"sha": "dd0e15a054c7e032379c9d0657b2fa6effcc8a0a", "filename": "libgcc/config/pa/fptr.c", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787c102712b5fa83337be710763b24fd1a6556df/libgcc%2Fconfig%2Fpa%2Ffptr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787c102712b5fa83337be710763b24fd1a6556df/libgcc%2Fconfig%2Fpa%2Ffptr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Ffptr.c?ref=787c102712b5fa83337be710763b24fd1a6556df", "patch": "@@ -64,10 +64,10 @@ unsigned int __canonicalize_funcptr_for_compare (fptr_t)\n unsigned int\n __canonicalize_funcptr_for_compare (fptr_t fptr)\n {\n-  static unsigned int fixup_plabel[2];\n-  static fixup_t fixup;\n-  static unsigned int *init_fixup;\n-  unsigned int *plabel, *got;\n+  static unsigned int fixup_plabel[2] __attribute__((used));\n+  fixup_t fixup;\n+  unsigned int *got, *iptr, *plabel;\n+  int i;\n \n   /* -1 and page 0 are special.  -1 is used in crtend to mark the end of\n      a list of function pointers.  Also return immediately if the plabel\n@@ -88,47 +88,33 @@ __canonicalize_funcptr_for_compare (fptr_t fptr)\n   if (got !=  &_GLOBAL_OFFSET_TABLE_)\n     return plabel[0];\n \n-  /* Initialize our plabel for calling fixup if we haven't done so already.\n-     We can't rely on static initialization so we check that any previous\n-     initialization was done for the current got address.  This code needs\n-     to be thread safe but we don't have to be too careful as the result\n-     is invariant.  */\n-  if (init_fixup != got)\n+  /* Find the first \"bl\" branch in the offset search list.  This is a\n+     call to _dl_fixup or a magic branch to fixup at the beginning of the\n+     trampoline template.  The fixup function does the actual runtime\n+     resolution of function descriptors.  We only look for \"bl\" branches\n+     with a 17-bit pc-relative displacement.  */\n+  for (i = 0; i < NOFFSETS; i++)\n     {\n-      int i;\n-      unsigned int *iptr;\n-\n-      /* Find the first \"bl\" branch in the offset search list.  This is a\n-\t call to fixup or a magic branch to fixup at the beginning of the\n-\t trampoline template.  The fixup function does the actual runtime\n-\t resolution of function descriptors.  We only look for \"bl\" branches\n-\t with a 17-bit pc-relative displacement.  */\n-      for (i = 0; i < NOFFSETS; i++)\n-\t{\n-\t  iptr = (unsigned int *) (got[-2] + fixup_branch_offset[i]);\n-\t  if ((*iptr & 0xfc00e000) == 0xe8000000)\n-\t    break;\n-\t}\n-\n-      /* This should not happen... */\n-      if (i == NOFFSETS)\n-\treturn ~0;\n-\n-      /* Extract the 17-bit displacement from the instruction.  */\n-      iptr += SIGN_EXTEND (GET_FIELD (*iptr, 19, 28) |\n-\t\t\t   GET_FIELD (*iptr, 29, 29) << 10 |\n-\t\t\t   GET_FIELD (*iptr, 11, 15) << 11 |\n-\t\t\t   GET_FIELD (*iptr, 31, 31) << 16, 17);\n-\n-      /* Build a plabel for an indirect call to fixup.  */\n-      fixup_plabel[0] = (unsigned int) iptr + 8;  /* address of fixup */\n-      fixup_plabel[1] = got[-1];\t\t  /* ltp for fixup */\n-      fixup = (fixup_t) ((int) fixup_plabel | 3);\n-\n-      /* Save address of the global offset table.  */\n-      init_fixup = got;\n+      iptr = (unsigned int *) (got[-2] + fixup_branch_offset[i]);\n+      if ((*iptr & 0xfc00e000) == 0xe8000000)\n+\tbreak;\n     }\n \n+  /* This should not happen... */\n+  if (i == NOFFSETS)\n+    return ~0;\n+\n+  /* Extract the 17-bit displacement from the instruction.  */\n+  iptr += SIGN_EXTEND (GET_FIELD (*iptr, 19, 28) |\n+\t\t       GET_FIELD (*iptr, 29, 29) << 10 |\n+\t\t       GET_FIELD (*iptr, 11, 15) << 11 |\n+\t\t       GET_FIELD (*iptr, 31, 31) << 16, 17);\n+\n+  /* Build a plabel for an indirect call to _dl_fixup.  */\n+  fixup_plabel[0] = (unsigned int) iptr + 8;\t/* address of fixup */\n+  fixup_plabel[1] = got[-1];\t\t\t/* ltp for fixup */\n+  fixup = (fixup_t) ((int) fixup_plabel | 3);\n+\n   /* Call fixup to resolve the function address.  got[1] contains the\n      link_map pointer and plabel[1] the relocation offset.  */\n   fixup ((struct link_map *) got[1], plabel[1]);"}]}