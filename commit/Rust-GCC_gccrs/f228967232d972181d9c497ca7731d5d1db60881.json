{"sha": "f228967232d972181d9c497ca7731d5d1db60881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyODk2NzIzMmQ5NzIxODFkOWM0OTdjYTc3MzFkNWQxZGI2MDg4MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-12T22:06:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-12T22:06:45Z"}, "message": "sse.md (vec_avx2): New mode_attr.\n\n\t* config/i386/sse.md (vec_avx2): New mode_attr.\n\t(mulv16qi3): Macroize to cover also mulv32qi3 for\n\tTARGET_AVX2 into ...\n\t(mul<mode>3): ... this.\n\nFrom-SVN: r179871", "tree": {"sha": "1f46298931ae2e7faed3c3ea0cbfe22b03b1688a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f46298931ae2e7faed3c3ea0cbfe22b03b1688a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f228967232d972181d9c497ca7731d5d1db60881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f228967232d972181d9c497ca7731d5d1db60881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f228967232d972181d9c497ca7731d5d1db60881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f228967232d972181d9c497ca7731d5d1db60881/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c7189ae2d51eccde9857cf66721debb9d5288d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7189ae2d51eccde9857cf66721debb9d5288d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7189ae2d51eccde9857cf66721debb9d5288d4"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "753677a5a1562e34ff94e24f62054f4d07a6b340", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f228967232d972181d9c497ca7731d5d1db60881/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f228967232d972181d9c497ca7731d5d1db60881/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f228967232d972181d9c497ca7731d5d1db60881", "patch": "@@ -1,5 +1,10 @@\n 2011-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (vec_avx2): New mode_attr.\n+\t(mulv16qi3): Macroize to cover also mulv32qi3 for\n+\tTARGET_AVX2 into ...\n+\t(mul<mode>3): ... this.\n+\n \t* config/i386/i386.md (UNSPEC_VPERMDI): Remove.\n \t* config/i386/i386.c (ix86_expand_vec_perm): Handle\n \tV16QImode and V32QImode for TARGET_AVX2."}, {"sha": "e649b30fec645eca6e5d2060589185ef0940b803", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f228967232d972181d9c497ca7731d5d1db60881/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f228967232d972181d9c497ca7731d5d1db60881/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f228967232d972181d9c497ca7731d5d1db60881", "patch": "@@ -163,6 +163,12 @@\n    (V4SI \"avx2\") (V2DI \"avx2\")\n    (V8SI \"avx2\") (V4DI \"avx2\")])\n \n+(define_mode_attr vec_avx2\n+  [(V16QI \"vec\") (V32QI \"avx2\")\n+   (V8HI \"vec\") (V16HI \"avx2\")\n+   (V4SI \"vec\") (V8SI \"avx2\")\n+   (V2DI \"vec\") (V4DI \"avx2\")])\n+\n ;; Mapping of logic-shift operators\n (define_code_iterator lshift [lshiftrt ashift])\n \n@@ -4838,10 +4844,10 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn_and_split \"mulv16qi3\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-\t(mult:V16QI (match_operand:V16QI 1 \"register_operand\" \"\")\n-\t\t    (match_operand:V16QI 2 \"register_operand\" \"\")))]\n+(define_insn_and_split \"mul<mode>3\"\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"\")\n+\t(mult:VI1_AVX2 (match_operand:VI1_AVX2 1 \"register_operand\" \"\")\n+\t\t       (match_operand:VI1_AVX2 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\n    && can_create_pseudo_p ()\"\n   \"#\"\n@@ -4850,34 +4856,41 @@\n {\n   rtx t[6];\n   int i;\n+  enum machine_mode mulmode = <sseunpackmode>mode;\n \n   for (i = 0; i < 6; ++i)\n-    t[i] = gen_reg_rtx (V16QImode);\n+    t[i] = gen_reg_rtx (<MODE>mode);\n \n   /* Unpack data such that we've got a source byte in each low byte of\n      each word.  We don't care what goes into the high byte of each word.\n      Rather than trying to get zero in there, most convenient is to let\n      it be a copy of the low byte.  */\n-  emit_insn (gen_vec_interleave_highv16qi (t[0], operands[1], operands[1]));\n-  emit_insn (gen_vec_interleave_highv16qi (t[1], operands[2], operands[2]));\n-  emit_insn (gen_vec_interleave_lowv16qi (t[2], operands[1], operands[1]));\n-  emit_insn (gen_vec_interleave_lowv16qi (t[3], operands[2], operands[2]));\n+  emit_insn (gen_<vec_avx2>_interleave_high<mode> (t[0], operands[1],\n+\t\t\t\t\t\t   operands[1]));\n+  emit_insn (gen_<vec_avx2>_interleave_high<mode> (t[1], operands[2],\n+\t\t\t\t\t\t   operands[2]));\n+  emit_insn (gen_<vec_avx2>_interleave_low<mode> (t[2], operands[1],\n+\t\t\t\t\t\t  operands[1]));\n+  emit_insn (gen_<vec_avx2>_interleave_low<mode> (t[3], operands[2],\n+\t\t\t\t\t\t  operands[2]));\n \n   /* Multiply words.  The end-of-line annotations here give a picture of what\n      the output of that instruction looks like.  Dot means don't care; the\n      letters are the bytes of the result with A being the most significant.  */\n-  emit_insn (gen_mulv8hi3 (gen_lowpart (V8HImode, t[4]), /* .A.B.C.D.E.F.G.H */\n-\t\t\t   gen_lowpart (V8HImode, t[0]),\n-\t\t\t   gen_lowpart (V8HImode, t[1])));\n-  emit_insn (gen_mulv8hi3 (gen_lowpart (V8HImode, t[5]), /* .I.J.K.L.M.N.O.P */\n-\t\t\t   gen_lowpart (V8HImode, t[2]),\n-\t\t\t   gen_lowpart (V8HImode, t[3])));\n+  emit_insn (gen_rtx_SET (VOIDmode, gen_lowpart (mulmode, t[4]),\n+\t\t\t  gen_rtx_MULT (mulmode,\t/* .A.B.C.D.E.F.G.H */\n+\t\t\t\t\tgen_lowpart (mulmode, t[0]),\n+\t\t\t\t\tgen_lowpart (mulmode, t[1]))));\n+  emit_insn (gen_rtx_SET (VOIDmode, gen_lowpart (mulmode, t[5]),\n+\t\t\t  gen_rtx_MULT (mulmode,\t/* .I.J.K.L.M.N.O.P */\n+\t\t\t\t\tgen_lowpart (mulmode, t[2]),\n+\t\t\t\t\tgen_lowpart (mulmode, t[3]))));\n \n   /* Extract the even bytes and merge them back together.  */\n   ix86_expand_vec_extract_even_odd (operands[0], t[5], t[4], 0);\n \n   set_unique_reg_note (get_last_insn (), REG_EQUAL,\n-\t\t       gen_rtx_MULT (V16QImode, operands[1], operands[2]));\n+\t\t       gen_rtx_MULT (<MODE>mode, operands[1], operands[2]));\n   DONE;\n })\n "}]}