{"sha": "26182e150e12399cdd151a70f46e3c937add775c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxODJlMTUwZTEyMzk5Y2RkMTUxYTcwZjQ2ZTNjOTM3YWRkNzc1Yw==", "commit": {"author": {"name": "Steven Bosscher", "email": "s.bosscher@student.tudelft.nl", "date": "2003-02-22T05:34:23Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-02-22T05:34:23Z"}, "message": "re PR c++/3782 (-quiet -fstats produces a segmentation fault in cc1plus)\n\n2003-02-22  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n\n\tPR other/3782\n\t* toplev.c (process_options): If flag_detailed_statistics is set,\n\tthen set time_report as well.\n\nFrom-SVN: r63274", "tree": {"sha": "fa4ab179484b2732016930206d3756d4025af4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa4ab179484b2732016930206d3756d4025af4f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26182e150e12399cdd151a70f46e3c937add775c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26182e150e12399cdd151a70f46e3c937add775c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26182e150e12399cdd151a70f46e3c937add775c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26182e150e12399cdd151a70f46e3c937add775c/comments", "author": null, "committer": null, "parents": [{"sha": "c0a47a612627d49755b9ef8225924c6df97eed43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a47a612627d49755b9ef8225924c6df97eed43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a47a612627d49755b9ef8225924c6df97eed43"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "ebbfaaf65a725fff86fa1be16cba1c3e85c64047", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26182e150e12399cdd151a70f46e3c937add775c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26182e150e12399cdd151a70f46e3c937add775c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26182e150e12399cdd151a70f46e3c937add775c", "patch": "@@ -1,3 +1,13 @@\n+2003-02-22  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\tPR other/3782\n+\t* toplev.c (process_options): If flag_detailed_statistics is set,\n+\tthen set time_report as well.\n+\n+        PR c/8828\n+        * jump.c (never_reached_warning): Don't fall through BARRRIER\n+\tinsns.  Update comments to reflect what the function really does.\n+\n 2003-02-21  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (omit_one_operand): No longer static.\n@@ -1776,7 +1786,7 @@ Mon Feb  3 21:19:11 CET 2003  Jan Hubicka  <jh@suse.cz>\n \t* config/i386/i386.c (TARGET_DELEGITIMIZE_ADDRESS): Define as\n \ti386_simplify_dwarf_addr.\n \t(ix86_find_base_term): Simplify using i386_simplify_dwarf_addr.\n-  \t(maybe_get_pool_constant): Likewise.\n+\t(maybe_get_pool_constant): Likewise.\n \n Mon Feb  3 16:01:17 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -2262,9 +2272,9 @@ Wed Jan 29 10:26:12 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* regclass.c (init_reg_autoinc): New function.\n \t(regclass): Move initialization of forbidden_inc_dec_class from\n- \there...\n+\there...\n \t(init_regs): to here.  Avoids reinitialization for each function,\n- \tsaving compilation time.\n+\tsaving compilation time.\n \n 2003-01-28  Jason Merrill  <jason@redhat.com>\n \n@@ -2391,16 +2401,16 @@ Wed Jan 29 10:26:12 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n Tue Jan 28 12:15:13 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n- \t* i386.c (ix86_carry_flag_operator):  New predicate.\n- \t(fcmov_operator): Fix whitespace.\n- \t(ix86_expand_carry_flag_compare):  Deal with floating point.\n- \t(ix86_expand_int_movcc): Deal with fp; update insn expansion\n- \t(ix86_expand_int_addcc): Likewise.\n- \t(ix86_expand_strlensi_unroll_1): likewsie.\n- \t* i386.h (PREDICATE_CODES): Add ix86_carry_flag_operator.\n- \t* i386.md (add?i_carry_rex64): Use new predicate.\n- \t(sub?i3_carry_rex64): Likewise.\n- \t(x86_mov?icc_0_m1*): Likewise.\n+\t* i386.c (ix86_carry_flag_operator):  New predicate.\n+\t(fcmov_operator): Fix whitespace.\n+\t(ix86_expand_carry_flag_compare):  Deal with floating point.\n+\t(ix86_expand_int_movcc): Deal with fp; update insn expansion\n+\t(ix86_expand_int_addcc): Likewise.\n+\t(ix86_expand_strlensi_unroll_1): likewsie.\n+\t* i386.h (PREDICATE_CODES): Add ix86_carry_flag_operator.\n+\t* i386.md (add?i_carry_rex64): Use new predicate.\n+\t(sub?i3_carry_rex64): Likewise.\n+\t(x86_mov?icc_0_m1*): Likewise.\n \n 2003-01-28  Andreas Schwab  <schwab@suse.de>\n "}, {"sha": "e55d26589831c7f87ff9ea8e359ab5bf7e16f1c4", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26182e150e12399cdd151a70f46e3c937add775c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26182e150e12399cdd151a70f46e3c937add775c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=26182e150e12399cdd151a70f46e3c937add775c", "patch": "@@ -596,7 +596,7 @@ int flag_finite_math_only = 0;\n /* Zero means that floating-point math operations cannot generate a\n    (user-visible) trap.  This is the case, for example, in nonstop\n    IEEE 754 arithmetic.  Trapping conditions include division by zero,\n-   overflow, underflow, invalid and inexact, but does not include \n+   overflow, underflow, invalid and inexact, but does not include\n    operations on signaling NaNs (see below).  */\n \n int flag_trapping_math = 1;\n@@ -4439,7 +4439,7 @@ independent_decode_option (argc, argv)\n \n \t  if (argv[1][0])\n \t    dump_base_name = argv[1];\n-\t  \n+\n \t  return 2;\n \t}\n       else\n@@ -4519,7 +4519,7 @@ independent_decode_option (argc, argv)\n \n \t  if (argv[1][0])\n \t    aux_base_name = argv[1];\n-\t  \n+\n \t  return 2;\n \t}\n       else if (!strcmp (arg, \"auxbase-strip\"))\n@@ -4533,7 +4533,7 @@ independent_decode_option (argc, argv)\n \t      if (argv[1][0])\n \t\taux_base_name = argv[1];\n \t    }\n-\t  \n+\n \t  return 2;\n \t}\n       else\n@@ -5205,7 +5205,7 @@ process_options ()\n \tprint_switch_values (stderr, 0, MAX_LINE, \"\", \" \", \"\\n\");\n     }\n \n-  if (! quiet_flag)\n+  if (! quiet_flag  || flag_detailed_statistics)\n     time_report = 1;\n \n   if (flag_syntax_only)\n@@ -5341,7 +5341,7 @@ lang_dependent_init (name)\n {\n   if (dump_base_name == 0)\n     dump_base_name = name ? name : \"gccdump\";\n-  \n+\n   /* Front-end initialization.  This hook can assume that GC,\n      identifier hashes etc. are set up, but debug initialization is\n      not done yet.  This routine must return the original filename\n@@ -5464,7 +5464,7 @@ do_compile ()\n   else if (filename)\n     {\n       char *name = xstrdup (lbasename (filename));\n-      \n+\n       aux_base_name = name;\n       strip_off_ending (name, strlen (name));\n     }"}]}