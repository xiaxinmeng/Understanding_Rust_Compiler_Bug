{"sha": "9503d7b1ffd205eac2fbb6418578972f5f428b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUwM2Q3YjFmZmQyMDVlYWMyZmJiNjQxODU3ODk3MmY1ZjQyOGI5Zg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-03-01T10:21:54Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-03-01T10:21:54Z"}, "message": "d/dmd: Merge dmd upstream ed71446aa\n\nBackports support for extern(C++, \"namespace\"), which makes the\ncore.stdcpp package compilable.\n\nAdded predefined condition for CppRuntime_Gcc unconditionally, as it is\nunlikely that D code will be linking to anything other than libstdc++\nwhen extern(C++) is used.\n\nReviewed-on: https://github.com/dlang/dmd/pull/9371\n\ngcc/d/ChangeLog:\n\n2019-03-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* d-builtins.cc (d_init_versions): Add CppRuntime_Gcc as predefined\n\tversion condition.\n\nFrom-SVN: r269304", "tree": {"sha": "bad3ebab9e324ebba545e561514db3637267913c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad3ebab9e324ebba545e561514db3637267913c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9503d7b1ffd205eac2fbb6418578972f5f428b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9503d7b1ffd205eac2fbb6418578972f5f428b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9503d7b1ffd205eac2fbb6418578972f5f428b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9503d7b1ffd205eac2fbb6418578972f5f428b9f/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6b363486fc0c421f09cbf7fbc9a7c8bd20ea4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b363486fc0c421f09cbf7fbc9a7c8bd20ea4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b363486fc0c421f09cbf7fbc9a7c8bd20ea4eb"}], "stats": {"total": 253, "additions": 229, "deletions": 24}, "files": [{"sha": "305b22e793d900a5ed6d92d6087934f1ce86b86a", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -1,3 +1,8 @@\n+2019-03-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc (d_init_versions): Add CppRuntime_Gcc as predefined\n+\tversion condition.\n+\n 2019-02-14  Maya Rashish  <coypu@sdf.org>\n \n \t* d-system.h: NetBSD is POSIX."}, {"sha": "f263aafbd599ab3204d905745e933b06bd374aa1", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -452,6 +452,8 @@ d_init_versions (void)\n   /* Emit all target-specific version identifiers.  */\n   targetdm.d_cpu_versions ();\n   targetdm.d_os_versions ();\n+\n+  VersionCondition::addPredefinedGlobalIdent (\"CppRuntime_Gcc\");\n }\n \n /* A helper for d_build_builtins_module.  Return a new ALIAS for TYPE."}, {"sha": "97aa40d1acea21744a457f1982d0143e43aceb89", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -1,4 +1,4 @@\n-39edbe17e7b5c761d780c9d1d4376a06df7bf3d8\n+ed71446aaa2bd0e548c3bf2154a638826dfe3db0\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "9d7df5fd240382ad59b28efd4fa644f240dfb8d2", "filename": "gcc/d/dmd/cond.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fcond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fcond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.c?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -171,6 +171,8 @@ static bool isReserved(const char *ident)\n         \"SysV4\",\n         \"Hurd\",\n         \"Android\",\n+        \"PlayStation\",\n+        \"PlayStation4\",\n         \"Cygwin\",\n         \"MinGW\",\n         \"FreeStanding\",\n@@ -197,8 +199,11 @@ static bool isReserved(const char *ident)\n         \"MIPS_EABI\",\n         \"MIPS_SoftFloat\",\n         \"MIPS_HardFloat\",\n+        \"MSP430\",\n         \"NVPTX\",\n         \"NVPTX64\",\n+        \"RISCV32\",\n+        \"RISCV64\",\n         \"SPARC\",\n         \"SPARC_V8Plus\",\n         \"SPARC_SoftFloat\",\n@@ -219,6 +224,13 @@ static bool isReserved(const char *ident)\n         \"CRuntime_Digitalmars\",\n         \"CRuntime_Glibc\",\n         \"CRuntime_Microsoft\",\n+        \"CRuntime_Musl\",\n+        \"CRuntime_UClibc\",\n+        \"CppRuntime_Clang\",\n+        \"CppRuntime_DigitalMars\",\n+        \"CppRuntime_Gcc\",\n+        \"CppRuntime_Microsoft\",\n+        \"CppRuntime_Sun\",\n         \"D_Coverage\",\n         \"D_Ddoc\",\n         \"D_InlineAsm_X86\","}, {"sha": "b991417c35e280efb7d8dc5d121336c3fb642e6e", "filename": "gcc/d/dmd/cppmangle.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fcppmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fcppmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.c?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -196,8 +196,8 @@ class CppMangleVisitor : public Visitor\n                 Expression *e = isExpression(o);\n                 if (d && d->isFuncDeclaration())\n                 {\n-                    bool is_nested = d->toParent() &&\n-                        !d->toParent()->isModule() &&\n+                    bool is_nested = d->toParent3() &&\n+                        !d->toParent3()->isModule() &&\n                         ((TypeFunction*)d->isFuncDeclaration()->type)->linkage == LINKcpp;\n                     if (is_nested)\n                         buf->writeByte('X');\n@@ -271,7 +271,7 @@ class CppMangleVisitor : public Visitor\n      */\n     Dsymbol *getInstance(Dsymbol *s)\n     {\n-        Dsymbol *p = s->toParent();\n+        Dsymbol *p = s->toParent3();\n         if (p)\n         {\n             if (TemplateInstance *ti = p->isTemplateInstance())\n@@ -292,7 +292,7 @@ class CppMangleVisitor : public Visitor\n      */\n     static Dsymbol *getQualifier(Dsymbol *s)\n     {\n-        Dsymbol *p = s->toParent();\n+        Dsymbol *p = s->toParent3();\n         return (p && !p->isModule()) ? p : NULL;\n     }\n \n@@ -324,7 +324,7 @@ class CppMangleVisitor : public Visitor\n         Dsymbol *s = ((TypeStruct*)t)->toDsymbol(NULL);\n         if (s->ident != ident)\n             return false;\n-        Dsymbol *p = s->toParent();\n+        Dsymbol *p = s->toParent3();\n         if (!p)\n             return false;\n         TemplateInstance *ti = p->isTemplateInstance();\n@@ -427,15 +427,15 @@ class CppMangleVisitor : public Visitor\n     void cpp_mangle_name(Dsymbol *s, bool qualified)\n     {\n         //printf(\"cpp_mangle_name(%s, %d)\\n\", s->toChars(), qualified);\n-        Dsymbol *p = s->toParent();\n+        Dsymbol *p = s->toParent3();\n         Dsymbol *se = s;\n         bool write_prefix = true;\n         if (p && p->isTemplateInstance())\n         {\n             se = p;\n             if (find(p->isTemplateInstance()->tempdecl) >= 0)\n                 write_prefix = false;\n-            p = p->toParent();\n+            p = p->toParent3();\n         }\n \n         if (p && !p->isModule())\n@@ -521,7 +521,7 @@ class CppMangleVisitor : public Visitor\n             fatal();\n         }\n \n-        Dsymbol *p = d->toParent();\n+        Dsymbol *p = d->toParent3();\n         if (p && !p->isModule()) //for example: char Namespace1::beta[6] should be mangled as \"_ZN10Namespace14betaE\"\n         {\n             buf->writestring(\"_ZN\");\n@@ -561,7 +561,7 @@ class CppMangleVisitor : public Visitor\n              */\n             TemplateInstance *ti = d->parent->isTemplateInstance();\n             assert(ti);\n-            Dsymbol *p = ti->toParent();\n+            Dsymbol *p = ti->toParent3();\n             if (p && !p->isModule() && tf->linkage == LINKcpp)\n             {\n                 buf->writeByte('N');\n@@ -581,7 +581,7 @@ class CppMangleVisitor : public Visitor\n         }\n         else\n         {\n-            Dsymbol *p = d->toParent();\n+            Dsymbol *p = d->toParent3();\n             if (p && !p->isModule() && tf->linkage == LINKcpp)\n             {\n                 /* <nested-name> ::= N [<CV-qualifiers>] <prefix> <unqualified-name> E\n@@ -997,7 +997,7 @@ class CppMangleVisitor : public Visitor\n         else\n         {\n             Dsymbol *s = t->toDsymbol(NULL);\n-            Dsymbol *p = s->toParent();\n+            Dsymbol *p = s->toParent3();\n             if (p && p->isTemplateInstance())\n             {\n                 /* https://issues.dlang.org/show_bug.cgi?id=17947\n@@ -1044,7 +1044,7 @@ class CppMangleVisitor : public Visitor\n \n         {\n             Dsymbol *s = t->toDsymbol(NULL);\n-            Dsymbol *p = s->toParent();\n+            Dsymbol *p = s->toParent3();\n             if (p && p->isTemplateInstance())\n             {\n                  /* https://issues.dlang.org/show_bug.cgi?id=17947"}, {"sha": "9aec87a04f5ce3cc7c40388283523685891de9ef", "filename": "gcc/d/dmd/dsymbol.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fdsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fdsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.c?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -30,6 +30,7 @@\n #include \"attrib.h\"\n #include \"enum.h\"\n #include \"lexer.h\"\n+#include \"nspace.h\"\n \n bool symbolIsVisible(Dsymbol *origin, Dsymbol *s);\n typedef int (*ForeachDg)(void *ctx, size_t idx, Dsymbol *s);\n@@ -310,6 +311,14 @@ Dsymbol *Dsymbol::toAlias2()\n     return toAlias();\n }\n \n+/**\n+ * `pastMixin` returns the enclosing symbol if this is a template mixin.\n+ *\n+ * `pastMixinAndNspace` does likewise, additionally skipping over Nspaces that\n+ * are mangleOnly.\n+ *\n+ * See also `parent`, `toParent`, `toParent2` and `toParent3`.\n+ */\n Dsymbol *Dsymbol::pastMixin()\n {\n     Dsymbol *s = this;\n@@ -320,16 +329,31 @@ Dsymbol *Dsymbol::pastMixin()\n     return s;\n }\n \n+/// ditto\n+Dsymbol *Dsymbol::pastMixinAndNspace()\n+{\n+    //printf(\"Dsymbol::pastMixinAndNspace() %s\\n\", toChars());\n+    Nspace *ns = isNspace();\n+    if (!(ns && ns->mangleOnly) && !isTemplateMixin() && !isForwardingAttribDeclaration())\n+        return this;\n+    if (!parent)\n+        return NULL;\n+    return parent->pastMixinAndNspace();\n+}\n+\n /**********************************\n  * `parent` field returns a lexically enclosing scope symbol this is a member of.\n  *\n  * `toParent()` returns a logically enclosing scope symbol this is a member of.\n- * It skips over TemplateMixin's.\n+ * It skips over TemplateMixin's and Nspaces that are mangleOnly.\n  *\n  * `toParent2()` returns an enclosing scope symbol this is living at runtime.\n  * It skips over both TemplateInstance's and TemplateMixin's.\n  * It's used when looking for the 'this' pointer of the enclosing function/class.\n  *\n+ * `toParent3()` returns a logically enclosing scope symbol this is a member of.\n+ * It skips over TemplateMixin's.\n+ *\n  * Examples:\n  *  module mod;\n  *  template Foo(alias a) { mixin Bar!(); }\n@@ -352,7 +376,7 @@ Dsymbol *Dsymbol::pastMixin()\n  */\n Dsymbol *Dsymbol::toParent()\n {\n-    return parent ? parent->pastMixin() : NULL;\n+    return parent ? parent->pastMixinAndNspace() : NULL;\n }\n \n /// ditto\n@@ -364,6 +388,12 @@ Dsymbol *Dsymbol::toParent2()\n     return s;\n }\n \n+/// ditto\n+Dsymbol *Dsymbol::toParent3()\n+{\n+    return parent ? parent->pastMixin() : NULL;\n+}\n+\n TemplateInstance *Dsymbol::isInstantiated()\n {\n     for (Dsymbol *s = parent; s; s = s->parent)"}, {"sha": "a840261c0bfa8aaf3319ce30ec9c5ace3eff55ea", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -180,8 +180,10 @@ class Dsymbol : public RootObject\n     Module *getModule();\n     Module *getAccessModule();\n     Dsymbol *pastMixin();\n+    Dsymbol *pastMixinAndNspace();\n     Dsymbol *toParent();\n     Dsymbol *toParent2();\n+    Dsymbol *toParent3();\n     TemplateInstance *isInstantiated();\n     TemplateInstance *isSpeculative();\n     Ungag ungagSpeculative();"}, {"sha": "dc785418db8e154a7fc8e38467c820a34224a460", "filename": "gcc/d/dmd/nspace.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fnspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fnspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnspace.c?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -17,23 +17,29 @@\n /* This implements namespaces.\n  */\n \n-Nspace::Nspace(Loc loc, Identifier *ident, Dsymbols *members)\n+Nspace::Nspace(Loc loc, Identifier *ident, Dsymbols *members, bool mangleOnly)\n     : ScopeDsymbol(ident)\n {\n     //printf(\"Nspace::Nspace(ident = %s)\\n\", ident->toChars());\n     this->loc = loc;\n     this->members = members;\n+    // Determines whether the symbol for this namespace should be included in\n+    // the symbol table.\n+    this->mangleOnly = mangleOnly;\n }\n \n Dsymbol *Nspace::syntaxCopy(Dsymbol *)\n {\n-    Nspace *ns = new Nspace(loc, ident, NULL);\n+    Nspace *ns = new Nspace(loc, ident, NULL, mangleOnly);\n     return ScopeDsymbol::syntaxCopy(ns);\n }\n \n void Nspace::addMember(Scope *sc, ScopeDsymbol *sds)\n {\n-    ScopeDsymbol::addMember(sc, sds);\n+    if (mangleOnly)\n+        parent = sds;\n+    else\n+        ScopeDsymbol::addMember(sc, sds);\n     if (members)\n     {\n         if (!symtab)"}, {"sha": "851f800707de965ca002814e2699c72aa7f22b78", "filename": "gcc/d/dmd/nspace.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fnspace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fnspace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnspace.h?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -19,7 +19,8 @@\n class Nspace : public ScopeDsymbol\n {\n   public:\n-    Nspace(Loc loc, Identifier *ident, Dsymbols *members);\n+    bool mangleOnly;\n+    Nspace(Loc loc, Identifier *ident, Dsymbols *members, bool mangleOnly);\n \n     Dsymbol *syntaxCopy(Dsymbol *s);\n     void addMember(Scope *sc, ScopeDsymbol *sds);"}, {"sha": "701c3141031a6a6339b5300cf5c8350095047dfd", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -676,7 +676,8 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n                 Loc linkLoc = token.loc;\n                 Identifiers *idents = NULL;\n                 CPPMANGLE cppmangle = CPPMANGLEdefault;\n-                LINK link = parseLinkage(&idents, &cppmangle);\n+                bool cppMangleOnly = false;\n+                LINK link = parseLinkage(&idents, &cppmangle, &cppMangleOnly);\n                 if (pAttrs->link != LINKdefault)\n                 {\n                     if (pAttrs->link != link)\n@@ -709,7 +710,7 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n                             a = new Dsymbols();\n                             a->push(s);\n                         }\n-                        s = new Nspace(linkLoc, id, a);\n+                        s = new Nspace(linkLoc, id, a, cppMangleOnly);\n                     }\n                     delete idents;\n                     pAttrs->link = LINKdefault;\n@@ -1271,13 +1272,15 @@ Type *Parser::parseVector()\n  * Parse:\n  *      extern (linkage)\n  *      extern (C++, namespaces)\n+ *      extern (C++, \"namespace\", \"namespaces\", ...)\n  * The parser is on the 'extern' token.\n  */\n \n-LINK Parser::parseLinkage(Identifiers **pidents, CPPMANGLE *pcppmangle)\n+LINK Parser::parseLinkage(Identifiers **pidents, CPPMANGLE *pcppmangle, bool *pcppMangleOnly)\n {\n     Identifiers *idents = NULL;\n     CPPMANGLE cppmangle = CPPMANGLEdefault;\n+    bool cppMangleOnly = false;\n     LINK link = LINKdefault;\n     nextToken();\n     assert(token.value == TOKlparen);\n@@ -1307,6 +1310,42 @@ LINK Parser::parseLinkage(Identifiers **pidents, CPPMANGLE *pcppmangle)\n                         cppmangle = token.value == TOKclass ? CPPMANGLEclass : CPPMANGLEstruct;\n                         nextToken();\n                     }\n+                    else if (token.value == TOKstring)  // extern(C++, \"namespace\", \"namespaces\")\n+                    {\n+                        cppMangleOnly = true;\n+                        idents = new Identifiers();\n+\n+                        while (1)\n+                        {\n+                            StringExp *stringExp = (StringExp *)parsePrimaryExp();\n+                            const char *name = stringExp->toPtr();\n+                            if (stringExp->len == 0)\n+                            {\n+                                error(\"invalid zero length C++ namespace\");\n+                                idents = NULL;\n+                                break;\n+                            }\n+                            else if (!Identifier::isValidIdentifier(name))\n+                            {\n+                                error(\"expected valid identifer for C++ namespace but got `%s`\", name);\n+                                idents = NULL;\n+                                break;\n+                            }\n+                            idents->push(Identifier::idPool(name));\n+                            if (token.value == TOKcomma)\n+                            {\n+                                nextToken();\n+                                if (token.value != TOKstring)\n+                                {\n+                                    error(\"string expected following `,` for C++ namespace, not `%s`\", token.toChars());\n+                                    idents = NULL;\n+                                    break;\n+                                }\n+                            }\n+                            else\n+                                break;\n+                        }\n+                    }\n                     else\n                     {\n                         idents = new Identifiers();\n@@ -1368,6 +1407,7 @@ LINK Parser::parseLinkage(Identifiers **pidents, CPPMANGLE *pcppmangle)\n     check(TOKrparen);\n     *pidents = idents;\n     *pcppmangle = cppmangle;\n+    *pcppMangleOnly = cppMangleOnly;\n     return link;\n }\n \n@@ -3604,7 +3644,8 @@ void Parser::parseStorageClasses(StorageClass &storage_class, LINK &link,\n                 sawLinkage = true;\n                 Identifiers *idents = NULL;\n                 CPPMANGLE cppmangle = CPPMANGLEdefault;\n-                link = parseLinkage(&idents, &cppmangle);\n+                bool cppMangleOnly = false;\n+                link = parseLinkage(&idents, &cppmangle, &cppMangleOnly);\n                 if (idents)\n                 {\n                     error(\"C++ name spaces not allowed here\");"}, {"sha": "97630dc3c4df3c74533b663ce119eb84deff817a", "filename": "gcc/d/dmd/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Fd%2Fdmd%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.h?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -88,7 +88,7 @@ class Parser : public Lexer\n     StaticAssert *parseStaticAssert();\n     TypeQualified *parseTypeof();\n     Type *parseVector();\n-    LINK parseLinkage(Identifiers **, CPPMANGLE *);\n+    LINK parseLinkage(Identifiers **, CPPMANGLE *, bool *);\n     Identifiers *parseQualifiedIdentifier(const char *entity);\n     Condition *parseDebugCondition();\n     Condition *parseVersionCondition();"}, {"sha": "4c48012a3d62cce3341a597a9b152a571a511afc", "filename": "gcc/testsuite/gdc.test/compilable/cppmangle3.d", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcppmangle3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcppmangle3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcppmangle3.d?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -0,0 +1,37 @@\n+module cppmangle3;\n+\n+\n+extern(C++, \"true\")\n+{\n+}\n+\n+extern(C++, \"__traits\")\n+{\n+}\n+\n+extern(C++, \"foo\")\n+{\n+}\n+\n+int foo; // no name clashing with above namespace\n+\n+extern(C++, \"std\", \"chrono\")\n+{\n+    void func();\n+}\n+\n+version(Windows) static assert(func.mangleof == \"?func@chrono@std@@YAXXZ\");\n+else             static assert(func.mangleof == \"_ZNSt6chrono4funcEv\");\n+\n+struct Foo\n+{\n+    extern(C++, \"namespace\")\n+    {\n+        static void bar();\n+    }\n+}\n+\n+alias Alias(alias a) = a;\n+alias Alias(T) = T;\n+\n+static assert(is(Alias!(__traits(parent, bar)) == Foo));"}, {"sha": "907bb3b8edf3ce73b75d2355494eb7e90d89345b", "filename": "gcc/testsuite/gdc.test/compilable/test19574.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19574.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19574.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19574.d?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -0,0 +1,18 @@\n+\n+static assert( Foo(10).bar.value == 10 );\n+\n+extern(C++, \"ns\") {\n+    struct Foo {\n+        Bar!Foo bar;\n+\n+        this( int v ) {\n+            bar.value = v;\n+        }\n+    }\n+}\n+\n+extern(C++, \"ns\") {\n+    struct Bar(T) {\n+        int value;\n+    }\n+}"}, {"sha": "b8b2f03f01936c1950a54d35d33645f648e9a457", "filename": "gcc/testsuite/gdc.test/fail_compilation/cppmangle.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcppmangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcppmangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fcppmangle.d?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -0,0 +1,20 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/cppmangle.d(10): Error: invalid zero length C++ namespace\n+fail_compilation/cppmangle.d(14): Error: expected valid identifer for C++ namespace but got `0num`\n+fail_compilation/cppmangle.d(18): Error: string expected following `,` for C++ namespace, not `)`\n+---\n+*/\n+\n+extern(C++, \"\")\n+{\n+}\n+\n+extern(C++, \"0num\")\n+{\n+}\n+\n+extern(C++, \"std\", )\n+{\n+}"}, {"sha": "1fe472829596b23e62e9157aa25921d7960cad64", "filename": "gcc/testsuite/gdc.test/fail_compilation/reserved_version.d", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version.d?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -97,11 +97,17 @@ fail_compilation/reserved_version.d(196): Error: version identifier `D_Version2`\n fail_compilation/reserved_version.d(197): Error: version identifier `D_NoBoundsChecks` is reserved and cannot be set\n fail_compilation/reserved_version.d(200): Error: version identifier `all` is reserved and cannot be set\n fail_compilation/reserved_version.d(201): Error: version identifier `none` is reserved and cannot be set\n+fail_compilation/reserved_version.d(202): Error: version identifier `CppRuntime_Clang` is reserved and cannot be set\n+fail_compilation/reserved_version.d(203): Error: version identifier `CppRuntime_DigitalMars` is reserved and cannot be set\n+fail_compilation/reserved_version.d(204): Error: version identifier `CppRuntime_Gcc` is reserved and cannot be set\n+fail_compilation/reserved_version.d(205): Error: version identifier `CppRuntime_Microsoft` is reserved and cannot be set\n+fail_compilation/reserved_version.d(206): Error: version identifier `CppRuntime_Sun` is reserved and cannot be set\n ---\n */\n \n // Some extra empty lines to help fixup the manual line numbering after adding new version identifiers\n \n+#line 105\n version = MSP430;\n version = D_P16;\n version = DigitalMars;\n@@ -199,6 +205,11 @@ version = D_NoBoundsChecks;\n //version = assert;\n version = all;\n version = none;\n+version = CppRuntime_Clang;\n+version = CppRuntime_DigitalMars;\n+version = CppRuntime_Gcc;\n+version = CppRuntime_Microsoft;\n+version = CppRuntime_Sun;\n \n // This should work though\n debug = DigitalMars;\n@@ -278,6 +289,11 @@ debug = CRuntime_Glibc;\n debug = CRuntime_Microsoft;\n debug = CRuntime_Musl;\n debug = CRuntime_UClibc;\n+debug = CppRuntime_Clang;\n+debug = CppRuntime_DigitalMars;\n+debug = CppRuntime_Gcc;\n+debug = CppRuntime_Microsoft;\n+debug = CppRuntime_Sun;\n debug = D_Coverage;\n debug = D_Ddoc;\n debug = D_InlineAsm_X86;"}, {"sha": "0259273f89e7b783f3ae38fbdc4952887544da14", "filename": "gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version_switch.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9503d7b1ffd205eac2fbb6418578972f5f428b9f/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version_switch.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Freserved_version_switch.d?ref=9503d7b1ffd205eac2fbb6418578972f5f428b9f", "patch": "@@ -77,6 +77,11 @@\n // REQUIRED_ARGS: -version=CRuntime_Microsoft\n // REQUIRED_ARGS: -version=CRuntime_Musl\n // REQUIRED_ARGS: -version=CRuntime_UClibc\n+// REQUIRED_ARGS: -version=CppRuntime_Clang\n+// REQUIRED_ARGS: -version=CppRuntime_DigitalMars\n+// REQUIRED_ARGS: -version=CppRuntime_Gcc\n+// REQUIRED_ARGS: -version=CppRuntime_Microsoft\n+// REQUIRED_ARGS: -version=CppRuntime_Sun\n // REQUIRED_ARGS: -version=D_Coverage\n // REQUIRED_ARGS: -version=D_Ddoc\n // REQUIRED_ARGS: -version=D_InlineAsm_X86\n@@ -168,6 +173,11 @@\n // REQUIRED_ARGS: -debug=CRuntime_Microsoft\n // REQUIRED_ARGS: -debug=CRuntime_Musl\n // REQUIRED_ARGS: -debug=CRuntime_UClibc\n+// REQUIRED_ARGS: -debug=CppRuntime_Clang\n+// REQUIRED_ARGS: -debug=CppRuntime_DigitalMars\n+// REQUIRED_ARGS: -debug=CppRuntime_Gcc\n+// REQUIRED_ARGS: -debug=CppRuntime_Microsoft\n+// REQUIRED_ARGS: -debug=CppRuntime_Sun\n // REQUIRED_ARGS: -debug=D_Coverage\n // REQUIRED_ARGS: -debug=D_Ddoc\n // REQUIRED_ARGS: -debug=D_InlineAsm_X86\n@@ -264,6 +274,11 @@ Error: version identifier `CRuntime_Glibc` is reserved and cannot be set\n Error: version identifier `CRuntime_Microsoft` is reserved and cannot be set\n Error: version identifier `CRuntime_Musl` is reserved and cannot be set\n Error: version identifier `CRuntime_UClibc` is reserved and cannot be set\n+Error: version identifier `CppRuntime_Clang` is reserved and cannot be set\n+Error: version identifier `CppRuntime_DigitalMars` is reserved and cannot be set\n+Error: version identifier `CppRuntime_Gcc` is reserved and cannot be set\n+Error: version identifier `CppRuntime_Microsoft` is reserved and cannot be set\n+Error: version identifier `CppRuntime_Sun` is reserved and cannot be set\n Error: version identifier `D_Coverage` is reserved and cannot be set\n Error: version identifier `D_Ddoc` is reserved and cannot be set\n Error: version identifier `D_InlineAsm_X86` is reserved and cannot be set"}]}