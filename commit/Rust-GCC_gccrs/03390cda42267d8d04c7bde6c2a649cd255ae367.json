{"sha": "03390cda42267d8d04c7bde6c2a649cd255ae367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzOTBjZGE0MjI2N2Q4ZDA0YzdiZGU2YzJhNjQ5Y2QyNTVhZTM2Nw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2015-01-16T06:20:22Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2015-01-16T06:20:22Z"}, "message": "[NDS32] Have shirnk-wrapping optimization to be performed on nds32 target.\n\ngcc/\n\t* config/nds32/nds32-protos.h (nds32_can_use_return_insn): New.\n\t* config/nds32/nds32.md (unspec_volatile_func_return): Remove.\n\t(return_internal): New.\n\t(return): Define this named pattern.\n\t(simple_return): Define this named pattern.\n\t* config/nds32/nds32.c (nds32_expand_epilogue): Emit return_internal\n\tpattern instead of unspec_volatile_func_return.\n\t(nds32_expand_epilogue_v3pop): Likewise.\n\t(nds32_can_use_return_insn): New function.\n\nFrom-SVN: r219711", "tree": {"sha": "f85dd78875ae4f283fa1ab54e809870a6a7ec11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f85dd78875ae4f283fa1ab54e809870a6a7ec11a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03390cda42267d8d04c7bde6c2a649cd255ae367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03390cda42267d8d04c7bde6c2a649cd255ae367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03390cda42267d8d04c7bde6c2a649cd255ae367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03390cda42267d8d04c7bde6c2a649cd255ae367/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa2642ef15852495d84f737010522358ed159271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2642ef15852495d84f737010522358ed159271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2642ef15852495d84f737010522358ed159271"}], "stats": {"total": 86, "additions": 62, "deletions": 24}, "files": [{"sha": "5d0313dffdfd2bfc700445fbf00e618b328f718e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03390cda42267d8d04c7bde6c2a649cd255ae367", "patch": "@@ -1,3 +1,15 @@\n+2015-01-16  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32-protos.h (nds32_can_use_return_insn): New.\n+\t* config/nds32/nds32.md (unspec_volatile_func_return): Remove.\n+\t(return_internal): New.\n+\t(return): Define this named pattern.\n+\t(simple_return): Define this named pattern.\n+\t* config/nds32/nds32.c (nds32_expand_epilogue): Emit return_internal\n+\tpattern instead of unspec_volatile_func_return.\n+\t(nds32_expand_epilogue_v3pop): Likewise.\n+\t(nds32_can_use_return_insn): New function.\n+\n 2015-01-16  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/constants.md (UNSPEC_VOLATILE_POP25_RETURN): New."}, {"sha": "91f8d9ab0b26341e360b01e2149b474a15a0b0e0", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=03390cda42267d8d04c7bde6c2a649cd255ae367", "patch": "@@ -120,6 +120,10 @@ extern const char *nds32_output_32bit_load_s (rtx *, int);\n extern const char *nds32_output_stack_push (rtx);\n extern const char *nds32_output_stack_pop (rtx);\n \n+/* Auxiliary functions to check using return with null epilogue.  */\n+\n+extern int nds32_can_use_return_insn (void);\n+\n /* Auxiliary functions to decide output alignment or not.  */\n \n extern int nds32_target_alignment (rtx);"}, {"sha": "538495fb298b5f362df0008773e331deadc06d1e", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=03390cda42267d8d04c7bde6c2a649cd255ae367", "patch": "@@ -3087,12 +3087,9 @@ nds32_expand_epilogue (void)\n \t  RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;\n \t}\n \n-      /* Generate return instruction by using\n-         unspec_volatile_func_return pattern.\n-         Make sure this instruction is after gen_blockage().\n-         NOTE that $lp will become 'live'\n-         after this instruction has been emitted.  */\n-      emit_insn (gen_unspec_volatile_func_return ());\n+      /* Generate return instruction by using 'return_internal' pattern.\n+         Make sure this instruction is after gen_blockage().  */\n+      emit_jump_insn (gen_return_internal ());\n       return;\n     }\n \n@@ -3196,9 +3193,8 @@ nds32_expand_epilogue (void)\n       RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;\n     }\n \n-  /* Generate return instruction by using\n-     unspec_volatile_func_return pattern.  */\n-  emit_insn (gen_unspec_volatile_func_return ());\n+  /* Generate return instruction.  */\n+  emit_jump_insn (gen_return_internal ());\n }\n \n /* Function for v3push prologue.  */\n@@ -3350,12 +3346,9 @@ nds32_expand_epilogue_v3pop (void)\n      epilogue code fragment BUT 'ret' instruction.  */\n   if (cfun->machine->naked_p)\n     {\n-      /* Generate return instruction by using\n-         unspec_volatile_func_return pattern.\n-         Make sure this instruction is after gen_blockage().\n-         NOTE that $lp will become 'live'\n-         after this instruction has been emitted.  */\n-      emit_insn (gen_unspec_volatile_func_return ());\n+      /* Generate return instruction by using 'return_internal' pattern.\n+         Make sure this instruction is after gen_blockage().  */\n+      emit_jump_insn (gen_return_internal ());\n       return;\n     }\n \n@@ -3454,6 +3447,25 @@ nds32_expand_epilogue_v3pop (void)\n   emit_jump_insn (gen_pop25return ());\n }\n \n+/* Return nonzero if this function is known to have a null epilogue.\n+   This allows the optimizer to omit jumps to jumps if no stack\n+   was created.  */\n+int\n+nds32_can_use_return_insn (void)\n+{\n+  /* Prior to reloading, we can't tell how many registers must be saved.\n+     Thus we can not determine whether this function has null epilogue.  */\n+  if (!reload_completed)\n+    return 0;\n+\n+  /* If no stack was created, two conditions must be satisfied:\n+     1. This is a naked function.\n+        So there is no callee-saved, local size, or outgoing size.\n+     2. This is NOT a variadic function.\n+        So there is no pushing arguement registers into the stack.  */\n+  return (cfun->machine->naked_p && (cfun->machine->va_args_size == 0));\n+}\n+\n /* ------------------------------------------------------------------------ */\n \n /* Function to test 333-form for load/store instructions."}, {"sha": "1cf620288c780af10123642976223688ebbd4176", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03390cda42267d8d04c7bde6c2a649cd255ae367/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=03390cda42267d8d04c7bde6c2a649cd255ae367", "patch": "@@ -2090,25 +2090,35 @@ create_template:\n \n \n ;; ----------------------------------------------------------------------------\n-;; unspec operation patterns\n+;; Return operation patterns\n ;; ----------------------------------------------------------------------------\n \n-;; In nds32 target, the 'ret5' instuction is actually 'jr5 $lp'.\n-;; This pattern is designed to distinguish function return\n-;; from general indirect_jump pattern so that we can directly\n-;; generate 'ret5' for readability.\n+;; Use this pattern to expand a return instruction\n+;; with simple_return rtx if no epilogue is required.\n+(define_expand \"return\"\n+  [(simple_return)]\n+  \"nds32_can_use_return_insn ()\"\n+  \"\"\n+)\n \n-(define_insn \"unspec_volatile_func_return\"\n-  [(set (pc)\n-\t(unspec_volatile:SI [(reg:SI LP_REGNUM)] UNSPEC_VOLATILE_FUNC_RETURN))]\n+;; This pattern is expanded only by the shrink-wrapping optimization\n+;; on paths where the function prologue has not been executed.\n+(define_expand \"simple_return\"\n+  [(simple_return)]\n+  \"\"\n+  \"\"\n+)\n+\n+(define_insn \"return_internal\"\n+  [(simple_return)]\n   \"\"\n {\n   if (TARGET_16_BIT)\n     return \"ret5\";\n   else\n     return \"ret\";\n }\n-  [(set_attr \"type\" \"misc\")\n+  [(set_attr \"type\" \"branch\")\n    (set_attr \"enabled\" \"1\")\n    (set (attr \"length\")\n \t(if_then_else (match_test \"TARGET_16_BIT\")"}]}