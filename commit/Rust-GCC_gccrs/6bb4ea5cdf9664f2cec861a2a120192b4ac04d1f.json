{"sha": "6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiNGVhNWNkZjk2NjRmMmNlYzg2MWEyYTEyMDE5MmI0YWMwNGQxZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-01-12T08:33:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-01-12T08:33:09Z"}, "message": "tree-pretty-print.c (dump_generic_node): Provide -gimple variant for MEM_REF.\n\n2017-01-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-pretty-print.c (dump_generic_node): Provide -gimple\n\tvariant for MEM_REF.  Sanitize INTEGER_CST for -gimple.\n\n\tc/\n\t* gimple-parser.c (c_parser_gimple_postfix_expression): Parse\n\t__MEM.\n\n\t* gcc.dg/gimplefe-21.c: New testcase.\n\nFrom-SVN: r244350", "tree": {"sha": "8d757072a4d9f57d69894171f684fe4872d9d218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d757072a4d9f57d69894171f684fe4872d9d218"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef9d56f8acf5f46e30d46836095fb920759a2084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9d56f8acf5f46e30d46836095fb920759a2084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9d56f8acf5f46e30d46836095fb920759a2084"}], "stats": {"total": 148, "additions": 145, "deletions": 3}, "files": [{"sha": "012c095c78f7511c2ee6140f632e49b48f946e45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "patch": "@@ -1,3 +1,8 @@\n+2017-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-pretty-print.c (dump_generic_node): Provide -gimple\n+\tvariant for MEM_REF.  Sanitize INTEGER_CST for -gimple.\n+\n 2017-01-12  Richard Biener  <rguenther@suse.de>\n \n \t* tree.c (initialize_tree_contains_struct): Make TS_OPTIMIZATION"}, {"sha": "65531aa34754a3bcaf89d6b5af4d1f012270d63c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "patch": "@@ -1,3 +1,8 @@\n+2017-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression): Parse\n+\t__MEM.\n+\n 2017-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/72813"}, {"sha": "ee8a01a7f93861738237896906d7591176c9656c", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "patch": "@@ -727,6 +727,79 @@ c_parser_gimple_postfix_expression (c_parser *parser)\n       if (c_parser_peek_token (parser)->id_kind == C_ID_ID)\n \t{\n \t  tree id = c_parser_peek_token (parser)->value;\n+\t  if (strcmp (IDENTIFIER_POINTER (id), \"__MEM\") == 0)\n+\t    {\n+\t      /* __MEM '<' type-name [ ',' number ] '>'\n+\t               '(' [ '(' type-name ')' ] unary-expression\n+\t\t           [ '+' number ] ')'  */\n+\t      location_t loc = c_parser_peek_token (parser)->location;\n+\t      c_parser_consume_token (parser);\n+\t      struct c_type_name *type_name = NULL;\n+\t      tree alignment = NULL_TREE;\n+\t      if (c_parser_require (parser, CPP_LESS, \"expected %<<%>\"))\n+\t        {\n+\t\t  type_name = c_parser_type_name (parser);\n+\t\t  /* Optional alignment.  */\n+\t\t  if (c_parser_next_token_is (parser, CPP_COMMA))\n+\t\t    {\n+\t\t      c_parser_consume_token (parser);\n+\t\t      alignment\n+\t\t\t= c_parser_gimple_postfix_expression (parser).value;\n+\t\t    }\n+\t\t  c_parser_skip_until_found (parser,\n+\t\t\t\t\t     CPP_GREATER, \"expected %<>%>\");\n+\t\t}\n+\t      struct c_expr ptr;\n+\t      ptr.value = error_mark_node;\n+\t      tree alias_off = NULL_TREE;\n+\t      if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+\t\t{\n+\t\t  tree alias_type = NULL_TREE;\n+\t\t  /* Optional alias-type cast.  */\n+\t\t  if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n+\t\t    {\n+\t\t      c_parser_consume_token (parser);\n+\t\t      struct c_type_name *alias_type_name\n+\t\t\t= c_parser_type_name (parser);\n+\t\t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n+\t\t\t\t\t\t \"expected %<)%>\");\n+\t\t      if (alias_type_name)\n+\t\t\t{\n+\t\t\t  tree tem;\n+\t\t\t  alias_type = groktypename (alias_type_name,\n+\t\t\t\t\t\t     &tem, NULL);\n+\t\t\t}\n+\t\t    }\n+\t\t  ptr = c_parser_gimple_unary_expression (parser);\n+\t\t  if (! alias_type)\n+\t\t    alias_type = TREE_TYPE (ptr.value);\n+\t\t  /* Optional constant offset.  */\n+\t\t  if (c_parser_next_token_is (parser, CPP_PLUS))\n+\t\t    {\n+\t\t      c_parser_consume_token (parser);\n+\t\t      alias_off\n+\t\t\t= c_parser_gimple_postfix_expression (parser).value;\n+\t\t      alias_off = fold_convert (alias_type, alias_off);\n+\t\t    }\n+\t\t  if (! alias_off)\n+\t\t    alias_off = build_int_cst (alias_type, 0);\n+\t\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n+\t\t\t\t\t     \"expected %<)%>\");\n+\t\t}\n+\t      if (! type_name || c_parser_error (parser))\n+\t\t{\n+\t\t  c_parser_set_error (parser, false);\n+\t\t  return expr;\n+\t\t}\n+\t      tree tem = NULL_TREE;\n+\t      tree type = groktypename (type_name, &tem, NULL);\n+\t      if (alignment)\n+\t\ttype = build_aligned_type (type, tree_to_uhwi (alignment));\n+\t      expr.value = build2_loc (loc, MEM_REF,\n+\t\t\t\t       type, ptr.value, alias_off);\n+\t      break;\n+\t    }\n+\t  /* SSA name.  */\n \t  unsigned version, ver_offset;\n \t  if (! lookup_name (id)\n \t      && c_parser_parse_ssa_name_id (id, &version, &ver_offset))"}, {"sha": "561bd3fe5398003d722105cb0172131395a34805", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "patch": "@@ -1,3 +1,7 @@\n+2017-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-21.c: New testcase.\n+\n 2017-01-12  Michael Collison  <michael.collison@arm.com>\n \n \t* gcc.dg/zero_bits_compound-2.c: Fix test for aarch64."}, {"sha": "55ea0b825c5c45830a0c2b3735ee9e79f096f829", "filename": "gcc/testsuite/gcc.dg/gimplefe-21.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-21.c?ref=6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+float __GIMPLE ()\n+foo (int * p)\n+{\n+  float f;\n+  float D1800;\n+  unsigned int D1799;\n+\n+  D1799 = __MEM <unsigned int, 8> ((char *)p + 1);\n+  __MEM <unsigned int, 16> ((char *)&f + 0xfffffffffffffffe) = D1799;\n+  __MEM <int> (p) = 1;\n+  __MEM <int, 2> (p) = 1;\n+  __MEM <int> (p + 2) = 1;\n+  __MEM <int> ((char *)p) = 1;\n+  D1800 = f;\n+  return D1800;\n+}"}, {"sha": "87b404475eeeb7f3873a81dbac952cbaea034319", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=6bb4ea5cdf9664f2cec861a2a120192b4ac04d1f", "patch": "@@ -1459,7 +1459,38 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n \n     case MEM_REF:\n       {\n-\tif (integer_zerop (TREE_OPERAND (node, 1))\n+\tif (flags & TDF_GIMPLE)\n+\t  {\n+\t    pp_string (pp, \"__MEM <\");\n+\t    dump_generic_node (pp, TREE_TYPE (node),\n+\t\t\t       spc, flags | TDF_SLIM, false);\n+\t    if (TYPE_ALIGN (TREE_TYPE (node))\n+\t\t!= TYPE_ALIGN (TYPE_MAIN_VARIANT (TREE_TYPE (node))))\n+\t      {\n+\t\tpp_string (pp, \", \");\n+\t\tpp_decimal_int (pp, TYPE_ALIGN (TREE_TYPE (node)));\n+\t      }\n+\t    pp_greater (pp);\n+\t    pp_string (pp, \" (\");\n+\t    if (TREE_TYPE (TREE_OPERAND (node, 0))\n+\t\t!= TREE_TYPE (TREE_OPERAND (node, 1)))\n+\t      {\n+\t\tpp_left_paren (pp);\n+\t\tdump_generic_node (pp, TREE_TYPE (TREE_OPERAND (node, 1)),\n+\t\t\t\t   spc, flags | TDF_SLIM, false);\n+\t\tpp_right_paren (pp);\n+\t      }\n+\t    dump_generic_node (pp, TREE_OPERAND (node, 0),\n+\t\t\t       spc, flags | TDF_SLIM, false);\n+\t    if (! integer_zerop (TREE_OPERAND (node, 1)))\n+\t      {\n+\t\tpp_string (pp, \" + \");\n+\t\tdump_generic_node (pp, TREE_OPERAND (node, 1),\n+\t\t\t\t   spc, flags | TDF_SLIM, false);\n+\t      }\n+\t    pp_right_paren (pp);\n+\t  }\n+\telse if (integer_zerop (TREE_OPERAND (node, 1))\n \t    /* Dump the types of INTEGER_CSTs explicitly, for we can't\n \t       infer them and MEM_ATTR caching will share MEM_REFs\n \t       with differently-typed op0s.  */\n@@ -1633,7 +1664,8 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n       break;\n \n     case INTEGER_CST:\n-      if (TREE_CODE (TREE_TYPE (node)) == POINTER_TYPE)\n+      if (TREE_CODE (TREE_TYPE (node)) == POINTER_TYPE\n+\t  && ! (flags & TDF_GIMPLE))\n \t{\n \t  /* In the case of a pointer, one may want to divide by the\n \t     size of the pointed-to type.  Unfortunately, this not\n@@ -1661,7 +1693,11 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n       else if (tree_fits_shwi_p (node))\n \tpp_wide_integer (pp, tree_to_shwi (node));\n       else if (tree_fits_uhwi_p (node))\n-\tpp_unsigned_wide_integer (pp, tree_to_uhwi (node));\n+\t{\n+\t  pp_unsigned_wide_integer (pp, tree_to_uhwi (node));\n+\t  if (flags & TDF_GIMPLE)\n+\t    pp_character (pp, 'U');\n+\t}\n       else\n \t{\n \t  wide_int val = node;"}]}