{"sha": "59ee2304b00de03560aca9fdba6eb9ac08e0a7b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllZTIzMDRiMDBkZTAzNTYwYWNhOWZkYmE2ZWI5YWMwOGUwYTdiOA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-07-09T18:58:20Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-07-09T18:58:20Z"}, "message": "Outline fold_or_predicates from add_to_predicate_list.\n\n2010-07-09  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-if-conv.c (fold_or_predicates): New.\n\t(add_to_predicate_list): Call it.\n\nFrom-SVN: r162007", "tree": {"sha": "42613a44f64bae3d05bcf6a83581318c98e0392e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42613a44f64bae3d05bcf6a83581318c98e0392e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6685e80691af987e9fbe94f3e3c92ed29fedeb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6685e80691af987e9fbe94f3e3c92ed29fedeb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6685e80691af987e9fbe94f3e3c92ed29fedeb9e"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "9c04a7da5b5d94ff339648099f59b1de41547b04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59ee2304b00de03560aca9fdba6eb9ac08e0a7b8", "patch": "@@ -1,3 +1,8 @@\n+2010-07-09  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-if-conv.c (fold_or_predicates): New.\n+\t(add_to_predicate_list): Call it.\n+\n 2010-07-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44890"}, {"sha": "0f1caaa3dbcce87297f7dd356924dad5519c7af1", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ee2304b00de03560aca9fdba6eb9ac08e0a7b8/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=59ee2304b00de03560aca9fdba6eb9ac08e0a7b8", "patch": "@@ -300,6 +300,26 @@ parse_predicate (tree cond, tree *op0, tree *op1)\n   return ERROR_MARK;\n }\n \n+/* Returns the fold of predicate C1 OR C2 at location LOC.  */\n+\n+static tree\n+fold_or_predicates (location_t loc, tree c1, tree c2)\n+{\n+  tree op1a, op1b, op2a, op2b;\n+  enum tree_code code1 = parse_predicate (c1, &op1a, &op1b);\n+  enum tree_code code2 = parse_predicate (c2, &op2a, &op2b);\n+\n+  if (code1 != ERROR_MARK && code2 != ERROR_MARK)\n+    {\n+      tree t = maybe_fold_or_comparisons (code1, op1a, op1b,\n+\t\t\t\t\t  code2, op2a, op2b);\n+      if (t)\n+\treturn t;\n+    }\n+\n+  return fold_build2_loc (loc, TRUTH_OR_EXPR, boolean_type_node, c1, c2);\n+}\n+\n /* Add condition NC to the predicate list of basic block BB.  */\n \n static inline void\n@@ -314,25 +334,8 @@ add_to_predicate_list (basic_block bb, tree nc)\n     bc = nc;\n   else\n     {\n-      enum tree_code code1, code2;\n-      tree op1a, op1b, op2a, op2b;\n-\n       bc = bb_predicate (bb);\n-      code1 = parse_predicate (bc, &op1a, &op1b);\n-      code2 = parse_predicate (nc, &op2a, &op2b);\n-\n-      if (code1 != ERROR_MARK && code2 != ERROR_MARK)\n-\t{\n-\t  tree t = maybe_fold_or_comparisons (code1, op1a, op1b,\n-\t\t\t\t\t      code2, op2a, op2b);\n-\t  if (!t)\n-\t    t = fold_build2_loc (EXPR_LOCATION (bc), TRUTH_OR_EXPR,\n-\t\t\t\t boolean_type_node, bc, nc);\n-\t  bc = t;\n-\t}\n-      else\n-\tbc = fold_build2_loc (EXPR_LOCATION (bc), TRUTH_OR_EXPR,\n-\t\t\t      boolean_type_node, bc, nc);\n+      bc = fold_or_predicates (EXPR_LOCATION (bc), nc, bc);\n     }\n \n   if (!is_gimple_condexpr (bc))"}]}