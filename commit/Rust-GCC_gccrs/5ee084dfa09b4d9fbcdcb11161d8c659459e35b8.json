{"sha": "5ee084dfa09b4d9fbcdcb11161d8c659459e35b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlMDg0ZGZhMDliNGQ5ZmJjZGNiMTExNjFkOGM2NTk0NTllMzViOA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2003-07-05T07:33:06Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2003-07-05T07:33:06Z"}, "message": "m68k.c: Remove code protected by CRDS.\n\n\t* config/m68k/m68k.c: Remove code protected by CRDS.\n\t* config/m68k/m68k.md: Likewise.\n\nFrom-SVN: r68962", "tree": {"sha": "75dca001e364cbf12092111722cd1532821689a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75dca001e364cbf12092111722cd1532821689a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33de95735b87d1b172ef50d6bbe89bc382aa478c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33de95735b87d1b172ef50d6bbe89bc382aa478c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33de95735b87d1b172ef50d6bbe89bc382aa478c"}], "stats": {"total": 226, "additions": 23, "deletions": 203}, "files": [{"sha": "00c5a07e643562eccbea01151966dd9dce913154", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ee084dfa09b4d9fbcdcb11161d8c659459e35b8", "patch": "@@ -1,3 +1,8 @@\n+2003-07-05  Andreas Schwab  <schwab@suse.de>\n+\n+\t* config/m68k/m68k.c: Remove code protected by CRDS.\n+\t* config/m68k/m68k.md: Likewise.\n+\n 2003-07-05  Neil Booth  <neil@daikokuya.co.uk>\n \n \tPR driver/11417"}, {"sha": "5bab7fceaec07c1fac9e7080bbda1720fb008cd6", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 8, "deletions": 175, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=5ee084dfa09b4d9fbcdcb11161d8c659459e35b8", "patch": "@@ -256,69 +256,6 @@ m68k_save_reg (regno)\n /* Note that the order of the bit mask for fmovem is the opposite\n    of the order for movem!  */\n \n-#ifdef CRDS\n-\n-static void\n-m68k_output_function_prologue (stream, size)\n-     FILE *stream;\n-     HOST_WIDE_INT size;\n-{\n-  register int regno;\n-  register int mask = 0;\n-  HOST_WIDE_INT fsize = ((size) + 3) & -4;\n-\n-  /* unos stack probe */\n-  if (fsize > 30000)\n-    {\n-      fprintf (stream, \"\\tmovel sp,a0\\n\");\n-      fprintf (stream, \"\\taddl $-\" HOST_WIDE_INT_PRINT_DEC \",a0\\n\",\n-\t       2048 + fsize);\n-      fprintf (stream, \"\\ttstb (a0)\\n\");\n-    }\n-  else\n-    fprintf (stream, \"\\ttstb -\" HOST_WIDE_INT_PRINT_DEC \"(sp)\\n\",\n-\t     2048 + fsize);\n-\n-  if (frame_pointer_needed)\n-    {\n-      if (TARGET_68020 || fsize < 0x8000)\n-\tfprintf (stream, \"\\tlink a6,$\" HOST_WIDE_INT_PRINT_DEC \"\\n\", -fsize);\n-      else\n-\tfprintf (stream,\n-\t\t \"\\tlink a6,$0\\n\\tsubl $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n-\t\t fsize);\n-    }\n-  else if (fsize)\n-    {\n-      /* Adding negative number is faster on the 68040.  */\n-      if (fsize + 4 < 0x8000)\n-\tfprintf (stream, \"\\tadd.w $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n-\t\t - (fsize + 4));\n-      else\n-\tfprintf (stream, \"\\tadd.l $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n-\t\t - (fsize + 4));\n-    }\n-\n-  for (regno = 16; regno < 24; regno++)\n-    if (m68k_save_reg (regno))\n-      mask |= 1 << (regno - 16);\n-\n-  if ((mask & 0xff) != 0)\n-    fprintf (stream, \"\\tfmovem $0x%x,-(sp)\\n\", mask & 0xff);\n-\n-  mask = 0;\n-  for (regno = 0; regno < 16; regno++)\n-    if (m68k_save_reg (regno))\n-      mask |= 1 << (15 - regno);\n-\n-  if (exact_log2 (mask) >= 0)\n-    fprintf (stream, \"\\tmovel %s,-(sp)\\n\", reg_names[15 - exact_log2 (mask)]);\n-  else if (mask)\n-    fprintf (stream, \"\\tmovem $0x%x,-(sp)\\n\", mask);\n-}\n-\n-#else  /* !CRDS */\n-\n static void\n m68k_output_function_prologue (stream, size)\n      FILE *stream;\n@@ -643,7 +580,6 @@ m68k_output_function_prologue (stream, size)\n #endif\n     }\n }\n-#endif   /* !CRDS  */\n \f\n /* Return true if this function's epilogue can be output as RTL.  */\n \n@@ -670,108 +606,6 @@ use_return_insn ()\n    This is mandatory because of alloca; we also take advantage of it to\n    omit stack adjustments before returning.  */\n \n-#ifdef CRDS\n-\n-static void\n-m68k_output_function_epilogue (stream, size)\n-     FILE *stream;\n-     HOST_WIDE_INT size;\n-{\n-  register int regno;\n-  register int mask, fmask;\n-  register int nregs;\n-  HOST_WIDE_INT offset, foffset;\n-  HOST_WIDE_INT fsize = ((size) + 3) & -4;\n-  int big = 0;\n-\n-  nregs = 0;  fmask = 0;\n-  for (regno = 16; regno < 24; regno++)\n-    if (m68k_save_reg (regno))\n-      {\n-\tnregs++;\n-\tfmask |= 1 << (23 - regno);\n-      }\n-\n-  foffset = nregs * 12;\n-  nregs = 0;  mask = 0;\n-\n-  for (regno = 0; regno < 16; regno++)\n-    if (m68k_save_reg (regno))\n-      {\n-\tnregs++;\n-\tmask |= 1 << regno;\n-      }\n-\n-  offset = foffset + nregs * 4;\n-  if (offset + fsize >= 0x8000\n-      && frame_pointer_needed\n-      && (mask || fmask))\n-    {\n-      fprintf (stream, \"\\tmovel $\" HOST_WIDE_INT_PRINT_DEC \",a0\\n\", -fsize);\n-      fsize = 0, big = 1;\n-    }\n-\n-  if (exact_log2 (mask) >= 0)\n-    {\n-      if (big)\n-\tfprintf (stream, \"\\tmovel -\" HOST_WIDE_INT_PRINT_DEC \"(a6,a0.l),%s\\n\",\n-\t\t offset + fsize, reg_names[exact_log2 (mask)]);\n-      else if (! frame_pointer_needed)\n-\tfprintf (stream, \"\\tmovel (sp)+,%s\\n\",\n-\t\t reg_names[exact_log2 (mask)]);\n-      else\n-\tfprintf (stream, \"\\tmovel -\" HOST_WIDE_INT_PRINT_DEC \"(a6),%s\\n\",\n-\t\t offset + fsize, reg_names[exact_log2 (mask)]);\n-    }\n-  else if (mask)\n-    {\n-      if (big)\n-\tfprintf (stream,\n-\t\t \"\\tmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6,a0.l),$0x%x\\n\",\n-\t\t offset + fsize, mask);\n-      else if (! frame_pointer_needed)\n-\tfprintf (stream, \"\\tmovem (sp)+,$0x%x\\n\", mask);\n-      else\n-\tfprintf (stream, \"\\tmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6),$0x%x\\n\",\n-\t\t offset + fsize, mask);\n-    }\n-\n-  if (fmask)\n-    {\n-      if (big)\n-\tfprintf (stream,\n-\t\t \"\\tfmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6,a0.l),$0x%x\\n\",\n-\t\t foffset + fsize, fmask);\n-      else if (! frame_pointer_needed)\n-\tfprintf (stream, \"\\tfmovem (sp)+,$0x%x\\n\", fmask);\n-      else\n-\tfprintf (stream, \"\\tfmovem -\" HOST_WIDE_INT_PRINT_DEC \"(a6),$0x%x\\n\",\n-\t\t foffset + fsize, fmask);\n-    }\n-\n-  if (frame_pointer_needed)\n-    fprintf (stream, \"\\tunlk a6\\n\");\n-  else if (fsize)\n-    {\n-      if (fsize + 4 < 0x8000)\n-\tfprintf (stream, \"\\tadd.w $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n-\t\t fsize + 4);\n-      else\n-\tfprintf (stream, \"\\tadd.l $\" HOST_WIDE_INT_PRINT_DEC \",sp\\n\",\n-\t\t fsize + 4);\n-    }\n-\n-  if (current_function_calls_eh_return)\n-    fprintf (stream, \"\\tadd.l a0,sp\\n\");\n-\n-  if (current_function_pops_args)\n-    fprintf (stream, \"\\trtd $%d\\n\", current_function_pops_args);\n-  else\n-    fprintf (stream, \"\\trts\\n\");\n-}\n-\n-#else  /* !CRDS */\n-\n static void\n m68k_output_function_epilogue (stream, size)\n      FILE *stream;\n@@ -1045,7 +879,6 @@ m68k_output_function_epilogue (stream, size)\n   else\n     fprintf (stream, \"\\trts\\n\");\n }\n-#endif   /* !CRDS  */\n \f\n /* Similar to general_operand, but exclude stack_pointer_rtx.  */\n \n@@ -1772,27 +1605,27 @@ output_move_const_into_data_reg (operands)\n   switch (const_method (operands[1]))\n     {\n     case MOVQ :\n-#if defined (MOTOROLA) && !defined (CRDS)\n+#if defined (MOTOROLA)\n       return \"moveq%.l %1,%0\";\n #else\n       return \"moveq %1,%0\";\n #endif\n     case NOTB :\n       operands[1] = GEN_INT (i ^ 0xff);\n-#if defined (MOTOROLA) && !defined (CRDS)\n+#if defined (MOTOROLA)\n       return \"moveq%.l %1,%0\\n\\tnot%.b %0\";\n #else\n       return \"moveq %1,%0\\n\\tnot%.b %0\";\n #endif\t \n     case NOTW :\n       operands[1] = GEN_INT (i ^ 0xffff);\n-#if defined (MOTOROLA) && !defined (CRDS)\n+#if defined (MOTOROLA)\n       return \"moveq%.l %1,%0\\n\\tnot%.w %0\";\n #else\n       return \"moveq %1,%0\\n\\tnot%.w %0\";\n #endif\t \n     case NEGW :\n-#if defined (MOTOROLA) && !defined (CRDS)\n+#if defined (MOTOROLA)\n       return \"moveq%.l %#-128,%0\\n\\tneg%.w %0\";\n #else\n       return \"moveq %#-128,%0\\n\\tneg%.w %0\";\n@@ -1885,7 +1718,7 @@ output_move_himode (operands)\n \t       && INTVAL (operands[1]) < 128\n \t       && INTVAL (operands[1]) >= -128)\n \t{\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n \t  return \"moveq%.l %1,%0\";\n #else\n \t  return \"moveq %1,%0\";\n@@ -1989,7 +1822,7 @@ output_move_qimode (operands)\n       && INTVAL (operands[1]) < 128\n       && INTVAL (operands[1]) >= -128)\n     {\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n       return \"moveq%.l %1,%0\";\n #else\n       return \"moveq %1,%0\";\n@@ -2795,7 +2628,7 @@ floating_exact_log2 (x)\n    '@' for a reference to the top word on the stack:\n        sp@, (sp) or (%sp) depending on the style of syntax.\n    '#' for an immediate operand prefix (# in MIT and Motorola syntax\n-       but & in SGS syntax, $ in CRDS/UNOS syntax).\n+       but & in SGS syntax).\n    '!' for the cc register (used in an `and to cc' insn).\n    '$' for the letter `s' in an op code, but only on the 68040.\n    '&' for the letter `d' in an op code, but only on the 68040.\n@@ -2819,7 +2652,7 @@ print_operand (file, op, letter)\n {\n   if (letter == '.')\n     {\n-#if defined (MOTOROLA) && !defined (CRDS)\n+#if defined (MOTOROLA)\n       fprintf (file, \".\");\n #endif\n     }"}, {"sha": "7d29741b8eb7d516775bde381a64585f13fa8365", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee084dfa09b4d9fbcdcb11161d8c659459e35b8/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=5ee084dfa09b4d9fbcdcb11161d8c659459e35b8", "patch": "@@ -718,7 +718,7 @@\n     }\n   /* moveq is faster on the 68000.  */\n   if (DATA_REG_P (operands[0]) && (!TARGET_68020 && !TARGET_5200))\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n     return \\\"moveq%.l %#0,%0\\\";\n #else\n     return \\\"moveq %#0,%0\\\";\n@@ -932,7 +932,7 @@\n       /* moveq is faster on the 68000.  */\n       if (DATA_REG_P (operands[0]) && !(TARGET_68020 || TARGET_5200))\n \t{\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n \t  return \\\"moveq%.l %#0,%0\\\";\n #else\n \t  return \\\"moveq %#0,%0\\\";\n@@ -2662,7 +2662,7 @@\n   \"\"\n   \"*\n {\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n   return \\\"muls%.w %2,%0\\\";\n #else\n   return \\\"muls %2,%0\\\";\n@@ -2678,7 +2678,7 @@\n   \"\"\n   \"*\n {\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n   return \\\"muls%.w %2,%0\\\";\n #else\n   return \\\"muls %2,%0\\\";\n@@ -2693,7 +2693,7 @@\n   \"INTVAL (operands[2]) >= -0x8000 && INTVAL (operands[2]) <= 0x7fff\"\n   \"*\n {\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n   return \\\"muls%.w %2,%0\\\";\n #else\n   return \\\"muls %2,%0\\\";\n@@ -2731,7 +2731,7 @@\n   \"\"\n   \"*\n {\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n   return \\\"mulu%.w %2,%0\\\";\n #else\n   return \\\"mulu %2,%0\\\";\n@@ -2746,7 +2746,7 @@\n   \"INTVAL (operands[2]) >= 0 && INTVAL (operands[2]) <= 0xffff\"\n   \"*\n {\n-#if defined(MOTOROLA) && !defined(CRDS)\n+#if defined(MOTOROLA)\n   return \\\"mulu%.w %2,%0\\\";\n #else\n   return \\\"mulu %2,%0\\\";\n@@ -6531,30 +6531,12 @@\n   if (TARGET_5200)\n     {\n       if (ADDRESS_REG_P (operands[0]))\n-\t{\n-#ifdef CRDS\n-\t  return \\\"jmp 2(pc,%0.l)\\\";\n-#else\n-\t  return \\\"jmp 2(%%pc,%0.l)\\\";\n-#endif  /* end !CRDS */\n-\t}\n+\treturn \\\"jmp 2(%%pc,%0.l)\\\";\n       else\n-\t{\n-#ifdef CRDS\n-\t  return \\\"ext%.l %0\\;jmp 2(pc,%0.l)\\\";\n-#else\n-\t  return \\\"extl %0\\;jmp 2(%%pc,%0.l)\\\";\n-#endif  /* end !CRDS */\n-\t}\n+\treturn \\\"extl %0\\;jmp 2(%%pc,%0.l)\\\";\n     }\n   else\n-    {\n-#ifdef CRDS\n-      return \\\"jmp 2(pc,%0.w)\\\";\n-#else\n-      return \\\"jmp 2(%%pc,%0.w)\\\";\n-#endif  /* end !CRDS */\n-    }\n+    return \\\"jmp 2(%%pc,%0.w)\\\";\n #endif\n #else /* not SGS */\n   if (TARGET_5200)"}]}