{"sha": "6173f713a35d5450f0e2acfdaec695b42632aeed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE3M2Y3MTNhMzVkNTQ1MGYwZTJhY2ZkYWVjNjk1YjQyNjMyYWVlZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-13T16:33:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-13T18:01:50Z"}, "message": "c++: generic lambda in template fn with DMI [PR100054]\n\nget_nsdmi instantiates default member initializers on demand.  It tries to\npush into the context of the class before doing so, so access checking works\nproperly, but since my patch for 90479 not for local classes.  We should\nonly be doing this when any template parameters have arguments.  But in this\ncase, we get here while regenerating a generic lambda, so\nprocessing_template_decl is true, even though the class and its DMI are\nnon-dependent at this point.  And so we crashed.  So let's do more of the\npushing into the context of the class even for local classes.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/100054\n\tPR c++/90479\n\t* init.c (get_nsdmi): Do more context adjustment for local classes.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/100054\n\t* g++.dg/cpp1y/lambda-generic-local-class1.C: New test.", "tree": {"sha": "90af3adbe4a61b4d75c826c2f170ca4d028cb442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90af3adbe4a61b4d75c826c2f170ca4d028cb442"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6173f713a35d5450f0e2acfdaec695b42632aeed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6173f713a35d5450f0e2acfdaec695b42632aeed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6173f713a35d5450f0e2acfdaec695b42632aeed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6173f713a35d5450f0e2acfdaec695b42632aeed/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "474cb5a0a404c5de7c1cd21aac8b1b7e7ce95d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474cb5a0a404c5de7c1cd21aac8b1b7e7ce95d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474cb5a0a404c5de7c1cd21aac8b1b7e7ce95d9b"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "a85f4d507501bec257e1f4ea1dd2526e2922491d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6173f713a35d5450f0e2acfdaec695b42632aeed/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6173f713a35d5450f0e2acfdaec695b42632aeed/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6173f713a35d5450f0e2acfdaec695b42632aeed", "patch": "@@ -586,17 +586,21 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \n \t  bool pushed = false;\n \t  tree ctx = DECL_CONTEXT (member);\n-\t  if (!currently_open_class (ctx)\n-\t      && !LOCAL_CLASS_P (ctx))\n+\n+\t  processing_template_decl_sentinel ptds (/*reset*/false);\n+\t  if (!currently_open_class (ctx))\n \t    {\n-\t      push_to_top_level ();\n+\t      if (!LOCAL_CLASS_P (ctx))\n+\t\tpush_to_top_level ();\n+\t      else\n+\t\t/* push_to_top_level would lose the necessary function context,\n+\t\t   just reset processing_template_decl.  */\n+\t\tprocessing_template_decl = 0;\n \t      push_nested_class (ctx);\n \t      push_deferring_access_checks (dk_no_deferred);\n \t      pushed = true;\n \t    }\n \n-\t  gcc_checking_assert (!processing_template_decl);\n-\n \t  inject_this_parameter (ctx, TYPE_UNQUALIFIED);\n \n \t  start_lambda_scope (member);\n@@ -619,7 +623,8 @@ get_nsdmi (tree member, bool in_ctor, tsubst_flags_t complain)\n \t    {\n \t      pop_deferring_access_checks ();\n \t      pop_nested_class ();\n-\t      pop_from_top_level ();\n+\t      if (!LOCAL_CLASS_P (ctx))\n+\t\tpop_from_top_level ();\n \t    }\n \n \t  input_location = sloc;"}, {"sha": "7498327981b6eab2a961dc5759cbe56bf0d72cdd", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-local-class1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6173f713a35d5450f0e2acfdaec695b42632aeed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-local-class1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6173f713a35d5450f0e2acfdaec695b42632aeed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-local-class1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-local-class1.C?ref=6173f713a35d5450f0e2acfdaec695b42632aeed", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/100054\n+// { dg-do compile { target c++14 } }\n+\n+template <class T>\n+void f() {\n+  struct A { T m{}; };\n+  [](auto){ return A{}; };\n+}\n+\n+template void f<int>();"}]}