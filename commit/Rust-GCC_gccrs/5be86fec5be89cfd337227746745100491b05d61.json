{"sha": "5be86fec5be89cfd337227746745100491b05d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlODZmZWM1YmU4OWNmZDMzNzIyNzc0Njc0NTEwMDQ5MWIwNWQ2MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-04-05T20:06:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-04-05T20:06:37Z"}, "message": "* simplify-rtx.c: Fix formatting.\n\nFrom-SVN: r65275", "tree": {"sha": "b7c35583490a6c7d8089cfb374ecab717655feac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7c35583490a6c7d8089cfb374ecab717655feac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5be86fec5be89cfd337227746745100491b05d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be86fec5be89cfd337227746745100491b05d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be86fec5be89cfd337227746745100491b05d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be86fec5be89cfd337227746745100491b05d61/comments", "author": null, "committer": null, "parents": [{"sha": "984e25aca82757afc2b90bc6082c7890805e5fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984e25aca82757afc2b90bc6082c7890805e5fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984e25aca82757afc2b90bc6082c7890805e5fc8"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "254e71864c364b798d5961132f5059d4a415e231", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be86fec5be89cfd337227746745100491b05d61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be86fec5be89cfd337227746745100491b05d61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5be86fec5be89cfd337227746745100491b05d61", "patch": "@@ -1,3 +1,7 @@\n+2003-04-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* simplify-rtx.c: Fix formatting.\n+\n 2003-04-05  Andrew Pinski  <apinski@apple.com>\n \n \t* config/rs6000/rs6000.c (addrs_ok_for_quad_peep): Allow addr2"}, {"sha": "92ee19a0529b9e1eb3aaa8d4a30d74c5f27a2dc7", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be86fec5be89cfd337227746745100491b05d61/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be86fec5be89cfd337227746745100491b05d61/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5be86fec5be89cfd337227746745100491b05d61", "patch": "@@ -325,7 +325,7 @@ simplify_replace_rtx (x, old, new)\n \t\t\t\t     GET_MODE (SUBREG_REG (x)),\n \t\t\t\t     SUBREG_BYTE (x));\n \t  if (exp)\n-\t   x = exp;\n+\t    x = exp;\n \t}\n       return x;\n \n@@ -1337,19 +1337,19 @@ simplify_binary_operation (code, mode, op0, op1)\n \t  /* (x - (x & y)) -> (x & ~y) */\n \t  if (GET_CODE (op1) == AND)\n \t    {\n-\t     if (rtx_equal_p (op0, XEXP (op1, 0)))\n-\t       {\n-\t\t tem = simplify_gen_unary (NOT, mode, XEXP (op1, 1),\n-\t\t\t\t\t   GET_MODE (XEXP (op1, 1)));\n-\t\t return simplify_gen_binary (AND, mode, op0, tem);\n-\t       }\n-\t     if (rtx_equal_p (op0, XEXP (op1, 1)))\n-\t       {\n-\t\t tem = simplify_gen_unary (NOT, mode, XEXP (op1, 0),\n-\t\t\t\t\t   GET_MODE (XEXP (op1, 0)));\n-\t\t return simplify_gen_binary (AND, mode, op0, tem);\n-\t       }\n-\t   }\n+\t      if (rtx_equal_p (op0, XEXP (op1, 0)))\n+\t\t{\n+\t\t  tem = simplify_gen_unary (NOT, mode, XEXP (op1, 1),\n+\t\t\t\t\t    GET_MODE (XEXP (op1, 1)));\n+\t\t  return simplify_gen_binary (AND, mode, op0, tem);\n+\t\t}\n+\t      if (rtx_equal_p (op0, XEXP (op1, 1)))\n+\t\t{\n+\t\t  tem = simplify_gen_unary (NOT, mode, XEXP (op1, 0),\n+\t\t\t\t\t    GET_MODE (XEXP (op1, 0)));\n+\t\t  return simplify_gen_binary (AND, mode, op0, tem);\n+\t\t}\n+\t    }\n \t  break;\n \n \tcase MULT:\n@@ -1605,15 +1605,15 @@ simplify_binary_operation (code, mode, op0, op1)\n \t\t  rtvec v = rtvec_alloc (n_elts);\n \t\t  unsigned int i;\n \n-\t\t  if (XVECLEN (trueop1, 0) != (int)n_elts)\n+\t\t  if (XVECLEN (trueop1, 0) != (int) n_elts)\n \t\t    abort ();\n \t\t  for (i = 0; i < n_elts; i++)\n \t\t    {\n-\t\t       rtx x = XVECEXP (trueop1, 0, i);\n+\t\t      rtx x = XVECEXP (trueop1, 0, i);\n \n-\t\t       if (GET_CODE (x) != CONST_INT)\n-\t\t\t abort ();\n-\t\t       RTVEC_ELT (v, i) = CONST_VECTOR_ELT (trueop0, INTVAL (x));\n+\t\t      if (GET_CODE (x) != CONST_INT)\n+\t\t\tabort ();\n+\t\t      RTVEC_ELT (v, i) = CONST_VECTOR_ELT (trueop0, INTVAL (x));\n \t\t    }\n \n \t\t  return gen_rtx_CONST_VECTOR (mode, v);\n@@ -1684,7 +1684,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \n \t\treturn gen_rtx_CONST_VECTOR (mode, v);\n \t      }\n-\t    }\n+\t  }\n \t  return 0;\n \n \tdefault:\n@@ -2556,7 +2556,7 @@ simplify_ternary_operation (code, mode, op0_mode, op0, op1, op2)\n \t{\n           int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n \t  unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n-\t  int mask = (1<<n_elts) - 1;\n+\t  int mask = (1 << n_elts) - 1;\n \n \t  if (!(INTVAL (op2) & mask))\n \t    return op1;\n@@ -2681,8 +2681,8 @@ simplify_subreg (outermode, op, innermode, byte)\n \t  int subbyte = byte % elt_size;\n \n \t  op = simplify_subreg (new_mode, op, innermode, byte - subbyte);\n-\t    if (! op)\n-\t      return NULL_RTX;\n+\t  if (! op)\n+\t    return NULL_RTX;\n \t  return simplify_subreg (outermode, op, new_mode, subbyte);\n \t}\n       else if (GET_MODE_CLASS (outermode) == MODE_INT)\n@@ -3091,7 +3091,7 @@ simplify_rtx (x)\n \t\t\t\t    SUBREG_BYTE (x));\n       if (code == CONSTANT_P_RTX)\n \t{\n-\t  if (CONSTANT_P (XEXP (x,0)))\n+\t  if (CONSTANT_P (XEXP (x, 0)))\n \t    return const1_rtx;\n \t}\n       return NULL;"}]}