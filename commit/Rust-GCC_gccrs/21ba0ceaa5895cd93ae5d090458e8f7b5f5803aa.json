{"sha": "21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFiYTBjZWFhNTg5NWNkOTNhZTVkMDkwNDU4ZThmN2I1ZjU4MDNhYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-10-06T17:59:10Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-10-06T17:59:10Z"}, "message": "c-parser.c (c_parser_statement_after_labels): Use protected_set_expr_location.\n\n\t* c-parser.c (c_parser_statement_after_labels): Use\n\tprotected_set_expr_location.\n\t(c_parser_omp_clause_num_gangs): Likewise.\n\t(c_parser_omp_clause_num_threads): Likewise.\n\t(c_parser_omp_clause_num_workers): Likewise.\n\t(c_parser_omp_clause_vector_length): Likewise.\n\t(c_parser_omp_clause_num_teams): Likewise.\n\t(c_parser_omp_clause_thread_limit): Likewise.\n\t* c-typeck.c (build_c_cast): Likewise.\n\t(c_cast_expr): Likewise.\n\nFrom-SVN: r228541", "tree": {"sha": "988e176951df4e82f20b48a25fb0d26c7fdbe08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/988e176951df4e82f20b48a25fb0d26c7fdbe08c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46836b0e033c460d87146f5c635a4d026d2b77bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46836b0e033c460d87146f5c635a4d026d2b77bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46836b0e033c460d87146f5c635a4d026d2b77bb"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "f87a29a07d10e1599a525b9494fafb5d399427a4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa", "patch": "@@ -1,3 +1,16 @@\n+2015-10-06  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-parser.c (c_parser_statement_after_labels): Use\n+\tprotected_set_expr_location.\n+\t(c_parser_omp_clause_num_gangs): Likewise.\n+\t(c_parser_omp_clause_num_threads): Likewise.\n+\t(c_parser_omp_clause_num_workers): Likewise.\n+\t(c_parser_omp_clause_vector_length): Likewise.\n+\t(c_parser_omp_clause_num_teams): Likewise.\n+\t(c_parser_omp_clause_thread_limit): Likewise.\n+\t* c-typeck.c (build_c_cast): Likewise.\n+\t(c_cast_expr): Likewise.\n+\n 2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-typeck.c (c_tree_equal): Use real_equal instead of"}, {"sha": "2d24c212937ddb0e5fd618a6cf5bd0d449d45479", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa", "patch": "@@ -5141,9 +5141,8 @@ c_parser_statement_after_labels (c_parser *parser, vec<tree> *chain)\n      (recursively) all of the component statements should already have\n      line numbers assigned.  ??? Can we discard no-op statements\n      earlier?  */\n-  if (CAN_HAVE_LOCATION_P (stmt)\n-      && EXPR_LOCATION (stmt) == UNKNOWN_LOCATION)\n-    SET_EXPR_LOCATION (stmt, loc);\n+  if (EXPR_LOCATION (stmt) == UNKNOWN_LOCATION)\n+    protected_set_expr_location (stmt, loc);\n \n   parser->in_if_block = in_if_block;\n }\n@@ -10681,8 +10680,7 @@ c_parser_omp_clause_num_gangs (c_parser *parser, tree list)\n       /* Attempt to statically determine when the number isn't positive.  */\n       c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n \t\t       build_int_cst (TREE_TYPE (t), 0));\n-      if (CAN_HAVE_LOCATION_P (c))\n-\tSET_EXPR_LOCATION (c, expr_loc);\n+      protected_set_expr_location (c, expr_loc);\n       if (c == boolean_true_node)\n \t{\n \t  warning_at (expr_loc, 0,\n@@ -10726,8 +10724,7 @@ c_parser_omp_clause_num_threads (c_parser *parser, tree list)\n       /* Attempt to statically determine when the number isn't positive.  */\n       c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n \t\t       build_int_cst (TREE_TYPE (t), 0));\n-      if (CAN_HAVE_LOCATION_P (c))\n-\tSET_EXPR_LOCATION (c, expr_loc);\n+      protected_set_expr_location (c, expr_loc);\n       if (c == boolean_true_node)\n \t{\n \t  warning_at (expr_loc, 0,\n@@ -10771,8 +10768,7 @@ c_parser_omp_clause_num_workers (c_parser *parser, tree list)\n       /* Attempt to statically determine when the number isn't positive.  */\n       c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n \t\t       build_int_cst (TREE_TYPE (t), 0));\n-      if (CAN_HAVE_LOCATION_P (c))\n-\tSET_EXPR_LOCATION (c, expr_loc);\n+      protected_set_expr_location (c, expr_loc);\n       if (c == boolean_true_node)\n \t{\n \t  warning_at (expr_loc, 0,\n@@ -11116,8 +11112,7 @@ c_parser_omp_clause_vector_length (c_parser *parser, tree list)\n       /* Attempt to statically determine when the number isn't positive.  */\n       c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n \t\t       build_int_cst (TREE_TYPE (t), 0));\n-      if (CAN_HAVE_LOCATION_P (c))\n-\tSET_EXPR_LOCATION (c, expr_loc);\n+      protected_set_expr_location (c, expr_loc);\n       if (c == boolean_true_node)\n \t{\n \t  warning_at (expr_loc, 0,\n@@ -11193,8 +11188,7 @@ c_parser_omp_clause_num_teams (c_parser *parser, tree list)\n       /* Attempt to statically determine when the number isn't positive.  */\n       c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n \t\t\t   build_int_cst (TREE_TYPE (t), 0));\n-      if (CAN_HAVE_LOCATION_P (c))\n-\tSET_EXPR_LOCATION (c, expr_loc);\n+      protected_set_expr_location (c, expr_loc);\n       if (c == boolean_true_node)\n \t{\n \t  warning_at (expr_loc, 0, \"%<num_teams%> value must be positive\");\n@@ -11237,8 +11231,7 @@ c_parser_omp_clause_thread_limit (c_parser *parser, tree list)\n       /* Attempt to statically determine when the number isn't positive.  */\n       c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n \t\t\t   build_int_cst (TREE_TYPE (t), 0));\n-      if (CAN_HAVE_LOCATION_P (c))\n-\tSET_EXPR_LOCATION (c, expr_loc);\n+      protected_set_expr_location (c, expr_loc);\n       if (c == boolean_true_node)\n \t{\n \t  warning_at (expr_loc, 0, \"%<thread_limit%> value must be positive\");"}, {"sha": "df3245a49b55dff4906836ee128b07020b3cf2f2", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=21ba0ceaa5895cd93ae5d090458e8f7b5f5803aa", "patch": "@@ -5216,8 +5216,7 @@ build_c_cast (location_t loc, tree type, tree expr)\n \t       || TREE_CODE (expr) == COMPLEX_CST)))\n       value = build1 (NOP_EXPR, type, value);\n \n-  if (CAN_HAVE_LOCATION_P (value))\n-    SET_EXPR_LOCATION (value, loc);\n+  protected_set_expr_location (value, loc);\n   return value;\n }\n \n@@ -5255,8 +5254,8 @@ c_cast_expr (location_t loc, struct c_type_name *type_name, tree expr)\n       SET_EXPR_LOCATION (ret, loc);\n     }\n \n-  if (CAN_HAVE_LOCATION_P (ret) && !EXPR_HAS_LOCATION (ret))\n-    SET_EXPR_LOCATION (ret, loc);\n+  if (!EXPR_HAS_LOCATION (ret))\n+    protected_set_expr_location (ret, loc);\n \n   /* C++ does not permits types to be defined in a cast, but it\n      allows references to incomplete types.  */"}]}