{"sha": "6643d2367f8066dd6852568be1759adc7113a660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0M2QyMzY3ZjgwNjZkZDY4NTI1NjhiZTE3NTlhZGM3MTEzYTY2MA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-07-24T19:05:42Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-07-24T23:57:14Z"}, "message": "aix: Support GCC64 for AIX 7.1.\n\ngcc/ChangeLog:\n\n2020-07-24  David Edelsohn  <dje.gcc@gmail.com>\n\t    Clement Chigot  <clement.chigot@atos.net>\n\n\t* config.gcc (powerpc-ibm-aix7.1): Use t-aix64 and biarch64 for\n\tcpu_is_64bit.\n\t* config/rs6000/aix71.h (ASM_SPEC): Remove aix64 option.\n\t(ASM_SPEC32): New.\n\t(ASM_SPEC64): New.\n\t(ASM_CPU_SPEC): Remove vsx and altivec options.\n\t(CPP_SPEC_COMMON): Rename from CPP_SPEC.\n\t(CPP_SPEC32): New.\n\t(CPP_SPEC64): New.\n\t(CPLUSPLUS_CPP_SPEC): Rename to CPLUSPLUS_CPP_SPEC_COMMON..\n\t(TARGET_DEFAULT): Use 64 bit mask if BIARCH.\n\t(LIB_SPEC_COMMON): Rename from LIB_SPEC.\n\t(LIB_SPEC32): New.\n\t(LIB_SPEC64): New.\n\t(LINK_SPEC_COMMON): Rename from LINK_SPEC.\n\t(LINK_SPEC32): New.\n\t(LINK_SPEC64): New.\n\t(STARTFILE_SPEC): Add 64 bit version of crtcxa and crtdbase.\n\t(ASM_SPEC): Define 32 and 64 bit alternatives using DEFAULT_ARCH64_P.\n\t(CPP_SPEC): Same.\n\t(CPLUSPLUS_CPP_SPEC): Same.\n\t(LIB_SPEC): Same.\n\t(LINK_SPEC): Same.\n\t(SUBTARGET_EXTRA_SPECS): Add new 32/64 specs.\n\t* config/rs6000/aix72.h (TARGET_DEFAULT): Use 64 bit mask if BIARCH.\n\t* config/rs6000/defaultaix64.h: Delete.", "tree": {"sha": "96a9b0f85fd0199bd227c0283b56bd45ad784ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a9b0f85fd0199bd227c0283b56bd45ad784ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6643d2367f8066dd6852568be1759adc7113a660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6643d2367f8066dd6852568be1759adc7113a660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6643d2367f8066dd6852568be1759adc7113a660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6643d2367f8066dd6852568be1759adc7113a660/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e577910050d6e18977525f0302a175542ffd610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e577910050d6e18977525f0302a175542ffd610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e577910050d6e18977525f0302a175542ffd610"}], "stats": {"total": 131, "additions": 79, "deletions": 52}, "files": [{"sha": "23703681deb7bf08bafc03882d14b4fcf4890552", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6643d2367f8066dd6852568be1759adc7113a660/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6643d2367f8066dd6852568be1759adc7113a660/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6643d2367f8066dd6852568be1759adc7113a660", "patch": "@@ -3031,8 +3031,12 @@ rs6000-ibm-aix6.* | powerpc-ibm-aix6.*)\n \tdefault_use_cxa_atexit=yes\n \t;;\n rs6000-ibm-aix7.1.* | powerpc-ibm-aix7.1.*)\n-\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix71.h rs6000/xcoff.h rs6000/aix-stdint.h\"\n \ttmake_file=\"rs6000/t-aix52 t-slibgcc\"\n+\tif test x$cpu_is_64bit = xyes; then\n+\t    tm_file=\"${tm_file} rs6000/biarch64.h\"\n+\t    tmake_file=\"rs6000/t-aix64 t-slibgcc\"\n+\tfi\n+\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix71.h rs6000/xcoff.h rs6000/aix-stdint.h\"\n \textra_options=\"${extra_options} rs6000/aix64.opt\"\n \tuse_collect2=yes\n \tthread_file='aix'\n@@ -3042,7 +3046,7 @@ rs6000-ibm-aix7.1.* | powerpc-ibm-aix7.1.*)\n rs6000-ibm-aix[789].* | powerpc-ibm-aix[789].*)\n \ttmake_file=\"rs6000/t-aix52 t-slibgcc\"\n \tif test x$cpu_is_64bit = xyes; then\n-\t    tm_file=\"${tm_file} rs6000/biarch64.h rs6000/defaultaix64.h\"\n+\t    tm_file=\"${tm_file} rs6000/biarch64.h\"\n \t    tmake_file=\"rs6000/t-aix64 t-slibgcc\"\n \tfi\n \ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix72.h rs6000/xcoff.h rs6000/aix-stdint.h\""}, {"sha": "8b12a2d12c856e9349065e5254ce699b20eceb6b", "filename": "gcc/config/rs6000/aix71.h", "status": "modified", "additions": 70, "deletions": 21, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6643d2367f8066dd6852568be1759adc7113a660/gcc%2Fconfig%2Frs6000%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6643d2367f8066dd6852568be1759adc7113a660/gcc%2Fconfig%2Frs6000%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix71.h?ref=6643d2367f8066dd6852568be1759adc7113a660", "patch": "@@ -64,8 +64,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-#undef ASM_SPEC\n-#define ASM_SPEC \"-u %{maix64:-a64} %(asm_cpu)\"\n+#define ASM_SPEC32 \"-a32\"\n+#define ASM_SPEC64 \"-a64\"\n+#define ASM_SPEC_COMMON \"-u %(asm_cpu)\"\n \n /* Common ASM definitions used by ASM_SPEC amongst the various targets for\n    handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n@@ -91,10 +92,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   mcpu=620: -m620; \\\n   mcpu=630: -m620; \\\n   mcpu=970|mcpu=G5: -m970; \\\n-  !mcpu*: %{mvsx: -mpwr6; \\\n-\t    maltivec: -m970; \\\n-\t    maix64|mpowerpc64: -mppc64; \\\n-\t    : %(asm_default)}} \\\n+  !mcpu*: %(asm_default)} \\\n -many\"\n \n #undef\tASM_DEFAULT_SPEC\n@@ -114,19 +112,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+#define CPP_SPEC32 \"\"\n+#define CPP_SPEC64 \"-D__64BIT__\"\n+#define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\\n   %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n-  %{maix64: -D__64BIT__}\t\t\t\\\n   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n   %{pthread: -D_THREAD_SAFE}\"\n \n /* The GNU C++ standard library requires that these macros be \n    defined.  Synchronize with libstdc++ os_defines.h.  */\n-#undef CPLUSPLUS_CPP_SPEC                       \n-#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+#define CPLUSPLUS_CPP_SPEC_COMMON\t\t\\\n   \"-D_ALL_SOURCE -D__COMPATMATH__\t\t\\\n-   %{maix64: -D__64BIT__}\t\t\t\\\n    %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n@@ -135,7 +131,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef RS6000_CPU\n \n #undef  TARGET_DEFAULT\n+#ifdef RS6000_BI_ARCH\n+#define TARGET_DEFAULT (MASK_PPC_GPOPT | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POWERPC64 | MASK_64BIT)\n+#else\n #define TARGET_DEFAULT (MASK_PPC_GPOPT | MASK_PPC_GFXOPT | MASK_MFCRF)\n+#endif\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER7\n@@ -154,29 +154,78 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the target makefile fragment or if none of the options listed in\n    `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n \n-#undef\tMULTILIB_DEFAULTS\n+#undef MULTILIB_DEFAULTS\n \n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+#define DEFAULT_ARCH64_P (TARGET_DEFAULT & MASK_64BIT)\n+\n+#define LIB_SPEC32 \"%{!shared:%{g*:-lg}}\"\n+#define LIB_SPEC64 \"\"\n+#define LIB_SPEC_COMMON \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n    %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n-   %{!maix64:%{!shared:%{g*:-lg}}}\\\n    %{fprofile-arcs|fprofile-generate*|coverage:-lpthreads}\\\n    %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n    %{mlong-double-128:-lc128}\\\n    %{pthread:-lpthreads} -lc\"\n \n-#undef LINK_SPEC\n-#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+#define LINK_SPEC32 \"%{!shared:%{g*: %(link_libg) }} -b32\"\n+#define LINK_SPEC64 \"-b64\"\n+#define LINK_SPEC_COMMON \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n    %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n-   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n-   %{mpe:-binitfini:poe_remote_main}\"\n+   %{mpe:-binitfini:poe_remote_main} \"\n \n #undef STARTFILE_SPEC\n+#if DEFAULT_ARCH64_P\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{!maix32:%{pg:gcrt0_64%O%s;:%{p:mcrt0_64%O%s;:crt0_64%O%s}};:\\\n+     %{pthread:%{pg:gcrt0_r%O%s;:%{p:mcrt0_r%O%s;:crt0_r%O%s}};:\\\n+       %{pg:gcrt0%O%s;:%{p:mcrt0%O%s;:crt0%O%s}}}}}\\\n+   %{!maix32:%{shared:crtcxa_64_s%O%s;:crtcxa_64%O%s} crtdbase_64%O%s;:\\\n+     %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s}\"\n+#else\n #define STARTFILE_SPEC \"%{!shared:\\\n    %{maix64:%{pg:gcrt0_64%O%s;:%{p:mcrt0_64%O%s;:crt0_64%O%s}};:\\\n      %{pthread:%{pg:gcrt0_r%O%s;:%{p:mcrt0_r%O%s;:crt0_r%O%s}};:\\\n        %{pg:gcrt0%O%s;:%{p:mcrt0%O%s;:crt0%O%s}}}}}\\\n-   %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s\"\n+   %{maix64:%{shared:crtcxa_64_s%O%s;:crtcxa_64%O%s} crtdbase_64%O%s;:\\\n+     %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s}\"\n+#endif\n+\n+\n+#undef ASM_SPEC\n+#undef CPP_SPEC\n+#undef CPLUSPLUS_CPP_SPEC\n+#undef LIB_SPEC\n+#undef LINK_SPEC\n+\n+#if DEFAULT_ARCH64_P\n+#define ASM_SPEC \"%{maix32:%(asm_spec32);:%(asm_spec64)} %(asm_spec_common)\"\n+#define CPP_SPEC \"%{maix32:%(cpp_spec32);:%(cpp_spec64)} %(cpp_spec_common)\"\n+#define CPLUSPLUS_CPP_SPEC \"%{maix32:%(cpp_spec32);:%(cpp_spec64)} %(cplusplus_cpp_spec_common)\"\n+#define LIB_SPEC \"%{maix32:%(lib_spec32);:%(lib_spec64)} %(lib_spec_common)\"\n+#define LINK_SPEC \"%{maix32:%(link_spec32);:%(link_spec64)} %(link_spec_common)\"\n+#else\n+#define ASM_SPEC \"%{maix64:%(asm_spec64);:%(asm_spec32)} %(asm_spec_common)\"\n+#define CPP_SPEC \"%{maix64:%(cpp_spec64);:%(cpp_spec32)} %(cpp_spec_common)\"\n+#define CPLUSPLUS_CPP_SPEC \"%{maix64:%(cpp_spec64);:%(cpp_spec32)} %(cplusplus_cpp_spec_common)\"\n+#define LIB_SPEC \"%{maix64:%(lib_spec64);:%(lib_spec32)} %(lib_spec_common)\"\n+#define LINK_SPEC \"%{maix64:%(link_spec64);:%(link_spec32)} %(link_spec_common)\"\n+#endif\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\\\n+  { \"cpp_spec_common\",\t\tCPP_SPEC_COMMON },\t\t\\\n+  { \"cplusplus_cpp_spec_common\", CPLUSPLUS_CPP_SPEC_COMMON },\t\\\n+  { \"cpp_spec32\",\t\tCPP_SPEC32 },\t\t\t\\\n+  { \"cpp_spec64\",\t\tCPP_SPEC64 },\t\t\t\\\n+  { \"lib_spec_common\",\t\tLIB_SPEC_COMMON },\t\t\\\n+  { \"lib_spec32\",\t\tLIB_SPEC32 },\t\t\t\\\n+  { \"lib_spec64\",\t\tLIB_SPEC64 },\t\t\t\\\n+  { \"link_spec_common\",\t\tLINK_SPEC_COMMON },\t\t\\\n+  { \"link_spec32\",\t\tLINK_SPEC32 },\t\t\t\\\n+  { \"link_spec64\",\t\tLINK_SPEC64 },\n \n /* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n "}, {"sha": "121420b4360926cc141a453f41b230ca25a76860", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6643d2367f8066dd6852568be1759adc7113a660/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6643d2367f8066dd6852568be1759adc7113a660/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=6643d2367f8066dd6852568be1759adc7113a660", "patch": "@@ -131,8 +131,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #include \"rs6000-cpus.def\"\n #undef RS6000_CPU\n \n-#ifndef RS6000_BI_ARCH\n #undef  TARGET_DEFAULT\n+#ifdef RS6000_BI_ARCH\n+#define TARGET_DEFAULT (ISA_2_6_MASKS_EMBEDDED | MASK_POWERPC64 | MASK_64BIT)\n+#else\n #define TARGET_DEFAULT ISA_2_6_MASKS_EMBEDDED\n #endif\n "}, {"sha": "ecac576a12132d68023c593cc15a90c6e290ad2c", "filename": "gcc/config/rs6000/defaultaix64.h", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e577910050d6e18977525f0302a175542ffd610/gcc%2Fconfig%2Frs6000%2Fdefaultaix64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e577910050d6e18977525f0302a175542ffd610/gcc%2Fconfig%2Frs6000%2Fdefaultaix64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdefaultaix64.h?ref=4e577910050d6e18977525f0302a175542ffd610", "patch": "@@ -1,28 +0,0 @@\n-/* Definitions of target machine for GNU compiler,\n-   for 64 bit powerpc linux defaulting to -m64.\n-   Copyright (C) 2003-2020 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#define RS6000_CPU(NAME, CPU, FLAGS)\n-#include \"rs6000-cpus.def\"\n-#undef RS6000_CPU\n-\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (ISA_2_6_MASKS_EMBEDDED | MASK_POWERPC64 | MASK_64BIT)\n-#undef ASM_DEFAULT_SPEC\n-#define ASM_DEFAULT_SPEC \"-mpwr7\""}]}