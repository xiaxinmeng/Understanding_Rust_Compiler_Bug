{"sha": "7cda9e0878da44dcaf025d3d146534dfaf0b9986", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkYTllMDg3OGRhNDRkY2FmMDI1ZDNkMTQ2NTM0ZGZhZjBiOTk4Ng==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2020-08-04T11:01:21Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2020-08-04T11:01:53Z"}, "message": "aarch64: Use Q-reg loads/stores in movmem expansion\n\nThis is my attempt at reviving the old patch\nhttps://gcc.gnu.org/pipermail/gcc-patches/2019-January/514632.html\n\nI have followed on Kyrill's comment upstream on the link above and I\nam using the recommended option iii that he mentioned.\n\"1) Adjust the copy_limit to 256 bits after checking\n    AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS in the tuning.\n 2) Adjust aarch64_copy_one_block_and_progress_pointers to handle\n    256-bit moves. by iii:\n   iii) Emit explicit V4SI (or any other 128-bit vector mode) pairs\n\tldp/stps. This wouldn't need any adjustments to MD patterns,\n\tbut would make aarch64_copy_one_block_and_progress_pointers\n\tmore complex as it would now have two paths, where one\n\thandles two adjacent memory addresses in one calls.\"\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.c (aarch64_gen_store_pair): Add case\n\tfor E_V4SImode.\n\t(aarch64_gen_load_pair): Likewise.\n\t(aarch64_copy_one_block_and_progress_pointers): Handle 256 bit copy.\n\t(aarch64_expand_cpymem): Expand copy_limit to 256bits where\n\tappropriate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/cpymem-q-reg_1.c: New test.\n\t* gcc.target/aarch64/large_struct_copy_2.c: Update for ldp q regs.", "tree": {"sha": "55d3496d7ffbd9f70eef4063b9fafbdd6c980423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d3496d7ffbd9f70eef4063b9fafbdd6c980423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cda9e0878da44dcaf025d3d146534dfaf0b9986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cda9e0878da44dcaf025d3d146534dfaf0b9986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cda9e0878da44dcaf025d3d146534dfaf0b9986", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cda9e0878da44dcaf025d3d146534dfaf0b9986/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b86e14c14020f3e119ab8f462e2a91bd7d46e5"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "7b7faba7083cf86b16ec75abc42c183c20de4f08", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda9e0878da44dcaf025d3d146534dfaf0b9986/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda9e0878da44dcaf025d3d146534dfaf0b9986/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7cda9e0878da44dcaf025d3d146534dfaf0b9986", "patch": "@@ -6957,6 +6957,9 @@ aarch64_gen_store_pair (machine_mode mode, rtx mem1, rtx reg1, rtx mem2,\n     case E_TFmode:\n       return gen_store_pair_dw_tftf (mem1, reg1, mem2, reg2);\n \n+    case E_V4SImode:\n+      return gen_vec_store_pairv4siv4si (mem1, reg1, mem2, reg2);\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -6980,6 +6983,9 @@ aarch64_gen_load_pair (machine_mode mode, rtx reg1, rtx mem1, rtx reg2,\n     case E_TFmode:\n       return gen_load_pair_dw_tftf (reg1, mem1, reg2, mem2);\n \n+    case E_V4SImode:\n+      return gen_load_pairv4siv4si (reg1, mem1, reg2, mem2);\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -21144,6 +21150,27 @@ static void\n aarch64_copy_one_block_and_progress_pointers (rtx *src, rtx *dst,\n \t\t\t\t\t      machine_mode mode)\n {\n+  /* Handle 256-bit memcpy separately.  We do this by making 2 adjacent memory\n+     address copies using V4SImode so that we can use Q registers.  */\n+  if (known_eq (GET_MODE_BITSIZE (mode), 256))\n+    {\n+      mode = V4SImode;\n+      rtx reg1 = gen_reg_rtx (mode);\n+      rtx reg2 = gen_reg_rtx (mode);\n+      /* \"Cast\" the pointers to the correct mode.  */\n+      *src = adjust_address (*src, mode, 0);\n+      *dst = adjust_address (*dst, mode, 0);\n+      /* Emit the memcpy.  */\n+      emit_insn (aarch64_gen_load_pair (mode, reg1, *src, reg2,\n+\t\t\t\t\taarch64_progress_pointer (*src)));\n+      emit_insn (aarch64_gen_store_pair (mode, *dst, reg1,\n+\t\t\t\t\t aarch64_progress_pointer (*dst), reg2));\n+      /* Move the pointers forward.  */\n+      *src = aarch64_move_pointer (*src, 32);\n+      *dst = aarch64_move_pointer (*dst, 32);\n+      return;\n+    }\n+\n   rtx reg = gen_reg_rtx (mode);\n \n   /* \"Cast\" the pointers to the correct mode.  */\n@@ -21197,9 +21224,12 @@ aarch64_expand_cpymem (rtx *operands)\n   /* Convert n to bits to make the rest of the code simpler.  */\n   n = n * BITS_PER_UNIT;\n \n-  /* Maximum amount to copy in one go.  The AArch64 back-end has integer modes\n-     larger than TImode, but we should not use them for loads/stores here.  */\n-  const int copy_limit = GET_MODE_BITSIZE (TImode);\n+  /* Maximum amount to copy in one go.  We allow 256-bit chunks based on the\n+     AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS tuning parameter and TARGET_SIMD.  */\n+  const int copy_limit = ((aarch64_tune_params.extra_tuning_flags\n+\t\t\t   & AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS)\n+\t\t\t  || !TARGET_SIMD)\n+\t\t\t ? GET_MODE_BITSIZE (TImode) : 256;\n \n   while (n > 0)\n     {"}, {"sha": "df5f67e425bd6a52362bc912afbcd1ca3725d449", "filename": "gcc/testsuite/gcc.target/aarch64/cpymem-q-reg_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda9e0878da44dcaf025d3d146534dfaf0b9986/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpymem-q-reg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda9e0878da44dcaf025d3d146534dfaf0b9986/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpymem-q-reg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpymem-q-reg_1.c?ref=7cda9e0878da44dcaf025d3d146534dfaf0b9986", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define N 8\n+extern int src[N], dst[N];\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, N * sizeof (int));\n+}\n+\n+/* { dg-final { scan-assembler {ldp\\tq[0-9]*} } } */\n+/* { dg-final { scan-assembler-not {ldp\\tx[0-9]*} } } */\n+/* { dg-final { scan-assembler {stp\\tq[0-9]*} } } */\n+/* { dg-final { scan-assembler-not {stp\\tx[0-9]*} } } */"}, {"sha": "8ee0a9fae92f805573b763ec679f2a8045afb479", "filename": "gcc/testsuite/gcc.target/aarch64/large_struct_copy_2.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda9e0878da44dcaf025d3d146534dfaf0b9986/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flarge_struct_copy_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda9e0878da44dcaf025d3d146534dfaf0b9986/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flarge_struct_copy_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flarge_struct_copy_2.c?ref=7cda9e0878da44dcaf025d3d146534dfaf0b9986", "patch": "@@ -16,11 +16,10 @@ struct S2 {\n   struct S0 f3;\n };\n \n-void fn1 () {\n-  struct S2 b = {0, 1, 7, 4073709551611, 4, 8, 7};\n+void fn1 (struct S2 b) {\n   a = b.f3;\n }\n \n-/* { dg-final { scan-assembler-times {ldp\\s+x[0-9]+} 2 } } */\n-/* { dg-final { scan-assembler-times {stp\\s+x[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {ldp\\s+q[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {stp\\s+q[0-9]+} 1 } } */\n /* { dg-final { scan-assembler-not {ld[1-3]} } } */"}]}