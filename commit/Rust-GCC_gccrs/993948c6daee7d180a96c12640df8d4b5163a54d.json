{"sha": "993948c6daee7d180a96c12640df8d4b5163a54d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzOTQ4YzZkYWVlN2QxODBhOTZjMTI2NDBkZjhkNGI1MTYzYTU0ZA==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-12-22T00:00:50Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-12-22T00:00:50Z"}, "message": "re PR testsuite/36903 (Generic vectorizarion test failures)\n\n2009-12-21  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n\n\tPR testsuite/36903\n\t* gcc.dg/tree-ssa/gen-vect-11.c : Disable for avr target. It will not vectorize.\n\t* gcc.dg/tree-ssa/gen-vect-11a.c: Ditto.\n\t* gcc.dg/tree-ssa/gen-vect-2.c: Ditto.\n\t* gcc.dg/tree-ssa/gen-vect-25.c: Ditto.\n\t* gcc.dg/tree-ssa/gen-vect-26.c: Ditto.\n\t* gcc.dg/tree-ssa/gen-vect-28.c: Ditto.\n\t* gcc.dg/tree-ssa/gen-vect-32.c: Ditto.\n\t* gcc.dg/tree-ssa/pr23455.c: Test for 4 eliminations on avr target.\n\t* gcc.dg/tree-ssa/ssa-fre-26.c: XFAIL test for avr.\n\t* gcc.dg/tree-ssa/vrp47.c: Skip test for avr target due to low branch cost.\n\nFrom-SVN: r155382", "tree": {"sha": "78fbcc9a61d73356d9483664107f7129764e6d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78fbcc9a61d73356d9483664107f7129764e6d65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/993948c6daee7d180a96c12640df8d4b5163a54d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993948c6daee7d180a96c12640df8d4b5163a54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993948c6daee7d180a96c12640df8d4b5163a54d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993948c6daee7d180a96c12640df8d4b5163a54d/comments", "author": null, "committer": null, "parents": [{"sha": "8d079e67d8ebfbb939a085959076d7b9913e7b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d079e67d8ebfbb939a085959076d7b9913e7b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d079e67d8ebfbb939a085959076d7b9913e7b57"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "31e9533ba4dcb601c82763bf787d53f49606d36b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -1,3 +1,19 @@\n+2009-12-21  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n+\n+\tPR testsuite/36903\n+\t* gcc.dg/tree-ssa/gen-vect-11.c : Disable for avr target. It will\n+\tnot vectorize.\n+\t* gcc.dg/tree-ssa/gen-vect-11a.c: Ditto.\n+\t* gcc.dg/tree-ssa/gen-vect-2.c: Ditto.\n+\t* gcc.dg/tree-ssa/gen-vect-25.c: Ditto.\n+\t* gcc.dg/tree-ssa/gen-vect-26.c: Ditto.\n+\t* gcc.dg/tree-ssa/gen-vect-28.c: Ditto.\n+\t* gcc.dg/tree-ssa/gen-vect-32.c: Ditto.\n+\t* gcc.dg/tree-ssa/pr23455.c: Test for 4 eliminations on avr target.\n+\t* gcc.dg/tree-ssa/ssa-fre-26.c: XFAIL test for avr.\n+\t* gcc.dg/tree-ssa/vrp47.c: Skip test for avr target due to low\n+\tbranch cost.\n+\n 2009-12-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/PR42422"}, {"sha": "91a3f56a647cdecf9b016d2dfddf8ef3f16ba7be", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -30,5 +30,5 @@ int main ()\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7944116c955aef28c6945bf28be812e549143378", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-11a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11a.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -38,5 +38,5 @@ int main ()\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d74ebaf27721f1b17562ee3b017949757614d121", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -36,6 +36,6 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b2796c1b7792eb790b4d6951208ba4fbdae87d26", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-25.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -54,6 +54,6 @@ int main (void)\n   return main_1 (n + 2, (int *) &n);\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "954e24c92fbd9c1543acf93ddd288849a365f84b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-26.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -29,7 +29,7 @@ int main ()\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { ! avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "abe07cae79ba4fa0ea92bdca40b378ed5ed67d40", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-28.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -37,7 +37,7 @@ int main (void)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { target { ! avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0a862ab8917622f022f0c55e55cd968365e95519", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -29,6 +29,6 @@ int main ()\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "766dc2b3345470b9b4ce53655d6b68101e113aef", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23455.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -19,5 +19,6 @@ bi_windup(unsigned int *outbuf, unsigned int bi_buf)\n /* We should eliminate one load of outcnt, which will in turn let us eliminate\n    one multiply of outcnt which will in turn let us eliminate\n    one add involving outcnt and outbuf.  */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"pre\" {target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"pre\" {target {   avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "2b8e8e063d4702684573246372368faae215a85c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-26.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-26.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -14,5 +14,6 @@ int foo (union U *p)\n   return u.i;\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced u.i with 0 in\" \"fre\" } } */\n+/* avr has 16 bit int and 32 bit float */\n+/* { dg-final { scan-tree-dump \"Replaced u.i with 0 in\" \"fre\" {xfail avr-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "73382941488a4f66cd4a4dfd7c70c2e60d5d9065", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp47.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993948c6daee7d180a96c12640df8d4b5163a54d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c?ref=993948c6daee7d180a96c12640df8d4b5163a54d", "patch": "@@ -1,9 +1,9 @@\n /* Skip on MIPS, where LOGICAL_OP_NON_SHORT_CIRCUIT inhibits the setcc\n    optimizations that expose the VRP opportunity.  */\n-/* Skip on S/390.  Lower values in BRANCH_COST lead to two conditional\n+/* Skip on S/390 and avr.  Lower values in BRANCH_COST lead to two conditional\n    jumps when evaluating an && condition.  VRP is not able to optimize\n    this.  */\n-/* { dg-do compile { target { { ! mips*-*-* } && { ! s390*-*-* } } } } */\n+/* { dg-do compile { target { ! \"mips*-*-* s390*-*-*  avr-*-*\" } } } */\n /* { dg-options \"-O2 -fdump-tree-vrp -fdump-tree-dom\" } */\n \n int h(int x, int y)"}]}