{"sha": "a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0ZDBlYjRiMGNiNjMzNWRkZmY4YjAxYWFkNDQ5YTBkMzFmZTZmYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T15:18:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T15:18:34Z"}, "message": "[multiple changes]\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, make.adb, a-cohata.ads, sem_prag.adb, makeutl.adb,\n\tlib-xref-alfa.adb: Minor reformatting.\n\n2011-08-04  Marc Sango  <sango@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Generic_Package_Declaration,\n\tAnalyze_Generic_Subprogram_Declaration, Analyze_Package_Instantiation,\n\tAnalyze_Subprogram_Instantiation): Check absence of generic in SPARK\n\tmode.\n\n2011-08-04  Tristan Gingold  <gingold@adacore.com>\n\n\t* bindgen.adb (Gen_Adainit_C): Remove.\n\t(Gen_Adafinal_C): Ditto.\n\t(Gen_Elab_Externals_C): Ditto.\n\t(Gen_Elab_Calls_C): Ditto.\n\t(Gen_Elab_Order_C): Ditto.\n\t(Gen_Elab_Defs_C): Ditto.\n\t(Gen_Finalize_Library_C): Ditto.\n\t(Gen_Finalize_Library_Defs_C): Ditto.\n\t(Gen_Main_C): Ditto.\n\t(Gen_Output_File_C): Ditto.\n\t(Gen_Restrictions_C): Ditto.\n\t(Gen_Versions_C): Ditto.\n\t(Write_Info_Ada_C): Ditto.\n\t(Gen_Object_Files_Options): Call WBI instead of Write_Info_Ada_C\n\t(Gen_Output_File): Do not force Ada_Bind_File anymore.\n\tAlways call Gen_Output_File_Ada.\n\t* gnatlink.adb (Begin_Info): Now a constant.\n\t(End_Info): Ditto.\n\t(Ada_Bind_File): Remove\n\t(Process_Args): Do not handle -A/-C.  Remove not Ada_Bind_File cases.\n\t* switch-b.adb (Scan_Binder_Switches): Do not handle -C.\n\t* gnatbind.adb (Gnatbind): Remove not Ada_Bind_File cases.\n\t* opt.ads (Ada_Bind_File): Remove.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* projects.texi: Document target-specific directory in default project\n\tpath for gnatmake.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnatls.adb, prj-env.adb: Add $prefix/share/gpr to default project\n\tpath in all cases .\n\nFrom-SVN: r177395", "tree": {"sha": "2d1450e765b433d99c8b54dc23b7f75309a9077c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d1450e765b433d99c8b54dc23b7f75309a9077c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/comments", "author": null, "committer": null, "parents": [{"sha": "84f405a1c1900c72c8ea496ae68e101539227de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f405a1c1900c72c8ea496ae68e101539227de4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f405a1c1900c72c8ea496ae68e101539227de4"}], "stats": {"total": 1637, "additions": 163, "deletions": 1474}, "files": [{"sha": "dcc0de2ec2fbfd2f4f0e848a135286648b6547f4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -1,3 +1,51 @@\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, make.adb, a-cohata.ads, sem_prag.adb, makeutl.adb,\n+\tlib-xref-alfa.adb: Minor reformatting.\n+\n+2011-08-04  Marc Sango  <sango@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Generic_Package_Declaration,\n+\tAnalyze_Generic_Subprogram_Declaration, Analyze_Package_Instantiation,\n+\tAnalyze_Subprogram_Instantiation): Check absence of generic in SPARK\n+\tmode.\n+\n+2011-08-04  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* bindgen.adb (Gen_Adainit_C): Remove.\n+\t(Gen_Adafinal_C): Ditto.\n+\t(Gen_Elab_Externals_C): Ditto.\n+\t(Gen_Elab_Calls_C): Ditto.\n+\t(Gen_Elab_Order_C): Ditto.\n+\t(Gen_Elab_Defs_C): Ditto.\n+\t(Gen_Finalize_Library_C): Ditto.\n+\t(Gen_Finalize_Library_Defs_C): Ditto.\n+\t(Gen_Main_C): Ditto.\n+\t(Gen_Output_File_C): Ditto.\n+\t(Gen_Restrictions_C): Ditto.\n+\t(Gen_Versions_C): Ditto.\n+\t(Write_Info_Ada_C): Ditto.\n+\t(Gen_Object_Files_Options): Call WBI instead of Write_Info_Ada_C\n+\t(Gen_Output_File): Do not force Ada_Bind_File anymore.\n+\tAlways call Gen_Output_File_Ada.\n+\t* gnatlink.adb (Begin_Info): Now a constant.\n+\t(End_Info): Ditto.\n+\t(Ada_Bind_File): Remove\n+\t(Process_Args): Do not handle -A/-C.  Remove not Ada_Bind_File cases.\n+\t* switch-b.adb (Scan_Binder_Switches): Do not handle -C.\n+\t* gnatbind.adb (Gnatbind): Remove not Ada_Bind_File cases.\n+\t* opt.ads (Ada_Bind_File): Remove.\n+\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* projects.texi: Document target-specific directory in default project\n+\tpath for gnatmake.\n+\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnatls.adb, prj-env.adb: Add $prefix/share/gpr to default project\n+\tpath in all cases .\n+\n 2011-08-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb, sem_ch5.adb, sem_util.adb, sem_ch4.adb, sem_ch8.adb,"}, {"sha": "1a77970a0c775b72ca65988e9a2d6f4f77651040", "filename": "gcc/ada/a-cohata.ads", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fa-cohata.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fa-cohata.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohata.ads?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -31,7 +31,8 @@\n --  containers.\n \n package Ada.Containers.Hash_Tables is\n-   pragma Pure;  --  so this can be imported by Remote_Types packages\n+   pragma Pure;\n+   --  Declare Pure so this can be imported by Remote_Types packages\n \n    generic\n       type Node_Type (<>) is limited private;\n@@ -42,13 +43,14 @@ package Ada.Containers.Hash_Tables is\n       type Buckets_Type is array (Hash_Type range <>) of Node_Access;\n \n       type Buckets_Access is access all Buckets_Type;\n-      for Buckets_Access'Storage_Size use 0;  --  so this package can be Pure\n+      for Buckets_Access'Storage_Size use 0;\n+      --  Storage_Size of zero so this package can be Pure\n \n       type Hash_Table_Type is tagged record\n          Buckets : Buckets_Access;\n          Length  : Count_Type := 0;\n-         Busy    : Natural := 0;\n-         Lock    : Natural := 0;\n+         Busy    : Natural    := 0;\n+         Lock    : Natural    := 0;\n       end record;\n    end Generic_Hash_Table_Types;\n \n@@ -62,11 +64,11 @@ package Ada.Containers.Hash_Tables is\n         (Capacity : Count_Type;\n          Modulus  : Hash_Type) is\n       tagged record\n-         Length  : Count_Type := 0;\n-         Busy    : Natural := 0;\n-         Lock    : Natural := 0;\n-         Free    : Count_Type'Base := -1;\n-         Nodes   : Nodes_Type (1 .. Capacity) := (others => <>);\n+         Length  : Count_Type                  := 0;\n+         Busy    : Natural                     := 0;\n+         Lock    : Natural                     := 0;\n+         Free    : Count_Type'Base             := -1;\n+         Nodes   : Nodes_Type (1 .. Capacity)  := (others => <>);\n          Buckets : Buckets_Type (1 .. Modulus) := (others => 0);\n       end record;\n    end Generic_Bounded_Hash_Table_Types;"}, {"sha": "279fc5567dd88b4627e5c5adf754c09e7b2a28b0", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 31, "deletions": 1339, "changes": 1370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -240,54 +240,27 @@ package body Bindgen is\n    procedure Gen_Adainit_Ada;\n    --  Generates the Adainit procedure (Ada code case)\n \n-   procedure Gen_Adainit_C;\n-   --  Generates the Adainit procedure (C code case)\n-\n    procedure Gen_Adafinal_Ada;\n    --  Generate the Adafinal procedure (Ada code case)\n \n-   procedure Gen_Adafinal_C;\n-   --  Generate the Adafinal procedure (C code case)\n-\n    procedure Gen_Elab_Externals_Ada;\n    --  Generate sequence of external declarations for elaboration (Ada)\n \n-   procedure Gen_Elab_Externals_C;\n-   --  Generate sequence of external declarations for elaboration (C)\n-\n    procedure Gen_Elab_Calls_Ada;\n    --  Generate sequence of elaboration calls (Ada code case)\n \n-   procedure Gen_Elab_Calls_C;\n-   --  Generate sequence of elaboration calls (C code case)\n-\n    procedure Gen_Elab_Order_Ada;\n    --  Generate comments showing elaboration order chosen (Ada code case)\n \n-   procedure Gen_Elab_Order_C;\n-   --  Generate comments showing elaboration order chosen (C code case)\n-\n-   procedure Gen_Elab_Defs_C;\n-   --  Generate sequence of definitions for elaboration routines (C code case)\n-\n    procedure Gen_Finalize_Library_Ada;\n    --  Generate a sequence of finalization calls to elaborated packages (Ada)\n \n-   procedure Gen_Finalize_Library_C;\n-   --  Generate a sequence of finalization calls to elaborated packages (C)\n-\n-   procedure Gen_Finalize_Library_Defs_C;\n-   --  Generate a sequence of defininitions for package finalizers (C case)\n-\n    procedure Gen_CodePeer_Wrapper;\n    --  For CodePeer, generate wrapper which calls user-defined main subprogram\n \n    procedure Gen_Main_Ada;\n    --  Generate procedure main (Ada code case)\n \n-   procedure Gen_Main_C;\n-   --  Generate main() procedure (C code case)\n-\n    procedure Gen_Object_Files_Options;\n    --  Output comments containing a list of the full names of the object\n    --  files to be linked and the list of linker options supplied by\n@@ -296,21 +269,12 @@ package body Bindgen is\n    procedure Gen_Output_File_Ada (Filename : String);\n    --  Generate output file (Ada code case)\n \n-   procedure Gen_Output_File_C (Filename : String);\n-   --  Generate output file (C code case)\n-\n    procedure Gen_Restrictions_Ada;\n    --  Generate initialization of restrictions variable (Ada code case)\n \n-   procedure Gen_Restrictions_C;\n-   --  Generate initialization of restrictions variable (C code case)\n-\n    procedure Gen_Versions_Ada;\n    --  Output series of definitions for unit versions (Ada code case)\n \n-   procedure Gen_Versions_C;\n-   --  Output series of definitions for unit versions (C code case)\n-\n    function Get_Ada_Main_Name return String;\n    --  This function is used in the Ada main output case to compute a usable\n    --  name for the generated main program. The normal main program name is\n@@ -400,10 +364,6 @@ package body Bindgen is\n    --  up all output unit numbers nicely as required by the value, and\n    --  by the total number of units.\n \n-   procedure Write_Info_Ada_C (Ada : String; C : String; Common : String);\n-   --  For C code case, write C & Common, for Ada case write Ada & Common\n-   --  to current binder output file using Write_Binder_Info.\n-\n    procedure Write_Statement_Buffer;\n    --  Write out contents of statement buffer up to Last, and reset Last to 0\n \n@@ -478,32 +438,6 @@ package body Bindgen is\n       WBI (\"\");\n    end Gen_Adafinal_Ada;\n \n-   --------------------\n-   -- Gen_Adafinal_C --\n-   --------------------\n-\n-   procedure Gen_Adafinal_C is\n-   begin\n-      WBI (\"void \" & Ada_Final_Name.all & \" (void) {\");\n-\n-      WBI (\"   if (!is_elaborated)\");\n-      WBI (\"      return;\");\n-      WBI (\"   is_elaborated = 0;\");\n-\n-      if not Bind_Main_Program then\n-         if Lib_Final_Built then\n-            WBI (\"   finalize_library ();\");\n-         end if;\n-\n-      --  Main program case\n-\n-      else\n-         WBI (\"   system__standard_library__adafinal ();\");\n-      end if;\n-      WBI (\"}\");\n-      WBI (\"\");\n-   end Gen_Adafinal_C;\n-\n    ---------------------\n    -- Gen_Adainit_Ada --\n    ---------------------\n@@ -989,289 +923,6 @@ package body Bindgen is\n       WBI (\"\");\n    end Gen_Adainit_Ada;\n \n-   -------------------\n-   -- Gen_Adainit_C --\n-   --------------------\n-\n-   procedure Gen_Adainit_C is\n-      Main_Priority : Int renames ALIs.Table (ALIs.First).Main_Priority;\n-      Main_CPU      : Int renames ALIs.Table (ALIs.First).Main_CPU;\n-\n-   begin\n-      WBI (\"void \" & Ada_Init_Name.all & \" (void)\");\n-      WBI (\"{\");\n-\n-      WBI (\"   if (is_elaborated)\");\n-      WBI (\"      return;\");\n-      WBI (\"   is_elaborated = 1;\");\n-\n-      --  Standard library suppressed\n-\n-      if Suppress_Standard_Library_On_Target then\n-\n-         --  Case of High_Integrity_Mode mode. Set __gl_main_priority and\n-         --  __gl_main_cpu if needed for the Ravenscar profile.\n-\n-         if Main_Priority /= No_Main_Priority then\n-            WBI (\"   extern int __gl_main_priority;\");\n-            Set_String (\"   __gl_main_priority = \");\n-            Set_Int    (Main_Priority);\n-            Set_Char   (';');\n-            Write_Statement_Buffer;\n-         end if;\n-\n-         if Main_CPU /= No_Main_CPU then\n-            WBI (\"   extern int __gl_main_cpu;\");\n-            Set_String (\"   __gl_main_cpu = \");\n-            Set_Int    (Main_CPU);\n-            Set_Char   (';');\n-            Write_Statement_Buffer;\n-         end if;\n-\n-      --  Normal case (standard library not suppressed)\n-\n-      else\n-         --  Generate definition for interrupt states string\n-\n-         Set_String (\"   static const char *local_interrupt_states = \"\"\");\n-\n-         for J in 0 .. IS_Pragma_Settings.Last loop\n-            Set_Char (IS_Pragma_Settings.Table (J));\n-         end loop;\n-\n-         Set_String (\"\"\";\");\n-         Write_Statement_Buffer;\n-\n-         --  Generate definition for priority specific dispatching string\n-\n-         Set_String\n-           (\"   static const char *local_priority_specific_dispatching = \"\"\");\n-\n-         for J in 0 .. PSD_Pragma_Settings.Last loop\n-            Set_Char (PSD_Pragma_Settings.Table (J));\n-         end loop;\n-\n-         Set_String (\"\"\";\");\n-         Write_Statement_Buffer;\n-\n-         --  Generate declaration for secondary stack default if needed\n-\n-         if Sec_Stack_Used and then Default_Sec_Stack_Size /= -1 then\n-            WBI (\"   extern int system__secondary_stack__\" &\n-                 \"default_secondary_stack_size;\");\n-         end if;\n-\n-         WBI (\"\");\n-\n-         --  Code for normal case (standard library not suppressed)\n-\n-         --  We call the routine from inside adainit() because this works for\n-         --  both programs with and without binder generated \"main\" functions.\n-\n-         WBI (\"   extern int __gl_main_priority;\");\n-         Set_String (\"   __gl_main_priority = \");\n-         Set_Int (Main_Priority);\n-         Set_Char (';');\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern int __gl_time_slice_val;\");\n-         Set_String (\"   __gl_time_slice_val = \");\n-\n-         if Task_Dispatching_Policy = 'F'\n-           and then ALIs.Table (ALIs.First).Time_Slice_Value = -1\n-         then\n-            Set_Int (0);\n-         else\n-            Set_Int (ALIs.Table (ALIs.First).Time_Slice_Value);\n-         end if;\n-\n-         Set_Char   (';');\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern char __gl_wc_encoding;\");\n-         Set_String (\"   __gl_wc_encoding = '\");\n-         Set_Char (Get_WC_Encoding);\n-\n-         Set_String (\"';\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern char __gl_locking_policy;\");\n-         Set_String (\"   __gl_locking_policy = '\");\n-         Set_Char (Locking_Policy_Specified);\n-         Set_String (\"';\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern char __gl_queuing_policy;\");\n-         Set_String (\"   __gl_queuing_policy = '\");\n-         Set_Char (Queuing_Policy_Specified);\n-         Set_String (\"';\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern char __gl_task_dispatching_policy;\");\n-         Set_String (\"   __gl_task_dispatching_policy = '\");\n-         Set_Char (Task_Dispatching_Policy_Specified);\n-         Set_String (\"';\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern int __gl_main_cpu;\");\n-         Set_String (\"   __gl_main_cpu = \");\n-         Set_Int (Main_CPU);\n-         Set_Char (';');\n-         Write_Statement_Buffer;\n-\n-         Gen_Restrictions_C;\n-\n-         WBI (\"   extern const void *__gl_interrupt_states;\");\n-         WBI (\"   __gl_interrupt_states = local_interrupt_states;\");\n-\n-         WBI (\"   extern int __gl_num_interrupt_states;\");\n-         Set_String (\"   __gl_num_interrupt_states = \");\n-         Set_Int (IS_Pragma_Settings.Last + 1);\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern const void *__gl_priority_specific_dispatching;\");\n-         WBI (\"   __gl_priority_specific_dispatching =\" &\n-              \" local_priority_specific_dispatching;\");\n-\n-         WBI (\"   extern int __gl_num_specific_dispatching;\");\n-         Set_String (\"   __gl_num_specific_dispatching = \");\n-         Set_Int (PSD_Pragma_Settings.Last + 1);\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern int __gl_unreserve_all_interrupts;\");\n-         Set_String (\"   __gl_unreserve_all_interrupts = \");\n-         Set_Int    (Boolean'Pos (Unreserve_All_Interrupts_Specified));\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n-         if Exception_Tracebacks then\n-            WBI (\"   extern int __gl_exception_tracebacks;\");\n-            WBI (\"   __gl_exception_tracebacks = 1;\");\n-         end if;\n-\n-         WBI (\"   extern int __gl_zero_cost_exceptions;\");\n-         Set_String (\"   __gl_zero_cost_exceptions = \");\n-         Set_Int    (Boolean'Pos (Zero_Cost_Exceptions_Specified));\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern int __gl_detect_blocking;\");\n-         Set_String (\"   __gl_detect_blocking = \");\n-\n-         if Detect_Blocking then\n-            Set_Int (1);\n-         else\n-            Set_Int (0);\n-         end if;\n-\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern int __gl_default_stack_size;\");\n-         Set_String (\"   __gl_default_stack_size = \");\n-         Set_Int    (Default_Stack_Size);\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n-         WBI (\"   extern int __gl_leap_seconds_support;\");\n-         Set_String (\"   __gl_leap_seconds_support = \");\n-\n-         if Leap_Seconds_Support then\n-            Set_Int (1);\n-         else\n-            Set_Int (0);\n-         end if;\n-\n-         Set_String (\";\");\n-         Write_Statement_Buffer;\n-\n-         --  Import entry point for elaboration time signal handler\n-         --  installation, and indication of if it's been called previously.\n-\n-         WBI (\"   extern int __gnat_handler_installed;\");\n-         WBI (\"\");\n-\n-         --  Install elaboration time signal handler\n-\n-         WBI (\"   if (__gnat_handler_installed == 0)\");\n-         WBI (\"      __gnat_install_handler ();\");\n-\n-         --  Import entry point for environment feature enable/disable\n-         --  routine, and indication that it's been called previously.\n-\n-         if OpenVMS_On_Target then\n-            WBI (\"   extern int __gnat_features_set;\");\n-            WBI (\"\");\n-\n-            WBI (\"   if (__gnat_features_set == 0)\");\n-            WBI (\"      __gnat_set_features ();\");\n-         end if;\n-      end if;\n-\n-      --  Initialize stack limit for the environment task if the stack\n-      --  check method is stack limit and stack check is enabled.\n-\n-      if Stack_Check_Limits_On_Target\n-        and then (Stack_Check_Default_On_Target or Stack_Check_Switch_Set)\n-      then\n-         WBI (\"\");\n-         WBI (\"   __gnat_initialize_stack_limit ();\");\n-      end if;\n-\n-      --  Generate call to set Initialize_Scalar values if needed\n-\n-      if Initialize_Scalars_Used then\n-         WBI (\"\");\n-         Set_String (\"      system__scalar_values__initialize('\");\n-         Set_Char (Initialize_Scalars_Mode1);\n-         Set_String (\"', '\");\n-         Set_Char (Initialize_Scalars_Mode2);\n-         Set_String (\"');\");\n-         Write_Statement_Buffer;\n-      end if;\n-\n-      --  Generate assignment of default secondary stack size if set\n-\n-      if Sec_Stack_Used and then Default_Sec_Stack_Size /= -1 then\n-         WBI (\"\");\n-         Set_String (\"   system__secondary_stack__\");\n-         Set_String (\"default_secondary_stack_size = \");\n-         Set_Int (Opt.Default_Sec_Stack_Size);\n-         Set_Char (';');\n-         Write_Statement_Buffer;\n-      end if;\n-\n-      --  In the main program case, attach finalize_library to the soft link.\n-      --  Do it only when not using a restricted run time, in which case tasks\n-      --  are non-terminating, so we do not want library-level finalization.\n-\n-      if Bind_Main_Program\n-        and then not Configurable_Run_Time_On_Target\n-        and then not Suppress_Standard_Library_On_Target\n-      then\n-         WBI (\"\");\n-         WBI (\"   extern void (*__gnat_finalize_library_objects)(void);\");\n-\n-         if Lib_Final_Built then\n-            Set_String (\"   __gnat_finalize_library_objects = \");\n-            Set_String (\"&finalize_library;\");\n-         else\n-            Set_String (\"   __gnat_finalize_library_objects = 0;\");\n-         end if;\n-\n-         Write_Statement_Buffer;\n-      end if;\n-\n-      --  Generate elaboration calls\n-\n-      WBI (\"\");\n-      Gen_Elab_Calls_C;\n-      WBI (\"}\");\n-      WBI (\"\");\n-   end Gen_Adainit_C;\n-\n    ----------------------------\n    -- Gen_Elab_Externals_Ada --\n    ----------------------------\n@@ -1361,45 +1012,6 @@ package body Bindgen is\n       WBI (\"\");\n    end Gen_Elab_Externals_Ada;\n \n-   --------------------------\n-   -- Gen_Elab_Externals_C --\n-   --------------------------\n-\n-   procedure Gen_Elab_Externals_C is\n-   begin\n-      for E in Elab_Order.First .. Elab_Order.Last loop\n-         declare\n-            Unum : constant Unit_Id := Elab_Order.Table (E);\n-            U    : Unit_Record renames Units.Table (Unum);\n-\n-         begin\n-            --  Check for Elab entity to be set for this unit\n-\n-            if U.Set_Elab_Entity\n-\n-              --  Don't generate reference for stand alone library\n-\n-              and then not U.SAL_Interface\n-\n-              --  Don't generate reference for predefined file in No_Run_Time\n-              --  mode, since we don't include the object files in this case\n-\n-              and then not\n-                (No_Run_Time_Mode\n-                  and then Is_Predefined_File_Name (U.Sfile))\n-            then\n-               Set_String (\"extern short int \");\n-               Get_Name_String (U.Uname);\n-               Set_Unit_Name;\n-               Set_String (\"_E;\");\n-               Write_Statement_Buffer;\n-            end if;\n-         end;\n-      end loop;\n-\n-      WBI (\"\");\n-   end Gen_Elab_Externals_C;\n-\n    ------------------------\n    -- Gen_Elab_Calls_Ada --\n    ------------------------\n@@ -1541,142 +1153,13 @@ package body Bindgen is\n       end loop;\n    end Gen_Elab_Calls_Ada;\n \n-   ----------------------\n-   -- Gen_Elab_Calls_C --\n-   ----------------------\n+   ------------------------\n+   -- Gen_Elab_Order_Ada --\n+   ------------------------\n \n-   procedure Gen_Elab_Calls_C is\n+   procedure Gen_Elab_Order_Ada is\n    begin\n-      for E in Elab_Order.First .. Elab_Order.Last loop\n-         declare\n-            Unum : constant Unit_Id := Elab_Order.Table (E);\n-            U    : Unit_Record renames Units.Table (Unum);\n-\n-            Unum_Spec : Unit_Id;\n-            --  This is the unit number of the spec that corresponds to\n-            --  this entry. It is the same as Unum except when the body\n-            --  and spec are different and we are currently processing\n-            --  the body, in which case it is the spec (Unum + 1).\n-\n-         begin\n-            if U.Utype = Is_Body then\n-               Unum_Spec := Unum + 1;\n-            else\n-               Unum_Spec := Unum;\n-            end if;\n-\n-            --  Nothing to do if predefined unit in no run time mode\n-\n-            if No_Run_Time_Mode and then Is_Predefined_File_Name (U.Sfile) then\n-               null;\n-\n-            --  Likewise if this is an interface to a stand alone library\n-\n-            elsif U.SAL_Interface then\n-               null;\n-\n-            --  Case of no elaboration code\n-\n-            elsif U.No_Elab then\n-\n-               --  The only case in which we have to do something is if this\n-               --  is a body, with a separate spec, where the separate spec\n-               --  has an elaboration entity defined. In that case, this is\n-               --  where we increment the elaboration entity.\n-\n-               if U.Utype = Is_Body\n-                 and then Units.Table (Unum_Spec).Set_Elab_Entity\n-               then\n-                  Get_Name_String (U.Uname);\n-\n-                  Set_String (\"   \");\n-                  Set_Unit_Name;\n-                  Set_String (\"_E++;\");\n-                  Write_Statement_Buffer;\n-               end if;\n-\n-            --  Here if elaboration code is present. If binding a library\n-            --  or if there is a non-Ada main subprogram then we generate:\n-\n-            --    if (uname_E == 0)\n-            --       uname__elab[s|b] ();\n-            --    uname_E++;\n-\n-            --  Otherwise, elaboration routines are called unconditionally:\n-\n-            --    uname__elab[s|b] ();\n-            --    uname_E++;\n-\n-            --  The uname_E increment is skipped if this is a separate spec,\n-            --  since it will be done when we process the body.\n-\n-            else\n-               Get_Name_String (U.Uname);\n-\n-               if Force_Checking_Of_Elaboration_Flags\n-                 or Interface_Library_Unit\n-                 or not Bind_Main_Program\n-               then\n-                  Set_String (\"   if (\");\n-                  Set_Unit_Name;\n-                  Set_String (\"_E == 0)\");\n-                  Write_Statement_Buffer;\n-                  Set_String (\"   \");\n-               end if;\n-\n-               Set_String (\"   \");\n-               Set_Unit_Name;\n-               Set_String (\"___elab\");\n-               Set_Char (Name_Buffer (Name_Len)); -- 's' or 'b' for spec/body\n-               Set_String (\" ();\");\n-               Write_Statement_Buffer;\n-\n-               if U.Utype /= Is_Spec then\n-                  Set_String (\"   \");\n-                  Set_Unit_Name;\n-                  Set_String (\"_E++;\");\n-                  Write_Statement_Buffer;\n-               end if;\n-            end if;\n-         end;\n-      end loop;\n-   end Gen_Elab_Calls_C;\n-\n-   ----------------------\n-   -- Gen_Elab_Defs_C --\n-   ----------------------\n-\n-   procedure Gen_Elab_Defs_C is\n-   begin\n-      WBI (\"/* BEGIN ELABORATION DEFINITIONS */\");\n-\n-      for E in Elab_Order.First .. Elab_Order.Last loop\n-\n-         --  Generate declaration of elaboration procedure if elaboration\n-         --  needed. Note that passive units are always excluded.\n-\n-         if not Units.Table (Elab_Order.Table (E)).No_Elab then\n-            Get_Name_String (Units.Table (Elab_Order.Table (E)).Uname);\n-            Set_String (\"extern void \");\n-            Set_Unit_Name;\n-            Set_String (\"___elab\");\n-            Set_Char (Name_Buffer (Name_Len)); -- 's' or 'b' for spec/body\n-            Set_String (\" (void);\");\n-            Write_Statement_Buffer;\n-         end if;\n-      end loop;\n-\n-      WBI (\"/* END ELABORATION DEFINITIONS */\");\n-      WBI (\"\");\n-   end Gen_Elab_Defs_C;\n-\n-   ------------------------\n-   -- Gen_Elab_Order_Ada --\n-   ------------------------\n-\n-   procedure Gen_Elab_Order_Ada is\n-   begin\n-      WBI (\"   --  BEGIN ELABORATION ORDER\");\n+      WBI (\"   --  BEGIN ELABORATION ORDER\");\n \n       for J in Elab_Order.First .. Elab_Order.Last loop\n          Set_String (\"   --  \");\n@@ -1689,24 +1172,6 @@ package body Bindgen is\n       WBI (\"\");\n    end Gen_Elab_Order_Ada;\n \n-   ----------------------\n-   -- Gen_Elab_Order_C --\n-   ----------------------\n-\n-   procedure Gen_Elab_Order_C is\n-   begin\n-      WBI (\"/* BEGIN ELABORATION ORDER\");\n-\n-      for J in Elab_Order.First .. Elab_Order.Last loop\n-         Get_Name_String (Units.Table (Elab_Order.Table (J)).Uname);\n-         Set_Name_Buffer;\n-         Write_Statement_Buffer;\n-      end loop;\n-\n-      WBI (\"   END ELABORATION ORDER */\");\n-      WBI (\"\");\n-   end Gen_Elab_Order_C;\n-\n    ------------------------------\n    -- Gen_Finalize_Library_Ada --\n    ------------------------------\n@@ -1979,194 +1444,6 @@ package body Bindgen is\n       end if;\n    end Gen_Finalize_Library_Ada;\n \n-   ----------------------------\n-   -- Gen_Finalize_Library_C --\n-   ----------------------------\n-\n-   procedure Gen_Finalize_Library_C is\n-      U     : Unit_Record;\n-      Uspec : Unit_Record;\n-      Unum  : Unit_Id;\n-\n-      procedure Gen_Header;\n-      --  Generate the header of the finalization routine\n-\n-      procedure Gen_Header is\n-      begin\n-         WBI (\"static void finalize_library(void) {\");\n-      end Gen_Header;\n-\n-   begin\n-      for E in reverse Elab_Order.First .. Elab_Order.Last loop\n-         Unum := Elab_Order.Table (E);\n-         U    := Units.Table (Unum);\n-\n-         --  Dealing with package bodies is a little complicated. In such\n-         --  cases we must retrieve the package spec since it contains the\n-         --  spec of the body finalizer.\n-\n-         if U.Utype = Is_Body then\n-            Unum  := Unum + 1;\n-            Uspec := Units.Table (Unum);\n-         else\n-            Uspec := U;\n-         end if;\n-\n-         Get_Name_String (Uspec.Uname);\n-\n-         --  We are only interested in non-generic packages\n-\n-         if U.Unit_Kind /= 'p' or else U.Is_Generic then\n-            null;\n-\n-         --  .. that are not interfaces to a stand alone library\n-\n-         elsif U.SAL_Interface then\n-            null;\n-\n-         --  Case of no finalization\n-\n-         elsif not U.Has_Finalizer then\n-\n-            --  The only case in which we have to do something is if this\n-            --  is a body, with a separate spec, where the separate spec\n-            --  has a finalizer. In that case, this is where we decrement\n-            --  the elaboration entity.\n-\n-            if U.Utype = Is_Body and then Uspec.Has_Finalizer then\n-               if not Lib_Final_Built then\n-                  Gen_Header;\n-                  Lib_Final_Built := True;\n-               end if;\n-\n-               Set_String (\"   \");\n-               Set_Unit_Name;\n-               Set_String (\"_E--;\");\n-               Write_Statement_Buffer;\n-            end if;\n-\n-         else\n-            if not Lib_Final_Built then\n-               Gen_Header;\n-               Lib_Final_Built := True;\n-            end if;\n-\n-            --  If binding a library or if there is a non-Ada main subprogram\n-            --  then we generate:\n-\n-            --    uname_E--;\n-            --    if (uname_E == 0)\n-            --       uname__finalize_[spec|body] ();\n-\n-            --  Otherwise, finalization routines are called unconditionally:\n-\n-            --    uname_E--;\n-            --    uname__finalize_[spec|body] ();\n-\n-            --  The uname_E decrement is skipped if this is a separate spec,\n-            --  since it will be done when we process the body.\n-\n-            if U.Utype /= Is_Spec then\n-               Set_String (\"   \");\n-               Set_Unit_Name;\n-               Set_String (\"_E--;\");\n-               Write_Statement_Buffer;\n-            end if;\n-\n-            if Interface_Library_Unit or not Bind_Main_Program then\n-               Set_String (\"   if (\");\n-               Set_Unit_Name;\n-               Set_String (\"_E == 0)\");\n-               Write_Statement_Buffer;\n-               Set_String (\"   \");\n-            end if;\n-\n-            Set_String (\"   \");\n-            Get_Name_String (Uspec.Uname);\n-            Set_Unit_Name;\n-            Set_String (\"__finalize_\");\n-\n-            --  Package spec processing\n-\n-            if U.Utype = Is_Spec\n-              or else U.Utype = Is_Spec_Only\n-            then\n-               Set_String (\"spec\");\n-\n-            --  Package body processing\n-\n-            else\n-               Set_String (\"body\");\n-            end if;\n-\n-            Set_String (\" ();\");\n-\n-            Write_Statement_Buffer;\n-         end if;\n-      end loop;\n-\n-      if Lib_Final_Built then\n-         WBI (\"}\");\n-         WBI (\"\");\n-      end if;\n-   end Gen_Finalize_Library_C;\n-\n-   ---------------------------------\n-   -- Gen_Finalize_Library_Defs_C --\n-   ---------------------------------\n-\n-   procedure Gen_Finalize_Library_Defs_C is\n-      U     : Unit_Record;\n-      Uspec : Unit_Record;\n-      Unum  : Unit_Id;\n-\n-   begin\n-      WBI (\"/* BEGIN FINALIZE DEFINITIONS */\");\n-\n-      for E in reverse Elab_Order.First .. Elab_Order.Last loop\n-         Unum := Elab_Order.Table (E);\n-         U    := Units.Table (Unum);\n-\n-         --  We are only interested in non-generic packages\n-\n-         if U.Unit_Kind = 'p'\n-           and then U.Has_Finalizer\n-           and then not U.Is_Generic\n-           and then not U.No_Elab\n-         then\n-            --  Dealing with package bodies is a little complicated. In such\n-            --  cases we must retrieve the package spec since it contains the\n-            --  spec of the body finalizer.\n-\n-            if U.Utype = Is_Body then\n-               Unum  := Unum + 1;\n-               Uspec := Units.Table (Unum);\n-            else\n-               Uspec := U;\n-            end if;\n-\n-            Set_String (\"extern void \");\n-            Get_Name_String (Uspec.Uname);\n-            Set_Unit_Name;\n-            Set_String (\"__finalize_\");\n-\n-            if U.Utype = Is_Spec\n-              or else U.Utype = Is_Spec_Only\n-            then\n-               Set_String (\"spec\");\n-            else\n-               Set_String (\"body\");\n-            end if;\n-\n-            Set_String (\" (void);\");\n-            Write_Statement_Buffer;\n-         end if;\n-      end loop;\n-\n-      WBI (\"/* END FINALIZE DEFINITIONS */\");\n-      WBI (\"\");\n-   end Gen_Finalize_Library_Defs_C;\n-\n    --------------------------\n    -- Gen_CodePeer_Wrapper --\n    --------------------------\n@@ -2428,226 +1705,31 @@ package body Bindgen is\n \n       if Dynamic_Stack_Measurement then\n          WBI (\"      Output_Results;\");\n-      end if;\n-\n-      --  Finalize is only called if we have a run time\n-\n-      if not Cumulative_Restrictions.Set (No_Finalization)\n-        and then not CodePeer_Mode\n-      then\n-         WBI (\"      Finalize;\");\n-      end if;\n-\n-      --  Return result\n-\n-      if Exit_Status_Supported_On_Target then\n-         if No_Main_Subprogram\n-           or else ALIs.Table (ALIs.First).Main_Program = Proc\n-         then\n-            WBI (\"      return (gnat_exit_status);\");\n-         else\n-            WBI (\"      return (Result);\");\n-         end if;\n-      end if;\n-\n-      WBI (\"   end;\");\n-      WBI (\"\");\n-   end Gen_Main_Ada;\n-\n-   ----------------\n-   -- Gen_Main_C --\n-   ----------------\n-\n-   procedure Gen_Main_C is\n-   begin\n-      if Exit_Status_Supported_On_Target then\n-         WBI (\"#include <stdlib.h>\");\n-         WBI (\"\");\n-         Set_String (\"int \");\n-      else\n-         Set_String (\"void \");\n-      end if;\n-\n-      Set_String (Get_Main_Name);\n-\n-      --  Generate command line args in prototype if present on target\n-\n-      if Command_Line_Args_On_Target then\n-         Write_Statement_Buffer (\" (int argc, char **argv, char **envp)\");\n-\n-      --  Case of no command line arguments on target\n-\n-      else\n-         Write_Statement_Buffer (\" (void)\");\n-      end if;\n-\n-      WBI (\"{\");\n-\n-      --  Generate a reference to __gnat_ada_main_program_name. This symbol\n-      --  is  not referenced elsewhere in the generated program, but is\n-      --  needed by the debugger (that's why it is generated in the first\n-      --  place). The reference stops Ada_Main_Program_Name from being\n-      --  optimized away by smart linkers, such as the AiX linker.\n-\n-      --  Because this variable is unused, we declare this variable as\n-      --  volatile in order to tell the compiler to preserve it at any\n-      --  level of optimization.\n-\n-      if Bind_Main_Program then\n-         WBI (\"   char * volatile ensure_reference \" &\n-              \"__attribute__ ((__unused__)) = \" &\n-              \"__gnat_ada_main_program_name;\");\n-         WBI (\"\");\n-\n-         if not Suppress_Standard_Library_On_Target\n-           and then not No_Main_Subprogram\n-         then\n-            WBI (\"   int SEH [2];\");\n-            WBI (\"\");\n-         end if;\n-      end if;\n-\n-      --  If main program is a function, generate result variable\n-\n-      if ALIs.Table (ALIs.First).Main_Program = Func then\n-         WBI (\"   int result;\");\n-      end if;\n-\n-      --  Set command line argument values from parameters if command line\n-      --  arguments are present on target\n-\n-      if Command_Line_Args_On_Target then\n-         WBI (\"   gnat_argc = argc;\");\n-         WBI (\"   gnat_argv = argv;\");\n-         WBI (\"   gnat_envp = envp;\");\n-         WBI (\"\");\n-\n-      --  If configurable run-time, then nothing to do, since in this case\n-      --  the gnat_argc/argv/envp variables are entirely suppressed.\n-\n-      elsif Configurable_Run_Time_On_Target then\n-         null;\n-\n-      --  if no command line arguments on target, set dummy values\n-\n-      else\n-         WBI (\"   gnat_argc = 0;\");\n-         WBI (\"   gnat_argv = 0;\");\n-         WBI (\"   gnat_envp = 0;\");\n-      end if;\n-\n-      if Opt.Default_Exit_Status /= 0\n-        and then Bind_Main_Program\n-        and then not Configurable_Run_Time_Mode\n-      then\n-         Set_String (\"   __gnat_set_exit_status (\");\n-         Set_Int (Opt.Default_Exit_Status);\n-         Set_String (\");\");\n-         Write_Statement_Buffer;\n-      end if;\n-\n-      --  Initializes dynamic stack measurement if needed\n-\n-      if Dynamic_Stack_Measurement then\n-         Set_String (\"   __gnat_stack_usage_initialize (\");\n-         Set_Int (Dynamic_Stack_Measurement_Array_Size);\n-         Set_String (\");\");\n-         Write_Statement_Buffer;\n-      end if;\n-\n-      --  The __gnat_initialize routine is used only if we have a run-time\n-\n-      if not Suppress_Standard_Library_On_Target then\n-         if not No_Main_Subprogram and then Bind_Main_Program then\n-            WBI (\"   __gnat_initialize ((void *)SEH);\");\n-         else\n-            WBI (\"   __gnat_initialize ((void *)0);\");\n-         end if;\n-      end if;\n-\n-      WBI (\"   \" & Ada_Init_Name.all & \" ();\");\n-\n-      if not No_Main_Subprogram then\n-\n-         --  Output main program name\n-\n-         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n-\n-         --  Main program is procedure case\n-\n-         if ALIs.Table (ALIs.First).Main_Program = Proc then\n-            Set_String (\"   \");\n-            Set_Main_Program_Name;\n-            Set_String (\" ();\");\n-            Write_Statement_Buffer;\n-\n-         --  Main program is function case\n-\n-         else -- ALIs.Table (ALIs_First).Main_Program = Func\n-            Set_String (\"   result = \");\n-            Set_Main_Program_Name;\n-            Set_String (\" ();\");\n-            Write_Statement_Buffer;\n-         end if;\n-\n-      end if;\n-\n-      --  Call adafinal if finalization active\n-\n-      if not Cumulative_Restrictions.Set (No_Finalization) then\n-         WBI (\"   \" & Ada_Final_Name.all & \" ();\");\n-      end if;\n-\n-      --  Outputs the dynamic stack measurement if needed\n-\n-      if Dynamic_Stack_Measurement then\n-         WBI (\"   __gnat_stack_usage_output_results ();\");\n-      end if;\n-\n-      --  The finalize routine is used only if we have a run-time\n-\n-      if not Suppress_Standard_Library_On_Target then\n-         WBI (\"   __gnat_finalize ();\");\n-      end if;\n-\n-      --  Case of main program is a function, so the value it returns\n-      --  is the exit status in this case.\n-\n-      if ALIs.Table (ALIs.First).Main_Program = Func then\n-         if Exit_Status_Supported_On_Target then\n-\n-            --  VMS must use Posix exit routine in order to get the effect\n-            --  of a Unix compatible setting of the program exit status.\n-            --  For all other systems, we use the standard exit routine.\n-\n-            if OpenVMS_On_Target then\n-               WBI (\"   decc$__posix_exit (result);\");\n-            else\n-               WBI (\"   exit (result);\");\n-            end if;\n-         end if;\n+      end if;\n \n-      --  Case of main program is a procedure, in which case the exit\n-      --  status is whatever was set by a Set_Exit call most recently\n+      --  Finalize is only called if we have a run time\n \n-      else\n-         if Exit_Status_Supported_On_Target then\n+      if not Cumulative_Restrictions.Set (No_Finalization)\n+        and then not CodePeer_Mode\n+      then\n+         WBI (\"      Finalize;\");\n+      end if;\n \n-            --  VMS must use Posix exit routine in order to get the effect\n-            --  of a Unix compatible setting of the program exit status.\n-            --  For all other systems, we use the standard exit routine.\n+      --  Return result\n \n-            if OpenVMS_On_Target then\n-               WBI (\"   decc$__posix_exit (gnat_exit_status);\");\n-            else\n-               WBI (\"   exit (gnat_exit_status);\");\n-            end if;\n+      if Exit_Status_Supported_On_Target then\n+         if No_Main_Subprogram\n+           or else ALIs.Table (ALIs.First).Main_Program = Proc\n+         then\n+            WBI (\"      return (gnat_exit_status);\");\n+         else\n+            WBI (\"      return (Result);\");\n          end if;\n       end if;\n \n-      WBI (\"}\");\n+      WBI (\"   end;\");\n       WBI (\"\");\n-   end Gen_Main_C;\n+   end Gen_Main_Ada;\n \n    ------------------------------\n    -- Gen_Object_Files_Options --\n@@ -2706,8 +1788,7 @@ package body Bindgen is\n                   Write_Str (Name_Buffer (Start .. Stop - 1));\n                   Write_Eol;\n                end if;\n-               Write_Info_Ada_C\n-                 (\"   --   \", \"\", Name_Buffer (Start .. Stop - 1));\n+               WBI (\"   --   \" & Name_Buffer (Start .. Stop - 1));\n             end if;\n \n             Start := Stop + 1;\n@@ -2717,7 +1798,7 @@ package body Bindgen is\n    --  Start of processing for Gen_Object_Files_Options\n \n    begin\n-      Write_Info_Ada_C (\"-- \", \"/* \", \" BEGIN Object file/option list\");\n+      WBI (\"--  BEGIN Object file/option list\");\n \n       if Object_List_Filename /= null then\n          Set_List_File (Object_List_Filename.all);\n@@ -2742,7 +1823,7 @@ package body Bindgen is\n               or else\n                 System.OS_Lib.Is_Regular_File (Name_Buffer (1 .. Name_Len))\n             then\n-               Write_Info_Ada_C (\"   --   \", \"\", Name_Buffer (1 .. Name_Len));\n+               WBI (\"   --   \" & Name_Buffer (1 .. Name_Len));\n \n                if Output_Object_List then\n                   Write_Str (Name_Buffer (1 .. Name_Len));\n@@ -2857,7 +1938,7 @@ package body Bindgen is\n \n          --  Write directly to avoid -K output (why???)\n \n-         Write_Info_Ada_C (\"   --   \", \"\", Name_Buffer (1 .. Name_Len));\n+         WBI (\"   --   \" & Name_Buffer (1 .. Name_Len));\n \n          if With_DECGNAT then\n             Name_Len := 0;\n@@ -2905,11 +1986,7 @@ package body Bindgen is\n          Write_Eol;\n       end if;\n \n-      if Ada_Bind_File then\n-         WBI (\"--  END Object file/option list   \");\n-      else\n-         WBI (\"    END Object file/option list */\");\n-      end if;\n+      WBI (\"--  END Object file/option list   \");\n    end Gen_Object_Files_Options;\n \n    ---------------------\n@@ -2926,16 +2003,10 @@ package body Bindgen is\n \n       Set_PSD_Pragma_Table;\n \n-      --  Override Ada_Bind_File and Bind_Main_Program for VMs since JGNAT only\n-      --  supports Ada code, and the main program is already generated by the\n-      --  compiler.\n-\n-      if VM_Target /= No_VM then\n-         Ada_Bind_File := True;\n+      --  For JGNAT the main program is already generated by the compiler\n \n-         if VM_Target = JVM_Target then\n-            Bind_Main_Program := False;\n-         end if;\n+      if VM_Target = JVM_Target then\n+         Bind_Main_Program := False;\n       end if;\n \n       --  Override time slice value if -T switch is set\n@@ -2958,11 +2029,7 @@ package body Bindgen is\n \n       Check_System_Restrictions_Used;\n \n-      if Ada_Bind_File then\n-         Gen_Output_File_Ada (Filename);\n-      else\n-         Gen_Output_File_C (Filename);\n-      end if;\n+      Gen_Output_File_Ada (Filename);\n    end Gen_Output_File;\n \n    -------------------------\n@@ -3335,217 +2402,6 @@ package body Bindgen is\n       Close_Binder_Output;\n    end Gen_Output_File_Ada;\n \n-   -----------------------\n-   -- Gen_Output_File_C --\n-   -----------------------\n-\n-   procedure Gen_Output_File_C (Filename : String) is\n-\n-      Needs_Library_Finalization : constant Boolean :=\n-                                     not Configurable_Run_Time_On_Target\n-                                       and then Has_Finalizer;\n-      --  ??? seems like we repeat this cantation often, should it be global?\n-\n-      Bfile : Name_Id;\n-      pragma Warnings (Off, Bfile);\n-      --  Name of generated bind file (not referenced)\n-\n-   begin\n-      Create_Binder_Output (Filename, 'c', Bfile);\n-\n-      Resolve_Binder_Options;\n-\n-      --  If -a has been specified use __attribute__((constructor)) for the\n-      --  init procedure and __attribute__((destructor)) for the final one.\n-\n-      if Use_Pragma_Linker_Constructor then\n-         WBI (\"extern void \" & Ada_Init_Name.all &\n-              \" (void) __attribute__((constructor));\");\n-      else\n-         WBI (\"extern void \" & Ada_Init_Name.all & \" (void);\");\n-      end if;\n-\n-      if not Cumulative_Restrictions.Set (No_Finalization) then\n-         if Use_Pragma_Linker_Constructor then\n-            WBI (\"extern void \" & Ada_Final_Name.all &\n-                 \" (void) __attribute__((destructor));\");\n-         else\n-            WBI (\"extern void \" & Ada_Final_Name.all & \" (void);\");\n-         end if;\n-      end if;\n-\n-      WBI (\"extern void system__standard_library__adafinal (void);\");\n-\n-      if not No_Main_Subprogram then\n-         Set_String (\"extern \");\n-\n-         if Exit_Status_Supported_On_Target then\n-            Set_String (\"int\");\n-         else\n-            Set_String (\"void\");\n-         end if;\n-\n-         Set_String (\" main \");\n-\n-         if Command_Line_Args_On_Target then\n-            Write_Statement_Buffer (\"(int, char **, char **);\");\n-         else\n-            Write_Statement_Buffer (\"(void);\");\n-         end if;\n-\n-         if OpenVMS_On_Target then\n-            WBI (\"extern void decc$__posix_exit (int);\");\n-         else\n-            WBI (\"extern void exit (int);\");\n-         end if;\n-\n-         Set_String (\"extern \");\n-\n-         if ALIs.Table (ALIs.First).Main_Program = Proc then\n-            Set_String (\"void \");\n-         else\n-            Set_String (\"int \");\n-         end if;\n-\n-         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n-         Set_Main_Program_Name;\n-         Set_String (\" (void);\");\n-         Write_Statement_Buffer;\n-      end if;\n-\n-      if not Suppress_Standard_Library_On_Target then\n-         WBI (\"extern void __gnat_initialize (void *);\");\n-         WBI (\"extern void __gnat_finalize (void);\");\n-         WBI (\"extern void __gnat_install_handler (void);\");\n-      end if;\n-\n-      if Dynamic_Stack_Measurement then\n-         WBI (\"\");\n-         WBI (\"extern void __gnat_stack_usage_output_results (void);\");\n-         WBI (\"extern void __gnat_stack_usage_initialize (int size);\");\n-      end if;\n-\n-      --  Initialize stack limit for the environment task if the stack check\n-      --  method is stack limit and stack check is enabled.\n-\n-      if Stack_Check_Limits_On_Target\n-        and then (Stack_Check_Default_On_Target or Stack_Check_Switch_Set)\n-      then\n-         WBI (\"\");\n-         WBI (\"extern void __gnat_initialize_stack_limit (void);\");\n-      end if;\n-\n-      WBI (\"\");\n-\n-      --  Generate externals for elaboration entities\n-      Gen_Elab_Externals_C;\n-\n-      Gen_Elab_Defs_C;\n-\n-      if Needs_Library_Finalization then\n-         Gen_Finalize_Library_Defs_C;\n-      end if;\n-\n-      --  Write argv/argc exit status stuff if main program case\n-\n-      if Bind_Main_Program then\n-\n-         --  First deal with argc/argv/envp. In the normal case they are in the\n-         --  run-time library.\n-\n-         if not Configurable_Run_Time_On_Target then\n-            WBI (\"extern int gnat_argc;\");\n-            WBI (\"extern char **gnat_argv;\");\n-            WBI (\"extern char **gnat_envp;\");\n-\n-         --  If configurable run time and no command line args, then the\n-         --  generation of these variables is entirely suppressed.\n-\n-         elsif not Command_Line_Args_On_Target then\n-            null;\n-\n-         --  Otherwise, in the configurable run-time case they are right in the\n-         --  binder file.\n-\n-         else\n-            WBI (\"int gnat_argc;\");\n-            WBI (\"char **gnat_argv;\");\n-            WBI (\"char **gnat_envp;\");\n-         end if;\n-\n-         --  Similarly deal with exit status\n-\n-         if not Configurable_Run_Time_On_Target then\n-            WBI (\"extern int gnat_exit_status;\");\n-\n-         --  If configurable run time and no exit status on target, then the\n-         --  generation of this variables is entirely suppressed.\n-\n-         elsif not Exit_Status_Supported_On_Target then\n-            null;\n-\n-         --  Otherwise, in the configurable run-time case this variable is\n-         --  right in the binder file, and initialized to zero there.\n-\n-         else\n-            WBI (\"int gnat_exit_status = 0;\");\n-         end if;\n-\n-         WBI (\"\");\n-      end if;\n-\n-      --  Generate the __gnat_version and __gnat_ada_main_program_name info\n-      --  only for the main program. Otherwise, it can lead under some\n-      --  circumstances to a symbol duplication during the link (for instance\n-      --  when a C program uses 2 Ada libraries)\n-\n-      if Bind_Main_Program then\n-         WBI (\"char __gnat_version[] = \"\"\" & Ver_Prefix &\n-                                   Gnat_Version_String & \"\"\";\");\n-\n-         Set_String (\"char __gnat_ada_main_program_name[] = \"\"\");\n-         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n-         Set_Main_Program_Name;\n-         Set_String (\"\"\";\");\n-         Write_Statement_Buffer;\n-         WBI (\"\");\n-      end if;\n-\n-      --  The B.1 (39) implementation advice says that the adainit/adafinal\n-      --  routines should be idempotent. Generate a flag to ensure that.\n-\n-      WBI (\"static char is_elaborated = 0;\");\n-      WBI (\"\");\n-\n-      --  Generate the adafinal routine unless there is no finalization to do\n-\n-      if not Cumulative_Restrictions.Set (No_Finalization) then\n-         if Needs_Library_Finalization then\n-            Gen_Finalize_Library_C;\n-         end if;\n-\n-         Gen_Adafinal_C;\n-      end if;\n-\n-      Gen_Adainit_C;\n-\n-      --  Main is only present for Ada main case\n-\n-      if Bind_Main_Program then\n-         Gen_Main_C;\n-      end if;\n-\n-      --  Generate versions, elaboration order, list of object files\n-\n-      Gen_Versions_C;\n-      Gen_Elab_Order_C;\n-      Gen_Object_Files_Options;\n-\n-      --  C binder output is complete\n-\n-      Close_Binder_Output;\n-   end Gen_Output_File_C;\n-\n    --------------------------\n    -- Gen_Restrictions_Ada --\n    --------------------------\n@@ -3628,96 +2484,6 @@ package body Bindgen is\n       Write_Statement_Buffer;\n    end Gen_Restrictions_Ada;\n \n-   ------------------------\n-   -- Gen_Restrictions_C --\n-   ------------------------\n-\n-   procedure Gen_Restrictions_C is\n-   begin\n-      if Suppress_Standard_Library_On_Target\n-        or not System_Restrictions_Used\n-      then\n-         return;\n-      end if;\n-\n-      WBI (\"   typedef struct {\");\n-      Set_String (\"     char set [\");\n-      Set_Int (Cumulative_Restrictions.Set'Length);\n-      Set_String (\"];\");\n-      Write_Statement_Buffer;\n-\n-      Set_String (\"     int value [\");\n-      Set_Int (Cumulative_Restrictions.Value'Length);\n-      Set_String (\"];\");\n-      Write_Statement_Buffer;\n-\n-      Set_String (\"     char violated [\");\n-      Set_Int (Cumulative_Restrictions.Violated'Length);\n-      Set_String (\"];\");\n-      Write_Statement_Buffer;\n-\n-      Set_String (\"     int count [\");\n-      Set_Int (Cumulative_Restrictions.Count'Length);\n-      Set_String (\"];\");\n-      Write_Statement_Buffer;\n-\n-      Set_String (\"     char unknown [\");\n-      Set_Int (Cumulative_Restrictions.Unknown'Length);\n-      Set_String (\"];\");\n-      Write_Statement_Buffer;\n-      WBI (\"   } restrictions;\");\n-      WBI (\"   extern restrictions \" &\n-           \"system__restrictions__run_time_restrictions;\");\n-      WBI (\"   restrictions r = {\");\n-      Set_String (\"     {\");\n-\n-      for J in Cumulative_Restrictions.Set'Range loop\n-         Set_Int (Boolean'Pos (Cumulative_Restrictions.Set (J)));\n-         Set_String (\", \");\n-      end loop;\n-\n-      Set_String_Replace (\"},\");\n-      Write_Statement_Buffer;\n-      Set_String (\"     {\");\n-\n-      for J in Cumulative_Restrictions.Value'Range loop\n-         Set_Int (Int (Cumulative_Restrictions.Value (J)));\n-         Set_String (\", \");\n-      end loop;\n-\n-      Set_String_Replace (\"},\");\n-      Write_Statement_Buffer;\n-      Set_String (\"     {\");\n-\n-      for J in Cumulative_Restrictions.Violated'Range loop\n-         Set_Int (Boolean'Pos (Cumulative_Restrictions.Violated (J)));\n-         Set_String (\", \");\n-      end loop;\n-\n-      Set_String_Replace (\"},\");\n-      Write_Statement_Buffer;\n-      Set_String (\"     {\");\n-\n-      for J in Cumulative_Restrictions.Count'Range loop\n-         Set_Int (Int (Cumulative_Restrictions.Count (J)));\n-         Set_String (\", \");\n-      end loop;\n-\n-      Set_String_Replace (\"},\");\n-      Write_Statement_Buffer;\n-      Set_String (\"     {\");\n-\n-      for J in Cumulative_Restrictions.Unknown'Range loop\n-         Set_Int (Boolean'Pos (Cumulative_Restrictions.Unknown (J)));\n-         Set_String (\", \");\n-      end loop;\n-\n-      Set_String_Replace (\"}}\");\n-      Set_String (\";\");\n-      Write_Statement_Buffer;\n-      WBI (\"   system__restrictions__run_time_restrictions = r;\");\n-   end Gen_Restrictions_C;\n-\n    ----------------------\n    -- Gen_Versions_Ada --\n    ----------------------\n@@ -3795,54 +2561,6 @@ package body Bindgen is\n       end loop;\n    end Gen_Versions_Ada;\n \n-   --------------------\n-   -- Gen_Versions_C --\n-   --------------------\n-\n-   --  This routine generates a line of the form:\n-\n-   --    unsigned unam = 0xhhhhhhhh;\n-\n-   --  for each unit, where unam is the unit name suffixed by either B or S for\n-   --  body or spec, with dots replaced by double underscores.\n-\n-   procedure Gen_Versions_C is\n-   begin\n-      for U in Units.First .. Units.Last loop\n-         if not Units.Table (U).SAL_Interface\n-           and then\n-             (not Bind_For_Library or else Units.Table (U).Directly_Scanned)\n-         then\n-            Set_String (\"unsigned \");\n-\n-            Get_Name_String (Units.Table (U).Uname);\n-\n-            for K in 1 .. Name_Len loop\n-               if Name_Buffer (K) = '.' then\n-                  Set_String (\"__\");\n-\n-               elsif Name_Buffer (K) = '%' then\n-                  exit;\n-\n-               else\n-                  Set_Char (Name_Buffer (K));\n-               end if;\n-            end loop;\n-\n-            if Name_Buffer (Name_Len) = 's' then\n-               Set_Char ('S');\n-            else\n-               Set_Char ('B');\n-            end if;\n-\n-            Set_String (\" = 0x\");\n-            Set_String (Units.Table (U).Version);\n-            Set_Char   (';');\n-            Write_Statement_Buffer;\n-         end if;\n-      end loop;\n-   end Gen_Versions_C;\n-\n    ------------------------\n    -- Get_Main_Unit_Name --\n    ------------------------\n@@ -4291,32 +3009,6 @@ package body Bindgen is\n       Set_Int (Unum);\n    end Set_Unit_Number;\n \n-   ----------------------\n-   -- Write_Info_Ada_C --\n-   ----------------------\n-\n-   procedure Write_Info_Ada_C (Ada : String; C : String; Common : String) is\n-   begin\n-      if Ada_Bind_File then\n-         declare\n-            S : String (1 .. Ada'Length + Common'Length);\n-         begin\n-            S (1 .. Ada'Length) := Ada;\n-            S (Ada'Length + 1 .. S'Length) := Common;\n-            WBI (S);\n-         end;\n-\n-      else\n-         declare\n-            S : String (1 .. C'Length + Common'Length);\n-         begin\n-            S (1 .. C'Length) := C;\n-            S (C'Length + 1 .. S'Length) := Common;\n-            WBI (S);\n-         end;\n-      end if;\n-   end Write_Info_Ada_C;\n-\n    ----------------------------\n    -- Write_Statement_Buffer --\n    ----------------------------"}, {"sha": "18eb36e01ec72efa512b678a2327bec983d65c03", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -568,20 +568,12 @@ begin\n          Last   : constant Natural := Output_File_Name'Last;\n \n       begin\n-         if Ada_Bind_File then\n-            if Length <= 4\n-              or else Output_File_Name (Last - 3 .. Last) /= \".adb\"\n-            then\n-               Fail (\"output file name should have .adb extension\");\n-            end if;\n-\n-         else\n-            if Length <= 2\n-              or else Output_File_Name (Last - 1 .. Last) /= \".c\"\n-            then\n-               Fail (\"output file name should have .c extension\");\n-            end if;\n+         if Length <= 4\n+           or else Output_File_Name (Last - 3 .. Last) /= \".adb\"\n+         then\n+            Fail (\"output file name should have .adb extension\");\n          end if;\n+\n       end Check_Extensions;\n    end if;\n "}, {"sha": "7e7a10bd9abc6255a4d5778d16b972ef4ac2321a", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 29, "deletions": 72, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -141,9 +141,8 @@ procedure Gnatlink is\n \n    Read_Mode : constant String := \"r\" & ASCII.NUL;\n \n-   Begin_Info : String := \"--  BEGIN Object file/option list\";\n-   End_Info   : String := \"--  END Object file/option list   \";\n-   --  Note: above lines are modified in C mode, see option processing\n+   Begin_Info : constant String := \"--  BEGIN Object file/option list\";\n+   End_Info   : constant String := \"--  END Object file/option list   \";\n \n    Gcc_Path             : String_Access;\n    Linker_Path          : String_Access;\n@@ -163,9 +162,6 @@ procedure Gnatlink is\n    Verbose_Mode       : Boolean := False;\n    Very_Verbose_Mode  : Boolean := False;\n \n-   Ada_Bind_File : Boolean := True;\n-   --  Set to True if bind file is generated in Ada\n-\n    Standard_Gcc : Boolean := True;\n \n    Compile_Bind_File : Boolean := True;\n@@ -413,11 +409,6 @@ procedure Gnatlink is\n \n                elsif Arg'Length = 2 then\n                   case Arg (2) is\n-                     when 'A' =>\n-                        Ada_Bind_File := True;\n-                        Begin_Info := \"--  BEGIN Object file/option list\";\n-                        End_Info   := \"--  END Object file/option list   \";\n-\n                      when 'b' =>\n                         Linker_Options.Increment_Last;\n                         Linker_Options.Table (Linker_Options.Last) :=\n@@ -448,11 +439,6 @@ procedure Gnatlink is\n \n                         end Get_Machine_Name;\n \n-                     when 'C' =>\n-                        Ada_Bind_File := False;\n-                        Begin_Info := \"/*  BEGIN Object file/option list\";\n-                        End_Info   := \"    END Object file/option list */\";\n-\n                      when 'f' =>\n                         if Object_List_File_Supported then\n                            Object_List_File_Required := True;\n@@ -663,13 +649,11 @@ procedure Gnatlink is\n          Next_Arg := Next_Arg + 1;\n       end loop;\n \n-      --  If Ada bind file, then compile it with warnings suppressed, because\n+      --  Compile the bind file with warnings suppressed, because\n       --  otherwise the with of the main program may cause junk warnings.\n \n-      if Ada_Bind_File then\n-         Binder_Options.Increment_Last;\n-         Binder_Options.Table (Binder_Options.Last) := new String'(\"-gnatws\");\n-      end if;\n+      Binder_Options.Increment_Last;\n+      Binder_Options.Table (Binder_Options.Last) := new String'(\"-gnatws\");\n \n       --  If we did not get an ali file at all, and we had at least one\n       --  linker option, then assume that was the intended ali file after\n@@ -937,11 +921,8 @@ procedure Gnatlink is\n \n          exit when Next_Line (Nfirst .. Nlast) = End_Info;\n \n-         if Ada_Bind_File then\n-            Next_Line (Nfirst .. Nlast - 8) :=\n-              Next_Line (Nfirst + 8 .. Nlast);\n-            Nlast := Nlast - 8;\n-         end if;\n+         Next_Line (Nfirst .. Nlast - 8) := Next_Line (Nfirst + 8 .. Nlast);\n+         Nlast := Nlast - 8;\n \n          --  Go to next section when switches are reached\n \n@@ -1413,11 +1394,8 @@ procedure Gnatlink is\n             Get_Next_Line;\n             exit when Next_Line (Nfirst .. Nlast) = End_Info;\n \n-            if Ada_Bind_File then\n-               Next_Line (Nfirst .. Nlast - 8) :=\n-                 Next_Line (Nfirst + 8 .. Nlast);\n-               Nlast := Nlast - 8;\n-            end if;\n+            Next_Line (Nfirst .. Nlast - 8) := Next_Line (Nfirst + 8 .. Nlast);\n+            Nlast := Nlast - 8;\n          end loop;\n       end if;\n \n@@ -1611,12 +1589,10 @@ begin\n                   elsif Arg'Length > 5\n                     and then Arg (Arg'First + 2 .. Arg'First + 5) = \"RTS=\"\n                   then\n-                     if Ada_Bind_File then\n-                        Binder_Options_From_ALI.Increment_Last;\n-                        Binder_Options_From_ALI.Table\n-                          (Binder_Options_From_ALI.Last)\n-                            := String_Access (Arg);\n-                     end if;\n+                     Binder_Options_From_ALI.Increment_Last;\n+                     Binder_Options_From_ALI.Table\n+                       (Binder_Options_From_ALI.Last)\n+                          := String_Access (Arg);\n \n                      --  Set the RTS_*_Path_Name variables, so that\n                      --  the correct directories will be set when\n@@ -1666,14 +1642,9 @@ begin\n          when CLI_Target => Gcc := new String'(\"dotnet-gnatcompile\");\n          when No_VM      => raise Program_Error;\n       end case;\n-\n-      Ada_Bind_File := True;\n-      Begin_Info := \"--  BEGIN Object file/option list\";\n-      End_Info   := \"--  END Object file/option list   \";\n    end if;\n \n-   --  If the main program is in Ada it is compiled with the following\n-   --  switches:\n+   --  Compile the bind file with the following switches:\n \n    --    -gnatA   stops reading gnat.adc, since we don't know what\n    --             pragmas would work, and we do not need it anyway.\n@@ -1686,22 +1657,20 @@ begin\n \n    --  In addition, in CodePeer mode compile with -gnatC\n \n-   if Ada_Bind_File then\n-      Binder_Options_From_ALI.Increment_Last;\n-      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+   Binder_Options_From_ALI.Increment_Last;\n+   Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n         new String'(\"-gnatA\");\n-      Binder_Options_From_ALI.Increment_Last;\n-      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+   Binder_Options_From_ALI.Increment_Last;\n+   Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n         new String'(\"-gnatWb\");\n-      Binder_Options_From_ALI.Increment_Last;\n-      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+   Binder_Options_From_ALI.Increment_Last;\n+   Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n         new String'(\"-gnatiw\");\n \n-      if Opt.CodePeer_Mode then\n-         Binder_Options_From_ALI.Increment_Last;\n-         Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+   if Opt.CodePeer_Mode then\n+      Binder_Options_From_ALI.Increment_Last;\n+      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n            new String'(\"-gnatC\");\n-      end if;\n    end if;\n \n    --  Locate all the necessary programs and verify required files are present\n@@ -1814,9 +1783,7 @@ begin\n    begin\n       --  Set prefix\n \n-      if not Ada_Bind_File then\n-         Bind_File_Prefix := new String'(\"b_\");\n-      elsif OpenVMS_On_Target then\n+      if OpenVMS_On_Target then\n          Bind_File_Prefix := new String'(\"b__\");\n       else\n          Bind_File_Prefix := new String'(\"b~\");\n@@ -1839,13 +1806,9 @@ begin\n                     Fname (Fname'First .. Fname'First + Fname_Len - 1);\n \n       begin\n-         if Ada_Bind_File then\n-            Binder_Spec_Src_File := new String'(Fnam & \".ads\");\n-            Binder_Body_Src_File := new String'(Fnam & \".adb\");\n-            Binder_Ali_File      := new String'(Fnam & \".ali\");\n-         else\n-            Binder_Body_Src_File := new String'(Fnam & \".c\");\n-         end if;\n+         Binder_Spec_Src_File := new String'(Fnam & \".ads\");\n+         Binder_Body_Src_File := new String'(Fnam & \".adb\");\n+         Binder_Ali_File      := new String'(Fnam & \".ali\");\n \n          Binder_Obj_File := new String'(Fnam & Get_Target_Object_Suffix.all);\n       end;\n@@ -2272,14 +2235,8 @@ begin\n    --  useful if debugging.\n \n    if not Debug_Flag_Present then\n-      if Binder_Ali_File /= null then\n-         Delete (Binder_Ali_File.all & ASCII.NUL);\n-      end if;\n-\n-      if Binder_Spec_Src_File /= null then\n-         Delete (Binder_Spec_Src_File.all & ASCII.NUL);\n-      end if;\n-\n+      Delete (Binder_Ali_File.all & ASCII.NUL);\n+      Delete (Binder_Spec_Src_File.all & ASCII.NUL);\n       Delete (Binder_Body_Src_File.all & ASCII.NUL);\n \n       if VM_Target = No_VM then"}, {"sha": "ce0bd19633a955b9ab68d095bfa797ef69c5f58e", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -1720,12 +1720,20 @@ begin\n                Write_Line\n                  (To_Host_Dir_Spec (Name_Buffer (1 .. Name_Len), True).all);\n \n+               Name_Len := Prefix_Name_Len;\n+               Add_Str_To_Name_Buffer (\"share\" & Directory_Separator\n+                                       & \"gpr\" & Directory_Separator);\n+               Write_Str (\"   \");\n+               Write_Line\n+                 (To_Host_Dir_Spec (Name_Buffer (1 .. Name_Len), True).all);\n+\n                Name_Len := Prefix_Name_Len;\n                Add_Str_To_Name_Buffer (\"lib\" & Directory_Separator\n                                        & \"gnat\" & Directory_Separator);\n                Write_Str (\"   \");\n                Write_Line\n                  (To_Host_Dir_Spec (Name_Buffer (1 .. Name_Len), True).all);\n+\n             end if;\n          end if;\n       end;"}, {"sha": "44a9d4438c6db3f0328616a90c328756f46037a1", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -550,9 +550,9 @@ package body ALFA is\n               and then Ekind_In (Scope (E), E_Package, E_Package_Body);\n          end Is_Global_Constant;\n \n-         --  Start of processing for Eliminate_Before_Sort\n-      begin\n+      --  Start of processing for Eliminate_Before_Sort\n \n+      begin\n          NR    := Nrefs;\n          Nrefs := 0;\n "}, {"sha": "b2f39de056c086e00dab6802874cf63496e31938", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -4359,8 +4359,8 @@ package body Make is\n             end if;\n          end if;\n \n-         --  Put the object directories in ADA_OBJECTS_PATH\n-         --  Ditto for source directories in ADA_INCLUDE_PATH in CodePeer mode\n+         --  Put the object directories in ADA_OBJECTS_PATH. Same treatment for\n+         --  source directories in ADA_INCLUDE_PATH if in CodePeer mode.\n \n          Prj.Env.Set_Ada_Paths\n            (Main_Project,"}, {"sha": "0286267dcc2c899587c77204c33732ae203e767f", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -1389,12 +1389,12 @@ package body Makeutl is\n                   if Name_Len > Base_Main'Length\n                     and then Name_Buffer (1 .. Base_Main'Length) = Base_Main\n                   then\n-                     Suffix :=\n-                       Source.Language.Config.Naming_Data.Spec_Suffix;\n+                     Suffix := Source.Language.Config.Naming_Data.Spec_Suffix;\n \n                      if Suffix /= No_File then\n                         declare\n                            Suffix_Str : String := Get_Name_String (Suffix);\n+\n                         begin\n                            Canonical_Case_File_Name (Suffix_Str);\n "}, {"sha": "d4d03738bd2fde11f2a75f82a5f5a169b28f1475", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -112,10 +112,6 @@ package Opt is\n    --  case of some binder variables, Gnatbind.Scan_Bind_Arg may modify\n    --  the default values.\n \n-   Ada_Bind_File : Boolean := True;\n-   --  GNATBIND, GNATLINK\n-   --  Set True if binder file to be generated in Ada rather than C\n-\n    type Ada_Version_Type is (Ada_83, Ada_95, Ada_2005, Ada_2012);\n    pragma Ordered (Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,"}, {"sha": "0c66142e0d4165befb9a629868d8ea2abcb24a36", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -1982,23 +1982,20 @@ package body Prj.Env is\n       if Add_Default_Dir then\n          declare\n             Prefix : String_Ptr;\n-            Add_Prefix_Share_Gpr : Boolean;\n \n          begin\n             if Sdefault.Search_Dir_Prefix = null then\n \n                --  gprbuild case\n \n                Prefix := new String'(Executable_Prefix_Path);\n-               Add_Prefix_Share_Gpr := True;\n \n             else\n                Prefix := new String'(Sdefault.Search_Dir_Prefix.all\n                                      & \"..\" & Dir_Separator\n                                      & \"..\" & Dir_Separator\n                                      & \"..\" & Dir_Separator\n                                      & \"..\" & Dir_Separator);\n-               Add_Prefix_Share_Gpr := False;\n             end if;\n \n             if Prefix.all /= \"\" then\n@@ -2021,14 +2018,11 @@ package body Prj.Env is\n                     (\"lib\" & Directory_Separator & \"gnat\");\n                end if;\n \n-               if Add_Prefix_Share_Gpr then\n+               --  $prefix/share/gpr\n \n-                  --  $prefix/share/gpr\n-\n-                  Add_Str_To_Name_Buffer\n-                    (Path_Separator & Prefix.all &\n-                     \"share\" & Directory_Separator & \"gpr\");\n-               end if;\n+               Add_Str_To_Name_Buffer\n+                 (Path_Separator & Prefix.all &\n+                  \"share\" & Directory_Separator & \"gpr\");\n \n                --  $prefix/lib/gnat\n "}, {"sha": "4603a4f9df9522a4eed980e1c958d0f30420dc6b", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -1135,7 +1135,8 @@ the search stops:\n \n   @itemize @bullet\n   @item @file{<prefix>/<target>/lib/gnat}\n-  (for @command{gprbuild} only and if option @option{--target} is specified)\n+  (for @command{gnatmake} in all cases, and for @command{gprbuild} if option\n+  @option{--target} is specified)\n   @item @file{<prefix>/share/gpr/}\n   (for @command{gnatmake} and @command{gprbuild})\n   @item @file{<prefix>/lib/gnat/}"}, {"sha": "c3d558928eadcf939aa414afb4b8cd40a7fcfdf3", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -2690,6 +2690,8 @@ package body Sem_Ch12 is\n       Decl        : Node_Id;\n \n    begin\n+      Check_SPARK_Restriction (\"generic is not allowed\", N);\n+\n       --  We introduce a renaming of the enclosing package, to have a usable\n       --  entity as the prefix of an expanded name for a local entity of the\n       --  form Par.P.Q, where P is the generic package. This is because a local\n@@ -2811,6 +2813,8 @@ package body Sem_Ch12 is\n       Typ         : Entity_Id;\n \n    begin\n+      Check_SPARK_Restriction (\"generic is not allowed\", N);\n+\n       --  Create copy of generic unit, and save for instantiation. If the unit\n       --  is a child unit, do not copy the specifications for the parent, which\n       --  are not part of the generic tree.\n@@ -3051,6 +3055,8 @@ package body Sem_Ch12 is\n    --  Start of processing for Analyze_Package_Instantiation\n \n    begin\n+      Check_SPARK_Restriction (\"generic is not allowed\", N);\n+\n       --  Very first thing: apply the special kludge for Text_IO processing\n       --  in case we are instantiating one of the children of [Wide_]Text_IO.\n \n@@ -4195,6 +4201,8 @@ package body Sem_Ch12 is\n    --  Start of processing for Analyze_Subprogram_Instantiation\n \n    begin\n+      Check_SPARK_Restriction (\"generic is not allowed\", N);\n+\n       --  Very first thing: apply the special kludge for Text_IO processing\n       --  in case we are instantiating one of the children of [Wide_]Text_IO.\n       --  Of course such an instantiation is bogus (these are packages, not"}, {"sha": "127d93d99bb25b15edcf9541b6d22f7b02e3dca1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -2064,14 +2064,14 @@ package body Sem_Ch3 is\n       D := First (L);\n       while Present (D) loop\n \n-         --  Package specification cannot contain a package declaration in\n-         --  SPARK.\n+         --  Package spec cannot contain a package declaration in SPARK\n \n          if Nkind (D) = N_Package_Declaration\n            and then Nkind (Parent (L)) = N_Package_Specification\n          then\n-            Check_SPARK_Restriction (\"package specification cannot contain \"\n-                                      & \"a package declaration\", D);\n+            Check_SPARK_Restriction\n+              (\"package specification cannot contain a package declaration\",\n+               D);\n          end if;\n \n          --  Complete analysis of declaration"}, {"sha": "fe9cb2ef526a05e997c0ab4d15041c505f826d47", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -422,9 +422,7 @@ package body Sem_Prag is\n       --  Checks that the given argument has an identifier, and if so, requires\n       --  it to match one of the given identifier names. If there is no\n       --  identifier, or a non-matching identifier, then an error message is\n-      --  given and Pragma_Exit is raised. This checks the optional identifier\n-      --  of a pragma argument, not the argument itself like\n-      --  Check_Arg_Is_One_Of does.\n+      --  given and Pragma_Exit is raised.\n \n       procedure Check_In_Main_Program;\n       --  Common checks for pragmas that appear within a main program\n@@ -13247,18 +13245,20 @@ package body Sem_Prag is\n          -- Test_Case --\n          ---------------\n \n-         --  pragma Test_Case ([Name     =>] static_string_EXPRESSION\n-         --                   ,[Mode     =>] (Normal | Robustness)\n+         --  pragma Test_Case ([Name     =>] Static_String_EXPRESSION\n+         --                   ,[Mode     =>] MODE_TYPE\n          --                  [, Requires =>  Boolean_EXPRESSION]\n          --                  [, Ensures  =>  Boolean_EXPRESSION]);\n \n+         --  MODE_TYPE ::= Normal | Robustness\n+\n          when Pragma_Test_Case => Test_Case : declare\n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (3);\n             Check_At_Most_N_Arguments (4);\n             Check_Arg_Order\n-              ((Name_Name, Name_Mode, Name_Requires, Name_Ensures));\n+                 ((Name_Name, Name_Mode, Name_Requires, Name_Ensures));\n \n             Check_Optional_Identifier (Arg1, Name_Name);\n             Check_Arg_Is_Static_Expression (Arg1, Standard_String);"}, {"sha": "8b662676c0cc9f772c0e7e116956675a9d91a29b", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=a54d0eb4b0cb6335ddff8b01aad449a0d31fe6fb", "patch": "@@ -26,7 +26,6 @@\n with Debug;  use Debug;\n with Osint;  use Osint;\n with Opt;    use Opt;\n-with Output; use Output;\n \n with System.WCh_Con; use System.WCh_Con;\n \n@@ -166,14 +165,6 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             Check_Only := True;\n \n-         --  Processing for C switch\n-\n-         when 'C' =>\n-            Ptr := Ptr + 1;\n-            Ada_Bind_File := False;\n-\n-            Write_Line (\"warning: gnatbind switch -C is obsolescent\");\n-\n          --  Processing for d switch\n \n          when 'd' =>"}]}