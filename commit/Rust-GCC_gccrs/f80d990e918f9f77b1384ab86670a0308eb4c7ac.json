{"sha": "f80d990e918f9f77b1384ab86670a0308eb4c7ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgwZDk5MGU5MThmOWY3N2IxMzg0YWI4NjY3MGEwMzA4ZWI0YzdhYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-16T04:47:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-16T04:47:18Z"}, "message": "Don't crash on recursive consts.\n\nFrom-SVN: r167899", "tree": {"sha": "4acc5c2525868ba09829a9427d0d49fcbfbc6dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4acc5c2525868ba09829a9427d0d49fcbfbc6dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f80d990e918f9f77b1384ab86670a0308eb4c7ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80d990e918f9f77b1384ab86670a0308eb4c7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80d990e918f9f77b1384ab86670a0308eb4c7ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80d990e918f9f77b1384ab86670a0308eb4c7ac/comments", "author": null, "committer": null, "parents": [{"sha": "a2c76d48b566cbf71672ce4681b9b873d4dd9b13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c76d48b566cbf71672ce4681b9b873d4dd9b13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c76d48b566cbf71672ce4681b9b873d4dd9b13"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "553e6d662c31531504b79a445641784114962f2e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80d990e918f9f77b1384ab86670a0308eb4c7ac/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80d990e918f9f77b1384ab86670a0308eb4c7ac/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=f80d990e918f9f77b1384ab86670a0308eb4c7ac", "patch": "@@ -2292,7 +2292,7 @@ class Const_expression : public Expression\n  public:\n   Const_expression(Named_object* constant, source_location location)\n     : Expression(EXPRESSION_CONST_REFERENCE, location),\n-      constant_(constant), type_(NULL)\n+      constant_(constant), type_(NULL), seen_(false)\n   { }\n \n   const std::string&\n@@ -2350,6 +2350,9 @@ class Const_expression : public Expression\n   // The type of this reference.  This is used if the constant has an\n   // abstract type.\n   Type* type_;\n+  // Used to prevent infinite recursion when a constant incorrectly\n+  // refers to itself.\n+  mutable bool seen_;\n };\n \n // Lower a constant expression.  This is where we convert the\n@@ -2387,6 +2390,9 @@ bool\n Const_expression::do_integer_constant_value(bool iota_is_constant, mpz_t val,\n \t\t\t\t\t    Type** ptype) const\n {\n+  if (this->seen_)\n+    return false;\n+\n   Type* ctype;\n   if (this->type_ != NULL)\n     ctype = this->type_;\n@@ -2396,9 +2402,14 @@ Const_expression::do_integer_constant_value(bool iota_is_constant, mpz_t val,\n     return false;\n \n   Expression* e = this->constant_->const_value()->expr();\n+\n+  this->seen_ = true;\n+\n   Type* t;\n   bool r = e->integer_constant_value(iota_is_constant, val, &t);\n \n+  this->seen_ = false;\n+\n   if (r\n       && ctype != NULL\n       && !Integer_expression::check_constant(val, ctype, this->location()))\n@@ -2413,6 +2424,9 @@ Const_expression::do_integer_constant_value(bool iota_is_constant, mpz_t val,\n bool\n Const_expression::do_float_constant_value(mpfr_t val, Type** ptype) const\n {\n+  if (this->seen_)\n+    return false;\n+\n   Type* ctype;\n   if (this->type_ != NULL)\n     ctype = this->type_;\n@@ -2421,9 +2435,14 @@ Const_expression::do_float_constant_value(mpfr_t val, Type** ptype) const\n   if (ctype != NULL && ctype->float_type() == NULL)\n     return false;\n \n+  this->seen_ = true;\n+\n   Type* t;\n   bool r = this->constant_->const_value()->expr()->float_constant_value(val,\n \t\t\t\t\t\t\t\t\t&t);\n+\n+  this->seen_ = false;\n+\n   if (r && ctype != NULL)\n     {\n       if (!Float_expression::check_constant(val, ctype, this->location()))\n@@ -2440,6 +2459,9 @@ bool\n Const_expression::do_complex_constant_value(mpfr_t real, mpfr_t imag,\n \t\t\t\t\t    Type **ptype) const\n {\n+  if (this->seen_)\n+    return false;\n+\n   Type* ctype;\n   if (this->type_ != NULL)\n     ctype = this->type_;\n@@ -2448,10 +2470,15 @@ Const_expression::do_complex_constant_value(mpfr_t real, mpfr_t imag,\n   if (ctype != NULL && ctype->complex_type() == NULL)\n     return false;\n \n+  this->seen_ = true;\n+\n   Type *t;\n   bool r = this->constant_->const_value()->expr()->complex_constant_value(real,\n \t\t\t\t\t\t\t\t\t  imag,\n \t\t\t\t\t\t\t\t\t  &t);\n+\n+  this->seen_ = false;\n+\n   if (r && ctype != NULL)\n     {\n       if (!Complex_expression::check_constant(real, imag, ctype,\n@@ -2470,13 +2497,32 @@ Const_expression::do_type()\n {\n   if (this->type_ != NULL)\n     return this->type_;\n+\n+  if (this->seen_)\n+    {\n+      this->report_error(_(\"constant refers to itself\"));\n+      this->type_ = Type::make_error_type();\n+      return this->type_;\n+    }\n+\n+  this->seen_ = true;\n+\n   Named_constant* nc = this->constant_->const_value();\n   Type* ret = nc->type();\n+\n   if (ret != NULL)\n-    return ret;\n+    {\n+      this->seen_ = false;\n+      return ret;\n+    }\n+\n   // During parsing, a named constant may have a NULL type, but we\n   // must not return a NULL type here.\n-  return nc->expr()->type();\n+  ret = nc->expr()->type();\n+\n+  this->seen_ = false;\n+\n+  return ret;\n }\n \n // Set the type of the const reference."}, {"sha": "29462998836d3065b0b065437974bbe646e57059", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80d990e918f9f77b1384ab86670a0308eb4c7ac/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80d990e918f9f77b1384ab86670a0308eb4c7ac/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=f80d990e918f9f77b1384ab86670a0308eb4c7ac", "patch": "@@ -1472,7 +1472,8 @@ Check_types_traverse::constant(Named_object* named_object, bool)\n       && !ctype->is_boolean_type()\n       && !ctype->is_string_type())\n     {\n-      error_at(constant->location(), \"invalid constant type\");\n+      if (!ctype->is_error_type())\n+\terror_at(constant->location(), \"invalid constant type\");\n       constant->set_error();\n     }\n   else if (!constant->expr()->is_constant())"}]}