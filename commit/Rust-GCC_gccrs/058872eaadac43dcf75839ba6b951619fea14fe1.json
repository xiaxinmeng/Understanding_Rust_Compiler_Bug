{"sha": "058872eaadac43dcf75839ba6b951619fea14fe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4ODcyZWFhZGFjNDNkY2Y3NTgzOWJhNmI5NTE2MTlmZWExNGZlMQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-06-08T20:09:46Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-06-08T20:09:46Z"}, "message": "p8vector-builtin-3.c: Add vec_pack test.\n\ngcc/testsuite/ChangeLog:\n\n2018-06-08  Carl Love  <cel@us.ibm.com>\n\n \t* gcc.target/powerpc/p8vector-builtin-3.c: Add vec_pack test. Update\n\tvpkudum counts.\n \t* gcc.target/powerpc/p9-extract-3.c: Make second argument of\n\tvec_extract a signed int.\n \t* gcc.target/powerpc/vec-cmp.c: Add vec_cmple, vec_cmpge tests. Update,\n\tvcmpgtsb, vcmpgtub, vcmpgtsh, vcmpgtuh, vcmpgtsw, vcmpgtsw, vcmpgtuw,\n\tvcmpgtsd, vcmpgtud.\n\t* gcc.target/powerpc/vsx-extract-4.c: Make second argument of\n\tvec_extract a signed int.\n\t* gcc.target/powerpc/vsx-extract-5.c: Make second argument of\n\tvec_extract a signed int.\n \t* gcc.target/powerpc/vsx-vector-7.c (foo): Add tests for vec_sel and\n\tvec_xor builtins.  Update xxsel, xxlxor counts.\n\nFrom-SVN: r261347", "tree": {"sha": "4ad232a991fedd8e6c6f4d565b6b724bb22da937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad232a991fedd8e6c6f4d565b6b724bb22da937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058872eaadac43dcf75839ba6b951619fea14fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058872eaadac43dcf75839ba6b951619fea14fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058872eaadac43dcf75839ba6b951619fea14fe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058872eaadac43dcf75839ba6b951619fea14fe1/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f2fc3252c04fbd51de8d0ff95bb85e2049f0887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2fc3252c04fbd51de8d0ff95bb85e2049f0887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2fc3252c04fbd51de8d0ff95bb85e2049f0887"}], "stats": {"total": 340, "additions": 292, "deletions": 48}, "files": [{"sha": "20ac7c89c96bd2a45fde03cfb4e0d980a5b7827b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=058872eaadac43dcf75839ba6b951619fea14fe1", "patch": "@@ -1,3 +1,19 @@\n+2018-06-08  Carl Love  <cel@us.ibm.com>\n+\n+ \t* gcc.target/powerpc/p8vector-builtin-3.c: Add vec_pack test. Update\n+\tvpkudum counts.\n+ \t* gcc.target/powerpc/p9-extract-3.c: Make second argument of\n+\tvec_extract a signed int.\n+ \t* gcc.target/powerpc/vec-cmp.c: Add vec_cmple, vec_cmpge tests. Update,\n+\tvcmpgtsb, vcmpgtub, vcmpgtsh, vcmpgtuh, vcmpgtsw, vcmpgtsw, vcmpgtuw,\n+\tvcmpgtsd, vcmpgtud.\n+\t* gcc.target/powerpc/vsx-extract-4.c: Make second argument of\n+\tvec_extract a signed int.\n+\t* gcc.target/powerpc/vsx-extract-5.c: Make second argument of\n+\tvec_extract a signed int.\n+ \t* gcc.target/powerpc/vsx-vector-7.c (foo): Add tests for vec_sel and\n+\tvec_xor builtins.  Update xxsel, xxlxor counts.\n+\n 2018-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/86059 "}, {"sha": "56ba6c722cba85d9a38dfe887e802448a5069354", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-3.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-3.c?ref=058872eaadac43dcf75839ba6b951619fea14fe1", "patch": "@@ -33,7 +33,12 @@ vi_sign vi_pack_2 (vll_sign a, vll_sign b)\n   return vec_pack (a, b);\n }\n \n-vi_sign vi_pack_3 (vll_sign a, vll_sign b)\n+vi_uns vi_pack_3 (vll_uns a, vll_uns b)\n+{\n+  return vec_pack (a, b);\n+}\n+\n+vi_sign vi_pack_4 (vll_sign a, vll_sign b)\n {\n   return vec_vpkudum (a, b);\n }\n@@ -98,7 +103,7 @@ vll_sign vll_unpack_lo_3 (vi_sign a)\n   return vec_vupklsw (a);\n }\n \n-/* { dg-final { scan-assembler-times \"vpkudum\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpkudum\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpkuwum\" 3 } } */\n /* { dg-final { scan-assembler-times \"vpkuhum\" 3 } } */\n /* { dg-final { scan-assembler-times \"vupklsw\" 3 } } */"}, {"sha": "68a0cda01ab3f856bb03dd913fbe2811bb557e96", "filename": "gcc/testsuite/gcc.target/powerpc/p9-extract-3.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-3.c?ref=058872eaadac43dcf75839ba6b951619fea14fe1", "patch": "@@ -14,84 +14,96 @@\n double\n fpcvt_int_0 (vector int a)\n {\n-  int b = vec_extract (a, 0);\n+  int c = 0;\n+  int b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_int_3 (vector int a)\n {\n-  int b = vec_extract (a, 3);\n+  int c = 3;\n+  int b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_uint_0 (vector unsigned int a)\n {\n-  unsigned int b = vec_extract (a, 0);\n+  int c = 0;\n+  unsigned int b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_uint_3 (vector unsigned int a)\n {\n-  unsigned int b = vec_extract (a, 3);\n+  int c = 3;\n+  unsigned int b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_short_0 (vector short a)\n {\n-  short b = vec_extract (a, 0);\n+  int c = 0;\n+  short b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_short_7 (vector short a)\n {\n-  short b = vec_extract (a, 7);\n+  int c = 7;\n+  short b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_ushort_0 (vector unsigned short a)\n {\n-  unsigned short b = vec_extract (a, 0);\n+  int c = 0;\n+  unsigned short b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_ushort_7 (vector unsigned short a)\n {\n-  unsigned short b = vec_extract (a, 7);\n+  int c = 7;\n+  unsigned short b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_schar_0 (vector signed char a)\n {\n-  signed char b = vec_extract (a, 0);\n+  int c = 0;\n+  signed char b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_schar_15 (vector signed char a)\n {\n-  signed char b = vec_extract (a, 15);\n+  int c = 15;\n+  signed char b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_uchar_0 (vector unsigned char a)\n {\n-  unsigned char b = vec_extract (a, 0);\n+  int c = 0;\n+  unsigned char b = vec_extract (a, c);\n   return (double)b;\n }\n \n double\n fpcvt_uchar_15 (vector unsigned char a)\n {\n-  signed char b = vec_extract (a, 15);\n+  int c = 15;\n+  signed char b = vec_extract (a, c);\n   return (double)b;\n }\n "}, {"sha": "50b00a1d6ac5f6ac46aa3d7227f59caac2984288", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cmp.c", "status": "modified", "additions": 151, "deletions": 8, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp.c?ref=058872eaadac43dcf75839ba6b951619fea14fe1", "patch": "@@ -3,14 +3,14 @@\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc64*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-options \"-O2 -mcpu=power8\" } */\n-/* { dg-final { scan-assembler-times \"vcmpgtsb\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtub\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtsh\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtuh\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtsw\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtuw\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtsd\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vcmpgtud\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsb\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtub\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsh\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtuh\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtuw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsd\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud\" 4 } } */\n /* { dg-final { scan-assembler-times \"xxlnor\" 16 } } */\n \n #include <altivec.h>\n@@ -63,6 +63,18 @@ cmple_ul (vector unsigned long long x, vector unsigned long long y)\n   return vec_cmple (x, y);\n }\n \n+vector bool int\n+cmple_f (vector float x, vector float y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool long long int\n+cmple_d (vector double x, vector double y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n vector bool char\n cmpge_sc (vector signed char x, vector signed char y)\n {\n@@ -111,3 +123,134 @@ cmpge_ul (vector unsigned long long x, vector unsigned long long y)\n   return vec_cmpge (x, y);\n }\n \n+vector bool int\n+cmpge_f (vector float x, vector float y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool long long int\n+cmpge_d (vector double x, vector double y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool int\n+cmpgt_ui (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool int\n+cmpgt_f (vector float x, vector float y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool long long int\n+cmpgt_d (vector double x, vector double y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool long long\n+cmpgt_sl (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool long long\n+cmpgt_ul (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool char\n+cmpgt_sc (vector signed char x, vector signed char y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool char\n+cmpgt_uc (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool short\n+cmpgt_ss (vector signed short x, vector signed short y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool short\n+cmpgt_us (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool int\n+cmpgt_si (vector signed int x, vector signed int y)\n+{\n+  return vec_cmpgt (x, y);\n+}\n+\n+vector bool int\n+cmplt_ui (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool int\n+cmplt_f (vector float x, vector float y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool long long int\n+cmplt_d (vector double x, vector double y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool long long\n+cmplt_sl (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool long long\n+cmplt_ul (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool char\n+cmplt_sc (vector signed char x, vector signed char y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool char\n+cmplt_uc (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool short\n+cmplt_ss (vector signed short x, vector signed short y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool short\n+cmplt_us (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmplt (x, y);\n+}\n+\n+vector bool int\n+cmplt_si (vector signed int x, vector signed int y)\n+{\n+  return vec_cmplt (x, y);\n+}"}, {"sha": "bf315dcbc66304563858f6074c6111fb1840caea", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-extract-4.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-extract-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-extract-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-extract-4.c?ref=058872eaadac43dcf75839ba6b951619fea14fe1", "patch": "@@ -22,55 +22,63 @@\n TYPE\n foo_0s (vector int v)\n {\n-  int i = vec_extract (v, 0);\n+  int c = 0;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_1s (vector int v)\n {\n-  int i = vec_extract (v, 1);\n+  int c = 1;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_2s (vector int v)\n {\n-  int i = vec_extract (v, 2);\n+  int c = 2;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_3s (vector int v)\n {\n-  int i = vec_extract (v, 3);\n+  int c = 3;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_0u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 0);\n+  int c = 0;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }\n \n TYPE\n foo_1u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 1);\n+  int c = 1;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }\n \n TYPE\n foo_2u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 2);\n+  int c = 2;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }\n \n TYPE\n foo_3u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 3);\n+  int c = 3;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }"}, {"sha": "5f844befd4e1a7c56feb16b279306b9220cc4d16", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-extract-5.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-extract-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-extract-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-extract-5.c?ref=058872eaadac43dcf75839ba6b951619fea14fe1", "patch": "@@ -23,55 +23,63 @@\n TYPE\n foo_0s (vector int v)\n {\n-  int i = vec_extract (v, 0);\n+  int c = 0;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_1s (vector int v)\n {\n-  int i = vec_extract (v, 1);\n+  int c = 1;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_2s (vector int v)\n {\n-  int i = vec_extract (v, 2);\n+  int c = 2;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_3s (vector int v)\n {\n-  int i = vec_extract (v, 3);\n+  int c = 3;\n+  int i = vec_extract (v, c);\n   return (TYPE) i;\n }\n \n TYPE\n foo_0u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 0);\n+  int c = 0;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }\n \n TYPE\n foo_1u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 1);\n+  int c = 1;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }\n \n TYPE\n foo_2u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 2);\n+  int c = 2;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }\n \n TYPE\n foo_3u (vector unsigned int v)\n {\n-  unsigned int u = vec_extract (v, 3);\n+  int c = 3;\n+  unsigned int u = vec_extract (v, c);\n   return (TYPE) u;\n }"}, {"sha": "6032be4d6cee0e61626e1b3267d7ddacd6e5d2ec", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-7.c", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058872eaadac43dcf75839ba6b951619fea14fe1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c?ref=058872eaadac43dcf75839ba6b951619fea14fe1", "patch": "@@ -7,28 +7,80 @@\n /* Test VSX built-ins added for version 1.1 of ELFv2 ABI.  */\n \n vector bool     long long vbla, vblb, vblc;\n-vector signed   long long vsla;\n-vector unsigned long long vula, vulb, vulc;\n+vector bool char vbca, vbcb, vbcc;\n+vector bool int vbia, vbib, vbic;\n+vector signed char vsca, vscb, vscc;\n+vector unsigned char vuca, vucb, vucc;\n+vector signed int vsia, vsib, vsic;\n+vector unsigned int vuia, vuib, vuic;\n+\n+vector unsigned long long vulla, vullb, vullc;\n+vector signed long long vslla, vsllb, vsllc;\n+vector bool long long vblla, vbllb, vbllc;\n+vector bool short int vbsia, vbsib, vbsic;\n+vector signed short int vssia, vssib, vssic;\n+vector unsigned short int vusia, vusib, vusic;\n vector double vda, vdb;\n vector float vfa, vfb;\n \n void foo (vector bool long long *vblr,\n-\t  vector double *vdr, vector unsigned long long *vulz, vector double *vdz)\n+\t  vector double *vdr, vector unsigned long long *vullz,\n+\t  vector double *vdz, vector bool char *vbcz,\n+\t  vector signed char *vscz, vector unsigned char *vucz,\n+\t  vector bool int *vbiz, vector int *viz,\n+\t  vector unsigned int *vuiz, vector signed long long int *vslliz,\n+\t  vector bool short int *vbsiz, vector signed short int *vssiz,\n+\t  vector unsigned short int *vusiz, vector float *vfz)\n {\n   *vblr++ = vec_andc (vbla, vblb);\n-  *vdr++  = vec_double (vsla);\n-  *vdr++  = vec_double (vula);\n+  *vdr++  = vec_double (vslla);\n+  *vdr++  = vec_double (vulla);\n+\n   *vblr++ = vec_mergeh (vbla, vblb);\n   *vblr++ = vec_mergel (vbla, vblb);\n   *vblr++ = vec_nor (vbla, vblb);\n   *vblr++ = vec_or (vbla, vblb);\n   *vblr++ = vec_sel (vbla, vblb, vblc);\n-  *vblr++ = vec_sel (vbla, vblb, vulc);\n+  *vblr++ = vec_sel (vbla, vblb, vullc);\n   *vblr++ = vec_xor (vbla, vblb);\n \n-  *vulz++ = vec_sel (vula, vulb, vblc);\n+  *vullz++ = vec_sel (vulla, vullb, vbllc);\n+  *vullz++ = vec_sel (vulla, vullb, vullc);\n+\n+  *vdz++ = vec_sel(vda, vdb, vullc);\n+\n+  *vbcz++ = vec_sel (vbca, vbcb, vbcc);\n+  *vbcz++ = vec_sel (vbca, vbcb, vucc);\n+  *vbcz++ = vec_xor (vbca, vbcb);\n+  *vscz++ = vec_sel (vsca, vscb, vbcc);\n+  *vscz++ = vec_sel (vsca, vscb, vucc);\n+  *vucz++ = vec_sel (vuca, vucb, vbcc);\n+  *vucz++ = vec_sel (vuca, vucb, vucc);\n+\n+  *vbiz++ = vec_sel (vbia, vbib, vbic);\n+  *vbiz++ = vec_sel (vbia, vbib, vuic);\n+  *vbiz++ = vec_xor (vbia, vbib);\n+  *viz++ = vec_sel (vsia, vsib, vbic);\n+  *viz++ = vec_sel (vsia, vsib, vuic);\n+  *vuiz++ = vec_sel (vuia, vuib, vbic);\n+  *vuiz++ = vec_sel (vuia, vuib, vuic);\n+\n+  *vslliz++ = vec_sel(vslla, vsllb, vbllc);\n+  *vslliz++ = vec_sel(vslla, vsllb, vullc);\n+\n+  *vssiz++ = vec_sel(vssia, vssib, vbsic);\n+  *vssiz++ = vec_sel(vssia, vssib, vusic);\n+  *vusiz++ = vec_sel(vusia, vusib, vbsic);\n+  *vusiz++ = vec_sel(vusia, vusib, vusic);\n+\n+  *vbsiz++ = vec_sel (vbsia, vbsib, vbsic);\n+  *vbsiz++ = vec_sel (vbsia, vbsib, vusic);\n+  *vbsiz++ = vec_xor (vbsia, vbsib);\n \n-  *vdz++ = vec_sel(vda, vdb, vulc);\n+  *vdz++ = vec_sel (vda, vdb, vbllc);\n+  *vfz++ = vec_sel (vfa, vfb, vbic);\n+  *vfz++ = vec_sel (vfa, vfb, vuic);\n+  *vfz++ = vec_xor (vfa, vfb);\n }\n \n /* { dg-final { scan-assembler-times \"xxlandc\" 1 } } */\n@@ -38,5 +90,5 @@ void foo (vector bool long long *vblr,\n /* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,0\" 1 } } */\n /* { dg-final { scan-assembler-times \"xxlnor\" 1 } } */\n /* { dg-final { scan-assembler-times \"xxlor\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxsel\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xxlxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxsel\" 28 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 5 } } */"}]}