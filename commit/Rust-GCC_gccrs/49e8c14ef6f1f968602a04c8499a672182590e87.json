{"sha": "49e8c14ef6f1f968602a04c8499a672182590e87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDllOGMxNGVmNmYxZjk2ODYwMmEwNGM4NDk5YTY3MjE4MjU5MGU4Nw==", "commit": {"author": {"name": "Eugene Rozenfeld", "email": "erozen@microsoft.com", "date": "2020-12-10T00:44:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-20T15:31:46Z"}, "message": "Optimize combination of comparisons to dec+compare\n\nThis patch adds patterns for optimizing\nx < y || y == XXX_MIN to x <= y-1\nx >= y && y != XXX_MIN to x > y-1\nif y is an integer with TYPE_OVERFLOW_WRAPS.\n\nThis fixes pr96674.\n\nTested on x86_64-pc-linux-gnu.\n\nFor this function\n\nbool f(unsigned a, unsigned b)\n{\n    return (b == 0) | (a < b);\n}\n\nthe code without the patch is\n\ntest   esi,esi\nsete   al\ncmp    esi,edi\nseta   dl\nor     eax,edx\nret\n\nthe code with the patch is\n\nsub    esi,0x1\ncmp    esi,edi\nsetae  al\nret\n\n\tPR tree-optimization/96674\ngcc/\n\t* match.pd: New patterns: x < y || y == XXX_MIN --> x <= y - 1\n\tx >= y && y != XXX_MIN --> x > y - 1\n\ngcc/testsuite\n\t* gcc.dg/pr96674.c: New tests.", "tree": {"sha": "117f6abdfcbca618c48c14b2b7808f93a449ba4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/117f6abdfcbca618c48c14b2b7808f93a449ba4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e8c14ef6f1f968602a04c8499a672182590e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e8c14ef6f1f968602a04c8499a672182590e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e8c14ef6f1f968602a04c8499a672182590e87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e8c14ef6f1f968602a04c8499a672182590e87/comments", "author": {"login": "erozenfeld", "id": 10624223, "node_id": "MDQ6VXNlcjEwNjI0MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/10624223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erozenfeld", "html_url": "https://github.com/erozenfeld", "followers_url": "https://api.github.com/users/erozenfeld/followers", "following_url": "https://api.github.com/users/erozenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/erozenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/erozenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erozenfeld/subscriptions", "organizations_url": "https://api.github.com/users/erozenfeld/orgs", "repos_url": "https://api.github.com/users/erozenfeld/repos", "events_url": "https://api.github.com/users/erozenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/erozenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafcfcb5840b62d9fc80c12192189351e995a4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafcfcb5840b62d9fc80c12192189351e995a4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cafcfcb5840b62d9fc80c12192189351e995a4f2"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "05e7ba9a3336830e06c5463c407f9ede54d09244", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e8c14ef6f1f968602a04c8499a672182590e87/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e8c14ef6f1f968602a04c8499a672182590e87/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=49e8c14ef6f1f968602a04c8499a672182590e87", "patch": "@@ -2159,6 +2159,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (eqne == NE_EXPR)\n      { constant_boolean_node (true, type); }))))\n \n+/* y == XXX_MIN || x < y --> x <= y - 1 */\n+(simplify\n+ (bit_ior:c (eq:s @1 min_value) (lt:s @0 @1))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@1)))\n+  (le @0 (minus @1 { build_int_cst (TREE_TYPE (@1), 1); }))))\n+\n+/* y != XXX_MIN && x >= y --> x > y - 1 */\n+(simplify\n+ (bit_and:c (ne:s @1 min_value) (ge:s @0 @1))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@1)))\n+  (gt @0 (minus @1 { build_int_cst (TREE_TYPE (@1), 1); }))))\n+\n /* Convert (X == CST1) && (X OP2 CST2) to a known value\n    based on CST1 OP2 CST2.  Similarly for (X != CST1).  */\n "}, {"sha": "194ce2e63520079f55790ea99ac52e9f3d2f4a82", "filename": "gcc/testsuite/gcc.dg/pr96674.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e8c14ef6f1f968602a04c8499a672182590e87/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96674.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e8c14ef6f1f968602a04c8499a672182590e87/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96674.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96674.c?ref=49e8c14ef6f1f968602a04c8499a672182590e87", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fdump-tree-optimized -fwrapv\" } */\n+\n+#include <limits.h>\n+#include <stdbool.h>\n+\n+bool __attribute__ ((noipa)) test1 (unsigned a, unsigned b)\n+{\n+    return (b == 0) | (a < b);\n+}\n+\n+bool __attribute__ ((noipa)) test2 (int a, int b)\n+{\n+    return (b == INT_MIN) | (a < b);\n+}\n+\n+bool __attribute__ ((noipa)) test3 (unsigned a, unsigned b)\n+{\n+    return (b != 0) & (a >= b);\n+}\n+\n+bool __attribute__ ((noipa)) test4 (int a, int b)\n+{\n+    return (b != INT_MIN) & (a >= b);\n+}\n+\n+int main()\n+{\n+    if (!test1 (1, 0) || !test1 (1, 2) || test1 (2, 1) ||\n+        !test2 (1, INT_MIN) || !test2 (1, 2) || test2 (2, 1) ||\n+        test3 (1, 0) || test3 (1, 2) || !test3 (2, 1) ||\n+        test4 (1, INT_MIN) || test4 (1, 2) || !test4 (2, 1)) {\n+        __builtin_abort();\t\n+    }    \t\n+\n+    return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 4294967295;\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ -1;\" 2 \"optimized\" } } */"}]}