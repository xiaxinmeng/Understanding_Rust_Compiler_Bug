{"sha": "df0227c4250e97e8d72b6c29ab90101a7f7885c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwMjI3YzQyNTBlOTdlOGQ3MmI2YzI5YWI5MDEwMWE3Zjc4ODVjMQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-12-07T10:30:49Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-12-07T10:30:49Z"}, "message": "re PR tree-optimization/50744 (ice in good_cloning_opportunity_p)\n\n2011-12-07  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/50744\n\t* ipa-cp.c (good_cloning_opportunity_p): Assert size_cost is positive,\n\tcompute evaluation in HOST_WIDEST_INT.\n\t(safe_add): New function\n\t(propagate_effects): Use safe_add to accumulate effects.\n\n\t* testsuite/gcc.dg/ipa/pr50744.c: New test.\n\nFrom-SVN: r182076", "tree": {"sha": "1007b356a4bbf5908128fc1967883d9ca68bbcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1007b356a4bbf5908128fc1967883d9ca68bbcd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df0227c4250e97e8d72b6c29ab90101a7f7885c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0227c4250e97e8d72b6c29ab90101a7f7885c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0227c4250e97e8d72b6c29ab90101a7f7885c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0227c4250e97e8d72b6c29ab90101a7f7885c1/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c19bd769205d1847639eaddcd897058d8b7218da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19bd769205d1847639eaddcd897058d8b7218da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19bd769205d1847639eaddcd897058d8b7218da"}], "stats": {"total": 175, "additions": 163, "deletions": 12}, "files": [{"sha": "5028c5fbbdc57ed3dec2271452998561141aed72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df0227c4250e97e8d72b6c29ab90101a7f7885c1", "patch": "@@ -1,3 +1,11 @@\n+2011-12-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50744\n+\t* ipa-cp.c (good_cloning_opportunity_p): Assert size_cost is positive,\n+\tcompute evaluation in HOST_WIDEST_INT.\n+\t(safe_add): New function\n+\t(propagate_effects): Use safe_add to accumulate effects.\n+\n 2011-12-06  Joel Sherrill <joel.sherrill@oarcorp.com>\n \n \t* config/rs6000/rtems.h: Switch to using global_options_set"}, {"sha": "1c5a58241e12afdf64e8acefbe1389480aa5d8d4", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=df0227c4250e97e8d72b6c29ab90101a7f7885c1", "patch": "@@ -1210,31 +1210,33 @@ good_cloning_opportunity_p (struct cgraph_node *node, int time_benefit,\n       || !optimize_function_for_speed_p (DECL_STRUCT_FUNCTION (node->decl)))\n     return false;\n \n-  gcc_checking_assert (size_cost >= 0);\n+  gcc_assert (size_cost > 0);\n \n-  /* FIXME:  These decisions need tuning.  */\n   if (max_count)\n     {\n-      int evaluation, factor = (count_sum * 1000) / max_count;\n-\n-      evaluation = (time_benefit * factor) / size_cost;\n+      int factor = (count_sum * 1000) / max_count;\n+      HOST_WIDEST_INT evaluation = (((HOST_WIDEST_INT) time_benefit * factor)\n+\t\t\t\t    / size_cost);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"     good_cloning_opportunity_p (time: %i, \"\n \t\t \"size: %i, count_sum: \" HOST_WIDE_INT_PRINT_DEC\n-\t\t \") -> evaluation: %i, threshold: %i\\n\",\n+\t\t \") -> evaluation: \" HOST_WIDEST_INT_PRINT_DEC\n+\t\t \", threshold: %i\\n\",\n \t\t time_benefit, size_cost, (HOST_WIDE_INT) count_sum,\n \t\t evaluation, 500);\n \n       return evaluation >= PARAM_VALUE (PARAM_IPA_CP_EVAL_THRESHOLD);\n     }\n   else\n     {\n-      int evaluation = (time_benefit * freq_sum) / size_cost;\n+      HOST_WIDEST_INT evaluation = (((HOST_WIDEST_INT) time_benefit * freq_sum)\n+\t\t\t\t    / size_cost);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"     good_cloning_opportunity_p (time: %i, \"\n-\t\t \"size: %i, freq_sum: %i) -> evaluation: %i, threshold: %i\\n\",\n+\t\t \"size: %i, freq_sum: %i) -> evaluation: \"\n+\t\t HOST_WIDEST_INT_PRINT_DEC \", threshold: %i\\n\",\n \t\t time_benefit, size_cost, freq_sum, evaluation,\n \t\t CGRAPH_FREQ_BASE /2);\n \n@@ -1561,6 +1563,20 @@ propagate_constants_topo (struct topo_info *topo)\n     }\n }\n \n+\n+/* Return the sum of A and B if none of them is bigger than INT_MAX/2, return\n+   the bigger one if otherwise.  */\n+\n+static int\n+safe_add (int a, int b)\n+{\n+  if (a > INT_MAX/2 || b > INT_MAX/2)\n+    return a > b ? a : b;\n+  else\n+    return a + b;\n+}\n+\n+\n /* Propagate the estimated effects of individual values along the topological\n    from the dependant values to those they depend on.  */\n \n@@ -1577,17 +1593,20 @@ propagate_effects (void)\n \n       for (val = base; val; val = val->scc_next)\n \t{\n-\t  time += val->local_time_benefit + val->prop_time_benefit;\n-\t  size += val->local_size_cost + val->prop_size_cost;\n+\t  time = safe_add (time,\n+\t\t\t   val->local_time_benefit + val->prop_time_benefit);\n+\t  size = safe_add (size, val->local_size_cost + val->prop_size_cost);\n \t}\n \n       for (val = base; val; val = val->scc_next)\n \tfor (src = val->sources; src; src = src->next)\n \t  if (src->val\n \t      && cgraph_maybe_hot_edge_p (src->cs))\n \t    {\n-\t      src->val->prop_time_benefit += time;\n-\t      src->val->prop_size_cost += size;\n+\t      src->val->prop_time_benefit = safe_add (time,\n+\t\t\t\t\t\tsrc->val->prop_time_benefit);\n+\t      src->val->prop_size_cost = safe_add (size,\n+\t\t\t\t\t\t   src->val->prop_size_cost);\n \t    }\n     }\n }"}, {"sha": "e87e85f7433c834eb07e4d866346fdebb8119726", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df0227c4250e97e8d72b6c29ab90101a7f7885c1", "patch": "@@ -1,3 +1,8 @@\n+2011-12-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50744\n+\t* gcc.dg/ipa/pr50744.c: New test.\n+\n 2011-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/51430"}, {"sha": "05353489265f0fa13bceca612d418727f6922cd8", "filename": "gcc/testsuite/gcc.dg/ipa/pr50744.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr50744.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0227c4250e97e8d72b6c29ab90101a7f7885c1/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr50744.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr50744.c?ref=df0227c4250e97e8d72b6c29ab90101a7f7885c1", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-optimize-sibling-calls\" } */\n+\n+extern int use_data (void *p_01, void *p_02, void *p_03, void *p_04, void *p_05,\n+\t\t     void *p_06, void *p_07, void *p_08, void *p_09, void *p_10,\n+\t\t     void *p_11, void *p_12, void *p_13, void *p_14, void *p_15,\n+\t\t     void *p_16, void *p_17, void *p_18, void *p_19, void *p_20,\n+\t\t     void *p_21, void *p_22, void *p_23, void *p_24, void *p_25,\n+\t\t     void *p_26, void *p_27, void *p_28, void *p_29,\n+\t\t     void *p_30);\n+\n+extern int idx (int i, int j, int n);\n+\n+struct stuff\n+{\n+  int decision;\n+  int *a, *b, *c;\n+  int res;\n+};\n+\n+\n+#define some_large_stuff(stuff, n) { \\\n+  int i, j, k; \\\n+  for (i = 0; i < n; i++) \\\n+    for (j = 0; j < n; j++) \\\n+      { \\\n+\tint v = stuff->c[idx(i, j, n)]; \\\n+\tfor (k = 0; k < n; k++) \\\n+\t  v += stuff->a[idx(i, k, n)] * stuff->b[idx(k,j,n)]; \\\n+\tstuff->c[idx(i, j, n)] = v; \\\n+      } \\\n+}\n+\n+#define recursion if (iter > 0) \\\n+    foo (stuff, iter - 1, (void *) -1, p_01, p_02, p_03, p_04, p_05, p_06, \\\n+      p_07, p_08, p_09, p_10, p_11, p_12, p_13, p_14, p_15, p_16, p_17, \\\n+     p_18, p_19, p_20, p_21, p_22, p_23, p_24, p_25, p_26, p_27, p_28, p_29); \\\n+    else \\\n+      foo (stuff, iter, p_01, p_02, p_03, p_04, p_05, p_06, p_07, p_08, p_09, \\\n+\tp_10, p_11, p_12, p_13, p_14, p_15, p_16, p_17, p_18, p_19, p_20, \\\n+        p_21,p_22, p_23, p_24, p_25, p_26, p_27, p_28, p_29, p_30)\n+\n+void\n+foo (struct stuff *stuff,\n+     int iter,\n+     void *p_01, void *p_02, void *p_03, void *p_04, void *p_05,\n+     void *p_06, void *p_07, void *p_08, void *p_09, void *p_10,\n+     void *p_11, void *p_12, void *p_13, void *p_14, void *p_15,\n+     void *p_16, void *p_17, void *p_18, void *p_19, void *p_20,\n+     void *p_21, void *p_22, void *p_23, void *p_24, void *p_25,\n+     void *p_26, void *p_27, void *p_28, void *p_29, void *p_30)\n+{\n+ switch (stuff->decision)\n+   {\n+   case 0:\n+     some_large_stuff (stuff, 83);\n+     stuff->res =\n+       use_data (p_01, p_02, p_03, p_04, p_05, p_06, p_07, p_08, p_09, p_10,\n+\t\t p_11, p_12, p_13, p_14, p_15, p_16, p_17, p_18, p_19, p_20,\n+\t\t p_21, p_22, p_23, p_24, p_25, p_26, p_27, p_28, p_29, p_30);\n+     recursion;\n+     break;\n+\n+   case 1:\n+     some_large_stuff (stuff, 25);\n+     stuff->res =\n+       use_data (p_11, p_02, p_03, p_04, p_05, p_06, p_07, p_08, p_09, p_10,\n+\t\t p_21, p_12, p_13, p_14, p_15, p_16, p_17, p_18, p_19, p_20,\n+\t\t p_01, p_22, p_23, p_24, p_25, p_26, p_27, p_28, p_29, p_30);\n+     recursion;\n+     break;\n+\n+   case 3:\n+     some_large_stuff (stuff, 139);\n+     stuff->res =\n+       use_data (p_01, p_12, p_03, p_04, p_05, p_06, p_07, p_08, p_09, p_10,\n+\t\t p_11, p_22, p_13, p_14, p_15, p_16, p_17, p_18, p_19, p_20,\n+\t\t p_21, p_02, p_23, p_24, p_25, p_26, p_27, p_28, p_29, p_30);\n+     recursion;\n+     break;\n+\n+   case 4:\n+     some_large_stuff (stuff, 32);\n+     stuff->res =\n+       use_data (p_01, p_02, p_13, p_04, p_05, p_06, p_07, p_08, p_09, p_10,\n+\t\t p_11, p_12, p_23, p_14, p_15, p_16, p_17, p_18, p_19, p_20,\n+\t\t p_21, p_22, p_03, p_24, p_25, p_26, p_27, p_28, p_29, p_30);\n+     recursion;\n+     break;\n+\n+   case 5:\n+     some_large_stuff (stuff, 205);\n+     stuff->res =\n+       use_data (p_01, p_02, p_03, p_04, p_15, p_06, p_07, p_08, p_09, p_10,\n+\t\t p_11, p_12, p_13, p_14, p_25, p_16, p_17, p_18, p_19, p_20,\n+\t\t p_21, p_22, p_23, p_24, p_05, p_26, p_27, p_28, p_29, p_30);\n+     recursion;\n+     break;\n+\n+   case 6:\n+     some_large_stuff (stuff, 64);\n+     stuff->res =\n+       use_data (p_01, p_02, p_03, p_04, p_05, p_16, p_07, p_08, p_09, p_10,\n+\t\t p_11, p_12, p_13, p_14, p_15, p_26, p_17, p_18, p_19, p_20,\n+\t\t p_21, p_22, p_23, p_24, p_25, p_06, p_27, p_28, p_29, p_30);\n+     recursion;\n+     break;\n+   }\n+}\n+\n+#define NULL (void *)0\n+\n+void\n+bar (struct stuff *stuff, int iter)\n+{\n+  foo (stuff, iter, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n+       NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n+       NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\n+}"}]}