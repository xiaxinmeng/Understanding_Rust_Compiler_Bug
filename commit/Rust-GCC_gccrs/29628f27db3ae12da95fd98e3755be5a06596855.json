{"sha": "29628f27db3ae12da95fd98e3755be5a06596855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2MjhmMjdkYjNhZTEyZGE5NWZkOThlMzc1NWJlNWEwNjU5Njg1NQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-11-16T19:58:40Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-11-16T19:58:40Z"}, "message": "Some SSE fixes\n\nFrom-SVN: r47096", "tree": {"sha": "5c45c88666fb2d81898e3bda9b07ba7c7790df5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c45c88666fb2d81898e3bda9b07ba7c7790df5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29628f27db3ae12da95fd98e3755be5a06596855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29628f27db3ae12da95fd98e3755be5a06596855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29628f27db3ae12da95fd98e3755be5a06596855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29628f27db3ae12da95fd98e3755be5a06596855/comments", "author": null, "committer": null, "parents": [{"sha": "54b6b24152d94ccc92632bd6a67812ede20b1aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b6b24152d94ccc92632bd6a67812ede20b1aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b6b24152d94ccc92632bd6a67812ede20b1aae"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "4a593c4917be58a6c3048ec949468c17c799d050", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29628f27db3ae12da95fd98e3755be5a06596855/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29628f27db3ae12da95fd98e3755be5a06596855/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29628f27db3ae12da95fd98e3755be5a06596855", "patch": "@@ -1,3 +1,15 @@\n+2001-11-16  Bernd Schmidt  <bernds@redhat.com>\n+\n+        * config/i386/i386.c (ix86_expand_sse_comi): Generate setcc by\n+\thand; don't use gen_setcc_2.\n+\t(ix86_expand_builtin): Fix pshufw.\n+\t* config/i386/i386.md (maskncmpv4sf3, vmmmaskncmpv4sf3): Special\n+        case UNORDERED to emit the right assembler instruction.\n+\t(mmx_pshufw): Lose operand 2.\n+\t(cvtsi2ss): Fix representation.\n+\tFrom Graham Stott:\n+\t(mmx_clrdi, sse_clrti, stmxcsr, ldmxcsr): Set memory attribute.\n+\n 2001-11-16  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/include/linux-and-gnu.texi: Remove."}, {"sha": "caccc7eede2365e37b7cc295b2a8f8d6d74c31b5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29628f27db3ae12da95fd98e3755be5a06596855/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29628f27db3ae12da95fd98e3755be5a06596855/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=29628f27db3ae12da95fd98e3755be5a06596855", "patch": "@@ -11648,7 +11648,11 @@ ix86_expand_sse_comi (d, arglist, target)\n   if (! pat)\n     return 0;\n   emit_insn (pat);\n-  emit_insn (gen_setcc_2 (target, op2));\n+  emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t  gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+\t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n+\t\t\t\t\t  gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t\t\t\t  const0_rtx)));\n \n   return target;\n }\n@@ -11936,12 +11940,12 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n       op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n       tmode = insn_data[icode].operand[0].mode;\n-      mode0 = insn_data[icode].operand[2].mode;\n-      mode1 = insn_data[icode].operand[3].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n+      mode2 = insn_data[icode].operand[2].mode;\n \n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n-\top0 = copy_to_mode_reg (mode0, op0);\n-      if (! (*insn_data[icode].operand[3].predicate) (op1, mode1))\n+      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n+\top0 = copy_to_mode_reg (mode1, op0);\n+      if (! (*insn_data[icode].operand[2].predicate) (op1, mode2))\n \t{\n \t  /* @@@ better error message */\n \t  error (\"mask must be an immediate\");\n@@ -11951,7 +11955,7 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n \ttarget = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, target, op0, op1);\n+      pat = GEN_FCN (icode) (target, op0, op1);\n       if (! pat)\n \treturn 0;\n       emit_insn (pat);"}, {"sha": "0fbb41361432a3eb5ab1a75673b664c21024e9b8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29628f27db3ae12da95fd98e3755be5a06596855/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29628f27db3ae12da95fd98e3755be5a06596855/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=29628f27db3ae12da95fd98e3755be5a06596855", "patch": "@@ -18454,8 +18454,8 @@\n         (unspec:TI [(const_int 0)] 45))]\n   \"TARGET_SSE\"\n   \"xorps\\t{%0, %0|%0, %0}\"\n-  [(set_attr \"type\" \"sse\")])\n-\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"memory\" \"none\")])\n \n ;; SSE mask-generating compares\n \n@@ -18475,7 +18475,13 @@\n \t\t\t      [(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t\t\t       (match_operand:V4SF 2 \"nonimmediate_operand\" \"x\")])))]\n   \"TARGET_SSE\"\n-  \"cmpn%D3ps\\t{%2, %0|%0, %2}\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == UNORDERED)\n+    return \\\"cmpordps\\t{%2, %0|%0, %2}\\\";\n+\n+  return \\\"cmpn%D3ps\\t{%2, %0|%0, %2}\\\";\n+}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"vmmaskcmpv4sf3\"\n@@ -18500,7 +18506,13 @@\n \t (subreg:V4SI (match_dup 1) 0)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n-  \"cmp%D3ss\\t{%2, %0|%0, %2}\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == UNORDERED)\n+    return \\\"cmpordss\\t{%2, %0|%0, %2}\\\";\n+\n+  return \\\"cmpn%D3ss\\t{%2, %0|%0, %2}\\\";\n+}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"sse_comi\"\n@@ -18645,7 +18657,7 @@\n \t(vec_merge:V4SF (match_operand:V4SF 1 \"register_operand\" \"0\")\n \t \t\t(vec_duplicate:V4SF\n \t\t\t (float:SF (match_operand:SI 2 \"register_operand\" \"rm\")))\n-\t\t\t(const_int 15)))]\n+\t\t\t(const_int 14)))]\n   \"TARGET_SSE\"\n   \"cvtsi2ss\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n@@ -18855,7 +18867,8 @@\n \t\t  (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))] 45))]\n   \"TARGET_MMX\"\n   \"pxor\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmx\")])\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"memory\" \"none\")])\n \n ;; Same as pxor, but don't show input operands so that we don't think\n ;; they are live.\n@@ -18954,10 +18967,9 @@\n (define_insn \"mmx_pshufw\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n         (unspec:V4HI [(match_operand:V4HI 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n-\t\t      (match_operand:SI 3 \"immediate_operand\" \"i\")] 41))]\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")] 41))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pshufw\\t{%3, %2, %0|%0, %2, %3}\"\n+  \"pshufw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n \n@@ -19293,14 +19305,16 @@\n   [(unspec_volatile [(match_operand:SI 0 \"memory_operand\" \"m\")] 37)]\n   \"TARGET_MMX\"\n   \"ldmxcsr\\t%0\"\n-  [(set_attr \"type\" \"mmx\")])\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"memory\" \"load\")])\n \n (define_insn \"stmxcsr\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n \t(unspec_volatile:SI [(const_int 0)] 40))]\n   \"TARGET_MMX\"\n   \"stmxcsr\\t%0\"\n-  [(set_attr \"type\" \"mmx\")])\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"memory\" \"store\")])\n \n (define_expand \"sfence\"\n   [(set (match_dup 0)"}]}