{"sha": "5a3d7e74caea0e0ff01f12191aaf479a558fa192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEzZDdlNzRjYWVhMGUwZmYwMWYxMjE5MWFhZjQ3OWE1NThmYTE5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-09-09T17:38:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-09-09T17:38:10Z"}, "message": "demangle.h (enum demangle_component_type): Add DEMANGLE_COMPONENT_DECLTYPE.\n\n        * include/demangle.h (enum demangle_component_type): Add\n        DEMANGLE_COMPONENT_DECLTYPE.\n        * libiberty/cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_DECLTYPE.\n        (d_make_comp): Likewise.\n        (cplus_demangle_type): Handle decltype and DFP types.\n        (cplus_demangle_operators): Call operator takes 2 args.\n        (cplus_demangle_builtin_types): Add DFP types.\n        (d_exprlist): New fn.\n        (d_expression): Handle parm placeholders, T() and calls.\n        (d_print_comp): Handle decltype, T() and calls.\n        * libiberty/testsuite/demangle-expected: Test the above.\n\nFrom-SVN: r140162", "tree": {"sha": "9b0a6eefae5a149a8bc7b9583c7777eb4a9a97d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b0a6eefae5a149a8bc7b9583c7777eb4a9a97d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a3d7e74caea0e0ff01f12191aaf479a558fa192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3d7e74caea0e0ff01f12191aaf479a558fa192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3d7e74caea0e0ff01f12191aaf479a558fa192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3d7e74caea0e0ff01f12191aaf479a558fa192/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "854bd721f882bf19deb6774310e6b68dc7f299c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854bd721f882bf19deb6774310e6b68dc7f299c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854bd721f882bf19deb6774310e6b68dc7f299c8"}], "stats": {"total": 171, "additions": 161, "deletions": 10}, "files": [{"sha": "64b0a6caeeba8e1adc4593e40d2c0c4c5ee76804", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3d7e74caea0e0ff01f12191aaf479a558fa192/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3d7e74caea0e0ff01f12191aaf479a558fa192/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=5a3d7e74caea0e0ff01f12191aaf479a558fa192", "patch": "@@ -1,3 +1,8 @@\n+2008-09-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_DECLTYPE.\n+\n 2008-07-07  Joel Brobecker  <brobecker@adacore.com>\n \n \t* safe-ctype.h: Add #include of ctype.h before redefining"}, {"sha": "146d778e0974ec54cc532218d1e86672ca067ce2", "filename": "include/demangle.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3d7e74caea0e0ff01f12191aaf479a558fa192/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3d7e74caea0e0ff01f12191aaf479a558fa192/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=5a3d7e74caea0e0ff01f12191aaf479a558fa192", "patch": "@@ -370,7 +370,9 @@ enum demangle_component_type\n      subtree is the first part and the right subtree the second.  */\n   DEMANGLE_COMPONENT_COMPOUND_NAME,\n   /* A name formed by a single character.  */\n-  DEMANGLE_COMPONENT_CHARACTER\n+  DEMANGLE_COMPONENT_CHARACTER,\n+  /* A decltype type.  */\n+  DEMANGLE_COMPONENT_DECLTYPE\n };\n \n /* Types which are only used internally.  */"}, {"sha": "e6980aea1329d0bcaf7aad8fc9be9535fea57b26", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3d7e74caea0e0ff01f12191aaf479a558fa192/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3d7e74caea0e0ff01f12191aaf479a558fa192/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5a3d7e74caea0e0ff01f12191aaf479a558fa192", "patch": "@@ -1,3 +1,15 @@\n+2008-09-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_DECLTYPE.\n+\t(d_make_comp): Likewise.\n+\t(cplus_demangle_type): Handle decltype and DFP types.\n+\t(cplus_demangle_operators): Call operator takes 2 args.\n+\t(cplus_demangle_builtin_types): Add DFP types.\n+\t(d_exprlist): New fn.\n+\t(d_expression): Handle parm placeholders, T() and calls.\n+\t(d_print_comp): Handle decltype, T() and calls.\n+\t* testsuite/demangle-expected: Test the above.\n+\n 2008-08-07  Aaron W. LaFramboise  <aaronavay62@aaronwl.com>\n \n \t* pex-win32.c (argv_to_argc): New function."}, {"sha": "3d292f07d0a915c456ea996c77f8c86da393d947", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 125, "deletions": 9, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3d7e74caea0e0ff01f12191aaf479a558fa192/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3d7e74caea0e0ff01f12191aaf479a558fa192/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=5a3d7e74caea0e0ff01f12191aaf479a558fa192", "patch": "@@ -660,6 +660,9 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_CHARACTER:\n       printf (\"character '%c'\\n\",  dc->u.s_character.character);\n       return;\n+    case DEMANGLE_COMPONENT_DECLTYPE:\n+      printf (\"decltype\\n\");\n+      break;\n     }\n \n   d_dump (d_left (dc), indent + 2);\n@@ -807,6 +810,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n     case DEMANGLE_COMPONENT_CAST:\n     case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n+    case DEMANGLE_COMPONENT_DECLTYPE:\n       if (left == NULL)\n \treturn NULL;\n       break;\n@@ -1422,7 +1426,7 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"aa\", NL (\"&&\"),        2 },\n   { \"ad\", NL (\"&\"),         1 },\n   { \"an\", NL (\"&\"),         2 },\n-  { \"cl\", NL (\"()\"),        0 },\n+  { \"cl\", NL (\"()\"),        2 },\n   { \"cm\", NL (\",\"),         2 },\n   { \"co\", NL (\"~\"),         1 },\n   { \"dV\", NL (\"/=\"),        2 },\n@@ -1871,12 +1875,15 @@ cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT] =\n   /* n */ { NL (\"__int128\"),\tNL (\"__int128\"),\tD_PRINT_DEFAULT },\n   /* o */ { NL (\"unsigned __int128\"), NL (\"unsigned __int128\"),\n \t    D_PRINT_DEFAULT },\n-  /* p */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n-  /* q */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n-  /* r */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n+  /* The decimal floating point and half-precision floating point types\n+     don't use the normal builtin type encoding, they're just stuck into\n+     holes in the table for convenience.  */\n+  /* p */ { NL (\"decimal32\"),\tNL (\"decimal32\"),\tD_PRINT_DEFAULT },\n+  /* q */ { NL (\"decimal64\"),\tNL (\"decimal64\"),\tD_PRINT_DEFAULT },\n+  /* r */ { NL (\"decimal128\"),\tNL (\"decimal128\"),\tD_PRINT_DEFAULT },\n   /* s */ { NL (\"short\"),\tNL (\"short\"),\t\tD_PRINT_DEFAULT },\n   /* t */ { NL (\"unsigned short\"), NL (\"unsigned short\"), D_PRINT_DEFAULT },\n-  /* u */ { NULL, 0,\t\tNULL, 0,\t\tD_PRINT_DEFAULT },\n+  /* u */ { NL (\"half\"),\tNL (\"half\"),\t\tD_PRINT_FLOAT },\n   /* v */ { NL (\"void\"),\tNL (\"void\"),\t\tD_PRINT_VOID },\n   /* w */ { NL (\"wchar_t\"),\tNL (\"char\"),\t\tD_PRINT_DEFAULT },\n   /* x */ { NL (\"long long\"),\tNL (\"long\"),\t\tD_PRINT_LONG_LONG },\n@@ -2046,6 +2053,52 @@ cplus_demangle_type (struct d_info *di)\n \t\t\t cplus_demangle_type (di), ret);\n       break;\n \n+    case 'D':\n+      can_subst = 0;\n+      d_advance (di, 1);\n+      peek = d_next_char (di);\n+      switch (peek)\n+\t{\n+\tcase 'T':\n+\tcase 't':\n+\t  /* decltype (expression) */\n+\t  ret = d_make_comp (di, DEMANGLE_COMPONENT_DECLTYPE,\n+\t\t\t     d_expression (di), NULL);\n+\t  if (ret && d_next_char (di) != 'E')\n+\t    ret = NULL;\n+\t  break;\n+\t  \n+\tcase 'p':\n+\t  /* Pack expansion.  */\n+\t  return NULL;\n+\t  \n+\tcase 'f':\n+\t  /* 32-bit DFP */\n+\t  ret = d_make_builtin_type (di,\n+\t\t\t\t     &cplus_demangle_builtin_types['p' - 'a']);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n+\tcase 'd':\n+\t  /* 64-bit decimal floating point */\n+\t  ret = d_make_builtin_type (di,\n+\t\t\t\t     &cplus_demangle_builtin_types['q' - 'a']);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n+\tcase 'e':\n+\t  /* 128-bit DFP */\n+\t  ret = d_make_builtin_type (di,\n+\t\t\t\t     &cplus_demangle_builtin_types['r' - 'a']);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n+\tcase 'h':\n+\t  /* 16-bit half-precision FP */\n+\t  ret = d_make_builtin_type (di,\n+\t\t\t\t     &cplus_demangle_builtin_types['u' - 'a']);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n+\t}\n+      break;\n+\n     default:\n       return NULL;\n     }\n@@ -2391,9 +2444,39 @@ d_template_arg (struct d_info *di)\n     }\n }\n \n+/* Subroutine of <expression> ::= cl <expression>+ E */\n+\n+static struct demangle_component *\n+d_exprlist (struct d_info *di)\n+{\n+  struct demangle_component *list = NULL;\n+  struct demangle_component **p = &list;\n+\n+  while (1)\n+    {\n+      struct demangle_component *arg = d_expression (di);\n+      if (arg == NULL)\n+\treturn NULL;\n+\n+      *p = d_make_comp (di, DEMANGLE_COMPONENT_ARGLIST, arg, NULL);\n+      if (*p == NULL)\n+\treturn NULL;\n+      p = &d_right (*p);\n+\n+      if (d_peek_char (di) == 'E')\n+\t{\n+\t  d_advance (di, 1);\n+\t  break;\n+\t}\n+    }\n+\n+  return list;\n+}\n+\n /* <expression> ::= <(unary) operator-name> <expression>\n                 ::= <(binary) operator-name> <expression> <expression>\n                 ::= <(trinary) operator-name> <expression> <expression> <expression>\n+\t\t::= cl <expression>+ E\n                 ::= st <type>\n                 ::= <template-param>\n                 ::= sr <type> <unqualified-name>\n@@ -2426,6 +2509,12 @@ d_expression (struct d_info *di)\n \t\t\t    d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, name,\n \t\t\t\t\t d_template_args (di)));\n     }\n+  else if (peek == 's' && d_peek_next_char (di) == 'T')\n+    {\n+      /* Just demangle a parameter placeholder as its type.  */\n+      d_advance (di, 2);\n+      return cplus_demangle_type (di);\n+    }\n   else\n     {\n       struct demangle_component *op;\n@@ -2454,7 +2543,12 @@ d_expression (struct d_info *di)\n \t  args = op->u.s_extended_operator.args;\n \t  break;\n \tcase DEMANGLE_COMPONENT_CAST:\n-\t  args = 1;\n+\t  if (d_peek_char (di) == 'v')\n+\t    /* T() encoded as an operand of void.  */\n+\t    return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n+\t\t\t\tcplus_demangle_type (di));\n+\t  else\n+\t    args = 1;\n \t  break;\n \t}\n \n@@ -2466,13 +2560,18 @@ d_expression (struct d_info *di)\n \tcase 2:\n \t  {\n \t    struct demangle_component *left;\n+\t    struct demangle_component *right;\n \n \t    left = d_expression (di);\n+\t    if (!strcmp (op->u.s_operator.op->code, \"cl\"))\n+\t      right = d_exprlist (di);\n+\t    else\n+\t      right = d_expression (di);\n+\n \t    return d_make_comp (di, DEMANGLE_COMPONENT_BINARY, op,\n \t\t\t\td_make_comp (di,\n \t\t\t\t\t     DEMANGLE_COMPONENT_BINARY_ARGS,\n-\t\t\t\t\t     left,\n-\t\t\t\t\t     d_expression (di)));\n+\t\t\t\t\t     left, right));\n \t  }\n \tcase 3:\n \t  {\n@@ -3520,7 +3619,9 @@ d_print_comp (struct d_print_info *dpi,\n \t  d_append_char (dpi, ')');\n \t}\n       d_append_char (dpi, '(');\n-      d_print_comp (dpi, d_right (dc));\n+      if (d_left (dc)->type != DEMANGLE_COMPONENT_CAST\n+\t  || d_right (dc)->type != DEMANGLE_COMPONENT_BUILTIN_TYPE)\n+\td_print_comp (dpi, d_right (dc));\n       d_append_char (dpi, ')');\n       return;\n \n@@ -3531,6 +3632,15 @@ d_print_comp (struct d_print_info *dpi,\n \t  return;\n \t}\n \n+      if (!strcmp (d_left (dc)->u.s_operator.op->code, \"cl\"))\n+\t{\n+\t  d_print_comp (dpi, d_left (d_right (dc)));\n+\t  d_append_string (dpi, \" (\");\n+\t  d_print_comp (dpi, d_right (d_right (dc)));\n+\t  d_append_char (dpi, ')');\n+\t  return;\n+\t}\n+\n       /* We wrap an expression which uses the greater-than operator in\n \t an extra layer of parens so that it does not get confused\n \t with the '>' which ends the template parameters.  */\n@@ -3681,6 +3791,12 @@ d_print_comp (struct d_print_info *dpi,\n       d_append_char (dpi, dc->u.s_character.character);\n       return;\n \n+    case DEMANGLE_COMPONENT_DECLTYPE:\n+      d_append_string (dpi, \"decltype (\");\n+      d_print_comp (dpi, d_left (dc));\n+      d_append_char (dpi, ')');\n+      return;\n+\n     default:\n       d_print_error (dpi);\n       return;"}, {"sha": "9358204d2bd5501238c0c8cb2ae2cea9896007bf", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3d7e74caea0e0ff01f12191aaf479a558fa192/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3d7e74caea0e0ff01f12191aaf479a558fa192/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=5a3d7e74caea0e0ff01f12191aaf479a558fa192", "patch": "@@ -3882,3 +3882,19 @@ myspace::foo()::localstruct::f(myspace::foo()::otherlocalstruct)\n --format=gnu-v3\n _ZGr32_java$Sutil$Siso4217$_properties\n java resource java/util/iso4217.properties\n+# decltype/param placeholder test\n+--format=gnu-v3\n+_Z3addIidEDTplsTT_sTT0_ES0_S1_\n+decltype ((int) + (double)) add<int, double>(int, double)\n+# decltype/T() test\n+--format=gnu-v3\n+_Z4add2IidEDTplcvT_vcvT0_vES0_S1_\n+decltype (((int)()) + ((double)())) add2<int, double>(int, double)\n+# decltype/fn call test\n+--format=gnu-v3\n+_Z4add3IidEDTclL_Z1gEsTT_sTT0_EES0_S1_\n+decltype (g (int, double)) add3<int, double>(int, double)\n+# Extended floating point types test\n+--format=gnu-v3\n+_Z1fDfDdDeDh\n+f(decimal32, decimal64, decimal128, half)"}]}