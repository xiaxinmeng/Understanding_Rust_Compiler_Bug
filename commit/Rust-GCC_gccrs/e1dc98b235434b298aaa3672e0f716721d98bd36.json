{"sha": "e1dc98b235434b298aaa3672e0f716721d98bd36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkYzk4YjIzNTQzNGIyOThhYWEzNjcyZTBmNzE2NzIxZDk4YmQzNg==", "commit": {"author": {"name": "Olga Golovanevsky", "email": "olga@il.ibm.com", "date": "2007-10-24T10:36:30Z"}, "committer": {"name": "Olga Golovanevsky", "email": "olga@gcc.gnu.org", "date": "2007-10-24T10:36:30Z"}, "message": "ipa-type-escape.h: Expose function is_array_access_through_pointer_and_index.\n\n2007-10-24  Olga Golovanevsky  <olga@il.ibm.com>\n\n      * ipa-type-escape.h: Expose function\n      is_array_access_through_pointer_and_index.\n      * ipa-type-escape.c\n      (is_array_access_through_pointer_and_index):\n      Add three new parameters. Add support of\n      POINTER_PLUS_EXPR tree code.\n\n2007-10-24  Olga Golovanevsky  <olga@il.ibm.com>\n\n      * ipa-struct-reorg.c, ipa-struct-reorg.h: New files.\n      * tree-pass.h: Add pass_ipa_struct_reorg.\n      * common.opt: Add ipa-struct-reorg flag.\n      * Makefile.in: Add ipa-strcut-reorg.o compilation.\n      * passes.c: Add pass pass_ipa_struct_reorg.\n      * params.h:  Add STRUCT_REORG_COLD_STRUCT_RATIO.\n      * params.def: Add PARAM_STRUCT_REORG_COLD_STRUCT_RATIO.\n\nFrom-SVN: r129600", "tree": {"sha": "7ca82a7fb1bb05fc28bc4c7186c3833b11ce6de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ca82a7fb1bb05fc28bc4c7186c3833b11ce6de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1dc98b235434b298aaa3672e0f716721d98bd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dc98b235434b298aaa3672e0f716721d98bd36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1dc98b235434b298aaa3672e0f716721d98bd36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dc98b235434b298aaa3672e0f716721d98bd36/comments", "author": null, "committer": null, "parents": [{"sha": "712f1172209b203503199c653f103fb7fb817005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712f1172209b203503199c653f103fb7fb817005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712f1172209b203503199c653f103fb7fb817005"}], "stats": {"total": 159, "additions": 121, "deletions": 38}, "files": [{"sha": "5d05108948e6aaaa14363fc0c9f518faff7d263b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -1,3 +1,22 @@\n+2007-10-24  Olga Golovanevsky  <olga@il.ibm.com>\n+\n+      * ipa-type-escape.h: Expose function\n+      is_array_access_through_pointer_and_index.\n+      * ipa-type-escape.c\n+      (is_array_access_through_pointer_and_index):\n+      Add three new parameters. Add support of\n+      POINTER_PLUS_EXPR tree code.\n+\n+2007-10-24  Olga Golovanevsky  <olga@il.ibm.com>\n+\n+      * ipa-struct-reorg.c, ipa-struct-reorg.h: New files.\n+      * tree-pass.h: Add pass_ipa_struct_reorg.\n+      * common.opt: Add ipa-struct-reorg flag.\n+      * Makefile.in: Add ipa-strcut-reorg.o compilation.\n+      * passes.c: Add pass pass_ipa_struct_reorg.\n+      * params.h:  Add STRUCT_REORG_COLD_STRUCT_RATIO.\n+      * params.def: Add PARAM_STRUCT_REORG_COLD_STRUCT_RATIO.\n+\n 2007-10-24  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/33804"}, {"sha": "eb655f13186909fd8c20207d20ecbe0b41e11f6d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -1235,6 +1235,7 @@ OBJS-archive = \\\n \tipa-prop.o \\\n \tipa-pure-const.o \\\n \tipa-reference.o \\\n+\tipa-struct-reorg.o \\\n \tipa-type-escape.o \\\n \tipa-utils.o \\\n \tipa.o \\\n@@ -2514,6 +2515,10 @@ ipa-type-escape.o : ipa-type-escape.c $(CONFIG_H) $(SYSTEM_H) \\\n    pointer-set.h $(GGC_H) $(IPA_TYPE_ESCAPE_H) $(IPA_UTILS_H) $(C_COMMON_H) \\\n    $(TREE_GIMPLE_H) $(CGRAPH_H) output.h $(FLAGS_H) tree-pass.h \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H)\n+ipa-struct-reorg.o: ipa-struct-reorg.c ipa-struct-reorg.h $(CONFIG_H) $(SYSTEM_H) \\\n+   coretypes.h $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) \\\n+   $(EXPR_H) $(FUNCTION_H) toplev.h $(GGC_H) $(TARGET_H) langhooks.h $(COVERAGE_H) \\\n+   libfuncs.h gt-coverage.h $(HASHTAB_H) $(IPA_TYPE_ESCAPE_H)\n \n coverage.o : coverage.c $(GCOV_IO_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) \\\n@@ -3086,7 +3091,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/reload.h $(srcdir)/caller-save.c \\\n   $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\\n   $(srcdir)/ipa-prop.c $(srcdir)/ipa-cp.c $(srcdir)/ipa-inline.c $(srcdir)/matrix-reorg.c \\\n-  $(srcdir)/dbxout.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\\n+  $(srcdir)/dbxout.c $(srcdir)/ipa-struct-reorg.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\\n   $(srcdir)/dojump.c \\\n   $(srcdir)/emit-rtl.c $(srcdir)/except.c $(srcdir)/explow.c $(srcdir)/expr.c \\\n   $(srcdir)/function.c $(srcdir)/except.h \\"}, {"sha": "c468b3b198f37f797fb8bcebfab4215952f432b9", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -618,6 +618,11 @@ Common Report Var(flag_ipa_matrix_reorg) Optimization\n Perform matrix layout flattening and transposing based\n on profiling information.\n \n+fipa-struct-reorg\n+Common Report Var(flag_ipa_struct_reorg)\n+Perform structure layout optimizations based\n+on profiling information.\n+\n fivopts\n Common Report Var(flag_ivopts) Init(1) Optimization\n Optimize induction variables on trees"}, {"sha": "2aedb95987e5e6f6ac4c1c4d266cac41ad4f00fb", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 75, "deletions": 37, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -926,56 +926,89 @@ is_cast_from_non_pointer (tree var, tree def_stmt, void *data)\n \n */\n \n-static bool\n-is_array_access_through_pointer_and_index (tree op0, tree op1)\n+bool\n+is_array_access_through_pointer_and_index (enum tree_code code, tree op0, \n+\t\t\t\t\t   tree op1, tree *base, tree *offset,\n+\t\t\t\t\t   tree *offset_cast_stmt)\n {\n-  tree base, offset, offset_cast_stmt;\n   tree before_cast, before_cast_def_stmt;\n   cast_t op0_cast, op1_cast;\n \n+  *base = NULL;\n+  *offset = NULL;\n+  *offset_cast_stmt = NULL;\n+\n   /* Check 1.  */\n+  if (code == POINTER_PLUS_EXPR)\n+    {\n+      tree op0type = TYPE_MAIN_VARIANT (TREE_TYPE (op0));\n+      tree op1type = TYPE_MAIN_VARIANT (TREE_TYPE (op1));\n \n-  /* Init data for walk_use_def_chains function.  */\n-  op0_cast.type = op1_cast.type = 0;\n-  op0_cast.stmt = op1_cast.stmt = NULL;\n+      /* One of op0 and op1 is of pointer type and the other is numerical.  */\n+      if (POINTER_TYPE_P (op0type) && NUMERICAL_TYPE_CHECK (op1type))\n+\t{\n+\t  *base = op0;\n+\t  *offset = op1;\n+\t}\n+      else if (POINTER_TYPE_P (op1type) && NUMERICAL_TYPE_CHECK (op0type))\n+\t{\n+\t  *base = op1;\n+\t  *offset = op0;\n+\t}\n+      else\n+\treturn false;\n+    }\n+  else\n+    {\n+      /* Init data for walk_use_def_chains function.  */\n+      op0_cast.type = op1_cast.type = 0;\n+      op0_cast.stmt = op1_cast.stmt = NULL;\n \n-  visited_stmts = pointer_set_create ();\n-  walk_use_def_chains (op0, is_cast_from_non_pointer,(void *)(&op0_cast), false);\n-  pointer_set_destroy (visited_stmts);\n+      visited_stmts = pointer_set_create ();\n+      walk_use_def_chains (op0, is_cast_from_non_pointer,(void *)(&op0_cast),\n+\t\t\t   false);\n+      pointer_set_destroy (visited_stmts);\n \n-  visited_stmts = pointer_set_create ();  \n-  walk_use_def_chains (op1, is_cast_from_non_pointer,(void *)(&op1_cast), false);\n-  pointer_set_destroy (visited_stmts);\n+      visited_stmts = pointer_set_create ();  \n+      walk_use_def_chains (op1, is_cast_from_non_pointer,(void *)(&op1_cast),\n+\t\t\t   false);\n+      pointer_set_destroy (visited_stmts);\n \n-  if (op0_cast.type == 1 && op1_cast.type == 0)\n-    {\n-      base = op1;\n-      offset = op0;\n-      offset_cast_stmt = op0_cast.stmt;\n-    }\n-  else if (op0_cast.type == 0 && op1_cast.type == 1)\n-    {\n-      base = op0;\n-      offset = op1;      \n-      offset_cast_stmt = op1_cast.stmt;\n+      if (op0_cast.type == 1 && op1_cast.type == 0)\n+\t{\n+\t  *base = op1;\n+\t  *offset = op0;\n+\t  *offset_cast_stmt = op0_cast.stmt;\n+\t}\n+      else if (op0_cast.type == 0 && op1_cast.type == 1)\n+\t{\n+\t  *base = op0;\n+\t  *offset = op1;      \n+\t  *offset_cast_stmt = op1_cast.stmt;\n+\t}\n+      else\n+\treturn false;\n     }\n-  else\n-    return false;\n-\n+  \n   /* Check 2.  \n      offset_cast_stmt is of the form: \n      D.1606_7 = (struct str_t *) D.1605_6;  */\n \n-  before_cast = SINGLE_SSA_TREE_OPERAND (offset_cast_stmt, SSA_OP_USE);\n-  if (!before_cast)\n-    return false;\n+  if (*offset_cast_stmt)\n+    {\n+      before_cast = SINGLE_SSA_TREE_OPERAND (*offset_cast_stmt, SSA_OP_USE);\n+      if (!before_cast)\n+\treturn false;\n   \n-  if (SSA_NAME_IS_DEFAULT_DEF(before_cast))\n-    return false;\n+      if (SSA_NAME_IS_DEFAULT_DEF (before_cast))\n+\treturn false;\n   \n-  before_cast_def_stmt = SSA_NAME_DEF_STMT (before_cast);\n-  if (!before_cast_def_stmt)\n-    return false;\n+      before_cast_def_stmt = SSA_NAME_DEF_STMT (before_cast);\n+      if (!before_cast_def_stmt)\n+\treturn false;\n+    }\n+  else\n+    before_cast_def_stmt = SSA_NAME_DEF_STMT (*offset);\n \n   /* before_cast_def_stmt should be of the form:\n      D.1605_6 = i.1_5 * 16; */\n@@ -1449,7 +1482,6 @@ static bool\n okay_pointer_operation (enum tree_code code, tree op0, tree op1)\n {\n   tree op0type = TYPE_MAIN_VARIANT (TREE_TYPE (op0));\n-  tree op1type = TYPE_MAIN_VARIANT (TREE_TYPE (op1));\n \n   switch (code)\n     {\n@@ -1459,11 +1491,17 @@ okay_pointer_operation (enum tree_code code, tree op0, tree op1)\n       break;\n     case MINUS_EXPR:\n     case PLUS_EXPR:\n+    case POINTER_PLUS_EXPR:\n       {\n-\tif (POINTER_TYPE_P (op1type)\n+\ttree base, offset, offset_cast_stmt;\n+\n+\tif (POINTER_TYPE_P (op0type)\n \t    && TREE_CODE (op0) == SSA_NAME \n \t    && TREE_CODE (op1) == SSA_NAME \n-\t    && is_array_access_through_pointer_and_index (op0, op1))\n+\t    && is_array_access_through_pointer_and_index (code, op0, op1, \n+\t\t\t\t\t\t\t  &base, \n+\t\t\t\t\t\t\t  &offset, \n+\t\t\t\t\t\t\t  &offset_cast_stmt))\n \t  return true;\n \telse\n \t  {"}, {"sha": "c851a2707bef2b222cb0a631f4c9c8de9ce2c602", "filename": "gcc/ipa-type-escape.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fipa-type-escape.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fipa-type-escape.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.h?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -26,6 +26,8 @@ bool   ipa_type_escape_type_contained_p (tree type);\n bool   ipa_type_escape_field_does_not_clobber_p (tree record_type, tree field_type);\n int    ipa_type_escape_star_count_of_interesting_type (tree type); \n int    ipa_type_escape_star_count_of_interesting_or_array_type (tree type);\n+bool   is_array_access_through_pointer_and_index (enum tree_code, tree, tree,\n+\t\t\t\t\t\t  tree *, tree *, tree *);\n \n \n #endif  /* GCC_IPA_TYPE_ESCAPE_H  */"}, {"sha": "8973c9ac4e005afcb0b6ad3c73d82bcac5db7d66", "filename": "gcc/params.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -83,6 +83,16 @@ DEFPARAM (PARAM_SRA_FIELD_STRUCTURE_RATIO,\n \t  \"The threshold ratio between instantiated fields and the total structure size\",\n \t  75, 0, 100)\n \n+/* The threshold ratio between current and hotest structure counts.\n+   We say that if the ratio of the current structure count, \n+   calculated by profiling, to the hotest structure count \n+   in the program is less than this parameter, then structure\n+   reorganization is not applied. The default is 10%.  */\n+DEFPARAM (PARAM_STRUCT_REORG_COLD_STRUCT_RATIO,\n+\t  \"struct-reorg-cold-struct-ratio\",\n+\t  \"The threshold ratio between current and hotest structure counts\",\n+\t  10, 0, 100)\n+\n /* The single function inlining limit. This is the maximum size\n    of a function counted in internal gcc instructions (not in\n    real machine instructions) that is eligible for inlining"}, {"sha": "7c54b5da2926ac50a473ba0a35e5ccb1dcf861df", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -103,6 +103,8 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_SRA_MAX_STRUCTURE_COUNT)\n #define SRA_FIELD_STRUCTURE_RATIO \\\n   PARAM_VALUE (PARAM_SRA_FIELD_STRUCTURE_RATIO)\n+#define STRUCT_REORG_COLD_STRUCT_RATIO \\\n+  PARAM_VALUE (PARAM_STRUCT_REORG_COLD_STRUCT_RATIO)\n #define MAX_INLINE_INSNS_SINGLE \\\n   PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SINGLE)\n #define MAX_INLINE_INSNS \\"}, {"sha": "c0f11edf212a886d2ff1714a42b2d5a577231d52", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -546,6 +546,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_ipa_pure_const); \n   NEXT_PASS (pass_ipa_type_escape);\n   NEXT_PASS (pass_ipa_pta);\n+  NEXT_PASS (pass_ipa_struct_reorg);  \n   *p = NULL;\n \n   /* These passes are run after IPA passes on every function that is being"}, {"sha": "e22827d3dfba760b6ec4c411c86e79e8009671a9", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dc98b235434b298aaa3672e0f716721d98bd36/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=e1dc98b235434b298aaa3672e0f716721d98bd36", "patch": "@@ -340,6 +340,7 @@ extern struct tree_opt_pass pass_ipa_reference;\n extern struct tree_opt_pass pass_ipa_pure_const;\n extern struct tree_opt_pass pass_ipa_type_escape;\n extern struct tree_opt_pass pass_ipa_pta;\n+extern struct tree_opt_pass pass_ipa_struct_reorg;\n extern struct tree_opt_pass pass_early_local_passes;\n extern struct tree_opt_pass pass_ipa_increase_alignment;\n extern struct tree_opt_pass pass_ipa_function_and_variable_visibility;"}]}