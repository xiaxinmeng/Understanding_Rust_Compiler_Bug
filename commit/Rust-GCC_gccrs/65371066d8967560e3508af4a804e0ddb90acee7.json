{"sha": "65371066d8967560e3508af4a804e0ddb90acee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUzNzEwNjZkODk2NzU2MGUzNTA4YWY0YTgwNGUwZGRiOTBhY2VlNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-24T10:22:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-24T10:22:14Z"}, "message": "stor-layout: Avoid DECL_BIT_FIELD_REPRESENTATIVE with NULL TREE_TYPE [PR101172]\n\nfinish_bitfield_representative has an early out if the field after a\nbitfield has error_mark_node type, but that early out leads to TREE_TYPE\nof the DECL_BIT_FIELD_REPRESENTATIVE being NULL, which breaks assumptions\non code that uses the DECL_BIT_FIELD_REPRESENTATIVE during error-recovery.\n\nThe following patch instead sets TREE_TYPE of the representative to\nerror_mark_node, something the users can deal with better.  At this point\nthe representative can be set as DECL_BIT_FIELD_REPRESENTATIVE for multiple\nbitfields, so making sure that we clear the DECL_BIT_FIELD_REPRESENTATIVE\ninstead would be harder (but doable, e.g. with the error_mark_node TREE_TYPE\nset by this patch set some flag in the caller and if the flag is there, walk\nall the fields once again and clear all DECL_BIT_FIELD_REPRESENTATIVE that\nhave error_mark_node TREE_TYPE).\n\n2021-06-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101172\n\t* stor-layout.c (finish_bitfield_representative): If nextf has\n\terror_mark_node type, set repr type to error_mark_node too.\n\n\t* gcc.dg/pr101172.c: New test.", "tree": {"sha": "c26de24e5ec65d7fcdbcf6ca720a3bab9e0c9ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26de24e5ec65d7fcdbcf6ca720a3bab9e0c9ae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65371066d8967560e3508af4a804e0ddb90acee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65371066d8967560e3508af4a804e0ddb90acee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65371066d8967560e3508af4a804e0ddb90acee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65371066d8967560e3508af4a804e0ddb90acee7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c1b7a888ade6f21bc7c7f05a2cbff290273fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c1b7a888ade6f21bc7c7f05a2cbff290273fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c1b7a888ade6f21bc7c7f05a2cbff290273fcc"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "242452f2acf7bcef5b8df73e90fc3e62f7508246", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65371066d8967560e3508af4a804e0ddb90acee7/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65371066d8967560e3508af4a804e0ddb90acee7/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=65371066d8967560e3508af4a804e0ddb90acee7", "patch": "@@ -2086,7 +2086,10 @@ finish_bitfield_representative (tree repr, tree field)\n       /* If there was an error, the field may be not laid out\n          correctly.  Don't bother to do anything.  */\n       if (TREE_TYPE (nextf) == error_mark_node)\n-\treturn;\n+\t{\n+\t  TREE_TYPE (repr) = error_mark_node;\n+\t  return;\n+\t}\n       maxsize = size_diffop (DECL_FIELD_OFFSET (nextf),\n \t\t\t     DECL_FIELD_OFFSET (repr));\n       if (tree_fits_uhwi_p (maxsize))"}, {"sha": "b9d098bb64445917408a47238b92ed48976b6a3e", "filename": "gcc/testsuite/gcc.dg/pr101172.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65371066d8967560e3508af4a804e0ddb90acee7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101172.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65371066d8967560e3508af4a804e0ddb90acee7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101172.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101172.c?ref=65371066d8967560e3508af4a804e0ddb90acee7", "patch": "@@ -0,0 +1,20 @@\n+/* PR middle-end/101172 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+union U\n+{\n+  int a[3];\n+  struct\n+  {\n+    int a : 3;\n+    struct this_struct var;\t/* { dg-error \"field 'var' has incomplete type\" } */\n+  } b;\n+};\n+\n+const union U hello = {.a = {1, 2, 3}};\n+\n+void foo()\n+{\n+  int x = hello.b.a;\n+}"}]}