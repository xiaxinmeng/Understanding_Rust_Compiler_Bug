{"sha": "6082753edc5406f746a196b8bb201c323fea2d8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4Mjc1M2VkYzU0MDZmNzQ2YTE5NmI4YmIyMDFjMzIzZmVhMmQ4ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-04-04T07:22:24Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-04-04T07:22:24Z"}, "message": "re PR fortran/50269 (Wrongly rejects element of assumed-shape array in C_LOC)\n\n2013-04-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50269\n        * gcc/fortran/check.c (is_c_interoperable,\n        gfc_check_c_loc): Correct c_loc array checking\n        for Fortran 2003 and Fortran 2008.\n\n2013-04-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50269\n        * gfortran.dg/c_loc_test_21.f90: New.\n        * gfortran.dg/c_loc_test_19.f90: Update dg-error.\n        * gfortran.dg/c_loc_tests_10.f03: Update dg-error.\n        * gfortran.dg/c_loc_tests_11.f03: Update dg-error.\n        * gfortran.dg/c_loc_tests_4.f03: Update dg-error.\n        * gfortran.dg/c_loc_tests_16.f90:  Update dg-error.\n\nFrom-SVN: r197468", "tree": {"sha": "b31894bfd5f4beb3214c091e72ce78063a0a97af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b31894bfd5f4beb3214c091e72ce78063a0a97af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6082753edc5406f746a196b8bb201c323fea2d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6082753edc5406f746a196b8bb201c323fea2d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6082753edc5406f746a196b8bb201c323fea2d8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6082753edc5406f746a196b8bb201c323fea2d8e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b40192276fe996535b0a3de24ce3e748179aa667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40192276fe996535b0a3de24ce3e748179aa667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b40192276fe996535b0a3de24ce3e748179aa667"}], "stats": {"total": 80, "additions": 65, "deletions": 15}, "files": [{"sha": "c42d02f9bd6ef6e86b093f6a620c3cbed007657c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -1,3 +1,10 @@\n+2013-04-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50269\n+\t* gcc/fortran/check.c (is_c_interoperable,\n+\tgfc_check_c_loc): Correct c_loc array checking\n+\tfor Fortran 2003 and Fortran 2008.\n+\n 2013-04-03  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/56284\n@@ -282,7 +289,7 @@\n \t* trans-array.c (structure_alloc_comps): Handle procedure-pointer\n \tcomponents with allocatable result.\n \n-2012-02-21  Tobias Burnus  <burnus@net-b.de>\n+2013-02-21  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56416\n \t* gfortran.texi (Part II: Language Reference, Extensions,"}, {"sha": "5df5d2f2518c7bf7e897d428fd884d9cc6f7cc15", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -3649,11 +3649,12 @@ gfc_check_sizeof (gfc_expr *arg)\n /* Check whether an expression is interoperable.  When returning false,\n    msg is set to a string telling why the expression is not interoperable,\n    otherwise, it is set to NULL.  The msg string can be used in diagnostics.\n-   If all_len_okay is true, all length-type parameters (for character) are\n-   allowed.  Required for C_LOC (cf. Fortran 2003corr5 or Fortran 2008).  */\n+   If c_loc is true, character with len > 1 are allowed (cf. Fortran\n+   2003corr5); additionally, assumed-shape/assumed-rank/deferred-shape\n+   arrays are permitted.  */\n \n static bool\n-is_c_interoperable (gfc_expr *expr, const char **msg, bool all_len_okay)\n+is_c_interoperable (gfc_expr *expr, const char **msg, bool c_loc)\n {\n   *msg = NULL;\n \n@@ -3706,7 +3707,7 @@ is_c_interoperable (gfc_expr *expr, const char **msg, bool all_len_okay)\n \t&& gfc_simplify_expr (expr, 0) == FAILURE)\n       gfc_internal_error (\"is_c_interoperable(): gfc_simplify_expr failed\");\n \n-    if (!all_len_okay && expr->ts.u.cl\n+    if (!c_loc && expr->ts.u.cl\n \t&& (!expr->ts.u.cl->length\n \t    || expr->ts.u.cl->length->expr_type != EXPR_CONSTANT\n \t    || mpz_cmp_si (expr->ts.u.cl->length->value.integer, 1) != 0))\n@@ -3726,7 +3727,7 @@ is_c_interoperable (gfc_expr *expr, const char **msg, bool all_len_okay)\n       return false;\n     }\n \n-  if (expr->rank > 0 && expr->expr_type != EXPR_ARRAY)\n+  if (!c_loc && expr->rank > 0 && expr->expr_type != EXPR_ARRAY)\n     {\n       gfc_array_ref *ar = gfc_find_array_ref (expr);\n       if (ar->type != AR_FULL)\n@@ -4043,6 +4044,22 @@ gfc_check_c_loc (gfc_expr *x)\n \t\t\t \" argument to C_LOC: %s\", &x->where, msg) == FAILURE)\n \t  return FAILURE;\n     }\n+  else if (x->rank > 0 && gfc_notification_std (GFC_STD_F2008))\n+    {\n+      gfc_array_ref *ar = gfc_find_array_ref (x);\n+\n+      if (ar->as->type != AS_EXPLICIT && ar->as->type != AS_ASSUMED_SIZE\n+\t  && !attr.allocatable\n+\t  && gfc_notify_std (GFC_STD_F2008, \"Array of interoperable type at %L \"\n+\t\t\t     \"to C_LOC which is nonallocatable and neither \"\n+\t\t\t     \"assumed size nor explicit size\", &x->where)\n+\t     == FAILURE)\n+\treturn FAILURE;\n+      else if (ar->type != AR_FULL\n+\t       && gfc_notify_std (GFC_STD_F2008, \"Array section at %L \"\n+\t\t\t\t  \"to C_LOC\", &x->where) == FAILURE)\n+\treturn FAILURE;\n+    }\n \n   return SUCCESS;\n }"}, {"sha": "6596dce007c34e4666874b80d619973426d28592", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -1,3 +1,13 @@\n+2013-04-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50269\n+\t* gfortran.dg/c_loc_test_21.f90: New.\n+\t* gfortran.dg/c_loc_test_19.f90: Update dg-error.\n+\t* gfortran.dg/c_loc_tests_10.f03: Update dg-error.\n+\t* gfortran.dg/c_loc_tests_11.f03: Update dg-error.\n+\t* gfortran.dg/c_loc_tests_4.f03: Update dg-error.\n+\t* gfortran.dg/c_loc_tests_16.f90:  Update dg-error.\n+\n 2013-04-03  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/56799"}, {"sha": "ea62715f33f7162ac513fe31b0e9d7a737d1ffcb", "filename": "gcc/testsuite/gfortran.dg/c_loc_test_19.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_19.f90?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -12,6 +12,6 @@ Subroutine test( aa )\n      Real( c_double ), Dimension( : ), Target :: aa\n      Type( c_ptr ), Pointer :: b\n      b = c_loc( aa( 1 ) )  ! was rejected before.\n-     b = c_loc( aa ) ! { dg-error \"TS 29113: Noninteroperable array at .1. as argument to C_LOC: Only explicit-size and assumed-size arrays are interoperable\" }\n+     b = c_loc( aa ) ! { dg-error \"Fortran 2008: Array of interoperable type at .1. to C_LOC which is nonallocatable and neither assumed size nor explicit size\" }\n    End Subroutine test\n End Program gf"}, {"sha": "a31ca034fbb7af6d7c9829a1fc29e7c071753610", "filename": "gcc/testsuite/gfortran.dg/c_loc_test_21.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test_21.f90?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+\n+subroutine foo(a,b,c,d)\n+   use iso_c_binding, only: c_loc, c_ptr\n+   implicit none\n+   real, intent(in), target :: a(:)\n+   real, intent(in), target :: b(5)\n+   real, intent(in), target :: c(*)\n+   real, intent(in), target, allocatable :: d(:)\n+   type(c_ptr) :: ptr\n+   ptr = C_LOC(b)\n+   ptr = C_LOC(c)\n+   ptr = C_LOC(d)\n+   ptr = C_LOC(a) ! { dg-error \"Fortran 2008: Array of interoperable type at .1. to C_LOC which is nonallocatable and neither assumed size nor explicit size\" }\n+end subroutine foo"}, {"sha": "21b8526c2ab8f2731ace61c5353545c4b477b855", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_10.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_10.f03?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -1,9 +1,9 @@\n ! { dg-do compile }\n-! { dg-options \"-std=f2008\" }\n+! { dg-options \"-std=f2003\" }\n subroutine aaa(in)\n   use iso_c_binding\n   implicit none\n   integer(KIND=C_int), DIMENSION(:), TARGET  :: in\n   type(c_ptr) :: cptr\n-  cptr = c_loc(in) ! { dg-error \"TS 29113: Noninteroperable array at .1. as argument to C_LOC\" }\n+  cptr = c_loc(in) ! { dg-error \"Fortran 2008: Array of interoperable type at .1. to C_LOC which is nonallocatable and neither assumed size nor explicit size\" }\n end subroutine aaa"}, {"sha": "c00e5ed164009e3b0ff5d80c2ea0d600ba24635d", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_11.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_11.f03?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -31,9 +31,9 @@ type(c_ptr) function get_double_vector_address(handle)\n     integer(c_int), intent(in) :: handle\n     \n     if (.true.) then   ! The ultimate component is an allocatable target \n-      get_double_vector_address = c_loc(dbv_pool(handle)%v)  ! { dg-error \"TS 29113: Noninteroperable array at .1. as argument to C_LOC: Only explicit-size and assumed-size arrays are interoperable\" }\n+      get_double_vector_address = c_loc(dbv_pool(handle)%v)  ! OK: Interop type and allocatable\n     else\n-      get_double_vector_address = c_loc(vv)  ! { dg-error \"TS 29113: Noninteroperable array at .1. as argument to C_LOC: Only explicit-size and assumed-size arrays are interoperable\" }\n+      get_double_vector_address = c_loc(vv)  ! OK: Interop type and allocatable\n     endif\n     \n   end function get_double_vector_address"}, {"sha": "55e8d00fa9cba1260c01afcb41c3c2c17639d558", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_16.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_16.f90?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -19,7 +19,7 @@\n   type(C_PTR) :: p\n \n   p = c_loc(tt%t%i(1))\n-  p = c_loc(n(1:2))  ! { dg-error \"TS 29113: Noninteroperable array at .1. as argument to C_LOC: Only whole-arrays are interoperable\" }\n-  p = c_loc(ttt%t(5,1:2)%i(1)) ! { dg-error \"TS 29113: Noninteroperable array at .1. as argument to C_LOC: Only whole-arrays are interoperable\" }\n+  p = c_loc(n(1:2))  ! OK: interop type + contiguous\n+  p = c_loc(ttt%t(5,1:2)%i(1)) ! FIXME: Noncontiguous (invalid) - compile-time testable\n   p = c_loc(x[1]) ! { dg-error \"shall not be coindexed\" }\n   end"}, {"sha": "d45a89156fc79ec838f848c9ab8274f33e9e74c7", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_4.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6082753edc5406f746a196b8bb201c323fea2d8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_4.f03?ref=6082753edc5406f746a196b8bb201c323fea2d8e", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-std=f2008\" }\n+! { dg-options \"-std=f2003\" }\n !\n module c_loc_tests_4\n   use, intrinsic :: iso_c_binding\n@@ -12,6 +12,6 @@ subroutine sub0() bind(c)\n     type(c_ptr) :: my_c_ptr\n \n     my_array_ptr => my_array\n-    my_c_ptr = c_loc(my_array_ptr) ! { dg-error \"Noninteroperable array at .1. as argument to C_LOC: Only explicit-size and assumed-size arrays are interoperable\" }\n+    my_c_ptr = c_loc(my_array_ptr) ! { dg-error \"Fortran 2008: Array of interoperable type at .1. to C_LOC which is nonallocatable and neither assumed size nor explicit size\" }\n   end subroutine sub0\n end module c_loc_tests_4"}]}