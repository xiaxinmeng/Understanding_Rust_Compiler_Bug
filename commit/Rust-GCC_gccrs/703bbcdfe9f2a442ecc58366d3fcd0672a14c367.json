{"sha": "703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzYmJjZGZlOWYyYTQ0MmVjYzU4MzY2ZDNmY2QwNjcyYTE0YzM2Nw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T15:00:14Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T15:00:14Z"}, "message": "[AArch64][6/14] ARMv8.2-A FP16 reduction vector intrinsics\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def (reduc_smax_scal_,\n\treduc_smin_scal_): Use VDQIF_F16.\n\t(reduc_smax_nan_scal_, reduc_smin_nan_scal_): Use VHSDF.\n\t* config/aarch64/aarch64-simd.md (reduc_<maxmin_uns>_scal_<mode>):\n\tUse VHSDF.\n\t(aarch64_reduc_<maxmin_uns>_internal<mode>): Likewise.\n\t* config/aarch64/iterators.md (VDQIF_F16): New.\n\t(vp): Support HF modes.\n\t* config/aarch64/arm_neon.h (vmaxv_f16, vmaxvq_f16, vminv_f16,\n\tvminvq_f16, vmaxnmv_f16, vmaxnmvq_f16, vminnmv_f16, vminnmvq_f16): New.\n\nFrom-SVN: r238721", "tree": {"sha": "9651fc5e3c1574040eff548764708326a1de20fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9651fc5e3c1574040eff548764708326a1de20fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/comments", "author": null, "committer": null, "parents": [{"sha": "ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2e8f01f1bc926ba403ea16f1663c95aa1a3c66"}], "stats": {"total": 90, "additions": 78, "deletions": 12}, "files": [{"sha": "e9dd4f36aade72e32a6baf1da9d871ef3df1019f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "patch": "@@ -1,3 +1,16 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (reduc_smax_scal_,\n+\treduc_smin_scal_): Use VDQIF_F16.\n+\t(reduc_smax_nan_scal_, reduc_smin_nan_scal_): Use VHSDF.\n+\t* config/aarch64/aarch64-simd.md (reduc_<maxmin_uns>_scal_<mode>):\n+\tUse VHSDF.\n+\t(aarch64_reduc_<maxmin_uns>_internal<mode>): Likewise.\n+\t* config/aarch64/iterators.md (VDQIF_F16): New.\n+\t(vp): Support HF modes.\n+\t* config/aarch64/arm_neon.h (vmaxv_f16, vmaxvq_f16, vminv_f16,\n+\tvminvq_f16, vmaxnmv_f16, vmaxnmvq_f16, vminnmv_f16, vminnmvq_f16): New.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (*aarch64_mulx_elt_to_64v2df): Rename to"}, {"sha": "363e131327d6be04dd94e664ef839e46f26940e4", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "patch": "@@ -234,12 +234,12 @@\n   BUILTIN_VALL (UNOP, reduc_plus_scal_, 10)\n \n   /* Implemented by reduc_<maxmin_uns>_scal_<mode> (producing scalar).  */\n-  BUILTIN_VDQIF (UNOP, reduc_smax_scal_, 10)\n-  BUILTIN_VDQIF (UNOP, reduc_smin_scal_, 10)\n+  BUILTIN_VDQIF_F16 (UNOP, reduc_smax_scal_, 10)\n+  BUILTIN_VDQIF_F16 (UNOP, reduc_smin_scal_, 10)\n   BUILTIN_VDQ_BHSI (UNOPU, reduc_umax_scal_, 10)\n   BUILTIN_VDQ_BHSI (UNOPU, reduc_umin_scal_, 10)\n-  BUILTIN_VDQF (UNOP, reduc_smax_nan_scal_, 10)\n-  BUILTIN_VDQF (UNOP, reduc_smin_nan_scal_, 10)\n+  BUILTIN_VHSDF (UNOP, reduc_smax_nan_scal_, 10)\n+  BUILTIN_VHSDF (UNOP, reduc_smin_nan_scal_, 10)\n \n   /* Implemented by <maxmin><mode>3.\n      smax variants map to fmaxnm,"}, {"sha": "501858d9ac3766e54d4c0a4798370f6cd7f76934", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "patch": "@@ -2130,8 +2130,8 @@\n ;; gimple_fold'd to the REDUC_(MAX|MIN)_EXPR tree code.  (This is FP smax/smin).\n (define_expand \"reduc_<maxmin_uns>_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\")\n-   (unspec:VDQF [(match_operand:VDQF 1 \"register_operand\")]\n-\t\tFMAXMINV)]\n+   (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\")]\n+\t\t  FMAXMINV)]\n   \"TARGET_SIMD\"\n   {\n     rtx elt = GEN_INT (ENDIAN_LANE_N (<MODE>mode, 0));\n@@ -2178,12 +2178,12 @@\n )\n \n (define_insn \"aarch64_reduc_<maxmin_uns>_internal<mode>\"\n- [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-       (unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n-\t\t    FMAXMINV))]\n+ [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+       (unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")]\n+\t\t      FMAXMINV))]\n  \"TARGET_SIMD\"\n  \"<maxmin_uns_op><vp>\\\\t%<Vetype>0, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_reduc_minmax_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_reduc_minmax_<stype><q>\")]\n )\n \n ;; aarch64_simd_bsl may compile to any of bsl/bif/bit depending on register"}, {"sha": "4382efda8c3f2c4f29781c0ad9beb49b94501c47", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "patch": "@@ -26927,6 +26927,56 @@ vmulxq_n_f16 (float16x8_t __a, float16_t __b)\n   return vmulxq_f16 (__a, vdupq_n_f16 (__b));\n }\n \n+/* ARMv8.2-A FP16 reduction vector intrinsics.  */\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmaxv_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_reduc_smax_nan_scal_v4hf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmaxvq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_reduc_smax_nan_scal_v8hf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vminv_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_reduc_smin_nan_scal_v4hf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vminvq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_reduc_smin_nan_scal_v8hf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmaxnmv_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_reduc_smax_scal_v4hf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmaxnmvq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_reduc_smax_scal_v8hf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vminnmv_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_reduc_smin_scal_v4hf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vminnmvq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_reduc_smin_scal_v8hf (__a);\n+}\n+\n #pragma GCC pop_options\n \n #undef __aarch64_vget_lane_any"}, {"sha": "011b937105e477c0044bfb1c549179058bfbea31", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703bbcdfe9f2a442ecc58366d3fcd0672a14c367/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "patch": "@@ -159,6 +159,8 @@\n \n ;; Vector modes except double int.\n (define_mode_iterator VDQIF [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF V2DF])\n+(define_mode_iterator VDQIF_F16 [V8QI V16QI V4HI V8HI V2SI V4SI\n+                                 V4HF V8HF V2SF V4SF V2DF])\n \n ;; Vector modes for S type.\n (define_mode_iterator VDQ_SI [V2SI V4SI])\n@@ -760,8 +762,9 @@\n (define_mode_attr vp [(V8QI \"v\") (V16QI \"v\")\n \t\t      (V4HI \"v\") (V8HI  \"v\")\n \t\t      (V2SI \"p\") (V4SI  \"v\")\n-\t\t      (V2DI  \"p\") (V2DF  \"p\")\n-\t\t      (V2SF \"p\") (V4SF  \"v\")])\n+\t\t      (V2DI \"p\") (V2DF  \"p\")\n+\t\t      (V2SF \"p\") (V4SF  \"v\")\n+\t\t      (V4HF \"v\") (V8HF  \"v\")])\n \n (define_mode_attr vsi2qi [(V2SI \"v8qi\") (V4SI \"v16qi\")])\n (define_mode_attr VSI2QI [(V2SI \"V8QI\") (V4SI \"V16QI\")])"}]}