{"sha": "227efe870043c9e8b4c58a702e90698b2970ff75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI3ZWZlODcwMDQzYzllOGI0YzU4YTcwMmU5MDY5OGIyOTcwZmY3NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-09-28T08:47:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-09-28T08:47:20Z"}, "message": "sparc-protos.h (sparc_branch_cost): Declare.\n\n\t* config/sparc/sparc-protos.h (sparc_branch_cost): Declare.\n\t* config/sparc/sparc.h (BRANCH_COST): Call sparc_branch_cost.\n\t* config/sparc/sparc.c (struct processor_costs): Add branch_cost field.\n\t(cypress_costs): Set it.\n\t(supersparc_costs): Likewise.\n\t(hypersparc_costs): Likewise.\n\t(leon_cost): Likewise.\n\t(leon3_costs): Likewise.\n\t(sparclet_costs): Likewise.\n\t(ultrasparc_costs): Likewise.\n\t(ultrasparc_costs): Likewise.\n\t(niagara_costs): Likewise.\n\t(niagara2_costs): Likewise.\n\t(niagara3_costs): Likewise.\n\t(niagara4_costs): Likewise.\n\t(niagara7_costs): Likewise.\n\t(m8_costs): Likewise.\n\t(TARGET_CAN_FOLLOW_JUMP): Define.\n\t(pass_work_around_errata::gate): Minor tweak.\n\t(sparc_option_override): Remove MASK_FSMULD mask for V7 processors.\n\tDo not set both MASK_VIS4 and MASK_VIS4B for M8 processor.\n\tAutomaitcally clear MASK_FSMULD mask for V7 processors.\n\t(sparc_can_follow_jump): New static function.\n\t(output_ubranch): Deal with CROSSING_JUMP_P.\n\t(sparc_use_sched_lookahead): Rewrite using switch statement.\n\t(sparc_issue_rate): Reorder.\n\t(sparc_branch_cost): New function.\n\nFrom-SVN: r264687", "tree": {"sha": "d55bdb8802f5a822878c0fb1037b0babb1223f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d55bdb8802f5a822878c0fb1037b0babb1223f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/227efe870043c9e8b4c58a702e90698b2970ff75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227efe870043c9e8b4c58a702e90698b2970ff75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/227efe870043c9e8b4c58a702e90698b2970ff75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227efe870043c9e8b4c58a702e90698b2970ff75/comments", "author": null, "committer": null, "parents": [{"sha": "7847bfcbb8f5ee155f13a46af600f83892423c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7847bfcbb8f5ee155f13a46af600f83892423c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7847bfcbb8f5ee155f13a46af600f83892423c52"}], "stats": {"total": 252, "additions": 168, "deletions": 84}, "files": [{"sha": "33001bb011c93c53e5e2d810efa9c904bc42850d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,3 +1,33 @@\n+2018-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc-protos.h (sparc_branch_cost): Declare.\n+\t* config/sparc/sparc.h (BRANCH_COST): Call sparc_branch_cost.\n+\t* config/sparc/sparc.c (struct processor_costs): Add branch_cost field.\n+\t(cypress_costs): Set it.\n+\t(supersparc_costs): Likewise.\n+\t(hypersparc_costs): Likewise.\n+\t(leon_cost): Likewise.\n+\t(leon3_costs): Likewise.\n+\t(sparclet_costs): Likewise.\n+\t(ultrasparc_costs): Likewise.\n+\t(ultrasparc_costs): Likewise.\n+\t(niagara_costs): Likewise.\n+\t(niagara2_costs): Likewise.\n+\t(niagara3_costs): Likewise.\n+\t(niagara4_costs): Likewise.\n+\t(niagara7_costs): Likewise.\n+\t(m8_costs): Likewise.\n+\t(TARGET_CAN_FOLLOW_JUMP): Define.\n+\t(pass_work_around_errata::gate): Minor tweak.\n+\t(sparc_option_override): Remove MASK_FSMULD mask for V7 processors.\n+\tDo not set both MASK_VIS4 and MASK_VIS4B for M8 processor.\n+\tAutomaitcally clear MASK_FSMULD mask for V7 processors.\n+\t(sparc_can_follow_jump): New static function.\n+\t(output_ubranch): Deal with CROSSING_JUMP_P.\n+\t(sparc_use_sched_lookahead): Rewrite using switch statement.\n+\t(sparc_issue_rate): Reorder.\n+\t(sparc_branch_cost): New function.\n+\n 2018-09-27  Martin Sebor  <msebor@redhat.com>\n \n \t* tree.h (tree_to_shwi): Add attribute nonnull and pure."}, {"sha": "12613dbc516bb60371fb816e7cad15e995b9fa8e", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -43,6 +43,7 @@ extern void sparc_override_options (void);\n extern void sparc_output_scratch_registers (FILE *);\n extern void sparc_target_macros (void);\n extern void sparc_emit_membar_for_model (enum memmodel, int, int);\n+extern int sparc_branch_cost (bool, bool);\n \n #ifdef RTX_CODE\n extern machine_mode select_cc_mode (enum rtx_code, rtx, rtx);"}, {"sha": "23e356c4fbe42be29dcf0c41c6b334d800bffdde", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 114, "deletions": 41, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -139,6 +139,9 @@ struct processor_costs {\n \n   /* penalty for shifts, due to scheduling rules etc. */\n   const int shift_penalty;\n+\n+  /* cost of a (predictable) branch.  */\n+  const int branch_cost;\n };\n \n static const\n@@ -163,6 +166,7 @@ struct processor_costs cypress_costs = {\n   COSTS_N_INSNS (1), /* idivX */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  3 /* branch cost */\n };\n \n static const\n@@ -187,6 +191,7 @@ struct processor_costs supersparc_costs = {\n   COSTS_N_INSNS (4), /* idivX */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   1, /* shift penalty */\n+  3 /* branch cost */\n };\n \n static const\n@@ -211,6 +216,7 @@ struct processor_costs hypersparc_costs = {\n   COSTS_N_INSNS (17), /* idivX */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  3 /* branch cost */\n };\n \n static const\n@@ -235,6 +241,7 @@ struct processor_costs leon_costs = {\n   COSTS_N_INSNS (5), /* idivX */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  3 /* branch cost */\n };\n \n static const\n@@ -259,6 +266,7 @@ struct processor_costs leon3_costs = {\n   COSTS_N_INSNS (35), /* idivX */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  3 /* branch cost */\n };\n \n static const\n@@ -283,6 +291,7 @@ struct processor_costs sparclet_costs = {\n   COSTS_N_INSNS (5), /* idivX */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  3 /* branch cost */\n };\n \n static const\n@@ -307,6 +316,7 @@ struct processor_costs ultrasparc_costs = {\n   COSTS_N_INSNS (68), /* idivX */\n   COSTS_N_INSNS (2), /* movcc/movr */\n   2, /* shift penalty */\n+  2 /* branch cost */\n };\n \n static const\n@@ -331,6 +341,7 @@ struct processor_costs ultrasparc3_costs = {\n   COSTS_N_INSNS (71), /* idivX */\n   COSTS_N_INSNS (2), /* movcc/movr */\n   0, /* shift penalty */\n+  2 /* branch cost */\n };\n \n static const\n@@ -355,6 +366,7 @@ struct processor_costs niagara_costs = {\n   COSTS_N_INSNS (72), /* idivX */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  4 /* branch cost */\n };\n \n static const\n@@ -379,6 +391,7 @@ struct processor_costs niagara2_costs = {\n   COSTS_N_INSNS (26), /* idivX, average of 12 - 41 cycle range */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  5 /* branch cost */\n };\n \n static const\n@@ -403,6 +416,7 @@ struct processor_costs niagara3_costs = {\n   COSTS_N_INSNS (30), /* idivX, average of 16 - 44 cycle range */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  5 /* branch cost */\n };\n \n static const\n@@ -427,6 +441,7 @@ struct processor_costs niagara4_costs = {\n   COSTS_N_INSNS (35), /* idivX, average of 26 - 44 cycle range */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  2 /* branch cost */\n };\n \n static const\n@@ -451,6 +466,7 @@ struct processor_costs niagara7_costs = {\n   COSTS_N_INSNS (35), /* idivX, average of 26 - 44 cycle range */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  1 /* branch cost */\n };\n \n static const\n@@ -475,6 +491,7 @@ struct processor_costs m8_costs = {\n   COSTS_N_INSNS (30), /* udivx/sdivx */\n   COSTS_N_INSNS (1), /* movcc/movr */\n   0, /* shift penalty */\n+  1 /* branch cost */\n };\n \n static const struct processor_costs *sparc_costs = &cypress_costs;\n@@ -693,6 +710,7 @@ static bool sparc_can_change_mode_class (machine_mode, machine_mode,\n static HOST_WIDE_INT sparc_constant_alignment (const_tree, HOST_WIDE_INT);\n static bool sparc_vectorize_vec_perm_const (machine_mode, rtx, rtx, rtx,\n \t\t\t\t\t    const vec_perm_indices &);\n+static bool sparc_can_follow_jump (const rtx_insn *, const rtx_insn *);\n \f\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n /* Table of valid machine attributes.  */\n@@ -946,6 +964,9 @@ char sparc_hard_reg_printed[8];\n #undef TARGET_VECTORIZE_VEC_PERM_CONST\n #define TARGET_VECTORIZE_VEC_PERM_CONST sparc_vectorize_vec_perm_const\n \n+#undef TARGET_CAN_FOLLOW_JUMP\n+#define TARGET_CAN_FOLLOW_JUMP sparc_can_follow_jump\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Return the memory reference contained in X if any, zero otherwise.  */\n@@ -1523,8 +1544,9 @@ class pass_work_around_errata : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return sparc_fix_at697f || sparc_fix_ut699 || sparc_fix_b2bst\n-\t  || sparc_fix_gr712rc || sparc_fix_ut700 || sparc_fix_lost_divsqrt;\n+      return sparc_fix_at697f\n+\t     || sparc_fix_ut699 || sparc_fix_ut700 || sparc_fix_gr712rc\n+\t     || sparc_fix_b2bst || sparc_fix_lost_divsqrt;\n     }\n \n   virtual unsigned int execute (function *)\n@@ -1657,24 +1679,24 @@ sparc_option_override (void)\n     const int disable;\n     const int enable;\n   } const cpu_table[] = {\n-    { \"v7\",\t\tMASK_ISA|MASK_FSMULD, 0 },\n-    { \"cypress\",\tMASK_ISA|MASK_FSMULD, 0 },\n+    { \"v7\",\t\tMASK_ISA, 0 },\n+    { \"cypress\",\tMASK_ISA, 0 },\n     { \"v8\",\t\tMASK_ISA, MASK_V8 },\n     /* TI TMS390Z55 supersparc */\n     { \"supersparc\",\tMASK_ISA, MASK_V8 },\n     { \"hypersparc\",\tMASK_ISA, MASK_V8 },\n     { \"leon\",\t\tMASK_ISA|MASK_FSMULD, MASK_V8|MASK_LEON },\n     { \"leon3\",\t\tMASK_ISA, MASK_V8|MASK_LEON3 },\n-    { \"leon3v7\",\tMASK_ISA|MASK_FSMULD, MASK_LEON3 },\n-    { \"sparclite\",\tMASK_ISA|MASK_FSMULD, MASK_SPARCLITE },\n+    { \"leon3v7\",\tMASK_ISA, MASK_LEON3 },\n+    { \"sparclite\",\tMASK_ISA, MASK_SPARCLITE },\n     /* The Fujitsu MB86930 is the original sparclite chip, with no FPU.  */\n     { \"f930\",\t\tMASK_ISA|MASK_FPU, MASK_SPARCLITE },\n     /* The Fujitsu MB86934 is the recent sparclite chip, with an FPU.  */\n-    { \"f934\",\t\tMASK_ISA|MASK_FSMULD, MASK_SPARCLITE },\n+    { \"f934\",\t\tMASK_ISA, MASK_SPARCLITE },\n     { \"sparclite86x\",\tMASK_ISA|MASK_FPU, MASK_SPARCLITE },\n-    { \"sparclet\",\tMASK_ISA|MASK_FSMULD, MASK_SPARCLET },\n+    { \"sparclet\",\tMASK_ISA, MASK_SPARCLET },\n     /* TEMIC sparclet */\n-    { \"tsc701\",\t\tMASK_ISA|MASK_FSMULD, MASK_SPARCLET },\n+    { \"tsc701\",\t\tMASK_ISA, MASK_SPARCLET },\n     { \"v9\",\t\tMASK_ISA, MASK_V9 },\n     /* UltraSPARC I, II, IIi */\n     { \"ultrasparc\",\tMASK_ISA,\n@@ -1701,7 +1723,7 @@ sparc_option_override (void)\n       MASK_V9|MASK_POPC|MASK_VIS4|MASK_FMAF|MASK_CBCOND|MASK_SUBXC },\n     /* UltraSPARC M8 */\n     { \"m8\",\t\tMASK_ISA,\n-      MASK_V9|MASK_POPC|MASK_VIS4|MASK_FMAF|MASK_CBCOND|MASK_SUBXC|MASK_VIS4B }\n+      MASK_V9|MASK_POPC|MASK_VIS4B|MASK_FMAF|MASK_CBCOND|MASK_SUBXC }\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;\n@@ -1844,6 +1866,10 @@ sparc_option_override (void)\n \t\t   & ~(target_flags_explicit & MASK_FEATURES)\n \t\t   );\n \n+  /* FsMULd is a V8 instruction.  */\n+  if (!TARGET_V8 && !TARGET_V9)\n+    target_flags &= ~MASK_FSMULD;\n+\n   /* -mvis2 implies -mvis.  */\n   if (TARGET_VIS2)\n     target_flags |= MASK_VIS;\n@@ -1897,8 +1923,8 @@ sparc_option_override (void)\n   /* Enable applicable errata workarounds for LEON3FT.  */\n   if (sparc_fix_ut699 || sparc_fix_ut700 || sparc_fix_gr712rc)\n     {\n-    sparc_fix_b2bst = 1;\n-    sparc_fix_lost_divsqrt = 1;\n+      sparc_fix_b2bst = 1;\n+      sparc_fix_lost_divsqrt = 1;\n     }\n \n   /* Disable FsMULd for the UT699 since it doesn't work correctly.  */\n@@ -8003,6 +8029,19 @@ sparc_preferred_simd_mode (scalar_mode mode)\n   return word_mode;\n }\n \f\n+\f/* Implement TARGET_CAN_FOLLOW_JUMP.  */\n+\n+static bool\n+sparc_can_follow_jump (const rtx_insn *follower, const rtx_insn *followee)\n+{\n+  /* Do not fold unconditional jumps that have been created for crossing\n+     partition boundaries.  */\n+  if (CROSSING_JUMP_P (followee) && !CROSSING_JUMP_P (follower))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Return the string to output an unconditional branch to LABEL, which is\n    the operand number of the label.\n \n@@ -8018,9 +8057,8 @@ output_ubranch (rtx dest, rtx_insn *insn)\n \n   /* Even if we are trying to use cbcond for this, evaluate\n      whether we can use V9 branches as our backup plan.  */\n-\n   delta = 5000000;\n-  if (INSN_ADDRESSES_SET_P ())\n+  if (!CROSSING_JUMP_P (insn) && INSN_ADDRESSES_SET_P ())\n     delta = (INSN_ADDRESSES (INSN_UID (dest))\n \t     - INSN_ADDRESSES (INSN_UID (insn)));\n \n@@ -10158,51 +10196,86 @@ sparc_sched_init (FILE *dump ATTRIBUTE_UNUSED,\n static int\n sparc_use_sched_lookahead (void)\n {\n-  if (sparc_cpu == PROCESSOR_NIAGARA\n-      || sparc_cpu == PROCESSOR_NIAGARA2\n-      || sparc_cpu == PROCESSOR_NIAGARA3)\n-    return 0;\n-  if (sparc_cpu == PROCESSOR_NIAGARA4\n-      || sparc_cpu == PROCESSOR_NIAGARA7\n-      || sparc_cpu == PROCESSOR_M8)\n-    return 2;\n-  if (sparc_cpu == PROCESSOR_ULTRASPARC\n-      || sparc_cpu == PROCESSOR_ULTRASPARC3)\n-    return 4;\n-  if ((1 << sparc_cpu) &\n-      ((1 << PROCESSOR_SUPERSPARC) | (1 << PROCESSOR_HYPERSPARC) |\n-       (1 << PROCESSOR_SPARCLITE86X)))\n-    return 3;\n-  return 0;\n+  switch (sparc_cpu)\n+    {\n+    case PROCESSOR_ULTRASPARC:\n+    case PROCESSOR_ULTRASPARC3:\n+      return 4;\n+    case PROCESSOR_SUPERSPARC:\n+    case PROCESSOR_HYPERSPARC:\n+    case PROCESSOR_SPARCLITE86X:\n+      return 3;\n+    case PROCESSOR_NIAGARA4:\n+    case PROCESSOR_NIAGARA7:\n+    case PROCESSOR_M8:\n+      return 2;\n+    case PROCESSOR_NIAGARA:\n+    case PROCESSOR_NIAGARA2:\n+    case PROCESSOR_NIAGARA3:\n+    default:\n+      return 0;\n+    }\n }\n \n static int\n sparc_issue_rate (void)\n {\n   switch (sparc_cpu)\n     {\n+    case PROCESSOR_ULTRASPARC:\n+    case PROCESSOR_ULTRASPARC3:\n+    case PROCESSOR_M8:\n+      return 4;\n+    case PROCESSOR_SUPERSPARC:\n+      return 3;\n+    case PROCESSOR_HYPERSPARC:\n+    case PROCESSOR_SPARCLITE86X:\n+    case PROCESSOR_V9:\n+      /* Assume V9 processors are capable of at least dual-issue.  */\n+    case PROCESSOR_NIAGARA4:\n+    case PROCESSOR_NIAGARA7:\n+      return 2;\n     case PROCESSOR_NIAGARA:\n     case PROCESSOR_NIAGARA2:\n     case PROCESSOR_NIAGARA3:\n     default:\n       return 1;\n-    case PROCESSOR_NIAGARA4:\n-    case PROCESSOR_NIAGARA7:\n+    }\n+}\n+\n+int\n+sparc_branch_cost (bool speed_p, bool predictable_p)\n+{\n+  if (!speed_p)\n+    return 2;\n+\n+  /* For pre-V9 processors we use a single value (usually 3) to take into\n+     account the potential annulling of the delay slot (which ends up being\n+     a bubble in the pipeline slot) plus a cycle to take into consideration\n+     the instruction cache effects.\n+\n+     On V9 and later processors, which have branch prediction facilities,\n+     we take into account whether the branch is (easily) predictable.  */\n+  const int cost = sparc_costs->branch_cost;\n+\n+  switch (sparc_cpu)\n+    {\n     case PROCESSOR_V9:\n-      /* Assume V9 processors are capable of at least dual-issue.  */\n-      return 2;\n-    case PROCESSOR_SUPERSPARC:\n-      return 3;\n-    case PROCESSOR_HYPERSPARC:\n-    case PROCESSOR_SPARCLITE86X:\n-      return 2;\n     case PROCESSOR_ULTRASPARC:\n     case PROCESSOR_ULTRASPARC3:\n+    case PROCESSOR_NIAGARA:\n+    case PROCESSOR_NIAGARA2:\n+    case PROCESSOR_NIAGARA3:\n+    case PROCESSOR_NIAGARA4:\n+    case PROCESSOR_NIAGARA7:\n     case PROCESSOR_M8:\n-      return 4;\n+      return cost + (predictable_p ? 0 : 2);\n+\n+    default:\n+      return cost;\n     }\n }\n-\n+      \n static int\n set_extends (rtx_insn *insn)\n {"}, {"sha": "520a6b3208318eddae54f7d03a7f579cf95ec4d4", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1496,41 +1496,10 @@ do {\t\t\t\t\t\t\t\t\t   \\\n #define DITF_CONVERSION_LIBFUNCS\t0\n #define SUN_INTEGER_MULTIPLY_64 \t0\n \n-/* Provide the cost of a branch.  For pre-v9 processors we use\n-   a value of 3 to take into account the potential annulling of\n-   the delay slot (which ends up being a bubble in the pipeline slot)\n-   plus a cycle to take into consideration the instruction cache\n-   effects.\n-\n-   On v9 and later, which have branch prediction facilities, we set\n-   it to the depth of the pipeline as that is the cost of a\n-   mispredicted branch.\n-\n-   On Niagara, normal branches insert 3 bubbles into the pipe\n-   and annulled branches insert 4 bubbles.\n-\n-   On Niagara-2 and Niagara-3, a not-taken branch costs 1 cycle whereas\n-   a taken branch costs 6 cycles.\n-\n-   The T4 Supplement specifies the branch latency at 2 cycles.\n-   The M7 Supplement specifies the branch latency at 1 cycle. */\n-\n-#define BRANCH_COST(speed_p, predictable_p) \\\n-\t((sparc_cpu == PROCESSOR_V9 \\\n-\t  || sparc_cpu == PROCESSOR_ULTRASPARC) \\\n-\t ? 7 \\\n-         : (sparc_cpu == PROCESSOR_ULTRASPARC3 \\\n-            ? 9 \\\n-\t : (sparc_cpu == PROCESSOR_NIAGARA \\\n-\t    ? 4 \\\n-\t : ((sparc_cpu == PROCESSOR_NIAGARA2 \\\n-\t     || sparc_cpu == PROCESSOR_NIAGARA3) \\\n-\t    ? 5 \\\n-\t : (sparc_cpu == PROCESSOR_NIAGARA4 \\\n-\t    ? 2 \\\n-\t : (sparc_cpu == PROCESSOR_NIAGARA7 \\\n-\t    ? 1 \\\n-\t : 3))))))\n+/* A C expression for the cost of a branch instruction.  A value of 1\n+   is the default; other values are interpreted relative to that.  */\n+#define BRANCH_COST(SPEED_P, PREDICTABLE_P) \\\n+  (sparc_branch_cost (SPEED_P, PREDICTABLE_P))\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "25f6df62716e23e5422105569bf6d03b969bfc2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,3 +1,14 @@\n+2018-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/20160229-1.c: Minor tweak.\n+\t* gcc.target/sparc/cbcond-2.c: Likewise.\n+\t* gcc.target/sparc/movcc-1.c: Add -mcpu=v9 option.\n+\t* gcc.target/sparc/movcc-2.c: Minor tweak.\n+\t* gcc.target/sparc/overflow-3.c: Likewise.\n+\t* gcc.target/sparc/overflow-4.c: Add -mno-vis4 option.\n+\t* gcc.target/sparc/overflow-5.c: Minor tweak.\n+\t* gcc.target/sparc/setcc-4.c: Add -mno-vis4 option.\n+\n 2018-09-27  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* g++.dg/ext/altivec-6.C: Change the vec_splat second argument to a"}, {"sha": "1a57070b66679a13c98b763fd10b8152a5ba3446", "filename": "gcc/testsuite/gcc.target/sparc/20160229-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20160229-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20160229-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20160229-1.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -2,8 +2,8 @@\n /* Reported by John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de> */\n \n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" }\n /* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-std=gnu99\" } */\n \n extern void abort (void);\n "}, {"sha": "da6c617b4e4f92feddedb0149ce1072e1b035b02", "filename": "gcc/testsuite/gcc.target/sparc/cbcond-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcbcond-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcbcond-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fcbcond-2.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mcbcond\" } */\n /* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O -mcbcond\" } */\n \n extern void foo (void);\n extern void bar (void);"}, {"sha": "8580816b0e22483c5b846e46cfea32655fe0e1f1", "filename": "gcc/testsuite/gcc.target/sparc/movcc-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmovcc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmovcc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmovcc-1.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mcpu=v9\" } */\n \n int foo1 (int a)\n {"}, {"sha": "38c742aef75014625a652067ba78df0a543fb964", "filename": "gcc/testsuite/gcc.target/sparc/movcc-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmovcc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmovcc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmovcc-2.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n /* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n \n long foo1 (long a)\n {"}, {"sha": "86dddfb09e6a6221a841295601335c61e420b8df", "filename": "gcc/testsuite/gcc.target/sparc/overflow-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-3.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O\" } */\n /* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O\" } */\n \n #include <stdbool.h>\n #include <stdint.h>"}, {"sha": "019feee335caa796dcc2a2080d3d0f7aa0ba9d83", "filename": "gcc/testsuite/gcc.target/sparc/overflow-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-4.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mno-vis3\" } */\n /* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O -mno-vis3 -mno-vis4\" } */\n \n #include <stdbool.h>\n #include <stdint.h>"}, {"sha": "67d4ac38095092a7fc22de1fd0e130162c479f4b", "filename": "gcc/testsuite/gcc.target/sparc/overflow-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-5.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -mvis3\" } */\n /* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O -mvis3\" } */\n \n #include <stdbool.h>\n #include <stdint.h>"}, {"sha": "6afa8a7f1331a183eacecd3f91cbd82a05543311", "filename": "gcc/testsuite/gcc.target/sparc/setcc-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227efe870043c9e8b4c58a702e90698b2970ff75/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-4.c?ref=227efe870043c9e8b4c58a702e90698b2970ff75", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O1 -mno-vis3\" } */\n+/* { dg-options \"-O1 -mno-vis3 -mno-vis4\" } */\n \n long neq (long a, long b)\n {"}]}