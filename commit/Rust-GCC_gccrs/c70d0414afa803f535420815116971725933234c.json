{"sha": "c70d0414afa803f535420815116971725933234c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwZDA0MTRhZmE4MDNmNTM1NDIwODE1MTE2OTcxNzI1OTMzMjM0Yw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2008-09-22T01:54:03Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2008-09-22T01:54:03Z"}, "message": "re PR target/37170 (gcc.dg/weak/weak-1.c)\n\n\tPR middle-end/37170\n\tPR middle-end/37280\n\t* final.c (mark_symbol_ref_as_used): New helper function.\n\t(output_operand): Instead of just looking inside MEMs for\n\tSYMBOL_REFs, use new helper function and for_each_rtx.\n\t* varasm.c (assemble_external): Move #ifndef ASM_OUTPUT_EXTERNAL\n\tto after weak-handling.  Don't mark decls with TREE_STATIC as weak.\n\tMake head comment more general.\n\t* config/darwin.c (machopic_output_indirection): Handle weak\n\treferences here, like in assemble_external.\n\nFrom-SVN: r140539", "tree": {"sha": "dacbdaca2921aa2efeafb9bf75733643142af3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dacbdaca2921aa2efeafb9bf75733643142af3ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c70d0414afa803f535420815116971725933234c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70d0414afa803f535420815116971725933234c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c70d0414afa803f535420815116971725933234c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70d0414afa803f535420815116971725933234c/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df969fc7a3004d812d22a9855283e2f7cf7cf96a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df969fc7a3004d812d22a9855283e2f7cf7cf96a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df969fc7a3004d812d22a9855283e2f7cf7cf96a"}], "stats": {"total": 97, "additions": 82, "deletions": 15}, "files": [{"sha": "195457c5ba02201e08861d626a510fff57569656", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70d0414afa803f535420815116971725933234c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70d0414afa803f535420815116971725933234c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c70d0414afa803f535420815116971725933234c", "patch": "@@ -1,3 +1,16 @@\n+2008-09-22  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR middle-end/37170\n+\tPR middle-end/37280\n+\t* final.c (mark_symbol_ref_as_used): New helper function.\n+\t(output_operand): Instead of just looking inside MEMs for\n+\tSYMBOL_REFs, use new helper function and for_each_rtx.\n+\t* varasm.c (assemble_external): Move #ifndef ASM_OUTPUT_EXTERNAL\n+\tto after weak-handling.  Don't mark decls with TREE_STATIC as weak.\n+\tMake head comment more general.\n+\t* config/darwin.c (machopic_output_indirection): Handle weak\n+\treferences here, like in assemble_external.\n+\n 2008-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc-protos.h (gen_compare_operator): Declare."}, {"sha": "fe332738c548e6ac263f16ce605e7f9166acd3df", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70d0414afa803f535420815116971725933234c/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70d0414afa803f535420815116971725933234c/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c70d0414afa803f535420815116971725933234c", "patch": "@@ -1002,6 +1002,30 @@ machopic_output_indirection (void **slot, void *data)\n       rtx init = const0_rtx;\n \n       switch_to_section (darwin_sections[machopic_nl_symbol_ptr_section]);\n+\n+      /* Mach-O symbols are passed around in code through indirect\n+\t references and the original symbol_ref hasn't passed through\n+\t the generic handling and reference-catching in\n+\t output_operand, so we need to manually mark weak references\n+\t as such.  */\n+      if (SYMBOL_REF_WEAK (symbol))\n+\t{\n+\t  tree decl = SYMBOL_REF_DECL (symbol);\n+\t  gcc_assert (DECL_P (decl));\n+\n+\t  if (decl != NULL_TREE\n+\t      && DECL_EXTERNAL (decl) && TREE_PUBLIC (decl)\n+\t      /* Handle only actual external-only definitions, not\n+\t\t e.g. extern inline code or variables for which\n+\t\t storage has been allocated.  */\n+\t      && !TREE_STATIC (decl))\n+\t    {\n+\t      fputs (\"\\t.weak_reference \", asm_out_file);\n+\t      assemble_name (asm_out_file, sym_name);\n+\t      fputc ('\\n', asm_out_file);\n+\t    }\n+\t}\n+\n       assemble_name (asm_out_file, ptr_name);\n       fprintf (asm_out_file, \":\\n\");\n "}, {"sha": "e2d9e5a9766361c6980d781aac752f0f366bd155", "filename": "gcc/final.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70d0414afa803f535420815116971725933234c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70d0414afa803f535420815116971725933234c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c70d0414afa803f535420815116971725933234c", "patch": "@@ -3349,6 +3349,31 @@ output_asm_label (rtx x)\n   assemble_name (asm_out_file, buf);\n }\n \n+/* Helper rtx-iteration-function for output_operand.  Marks\n+   SYMBOL_REFs as referenced through use of assemble_external.  */\n+\n+static int\n+mark_symbol_ref_as_used (rtx *xp, void *dummy ATTRIBUTE_UNUSED)\n+{\n+  rtx x = *xp;\n+\n+  /* If we have a used symbol, we may have to emit assembly\n+     annotations corresponding to whether the symbol is external, weak\n+     or has non-default visibility.  */\n+  if (GET_CODE (x) == SYMBOL_REF)\n+    {\n+      tree t;\n+\n+      t = SYMBOL_REF_DECL (x);\n+      if (t)\n+\tassemble_external (t);\n+\n+      return -1;\n+    }\n+\n+  return 0;\n+}\n+\n /* Print operand X using machine-dependent assembler syntax.\n    The macro PRINT_OPERAND is defined just to control this function.\n    CODE is a non-digit that preceded the operand-number in the % spec,\n@@ -3369,14 +3394,11 @@ output_operand (rtx x, int code ATTRIBUTE_UNUSED)\n   gcc_assert (!x || !REG_P (x) || REGNO (x) < FIRST_PSEUDO_REGISTER);\n \n   PRINT_OPERAND (asm_out_file, x, code);\n-  if (x && MEM_P (x) && GET_CODE (XEXP (x, 0)) == SYMBOL_REF)\n-    {\n-      tree t;\n-      x = XEXP (x, 0);\n-      t = SYMBOL_REF_DECL (x);\n-      if (t)\n-\tassemble_external (t);\n-    }\n+\n+  if (x == NULL_RTX)\n+    return;\n+\n+  for_each_rtx (&x, mark_symbol_ref_as_used, NULL);\n }\n \n /* Print a memory reference operand for address X"}, {"sha": "4fe3c96703277dfefeecbbdbce654aa60d56c10e", "filename": "gcc/varasm.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70d0414afa803f535420815116971725933234c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70d0414afa803f535420815116971725933234c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c70d0414afa803f535420815116971725933234c", "patch": "@@ -2290,9 +2290,10 @@ process_pending_assemble_externals (void)\n    to be emitted.  */\n static GTY(()) tree weak_decls;\n \n-/* Output something to declare an external symbol to the assembler.\n-   (Most assemblers don't need this, so we normally output nothing.)\n-   Do nothing if DECL is not external.  */\n+/* Output something to declare an external symbol to the assembler,\n+   and qualifiers such as weakness.  (Most assemblers don't need\n+   extern declaration, so we normally output nothing.)  Do nothing if\n+   DECL is not external.  */\n \n void\n assemble_external (tree decl ATTRIBUTE_UNUSED)\n@@ -2303,15 +2304,22 @@ assemble_external (tree decl ATTRIBUTE_UNUSED)\n      open.  If it's not, we should not be calling this function.  */\n   gcc_assert (asm_out_file);\n \n-#ifdef ASM_OUTPUT_EXTERNAL\n   if (!DECL_P (decl) || !DECL_EXTERNAL (decl) || !TREE_PUBLIC (decl))\n     return;\n \n-  if (SUPPORTS_WEAK && DECL_WEAK (decl))\n+  /* We want to output annotation for weak and external symbols at\n+     very last to check if they are references or not.  */\n+\n+  if (SUPPORTS_WEAK && DECL_WEAK (decl)\n+      /* TREE_STATIC is a weird and abused creature which is not\n+\t generally the right test for whether an entity has been\n+\t locally emitted, inlined or otherwise not-really-extern, but\n+\t for declarations that can be weak, it happens to be\n+\t match.  */\n+      && !TREE_STATIC (decl))\n     weak_decls = tree_cons (NULL, decl, weak_decls);\n \n-  /* We want to output external symbols at very last to check if they\n-     are references or not.  */\n+#ifdef ASM_OUTPUT_EXTERNAL\n   pending_assemble_externals = tree_cons (0, decl,\n \t\t\t\t\t  pending_assemble_externals);\n #endif"}]}