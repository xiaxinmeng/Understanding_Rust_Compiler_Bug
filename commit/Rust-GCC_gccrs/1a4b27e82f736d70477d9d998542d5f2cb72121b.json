{"sha": "1a4b27e82f736d70477d9d998542d5f2cb72121b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0YjI3ZTgyZjczNmQ3MDQ3N2Q5ZDk5ODU0MmQ1ZjJjYjcyMTIxYg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2002-06-17T19:11:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-17T19:11:40Z"}, "message": "ActivateFailedException.java: Remerge from Classpath version.\n\n\t* java/rmi/activation/ActivateFailedException.java: Remerge from\n\tClasspath version.\n\t* java/rmi/activation/ActivationException.java: Ditto.\n\t* java/rmi/activation/UnknownGroupException.java: Ditto.\n\t* java/rmi/activation/UnknownObjectException.java: Ditto.\n\t* java/rmi/server/ExportException: Ditto.\n\t* java/rmi/server/ServerCloneException: Ditto.\n\t* java/rmi/server/ServerNotActiveException: Ditto.\n\t* java/rmi/server/SkeletonMismatchException: Ditto.\n\t* java/rmi/server/SkeletonNotFoundException: Ditto.\n\t* java/rmi/server/SocketSecurityException: Ditto.\n\nFrom-SVN: r54711", "tree": {"sha": "72322c6968c8d01f3b23ae417d736e189f680948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72322c6968c8d01f3b23ae417d736e189f680948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a4b27e82f736d70477d9d998542d5f2cb72121b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4b27e82f736d70477d9d998542d5f2cb72121b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4b27e82f736d70477d9d998542d5f2cb72121b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4b27e82f736d70477d9d998542d5f2cb72121b/comments", "author": null, "committer": null, "parents": [{"sha": "df696a75734ea7998d0d5ef75cbafba8be33c908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df696a75734ea7998d0d5ef75cbafba8be33c908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df696a75734ea7998d0d5ef75cbafba8be33c908"}], "stats": {"total": 640, "additions": 448, "deletions": 192}, "files": [{"sha": "ea816d9df8d543b650b7937e249ee3e13769e320", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,3 +1,17 @@\n+2002-06-17  Nathanael Nerode  <neroden@twcny.rr.com>\n+\n+\t* java/rmi/activation/ActivateFailedException.java: Remerge from\n+\tClasspath version.\n+\t* java/rmi/activation/ActivationException.java: Ditto.\n+\t* java/rmi/activation/UnknownGroupException.java: Ditto.\n+\t* java/rmi/activation/UnknownObjectException.java: Ditto.\n+\t* java/rmi/server/ExportException: Ditto.\n+\t* java/rmi/server/ServerCloneException: Ditto.\n+\t* java/rmi/server/ServerNotActiveException: Ditto.\n+\t* java/rmi/server/SkeletonMismatchException: Ditto.\n+\t* java/rmi/server/SkeletonNotFoundException: Ditto.\n+\t* java/rmi/server/SocketSecurityException: Ditto.\n+\n 2002-06-16  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj/javaprims.h: Updated class declaration list."}, {"sha": "02d764c6cc6b1954918fd48b1b96978d5d014745", "filename": "libjava/java/rmi/activation/ActivateFailedException.java", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FActivateFailedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FActivateFailedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivateFailedException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ActivateFailedException.java -- thrown when activation fails\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,15 +39,38 @@\n \n import java.rmi.RemoteException;\n \n-public class ActivateFailedException\n-\textends RemoteException {\n-\n-public ActivateFailedException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown when activation fails on a remote call to an activatable object.\n+ *\n+ * @author unknown\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n+public class ActivateFailedException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 4863550261346652506L;\n \n-public ActivateFailedException(String s, Exception ex) {\n-\tsuper(s, ex);\n-}\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public ActivateFailedException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param ex the cause\n+   */\n+  public ActivateFailedException(String s, Exception ex)\n+  {\n+    super(s, ex);\n+  }\n }"}, {"sha": "a1ac7bd6a2830cb15fd189e6e9c95a14cc590cd5", "filename": "libjava/java/rmi/activation/ActivationException.java", "status": "modified", "additions": 85, "deletions": 51, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FActivationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FActivationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FActivationException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ActivationException.java -- general Activation exception\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,52 +37,86 @@\n \n package java.rmi.activation;\n \n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n-public class ActivationException\n-\textends Exception {\n-\n-public Throwable detail;\n-\n-public ActivationException() {\n-\tsuper();\n-}\n-\n-public ActivationException(String s) {\n-\tsuper(s);\n-}\n-\n-public ActivationException(String s, Throwable ex) {\n-\tsuper(s);\n-\tdetail = ex;\n-}\n-\n-public String getMessage() {\n-\tif (detail == null) {\n-\t\treturn (super.getMessage());\n-\t}\n-\telse {\n-\t\treturn (super.getMessage() + \":\" + detail.getMessage());\n-\t}\n-}\n-\n-public void printStackTrace(PrintStream s) {\n-        if (detail != null) {\n-                detail.printStackTrace(s);\n-        }\n-        super.printStackTrace(s);\n-}\n-\n-public void printStackTrace() {\n-\tprintStackTrace(System.err);\n-}\n-\n-public void printStackTrace(PrintWriter s) {\n-        if (detail != null) {\n-                detail.printStackTrace(s);\n-        }\n-        super.printStackTrace(s);\n-}\n-\n+/**\n+ * General exception class for <code>java.rmi.activation</code>.\n+ *\n+ * @author unknown\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n+public class ActivationException extends Exception\n+{\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = -4320118837291406071L;\n+\n+  /**\n+   * The cause of this exception. This pre-dates the exception chaining\n+   * of Throwable; and although you can change this field, you are wiser\n+   * to leave it alone.\n+   *\n+   * @serial the exception cause\n+   */\n+  public Throwable detail;\n+\n+  /**\n+   * Create an exception with no message, and cause initialized to null.\n+   */\n+  public ActivationException()\n+  {\n+    this(null, null);\n+  }\n+\n+  /**\n+   * Create an exception with the given message, and cause initialized to null.\n+   *\n+   * @param s the message\n+   */\n+  public ActivationException(String s)\n+  {\n+    this(s, null);\n+  }\n+\n+  /**\n+   * Create an exception with the given message and cause.\n+   *\n+   * @param s the message\n+   * @param ex the cause\n+   */\n+  public ActivationException(String s, Throwable ex)\n+  {\n+    super(s, ex);\n+    detail = ex;\n+  }\n+\n+  /**\n+   * This method returns a message indicating what went wrong, in this\n+   * format:\n+   * <code>super.getMessage() + (detail == null ? \"\"\n+   *    : \"; nested exception is:\\n\\t\" + detail)<code>.\n+   *\n+   * @return the chained message\n+   */\n+  public String getMessage()\n+  {\n+    if (detail == this || detail == null)\n+      return super.getMessage();\n+    return super.getMessage() + \"; nested exception is:\\n\\t\" + detail;\n+  }\n+\n+  /**\n+   * Returns the cause of this exception. Note that this may not be the\n+   * original cause, thanks to the <code>detail</code> field being public\n+   * and non-final (yuck). However, to avoid violating the contract of\n+   * Throwable.getCause(), this returns null if <code>detail == this</code>,\n+   * as no exception can be its own cause.\n+   *\n+   * @return the cause\n+   * @since 1.4\n+   */\n+  public Throwable getCause()\n+  {\n+    return detail == this ? null : detail;\n+  }\n }"}, {"sha": "b53e8c28edf07aee0a23ae9a2a57552fd24bf07d", "filename": "libjava/java/rmi/activation/UnknownGroupException.java", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FUnknownGroupException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FUnknownGroupException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FUnknownGroupException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,5 +1,5 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* UnknownGroupException.java -- thrown on an invalid ActivationGroupID \n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,11 +37,33 @@\n \n package java.rmi.activation;\n \n-public class UnknownGroupException\n-\textends ActivationException {\n-\n-public UnknownGroupException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown when an <code>ActivationGroupID</code> parameter is invalid or\n+ * unknown.\n+ *\n+ * @author unknown\n+ * @see Activatable\n+ * @see ActivationGroup\n+ * @see ActivationID\n+ * @see ActivationMonitor\n+ * @see ActivationSystem\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n+public class UnknownGroupException extends ActivationException\n+{\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 7056094974750002460L;\n \n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public UnknownGroupException(String s)\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "81e3871ad9f124a066597848bcac39e501b7ee1a", "filename": "libjava/java/rmi/activation/UnknownObjectException.java", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FUnknownObjectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Factivation%2FUnknownObjectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Factivation%2FUnknownObjectException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* UnknownObjectException.java -- thrown on an invalid ActivationID\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,11 +37,33 @@\n \n package java.rmi.activation;\n \n-public class UnknownObjectException\n-\textends ActivationException {\n-\n-public UnknownObjectException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown when an <code>ActivationID</code> parameter is invalid or unknown.\n+ *\n+ * @author unknown\n+ * @see Activatable\n+ * @see ActivationGroup\n+ * @see ActivationID\n+ * @see ActivationMonitor\n+ * @see ActivationSystem\n+ * @see Activator\n+ * @since 1.2\n+ * @status updated to 1.4\n+ */\n+public class UnknownObjectException extends ActivationException\n+{\n+  /**\n+   * Compatible with JDK 1.2+.\n+   */\n+  private static final long serialVersionUID = 3425547551622251430L;\n \n+  /**\n+   * Create an exception with an error message.\n+   *\n+   * @param s the message\n+   */\n+  public UnknownObjectException(String s)\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "20e565c737227f09c761ce35035b9c09968b59be", "filename": "libjava/java/rmi/server/ExportException.java", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FExportException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FExportException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FExportException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ExportException.java -- an export attempt failed\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,15 +39,40 @@\n \n import java.rmi.RemoteException;\n \n-public class ExportException\n-\textends RemoteException {\n-\n-public ExportException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown if an attempt to export a remote object fails.\n+ *\n+ * @author unknown\n+ * @see UnicastRemoteObject\n+ * @see Activatable\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class ExportException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -9155485338494060170L;\n \n-public ExportException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with the specified message.\n+   *\n+   * @param s the message\n+   */\n+  public ExportException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with the specified message and cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public ExportException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "faf43c8e29ceb6a0167a852ca03a42a76fab0fb8", "filename": "libjava/java/rmi/server/ServerCloneException.java", "status": "modified", "additions": 80, "deletions": 49, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FServerCloneException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FServerCloneException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FServerCloneException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ServerCloneException.java -- a UnicastRemoteObject could not be cloned\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,50 +37,81 @@\n \n package java.rmi.server;\n \n-import java.lang.CloneNotSupportedException;\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n-public class ServerCloneException\n-\textends CloneNotSupportedException {\n-\n-public Exception detail;\n-\n-public ServerCloneException(String s) {\n-\tsuper(s);\n-\tdetail = null;\n-}\n-\n-public ServerCloneException(String s, Exception e) {\n-\tsuper(s);\n-\tdetail = e;\n-}\n-\n-public String getMessage() {\n-\tif (detail != null) {\n-\t\treturn (super.getMessage() + \":\" + detail.getMessage());\n-\t}\n-\telse {\n-\t\treturn (super.getMessage());\n-\t}\n-}\n-\n-public void printStackTrace(PrintStream s) {\n-\tif (detail != null) {\n-\t\tdetail.printStackTrace(s);\n-\t}\n-\tsuper.printStackTrace(s);\n-}\n-\n-public void printStackTrace() {\n-\tprintStackTrace(System.err);\n-}\n-\n-public void printStackTrace(PrintWriter s) {\n-\tif (detail != null) {\n-\t\tdetail.printStackTrace(s);\n-\t}\n-\tsuper.printStackTrace(s);\n-}\n-\n+/**\n+ * Thrown if a remote exception occurs during the cloning process of a\n+ * <code>UnicastRemoteObject</code>.\n+ *\n+ * @author unknown\n+ * @see UnicastRemoteObject#clone()\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class ServerCloneException extends CloneNotSupportedException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 6617456357664815945L;\n+\n+  /**\n+   * The cause of this exception. This pre-dates the exception chaining\n+   * of Throwable; and although you can change this field, you are wiser\n+   * to leave it alone.\n+   *\n+   * @serial the exception cause\n+   */\n+  public Exception detail;\n+\n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public ServerCloneException(String s)\n+  {\n+    this(s, null);\n+  }\n+\n+  /**\n+   * Create an exception with a message and a cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public ServerCloneException(String s, Exception e)\n+  {\n+    super(s);\n+    initCause(e);\n+    detail = e;\n+  }\n+\n+  /**\n+   * This method returns a message indicating what went wrong, in this\n+   * format:\n+   * <code>super.getMessage() + (detail == null ? \"\"\n+   *    : \"; nested exception is:\\n\\t\" + detail)<code>.\n+   *\n+   * @return the chained message\n+   */\n+  public String getMessage()\n+  {\n+    if (detail == this || detail == null)\n+      return super.getMessage();\n+    return super.getMessage() + \"; nested exception is:\\n\\t\" + detail;\n+  }\n+\n+  /**\n+   * Returns the cause of this exception. Note that this may not be the\n+   * original cause, thanks to the <code>detail</code> field being public\n+   * and non-final (yuck). However, to avoid violating the contract of\n+   * Throwable.getCause(), this returns null if <code>detail == this</code>,\n+   * as no exception can be its own cause.\n+   *\n+   * @return the cause\n+   * @since 1.4\n+   */\n+  public Throwable getCause()\n+  {\n+    return detail == this ? null : detail;\n+  }\n }"}, {"sha": "426d5e325a8f062bb8cf1de5d99fac0220cd76d4", "filename": "libjava/java/rmi/server/ServerNotActiveException.java", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FServerNotActiveException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FServerNotActiveException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FServerNotActiveException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* ServerNotActiveException.java -- the method is not servicing a remote call\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,17 +37,36 @@\n \n package java.rmi.server;\n \n-import java.lang.Exception;\n-\n-public class ServerNotActiveException\n-\textends Exception {\n+/**\n+ * Thrown during <code>RemoteServer.getClientHost</code> if the host is\n+ * not servicing a remote method call.\n+ *\n+ * @author unknown\n+ * @see RemoteServer#getClientHost()\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class ServerNotActiveException extends Exception\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = 4687940720827538231L;\n \n-public ServerNotActiveException() {\n-\tsuper();\n-}\n-\n-public ServerNotActiveException(String s) {\n-\tsuper(s);\n-}\n+  /**\n+   * Create an exception with no message.\n+   */\n+  public ServerNotActiveException()\n+  {\n+  }\n \n+  /**\n+   * Create an exception with a message.\n+   *\n+   * @param s the message\n+   */\n+  public ServerNotActiveException(String s)\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "5a4b6ae96df96f42cff2d81ce2e1cce89dde3256", "filename": "libjava/java/rmi/server/SkeletonMismatchException.java", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonMismatchException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonMismatchException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonMismatchException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* SkeletonMismatchException.java -- thrown when stub class versions mismatch\n+  Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,13 +39,30 @@\n \n import java.rmi.RemoteException;\n \n-public class SkeletonMismatchException\n-\textends RemoteException {\n-\n-public static final long serialVersionUID = -7780460454818859281l;\n-\n-public SkeletonMismatchException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown if a call is received that does not match a Skeleton. Note that\n+ * Skeletons are no longer required.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @deprecated no replacement. Skeletons are no longer required.\n+ * @status updated to 1.4\n+ */\n+public class SkeletonMismatchException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1.\n+   */\n+  private static final long serialVersionUID = -7780460454818859281l;\n \n+  /**\n+   * Create an exception with the specified message.\n+   *\n+   * @param s the message\n+   * @deprecated no longer needed\n+   */\n+  public SkeletonMismatchException(String s)\n+  {\n+    super(s);\n+  }\n }"}, {"sha": "41819d938f55050553364fe9fd79702e5c625766", "filename": "libjava/java/rmi/server/SkeletonNotFoundException.java", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FSkeletonNotFoundException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* SkeletonNotFoundException.java -- thrown if a Skeleton is not found\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,15 +39,42 @@\n \n import java.rmi.RemoteException;\n \n-public class SkeletonNotFoundException\n-\textends RemoteException {\n-\n-public SkeletonNotFoundException(String s) {\n-\tsuper(s);\n-}\n+/**\n+ * Thrown if a Skeleton corresponding to the remote object is not found.\n+ * Note that Skeletons are no longer required.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @deprecated no replacement. Skeletons are no longer required.\n+ * @status updated to 1.4\n+ */\n+public class SkeletonNotFoundException extends RemoteException\n+{\n+  /**\n+   * Compatible with JDK 1.1.\n+   */\n+  private static final long serialVersionUID = -7860299673822761231L;\n \n-public SkeletonNotFoundException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with the specified message.\n+   *\n+   * @param s the message\n+   * @deprecated no longer needed\n+   */\n+  public SkeletonNotFoundException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with the specified message and cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   * @deprecated no longer needed\n+   */\n+  public SkeletonNotFoundException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}, {"sha": "314ad8784f9aafeeb0c70ed6d2b5b083eb83c127", "filename": "libjava/java/rmi/server/SocketSecurityException.java", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FSocketSecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4b27e82f736d70477d9d998542d5f2cb72121b/libjava%2Fjava%2Frmi%2Fserver%2FSocketSecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FSocketSecurityException.java?ref=1a4b27e82f736d70477d9d998542d5f2cb72121b", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* SocketSecurityException.java -- the socket could not be created\n+   Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,17 +37,39 @@\n \n package java.rmi.server;\n \n-import java.rmi.server.ExportException;\n-\n-public class SocketSecurityException\n-\textends ExportException {\n+/**\n+ * Thrown during remote object export if the code does not have permission\n+ * to create a <code>java.net.ServerSocket</code> on the specified port.\n+ *\n+ * @author unknown\n+ * @since 1.1\n+ * @status updated to 1.4\n+ */\n+public class SocketSecurityException extends ExportException\n+{\n+  /**\n+   * Compatible with JDK 1.1+.\n+   */\n+  private static final long serialVersionUID = -7622072999407781979L;\n \n-public SocketSecurityException(String s) {\n-\tsuper(s);\n-}\n-\n-public SocketSecurityException(String s, Exception e) {\n-\tsuper(s, e);\n-}\n+  /**\n+   * Create an exception with the specified message.\n+   *\n+   * @param s the message\n+   */\n+  public SocketSecurityException(String s)\n+  {\n+    super(s);\n+  }\n \n+  /**\n+   * Create an exception with the specified message and cause.\n+   *\n+   * @param s the message\n+   * @param e the cause\n+   */\n+  public SocketSecurityException(String s, Exception e)\n+  {\n+    super(s, e);\n+  }\n }"}]}