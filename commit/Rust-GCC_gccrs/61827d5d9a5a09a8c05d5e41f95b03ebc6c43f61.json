{"sha": "61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4MjdkNWQ5YTVhMDlhOGMwNWQ1ZTQxZjk1YjAzZWJjNmM0M2Y2MQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-11T19:43:39Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-11T19:43:38Z"}, "message": "c++: Correct the handling of alignof(expr) [PR88115]\n\nWe're currently neglecting to set the ALIGNOF_EXPR_STD_P flag on an\nALIGNOF_EXPR when its operand is an expression.  This leads to us\nhandling alignof(expr) as if it were written __alignof__(expr), and\nreturning the preferred alignment instead of the ABI alignment.  In the\ntestcase below, this causes the first and third static_assert to fail on\nx86.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/88115\n\t* cp-tree.h (cxx_sizeof_or_alignof_expr): Add bool parameter.\n\t* decl.c (fold_sizeof_expr): Pass false to\n\tcxx_sizeof_or_alignof_expr.\n\t* parser.c (cp_parser_unary_expression): Pass std_alignof to\n\tcxx_sizeof_or_alignof_expr.\n\t* pt.c (tsubst_copy): Pass false to cxx_sizeof_or_alignof_expr.\n\t(tsubst_copy_and_build): Pass std_alignof to\n\tcxx_sizeof_or_alignof_expr.\n\t* typeck.c (cxx_alignof_expr): Add std_alignof bool parameter\n\tand pass it to cxx_sizeof_or_alignof_type.  Set ALIGNOF_EXPR_STD_P\n\tappropriately.\n\t(cxx_sizeof_or_alignof_expr): Add std_alignof bool parameter\n\tand pass it to cxx_alignof_expr.  Assert op is either\n\tSIZEOF_EXPR or ALIGNOF_EXPR.\n\nlibcc1/ChangeLog:\n\n\tPR c++/88115\n\t* libcp1plugin.cc (plugin_build_unary_expr): Pass true to\n\tcxx_sizeof_or_alignof_expr.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/88115\n\t* g++.dg/cpp0x/alignof6.C: New test.", "tree": {"sha": "01d00c1d17c121c5ee65f3f76afd5f2a44f3c59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01d00c1d17c121c5ee65f3f76afd5f2a44f3c59a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/comments", "author": null, "committer": null, "parents": [{"sha": "d6e5745a9a88314e27f387b2277299076862af67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e5745a9a88314e27f387b2277299076862af67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e5745a9a88314e27f387b2277299076862af67"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "63724c0e84f16bfbe7e8138273bac5250019d37e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "patch": "@@ -7461,7 +7461,7 @@ extern int comp_cv_qualification\t\t(const_tree, const_tree);\n extern int comp_cv_qualification\t\t(int, int);\n extern int comp_cv_qual_signature\t\t(tree, tree);\n extern tree cxx_sizeof_or_alignof_expr\t\t(location_t, tree,\n-\t\t\t\t\t\t enum tree_code, bool);\n+\t\t\t\t\t\t enum tree_code, bool, bool);\n extern tree cxx_sizeof_or_alignof_type\t\t(location_t, tree,\n \t\t\t\t\t\t enum tree_code, bool, bool);\n extern tree cxx_alignas_expr                    (tree);"}, {"sha": "c52111e329ce455a73caf4c687fac8153f972269", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "patch": "@@ -10335,7 +10335,7 @@ fold_sizeof_expr (tree t)\n   else\n     r = cxx_sizeof_or_alignof_expr (EXPR_LOCATION (t),\n \t\t\t\t    TREE_OPERAND (t, 0), SIZEOF_EXPR,\n-\t\t\t\t    false);\n+\t\t\t\t    false, false);\n   if (r == error_mark_node)\n     r = size_one_node;\n   return r;"}, {"sha": "4f59fc48d0f1d1dd181afb76c0765163c8a83aa8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "patch": "@@ -8335,8 +8335,8 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t\t\t   \"ISO C++ does not allow %<alignof%> \"\n \t\t\t   \"with a non-type\");\n \n-\t\tret = cxx_sizeof_or_alignof_expr (compound_loc,\n-\t\t\t\t\t\t  operand, op, true);\n+\t\tret = cxx_sizeof_or_alignof_expr (compound_loc, operand, op,\n+\t\t\t\t\t\t  std_alignof, true);\n \t      }\n \t    /* For SIZEOF_EXPR, just issue diagnostics, but keep\n \t       SIZEOF_EXPR with the original operand.  */"}, {"sha": "a932c2133e17d1db7b996a5ec51e44fae20637c9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "patch": "@@ -16790,6 +16790,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      else\n \t\treturn cxx_sizeof_or_alignof_expr (input_location,\n \t\t\t\t\t\t   expanded, SIZEOF_EXPR,\n+\t\t\t\t\t\t   false,\n                                                    complain & tf_error);\n \t    }\n \t  else\n@@ -19732,7 +19733,7 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t\t  complain & tf_error);\n \telse\n \t  r = cxx_sizeof_or_alignof_expr (input_location,\n-\t\t\t\t\t  op1, TREE_CODE (t),\n+\t\t\t\t\t  op1, TREE_CODE (t), std_alignof,\n \t\t\t\t\t  complain & tf_error);\n \tif (TREE_CODE (t) == SIZEOF_EXPR && r != error_mark_node)\n \t  {"}, {"sha": "700e166ca6683d90c381c8e07f4079facb8edf93", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "patch": "@@ -1832,10 +1832,12 @@ cxx_sizeof_expr (location_t loc, tree e, tsubst_flags_t complain)\n /* Implement the __alignof keyword: Return the minimum required\n    alignment of E, measured in bytes.  For VAR_DECL's and\n    FIELD_DECL's return DECL_ALIGN (which can be set from an\n-   \"aligned\" __attribute__ specification).  */\n+   \"aligned\" __attribute__ specification).  STD_ALIGNOF acts\n+   like in cxx_sizeof_or_alignof_type.  */\n \n static tree\n-cxx_alignof_expr (location_t loc, tree e, tsubst_flags_t complain)\n+cxx_alignof_expr (location_t loc, tree e, bool std_alignof,\n+\t\t  tsubst_flags_t complain)\n {\n   tree t;\n \n@@ -1848,6 +1850,7 @@ cxx_alignof_expr (location_t loc, tree e, tsubst_flags_t complain)\n       TREE_SIDE_EFFECTS (e) = 0;\n       TREE_READONLY (e) = 1;\n       SET_EXPR_LOCATION (e, loc);\n+      ALIGNOF_EXPR_STD_P (e) = std_alignof;\n \n       return e;\n     }\n@@ -1900,23 +1903,25 @@ cxx_alignof_expr (location_t loc, tree e, tsubst_flags_t complain)\n     }\n   else\n     return cxx_sizeof_or_alignof_type (loc, TREE_TYPE (e),\n-\t\t\t\t       ALIGNOF_EXPR, false,\n+\t\t\t\t       ALIGNOF_EXPR, std_alignof,\n                                        complain & tf_error);\n \n   return fold_convert_loc (loc, size_type_node, t);\n }\n \n /* Process a sizeof or alignof expression E with code OP where the operand\n-   is an expression.  */\n+   is an expression. STD_ALIGNOF acts like in cxx_sizeof_or_alignof_type.  */\n \n tree\n cxx_sizeof_or_alignof_expr (location_t loc, tree e, enum tree_code op,\n-\t\t\t    bool complain)\n+\t\t\t    bool std_alignof, bool complain)\n {\n+  gcc_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR);\n   if (op == SIZEOF_EXPR)\n     return cxx_sizeof_expr (loc, e, complain? tf_warning_or_error : tf_none);\n   else\n-    return cxx_alignof_expr (loc, e, complain? tf_warning_or_error : tf_none);\n+    return cxx_alignof_expr (loc, e, std_alignof,\n+\t\t\t     complain? tf_warning_or_error : tf_none);\n }\n \n /*  Build a representation of an expression 'alignas(E).'  Return the"}, {"sha": "b1a463df03006937cbc57b6981475a67bd9d176e", "filename": "gcc/testsuite/g++.dg/cpp0x/alignof6.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof6.C?ref=61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/88115\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-Wno-pedantic\" }\n+\n+// Verify the non-standard extension alignof(expr) behaves like\n+// alignof(type) to yield the ABI alignment of the type, and that\n+// __alignof__(expr) behaves like __alignof__(type) to yield the\n+// preferred alignment of the type.\n+\n+static_assert(alignof(double{}) == alignof(double), \"\");\n+static_assert(__alignof__(double{}) == __alignof__(double), \"\");\n+\n+template <class T>\n+void f() {\n+  static_assert(alignof(T{}) == alignof(T), \"\");\n+  static_assert(__alignof__(T{}) == __alignof__(T), \"\");\n+}\n+\n+template void f<double>();"}, {"sha": "648368353cbf6ce04fc5bca85d7d2aae35ed2487", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=61827d5d9a5a09a8c05d5e41f95b03ebc6c43f61", "patch": "@@ -2806,7 +2806,7 @@ plugin_build_unary_expr (cc1_plugin::connection *self,\n     case SIZEOF_EXPR:\n     case ALIGNOF_EXPR:\n       result = cxx_sizeof_or_alignof_expr (input_location,\n-\t\t\t\t\t   op0, opcode, true);\n+\t\t\t\t\t   op0, opcode, true, true);\n       break;\n \n     case DELETE_EXPR:"}]}