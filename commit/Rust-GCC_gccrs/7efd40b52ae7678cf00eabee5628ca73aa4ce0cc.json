{"sha": "7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VmZDQwYjUyYWU3Njc4Y2YwMGVhYmVlNTYyOGNhNzNhYTRjZTBjYw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-12-14T23:34:51Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-12-14T23:34:51Z"}, "message": "re PR rtl-optimization/25310 (ICE in reload_cse_simplify_operands, at postreload.c:393)\n\n\tPR rtl-optimization/25310\n\t* reload1.c (eliminate_regs_in_insn): Handle lowpart SUBREGs\n\tof the eliminable register when substituting into a PLUS.\n\n\tPR rtl-optimization/25310\n\t* gcc.c-torture/compile/pr25310.c: New test.\n\nFrom-SVN: r108543", "tree": {"sha": "67cd5624f0d306170c0f647905c54c4ce4ad687c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67cd5624f0d306170c0f647905c54c4ce4ad687c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/comments", "author": null, "committer": null, "parents": [{"sha": "6f93378c697dbe4a2829de095f354ff2d0acd71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f93378c697dbe4a2829de095f354ff2d0acd71e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f93378c697dbe4a2829de095f354ff2d0acd71e"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "71260a2d1346f4d574007fd5595d2aadb204e98b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "patch": "@@ -1,3 +1,9 @@\n+2005-12-14  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR rtl-optimization/25310\n+\t* reload1.c (eliminate_regs_in_insn): Handle lowpart SUBREGs\n+\tof the eliminable register when substituting into a PLUS.\n+\n 2005-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/25023"}, {"sha": "29da1216e5a36a644561379707301b43737874c8", "filename": "gcc/reload1.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "patch": "@@ -3006,42 +3006,57 @@ eliminate_regs_in_insn (rtx insn, int replace)\n     {\n       if (GET_CODE (SET_SRC (old_set)) == PLUS)\n \tplus_src = SET_SRC (old_set);\n-      /* First see if the source is of the form (plus (reg) CST).  */\n+      /* First see if the source is of the form (plus (...) CST).  */\n       if (plus_src\n-\t  && REG_P (XEXP (plus_src, 0))\n-\t  && GET_CODE (XEXP (plus_src, 1)) == CONST_INT\n-\t  && REGNO (XEXP (plus_src, 0)) < FIRST_PSEUDO_REGISTER)\n+\t  && GET_CODE (XEXP (plus_src, 1)) == CONST_INT)\n \tplus_cst_src = plus_src;\n       else if (REG_P (SET_SRC (old_set))\n \t       || plus_src)\n \t{\n \t  /* Otherwise, see if we have a REG_EQUAL note of the form\n-\t     (plus (reg) CST).  */\n+\t     (plus (...) CST).  */\n \t  rtx links;\n \t  for (links = REG_NOTES (insn); links; links = XEXP (links, 1))\n \t    {\n \t      if (REG_NOTE_KIND (links) == REG_EQUAL\n \t\t  && GET_CODE (XEXP (links, 0)) == PLUS\n-\t\t  && REG_P (XEXP (XEXP (links, 0), 0))\n-\t\t  && GET_CODE (XEXP (XEXP (links, 0), 1)) == CONST_INT\n-\t\t  && REGNO (XEXP (XEXP (links, 0), 0)) < FIRST_PSEUDO_REGISTER)\n+\t\t  && GET_CODE (XEXP (XEXP (links, 0), 1)) == CONST_INT)\n \t\t{\n \t\t  plus_cst_src = XEXP (links, 0);\n \t\t  break;\n \t\t}\n \t    }\n \t}\n+\n+      /* Check that the first operand of the PLUS is a hard reg or\n+\t the lowpart subreg of one.  */\n+      if (plus_cst_src)\n+\t{\n+\t  rtx reg = XEXP (plus_cst_src, 0);\n+\t  if (GET_CODE (reg) == SUBREG && subreg_lowpart_p (reg))\n+\t    reg = SUBREG_REG (reg);\n+\n+\t  if (!REG_P (reg) || REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n+\t    plus_cst_src = 0;\n+\t}\n     }\n   if (plus_cst_src)\n     {\n       rtx reg = XEXP (plus_cst_src, 0);\n       HOST_WIDE_INT offset = INTVAL (XEXP (plus_cst_src, 1));\n \n+      if (GET_CODE (reg) == SUBREG)\n+\treg = SUBREG_REG (reg);\n+\n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n \tif (ep->from_rtx == reg && ep->can_eliminate)\n \t  {\n+\t    rtx to_rtx = ep->to_rtx;\n \t    offset += ep->offset;\n \n+\t    if (GET_CODE (XEXP (plus_cst_src, 0)) == SUBREG)\n+\t      to_rtx = gen_lowpart (GET_MODE (XEXP (plus_cst_src, 0)),\n+\t\t\t\t    to_rtx);\n \t    if (offset == 0)\n \t      {\n \t\tint num_clobbers;\n@@ -3051,7 +3066,7 @@ eliminate_regs_in_insn (rtx insn, int replace)\n \t\t   There's not much we can do if that doesn't work.  */\n \t\tPATTERN (insn) = gen_rtx_SET (VOIDmode,\n \t\t\t\t\t      SET_DEST (old_set),\n-\t\t\t\t\t      ep->to_rtx);\n+\t\t\t\t\t      to_rtx);\n \t\tnum_clobbers = 0;\n \t\tINSN_CODE (insn) = recog (PATTERN (insn), insn, &num_clobbers);\n \t\tif (num_clobbers)\n@@ -3081,7 +3096,7 @@ eliminate_regs_in_insn (rtx insn, int replace)\n \t\tPATTERN (insn) = new_body;\n \t\told_set = single_set (insn);\n \n-\t\tXEXP (SET_SRC (old_set), 0) = ep->to_rtx;\n+\t\tXEXP (SET_SRC (old_set), 0) = to_rtx;\n \t\tXEXP (SET_SRC (old_set), 1) = GEN_INT (offset);\n \t      }\n \t    else"}, {"sha": "85a48284f1dd48aa769e31fe249fb814cd97eac2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "patch": "@@ -1,3 +1,8 @@\n+2005-12-14  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR rtl-optimization/25310\n+\t* gcc.c-torture/compile/pr25310.c: New test.\n+\n 2005-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/25023"}, {"sha": "4cd3087fddc23b2f57e8894b19e0f68b465d3f56", "filename": "gcc/testsuite/gcc.c-torture/compile/pr25310.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr25310.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efd40b52ae7678cf00eabee5628ca73aa4ce0cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr25310.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr25310.c?ref=7efd40b52ae7678cf00eabee5628ca73aa4ce0cc", "patch": "@@ -0,0 +1,17 @@\n+\n+extern int f (char *, int);\n+\n+void test (void)\n+{\n+  char buffer[65536];\n+  char *bufptr;\n+  char *bufend;\n+  int bytes;\n+\n+  bufptr = buffer;\n+  bufend = buffer + sizeof(buffer) - 1;\n+\n+  while ((bytes = f (bufptr, bufend - bufptr)) > 0)\n+    bufptr += bytes;\n+}\n+"}]}