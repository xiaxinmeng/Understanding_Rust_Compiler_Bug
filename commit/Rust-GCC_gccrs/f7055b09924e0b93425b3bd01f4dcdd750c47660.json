{"sha": "f7055b09924e0b93425b3bd01f4dcdd750c47660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwNTViMDk5MjRlMGI5MzQyNWIzYmQwMWY0ZGNkZDc1MGM0NzY2MA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-09-22T12:25:52Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-09-22T12:25:52Z"}, "message": "LANG_LIB2FUNCS and LANG_EXTRA_HEADERS\n\nFrom-SVN: r12759", "tree": {"sha": "922a04521ab1f286aea9de471c6e405b5a932fa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/922a04521ab1f286aea9de471c6e405b5a932fa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7055b09924e0b93425b3bd01f4dcdd750c47660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7055b09924e0b93425b3bd01f4dcdd750c47660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7055b09924e0b93425b3bd01f4dcdd750c47660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7055b09924e0b93425b3bd01f4dcdd750c47660/comments", "author": null, "committer": null, "parents": [{"sha": "5148abe95f9d6419a7f007f857a9e6350ee124c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5148abe95f9d6419a7f007f857a9e6350ee124c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5148abe95f9d6419a7f007f857a9e6350ee124c7"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "64258a8b19bfac91ba35dd26a3bc1d174746f68e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7055b09924e0b93425b3bd01f4dcdd750c47660/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7055b09924e0b93425b3bd01f4dcdd750c47660/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f7055b09924e0b93425b3bd01f4dcdd750c47660", "patch": "@@ -119,7 +119,8 @@ USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \\\n     $(srcdir)/ginclude/va-pyr.h $(srcdir)/ginclude/va-sparc.h \\\n     $(srcdir)/ginclude/va-clipper.h $(srcdir)/ginclude/va-spur.h \\\n     $(srcdir)/ginclude/iso646.h $(srcdir)/ginclude/va-ppc.h \\\n-    $(srcdir)/ginclude/proto.h $(srcdir)/ginclude/va-sh.h $(EXTRA_HEADERS)\n+    $(srcdir)/ginclude/proto.h $(srcdir)/ginclude/va-sh.h $(EXTRA_HEADERS) \\\n+    $(LANG_EXTRA_HEADERS)\n \n # Target to use whe installing assert.h.  Some systems may\n # want to set this empty.\n@@ -476,6 +477,8 @@ INCLUDES = -I. -I$(srcdir) -I$(srcdir)/config\n LANG_MAKEFILES =\n LANG_STAGESTUFF =\n LANG_DIFF_EXCLUDES =\n+LANG_LIB2FUNCS =\n+LANG_EXTRA_HEADERS =\n \n # Flags to pass to recursive makes.\n # CC is set by configure.  Hosts without symlinks need special handling\n@@ -688,7 +691,7 @@ compilations: ${OBJS}\n \n # Create a list of the language-independent object files so the language\n # subdirectories needn't mention their names explicitly.\n-stamp-objlist: Makefile $(OBJS) $(BC_OBJS)\n+stamp-objlist: $(OBJS) $(BC_OBJS)\n \techo \" $(OBJS) $(BC_OBJS)\" | sed -e 's, \\([a-z]\\), ../\\1,g' -e 's/\\.o/$(objext)/g' >stamp-objlist\n \n # We call this executable `xgcc' rather than `gcc'\n@@ -884,7 +887,7 @@ libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs\n \tfi\n \n libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(LIB2FUNCS_EXTRA) \\\n-   machmode.h longlong.h gbl-ctors.h config.status\n+   $(LANG_LIB2FUNCS) machmode.h longlong.h gbl-ctors.h config.status\n # Actually build it in tmplibgcc2.a, then rename at end,\n # so that libgcc2.a itself remains nonexistent if compilation is aborted.\n \t-rm -f tmplibgcc2.a\n@@ -909,19 +912,32 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(LIB2FUNCS_EXTRA) \\\n # We don't use -e here because there are if statements\n # that should not make the command give up when the if condition is false.\n # Instead, we test for failure after each command where it matters.\n-\tfor file in .. $(LIB2FUNCS_EXTRA); \\\n+\tfor file in .. $(LIB2FUNCS_EXTRA) $(LANG_LIB2FUNCS); \\\n \tdo \\\n \t  if [ x$${file} != x.. ]; then \\\n-\t    name=`echo $${file} | sed -e 's/[.][cS]$$//' -e 's/[.]asm$$//'`; \\\n+\t    name=`echo $${file} | sed -e 's/[.][cSo]$$//' -e 's/[.]asm$$//' -e 's/[.]txt$$//'`; \\\n \t    oname=` echo $${name} | sed -e 's,.*/,,'`; \\\n-\t    echo $${name}; \\\n-\t    if [ $${name}.asm = $${file} ]; then \\\n-\t      cp $${file} $${name}.s || exit 1; file=$${name}.s; \\\n-\t    else true; fi; \\\n-\t    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c $${file}; \\\n-\t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t    $(AR) $(AR_FLAGS) tmplibgcc2.a $${oname}$(objext); \\\n-\t    rm -f $${name}.s $${oname}$(objext); \\\n+\t    if [ $${name}.txt = $${file} ]; then \\\n+\t      for f in .. `cat $${file}`; do if [ x$${f} != x.. ]; then \\\n+\t\t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n+\t  \t  AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" \\\n+\t\t  CFLAGS=\"$(CFLAGS)\" HOST_PREFIX=\"$(HOST_PREFIX)\" \\\n+\t\t  HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t\t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" $${f}; \\\n+\t        if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t        $(AR) $(AR_FLAGS) tmplibgcc2.a $${f}; \\\n+\t        rm -f $${f}; \\\n+\t      fi; done; \\\n+\t    else \\\n+\t      echo $${name}; \\\n+\t      if [ $${name}.asm = $${file} ]; then \\\n+\t\tcp $${file} $${name}.s || exit 1; file=$${name}.s; \\\n+\t      else true; fi; \\\n+\t      $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c $${file}; \\\n+\t      if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n+\t      $(AR) $(AR_FLAGS) tmplibgcc2.a $${oname}$(objext); \\\n+\t      rm -f $${name}.s $${oname}$(objext); \\\n+\t    fi; \\\n \t  else true; \\\n \t  fi; \\\n \tdone\n@@ -1798,7 +1814,7 @@ stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h objc-headers\n \t  if [ X$$file != X.. ]; then \\\n \t    realfile=`echo $$file | sed -e 's|.*/\\([^/]*\\)$$|\\1|'`; \\\n \t    rm -f $$objdir/include/$$realfile; \\\n-\t    cp ginclude/$$realfile $$objdir/include; \\\n+\t    cp $$file $$objdir/include; \\\n \t    chmod a+r $$objdir/include/$$realfile; \\\n \t  fi; \\\n \tdone"}]}