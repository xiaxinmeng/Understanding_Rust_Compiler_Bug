{"sha": "556f8de3bec99dfe1dac15fecc704025d22b8fd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2ZjhkZTNiZWM5OWRmZTFkYWMxNWZlY2M3MDQwMjVkMjJiOGZkNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-09-01T22:54:15Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-09-01T22:54:15Z"}, "message": "PR c++/91129 - wrong error with binary op in template argument.\n\n\t* typeck.c (warn_for_null_address): Use fold_for_warn instead of\n\tfold_non_dependent_expr.\n\t(cp_build_binary_op): Likewise.\n\n\t* g++.dg/cpp1y/nontype1.C: New test.\n\nFrom-SVN: r275285", "tree": {"sha": "a86ef5468ae8a39a0c8efe57c66643cfa648a693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a86ef5468ae8a39a0c8efe57c66643cfa648a693"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/556f8de3bec99dfe1dac15fecc704025d22b8fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556f8de3bec99dfe1dac15fecc704025d22b8fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556f8de3bec99dfe1dac15fecc704025d22b8fd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556f8de3bec99dfe1dac15fecc704025d22b8fd4/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a37ab089c22f8be834bb1b5fd4c0454224db9b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37ab089c22f8be834bb1b5fd4c0454224db9b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37ab089c22f8be834bb1b5fd4c0454224db9b0f"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "8eb81c5027a4fb088a54744c9ea427f72a4a35fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=556f8de3bec99dfe1dac15fecc704025d22b8fd4", "patch": "@@ -1,3 +1,10 @@\n+2019-09-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91129 - wrong error with binary op in template argument.\n+\t* typeck.c (warn_for_null_address): Use fold_for_warn instead of\n+\tfold_non_dependent_expr.\n+\t(cp_build_binary_op): Likewise.\n+\n 2019-08-30  Jason Merrill  <jason@redhat.com>\n \n \tAdd source location to TRAIT_EXPR."}, {"sha": "70094d1b4262579198b35218eee9a6995a2de704", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=556f8de3bec99dfe1dac15fecc704025d22b8fd4", "patch": "@@ -4305,7 +4305,7 @@ warn_for_null_address (location_t location, tree op, tsubst_flags_t complain)\n       || TREE_NO_WARNING (op))\n     return;\n \n-  tree cop = fold_non_dependent_expr (op, complain);\n+  tree cop = fold_for_warn (op);\n \n   if (TREE_CODE (cop) == ADDR_EXPR\n       && decl_with_nonnull_addr_p (TREE_OPERAND (cop, 0))\n@@ -4628,9 +4628,8 @@ cp_build_binary_op (const op_location_t &location,\n \t      || code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE))\n \t{\n \t  enum tree_code tcode0 = code0, tcode1 = code1;\n-\t  tree cop1 = fold_non_dependent_expr (op1, complain);\n \t  doing_div_or_mod = true;\n-\t  warn_for_div_by_zero (location, cop1);\n+\t  warn_for_div_by_zero (location, fold_for_warn (op1));\n \n \t  if (tcode0 == COMPLEX_TYPE || tcode0 == VECTOR_TYPE)\n \t    tcode0 = TREE_CODE (TREE_TYPE (TREE_TYPE (op0)));\n@@ -4669,11 +4668,8 @@ cp_build_binary_op (const op_location_t &location,\n \n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n-      {\n-\ttree cop1 = fold_non_dependent_expr (op1, complain);\n-\tdoing_div_or_mod = true;\n-\twarn_for_div_by_zero (location, cop1);\n-      }\n+      doing_div_or_mod = true;\n+      warn_for_div_by_zero (location, fold_for_warn (op1));\n \n       if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n \t  && TREE_CODE (TREE_TYPE (type0)) == INTEGER_TYPE\n@@ -4766,7 +4762,7 @@ cp_build_binary_op (const op_location_t &location,\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  tree const_op1 = fold_non_dependent_expr (op1, complain);\n+\t  tree const_op1 = fold_for_warn (op1);\n \t  if (TREE_CODE (const_op1) != INTEGER_CST)\n \t    const_op1 = op1;\n \t  result_type = type0;\n@@ -4812,10 +4808,10 @@ cp_build_binary_op (const op_location_t &location,\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  tree const_op0 = fold_non_dependent_expr (op0, complain);\n+\t  tree const_op0 = fold_for_warn (op0);\n \t  if (TREE_CODE (const_op0) != INTEGER_CST)\n \t    const_op0 = op0;\n-\t  tree const_op1 = fold_non_dependent_expr (op1, complain);\n+\t  tree const_op1 = fold_for_warn (op1);\n \t  if (TREE_CODE (const_op1) != INTEGER_CST)\n \t    const_op1 = op1;\n \t  result_type = type0;"}, {"sha": "862e55d481c04fb7bfd9e8b524f29d10df4f5315", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=556f8de3bec99dfe1dac15fecc704025d22b8fd4", "patch": "@@ -1,3 +1,8 @@\n+2019-09-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91129 - wrong error with binary op in template argument.\n+\t* g++.dg/cpp1y/nontype1.C: New test.\n+\n 2019-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.c-torture/compile/20190827-1.c: Add dg-requires-alias."}, {"sha": "a37e996a3ffd01e58dadcc35fe8adf8f5bc3a97c", "filename": "gcc/testsuite/g++.dg/cpp1y/nontype1.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnontype1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556f8de3bec99dfe1dac15fecc704025d22b8fd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnontype1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnontype1.C?ref=556f8de3bec99dfe1dac15fecc704025d22b8fd4", "patch": "@@ -0,0 +1,42 @@\n+// PR c++/91129 - wrong error with binary op in template argument.\n+// { dg-do compile { target c++14 } }\n+\n+template<class T, T v>\n+struct C\n+{\n+  constexpr operator T() const { return v; }\n+  constexpr auto operator()() const { return v; }\n+};\n+\n+template<class T, int N>\n+struct A\n+{\n+};\n+\n+template<int N>\n+void foo ()\n+{\n+  A<int, C<int, 6>{}> a0;\n+  A<int, !C<int, 6>{}> a1;\n+  A<int, N / C<int, 6>{}> a2;\n+  A<int, N % C<int, 6>{}> a3;\n+  A<int, N * C<int, 6>{}> a4;\n+  A<int, N ^ C<int, 6>{}> a5;\n+  A<int, N | C<int, 6>{}> a6;\n+  A<int, N & C<int, 6>{}> a7;\n+  A<int, N + C<int, 6>{}> a8;\n+  A<int, N - C<int, 6>{}> a9;\n+  A<int, -C<int, 6>{}> a10;\n+  A<int, (N >> C<int, 6>{})> a11;\n+  A<int, N << C<int, 6>{}> a12;\n+  A<int, ~C<int, 6>{}> a13;\n+  A<int, N || C<int, 6>{}> a14;\n+  A<int, N && C<int, 6>{}> a15;\n+  A<int, N == C<int, 6>{}> a16;\n+  A<int, N != C<int, 6>{}> a17;\n+}\n+\n+int main()\n+{\n+  foo<10>();\n+}"}]}