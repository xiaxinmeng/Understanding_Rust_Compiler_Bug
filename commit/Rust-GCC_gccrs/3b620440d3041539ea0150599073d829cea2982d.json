{"sha": "3b620440d3041539ea0150599073d829cea2982d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I2MjA0NDBkMzA0MTUzOWVhMDE1MDU5OTA3M2Q4MjljZWEyOTgyZA==", "commit": {"author": {"name": "Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-09-22T11:21:21Z"}, "committer": {"name": "R. Kelley Cook", "email": "kcook@gcc.gnu.org", "date": "2004-09-22T11:21:21Z"}, "message": "aclocal.m4: Import AM_PROG_CC_C_O and AM_AUX_DIR_EXPAND.\n\ngcc/\n2004-09-22  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* aclocal.m4: Import AM_PROG_CC_C_O and AM_AUX_DIR_EXPAND.\n\t* configure.ac: Call AM_PROG_CC_C_O instead of AC_PROG_CC_C_O.\n\tCreate build and doc directories along with the language directories.\n\tDon't create doc directory separately.\n\t* configure: Regenerate.\n\t* Makefile.in: Create all object and executables files built\n\twith the build compiler in a build/ directory.\n\t(genobjnames): Add missing build objects.\n\t(STAGESTUFF): Don't stage the gen* programs.\n\t(ggc-none.o): Define dependencies for the target compiler.\n\t(build-print-rtl.o): Rename to build/print-rtl.o.\n\t(build-errors.o): Rename to build/errors.o.\n\t(build-varray.o): Rename to build/varray.o.\n\t(maintainerclean): Delete the contents of the build directory.\n\t($(genobjs): %.o): Explicitly use -o.\n\t(build/insn-conditions.o): Delete specfic rule to use generic rule.\n\t(build/gengtype-lex.o): Likewise.\n\t(build/gengtype-yacc.o): Likewise.\n\t(build/gcov-iov.o): Likewise.\n\ngcc/java\n2004-09-22  Kelley Cook  <kcook@gcc.gnu.org>\n\n\t* Make-lang.in: Revert the gcc-none.o change.\n\nFrom-SVN: r87854", "tree": {"sha": "84a0524e4466f8b47ca5606f7664d553cfa89887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84a0524e4466f8b47ca5606f7664d553cfa89887"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b620440d3041539ea0150599073d829cea2982d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b620440d3041539ea0150599073d829cea2982d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b620440d3041539ea0150599073d829cea2982d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b620440d3041539ea0150599073d829cea2982d/comments", "author": null, "committer": null, "parents": [{"sha": "3543e114c6226e545f9bb30cec4f448e8f20ff4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3543e114c6226e545f9bb30cec4f448e8f20ff4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3543e114c6226e545f9bb30cec4f448e8f20ff4f"}], "stats": {"total": 483, "additions": 304, "deletions": 179}, "files": [{"sha": "7eff6e8940a18225ac4271bbf8be0d6315f05362", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b620440d3041539ea0150599073d829cea2982d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b620440d3041539ea0150599073d829cea2982d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b620440d3041539ea0150599073d829cea2982d", "patch": "@@ -1,3 +1,25 @@\n+2004-09-22  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* aclocal.m4: Import AM_PROG_CC_C_O and AM_AUX_DIR_EXPAND.\n+\t* configure.ac: Call AM_PROG_CC_C_O instead of AC_PROG_CC_C_O.\n+\tCreate build and doc directories along with the language directories.\n+\tDon't create doc directory separately.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Create all object and executables files built\n+\twith the build compiler in a build/ directory.\n+\t(genobjnames): Add missing build objects.\n+\t(STAGESTUFF): Don't stage the gen* programs.\n+\t(ggc-none.o): Define dependencies for the target compiler.\n+\t(build-print-rtl.o): Rename to build/print-rtl.o.\n+\t(build-errors.o): Rename to build/errors.o.\n+\t(build-varray.o): Rename to build/varray.o.\n+\t(maintainerclean): Delete the contents of the build directory.\n+\t($(genobjs): %.o): Explicitly use -o.\n+\t(build/insn-conditions.o): Delete specfic rule to use generic rule.\n+\t(build/gengtype-lex.o): Likewise.\n+\t(build/gengtype-yacc.o): Likewise.\n+\t(build/gcov-iov.o): Likewise.\n+\n 2004-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* vec.h (VEC_space): Return true if there _is_ space."}, {"sha": "9608bd881e25f3adf7c932222d555e0055e104b6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 154, "deletions": 152, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b620440d3041539ea0150599073d829cea2982d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b620440d3041539ea0150599073d829cea2982d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3b620440d3041539ea0150599073d829cea2982d", "patch": "@@ -774,13 +774,14 @@ LDEXP_LIB = @LDEXP_LIB@\n # even if we are cross-building GCC.\n BUILD_LIBS = $(BUILD_LIBIBERTY)\n \n-BUILD_RTL = build-rtl.o read-rtl.o ggc-none.o min-insn-modes.o\n-BUILD_SUPPORT = gensupport.o insn-conditions.o\n-BUILD_EARLY_SUPPORT = gensupport.o dummy-conditions.o\n+BUILD_RTL = build/rtl.o build/read-rtl.o build/ggc-none.o \\\n+\t    build/min-insn-modes.o\n+BUILD_SUPPORT = build/gensupport.o build/insn-conditions.o\n+BUILD_EARLY_SUPPORT = build/gensupport.o build/dummy-conditions.o\n \n-BUILD_PRINT = build-print-rtl.o\n-BUILD_ERRORS = build-errors.o\n-BUILD_VARRAY = build-varray.o\n+BUILD_PRINT = build/print-rtl.o\n+BUILD_ERRORS = build/errors.o\n+BUILD_VARRAY = build/varray.o\n \n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n@@ -945,12 +946,6 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  s-flags s-config s-codes s-mlib s-genrtl s-modes s-gtype gtyp-gen.h \\\n  s-gtyp-gen s-output s-recog s-emit s-extract s-peep s-check s-conditions \\\n  s-attr s-attrtab s-opinit s-preds s-constants s-crt0 \\\n- genemit$(build_exeext) genoutput$(build_exeext) genrecog$(build_exeext) \\\n- genextract$(build_exeext) genflags$(build_exeext) gencodes$(build_exeext) \\\n- genconfig$(build_exeext) genpeep$(build_exeext) genattrtab$(build_exeext) \\\n- genattr$(build_exeext) genopinit$(build_exeext) gengenrtl$(build_exeext) \\\n- gencheck$(build_exeext) genpreds$(build_exeext) genconstants$(build_exeext) \\\n- gengtype$(build_exeext) genconditions$(build_exeext) genmodes$(build_exeext) \\\n  genrtl.c genrtl.h gt-*.h gtype-*.h gtype-desc.c \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n@@ -1500,16 +1495,16 @@ gccspec.o: gccspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n \n tree-check.h: s-check ; @true\n-s-check : gencheck$(build_exeext)\n-\t$(RUN_GEN) ./gencheck$(build_exeext) > tmp-check.h\n+s-check : build/gencheck$(build_exeext)\n+\t$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h\n \t$(STAMP) s-check\n \n-gencheck$(build_exeext) : gencheck.o $(BUILD_LIBDEPS)\n+build/gencheck$(build_exeext) : build/gencheck.o $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t gencheck.o $(BUILD_LIBS)\n+\t build/gencheck.o $(BUILD_LIBS)\n \n-gencheck.o : gencheck.c gencheck.h tree.def $(BCONFIG_H) $(SYSTEM_H) \\\n+build/gencheck.o : gencheck.c gencheck.h tree.def $(BCONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(GTM_H) $(lang_tree_files)\n \n gencheck.h : s-gencheck ; @true\n@@ -1564,6 +1559,8 @@ ggc-page.o: ggc-page.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TR\n ggc-zone.o: ggc-zone.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n \t$(FLAGS_H) toplev.h $(GGC_H) $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H)\n \n+ggc-none.o: ggc-none.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H)\n+\n stringpool.o: stringpool.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(GGC_H) gt-stringpool.h\n \n@@ -2225,40 +2222,39 @@ libbackend.o : $(OBJS-common:.o=.c) $(out_file) \\\n # trailing `;'), we call true for each.\n \n insn-config.h: s-config ; @true\n-s-config : $(md_file) genconfig$(build_exeext)\n-\t$(RUN_GEN) ./genconfig$(build_exeext) $(md_file) > tmp-config.h\n+s-config : $(md_file) build/genconfig$(build_exeext)\n+\t$(RUN_GEN) build/genconfig$(build_exeext) $(md_file) > tmp-config.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-config.h insn-config.h\n \t$(STAMP) s-config\n \n insn-conditions.c: s-conditions ; @true\n-s-conditions : $(md_file) genconditions$(build_exeext)\n-\t$(RUN_GEN) ./genconditions$(build_exeext) $(md_file) > tmp-conditions.c\n+s-conditions : $(md_file) build/genconditions$(build_exeext)\n+\t$(RUN_GEN) build/genconditions$(build_exeext) $(md_file) > tmp-conditions.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-conditions.c insn-conditions.c\n \t$(STAMP) s-conditions\n \n-insn-conditions.o : insn-conditions.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+build/insn-conditions.o : insn-conditions.c $(CONFIG_H) $(SYSTEM_H) \\\n   $(GTM_H) $(RTL_H) $(TM_P_H) $(REGS_H) function.h $(RECOG_H) real.h output.h \\\n   $(FLAGS_H) hard-reg-set.h $(RESOURCE_H) toplev.h reload.h gensupport.h \\\n-  insn-constants.h\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) insn-conditions.c\n+  insn-constants.h coretypes.h\n \n-dummy-conditions.o : dummy-conditions.c\n+build/dummy-conditions.o : dummy-conditions.c\n \n insn-flags.h: s-flags ; @true\n-s-flags : $(md_file) genflags$(build_exeext)\n-\t$(RUN_GEN) ./genflags$(build_exeext) $(md_file) > tmp-flags.h\n+s-flags : $(md_file) build/genflags$(build_exeext)\n+\t$(RUN_GEN) build/genflags$(build_exeext) $(md_file) > tmp-flags.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-flags.h insn-flags.h\n \t$(STAMP) s-flags\n \n insn-codes.h: s-codes ; @true\n-s-codes : $(md_file) gencodes$(build_exeext)\n-\t$(RUN_GEN) ./gencodes$(build_exeext) $(md_file) > tmp-codes.h\n+s-codes : $(md_file) build/gencodes$(build_exeext)\n+\t$(RUN_GEN) build/gencodes$(build_exeext) $(md_file) > tmp-codes.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-codes.h insn-codes.h\n \t$(STAMP) s-codes\n \n insn-constants.h: s-constants ; @true\n-s-constants : $(md_file) genconstants$(build_exeext)\n-\t$(RUN_GEN) ./genconstants$(build_exeext) $(md_file) > tmp-constants.h\n+s-constants : $(md_file) build/genconstants$(build_exeext)\n+\t$(RUN_GEN) build/genconstants$(build_exeext) $(md_file) > tmp-constants.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-constants.h insn-constants.h\n \t$(STAMP) s-constants\n \n@@ -2269,8 +2265,8 @@ insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-emit.c: s-emit ; @true\n-s-emit : $(md_file) genemit$(build_exeext)\n-\t$(RUN_GEN) ./genemit$(build_exeext) $(md_file) > tmp-emit.c\n+s-emit : $(md_file) build/genemit$(build_exeext)\n+\t$(RUN_GEN) build/genemit$(build_exeext) $(md_file) > tmp-emit.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-emit.c insn-emit.c\n \t$(STAMP) s-emit\n \n@@ -2281,8 +2277,8 @@ insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-recog.c: s-recog ; @true\n-s-recog : $(md_file) genrecog$(build_exeext)\n-\t$(RUN_GEN) ./genrecog$(build_exeext) $(md_file) > tmp-recog.c\n+s-recog : $(md_file) build/genrecog$(build_exeext)\n+\t$(RUN_GEN) build/genrecog$(build_exeext) $(md_file) > tmp-recog.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-recog.c insn-recog.c\n \t$(STAMP) s-recog\n \n@@ -2292,8 +2288,8 @@ insn-opinit.o : insn-opinit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-opinit.c: s-opinit ; @true\n-s-opinit : $(md_file) genopinit$(build_exeext)\n-\t$(RUN_GEN) ./genopinit$(build_exeext) $(md_file) > tmp-opinit.c\n+s-opinit : $(md_file) build/genopinit$(build_exeext)\n+\t$(RUN_GEN) build/genopinit$(build_exeext) $(md_file) > tmp-opinit.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-opinit.c insn-opinit.c\n \t$(STAMP) s-opinit\n \n@@ -2303,8 +2299,8 @@ insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-extract.c: s-extract ; @true\n-s-extract : $(md_file) genextract$(build_exeext)\n-\t$(RUN_GEN) ./genextract$(build_exeext) $(md_file) > tmp-extract.c\n+s-extract : $(md_file) build/genextract$(build_exeext)\n+\t$(RUN_GEN) build/genextract$(build_exeext) $(md_file) > tmp-extract.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-extract.c insn-extract.c\n \t$(STAMP) s-extract\n \n@@ -2315,8 +2311,8 @@ insn-peep.o : insn-peep.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-peep.c: s-peep ; @true\n-s-peep : $(md_file) genpeep$(build_exeext)\n-\t$(RUN_GEN) ./genpeep$(build_exeext) $(md_file) > tmp-peep.c\n+s-peep : $(md_file) build/genpeep$(build_exeext)\n+\t$(RUN_GEN) build/genpeep$(build_exeext) $(md_file) > tmp-peep.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-peep.c insn-peep.c\n \t$(STAMP) s-peep\n \n@@ -2327,14 +2323,14 @@ insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-attr.h: s-attr ; @true\n-s-attr : $(md_file) genattr$(build_exeext)\n-\t$(RUN_GEN) ./genattr$(build_exeext) $(md_file) > tmp-attr.h\n+s-attr : $(md_file) build/genattr$(build_exeext)\n+\t$(RUN_GEN) build/genattr$(build_exeext) $(md_file) > tmp-attr.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-attr.h insn-attr.h\n \t$(STAMP) s-attr\n \n insn-attrtab.c: s-attrtab ; @true\n-s-attrtab : $(md_file) genattrtab$(build_exeext)\n-\t$(RUN_GEN) ./genattrtab$(build_exeext) $(md_file) > tmp-attrtab.c\n+s-attrtab : $(md_file) build/genattrtab$(build_exeext)\n+\t$(RUN_GEN) build/genattrtab$(build_exeext) $(md_file) > tmp-attrtab.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-attrtab.c insn-attrtab.c\n \t$(STAMP) s-attrtab\n \n@@ -2346,8 +2342,8 @@ insn-output.o : insn-output.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t  $(OUTPUT_OPTION)\n \n insn-output.c: s-output ; @true\n-s-output : $(md_file) genoutput$(build_exeext)\n-\t$(RUN_GEN) ./genoutput$(build_exeext) $(md_file) > tmp-output.c\n+s-output : $(md_file) build/genoutput$(build_exeext)\n+\t$(RUN_GEN) build/genoutput$(build_exeext) $(md_file) > tmp-output.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-output.c insn-output.c\n \t$(STAMP) s-output\n \n@@ -2356,32 +2352,32 @@ genrtl.o : genrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n genrtl.c genrtl.h : s-genrtl\n \t@true\t# force gnu make to recheck modification times.\n \n-s-genrtl: gengenrtl$(build_exeext)\n-\t$(RUN_GEN) ./gengenrtl$(build_exeext) -h > tmp-genrtl.h\n+s-genrtl: build/gengenrtl$(build_exeext)\n+\t$(RUN_GEN) build/gengenrtl$(build_exeext) -h > tmp-genrtl.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.h genrtl.h\n-\t$(RUN_GEN) ./gengenrtl$(build_exeext) > tmp-genrtl.c\n+\t$(RUN_GEN) build/gengenrtl$(build_exeext) > tmp-genrtl.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.c genrtl.c\n \t$(STAMP) s-genrtl\n \n insn-modes.o : insn-modes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t       $(MACHMODE_H) real.h\n min-insn-modes.c insn-modes.c insn-modes.h : s-modes ; @true\n \n-s-modes: genmodes$(build_exeext)\n-\t$(RUN_GEN) ./genmodes$(build_exeext) -h > tmp-modes.h\n+s-modes: build/genmodes$(build_exeext)\n+\t$(RUN_GEN) build/genmodes$(build_exeext) -h > tmp-modes.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-modes.h insn-modes.h\n-\t$(RUN_GEN) ./genmodes$(build_exeext) -m > tmp-min-modes.c\n+\t$(RUN_GEN) build/genmodes$(build_exeext) -m > tmp-min-modes.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.c\n-\t$(RUN_GEN) ./genmodes$(build_exeext) > tmp-modes.c\n+\t$(RUN_GEN) build/genmodes$(build_exeext) > tmp-modes.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-modes.c insn-modes.c\n \t$(STAMP) s-modes\n \n insn-preds.c tm-preds.h: s-preds; @true\n \n-s-preds: $(md_file) genpreds$(build_exeext)\n-\t$(RUN_GEN) ./genpreds$(build_exeext) -h $(md_file) > tmp-preds.h\n+s-preds: $(md_file) build/genpreds$(build_exeext)\n+\t$(RUN_GEN) build/genpreds$(build_exeext) -h $(md_file) > tmp-preds.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-preds.h tm-preds.h\n-\t$(RUN_GEN) ./genpreds$(build_exeext) $(md_file) > tmp-preds.c\n+\t$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-preds.c insn-preds.c\n \t$(STAMP) s-preds\n \n@@ -2468,8 +2464,8 @@ s-gtyp-gen: Makefile\n \t$(SHELL) $(srcdir)/../move-if-change tmp-gtyp.h gtyp-gen.h\n \t$(STAMP) s-gtyp-gen\n \n-s-gtype: gengtype$(build_exeext) $(GTFILES)\n-\t$(RUN_GEN) ./gengtype$(build_exeext)\n+s-gtype: build/gengtype$(build_exeext) $(GTFILES)\n+\t$(RUN_GEN) build/gengtype$(build_exeext)\n \t$(STAMP) s-gtype\n \n #\f\n@@ -2488,15 +2484,17 @@ genprognames=genconfig genflags gencodes genemit genopinit genrecog \\\n \t     genextract genpeep genattr genoutput\n \n # The names of the executable files for those programs.\n-genprogs=$(genprognames:%=%$(build_exeext))\n+genprogs=$(genprognames:%=build/%$(build_exeext))\n \n # Object files used in those programs.\n-genobjs=$(genprognames:%=%.o) read-rtl.o gensupport.o genattrtab.o \\\n+genobjnames=$(genprognames:%=%.o) read-rtl.o gensupport.o genattrtab.o \\\n         genautomata.o gengenrtl.o genmodes.o genpreds.o gengtype.o \\\n \tgenconstants.o gen-protos.o scan.o fix-header.o scan-decls.o \\\n-\tgencheck.o dummy-conditions.o genconditions.o build-errors.o \\\n-\tggc-none.o min-insn-modes.o build-rtl.o build-print-rtl.o \\\n-\tbuild-varray.o\n+\tgencheck.o dummy-conditions.o genconditions.o errors.o ggc-none.o \\\n+\tmin-insn-modes.o rtl.o print-rtl.o varray.o gcov-iov.o \\\n+\tinsn-conditions.o gengtype-lex.o gengtype-yacc.o\n+\n+genobjs=$(genobjnames:%=build/%)\n \n $(genprogs): %$(build_exeext): %.o  $(BUILD_RTL) $(BUILD_SUPPORT) \\\n \t\t\t       $(BUILD_PRINT) $(BUILD_ERRORS) \\\n@@ -2507,131 +2505,129 @@ $(genprogs): %$(build_exeext): %.o  $(BUILD_RTL) $(BUILD_SUPPORT) \\\n \n $(genobjs): %.o :  # dependencies provided by explicit rule later\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n-\t    $< $(OUTPUT_OPTION)\n+\t -o $@ $<\n \n-read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_BASE_H) \\\n-  $(OBSTACK_H) $(HASHTAB_H)\n+build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n+  $(RTL_BASE_H) $(OBSTACK_H) $(HASHTAB_H)\n \n-gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(RTL_BASE_H) \\\n-  $(OBSTACK_H) errors.h $(HASHTAB_H) gensupport.h\n+build/gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) errors.h $(HASHTAB_H) gensupport.h\n \n-genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n+build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genconstants$(build_exeext) : genconstants.o $(BUILD_RTL) $(BUILD_EARLY_SUPPORT) \\\n-  $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n+build/genconstants$(build_exeext) : build/genconstants.o $(BUILD_RTL) \\\n+  $(BUILD_EARLY_SUPPORT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t genconstants.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n-\t    $(BUILD_ERRORS) $(BUILD_LIBS)\n+\t build/genconstants.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n+\t $(BUILD_ERRORS) $(BUILD_LIBS)\n \n-genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n-  errors.h\n+build/genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h $(GTM_H) errors.h\n \n-genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n-  errors.h gensupport.h\n+build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) insn-config.h errors.h gensupport.h\n \n-genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n-  errors.h gensupport.h\n+build/genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h \\\n-  gensupport.h\n+build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h $(GTM_H) errors.h gensupport.h\n \n-genattrtab$(build_exeext) : genattrtab.o genautomata.o \\\n-  $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) $(BUILD_VARRAY) \\\n-  $(BUILD_LIBDEPS)\n+build/genattrtab$(build_exeext) : build/genattrtab.o build/genautomata.o \\\n+  $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) \\\n+  $(BUILD_VARRAY) $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t genattrtab.o genautomata.o \\\n+\t build/genattrtab.o build/genautomata.o \\\n \t $(BUILD_RTL) $(BUILD_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) \\\n \t $(BUILD_VARRAY) $(BUILD_LIBS) -lm\n \n-genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n+build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(GGC_H) gensupport.h genattrtab.h\n \n-genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n+build/genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h varray.h genattrtab.h $(HASHTAB_H)\n \n-genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+build/genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h gensupport.h\n \n-gengenrtl$(build_exeext) : gengenrtl.o $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n+build/gengenrtl$(build_exeext) : build/gengenrtl.o $(BUILD_ERRORS) \\\n+  $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t gengenrtl.o $(BUILD_ERRORS) $(BUILD_LIBS)\n+\t build/gengenrtl.o $(BUILD_ERRORS) $(BUILD_LIBS)\n \n-gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def\n+build/gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def\n \n-genmodes$(build_exeext) : genmodes.o $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n+build/genmodes$(build_exeext) : build/genmodes.o $(BUILD_ERRORS) \\\n+  $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t genmodes.o $(BUILD_ERRORS) $(BUILD_LIBS)\n+\t build/genmodes.o $(BUILD_ERRORS) $(BUILD_LIBS)\n \n-genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h $(HASHTAB_H) \\\n+build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h $(HASHTAB_H) \\\n \t     machmode.def $(extra_modes_file)\n \n-genpreds$(build_exeext) : genpreds.o $(BUILD_RTL) $(BUILD_EARLY_SUPPORT) \\\n-  $(BUILD_PRINT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n+build/genpreds$(build_exeext) : build/genpreds.o $(BUILD_RTL) \\\n+  $(BUILD_EARLY_SUPPORT) $(BUILD_PRINT) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t genpreds.o $(BUILD_RTL) $(BUILD_EARLY_SUPPORT) $(BUILD_PRINT) \\\n+\t build/genpreds.o $(BUILD_RTL) $(BUILD_EARLY_SUPPORT) $(BUILD_PRINT) \\\n \t $(BUILD_ERRORS) $(BUILD_LIBS)\n \n-genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n-\t$(GTM_H) errors.h gensupport.h $(OBSTACK_H)\n+build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h $(GTM_H) errors.h gensupport.h $(OBSTACK_H)\n \n-gengtype$(build_exeext) : gengtype.o gengtype-lex.o gengtype-yacc.o \\\n-  $(BUILD_LIBDEPS) $(BUILD_ERRORS)\n+build/gengtype$(build_exeext) : build/gengtype.o build/gengtype-lex.o \\\n+  build/gengtype-yacc.o $(BUILD_LIBDEPS) $(BUILD_ERRORS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t gengtype.o gengtype-lex.o gengtype-yacc.o $(BUILD_ERRORS) \\\n-\t $(BUILD_LIBS)\n-\n-gengtype.o : gengtype.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n+\t build/gengtype.o build/gengtype-lex.o build/gengtype-yacc.o \\\n+\t $(BUILD_ERRORS) $(BUILD_LIBS)\n+\t\n+build/gengtype.o : gengtype.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n   gengtype.h gtyp-gen.h rtl.def insn-notes.def errors.h\n \n-gengtype-lex.o : gengtype-lex.c gengtype.h gengtype-yacc.h \\\n+build/gengtype-lex.o : gengtype-lex.c gengtype.h gengtype-yacc.h \\\n   $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) vec.h\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n-\t $< $(OUTPUT_OPTION)\n \n-gengtype-yacc.o : gengtype-yacc.c gengtype.h $(BCONFIG_H) $(SYSTEM_H) \\\n+build/gengtype-yacc.o : gengtype-yacc.c gengtype.h $(BCONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(GTM_H)\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) \\\n-\t $< $(OUTPUT_OPTION)\n \n gengtype-lex.c : gengtype-lex.l\n \t-$(FLEX) $(FLEXFLAGS) -o$@ $<\n \n gengtype-yacc.c gengtype-yacc.h: gengtype-yacc.y\n \t-$(BISON) $(BISONFLAGS) -d -o gengtype-yacc.c $<\n \n-genconditions$(build_exeext) : genconditions.o $(BUILD_EARLY_SUPPORT) \\\n-  $(BUILD_RTL) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n+build/genconditions$(build_exeext) : build/genconditions.o \\\n+  $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) $(BUILD_ERRORS) $(BUILD_LIBDEPS)\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t genconditions.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n-\t    $(BUILD_ERRORS) $(BUILD_LIBS)\n+\t build/genconditions.o $(BUILD_EARLY_SUPPORT) $(BUILD_RTL) \\\n+\t $(BUILD_ERRORS) $(BUILD_LIBS)\n \n-genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H) \\\n-\tcoretypes.h $(GTM_H) errors.h\n+build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H) \\\n+  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h\n \n-build-errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n-ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H)\n-min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) system.h $(MACHMODE_H)\n-build-rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) $(RTL_H) \\\n+build/errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n+build/ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H)\n+build/min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) system.h $(MACHMODE_H)\n+build/rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) $(RTL_H) \\\n   real.h $(GGC_H) errors.h\n-build-print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(GTM_H) $(RTL_BASE_H)\n-build-varray.o: varray.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) \\\n+build/print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) \\\n+  $(RTL_BASE_H)\n+build/varray.o: varray.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) \\\n   varray.h $(RTL_BASE_H) $(GGC_H) $(TREE_H) bitmap.h errors.h\n \n #\f\n@@ -2730,13 +2726,15 @@ test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)\n \t-rm -f tmp-proto.[cs] tmp-proto$(objext)\n \n # gcov-iov.c is run on the build machine to generate gcov-iov.h from version.c\n-gcov-iov.o: gcov-iov.c version.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H) coretypes.h $(TM_H)\n-\t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) $(srcdir)/gcov-iov.c $(OUTPUT_OPTION)\n-gcov-iov$(build_exeext): gcov-iov.o\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) gcov-iov.o -o $@\n+build/gcov-iov.o: gcov-iov.c version.c $(BCONFIG_H) coretypes.h $(GTM_H) \\\n+  $(SYSTEM_H) coretypes.h $(TM_H)\n+ \n+build/gcov-iov$(build_exeext): build/gcov-iov.o\n+\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) build/gcov-iov.o -o $@\n+\n gcov-iov.h: s-iov\n-s-iov: gcov-iov$(build_exeext)\n-\t./gcov-iov$(build_exeext) > tmp-gcov-iov.h\n+s-iov: build/gcov-iov$(build_exeext)\n+\tbuild/gcov-iov$(build_exeext) > tmp-gcov-iov.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-gcov-iov.h gcov-iov.h\n \t$(STAMP) s-iov\n \n@@ -2838,44 +2836,46 @@ deduced.h: $(GCC_PASSES) $(srcdir)/scan-types.sh stmp-int-hdrs\n \t  $(STAMP) deduced.h; \\\n \tfi\n \n-GEN_PROTOS_OBJS = gen-protos.o scan.o $(BUILD_ERRORS)\n-gen-protos$(build_exeext): $(GEN_PROTOS_OBJS)\n+GEN_PROTOS_OBJS = build/gen-protos.o build/scan.o $(BUILD_ERRORS)\n+build/gen-protos$(build_exeext): $(GEN_PROTOS_OBJS)\n \t${CC_FOR_BUILD} $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n \t  $(GEN_PROTOS_OBJS) $(BUILD_LIBS)\n \n-gen-protos.o: gen-protos.c scan.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n-\t      $(GTM_H) errors.h\n+build/gen-protos.o: gen-protos.c scan.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(GTM_H) errors.h\n \n-scan.o: scan.c scan.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H)\n+build/scan.o: scan.c scan.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H)\n \n-xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos$(build_exeext) Makefile\n+xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h \\\n+  build/gen-protos$(build_exeext) Makefile\n \tsed -e s/TARGET_GETGROUPS_T/$(TARGET_GETGROUPS_T)/ \\\n \t  deduced.h $(srcdir)/sys-protos.h > tmp-fixtmp.c\n \tmv tmp-fixtmp.c fixtmp.c\n \t$(GCC_FOR_TARGET) fixtmp.c -w -U__SIZE_TYPE__ -U__PTRDIFF_TYPE__ -U__WCHAR_TYPE__ -E \\\n \t  | sed -e 's/\t/ /g' -e 's/ *(/ (/g' -e 's/ [ ]*/ /g' -e 's/( )/()/' \\\n-\t  | $(RUN_GEN) ./gen-protos >xsys-protos.hT\n+\t  | $(RUN_GEN) build/gen-protos >xsys-protos.hT\n \tmv xsys-protos.hT xsys-protos.h\n \trm -rf fixtmp.c\n \n # This is nominally a 'build' program, but it's run only when host==build,\n # so we can (indeed, must) use $(LIBDEPS) and $(LIBS).\n-fix-header$(build_exeext): fix-header.o scan-decls.o scan.o xsys-protos.h \\\n-           c-incpath.o cppdefault.o prefix.o $(BUILD_ERRORS) $(LIBDEPS)\n-\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ fix-header.o \\\n-\t  c-incpath.o cppdefault.o scan-decls.o prefix.o scan.o \\\n-\t  $(BUILD_ERRORS) $(LIBS)\n+build/fix-header$(build_exeext): build/fix-header.o build/scan-decls.o \\\n+  build/scan.o xsys-protos.h c-incpath.o cppdefault.o prefix.o \\\n+  $(BUILD_ERRORS) $(LIBDEPS)\n+\t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n+\t build/fix-header.o c-incpath.o cppdefault.o build/scan-decls.o prefix.o \\\n+\t build/scan.o $(BUILD_ERRORS) $(LIBS)\n \n-fix-header.o: fix-header.c $(OBSTACK_H) scan.h errors.h \\\n+build/fix-header.o: fix-header.c $(OBSTACK_H) scan.h errors.h \\\n \txsys-protos.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(CPPLIB_H)\n \n-scan-decls.o: scan-decls.c scan.h $(CPPLIB_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H)\n+build/scan-decls.o: scan-decls.c scan.h $(CPPLIB_H) $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H)\n \n # stmp-fixproto depends on this, not on fix-header directly.\n # The idea is to make sure fix-header gets built,\n # but not rerun fixproto after each stage\n # just because fix-header's mtime has changed.\n-fixhdr.ready: fix-header$(build_exeext)\n+fixhdr.ready: build/fix-header$(build_exeext)\n \t-if [ -f fixhdr.ready ] ; then \\\n \t\ttrue; \\\n \telse \\\n@@ -3027,6 +3027,8 @@ mostlyclean: lang.mostlyclean\n \t-rm -f $(STAGESTUFF)\n \t-rm -f *$(coverageexts)\n \t-rm -rf libgcc\n+# Delete build programs\n+\t-rm -f build/*\n # Delete the temp files made in the course of building libgcc.a.\n \t-rm -f xlimits.h\n # Delete other built files.\n@@ -3363,7 +3365,7 @@ install-mkheaders: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir \\\n \t  $(INSTALL_SCRIPT) $(mkinstalldirs) \\\n \t\t$(DESTDIR)$(itoolsdir)/mkinstalldirs ; \\\n \t  $(INSTALL_SCRIPT) $(srcdir)/fixproto $(DESTDIR)$(itoolsdir)/fixproto ; \\\n-\t  $(INSTALL_PROGRAM) fix-header$(build_exeext) \\\n+\t  $(INSTALL_PROGRAM) build/fix-header$(build_exeext) \\\n \t\t$(DESTDIR)$(itoolsdir)/fix-header$(build_exeext) ; \\\n \telse :; fi\n \t$(INSTALL_SCRIPT) mkheaders $(DESTDIR)$(itoolsdir)/mkheaders"}, {"sha": "ec6bcc266b073f013a2dd82fae087cadff6d1f19", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b620440d3041539ea0150599073d829cea2982d/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b620440d3041539ea0150599073d829cea2982d/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=3b620440d3041539ea0150599073d829cea2982d", "patch": "@@ -676,3 +676,105 @@ AC_DEFUN([AM_LC_MESSAGES],\n       [Define if your <locale.h> file defines LC_MESSAGES.])\n   fi\n ])\n+\n+# AM_PROG_CC_C_O\n+# --------------\n+# Like AC_PROG_CC_C_O, but changed for automake.\n+\n+# Copyright (C) 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+AC_DEFUN([AM_PROG_CC_C_O],\n+[AC_REQUIRE([AC_PROG_CC_C_O])dnl\n+AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\n+# FIXME: we rely on the cache variable name because\n+# there is no other way.\n+set dummy $CC\n+ac_cc=`echo $[2] | sed ['s/[^a-zA-Z0-9_]/_/g;s/^[0-9]/_/']`\n+if eval \"test \\\"`echo '$ac_cv_prog_cc_'${ac_cc}_c_o`\\\" != yes\"; then\n+   # Losing compiler, so override with the script.\n+   # FIXME: It is wrong to rewrite CC.\n+   # But if we don't then we get into trouble of one sort or another.\n+   # A longer-term fix would be to have automake use am__CC in this case,\n+   # and then we could set am__CC=\"\\$(top_srcdir)/compile \\$(CC)\"\n+   CC=\"$am_aux_dir/compile $CC\"\n+fi\n+])\n+\n+# AM_AUX_DIR_EXPAND\n+\n+# Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+# 02111-1307, USA.\n+\n+# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n+# $ac_aux_dir to `$srcdir/foo'.  In other projects, it is set to\n+# `$srcdir', `$srcdir/..', or `$srcdir/../..'.\n+#\n+# Of course, Automake must honor this variable whenever it calls a\n+# tool from the auxiliary directory.  The problem is that $srcdir (and\n+# therefore $ac_aux_dir as well) can be either absolute or relative,\n+# depending on how configure is run.  This is pretty annoying, since\n+# it makes $ac_aux_dir quite unusable in subdirectories: in the top\n+# source directory, any form will work fine, but in subdirectories a\n+# relative path needs to be adjusted first.\n+#\n+# $ac_aux_dir/missing\n+#    fails when called from a subdirectory if $ac_aux_dir is relative\n+# $top_srcdir/$ac_aux_dir/missing\n+#    fails if $ac_aux_dir is absolute,\n+#    fails when called from a subdirectory in a VPATH build with\n+#          a relative $ac_aux_dir\n+#\n+# The reason of the latter failure is that $top_srcdir and $ac_aux_dir\n+# are both prefixed by $srcdir.  In an in-source build this is usually\n+# harmless because $srcdir is `.', but things will broke when you\n+# start a VPATH build or use an absolute $srcdir.\n+#\n+# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n+# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n+#   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n+# and then we would define $MISSING as\n+#   MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n+# This will work as long as MISSING is not called from configure, because\n+# unfortunately $(top_srcdir) has no meaning in configure.\n+# However there are other variables, like CC, which are often used in\n+# configure, and could therefore not use this \"fixed\" $ac_aux_dir.\n+#\n+# Another solution, used here, is to always expand $ac_aux_dir to an\n+# absolute PATH.  The drawback is that using absolute paths prevent a\n+# configured tree to be moved without reconfiguration.\n+\n+AC_DEFUN([AM_AUX_DIR_EXPAND],\n+[dnl Rely on autoconf to set up CDPATH properly.\n+AC_PREREQ([2.50])dnl\n+# expand $ac_aux_dir to an absolute path\n+am_aux_dir=`cd $ac_aux_dir && pwd`\n+])"}, {"sha": "339304b0c9c14a887834d749f3b46f399e068cf3", "filename": "gcc/configure", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=3b620440d3041539ea0150599073d829cea2982d", "patch": "@@ -2833,6 +2833,22 @@ _ACEOF\n \n fi\n \n+# expand $ac_aux_dir to an absolute path\n+am_aux_dir=`cd $ac_aux_dir && pwd`\n+\n+# FIXME: we rely on the cache variable name because\n+# there is no other way.\n+set dummy $CC\n+ac_cc=`echo $2 | sed 's/[^a-zA-Z0-9_]/_/g;s/^[0-9]/_/'`\n+if eval \"test \\\"`echo '$ac_cv_prog_cc_'${ac_cc}_c_o`\\\" != yes\"; then\n+   # Losing compiler, so override with the script.\n+   # FIXME: It is wrong to rewrite CC.\n+   # But if we don't then we get into trouble of one sort or another.\n+   # A longer-term fix would be to have automake use am__CC in this case,\n+   # and then we could set am__CC=\"\\$(top_srcdir)/compile \\$(CC)\"\n+   CC=\"$am_aux_dir/compile $CC\"\n+fi\n+\n # autoconf is lame and doesn't give us any substitution variable for this.\n if eval \"test \\\"`echo '$ac_cv_prog_cc_'${ac_cc}_c_o`\\\" = no\"; then\n   NO_MINUS_C_MINUS_O=yes\n@@ -7348,7 +7364,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7351: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7367: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)\n@@ -14620,14 +14636,6 @@ objdir=`${PWDCMD-pwd}`\n \n \n \n-\n-# If it doesn't already exist, create document directory\n-echo \"checking for the document directory.\" 1>&2\n-if test -d doc ; then\n-  true\n-else\n-  mkdir doc\n-fi\n \n # Echo link setup.\n if test x${build} = x${host} ; then\n@@ -16031,7 +16039,7 @@ case ${CONFIG_HEADERS} in\n   echo > cstamp-h ;;\n esac\n # Make sure all the subdirs exist.\n-for d in $subdirs\n+for d in $subdirs doc build\n do\n     test -d $d || mkdir $d\n done"}, {"sha": "0061a7dea868561405092112ea39334aba9be27f", "filename": "gcc/configure.ac", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=3b620440d3041539ea0150599073d829cea2982d", "patch": "@@ -269,7 +269,7 @@ rm -f a.out a.exe b.out\n \n # Find the native compiler\n AC_PROG_CC\n-AC_PROG_CC_C_O\n+AM_PROG_CC_C_O\n # autoconf is lame and doesn't give us any substitution variable for this.\n if eval \"test \\\"`echo '$ac_cv_prog_cc_'${ac_cc}_c_o`\\\" = no\"; then\n   NO_MINUS_C_MINUS_O=yes\n@@ -3262,14 +3262,6 @@ AC_SUBST(target_cpu_default)\n \n AC_SUBST_FILE(language_hooks)\n \n-# If it doesn't already exist, create document directory\n-echo \"checking for the document directory.\" 1>&2\n-if test -d doc ; then\n-  true\n-else\n-  mkdir doc \n-fi\n-\n # Echo link setup.\n if test x${build} = x${host} ; then\n   if test x${host} = x${target} ; then\n@@ -3305,7 +3297,7 @@ case ${CONFIG_HEADERS} in\n   echo > cstamp-h ;;\n esac\n # Make sure all the subdirs exist.\n-for d in $subdirs\n+for d in $subdirs doc build\n do\n     test -d $d || mkdir $d\n done"}, {"sha": "a33758f90f54476526185a32b12c75f1323f3602", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3b620440d3041539ea0150599073d829cea2982d", "patch": "@@ -1,3 +1,7 @@\n+2004-09-22  Kelley Cook  <kcook@gcc.gnu.org>\n+\n+\t* Make-lang.in: Revert the gcc-none.o change.\n+\n 2004-09-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* parse.y (patch_anonymous_class): VEC_space returns true if there"}, {"sha": "b74e83b1aa98984a294dbf0d99cbeabc49e851e4", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b620440d3041539ea0150599073d829cea2982d/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=3b620440d3041539ea0150599073d829cea2982d", "patch": "@@ -108,13 +108,13 @@ JAVA_OBJS = java/parse.o java/class.o java/decl.o java/expr.o \\\n   java/jcf-path.o java/xref.o java/boehm.o java/java-gimplify.o\n \n GCJH_OBJS = java/gjavah.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n-  java/win32-host.o java/zextract.o version.o errors.o java/ggc-none.o \\\n+  java/win32-host.o java/zextract.o version.o errors.o ggc-none.o \\\n   intl.o\n \n JVSCAN_OBJS = java/parse-scan.o java/jv-scan.o version.o intl.o\n \n JCFDUMP_OBJS = java/jcf-dump.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n-\t\tjava/win32-host.o java/zextract.o errors.o version.o java/ggc-none.o intl.o\n+\t\tjava/win32-host.o java/zextract.o errors.o version.o ggc-none.o intl.o\n \n JVGENMAIN_OBJS = java/jvgenmain.o java/mangle_name.o errors.o intl.o\n \n@@ -342,11 +342,6 @@ java/parse.o: java/parse.c java/jcf-reader.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) function.h $(JAVA_TREE_H) $(JAVA_LEX_C) java/parse.h \\\n   java/lex.h input.h $(GGC_H) debug.h gt-java-parse.h gtype-java.h target.h\n \n-# ggc-none.c is in the parent directory\n-java/ggc-none.o: ggc-none.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H)\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(srcdir)/ggc-none.c $(OUTPUT_OPTION)\n-\n # jcf-io.o needs $(ZLIBINC) added to cflags.\n java/jcf-io.o: java/jcf-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(JAVA_TREE_H)"}]}