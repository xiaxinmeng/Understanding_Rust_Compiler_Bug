{"sha": "03eb779141a29f96600cd46904b88a33c4b49a66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNlYjc3OTE0MWEyOWY5NjYwMGNkNDY5MDRiODhhMzNjNGI0OWE2Ng==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-06T09:59:42Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-18T10:39:57Z"}, "message": "Add 'dg-note', 'dg-lto-note'\n\nThat's 'dg-message \"note: [...]\"' with a twist: inhibit default notes pruning,\nsuch that \"if 'dg-note' is used at least once in a testcase, [notes] are not\npruned and instead must *all* be handled explicitly\".\n\nThe rationale is that either you're not interested in notes at all (default\nbehavior of pruning all notes), but often, when you're interested in one note,\nyou're in fact interested in all notes, and especially interested if\n*additional* notes appear over time, as GCC evolves.\n\n\tgcc/testsuite/\n\t* lib/gcc-dg.exp: Implement 'dg-note'.\n\t* lib/prune.exp: Likewise.\n\t* gcc.dg/vect/nodump-vect-opt-info-2.c: Use 'dg-note', and\n\t'dg-prune-output \"note: \".\n\t* gfortran.dg/goacc/routine-external-level-of-parallelism-2.f: Use\n\t'dg-note', match up additional notes, one class of them with\n\tXFAILed 'dg-bogus'.\n\t* lib/lto.exp: Implement 'dg-lto-note'.\n\t* g++.dg/lto/odr-1_0.C: Use 'dg-lto-note', match up additional\n\tnotes.\n\t* g++.dg/lto/odr-1_1.C: Likewise.\n\t* g++.dg/lto/odr-2_1.C: Likewise.\n\tlibstdc++-v3/\n\t* testsuite/lib/prune.exp: Add note about 'dg-note'.\n\tgcc/\n\t* doc/sourcebuild.texi: Document 'dg-note'.", "tree": {"sha": "eeed89ac8d0a497c6e3d34ff4eb749d6ff509ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeed89ac8d0a497c6e3d34ff4eb749d6ff509ba8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03eb779141a29f96600cd46904b88a33c4b49a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03eb779141a29f96600cd46904b88a33c4b49a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03eb779141a29f96600cd46904b88a33c4b49a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03eb779141a29f96600cd46904b88a33c4b49a66/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5116b54e4644cb0d7b99891c76f8f015097f6530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116b54e4644cb0d7b99891c76f8f015097f6530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5116b54e4644cb0d7b99891c76f8f015097f6530"}], "stats": {"total": 130, "additions": 114, "deletions": 16}, "files": [{"sha": "ed811d103a5734ccf8d8a95a55734afc571c459f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -1217,6 +1217,21 @@ If there is no message for that line or if the text of that message is\n not matched by @var{regexp} then the check fails and @var{comment} is\n included in the @code{FAIL} message.\n \n+@item @{ dg-note @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] ]] @}\n+The line is expected to get a @samp{note} message.\n+If there is no message for that line or if the text of that message is\n+not matched by @var{regexp} then the check fails and @var{comment} is\n+included in the @code{FAIL} message.\n+\n+By default, any @emph{excess} @samp{note} messages are pruned, meaning\n+their appearance doesn't trigger @emph{excess errors}.\n+However, if @samp{dg-note} is used at least once in a testcase,\n+they're not pruned and instead must @emph{all} be handled explicitly.\n+Thus, if looking for just single instances of messages with\n+@samp{note: } prefixes without caring for all of them, use\n+@samp{dg-message \"note: [@dots{}]\"} instead of @samp{dg-note}, or use\n+@samp{dg-note} together with @samp{dg-prune-output \"note: \"}.\n+\n @item @{ dg-bogus @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] ]] @}\n This DejaGnu directive appears on a source line that should not get a\n message matching @var{regexp}, or else specifies the source line\n@@ -1227,7 +1242,8 @@ targets.\n @item @{ dg-line @var{linenumvar} @}\n This DejaGnu directive sets the variable @var{linenumvar} to the line number of\n the source line.  The variable @var{linenumvar} can then be used in subsequent\n-@code{dg-error}, @code{dg-warning}, @code{dg-message} and @code{dg-bogus}\n+@code{dg-error}, @code{dg-warning}, @code{dg-message}, @code{dg-note}\n+and @code{dg-bogus}\n directives.  For example:\n \n @smallexample\n@@ -1239,7 +1255,9 @@ float a; /* @{ dg-error \"conflicting types of\" @} */\n @item @{ dg-excess-errors @var{comment} [@{ target/xfail @var{selector} @}] @}\n This DejaGnu directive indicates that the test is expected to fail due\n to compiler messages that are not handled by @samp{dg-error},\n-@samp{dg-warning} or @samp{dg-bogus}.  For this directive @samp{xfail}\n+@samp{dg-warning}, @code{dg-message}, @samp{dg-note} or\n+@samp{dg-bogus}.\n+For this directive @samp{xfail}\n has the same effect as @samp{target}.\n \n @item @{ dg-prune-output @var{regexp} @}"}, {"sha": "318a047cb70f19b25af389b4306cd6d229e16bc4", "filename": "gcc/testsuite/g++.dg/lto/odr-1_0.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_0.C?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -1,8 +1,10 @@\n // PR c++/82414\n // { dg-lto-do link }\n enum vals {aa,cc}; // { dg-lto-warning \"6: type 'vals' violates the C\\\\+\\\\+ One Definition Rule\" }\n+// { dg-lto-note \"name 'cc' differs from name 'bb' defined in another translation unit\" \"\" { target *-*-* } .-1 }\n struct a { // { dg-lto-warning \"8: type 'struct a' violates the C\\\\+\\\\+ One Definition Rule\" }\n-  struct b *ptr; // { dg-lto-message \"13: the first difference of corresponding definitions is field 'ptr'\" }\n+  struct b *ptr; // { dg-lto-note \"13: the first difference of corresponding definitions is field 'ptr'\" }\n+  // { dg-lto-note \"the incompatible type defined in another translation unit\" \"\" { target *-*-* } .-1 }\n   enum vals vals;\n };\n void test(struct a *a)"}, {"sha": "a57bb3898aaf2009feeae0ae84ef78d8089c2b9e", "filename": "gcc/testsuite/g++.dg/lto/odr-1_1.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -1,9 +1,10 @@\n namespace {\n-  struct b; // { dg-lto-message \"type 'struct b' defined in anonymous namespace cannot match across the translation unit boundary\" }\n+  struct b; // { dg-lto-note \"type 'struct b' defined in anonymous namespace cannot match across the translation unit boundary\" }\n  }\n-enum vals {aa,bb,cc}; // { dg-lto-message \"an enum with different value name is defined in another translation unit\" }\n-struct a { // { dg-lto-message \"a different type is defined in another translation unit\" }\n-  struct b *ptr; // { dg-lto-message \"a field of same name but different type is defined in another translation unit\" }\n+enum vals {aa,bb,cc}; // { dg-lto-note \"an enum with different value name is defined in another translation unit\" }\n+// { dg-lto-note \"mismatching definition\" \"\" { target *-*-* } .-1 }\n+struct a { // { dg-lto-note \"a different type is defined in another translation unit\" }\n+  struct b *ptr; // { dg-lto-note \"a field of same name but different type is defined in another translation unit\" }\n   enum vals vals;\n } a;\n void test(struct a *);"}, {"sha": "23cfccc241b77bf85b61dd3f4c62d9ca03b4bc6b", "filename": "gcc/testsuite/g++.dg/lto/odr-2_1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-2_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-2_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-2_1.C?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -1,4 +1,4 @@\n-class a { // { dg-lto-message \"a different type is defined in another translation unit\" }\n+class a { // { dg-lto-note \"a different type is defined in another translation unit\" }\n   int *b() const;\n };\n int *a::b() const { return 0; }"}, {"sha": "bcdf7f076715a4b7af59af6b1e469cd8a5ea1779", "filename": "gcc/testsuite/gcc.dg/vect/nodump-vect-opt-info-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fnodump-vect-opt-info-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fnodump-vect-opt-info-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fnodump-vect-opt-info-2.c?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -3,7 +3,9 @@\n \n extern void accumulate (int x, int *a);\n \n-int test_missing_function_defn (int *arr, int n) /* { dg-message \"vectorized 0 loops in function\" } */\n+int test_missing_function_defn (int *arr, int n) /* { dg-note \"5: vectorized 0 loops in function\" } */\n+/* { dg-prune-output \"note: \" } as we're not interested in matching any further\n+   notes.  */\n {\n   int sum = 0;\n   for (int i = 0; i < n; ++i) /* { dg-missed \"21: couldn't vectorize loop\" } */"}, {"sha": "04d507fef9a6ab29c39cf615c0b19dbca9c69030", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-external-level-of-parallelism-2.f", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-2.f?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -22,6 +22,8 @@ subroutine sub\n ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n          do j = 1, n\n             call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+! { dg-bogus \"note: routine 'workerr' declared here\" \"TODO\" { xfail { ! offloading_enabled } } .-1 }\n+! { dg-bogus \"note: routine 'workerr_' declared here\" \"TODO\" { xfail offloading_enabled } .-2 }\n          end do\n       end do\n !$acc end parallel loop\n@@ -30,9 +32,12 @@ subroutine sub\n ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n !$acc loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n          do j = 1, n\n             call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+! { dg-bogus \"note: routine 'gangr' declared here\" \"TODO\" { xfail { ! offloading_enabled } } .-2 }\n+! { dg-bogus \"note: routine 'gangr_' declared here\" \"TODO\" { xfail offloading_enabled } .-3 }\n          end do\n       end do\n !$acc end parallel loop\n@@ -83,20 +88,23 @@ subroutine sub\n !$acc end parallel loop\n \n !$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n       end do\n !$acc end parallel loop\n \n !$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n       end do\n !$acc end parallel loop\n \n !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n@@ -126,13 +134,15 @@ subroutine sub\n !$acc end parallel loop\n \n !$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n       end do\n !$acc end parallel loop\n \n !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n@@ -152,6 +162,8 @@ subroutine sub\n !$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n       do i = 1, n\n          call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-bogus \"note: routine 'vectorr' declared here\" \"TODO\" { xfail { ! offloading_enabled } } .-1 }\n+! { dg-bogus \"note: routine 'vectorr_' declared here\" \"TODO\" { xfail offloading_enabled } .-2 }\n       end do\n !$acc end parallel loop\n \n@@ -168,6 +180,7 @@ subroutine sub\n !$acc end parallel loop\n \n !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n@@ -201,6 +214,8 @@ subroutine func\n ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n          do j = 1, n\n             a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+! { dg-bogus \"note: routine 'workerf' declared here\" \"TODO\" { xfail { ! offloading_enabled } } .-1 }\n+! { dg-bogus \"note: routine 'workerf_' declared here\" \"TODO\" { xfail offloading_enabled } .-2 }\n          end do\n       end do\n !$acc end parallel loop\n@@ -209,9 +224,12 @@ subroutine func\n ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n !$acc loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n          do j = 1, n\n             a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+! { dg-bogus \"note: routine 'gangf' declared here\" \"TODO\" { xfail { ! offloading_enabled } } .-2 }\n+! { dg-bogus \"note: routine 'gangf_' declared here\" \"TODO\" { xfail offloading_enabled } .-3 }\n          end do\n       end do\n !$acc end parallel loop\n@@ -262,20 +280,23 @@ subroutine func\n !$acc end parallel loop\n \n !$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n       end do\n !$acc end parallel loop\n \n !$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n       end do\n !$acc end parallel loop\n \n !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n@@ -305,13 +326,15 @@ subroutine func\n !$acc end parallel loop\n \n !$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n       end do\n !$acc end parallel loop\n \n !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n@@ -331,6 +354,8 @@ subroutine func\n !$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n       do i = 1, n\n          a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-bogus \"note: routine 'vectorf' declared here\" \"TODO\" { xfail { ! offloading_enabled } } .-1 }\n+! { dg-bogus \"note: routine 'vectorf_' declared here\" \"TODO\" { xfail offloading_enabled } .-2 }\n       end do\n !$acc end parallel loop\n \n@@ -347,6 +372,7 @@ subroutine func\n !$acc end parallel loop\n \n !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-note \"containing loop here\" \"\" { target *-*-* } .-1 }\n       do i = 1, n\n          a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n ! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }"}, {"sha": "fce0989cd9ce32b1a41055335a4622540e80d593", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -1012,6 +1012,8 @@ if { [info procs saved-dg-test] == [list] } {\n \t    }\n \t    unset save_linenr_varnames\n \t}\n+\n+\tinitialize_prune_notes\n     }\n \n     proc dg-test { args } {\n@@ -1245,6 +1247,36 @@ proc dg-missed { args } {\n     process-message saved-dg-warning \"missed:\" \"$args\"\n }\n \n+# Look for messages with 'note: ' prefixes.\n+# In addition to standard compiler diagnostics ('DK_NOTE', 'inform' functions,\n+# \"for additional details on an error message\"),\n+# this also includes output from '-fopt-info' for 'MSG_NOTE':\n+# a general optimization info.\n+# By default, any *excess* notes are pruned, meaning their appearance doesn't\n+# trigger *excess errors*.  However, if 'dg-note' is used at least once in a\n+# testcase, they're not pruned and instead must *all* be handled explicitly.\n+# Thus, if looking for just single instances of messages with 'note: ' prefixes\n+# without caring for all of them, use 'dg-message \"note: [...]\"' instead of\n+# 'dg-note', or use 'dg-note' together with 'dg-prune-output \"note: \"'.\n+\n+variable prune_notes\n+\n+proc initialize_prune_notes { } {\n+    global prune_notes\n+    set prune_notes 1\n+}\n+\n+initialize_prune_notes\n+\n+proc dg-note { args } {\n+    upvar dg-messages dg-messages\n+\n+    global prune_notes\n+    set prune_notes 0\n+\n+    process-message saved-dg-warning \"note:\" \"$args\"\n+}\n+\n # Check the existence of a gdb in the path, and return true if there\n # is one.\n #"}, {"sha": "d0e0dc60138f866cc1c28651f39be3721c783146", "filename": "gcc/testsuite/lib/lto.exp", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Flib%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Flib%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Flto.exp?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -161,9 +161,13 @@ proc lto_prune_warns { text } {\n \n     # Ignore missing jobserver for tests that do more than 1 LTRANS unit\n     regsub -all \"(^|\\n)\\[^\\n\\]*: warning: using serial compilation of \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: note: see the \\[^\\n\\]*'-flto' option documentation\\[^\\n\\]* for more information\" $text \"\" text\n \n-    # Ignore informational notes.\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: note: \\[^\\n\\]*\" $text \"\" text\n+    global prune_notes\n+    if { $prune_notes } {\n+\t# Ignore informational notes.\n+\tregsub -all \"(^|\\n)\\[^\\n\\]*: note: \\[^\\n\\]*\" $text \"\" text\n+    }\n \n     verbose \"lto_prune_warns: exit: $text\" 2\n \n@@ -390,8 +394,8 @@ proc lto-can-handle-directive { op } {\n     # A list of directives to recognize, and a list of directives\n     # to remap them to.\n     # For example, \"dg-lto-warning\" is implemented by calling \"dg-warning\".\n-    set directives { dg-lto-warning dg-lto-message }\n-    set remapped_directives { dg-warning dg-message }\n+    set directives { dg-lto-warning dg-lto-message dg-lto-note }\n+    set remapped_directives { dg-warning dg-message dg-note }\n \n     set idx [lsearch -exact $directives $cmd]\n     if { $idx != -1 } {\n@@ -597,7 +601,7 @@ proc lto-get-options { src } {\n #\n # SRC1 is the full pathname of the main file of the testcase.\n # SID identifies a test suite in the names of temporary files.\n-proc lto-execute { src1 sid } {\n+proc lto-execute-1 { src1 sid } {\n     global srcdir tmpdir\n     global lto_option_list\n     global tool\n@@ -811,6 +815,14 @@ proc lto-execute { src1 sid } {\n     }\n }\n \n+proc lto-execute { src1 sid } {\n+    lto-execute-1 $src1 $sid\n+\n+    # LTO testing doesn't use 'dg-runtest'/'dg-test', and thus doesn't call\n+    # 'cleanup-after-saved-dg-test', so we have to clean up manually.\n+    initialize_prune_notes\n+}\n+\n # Call pass if object readelf is ok, otherwise fail.\n # example: /* { dg-final { object-readelf Tag_ABI_enum_size int} } */\n proc object-readelf { args } {"}, {"sha": "91f165bec3805f8f9e7d47c7558954809ff6fd06", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -54,8 +54,11 @@ proc prune_gcc_output { text } {\n     regsub -all \"(^|\\n)\\[ \\]+from \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)(In|of) module( \\[^\\n \\]*,)? imported at \\[^\\n\\]*\" $text \"\" text\n \n-    # Ignore informational notes.\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: note: \\[^\\n\\]*\" $text \"\" text\n+    global prune_notes\n+    if { $prune_notes } {\n+\t# Ignore informational notes.\n+\tregsub -all \"(^|\\n)\\[^\\n\\]*: note: \\[^\\n\\]*\" $text \"\" text\n+    }\n \n     # Ignore harmless -fpic warnings.\n     regsub -all \"(^|\\n)\\[^\\n\\]*: warning: -f(pic|PIC) ignored for target\\[^\\n\\]*\" $text \"\" text"}, {"sha": "fd4a0ac7f97bf2d90d6a3c4e947bee6577f1914e", "filename": "libstdc++-v3/testsuite/lib/prune.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03eb779141a29f96600cd46904b88a33c4b49a66/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03eb779141a29f96600cd46904b88a33c4b49a66/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp?ref=03eb779141a29f96600cd46904b88a33c4b49a66", "patch": "@@ -52,6 +52,8 @@ proc libstdc++-dg-prune { system text } {\n     regsub -all \"(^|\\n)\\[ \\t\\]*from \\[^\\n\\]*\" $text \"\" text\n \n     # Ignore informational notes.\n+    #TODO As this isn't even using 'gcc-dg.exp', cannot consider its\n+    # 'variable prune_notes' (for 'dg-note') here.\n     regsub -all \"(^|\\n)\\[^\\n\\]*: note: \\[^\\n\\]*\" $text \"\" text\n \n     # Ignore errata warning from IA64 assembler."}]}