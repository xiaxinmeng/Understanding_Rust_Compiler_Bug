{"sha": "2896d056498b5d84a81e7f1c1b059673e212f675", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5NmQwNTY0OThiNWQ4NGE4MWU3ZjFjMWIwNTk2NzNlMjEyZjY3NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-25T17:29:14Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-25T17:29:14Z"}, "message": "re PR c/10178 (ICE in tree_low_cst)\n\n\tPR 10178\n\t* langhooks.h (struct lang_hooks): Add no_body_blocks bool.\n\t* langhooks-def.h (LANG_HOOKS_NO_BODY_BLOCKS): New; default false.\n\t* c-lang.c, objc/objc-lang.c: Override LANG_HOOKS_NO_BODY_BLOCKS\n\tto true.\n\t* stmt.c (is_body_block): If lang_hooks.no_body_blocks, always\n\treturn 0.\n\nFrom-SVN: r68483", "tree": {"sha": "01ece93079b1c25dd26e427178410f003ca315e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ece93079b1c25dd26e427178410f003ca315e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2896d056498b5d84a81e7f1c1b059673e212f675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2896d056498b5d84a81e7f1c1b059673e212f675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2896d056498b5d84a81e7f1c1b059673e212f675", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2896d056498b5d84a81e7f1c1b059673e212f675/comments", "author": null, "committer": null, "parents": [{"sha": "8f7193b854d4f7d433af6e3239f1630700f78f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7193b854d4f7d433af6e3239f1630700f78f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7193b854d4f7d433af6e3239f1630700f78f96"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "96b0efd4c1682748d27fe14738412e8c53e7f41d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2896d056498b5d84a81e7f1c1b059673e212f675", "patch": "@@ -1,3 +1,13 @@\n+2003-06-25  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 10178\n+\t* langhooks.h (struct lang_hooks): Add no_body_blocks bool.\n+\t* langhooks-def.h (LANG_HOOKS_NO_BODY_BLOCKS): New; default false.\n+\t* c-lang.c, objc/objc-lang.c: Override LANG_HOOKS_NO_BODY_BLOCKS\n+\tto true.\n+\t* stmt.c (is_body_block): If lang_hooks.no_body_blocks, always\n+\treturn 0.\n+\n 2003-06-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (bt-load.o): Depend on $(TM_P_H).\n@@ -87,27 +97,27 @@ Wed Jun 25 11:31:59 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \tBack out these patches:\n \t 2003-06-02  J\"orn Rennecke <joern.rennecke@superh.com>\n-          * sh.h (OLD_ARG_MODE): New macro.\n-          (FUNCTION_ARG_ADVANCE, FUNCTION_ARG_PASS_BY_REFERENCE): Use it.\n-          (FUNCTION_ARG_1): Break out of:\n-          (FUNCTION_ARG).  Use OLD_ARG_MODE.\n+\t  * sh.h (OLD_ARG_MODE): New macro.\n+\t  (FUNCTION_ARG_ADVANCE, FUNCTION_ARG_PASS_BY_REFERENCE): Use it.\n+\t  (FUNCTION_ARG_1): Break out of:\n+\t  (FUNCTION_ARG).  Use OLD_ARG_MODE.\n \t 2003-06-06  J\"orn Rennecke <joern.rennecke@superh.com>\n-          * sh.h (FUNCTION_ARG_1): Consistently use NEW_MODE for the mode\n-          of the generated register.\n+\t  * sh.h (FUNCTION_ARG_1): Consistently use NEW_MODE for the mode\n+\t  of the generated register.\n \n \t* sh.h (FUNCTION_ARG_SCmode_WART): Define.\n \t(FUNCTION_ARG): Unless FUNCTION_ARG_SCmode_WART is defined and\n \tan even number of floating point regs are in use, use the same\n-\tsequence of argument passing registers for SCmode as would be \n+\tsequence of argument passing registers for SCmode as would be\n \tused for two SFmode values.\n \t* sh.c (sh_va_arg): If FUNCTION_ARG_SCmode_WART is defined,\n \tswap real / imaginary parts in incoming SCmode values passed\n \tin registers.\n \n 2003-06-24  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n \n-        PR target/11260\n-        * config/alpha/alpha.md (sqrtdf2): Fix operand substitution.\n+\tPR target/11260\n+\t* config/alpha/alpha.md (sqrtdf2): Fix operand substitution.\n \n Tue Jun 24 18:49:33 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -167,7 +177,7 @@ Mon Jun 23 23:07:35 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* cgraphunit.c (cgraph_finalize_function): Collect entry points here\n \tinstead of in cgraph_finalize_compilation_unit; constructors and\n \tdestructors are entry points.\n-\t(cgraph_finalize_compilation_unit): Reorganize debug outout; \n+\t(cgraph_finalize_compilation_unit): Reorganize debug outout;\n \texamine nested functions after lowerng; call collect_functions hook.\n \t(cgraph_mark_local_functions): DECL_COMDAT functions are not local.\n \t(cgraph_finalize_compilation_unit): Do not collect entry points.\n@@ -237,7 +247,7 @@ Mon Jun 23 23:07:35 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* sched-deps.c: Likewise.\n \n 2003-06-23  Roger Sayle  <roger@eyesopen.com>\n-            Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n+\t    Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/contrib.texi (Contributors): Add a note on testing and\n \tremove duplicates from testers list."}, {"sha": "6d8c89ab1c608fe596066a895eae18abd72463f8", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=2896d056498b5d84a81e7f1c1b059673e212f675", "patch": "@@ -67,6 +67,8 @@ static int c_init_options (void);\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n+#undef LANG_HOOKS_NO_BODY_BLOCKS\n+#define LANG_HOOKS_NO_BODY_BLOCKS true\n #undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL c_warn_unused_global_decl\n #undef LANG_HOOKS_PRINT_IDENTIFIER"}, {"sha": "e6fa38ea8fcbe2489c0a4064a4a347604f7bdd69", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=2896d056498b5d84a81e7f1c1b059673e212f675", "patch": "@@ -107,6 +107,7 @@ void write_global_declarations PARAMS ((void));\n #define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME lhd_set_decl_assembler_name\n #define LANG_HOOKS_CAN_USE_BIT_FIELDS_P lhd_can_use_bit_fields_p\n #define LANG_HOOKS_HONOR_READONLY\tfalse\n+#define LANG_HOOKS_NO_BODY_BLOCKS\tfalse\n #define LANG_HOOKS_PRINT_STATISTICS\tlhd_do_nothing\n #define LANG_HOOKS_PRINT_XNODE\t\tlhd_print_tree_nothing\n #define LANG_HOOKS_PRINT_DECL\t\tlhd_print_tree_nothing\n@@ -266,6 +267,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, \\\n   LANG_HOOKS_CAN_USE_BIT_FIELDS_P, \\\n   LANG_HOOKS_HONOR_READONLY, \\\n+  LANG_HOOKS_NO_BODY_BLOCKS, \\\n   LANG_HOOKS_PRINT_STATISTICS, \\\n   LANG_HOOKS_PRINT_XNODE, \\\n   LANG_HOOKS_PRINT_DECL, \\"}, {"sha": "a23db4293e16922fd93f78ba0d40cd75d27cd390", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=2896d056498b5d84a81e7f1c1b059673e212f675", "patch": "@@ -328,6 +328,11 @@ struct lang_hooks\n   /* Nonzero if TYPE_READONLY and TREE_READONLY should always be honored.  */\n   bool honor_readonly;\n \n+  /* Nonzero if this front end does not generate a dummy BLOCK between\n+     the outermost scope of the function and the FUNCTION_DECL.  See\n+     is_body_block in stmt.c, and its callers.  */\n+  bool no_body_blocks;\n+\n   /* The front end can add its own statistics to -fmem-report with\n      this hook.  It should output to stderr.  */\n   void (*print_statistics) PARAMS ((void));"}, {"sha": "7d76b6be7b2f56be79383f0a34fbd93c4efd607d", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=2896d056498b5d84a81e7f1c1b059673e212f675", "patch": "@@ -65,6 +65,8 @@ static int objc_init_options                   PARAMS ((void));\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n+#undef LANG_HOOKS_NO_BODY_BLOCKS\n+#define LANG_HOOKS_NO_BODY_BLOCKS true\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL c_dup_lang_specific_decl\n #undef LANG_HOOKS_PRINT_IDENTIFIER"}, {"sha": "426ded3a52e9d19fe222f9ae282618ec4e8c14a6", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2896d056498b5d84a81e7f1c1b059673e212f675/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=2896d056498b5d84a81e7f1c1b059673e212f675", "patch": "@@ -3511,6 +3511,9 @@ int\n is_body_block (stmt)\n      tree stmt;\n {\n+  if (lang_hooks.no_body_blocks)\n+    return 0;\n+\n   if (TREE_CODE (stmt) == BLOCK)\n     {\n       tree parent = BLOCK_SUPERCONTEXT (stmt);"}]}