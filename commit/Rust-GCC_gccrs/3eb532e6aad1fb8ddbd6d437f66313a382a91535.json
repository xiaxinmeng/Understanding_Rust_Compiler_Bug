{"sha": "3eb532e6aad1fb8ddbd6d437f66313a382a91535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViNTMyZTZhYWQxZmI4ZGRiZDZkNDM3ZjY2MzEzYTM4MmE5MTUzNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-07-15T12:53:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-15T12:53:31Z"}, "message": "gnat_rm.texi: Document s-ststop.ads\n\n2009-07-15  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document s-ststop.ads\n\n\t* impunit.ad: (Map_Array): New table of alternative names\n\t(Get_Kind_Of_Unit): Return possible suggested alternative name\n\n\t* impunit.ads (Get_Kind_Of_Unit): Return possible suggested\n\talternative name.\n\n\t* sem_ch10.adb (Analalyze_With_Clause): Add name of possible\n\talternative unit if an implementation unit is with'ed.\n\nFrom-SVN: r149685", "tree": {"sha": "0577e536fa3418edd38ae272ec6be69c6c097f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0577e536fa3418edd38ae272ec6be69c6c097f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eb532e6aad1fb8ddbd6d437f66313a382a91535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb532e6aad1fb8ddbd6d437f66313a382a91535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb532e6aad1fb8ddbd6d437f66313a382a91535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb532e6aad1fb8ddbd6d437f66313a382a91535/comments", "author": null, "committer": null, "parents": [{"sha": "4cd029c79b453e06026217b2256ba547fe80b8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd029c79b453e06026217b2256ba547fe80b8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd029c79b453e06026217b2256ba547fe80b8a7"}], "stats": {"total": 113, "additions": 102, "deletions": 11}, "files": [{"sha": "e6bd4a244d81ebd334372d4eb4180f502f9be54b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3eb532e6aad1fb8ddbd6d437f66313a382a91535", "patch": "@@ -1,3 +1,16 @@\n+2009-07-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document s-ststop.ads\n+\n+\t* impunit.ad: (Map_Array): New table of alternative names\n+\t(Get_Kind_Of_Unit): Return possible suggested alternative name\n+\n+\t* impunit.ads (Get_Kind_Of_Unit): Return possible suggested\n+\talternative name.\n+\n+\t* sem_ch10.adb (Analalyze_With_Clause): Add name of possible\n+\talternative unit if an implementation unit is with'ed.\n+\n 2009-07-15  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_ugn.texi: Minor updates."}, {"sha": "bc18c28b849ff6d85eb31a81c4699ae0f3f2c28f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3eb532e6aad1fb8ddbd6d437f66313a382a91535", "patch": "@@ -409,6 +409,7 @@ The GNAT Library\n * System.Pool_Local (s-pooloc.ads)::\n * System.Restrictions (s-restri.ads)::\n * System.Rident (s-rident.ads)::\n+* System.Strings.Stream_Ops (s-ststop.ads)::\n * System.Task_Info (s-tasinf.ads)::\n * System.Wch_Cnv (s-wchcnv.ads)::\n * System.Wch_Con (s-wchcon.ads)::\n@@ -13597,6 +13598,7 @@ of GNAT, and will generate a warning message.\n * System.Pool_Local (s-pooloc.ads)::\n * System.Restrictions (s-restri.ads)::\n * System.Rident (s-rident.ads)::\n+* System.Strings.Stream_Ops (s-ststop.ads)::\n * System.Task_Info (s-tasinf.ads)::\n * System.Wch_Cnv (s-wchcnv.ads)::\n * System.Wch_Con (s-wchcon.ads)::\n@@ -14939,6 +14941,18 @@ It is not normally necessary to @code{with} this generic package\n since the necessary instantiation is included in\n package System.Restrictions.\n \n+@node System.Strings.Stream_Ops (s-ststop.ads)\n+@section @code{System.Strings.Stream_Ops} (@file{s-ststop.ads})\n+@cindex @code{System.Strings.Stream_Ops} (@file{s-ststop.ads})\n+@cindex Stream operations\n+@cindex String stream operations\n+\n+@noindent\n+This package provides a set of stream subprograms for standard string types.\n+It is intended primarily to support implicit use of such subprograms when\n+stream attributes are applied to string types, but the subprograms in this\n+package can be used directly by application programs.\n+\n @node System.Task_Info (s-tasinf.ads)\n @section @code{System.Task_Info} (@file{s-tasinf.ads})\n @cindex @code{System.Task_Info} (@file{s-tasinf.ads})"}, {"sha": "94112ff8ef5ee6905ba0c4aa83c69f910b33bfe6", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=3eb532e6aad1fb8ddbd6d437f66313a382a91535", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n+with Errout;   use Errout;\n with Sinfo;    use Sinfo;\n with Fname.UF; use Fname.UF;\n with Lib;      use Lib;\n@@ -471,6 +472,42 @@ package body Impunit is\n      \"g-zspche\",    -- GNAT.Wide_Wide_Spelling_Checker\n      \"g-zstspl\");   -- GNAT.Wide_Wide_String_Split\n \n+   -----------------------\n+   -- Alternative Units --\n+   -----------------------\n+\n+   --  For some implementation units, there is a unit in the GNAT library\n+   --  that has identical functionality that is usable. If we have such a\n+   --  case we record the appropriate Unit name in Error_Msg_String.\n+\n+   type Aunit_Record is record\n+      Fname : String (1 .. 6);\n+      Aname : String_Ptr;\n+   end record;\n+\n+   --  Array of alternative unit names\n+\n+   Scasuti : aliased String := \"GNAT.Case_Util\";\n+   Sos_lib : aliased String := \"GNAT.OS_Lib\";\n+   Sregexp : aliased String := \"GNAT.Regexp\";\n+   Sregpat : aliased String := \"GNAT.Regpat\";\n+   Sstring : aliased String := \"GNAT.Strings\";\n+   Sstusta : aliased String := \"GNAT.Task_Stack_Usage\";\n+   Stasloc : aliased String := \"GNAT.Task_Lock\";\n+   Sutf_32 : aliased String := \"GNAT.UTF_32\";\n+\n+   --  Array giving mapping\n+\n+   Map_Array : constant array (1 .. 8) of Aunit_Record := (\n+                 (\"casuti\", Scasuti'Access),\n+                 (\"os_lib\", Sos_lib'Access),\n+                 (\"regexp\", Sregexp'Access),\n+                 (\"regpat\", Sregpat'Access),\n+                 (\"string\", Sstring'Access),\n+                 (\"stusta\", Sstusta'Access),\n+                 (\"tasloc\", Stasloc'Access),\n+                 (\"utf_32\", Sutf_32'Access));\n+\n    ----------------------\n    -- Get_Kind_Of_Unit --\n    ----------------------\n@@ -479,6 +516,8 @@ package body Impunit is\n       Fname : constant File_Name_Type := Unit_File_Name (U);\n \n    begin\n+      Error_Msg_Strlen := 0;\n+\n       --  If length of file name is greater than 12, not predefined.\n       --  The value 12 here is an 8 char name with extension .ads.\n \n@@ -559,7 +598,23 @@ package body Impunit is\n          return Ada_95_Unit;\n       end if;\n \n-      --  All tests failed, this is definitely an implementation unit\n+      --  All tests failed, this is definitely an implementation unit. See if\n+      --  we have an alternative name.\n+\n+      Get_Name_String (Fname);\n+\n+      if Name_Len = 12\n+        and then Name_Buffer (1 .. 2) = \"s-\"\n+        and then Name_Buffer (9 .. 12) = \".ads\"\n+      then\n+         for J in Map_Array'Range loop\n+            if Name_Buffer (3 .. 8) = Map_Array (J).Fname then\n+               Error_Msg_Strlen := Map_Array (J).Aname'Length;\n+               Error_Msg_String (1 .. Error_Msg_Strlen) :=\n+                 Map_Array (J).Aname.all;\n+            end if;\n+         end loop;\n+      end if;\n \n       return Implementation_Unit;\n    end Get_Kind_Of_Unit;"}, {"sha": "f342b79962c508d3389847d3c12bd90bdf5ac79d", "filename": "gcc/ada/impunit.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fimpunit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fimpunit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.ads?ref=3eb532e6aad1fb8ddbd6d437f66313a382a91535", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,7 +55,11 @@ package Impunit is\n \n    function Get_Kind_Of_Unit (U : Unit_Number_Type) return Kind_Of_Unit;\n    --  Given the unit number of a unit, this function determines the type\n-   --  of the unit, as defined above.\n+   --  of the unit, as defined above. If the result is Implementation_Unit,\n+   --  then the name of a possible atlernative equivalent unit is placed in\n+   --  Error_Msg_String/Slen on return. If there is no alternative name, or\n+   --  if the result is not Implementation_Unit, then Error_Msg_Slen is zero\n+   --  on return, indicating that no alternative name was found.\n \n    function Is_Known_Unit (Nam : Node_Id) return Boolean;\n    --  Nam is the possible name of a child unit, represented as a selected"}, {"sha": "d3cab12326d146b34d603ac10e518f1f75e33988", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb532e6aad1fb8ddbd6d437f66313a382a91535/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=3eb532e6aad1fb8ddbd6d437f66313a382a91535", "patch": "@@ -2334,12 +2334,10 @@ package body Sem_Ch10 is\n          end if;\n \n          --  Check for inappropriate with of internal implementation unit if we\n-         --  are currently compiling the main unit and the main unit is itself\n-         --  not an internal unit. We do not issue this message for implicit\n-         --  with's generated by the compiler itself.\n+         --  are not compiling an internal unit. We do not issue this message\n+         --  for implicit with's generated by the compiler itself.\n \n          if Implementation_Unit_Warnings\n-           and then Current_Sem_Unit = Main_Unit\n            and then not Intunit\n            and then not Implicit_With (N)\n          then\n@@ -2350,10 +2348,17 @@ package body Sem_Ch10 is\n             begin\n                if U_Kind = Implementation_Unit then\n                   Error_Msg_F (\"& is an internal 'G'N'A'T unit?\", Name (N));\n-                  Error_Msg_F\n-                    (\"\\use of this unit is non-portable \" &\n-                     \"and version-dependent?\",\n-                     Name (N));\n+\n+                  --  Add alternative name if available, otherwise issue a\n+                  --  general warning message.\n+\n+                  if Error_Msg_Strlen /= 0 then\n+                     Error_Msg_F (\"\\use \"\"~\"\" instead\", Name (N));\n+                  else\n+                     Error_Msg_F\n+                       (\"\\use of this unit is non-portable \" &\n+                        \"and version-dependent?\", Name (N));\n+                  end if;\n \n                elsif U_Kind = Ada_05_Unit\n                  and then Ada_Version < Ada_05"}]}