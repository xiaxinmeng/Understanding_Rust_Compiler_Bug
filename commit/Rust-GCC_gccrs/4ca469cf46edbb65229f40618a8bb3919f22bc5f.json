{"sha": "4ca469cf46edbb65229f40618a8bb3919f22bc5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhNDY5Y2Y0NmVkYmI2NTIyOWY0MDYxOGE4YmIzOTE5ZjIyYmM1Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-11-04T19:42:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-11-04T19:42:24Z"}, "message": "re PR fortran/57445 ([OOP] ICE in gfc_conv_class_to_class - for OPTIONAL polymorphic array)\n\n2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/57445\n\t* trans-expr.c (gfc_conv_class_to_class): Remove spurious\n\tassert.\n\n2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/57445\n\t* gfortran.dg/optional_class_1.f90 : New test\n\nFrom-SVN: r204356", "tree": {"sha": "85e2363a2166c257385f1c506e8061ed35e4cb45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85e2363a2166c257385f1c506e8061ed35e4cb45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca469cf46edbb65229f40618a8bb3919f22bc5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca469cf46edbb65229f40618a8bb3919f22bc5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca469cf46edbb65229f40618a8bb3919f22bc5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca469cf46edbb65229f40618a8bb3919f22bc5f/comments", "author": null, "committer": null, "parents": [{"sha": "efaf512c94161056ad9834cf2d4f53d25e77aa2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efaf512c94161056ad9834cf2d4f53d25e77aa2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efaf512c94161056ad9834cf2d4f53d25e77aa2d"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "f37eeca52ca4ff0f77a948ce779c6c6a4ae1bcd0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4ca469cf46edbb65229f40618a8bb3919f22bc5f", "patch": "@@ -1,3 +1,9 @@\n+2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/57445\n+\t* trans-expr.c (gfc_conv_class_to_class): Remove spurious\n+\tassert.\n+\n 2013-10-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44350"}, {"sha": "9586ca388e20f21190edbf98cf0ca249aee54d26", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4ca469cf46edbb65229f40618a8bb3919f22bc5f", "patch": "@@ -737,7 +737,6 @@ gfc_conv_class_to_class (gfc_se *parmse, gfc_expr *e, gfc_typespec class_ts,\n     gfc_add_modify (&parmse->post, vptr,\n \t\t    fold_convert (TREE_TYPE (vptr), ctree));\n \n-  gcc_assert (!optional || (optional && !copyback));\n   if (optional)\n     {\n       tree tmp2;\n@@ -7769,7 +7768,7 @@ is_runtime_conformable (gfc_expr *expr1, gfc_expr *expr2)\n \t      e1 = a->expr;\n \t      if (e1->rank > 0 && !is_runtime_conformable (expr1, e1))\n \t\treturn false;\n-\t    }\t \n+\t    }\n \t  return true;\n \t}\n       else if (expr2->value.function.isym"}, {"sha": "43813fbd96d7158995b03041e3a5645ddd8f4da3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ca469cf46edbb65229f40618a8bb3919f22bc5f", "patch": "@@ -1,3 +1,8 @@\n+2013-11-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/57445\n+\t* gfortran.dg/optional_class_1.f90 : New test\n+\n 2013-11-04  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/58968"}, {"sha": "589fc6023e7cc12238a7d94b4f9b820cbf521149", "filename": "gcc/testsuite/gfortran.dg/optional_class_1.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_class_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca469cf46edbb65229f40618a8bb3919f22bc5f/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_class_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_class_1.f90?ref=4ca469cf46edbb65229f40618a8bb3919f22bc5f", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+!\n+! PR fortran/57445\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+! Spurious assert was added at revision 192495\n+!\n+module m\n+  implicit none\n+  type t\n+    integer :: i\n+  end type t\n+contains\n+  subroutine opt(xa, xc, xaa, xca)\n+    type(t),  allocatable, intent(out), optional :: xa\n+    class(t), allocatable, intent(out), optional :: xc\n+    type(t),  allocatable, intent(out), optional :: xaa(:)\n+    class(t), allocatable, intent(out), optional :: xca(:)\n+    if (present (xca)) call foo_opt(xca=xca)\n+  end subroutine opt\n+  subroutine foo_opt(xa, xc, xaa, xca)\n+    type(t),  allocatable, intent(out), optional :: xa\n+    class(t), allocatable, intent(out), optional :: xc\n+    type(t),  allocatable, intent(out), optional :: xaa(:)\n+    class(t), allocatable, intent(out), optional :: xca(:)\n+    if (present (xca)) then\n+      if (allocated (xca)) deallocate (xca)\n+      allocate (xca(3), source = [t(9),t(99),t(999)])\n+    end if\n+  end subroutine foo_opt\n+end module m\n+  use m\n+  class(t), allocatable :: xca(:)\n+  allocate (xca(1), source = t(42))\n+  select type (xca)\n+    type is (t)\n+      if (any (xca%i .ne. [42])) call abort\n+  end select\n+  call opt (xca = xca)\n+  select type (xca)\n+    type is (t)\n+      if (any (xca%i .ne. [9,99,999])) call abort\n+  end select\n+end"}]}