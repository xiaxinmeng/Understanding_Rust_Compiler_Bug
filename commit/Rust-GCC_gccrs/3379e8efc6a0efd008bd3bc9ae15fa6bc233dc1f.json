{"sha": "3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3OWU4ZWZjNmEwZWZkMDA4YmQzYmM5YWUxNWZhNmJjMjMzZGMxZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-22T00:41:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-22T00:41:52Z"}, "message": "(LANGUAGES, COMPILERS, .PHONY, stmp-int-hdrs): Remove specific references to ObjC compiler and source files.\n\n(LANGUAGES, COMPILERS, .PHONY, stmp-int-hdrs): Remove specific references to\nObjC compiler and source files.\n({mostly,dist,maintainer,}clean, install-normal): Likewise\n(OBJC_OBJS, OBJC, OBJECTIVE-C, cc1obj, objc-runtime): Rules deleted.\n(libobjc.a, sublibobjc.a, objc-parse.{o, c, y}): Rules deleted.\n(objc-headers, install-libobjc): Rules deleted.\n\nFrom-SVN: r14281", "tree": {"sha": "9861f1e5d488d1ac175c0afe17e6afc8c211f7dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9861f1e5d488d1ac175c0afe17e6afc8c211f7dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f/comments", "author": null, "committer": null, "parents": [{"sha": "c1ea0a445ac14ec7bbd4397aeb67c389fe80a0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ea0a445ac14ec7bbd4397aeb67c389fe80a0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ea0a445ac14ec7bbd4397aeb67c389fe80a0be"}], "stats": {"total": 101, "additions": 8, "deletions": 93}, "files": [{"sha": "852cc6a1118af987394b2246b3896c97fc7dd66b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 8, "deletions": 93, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f", "patch": "@@ -39,7 +39,7 @@ SUBDIRS =@subdirs@\n \n # Selection of languages to be made.\n # This is overridden by configure.\n-LANGUAGES = c objective-c proto gcov @all_languages@\n+LANGUAGES = c proto gcov @all_languages@\n \n # Selection of languages to be made during stage1 build.\n # This is overridden by configure.\n@@ -348,7 +348,7 @@ OTHER_FIXINCLUDES_DIRS=\n \n # A list of all the language-specific executables.\n # This is overridden by configure.\n-COMPILERS = cc1$(exeext) cc1obj$(exeext) @all_compilers@\n+COMPILERS = cc1$(exeext) @all_compilers@\n \n # List of things which should already be built whenever we try to use xgcc\n # to compile anything (without linking).\n@@ -536,10 +536,6 @@ FLAGS_TO_PASS = \\\n C_OBJS = c-parse.o c-lang.o c-lex.o c-pragma.o \\\n    c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o\n \n-# Language-specific object files for Objective C.\n-OBJC_OBJS = objc-parse.o objc-act.o c-lex.o c-pragma.o \\\n-   c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o\n-\n # Files specific to the C interpreter bytecode compiler(s).\n BC_OBJS = bc-emit.o bc-optab.o\n \n@@ -683,12 +679,10 @@ native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_C\n \n # Define the names for selecting languages in LANGUAGES.\n C c: cc1\n-OBJC objc: cc1obj objc-runtime\n-OBJECTIVE-C objective-c: cc1obj objc-runtime\n PROTO: proto\n \n # Tell GNU make these are phony targets.\n-.PHONY: C c OBJC objc OBJECTIVE-C objective-c PROTO proto\n+.PHONY: C c PROTO proto\n \n # Really, really stupid make features, such as SUN's KEEP_STATE, may force\n # a target to build even if it is up-to-date.  So we must verify that\n@@ -744,9 +738,6 @@ gcc-cross: xgcc\n cc1: $(P) $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)\n \n-cc1obj: $(P) $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)\n-\n # Copy float.h from its source.\n gfloat.h: $(FLOAT_H)\n \t-rm -f gfloat.h\n@@ -1076,32 +1067,6 @@ stmp-multilib-sub:\n \telse true; \\\n \tfi; done\n \n-objc-runtime: libobjc.a\n-\n-# Build the Objective C runtime library.\n-libobjc.a: cc1obj specs stmp-int-hdrs libgcc2.ready $(USE_COLLECT2) $(EXTRA_PARTS)\n-\tif [ -d objc ]; then true; else mkdir objc; fi\n-\tthisdir1=`pwd`; \\\n-\tsrcdir1=`cd $(srcdir); pwd`; \\\n-\tcd objc; \\\n-\t$(MAKE) -f $${srcdir1}/objc/Makefile libobjc.a \\\n-\t  srcdir=$${srcdir1} tooldir=$(tooldir) AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" \\\n-\t  GCC_FOR_TARGET=\"$${thisdir1}/xgcc -B$${thisdir1}/\" \\\n-\t  GCC_CFLAGS=\"$(GCC_CFLAGS)\" OBJC_THREAD_FILE=\"$(OBJC_THREAD_FILE)\"\n-\t-rm -f libobjc.a\n-\tln objc/libobjc.a . >/dev/null 2>&1 || cp objc/libobjc.a .\n-\t-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi\n-\n-# This is used by objc/Makefile if the user runs that directly.\n-sublibobjc.a: cc1obj specs stmp-int-hdrs libgcc2.ready\n-\tthisdir1=`pwd`; \\\n-\tsrcdir1=`cd $(srcdir); pwd`; \\\n-\tcd objc; \\\n-\t$(MAKE) -f $$srcdir1/objc/Makefile libobjc.a \\\n-\t  srcdir=$$srcdir1 tooldir=$(tooldir) AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" \\\n-\t  GCC_FOR_TARGET=\"$$thisdir1/xgcc -B$$thisdir1/\" \\\n-\t  GCC_CFLAGS=\"$(GCC_CFLAGS)\" OBJC_THREAD_FILE=\"$(OBJC_THREAD_FILE)\"\n-\n # Compile two additional files that are linked with every program\n # linked using GCC on systems using COFF or ELF, for the sake of C++\n # constructors.\n@@ -1211,23 +1176,6 @@ stamp-under: $(GCC_PASSES)\n \t-rm -f tmp-dum.c tmp-dum.s\n \ttouch stamp-under\n \n-# Objective C language specific files.\n-\n-objc-parse.o : $(srcdir)/objc-parse.c $(CONFIG_H) $(TREE_H) c-lex.h \\\n-   c-tree.h input.h flags.h objc-act.h\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/objc-parse.c\n-$(srcdir)/objc-parse.c : $(srcdir)/objc-parse.y\n-\tcd $(srcdir); $(BISON) $(BISONFLAGS) objc-parse.y -o objc-parse.c\n-$(srcdir)/objc-parse.y: $(srcdir)/c-parse.in\n-\techo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y\n-\tsed -e \"/^ifc$$/,/^end ifc$$/d\" \\\n-\t  -e \"/^ifobjc$$/d\" -e \"/^end ifobjc$$/d\" \\\n-\t  $(srcdir)/c-parse.in >>tmp-objc-prs.y\n-\t$(srcdir)/move-if-change tmp-objc-prs.y $(srcdir)/objc-parse.y\n-\n-objc-act.o : objc-act.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h c-lex.h \\\n-   flags.h objc-act.h input.h function.h $(srcdir)/c-parse.h\n-\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h\n@@ -1856,7 +1804,7 @@ gcov: gcov.o $(LIBDEPS)\n \n # Build the include directory except for float.h (which depends upon\n # enquire).\n-stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h objc-headers\n+stmp-int-hdrs: stmp-fixinc $(USER_H) xlimits.h\n # Copy in the headers provided with gcc.\n # The sed command gets just the last file name component;\n # this is necessary because VPATH could add a dirname.\n@@ -1908,21 +1856,6 @@ stmp-fixinc: $(FIXINCLUDES) gsyslimits.h\n \tchmod a+r include/syslimits.h\n \ttouch stmp-fixinc\n \n-# copy objc header files into build directory\n-objc-headers: stmp-fixinc\n-\tif [ -d include ]; then true; else mkdir include; fi\n-\tif [ -d objc ]; then true; else mkdir objc; fi\n-\tthisdir1=`pwd`; \\\n-\tsrcdir1=`cd $(srcdir); pwd`; \\\n-\tcd objc; \\\n-\tif [ -f $${srcdir1}/objc/Makefile ]; then \\\n-\t  $(MAKE) -f $${srcdir1}/objc/Makefile copy-headers \\\n-\t  srcdir=$${srcdir1} tooldir=$(tooldir) AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" \\\n-\t  GCC_FOR_TARGET=\"$${thisdir1}/xgcc -B$${thisdir1}/\" \\\n-\t  GCC_CFLAGS=\"$(GCC_CFLAGS)\" incinstalldir=$${thisdir1}/include; \\\n-\tfi\n-\ttouch objc-headers\n-\n # Files related to the fixproto script.\n \n deduced.h: $(GCC_PASSES) $(srcdir)/scan-types.sh stmp-int-hdrs\n@@ -2031,12 +1964,6 @@ $(srcdir)/INSTALL: install1.texi install.texi\n \n mostlyclean: bytecode.mostlyclean lang.mostlyclean\n \t-rm -f $(STAGESTUFF)\n-# Clean the objc subdir if we created one.\n-\tif [ -d objc ]; then \\\n-\t  srcdir1=`cd $(srcdir); pwd`; \\\n-\t  cd objc; $(MAKE) -f $$srcdir1/objc/Makefile mostlyclean; \\\n-\telse true; fi\n-\t-rm -f libobjc.a\n # Delete the temporary source copies for cross compilation.\n \t-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c\n \t-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c\n@@ -2047,7 +1974,7 @@ mostlyclean: bytecode.mostlyclean lang.mostlyclean\n # Delete other temporary files.\n \t-rm -f tmp-float.h tmp-gcc.xtar.gz\n \t-rm -f tmp-foo1 tmp-foo2 tmp-proto.* tmp-unproto.1 tmp-SYSCALLS.s\n-\t-rm -f tmp-c-parse.y tmp-objc-prs.y tmp-gperf.h\n+\t-rm -f tmp-c-parse.y tmp-gperf.h\n \t-rm -f tmp-specs t-float.h-cross tmp-xlimits.h\n \t-rm -f tmp-fixtmp.c xsys-protos.hT\n # Delete the stamp files.\n@@ -2089,7 +2016,7 @@ clean: mostlyclean bytecode.clean lang.clean\n \t  rm -f md ; \\\n \tfi\n # Delete the include directory.\n-\t-rm -rf stmp-* include objc-headers\n+\t-rm -rf stmp-* include\n \t-rm -f */stmp-*\n # Delete files used by the \"multilib\" facility (including libgcc subdirs).\n \t-rm -f multilib.h tmpmultilib*\n@@ -2108,7 +2035,6 @@ distclean: clean bytecode.distclean lang.distclean\n \t-rm -f Makefile specs.h options.h *.oaux\n \t-rm -fr stage1 stage2 stage3 stage4\n \t-rm -f */stage1 */stage2 */stage3 */stage4 */include\n-\t-rm -f objc-parse.output\n \t-rm -f c-parse.output\n \t-rm -f *.asm\n \t-rm -f float.h\n@@ -2136,8 +2062,7 @@ maintainer-clean:\n \t@echo 'This command is intended for maintainers to use; it'\n \t@echo 'deletes files that may need special tools to rebuild.'\n \t$(MAKE) distclean bytecode.maintainer-clean lang.maintainer-clean\n-\t-rm -f c-parse.y c-gperf.h objc-parse.y\n-\t-rm -f objc-parse.c objc-parse.output\n+\t-rm -f c-parse.y c-gperf.h\n \t-rm -f c-parse.c c-parse.h c-parse.output\n \t-rm -f cexp.c cexp.output TAGS \n \t-rm -f cpp.info* cpp.??s cpp.*aux\n@@ -2155,7 +2080,7 @@ install: $(INSTALL_TARGET) ; @true\n # Install the driver last so that the window when things are\n # broken is small.\n install-normal: install-common $(INSTALL_HEADERS) $(INSTALL_LIBGCC) \\\n-    install-libobjc install-man install-info lang.install-normal install-driver\n+    install-man install-info lang.install-normal install-driver\n \n # Do nothing while making gcc with a cross-compiler. The person who\n # makes gcc for the target machine has to know how to put a complete\n@@ -2314,16 +2239,6 @@ install-multilib: stmp-multilib installdirs\n \t  chmod a-x $(libsubdir)/$${dir}/libgcc.a; \\\n \tdone\n \n-# Install the objc run time library.\n-install-libobjc: installdirs\n-\t-if [ -f libobjc.a ] ; then \\\n-\t  rm -f $(libsubdir)/libobjc.a; \\\n-\t  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a; \\\n-\t  if $(RANLIB_TEST) ; then \\\n-\t    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi; \\\n-\t  chmod a-x $(libsubdir)/libobjc.a; \\\n-\telse true; fi\n-\n # Install all the header files built in the include subdirectory.\n install-headers: install-include-dir $(INSTALL_HEADERS_DIR) $(INSTALL_ASSERT_H)\n # Fix symlinks to absolute paths in the installed include directory to"}]}