{"sha": "a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyZTNjMDk3ZWNlOWQxZjAyZWM4OGI5YzRhNjRhYTYyNTIyYzBhOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-02-16T00:19:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-02-16T00:19:13Z"}, "message": "Tune for size.\n\n\n\n2002-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tTune for size.\n\t* src/string-inst.cc (string::_Rep::_S_terminal): Remove redundant\n\texplicit instantiation.\n\t(string::_Rep::_S_max_size): Same.\n\t* include/bits/basic_string.tcc: Add extern explicit\n\tinstantiations for string, wstring.\n\t* include/bits/basic_ios.tcc: Add extern explicit instantiations\n\tfor ios, wios.\n\t* include/bits/streambuf.tcc: Same, for streambuf, wstreambuf.\n\t* include/bits/istream.tcc: Same, for istream, wistream.\n\t* include/bits/ostream.tcc: Same for ostream, wostream, iostream,\n\twiostream.\n\t* include/bits/sstream.tcc: Same, for stringbuf, wstringbuf,\n\tistringstream, wistringstream, ostringstream, wostringstream,\n\tstringstream, wstringstream.\n\t* include/bits/fstream.tcc: Same, for filebuf, wfilebuf, ifstream,\n\twifstream, ofstream, wofstream, fstream, wfstream.\n\t* src/misc-inst.cc: Correct comments.\n\tAdd iomanip instantiations for wide streams.\n\t* include/std/std_iomanip.h: Same.\n\t* include/bits/locale_facets.tcc: Same.\n\n\t* include/std/std_streambuf.h: Correct\n\t_GLIBCPP_FULLY_COMPLIANT_HEADERS guard.\n\t* include/std/std_sstream.h: Same.\n\t* include/std/std_ostream.h: Same.\n\t* include/std/std_istream.h: Same.\n\t* include/std/std_fstream.h: Same.\n\n\t* include/std/std_streambuf.h: Add definitions for private copy\n\tctor and assignment operator.\n\t* include/std/std_istream.h: Remove declared but undefined copy\n\tctor and assignment operator. This is taken care of in ios_base,\n\tso adding it in the derived class as well is superfluous.\n\t* include/std/std_ostream.h: Same.\n\n\t* include/bits/basic_ios.h (basic_ios::clear): Don't inline.\n\t* include/bits/basic_ios.tcc (basic_ios::clear): Move definition here.\n\nFrom-SVN: r49798", "tree": {"sha": "3ce77f3b8272c41aa4b08f4fb58573bdab29ffee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ce77f3b8272c41aa4b08f4fb58573bdab29ffee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/comments", "author": null, "committer": null, "parents": [{"sha": "13e58269a61bc02a73910439915e95352af9a56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e58269a61bc02a73910439915e95352af9a56d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e58269a61bc02a73910439915e95352af9a56d"}], "stats": {"total": 446, "additions": 324, "deletions": 122}, "files": [{"sha": "efc9bade1162bf783760ca5e1cb539cef9737b94", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -1,3 +1,44 @@\n+2002-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tTune for size.\n+\t* src/string-inst.cc (string::_Rep::_S_terminal): Remove redundant\n+\texplicit instantiation.\n+\t(string::_Rep::_S_max_size): Same.\n+\t* include/bits/basic_string.tcc: Add extern explicit\n+\tinstantiations for string, wstring.\n+\t* include/bits/basic_ios.tcc: Add extern explicit instantiations\n+\tfor ios, wios.\n+\t* include/bits/streambuf.tcc: Same, for streambuf, wstreambuf.\n+\t* include/bits/istream.tcc: Same, for istream, wistream.\n+\t* include/bits/ostream.tcc: Same for ostream, wostream, iostream,\n+\twiostream.\n+\t* include/bits/sstream.tcc: Same, for stringbuf, wstringbuf,\n+\tistringstream, wistringstream, ostringstream, wostringstream,\n+\tstringstream, wstringstream.\n+\t* include/bits/fstream.tcc: Same, for filebuf, wfilebuf, ifstream,\n+\twifstream, ofstream, wofstream, fstream, wfstream.\n+\t* src/misc-inst.cc: Correct comments.\n+\tAdd iomanip instantiations for wide streams.\n+\t* include/std/std_iomanip.h: Same.\n+\t* include/bits/locale_facets.tcc: Same.\n+\t\n+\t* include/std/std_streambuf.h: Correct\n+\t_GLIBCPP_FULLY_COMPLIANT_HEADERS guard.\n+\t* include/std/std_sstream.h: Same.\n+\t* include/std/std_ostream.h: Same.\n+\t* include/std/std_istream.h: Same.\n+\t* include/std/std_fstream.h: Same.\n+\n+\t* include/std/std_streambuf.h: Add definitions for private copy\n+\tctor and assignment operator.\n+\t* include/std/std_istream.h: Remove declared but undefined copy\n+\tctor and assignment operator. This is taken care of in ios_base,\n+\tso adding it in the derived class as well is superfluous.\n+\t* include/std/std_ostream.h: Same.\n+\n+\t* include/bits/basic_ios.h (basic_ios::clear): Don't inline.\n+\t* include/bits/basic_ios.tcc (basic_ios::clear): Move definition here.\n+\t\n 2002-02-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/linker-map.gnu: Change tag from GCC_3.1 to GLIBCPP_3.1."}, {"sha": "f91719582f1dd441a45dbd52cee9528d4e9738db", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -78,57 +78,49 @@ namespace std\n       const __numget_type* \t\t_M_fnumget;\n \n     public:\n-      inline const __ctype_type*\t\n+      const __ctype_type*\t\n       _M_get_fctype_ios(void)\n       { return _M_ios_fctype; }\n \n       operator void*() const \n       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }\n \n-      inline bool \n+      bool \n       operator!() const \n       { return this->fail(); }\n \n-      inline iostate \n+      iostate \n       rdstate() const \n       { return _M_streambuf_state; }\n \n-      inline void \n-      clear(iostate __state = goodbit)\n-      { \n-\tif (this->rdbuf())\n-\t  _M_streambuf_state = __state;\n-\telse\n-\t  _M_streambuf_state = __state | badbit;\n-\tif ((this->rdstate() & this->exceptions()))\n-\t  __throw_ios_failure(\"basic_ios::clear(iostate) caused exception\");\n-      }\n+      void \n+      clear(iostate __state = goodbit);\n \n-      inline void \n+      void \n       setstate(iostate __state) \n       { this->clear(this->rdstate() | __state); }\n \n-      inline bool \n+      bool \n       good() const \n       { return this->rdstate() == 0; }\n \n-      inline bool \n+      bool \n       eof() const \n       { return (this->rdstate() & eofbit) != 0; }\n \n-      inline bool \n+      bool \n       fail() const \n       { return (this->rdstate() & (badbit | failbit)) != 0; }\n \n-      inline bool \n+      bool \n       bad() const \n       { return (this->rdstate() & badbit) != 0; }\n \n-      inline iostate \n+      iostate \n       exceptions() const \n       { return _M_exception; }\n \n-      inline void \n+      void \n       exceptions(iostate __except) \n       { \n \t_M_exception = __except; \n@@ -144,19 +136,19 @@ namespace std\n       ~basic_ios() { }\n       \n       // Members:\n-      inline basic_ostream<_CharT, _Traits>*\n+      basic_ostream<_CharT, _Traits>*\n       tie() const      \n       { return _M_tie; }\n \n-      inline basic_ostream<_CharT, _Traits>*\n+      basic_ostream<_CharT, _Traits>*\n       tie(basic_ostream<_CharT, _Traits>* __tiestr)\n       {\n \tbasic_ostream<_CharT, _Traits>* __old = _M_tie;\n \t_M_tie = __tiestr;\n \treturn __old;\n       }\n \n-      inline basic_streambuf<_CharT, _Traits>*\n+      basic_streambuf<_CharT, _Traits>*\n       rdbuf() const    \n       { return _M_streambuf; }\n \n@@ -166,11 +158,11 @@ namespace std\n       basic_ios&\n       copyfmt(const basic_ios& __rhs);\n \n-      inline char_type \n+      char_type \n       fill() const \n       { return _M_fill; }\n \n-      inline char_type \n+      char_type \n       fill(char_type __ch)\n       {\n \tchar_type __old = this->fill();\n@@ -215,5 +207,3 @@ namespace std\n #endif\n \n #endif /* _CPP_BITS_BASICIOS_H */\n-\n-"}, {"sha": "63b797c0b2ed189e91c09211685b540c06f27817", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -32,6 +32,18 @@\n \n namespace std\n {\n+  template<typename _CharT, typename _Traits>\n+    void\n+    basic_ios<_CharT, _Traits>::clear(iostate __state)\n+    { \n+      if (this->rdbuf())\n+\t_M_streambuf_state = __state;\n+      else\n+\t  _M_streambuf_state = __state | badbit;\n+      if ((this->rdstate() & this->exceptions()))\n+\t__throw_ios_failure(\"basic_ios::clear(iostate) caused exception\");\n+    }\n+  \n   template<typename _CharT, typename _Traits>\n     basic_streambuf<_CharT, _Traits>* \n     basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)\n@@ -165,6 +177,12 @@ namespace std\n       else\n \t_M_fnumget = 0;\n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB:  This syntax is a GNU extension.\n+  extern template class basic_ios<char>;\n+  extern template class basic_ios<wchar_t>;\n } // namespace std\n \n #endif "}, {"sha": "dd5038ffe0d1f631ca003a83423126309e6d1afe", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -938,6 +938,37 @@ namespace std\n       _Traits::copy(__buf, __str.data(), __bytes);\n       __buf[__bytes] = _CharT();\n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB: This syntax is a GNU extension.\n+  extern template class basic_string<char>;\n+   extern template \n+    basic_istream<char>& \n+    operator>>(basic_istream<char>&, string&);\n+  extern template \n+    basic_ostream<char>& \n+    operator<<(basic_ostream<char>&, const string&);\n+  extern template \n+    basic_istream<char>& \n+    getline(basic_istream<char>&, string&, char);\n+  extern template \n+    basic_istream<char>& \n+    getline(basic_istream<char>&, string&);\n+\n+  extern template class basic_string<wchar_t>;\n+  extern template \n+    basic_istream<wchar_t>& \n+    operator>>(basic_istream<wchar_t>&, wstring&);\n+  extern template \n+    basic_ostream<wchar_t>& \n+    operator<<(basic_ostream<wchar_t>&, const wstring&);\n+  extern template \n+    basic_istream<wchar_t>& \n+    getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n+  extern template \n+    basic_istream<wchar_t>& \n+    getline(basic_istream<wchar_t>&, wstring&);\n } // namespace std\n \n #endif"}, {"sha": "e6132d2b31aee8b1cef830cc05d752e95a987541", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -647,6 +647,18 @@ namespace std\n       // XXX The part in the above comment is not done.\n       _M_last_overflowed = false;\t\n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB:  This syntax is a GNU extension.\n+  extern template class basic_filebuf<char>;\n+  extern template class basic_filebuf<wchar_t>;\n+  extern template class basic_ifstream<char>;\n+  extern template class basic_ifstream<wchar_t>;\n+  extern template class basic_ofstream<char>;\n+  extern template class basic_ofstream<wchar_t>;\n+  extern template class basic_fstream<char>;\n+  extern template class basic_fstream<wchar_t>;\n } // namespace std\n \n #endif "}, {"sha": "566db2e15a1716a83b86ff6ba77d26357716bb3c", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -1,4 +1,7 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// istream classes -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1267,8 +1270,21 @@ namespace std\n     getline(basic_istream<_CharT, _Traits>& __in, \n \t    basic_string<_CharT,_Traits,_Alloc>& __str)\n     { return getline(__in, __str, __in.widen('\\n')); }\n-} // namespace std\n \n-// Local Variables:\n-// mode:C++\n-// End:\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB:  This syntax is a GNU extension.\n+  extern template class basic_istream<char>;\n+  extern template istream& ws(istream&);\n+  extern template istream& operator>>(istream&, char&);\n+  extern template istream& operator>>(istream&, char*);\n+  extern template istream& operator>>(istream&, unsigned char&);\n+  extern template istream& operator>>(istream&, signed char&);\n+  extern template istream& operator>>(istream&, unsigned char*);\n+  extern template istream& operator>>(istream&, signed char*);\n+\n+  extern template class basic_istream<wchar_t>;\n+  extern template wistream& ws(wistream&);\n+  extern template wistream& operator>>(wistream&, wchar_t&);\n+  extern template wistream& operator>>(wistream&, wchar_t*);\n+} // namespace std"}, {"sha": "efea5728c97bbc7dcd1628acb1ff9423d9a5a5aa", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -2038,6 +2038,59 @@ namespace std\n       while (__first != __last);\n       return __s;\n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB: This syntax is a GNU extension.\n+  extern template class moneypunct<char, false>;\n+  extern template class moneypunct<char, true>;\n+  extern template class moneypunct_byname<char, false>;\n+  extern template class moneypunct_byname<char, true>;\n+  extern template class money_get<char, istreambuf_iterator<char> >;\n+  extern template class money_put<char, ostreambuf_iterator<char> >;\n+  extern template class moneypunct<wchar_t, false>;\n+  extern template class moneypunct<wchar_t, true>;\n+  extern template class moneypunct_byname<wchar_t, false>;\n+  extern template class moneypunct_byname<wchar_t, true>;\n+  extern template class money_get<wchar_t, istreambuf_iterator<wchar_t> >;\n+  extern template class money_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  extern template class numpunct<char>;\n+  extern template class numpunct_byname<char>;\n+  extern template class num_get<char, istreambuf_iterator<char> >;\n+  extern template class num_put<char, ostreambuf_iterator<char> >; \n+  extern template class numpunct<wchar_t>;\n+  extern template class numpunct_byname<wchar_t>;\n+  extern template class num_get<wchar_t, istreambuf_iterator<wchar_t> >;\n+  extern template class num_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  extern template class __timepunct<char>;\n+  extern template class time_put<char, ostreambuf_iterator<char> >;\n+  extern template class time_put_byname<char, ostreambuf_iterator<char> >;\n+  extern template class time_get<char, istreambuf_iterator<char> >;\n+  extern template class time_get_byname<char, istreambuf_iterator<char> >;\n+  extern template class __timepunct<wchar_t>;\n+  extern template class time_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  extern template class time_put_byname<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  extern template class time_get<wchar_t, istreambuf_iterator<wchar_t> >;\n+  extern template class time_get_byname<wchar_t, istreambuf_iterator<wchar_t> >;\n+  extern template class messages<char>;\n+  extern template class messages_byname<char>;\n+  extern template class messages<wchar_t>;\n+  extern template class messages_byname<wchar_t>;\n+  extern template class ctype_byname<char>;\n+  extern template class ctype_byname<wchar_t>;\n+  extern template class codecvt_byname<char, char, mbstate_t>;\n+  extern template class codecvt_byname<wchar_t, char, mbstate_t>;\n+  extern template class collate<char>;\n+  extern template class collate_byname<char>;\n+  extern template class collate<wchar_t>;\n+  extern template class collate_byname<wchar_t>;\n } // namespace std\n \n #endif\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "3182ff337693ff8c401c33231303c6ef2206856c", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -1,4 +1,7 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// ostream classes -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -679,8 +682,27 @@ namespace std\n \t}\n       return __out;\n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB:  This syntax is a GNU extension.\n+  extern template class basic_ostream<char>;\n+  extern template ostream& endl(ostream&);\n+  extern template ostream& ends(ostream&);\n+  extern template ostream& flush(ostream&);\n+  extern template ostream& operator<<(ostream&, char);\n+  extern template ostream& operator<<(ostream&, unsigned char);\n+  extern template ostream& operator<<(ostream&, signed char);\n+  extern template ostream& operator<<(ostream&, const char*);\n+  extern template ostream& operator<<(ostream&, const unsigned char*);\n+  extern template ostream& operator<<(ostream&, const signed char*);\n+\n+  extern template class basic_ostream<wchar_t>;\n+  extern template wostream& endl(wostream&);\n+  extern template wostream& ends(wostream&);\n+  extern template wostream& flush(wostream&);\n+  extern template wostream& operator<<(wostream&, wchar_t);\n+  extern template wostream& operator<<(wostream&, char);\n+  extern template wostream& operator<<(wostream&, const wchar_t*);\n+  extern template wostream& operator<<(wostream&, const char*);\n } // namespace std\n- \n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "884c190877f7c9bbd011fee432ca3ffa785ca08a", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -206,6 +206,18 @@ namespace std\n       \n       return __ret;\n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB:  This syntax is a GNU extension.\n+  extern template class basic_stringbuf<char>;\n+  extern template class basic_stringbuf<wchar_t>;\n+  extern template class basic_istringstream<char>;\n+  extern template class basic_istringstream<wchar_t>;\n+  extern template class basic_ostringstream<char>;\n+  extern template class basic_ostringstream<wchar_t>;\n+  extern template class basic_stringstream<char>;\n+  extern template class basic_stringstream<wchar_t>;\n } // namespace std\n \n #endif"}, {"sha": "c4cec0fd939112856469670ba7ccea27807909a8", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -224,6 +224,21 @@ namespace std\n \t}\n       return __ret;\n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB:  This syntax is a GNU extension.\n+  extern template class basic_streambuf<char>;\n+  extern template\n+    streamsize\n+    __copy_streambufs(basic_ios<char>&, basic_streambuf<char>*,\n+\t\t      basic_streambuf<char>*); \n+\n+  extern template class basic_streambuf<wchar_t>;\n+  extern template\n+    streamsize\n+    __copy_streambufs(basic_ios<wchar_t>&, basic_streambuf<wchar_t>*,\n+\t\t      basic_streambuf<wchar_t>*); \n } // namespace std\n \n #endif "}, {"sha": "c3273b55fd493aba156d3793cfb6a3de4190df15", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -505,9 +505,9 @@ namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # define export\n+#endif\n #ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n # include <bits/fstream.tcc>\n #endif\n-#endif\n \n #endif"}, {"sha": "d2e3d3182d415916ea7e8d1aa0c3a36543f12203", "filename": "libstdc++-v3/include/std/std_iomanip.h", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iomanip.h?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -47,7 +47,6 @@\n \n namespace std\n {\n-\n   struct _Resetiosflags { ios_base::fmtflags _M_mask; };\n \n   inline _Resetiosflags \n@@ -216,6 +215,35 @@ namespace std\n       __os.width(__f._M_n); \n       return __os; \n     }\n+\n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.  \n+  // NB:  This syntax is a GNU extension.\n+  extern template ostream& operator<<(ostream&, _Setfill<char>);\n+  extern template ostream& operator<<(ostream&, _Setiosflags);\n+  extern template ostream& operator<<(ostream&, _Resetiosflags);\n+  extern template ostream& operator<<(ostream&, _Setbase);\n+  extern template ostream& operator<<(ostream&, _Setprecision);\n+  extern template ostream& operator<<(ostream&, _Setw);\n+  extern template wostream& operator<<(wostream&, _Setfill<wchar_t>);\n+  extern template wostream& operator<<(wostream&, _Setiosflags);\n+  extern template wostream& operator<<(wostream&, _Resetiosflags);\n+  extern template wostream& operator<<(wostream&, _Setbase);\n+  extern template wostream& operator<<(wostream&, _Setprecision);\n+  extern template wostream& operator<<(wostream&, _Setw);\n+\n+  extern template istream& operator>>(istream&, _Setfill<char>);\n+  extern template istream& operator>>(istream&, _Setiosflags);\n+  extern template istream& operator>>(istream&, _Resetiosflags);\n+  extern template istream& operator>>(istream&, _Setbase);\n+  extern template istream& operator>>(istream&, _Setprecision);\n+  extern template istream& operator>>(istream&, _Setw);\n+  extern template wistream& operator>>(wistream&, _Setfill<wchar_t>);\n+  extern template wistream& operator>>(wistream&, _Setiosflags);\n+  extern template wistream& operator>>(wistream&, _Resetiosflags);\n+  extern template wistream& operator>>(wistream&, _Setbase);\n+  extern template wistream& operator>>(wistream&, _Setprecision);\n+  extern template wistream& operator>>(wistream&, _Setw);\n } // namespace std\n \n #endif\t"}, {"sha": "40f4b67fb9f75dee50024b244add9088a2ac7ed2", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -204,15 +204,6 @@ namespace std\n \n       __istream_type& \n       seekg(off_type, ios_base::seekdir);\n-\n-    private:\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // Not defined.  (Side effect of DR 50.)\n-      __istream_type& \n-      operator=(const __istream_type&);\n-\n-      basic_istream(const __istream_type&);\n-#endif\n     };\n   \n   template<typename _CharT, typename _Traits>\n@@ -266,7 +257,7 @@ namespace std\n   // 27.6.1.5 Template class basic_iostream\n   template<typename _CharT, typename _Traits>\n     class basic_iostream\n-    : public basic_istream<_CharT, _Traits>,\n+    : public basic_istream<_CharT, _Traits>, \n       public basic_ostream<_CharT, _Traits>\n     {\n     public:\n@@ -291,9 +282,9 @@ namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # define export\n+#endif\n #ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n # include <bits/istream.tcc>\n #endif\n-#endif\n \n #endif\t/* _CPP_ISTREAM */"}, {"sha": "eff4bb5119f3f9a705c98032abbe1b3f9766861a", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -172,15 +172,6 @@ namespace std\n \n       __ostream_type& \n       seekp(off_type, ios_base::seekdir);\n-\n-    private:\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // Not defined.  (Side effect of DR 50.)\n-      __ostream_type& \n-      operator=(const __ostream_type&);\n-\n-      basic_ostream(const __ostream_type&);\n-#endif\n     };\n \n   // 27.6.2.3  Class basic_ostream::sentry\n@@ -279,10 +270,9 @@ namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # define export\n+#endif\n #ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n # include <bits/ostream.tcc>\n #endif\n-#endif\n \n #endif\t/* _CPP_OSTREAM */\n-"}, {"sha": "bbd6dc60b754e3fe900e6ffba0ce7c2c081ef566", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -362,9 +362,9 @@ namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # define export\n+#endif\n #ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n # include <bits/sstream.tcc>\n #endif\n-#endif\n \n #endif"}, {"sha": "f57d96fc17da75f84a6c294ad9e2a5f0c9c0c96e", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -518,21 +518,21 @@ namespace std\n #endif\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-    // Side effect of DR 50.\n+    // Side effect of DR 50. \n     private:\n-      basic_streambuf(const __streambuf_type&);\n+      basic_streambuf(const __streambuf_type&) { }; \n \n       __streambuf_type& \n-      operator=(const __streambuf_type&);\n+      operator=(const __streambuf_type&) { };\n #endif\n     };\n } // namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # define export\n+#endif\n #ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n #include <bits/streambuf.tcc>\n #endif\n-#endif\n \n #endif\t"}, {"sha": "324b07e93698917e82ae9ebbd608acb89a795d6f", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -43,10 +43,10 @@\n \n namespace std\n {\n-  typedef ostreambuf_iterator<char, char_traits<char> > obuf_iterator;\n-  typedef istreambuf_iterator<char, char_traits<char> > ibuf_iterator;\n-  typedef ostreambuf_iterator<wchar_t, char_traits<wchar_t> > wobuf_iterator;\n-  typedef istreambuf_iterator<wchar_t, char_traits<wchar_t> > wibuf_iterator;\n+  typedef ostreambuf_iterator<char> obuf_iterator;\n+  typedef istreambuf_iterator<char> ibuf_iterator;\n+  typedef ostreambuf_iterator<wchar_t> wobuf_iterator;\n+  typedef istreambuf_iterator<wchar_t> wibuf_iterator;\n \n   // moneypunct, money_get, and money_put\n   template class moneypunct<char, false>;\n@@ -174,16 +174,16 @@ namespace std\n #endif\n   \n   // ctype\n-  template class __ctype_abstract_base<char>;\n+  inline template class __ctype_abstract_base<char>;\n   template class ctype_byname<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n-  template class __ctype_abstract_base<wchar_t>;\n+  inline template class __ctype_abstract_base<wchar_t>;\n   template class ctype_byname<wchar_t>;\n #endif\n   \n   // codecvt\n-  template class __codecvt_abstract_base<char, char, mbstate_t>;\n-  template class __codecvt_abstract_base<wchar_t, char, mbstate_t>;\n+  inline template class __codecvt_abstract_base<char, char, mbstate_t>;\n+  inline template class __codecvt_abstract_base<wchar_t, char, mbstate_t>;\n   template class codecvt_byname<char, char, mbstate_t>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class codecvt_byname<wchar_t, char, mbstate_t>;"}, {"sha": "a276a732ed3e08af37b25be91db57fcd873e0ea8", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 29, "deletions": 44, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -1,6 +1,7 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,7 +45,7 @@\n #include <ostream>\n #include <iomanip>\n \n-// NB: unnecessary if the .h headers include these\n+// NB: Unnecessary if the .h headers already include these.\n #ifndef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n #include <bits/sstream.tcc>\n #include <bits/fstream.tcc>\n@@ -55,57 +56,39 @@\n \n namespace std\n {\n-\n-  //\n   // streambuf\n-  // \n   template class basic_streambuf<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_streambuf<wchar_t>;\n #endif\n \n-\n-  //\n-  // stringstream\n-  //\n+  // stringbuf\n   template class basic_stringbuf<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_stringbuf<wchar_t>;\n #endif\n \n-\n-  //\n-  // fstream\n-  //\n+  // filebuf\n   template class basic_filebuf<char, char_traits<char> >;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_filebuf<wchar_t, char_traits<wchar_t> >;\n #endif\n \n-\n-  //\n   // basic_ios\n-  //\n   template class basic_ios<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_ios<wchar_t>;\n #endif\n \n-\n-  //\n   // iomanip\n-  //\n   template class _Setfill<char>;\n   template _Setfill<char> setfill(char);\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class _Setfill<wchar_t>;\n   template _Setfill<wchar_t> setfill(wchar_t);\n #endif\n \n-\n-  //\n   // istream\n-  //\n   template class basic_istream<char>;\n   template istream& ws(istream&);\n   template istream& operator>>(istream&, char&);\n@@ -115,10 +98,10 @@ namespace std\n   template istream& operator>>(istream&, unsigned char*);\n   template istream& operator>>(istream&, signed char*);\n \n+  template istream& operator>>(istream&, _Setfill<char>);\n   template istream& operator>>(istream&, _Setiosflags);\n   template istream& operator>>(istream&, _Resetiosflags);\n   template istream& operator>>(istream&, _Setbase);\n-  template istream& operator>>(istream&, _Setfill<char>);\n   template istream& operator>>(istream&, _Setprecision);\n   template istream& operator>>(istream&, _Setw);\n \n@@ -127,13 +110,16 @@ namespace std\n   template wistream& ws(wistream&);\n   template wistream& operator>>(wistream&, wchar_t&);\n   template wistream& operator>>(wistream&, wchar_t*);\n+\n   template wistream& operator>>(wistream&, _Setfill<wchar_t>);\n+  template wistream& operator>>(wistream&, _Setiosflags);\n+  template wistream& operator>>(wistream&, _Resetiosflags);\n+  template wistream& operator>>(wistream&, _Setbase);\n+  template wistream& operator>>(wistream&, _Setprecision);\n+  template wistream& operator>>(wistream&, _Setw);\n #endif\n \n-\n-  //\n   // ostream\n-  //\n   template class basic_ostream<char>;\n   template ostream& endl(ostream&);\n   template ostream& ends(ostream&);\n@@ -145,10 +131,10 @@ namespace std\n   template ostream& operator<<(ostream&, const unsigned char*);\n   template ostream& operator<<(ostream&, const signed char*);\n \n+  template ostream& operator<<(ostream&, _Setfill<char>);\n   template ostream& operator<<(ostream&, _Setiosflags);\n   template ostream& operator<<(ostream&, _Resetiosflags);\n   template ostream& operator<<(ostream&, _Setbase);\n-  template ostream& operator<<(ostream&, _Setfill<char>);\n   template ostream& operator<<(ostream&, _Setprecision);\n   template ostream& operator<<(ostream&, _Setw);\n \n@@ -161,58 +147,59 @@ namespace std\n   template wostream& operator<<(wostream&, char);\n   template wostream& operator<<(wostream&, const wchar_t*);\n   template wostream& operator<<(wostream&, const char*);\n+\n   template wostream& operator<<(wostream&, _Setfill<wchar_t>);\n+  template wostream& operator<<(wostream&, _Setiosflags);\n+  template wostream& operator<<(wostream&, _Resetiosflags);\n+  template wostream& operator<<(wostream&, _Setbase);\n+  template wostream& operator<<(wostream&, _Setprecision);\n+  template wostream& operator<<(wostream&, _Setw);\n #endif\n   \n \n-  //\n   // iostream\n-  //\n   template class basic_iostream<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_iostream<wchar_t>; \n #endif\n \n-\n-  //\n   // ifstream\n-  //\n   template class basic_ifstream<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_ifstream<wchar_t>;\n #endif\n \n-\n-  //\n   // ofstream\n-  //\n   template class basic_ofstream<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_ofstream<wchar_t>;\n #endif\n \n+  // fstream\n+  template class basic_fstream<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template class basic_fstream<wchar_t>;\n+#endif\n \n-  //\n   // istringstream\n-  //\n   template class basic_istringstream<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_istringstream<wchar_t>; \n #endif\n \n-\n-  //\n   // ostringstream\n-  //\n   template class basic_ostringstream<char>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class basic_ostringstream<wchar_t>; \n #endif\n \n+  // stringstream\n+  template class basic_stringstream<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template class basic_stringstream<wchar_t>; \n+#endif\n \n-  //\n   // string related to iostreams\n-  //\n   template \n     basic_istream<char>& \n     operator>>(basic_istream<char>&, string&);\n@@ -240,9 +227,7 @@ namespace std\n     getline(basic_istream<wchar_t>&, wstring&);\n #endif\n \n-  //\n   // algorithm\n-  //\n   typedef  _Char_traits_match<char, char_traits<char> > char_match;\n \n   template "}, {"sha": "7ebc0c5abd3419167f6f05a848ab8017045cc17e", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=a32e3c097ece9d1f02ec88b9c4a64aa62522c0a8", "patch": "@@ -1,6 +1,7 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -45,9 +46,6 @@ namespace std\n   typedef basic_string<C> S;\n \n   template class basic_string<C>;\n-  template const C S::_Rep::_S_terminal;\n-  template S::size_type S::_Rep::_S_max_size;\n-\n   template S operator+(const C*, const S&);\n   template S operator+(C, const S&);\n   template bool operator==(const S::iterator&, const S::iterator&);"}]}