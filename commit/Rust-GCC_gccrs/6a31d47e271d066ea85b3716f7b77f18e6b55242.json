{"sha": "6a31d47e271d066ea85b3716f7b77f18e6b55242", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEzMWQ0N2UyNzFkMDY2ZWE4NWIzNzE2ZjdiNzdmMThlNmI1NTI0Mg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-12-21T20:15:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-12-21T20:15:36Z"}, "message": "libstdc++: Disable floating-point std::to_chars on unsupported targets\n\nThis patch conditionally disables the floating-point std::to_chars\nimplementation on targets whose float and double aren't IEEE binary32\nand binary64, until a proper fallback can be added for such targets.\nThis fixes a bootstrap failure on non-IEEE-754 FP targets such as\nvax-netbsdelf.\n\nThe new preprocessor tests in c++config that detect the binary32 and\nbinary64 formats were copied from gcc/testsuite/gcc.dg/float-exact-1.c.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/c++config (_GLIBCXX_FLOAT_IS_IEEE_BINARY_32):\n\tDefine this macro.\n\t(_GLIBCXX_DOUBLE_IS_IEEE_BINARY_64): Likewise.\n\t* include/std/charconv (to_chars): Use these macros to\n\tconditionally hide the overloads for floating-point types.\n\t* src/c++17/floating_to_chars.cc: Use the macros to\n\tconditionally disable this file.\n\t(floating_type_traits<float>): Remove redundant static assert.\n\t(floating_type_traits<double>): Likewise.\n\t* testsuite/20_util/to_chars/double.cc: Run this test only on\n\tieee-floats effective targets.\n\t* testsuite/20_util/to_chars/float.cc: Likewise.\n\t* testsuite/20_util/to_chars/long_double.cc: Likewise.\n\t* testsuite/lib/libstdc++.exp\n\t(check_effective_target_ieee-floats): Define new proc for\n\tdetecting whether float and double have the IEEE binary32 and\n\tbinary64 formats.", "tree": {"sha": "02684ce11cb6b5026d2c1cd62b7b753dd5d960f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02684ce11cb6b5026d2c1cd62b7b753dd5d960f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a31d47e271d066ea85b3716f7b77f18e6b55242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a31d47e271d066ea85b3716f7b77f18e6b55242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a31d47e271d066ea85b3716f7b77f18e6b55242", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a31d47e271d066ea85b3716f7b77f18e6b55242/comments", "author": null, "committer": null, "parents": [{"sha": "e798f081925b5085de3c9d0f330eb6e255a377bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e798f081925b5085de3c9d0f330eb6e255a377bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e798f081925b5085de3c9d0f330eb6e255a377bf"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "be0961a9d9e5b137becef24d6ace6e57c1ecac45", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=6a31d47e271d066ea85b3716f7b77f18e6b55242", "patch": "@@ -688,6 +688,20 @@ namespace std\n # endif\n #endif\n \n+// Define if float has the IEEE binary32 format.\n+#if __FLT_MANT_DIG__ == 24 \\\n+  && __FLT_MIN_EXP__ == -125 \\\n+  && __FLT_MAX_EXP__ == 128\n+# define _GLIBCXX_FLOAT_IS_IEEE_BINARY32 1\n+#endif\n+\n+// Define if double has the IEEE binary64 format.\n+#if __DBL_MANT_DIG__ == 53 \\\n+  && __DBL_MIN_EXP__ == -1021 \\\n+  && __DBL_MAX_EXP__ == 1024\n+# define _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 1\n+#endif\n+\n #ifdef __has_builtin\n # ifdef __is_identifier\n // Intel and older Clang require !__is_identifier for some built-ins:"}, {"sha": "c6e80693aada3bbca052afe1074cca88258d1d93", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=6a31d47e271d066ea85b3716f7b77f18e6b55242", "patch": "@@ -702,6 +702,7 @@ namespace __detail\n \t     chars_format __fmt = chars_format::general) noexcept;\n #endif\n \n+#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n   // Floating-point std::to_chars\n \n   // Overloads for float.\n@@ -725,6 +726,7 @@ namespace __detail\n \t\t\t   chars_format __fmt) noexcept;\n   to_chars_result to_chars(char* __first, char* __last, long double __value,\n \t\t\t   chars_format __fmt, int __precision) noexcept;\n+#endif\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "6e154365aee91e06cec37e8710c6a9ab1af4fb2b", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=6a31d47e271d066ea85b3716f7b77f18e6b55242", "patch": "@@ -40,6 +40,10 @@\n #include <string_view>\n #include <type_traits>\n \n+// This implementation crucially assumes float/double have the\n+// IEEE binary32/binary64 formats.\n+#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n+\n // Determine the binary format of 'long double'.\n \n // We support the binary64, float80 (i.e. x86 80-bit extended precision),\n@@ -109,8 +113,6 @@ namespace\n   template<>\n     struct floating_type_traits<float>\n     {\n-      // We (and Ryu) assume float has the IEEE binary32 format.\n-      static_assert(__FLT_MANT_DIG__ == 24);\n       static constexpr int mantissa_bits = 23;\n       static constexpr int exponent_bits = 8;\n       static constexpr bool has_implicit_leading_bit = true;\n@@ -124,8 +126,6 @@ namespace\n   template<>\n     struct floating_type_traits<double>\n     {\n-      // We (and Ryu) assume double has the IEEE binary64 format.\n-      static_assert(__DBL_MANT_DIG__ == 53);\n       static constexpr int mantissa_bits = 52;\n       static constexpr int exponent_bits = 11;\n       static constexpr bool has_implicit_leading_bit = true;\n@@ -1565,3 +1565,5 @@ _ZSt8to_charsPcS_eSt12chars_formati(char* first, char* last, double value,\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n+\n+#endif // _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64"}, {"sha": "bb6f74424edf7d5c72345617ee51fc55b2ce36e2", "filename": "libstdc++-v3/testsuite/20_util/to_chars/double.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc?ref=6a31d47e271d066ea85b3716f7b77f18e6b55242", "patch": "@@ -32,6 +32,7 @@\n // DEALINGS IN THE SOFTWARE.\n \n // { dg-do run { target c++17 } }\n+// { dg-require-effective-target ieee-floats }\n \n #include <charconv>\n "}, {"sha": "0c8dd4f66dfda3262a9f77a91852150ddac885f9", "filename": "libstdc++-v3/testsuite/20_util/to_chars/float.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc?ref=6a31d47e271d066ea85b3716f7b77f18e6b55242", "patch": "@@ -32,6 +32,7 @@\n // DEALINGS IN THE SOFTWARE.\n \n // { dg-do run { target c++17 } }\n+// { dg-require-effective-target ieee-floats }\n \n #include <charconv>\n "}, {"sha": "f89daa2c665b9e8addc73d0df335ca5c2af91121", "filename": "libstdc++-v3/testsuite/20_util/to_chars/long_double.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc?ref=6a31d47e271d066ea85b3716f7b77f18e6b55242", "patch": "@@ -19,6 +19,7 @@\n // hexadecimal floating-point literals.\n // { dg-do run { target c++17 } }\n // { dg-xfail-run-if \"Ryu needs __int128\" { large_long_double && { ! int128 } } }\n+// { dg-require-effective-target ieee-floats }\n \n #include <charconv>\n "}, {"sha": "6e5634ef1d251f6d493ad0e0ed6073518a18500c", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a31d47e271d066ea85b3716f7b77f18e6b55242/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=6a31d47e271d066ea85b3716f7b77f18e6b55242", "patch": "@@ -1323,6 +1323,14 @@ proc check_effective_target_futex { } {\n     }]\n }\n \n+# Return 1 if float and double have the IEEE binary32 and binary64 formats.\n+proc check_effective_target_ieee-floats { } {\n+    return [check_v3_target_prop_cached et_ieee_floats {\n+\tset cond \"_GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\"\n+\treturn [v3_check_preprocessor_condition ieee_floats $cond]\n+    }]\n+}\n+\n set additional_prunes \"\"\n \n if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\"}]}