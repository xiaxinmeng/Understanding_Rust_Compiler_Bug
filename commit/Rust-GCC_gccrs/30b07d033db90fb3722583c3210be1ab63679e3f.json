{"sha": "30b07d033db90fb3722583c3210be1ab63679e3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiMDdkMDMzZGI5MGZiMzcyMjU4M2MzMjEwYmUxYWI2MzY3OWUzZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-02-20T09:02:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-02-20T09:02:35Z"}, "message": "re PR c++/56373 (-Wzero-as-null-pointer-constant: does not catch issues with smart pointers)\n\n/cp\n2013-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56373\n\t* tree.c (maybe_warn_zero_as_null_pointer_constant): Add.\n\t* cvt.c (ocp_convert): Use the latter.\n\t(cp_convert_to_pointer): Likewise.\n\t* decl.c (check_default_argument): Likewise.\n\t* typeck.c (cp_build_binary_op): Likewise.\n\t* cp-tree.h (maybe_warn_zero_as_null_pointer_constant): Declare.\n\n/testsuite\n2013-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/56373\n\t* g++.dg/cpp0x/Wzero-as-null-pointer-constant-2.C: New.\n\nFrom-SVN: r196165", "tree": {"sha": "cbcd275676d34b52a33ccb3271c62f8b35e99dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbcd275676d34b52a33ccb3271c62f8b35e99dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30b07d033db90fb3722583c3210be1ab63679e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b07d033db90fb3722583c3210be1ab63679e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b07d033db90fb3722583c3210be1ab63679e3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b07d033db90fb3722583c3210be1ab63679e3f/comments", "author": null, "committer": null, "parents": [{"sha": "bbe4fb2cec6aa90490c3524d783165bd369b18b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe4fb2cec6aa90490c3524d783165bd369b18b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe4fb2cec6aa90490c3524d783165bd369b18b0"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "b7816a90339528ac19a8db7de43c3e71c3d901d6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -1,3 +1,13 @@\n+2013-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/56373\n+\t* tree.c (maybe_warn_zero_as_null_pointer_constant): Add.\n+\t* cvt.c (ocp_convert): Use the latter.\n+\t(cp_convert_to_pointer): Likewise.\n+\t* decl.c (check_default_argument): Likewise.\n+\t* typeck.c (cp_build_binary_op): Likewise.\n+\t* cp-tree.h (maybe_warn_zero_as_null_pointer_constant): Declare.\n+\n 2013-02-15  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "4a597d8b3a64c74b060e88363d7307b5bd859106", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -5834,6 +5834,7 @@ extern bool cast_valid_in_integral_constant_expression_p (tree);\n extern bool cxx_type_hash_eq\t\t\t(const_tree, const_tree);\n \n extern void cxx_print_statistics\t\t(void);\n+extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);\n \n /* in ptree.c */\n extern void cxx_print_xnode\t\t\t(FILE *, tree, int);"}, {"sha": "348e6082ceb452a7b9869db0c9b78f6b485013bd", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -203,11 +203,8 @@ cp_convert_to_pointer (tree type, tree expr, tsubst_flags_t complain)\n \n   if (null_ptr_cst_p (expr))\n     {\n-      if ((complain & tf_warning)\n-\t  && c_inhibit_evaluation_warnings == 0\n-\t  && !NULLPTR_TYPE_P (TREE_TYPE (expr)))\n-\twarning_at (loc, OPT_Wzero_as_null_pointer_constant,\n-\t\t    \"zero as null pointer constant\");\n+      if (complain & tf_warning)\n+\tmaybe_warn_zero_as_null_pointer_constant (expr, loc);\n \n       if (TYPE_PTRMEMFUNC_P (type))\n \treturn build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), expr, 0,\n@@ -783,7 +780,11 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n       return ignore_overflows (converted, e);\n     }\n   if (NULLPTR_TYPE_P (type) && e && null_ptr_cst_p (e))\n-    return nullptr_node;\n+    {\n+      if (complain & tf_warning)\n+\tmaybe_warn_zero_as_null_pointer_constant (e, loc);\n+      return nullptr_node;\n+    }\n   if (POINTER_TYPE_P (type) || TYPE_PTRMEM_P (type))\n     return fold_if_not_in_template (cp_convert_to_pointer (type, e, complain));\n   if (code == VECTOR_TYPE)"}, {"sha": "661969f441cc05d748e84c004deb4b24937f568c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -10861,15 +10861,10 @@ check_default_argument (tree decl, tree arg)\n   --cp_unevaluated_operand;\n \n   if (warn_zero_as_null_pointer_constant\n-      && c_inhibit_evaluation_warnings == 0\n       && TYPE_PTR_OR_PTRMEM_P (decl_type)\n       && null_ptr_cst_p (arg)\n-      && !NULLPTR_TYPE_P (TREE_TYPE (arg)))\n-    {\n-      warning (OPT_Wzero_as_null_pointer_constant,\n-\t       \"zero as null pointer constant\");\n-      return nullptr_node;\n-    }\n+      && maybe_warn_zero_as_null_pointer_constant (arg, input_location))\n+    return nullptr_node;\n \n   /* [dcl.fct.default]\n "}, {"sha": "41c8759096c3ecd03b025421e6994ac7c7322327", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -3939,6 +3939,21 @@ cp_tree_operand_length (const_tree t)\n       return TREE_OPERAND_LENGTH (t);\n     }\n }\n+\n+/* Implement -Wzero_as_null_pointer_constant.  Return true if the\n+   conditions for the warning hold, false otherwise.  */\n+bool\n+maybe_warn_zero_as_null_pointer_constant (tree expr, location_t loc)\n+{\n+  if (c_inhibit_evaluation_warnings == 0\n+      && !NULLPTR_TYPE_P (TREE_TYPE (expr)))\n+    {\n+      warning_at (loc, OPT_Wzero_as_null_pointer_constant,\n+\t\t  \"zero as null pointer constant\");\n+      return true;\n+    }\n+  return false;\n+}\n \f\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n /* Complain that some language-specific thing hanging off a tree"}, {"sha": "58295d73d15f9ea9e348672474534d0d8dd05ef8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -4293,12 +4293,9 @@ cp_build_binary_op (location_t location,\n \t\t\t\t       delta0,\n \t\t\t\t       integer_one_node,\n \t\t\t\t       complain);\n-\t      \n-\t      if ((complain & tf_warning)\n-\t\t  && c_inhibit_evaluation_warnings == 0\n-\t\t  && !NULLPTR_TYPE_P (TREE_TYPE (op1)))\n-\t\twarning (OPT_Wzero_as_null_pointer_constant,\n-\t\t\t \"zero as null pointer constant\");\n+\n+\t      if (complain & tf_warning)\n+\t\tmaybe_warn_zero_as_null_pointer_constant (op1, input_location);\n \n \t      e2 = cp_build_binary_op (location,\n \t\t\t\t       EQ_EXPR, e2, integer_zero_node,"}, {"sha": "0135609ad3b2c14cfbbc3f2e1bd29ff42175c7bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -1,3 +1,8 @@\n+2013-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/56373\n+\t* g++.dg/cpp0x/Wzero-as-null-pointer-constant-2.C: New.\n+\n 2013-02-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56384"}, {"sha": "eea2c2fcf319ea090ba82a449ef61f44bc92c47b", "filename": "gcc/testsuite/g++.dg/cpp0x/Wzero-as-null-pointer-constant-2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b07d033db90fb3722583c3210be1ab63679e3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWzero-as-null-pointer-constant-2.C?ref=30b07d033db90fb3722583c3210be1ab63679e3f", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/56373\n+// { dg-options \"-std=c++11 -Wzero-as-null-pointer-constant\" }\n+\n+struct shared_ptr\n+{\n+  shared_ptr(decltype(nullptr));\n+};\n+\n+void f()\n+{\n+  shared_ptr a = 0;  // { dg-warning \"zero as null pointer\" }\n+  shared_ptr b(0);   // { dg-warning \"zero as null pointer\" }\n+  shared_ptr c{0};   // { dg-warning \"zero as null pointer\" }\n+}"}]}