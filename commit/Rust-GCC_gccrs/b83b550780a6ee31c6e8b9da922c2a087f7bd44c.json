{"sha": "b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzYjU1MDc4MGE2ZWUzMWM2ZThiOWRhOTIyYzJhMDg3ZjdiZDQ0Yw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2013-12-13T11:36:22Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2013-12-13T11:36:22Z"}, "message": "re PR tree-optimization/58296 (ivopts is unable to handle some loops altered by the loop header copying pass)\n\n\n\tPR tree-optimization/58296\n\tPR tree-optimization/41488\n\t* tree-scalar-evolution.c: Include necessary header files.\n\t(simplify_peeled_chrec): New function.\n\t(analyze_evolution_in_loop): New static variable.\n\tCall simplify_peeled_chrec.\n\t* tree-ssa-loop-ivopts.c (mark_bivs): Don't mark peeled IV as biv.\n\t(add_old_iv_candidates): Don't add candidate for peeled IV.\n\t* tree-affine.h (aff_combination_zero_p): New function.\n\n\tPR tree-optimization/58296\n\tPR tree-optimization/41488\n\t* gcc.dg/tree-ssa/scev-7.c: New test.\n\t* gcc.dg/pr41488.c: New test.\n\t* g++.dg/pr59445.C: New test.\n\nFrom-SVN: r205959", "tree": {"sha": "8a279853c02062aa9b7a75a2527c0964cd7b3e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a279853c02062aa9b7a75a2527c0964cd7b3e93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/comments", "author": null, "committer": null, "parents": [{"sha": "a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a005b5befd6bb3166b1d7c5269a2c791e4a4ee7c"}], "stats": {"total": 252, "additions": 245, "deletions": 7}, "files": [{"sha": "db76797b84975c73d60c4d3e251816d2503711f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -1,3 +1,15 @@\n+2013-12-13  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/58296\n+\tPR tree-optimization/41488\n+\t* tree-scalar-evolution.c: Include necessary header files.\n+\t(simplify_peeled_chrec): New function.\n+\t(analyze_evolution_in_loop): New static variable.\n+\tCall simplify_peeled_chrec.\n+\t* tree-ssa-loop-ivopts.c (mark_bivs): Don't mark peeled IV as biv.\n+\t(add_old_iv_candidates): Don't add candidate for peeled IV.\n+\t* tree-affine.h (aff_combination_zero_p): New function.\n+\n 2013-12-13  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.c (is_wakeup_func): New function.  Returns"}, {"sha": "94e703b3f2d97d195e1ead28ddc155170bdd6254", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -1,3 +1,11 @@\n+2013-12-13  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/58296\n+\tPR tree-optimization/41488\n+\t* gcc.dg/tree-ssa/scev-7.c: New test.\n+\t* gcc.dg/pr41488.c: New test.\n+\t* g++.dg/pr59445.C: New test.\n+\n 2013-12-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/59440"}, {"sha": "99d6df251953593286955ec9d8439a650b5731a7", "filename": "gcc/testsuite/g++.dg/pr59445.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59445.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59445.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59445.C?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+template <typename _Iterator> struct A;\n+template <typename _Tp> struct A<_Tp *> {\n+  typedef _Tp value_type;\n+  typedef int difference_type;\n+};\n+template <typename _Compare> struct B {};\n+template <typename _Compare> struct C {\n+  _Compare _M_comp;\n+  template <typename _Value, typename _Iterator>\n+  int operator()(_Value &p1, _Iterator p2) {\n+    return _M_comp(p1, *p2);\n+  }\n+};\n+template <typename _Compare> C<_Compare> __val_comp_iter(B<_Compare>);\n+template <typename _RandomAccessIterator, typename _Compare>\n+void __unguarded_linear_insert(_RandomAccessIterator p1, _Compare p2) {\n+  typename A<_RandomAccessIterator>::value_type a;\n+  _RandomAccessIterator b = p1;\n+  --b;\n+  while (p2(a, b)) {\n+    *p1 = 0;\n+    p1 = b;\n+    --b;\n+  }\n+}\n+template <typename _RandomAccessIterator, typename _Compare>\n+void __insertion_sort(_RandomAccessIterator, _Compare p2) {\n+  for (_RandomAccessIterator c;; ++c)\n+    __unguarded_linear_insert(c, __val_comp_iter(p2));\n+}\n+template <typename _RandomAccessIterator, typename _Distance, typename _Compare>\n+void __chunk_insertion_sort(_RandomAccessIterator, _Distance, _Compare p3) {\n+  _RandomAccessIterator d;\n+  __insertion_sort(d, p3);\n+}\n+template <typename _RandomAccessIterator, typename _Pointer, typename _Compare>\n+void __merge_sort_with_buffer(_RandomAccessIterator p1, _Pointer, _Compare p3) {\n+  __chunk_insertion_sort(p1, 0, p3);\n+}\n+template <typename _RandomAccessIterator, typename _Pointer, typename _Distance,\n+          typename _Compare>\n+void __stable_sort_adaptive(_RandomAccessIterator, _Pointer, _Distance,\n+                            _Compare p4) {\n+  _RandomAccessIterator e;\n+  __merge_sort_with_buffer(e, 0, p4);\n+}\n+template <typename _RandomAccessIterator, typename _Compare>\n+void __stable_sort(_RandomAccessIterator p1, _Compare p2) {\n+  __stable_sort_adaptive(\n+      p1, 0, typename A<_RandomAccessIterator>::difference_type(), p2);\n+}\n+template <typename _RandomAccessIterator, typename _Compare>\n+void stable_sort(_RandomAccessIterator, _RandomAccessIterator p2, _Compare) {\n+  B<_Compare> f;\n+  __stable_sort(p2, f);\n+}\n+class D {\n+public:\n+  void m_fn1();\n+};\n+class F {\n+  struct G {\n+    D MFI;\n+    int operator()(int p1, int p2) {\n+      if (p1)\n+        return 0;\n+      if (p2)\n+        return 1;\n+      MFI.m_fn1();\n+    }\n+  };\n+  void m_fn1(int &p1) const;\n+};\n+void F::m_fn1(int &p1) const {\n+  int *g, *h;\n+  stable_sort(h, g, G());\n+}\n+"}, {"sha": "c4bc42832b3676f7bcd216e229ea575811ffad81", "filename": "gcc/testsuite/gcc.dg/pr41488.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n+\n+struct struct_t\n+{\n+  int* data;\n+};\n+\n+void foo (struct struct_t* sp, int start, int end)\n+{\n+  int i;\n+\n+  for (i = 0; i+start < end; i++)\n+    sp->data[i+start] = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n+/* { dg-final { cleanup-tree-dump \"sccp\" } } */"}, {"sha": "d6ceb208258cdec32da17f6519c10c10b6a6a066", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n+\n+struct struct_t\n+{\n+  int* data;\n+};\n+\n+void foo (struct struct_t* sp, int start, int end)\n+{\n+  int i;\n+\n+  for (i = 1000; i+start > end; i--)\n+    sp->data[i+start] = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n+/* { dg-final { cleanup-tree-dump \"sccp\" } } */"}, {"sha": "731c04fcbe23aca6b718053ff50903d484b3fd5a", "filename": "gcc/tree-affine.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftree-affine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftree-affine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.h?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -80,3 +80,16 @@ bool aff_comb_cannot_overlap_p (aff_tree *, double_int, double_int);\n \n /* Debugging functions.  */\n void debug_aff (aff_tree *);\n+\n+/* Return true if AFF is actually ZERO.  */\n+static inline bool\n+aff_combination_zero_p (aff_tree *aff)\n+{\n+  if (!aff)\n+    return true;\n+\n+  if (aff->n == 0 && aff->offset.is_zero ())\n+    return true;\n+\n+  return false;\n+}"}, {"sha": "27d8158e31050db85e324a2e9cec517737023f0b", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -280,6 +280,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n+#include \"pointer-set.h\"\n+#include \"tree-affine.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"dumpfile.h\"\n #include \"params.h\"\n@@ -1380,6 +1382,64 @@ follow_ssa_edge (struct loop *loop, gimple def, gimple halting_phi,\n }\n \n \f\n+/* Simplify PEELED_CHREC represented by (init_cond, arg) in LOOP.\n+   Handle below case and return the corresponding POLYNOMIAL_CHREC:\n+\n+   # i_17 = PHI <i_13(5), 0(3)>\n+   # _20 = PHI <_5(5), start_4(D)(3)>\n+   ...\n+   i_13 = i_17 + 1;\n+   _5 = start_4(D) + i_13;\n+\n+   Though variable _20 appears as a PEELED_CHREC in the form of\n+   (start_4, _5)_LOOP, it's a POLYNOMIAL_CHREC like {start_4, 1}_LOOP.\n+\n+   See PR41488.  */\n+\n+static tree\n+simplify_peeled_chrec (struct loop *loop, tree arg, tree init_cond)\n+{\n+  aff_tree aff1, aff2;\n+  tree ev, left, right, type, step_val;\n+  pointer_map_t *peeled_chrec_map = NULL;\n+\n+  ev = instantiate_parameters (loop, analyze_scalar_evolution (loop, arg));\n+  if (ev == NULL_TREE || TREE_CODE (ev) != POLYNOMIAL_CHREC)\n+    return chrec_dont_know;\n+\n+  left = CHREC_LEFT (ev);\n+  right = CHREC_RIGHT (ev);\n+  type = TREE_TYPE (left);\n+  step_val = chrec_fold_plus (type, init_cond, right);\n+\n+  /* Transform (init, {left, right}_LOOP)_LOOP to {init, right}_LOOP\n+     if \"left\" equals to \"init + right\".  */\n+  if (operand_equal_p (left, step_val, 0))\n+    {\n+      if (dump_file && (dump_flags & TDF_SCEV))\n+\tfprintf (dump_file, \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC.\\n\");\n+\n+      return build_polynomial_chrec (loop->num, init_cond, right);\n+    }\n+\n+  /* Try harder to check if they are equal.  */\n+  tree_to_aff_combination_expand (left, type, &aff1, &peeled_chrec_map);\n+  tree_to_aff_combination_expand (step_val, type, &aff2, &peeled_chrec_map);\n+  free_affine_expand_cache (&peeled_chrec_map);\n+  aff_combination_scale (&aff2, double_int_minus_one);\n+  aff_combination_add (&aff1, &aff2);\n+\n+  /* Transform (init, {left, right}_LOOP)_LOOP to {init, right}_LOOP\n+     if \"left\" equals to \"init + right\".  */\n+  if (aff_combination_zero_p (&aff1))\n+    {\n+      if (dump_file && (dump_flags & TDF_SCEV))\n+\tfprintf (dump_file, \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC.\\n\");\n+\n+      return build_polynomial_chrec (loop->num, init_cond, right);\n+    }\n+  return chrec_dont_know;\n+}\n \n /* Given a LOOP_PHI_NODE, this function determines the evolution\n    function from LOOP_PHI_NODE to LOOP_PHI_NODE in the loop.  */\n@@ -1392,6 +1452,7 @@ analyze_evolution_in_loop (gimple loop_phi_node,\n   tree evolution_function = chrec_not_analyzed_yet;\n   struct loop *loop = loop_containing_stmt (loop_phi_node);\n   basic_block bb;\n+  static bool simplify_peeled_chrec_p = true;\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -1442,7 +1503,19 @@ analyze_evolution_in_loop (gimple loop_phi_node,\n \t all the other iterations it has the value of ARG.\n \t For the moment, PEELED_CHREC nodes are not built.  */\n       if (res != t_true)\n-\tev_fn = chrec_dont_know;\n+\t{\n+\t  ev_fn = chrec_dont_know;\n+\t  /* Try to recognize POLYNOMIAL_CHREC which appears in\n+\t     the form of PEELED_CHREC, but guard the process with\n+\t     a bool variable to keep the analyzer from infinite\n+\t     recurrence for real PEELED_RECs.  */\n+\t  if (simplify_peeled_chrec_p && TREE_CODE (arg) == SSA_NAME)\n+\t    {\n+\t      simplify_peeled_chrec_p = false;\n+\t      ev_fn = simplify_peeled_chrec (loop, arg, init_cond);\n+\t      simplify_peeled_chrec_p = true;\n+\t    }\n+\t}\n \n       /* When there are multiple back edges of the loop (which in fact never\n \t happens currently, but nevertheless), merge their evolutions.  */"}, {"sha": "bc2a027a89e8d94a615a8c85fcc93828f6e66bc8", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b550780a6ee31c6e8b9da922c2a087f7bd44c/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=b83b550780a6ee31c6e8b9da922c2a087f7bd44c", "patch": "@@ -1074,7 +1074,7 @@ find_bivs (struct ivopts_data *data)\n static void\n mark_bivs (struct ivopts_data *data)\n {\n-  gimple phi;\n+  gimple phi, def;\n   tree var;\n   struct iv *iv, *incr_iv;\n   struct loop *loop = data->current_loop;\n@@ -1090,6 +1090,13 @@ mark_bivs (struct ivopts_data *data)\n \tcontinue;\n \n       var = PHI_ARG_DEF_FROM_EDGE (phi, loop_latch_edge (loop));\n+      def = SSA_NAME_DEF_STMT (var);\n+      /* Don't mark iv peeled from other one as biv.  */\n+      if (def\n+\t  && gimple_code (def) == GIMPLE_PHI\n+\t  && gimple_bb (def) == loop->header)\n+\tcontinue;\n+\n       incr_iv = get_iv (data, var);\n       if (!incr_iv)\n \tcontinue;\n@@ -2526,11 +2533,19 @@ add_old_iv_candidates (struct ivopts_data *data, struct iv *iv)\n       /* Additionally record the possibility of leaving the original iv\n \t untouched.  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi, loop_latch_edge (data->current_loop));\n-      cand = add_candidate_1 (data,\n-\t\t\t      iv->base, iv->step, true, IP_ORIGINAL, NULL,\n-\t\t\t      SSA_NAME_DEF_STMT (def));\n-      cand->var_before = iv->ssa_name;\n-      cand->var_after = def;\n+      /* Don't add candidate if it's from another PHI node because\n+\t it's an affine iv appearing in the form of PEELED_CHREC.  */\n+      phi = SSA_NAME_DEF_STMT (def);\n+      if (gimple_code (phi) != GIMPLE_PHI)\n+\t{\n+\t  cand = add_candidate_1 (data,\n+\t\t\t\t  iv->base, iv->step, true, IP_ORIGINAL, NULL,\n+\t\t\t\t  SSA_NAME_DEF_STMT (def));\n+\t  cand->var_before = iv->ssa_name;\n+\t  cand->var_after = def;\n+\t}\n+      else\n+\tgcc_assert (gimple_bb (phi) == data->current_loop->header);\n     }\n }\n "}]}