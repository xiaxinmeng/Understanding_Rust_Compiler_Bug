{"sha": "829245be1bfefcd312479e94752c35c7b2cb3348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5MjQ1YmUxYmZlZmNkMzEyNDc5ZTk0NzUyYzM1YzdiMmNiMzM0OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-28T18:00:53Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-28T18:00:53Z"}, "message": "Warning fixes:\n\n        * gcc.c (EXTRA_SPECS, extra_specs): Introduce an intermediate\n        structure which has exactly the members provided by EXTRA_SPECS.\n        Xmalloc() the real `extra_specs', and initialize it from this\n        intermediate structure.\n        * alpha.h (EXTRA_SPECS): Revert change for missing initializers.\n        * mips.h  (EXTRA_SPECS): Likewise.\n        * sparc.h (EXTRA_SPECS): Likewise.\n\nFrom-SVN: r23406", "tree": {"sha": "42470feb11450cf3a835fa2970afa3051887c4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42470feb11450cf3a835fa2970afa3051887c4e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/829245be1bfefcd312479e94752c35c7b2cb3348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829245be1bfefcd312479e94752c35c7b2cb3348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829245be1bfefcd312479e94752c35c7b2cb3348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829245be1bfefcd312479e94752c35c7b2cb3348/comments", "author": null, "committer": null, "parents": [{"sha": "b5bd3b3c46692ddb40a623b2728c65164f59fed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bd3b3c46692ddb40a623b2728c65164f59fed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bd3b3c46692ddb40a623b2728c65164f59fed3"}], "stats": {"total": 116, "additions": 73, "deletions": 43}, "files": [{"sha": "5cf072880b6d3b970440fdd094b0ad440dbb471c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=829245be1bfefcd312479e94752c35c7b2cb3348", "patch": "@@ -1,3 +1,16 @@\n+Wed Oct 28 20:52:47 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c (EXTRA_SPECS, extra_specs): Introduce an intermediate\n+ \tstructure which has exactly the members provided by EXTRA_SPECS.\n+  \tXmalloc() the real `extra_specs', and initialize it from this\n+\tintermediate structure.\n+\n+\t* alpha.h (EXTRA_SPECS): Revert change for missing initializers.\n+\n+\t* mips.h  (EXTRA_SPECS): Likewise.\n+\n+\t* sparc.h (EXTRA_SPECS): Likewise.\n+\n Wed Oct 28 16:46:07 1998  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n     \n \t* function.c (purge_addressof_1): Instead of aborting when a"}, {"sha": "1105bcab762c6aefc4e1c2c506bb02e4b6add97a", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=829245be1bfefcd312479e94752c35c7b2cb3348", "patch": "@@ -308,21 +308,21 @@ extern char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #define SUBTARGET_EXTRA_SPECS\n #endif\n \n-#define EXTRA_SPECS\t\t\t\t\t\t\\\n-  { \"cpp_am_bwx\", CPP_AM_BWX_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_am_max\", CPP_AM_MAX_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_am_cix\", CPP_AM_CIX_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_im_ev4\", CPP_IM_EV4_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_im_ev5\", CPP_IM_EV5_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_im_ev6\", CPP_IM_EV6_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_cpu_ev4\", CPP_CPU_EV4_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_cpu_ev5\", CPP_CPU_EV5_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_cpu_ev56\", CPP_CPU_EV56_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_cpu_pca56\", CPP_CPU_PCA56_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_cpu_ev6\", CPP_CPU_EV6_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_cpu_default\", CPP_CPU_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n-  { \"cpp_cpu\", CPP_CPU_SPEC, 0, 0, 0, 0 },\t\t\t\\\n-  { \"cpp_subtarget\", CPP_SUBTARGET_SPEC, 0, 0, 0, 0 },\t\t\\\n+#define EXTRA_SPECS\t\t\t\t\\\n+  { \"cpp_am_bwx\", CPP_AM_BWX_SPEC },\t\t\\\n+  { \"cpp_am_max\", CPP_AM_MAX_SPEC },\t\t\\\n+  { \"cpp_am_cix\", CPP_AM_CIX_SPEC },\t\t\\\n+  { \"cpp_im_ev4\", CPP_IM_EV4_SPEC },\t\t\\\n+  { \"cpp_im_ev5\", CPP_IM_EV5_SPEC },\t\t\\\n+  { \"cpp_im_ev6\", CPP_IM_EV6_SPEC },\t\t\\\n+  { \"cpp_cpu_ev4\", CPP_CPU_EV4_SPEC },\t\t\\\n+  { \"cpp_cpu_ev5\", CPP_CPU_EV5_SPEC },\t\t\\\n+  { \"cpp_cpu_ev56\", CPP_CPU_EV56_SPEC },\t\\\n+  { \"cpp_cpu_pca56\", CPP_CPU_PCA56_SPEC },\t\\\n+  { \"cpp_cpu_ev6\", CPP_CPU_EV6_SPEC },\t\t\\\n+  { \"cpp_cpu_default\", CPP_CPU_DEFAULT_SPEC },\t\\\n+  { \"cpp_cpu\", CPP_CPU_SPEC },\t\t\t\\\n+  { \"cpp_subtarget\", CPP_SUBTARGET_SPEC },\t\\\n   SUBTARGET_EXTRA_SPECS\n \n "}, {"sha": "538838b276653e2e5f84a970bd876ae38fdc45b3", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=829245be1bfefcd312479e94752c35c7b2cb3348", "patch": "@@ -950,18 +950,18 @@ while (0)\n    Do not define this macro if it does not need to do anything.  */\n \n #define EXTRA_SPECS\t\t\t\t\t\t\t\\\n-  { \"subtarget_cc1_spec\", SUBTARGET_CC1_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"subtarget_cpp_size_spec\", SUBTARGET_CPP_SIZE_SPEC, 0, 0, 0, 0 },\t\\\n-  { \"long_max_spec\", LONG_MAX_SPEC, 0, 0, 0, 0 },\t\t\t\\\n-  { \"mips_as_asm_spec\", MIPS_AS_ASM_SPEC, 0, 0, 0, 0 },\t\t\t\\\n-  { \"gas_asm_spec\", GAS_ASM_SPEC, 0, 0, 0, 0 },\t\t\t\t\\\n-  { \"target_asm_spec\", TARGET_ASM_SPEC, 0, 0, 0, 0 },\t\t\t\\\n-  { \"subtarget_mips_as_asm_spec\", SUBTARGET_MIPS_AS_ASM_SPEC, 0, 0, 0, 0 }, \\\n-  { \"subtarget_asm_optimizing_spec\", SUBTARGET_ASM_OPTIMIZING_SPEC, 0, 0, 0, 0 }, \\\n-  { \"subtarget_asm_debugging_spec\", SUBTARGET_ASM_DEBUGGING_SPEC, 0, 0, 0, 0 }, \\\n-  { \"subtarget_asm_spec\", SUBTARGET_ASM_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"linker_endian_spec\", LINKER_ENDIAN_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"subtarget_cc1_spec\", SUBTARGET_CC1_SPEC },\t\t\t\t\\\n+  { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\t\\\n+  { \"subtarget_cpp_size_spec\", SUBTARGET_CPP_SIZE_SPEC },\t\t\\\n+  { \"long_max_spec\", LONG_MAX_SPEC },\t\t\t\t\t\\\n+  { \"mips_as_asm_spec\", MIPS_AS_ASM_SPEC },\t\t\t\t\\\n+  { \"gas_asm_spec\", GAS_ASM_SPEC },\t\t\t\t\t\\\n+  { \"target_asm_spec\", TARGET_ASM_SPEC },\t\t\t\t\\\n+  { \"subtarget_mips_as_asm_spec\", SUBTARGET_MIPS_AS_ASM_SPEC }, \t\\\n+  { \"subtarget_asm_optimizing_spec\", SUBTARGET_ASM_OPTIMIZING_SPEC },\t\\\n+  { \"subtarget_asm_debugging_spec\", SUBTARGET_ASM_DEBUGGING_SPEC },\t\\\n+  { \"subtarget_asm_spec\", SUBTARGET_ASM_SPEC },\t\t\t\t\\\n+  { \"linker_endian_spec\", LINKER_ENDIAN_SPEC },\t\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \n #ifndef SUBTARGET_EXTRA_SPECS"}, {"sha": "8bcabc5236bcf74189728947cbdc29490b8affad", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=829245be1bfefcd312479e94752c35c7b2cb3348", "patch": "@@ -316,20 +316,20 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n    Do not define this macro if it does not need to do anything.  */\n \n #define EXTRA_SPECS \\\n-  { \"cpp_cpu\",\t\tCPP_CPU_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n-  { \"cpp_arch32\",\tCPP_ARCH32_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_arch64\",\tCPP_ARCH64_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_arch_default\",\tCPP_ARCH_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n-  { \"cpp_arch\",\t\tCPP_ARCH_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_endian\",\tCPP_ENDIAN_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC, 0, 0, 0, 0 },\t\\\n-  { \"asm_cpu\",\t\tASM_CPU_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n-  { \"asm_arch32\",\tASM_ARCH32_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"asm_arch64\",\tASM_ARCH64_SPEC, 0, 0, 0, 0 },\t\t\\\n-  { \"asm_arch_default\",\tASM_ARCH_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n-  { \"asm_arch\",\t\tASM_ARCH_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu\",\t\tCPP_CPU_SPEC },\t\t\\\n+  { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC },\t\\\n+  { \"cpp_arch32\",\tCPP_ARCH32_SPEC },\t\\\n+  { \"cpp_arch64\",\tCPP_ARCH64_SPEC },\t\\\n+  { \"cpp_arch_default\",\tCPP_ARCH_DEFAULT_SPEC },\\\n+  { \"cpp_arch\",\t\tCPP_ARCH_SPEC },\t\\\n+  { \"cpp_endian\",\tCPP_ENDIAN_SPEC },\t\\\n+  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC },\t\\\n+  { \"asm_cpu\",\t\tASM_CPU_SPEC },\t\t\\\n+  { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC },\t\\\n+  { \"asm_arch32\",\tASM_ARCH32_SPEC },\t\\\n+  { \"asm_arch64\",\tASM_ARCH64_SPEC },\t\\\n+  { \"asm_arch_default\",\tASM_ARCH_DEFAULT_SPEC },\\\n+  { \"asm_arch\",\t\tASM_ARCH_SPEC },\t\\\n   SUBTARGET_EXTRA_SPECS\n \n #define SUBTARGET_EXTRA_SPECS"}, {"sha": "28322e169fc342a9b7f66db4461d53279113cc1f", "filename": "gcc/gcc.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829245be1bfefcd312479e94752c35c7b2cb3348/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=829245be1bfefcd312479e94752c35c7b2cb3348", "patch": "@@ -1179,7 +1179,16 @@ static struct spec_list static_specs[] = {\n };\n \n #ifdef EXTRA_SPECS\t\t/* additional specs needed */\n-static struct spec_list extra_specs[] = { EXTRA_SPECS };\n+/* Structure to keep track of just the first two args of a spec_list.\n+   That is all that the EXTRA_SPECS macro gives us. */\n+struct spec_list_1\n+{\n+  char *name;\n+  char *ptr;\n+};\n+\n+static struct spec_list_1 extra_specs_1[] = { EXTRA_SPECS };\n+static struct spec_list * extra_specs = (struct spec_list *)0;\n #endif\n \n /* List of dynamically allocates specs that have been defined so far.  */\n@@ -1203,9 +1212,17 @@ init_spec ()\n     fprintf (stderr, \"Using builtin specs.\\n\");\n \n #ifdef EXTRA_SPECS\n-  for (i = (sizeof (extra_specs) / sizeof (extra_specs[0])) - 1; i >= 0; i--)\n+  extra_specs = (struct spec_list *)\n+    xmalloc (sizeof(struct spec_list) *\n+\t     (sizeof(extra_specs_1)/sizeof(extra_specs_1[0])));\n+  bzero ((PTR) extra_specs, sizeof(struct spec_list) *\n+\t (sizeof(extra_specs_1)/sizeof(extra_specs_1[0])));\n+  \n+  for (i = (sizeof(extra_specs_1) / sizeof(extra_specs_1[0])) - 1; i >= 0; i--)\n     {\n       sl = &extra_specs[i];\n+      sl->name = extra_specs_1[i].name;\n+      sl->ptr = extra_specs_1[i].ptr;\n       sl->next = next;\n       sl->name_len = strlen (sl->name);\n       sl->ptr_spec = &sl->ptr;"}]}