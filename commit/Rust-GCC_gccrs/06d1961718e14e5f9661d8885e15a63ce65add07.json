{"sha": "06d1961718e14e5f9661d8885e15a63ce65add07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZkMTk2MTcxOGUxNGU1Zjk2NjFkODg4NWUxNWE2M2NlNjVhZGQwNw==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2008-05-20T23:13:13Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2008-05-20T23:13:13Z"}, "message": "mips.md (UNSPEC_SYNC_NEW_OP_12, [...]): New define_constants.\n\n2008-05-20  David Daney  <ddaney@avtrex.com>\n\n\t* config/mips/mips.md (UNSPEC_SYNC_NEW_OP_12,\n\tUNSPEC_SYNC_OLD_OP_12,\n\tUNSPEC_SYNC_EXCHANGE_12): New define_constants.\n\t(UNSPEC_SYNC_EXCHANGE, UNSPEC_MEMORY_BARRIER,\n\tUNSPEC_SET_GOT_VERSION,\n\tUNSPEC_UPDATE_GOT_VERSION): Renumber.\n\t(optab, insn): Add 'plus' and 'minus' to define_code_attr.\n\t(atomic_hiqi_op): New define_code_iterator.\n\t(sync_compare_and_swap<mode>): Call\n\tmips_expand_atomic_qihi instead of\n\tmips_expand_compare_and_swap_12.\n\t(compare_and_swap_12): Use MIPS_COMPARE_AND_SWAP_12 instead of\n\tMIPS_COMPARE_AND_SWAP_12_0.  Pass argument to\n\tMIPS_COMPARE_AND_SWAP_12.\n\t(sync_<optab><mode>, sync_old_<optab><mode>,\n\tsync_new_<optab><mode>, sync_nand<mode>, sync_old_nand<mode>,\n\tsync_new_nand<mode>): New define_expands for HI and QI mode\n\toperands.\n\t(sync_<optab>_12, sync_old_<optab>_12, sync_new_<optab>_12,\n\tsync_nand_12, sync_old_nand_12, sync_new_nand_12): New insns.\n\t(sync_lock_test_and_set<mode>): New define_expand for HI and QI\n\tmodes.\n\t(test_and_set_12): New insn.\n\t(sync_old_add<mode>, sync_new_add<mode>, sync_old_<optab><mode>,\n\tsync_new_<optab><mode>, sync_old_nand<mode>,\n\tsync_new_nand<mode>, sync_lock_test_and_set<mode>):  Add early\n\tclobber to operand 0 for SI and DI mode insns.\n\t* config/mips/mips-protos.h (mips_gen_fn_6, mips_gen_fn_5,\n\tmips_gen_fn_4): New typedefs.\n\t(mips_gen_fn_ptrs): Define new union type.\n\t(mips_expand_compare_and_swap_12): Remove declaration.\n\t(mips_expand_atomic_qihi): Declare function.\n\t* config/mips/mips.c (mips_expand_compare_and_swap_12): Rename to...\n\t(mips_expand_atomic_qihi): ... this.  Use new generator function\n\tparameter.\n\t* config/mips/mips.h (MIPS_COMPARE_AND_SWAP_12): Add OPS parameter.\n\t(MIPS_COMPARE_AND_SWAP_12_0): Delete macro.\n\t(MIPS_COMPARE_AND_SWAP_12_ZERO_OP,\n\tMIPS_COMPARE_AND_SWAP_12_NONZERO_OP,\n\tMIPS_SYNC_OP_12, MIPS_SYNC_OP_12_NOT_NOP,\n\tMIPS_SYNC_OP_12_NOT_NOT, MIPS_SYNC_OLD_OP_12,\n\tMIPS_SYNC_OLD_OP_12_NOT_NOP, MIPS_SYNC_OLD_OP_12_NOT_NOP_REG,\n\tMIPS_SYNC_OLD_OP_12_NOT_NOT, MIPS_SYNC_OLD_OP_12_NOT_NOT_REG,\n\tMIPS_SYNC_NEW_OP_12, MIPS_SYNC_NEW_OP_12_NOT_NOP,\n\tMIPS_SYNC_NEW_OP_12_NOT_NOT, MIPS_SYNC_EXCHANGE_12,\n\tMIPS_SYNC_EXCHANGE_12_ZERO_OP,\n\tMIPS_SYNC_EXCHANGE_12_NONZERO_OP): New macros.\n\nFrom-SVN: r135684", "tree": {"sha": "dcc935675df1915afcb14aa2e9eb7d61b0844bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc935675df1915afcb14aa2e9eb7d61b0844bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06d1961718e14e5f9661d8885e15a63ce65add07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d1961718e14e5f9661d8885e15a63ce65add07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d1961718e14e5f9661d8885e15a63ce65add07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d1961718e14e5f9661d8885e15a63ce65add07/comments", "author": null, "committer": null, "parents": [{"sha": "a35f6a358ea2e2638e663b038aaaf42b981008cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35f6a358ea2e2638e663b038aaaf42b981008cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35f6a358ea2e2638e663b038aaaf42b981008cb"}], "stats": {"total": 553, "additions": 500, "deletions": 53}, "files": [{"sha": "f354031add9a59641775cc3aa7a83fe5d9abbddf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06d1961718e14e5f9661d8885e15a63ce65add07", "patch": "@@ -1,3 +1,53 @@\n+2008-05-20  David Daney  <ddaney@avtrex.com>\n+\n+\t* config/mips/mips.md (UNSPEC_SYNC_NEW_OP_12,\n+\tUNSPEC_SYNC_OLD_OP_12,\n+\tUNSPEC_SYNC_EXCHANGE_12): New define_constants.\n+\t(UNSPEC_SYNC_EXCHANGE, UNSPEC_MEMORY_BARRIER,\n+\tUNSPEC_SET_GOT_VERSION,\n+\tUNSPEC_UPDATE_GOT_VERSION): Renumber.\n+\t(optab, insn): Add 'plus' and 'minus' to define_code_attr.\n+\t(atomic_hiqi_op): New define_code_iterator.\n+\t(sync_compare_and_swap<mode>): Call\n+\tmips_expand_atomic_qihi instead of\n+\tmips_expand_compare_and_swap_12.\n+\t(compare_and_swap_12): Use MIPS_COMPARE_AND_SWAP_12 instead of\n+\tMIPS_COMPARE_AND_SWAP_12_0.  Pass argument to\n+\tMIPS_COMPARE_AND_SWAP_12.\n+\t(sync_<optab><mode>, sync_old_<optab><mode>,\n+\tsync_new_<optab><mode>, sync_nand<mode>, sync_old_nand<mode>,\n+\tsync_new_nand<mode>): New define_expands for HI and QI mode\n+\toperands.\n+\t(sync_<optab>_12, sync_old_<optab>_12, sync_new_<optab>_12,\n+\tsync_nand_12, sync_old_nand_12, sync_new_nand_12): New insns.\n+\t(sync_lock_test_and_set<mode>): New define_expand for HI and QI\n+\tmodes.\n+\t(test_and_set_12): New insn.\n+\t(sync_old_add<mode>, sync_new_add<mode>, sync_old_<optab><mode>,\n+\tsync_new_<optab><mode>, sync_old_nand<mode>,\n+\tsync_new_nand<mode>, sync_lock_test_and_set<mode>):  Add early\n+\tclobber to operand 0 for SI and DI mode insns.\n+\t* config/mips/mips-protos.h (mips_gen_fn_6, mips_gen_fn_5,\n+\tmips_gen_fn_4): New typedefs.\n+\t(mips_gen_fn_ptrs): Define new union type.\n+\t(mips_expand_compare_and_swap_12): Remove declaration.\n+\t(mips_expand_atomic_qihi): Declare function.\n+\t* config/mips/mips.c (mips_expand_compare_and_swap_12): Rename to...\n+\t(mips_expand_atomic_qihi): ... this.  Use new generator function\n+\tparameter.\n+\t* config/mips/mips.h (MIPS_COMPARE_AND_SWAP_12): Add OPS parameter.\n+\t(MIPS_COMPARE_AND_SWAP_12_0): Delete macro.\n+\t(MIPS_COMPARE_AND_SWAP_12_ZERO_OP,\n+\tMIPS_COMPARE_AND_SWAP_12_NONZERO_OP,\n+\tMIPS_SYNC_OP_12, MIPS_SYNC_OP_12_NOT_NOP,\n+\tMIPS_SYNC_OP_12_NOT_NOT, MIPS_SYNC_OLD_OP_12,\n+\tMIPS_SYNC_OLD_OP_12_NOT_NOP, MIPS_SYNC_OLD_OP_12_NOT_NOP_REG,\n+\tMIPS_SYNC_OLD_OP_12_NOT_NOT, MIPS_SYNC_OLD_OP_12_NOT_NOT_REG,\n+\tMIPS_SYNC_NEW_OP_12, MIPS_SYNC_NEW_OP_12_NOT_NOP,\n+\tMIPS_SYNC_NEW_OP_12_NOT_NOT, MIPS_SYNC_EXCHANGE_12,\n+\tMIPS_SYNC_EXCHANGE_12_ZERO_OP,\n+\tMIPS_SYNC_EXCHANGE_12_NONZERO_OP): New macros.\n+\n 2008-05-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_expand_vector_init_one_nonzero): Add"}, {"sha": "db65aab93c91d5be8116f44fe043a9989f5fdbb9", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=06d1961718e14e5f9661d8885e15a63ce65add07", "patch": "@@ -292,6 +292,14 @@ extern bool mips_use_ins_ext_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern const char *mips16e_output_save_restore (rtx, HOST_WIDE_INT);\n extern bool mips16e_save_restore_pattern_p (rtx, HOST_WIDE_INT,\n \t\t\t\t\t    struct mips16e_save_restore_info *);\n-extern void mips_expand_compare_and_swap_12 (rtx, rtx, rtx, rtx);\n+union mips_gen_fn_ptrs\n+{\n+  rtx (*fn_6) (rtx, rtx, rtx, rtx, rtx, rtx);\n+  rtx (*fn_5) (rtx, rtx, rtx, rtx, rtx);\n+  rtx (*fn_4) (rtx, rtx, rtx, rtx);\n+};\n+\n+extern void mips_expand_atomic_qihi (union mips_gen_fn_ptrs,\n+\t\t\t\t     rtx, rtx, rtx, rtx);\n \n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "6cb0d293ddab2956d3e077795be597d96caa1b4d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=06d1961718e14e5f9661d8885e15a63ce65add07", "patch": "@@ -5873,14 +5873,29 @@ mips_expand_synci_loop (rtx begin, rtx end)\n   emit_jump_insn (gen_condjump (cmp_result, label));\n }\n \f\n-/* Expand a QI or HI mode compare_and_swap.  The operands are the same\n-   as for the generator function.  */\n+/* Expand a QI or HI mode atomic memory operation.\n+\n+   GENERATOR contains a pointer to the gen_* function that generates\n+   the SI mode underlying atomic operation using masks that we\n+   calculate.\n+\n+   RESULT is the return register for the operation.  Its value is NULL\n+   if unused.\n+\n+   MEM is the location of the atomic access.\n+\n+   OLDVAL is the first operand for the operation.\n+\n+   NEWVAL is the optional second operand for the operation.  Its value\n+   is NULL if unused.  */\n \n void\n-mips_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n+mips_expand_atomic_qihi (union mips_gen_fn_ptrs generator,\n+                         rtx result, rtx mem, rtx oldval, rtx newval)\n {\n   rtx orig_addr, memsi_addr, memsi, shift, shiftsi, unshifted_mask;\n-  rtx unshifted_mask_reg, mask, inverted_mask, res;\n+  rtx unshifted_mask_reg, mask, inverted_mask, si_op;\n+  rtx res = NULL;\n   enum machine_mode mode;\n \n   mode = GET_MODE (mem);\n@@ -5927,22 +5942,32 @@ mips_expand_compare_and_swap_12 (rtx result, rtx mem, rtx oldval, rtx newval)\n     }\n \n   /* Do the same for the new value.  */\n-  if (newval != const0_rtx)\n+  if (newval && newval != const0_rtx)\n     {\n       newval = convert_modes (SImode, mode, newval, true);\n       newval = force_reg (SImode, newval);\n       newval = mips_force_binary (SImode, ASHIFT, newval, shiftsi);\n     }\n \n   /* Do the SImode atomic access.  */\n-  res = gen_reg_rtx (SImode);\n-  emit_insn (gen_compare_and_swap_12 (res, memsi, mask, inverted_mask,\n-\t\t\t\t      oldval, newval));\n-\n-  /* Shift and convert the result.  */\n-  mips_emit_binary (AND, res, res, mask);\n-  mips_emit_binary (LSHIFTRT, res, res, shiftsi);\n-  mips_emit_move (result, gen_lowpart (GET_MODE (result), res));\n+  if (result)\n+    res = gen_reg_rtx (SImode);\n+  if (newval)\n+    si_op = generator.fn_6 (res, memsi, mask, inverted_mask, oldval, newval);\n+  else if (result)\n+    si_op = generator.fn_5 (res, memsi, mask, inverted_mask, oldval);\n+  else\n+    si_op = generator.fn_4 (memsi, mask, inverted_mask, oldval);\n+\n+  emit_insn (si_op);\n+\n+  if (result)\n+    {\n+      /* Shift and convert the result.  */\n+      mips_emit_binary (AND, res, res, mask);\n+      mips_emit_binary (LSHIFTRT, res, res, shiftsi);\n+      mips_emit_move (result, gen_lowpart (GET_MODE (result), res));\n+    }\n }\n \n /* Return true if it is possible to use left/right accesses for a"}, {"sha": "765552778b5d4b2586d792eb2568d2bd5799bbeb", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 127, "deletions": 18, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=06d1961718e14e5f9661d8885e15a63ce65add07", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n@@ -2908,41 +2908,32 @@ while (0)\n /* Return an asm string that atomically:\n \n      - Given that %2 contains a bit mask and %3 the inverted mask and\n-       that %4 and %5 have already been ANDed with $2.\n+       that %4 and %5 have already been ANDed with %2.\n \n      - Compares the bits in memory reference %1 selected by mask %2 to\n        register %4 and, if they are equal, changes the selected bits\n        in memory to %5.\n \n      - Sets register %0 to the old value of memory reference %1.\n- */\n-#define MIPS_COMPARE_AND_SWAP_12\t\t\\\n-  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n-  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n-  \"\\tand\\t%@,%0,%2\\n\"\t\t\t\t\\\n-  \"\\tbne\\t%@,%z4,2f\\n\"\t\t\t\t\\\n-  \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n-  \"\\tor\\t%@,%@,%5\\n\"\t\t\t\t\\\n-  \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n-  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n-  \"\\tnop\\n\"\t\t\t\t\t\\\n-  \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n-  \"2:\\n\"\n \n-/* Like MIPS_COMPARE_AND_SWAP_12, except %5 is a constant zero,\n-   so the OR can be omitted.  */\n-#define MIPS_COMPARE_AND_SWAP_12_0\t\t\\\n+    OPS are the instructions needed to OR %5 with %@.  */\n+#define MIPS_COMPARE_AND_SWAP_12(OPS)\t\t\\\n   \"%(%<%[%|sync\\n\"\t\t\t\t\\\n   \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n   \"\\tand\\t%@,%0,%2\\n\"\t\t\t\t\\\n   \"\\tbne\\t%@,%z4,2f\\n\"\t\t\t\t\\\n   \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n+  OPS\t\t\t\t\t\t\\\n   \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n   \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n   \"\\tnop\\n\"\t\t\t\t\t\\\n   \"\\tsync%-%]%>%)\\n\"\t\t\t\t\\\n   \"2:\\n\"\n \n+#define MIPS_COMPARE_AND_SWAP_12_ZERO_OP \"\"\n+#define MIPS_COMPARE_AND_SWAP_12_NONZERO_OP \"\\tor\\t%@,%@,%5\\n\"\n+\n+\n /* Return an asm string that atomically:\n \n      - Sets memory reference %0 to %0 INSN %1.\n@@ -2958,6 +2949,97 @@ while (0)\n   \"\\tnop\\n\"\t\t\t\t\t\\\n   \"\\tsync%-%]%>%)\"\n \n+/* Return an asm string that atomically:\n+\n+     - Given that %1 contains a bit mask and %2 the inverted mask and\n+       that %3 has already been ANDed with %1.\n+\n+     - Sets the selected bits of memory reference %0 to %0 INSN %3.\n+\n+     - Uses scratch register %4.\n+\n+    NOT_OP are the optional instructions to do a bit-wise not\n+    operation in conjunction with an AND INSN to generate a sync_nand\n+    operation.  */\n+#define MIPS_SYNC_OP_12(INSN, NOT_OP)\t\t\\\n+  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\\t%4,%0\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%4,%2\\n\"\t\t\t\t\\\n+  NOT_OP\t\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%4,%4,%z3\\n\"\t\t\t\\\n+  \"\\tand\\t%4,%4,%1\\n\"\t\t\t\t\\\n+  \"\\tor\\t%@,%@,%4\\n\"\t\t\t\t\\\n+  \"\\tsc\\t%@,%0\\n\"\t\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"\\tsync%-%]%>%)\"\n+\n+#define MIPS_SYNC_OP_12_NOT_NOP \"\"\n+#define MIPS_SYNC_OP_12_NOT_NOT \"\\tnor\\t%4,%4,%.\\n\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Given that %2 contains a bit mask and %3 the inverted mask and\n+       that %4 has already been ANDed with %2.\n+\n+     - Sets the selected bits of memory reference %1 to %1 INSN %4.\n+\n+     - Sets %0 to the original value of %1.\n+\n+     - Uses scratch register %5.\n+\n+    NOT_OP are the optional instructions to do a bit-wise not\n+    operation in conjunction with an AND INSN to generate a sync_nand\n+    operation.\n+\n+    REG is used in conjunction with NOT_OP and is used to select the\n+    register operated on by the INSN.  */\n+#define MIPS_SYNC_OLD_OP_12(INSN, NOT_OP, REG)\t\\\n+  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n+  NOT_OP\t\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%5,\" REG \",%z4\\n\"\t\t\\\n+  \"\\tand\\t%5,%5,%2\\n\"\t\t\t\t\\\n+  \"\\tor\\t%@,%@,%5\\n\"\t\t\t\t\\\n+  \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"\\tsync%-%]%>%)\"\n+\n+#define MIPS_SYNC_OLD_OP_12_NOT_NOP \"\"\n+#define MIPS_SYNC_OLD_OP_12_NOT_NOP_REG \"%0\"\n+#define MIPS_SYNC_OLD_OP_12_NOT_NOT \"\\tnor\\t%5,%0,%.\\n\"\n+#define MIPS_SYNC_OLD_OP_12_NOT_NOT_REG \"%5\"\n+\n+/* Return an asm string that atomically:\n+\n+     - Given that %2 contains a bit mask and %3 the inverted mask and\n+       that %4 has already been ANDed with %2.\n+\n+     - Sets the selected bits of memory reference %1 to %1 INSN %4.\n+\n+     - Sets %0 to the new value of %1.\n+\n+    NOT_OP are the optional instructions to do a bit-wise not\n+    operation in conjunction with an AND INSN to generate a sync_nand\n+    operation.  */\n+#define MIPS_SYNC_NEW_OP_12(INSN, NOT_OP)\t\\\n+  \"%(%<%[%|sync\\n\"\t\t\t\t\\\n+  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n+  NOT_OP\t\t\t\t\t\\\n+  \"\\t\" INSN \"\\t%0,%0,%z4\\n\"\t\t\t\\\n+  \"\\tand\\t%0,%0,%2\\n\"\t\t\t\t\\\n+  \"\\tor\\t%@,%@,%0\\n\"\t\t\t\t\\\n+  \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"\\tsync%-%]%>%)\"\n+\n+#define MIPS_SYNC_NEW_OP_12_NOT_NOP \"\"\n+#define MIPS_SYNC_NEW_OP_12_NOT_NOT \"\\tnor\\t%0,%0,%.\\n\"\n+\n /* Return an asm string that atomically:\n \n      - Sets memory reference %1 to %1 INSN %2.\n@@ -3065,6 +3147,33 @@ while (0)\n   \"\\tnop\\n\"\t\t\t\t\t\\\n   \"\\tsync%-%]%>%)\"\n \n+/* Return an asm string that atomically:\n+\n+     - Given that %2 contains an inclusive mask, %3 and exclusive mask\n+       and %4 has already been ANDed with the inclusive mask.\n+\n+     - Sets bits selected by the inclusive mask of memory reference %1\n+       to %4.\n+\n+     - Sets register %0 to the old value of memory reference %1.\n+\n+    OPS are the instructions needed to OR %4 with %@.\n+\n+    Operand %2 is unused, but needed as to give the test_and_set_12\n+    insn the five operands expected by the expander.  */\n+#define MIPS_SYNC_EXCHANGE_12(OPS)              \\\n+  \"%(%<%[%|\\n\"\t\t\t\t\t\\\n+  \"1:\\tll\\t%0,%1\\n\"\t\t\t\t\\\n+  \"\\tand\\t%@,%0,%3\\n\"\t\t\t\t\\\n+  OPS\t\t\t\t\t\t\\\n+  \"\\tsc\\t%@,%1\\n\"\t\t\t\t\\\n+  \"\\tbeq\\t%@,%.,1b\\n\"\t\t\t\t\\\n+  \"\\tnop\\n\"\t\t\t\t\t\\\n+  \"\\tsync%-%]%>%)\"\n+\n+#define MIPS_SYNC_EXCHANGE_12_ZERO_OP \"\"\n+#define MIPS_SYNC_EXCHANGE_12_NONZERO_OP \"\\tor\\t%@,%@,%4\\n\"\n+\n #ifndef USED_FOR_TARGET\n extern const enum reg_class mips_regno_to_class[];\n extern bool mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];"}, {"sha": "2b789eef8b602ce068e4edec68249c8d932c3996", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 276, "deletions": 21, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06d1961718e14e5f9661d8885e15a63ce65add07/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=06d1961718e14e5f9661d8885e15a63ce65add07", "patch": "@@ -1,6 +1,6 @@\n ;;  Mips.md\t     Machine Description for MIPS based processors\n ;;  Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-;;  1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+;;  1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n ;;  Free Software Foundation, Inc.\n ;;  Contributed by   A. Lichnewsky, lich@inria.inria.fr\n ;;  Changes by       Michael Meissner, meissner@osf.org\n@@ -57,10 +57,13 @@\n    (UNSPEC_COMPARE_AND_SWAP_12\t38)\n    (UNSPEC_SYNC_OLD_OP\t\t39)\n    (UNSPEC_SYNC_NEW_OP\t\t40)\n-   (UNSPEC_SYNC_EXCHANGE\t41)\n-   (UNSPEC_MEMORY_BARRIER\t42)\n-   (UNSPEC_SET_GOT_VERSION\t43)\n-   (UNSPEC_UPDATE_GOT_VERSION\t44)\n+   (UNSPEC_SYNC_NEW_OP_12\t41)\n+   (UNSPEC_SYNC_OLD_OP_12\t42)\n+   (UNSPEC_SYNC_EXCHANGE\t43)\n+   (UNSPEC_SYNC_EXCHANGE_12\t44)\n+   (UNSPEC_MEMORY_BARRIER\t45)\n+   (UNSPEC_SET_GOT_VERSION\t46)\n+   (UNSPEC_UPDATE_GOT_VERSION\t47)\n    \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n@@ -639,15 +642,19 @@\n \t\t\t (lshiftrt \"lshr\")\n \t\t\t (ior \"ior\")\n \t\t\t (xor \"xor\")\n-\t\t\t (and \"and\")])\n+\t\t\t (and \"and\")\n+\t\t\t (plus \"add\")\n+\t\t\t (minus \"sub\")])\n \n ;; <insn> expands to the name of the insn that implements a particular code.\n (define_code_attr insn [(ashift \"sll\")\n \t\t\t(ashiftrt \"sra\")\n \t\t\t(lshiftrt \"srl\")\n \t\t\t(ior \"or\")\n \t\t\t(xor \"xor\")\n-\t\t\t(and \"and\")])\n+\t\t\t(and \"and\")\n+\t\t\t(plus \"addu\")\n+\t\t\t(minus \"subu\")])\n \n ;; <fcond> is the c.cond.fmt condition associated with a particular code.\n (define_code_attr fcond [(unordered \"un\")\n@@ -671,6 +678,8 @@\n ;; a particular code to operate in immediate values.\n (define_code_attr immediate_insn [(ior \"ori\") (xor \"xori\") (and \"andi\")])\n \n+;; Atomic HI and QI operations\n+(define_code_iterator atomic_hiqi_op [plus minus ior xor and])\n \f\n ;; .........................\n ;;\n@@ -4455,12 +4464,14 @@\n    (match_operand:SHORT 3 \"general_operand\")]\n   \"GENERATE_LL_SC\"\n {\n-  mips_expand_compare_and_swap_12 (operands[0], operands[1],\n-\t\t\t\t   operands[2], operands[3]);\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_6 = gen_compare_and_swap_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], operands[3]);\n   DONE;\n })\n \n-;; Helper insn for mips_expand_compare_and_swap_12.\n+;; Helper insn for mips_expand_atomic_qihi.\n (define_insn \"compare_and_swap_12\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n \t(match_operand:SI 1 \"memory_operand\" \"+R,R\"))\n@@ -4473,18 +4484,18 @@\n   \"GENERATE_LL_SC\"\n {\n   if (which_alternative == 0)\n-    return MIPS_COMPARE_AND_SWAP_12;\n+    return MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_NONZERO_OP);\n   else\n-    return MIPS_COMPARE_AND_SWAP_12_0;\n+    return MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_ZERO_OP);\n }\n   [(set_attr \"length\" \"40,36\")])\n \n (define_insn \"sync_add<mode>\"\n   [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n \t(unspec_volatile:GPR\n           [(plus:GPR (match_dup 0)\n-\t\t\t      (match_operand:GPR 1 \"arith_operand\" \"I,d\"))]\n-\t UNSPEC_SYNC_OLD_OP))]\n+\t\t     (match_operand:GPR 1 \"arith_operand\" \"I,d\"))]\n+\t  UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n {\n   if (which_alternative == 0)\n@@ -4494,6 +4505,220 @@\n }\n   [(set_attr \"length\" \"28\")])\n \n+(define_expand \"sync_<optab><mode>\"\n+  [(set (match_operand:SHORT 0 \"memory_operand\")\n+\t(unspec_volatile:SHORT\n+\t  [(atomic_hiqi_op:SHORT (match_dup 0)\n+\t\t\t\t (match_operand:SHORT 1 \"general_operand\"))]\n+\t  UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_4 = gen_sync_<optab>_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   NULL, operands[0], operands[1], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_<optab><mode>\n+(define_insn \"sync_<optab>_12\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+R\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"register_operand\" \"d\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (atomic_hiqi_op:SI (match_dup 0)\n+\t\t\t      (match_operand:SI 3 \"register_operand\" \"dJ\"))]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 4 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OP_12 (\"<insn>\", MIPS_SYNC_OP_12_NOT_NOP);\t\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n+(define_expand \"sync_old_<optab><mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (match_operand:SHORT 1 \"memory_operand\"))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(atomic_hiqi_op:SHORT\n+\t\t\t\t    (match_dup 1)\n+\t\t\t\t    (match_operand:SHORT 2 \"general_operand\"))]\n+\t    UNSPEC_SYNC_OLD_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_old_<optab>_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_old_<optab><mode>\n+(define_insn \"sync_old_<optab>_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (atomic_hiqi_op:SI (match_dup 0)\n+\t\t\t      (match_operand:SI 4 \"register_operand\" \"dJ\"))]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 5 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OLD_OP_12 (\"<insn>\", MIPS_SYNC_OLD_OP_12_NOT_NOP,\n+\t\t\t\tMIPS_SYNC_OLD_OP_12_NOT_NOP_REG);\t\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n+(define_expand \"sync_new_<optab><mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (unspec_volatile:SHORT [(atomic_hiqi_op:SHORT\n+\t\t\t\t    (match_operand:SHORT 1 \"memory_operand\")\n+\t\t\t\t    (match_operand:SHORT 2 \"general_operand\"))]\n+\t    UNSPEC_SYNC_NEW_OP))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(match_dup 1) (match_dup 2)]\n+\t    UNSPEC_SYNC_NEW_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_new_<optab>_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_new_<optab><mode>\n+(define_insn \"sync_new_<optab>_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"memory_operand\" \"+R\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (atomic_hiqi_op:SI (match_dup 0)\n+\t\t\t      (match_operand:SI 4 \"register_operand\" \"dJ\"))]\n+\t  UNSPEC_SYNC_NEW_OP_12))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)\n+\t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_NEW_OP_12 (\"<insn>\", MIPS_SYNC_NEW_OP_12_NOT_NOP);\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n+(define_expand \"sync_nand<mode>\"\n+  [(set (match_operand:SHORT 0 \"memory_operand\")\n+\t(unspec_volatile:SHORT\n+\t  [(match_dup 0)\n+\t   (match_operand:SHORT 1 \"general_operand\")]\n+\t  UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_4 = gen_sync_nand_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   NULL, operands[0], operands[1], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_nand<mode>\n+(define_insn \"sync_nand_12\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+R\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"register_operand\" \"d\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_dup 0)\n+\t   (match_operand:SI 3 \"register_operand\" \"dJ\")]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 4 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OP_12 (\"and\", MIPS_SYNC_OP_12_NOT_NOT);\t\n+}\n+  [(set_attr \"length\" \"44\")])\n+\n+(define_expand \"sync_old_nand<mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (match_operand:SHORT 1 \"memory_operand\"))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(match_dup 1)\n+\t\t\t\t  (match_operand:SHORT 2 \"general_operand\")]\n+\t    UNSPEC_SYNC_OLD_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_old_nand_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_old_nand<mode>\n+(define_insn \"sync_old_nand_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (match_operand:SI 4 \"register_operand\" \"dJ\")]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 5 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OLD_OP_12 (\"and\", MIPS_SYNC_OLD_OP_12_NOT_NOT,\n+\t\t\t\tMIPS_SYNC_OLD_OP_12_NOT_NOT_REG);\t\n+}\n+  [(set_attr \"length\" \"44\")])\n+\n+(define_expand \"sync_new_nand<mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (unspec_volatile:SHORT [(match_operand:SHORT 1 \"memory_operand\")\n+\t\t\t\t  (match_operand:SHORT 2 \"general_operand\")]\n+\t    UNSPEC_SYNC_NEW_OP))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(match_dup 1) (match_dup 2)]\n+\t    UNSPEC_SYNC_NEW_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_new_nand_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_new_nand<mode>\n+(define_insn \"sync_new_nand_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"memory_operand\" \"+R\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (match_operand:SI 4 \"register_operand\" \"dJ\")]\n+\t  UNSPEC_SYNC_NEW_OP_12))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)\n+\t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_NEW_OP_12 (\"and\", MIPS_SYNC_NEW_OP_12_NOT_NOT);\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n (define_insn \"sync_sub<mode>\"\n   [(set (match_operand:GPR 0 \"memory_operand\" \"+R\")\n \t(unspec_volatile:GPR\n@@ -4507,7 +4732,7 @@\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"sync_old_add<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,&d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n@@ -4538,7 +4763,7 @@\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"sync_new_add<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,&d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n         (plus:GPR (match_operand:GPR 1 \"memory_operand\" \"+R,R\")\n \t\t  (match_operand:GPR 2 \"arith_operand\" \"I,d\")))\n    (set (match_dup 1)\n@@ -4584,7 +4809,7 @@\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"sync_old_<optab><mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,&d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n@@ -4601,7 +4826,7 @@\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"sync_new_<optab><mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,&d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n@@ -4631,7 +4856,7 @@\n   [(set_attr \"length\" \"32\")])\n \n (define_insn \"sync_old_nand<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,&d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n    (set (match_dup 1)\n         (unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n@@ -4646,7 +4871,7 @@\n   [(set_attr \"length\" \"32\")])\n \n (define_insn \"sync_new_nand<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,&d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n@@ -4661,7 +4886,7 @@\n   [(set_attr \"length\" \"32\")])\n \n (define_insn \"sync_lock_test_and_set<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,&d\")\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR [(match_operand:GPR 2 \"arith_operand\" \"I,d\")]\n@@ -4674,6 +4899,36 @@\n     return MIPS_SYNC_EXCHANGE (\"<d>\", \"move\");\n }\n   [(set_attr \"length\" \"24\")])\n+\n+(define_expand \"sync_lock_test_and_set<mode>\"\n+  [(match_operand:SHORT 0 \"register_operand\")\n+   (match_operand:SHORT 1 \"memory_operand\")\n+   (match_operand:SHORT 2 \"general_operand\")]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_test_and_set_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+(define_insn \"test_and_set_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 3 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 4 \"arith_operand\" \"d,J\")]\n+\t  UNSPEC_SYNC_EXCHANGE_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_NONZERO_OP);\n+  else\n+    return MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_ZERO_OP);\n+}\n+  [(set_attr \"length\" \"28,24\")])\n \f\n ;; Block moves, see mips.c for more details.\n ;; Argument 0 is the destination"}]}