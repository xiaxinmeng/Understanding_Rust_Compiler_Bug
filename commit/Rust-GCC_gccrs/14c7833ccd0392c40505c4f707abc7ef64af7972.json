{"sha": "14c7833ccd0392c40505c4f707abc7ef64af7972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRjNzgzM2NjZDAzOTJjNDA1MDVjNGY3MDdhYmM3ZWY2NGFmNzk3Mg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2006-05-16T14:27:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-05-16T14:27:18Z"}, "message": "re PR target/26885 (-m64 -m32 no longer creates 32-bit object)\n\ngcc/\n\n2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR driver/26885\n\t* Makefile.in (GCC_OBJS): New.\n\t(OBJS-common): Add opts-common.o.\n\t(xgcc$(exeext)): Replace gcc.o with $(GCC_OBJS).\n\t(cpp$(exeext)): Likewise.\n\t(gcc.o): Also depend on opts.h.\n\t(opts-common.o): New.\n\n\t* common.opt (gcoff): Add Negative(gdwarf-2).\n\t(gdwarf-2): Add Negative(gstabs).\n\t(gstabs): Add Negative(gstabs+).\n\t(gstabs+): Add Negative(gvms).\n\t(gvms): Add Negative(gxcoff).\n\t(gxcoff): Add Negative(gxcoff+).\n\t(gxcoff+): Add Negative(gcoff).\n\t* config/i386/i386.opt (m32): Add Negative(m64).\n\t(m64): Add Negative(m32).\n\n\t* doc/options.texi: Document the Negative option.\n\n\t* gcc.c: Include \"opts.h\".\n\t(main): Call prune_options after expandargv.\n\n\t* optc-gen.awk: Generate common declarations for all flag\n\tvariables in options.c. Output the neg_index field.\n\n\t* opts.c (find_opt): Moved to ...\n\t* opts-common.c: Here. New file.\n\n\t* opts.h (cl_option): Add a neg_index field.\n\t(find_opt): New.\n\t(prune_options): Likewise.\n\ngcc/cp/\n\n2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR driver/26885\n\t* Make-lang.in (GXX_OBJS): Replace gcc.o with $(GCC_OBJS).\n\ngcc/fortran/\n\n2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR driver/26885\n\t* Make-lang.in (GFORTRAN_D_OBJS): Replace gcc.o with\n\t$(GCC_OBJS).\n\ngcc/java/\n\n2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR driver/26885\n\t* Make-lang.in ($(GCJ)$(exeext)): Replace gcc.o with\n\t$(GCC_OBJS).\n\ngcc/treelang/\n\n2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR driver/26885\n\t* Make-lang.in (gtreelang$(exeext)): Replace gcc.o with\n\t$(GCC_OBJS).\n\nFrom-SVN: r113824", "tree": {"sha": "f010ca26f2ca6b7e3f6a1baeeac28d996a541357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f010ca26f2ca6b7e3f6a1baeeac28d996a541357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14c7833ccd0392c40505c4f707abc7ef64af7972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c7833ccd0392c40505c4f707abc7ef64af7972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c7833ccd0392c40505c4f707abc7ef64af7972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c7833ccd0392c40505c4f707abc7ef64af7972/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b570947c8ad996f00aaa621a9e3dee997baa2e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b570947c8ad996f00aaa621a9e3dee997baa2e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b570947c8ad996f00aaa621a9e3dee997baa2e2e"}], "stats": {"total": 497, "additions": 377, "deletions": 120}, "files": [{"sha": "e5a58791f5ed4c80c90bd895f4b24ea1280abb94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -1,3 +1,38 @@\n+2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/26885\n+\t* Makefile.in (GCC_OBJS): New.\n+\t(OBJS-common): Add opts-common.o.\n+\t(xgcc$(exeext)): Replace gcc.o with $(GCC_OBJS).\n+\t(cpp$(exeext)): Likewise.\n+\t(gcc.o): Also depend on opts.h.\n+\t(opts-common.o): New.\n+\n+\t* common.opt (gcoff): Add Negative(gdwarf-2).\n+\t(gdwarf-2): Add Negative(gstabs).\n+\t(gstabs): Add Negative(gstabs+).\n+\t(gstabs+): Add Negative(gvms).\n+\t(gvms): Add Negative(gxcoff).\n+\t(gxcoff): Add Negative(gxcoff+).\n+\t(gxcoff+): Add Negative(gcoff).\n+\t* config/i386/i386.opt (m32): Add Negative(m64).\n+\t(m64): Add Negative(m32).\n+\n+\t* doc/options.texi: Document the Negative option.\n+\n+\t* gcc.c: Include \"opts.h\".\n+\t(main): Call prune_options after expandargv.\n+\n+\t* optc-gen.awk: Generate common declarations for all flag\n+\tvariables in options.c. Output the neg_index field.\n+\n+\t* opts.c (find_opt): Moved to ...\n+\t* opts-common.c: Here. New file.\n+\n+\t* opts.h (cl_option): Add a neg_index field.\n+\t(find_opt): New.\n+\t(prune_options): Likewise.\n+\n 2006-05-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/27573"}, {"sha": "7b08929227cd6d937f56bd957ffd0d8c308a3f88", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -947,6 +947,9 @@ C_TARGET_OBJS=@c_target_objs@\n # Target specific, C++ specific object file\n CXX_TARGET_OBJS=@cxx_target_objs@\n \n+# Object files for gcc driver.\n+GCC_OBJS = gcc.o opts-common.o options.o\n+\n # Language-specific object files for C and Objective C.\n C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-convert.o c-aux-info.o c-common.o c-opts.o c-format.o c-semantics.o \\\n@@ -988,7 +991,7 @@ OBJS-common = \\\n  haifa-sched.o hooks.o ifcvt.o insn-attrtab.o insn-emit.o insn-modes.o\t   \\\n  insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o\t   \\\n  integrate.o intl.o jump.o  langhooks.o lcm.o lists.o local-alloc.o  \t   \\\n- mode-switching.o modulo-sched.o optabs.o options.o opts.o\t   \\\n+ mode-switching.o modulo-sched.o optabs.o options.o opts.o opts-common.o \\\n  params.o postreload.o postreload-gcse.o predict.o\t\t\t   \\\n  insn-preds.o insn-automata.o pointer-set.o \t\t\t   \t   \\\n  print-rtl.o print-tree.o profile.o value-prof.o var-tracking.o\t\t   \\\n@@ -1292,18 +1295,18 @@ libbackend.a: $(OBJS@onestep@)\n # We call this executable `xgcc' rather than `gcc'\n # to avoid confusion if the current directory is in the path\n # and CC is `gcc'.  It is renamed to `gcc' when it is installed.\n-xgcc$(exeext): gcc.o gccspec.o version.o intl.o prefix.o \\\n+xgcc$(exeext): $(GCC_OBJS) gccspec.o version.o intl.o prefix.o \\\n    version.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o gccspec.o intl.o \\\n-\t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) gccspec.o \\\n+\t  intl.o prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # cpp is to cpp0 as gcc is to cc1.\n # The only difference from xgcc is that it's linked with cppspec.o\n # instead of gccspec.o.\n-cpp$(exeext): gcc.o cppspec.o version.o intl.o prefix.o \\\n+cpp$(exeext): $(GCC_OBJS) cppspec.o version.o intl.o prefix.o \\\n    version.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o cppspec.o intl.o \\\n-\t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) cppspec.o \\\n+\t  intl.o prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Create links to binutils, especially for in-tree builds, to make -B.\n # use them.  We need hard links so that directories can be shuffled\n@@ -1700,7 +1703,7 @@ DRIVER_DEFINES = \\\n \n gcc.o: gcc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h multilib.h \\\n     Makefile $(lang_specs_files) specs.h prefix.h $(GCC_H) $(FLAGS_H) \\\n-    configargs.h $(OBSTACK_H)\n+    configargs.h $(OBSTACK_H) opts.h\n \t(SHLIB_LINK='$(SHLIB_LINK)' \\\n \tSHLIB_MULTILIB='$(SHLIB_MULTILIB)'; \\\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n@@ -2117,6 +2120,8 @@ opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) tree-pass.h\n+opts-common.o : opts-common.c opts.h $(CONFIG_H) $(SYSTEM_H) \\\n+   coretypes.h intl.h\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h toplev.h \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h"}, {"sha": "ab5056967b21eb4248df6fa3d9fe77184ee8dfe7", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -1088,35 +1088,35 @@ Common JoinedOrMissing\n Generate debug information in default format\n \n gcoff\n-Common JoinedOrMissing\n+Common JoinedOrMissing Negative(gdwarf-2)\n Generate debug information in COFF format\n \n gdwarf-2\n-Common JoinedOrMissing\n+Common JoinedOrMissing Negative(gstabs)\n Generate debug information in DWARF v2 format\n \n ggdb\n Common JoinedOrMissing\n Generate debug information in default extended format\n \n gstabs\n-Common JoinedOrMissing\n+Common JoinedOrMissing Negative(gstabs+)\n Generate debug information in STABS format\n \n gstabs+\n-Common JoinedOrMissing\n+Common JoinedOrMissing Negative(gvms)\n Generate debug information in extended STABS format\n \n gvms\n-Common JoinedOrMissing\n+Common JoinedOrMissing Negative(gxcoff)\n Generate debug information in VMS format\n \n gxcoff\n-Common JoinedOrMissing\n+Common JoinedOrMissing Negative(gxcoff+)\n Generate debug information in XCOFF format\n \n gxcoff+\n-Common JoinedOrMissing\n+Common JoinedOrMissing Negative(gcoff)\n Generate debug information in extended XCOFF format\n \n o"}, {"sha": "4d71492d0902346769c73e12acaf8a1334092339", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -24,7 +24,7 @@ Target RejectNegative Report Mask(128BIT_LONG_DOUBLE)\n sizeof(long double) is 16\n \n m32\n-Target RejectNegative Report InverseMask(64BIT)\n+Target RejectNegative Negative(m64) Report InverseMask(64BIT)\n Generate 32bit i386 code\n \n m386\n@@ -40,7 +40,7 @@ Target RejectNegative Undocumented\n ;; Deprecated\n \n m64\n-Target RejectNegative Report Mask(64BIT)\n+Target RejectNegative Negative(m32) Report Mask(64BIT)\n Generate 64bit x86-64 code\n \n m80387"}, {"sha": "698ae1a58dcc2604dc9d644e213ed4f9e30c9eb2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -1,3 +1,8 @@\n+2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/26885\n+\t* Make-lang.in (GXX_OBJS): Replace gcc.o with $(GCC_OBJS).\n+\n 2006-05-15  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27339"}, {"sha": "9bb1bb41a40c00e90ad9a9e487ad73c4d8716234", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -60,7 +60,7 @@ g++spec.o: $(srcdir)/cp/g++spec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) $(CON\n \t\t$(INCLUDES) $(srcdir)/cp/g++spec.c)\n \n # Create the compiler driver for g++.\n-GXX_OBJS = gcc.o g++spec.o intl.o prefix.o version.o\n+GXX_OBJS = $(GCC_OBJS) g++spec.o intl.o prefix.o version.o\n g++$(exeext): $(GXX_OBJS) $(EXTRA_GCC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t  $(GXX_OBJS) $(EXTRA_GCC_OBJS) $(LIBS)"}, {"sha": "58791c72a25f0e3a6928c486d96277aac2e814be", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -135,6 +135,13 @@ variable that is nonzero when the option is enabled.  The options\n parser will set the variable to 1 when the positive form of the\n option is used and 0 when the ``no-'' form is used.\n \n+@item\n+If the option uses the @code{Negative} property, @var{var} is the\n+the name of an option, with the leading ``-'' removed, which will be\n+turned off when this option is turned on.  This chain action will\n+propagate through the @code{Negative} property of the option to be\n+turned off.\n+\n @item\n If the option takes an argument and has the @code{UInteger} property,\n @var{var} is an integer variable that stores the value of the argument."}, {"sha": "f07af3b0a5f2c5f29331b0568b25afd2a9a22940", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -1,3 +1,9 @@\n+2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/26885\n+\t* Make-lang.in (GFORTRAN_D_OBJS): Replace gcc.o with\n+\t$(GCC_OBJS).\n+\n 2006-05-15  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25090"}, {"sha": "dc771f9e3fcc0d1414262543644235840b01a7ce", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -93,7 +93,7 @@ gfortranspec.o: $(srcdir)/fortran/gfortranspec.c $(SYSTEM_H) $(TM_H) $(GCC_H) $(\n \t\t$(INCLUDES) $(srcdir)/fortran/gfortranspec.c)\n \n # Create the compiler driver gfortran.\n-GFORTRAN_D_OBJS = gcc.o gfortranspec.o version.o prefix.o intl.o\n+GFORTRAN_D_OBJS = $(GCC_OBJS) gfortranspec.o version.o prefix.o intl.o\n gfortran$(exeext): $(GFORTRAN_D_OBJS) $(EXTRA_GCC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t  $(GFORTRAN_D_OBJS) $(EXTRA_GCC_OBJS) $(LIBS)"}, {"sha": "4c917aae1761958ad714a8c1c6a56b400c0c1d4d", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -86,6 +86,7 @@ compilation is specified by a string called a \"spec\".  */\n #include \"prefix.h\"\n #include \"gcc.h\"\n #include \"flags.h\"\n+#include \"opts.h\"\n \n /* By default there is no special suffix for target executables.  */\n /* FIXME: when autoconf is fixed, remove the host check - dj */\n@@ -6098,6 +6099,8 @@ main (int argc, char **argv)\n \n   expandargv (&argc, &argv);\n \n+  prune_options (&argc, &argv);\n+\n #ifdef GCC_DRIVER_HOST_INITIALIZATION\n   /* Perform host dependent initialization when needed.  */\n   GCC_DRIVER_HOST_INITIALIZATION;"}, {"sha": "3d2e47cc168a1280a1b264d7ec2633dd9f012078", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -1,3 +1,9 @@\n+2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/26885\n+\t* Make-lang.in ($(GCJ)$(exeext)): Replace gcc.o with\n+\t$(GCC_OBJS).\n+\n 2006-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Make-lang.in (java/decl.o): Add dependency on $(TARGET_H)."}, {"sha": "1a6d5be0cb32760ea9865b7c1e34cfa7efe12e83", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -67,10 +67,10 @@ jvspec.o: $(srcdir)/java/jvspec.c $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t\t$(INCLUDES) $(srcdir)/java/jvspec.c $(OUTPUT_OPTION))\n \n # Create the compiler driver for $(GCJ).\n-$(GCJ)$(exeext): gcc.o jvspec.o version.o \\\n+$(GCJ)$(exeext): $(GCC_OBJS) jvspec.o version.o \\\n \t   prefix.o intl.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o jvspec.o prefix.o intl.o \\\n-\t  version.o $(EXTRA_GCC_OBJS) $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) jvspec.o \\\n+\t  prefix.o intl.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Create a version of the $(GCJ) driver which calls the cross-compiler.\n $(GCJ)-cross$(exeext): $(GCJ)$(exeext)"}, {"sha": "da199171d27bbbaed64bf9d61d52b1712f71aeab", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -62,20 +62,27 @@ for (i = 1; i <= n_headers; i++)\n print \"#include \" quote \"opts.h\" quote\n print \"#include \" quote \"intl.h\" quote\n print \"\"\n+print \"int target_flags;\"\n+print \"\"\n \n for (i = 0; i < n_opts; i++) {\n \tname = var_name(flags[i]);\n \tif (name == \"\")\n \t\tcontinue;\n \n-\tif (flag_set_p(\"VarExists\", flags[i]))\n-\t\tcontinue;\n-\n-\tinit = opt_args(\"Init\", flags[i])\n-\tif (init != \"\")\n-\t\tinit = \" = \" init;\n-\telse if (name in var_seen)\n-\t\tcontinue;\n+\tif (flag_set_p(\"VarExists\", flags[i])) {\n+\t\t# Need it for the gcc driver.\n+\t\tif (name in var_seen)\n+\t\t\tcontinue;\n+\t\tinit = \"\"\n+\t}\n+\telse {\n+\t\tinit = opt_args(\"Init\", flags[i])\n+\t\tif (init != \"\")\n+\t\t\tinit = \" = \" init;\n+\t\telse if (name in var_seen)\n+\t\t\tcontinue;\n+\t}\n \n \tprint \"/* Set by -\" opts[i] \".\"\n \tprint \"   \" help[i] \"  */\"\n@@ -107,8 +114,21 @@ print \"const unsigned int cl_options_count = N_OPTS;\\n\"\n \n print \"const struct cl_option cl_options[] =\\n{\"\n \n-for (i = 0; i < n_opts; i++)\n+j = 0\n+for (i = 0; i < n_opts; i++) {\n \tback_chain[i] = \"N_OPTS\";\n+\tindices[opts[i]] = j;\n+\t# Combine the flags of identical switches.  Switches\n+\t# appear many times if they are handled by many front\n+\t# ends, for example.\n+\twhile( i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n+\t\tflags[i + 1] = flags[i] \" \" flags[i + 1];\n+\t\ti++;\n+\t\tback_chain[i] = \"N_OPTS\";\n+\t\tindices[opts[i]] = j;\n+\t}\n+\tj++;\n+}\n \n for (i = 0; i < n_opts; i++) {\n \t# Combine the flags of identical switches.  Switches\n@@ -147,8 +167,21 @@ for (i = 0; i < n_opts; i++) {\n \telse\n \t\thlp = quote help[i] quote;\n \n-\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s, %u,\\n\",\n-\t       quote, opts[i], quote, hlp, back_chain[i], len)\n+\tneg = opt_args(\"Negative\", flags[i]);\n+\tif (neg != \"\")\n+\t\tidx = indices[neg]\n+\telse {\n+\t\tif (flag_set_p(\"RejectNegative\", flags[i]))\n+\t\t\tidx = -1;\n+\t\telse {\n+\t\t\tif (opts[i] ~ \"^[Wfm]\")\n+\t\t\t\tidx = indices[opts[i]];\n+\t\t\telse\n+\t\t\t\tidx = -1;\n+\t\t}\n+\t}\n+\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s, %u, %d,\\n\",\n+\t       quote, opts[i], quote, hlp, back_chain[i], len, idx)\n \tcondition = opt_args(\"Condition\", flags[i])\n \tcl_flags = switch_flags(flags[i])\n \tif (condition != \"\")"}, {"sha": "f3f6542095fcfc230bb1c59730c999096f0df710", "filename": "gcc/opts-common.c", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -0,0 +1,233 @@\n+/* Command line option handling.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"intl.h\"\n+#include \"coretypes.h\"\n+#include \"opts.h\"\n+\n+/* Perform a binary search to find which option the command-line INPUT\n+   matches.  Returns its index in the option array, and N_OPTS\n+   (cl_options_count) on failure.\n+\n+   This routine is quite subtle.  A normal binary search is not good\n+   enough because some options can be suffixed with an argument, and\n+   multiple sub-matches can occur, e.g. input of \"-pedantic\" matching\n+   the initial substring of \"-pedantic-errors\".\n+\n+   A more complicated example is -gstabs.  It should match \"-g\" with\n+   an argument of \"stabs\".  Suppose, however, that the number and list\n+   of switches are such that the binary search tests \"-gen-decls\"\n+   before having tested \"-g\".  This doesn't match, and as \"-gen-decls\"\n+   is less than \"-gstabs\", it will become the lower bound of the\n+   binary search range, and \"-g\" will never be seen.  To resolve this\n+   issue, opts.sh makes \"-gen-decls\" point, via the back_chain member,\n+   to \"-g\" so that failed searches that end between \"-gen-decls\" and\n+   the lexicographically subsequent switch know to go back and see if\n+   \"-g\" causes a match (which it does in this example).\n+\n+   This search is done in such a way that the longest match for the\n+   front end in question wins.  If there is no match for the current\n+   front end, the longest match for a different front end is returned\n+   (or N_OPTS if none) and the caller emits an error message.  */\n+size_t\n+find_opt (const char *input, int lang_mask)\n+{\n+  size_t mn, mx, md, opt_len;\n+  size_t match_wrong_lang;\n+  int comp;\n+\n+  mn = 0;\n+  mx = cl_options_count;\n+\n+  /* Find mn such this lexicographical inequality holds:\n+     cl_options[mn] <= input < cl_options[mn + 1].  */\n+  while (mx - mn > 1)\n+    {\n+      md = (mn + mx) / 2;\n+      opt_len = cl_options[md].opt_len;\n+      comp = strncmp (input, cl_options[md].opt_text + 1, opt_len);\n+\n+      if (comp < 0)\n+\tmx = md;\n+      else\n+\tmn = md;\n+    }\n+\n+  /* This is the switch that is the best match but for a different\n+     front end, or cl_options_count if there is no match at all.  */\n+  match_wrong_lang = cl_options_count;\n+\n+  /* Backtrace the chain of possible matches, returning the longest\n+     one, if any, that fits best.  With current GCC switches, this\n+     loop executes at most twice.  */\n+  do\n+    {\n+      const struct cl_option *opt = &cl_options[mn];\n+\n+      /* Is the input either an exact match or a prefix that takes a\n+\t joined argument?  */\n+      if (!strncmp (input, opt->opt_text + 1, opt->opt_len)\n+\t  && (input[opt->opt_len] == '\\0' || (opt->flags & CL_JOINED)))\n+\t{\n+\t  /* If language is OK, return it.  */\n+\t  if (opt->flags & lang_mask)\n+\t    return mn;\n+\n+\t  /* If we haven't remembered a prior match, remember this\n+\t     one.  Any prior match is necessarily better.  */\n+\t  if (match_wrong_lang == cl_options_count)\n+\t    match_wrong_lang = mn;\n+\t}\n+\n+      /* Try the next possibility.  This is cl_options_count if there\n+\t are no more.  */\n+      mn = opt->back_chain;\n+    }\n+  while (mn != cl_options_count);\n+\n+  /* Return the best wrong match, or cl_options_count if none.  */\n+  return match_wrong_lang;\n+}\n+\n+/* Return true if NEXT_OPT_IDX cancels OPT_IDX.  Return false if the\n+   next one is the same as ORIG_NEXT_OPT_IDX.  */\n+\n+static bool\n+cancel_option (int opt_idx, int next_opt_idx, int orig_next_opt_idx)\n+{\n+  /* An option can be canceled by the same option or an option with\n+     Negative.  */\n+  if (cl_options [next_opt_idx].neg_index == opt_idx)\n+    return true;\n+\n+  if (cl_options [next_opt_idx].neg_index != orig_next_opt_idx)\n+    return cancel_option (opt_idx, cl_options [next_opt_idx].neg_index,\n+\t\t\t  orig_next_opt_idx);\n+    \n+  return false;\n+}\n+\n+/* Filter out options canceled by the ones after them.  */\n+\n+void\n+prune_options (int *argcp, char ***argvp)\n+{\n+  int argc = *argcp;\n+  int *options = xmalloc (argc * sizeof (*options));\n+  char **argv = xmalloc (argc * sizeof (char *));\n+  int i, arg_count, need_prune = 0;\n+  const struct cl_option *option;\n+  size_t opt_index;\n+\n+  /* Scan all arguments.  */\n+  for (i = 1; i < argc; i++)\n+    {\n+      int value = 1;\n+      const char *opt = (*argvp) [i];\n+\n+      opt_index = find_opt (opt + 1, -1);\n+      if (opt_index == cl_options_count\n+\t  && (opt[1] == 'W' || opt[1] == 'f' || opt[1] == 'm')\n+\t  && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n+\t{\n+\t  char *dup;\n+\n+\t  /* Drop the \"no-\" from negative switches.  */\n+\t  size_t len = strlen (opt) - 3;\n+\n+\t  dup = XNEWVEC (char, len + 1);\n+\t  dup[0] = '-';\n+\t  dup[1] = opt[1];\n+\t  memcpy (dup + 2, opt + 5, len - 2 + 1);\n+\t  opt = dup;\n+\t  value = 0;\n+\t  opt_index = find_opt (opt + 1, -1);\n+\t  free (dup);\n+\t}\n+\n+      if (opt_index == cl_options_count)\n+\t{\n+cont:\n+\t  options [i] = 0;\n+\t  continue;\n+\t}\n+\n+      option = &cl_options[opt_index];\n+      if (option->neg_index < 0)\n+\tgoto cont;\n+\n+      /* Reject negative form of switches that don't take negatives as\n+\t unrecognized.  */\n+      if (!value && (option->flags & CL_REJECT_NEGATIVE))\n+\tgoto cont;\n+\n+      options [i] = (int) opt_index;\n+      need_prune |= options [i];\n+    }\n+\n+  if (!need_prune)\n+    goto done;\n+\n+  /* Remove arguments which are negated by others after them.  */\n+  argv [0] = (*argvp) [0];\n+  arg_count = 1;\n+  for (i = 1; i < argc; i++)\n+    {\n+      int j, opt_idx;\n+\n+      opt_idx = options [i];\n+      if (opt_idx)\n+\t{\n+\t  int next_opt_idx;\n+\t  for (j = i + 1; j < argc; j++)\n+\t    {\n+\t      next_opt_idx = options [j];\n+\t      if (next_opt_idx\n+\t\t  && cancel_option (opt_idx, next_opt_idx,\n+\t\t\t\t    next_opt_idx))\n+\t\tbreak;\n+\t    }\n+\t}\n+      else\n+\tgoto keep;\n+\n+      if (j == argc)\n+\t{\n+keep:\n+\t  argv [arg_count] = (*argvp) [i];\n+\t  arg_count++;\n+\t}\n+    }\n+\n+  if (arg_count != argc)\n+    {\n+      *argcp = arg_count;\n+      *argvp = argv;\n+    }\n+  else\n+    {\n+done:\n+      free (argv);\n+    }\n+\n+  free (options);\n+}"}, {"sha": "01ec30d6ceb5681a736f8c00a201bd7d7417a3d0", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -105,7 +105,6 @@ static bool flag_peel_loops_set, flag_branch_probabilities_set;\n const char **in_fnames;\n unsigned num_in_fnames;\n \n-static size_t find_opt (const char *, int);\n static int common_handle_option (size_t scode, const char *arg, int value,\n \t\t\t\t unsigned int lang_mask);\n static void handle_param (const char *);\n@@ -124,90 +123,6 @@ static unsigned int print_switch (const char *text, unsigned int indent);\n static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg);\n \n-/* Perform a binary search to find which option the command-line INPUT\n-   matches.  Returns its index in the option array, and N_OPTS\n-   (cl_options_count) on failure.\n-\n-   This routine is quite subtle.  A normal binary search is not good\n-   enough because some options can be suffixed with an argument, and\n-   multiple sub-matches can occur, e.g. input of \"-pedantic\" matching\n-   the initial substring of \"-pedantic-errors\".\n-\n-   A more complicated example is -gstabs.  It should match \"-g\" with\n-   an argument of \"stabs\".  Suppose, however, that the number and list\n-   of switches are such that the binary search tests \"-gen-decls\"\n-   before having tested \"-g\".  This doesn't match, and as \"-gen-decls\"\n-   is less than \"-gstabs\", it will become the lower bound of the\n-   binary search range, and \"-g\" will never be seen.  To resolve this\n-   issue, opts.sh makes \"-gen-decls\" point, via the back_chain member,\n-   to \"-g\" so that failed searches that end between \"-gen-decls\" and\n-   the lexicographically subsequent switch know to go back and see if\n-   \"-g\" causes a match (which it does in this example).\n-\n-   This search is done in such a way that the longest match for the\n-   front end in question wins.  If there is no match for the current\n-   front end, the longest match for a different front end is returned\n-   (or N_OPTS if none) and the caller emits an error message.  */\n-static size_t\n-find_opt (const char *input, int lang_mask)\n-{\n-  size_t mn, mx, md, opt_len;\n-  size_t match_wrong_lang;\n-  int comp;\n-\n-  mn = 0;\n-  mx = cl_options_count;\n-\n-  /* Find mn such this lexicographical inequality holds:\n-     cl_options[mn] <= input < cl_options[mn + 1].  */\n-  while (mx - mn > 1)\n-    {\n-      md = (mn + mx) / 2;\n-      opt_len = cl_options[md].opt_len;\n-      comp = strncmp (input, cl_options[md].opt_text + 1, opt_len);\n-\n-      if (comp < 0)\n-\tmx = md;\n-      else\n-\tmn = md;\n-    }\n-\n-  /* This is the switch that is the best match but for a different\n-     front end, or cl_options_count if there is no match at all.  */\n-  match_wrong_lang = cl_options_count;\n-\n-  /* Backtrace the chain of possible matches, returning the longest\n-     one, if any, that fits best.  With current GCC switches, this\n-     loop executes at most twice.  */\n-  do\n-    {\n-      const struct cl_option *opt = &cl_options[mn];\n-\n-      /* Is the input either an exact match or a prefix that takes a\n-\t joined argument?  */\n-      if (!strncmp (input, opt->opt_text + 1, opt->opt_len)\n-\t  && (input[opt->opt_len] == '\\0' || (opt->flags & CL_JOINED)))\n-\t{\n-\t  /* If language is OK, return it.  */\n-\t  if (opt->flags & lang_mask)\n-\t    return mn;\n-\n-\t  /* If we haven't remembered a prior match, remember this\n-\t     one.  Any prior match is necessarily better.  */\n-\t  if (match_wrong_lang == cl_options_count)\n-\t    match_wrong_lang = mn;\n-\t}\n-\n-      /* Try the next possibility.  This is cl_options_count if there\n-\t are no more.  */\n-      mn = opt->back_chain;\n-    }\n-  while (mn != cl_options_count);\n-\n-  /* Return the best wrong match, or cl_options_count if none.  */\n-  return match_wrong_lang;\n-}\n-\n /* If ARG is a non-negative integer made up solely of digits, return its\n    value, otherwise return -1.  */\n static int"}, {"sha": "3af501fbf999b06d10cda4202f49df0a02c77ee6", "filename": "gcc/opts.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -46,6 +46,7 @@ struct cl_option\n   const char *help;\n   unsigned short back_chain;\n   unsigned char opt_len;\n+  int neg_index;\n   unsigned int flags;\n   void *flag_var;\n   enum cl_var_type var_type;\n@@ -84,6 +85,8 @@ extern const char **in_fnames;\n \n extern unsigned num_in_fnames;\n \n+size_t find_opt (const char *input, int lang_mask);\n+extern void prune_options (int *argcp, char ***argvp);\n extern void decode_options (unsigned int argc, const char **argv);\n extern int option_enabled (int opt_idx);\n extern bool get_option_state (int, struct cl_option_state *);"}, {"sha": "b4ee6d3c7523463e360149ea1231c3969ecbe05c", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -1,3 +1,9 @@\n+2006-05-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/26885\n+\t* Make-lang.in (gtreelang$(exeext)): Replace gcc.o with\n+\t$(GCC_OBJS).\n+\n 2006-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Make-lang.in (treelang/treetree.o): Add dependency on"}, {"sha": "a0230d4a3fa7d3513e4ef10e28d5fc76bc743e2e", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c7833ccd0392c40505c4f707abc7ef64af7972/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=14c7833ccd0392c40505c4f707abc7ef64af7972", "patch": "@@ -87,10 +87,10 @@ tree1$(exeext): treelang/tree1.o treelang/treetree.o treelang/tree-convert.o \\\n \t$(BACKEND) $(LIBS) attribs.o\n \n # Create the compiler driver treelang.\n-gtreelang$(exeext): gcc.o version.o prefix.o intl.o $(EXTRA_GCC_OBJS) \\\n+gtreelang$(exeext): $(GCC_OBJS) version.o prefix.o intl.o $(EXTRA_GCC_OBJS) \\\n   $(LIBDEPS) treelang/spec.o\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ treelang/spec.o \\\n-\t  gcc.o version.o prefix.o intl.o $(EXTRA_GCC_OBJS) $(LIBS)\n+\t  $(GCC_OBJS) version.o prefix.o intl.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n \n "}]}