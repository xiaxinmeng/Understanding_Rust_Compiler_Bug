{"sha": "1460ec5c3d5a247e704245ac996750c749991fdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2MGVjNWMzZDVhMjQ3ZTcwNDI0NWFjOTk2NzUwYzc0OTk5MWZkZA==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2011-06-09T06:20:05Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2011-06-09T06:20:05Z"}, "message": "Print location for conflicting global regs.\n\ngcc/\n\n2011-06-08  Andi Kleen  <ak@linux.intel.com>\n\n\t* reginfo.c (global_regs_decl): Add.\n\t(globalize_reg): Add decl parameter. Compute location.\n\tPass location to warnings and add inform. Store decl\n\tin global_regs_decl.\n\t* rtl.h (globalize_reg): Update prototype.\n\t* varasm.c (make_decl_rtl): Pass decl to globalize_reg().\n\nFrom-SVN: r174834", "tree": {"sha": "0e9b031c60a7dac8443153238fabcfc776f16ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e9b031c60a7dac8443153238fabcfc776f16ecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1460ec5c3d5a247e704245ac996750c749991fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1460ec5c3d5a247e704245ac996750c749991fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1460ec5c3d5a247e704245ac996750c749991fdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1460ec5c3d5a247e704245ac996750c749991fdd/comments", "author": null, "committer": null, "parents": [{"sha": "df17530a852fae6aab5ce41d806a78808013fc1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df17530a852fae6aab5ce41d806a78808013fc1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df17530a852fae6aab5ce41d806a78808013fc1f"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "fb53fdcc2af58216b5522e5f029928979bd7c3c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1460ec5c3d5a247e704245ac996750c749991fdd", "patch": "@@ -1,3 +1,12 @@\n+2011-06-08  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* reginfo.c (global_regs_decl): Add.\n+\t(globalize_reg): Add decl parameter. Compute location.\n+\tPass location to warnings and add inform. Store decl\n+\tin global_regs_decl.\n+\t* rtl.h (globalize_reg): Update prototype.\n+\t* varasm.c (make_decl_rtl): Pass decl to globalize_reg().\n+\n 2011-06-09  Mingjie Xing  <mingjie.xing@gmail.com>\n \n \t* treestruct.def (TS_TYPE_DECL): Fix the printable name typo."}, {"sha": "1da4cb8f40aa2b9ec1fc5f157b520868a15ce6d0", "filename": "gcc/reginfo.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=1460ec5c3d5a247e704245ac996750c749991fdd", "patch": "@@ -87,6 +87,9 @@ static const char initial_call_really_used_regs[] = CALL_REALLY_USED_REGISTERS;\n    and are also considered fixed.  */\n char global_regs[FIRST_PSEUDO_REGISTER];\n \n+/* Declaration for the global register. */\n+static tree GTY(()) global_regs_decl[FIRST_PSEUDO_REGISTER];\n+\n /* Same information as REGS_INVALIDATED_BY_CALL but in regset form to be used\n    in dataflow more conveniently.  */\n regset regs_invalidated_by_call_regset;\n@@ -825,8 +828,10 @@ fix_register (const char *name, int fixed, int call_used)\n \n /* Mark register number I as global.  */\n void\n-globalize_reg (int i)\n+globalize_reg (tree decl, int i)\n {\n+  location_t loc = DECL_SOURCE_LOCATION (decl);\n+\n #ifdef STACK_REGS\n   if (IN_RANGE (i, FIRST_STACK_REG, LAST_STACK_REG))\n     {\n@@ -836,18 +841,23 @@ globalize_reg (int i)\n #endif\n \n   if (fixed_regs[i] == 0 && no_global_reg_vars)\n-    error (\"global register variable follows a function definition\");\n+    error_at (loc, \"global register variable follows a function definition\");\n \n   if (global_regs[i])\n     {\n-      warning (0, \"register used for two global register variables\");\n+      warning_at (loc, 0, \n+\t\t  \"register of %qD used for multiple global register variables\",\n+\t\t  decl);\n+      inform (DECL_SOURCE_LOCATION (global_regs_decl[i]),\n+\t      \"conflicts with %qD\", global_regs_decl[i]); \n       return;\n     }\n \n   if (call_used_regs[i] && ! fixed_regs[i])\n-    warning (0, \"call-clobbered register used for global register variable\");\n+    warning_at (loc, 0, \"call-clobbered register used for global register variable\");\n \n   global_regs[i] = 1;\n+  global_regs_decl[i] = decl;\n \n   /* If we're globalizing the frame pointer, we need to set the\n      appropriate regs_invalidated_by_call bit, even if it's already"}, {"sha": "f2c298397c6138169196428ffc4fd9c23c1df9d6", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1460ec5c3d5a247e704245ac996750c749991fdd", "patch": "@@ -2451,7 +2451,7 @@ extern void mark_elimination (int, int);\n /* In reginfo.c */\n extern int reg_classes_intersect_p (reg_class_t, reg_class_t);\n extern int reg_class_subset_p (reg_class_t, reg_class_t);\n-extern void globalize_reg (int);\n+extern void globalize_reg (tree, int);\n extern void init_reg_modes_target (void);\n extern void init_regs (void);\n extern void reinit_regs (void);"}, {"sha": "3311c86a9ea1844c67d96860119dc345e5aafc83", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1460ec5c3d5a247e704245ac996750c749991fdd/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1460ec5c3d5a247e704245ac996750c749991fdd", "patch": "@@ -1237,7 +1237,7 @@ make_decl_rtl (tree decl)\n #endif\n \t      nregs = hard_regno_nregs[reg_number][DECL_MODE (decl)];\n \t      while (nregs > 0)\n-\t\tglobalize_reg (reg_number + --nregs);\n+\t\tglobalize_reg (decl, reg_number + --nregs);\n \t    }\n \n \t  /* As a register variable, it has no section.  */"}]}