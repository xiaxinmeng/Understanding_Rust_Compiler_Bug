{"sha": "3517dfe05c05a48885149334143230fcf0ebe6be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxN2RmZTA1YzA1YTQ4ODg1MTQ5MzM0MTQzMjMwZmNmMGViZTZiZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-23T12:31:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-23T12:54:39Z"}, "message": "libstdc++: Clarify argument to net::io_context::async_wait\n\nAdd a comment documenting the __w parameter of the private\nios_context::async_wait function. Add casts to callers, making the\nconversions explicit.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/io_context (io_context::async_wait): Add\n\tcomment.\n\t* include/experimental/socket (basic_socket::async_connect):\n\tCast wait_type constant to int.\n\t(basic_datagram_socket::async_receive): Likewise.\n\t(basic_datagram_socket::async_receive_from): Likewise.\n\t(basic_datagram_socket::async_send): Likewise.\n\t(basic_datagram_socket::async_send_to): Likewise.\n\t(basic_stream_socket::async_receive): Likewise.\n\t(basic_stream_socket::async_send): Likewise. Use io_context\n\tparameter directly, instead of via an executor.\n\t(basic_socket_acceptor::async_accept): Likewise.", "tree": {"sha": "961c84230b7bcaddcc2415a35badd180979dbc71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/961c84230b7bcaddcc2415a35badd180979dbc71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3517dfe05c05a48885149334143230fcf0ebe6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3517dfe05c05a48885149334143230fcf0ebe6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3517dfe05c05a48885149334143230fcf0ebe6be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3517dfe05c05a48885149334143230fcf0ebe6be/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a752a43073dc49909c017fd52feacd7526ed31c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a752a43073dc49909c017fd52feacd7526ed31c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a752a43073dc49909c017fd52feacd7526ed31c0"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "82d7b4f545e6641ba75ef693fca50dd622b2ec7e", "filename": "libstdc++-v3/include/experimental/io_context", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3517dfe05c05a48885149334143230fcf0ebe6be/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3517dfe05c05a48885149334143230fcf0ebe6be/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context?ref=3517dfe05c05a48885149334143230fcf0ebe6be", "patch": "@@ -475,6 +475,9 @@ inline namespace v1\n \treturn 0;\n       }\n \n+    // The caller must know what the wait-type __w will be interpreted.\n+    // In the current implementation the reactor is based on <poll.h>\n+    // so the parameter must be one of POLLIN, POLLOUT or POLLERR.\n     template<typename _Op>\n       void\n       async_wait(int __fd, int __w, _Op&& __op)"}, {"sha": "09c3b729607a72488ead8beeee2492d5c618ffd1", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3517dfe05c05a48885149334143230fcf0ebe6be/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3517dfe05c05a48885149334143230fcf0ebe6be/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=3517dfe05c05a48885149334143230fcf0ebe6be", "patch": "@@ -954,7 +954,7 @@ inline namespace v1\n \t    }\n \n \t  get_executor().context().async_wait( native_handle(),\n-\t      socket_base::wait_read,\n+\t      (int) socket_base::wait_read,\n \t      [__h = std::move(__init.completion_handler),\n                __ep = std::move(__endpoint),\n                __fd = native_handle()]\n@@ -1165,7 +1165,7 @@ inline namespace v1\n             __init{__token};\n \n \t  this->get_executor().context().async_wait(this->native_handle(),\n-\t      socket_base::wait_read,\n+\t      (int) socket_base::wait_read,\n \t      [__h = std::move(__init.completion_handler),\n                &__buffers, __flags = static_cast<int>(__flags),\n                __fd = this->native_handle()]\n@@ -1271,7 +1271,7 @@ inline namespace v1\n             __init{__token};\n \n \t  this->get_executor().context().async_wait( this->native_handle(),\n-\t      socket_base::wait_read,\n+\t      (int) socket_base::wait_read,\n \t      [__h = std::move(__init.completion_handler),\n                &__buffers, __flags = static_cast<int>(__flags),\n                __sender = std::move(__sender),\n@@ -1366,7 +1366,7 @@ inline namespace v1\n             __init{__token};\n \n \t  this->get_executor().context().async_wait( this->native_handle(),\n-\t      socket_base::wait_write,\n+\t      (int) socket_base::wait_write,\n \t      [__h = std::move(__init.completion_handler),\n                &__buffers, __flags = static_cast<int>(__flags),\n                __fd = this->native_handle()]\n@@ -1469,7 +1469,7 @@ inline namespace v1\n             __init{__token};\n \n \t  this->get_executor().context().async_wait( this->native_handle(),\n-\t      socket_base::wait_write,\n+\t      (int) socket_base::wait_write,\n \t      [__h = std::move(__init.completion_handler),\n                &__buffers, __flags = static_cast<int>(__flags),\n                __recipient = std::move(__recipient),\n@@ -1634,7 +1634,7 @@ inline namespace v1\n \t    }\n \n           this->get_executor().context().async_wait(this->native_handle(),\n-\t      socket_base::wait_read,\n+\t      (int) socket_base::wait_read,\n \t      [__h = std::move(__init.completion_handler),\n                &__buffers, __flags = static_cast<int>(__flags),\n                __fd = this->native_handle()]\n@@ -1741,7 +1741,7 @@ inline namespace v1\n \t    }\n \n           this->get_executor().context().async_wait(this->native_handle(),\n-\t      socket_base::wait_write,\n+\t      (int) socket_base::wait_write,\n \t      [__h = std::move(__init.completion_handler),\n                &__buffers, __flags = static_cast<int>(__flags),\n                __fd = this->native_handle()]\n@@ -2098,8 +2098,8 @@ inline namespace v1\n           async_completion<_CompletionToken, void(error_code, socket_type)>\n             __init{__token};\n \n-\t  __ctx.get_executor().context().async_wait(native_handle(),\n-\t      socket_base::wait_read,\n+\t  __ctx.async_wait(native_handle(),\n+\t      (int) socket_base::wait_read,\n \t      [__h = std::move(__init.completion_handler),\n                __connabort = enable_connection_aborted(),\n                __fd = native_handle(),\n@@ -2189,8 +2189,8 @@ inline namespace v1\n           async_completion<_CompletionToken, void(error_code, socket_type)>\n             __init{__token};\n \n-\t  __ctx.get_executor().context().async_wait(native_handle(),\n-\t      socket_base::wait_read,\n+\t  __ctx.async_wait(native_handle(),\n+\t      (int) socket_base::wait_read,\n \t      [__h = std::move(__init.completion_handler),\n               __ep = std::move(__endpoint),\n                __connabort = enable_connection_aborted(),"}]}