{"sha": "e326eeb5e8a6bc39b3a411685873f0966989bed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyNmVlYjVlOGE2YmMzOWIzYTQxMTY4NTg3M2YwOTY2OTg5YmVkMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-25T19:38:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-25T19:38:45Z"}, "message": "bitmap.c (hash_descriptor, [...]): Constify.\n\n\t* bitmap.c (hash_descriptor, eq_descriptor, bitmap_element_zerop,\n\tbitmap_copy, bitmap_clear_bit, popcount_table, bitmap_count_bits,\n\tbitmap_first_set_bit, bitmap_and, bitmap_and_into,\n\tbitmap_elt_copy, bitmap_and_compl, bitmap_and_compl_into,\n\tbitmap_compl_and_into, bitmap_elt_ior, bitmap_ior,\n\tbitmap_ior_into, bitmap_xor, bitmap_xor_into, bitmap_equal_p,\n\tbitmap_intersect_p, bitmap_intersect_compl_p,\n\tbitmap_ior_and_compl, bitmap_ior_and_compl_into,\n\tdebug_bitmap_file, debug_bitmap, bitmap_print, bitmap_hash):\n\tConstify.\n\t* bitmap.h (bitmap_copy, bitmap_equal_p, bitmap_intersect_p,\n\tbitmap_intersect_compl_p, bitmap_count_bits, bitmap_and,\n\tbitmap_and_into, bitmap_and_compl, bitmap_and_compl_into,\n\tbitmap_compl_and_into, bitmap_ior, bitmap_ior_into, bitmap_xor,\n\tbitmap_xor_into, bitmap_ior_and_compl, bitmap_ior_and_compl_into,\n\tdebug_bitmap, debug_bitmap_file, bitmap_print,\n\tbitmap_first_set_bit, bitmap_hash, bmp_iter_set_init,\n\tbmp_iter_and_init, bmp_iter_and_compl_init): Likewise.\n\nFrom-SVN: r126928", "tree": {"sha": "670936e55920e11cd3b5b1741fe047d7339f68e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/670936e55920e11cd3b5b1741fe047d7339f68e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e326eeb5e8a6bc39b3a411685873f0966989bed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e326eeb5e8a6bc39b3a411685873f0966989bed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e326eeb5e8a6bc39b3a411685873f0966989bed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e326eeb5e8a6bc39b3a411685873f0966989bed3/comments", "author": null, "committer": null, "parents": [{"sha": "4352ed4d6d3f954d0c8463d7af10636a05a933dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4352ed4d6d3f954d0c8463d7af10636a05a933dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4352ed4d6d3f954d0c8463d7af10636a05a933dd"}], "stats": {"total": 191, "additions": 107, "deletions": 84}, "files": [{"sha": "4aea3ae55c99024fc51322c4837b0d85cf2abeb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e326eeb5e8a6bc39b3a411685873f0966989bed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e326eeb5e8a6bc39b3a411685873f0966989bed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e326eeb5e8a6bc39b3a411685873f0966989bed3", "patch": "@@ -1,3 +1,24 @@\n+2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bitmap.c (hash_descriptor, eq_descriptor, bitmap_element_zerop,\n+\tbitmap_copy, bitmap_clear_bit, popcount_table, bitmap_count_bits,\n+\tbitmap_first_set_bit, bitmap_and, bitmap_and_into,\n+\tbitmap_elt_copy, bitmap_and_compl, bitmap_and_compl_into,\n+\tbitmap_compl_and_into, bitmap_elt_ior, bitmap_ior,\n+\tbitmap_ior_into, bitmap_xor, bitmap_xor_into, bitmap_equal_p,\n+\tbitmap_intersect_p, bitmap_intersect_compl_p,\n+\tbitmap_ior_and_compl, bitmap_ior_and_compl_into,\n+\tdebug_bitmap_file, debug_bitmap, bitmap_print, bitmap_hash):\n+\tConstify.\n+\t* bitmap.h (bitmap_copy, bitmap_equal_p, bitmap_intersect_p,\n+\tbitmap_intersect_compl_p, bitmap_count_bits, bitmap_and,\n+\tbitmap_and_into, bitmap_and_compl, bitmap_and_compl_into,\n+\tbitmap_compl_and_into, bitmap_ior, bitmap_ior_into, bitmap_xor,\n+\tbitmap_xor_into, bitmap_ior_and_compl, bitmap_ior_and_compl_into,\n+\tdebug_bitmap, debug_bitmap_file, bitmap_print,\n+\tbitmap_first_set_bit, bitmap_hash, bmp_iter_set_init,\n+\tbmp_iter_and_init, bmp_iter_and_compl_init): Likewise.\n+\n 2007-07-25  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* config/darwin.c (darwin_override_options): Additional fix for"}, {"sha": "1ab977f34a47e433b88adf6efe389c972cf943b8", "filename": "gcc/bitmap.c", "status": "modified", "additions": 62, "deletions": 60, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e326eeb5e8a6bc39b3a411685873f0966989bed3/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e326eeb5e8a6bc39b3a411685873f0966989bed3/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=e326eeb5e8a6bc39b3a411685873f0966989bed3", "patch": "@@ -52,7 +52,7 @@ static htab_t bitmap_desc_hash;\n static hashval_t\n hash_descriptor (const void *p)\n {\n-  const struct bitmap_descriptor *d = p;\n+  const struct bitmap_descriptor *const d = p;\n   return htab_hash_pointer (d->file) + d->line;\n }\n struct loc\n@@ -64,8 +64,8 @@ struct loc\n static int\n eq_descriptor (const void *p1, const void *p2)\n {\n-  const struct bitmap_descriptor *d = p1;\n-  const struct loc *l = p2;\n+  const struct bitmap_descriptor *const d = p1;\n+  const struct loc *const l = p2;\n   return d->file == l->file && d->function == l->function && d->line == l->line;\n }\n \n@@ -126,7 +126,7 @@ static GTY((deletable)) bitmap_element *bitmap_ggc_free; /* Freelist of\n static void bitmap_elem_to_freelist (bitmap, bitmap_element *);\n static void bitmap_element_free (bitmap, bitmap_element *);\n static bitmap_element *bitmap_element_allocate (bitmap);\n-static int bitmap_element_zerop (bitmap_element *);\n+static int bitmap_element_zerop (const bitmap_element *);\n static void bitmap_element_link (bitmap, bitmap_element *);\n static bitmap_element *bitmap_elt_insert_after (bitmap, bitmap_element *, unsigned int);\n static void bitmap_elt_clear_from (bitmap, bitmap_element *);\n@@ -390,7 +390,7 @@ bitmap_obstack_free (bitmap map)\n /* Return nonzero if all bits in an element are zero.  */\n \n static inline int\n-bitmap_element_zerop (bitmap_element *element)\n+bitmap_element_zerop (const bitmap_element *element)\n {\n #if BITMAP_ELEMENT_WORDS == 2\n   return (element->bits[0] | element->bits[1]) == 0;\n@@ -498,9 +498,10 @@ bitmap_elt_insert_after (bitmap head, bitmap_element *elt, unsigned int indx)\n /* Copy a bitmap to another bitmap.  */\n \n void\n-bitmap_copy (bitmap to, bitmap from)\n+bitmap_copy (bitmap to, const_bitmap from)\n {\n-  bitmap_element *from_ptr, *to_ptr = 0;\n+  const bitmap_element *from_ptr;\n+  bitmap_element *to_ptr = 0;\n \n   bitmap_clear (to);\n \n@@ -588,7 +589,7 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n void\n bitmap_clear_bit (bitmap head, int bit)\n {\n-  bitmap_element *ptr = bitmap_find_bit (head, bit);\n+  bitmap_element *const ptr = bitmap_find_bit (head, bit);\n \n   if (ptr != 0)\n     {\n@@ -644,7 +645,7 @@ bitmap_bit_p (bitmap head, int bit)\n \f\n #if GCC_VERSION < 3400\n /* Table of number of set bits in a character, indexed by value of char.  */\n-static unsigned char popcount_table[] =\n+static const unsigned char popcount_table[] =\n {\n     0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,\n     1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n@@ -671,10 +672,10 @@ bitmap_popcount (BITMAP_WORD a)\n /* Count the number of bits set in the bitmap, and return it.  */\n \n unsigned long\n-bitmap_count_bits (bitmap a)\n+bitmap_count_bits (const_bitmap a)\n {\n   unsigned long count = 0;\n-  bitmap_element *elt;\n+  const bitmap_element *elt;\n   unsigned ix;\n \n   for (elt = a->first; elt; elt = elt->next)\n@@ -699,9 +700,9 @@ bitmap_count_bits (bitmap a)\n    bitmap must be non-empty.  */\n \n unsigned\n-bitmap_first_set_bit (bitmap a)\n+bitmap_first_set_bit (const_bitmap a)\n {\n-  bitmap_element *elt = a->first;\n+  const bitmap_element *elt = a->first;\n   unsigned bit_no;\n   BITMAP_WORD word;\n   unsigned ix;\n@@ -750,11 +751,11 @@ bitmap_first_set_bit (bitmap a)\n /* DST = A & B.  */\n \n void\n-bitmap_and (bitmap dst, bitmap a, bitmap b)\n+bitmap_and (bitmap dst, const_bitmap a, const_bitmap b)\n {\n   bitmap_element *dst_elt = dst->first;\n-  bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *dst_prev = NULL;\n \n   gcc_assert (dst != a && dst != b);\n@@ -808,10 +809,10 @@ bitmap_and (bitmap dst, bitmap a, bitmap b)\n /* A &= B.  */\n \n void\n-bitmap_and_into (bitmap a, bitmap b)\n+bitmap_and_into (bitmap a, const_bitmap b)\n {\n   bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *next;\n \n   if (a == b)\n@@ -859,7 +860,7 @@ bitmap_and_into (bitmap a, bitmap b)\n \n static inline bool\n bitmap_elt_copy (bitmap dst, bitmap_element *dst_elt, bitmap_element *dst_prev,\n-\t\t bitmap_element *src_elt, bool changed)\n+\t\t const bitmap_element *src_elt, bool changed)\n {\n   if (!changed && dst_elt && dst_elt->indx == src_elt->indx)\n     {\n@@ -889,11 +890,11 @@ bitmap_elt_copy (bitmap dst, bitmap_element *dst_elt, bitmap_element *dst_prev,\n /* DST = A & ~B  */\n \n bool\n-bitmap_and_compl (bitmap dst, bitmap a, bitmap b)\n+bitmap_and_compl (bitmap dst, const_bitmap a, const_bitmap b)\n {\n   bitmap_element *dst_elt = dst->first;\n-  bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *dst_prev = NULL;\n   bitmap_element **dst_prev_pnext = &dst->first;\n   bool changed = false;\n@@ -1002,10 +1003,10 @@ bitmap_and_compl (bitmap dst, bitmap a, bitmap b)\n /* A &= ~B. Returns true if A changes */\n \n bool\n-bitmap_and_compl_into (bitmap a, bitmap b)\n+bitmap_and_compl_into (bitmap a, const_bitmap b)\n {\n   bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *next;\n   BITMAP_WORD changed = 0;\n \n@@ -1282,10 +1283,10 @@ bitmap_clear_range (bitmap head, unsigned int start, unsigned int count)\n /* A = ~A & B. */\n \n void\n-bitmap_compl_and_into (bitmap a, bitmap b)\n+bitmap_compl_and_into (bitmap a, const_bitmap b)\n {\n   bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *a_prev = NULL;\n   bitmap_element *next;\n \n@@ -1355,7 +1356,7 @@ bitmap_compl_and_into (bitmap a, bitmap b)\n \n static inline bool\n bitmap_elt_ior (bitmap dst, bitmap_element *dst_elt, bitmap_element *dst_prev,\n-\t\tbitmap_element *a_elt, bitmap_element *b_elt,\n+\t\tconst bitmap_element *a_elt, const bitmap_element *b_elt,\n \t\tbool changed)\n {\n   gcc_assert (a_elt || b_elt);\n@@ -1394,7 +1395,7 @@ bitmap_elt_ior (bitmap dst, bitmap_element *dst_elt, bitmap_element *dst_prev,\n   else\n     {\n       /* Copy a single element.  */\n-      bitmap_element *src;\n+      const bitmap_element *src;\n \n       if (!b_elt || (a_elt && a_elt->indx < b_elt->indx))\n \tsrc = a_elt;\n@@ -1411,11 +1412,11 @@ bitmap_elt_ior (bitmap dst, bitmap_element *dst_elt, bitmap_element *dst_prev,\n /* DST = A | B.  Return true if DST changes.  */\n \n bool\n-bitmap_ior (bitmap dst, bitmap a, bitmap b)\n+bitmap_ior (bitmap dst, const_bitmap a, const_bitmap b)\n {\n   bitmap_element *dst_elt = dst->first;\n-  bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *dst_prev = NULL;\n   bitmap_element **dst_prev_pnext = &dst->first;\n   bool changed = false;\n@@ -1458,10 +1459,10 @@ bitmap_ior (bitmap dst, bitmap a, bitmap b)\n /* A |= B.  Return true if A changes.  */\n \n bool\n-bitmap_ior_into (bitmap a, bitmap b)\n+bitmap_ior_into (bitmap a, const_bitmap b)\n {\n   bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *a_prev = NULL;\n   bitmap_element **a_prev_pnext = &a->first;\n   bool changed = false;\n@@ -1497,11 +1498,11 @@ bitmap_ior_into (bitmap a, bitmap b)\n /* DST = A ^ B  */\n \n void\n-bitmap_xor (bitmap dst, bitmap a, bitmap b)\n+bitmap_xor (bitmap dst, const_bitmap a, const_bitmap b)\n {\n   bitmap_element *dst_elt = dst->first;\n-  bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *dst_prev = NULL;\n \n   gcc_assert (dst != a && dst != b);\n@@ -1541,7 +1542,7 @@ bitmap_xor (bitmap dst, bitmap a, bitmap b)\n       else\n \t{\n \t  /* Copy a single element.  */\n-\t  bitmap_element *src;\n+\t  const bitmap_element *src;\n \n \t  if (!b_elt || (a_elt && a_elt->indx < b_elt->indx))\n \t    {\n@@ -1574,10 +1575,10 @@ bitmap_xor (bitmap dst, bitmap a, bitmap b)\n /* A ^= B */\n \n void\n-bitmap_xor_into (bitmap a, bitmap b)\n+bitmap_xor_into (bitmap a, const_bitmap b)\n {\n   bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n+  const bitmap_element *b_elt = b->first;\n   bitmap_element *a_prev = NULL;\n \n   if (a == b)\n@@ -1633,10 +1634,10 @@ bitmap_xor_into (bitmap a, bitmap b)\n    occurs in practice.  */\n \n bool\n-bitmap_equal_p (bitmap a, bitmap b)\n+bitmap_equal_p (const_bitmap a, const_bitmap b)\n {\n-  bitmap_element *a_elt;\n-  bitmap_element *b_elt;\n+  const bitmap_element *a_elt;\n+  const bitmap_element *b_elt;\n   unsigned ix;\n \n   for (a_elt = a->first, b_elt = b->first;\n@@ -1655,10 +1656,10 @@ bitmap_equal_p (bitmap a, bitmap b)\n /* Return true if A AND B is not empty.  */\n \n bool\n-bitmap_intersect_p (bitmap a, bitmap b)\n+bitmap_intersect_p (const_bitmap a, const_bitmap b)\n {\n-  bitmap_element *a_elt;\n-  bitmap_element *b_elt;\n+  const bitmap_element *a_elt;\n+  const bitmap_element *b_elt;\n   unsigned ix;\n \n   for (a_elt = a->first, b_elt = b->first;\n@@ -1683,10 +1684,10 @@ bitmap_intersect_p (bitmap a, bitmap b)\n /* Return true if A AND NOT B is not empty.  */\n \n bool\n-bitmap_intersect_compl_p (bitmap a, bitmap b)\n+bitmap_intersect_compl_p (const_bitmap a, const_bitmap b)\n {\n-  bitmap_element *a_elt;\n-  bitmap_element *b_elt;\n+  const bitmap_element *a_elt;\n+  const bitmap_element *b_elt;\n   unsigned ix;\n   for (a_elt = a->first, b_elt = b->first;\n        a_elt && b_elt;)\n@@ -1711,14 +1712,14 @@ bitmap_intersect_compl_p (bitmap a, bitmap b)\n /* DST = A | (FROM1 & ~FROM2).  Return true if DST changes.  */\n \n bool\n-bitmap_ior_and_compl (bitmap dst, bitmap a, bitmap b, bitmap kill)\n+bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b, const_bitmap kill)\n {\n   bool changed = false;\n \n   bitmap_element *dst_elt = dst->first;\n-  bitmap_element *a_elt = a->first;\n-  bitmap_element *b_elt = b->first;\n-  bitmap_element *kill_elt = kill->first;\n+  const bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n+  const bitmap_element *kill_elt = kill->first;\n   bitmap_element *dst_prev = NULL;\n   bitmap_element **dst_prev_pnext = &dst->first;\n \n@@ -1815,7 +1816,7 @@ bitmap_ior_and_compl (bitmap dst, bitmap a, bitmap b, bitmap kill)\n /* A |= (FROM1 & ~FROM2).  Return true if A changes.  */\n \n bool\n-bitmap_ior_and_compl_into (bitmap a, bitmap from1, bitmap from2)\n+bitmap_ior_and_compl_into (bitmap a, const_bitmap from1, const_bitmap from2)\n {\n   bitmap_head tmp;\n   bool changed;\n@@ -1832,9 +1833,9 @@ bitmap_ior_and_compl_into (bitmap a, bitmap from1, bitmap from2)\n /* Debugging function to print out the contents of a bitmap.  */\n \n void\n-debug_bitmap_file (FILE *file, bitmap head)\n+debug_bitmap_file (FILE *file, const_bitmap head)\n {\n-  bitmap_element *ptr;\n+  const bitmap_element *ptr;\n \n   fprintf (file, \"\\nfirst = %p current = %p indx = %u\\n\",\n \t   (void *) head->first, (void *) head->current, head->indx);\n@@ -1844,7 +1845,8 @@ debug_bitmap_file (FILE *file, bitmap head)\n       unsigned int i, j, col = 26;\n \n       fprintf (file, \"\\t%p next = %p prev = %p indx = %u\\n\\t\\tbits = {\",\n-\t       (void*) ptr, (void*) ptr->next, (void*) ptr->prev, ptr->indx);\n+\t       (const void*) ptr, (const void*) ptr->next,\n+\t       (const void*) ptr->prev, ptr->indx);\n \n       for (i = 0; i < BITMAP_ELEMENT_WORDS; i++)\n \tfor (j = 0; j < BITMAP_WORD_BITS; j++)\n@@ -1869,7 +1871,7 @@ debug_bitmap_file (FILE *file, bitmap head)\n    of a bitmap.  */\n \n void\n-debug_bitmap (bitmap head)\n+debug_bitmap (const_bitmap head)\n {\n   debug_bitmap_file (stdout, head);\n }\n@@ -1878,7 +1880,7 @@ debug_bitmap (bitmap head)\n    it does not print anything but the bits.  */\n \n void\n-bitmap_print (FILE *file, bitmap head, const char *prefix, const char *suffix)\n+bitmap_print (FILE *file, const_bitmap head, const char *prefix, const char *suffix)\n {\n   const char *comma = \"\";\n   unsigned i;\n@@ -1953,9 +1955,9 @@ dump_bitmap_statistics (void)\n \n /* Compute hash of bitmap (for purposes of hashing).  */\n hashval_t\n-bitmap_hash (bitmap head)\n+bitmap_hash (const_bitmap head)\n {\n-  bitmap_element *ptr;\n+  const bitmap_element *ptr;\n   BITMAP_WORD hash = 0;\n   int ix;\n "}, {"sha": "51876bedeb1b69504f1b5fee82821b1a9e02ad3b", "filename": "gcc/bitmap.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e326eeb5e8a6bc39b3a411685873f0966989bed3/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e326eeb5e8a6bc39b3a411685873f0966989bed3/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=e326eeb5e8a6bc39b3a411685873f0966989bed3", "patch": "@@ -93,45 +93,45 @@ extern bitmap_obstack bitmap_default_obstack;   /* Default bitmap obstack */\n extern void bitmap_clear (bitmap);\n \n /* Copy a bitmap to another bitmap.  */\n-extern void bitmap_copy (bitmap, bitmap);\n+extern void bitmap_copy (bitmap, const_bitmap);\n \n /* True if two bitmaps are identical.  */\n-extern bool bitmap_equal_p (bitmap, bitmap);\n+extern bool bitmap_equal_p (const_bitmap, const_bitmap);\n \n /* True if the bitmaps intersect (their AND is non-empty).  */\n-extern bool bitmap_intersect_p (bitmap, bitmap);\n+extern bool bitmap_intersect_p (const_bitmap, const_bitmap);\n \n /* True if the complement of the second intersects the first (their\n    AND_COMPL is non-empty).  */\n-extern bool bitmap_intersect_compl_p (bitmap, bitmap);\n+extern bool bitmap_intersect_compl_p (const_bitmap, const_bitmap);\n \n /* True if MAP is an empty bitmap.  */\n #define bitmap_empty_p(MAP) (!(MAP)->first)\n \n /* Count the number of bits set in the bitmap.  */\n-extern unsigned long bitmap_count_bits (bitmap);\n+extern unsigned long bitmap_count_bits (const_bitmap);\n \n /* Boolean operations on bitmaps.  The _into variants are two operand\n    versions that modify the first source operand.  The other variants\n    are three operand versions that to not destroy the source bitmaps.\n    The operations supported are &, & ~, |, ^.  */\n-extern void bitmap_and (bitmap, bitmap, bitmap);\n-extern void bitmap_and_into (bitmap, bitmap);\n-extern bool bitmap_and_compl (bitmap, bitmap, bitmap);\n-extern bool bitmap_and_compl_into (bitmap, bitmap);\n+extern void bitmap_and (bitmap, const_bitmap, const_bitmap);\n+extern void bitmap_and_into (bitmap, const_bitmap);\n+extern bool bitmap_and_compl (bitmap, const_bitmap, const_bitmap);\n+extern bool bitmap_and_compl_into (bitmap, const_bitmap);\n #define bitmap_compl_and(DST, A, B) bitmap_and_compl (DST, B, A)\n-extern void bitmap_compl_and_into (bitmap, bitmap);\n+extern void bitmap_compl_and_into (bitmap, const_bitmap);\n extern void bitmap_clear_range (bitmap, unsigned int, unsigned int);\n extern void bitmap_set_range (bitmap, unsigned int, unsigned int);\n-extern bool bitmap_ior (bitmap, bitmap, bitmap);\n-extern bool bitmap_ior_into (bitmap, bitmap);\n-extern void bitmap_xor (bitmap, bitmap, bitmap);\n-extern void bitmap_xor_into (bitmap, bitmap);\n+extern bool bitmap_ior (bitmap, const_bitmap, const_bitmap);\n+extern bool bitmap_ior_into (bitmap, const_bitmap);\n+extern void bitmap_xor (bitmap, const_bitmap, const_bitmap);\n+extern void bitmap_xor_into (bitmap, const_bitmap);\n \n /* DST = A | (B & ~C).  Return true if DST changes.  */\n-extern bool bitmap_ior_and_compl (bitmap DST, bitmap A, bitmap B, bitmap C);\n+extern bool bitmap_ior_and_compl (bitmap DST, const_bitmap A, const_bitmap B, const_bitmap C);\n /* A |= (B & ~C).  Return true if A changes.  */\n-extern bool bitmap_ior_and_compl_into (bitmap DST, bitmap B, bitmap C);\n+extern bool bitmap_ior_and_compl_into (bitmap DST, const_bitmap B, const_bitmap C);\n \n /* Clear a single register in a register set.  */\n extern void bitmap_clear_bit (bitmap, int);\n@@ -143,11 +143,11 @@ extern void bitmap_set_bit (bitmap, int);\n extern int bitmap_bit_p (bitmap, int);\n \n /* Debug functions to print a bitmap linked list.  */\n-extern void debug_bitmap (bitmap);\n-extern void debug_bitmap_file (FILE *, bitmap);\n+extern void debug_bitmap (const_bitmap);\n+extern void debug_bitmap_file (FILE *, const_bitmap);\n \n /* Print a bitmap.  */\n-extern void bitmap_print (FILE *, bitmap, const char *, const char *);\n+extern void bitmap_print (FILE *, const_bitmap, const char *, const char *);\n \n /* Initialize and release a bitmap obstack.  */\n extern void bitmap_obstack_initialize (bitmap_obstack *);\n@@ -179,10 +179,10 @@ extern void bitmap_obstack_free (bitmap);\n /* A few compatibility/functions macros for compatibility with sbitmaps */\n #define dump_bitmap(file, bitmap) bitmap_print (file, bitmap, \"\", \"\\n\")\n #define bitmap_zero(a) bitmap_clear (a)\n-extern unsigned bitmap_first_set_bit (bitmap);\n+extern unsigned bitmap_first_set_bit (const_bitmap);\n \n /* Compute bitmap hash (for purposes of hashing etc.)  */\n-extern hashval_t bitmap_hash(bitmap);\n+extern hashval_t bitmap_hash(const_bitmap);\n \n /* Allocate a bitmap from a bit obstack.  */\n #define BITMAP_ALLOC(OBSTACK) bitmap_obstack_alloc (OBSTACK)\n@@ -217,7 +217,7 @@ typedef struct\n    iterate from.  */\n \n static inline void\n-bmp_iter_set_init (bitmap_iterator *bi, bitmap map,\n+bmp_iter_set_init (bitmap_iterator *bi, const_bitmap map,\n \t\t   unsigned start_bit, unsigned *bit_no)\n {\n   bi->elt1 = map->first;\n@@ -259,7 +259,7 @@ bmp_iter_set_init (bitmap_iterator *bi, bitmap map,\n    bitmaps.  START_BIT is the bit to commence from.  */\n \n static inline void\n-bmp_iter_and_init (bitmap_iterator *bi, bitmap map1, bitmap map2,\n+bmp_iter_and_init (bitmap_iterator *bi, const_bitmap map1, const_bitmap map2,\n \t\t   unsigned start_bit, unsigned *bit_no)\n {\n   bi->elt1 = map1->first;\n@@ -327,7 +327,7 @@ bmp_iter_and_init (bitmap_iterator *bi, bitmap map1, bitmap map2,\n    */\n \n static inline void\n-bmp_iter_and_compl_init (bitmap_iterator *bi, bitmap map1, bitmap map2,\n+bmp_iter_and_compl_init (bitmap_iterator *bi, const_bitmap map1, const_bitmap map2,\n \t\t\t unsigned start_bit, unsigned *bit_no)\n {\n   bi->elt1 = map1->first;"}]}