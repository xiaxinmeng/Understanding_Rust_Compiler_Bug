{"sha": "bb920f561e983c64d146f173dc4ebc098441a962", "node_id": "C_kwDOANBUbNoAKGJiOTIwZjU2MWU5ODNjNjRkMTQ2ZjE3M2RjNGViYzA5ODQ0MWE5NjI", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-16T15:29:54Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2023-02-20T16:24:03Z"}, "message": "libstdc++: Fix uses of non-reserved names in simd header\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/bits/simd.h (__extract_part, split):\n\tUse reserved name for template parameter.", "tree": {"sha": "333fb2f82f6dae687e21ba548fb3f6963bc3acb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/333fb2f82f6dae687e21ba548fb3f6963bc3acb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb920f561e983c64d146f173dc4ebc098441a962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb920f561e983c64d146f173dc4ebc098441a962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb920f561e983c64d146f173dc4ebc098441a962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb920f561e983c64d146f173dc4ebc098441a962/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c86188ca4ca4f25eb7ab7152439f9e81ed17a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c86188ca4ca4f25eb7ab7152439f9e81ed17a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c86188ca4ca4f25eb7ab7152439f9e81ed17a87"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "2f615d13b73becf495e67abc211cdecc8b052fd6", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb920f561e983c64d146f173dc4ebc098441a962/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb920f561e983c64d146f173dc4ebc098441a962/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=bb920f561e983c64d146f173dc4ebc098441a962", "patch": "@@ -3783,7 +3783,7 @@ template <int _Index, int _Total, int _Combine = 1, typename _Tp, size_t _Np>\n   _SimdWrapper<_Tp, _Np / _Total * _Combine>\n   __extract_part(const _SimdWrapper<_Tp, _Np> __x);\n \n-template <int Index, int Parts, int _Combine = 1, typename _Tp, typename _A0,\n+template <int _Index, int _Parts, int _Combine = 1, typename _Tp, typename _A0,\n \t  typename... _As>\n   _GLIBCXX_SIMD_INTRINSIC auto\n   __extract_part(const _SimdTuple<_Tp, _A0, _As...>& __x);\n@@ -3896,19 +3896,19 @@ template <size_t... _Sizes, typename _Tp, typename... _As>\n \n // split<simd>(simd) {{{\n template <typename _V, typename _Ap,\n-\t  size_t Parts = simd_size_v<typename _V::value_type, _Ap> / _V::size()>\n-  enable_if_t<simd_size_v<typename _V::value_type, _Ap> == Parts * _V::size()\n-\t      && is_simd_v<_V>, array<_V, Parts>>\n+\t  size_t _Parts = simd_size_v<typename _V::value_type, _Ap> / _V::size()>\n+  enable_if_t<simd_size_v<typename _V::value_type, _Ap> == _Parts * _V::size()\n+\t\t&& is_simd_v<_V>, array<_V, _Parts>>\n   split(const simd<typename _V::value_type, _Ap>& __x)\n   {\n     using _Tp = typename _V::value_type;\n-    if constexpr (Parts == 1)\n+    if constexpr (_Parts == 1)\n       {\n \treturn {simd_cast<_V>(__x)};\n       }\n     else if (__x._M_is_constprop())\n       {\n-\treturn __generate_from_n_evaluations<Parts, array<_V, Parts>>(\n+\treturn __generate_from_n_evaluations<_Parts, array<_V, _Parts>>(\n \t\t [&](auto __i) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n \t\t   return _V([&](auto __j) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA\n \t\t\t     { return __x[__i * _V::size() + __j]; });\n@@ -3925,12 +3925,12 @@ template <typename _V, typename _Ap,\n #ifdef _GLIBCXX_SIMD_USE_ALIASING_LOADS\n       const __may_alias<_Tp>* const __element_ptr\n \t= reinterpret_cast<const __may_alias<_Tp>*>(&__data(__x));\n-      return __generate_from_n_evaluations<Parts, array<_V, Parts>>(\n+      return __generate_from_n_evaluations<_Parts, array<_V, _Parts>>(\n \t       [&](auto __i) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA\n \t       { return _V(__element_ptr + __i * _V::size(), vector_aligned); });\n #else\n       const auto& __xx = __data(__x);\n-      return __generate_from_n_evaluations<Parts, array<_V, Parts>>(\n+      return __generate_from_n_evaluations<_Parts, array<_V, _Parts>>(\n \t       [&](auto __i) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n \t\t [[maybe_unused]] constexpr size_t __offset\n \t\t   = decltype(__i)::value * _V::size();\n@@ -3944,20 +3944,20 @@ template <typename _V, typename _Ap,\n   else if constexpr (is_same_v<typename _V::abi_type, simd_abi::scalar>)\n     {\n       // normally memcpy should work here as well\n-      return __generate_from_n_evaluations<Parts, array<_V, Parts>>(\n+      return __generate_from_n_evaluations<_Parts, array<_V, _Parts>>(\n \t       [&](auto __i) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA { return __x[__i]; });\n     }\n   else\n     {\n-      return __generate_from_n_evaluations<Parts, array<_V, Parts>>(\n+      return __generate_from_n_evaluations<_Parts, array<_V, _Parts>>(\n \t       [&](auto __i) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n \t\t if constexpr (__is_fixed_size_abi_v<typename _V::abi_type>)\n \t\t   return _V([&](auto __j) constexpr _GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA {\n \t\t\t    return __x[__i * _V::size() + __j];\n \t\t\t  });\n \t\t else\n \t\t   return _V(__private_init,\n-\t\t\t     __extract_part<decltype(__i)::value, Parts>(__data(__x)));\n+\t\t\t     __extract_part<decltype(__i)::value, _Parts>(__data(__x)));\n \t       });\n     }\n   }"}]}