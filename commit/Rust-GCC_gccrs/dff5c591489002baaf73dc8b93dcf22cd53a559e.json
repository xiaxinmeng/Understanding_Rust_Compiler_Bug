{"sha": "dff5c591489002baaf73dc8b93dcf22cd53a559e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZmNWM1OTE0ODkwMDJiYWFmNzNkYzhiOTNkY2YyMmNkNTNhNTU5ZQ==", "commit": {"author": {"name": "Yvan Roux", "email": "yvan.roux@linaro.org", "date": "2013-04-11T12:06:04Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-04-11T12:06:04Z"}, "message": "gcconfig.h (AARCH64): New macro (defined only if __aarch64__).\n\n2013-03-16  Yvan Roux <yvan.roux@linaro.org>\n\n        * include/private/gcconfig.h (AARCH64): New macro (defined only if\n\t__aarch64__).\n\t* include/private/gcconfig.h (mach_type_known):\n\tUpdate comment adding ARM AArch64 target.\n\t* include/private/gcconfig.h (NOSYS, mach_type_known,CPP_WORDSZ,\n\tMACH_TYPE, ALIGNMENT, HBLKSIZE, OS_TYPE, LINUX_STACKBOTTOM,\n\tUSE_GENERIC_PUSH_REGS, DYNAMIC_LOADING, DATASTART, DATAEND,\n\tSTACKBOTTOM): Define for AArch64.\n\nFrom-SVN: r197770", "tree": {"sha": "9f02e321f385d2668fd21b16d70b252206be17ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f02e321f385d2668fd21b16d70b252206be17ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dff5c591489002baaf73dc8b93dcf22cd53a559e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff5c591489002baaf73dc8b93dcf22cd53a559e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dff5c591489002baaf73dc8b93dcf22cd53a559e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff5c591489002baaf73dc8b93dcf22cd53a559e/comments", "author": {"login": "yroux", "id": 2749479, "node_id": "MDQ6VXNlcjI3NDk0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2749479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yroux", "html_url": "https://github.com/yroux", "followers_url": "https://api.github.com/users/yroux/followers", "following_url": "https://api.github.com/users/yroux/following{/other_user}", "gists_url": "https://api.github.com/users/yroux/gists{/gist_id}", "starred_url": "https://api.github.com/users/yroux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yroux/subscriptions", "organizations_url": "https://api.github.com/users/yroux/orgs", "repos_url": "https://api.github.com/users/yroux/repos", "events_url": "https://api.github.com/users/yroux/events{/privacy}", "received_events_url": "https://api.github.com/users/yroux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba5ea117ac17ad00bb26b2cb64588ae345a6491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba5ea117ac17ad00bb26b2cb64588ae345a6491"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "475bb2c191adae72ac0e6babd120a7873882fa58", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dff5c591489002baaf73dc8b93dcf22cd53a559e/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dff5c591489002baaf73dc8b93dcf22cd53a559e/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=dff5c591489002baaf73dc8b93dcf22cd53a559e", "patch": "@@ -60,6 +60,13 @@\n # endif\n \n /* Determine the machine type: */\n+#if defined(__aarch64__)\n+#    define AARCH64\n+#    if !defined(LINUX)\n+#      define NOSYS\n+#      define mach_type_known\n+#    endif\n+# endif\n # if defined(__arm__) || defined(__thumb__)\n #    define ARM32\n #    if !defined(LINUX) && !defined(NETBSD)\n@@ -239,6 +246,10 @@\n #    define IA64\n #    define mach_type_known\n # endif\n+# if defined(LINUX) && defined(__aarch64__)\n+#    define AARCH64\n+#    define mach_type_known\n+# endif\n # if defined(LINUX) && defined(__arm__)\n #    define ARM32\n #    define mach_type_known\n@@ -500,6 +511,7 @@\n \t\t    /* \t\t\trunning Amdahl UTS4\t\t*/\n                     /*             S390       ==> 390-like machine      */\n \t\t    /*                  running LINUX                   */\n+                    /*             AARCH64    ==> ARM AArch64           */\n \t\t    /* \t\t   ARM32      ==> Intel StrongARM\t*/\n \t\t    /* \t\t   IA64\t      ==> Intel IPF\t\t*/\n \t\t    /*\t\t\t\t  (e.g. Itanium)\t*/\n@@ -1833,6 +1845,32 @@\n #   define HEURISTIC1\n # endif\n \n+# ifdef AARCH64\n+#   define CPP_WORDSZ 64\n+#   define MACH_TYPE \"AARCH64\"\n+#   define ALIGNMENT 8\n+#   ifndef HBLKSIZE\n+#     define HBLKSIZE 4096\n+#   endif\n+#   ifdef LINUX\n+#     define OS_TYPE \"LINUX\"\n+#     define LINUX_STACKBOTTOM\n+#     define USE_GENERIC_PUSH_REGS\n+#     define DYNAMIC_LOADING\n+      extern int __data_start[];\n+#     define DATASTART ((ptr_t)__data_start)\n+      extern char _end[];\n+#     define DATAEND ((ptr_t)(&_end))\n+#   endif\n+#   ifdef NOSYS\n+      /* __data_start is usually defined in the target linker script.   */\n+      extern int __data_start[];\n+#     define DATASTART ((ptr_t)__data_start)\n+      extern void *__stack_base__;\n+#     define STACKBOTTOM ((ptr_t)__stack_base__)\n+#   endif\n+# endif\n+\n # ifdef ARM32\n #   define CPP_WORDSZ 32\n #   define MACH_TYPE \"ARM32\""}]}