{"sha": "326f06f769f7dcd046871f59eed8fba7ef3147cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI2ZjA2Zjc2OWY3ZGNkMDQ2ODcxZjU5ZWVkOGZiYTdlZjMxNDdjZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-14T01:47:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-14T01:47:45Z"}, "message": "(reorg_redirect_jump): New function.\n\nCall it in most places instead of redirect_jump.\n\nFrom-SVN: r4443", "tree": {"sha": "1996f8de951af147d452db7ea9fb7a60961bfcb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1996f8de951af147d452db7ea9fb7a60961bfcb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/326f06f769f7dcd046871f59eed8fba7ef3147cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/326f06f769f7dcd046871f59eed8fba7ef3147cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/326f06f769f7dcd046871f59eed8fba7ef3147cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/326f06f769f7dcd046871f59eed8fba7ef3147cf/comments", "author": null, "committer": null, "parents": [{"sha": "6d5363fa3de2cf709bfc8becf7cd031a1b245cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d5363fa3de2cf709bfc8becf7cd031a1b245cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d5363fa3de2cf709bfc8becf7cd031a1b245cbc"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "409bf81b1cc361cee1010a7791c9c2709cabc493", "filename": "gcc/reorg.c", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/326f06f769f7dcd046871f59eed8fba7ef3147cf/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/326f06f769f7dcd046871f59eed8fba7ef3147cf/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=326f06f769f7dcd046871f59eed8fba7ef3147cf", "patch": "@@ -248,6 +248,7 @@ static int redundant_insn_p\tPROTO((rtx, rtx, rtx));\n static int own_thread_p\t\tPROTO((rtx, rtx, int));\n static int find_basic_block\tPROTO((rtx));\n static void update_block\tPROTO((rtx, rtx));\n+static int reorg_redirect_jump PROTO((rtx, rtx));\n static void update_reg_dead_notes PROTO((rtx, rtx));\n static void update_live_status\tPROTO((rtx, rtx));\n static rtx next_insn_no_annul\tPROTO((rtx));\n@@ -1121,7 +1122,7 @@ optimize_skip (insn)\n \t  target_label = JUMP_LABEL (next_trial);\n \t  if (target_label == 0)\n \t    target_label = find_end_label ();\n-\t  redirect_jump (insn, target_label);\n+\t  reorg_redirect_jump (insn, target_label);\n \t}\n \n       INSN_ANNULLED_BRANCH_P (insn) = 1;\n@@ -2077,6 +2078,22 @@ update_block (insn, where)\n     bb_ticks[b]++;\n }\n \n+/* Similar to REDIRECT_JUMP except that we update the BB_TICKS entry for\n+   the basic block containing the jump.  */\n+\n+static int\n+reorg_redirect_jump (jump, nlabel)\n+     rtx jump;\n+     rtx nlabel;\n+{\n+  int b = find_basic_block (jump);\n+\n+  if (b != -1)\n+    bb_ticks[b]++;\n+\n+  return redirect_jump (jump, nlabel);\n+}\n+\n /* Called when INSN is being moved forward into a delay slot of DELAYED_INSN.\n    We check every instruction between INSN and DELAYED_INSN for REG_DEAD notes\n    that reference values used in INSN.  If we find one, then we move the\n@@ -2908,12 +2925,12 @@ fill_simple_delay_slots (first, non_jumps_p)\n \t      delay_list \n \t\t= add_to_delay_list (copy_rtx (next_trial), delay_list);\n \t      slots_filled++;\n-\t      redirect_jump (trial, new_label);\n+\t      reorg_redirect_jump (trial, new_label);\n \n \t      /* If we merged because we both jumped to the same place,\n \t\t redirect the original insn also.  */\n \t      if (target)\n-\t\tredirect_jump (insn, new_label);\n+\t\treorg_redirect_jump (insn, new_label);\n \t    }\n \t}\n \n@@ -3347,7 +3364,7 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n       else\n \tlabel = get_label_before (new_thread);\n \n-      redirect_jump (insn, label);\n+      reorg_redirect_jump (insn, label);\n     }\n \n   return delay_list;\n@@ -3513,7 +3530,7 @@ relax_delay_slots (first)\n \t    }\n \n \t  if (target_label != JUMP_LABEL (insn))\n-\t    redirect_jump (insn, target_label);\n+\t    reorg_redirect_jump (insn, target_label);\n \n \t  /* See if this jump branches around a unconditional jump.\n \t     If so, invert this jump and point it to the target of the\n@@ -3578,7 +3595,7 @@ relax_delay_slots (first)\n \t    ++LABEL_NUSES (other_target);\n \n \t  if (invert_jump (other, target_label))\n-\t    redirect_jump (insn, other_target);\n+\t    reorg_redirect_jump (insn, other_target);\n \n \t  if (other_target)\n \t    --LABEL_NUSES (other_target);\n@@ -3620,7 +3637,7 @@ relax_delay_slots (first)\n \n \t  if (trial != target_label)\n \t    {\n-\t      redirect_jump (delay_insn, trial);\n+\t      reorg_redirect_jump (delay_insn, trial);\n \t      target_label = trial;\n \t    }\n \n@@ -3635,7 +3652,7 @@ relax_delay_slots (first)\n \t\ttarget_label = find_end_label ();\n \t      else\n \t\ttarget_label = get_label_before (trial);\n-\t      redirect_jump (delay_insn, target_label);\n+\t      reorg_redirect_jump (delay_insn, target_label);\n \t      next = insn;\n \t      continue;\n \t    }\n@@ -3652,7 +3669,7 @@ relax_delay_slots (first)\n \t      target_label = JUMP_LABEL (XVECEXP (PATTERN (trial), 0, 0));\n \t      if (target_label == 0)\n \t\ttarget_label = find_end_label ();\n-\t      redirect_jump (delay_insn, target_label);\n+\t      reorg_redirect_jump (delay_insn, target_label);\n \t      next = insn;\n \t      continue;\n \t    }\n@@ -3802,9 +3819,9 @@ make_return_insns (first)\n \n       /* If we can't make the jump into a RETURN, redirect it to the best\n \t RETURN and go on to the next insn.  */\n-      if (! redirect_jump (jump_insn, NULL_RTX))\n+      if (! reorg_redirect_jump (jump_insn, NULL_RTX))\n \t{\n-\t  redirect_jump (jump_insn, real_return_label);\n+\t  reorg_redirect_jump (jump_insn, real_return_label);\n \t  continue;\n \t}\n \n@@ -3860,7 +3877,7 @@ make_return_insns (first)\n       else\n \t/* It is probably more efficient to keep this with its current\n \t   delay slot as a branch to a RETURN.  */\n-\tredirect_jump (jump_insn, real_return_label);\n+\treorg_redirect_jump (jump_insn, real_return_label);\n     }\n \n   /* Now delete REAL_RETURN_LABEL if we never used it.  Then try to fill any"}]}