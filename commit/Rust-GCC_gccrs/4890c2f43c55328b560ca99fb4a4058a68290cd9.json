{"sha": "4890c2f43c55328b560ca99fb4a4058a68290cd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5MGMyZjQzYzU1MzI4YjU2MGNhOTlmYjRhNDA1OGE2ODI5MGNkOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-01-03T00:24:04Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-03T00:24:04Z"}, "message": "class.c (invalidate_class_lookup_cache): Zero the previous_class_values.\n\n\t* class.c (invalidate_class_lookup_cache): Zero the\n\tprevious_class_values.\n\t* cp-tree.h (TMPL_PARMS_DEPTH): Use TREE_INT_CST_LOW, not\n\tTREE_INT_CST_HIGH.\n\t(CLASSTYPE_TEMPLATE_LEVEL): Likewise.\n\t* decl.c (free_bindings): New variable.\n\t(push_binding): Don't create a new binding if we have one on the\n\tfree list.\n\t(pop_binding): Put old bindings on the free list.\n\t(init_decl_processing): Use size_int, not build_int_2.\n\tRegister free_bindings as a GC root.\n\t(cp_make_fname_decl): Use size_int, not build_int_2.\n\t(push_inline_template_parms_recursive): Likewise.\n\t(end_template_parm_list): Likewise.\n\t(for_each_tempalte_parm): Do not use walk_tree_without_duplicates.\n\t(tsubst_template_parms): Use size_int, not build_int_2.\n\t(tsubst): Likewise.\n\t* rtti.c (get_vmi_pseudo_type_info): Likewise.\n\nFrom-SVN: r38641", "tree": {"sha": "6c3f7f84a08085fee5d7b256e232927293cd5a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c3f7f84a08085fee5d7b256e232927293cd5a7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4890c2f43c55328b560ca99fb4a4058a68290cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4890c2f43c55328b560ca99fb4a4058a68290cd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4890c2f43c55328b560ca99fb4a4058a68290cd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4890c2f43c55328b560ca99fb4a4058a68290cd9/comments", "author": null, "committer": null, "parents": [{"sha": "55560b9da47bf6fef84d3b217e9019b0a07b1821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55560b9da47bf6fef84d3b217e9019b0a07b1821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55560b9da47bf6fef84d3b217e9019b0a07b1821"}], "stats": {"total": 95, "additions": 71, "deletions": 24}, "files": [{"sha": "ee542c8eec2d0f9c4983c3b58a95bd268163a2a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4890c2f43c55328b560ca99fb4a4058a68290cd9", "patch": "@@ -1,3 +1,24 @@\n+2001-01-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (invalidate_class_lookup_cache): Zero the\n+\tprevious_class_values.\n+\t* cp-tree.h (TMPL_PARMS_DEPTH): Use TREE_INT_CST_LOW, not\n+\tTREE_INT_CST_HIGH.\n+\t(CLASSTYPE_TEMPLATE_LEVEL): Likewise.\n+\t* decl.c (free_bindings): New variable.\n+\t(push_binding): Don't create a new binding if we have one on the\n+\tfree list.\n+\t(pop_binding): Put old bindings on the free list.\n+\t(init_decl_processing): Use size_int, not build_int_2.\n+\tRegister free_bindings as a GC root.\n+\t(cp_make_fname_decl): Use size_int, not build_int_2.\n+\t(push_inline_template_parms_recursive): Likewise.\n+\t(end_template_parm_list): Likewise.\n+\t(for_each_tempalte_parm): Do not use walk_tree_without_duplicates.\n+\t(tsubst_template_parms): Use size_int, not build_int_2.\n+\t(tsubst): Likewise.\n+\t* rtti.c (get_vmi_pseudo_type_info): Likewise.\n+\t\n 2001-01-02  Richard Henderson  <rth@redhat.com>\n \n \t* parse.y (asm): Set ASM_INPUT_P."}, {"sha": "65281a64f347ea4c263f224dd9e9a872a886908a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4890c2f43c55328b560ca99fb4a4058a68290cd9", "patch": "@@ -5643,12 +5643,11 @@ invalidate_class_lookup_cache ()\n {\n   tree t;\n   \n-  /* This code can be seen as a cache miss.  When we've cached a\n-     class' scope's bindings and we can't use them, we need to reset\n-     them.  This is it!  */\n+  /* The IDENTIFIER_CLASS_VALUEs are no longer valid.  */\n   for (t = previous_class_values; t; t = TREE_CHAIN (t))\n     IDENTIFIER_CLASS_VALUE (TREE_PURPOSE (t)) = NULL_TREE;\n-  \n+\n+  previous_class_values = NULL_TREE;\n   previous_class_type = NULL_TREE;\n }\n  "}, {"sha": "61ec093ee9cc6363341a8f23050d21c160c3598b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4890c2f43c55328b560ca99fb4a4058a68290cd9", "patch": "@@ -2346,7 +2346,7 @@ struct lang_decl\n \n /* The number of levels of template parameters given by NODE.  */\n #define TMPL_PARMS_DEPTH(NODE) \\\n-  (TREE_INT_CST_HIGH (TREE_PURPOSE (NODE)))\n+  (TREE_INT_CST_LOW (TREE_PURPOSE (NODE)))\n \n /* The TEMPLATE_DECL instantiated or specialized by NODE.  This\n    TEMPLATE_DECL will be the immediate parent, not the most general\n@@ -2791,7 +2791,7 @@ extern int flag_new_for_scope;\n /* Accessor macros for C++ template decl nodes.  */\n \n /* The DECL_TEMPLATE_PARMS are a list.  The TREE_PURPOSE of each node\n-   is a INT_CST whose TREE_INT_CST_HIGH indicates the level of the\n+   is a INT_CST whose TREE_INT_CST_LOW indicates the level of the\n    template parameters, with 1 being the outermost set of template\n    parameters.  The TREE_VALUE is a vector, whose elements are the\n    template parameters at each level.  Each element in the vector is a\n@@ -2919,7 +2919,7 @@ extern int flag_new_for_scope;\n #define PRIMARY_TEMPLATE_P(NODE) (DECL_PRIMARY_TEMPLATE (NODE) == NODE)\n \n #define CLASSTYPE_TEMPLATE_LEVEL(NODE) \\\n-  (TREE_INT_CST_HIGH (TREE_PURPOSE (CLASSTYPE_TI_TEMPLATE (NODE))))\n+  (TREE_INT_CST_LOW (TREE_PURPOSE (CLASSTYPE_TI_TEMPLATE (NODE))))\n \n /* Indicates whether or not (and how) a template was expanded for this\n    FUNCTION_DECL or VAR_DECL."}, {"sha": "902cdaf468814b68f5bbe6ab62b97f90d3efa5bd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4890c2f43c55328b560ca99fb4a4058a68290cd9", "patch": "@@ -940,6 +940,11 @@ note_level_for_eh ()\n #define BINDING_LEVEL(NODE) \\\n    (((struct tree_binding*)NODE)->scope.level)\n \n+/* A free list of CPLUS_BINDING nodes, connected by their\n+   TREE_CHAINs.  */\n+\n+static tree free_bindings;\n+\n /* Make DECL the innermost binding for ID.  The LEVEL is the binding\n    level at which this declaration is being bound.  */\n \n@@ -951,7 +956,13 @@ push_binding (id, decl, level)\n {\n   tree binding;\n \n-  binding = make_node (CPLUS_BINDING);\n+  if (free_bindings)\n+    {\n+      binding = free_bindings;\n+      free_bindings = TREE_CHAIN (binding);\n+    }\n+  else\n+    binding = make_node (CPLUS_BINDING);\n \n   /* Now, fill in the binding information.  */\n   BINDING_VALUE (binding) = decl;\n@@ -1189,9 +1200,19 @@ pop_binding (id, decl)\n     my_friendly_abort (0);\n \n   if (!BINDING_VALUE (binding) && !BINDING_TYPE (binding))\n-    /* We're completely done with the innermost binding for this\n-       identifier.  Unhook it from the list of bindings.  */\n-    IDENTIFIER_BINDING (id) = TREE_CHAIN (binding);\n+    {\n+      /* We're completely done with the innermost binding for this\n+\t identifier.  Unhook it from the list of bindings.  */\n+      IDENTIFIER_BINDING (id) = TREE_CHAIN (binding);\n+\n+      /* Add it to the free list.  */\n+      TREE_CHAIN (binding) = free_bindings;\n+      free_bindings = binding;\n+\n+      /* Clear the BINDING_LEVEL so the garbage collector doesn't walk\n+\t it.  */\n+      BINDING_LEVEL (binding) = NULL;\n+    }\n }\n \n /* When a label goes out of scope, check to see if that label was used\n@@ -6472,7 +6493,7 @@ init_decl_processing ()\n   /* Make a type to be the domain of a few array types\n      whose domains don't really matter.\n      200 is small enough that it always fits in size_t.  */\n-  array_domain_type = build_index_type (build_int_2 (200, 0));\n+  array_domain_type = build_index_type (size_int (200));\n \n   /* Make a type for arrays of characters.\n      With luck nothing will ever really depend on the length of this\n@@ -6692,6 +6713,7 @@ init_decl_processing ()\n \n   ggc_add_tree_root (&current_lang_name, 1);\n   ggc_add_tree_root (&static_aggregates, 1);\n+  ggc_add_tree_root (&free_bindings, 1);\n }\n \n /* Create the VAR_DECL for __FUNCTION__ etc. ID is the name to give the\n@@ -6715,7 +6737,7 @@ cp_make_fname_decl (id, name, type_dep)\n   if (!processing_template_decl)\n     type_dep = 0;\n   if (!type_dep)\n-    domain = build_index_type (build_int_2 (length, 0));\n+    domain = build_index_type (size_int (length));\n \n   type =  build_cplus_array_type\n           (build_qualified_type (char_type_node, TYPE_QUAL_CONST),"}, {"sha": "e838a9807b8328f9ab1f42eda7e14b7b0b23f6f6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4890c2f43c55328b560ca99fb4a4058a68290cd9", "patch": "@@ -322,7 +322,7 @@ push_inline_template_parms_recursive (parmlist, levels)\n \n   ++processing_template_decl;\n   current_template_parms\n-    = tree_cons (build_int_2 (0, processing_template_decl),\n+    = tree_cons (size_int (processing_template_decl),\n \t\t parms, current_template_parms);\n   TEMPLATE_PARMS_FOR_INLINE (current_template_parms) = 1;\n \n@@ -1918,7 +1918,7 @@ end_template_parm_list (parms)\n   tree saved_parmlist = make_tree_vec (list_length (parms));\n \n   current_template_parms\n-    = tree_cons (build_int_2 (0, processing_template_decl),\n+    = tree_cons (size_int (processing_template_decl),\n \t\t saved_parmlist, current_template_parms);\n \n   for (parm = parms, nparms = 0; \n@@ -4195,6 +4195,7 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n \t explicitly here.  */\n       if (for_each_template_parm (TYPE_METHOD_BASETYPE (t), fn, data))\n \treturn error_mark_node;\n+      /* Fall through.  */\n \n     case FUNCTION_TYPE:\n       /* Check the return type.  */\n@@ -4323,10 +4324,14 @@ for_each_template_parm (t, fn, data)\n   pfd.fn = fn;\n   pfd.data = data;\n \n-  /* Walk the tree.  */\n-  return walk_tree_without_duplicates (&t, \n-\t\t\t\t       for_each_template_parm_r, \n-\t\t\t\t       &pfd) != NULL_TREE;\n+  /* Walk the tree.  (Conceptually, we would like to walk without\n+     duplicates, but for_each_template_parm_r recursively calls\n+     for_each_template_parm, so we would need to reorganize a fair\n+     bit to use walk_tree_without_duplicates.)  */\n+  return walk_tree (&t, \n+\t\t    for_each_template_parm_r, \n+\t\t    &pfd,\n+\t\t    NULL) != NULL_TREE;\n }\n \n int\n@@ -5315,8 +5320,8 @@ tsubst_template_parms (parms, args, complain)\n \t}\n       \n       *new_parms = \n-\ttree_cons (build_int_2 (0, (TMPL_PARMS_DEPTH (parms) \n-\t\t\t\t    - TMPL_ARGS_DEPTH (args))),\n+\ttree_cons (size_int (TMPL_PARMS_DEPTH (parms) \n+\t\t\t     - TMPL_ARGS_DEPTH (args)),\n \t\t   new_vec, NULL_TREE);\n     }\n \n@@ -6759,8 +6764,8 @@ tsubst (t, args, complain, in_decl)\n \t   c-common.c.  */\n \tname = (*decl_printable_name) (current_function_decl, 2);\n \tlen = strlen (name) + 1;\n-\ttype =  build_array_type (char_type_node,\n-\t\t\t\t  build_index_type (build_int_2 (len, 0)));\n+\ttype =  build_array_type (char_type_node, \n+\t\t\t\t  build_index_type (size_int (len)));\n \tstr = build_string (len, name);\n \tTREE_TYPE (str) = type;\n \treturn str;"}, {"sha": "417f165a82727b0227b94e0e26d8e7d38e15a025", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4890c2f43c55328b560ca99fb4a4058a68290cd9/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=4890c2f43c55328b560ca99fb4a4058a68290cd9", "patch": "@@ -1839,7 +1839,7 @@ get_vmi_pseudo_type_info (num_bases)\n     return desc;\n   \n   /* Add number of bases and trailing array of base_class_type_info.  */\n-  array_domain = build_index_type (build_int_2 (num_bases, 0));\n+  array_domain = build_index_type (size_int (num_bases));\n   base_array = build_array_type (base_desc_type_node, array_domain);\n \n   push_nested_namespace (abi_node);"}]}