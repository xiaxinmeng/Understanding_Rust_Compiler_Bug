{"sha": "caf17f3afa83623c0f538f6c91c7699c4fdd5674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FmMTdmM2FmYTgzNjIzYzBmNTM4ZjZjOTFjNzY5OWM0ZmRkNTY3NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-19T22:56:39Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-21T20:27:25Z"}, "message": "c++: Fix wrong error with constexpr destructor [PR97427]\n\nWhen I implemented the code to detect modifying const objects in\nconstexpr contexts, we couldn't have constexpr destructors, so I didn't\nconsider them.  But now we can and that caused a bogus error in this\ntestcase: [class.dtor]p5 says that \"const and volatile semantics are not\napplied on an object under destruction.  They stop being in effect when\nthe destructor for the most derived object starts.\" so we have to clear\nthe TREE_READONLY flag we set on the object after the constructors have\nbeen called to mark it as no-longer-under-construction.  In the ~Foo\ncall it's now an object under destruction, so don't report those errors.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97427\n\t* constexpr.c (cxx_set_object_constness): New function.\n\t(cxx_eval_call_expression): Set new_obj for destructors too.\n\tCall cxx_set_object_constness to set/unset TREE_READONLY of\n\tthe object under construction/destruction.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97427\n\t* g++.dg/cpp2a/constexpr-dtor10.C: New test.", "tree": {"sha": "f461807ad6883933545c9ce7590ead90eace474e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f461807ad6883933545c9ce7590ead90eace474e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caf17f3afa83623c0f538f6c91c7699c4fdd5674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf17f3afa83623c0f538f6c91c7699c4fdd5674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf17f3afa83623c0f538f6c91c7699c4fdd5674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf17f3afa83623c0f538f6c91c7699c4fdd5674/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62d19588b9a08077dce7990d90dc61033a0b240d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d19588b9a08077dce7990d90dc61033a0b240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d19588b9a08077dce7990d90dc61033a0b240d"}], "stats": {"total": 65, "additions": 49, "deletions": 16}, "files": [{"sha": "ef37b3043a54db4e0cfb5cf930ada76e1af2fc1c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf17f3afa83623c0f538f6c91c7699c4fdd5674/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf17f3afa83623c0f538f6c91c7699c4fdd5674/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=caf17f3afa83623c0f538f6c91c7699c4fdd5674", "patch": "@@ -2187,6 +2187,27 @@ cxx_eval_thunk_call (const constexpr_ctx *ctx, tree t, tree thunk_fndecl,\n \t\t\t\t       non_constant_p, overflow_p);\n }\n \n+/* If OBJECT is of const class type, evaluate it to a CONSTRUCTOR and set\n+   its TREE_READONLY flag according to READONLY_P.  Used for constexpr\n+   'tors to detect modifying const objects in a constexpr context.  */\n+\n+static void\n+cxx_set_object_constness (const constexpr_ctx *ctx, tree object,\n+\t\t\t  bool readonly_p, bool *non_constant_p,\n+\t\t\t  bool *overflow_p)\n+{\n+  if (CLASS_TYPE_P (TREE_TYPE (object))\n+      && CP_TYPE_CONST_P (TREE_TYPE (object)))\n+    {\n+      /* Subobjects might not be stored in ctx->global->values but we\n+\t can get its CONSTRUCTOR by evaluating *this.  */\n+      tree e = cxx_eval_constant_expression (ctx, object, /*lval*/false,\n+\t\t\t\t\t     non_constant_p, overflow_p);\n+      if (TREE_CODE (e) == CONSTRUCTOR && !*non_constant_p)\n+\tTREE_READONLY (e) = readonly_p;\n+    }\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Evaluate the call expression tree T in the context of OLD_CALL expression\n    evaluation.  */\n@@ -2515,11 +2536,11 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \n   depth_ok = push_cx_call_context (t);\n \n-  /* Remember the object we are constructing.  */\n+  /* Remember the object we are constructing or destructing.  */\n   tree new_obj = NULL_TREE;\n-  if (DECL_CONSTRUCTOR_P (fun))\n+  if (DECL_CONSTRUCTOR_P (fun) || DECL_DESTRUCTOR_P (fun))\n     {\n-      /* In a constructor, it should be the first `this' argument.\n+      /* In a cdtor, it should be the first `this' argument.\n \t At this point it has already been evaluated in the call\n \t to cxx_bind_parameters_in_call.  */\n       new_obj = TREE_VEC_ELT (new_call.bindings, 0);\n@@ -2656,6 +2677,12 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  unsigned save_heap_alloc_count = ctx->global->heap_vars.length ();\n \t  unsigned save_heap_dealloc_count = ctx->global->heap_dealloc_count;\n \n+\t  /* If this is a constexpr destructor, the object's const and volatile\n+\t     semantics are no longer in effect; see [class.dtor]p5.  */\n+\t  if (new_obj && DECL_DESTRUCTOR_P (fun))\n+\t    cxx_set_object_constness (ctx, new_obj, /*readonly_p=*/false,\n+\t\t\t\t      non_constant_p, overflow_p);\n+\n \t  tree jump_target = NULL_TREE;\n \t  cxx_eval_constant_expression (&ctx_with_save_exprs, body,\n \t\t\t\t\tlval, non_constant_p, overflow_p,\n@@ -2686,19 +2713,9 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t     the object is no longer under construction, and its possible\n \t     'const' semantics now apply.  Make a note of this fact by\n \t     marking the CONSTRUCTOR TREE_READONLY.  */\n-\t  if (new_obj\n-\t      && CLASS_TYPE_P (TREE_TYPE (new_obj))\n-\t      && CP_TYPE_CONST_P (TREE_TYPE (new_obj)))\n-\t    {\n-\t      /* Subobjects might not be stored in ctx->global->values but we\n-\t\t can get its CONSTRUCTOR by evaluating *this.  */\n-\t      tree e = cxx_eval_constant_expression (ctx, new_obj,\n-\t\t\t\t\t\t     /*lval*/false,\n-\t\t\t\t\t\t     non_constant_p,\n-\t\t\t\t\t\t     overflow_p);\n-\t      if (TREE_CODE (e) == CONSTRUCTOR && !*non_constant_p)\n-\t\tTREE_READONLY (e) = true;\n-\t    }\n+\t  if (new_obj && DECL_CONSTRUCTOR_P (fun))\n+\t    cxx_set_object_constness (ctx, new_obj, /*readonly_p=*/true,\n+\t\t\t\t      non_constant_p, overflow_p);\n \n \t  /* Forget the saved values of the callee's SAVE_EXPRs and\n \t     TARGET_EXPRs.  */"}, {"sha": "1551746b42ba41da9c1bbc3f40e4962ef6d77541", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor10.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caf17f3afa83623c0f538f6c91c7699c4fdd5674/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caf17f3afa83623c0f538f6c91c7699c4fdd5674/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor10.C?ref=caf17f3afa83623c0f538f6c91c7699c4fdd5674", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/97427\n+// { dg-do compile { target c++20 } }\n+\n+struct Foo {\n+    int n = 1;\n+    constexpr ~Foo() {\n+        n = 0;\n+    }\n+};\n+\n+constexpr bool foo() {\n+    const Foo b;\n+    return true;\n+}\n+\n+static_assert(foo());"}]}