{"sha": "1ab2888d261c07b45f45dfe32cedcab557440548", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiMjg4OGQyNjFjMDdiNDVmNDVkZmUzMmNlZGNhYjU1NzQ0MDU0OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2004-05-03T15:17:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-05-03T15:17:19Z"}, "message": "* 50system.ads, 59system.ads, s-thread.ads: Removed, no longer used.\n\nFrom-SVN: r81436", "tree": {"sha": "a611bf6163f771092a6af4e198ed27ef8dbca4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a611bf6163f771092a6af4e198ed27ef8dbca4a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab2888d261c07b45f45dfe32cedcab557440548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab2888d261c07b45f45dfe32cedcab557440548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab2888d261c07b45f45dfe32cedcab557440548", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab2888d261c07b45f45dfe32cedcab557440548/comments", "author": null, "committer": null, "parents": [{"sha": "493b3c9c47bcb52cc518a865a9d79fddd563337d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493b3c9c47bcb52cc518a865a9d79fddd563337d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493b3c9c47bcb52cc518a865a9d79fddd563337d"}], "stats": {"total": 481, "additions": 4, "deletions": 477}, "files": [{"sha": "e3277e56789e8a2a611317730afafe7941c36df9", "filename": "gcc/ada/50system.ads", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493b3c9c47bcb52cc518a865a9d79fddd563337d/gcc%2Fada%2F50system.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493b3c9c47bcb52cc518a865a9d79fddd563337d/gcc%2Fada%2F50system.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F50system.ads?ref=493b3c9c47bcb52cc518a865a9d79fddd563337d", "patch": "@@ -1,163 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                        (VxWorks/HIE Version PPC)                         --\n---                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Restrictions (No_Exception_Handlers);\n-pragma Restrictions (No_Implicit_Dynamic_Code);\n-pragma Restrictions (No_Finalization);\n-pragma Discard_Names;\n-\n-package System is\n-pragma Pure (System);\n---  Note that we take advantage of the implementation permission to\n---  make this unit Pure instead of Preelaborable, see RM 13.7(36)\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int               : constant := Long_Long_Integer'First;\n-   Max_Int               : constant := Long_Long_Integer'Last;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n-   Max_Nonbinary_Modulus : constant := Integer'Last;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := 63;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   AAMP                      : constant Boolean := False;\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := False;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := True;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := True;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Fractional_Fixed_Ops      : constant Boolean := False;\n-   Frontend_Layout           : constant Boolean := False;\n-   Functions_Return_By_DSP   : constant Boolean := False;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   OpenVMS                   : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n-   Support_64_Bit_Divides    : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Suppress_Standard_Library : constant Boolean := True;\n-   Use_Ada_Main_Program_Name : constant Boolean := True;\n-   ZCX_By_Default            : constant Boolean := False;\n-   GCC_ZCX_Support           : constant Boolean := False;\n-   Front_End_ZCX_Support     : constant Boolean := False;\n-\n-   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n-\n-   High_Integrity_Mode       : constant Boolean := True;\n-   Long_Shifts_Inlined       : constant Boolean := False;\n-\n-end System;"}, {"sha": "f155af878b057691a20d0484188e5b4a1ccdbb73", "filename": "gcc/ada/59system.ads", "status": "removed", "additions": 0, "deletions": 164, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493b3c9c47bcb52cc518a865a9d79fddd563337d/gcc%2Fada%2F59system.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493b3c9c47bcb52cc518a865a9d79fddd563337d/gcc%2Fada%2F59system.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F59system.ads?ref=493b3c9c47bcb52cc518a865a9d79fddd563337d", "patch": "@@ -1,164 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                            (PPC ELF Version)                             --\n---                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Restrictions (No_Exception_Handlers);\n-pragma Restrictions (No_Implicit_Dynamic_Code);\n-pragma Restrictions (No_Finalization);\n-pragma Discard_Names;\n---  Above pragmas need commenting ???\n-\n-package System is\n-pragma Pure (System);\n---  Note that we take advantage of the implementation permission to\n---  make this unit Pure instead of Preelaborable, see RM 13.7(36)\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int               : constant := Long_Long_Integer'First;\n-   Max_Int               : constant := Long_Long_Integer'Last;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n-   Max_Nonbinary_Modulus : constant := Integer'Last;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := 63;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   AAMP                      : constant Boolean := False;\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := False;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := True;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := True;\n-   Exit_Status_Supported     : constant Boolean := False;\n-   Fractional_Fixed_Ops      : constant Boolean := False;\n-   Frontend_Layout           : constant Boolean := False;\n-   Functions_Return_By_DSP   : constant Boolean := False;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   OpenVMS                   : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := False;\n-   Support_64_Bit_Divides    : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Suppress_Standard_Library : constant Boolean := True;\n-   Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := False;\n-   GCC_ZCX_Support           : constant Boolean := False;\n-   Front_End_ZCX_Support     : constant Boolean := False;\n-\n-   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n-\n-   High_Integrity_Mode       : constant Boolean := True;\n-   Long_Shifts_Inlined       : constant Boolean := False;\n-\n-end System;"}, {"sha": "d2b4da737e2edcc7584234b23302f67f3a5262b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab2888d261c07b45f45dfe32cedcab557440548/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab2888d261c07b45f45dfe32cedcab557440548/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1ab2888d261c07b45f45dfe32cedcab557440548", "patch": "@@ -1,3 +1,7 @@\n+2004-05-03  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* 50system.ads, 59system.ads, s-thread.ads: Removed, no longer used.\n+\n 2004-05-03  Olivier Hainque  <hainque@act-europe.fr>\n \n \tPR ada/15152"}, {"sha": "6798acbedbec56035bb9d103106dc0b09b170b2b", "filename": "gcc/ada/s-thread.ads", "status": "removed", "additions": 0, "deletions": 150, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493b3c9c47bcb52cc518a865a9d79fddd563337d/gcc%2Fada%2Fs-thread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493b3c9c47bcb52cc518a865a9d79fddd563337d/gcc%2Fada%2Fs-thread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-thread.ads?ref=493b3c9c47bcb52cc518a865a9d79fddd563337d", "patch": "@@ -1,150 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                       S Y S T E M . T H R E A D S                        --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package provides facilities to register a thread to the runtime,\n---  and allocate its task specific datas.\n-\n---  This package is currently implemented for:\n---  VxWorks AE653 rts-cert\n---  VxWorks AE653 rts-full (not rts-kernel)\n-\n-with Ada.Exceptions;\n---  used for Exception_Occurrence\n-\n-with System.Soft_Links;\n---  used for TSD\n-\n-with Unchecked_Conversion;\n-\n-package System.Threads is\n-\n-   subtype EO is Ada.Exceptions.Exception_Occurrence;\n-\n-   subtype EOA is Ada.Exceptions.Exception_Occurrence_Access;\n-\n-   type ATSD is limited private;\n-   --  Type of the Ada thread specific data. It contains datas needed\n-   --  by the GNAT runtime.\n-\n-   type ATSD_Access is access ATSD;\n-   function From_Address is new Unchecked_Conversion (Address, ATSD_Access);\n-\n-   --  Get/Set for the attributes of the current thread\n-\n-   function  Get_Jmpbuf_Address return  Address;\n-   pragma Inline (Get_Jmpbuf_Address);\n-\n-   procedure Set_Jmpbuf_Address (Addr : Address);\n-   pragma Inline (Set_Jmpbuf_Address);\n-\n-   function  Get_Sec_Stack_Addr return  Address;\n-   pragma Inline (Get_Sec_Stack_Addr);\n-\n-   procedure Set_Sec_Stack_Addr (Addr : Address);\n-   pragma Inline (Set_Sec_Stack_Addr);\n-\n-   function Get_Current_Excep return EOA;\n-   pragma Inline (Get_Current_Excep);\n-\n-   --------------------------\n-   -- Thread Body Handling --\n-   --------------------------\n-\n-   --  The subprograms in this section are called by the expansion of a\n-   --  subprogram body to which a Thread_Body pragma has been applied:\n-\n-   --  Given a subprogram body\n-\n-   --     procedure xyz (params ....) is    -- can also be a function\n-   --       <user declarations>\n-   --     begin\n-   --       <user statements>\n-   --     <user exception handlers>\n-   --     end xyz;\n-\n-   --  The expansion resulting from use of the Thread_Body pragma is:\n-\n-   --     procedure xyz (params ...) is\n-\n-   --       _Secondary_Stack : aliased\n-   --          Storage_Elements.Storage_Array\n-   --            (1 .. Storage_Offset (Sec_Stack_Size));\n-   --       for _Secondary_Stack'Alignment use Standard'Maximum_Alignment;\n-\n-   --       _Process_ATSD : aliased System.Threads.ATSD;\n-\n-   --     begin\n-   --        System.Threads.Thread_Body_Enter;\n-   --          (_Secondary_Stack'Address,\n-   --           _Secondary_Stack'Length,\n-   --           _Process_ATSD'Address);\n-\n-   --        declare\n-   --           <user declarations>\n-   --        begin\n-   --           <user statements>\n-   --        <user exception handlers>\n-   --        end;\n-\n-   --       System.Threads.Thread_Body_Leave;\n-\n-   --     exception\n-   --        when E : others =>\n-   --          System.Threads.Thread_Body_Exceptional_Exit (E);\n-   --     end;\n-\n-   --  Note the exception handler is omitted if pragma Restriction\n-   --  No_Exception_Handlers is currently active.\n-\n-   --  Note: the secondary stack size (Sec_Stack_Size) comes either from\n-   --  the pragma, if specified, or is the default value taken from\n-   --  the declaration in System.Secondary_Stack.\n-\n-   procedure Thread_Body_Enter\n-     (Sec_Stack_Address    : System.Address;\n-      Sec_Stack_Size       : Natural;\n-      Process_ATSD_Address : System.Address);\n-   --  Enter thread body, see above for details\n-\n-   procedure Thread_Body_Leave;\n-   --  Leave thread body (normally), see above for details\n-\n-   procedure Thread_Body_Exceptional_Exit\n-     (EO : Ada.Exceptions.Exception_Occurrence);\n-   --  Leave thread body (abnormally on exception), see above for details\n-\n-private\n-\n-   type ATSD is new System.Soft_Links.TSD;\n-\n-end System.Threads;"}]}