{"sha": "f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRkYTI4YTBhYjE1NWQ1YmZmNWZlNDAwZWZiMmI1NDU5ZTU0MjljOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-01-09T21:51:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-01-09T21:51:08Z"}, "message": "Implement P0195R2, C++17 variadic using.\n\n\t* parser.c (cp_parser_using_declaration): Handle ellipsis and comma.\n\t* pt.c (tsubst_decl): Handle pack expansion in USING_DECL_SCOPE.\n\t* error.c (dump_decl): Likewise.\n\nFrom-SVN: r244246", "tree": {"sha": "a6a25a2bcfc6d78bd787d7257b26a8242a21c0c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a25a2bcfc6d78bd787d7257b26a8242a21c0c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd2c62704bb7e012a3e780dec1288678f51bcd6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2c62704bb7e012a3e780dec1288678f51bcd6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2c62704bb7e012a3e780dec1288678f51bcd6c"}], "stats": {"total": 132, "additions": 119, "deletions": 13}, "files": [{"sha": "5a84068e1dfacb45755f797b224c7a79b32d881c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "patch": "@@ -1,3 +1,10 @@\n+2017-01-09  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement P0195R2, C++17 variadic using.\n+\t* parser.c (cp_parser_using_declaration): Handle ellipsis and comma.\n+\t* pt.c (tsubst_decl): Handle pack expansion in USING_DECL_SCOPE.\n+\t* error.c (dump_decl): Likewise.\n+\n 2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/79019"}, {"sha": "ff4f4ef4698739487547b3d20153fa6cddaa90cd", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "patch": "@@ -199,7 +199,8 @@ DEFTREECODE (BOUND_TEMPLATE_TEMPLATE_PARM, \"bound_template_template_parm\",\n DEFTREECODE (UNBOUND_CLASS_TEMPLATE, \"unbound_class_template\", tcc_type, 0)\n \n /* A using declaration.  USING_DECL_SCOPE contains the specified\n-   scope.  In a member using decl, unless DECL_DEPENDENT_P is true,\n+   scope.  In a variadic using-declaration, this is a TYPE_PACK_EXPANSION.\n+   In a member using decl, unless DECL_DEPENDENT_P is true,\n    USING_DECL_DECLS contains the _DECL or OVERLOAD so named.  This is\n    not an alias, but is later expanded into multiple aliases.  */\n DEFTREECODE (USING_DECL, \"using_decl\", tcc_declaration, 0)"}, {"sha": "72044a9013cb13075b62612c1a8e003995d3a42a", "filename": "gcc/cp/error.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "patch": "@@ -1268,10 +1268,21 @@ dump_decl (cxx_pretty_printer *pp, tree t, int flags)\n       break;\n \n     case USING_DECL:\n-      pp_cxx_ws_string (pp, \"using\");\n-      dump_type (pp, USING_DECL_SCOPE (t), flags);\n-      pp_cxx_colon_colon (pp);\n-      dump_decl (pp, DECL_NAME (t), flags);\n+      {\n+\tpp_cxx_ws_string (pp, \"using\");\n+\ttree scope = USING_DECL_SCOPE (t);\n+\tbool variadic = false;\n+\tif (PACK_EXPANSION_P (scope))\n+\t  {\n+\t    scope = PACK_EXPANSION_PATTERN (scope);\n+\t    variadic = true;\n+\t  }\n+\tdump_type (pp, scope, flags);\n+\tpp_cxx_colon_colon (pp);\n+\tdump_decl (pp, DECL_NAME (t), flags);\n+\tif (variadic)\n+\t  pp_cxx_ws_string (pp, \"...\");\n+      }\n       break;\n \n     case STATIC_ASSERT:"}, {"sha": "aa045c439b336e31e0594f38fe6334f24afe0ecf", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "patch": "@@ -18372,6 +18372,7 @@ cp_parser_using_declaration (cp_parser* parser,\n       /* Look for the `using' keyword.  */\n       cp_parser_require_keyword (parser, RID_USING, RT_USING);\n       \n+ again:\n       /* Peek at the next token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n       /* See if it's `typename'.  */\n@@ -18438,6 +18439,16 @@ cp_parser_using_declaration (cp_parser* parser,\n       if (!cp_parser_parse_definitely (parser))\n \treturn false;\n     }\n+  else if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n+    {\n+      cp_token *ell = cp_lexer_consume_token (parser->lexer);\n+      if (cxx_dialect < cxx1z\n+\t  && !in_system_header_at (ell->location))\n+\tpedwarn (ell->location, 0,\n+\t\t \"pack expansion in using-declaration only available \"\n+\t\t \"with -std=c++1z or -std=gnu++1z\");\n+      qscope = make_pack_expansion (qscope);\n+    }\n \n   /* The function we call to handle a using-declaration is different\n      depending on what scope we are in.  */\n@@ -18455,7 +18466,7 @@ cp_parser_using_declaration (cp_parser* parser,\n       if (at_class_scope_p ())\n \t{\n \t  /* Create the USING_DECL.  */\n-\t  decl = do_class_using_decl (parser->scope, identifier);\n+\t  decl = do_class_using_decl (qscope, identifier);\n \n \t  if (decl && typename_p)\n \t    USING_DECL_TYPENAME_P (decl) = 1;\n@@ -18490,6 +18501,17 @@ cp_parser_using_declaration (cp_parser* parser,\n \t}\n     }\n \n+  if (!access_declaration_p\n+      && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n+    {\n+      cp_token *comma = cp_lexer_consume_token (parser->lexer);\n+      if (cxx_dialect < cxx1z)\n+\tpedwarn (comma->location, 0,\n+\t\t \"comma-separated list in using-declaration only available \"\n+\t\t \"with -std=c++1z or -std=gnu++1z\");\n+      goto again;\n+    }\n+\n   /* Look for the final `;'.  */\n   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n "}, {"sha": "dec7d39f0d092fd31e5e47364748d3a7c5660623", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "patch": "@@ -12591,16 +12591,42 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n       if (DECL_DEPENDENT_P (t)\n \t  || uses_template_parms (USING_DECL_SCOPE (t)))\n \t{\n-\t  tree inst_scope = tsubst_copy (USING_DECL_SCOPE (t), args,\n-\t\t\t\t\t complain, in_decl);\n+\t  tree scope = USING_DECL_SCOPE (t);\n \t  tree name = tsubst_copy (DECL_NAME (t), args, complain, in_decl);\n-\t  r = do_class_using_decl (inst_scope, name);\n-\t  if (!r)\n-\t    r = error_mark_node;\n+\t  if (PACK_EXPANSION_P (scope))\n+\t    {\n+\t      tree vec = tsubst_pack_expansion (scope, args, complain, in_decl);\n+\t      int len = TREE_VEC_LENGTH (vec);\n+\t      r = make_tree_vec (len);\n+\t      for (int i = 0; i < len; ++i)\n+\t\t{\n+\t\t  tree escope = TREE_VEC_ELT (vec, i);\n+\t\t  tree elt = do_class_using_decl (escope, name);\n+\t\t  if (!elt)\n+\t\t    {\n+\t\t      r = error_mark_node;\n+\t\t      break;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      TREE_PROTECTED (elt) = TREE_PROTECTED (t);\n+\t\t      TREE_PRIVATE (elt) = TREE_PRIVATE (t);\n+\t\t    }\n+\t\t  TREE_VEC_ELT (r, i) = elt;\n+\t\t}\n+\t    }\n \t  else\n \t    {\n-\t      TREE_PROTECTED (r) = TREE_PROTECTED (t);\n-\t      TREE_PRIVATE (r) = TREE_PRIVATE (t);\n+\t      tree inst_scope = tsubst_copy (USING_DECL_SCOPE (t), args,\n+\t\t\t\t\t     complain, in_decl);\n+\t      r = do_class_using_decl (inst_scope, name);\n+\t      if (!r)\n+\t\tr = error_mark_node;\n+\t      else\n+\t\t{\n+\t\t  TREE_PROTECTED (r) = TREE_PROTECTED (t);\n+\t\t  TREE_PRIVATE (r) = TREE_PRIVATE (t);\n+\t\t}\n \t    }\n \t}\n       else"}, {"sha": "8b8ee7ba638cbbd1ce0e71812e9e8b53839303b1", "filename": "gcc/testsuite/g++.dg/cpp1z/using2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing2.C?ref=f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "patch": "@@ -0,0 +1,19 @@\n+// Test for P0195R2 variadic using.\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct A { void f(); };\n+struct B { void f(int); };\n+\n+template <class... Bases> struct C: Bases...\n+{\n+  using Bases::f...; // { dg-warning \"pack expansion\" \"\" { target c++14_down } }\n+};\n+\n+int main()\n+{\n+  C<A,B> c;\n+  c.f();\n+  c.f(42);\n+}\n+"}, {"sha": "689770f61c5978cbddda45119dc207d05aa307fb", "filename": "gcc/testsuite/g++.dg/cpp1z/using3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4da28a0ab155d5bff5fe400efb2b5459e5429c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fusing3.C?ref=f4da28a0ab155d5bff5fe400efb2b5459e5429c8", "patch": "@@ -0,0 +1,20 @@\n+// Test for P0195R2 multiple using.\n+// { dg-options \"\" }\n+\n+namespace A {\n+  int i;\n+}\n+\n+namespace A1 {\n+  using A::i, A::i;\t // OK: double declaration\n+  // { dg-warning \"comma\" \"\" { target c++14_down } .-1 }\n+}\n+\n+struct B {\n+  int i;\n+};\n+\n+struct X : B {\n+  using B::i, B::i; // { dg-error \"redeclaration\" }\n+  // { dg-warning \"comma\" \"\" { target c++14_down } .-1 }\n+};"}]}