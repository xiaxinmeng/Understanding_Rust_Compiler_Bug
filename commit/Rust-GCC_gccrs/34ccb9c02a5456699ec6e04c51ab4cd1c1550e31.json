{"sha": "34ccb9c02a5456699ec6e04c51ab4cd1c1550e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjY2I5YzAyYTU0NTY2OTllYzZlMDRjNTFhYjRjZDFjMTU1MGUzMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-31T16:11:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-31T16:11:56Z"}, "message": "libgo: Generate DejaGNU like .sum and .log files for \"make check\".\n\nFrom-SVN: r171791", "tree": {"sha": "a8a81023c02bf0ca1ec53e3527ba3febb0237cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a81023c02bf0ca1ec53e3527ba3febb0237cbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31/comments", "author": null, "committer": null, "parents": [{"sha": "246428c2d410e0c196bb48f038128bd4cb082c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246428c2d410e0c196bb48f038128bd4cb082c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/246428c2d410e0c196bb48f038128bd4cb082c43"}], "stats": {"total": 181, "additions": 136, "deletions": 45}, "files": [{"sha": "23636c7ea21a158243453bd3cd119c55dcaa4758", "filename": "libgo/Makefile.am", "status": "modified", "additions": 69, "deletions": 23, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=34ccb9c02a5456699ec6e04c51ab4cd1c1550e31", "patch": "@@ -1547,40 +1547,51 @@ CHECK = \\\n \texport RUNTESTFLAGS; \\\n \tMAKE=\"$(MAKE)\"; \\\n \texport MAKE; \\\n-\trm -f $@-log; \\\n+\trm -f $@-testlog; \\\n \tprefix=`if test \"$(@D)\" = \"regexp\"; then echo regexp-test; else dirname $(@D); fi`; \\\n \ttest \"$${prefix}\" != \".\" || prefix=\"$(@D)\"; \\\n \tif test \"$(use_dejagnu)\" = \"yes\"; then \\\n \t  $(SHELL) $(srcdir)/testsuite/gotest --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" $(GOTESTFLAGS); \\\n \telse \\\n-\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" $(GOTESTFLAGS) >>$@-log 2>&1; then \\\n+\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" $(GOTESTFLAGS) >>$@-testlog 2>&1; then \\\n \t    echo \"PASS: $(@D)\"; \\\n+\t    echo \"PASS: $(@D)\" >> libgo.sum; \\\n+\t    echo \"PASS: $(@D)\" >> $@-testlog; \\\n+\t    cat $@-testlog >> libgo.log; \\\n \t  else \\\n-\t    echo \"FAIL: $(@D)\"; \\\n-\t    cat $@-log; \\\n+\t    echo \"FAIL: $(@D)\" >> $@-testlog; \\\n+\t    cat $@-testlog; \\\n+\t    echo \"FAIL: $(@D)\" >> libgo.sum; \\\n+\t    cat $@-testlog >> libgo.log; \\\n \t    exit 1; \\\n \t  fi; \\\n \tfi\n \n # Build all packages before checking any.\n CHECK_DEPS = libgo.la libgobegin.a \\\n-\t$(toolexeclib_DATA) \\\n-\t$(toolexeclibarchive_DATA) \\\n-\t$(toolexeclibcompress_DATA) \\\n-\t$(toolexeclibcontainer_DATA) \\\n-\t$(toolexeclibcrypto_DATA) \\\n-\t$(toolexeclibdebug_DATA) \\\n-\t$(toolexeclibencoding_DATA) \\\n-\t$(toolexeclibexp_DATA) \\\n \t$(toolexeclibgo_DATA) \\\n-\t$(toolexeclibhash_DATA) \\\n-\t$(toolexeclibhttp_DATA) \\\n-\t$(toolexeclibimage_DATA) \\\n-\t$(toolexeclibio_DATA) \\\n-\t$(toolexeclibos_DATA) \\\n-\t$(toolexeclibrpc_DATA) \\\n-\t$(toolexeclibruntime_DATA) \\\n-\t$(toolexeclibtesting_DATA)\n+\t$(toolexeclibgoarchive_DATA) \\\n+\t$(toolexeclibgocompress_DATA) \\\n+\t$(toolexeclibgocontainer_DATA) \\\n+\t$(toolexeclibgocrypto_DATA) \\\n+\t$(toolexeclibgocryptoopenpgp_DATA) \\\n+\t$(toolexeclibgodebug_DATA) \\\n+\t$(toolexeclibgoencoding_DATA) \\\n+\t$(toolexeclibgoexp_DATA) \\\n+\t$(toolexeclibgogo_DATA) \\\n+\t$(toolexeclibgohash_DATA) \\\n+\t$(toolexeclibgohttp_DATA) \\\n+\t$(toolexeclibgoimage_DATA) \\\n+\t$(toolexeclibgoindex_DATA) \\\n+\t$(toolexeclibgoio_DATA) \\\n+\t$(toolexeclibgomime_DATA) \\\n+\t$(toolexeclibgonet_DATA) \\\n+\t$(toolexeclibgoos_DATA) \\\n+\t$(toolexeclibgopath_DATA) \\\n+\t$(toolexeclibgorpc_DATA) \\\n+\t$(toolexeclibgoruntime_DATA) \\\n+\t$(toolexeclibgosync_DATA) \\\n+\t$(toolexeclibgotesting_DATA)\n \n asn1/asn1.lo: $(go_asn1_files) bytes.gox fmt.gox io.gox os.gox reflect.gox \\\n \t\tstrconv.gox strings.gox time.gox\n@@ -3040,14 +3051,49 @@ TEST_PACKAGES = \\\n \ttesting/quick/check \\\n \ttesting/script/check\n \n-check-recursive: $(TEST_PACKAGES)\n+check-am:\n+\t@rm -f libgo.sum libgo.log\n+\t@echo \"Test Run By $${USER} on `date`\" > libgo.sum\n+\t@echo \"Native configuration is $(host_triplet)\" >> libgo.sum\n+\t@echo >> libgo.sum\n+\t@echo \"\t\t=== libgo tests ===\" >> libgo.sum\n+\t@echo >> libgo.sum\n+\t@echo \"Schedule of variations:\" >> libgo.sum\n+\t@echo \"    unix\" >> libgo.sum\n+\t@echo >> libgo.sum\n+\t@echo \"Running target unix\" >> libgo.sum\n+\t@echo \"Running $(srcdir)/libgo.exp ...\" >> libgo.sum\n+\t@cp libgo.sum libgo.log\n+\t@rm -f libgo.tail\n+\t@$(MAKE) -k $(TEST_PACKAGES); \\\n+\tstatus=$$?; \\\n+\techo > libgo.tail; \\\n+\techo \"\t\t=== libgo summary ===\" >> libgo.tail; \\\n+\techo >> libgo.tail; \\\n+\tp=`grep -c PASS libgo.sum`; \\\n+\tif test \"$$p\" != \"0\"; then \\\n+\t  echo \"# of expected passes\t\t$$p\" >> libgo.tail; \\\n+\tfi; \\\n+\tp=`grep -c FAIL libgo.sum`; \\\n+\tif test \"$$p\" != \"0\"; then \\\n+\t  echo \"# of unexpected failures\t$$p\" >> libgo.tail; \\\n+\tfi; \\\n+\tcat libgo.tail >> libgo.sum; \\\n+\tcat libgo.tail >> libgo.log; \\\n+\techo `echo $(GOC) | sed -e 's/ .*//'`  `$(GOC) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> libgo.sum; \\\n+\techo >> libgo.log; \\\n+\techo \"runtest completed at `date`\" >> libgo.log; \\\n+\texit $$status\n+\n+MOSTLYCLEAN_FILES = libgo.tail\n \n mostlyclean-local:\n \tfind . -name '*.lo' -print | xargs $(LIBTOOL) --mode=clean rm -f\n \tfind . -name '*.$(OBJEXT)' -print | xargs rm -f\n+\tfind . -name '*-testlog' -print | xargs rm -f\n+\n+CLEANFILES = *.go *.gox goc2c *.c s-version libgo.sum libgo.log\n \n clean-local:\n \tfind . -name '*.la' -print | xargs $(LIBTOOL) --mode=clean rm -f\n \tfind . -name '*.a' -print | xargs rm -f\n-\n-CLEANFILES = *.go *.gox goc2c *.c s-version"}, {"sha": "06574e26899dfb4689b1f38c4d14d3802163fbb1", "filename": "libgo/Makefile.in", "status": "modified", "additions": 67, "deletions": 22, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ccb9c02a5456699ec6e04c51ab4cd1c1550e31/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=34ccb9c02a5456699ec6e04c51ab4cd1c1550e31", "patch": "@@ -1877,41 +1877,52 @@ CHECK = \\\n \texport RUNTESTFLAGS; \\\n \tMAKE=\"$(MAKE)\"; \\\n \texport MAKE; \\\n-\trm -f $@-log; \\\n+\trm -f $@-testlog; \\\n \tprefix=`if test \"$(@D)\" = \"regexp\"; then echo regexp-test; else dirname $(@D); fi`; \\\n \ttest \"$${prefix}\" != \".\" || prefix=\"$(@D)\"; \\\n \tif test \"$(use_dejagnu)\" = \"yes\"; then \\\n \t  $(SHELL) $(srcdir)/testsuite/gotest --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" $(GOTESTFLAGS); \\\n \telse \\\n-\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" $(GOTESTFLAGS) >>$@-log 2>&1; then \\\n+\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" $(GOTESTFLAGS) >>$@-testlog 2>&1; then \\\n \t    echo \"PASS: $(@D)\"; \\\n+\t    echo \"PASS: $(@D)\" >> libgo.sum; \\\n+\t    echo \"PASS: $(@D)\" >> $@-testlog; \\\n+\t    cat $@-testlog >> libgo.log; \\\n \t  else \\\n-\t    echo \"FAIL: $(@D)\"; \\\n-\t    cat $@-log; \\\n+\t    echo \"FAIL: $(@D)\" >> $@-testlog; \\\n+\t    cat $@-testlog; \\\n+\t    echo \"FAIL: $(@D)\" >> libgo.sum; \\\n+\t    cat $@-testlog >> libgo.log; \\\n \t    exit 1; \\\n \t  fi; \\\n \tfi\n \n \n # Build all packages before checking any.\n CHECK_DEPS = libgo.la libgobegin.a \\\n-\t$(toolexeclib_DATA) \\\n-\t$(toolexeclibarchive_DATA) \\\n-\t$(toolexeclibcompress_DATA) \\\n-\t$(toolexeclibcontainer_DATA) \\\n-\t$(toolexeclibcrypto_DATA) \\\n-\t$(toolexeclibdebug_DATA) \\\n-\t$(toolexeclibencoding_DATA) \\\n-\t$(toolexeclibexp_DATA) \\\n \t$(toolexeclibgo_DATA) \\\n-\t$(toolexeclibhash_DATA) \\\n-\t$(toolexeclibhttp_DATA) \\\n-\t$(toolexeclibimage_DATA) \\\n-\t$(toolexeclibio_DATA) \\\n-\t$(toolexeclibos_DATA) \\\n-\t$(toolexeclibrpc_DATA) \\\n-\t$(toolexeclibruntime_DATA) \\\n-\t$(toolexeclibtesting_DATA)\n+\t$(toolexeclibgoarchive_DATA) \\\n+\t$(toolexeclibgocompress_DATA) \\\n+\t$(toolexeclibgocontainer_DATA) \\\n+\t$(toolexeclibgocrypto_DATA) \\\n+\t$(toolexeclibgocryptoopenpgp_DATA) \\\n+\t$(toolexeclibgodebug_DATA) \\\n+\t$(toolexeclibgoencoding_DATA) \\\n+\t$(toolexeclibgoexp_DATA) \\\n+\t$(toolexeclibgogo_DATA) \\\n+\t$(toolexeclibgohash_DATA) \\\n+\t$(toolexeclibgohttp_DATA) \\\n+\t$(toolexeclibgoimage_DATA) \\\n+\t$(toolexeclibgoindex_DATA) \\\n+\t$(toolexeclibgoio_DATA) \\\n+\t$(toolexeclibgomime_DATA) \\\n+\t$(toolexeclibgonet_DATA) \\\n+\t$(toolexeclibgoos_DATA) \\\n+\t$(toolexeclibgopath_DATA) \\\n+\t$(toolexeclibgorpc_DATA) \\\n+\t$(toolexeclibgoruntime_DATA) \\\n+\t$(toolexeclibgosync_DATA) \\\n+\t$(toolexeclibgotesting_DATA)\n \n \n # How to build a .gox file from a .lo file.\n@@ -2045,7 +2056,8 @@ TEST_PACKAGES = \\\n \ttesting/quick/check \\\n \ttesting/script/check\n \n-CLEANFILES = *.go *.gox goc2c *.c s-version\n+MOSTLYCLEAN_FILES = libgo.tail\n+CLEANFILES = *.go *.gox goc2c *.c s-version libgo.sum libgo.log\n all: config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-recursive\n \n@@ -5314,11 +5326,44 @@ testing/quick.gox: testing/quick.lo\n testing/script.gox: testing/script.lo\n \t$(BUILDGOX)\n \n-check-recursive: $(TEST_PACKAGES)\n+check-am:\n+\t@rm -f libgo.sum libgo.log\n+\t@echo \"Test Run By $${USER} on `date`\" > libgo.sum\n+\t@echo \"Native configuration is $(host_triplet)\" >> libgo.sum\n+\t@echo >> libgo.sum\n+\t@echo \"\t\t=== libgo tests ===\" >> libgo.sum\n+\t@echo >> libgo.sum\n+\t@echo \"Schedule of variations:\" >> libgo.sum\n+\t@echo \"    unix\" >> libgo.sum\n+\t@echo >> libgo.sum\n+\t@echo \"Running target unix\" >> libgo.sum\n+\t@echo \"Running $(srcdir)/libgo.exp ...\" >> libgo.sum\n+\t@cp libgo.sum libgo.log\n+\t@rm -f libgo.tail\n+\t@$(MAKE) -k $(TEST_PACKAGES); \\\n+\tstatus=$$?; \\\n+\techo > libgo.tail; \\\n+\techo \"\t\t=== libgo summary ===\" >> libgo.tail; \\\n+\techo >> libgo.tail; \\\n+\tp=`grep -c PASS libgo.sum`; \\\n+\tif test \"$$p\" != \"0\"; then \\\n+\t  echo \"# of expected passes\t\t$$p\" >> libgo.tail; \\\n+\tfi; \\\n+\tp=`grep -c FAIL libgo.sum`; \\\n+\tif test \"$$p\" != \"0\"; then \\\n+\t  echo \"# of unexpected failures\t$$p\" >> libgo.tail; \\\n+\tfi; \\\n+\tcat libgo.tail >> libgo.sum; \\\n+\tcat libgo.tail >> libgo.log; \\\n+\techo `echo $(GOC) | sed -e 's/ .*//'`  `$(GOC) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> libgo.sum; \\\n+\techo >> libgo.log; \\\n+\techo \"runtest completed at `date`\" >> libgo.log; \\\n+\texit $$status\n \n mostlyclean-local:\n \tfind . -name '*.lo' -print | xargs $(LIBTOOL) --mode=clean rm -f\n \tfind . -name '*.$(OBJEXT)' -print | xargs rm -f\n+\tfind . -name '*-testlog' -print | xargs rm -f\n \n clean-local:\n \tfind . -name '*.la' -print | xargs $(LIBTOOL) --mode=clean rm -f"}]}