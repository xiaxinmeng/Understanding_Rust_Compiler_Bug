{"sha": "1f5c7ba85856618c1f14d4f581966baadbe02ddd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1YzdiYTg1ODU2NjE4YzFmMTRkNGY1ODE5NjZiYWFkYmUwMmRkZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-19T08:36:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-19T08:36:21Z"}, "message": "[Ada] Fix incorrect stub generation for types in instances\n\nThis fixes a fallout of a recent change clearing the\nIs_Generic_Actual_Type on the implicit full view of a private actual\ntype in an instance.  This flag is used to help disambiguating formal\ntypes instantiated on the same actual type within an instance, but it\nshould be cleared outside the instance to let the usual disambiguation\nrules apply again to these types outside the instance.\n\nThis in particular means that Exp_Dist cannot rely on it to detect\nsubtypes representing generic actual types, hence the need for the new\npredicate.\n\n2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_dist.adb (Is_Generic_Actual_Subtype): New predicate.\n\t(Build_From_Any_Call, Build_To_Any_Call, Build_TypeCode_Call):\n\tUse it instead of Is_Generic_Actual_Type flag to detect subtypes\n\trepresenting generic actual types.\n\nFrom-SVN: r274650", "tree": {"sha": "08f15072d6190affb2f0d4220b105d5471760853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f15072d6190affb2f0d4220b105d5471760853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f5c7ba85856618c1f14d4f581966baadbe02ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5c7ba85856618c1f14d4f581966baadbe02ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f5c7ba85856618c1f14d4f581966baadbe02ddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5c7ba85856618c1f14d4f581966baadbe02ddd/comments", "author": null, "committer": null, "parents": [{"sha": "4527ea2ed93d705b05a01a63561839748655505c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4527ea2ed93d705b05a01a63561839748655505c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4527ea2ed93d705b05a01a63561839748655505c"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "5d48b3d31d19447a60b4f66f3f4727c7b1b5313e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5c7ba85856618c1f14d4f581966baadbe02ddd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5c7ba85856618c1f14d4f581966baadbe02ddd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f5c7ba85856618c1f14d4f581966baadbe02ddd", "patch": "@@ -1,3 +1,10 @@\n+2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dist.adb (Is_Generic_Actual_Subtype): New predicate.\n+\t(Build_From_Any_Call, Build_To_Any_Call, Build_TypeCode_Call):\n+\tUse it instead of Is_Generic_Actual_Type flag to detect subtypes\n+\trepresenting generic actual types.\n+\n 2019-08-19  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_warn.adb (Check_References, Generic_Body_Formal): When a"}, {"sha": "89218c4a9212fe8bf0f394cbd82aacaf271e7f5e", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5c7ba85856618c1f14d4f581966baadbe02ddd/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5c7ba85856618c1f14d4f581966baadbe02ddd/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=1f5c7ba85856618c1f14d4f581966baadbe02ddd", "patch": "@@ -8201,6 +8201,12 @@ package body Exp_Dist is\n          --  type from Interfaces, or the smallest floating point type from\n          --  Standard whose range encompasses that of Typ.\n \n+         function Is_Generic_Actual_Subtype (Typ : Entity_Id) return Boolean;\n+         --  Return true if Typ is a subtype representing a generic formal type\n+         --  as a subtype of the actual type in an instance. This is needed to\n+         --  recognize these subtypes because the Is_Generic_Actual_Type flag\n+         --  can only be relied upon within the instance.\n+\n          function Make_Helper_Function_Name\n            (Loc : Source_Ptr;\n             Typ : Entity_Id;\n@@ -8453,7 +8459,7 @@ package body Exp_Dist is\n             --  For the subtype representing a generic actual type, go to the\n             --  actual type.\n \n-            if Is_Generic_Actual_Type (U_Type) then\n+            if Is_Generic_Actual_Subtype (U_Type) then\n                U_Type := Underlying_Type (Base_Type (U_Type));\n             end if;\n \n@@ -9262,7 +9268,7 @@ package body Exp_Dist is\n             --  For the subtype representing a generic actual type, go to the\n             --  actual type.\n \n-            if Is_Generic_Actual_Type (U_Type) then\n+            if Is_Generic_Actual_Subtype (U_Type) then\n                U_Type := Underlying_Type (Base_Type (U_Type));\n             end if;\n \n@@ -10116,7 +10122,7 @@ package body Exp_Dist is\n             --  For the subtype representing a generic actual type, go to the\n             --  actual type.\n \n-            if Is_Generic_Actual_Type (U_Type) then\n+            if Is_Generic_Actual_Subtype (U_Type) then\n                U_Type := Underlying_Type (Base_Type (U_Type));\n             end if;\n \n@@ -10901,6 +10907,30 @@ package body Exp_Dist is\n \n          end Find_Numeric_Representation;\n \n+         ---------------------------------\n+         --  Is_Generic_Actual_Subtype  --\n+         ---------------------------------\n+\n+         function Is_Generic_Actual_Subtype (Typ : Entity_Id) return Boolean is\n+         begin\n+            if Is_Itype (Typ)\n+              and then Present (Associated_Node_For_Itype (Typ))\n+            then\n+               declare\n+                  N : constant Node_Id := Associated_Node_For_Itype (Typ);\n+               begin\n+                  if Nkind (N) = N_Subtype_Declaration\n+                    and then Nkind (Parent (N)) = N_Package_Specification\n+                    and then Is_Generic_Instance (Scope_Of_Spec (Parent (N)))\n+                  then\n+                     return True;\n+                  end if;\n+               end;\n+            end if;\n+\n+            return False;\n+         end Is_Generic_Actual_Subtype;\n+\n          ---------------------------\n          -- Append_Array_Traversal --\n          ---------------------------"}]}