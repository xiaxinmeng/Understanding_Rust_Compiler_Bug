{"sha": "7005a50d0121954031a223ea5a6c57aaa7e3efd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwNWE1MGQwMTIxOTU0MDMxYTIyM2VhNWE2YzU3YWFhN2UzZWZkMw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-16T09:07:32Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-25T19:24:33Z"}, "message": "coroutines : Remove throwing_cleanup marks from the ramp [PR95822].\n\nThe FE contains a mechanism for cleaning up return expressions if a\nfunction throws during the execution of cleanups prior to the return.\n\nIf the original function has a return value with a non-trivial DTOR\nand the body contains a var with a DTOR that might throw, the function\ndecl is marked \"throwing_cleanup\".\n\nHowever, we do not [in the coroutine ramp function, which is\nsynthesised], use any body var types with DTORs that might throw.\n\nThe original body [which will then contain the type with the throwing\nDTOR] is transformed into the actor function which only contains void\nreturns, and is also wrapped in a try-catch block.\n\nSo (a) the 'throwing_cleanup' is no longer correct for the ramp and\n   (b) we do not need to transfer it to the actor which only contains\n       void returns.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95822\n\t* coroutines.cc (morph_fn_to_coro): Unconditionally remove any\n\tset throwing_cleanup marker.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95822\n\t* g++.dg/coroutines/pr95822.C: New test.", "tree": {"sha": "c76960208aa91547d0123e8ca7cd1a5a104db18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c76960208aa91547d0123e8ca7cd1a5a104db18d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7005a50d0121954031a223ea5a6c57aaa7e3efd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7005a50d0121954031a223ea5a6c57aaa7e3efd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7005a50d0121954031a223ea5a6c57aaa7e3efd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7005a50d0121954031a223ea5a6c57aaa7e3efd3/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5051c12173713c81921ed133ef5a218e46ab11d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5051c12173713c81921ed133ef5a218e46ab11d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5051c12173713c81921ed133ef5a218e46ab11d1"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "19d2ca3e23ee059d37331645fd0ef30c6ccb27ab", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7005a50d0121954031a223ea5a6c57aaa7e3efd3/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7005a50d0121954031a223ea5a6c57aaa7e3efd3/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=7005a50d0121954031a223ea5a6c57aaa7e3efd3", "patch": "@@ -4029,6 +4029,17 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       TREE_OPERAND (body_start, 0) = push_stmt_list ();\n     }\n \n+  /* If the original function has a return value with a non-trivial DTOR\n+     and the body contains a var with a DTOR that might throw, the decl is\n+     marked \"throwing_cleanup\".\n+     We do not [in the ramp, which is synthesised here], use any body var\n+     types with DTORs that might throw.\n+     The original body is transformed into the actor function which only\n+     contains void returns, and is also wrapped in a try-catch block.\n+     So (a) the 'throwing_cleanup' is not correct for the ramp and (b) we do\n+     not need to transfer it to the actor which only contains void returns.  */\n+  cp_function_chain->throwing_cleanup = false;\n+\n   /* Create the coro frame type, as far as it can be known at this stage.\n      1. Types we already know.  */\n "}, {"sha": "f6284aa417ed9fd9c2e9626711ac1f021ac1fa5c", "filename": "gcc/testsuite/g++.dg/coroutines/pr95822.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7005a50d0121954031a223ea5a6c57aaa7e3efd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95822.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7005a50d0121954031a223ea5a6c57aaa7e3efd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95822.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95822.C?ref=7005a50d0121954031a223ea5a6c57aaa7e3efd3", "patch": "@@ -0,0 +1,29 @@\n+#include <coroutine>\n+\n+struct task {\n+  struct promise_type {\n+    auto initial_suspend() noexcept { return std::suspend_always{}; }\n+    auto final_suspend() noexcept { return std::suspend_always{}; }\n+    void return_void() {}\n+    task get_return_object() { return task{}; }\n+    void unhandled_exception() noexcept {}\n+  };\n+\n+  ~task() noexcept {}\n+\n+  bool await_ready() const noexcept { return false; }\n+  void await_suspend(std::coroutine_handle<>) noexcept {}\n+  void await_resume() noexcept {}\n+};\n+\n+struct Error {\n+   Error() { };\n+  ~Error() noexcept(false) {}\n+};\n+\n+task g();\n+\n+task f() {\n+  Error error;\n+  co_await g();\n+}"}]}