{"sha": "0288527f47cec6698b31ccb3210816415506009e", "node_id": "C_kwDOANBUbNoAKDAyODg1MjdmNDdjZWM2Njk4YjMxY2NiMzIxMDgxNjQxNTUwNjAwOWU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-21T08:27:53Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-27T15:39:51Z"}, "message": "Replace VRP threader with a hybrid forward threader.\n\nThis patch implements the new hybrid forward threader and replaces the\nembedded VRP threader with it.\n\nWith all the pieces that have gone in, the implementation of the hybrid\nthreader is straightforward: convert the current state into\nSSA imports that the solver will understand, and let the path solver\nprecompute ranges and relations for the path.  After this setup is done,\nwe can use the range_query API to solve gimple statements in the threader.\nThe forward threader is now engine agnostic so there are no changes to\nthe threader per se.\n\nI have put the hybrid bits in tree-ssa-threadedge.*, instead of VRP,\nbecause they will also be used in the evrp removal of the DOM/threader,\nwhich is my next task.\n\nMost of the patch, is actually test changes.  I have gone through every\nsingle one and verified that we're correct.  Most were trivial dump\nfile name changes, but others required going through the IL an\ncertifying that the different IL was expected.\n\nFor example, in pr59597.c, we have one less thread because the\nASSERT_EXPR was getting in the way, and making it seem like things were\nnot crossing loops.  The hybrid threader sees the correct representation\nof the IL, and avoids threading this one case.\n\nThe final numbers are a 12.16% improvement in jump threads immediately\nafter VRP, and a 0.82% improvement in overall jump threads.  The\nperformance drop is 0.6% (plus the 1.43% hit from moving the embedded\nthreader into its own pass).  As I've said, I'd prefer to keep the\nthreader in its own pass, but if this is an issue, we can address this\nwith a shared ranger when VRP is replaced with an evrp instance\n(upcoming).\n\nNote, that these numbers are slightly different than what I originally\nposted.  A few correctness tweaks, plus restricting loop threads, made\nthe difference.  That being said, I was aiming for par.  A 12% gain is\njust gravy ;-).  When we merge the threaders, we should see even better\nnumbers-- and we'll have the benefit of an entire release stress testing\nthe solver.\n\nAs I mentioned in my introductory note, paths ending in MEM_REF\nconditional are missing.  In reality, this didn't make a difference, as\nit was so rare.  However, as a follow-up, I will distill a test and add\na suitable PR to keep us honest.\n\nThere is a one-line change to libgomp/team.c silencing a new used\nuninitialized warning.  As my previous work with the threaders has\nshown, warnings flare up after each improvement to jump threading.  I\nexpect this to be no different.  I've promised Jakub to investigate\nfully, so I will analyze and add the appropriate PR for the warning\nexperts.\n\nOh yeah, the new pass dump is called vrp-threader[12] to match each\nVRP[12] pass.  However, there's no reason for it to either be named\nvrp-threader, or for it to live in tree-vrp.c.\n\nTested on x86-64 Linux.\n\nOK?\n\np.s. \"Did I say 5 weeks?  My bad, I meant 5 months.\"\n\ngcc/ChangeLog:\n\n\t* passes.def (pass_vrp_threader): New.\n\t* tree-pass.h (make_pass_vrp_threader): Add make_pass_vrp_threader.\n\t* tree-ssa-threadedge.c (hybrid_jt_state::register_equivs_stmt): New.\n\t(hybrid_jt_simplifier::hybrid_jt_simplifier): New.\n\t(hybrid_jt_simplifier::simplify): New.\n\t(hybrid_jt_simplifier::compute_ranges_from_state): New.\n\t* tree-ssa-threadedge.h (class hybrid_jt_state): New.\n\t(class hybrid_jt_simplifier): New.\n\t* tree-vrp.c (execute_vrp): Remove ASSERT_EXPR based jump\n\tthreader.\n\t(class hybrid_threader): New.\n\t(hybrid_threader::hybrid_threader): New.\n\t(hybrid_threader::~hybrid_threader): New.\n\t(hybrid_threader::before_dom_children): New.\n\t(hybrid_threader::after_dom_children): New.\n\t(execute_vrp_threader): New.\n\t(class pass_vrp_threader): New.\n\t(make_pass_vrp_threader): New.\n\nlibgomp/ChangeLog:\n\n\t* team.c: Initialize start_data.\n\t* testsuite/libgomp.graphite/force-parallel-4.c: Adjust.\n\t* testsuite/libgomp.graphite/force-parallel-8.c: Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/torture/pr55107.c: Adjust.\n\t* gcc.dg/tree-ssa/phi_on_compare-1.c: Adjust.\n\t* gcc.dg/tree-ssa/phi_on_compare-2.c: Adjust.\n\t* gcc.dg/tree-ssa/phi_on_compare-3.c: Adjust.\n\t* gcc.dg/tree-ssa/phi_on_compare-4.c: Adjust.\n\t* gcc.dg/tree-ssa/pr21559.c: Adjust.\n\t* gcc.dg/tree-ssa/pr59597.c: Adjust.\n\t* gcc.dg/tree-ssa/pr61839_1.c: Adjust.\n\t* gcc.dg/tree-ssa/pr61839_3.c: Adjust.\n\t* gcc.dg/tree-ssa/pr71437.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-16.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-18.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2a.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-thread-14.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp106.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp55.c: Adjust.", "tree": {"sha": "f0e5b4465af7816e61befbf1b6fe5b3138c4ab4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0e5b4465af7816e61befbf1b6fe5b3138c4ab4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0288527f47cec6698b31ccb3210816415506009e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0288527f47cec6698b31ccb3210816415506009e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0288527f47cec6698b31ccb3210816415506009e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0288527f47cec6698b31ccb3210816415506009e/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd11aab6463880c35d942c4a4fd346fdaeeb8e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd11aab6463880c35d942c4a4fd346fdaeeb8e72"}], "stats": {"total": 333, "additions": 270, "deletions": 63}, "files": [{"sha": "9115da7beb60566aae705102693c79e0058d10b5", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -212,6 +212,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_merge_phi);\n       NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_vrp, true /* warn_array_bounds_p */);\n+      NEXT_PASS (pass_vrp_threader);\n       NEXT_PASS (pass_dse);\n       NEXT_PASS (pass_dce);\n       /* pass_stdarg is always run and at this point we execute\n@@ -337,6 +338,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_strlen);\n       NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_vrp, false /* warn_array_bounds_p */);\n+      NEXT_PASS (pass_vrp_threader);\n       /* Threading can leave many const/copy propagations in the IL.\n \t Clean them up.  Instead of just copy_prop, we use ccp to\n \t compute alignment and nonzero bits.  */"}, {"sha": "2edb75f7541ae1f103076e860ec86b9cab6db554", "filename": "gcc/testsuite/gcc.dg/torture/pr55107.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55107.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-additional-options \"-fno-split-loops\" } */\n+/* { dg-additional-options \"-fno-split-loops -w\" } */\n \n typedef unsigned short uint16_t;\n "}, {"sha": "59663dd53147d1a12977c561af33453d0e2ffe59", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-1.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n \n void g (int);\n void g1 (int);\n@@ -27,4 +27,4 @@ f (long a, long b, long c, long d, long x)\n   g (a);\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */"}, {"sha": "0c2f6e0e87813a425466dee4ba057317320a3469", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-2.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n \n void g (void);\n void g1 (void);\n@@ -20,4 +20,4 @@ f (long a, long b, long c, long d, int x)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */"}, {"sha": "6a3d3595d8cacb3135683b45ea8241d7ad1506c2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-3.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n \n void g (void);\n void g1 (void);\n@@ -22,4 +22,4 @@ f (long a, long b, long c, long d, int x)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */"}, {"sha": "9bc4c6db8e8b18359357a82437e989826511de8a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi_on_compare-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi_on_compare-4.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp1\" } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp-thread1\" } */\n \n void g (int);\n void g1 (int);\n@@ -37,4 +37,4 @@ f (long a, long b, long c, long d, int x)\n   g (c + d);\n }\n \n-/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing basic block\" 1 \"vrp-thread1\" } } */"}, {"sha": "51b3b7ac75566fc1da31188a9bf9a6580bffd342", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21559.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-evrp-details -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-evrp-details -fdump-tree-vrp-thread1-details\" } */\n \n static int blocksize = 4096;\n \n@@ -39,6 +39,6 @@ void foo (void)\n    statement.  We also realize that the final bytes == 0 test is useless,\n    and thread over it.  We also know that toread != 0 is useless when\n    entering while loop and thread over it.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp-thread1\" } } */\n \n "}, {"sha": "2caa1f532ead30a5aa9a4c7d123326631d6af848", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr59597.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-Ofast -fdump-tree-vrp-thread1-details\" } */\n \n typedef unsigned short u16;\n typedef unsigned char u8;\n@@ -56,6 +56,11 @@ main (int argc, char argv[])\n   return crc;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 3 \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-not \"joiner\" \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp1\" } } */\n+/* Previously we had 3 jump threads, but one of them crossed loops.\n+   The reason the old threader was allowing it, was because there was\n+   an ASSERT_EXPR getting in the way.  Without the ASSERT_EXPR, we\n+   have an empty pre-header block as the final block in the thread,\n+   which the threader will simply join with the next block which *is*\n+   in a different loop.  */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 2 \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-not \"joiner\" \"vrp-thread1\" } } */"}, {"sha": "0229a823ab7b55b24262b846eea6ff5c24970e47", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_1.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/61839.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdisable-tree-evrp -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1 -fdisable-tree-evrp -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n /* { dg-require-effective-target int32plus } */\n \n __attribute__ ((noinline))\n@@ -38,7 +38,11 @@ int main ()\n }\n \n /* Scan for c = 972195717) >> [0, 1] in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"486097858 : 972195717\" 1  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"486097858 : 972195717\" 1  \"vrp-thread1\" } } */\n+\n+/* Previously we were checking for two ?: with constant PHI arguments,\n+   but now we collapse them into one.  */\n /* Scan for c = 972195717) >> [2, 3] in function bar.  */\n-/* { dg-final { scan-tree-dump-times \"243048929 : 121524464\" 2  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"243048929 : 121524464\" 1  \"vrp-thread1\" } } */\n+\n /* { dg-final { scan-tree-dump-times \"486097858\" 0  \"optimized\" } } */"}, {"sha": "7be1873282c851bff7cafc07ee2be4cb0576d2f6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_3.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/61839.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1 -fdump-tree-optimized -fdisable-tree-ethread -fdisable-tree-thread1\" } */\n \n __attribute__ ((noinline))\n int foo (int a, unsigned b)\n@@ -22,5 +22,5 @@ int main ()\n }\n \n /* Scan for c [12, 13] << 8 in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"3072 : 3328\" 2  \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"3072 : 3328\" 1  \"vrp-thread1\" } } */\n /* { dg-final { scan-tree-dump-times \"3072\" 0  \"optimized\" } } */"}, {"sha": "a2386ba19f039d4e1a970b735771c7fc4ece965f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71437.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-ffast-math -O3 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-ffast-math -O3 -fdump-tree-vrp-thread1-details\" } */\n \n int I = 50, J = 50;\n int S, L;\n@@ -39,4 +39,4 @@ void foo (int K)\n \tbar (LD, SD);\n     }\n }\n-/* { dg-final { scan-tree-dump-times \"Threaded jump \" 2 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump \" 2 \"vrp-thread1\" } } */"}, {"sha": "73969bbe1e545b047f6d4d320d5c00ab2b826927", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details --param logical-op-non-short-circuit=1 -fdisable-tree-thread1 -fdisable-tree-thread2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details --param logical-op-non-short-circuit=1 -fdisable-tree-thread1 -fdisable-tree-thread2 -fdisable-tree-vrp-thread1 \" } */\n \n static int *bb_ticks;\n extern void frob (void);"}, {"sha": "1b677f44b4017be5fec389d1b41e9f599eb70500", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-16.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details -w --param logical-op-non-short-circuit=1 -fdisable-tree-vrp-thread1\" } */\n unsigned char\n validate_subreg (unsigned int offset, unsigned int isize, unsigned int osize, int zz, int qq)\n {"}, {"sha": "0246ebf3c6398f715749e97856ef735bae3c385e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-18.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-thread1-details -std=gnu89 --param logical-op-non-short-circuit=0\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details -std=gnu89 --param logical-op-non-short-circuit=0\" } */\n \n #include \"ssa-dom-thread-4.c\"\n \n@@ -24,4 +24,4 @@\n \n /* There used to be 6 jump threads found by thread1, but they all\n    depended on threading through distinct loops in ethread.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"vrp-thread1\" } } */"}, {"sha": "8f0a12c12ee52789f8d89d6117bb32d172e64231", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2a.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1-stats -fdump-tree-dom2-stats\" } */\n \n void bla();\n \n@@ -16,6 +16,6 @@ void thread_entry_through_header (void)\n \n /* There's a single jump thread that should be handled by the VRP\n    jump threading pass.  */\n-/* { dg-final { scan-tree-dump-times \"Jumps threaded: 1\" 1 \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-times \"Jumps threaded: 2\" 0 \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Jumps threaded: 1\" 1 \"vrp-thread1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Jumps threaded: 2\" 0 \"vrp-thread1\"} } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */"}, {"sha": "46e464ff26a0e24ef18244169add5ae8763e3e38", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=1\" } */\n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;\n@@ -58,4 +58,5 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n    code we missed the edge when the first conditional is false\n    (b_elt is zero, which means the second conditional is always\n    zero.  VRP1 catches all three.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 2 \"vrp-thread1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Path crosses loops\" 1 \"vrp-thread1\" } } */"}, {"sha": "8c5cc8228fb443a1ba6e790d1959d9723c434d46", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-14.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-additional-options \"-O2 -fdump-tree-vrp-details --param logical-op-non-short-circuit=1\" }  */\n+/* { dg-additional-options \"-O2 -fdump-tree-vrp-thread1-details --param logical-op-non-short-circuit=1\" }  */\n /* { dg-additional-options \"-fdisable-tree-thread1\" } */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 8 \"vrp1\" } }  */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 8 \"vrp-thread1\" } }  */\n \n void foo (void);\n void bar (void);"}, {"sha": "86d07ef9bdba8e775f5a2eadb64c72e087531283", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-vrp-thread-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details -fdelete-null-pointer-checks\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n void oof (void);\n@@ -29,5 +29,5 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \n /* ARM Cortex-M defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n    so skip below test.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"vrp1\" { target { ! arm_cortex_m } } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 1 \"vrp-thread1\" { target { ! arm_cortex_m } } } } */\n "}, {"sha": "f25ea9c38265acc6ddc9e73a8fd2574f4210bb5e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp106.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp106.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp106.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp106.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/18046  */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" }  */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"vrp1\" } }  */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details\" }  */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"vrp-thread1\" } }  */\n /* During VRP we expect to thread the true arm of the conditional through the switch\n    and to the BB that corresponds to the 7 ... 9 case label.  */\n extern void foo (void);"}, {"sha": "a478a6981ac0dd68a723e1d3732606b525de701d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp55.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-blocks-vops-details -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread1-blocks-vops-details -fdelete-null-pointer-checks\" } */\n \n void arf (void);\n \n@@ -12,6 +12,6 @@ fu (char *p, int x)\n     arf ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 1 \"vrp-thread1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 0 \"vrp-thread1\" { target {   keeps_null_pointer_checks } } } } */\n "}, {"sha": "84477a47b881e20a3d219fdc6864c6ca8b153aee", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -462,6 +462,7 @@ extern gimple_opt_pass *make_pass_copy_prop (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_isolate_erroneous_paths (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_early_vrp (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_vrp (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_vrp_threader (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_uncprop (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_return_slot (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_reassoc (gcc::context *ctxt);"}, {"sha": "29ed60a98b030926ba3ecd89332d978fded8f24a", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vr-values.h\"\n #include \"gimple-ssa-evrp-analyze.h\"\n #include \"gimple-range.h\"\n+#include \"gimple-range-path.h\"\n \n /* To avoid code explosion due to jump threading, we limit the\n    number of statements we are going to copy.  This variable\n@@ -1397,3 +1398,73 @@ jt_state::register_equivs_stmt (gimple *stmt, basic_block bb,\n     register_equiv (gimple_get_lhs (stmt), cached_lhs,\n \t\t    /*update_range=*/false);\n }\n+\n+// Hybrid threader implementation.\n+\n+\n+void\n+hybrid_jt_state::register_equivs_stmt (gimple *, basic_block, jt_simplifier *)\n+{\n+  // Ranger has no need to simplify anything to improve equivalences.\n+}\n+\n+hybrid_jt_simplifier::hybrid_jt_simplifier (gimple_ranger *r,\n+\t\t\t\t\t    path_range_query *q)\n+{\n+  m_ranger = r;\n+  m_query = q;\n+}\n+\n+tree\n+hybrid_jt_simplifier::simplify (gimple *stmt, gimple *, basic_block,\n+\t\t\t\tjt_state *state)\n+{\n+  int_range_max r;\n+\n+  compute_ranges_from_state (stmt, state);\n+\n+  if (gimple_code (stmt) == GIMPLE_COND\n+      || gimple_code (stmt) == GIMPLE_ASSIGN)\n+    {\n+      tree ret;\n+      if (m_query->range_of_stmt (r, stmt) && r.singleton_p (&ret))\n+\treturn ret;\n+    }\n+  else if (gimple_code (stmt) == GIMPLE_SWITCH)\n+    {\n+      gswitch *switch_stmt = dyn_cast <gswitch *> (stmt);\n+      tree index = gimple_switch_index (switch_stmt);\n+      if (m_query->range_of_expr (r, index, stmt))\n+\treturn find_case_label_range (switch_stmt, &r);\n+    }\n+  return NULL;\n+}\n+\n+// Use STATE to generate the list of imports needed for the solver,\n+// and calculate the ranges along the path.\n+\n+void\n+hybrid_jt_simplifier::compute_ranges_from_state (gimple *stmt, jt_state *state)\n+{\n+  auto_bitmap imports;\n+  gori_compute &gori = m_ranger->gori ();\n+\n+  state->get_path (m_path);\n+\n+  // Start with the imports to the final conditional.\n+  bitmap_copy (imports, gori.imports (m_path[0]));\n+\n+  // Add any other interesting operands we may have missed.\n+  if (gimple_bb (stmt) != m_path[0])\n+    {\n+      for (unsigned i = 0; i < gimple_num_ops (stmt); ++i)\n+\t{\n+\t  tree op = gimple_op (stmt, i);\n+\t  if (op\n+\t      && TREE_CODE (op) == SSA_NAME\n+\t      && irange::supports_type_p (TREE_TYPE (op)))\n+\t    bitmap_set_bit (imports, SSA_NAME_VERSION (op));\n+\t}\n+    }\n+  m_query->precompute_ranges (m_path, imports);\n+}"}, {"sha": "ac605a3ac30790fd428b7c4e2774c73bc7bc6a88", "filename": "gcc/tree-ssa-threadedge.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-ssa-threadedge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-ssa-threadedge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.h?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -53,6 +53,26 @@ class jt_simplifier\n   virtual tree simplify (gimple *, gimple *, basic_block, jt_state *) = 0;\n };\n \n+class hybrid_jt_state : public jt_state\n+{\n+private:\n+  void register_equivs_stmt (gimple *, basic_block, jt_simplifier *) override;\n+};\n+\n+class hybrid_jt_simplifier : public jt_simplifier\n+{\n+public:\n+  hybrid_jt_simplifier (class gimple_ranger *r, class path_range_query *q);\n+\n+private:\n+  tree simplify (gimple *stmt, gimple *, basic_block, jt_state *) override;\n+  void compute_ranges_from_state (gimple *stmt, jt_state *);\n+\n+  gimple_ranger *m_ranger;\n+  path_range_query *m_query;\n+  auto_vec<basic_block> m_path;\n+};\n+\n // This is the high level threader.  The entry point is\n // thread_outgoing_edges(), which calculates and registers paths to be\n // threaded.  When all candidates have been registered,"}, {"sha": "c55a7499c147788c1512e57a946e5248c56aef9a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 123, "deletions": 20, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -66,6 +66,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"range-op.h\"\n #include \"value-range-equiv.h\"\n #include \"gimple-array-bounds.h\"\n+#include \"gimple-range.h\"\n+#include \"gimple-range-path.h\"\n #include \"tree-ssa-dom.h\"\n \n /* Set of SSA names found live during the RPO traversal of the function\n@@ -4591,11 +4593,6 @@ execute_vrp (struct function *fun, bool warn_array_bounds_p)\n       array_checker.check ();\n     }\n \n-  /* We must identify jump threading opportunities before we release\n-     the datastructures built by VRP.  */\n-  vrp_jump_threader threader (fun, &vrp_vr_values);\n-  threader.thread_jumps ();\n-\n   simplify_casted_conds (fun, &vrp_vr_values);\n \n   free_numbers_of_iterations_estimates (fun);\n@@ -4605,21 +4602,6 @@ execute_vrp (struct function *fun, bool warn_array_bounds_p)\n      does not properly handle ASSERT_EXPRs.  */\n   assert_engine.remove_range_assertions ();\n \n-  /* If we exposed any new variables, go ahead and put them into\n-     SSA form now, before we handle jump threading.  This simplifies\n-     interactions between rewriting of _DECL nodes into SSA form\n-     and rewriting SSA_NAME nodes into SSA form after block\n-     duplication and CFG manipulation.  */\n-  update_ssa (TODO_update_ssa);\n-\n-  /* We identified all the jump threading opportunities earlier, but could\n-     not transform the CFG at that time.  This routine transforms the\n-     CFG and arranges for the dominator tree to be rebuilt if necessary.\n-\n-     Note the SSA graph update will occur during the normal TODO\n-     processing by the pass manager.  */\n-  threader.thread_through_all_blocks ();\n-\n   scev_finalize ();\n   loop_optimizer_finalize ();\n   return 0;\n@@ -4669,3 +4651,124 @@ make_pass_vrp (gcc::context *ctxt)\n {\n   return new pass_vrp (ctxt);\n }\n+\n+// This is the dom walker for the hybrid threader.  The reason this is\n+// here, as opposed to the generic threading files, is because the\n+// other client would be DOM, and they have their own custom walker.\n+\n+class hybrid_threader : public dom_walker\n+{\n+public:\n+  hybrid_threader ();\n+  ~hybrid_threader ();\n+\n+  void thread_jumps (function *fun)\n+  {\n+    walk (fun->cfg->x_entry_block_ptr);\n+  }\n+  void thread_through_all_blocks ()\n+  {\n+    m_threader->thread_through_all_blocks (false);\n+  }\n+\n+private:\n+  edge before_dom_children (basic_block) override;\n+  void after_dom_children (basic_block bb) override;\n+\n+  hybrid_jt_simplifier *m_simplifier;\n+  jump_threader *m_threader;\n+  jt_state *m_state;\n+  gimple_ranger *m_ranger;\n+  path_range_query *m_query;\n+};\n+\n+hybrid_threader::hybrid_threader () : dom_walker (CDI_DOMINATORS, REACHABLE_BLOCKS)\n+{\n+  loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n+  scev_initialize ();\n+  calculate_dominance_info (CDI_DOMINATORS);\n+  mark_dfs_back_edges ();\n+\n+  m_ranger = new gimple_ranger;\n+  m_query = new path_range_query (*m_ranger, /*resolve=*/true);\n+  m_simplifier = new hybrid_jt_simplifier (m_ranger, m_query);\n+  m_state = new hybrid_jt_state;\n+  m_threader = new jump_threader (m_simplifier, m_state);\n+}\n+\n+hybrid_threader::~hybrid_threader ()\n+{\n+  delete m_simplifier;\n+  delete m_threader;\n+  delete m_state;\n+  delete m_ranger;\n+\n+  scev_finalize ();\n+  loop_optimizer_finalize ();\n+}\n+\n+edge\n+hybrid_threader::before_dom_children (basic_block bb)\n+{\n+  gimple_stmt_iterator gsi;\n+  int_range<2> r;\n+\n+  for (gsi = gsi_start_nondebug_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      m_ranger->range_of_stmt (r, stmt);\n+    }\n+  return NULL;\n+}\n+\n+void\n+hybrid_threader::after_dom_children (basic_block bb)\n+{\n+  m_threader->thread_outgoing_edges (bb);\n+}\n+\n+static unsigned int\n+execute_vrp_threader (function *fun)\n+{\n+  hybrid_threader threader;\n+  threader.thread_jumps (fun);\n+  threader.thread_through_all_blocks ();\n+  return 0;\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_vrp_threader =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"vrp-thread\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_TREE_VRP, /* tv_id */\n+  PROP_ssa, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  ( TODO_cleanup_cfg | TODO_update_ssa ), /* todo_flags_finish */\n+};\n+\n+class pass_vrp_threader : public gimple_opt_pass\n+{\n+public:\n+  pass_vrp_threader (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_vrp_threader, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  opt_pass * clone () { return new pass_vrp_threader (m_ctxt); }\n+  virtual bool gate (function *) { return flag_tree_vrp != 0; }\n+  virtual unsigned int execute (function *fun)\n+    { return execute_vrp_threader (fun); }\n+};\n+\n+} // namespace {\n+\n+gimple_opt_pass *\n+make_pass_vrp_threader (gcc::context *ctxt)\n+{\n+  return new pass_vrp_threader (ctxt);\n+}"}, {"sha": "11a2521057ff9a5aedab594ceb669a30c45ba39e", "filename": "libgomp/team.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -312,7 +312,7 @@ gomp_team_start (void (*fn) (void *), void *data, unsigned nthreads,\n \t\t unsigned flags, struct gomp_team *team,\n \t\t struct gomp_taskgroup *taskgroup)\n {\n-  struct gomp_thread_start_data *start_data;\n+  struct gomp_thread_start_data *start_data = NULL;\n   struct gomp_thread *thr, *nthr;\n   struct gomp_task *task;\n   struct gomp_task_icv *icv;"}, {"sha": "6caa934c51939595b77b8fc6915beccafdd309d5", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-4.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,5 +1,5 @@\n /* Autopar with IF conditions.  */\n-/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n+/* { dg-additional-options \"-fdisable-tree-thread1 -fdisable-tree-vrp-thread1\" } */\n \n void abort();\n "}, {"sha": "f9e07039172605b4688626cb9138fbc9a83780ad", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0288527f47cec6698b31ccb3210816415506009e/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0288527f47cec6698b31ccb3210816415506009e/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-8.c?ref=0288527f47cec6698b31ccb3210816415506009e", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-fdisable-tree-thread1\" } */\n+/* { dg-additional-options \"-fdisable-tree-thread1 -fdisable-tree-vrp-thread1\" } */\n \n #define N 1500\n "}]}