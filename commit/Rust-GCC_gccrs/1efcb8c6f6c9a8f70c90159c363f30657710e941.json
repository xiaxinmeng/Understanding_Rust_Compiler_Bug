{"sha": "1efcb8c6f6c9a8f70c90159c363f30657710e941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmY2I4YzZmNmM5YThmNzBjOTAxNTljMzYzZjMwNjU3NzEwZTk0MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2012-10-23T14:55:55Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2012-10-23T14:55:55Z"}, "message": "gcc:\n\n\t* config.gcc (*-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu |\n\t*-*-knetbsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu): Use\n\tglibc-c.o in c_target_objs and cxx_target_objs.  Use t-glibc in\n\ttmake_file.  Set target_has_targetcm.\n\t(tilegx-*-linux*, tilepro-*-linux*): Append to c_target_objs and\n\tcxx_target_objs rather than overriding previous value.\n\t* config/glibc-c.c, config/t-glibc: New.\n\t* doc/tm.texi.in (TARGET_C_PREINCLUDE): New @hook.\n\t* doc/tm.texi: Regenerate.\n\t* hooks.c (hook_constcharptr_void_null): New.\n\t* hooks.h (hook_constcharptr_void_null): Declare.\n\ngcc/c-family:\n\t* c-common.h (pch_cpp_save_state): Declare.\n\t* c-target.def (c_preinclude): New hook.\n\t* c-opts.c (done_preinclude): New.\n\t(push_command_line_include): Handle default preincluded header.\n\t(cb_file_change): Call pch_cpp_save_state when calling\n\tpush_command_line_include.\n\t* c-pch.c (pch_ready_to_save_cpp_state, pch_cpp_state_saved)\n\t(pch_cpp_save_state): New.\n\t(pch_init): Call pch_cpp_save_state conditionally, instead of\n\tcalling cpp_save_state.\n\ngcc/testsuite:\n\t* gcc.dg/c99-predef-1.c: New test.\n\t* gcc.dg/cpp/cmdlne-dU-1.c, gcc.dg/cpp/cmdlne-dU-2.c,\n\tgcc.dg/cpp/cmdlne-dU-3.c, gcc.dg/cpp/cmdlne-dU-4.c,\n\tgcc.dg/cpp/cmdlne-dU-5.c, gcc.dg/cpp/cmdlne-dU-6.c,\n\tgcc.dg/cpp/cmdlne-dU-7.c, gcc.dg/cpp/cmdlne-dU-8.c,\n\tgcc.dg/cpp/cmdlne-dU-9.c, gcc.dg/cpp/cmdlne-dU-10.c,\n\tgcc.dg/cpp/cmdlne-dU-11.c, gcc.dg/cpp/cmdlne-dU-12.c,\n\tgcc.dg/cpp/cmdlne-dU-13.c, gcc.dg/cpp/cmdlne-dU-14.c,\n\tgcc.dg/cpp/cmdlne-dU-15.c, gcc.dg/cpp/cmdlne-dU-16.c,\n\tgcc.dg/cpp/cmdlne-dU-17.c, gcc.dg/cpp/cmdlne-dU-18.c,\n\tgcc.dg/cpp/cmdlne-dU-19.c, gcc.dg/cpp/cmdlne-dU-20.c,\n\tgcc.dg/cpp/cmdlne-dU-21.c, gcc.dg/cpp/cmdlne-dU-22.c,\n\tgcc.dg/cpp/mi5.c, gcc.dg/cpp/multiline.c: Add -nostdinc to\n\tdg-options.\n\nlibcpp:\n\t* files.c (struct _cpp_file): Add implicit_preinclude.\n\t(pch_open_file): Allow a previously opened implicitly included\n\tfile.\n\t(_cpp_find_file): Add implicit_preinclude argument.  Free file and\n\tdo not call open_file_failed if implicit_preinclude.  Store\n\timplicit_preinclude value.\n\t(_cpp_stack_include, _cpp_fake_include, _cpp_compare_file_date):\n\tUpdate calls to _cpp_find_file.\n\t(_cpp_stack_include): Handle IT_DEFAULT.\n\t(cpp_push_default_include): New.\n\t* include/cpplib.h (cpp_push_default_include): Declare.\n\t* init.c (cpp_read_main_file): Update call to _cpp_find_file.\n\t* internal.h (enum include_type): Add IT_DEFAULT.\n\t(_cpp_find_file): Update prototype.\n\nFrom-SVN: r192715", "tree": {"sha": "61e5b420fe39332b5b0cad26106b740dd349a4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61e5b420fe39332b5b0cad26106b740dd349a4fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1efcb8c6f6c9a8f70c90159c363f30657710e941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efcb8c6f6c9a8f70c90159c363f30657710e941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1efcb8c6f6c9a8f70c90159c363f30657710e941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efcb8c6f6c9a8f70c90159c363f30657710e941/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b601ca3eb1cb588cc0383c9480eb6fcb986ea2d"}], "stats": {"total": 395, "additions": 347, "deletions": 48}, "files": [{"sha": "3394051215b3b2783c157741a3f759f257000f1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,3 +1,17 @@\n+2012-10-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config.gcc (*-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu |\n+\t*-*-knetbsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu): Use\n+\tglibc-c.o in c_target_objs and cxx_target_objs.  Use t-glibc in\n+\ttmake_file.  Set target_has_targetcm.\n+\t(tilegx-*-linux*, tilepro-*-linux*): Append to c_target_objs and\n+\tcxx_target_objs rather than overriding previous value.\n+\t* config/glibc-c.c, config/t-glibc: New.\n+\t* doc/tm.texi.in (TARGET_C_PREINCLUDE): New @hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* hooks.c (hook_constcharptr_void_null): New.\n+\t* hooks.h (hook_constcharptr_void_null): Declare.\n+\n 2012-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/mips/linux-common.h (STACK_CHECK_STATIC_BUILTIN): Define."}, {"sha": "cf43137f4442c797f571a571d671c83f5f83eba4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,3 +1,16 @@\n+2012-10-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (pch_cpp_save_state): Declare.\n+\t* c-target.def (c_preinclude): New hook.\n+\t* c-opts.c (done_preinclude): New.\n+\t(push_command_line_include): Handle default preincluded header.\n+\t(cb_file_change): Call pch_cpp_save_state when calling\n+\tpush_command_line_include.\n+\t* c-pch.c (pch_ready_to_save_cpp_state, pch_cpp_state_saved)\n+\t(pch_cpp_save_state): New.\n+\t(pch_init): Call pch_cpp_save_state conditionally, instead of\n+\tcalling cpp_save_state.\n+\n 2012-10-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/53063"}, {"sha": "c78804d36e2930113c813e0cfbd168afea54fa1d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1021,6 +1021,7 @@ extern tree c_build_bind_expr (location_t, tree, tree);\n \n /* In c-pch.c  */\n extern void pch_init (void);\n+extern void pch_cpp_save_state (void);\n extern int c_common_valid_pch (cpp_reader *pfile, const char *name, int fd);\n extern void c_common_read_pch (cpp_reader *pfile, const char *name, int fd,\n \t\t\t       const char *orig);"}, {"sha": "b420d2a2cc14a5d920a196ecb8896124f52f6d21", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -108,6 +108,9 @@ static size_t deferred_count;\n /* Number of deferred options scanned for -include.  */\n static size_t include_cursor;\n \n+/* Whether any standard preincluded header has been preincluded.  */\n+static bool done_preinclude;\n+\n static void handle_OPT_d (const char *);\n static void set_std_cxx98 (int);\n static void set_std_cxx11 (int);\n@@ -1353,6 +1356,19 @@ c_finish_options (void)\n static void\n push_command_line_include (void)\n {\n+  if (!done_preinclude)\n+    {\n+      done_preinclude = true;\n+      if (flag_hosted && std_inc && !cpp_opts->preprocessed)\n+\t{\n+\t  const char *preinc = targetcm.c_preinclude ();\n+\t  if (preinc && cpp_push_default_include (parse_in, preinc))\n+\t    return;\n+\t}\n+    }\n+\n+  pch_cpp_save_state ();\n+\n   while (include_cursor < deferred_count)\n     {\n       struct deferred_opt *opt = &deferred_opts[include_cursor++];\n@@ -1388,7 +1404,10 @@ cb_file_change (cpp_reader * ARG_UNUSED (pfile),\n     fe_file_change (new_map);\n \n   if (new_map == 0 || (new_map->reason == LC_LEAVE && MAIN_FILE_P (new_map)))\n-    push_command_line_include ();\n+    {\n+      pch_cpp_save_state ();\n+      push_command_line_include ();\n+    }\n }\n \n void"}, {"sha": "f945f05b7e7de8b17d83db79870a480445772372", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -93,6 +93,10 @@ get_ident (void)\n   return result;\n }\n \n+/* Whether preprocessor state should be saved by pch_init.  */\n+\n+static bool pch_ready_to_save_cpp_state = false;\n+\n /* Prepare to write a PCH file, if one is being written.  This is\n    called at the start of compilation.  */\n \n@@ -136,7 +140,31 @@ pch_init (void)\n   /* Let the debugging format deal with the PCHness.  */\n   (*debug_hooks->handle_pch) (0);\n \n-  cpp_save_state (parse_in, f);\n+  if (pch_ready_to_save_cpp_state)\n+    pch_cpp_save_state ();\n+}\n+\n+/* Whether preprocessor state has been saved in a PCH file.  */\n+\n+static bool pch_cpp_state_saved = false;\n+\n+/* Save preprocessor state in a PCH file, after implicitly included\n+   headers have been read.  If the PCH file has not yet been opened,\n+   record that state should be saved when it is opened.  */\n+\n+void\n+pch_cpp_save_state (void)\n+{\n+  if (!pch_cpp_state_saved)\n+    {\n+      if (pch_outfile)\n+\t{\n+\t  cpp_save_state (parse_in, pch_outfile);\n+\t  pch_cpp_state_saved = true;\n+\t}\n+      else\n+\tpch_ready_to_save_cpp_state = true;\n+    }\n }\n \n /* Write the PCH file.  This is called at the end of a compilation which"}, {"sha": "c2025ab76b76970f0255ed773e4dc66b40bfeb24", "filename": "gcc/c-family/c-target.def", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fc-family%2Fc-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target.def?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,6 +1,6 @@\n /* Target hook definitions for C-family front ends.\n    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011\n+   2011, 2012\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -89,5 +89,20 @@ DEFHOOK\n   @var{format_arg} is one recognized as a valid string reference type.\",\n  void, (tree format_arg, tree args_list),\n  NULL)\n+\n+DEFHOOK\n+(c_preinclude,\n+ \"Define this hook to return the name of a header file to be included at\\\n+ the start of all compilations, as if it had been included with\\\n+ @code{#include <@var{file}>}.  If this hook returns @code{NULL}, or is\\\n+ not defined, or the header is not found, or if the user specifies\\\n+ @option{-ffreestanding} or @option{-nostdinc}, no header is included.\\n\\\n+\\n\\\n+ This hook can be used together with a header provided by the system C\\\n+ library to implement ISO C requirements for certain macros to be\\\n+ predefined that describe properties of the whole implementation rather\\\n+ than just the compiler.\",\n+ const char *, (void),\n+ hook_constcharptr_void_null)\n  \n HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "fbbf38943a9d998fcf0688c2097b7310b5dd214a", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -666,6 +666,10 @@ case ${target} in\n       tm_defines=\"$tm_defines ANDROID_DEFAULT=0\"\n       ;;\n   esac\n+  c_target_objs=\"${c_target_objs} glibc-c.o\"\n+  cxx_target_objs=\"${cxx_target_objs} glibc-c.o\"\n+  tmake_file=\"${tmake_file} t-glibc\"\n+  target_has_targetcm=yes\n   ;;\n *-*-netbsd*)\n   tmake_file=\"t-slibgcc\"\n@@ -2472,16 +2476,16 @@ tilegx-*-linux*)\n \ttm_file=\"elfos.h gnu-user.h linux.h glibc-stdint.h tilegx/linux.h ${tm_file}\"\n         tmake_file=\"${tmake_file} tilegx/t-tilegx\"\n \textra_objs=\"mul-tables.o\"\n-\tc_target_objs=\"tilegx-c.o\"\n-\tcxx_target_objs=\"tilegx-c.o\"\n+\tc_target_objs=\"${c_target_objs} tilegx-c.o\"\n+\tcxx_target_objs=\"${cxx_target_objs} tilegx-c.o\"\n \textra_headers=\"feedback.h\"\n \t;;\n tilepro-*-linux*)\n \ttm_file=\"elfos.h gnu-user.h linux.h glibc-stdint.h tilepro/linux.h ${tm_file}\"\n         tmake_file=\"${tmake_file} tilepro/t-tilepro\"\n \textra_objs=\"mul-tables.o\"\n-\tc_target_objs=\"tilepro-c.o\"\n-\tcxx_target_objs=\"tilepro-c.o\"\n+\tc_target_objs=\"${c_target_objs} tilepro-c.o\"\n+\tcxx_target_objs=\"${cxx_target_objs} tilepro-c.o\"\n \textra_headers=\"feedback.h\"\n \t;;\n v850-*-rtems*)"}, {"sha": "e350c6e5b0c9b42807c626c7b283be70bf6d3191", "filename": "gcc/config/glibc-c.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fconfig%2Fglibc-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fconfig%2Fglibc-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fglibc-c.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -0,0 +1,38 @@\n+/* C-family target hooks initializer for targets possibly using glibc.\n+   Copyright (C) 2012\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"c-family/c-target.h\"\n+#include \"c-family/c-target-def.h\"\n+\n+/* Implement TARGET_C_PREINCLUDE for glibc targets.  */\n+\n+static const char *\n+glibc_c_preinclude (void)\n+{\n+  return \"stdc-predef.h\";\n+}\n+\n+#undef TARGET_C_PREINCLUDE\n+#define TARGET_C_PREINCLUDE glibc_c_preinclude\n+\n+struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;"}, {"sha": "c4dcc5152713eeebd6827bac3dacc5c3144fecc3", "filename": "gcc/config/t-glibc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fconfig%2Ft-glibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fconfig%2Ft-glibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-glibc?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -0,0 +1,23 @@\n+# Copyright (C) 2012\n+# Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+glibc-c.o: config/glibc-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(C_TARGET_H) $(C_TARGET_DEF_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n+\t  $< $(OUTPUT_OPTION)"}, {"sha": "72ea14cd28ed1a13ba893d86a275318c0057df4c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -10647,6 +10647,12 @@ convention when processing system header files, but when processing user\n files @code{__STDC__} will always expand to 1.\n @end defmac\n \n+@deftypefn {C Target Hook} {const char *} TARGET_C_PREINCLUDE (void)\n+Define this hook to return the name of a header file to be included at the start of all compilations, as if it had been included with @code{#include <@var{file}>}.  If this hook returns @code{NULL}, or is not defined, or the header is not found, or if the user specifies @option{-ffreestanding} or @option{-nostdinc}, no header is included.\n+\n+ This hook can be used together with a header provided by the system C library to implement ISO C requirements for certain macros to be predefined that describe properties of the whole implementation rather than just the compiler.\n+@end deftypefn\n+\n @defmac NO_IMPLICIT_EXTERN_C\n Define this macro if the system header files support C++ as well as C@.\n This macro inhibits the usual method of using system header files in"}, {"sha": "ce31aae4b72ceb5454c2420c6712b18e34c51eae", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -10505,6 +10505,8 @@ convention when processing system header files, but when processing user\n files @code{__STDC__} will always expand to 1.\n @end defmac\n \n+@hook TARGET_C_PREINCLUDE\n+\n @defmac NO_IMPLICIT_EXTERN_C\n Define this macro if the system header files support C++ as well as C@.\n This macro inhibits the usual method of using system header files in"}, {"sha": "cbb6e86f7d2488762a31c9bfd9455345c6187f1a", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -341,6 +341,13 @@ hook_tree_tree_tree_tree_3rd_identity (tree a ATTRIBUTE_UNUSED,\n   return c;\n }\n \n+/* Generic hook that takes no arguments and returns a NULL string.  */\n+const char *\n+hook_constcharptr_void_null (void)\n+{\n+  return NULL;\n+}\n+\n /* Generic hook that takes a tree and returns a NULL string.  */\n const char *\n hook_constcharptr_const_tree_null (const_tree t ATTRIBUTE_UNUSED)"}, {"sha": "5c77f927502ff085cc0bc9bb3168d5dd7d757d6b", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -95,6 +95,7 @@ extern rtx hook_rtx_rtx_identity (rtx);\n extern rtx hook_rtx_rtx_null (rtx);\n extern rtx hook_rtx_tree_int_null (tree, int);\n \n+extern const char *hook_constcharptr_void_null (void);\n extern const char *hook_constcharptr_const_tree_null (const_tree);\n extern const char *hook_constcharptr_const_rtx_null (const_rtx);\n extern const char *hook_constcharptr_const_tree_const_tree_null (const_tree, const_tree);"}, {"sha": "f305e7b07e566925693f6cd971188c41b401453c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,3 +1,20 @@\n+2012-10-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c99-predef-1.c: New test.\n+\t* gcc.dg/cpp/cmdlne-dU-1.c, gcc.dg/cpp/cmdlne-dU-2.c,\n+\tgcc.dg/cpp/cmdlne-dU-3.c, gcc.dg/cpp/cmdlne-dU-4.c,\n+\tgcc.dg/cpp/cmdlne-dU-5.c, gcc.dg/cpp/cmdlne-dU-6.c,\n+\tgcc.dg/cpp/cmdlne-dU-7.c, gcc.dg/cpp/cmdlne-dU-8.c,\n+\tgcc.dg/cpp/cmdlne-dU-9.c, gcc.dg/cpp/cmdlne-dU-10.c,\n+\tgcc.dg/cpp/cmdlne-dU-11.c, gcc.dg/cpp/cmdlne-dU-12.c,\n+\tgcc.dg/cpp/cmdlne-dU-13.c, gcc.dg/cpp/cmdlne-dU-14.c,\n+\tgcc.dg/cpp/cmdlne-dU-15.c, gcc.dg/cpp/cmdlne-dU-16.c,\n+\tgcc.dg/cpp/cmdlne-dU-17.c, gcc.dg/cpp/cmdlne-dU-18.c,\n+\tgcc.dg/cpp/cmdlne-dU-19.c, gcc.dg/cpp/cmdlne-dU-20.c,\n+\tgcc.dg/cpp/cmdlne-dU-21.c, gcc.dg/cpp/cmdlne-dU-22.c,\n+\tgcc.dg/cpp/mi5.c, gcc.dg/cpp/multiline.c: Add -nostdinc to\n+\tdg-options.\n+\n 2012-10-23  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/tree-ssa/foldconst-6.c: New testcase."}, {"sha": "b907764579e33f0c6d56a6258e26bd1089bcde95", "filename": "gcc/testsuite/gcc.dg/c99-predef-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-predef-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-predef-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-predef-1.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -0,0 +1,63 @@\n+/* Verify that predefined macros for properties of the compiler and\n+   library together are the same before and after system headers are\n+   included.  This is broken with older glibc versions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+#ifdef __STDC_IEC_559__\n+#define IEC_559_DEFINED_BEFORE 1\n+#else\n+#define IEC_559_DEFINED_BEFORE 0\n+#endif\n+\n+#ifdef __STDC_IEC_559_COMPLEX__\n+#define IEC_559_COMPLEX_DEFINED_BEFORE 1\n+#else\n+#define IEC_559_COMPLEX_DEFINED_BEFORE 0\n+#endif\n+\n+#ifdef __STDC_ISO_10646__\n+#define ISO_10646_DEFINED_BEFORE 1\n+#else\n+#define ISO_10646_DEFINED_BEFORE 0\n+#endif\n+\n+#include <stdio.h>\n+\n+#ifdef __STDC_IEC_559__\n+#define IEC_559_DEFINED_AFTER 1\n+#else\n+#define IEC_559_DEFINED_AFTER 0\n+#endif\n+\n+#ifdef __STDC_IEC_559_COMPLEX__\n+#define IEC_559_COMPLEX_DEFINED_AFTER 1\n+#else\n+#define IEC_559_COMPLEX_DEFINED_AFTER 0\n+#endif\n+\n+#ifdef __STDC_ISO_10646__\n+#define ISO_10646_DEFINED_AFTER 1\n+#else\n+#define ISO_10646_DEFINED_AFTER 0\n+#endif\n+\n+#if defined(__GLIBC__) && (__GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ < 16))\n+#define BROKEN\n+#endif\n+\n+#ifndef BROKEN\n+\n+#if IEC_559_DEFINED_BEFORE != IEC_559_DEFINED_AFTER\n+#error \"__STDC_IEC_559__ definition inconsistency\"\n+#endif\n+\n+#if IEC_559_COMPLEX_DEFINED_BEFORE != IEC_559_COMPLEX_DEFINED_AFTER\n+#error \"__STDC_IEC_559_COMPLEX__ definition inconsistency\"\n+#endif\n+\n+#if ISO_10646_DEFINED_BEFORE != ISO_10646_DEFINED_AFTER\n+#error \"__STDC_ISO_10646__ definition inconsistency\"\n+#endif\n+\n+#endif"}, {"sha": "129e48bf8e643a06c7042f816d1ed1e58dd923bb", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-1.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-1.i \"^\\n*#undef A\\n*$\" } } */\n #ifdef A\n #endif"}, {"sha": "31398a7625b13bfba4bf473deb80ac65a75d1a3d", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-10.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-10.i \"^\\n*C\\n+#define B C\\n+#define A B\\n*$\" } } */\n /* This file deliberately has no final newline.  */\n #define A B\n #define B C\n-A\n\\ No newline at end of file\n+A"}, {"sha": "1c0128bb431820f556eb787550c0a8bc4fdcf8b4", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-11.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-11.i \"^\\n*\\n*$\" } } */\n #define A B\n #if 0"}, {"sha": "54620a57ee2ffae1dd73fd27bf2c77682216b37f", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-12.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-12.i \"^\\n*#define A 1\\n*$\" } } */\n #define A 1\n #if A"}, {"sha": "45ce532b20616834f337976a68708c266313ea5b", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-13.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-13.i \"^\\n*#undef A\\n*$\" } } */\n #ifdef A\n #endif"}, {"sha": "4fe96a4d7708b51d449f9d53c007550945f4609d", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-14.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-14.i \"^\\n*B\\n+#define A B\\n+B\\n*$\" } } */\n #define A B\n A"}, {"sha": "2df0b62f9bec07ebfeaa75dd59783ce1d8a6e0e5", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-15.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-15.i \"^\\n*\\n*$\" } } */\n #if A\n #endif"}, {"sha": "41a9a9110bfc2c29acda7cd2502886737b8e951a", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-16.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n-/* { dg-options \"-P -dU -std=c89\" { target *-*-solaris2.* } } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU -std=c89\" { target *-*-solaris2.* } } */\n /* { dg-final { scan-file cmdlne-dU-16.i \"^\\n*#define __STDC__ 1\\n*$\" } } */\n #ifdef __STDC__\n #endif"}, {"sha": "fd608e1d4d68a04ce71d379756f5f1e02f613d3f", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-17.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-17.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n-/* { dg-options \"-P -dU -std=c89\" { target *-*-solaris2.* } } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU -std=c89\" { target *-*-solaris2.* } } */\n /* { dg-final { scan-file cmdlne-dU-17.i \"^\\n*1\\n+#define __STDC__ 1\\n*$\" } } */\n __STDC__"}, {"sha": "97104845d08488f7fc719b6d3113f7784a21f751", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-18.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-18.i \"^\\n*x 1 y\\n+#define A 1\\n*$\" } } */\n #define A 1\n x A y"}, {"sha": "c6c3af3562c9e6236fda97672d405a52c6f9e9b3", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-19.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-19.i \"^\\n*B\\n+#define A B\\n+#undef A\\n*$\" } } */\n #define A B\n A"}, {"sha": "dffdd2ba90954ffc1c3ba3258fecfaafd2ec1c14", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-2.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-2.i \"^\\n*#define A *\\n*$\" } } */\n #define A\n #ifdef A"}, {"sha": "065b807ef61c5c96b5e5fb070ac04749ac9832c5", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-20.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-20.i \"^\\n*A B\\n*$\" } } */\n #define A(x) x\n A B"}, {"sha": "1fefe542cbdd1e845b3bd9399fb8c796be2771c3", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-21.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-21.i \"^\\n*hello There\\n+#define ASTRING There\\n+#define MACROARGS\\\\(A\\\\) A\\n+#undef BSTRING\\n*$\" } } */\n #define ASTRING There\n #define MACROARGS(A) A"}, {"sha": "fe100ceb023e79baa88bd821b501618566ce0077", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-22.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-22.i \"^\\n*#undef AAA\\n+AAA is undefined\\n+#undef BBB\\n+BBB is undefined\\n+#undef CCC\\n+CCC is undefined\\n*$\" } } */\n #ifndef AAA\n AAA is undefined"}, {"sha": "a26fc9881de61e55f191f57254168ee5c1b6d7fe", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-3.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-3.i \"^\\n*#define A B\\n*$\" } } */\n #define A B\n #ifndef A"}, {"sha": "aa3d853a09ae114501f43b9a4e5f3ef6c960a369", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-4.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-4.i \"^\\n*#undef A\\n*$\" } } */\n #if defined(A)\n #endif"}, {"sha": "bfae850de30cddb691871ba46e700a619a43e509", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-5.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-5.i \"^\\n*#undef A\\n*$\" } } */\n #ifdef A\n #ifdef B"}, {"sha": "e2c801df30770e8076e900cfc88532953fb11e4a", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-6.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-6.i \"^\\n*#undef A\\n+#define A *\\n*$\" } } */\n #ifdef A\n #endif"}, {"sha": "030917844839ce64d4d36336631bff2b1728dc44", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-7.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-7.i \"^\\n*B\\n+#define A B\\n+C\\n+#define A C\\n*$\" } } */\n #define A B\n A"}, {"sha": "da97fabed5b5e28fa3119993b18091d8ee42d212", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-8.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-8.i \"^\\n*B D\\n+#define A\\\\(x\\\\) B x\\n+#define C D\\n*$\" } } */\n #define A(x) B x\n #define C D"}, {"sha": "bd0f0edfeccef464f06dbc557ddcc86de78b6f43", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-dU-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-dU-9.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-P -dU\" } */\n+/* { dg-options \"-nostdinc -P -dU\" } */\n /* { dg-final { scan-file cmdlne-dU-9.i \"^\\n*C\\n+#define B C\\n+#define A B\\n*$\" } } */\n #define A B\n #define B C"}, {"sha": "09f4f5c0d465c0c19cf323d927af4ce779e65805", "filename": "gcc/testsuite/gcc.dg/cpp/mi5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmi5.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -6,7 +6,7 @@\n    otherwise it will not be interpreted all in one unit.  */\n \n /* { dg-do preprocess }\n-   { dg-options \"-H -C\" }\n+   { dg-options \"-nostdinc -H -C\" }\n    { dg-message \"mi1c\\.h\" \"redundant include check with -C\" { target *-*-* } 0 } */\n \n #include \"mi1c.h\""}, {"sha": "970cf2faa0ca17f13fc99694c88183af44d84748", "filename": "gcc/testsuite/gcc.dg/cpp/multiline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,6 +1,6 @@\n /* Copyright (C) 2000, 2003 Free Software Foundation, Inc.  */\n /* { dg-do preprocess } */\n-/* { dg-options \"-C\" } */\n+/* { dg-options \"-nostdinc -C\" } */\n /* Test that multi-line tokens are recognized by cpp0 as being\n    multiline .  Source: Neil Booth, 17 Dec 2000.  */\n /* Line 1"}, {"sha": "9b833522836df5512b4e6b75890476c48cdd9b5e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,3 +1,20 @@\n+2012-10-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* files.c (struct _cpp_file): Add implicit_preinclude.\n+\t(pch_open_file): Allow a previously opened implicitly included\n+\tfile.\n+\t(_cpp_find_file): Add implicit_preinclude argument.  Free file and\n+\tdo not call open_file_failed if implicit_preinclude.  Store\n+\timplicit_preinclude value.\n+\t(_cpp_stack_include, _cpp_fake_include, _cpp_compare_file_date):\n+\tUpdate calls to _cpp_find_file.\n+\t(_cpp_stack_include): Handle IT_DEFAULT.\n+\t(cpp_push_default_include): New.\n+\t* include/cpplib.h (cpp_push_default_include): Declare.\n+\t* init.c (cpp_read_main_file): Update call to _cpp_find_file.\n+\t* internal.h (enum include_type): Add IT_DEFAULT.\n+\t(_cpp_find_file): Update prototype.\n+\n 2012-10-15  Tobias Burnus  <burnus@net-b.de>\n \n \t* files.c (read_file_guts, _cpp_save_file_entries): Free memory"}, {"sha": "ecaa27414e1e3c2003fbe9dc4a1ee9c5d46e347c", "filename": "libcpp/files.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -110,6 +110,9 @@ struct _cpp_file\n \n   /* If BUFFER above contains the true contents of the file.  */\n   bool buffer_valid;\n+\n+  /* If this file is implicitly preincluded.  */\n+  bool implicit_preinclude;\n };\n \n /* A singly-linked list for all searches for a given file name, with\n@@ -291,7 +294,8 @@ pch_open_file (cpp_reader *pfile, _cpp_file *file, bool *invalid_pch)\n   /* If the file is not included as first include from either the toplevel\n      file or the command-line it is not a valid use of PCH.  */\n   if (pfile->all_files\n-      && pfile->all_files->next_file)\n+      && pfile->all_files->next_file\n+      && !pfile->all_files->next_file->implicit_preinclude)\n     return false;\n \n   flen = strlen (path);\n@@ -480,9 +484,14 @@ _cpp_find_failed (_cpp_file *file)\n    descriptor.  FD can be -1 if the file was found in the cache and\n    had previously been closed.  To open it again pass the return value\n    to open_file().\n+\n+   If IMPLICIT_PREINCLUDE then it is OK for the file to be missing.\n+   If present, it is OK for a precompiled header to be included after\n+   it.\n */\n _cpp_file *\n-_cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool fake, int angle_brackets)\n+_cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n+\t\tbool fake, int angle_brackets, bool implicit_preinclude)\n {\n   struct file_hash_entry *entry, **hash_slot;\n   _cpp_file *file;\n@@ -506,6 +515,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n     return entry->u.file;\n \n   file = make_cpp_file (pfile, start_dir, fname);\n+  file->implicit_preinclude = implicit_preinclude;\n \n   /* Try each path in the include chain.  */\n   for (; !fake ;)\n@@ -535,7 +545,14 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool f\n \t\tcpp_error (pfile, CPP_DL_ERROR,\n \t\t\t   \"use -Winvalid-pch for more information\");\n \t    }\n-\t  open_file_failed (pfile, file, angle_brackets);\n+\t  if (implicit_preinclude)\n+\t    {\n+\t      free ((char *) file->name);\n+\t      free (file);\n+\t      return NULL;\n+\t    }\n+\t  else\n+\t    open_file_failed (pfile, file, angle_brackets);\n \t  break;\n \t}\n \n@@ -950,7 +967,10 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n   if (!dir)\n     return false;\n \n-  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets);\n+  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets,\n+\t\t\t type == IT_DEFAULT);\n+  if (type == IT_DEFAULT && file == NULL)\n+    return false;\n \n   /* Compensate for the increment in linemap_add that occurs in\n      _cpp_stack_file.  In the case of a normal #include, we're\n@@ -960,7 +980,8 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n      This does not apply if we found a PCH file (in which case\n      linemap_add is not called) or we were included from the\n      command-line.  */\n-  if (file->pchname == NULL && file->err_no == 0 && type != IT_CMDLINE)\n+  if (file->pchname == NULL && file->err_no == 0\n+      && type != IT_CMDLINE && type != IT_DEFAULT)\n     pfile->line_table->highest_location--;\n \n   return _cpp_stack_file (pfile, file, type == IT_IMPORT);\n@@ -1243,7 +1264,7 @@ cpp_clear_file_cache (cpp_reader *pfile)\n void\n _cpp_fake_include (cpp_reader *pfile, const char *fname)\n {\n-  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, true, 0);\n+  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, true, 0, false);\n }\n \n /* Not everyone who wants to set system-header-ness on a buffer can\n@@ -1361,7 +1382,7 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n   if (!dir)\n     return -1;\n \n-  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets);\n+  file = _cpp_find_file (pfile, fname, dir, false, angle_brackets, false);\n   if (file->err_no)\n     return -1;\n \n@@ -1382,6 +1403,15 @@ cpp_push_include (cpp_reader *pfile, const char *fname)\n   return _cpp_stack_include (pfile, fname, false, IT_CMDLINE);\n }\n \n+/* Pushes the given file, implicitly included at the start of a\n+   compilation, onto the buffer stack but without any errors if the\n+   file is not found.  Returns nonzero if successful.  */\n+bool\n+cpp_push_default_include (cpp_reader *pfile, const char *fname)\n+{\n+  return _cpp_stack_include (pfile, fname, true, IT_DEFAULT);\n+}\n+\n /* Do appropriate cleanup when a file INC's buffer is popped off the\n    input stack.  */\n void"}, {"sha": "a58454e9839be0fa81b73c8aec9090dd11017fe7", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for CPP library.\n    Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n@@ -1010,6 +1010,7 @@ extern bool cpp_included (cpp_reader *, const char *);\n extern bool cpp_included_before (cpp_reader *, const char *, source_location);\n extern void cpp_make_system_header (cpp_reader *, int, int);\n extern bool cpp_push_include (cpp_reader *, const char *);\n+extern bool cpp_push_default_include (cpp_reader *, const char *);\n extern void cpp_change_file (cpp_reader *, enum lc_reason, const char *);\n extern const char *cpp_get_path (struct _cpp_file *);\n extern cpp_dir *cpp_get_dir (struct _cpp_file *);"}, {"sha": "81b66df57e50d918bc66466a984437421a35fcf5", "filename": "libcpp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -1,7 +1,7 @@\n /* CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n-   2009, 2010, 2011 Free Software Foundation, Inc.\n+   2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -593,7 +593,7 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n     }\n \n   pfile->main_file\n-    = _cpp_find_file (pfile, fname, &pfile->no_search_path, false, 0);\n+    = _cpp_find_file (pfile, fname, &pfile->no_search_path, false, 0, false);\n   if (_cpp_find_failed (pfile->main_file))\n     return NULL;\n "}, {"sha": "312b8b5cb0ec648412d54b44e29199565c6f139f", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1efcb8c6f6c9a8f70c90159c363f30657710e941/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=1efcb8c6f6c9a8f70c90159c363f30657710e941", "patch": "@@ -117,7 +117,7 @@ extern unsigned char *_cpp_unaligned_alloc (cpp_reader *, size_t);\n #define BUFF_LIMIT(BUFF) ((BUFF)->limit)\n \n /* #include types.  */\n-enum include_type {IT_INCLUDE, IT_INCLUDE_NEXT, IT_IMPORT, IT_CMDLINE};\n+enum include_type {IT_INCLUDE, IT_INCLUDE_NEXT, IT_IMPORT, IT_CMDLINE, IT_DEFAULT};\n \n union utoken\n {\n@@ -625,7 +625,7 @@ extern void _cpp_destroy_hashtable (cpp_reader *);\n /* In files.c */\n typedef struct _cpp_file _cpp_file;\n extern _cpp_file *_cpp_find_file (cpp_reader *, const char *, cpp_dir *,\n-\t\t\t\t  bool, int);\n+\t\t\t\t  bool, int, bool);\n extern bool _cpp_find_failed (_cpp_file *);\n extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);\n extern void _cpp_fake_include (cpp_reader *, const char *);"}]}