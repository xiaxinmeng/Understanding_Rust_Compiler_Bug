{"sha": "06c5f54ccc1b94e0e7025478d3f36ee2eb334bde", "node_id": "C_kwDOANBUbNoAKDA2YzVmNTRjY2MxYjk0ZTBlNzAyNTQ3OGQzZjM2ZWUyZWIzMzRiZGU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-26T08:23:45Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-28T13:20:47Z"}, "message": "ast: resolve: Add SimplePath path resolver", "tree": {"sha": "0a46491413f973e62ec9c7914edcdef35a06036d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a46491413f973e62ec9c7914edcdef35a06036d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821c7947bfd6787fdaaba8dca2f9468661666dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821c7947bfd6787fdaaba8dca2f9468661666dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821c7947bfd6787fdaaba8dca2f9468661666dcc"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "3e4bb3352de9ec8bf40d08a1e0d784ce394b2fb4", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=06c5f54ccc1b94e0e7025478d3f36ee2eb334bde", "patch": "@@ -37,6 +37,13 @@ ResolvePath::go (AST::QualifiedPathInExpression *expr, NodeId parent)\n   resolver.resolve_path (expr);\n }\n \n+void\n+ResolvePath::go (AST::SimplePath *expr, NodeId parent)\n+{\n+  ResolvePath resolver (parent);\n+  resolver.resolve_path (expr);\n+}\n+\n void\n ResolvePath::resolve_path (AST::PathInExpression *expr)\n {\n@@ -272,5 +279,91 @@ ResolvePath::resolve_segments (CanonicalPath prefix, size_t offs,\n     }\n }\n \n+void\n+ResolvePath::resolve_path (AST::SimplePath *expr)\n+{\n+  // resolve root segment first then apply segments in turn\n+  auto &segs = expr->get_segments ();\n+  auto &root_segment = segs.at (0);\n+  auto &root_ident_seg = root_segment.get_segment_name ();\n+\n+  /**\n+   * TODO: We need to handle functions and types later on for `use` statements.\n+   * So we will also need to check the type scope\n+   *\n+   * bool segment_is_type = false;\n+   * bool segment_is_func = false;\n+   */\n+  CanonicalPath root_seg_path\n+    = CanonicalPath::new_seg (root_segment.get_node_id (), root_ident_seg);\n+\n+  // name scope first\n+  if (resolver->get_name_scope ().lookup (root_seg_path, &resolved_node))\n+    {\n+      resolver->insert_resolved_name (root_segment.get_node_id (),\n+\t\t\t\t      resolved_node);\n+      resolver->insert_new_definition (root_segment.get_node_id (),\n+\t\t\t\t       Definition{expr->get_node_id (),\n+\t\t\t\t\t\t  parent});\n+    }\n+  else\n+    {\n+      rust_error_at (expr->get_locus (),\n+\t\t     \"Cannot find path %<%s%> in this scope\",\n+\t\t     root_segment.as_string ().c_str ());\n+      return;\n+    }\n+\n+  bool is_single_segment = segs.size () == 1;\n+  if (is_single_segment)\n+    {\n+      // if (segment_is_type)\n+      // resolver->insert_resolved_type (expr->get_node_id (), resolved_node);\n+\n+      resolver->insert_resolved_name (expr->get_node_id (), resolved_node);\n+      resolver->insert_new_definition (expr->get_node_id (),\n+\t\t\t\t       Definition{expr->get_node_id (),\n+\t\t\t\t\t\t  parent});\n+      return;\n+    }\n+\n+  resolve_simple_path_segments (root_seg_path, 1, expr->get_segments (),\n+\t\t\t\texpr->get_node_id (), expr->get_locus ());\n+}\n+\n+void\n+ResolvePath::resolve_simple_path_segments (\n+  CanonicalPath prefix, size_t offs,\n+  const std::vector<AST::SimplePathSegment> &segs, NodeId expr_node_id,\n+  Location expr_locus)\n+{\n+  /**\n+   * TODO: We also need to handle types and functions here\n+   */\n+\n+  CanonicalPath path = prefix;\n+  for (const auto &seg : segs)\n+    {\n+      auto s = ResolveSimplePathSegmentToCanonicalPath::resolve (seg);\n+      path = path.append (s);\n+\n+      resolved_node = UNKNOWN_NODEID;\n+\n+      if (resolver->get_name_scope ().lookup (path, &resolved_node))\n+\t{\n+\t  resolver->insert_resolved_name (seg.get_node_id (), resolved_node);\n+\t  resolver->insert_new_definition (seg.get_node_id (),\n+\t\t\t\t\t   Definition{expr_node_id, parent});\n+\t}\n+    }\n+\n+  if (resolved_node != UNKNOWN_NODEID)\n+    {\n+      resolver->insert_resolved_name (expr_node_id, resolved_node);\n+      resolver->insert_new_definition (expr_node_id,\n+\t\t\t\t       Definition{expr_node_id, parent});\n+    }\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "cbfe967fdcc958d1a6d73ff8f59302b180ad52cb", "filename": "gcc/rust/resolve/rust-ast-resolve-path.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c5f54ccc1b94e0e7025478d3f36ee2eb334bde/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h?ref=06c5f54ccc1b94e0e7025478d3f36ee2eb334bde", "patch": "@@ -31,6 +31,7 @@ class ResolvePath : public ResolverBase\n public:\n   static void go (AST::PathInExpression *expr, NodeId parent);\n   static void go (AST::QualifiedPathInExpression *expr, NodeId parent);\n+  static void go (AST::SimplePath *expr, NodeId parent);\n \n private:\n   ResolvePath (NodeId parent) : ResolverBase (parent) {}\n@@ -42,12 +43,17 @@ class ResolvePath : public ResolverBase\n   void resolve_segments (CanonicalPath prefix, size_t offs,\n \t\t\t std::vector<AST::PathExprSegment> &segs,\n \t\t\t NodeId expr_node_id, Location expr_locus);\n+\n+  void\n+  resolve_simple_path_segments (CanonicalPath prefix, size_t offs,\n+\t\t\t\tconst std::vector<AST::SimplePathSegment> &segs,\n+\t\t\t\tNodeId expr_node_id, Location expr_locus);\n };\n \n class ResolveSimplePathSegmentToCanonicalPath\n {\n public:\n-  static CanonicalPath resolve (AST::SimplePathSegment &seg)\n+  static CanonicalPath resolve (const AST::SimplePathSegment &seg)\n   {\n     // FIXME: Since this is so simple, maybe it can simply be a tiny function?\n     return CanonicalPath::new_seg (seg.get_node_id (), seg.get_segment_name ());"}]}