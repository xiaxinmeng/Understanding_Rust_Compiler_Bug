{"sha": "b6dd52618f43de2492a727317bd6af3acfa78a23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkZDUyNjE4ZjQzZGUyNDkyYTcyNzMxN2JkNmFmM2FjZmE3OGEyMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-06-05T09:24:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-06-05T09:24:43Z"}, "message": "re PR tree-optimization/53081 (memcpy/memset loop recognition)\n\n2012-06-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/53081\n\t* tree-loop-distribution.c (generate_memset_builtin): Handle all\n\tkinds of byte-sized stores.\n\t(classify_partition): Likewise.\n\t(tree_loop_distribution): Adjust seed statements used for\n\t!flag_tree_loop_distribution.\n\n\t* gcc.dg/tree-ssa/ldist-19.c: New testcase.\n\t* gcc.c-torture/execute/builtins/builtins.exp: Always pass\n\t-fno-tree-loop-distribute-patterns.\n\nFrom-SVN: r188232", "tree": {"sha": "80310ade27a32fd660f2a3eea597d5c759baeec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80310ade27a32fd660f2a3eea597d5c759baeec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6dd52618f43de2492a727317bd6af3acfa78a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dd52618f43de2492a727317bd6af3acfa78a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6dd52618f43de2492a727317bd6af3acfa78a23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dd52618f43de2492a727317bd6af3acfa78a23/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44072af5b08af901bf25a728a6beecde0664e92c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44072af5b08af901bf25a728a6beecde0664e92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44072af5b08af901bf25a728a6beecde0664e92c"}], "stats": {"total": 156, "additions": 149, "deletions": 7}, "files": [{"sha": "1ebee7b5dd3e569f982856e2e7ce4fe04cef04f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6dd52618f43de2492a727317bd6af3acfa78a23", "patch": "@@ -1,3 +1,12 @@\n+2012-06-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53081\n+\t* tree-loop-distribution.c (generate_memset_builtin): Handle all\n+\tkinds of byte-sized stores.\n+\t(classify_partition): Likewise.\n+\t(tree_loop_distribution): Adjust seed statements used for\n+\t!flag_tree_loop_distribution.\n+\n 2012-06-05  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (ptr_regno_for_savres): Comment."}, {"sha": "3bfc678473c7cb7c69250c31d33076fb738429a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6dd52618f43de2492a727317bd6af3acfa78a23", "patch": "@@ -1,3 +1,10 @@\n+2012-06-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53081\n+\t* gcc.dg/tree-ssa/ldist-19.c: New testcase.\n+\t* gcc.c-torture/execute/builtins/builtins.exp: Always pass\n+\t-fno-tree-loop-distribute-patterns.\n+\n 2012-06-05  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.target/powerpc/savres.c: Add -mdynamic-no-pic for darwin."}, {"sha": "f7cc82b1062b24c94606399ad7be6c86bd5cf198", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/builtins.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp?ref=b6dd52618f43de2492a727317bd6af3acfa78a23", "patch": "@@ -37,7 +37,7 @@ load_lib c-torture.exp\n torture-init\n set-torture-options $C_TORTURE_OPTIONS {{}} $LTO_TORTURE_OPTIONS\n \n-set additional_flags \"\"\n+set additional_flags \"-fno-tree-loop-distribute-patterns\"\n if [istarget \"powerpc-*-darwin*\"] {\n    lappend additional_flags \"-Wl,-multiply_defined,suppress\"\n }"}, {"sha": "332fedf462a6e5b93b64fa6aa546ed99dc643422", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-19.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-19.c?ref=b6dd52618f43de2492a727317bd6af3acfa78a23", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-ldist-details\" } */\n+\n+struct Foo\n+{\n+  char a;\n+};\n+\n+struct Foo x[256];\n+\n+static void __attribute__((noinline,noclone))\n+foo()\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    x[i] = (struct Foo){};\n+}\n+\n+static void __attribute__((noinline,noclone))\n+bar()\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    x[i].a = 1;\n+}\n+\n+static void __attribute__((noinline,noclone))\n+foobar(unsigned char c)\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    x[i].a = c;\n+}\n+\n+static void __attribute__((noinline,noclone))\n+foobar2(char c)\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    x[i].a = c;\n+}\n+\n+struct Baz\n+{\n+  short a;\n+};\n+\n+struct Baz y[256];\n+\n+static void __attribute__((noinline,noclone))\n+baz()\n+{\n+  int i;\n+  for (i = 0; i < 256; ++i)\n+    y[i].a = -1;\n+}\n+\n+int main()\n+{\n+  volatile int x;\n+  foo();\n+  bar();\n+  foobar(x);\n+  foobar2(x);\n+  baz();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"generated memset zero\" 1 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"generated memset minus one\" 1 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"generated memset\" 5 \"ldist\" } } */\n+/* { dg-final { cleanup-tree-dump \"ldist\" } } */"}, {"sha": "5903918c2ed2c77a7fdf9e531c1d553b2a9d8c85", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6dd52618f43de2492a727317bd6af3acfa78a23/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=b6dd52618f43de2492a727317bd6af3acfa78a23", "patch": "@@ -332,6 +332,7 @@ generate_memset_builtin (struct loop *loop, struct graph *rdg,\n   gimple_seq stmt_list = NULL, stmts;\n   struct data_reference *dr = XCNEW (struct data_reference);\n   location_t loc;\n+  tree val;\n \n   stmt = partition->main_stmt;\n   loc = gimple_location (stmt);\n@@ -364,13 +365,44 @@ generate_memset_builtin (struct loop *loop, struct graph *rdg,\n   mem = force_gimple_operand (addr_base, &stmts, true, NULL);\n   gimple_seq_add_seq (&stmt_list, stmts);\n \n+  /* This exactly matches the pattern recognition in classify_partition.  */\n+  val = gimple_assign_rhs1 (stmt);\n+  if (integer_zerop (val)\n+      || real_zerop (val)\n+      || TREE_CODE (val) == CONSTRUCTOR)\n+    val = integer_zero_node;\n+  else if (integer_all_onesp (val))\n+    val = build_int_cst (integer_type_node, -1);\n+  else\n+    {\n+      if (TREE_CODE (val) == INTEGER_CST)\n+\tval = fold_convert (integer_type_node, val);\n+      else if (!useless_type_conversion_p (integer_type_node, TREE_TYPE (val)))\n+\t{\n+\t  gimple cstmt;\n+\t  tree tem = create_tmp_reg (integer_type_node, NULL);\n+\t  tem = make_ssa_name (tem, NULL);\n+\t  cstmt = gimple_build_assign_with_ops (NOP_EXPR, tem, val, NULL_TREE);\n+\t  gimple_seq_add_stmt (&stmt_list, cstmt);\n+\t  val = tem;\n+\t}\n+    }\n+\n   fn = build_fold_addr_expr (builtin_decl_implicit (BUILT_IN_MEMSET));\n-  fn_call = gimple_build_call (fn, 3, mem, integer_zero_node, nb_bytes);\n+  fn_call = gimple_build_call (fn, 3, mem, val, nb_bytes);\n   gimple_seq_add_stmt (&stmt_list, fn_call);\n   gsi_insert_seq_after (&gsi, stmt_list, GSI_CONTINUE_LINKING);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"generated memset zero\\n\");\n+    {\n+      fprintf (dump_file, \"generated memset\");\n+      if (integer_zerop (val))\n+\tfprintf (dump_file, \" zero\\n\");\n+      else if (integer_all_onesp (val))\n+\tfprintf (dump_file, \" minus one\\n\");\n+      else\n+\tfprintf (dump_file, \"\\n\");\n+    }\n }\n \n /* Remove and destroy the loop LOOP.  */\n@@ -865,7 +897,19 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n \t    return;\n \t  partition->main_stmt = stmt;\n \t  rhs = gimple_assign_rhs1 (stmt);\n-\t  if (!(integer_zerop (rhs) || real_zerop (rhs)))\n+\t  if (!(integer_zerop (rhs)\n+\t\t|| integer_all_onesp (rhs)\n+\t\t|| real_zerop (rhs)\n+\t\t|| (TREE_CODE (rhs) == CONSTRUCTOR\n+\t\t    && !TREE_CLOBBER_P (rhs))\n+\t\t|| (INTEGRAL_TYPE_P (TREE_TYPE (rhs))\n+\t\t    && (TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt)))\n+\t\t\t== TYPE_MODE (unsigned_char_type_node)))))\n+\t    return;\n+\t  if (TREE_CODE (rhs) == SSA_NAME\n+\t      && !SSA_NAME_IS_DEFAULT_DEF (rhs)\n+\t      && flow_bb_inside_loop_p\n+\t\t   (loop, gimple_bb (SSA_NAME_DEF_STMT (rhs))))\n \t    return;\n \t  if (VEC_length (data_reference_p, RDG_DATAREFS (rdg, i)) != 1)\n \t    return;\n@@ -1346,9 +1390,19 @@ tree_loop_distribution (void)\n \n \t      /* If we are only performing pattern detection restrict\n \t\t what we try to distribute to stores from constants.  */\n-\t      if (!flag_tree_loop_distribution\n-\t\t  && !is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n-\t\tcontinue;\n+\t      if (!flag_tree_loop_distribution)\n+\t\t{\n+\t\t  tree rhs = gimple_assign_rhs1 (stmt);\n+\t\t  if (!is_gimple_min_invariant (rhs)\n+\t\t      && TREE_CODE (rhs) != CONSTRUCTOR\n+\t\t      && TREE_CODE (rhs) != SSA_NAME)\n+\t\t    continue;\n+\t\t  if (TREE_CODE (rhs) == SSA_NAME\n+\t\t      && !SSA_NAME_IS_DEFAULT_DEF (rhs)\n+\t\t      && flow_bb_inside_loop_p\n+\t\t\t   (loop, gimple_bb (SSA_NAME_DEF_STMT (rhs))))\n+\t\t    continue;\n+\t\t}\n \n \t      VEC_safe_push (gimple, heap, work_list, stmt);\n \t    }"}]}