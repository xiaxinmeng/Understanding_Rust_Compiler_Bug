{"sha": "e11187cc9473e1ad1d6a6df452187539fd248ed4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExMTg3Y2M5NDczZTFhZDFkNmE2ZGY0NTIxODc1MzlmZDI0OGVkNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-26T17:00:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-26T17:00:04Z"}, "message": "re PR c/39581 (VLA types at file scope wrongly rejected)\n\n\tPR c/39581\n\t* c-decl.c (global_bindings_p): Return negative value.\n\t(c_variable_size): New.  Based on variable_size from\n\tstor-layout.c.\n\t(grokdeclarator): Call c_variable_size not variable_size.\n\ntestsuite:\n\t* gcc.dg/c99-const-expr-14.c, gcc.dg/gnu99-const-expr-4.c,\n\tgcc.dg/vla-21.c: New tests.\n\nFrom-SVN: r146806", "tree": {"sha": "f5f749a398961d61350c6b4f85c26984ab3f9154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5f749a398961d61350c6b4f85c26984ab3f9154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11187cc9473e1ad1d6a6df452187539fd248ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11187cc9473e1ad1d6a6df452187539fd248ed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11187cc9473e1ad1d6a6df452187539fd248ed4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11187cc9473e1ad1d6a6df452187539fd248ed4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a51d3184cb8cd65a5b9a72312c4f4fb814a384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a51d3184cb8cd65a5b9a72312c4f4fb814a384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a51d3184cb8cd65a5b9a72312c4f4fb814a384"}], "stats": {"total": 119, "additions": 117, "deletions": 2}, "files": [{"sha": "da92f2f9686a6e3e1564a1f85cd6d213393991e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e11187cc9473e1ad1d6a6df452187539fd248ed4", "patch": "@@ -1,3 +1,11 @@\n+2009-04-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/39581\n+\t* c-decl.c (global_bindings_p): Return negative value.\n+\t(c_variable_size): New.  Based on variable_size from\n+\tstor-layout.c.\n+\t(grokdeclarator): Call c_variable_size not variable_size.\n+\n 2009-04-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (print_operand) ['z']: Fix typo."}, {"sha": "88bfa25008e2077eede449ec146a9ffbdaa5dbb4", "filename": "gcc/c-decl.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e11187cc9473e1ad1d6a6df452187539fd248ed4", "patch": "@@ -663,7 +663,9 @@ objc_mark_locals_volatile (void *enclosing_blk)\n int\n global_bindings_p (void)\n {\n-  return current_scope == file_scope && !c_override_global_bindings_to_false;\n+  return (current_scope == file_scope && !c_override_global_bindings_to_false\n+\t  ? -1\n+\t  : 0);\n }\n \n void\n@@ -4015,6 +4017,34 @@ warn_variable_length_array (const char *name, tree size)\n     }\n }\n \n+/* Given a size SIZE that may not be a constant, return a SAVE_EXPR to\n+   serve as the actual size-expression for a type or decl.  This is\n+   like variable_size in stor-layout.c, but we make global_bindings_p\n+   return negative to avoid calls to that function from outside the\n+   front end resulting in errors at file scope, then call this version\n+   instead from front-end code.  */\n+\n+static tree\n+c_variable_size (tree size)\n+{\n+  tree save;\n+\n+  if (TREE_CONSTANT (size))\n+    return size;\n+\n+  size = save_expr (size);\n+\n+  save = skip_simple_arithmetic (size);\n+\n+  if (cfun && cfun->dont_save_pending_sizes_p)\n+    return size;\n+\n+  if (!global_bindings_p ())\n+    put_pending_size (save);\n+\n+  return size;\n+}\n+\n /* Given declspecs and a declarator,\n    determine the name and type of the object declared\n    and construct a ..._DECL node for it.\n@@ -4479,7 +4509,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t       MINUS_EXPR, which allows the -1 to get folded\n \t\t       with the +1 that happens when building TYPE_SIZE.  */\n \t\t    if (size_varies)\n-\t\t      size = variable_size (size);\n+\t\t      size = c_variable_size (size);\n \t\t    if (this_size_varies && TREE_CODE (size) == INTEGER_CST)\n \t\t      size = build2 (COMPOUND_EXPR, TREE_TYPE (size),\n \t\t\t\t     integer_zero_node, size);"}, {"sha": "65d6cdf8feb8666a9bd6b1020e05e40bb690ee97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e11187cc9473e1ad1d6a6df452187539fd248ed4", "patch": "@@ -1,3 +1,9 @@\n+2009-04-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/39581\n+\t* gcc.dg/c99-const-expr-14.c, gcc.dg/gnu99-const-expr-4.c,\n+\tgcc.dg/vla-21.c: New tests.\n+\n 2009-04-26  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/39556"}, {"sha": "0c4f1b69bd4a60172c21b21656b08589388ccff2", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-14.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-14.c?ref=e11187cc9473e1ad1d6a6df452187539fd248ed4", "patch": "@@ -0,0 +1,35 @@\n+/* Test for constant expressions: cases involving VLAs, at file scope.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+/* It appears address constants may contain casts to variably modified\n+   types.  Whether they should be permitted was discussed in\n+   <http://groups.google.com/group/comp.std.c/msg/923eee5ab690fd98>\n+   <LV7g2Vy3ARF$Ew9Q@romana.davros.org>; since static pointers to VLAs\n+   are definitely permitted within functions and may be initialized\n+   and such initialization involves implicit conversion to a variably\n+   modified type, allowing explicit casts seems appropriate.  Thus,\n+   GCC allows them as long as the \"evaluated\" size expressions do not\n+   contain the various operators not permitted to be evaluated in a\n+   constant expression, and as long as the result is genuinely\n+   constant (meaning that pointer arithmetic using the size of the VLA\n+   is generally not permitted).  */\n+\n+static int sa[100];\n+\n+volatile int nv;\n+int m;\n+int n;\n+int f (int, int);\n+\n+static int (*a2)[] = (int (*)[n])sa;\n+static int (*a8)[] = (int (*)[(m=n)])sa; /* { dg-error \"constant\" } */\n+static int (*a9)[] = (int (*)[(m+=n)])sa; /* { dg-error \"constant\" } */\n+static int (*a10)[] = (int (*)[f(m,n)])sa; /* { dg-error \"constant\" } */\n+static int (*a11)[] = (int (*)[(m,n)])sa; /* { dg-error \"constant\" } */\n+static int (*a12)[] = (int (*)[sizeof(int[n])])sa;\n+static int (*a13)[] = (int (*)[sizeof(int[m++])])sa; /* { dg-error \"constant\" } */\n+static int (*a15)[] = (int (*)[sizeof(*(int (*)[n])sa)])sa;\n+static int (*a16)[] = (int (*)[sizeof(*(int (*)[m++])sa)])sa; /* { dg-error \"constant\" } */\n+static int (*a17)[] = (int (*)[nv])sa;"}, {"sha": "baaa63031a50433f5c00ae93eab0ab3945a5d1ab", "filename": "gcc/testsuite/gcc.dg/gnu99-const-expr-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-4.c?ref=e11187cc9473e1ad1d6a6df452187539fd248ed4", "patch": "@@ -0,0 +1,29 @@\n+/* Test for constant expressions: cases involving VLAs and typeof, at\n+   file scope.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -pedantic-errors\" } */\n+\n+/* It appears address constants may contain casts to variably modified\n+   types.  Whether they should be permitted was discussed in\n+   <http://groups.google.com/group/comp.std.c/msg/923eee5ab690fd98>\n+   <LV7g2Vy3ARF$Ew9Q@romana.davros.org>; since static pointers to VLAs\n+   are definitely permitted within functions and may be initialized\n+   and such initialization involves implicit conversion to a variably\n+   modified type, allowing explicit casts seems appropriate.  Thus,\n+   GCC allows them as long as the \"evaluated\" size expressions do not\n+   contain the various operators not permitted to be evaluated in a\n+   constant expression, and as long as the result is genuinely\n+   constant (meaning that pointer arithmetic using the size of the VLA\n+   is generally not permitted).  */\n+\n+static int sa[100];\n+int m;\n+int n;\n+\n+static int (*a1)[] = &sa;\n+static int (*a2)[] = (__typeof__(int (*)[n]))sa;\n+static int (*a4)[] = (__typeof__((int (*)[n])sa))sa;\n+static int (*a5)[] = (__typeof__((int (*)[m++])sa))sa; /* { dg-error \"constant\" } */\n+static int (*a6)[] = (__typeof__((int (*)[100])(int (*)[m++])sa))sa;\n+static int (*a7)[] = (__typeof__((int (*)[n])sa + m++))sa; /* { dg-error \"constant\" } */"}, {"sha": "a39ae0b426660fe45f038942a8f83993d20242ee", "filename": "gcc/testsuite/gcc.dg/vla-21.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11187cc9473e1ad1d6a6df452187539fd248ed4/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-21.c?ref=e11187cc9473e1ad1d6a6df452187539fd248ed4", "patch": "@@ -0,0 +1,7 @@\n+/* Type names for VLAs should be allowed outside functions if the size\n+   is not evaluated.  PR 39581.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+int a;\n+int b = sizeof (int (*)[a]);"}]}