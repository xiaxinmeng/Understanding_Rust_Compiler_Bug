{"sha": "0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2ZWQxMjExZDRlNjc1OWEwYzM1YmM4ZDA1ZmIwN2U1ZWFiN2JlYQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-05-08T18:22:44Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-05-08T18:22:44Z"}, "message": "re PR fortran/79930 (Potentially Missed Optimisation for MATMUL / DOT_PRODUCT)\n\n2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/79930\n\t* frontend-passes.c (matmul_to_var_expr): New function,\n\tadd prototype.\n\t(matmul_to_var_code):  Likewise.\n\t(optimize_namespace):  Use them from gfc_code_walker.\n\n2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/79930\n\t* gfortran.dg/inline_transpose_1.f90:  Add\n\t-finline-matmul-limit=0 to options.\n\t* gfortran.dg/matmul_5.f90:  Likewise.\n\t* gfortran.dg/vect/vect-8.f90: Likewise.\n\t* gfortran.dg/inline_matmul_14.f90:  New test.\n\t* gfortran.dg/inline_matmul_15.f90:  New test.\n\nFrom-SVN: r247755", "tree": {"sha": "0590178a17fc64dd8917d650ffd6af7caef96161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0590178a17fc64dd8917d650ffd6af7caef96161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/comments", "author": null, "committer": null, "parents": [{"sha": "507e429b2fe28c21889d166817a35496777d19ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507e429b2fe28c21889d166817a35496777d19ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/507e429b2fe28c21889d166817a35496777d19ba"}], "stats": {"total": 206, "additions": 202, "deletions": 4}, "files": [{"sha": "1803789967cec51615afb0fca140a6b2eb1864f7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -1,3 +1,11 @@\n+2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/79930\n+\t* frontend-passes.c (matmul_to_var_expr): New function,\n+\tadd prototype.\n+\t(matmul_to_var_code):  Likewise.\n+\t(optimize_namespace):  Use them from gfc_code_walker.\n+\n 2017-05-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cpp.c (cb_cpp_error): Replace report_diagnostic"}, {"sha": "32b4e80d515fac9aa74f772de0ff7c338b2944e4", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 74, "deletions": 3, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -43,6 +43,8 @@ static void optimize_reduction (gfc_namespace *);\n static int callback_reduction (gfc_expr **, int *, void *);\n static void realloc_strings (gfc_namespace *);\n static gfc_expr *create_var (gfc_expr *, const char *vname=NULL);\n+static int matmul_to_var_expr (gfc_expr **, int *, void *);\n+static int matmul_to_var_code (gfc_code **, int *, void *);\n static int inline_matmul_assign (gfc_code **, int *, void *);\n static gfc_code * create_do_loop (gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t\t  locus *, gfc_namespace *,\n@@ -1076,9 +1078,20 @@ optimize_namespace (gfc_namespace *ns)\n   gfc_code_walker (&ns->code, cfe_code, cfe_expr_0, NULL);\n   gfc_code_walker (&ns->code, optimize_code, optimize_expr, NULL);\n   if (flag_inline_matmul_limit != 0)\n-    gfc_code_walker (&ns->code, inline_matmul_assign, dummy_expr_callback,\n-\t\t     NULL);\n-\n+    {\n+      bool found;\n+      do\n+\t{\n+\t  found = false;\n+\t  gfc_code_walker (&ns->code, matmul_to_var_code, matmul_to_var_expr,\n+\t\t\t   (void *) &found);\n+\t}\n+      while (found);\n+\t\n+      gfc_code_walker (&ns->code, inline_matmul_assign, dummy_expr_callback,\n+\t\t       NULL);\n+    }\n+  \n   /* BLOCKs are handled in the expression walker below.  */\n   for (ns = ns->contained; ns; ns = ns->sibling)\n     {\n@@ -2086,6 +2099,64 @@ doloop_warn (gfc_namespace *ns)\n \n /* This selction deals with inlining calls to MATMUL.  */\n \n+/* Replace calls to matmul outside of straight assignments with a temporary\n+   variable so that later inlining will work.  */\n+\n+static int\n+matmul_to_var_expr (gfc_expr **ep, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t    void *data)\n+{\n+  gfc_expr *e, *n;\n+  bool *found = (bool *) data;\n+  \n+  e = *ep;\n+\n+  if (e->expr_type != EXPR_FUNCTION\n+      || e->value.function.isym == NULL\n+      || e->value.function.isym->id != GFC_ISYM_MATMUL)\n+    return 0;\n+\n+  if (forall_level > 0 || iterator_level > 0 || in_omp_workshare\n+      || in_where)\n+    return 0;\n+\n+  /* Check if this is already in the form c = matmul(a,b).  */\n+  \n+  if ((*current_code)->expr2 == e)\n+    return 0;\n+\n+  n = create_var (e, \"matmul\");\n+  \n+  /* If create_var is unable to create a variable (for example if\n+     -fno-realloc-lhs is in force with a variable that does not have bounds\n+     known at compile-time), just return.  */\n+\n+  if (n == NULL)\n+    return 0;\n+  \n+  *ep = n;\n+  *found = true;\n+  return 0;\n+}\n+\n+/* Set current_code and associated variables so that matmul_to_var_expr can\n+   work.  */\n+\n+static int\n+matmul_to_var_code (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t    void *data ATTRIBUTE_UNUSED)\n+{\n+  if (current_code != c)\n+    {\n+      current_code = c;\n+      inserted_block = NULL;\n+      changed_statement = NULL;\n+    }\n+  \n+  return 0;\n+}\n+\n+\n /* Auxiliary function to build and simplify an array inquiry function.\n    dim is zero-based.  */\n "}, {"sha": "3aba70effd9bb08ef766afe2ede598bf7ce82e65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -1,3 +1,13 @@\n+2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/79930\n+\t* gfortran.dg/inline_transpose_1.f90:  Add\n+\t-finline-matmul-limit=0 to options.\n+\t* gfortran.dg/matmul_5.f90:  Likewise.\n+\t* gfortran.dg/vect/vect-8.f90: Likewise.\n+\t* gfortran.dg/inline_matmul_14.f90:  New test.\n+\t* gfortran.dg/inline_matmul_15.f90:  New test.\n+\n 2017-05-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/80602"}, {"sha": "740b3a11e6ddd224e64e962c50102d61b2c7e5ca", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_14.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_14.f90?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do run }\n+! { dg-options \"-O -ffrontend-optimize -fdump-tree-optimized\" }\n+! PR 79930 - missed optimization by not inlining matmul in expressions.\n+\n+module foo\n+  implicit none\n+contains\n+  subroutine test1\n+    ! Test with fixed dimensions\n+    real, dimension(3,2) :: a1\n+    real, dimension(2,4) :: b1\n+    real, dimension(3,4) :: cres1\n+    real, dimension(3,3) :: a2\n+    real, dimension(3) :: v1, v2\n+    real :: r\n+    character(len=9*18) :: r1, r2\n+    real(kind=8), dimension(3,3) :: a3, b3, c3, d3, res3\n+    \n+    data a1 / 2.,  -3.,  5.,  -7., 11., -13./\n+    data b1 /17., -23., 29., -31., 37., -39., 41., -47./\n+    data cres1 /195., -304.,  384.,  275., -428.,  548.,  347., -540.,  692.,  411., -640.,  816./\n+\n+    data a2 / 2.,  -3.,  5.,  -7., 11., -13., 17., -23., 29./\n+    data v1 /-31., 37., -41./\n+    data v2 /43., -47., 53./\n+\n+    data a3/-2.d0, 3.d0, 5.d0, -7.d0, -11.d0, 13.d0, 17.d0, -19.d0, -23.d0/\n+    data b3/29.d0, -31.d0, 37.d0, -41.d0, 43.d0, -47.d0, 53.d0, -59.d0, 61.d0/\n+    data c3/-67.d0,71.d0, 73.d0, -79.d0, -83.d0, 89.d0, 97.d0, -101.d0, 103.d0/\n+    data d3/107.d0, 109.d0, 113.d0, 127.d0, 131.d0, 137.d0, 139.d0, 149.d0, 151.d0/\n+    data res3/48476106.d0, -12727087.d0, -68646789.d0, 58682206.d0, -15428737.d0, -83096539.d0,&\n+         & 65359710.d0, -17176589.d0, -92551887.d0/\n+\n+    write (unit=r1, fmt='(12F12.5)') matmul(a1,b1)\n+    write (unit=r2, fmt='(12F12.5)') cres1\n+    if (r1 /= r2) call abort\n+\n+    r = dot_product(matmul(a2,v1),v2)\n+    if (abs(r+208320) > 1) call abort\n+\n+    write (unit=r1,fmt='(1P,9E18.10)') matmul(matmul(a3,b3),matmul(c3,d3))\n+    write (unit=r2,fmt='(1P,9E18.10)') res3\n+    if (r1 /= r2) call abort\n+    \n+  end subroutine test1\n+\n+  subroutine test2\n+    ! Test with dimensions not known at compile-time\n+    real, dimension(:,:), allocatable :: a1\n+    real, dimension(:,:), allocatable :: b1\n+    real, dimension(3,4) :: cres1\n+    real, dimension(:,:), allocatable :: a2\n+    real, dimension(:), allocatable :: v1, v2\n+    real :: r\n+    character(len=9*18) :: r1, r2\n+    real(kind=8), dimension(3,3) :: a3, b3, c3, d3, res3\n+    data cres1 /195., -304.,  384.,  275., -428.,  548.,  347., -540.,  692.,  411., -640.,  816./\n+    data res3/48476106.d0, -12727087.d0, -68646789.d0, 58682206.d0, -15428737.d0, -83096539.d0,&\n+         & 65359710.d0, -17176589.d0, -92551887.d0/\n+    \n+    a1 = reshape([ 2.,  -3.,  5.,  -7., 11., -13.], [3,2])\n+    b1 = reshape([17., -23., 29., -31., 37., -39., 41., -47.],[2,4])\n+\n+    a2 = reshape([2.,  -3.,  5.,  -7., 11., -13., 17., -23., 29.],[3,3]);\n+    v1 = [-31., 37., -41.]\n+    v2 = [43., -47., 53.]\n+\n+    a3 = reshape([-2.d0, 3.d0, 5.d0, -7.d0, -11.d0, 13.d0, 17.d0, -19.d0, -23.d0], [3,3])\n+    b3 = reshape([29.d0, -31.d0, 37.d0, -41.d0, 43.d0, -47.d0, 53.d0, -59.d0, 61.d0], [3,3])\n+    c3 = reshape([-67.d0,71.d0, 73.d0, -79.d0, -83.d0, 89.d0, 97.d0, -101.d0, 103.d0], [3,3])\n+    d3 = reshape([107.d0, 109.d0, 113.d0, 127.d0, 131.d0, 137.d0, 139.d0, 149.d0, 151.d0],[3,3])\n+\n+    write (unit=r1, fmt='(12F12.5)') matmul(a1,b1)\n+    write (unit=r2, fmt='(12F12.5)') cres1\n+    if (r1 /= r2) call abort\n+\n+    r = dot_product(matmul(a2,v1),v2)\n+    if (abs(r+208320) > 1) call abort\n+\n+    write (unit=r1,fmt='(1P,9E18.10)') matmul(matmul(a3,b3),matmul(c3,d3))\n+    write (unit=r2,fmt='(1P,9E18.10)') res3\n+    if (r1 /= r2) call abort\n+    \n+  end subroutine test2\n+\n+end module foo\n+\n+program main\n+  use foo\n+  implicit none\n+  call test1\n+  call test2\n+!  call test3\n+end program main\n+! { dg-final { scan-tree-dump-times \"_gfortran_matmul\" 0 \"optimized\" } }"}, {"sha": "c822248c49a371213149717e9765d86970bf0248", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_15.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_15.f90?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do run }\n+! { dg-shouldfail \"dimension of array B incorrect in MATMUL intrinsic\" }\n+! { dg-options \"-O -finline-matmul-limit=100 -fcheck=bounds\" }\n+program main\n+  real, dimension(:,:), allocatable :: a\n+  real, dimension(:), allocatable :: b\n+  allocate (a(2,2), b(3))\n+  call random_number(a)\n+  call random_number(b)\n+  print *,matmul(a,b)\n+end program main\n+! { dg-output \"Fortran runtime error: Dimension of array B incorrect in MATMUL intrinsic.*\" }"}, {"sha": "4195562c560fee3a5bd10612e34172fb78a379c7", "filename": "gcc/testsuite/gfortran.dg/inline_transpose_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_transpose_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_transpose_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_transpose_1.f90?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-fdump-tree-original -fdump-tree-optimized -Warray-temporaries -fbounds-check\" }\n+! { dg-options \"-finline-matmul-limit=0 -fdump-tree-original -fdump-tree-optimized -Warray-temporaries -fbounds-check\" }\n \n   implicit none\n "}, {"sha": "5f1402889d315542b26640314381dc5966862745", "filename": "gcc/testsuite/gfortran.dg/matmul_5.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_5.f90?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do run }\n ! { dg-shouldfail \"dimension of array B incorrect in MATMUL intrinsic\" }\n+! { dg-options \"-finline-matmul-limit=0\" }\n program main\n   real, dimension(:,:), allocatable :: a\n   real, dimension(:), allocatable :: b"}, {"sha": "ec955989c9ffb6fc2b0cc99de24f9d7b95ecdf84", "filename": "gcc/testsuite/gfortran.dg/vect/vect-8.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90?ref=0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do compile }\n ! { dg-require-effective-target vect_double }\n+! { dg-additional-options \"-finline-matmul-limit=0\" }\n \n module lfk_prec\n  integer, parameter :: dp=kind(1.d0)"}]}