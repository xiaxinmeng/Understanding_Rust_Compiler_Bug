{"sha": "60386f50ceca766476f4e22f1c78c56865d9bc9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzODZmNTBjZWNhNzY2NDc2ZjRlMjJmMWM3OGM1Njg2NWQ5YmM5ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-03-27T08:30:28Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-03-27T08:30:28Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2011-03-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.h (gfc_isym_id): Rename GFC_ISYM_NUMIMAGES to\n        GFC_ISYM_NUM_IMAGES.\n        (gfc_fcoarray): Add GFC_FCOARRAY_LIB.\n        * intrinsic.c (add_functions): Update due to GFC_ISYM_NUM_IMAGES\n        rename.\n        * invoke.texi (-fcoarray=): Document \"lib\" argument.\n        * iresolve.c (gfc_resolve_this_image): Fix THIS IMAGE().\n        * libgfortran.h (libgfortran_stat_codes): Add comments.\n        * options.c (gfc_handle_coarray_option): Add -fcoarray=lib.\n        * simplify.c (gfc_simplify_num_images, gfc_simplify_this_image):\n        Handle GFC_FCOARRAY_LIB.\n        * trans.h (gfc_init_coarray_decl): New prototype.\n        (gfor_fndecl_caf_init, gfor_fndecl_caf_finalize,\n        gfor_fndecl_caf_critical, gfor_fndecl_caf_end_critical,\n        gfor_fndecl_caf_sync_all, gfor_fndecl_caf_sync_images,\n        gfor_fndecl_caf_error_stop, gfor_fndecl_caf_error_stop_str,\n        gfort_gvar_caf_num_images, gfort_gvar_caf_this_image):\n        New global variables.\n        * trans-decl.c: Declare several CAF functions (cf. above).\n        (gfc_build_builtin_function_decls): Initialize those.\n        (gfc_init_coarray_decl): New function.\n        (create_main_function): Call CAF init/finalize functions.\n        * trans-intrinsic.c (trans_this_image, trans_num_images): New.\n        (gfc_conv_intrinsic_function): Call those.\n        * trans-stmt.c (gfc_trans_stop, gfc_trans_sync,\n        * gfc_trans_critical):\n        Add code for GFC_FCOARRAY_LIB.\n\nFrom-SVN: r171568", "tree": {"sha": "0005cd512602d2a7bb1e87ea8d3a877ae7220371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0005cd512602d2a7bb1e87ea8d3a877ae7220371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60386f50ceca766476f4e22f1c78c56865d9bc9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60386f50ceca766476f4e22f1c78c56865d9bc9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60386f50ceca766476f4e22f1c78c56865d9bc9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60386f50ceca766476f4e22f1c78c56865d9bc9d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46ae608f26f24496e54e7da889eb76cc3136e198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ae608f26f24496e54e7da889eb76cc3136e198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ae608f26f24496e54e7da889eb76cc3136e198"}], "stats": {"total": 425, "additions": 394, "deletions": 31}, "files": [{"sha": "e266fc3db721ff2af692dbe652d7d348711d11b5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -1,3 +1,33 @@\n+2011-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.h (gfc_isym_id): Rename GFC_ISYM_NUMIMAGES to\n+\tGFC_ISYM_NUM_IMAGES.\n+\t(gfc_fcoarray): Add GFC_FCOARRAY_LIB.\n+\t* intrinsic.c (add_functions): Update due to GFC_ISYM_NUM_IMAGES\n+\trename.\n+\t* invoke.texi (-fcoarray=): Document \"lib\" argument.\n+\t* iresolve.c (gfc_resolve_this_image): Fix THIS IMAGE().\n+\t* libgfortran.h (libgfortran_stat_codes): Add comments.\n+\t* options.c (gfc_handle_coarray_option): Add -fcoarray=lib.\n+\t* simplify.c (gfc_simplify_num_images, gfc_simplify_this_image):\n+\tHandle GFC_FCOARRAY_LIB.\n+\t* trans.h (gfc_init_coarray_decl): New prototype.\n+\t(gfor_fndecl_caf_init, gfor_fndecl_caf_finalize,\n+\tgfor_fndecl_caf_critical, gfor_fndecl_caf_end_critical,\n+\tgfor_fndecl_caf_sync_all, gfor_fndecl_caf_sync_images,\n+\tgfor_fndecl_caf_error_stop, gfor_fndecl_caf_error_stop_str,\n+\tgfort_gvar_caf_num_images, gfort_gvar_caf_this_image):\n+\tNew global variables.\n+\t* trans-decl.c: Declare several CAF functions (cf. above).\n+\t(gfc_build_builtin_function_decls): Initialize those.\n+\t(gfc_init_coarray_decl): New function.\n+\t(create_main_function): Call CAF init/finalize functions.\n+\t* trans-intrinsic.c (trans_this_image, trans_num_images): New.\n+\t(gfc_conv_intrinsic_function): Call those.\n+\t* trans-stmt.c (gfc_trans_stop, gfc_trans_sync, gfc_trans_critical):\n+\tAdd code for GFC_FCOARRAY_LIB.\n+\n 2011-03-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/48291"}, {"sha": "eec737c10c0085e5b76974d0a0adf51bbb885509", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -458,7 +458,7 @@ enum gfc_isym_id\n   GFC_ISYM_NORM2,\n   GFC_ISYM_NOT,\n   GFC_ISYM_NULL,\n-  GFC_ISYM_NUMIMAGES,\n+  GFC_ISYM_NUM_IMAGES,\n   GFC_ISYM_OR,\n   GFC_ISYM_PACK,\n   GFC_ISYM_PARITY,\n@@ -572,7 +572,8 @@ init_local_integer;\n typedef enum\n {\n   GFC_FCOARRAY_NONE = 0,\n-  GFC_FCOARRAY_SINGLE\n+  GFC_FCOARRAY_SINGLE,\n+  GFC_FCOARRAY_LIB\n }\n gfc_fcoarray;\n "}, {"sha": "0fea0786e9ca55805b0ee1caf47603c15b3b22ad", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -2358,7 +2358,8 @@ add_functions (void)\n \n   make_generic (\"null\", GFC_ISYM_NULL, GFC_STD_F95);\n \n-  add_sym_0 (\"num_images\", GFC_ISYM_NUMIMAGES, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F2008,\n+  add_sym_0 (\"num_images\", GFC_ISYM_NUM_IMAGES, CLASS_INQUIRY, ACTUAL_NO,\n+\t     BT_INTEGER, di, GFC_STD_F2008,\n \t     NULL, gfc_simplify_num_images, NULL);\n \n   add_sym_3 (\"pack\", GFC_ISYM_PACK, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr, GFC_STD_F95,"}, {"sha": "5441dbcc121869c403df58010e84a62365e1d747", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -166,7 +166,7 @@ and warnings}.\n -fwhole-file -fsecond-underscore @gol\n -fbounds-check -fcheck-array-temporaries  -fmax-array-constructor =@var{n} @gol\n -fcheck=@var{<all|array-temps|bounds|do|mem|pointer|recursion>} @gol\n--fcoarray=@var{<none|single>} -fmax-stack-var-size=@var{n} @gol\n+-fcoarray=@var{<none|single|lib>} -fmax-stack-var-size=@var{n} @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n -fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n -finit-integer=@var{n} -finit-real=@var{<zero|inf|-inf|nan|snan>} @gol\n@@ -1249,6 +1249,10 @@ statements will produce a compile-time error. (Default)\n \n @item @samp{single}\n Single-image mode, i.e. @code{num_images()} is always one.\n+\n+@item @samp{lib}\n+Library-based coarray parallelization; a suitable GNU Fortran coarray\n+library needs to be linked.\n @end table\n \n "}, {"sha": "5042db37944d943020272909dc6bed91fd245d27", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -1,6 +1,6 @@\n /* Intrinsic function resolution.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009, 2010\n+   2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught & Katherine Holcomb\n \n@@ -2556,7 +2556,15 @@ gfc_resolve_image_index (gfc_expr *f, gfc_expr *array ATTRIBUTE_UNUSED,\n void\n gfc_resolve_this_image (gfc_expr *f, gfc_expr *array, gfc_expr *dim)\n {\n-  resolve_bound (f, array, dim, NULL, \"__this_image\", true);\n+  static char this_image[] = \"__this_image\";\n+  if (array)\n+    resolve_bound (f, array, dim, NULL, \"__this_image\", true);\n+  else\n+    {\n+      f->ts.type = BT_INTEGER;\n+      f->ts.kind = gfc_default_integer_kind;\n+      f->value.function.name = this_image;\n+    }\n }\n \n "}, {"sha": "09524d00357b1b44483608f8e61dbb5ea8c2850c", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -1,5 +1,5 @@\n /* Header file to the Fortran front-end and runtime library\n-   Copyright (C) 2007, 2008, 2009, 2010\n+   Copyright (C) 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -98,12 +98,13 @@ typedef enum\n }\n libgfortran_error_codes;\n \n+/* Must kept in sync with libgfortrancaf.h.  */\n typedef enum\n {\n   GFC_STAT_UNLOCKED = 0,\n   GFC_STAT_LOCKED,\n   GFC_STAT_LOCKED_OTHER_IMAGE,\n-  GFC_STAT_STOPPED_IMAGE\n+  GFC_STAT_STOPPED_IMAGE /* See LIBERROR_INQUIRE_INTERNAL_UNIT above. */\n }\n libgfortran_stat_codes;\n "}, {"sha": "cb14c3ad2961408d41b28825ae6e97071f44a663", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -1,6 +1,6 @@\n /* Parse and display command line options.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009, 2010\n+   2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -516,6 +516,8 @@ gfc_handle_coarray_option (const char *arg)\n     gfc_option.coarray = GFC_FCOARRAY_NONE;\n   else if (strcmp (arg, \"single\") == 0)\n     gfc_option.coarray = GFC_FCOARRAY_SINGLE;\n+  else if (strcmp (arg, \"lib\") == 0)\n+    gfc_option.coarray = GFC_FCOARRAY_LIB;\n   else\n     gfc_fatal_error (\"Argument to -fcoarray is not valid: %s\", arg);\n }"}, {"sha": "69edad8e0b5a13f19229c2adc5a997954100ccde", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -4591,6 +4591,9 @@ gfc_simplify_num_images (void)\n       return &gfc_bad_expr;\n     }\n \n+  if (gfc_option.coarray != GFC_FCOARRAY_SINGLE)\n+    return NULL;\n+\n   /* FIXME: gfc_current_locus is wrong.  */\n   result = gfc_get_constant_expr (BT_INTEGER, gfc_default_integer_kind,\n \t\t\t\t  &gfc_current_locus);\n@@ -6313,6 +6316,9 @@ gfc_simplify_this_image (gfc_expr *coarray, gfc_expr *dim)\n   gfc_array_spec *as;\n   int d;\n \n+  if (gfc_option.coarray != GFC_FCOARRAY_SINGLE)\n+    return NULL;\n+\n   if (coarray == NULL)\n     {\n       gfc_expr *result;"}, {"sha": "a0bbe537795c51f49054a3716d100d6ac7808e01", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -111,6 +111,22 @@ tree gfor_fndecl_in_unpack;\n tree gfor_fndecl_associated;\n \n \n+/* Coarray run-time library function decls.  */\n+tree gfor_fndecl_caf_init;\n+tree gfor_fndecl_caf_finalize;\n+tree gfor_fndecl_caf_critical;\n+tree gfor_fndecl_caf_end_critical;\n+tree gfor_fndecl_caf_sync_all;\n+tree gfor_fndecl_caf_sync_images;\n+tree gfor_fndecl_caf_error_stop;\n+tree gfor_fndecl_caf_error_stop_str;\n+\n+/* Coarray global variables for num_images/this_image.  */\n+\n+tree gfort_gvar_caf_num_images;\n+tree gfort_gvar_caf_this_image;\n+\n+\n /* Math functions.  Many other math functions are handled in\n    trans-intrinsic.c.  */\n \n@@ -3003,6 +3019,50 @@ gfc_build_builtin_function_decls (void)\n   DECL_PURE_P (gfor_fndecl_associated) = 1;\n   TREE_NOTHROW (gfor_fndecl_associated) = 1;\n \n+  /* Coarray library calls.  */\n+  if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n+    {\n+      tree pint_type, pppchar_type;\n+\n+      pint_type = build_pointer_type (integer_type_node);\n+      pppchar_type\n+\t= build_pointer_type (build_pointer_type (pchar_type_node));\n+\n+      gfor_fndecl_caf_init = gfc_build_library_function_decl (\n+\t\t   get_identifier (PREFIX(\"caf_init\")),  void_type_node,\n+\t\t   4, pint_type, pppchar_type, pint_type, pint_type);\n+\n+      gfor_fndecl_caf_finalize = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX(\"caf_finalize\")), void_type_node, 0);\n+\n+      gfor_fndecl_caf_critical = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX(\"caf_critical\")), void_type_node, 0);\n+\n+      gfor_fndecl_caf_end_critical = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX(\"caf_end_critical\")), void_type_node, 0);\n+\n+      gfor_fndecl_caf_sync_all = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_sync_all\")), \".W\", integer_type_node,\n+\t2, build_pointer_type (pchar_type_node), integer_type_node);\n+\n+      gfor_fndecl_caf_sync_images = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_sync_images\")), \".RRW\", integer_type_node,\n+\t4, integer_type_node, pint_type, build_pointer_type (pchar_type_node),\n+\tinteger_type_node);\n+\n+      gfor_fndecl_caf_error_stop = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX(\"caf_error_stop\")),\n+\tvoid_type_node, 1, gfc_int4_type_node);\n+      /* CAF's ERROR STOP doesn't return.  */\n+      TREE_THIS_VOLATILE (gfor_fndecl_caf_error_stop) = 1;\n+\n+      gfor_fndecl_caf_error_stop_str = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_error_stop_str\")), \".R.\",\n+\tvoid_type_node, 2, pchar_type_node, gfc_int4_type_node);\n+      /* CAF's ERROR STOP doesn't return.  */\n+      TREE_THIS_VOLATILE (gfor_fndecl_caf_error_stop_str) = 1;\n+    }\n+\n   gfc_build_intrinsic_function_decls ();\n   gfc_build_intrinsic_lib_fndecls ();\n   gfc_build_io_library_fndecls ();\n@@ -4405,6 +4465,40 @@ add_argument_checking (stmtblock_t *block, gfc_symbol *sym)\n }\n \n \n+void\n+gfc_init_coarray_decl (void)\n+{\n+  tree save_fn_decl = current_function_decl;\n+\n+  if (gfc_option.coarray != GFC_FCOARRAY_LIB)\n+    return;\n+\n+  if (gfort_gvar_caf_this_image || gfort_gvar_caf_num_images)\n+    return;\n+\n+  save_fn_decl = current_function_decl;\n+  current_function_decl = NULL_TREE;\n+  push_cfun (cfun);\n+\n+  gfort_gvar_caf_this_image = gfc_create_var (integer_type_node,\n+\t\t\t\t\t      PREFIX(\"caf_this_image\"));\n+  DECL_ARTIFICIAL (gfort_gvar_caf_this_image) = 1;\n+  TREE_USED (gfort_gvar_caf_this_image) = 1;\n+  TREE_PUBLIC (gfort_gvar_caf_this_image) = 1;\n+  TREE_STATIC (gfort_gvar_caf_this_image) = 1;\n+\n+  gfort_gvar_caf_num_images = gfc_create_var (integer_type_node,\n+\t\t\t\t\t      PREFIX(\"caf_num_images\"));\n+  DECL_ARTIFICIAL (gfort_gvar_caf_num_images) = 1;\n+  TREE_USED (gfort_gvar_caf_num_images) = 1;\n+  TREE_PUBLIC (gfort_gvar_caf_num_images) = 1;\n+  TREE_STATIC (gfort_gvar_caf_num_images) = 1;\n+\n+  pop_cfun ();\n+  current_function_decl = save_fn_decl;\n+}\n+\n+\n static void\n create_main_function (tree fndecl)\n {\n@@ -4484,6 +4578,23 @@ create_main_function (tree fndecl)\n \n   /* Call some libgfortran initialization routines, call then MAIN__(). */\n \n+  /* Call _gfortran_caf_init (*argc, ***argv, *this_image, *num_images).  */\n+  if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n+    {\n+      tree pint_type, pppchar_type;\n+      pint_type = build_pointer_type (integer_type_node);\n+      pppchar_type\n+\t= build_pointer_type (build_pointer_type (pchar_type_node));\n+\n+      gfc_init_coarray_decl ();\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_init, 4,\n+\t\tgfc_build_addr_expr (pint_type, argc),\n+\t\tgfc_build_addr_expr (pppchar_type, argv),\n+\t\tgfc_build_addr_expr (pint_type, gfort_gvar_caf_this_image),\n+\t\tgfc_build_addr_expr (pint_type, gfort_gvar_caf_num_images));\n+      gfc_add_expr_to_block (&body, tmp);\n+    }\n+\n   /* Call _gfortran_set_args (argc, argv).  */\n   TREE_USED (argc) = 1;\n   TREE_USED (argv) = 1;\n@@ -4601,6 +4712,19 @@ create_main_function (tree fndecl)\n   /* Mark MAIN__ as used.  */\n   TREE_USED (fndecl) = 1;\n \n+  /* Coarray: Call _gfortran_caf_finalize(void).  */\n+  if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n+    { \n+      /* Per F2008, 8.5.1 END of the main program implies a\n+\t SYNC MEMORY.  */ \n+      tmp = built_in_decls [BUILT_IN_SYNCHRONIZE];\n+      tmp = build_call_expr_loc (input_location, tmp, 0);\n+      gfc_add_expr_to_block (&body, tmp);\n+\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_finalize, 0);\n+      gfc_add_expr_to_block (&body, tmp);\n+    }\n+\n   /* \"return 0\".  */\n   tmp = fold_build2_loc (input_location, MODIFY_EXPR, integer_type_node,\n \t\t\t DECL_RESULT (ftn_main),"}, {"sha": "fa3e4c2c060238605441c73eb5bdafd01f593b05", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -1,5 +1,5 @@\n /* Intrinsic translation\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n    and Steven Bosscher <s.bosscher@student.tudelft.nl>\n@@ -918,6 +918,20 @@ gfc_conv_intrinsic_exponent (gfc_se *se, gfc_expr *expr)\n   se->expr = fold_convert (type, res);\n }\n \n+static void\n+trans_this_image (gfc_se * se, gfc_expr *expr ATTRIBUTE_UNUSED)\n+{\n+  gfc_init_coarray_decl ();\n+  se->expr = gfort_gvar_caf_this_image;\n+}\n+\n+static void\n+trans_num_images (gfc_se * se)\n+{\n+  gfc_init_coarray_decl ();\n+  se->expr = gfort_gvar_caf_num_images;\n+}\n+\n /* Evaluate a single upper or lower bound.  */\n /* TODO: bound intrinsic generates way too much unnecessary code.  */\n \n@@ -6111,6 +6125,14 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_loc (se, expr);\n       break;\n \n+    case GFC_ISYM_THIS_IMAGE:\n+      trans_this_image (se, expr);\n+      break;\n+\n+    case GFC_ISYM_NUM_IMAGES:\n+      trans_num_images (se);\n+      break;\n+\n     case GFC_ISYM_ACCESS:\n     case GFC_ISYM_CHDIR:\n     case GFC_ISYM_CHMOD:"}, {"sha": "2d43627fd1850a4cec5012fb4c23a21352bc0092", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 165, "deletions": 20, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -599,27 +599,47 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n   gfc_init_se (&se, NULL);\n   gfc_start_block (&se.pre);\n \n+  if (gfc_option.coarray == GFC_FCOARRAY_LIB && !error_stop)\n+    {\n+      /* Per F2008, 8.5.1 STOP implies a SYNC MEMORY.  */\n+      tmp = built_in_decls [BUILT_IN_SYNCHRONIZE];\n+      tmp = build_call_expr_loc (input_location, tmp, 0);\n+      gfc_add_expr_to_block (&se.pre, tmp);\n+\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_finalize, 0);\n+      gfc_add_expr_to_block (&se.pre, tmp);\n+    }\n+\n   if (code->expr1 == NULL)\n     {\n       tmp = build_int_cst (gfc_int4_type_node, 0);\n       tmp = build_call_expr_loc (input_location,\n-\t\t\t\t error_stop ? gfor_fndecl_error_stop_string\n+\t\t\t\t error_stop\n+\t\t\t\t ? (gfc_option.coarray == GFC_FCOARRAY_LIB\n+\t\t\t\t    ? gfor_fndecl_caf_error_stop_str\n+\t\t\t\t    : gfor_fndecl_error_stop_string)\n \t\t\t\t : gfor_fndecl_stop_string,\n \t\t\t\t 2, build_int_cst (pchar_type_node, 0), tmp);\n     }\n   else if (code->expr1->ts.type == BT_INTEGER)\n     {\n       gfc_conv_expr (&se, code->expr1);\n       tmp = build_call_expr_loc (input_location,\n-\t\t\t\t error_stop ? gfor_fndecl_error_stop_numeric\n+\t\t\t\t error_stop\n+\t\t\t\t ? (gfc_option.coarray == GFC_FCOARRAY_LIB\n+\t\t\t\t    ? gfor_fndecl_caf_error_stop\n+\t\t\t\t    : gfor_fndecl_error_stop_numeric)\n \t\t\t\t : gfor_fndecl_stop_numeric_f08, 1, \n \t\t\t\t fold_convert (gfc_int4_type_node, se.expr));\n     }\n   else\n     {\n       gfc_conv_expr_reference (&se, code->expr1);\n       tmp = build_call_expr_loc (input_location,\n-\t\t\t\t error_stop ? gfor_fndecl_error_stop_string\n+\t\t\t\t error_stop\n+\t\t\t\t ? (gfc_option.coarray == GFC_FCOARRAY_LIB\n+\t\t\t\t    ? gfor_fndecl_caf_error_stop_str\n+\t\t\t\t    : gfor_fndecl_error_stop_string)\n \t\t\t\t : gfor_fndecl_stop_string,\n \t\t\t\t 2, se.expr, se.string_length);\n     }\n@@ -633,14 +653,51 @@ gfc_trans_stop (gfc_code *code, bool error_stop)\n \n \n tree\n-gfc_trans_sync (gfc_code *code, gfc_exec_op type __attribute__ ((unused)))\n+gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n {\n-  gfc_se se;\n+  gfc_se se, argse;\n+  tree tmp;\n+  tree images = NULL_TREE, stat = NULL_TREE,\n+       errmsg = NULL_TREE, errmsglen = NULL_TREE;\n \n-  if ((code->expr1 && (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)) || code->expr2)\n+  /* Short cut: For single images without bound checking or without STAT=,\n+     return early. (ERRMSG= is always untouched for -fcoarray=single.)  */\n+  if (!code->expr2 && !(gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)\n+      && gfc_option.coarray != GFC_FCOARRAY_LIB)\n+    return NULL_TREE; \n+\n+  gfc_init_se (&se, NULL);\n+  gfc_start_block (&se.pre);\n+\n+  if (code->expr1 && code->expr1->rank == 0)\n     {\n-      gfc_init_se (&se, NULL);\n-      gfc_start_block (&se.pre);\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr_val (&argse, code->expr1);\n+      images = argse.expr;\n+    }\n+\n+  if (code->expr2)\n+    {\n+      gcc_assert (code->expr2->expr_type == EXPR_VARIABLE);\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr_val (&argse, code->expr2);\n+      stat = argse.expr;\n+    }\n+\n+  if (code->expr3 && gfc_option.coarray == GFC_FCOARRAY_LIB\n+      && type != EXEC_SYNC_MEMORY)\n+    {\n+      gcc_assert (code->expr3->expr_type == EXPR_VARIABLE);\n+      gfc_init_se (&argse, NULL);\n+      gfc_conv_expr (&argse, code->expr3);\n+      gfc_conv_string_parameter (&argse);\n+      errmsg = argse.expr;\n+      errmsglen = argse.string_length;\n+    }\n+  else if (gfc_option.coarray == GFC_FCOARRAY_LIB && type != EXEC_SYNC_MEMORY)\n+    {\n+      errmsg = null_pointer_node;\n+      errmsglen = build_int_cst (integer_type_node, 0);\n     }\n \n   /* Check SYNC IMAGES(imageset) for valid image index.\n@@ -649,27 +706,100 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type __attribute__ ((unused)))\n       && code->expr1->rank == 0)\n     {\n       tree cond;\n-      gfc_conv_expr (&se, code->expr1);\n-      cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n-\t\t\t      se.expr, build_int_cst (TREE_TYPE (se.expr), 1));\n+      if (gfc_option.coarray != GFC_FCOARRAY_LIB)\n+\tcond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t\timages, build_int_cst (TREE_TYPE (images), 1));\n+      else\n+\t{\n+\t  tree cond2;\n+\t  cond = fold_build2_loc (input_location, GE_EXPR, boolean_type_node,\n+\t\t\t\t  images, gfort_gvar_caf_num_images);\n+\t  cond2 = fold_build2_loc (input_location, LT_EXPR, boolean_type_node,\n+\t\t\t\t   images,\n+\t\t\t\t   build_int_cst (TREE_TYPE (images), 1));\n+\t  cond = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n+\t\t\t\t  boolean_type_node, cond, cond2);\n+\t}\n       gfc_trans_runtime_check (true, false, cond, &se.pre,\n \t\t\t       &code->expr1->where, \"Invalid image number \"\n \t\t\t       \"%d in SYNC IMAGES\",\n \t\t\t       fold_convert (integer_type_node, se.expr));\n     }\n \n-  /* If STAT is present, set it to zero.  */\n-  if (code->expr2)\n+   /* Per F2008, 8.5.1, a SYNC MEMORY is implied by calling the\n+      image control statements SYNC IMAGES and SYNC ALL.  */\n+   if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n+     {\n+\ttmp = built_in_decls [BUILT_IN_SYNCHRONIZE];\n+\ttmp = build_call_expr_loc (input_location, tmp, 0);\n+\tgfc_add_expr_to_block (&se.pre, tmp);\n+     }\n+\n+  if (gfc_option.coarray != GFC_FCOARRAY_LIB || type == EXEC_SYNC_MEMORY)\n     {\n-      gcc_assert (code->expr2->expr_type == EXPR_VARIABLE);\n-      gfc_conv_expr (&se, code->expr2);\n-      gfc_add_modify (&se.pre, se.expr, build_int_cst (TREE_TYPE (se.expr), 0));\n+      /* Set STAT to zero.  */\n+      if (code->expr2)\n+\tgfc_add_modify (&se.pre, stat, build_int_cst (TREE_TYPE (stat), 0));\n+    }\n+  else if (type == EXEC_SYNC_ALL)\n+    {\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n+\t\t\t\t 2, errmsg, errmsglen);\n+      if (code->expr2)\n+\tgfc_add_modify (&se.pre, stat, fold_convert (TREE_TYPE (stat), tmp));\n+      else\n+\tgfc_add_expr_to_block (&se.pre, tmp);\n+    }\n+  else\n+    {\n+      tree len;\n+\n+      gcc_assert (type == EXEC_SYNC_IMAGES);\n+\n+      if (!code->expr1)\n+\t{\n+\t  len = build_int_cst (integer_type_node, -1);\n+\t  images = null_pointer_node;\n+\t}\n+      else if (code->expr1->rank == 0)\n+\t{\n+\t  len = build_int_cst (integer_type_node, 1);\n+\t  images = gfc_build_addr_expr (NULL_TREE, images);\n+\t}\n+      else\n+\t{\n+\t  /* FIXME.  */\n+\t  if (code->expr1->ts.kind != gfc_c_int_kind)\n+\t    gfc_fatal_error (\"Sorry, only support for integer kind %d \"\n+\t\t\t     \"implemented for image-set at %L\",\n+\t\t\t     gfc_c_int_kind, &code->expr1->where);\n+\n+\t  gfc_conv_array_parameter (&se, code->expr1,\n+\t\t\t\t    gfc_walk_expr (code->expr1), true, NULL,\n+\t\t\t\t    NULL, &len);\n+\t  images = se.expr;\n+\n+\t  tmp = gfc_typenode_for_spec (&code->expr1->ts);\n+\t  if (GFC_ARRAY_TYPE_P (tmp) || GFC_DESCRIPTOR_TYPE_P (tmp))\n+\t    tmp = gfc_get_element_type (tmp);\n+\n+\t  len = fold_build2_loc (input_location, TRUNC_DIV_EXPR,\n+\t\t\t\t TREE_TYPE (len), len,\n+\t\t\t\t fold_convert (TREE_TYPE (len),\n+\t\t\t\t\t       TYPE_SIZE_UNIT (tmp)));\n+          len = fold_convert (integer_type_node, len);\n+\t}\n+\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_images, 4,\n+\t\t\t\t fold_convert (integer_type_node, len), images,\n+\t\t\t\t errmsg, errmsglen);\n+      if (code->expr2)\n+\tgfc_add_modify (&se.pre, stat, fold_convert (TREE_TYPE (stat), tmp));\n+      else\n+\tgfc_add_expr_to_block (&se.pre, tmp);\n     }\n \n-  if ((code->expr1 && (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)) || code->expr2)\n-    return gfc_finish_block (&se.pre);\n- \n-  return NULL_TREE;\n+  return gfc_finish_block (&se.pre);\n }\n \n \n@@ -870,9 +1000,24 @@ gfc_trans_critical (gfc_code *code)\n   tree tmp;\n \n   gfc_start_block (&block);\n+\n+  if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n+    {\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_critical, 0);\n+      gfc_add_expr_to_block (&block, tmp);\n+    }\n+\n   tmp = gfc_trans_code (code->block->next);\n   gfc_add_expr_to_block (&block, tmp);\n \n+  if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n+    {\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_end_critical,\n+\t\t\t\t 0);\n+      gfc_add_expr_to_block (&block, tmp);\n+    }\n+\n+\n   return gfc_finish_block (&block);\n }\n "}, {"sha": "19e86bb951ab0284a342ab2dc3f7c722e46e1427", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60386f50ceca766476f4e22f1c78c56865d9bc9d/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=60386f50ceca766476f4e22f1c78c56865d9bc9d", "patch": "@@ -1,5 +1,5 @@\n /* Header for code translation functions\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n@@ -452,6 +452,9 @@ bool gfc_get_module_backend_decl (gfc_symbol *);\n /* Return the variable decl for a symbol.  */\n tree gfc_get_symbol_decl (gfc_symbol *);\n \n+/* Initialize coarray global variables.  */\n+void gfc_init_coarray_decl (void);\n+\n /* Build a static initializer.  */\n tree gfc_conv_initializer (gfc_expr *, gfc_typespec *, tree, bool, bool, bool);\n \n@@ -613,6 +616,22 @@ extern GTY(()) tree gfor_fndecl_in_pack;\n extern GTY(()) tree gfor_fndecl_in_unpack;\n extern GTY(()) tree gfor_fndecl_associated;\n \n+\n+/* Coarray run-time library function decls.  */\n+extern GTY(()) tree gfor_fndecl_caf_init;\n+extern GTY(()) tree gfor_fndecl_caf_finalize;\n+extern GTY(()) tree gfor_fndecl_caf_critical;\n+extern GTY(()) tree gfor_fndecl_caf_end_critical;\n+extern GTY(()) tree gfor_fndecl_caf_sync_all;\n+extern GTY(()) tree gfor_fndecl_caf_sync_images;\n+extern GTY(()) tree gfor_fndecl_caf_error_stop;\n+extern GTY(()) tree gfor_fndecl_caf_error_stop_str;\n+\n+/* Coarray global variables for num_images/this_image.  */\n+extern GTY(()) tree gfort_gvar_caf_num_images;\n+extern GTY(()) tree gfort_gvar_caf_this_image;\n+\n+\n /* Math functions.  Many other math functions are handled in\n    trans-intrinsic.c.  */\n "}]}