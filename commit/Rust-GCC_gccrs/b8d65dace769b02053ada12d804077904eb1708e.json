{"sha": "b8d65dace769b02053ada12d804077904eb1708e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhkNjVkYWNlNzY5YjAyMDUzYWRhMTJkODA0MDc3OTA0ZWIxNzA4ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-29T09:04:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-29T09:04:33Z"}, "message": "locale_facets.tcc (time_get<>::_M_extract_via_format, case 'S'): Allow for at least one leap-second (as per C99...\n\n2004-08-29  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (time_get<>::_M_extract_via_format,\n\tcase 'S'): Allow for at least one leap-second (as per C99, 7.23.1\n\tand 7.23.3.5), two if !_GLIBCXX_USE_C99.\n\t* testsuite/22_locale/time_get/get_time/char/4.cc: New.\n\t* testsuite/22_locale/time_get/get_time/wchar_t/4.cc: Likewise.\n\nFrom-SVN: r86712", "tree": {"sha": "61c7f48409aac71aa8ac3e6da7768f5a17c18606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c7f48409aac71aa8ac3e6da7768f5a17c18606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8d65dace769b02053ada12d804077904eb1708e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d65dace769b02053ada12d804077904eb1708e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d65dace769b02053ada12d804077904eb1708e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d65dace769b02053ada12d804077904eb1708e/comments", "author": null, "committer": null, "parents": [{"sha": "750628d8bcdda3394d81f0b16d0703bb7deeb849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750628d8bcdda3394d81f0b16d0703bb7deeb849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750628d8bcdda3394d81f0b16d0703bb7deeb849"}], "stats": {"total": 145, "additions": 143, "deletions": 2}, "files": [{"sha": "c7d3ba658f37fa055781e36104340418f78c2d1b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8d65dace769b02053ada12d804077904eb1708e", "patch": "@@ -1,3 +1,11 @@\n+2004-08-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (time_get<>::_M_extract_via_format,\n+\tcase 'S'): Allow for at least one leap-second (as per C99, 7.23.1\n+\tand 7.23.3.5), two if !_GLIBCXX_USE_C99.\n+\t* testsuite/22_locale/time_get/get_time/char/4.cc: New.\n+\t* testsuite/22_locale/time_get/get_time/wchar_t/4.cc: Likewise.\n+\n 2004-08-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/13684"}, {"sha": "141138ba2fb88c56da027f1fa8ff1ba2b5c00a3c", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=b8d65dace769b02053ada12d804077904eb1708e", "patch": "@@ -1849,8 +1849,13 @@ namespace std\n \t\t\t\t\t\t__tm, __wcs);\n \t\t  break;\n \t\tcase 'S':\n-\t\t  // Seconds.\n-\t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_sec, 0, 59, 2,\n+\t\t  // Seconds. [tm_sec]\n+\t\t  // [00, 60] in C99 (one leap-second), [00, 61] in C89.\n+#ifdef _GLIBCXX_USE_C99\n+\t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_sec, 0, 60, 2,\n+#else\n+\t\t  __beg = _M_extract_num(__beg, __end, __tm->tm_sec, 0, 61, 2,\n+#endif\n \t\t\t\t\t __io, __err);\n \t\t  break;\n \t\tcase 't':"}, {"sha": "bc7fd8be36ea81f457a2563b96e1ba4f20cd8e8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/4.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F4.cc?ref=b8d65dace769b02053ada12d804077904eb1708e", "patch": "@@ -0,0 +1,64 @@\n+// 2004-08-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Allow for one leap-second (two if !_GLIBCXX_USE_C99).\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+\n+  // create an istream-derived object, cache the time_get facet\n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tim_get =\n+    use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 60, 0, 12, 4, 3, 71, 0, 93, 0 };\n+\n+  iss.str(\"12:00:60 \");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_time(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_sec == time_bday.tm_sec );\n+  VERIFY( errorstate == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "04206caad00645bfa099503fd9bbca00c975870b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/4.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8d65dace769b02053ada12d804077904eb1708e/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F4.cc?ref=b8d65dace769b02053ada12d804077904eb1708e", "patch": "@@ -0,0 +1,64 @@\n+// 2004-08-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Allow for one leap-second (two if !_GLIBCXX_USE_C99).\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+\n+  // create an istream-derived object, cache the time_get facet\n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<wchar_t>& tim_get =\n+    use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 60, 0, 12, 4, 3, 71, 0, 93, 0 };\n+\n+  iss.str(L\"12:00:60 \");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_time(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_sec == time_bday.tm_sec );\n+  VERIFY( errorstate == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}