{"sha": "fd83db3d51f6379186a012f817d1f1ed003500b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4M2RiM2Q1MWY2Mzc5MTg2YTAxMmY4MTdkMWYxZWQwMDM1MDBiMA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-11-07T18:41:12Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-11-07T18:41:12Z"}, "message": "re PR fortran/50919 ([OOP] Don't use vtable for NON_OVERRIDABLE TBP)\n\n2011-11-07  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/50919\n\t* class.c (add_proc_comp): Don't add non-overridable procedures to the\n\tvtable.\n\t* resolve.c (resolve_typebound_function,resolve_typebound_subroutine):\n\tDon't generate a dynamic _vptr call for non-overridable procedures.\n\n2011-11-07  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/50919\n\t* gfortran.dg/typebound_call_21.f03: New.\n\nFrom-SVN: r181107", "tree": {"sha": "86c04780e7b4597295a42c9c07fe929a74a1c915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86c04780e7b4597295a42c9c07fe929a74a1c915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd83db3d51f6379186a012f817d1f1ed003500b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd83db3d51f6379186a012f817d1f1ed003500b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd83db3d51f6379186a012f817d1f1ed003500b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd83db3d51f6379186a012f817d1f1ed003500b0/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0098895f4e9f8e68f2ab2bba22eafe7c60c632aa"}], "stats": {"total": 120, "additions": 94, "deletions": 26}, "files": [{"sha": "1dae389d3613832bb2de6898afb5ee9aae2de303", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd83db3d51f6379186a012f817d1f1ed003500b0", "patch": "@@ -1,3 +1,11 @@\n+2011-11-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/50919\n+\t* class.c (add_proc_comp): Don't add non-overridable procedures to the\n+\tvtable.\n+\t* resolve.c (resolve_typebound_function,resolve_typebound_subroutine):\n+\tDon't generate a dynamic _vptr call for non-overridable procedures.\n+\n 2011-11-07  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* intrinsic.texi (MCLOCK, MCLOCK8, TIME, TIME8): Functions clock"}, {"sha": "574d22b0b1234acb8e63676cb0224bb2cd52ca4a", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=fd83db3d51f6379186a012f817d1f1ed003500b0", "patch": "@@ -288,6 +288,10 @@ static void\n add_proc_comp (gfc_symbol *vtype, const char *name, gfc_typebound_proc *tb)\n {\n   gfc_component *c;\n+\n+  if (tb->non_overridable)\n+    return;\n+  \n   c = gfc_find_component (vtype, name, true, true);\n \n   if (c == NULL)"}, {"sha": "0e882399902d42d3ee7d500815f708c88b416e07", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=fd83db3d51f6379186a012f817d1f1ed003500b0", "patch": "@@ -5868,11 +5868,13 @@ resolve_typebound_function (gfc_expr* e)\n   const char *name;\n   gfc_typespec ts;\n   gfc_expr *expr;\n+  bool overridable;\n \n   st = e->symtree;\n \n   /* Deal with typebound operators for CLASS objects.  */\n   expr = e->value.compcall.base_object;\n+  overridable = !e->value.compcall.tbp->non_overridable;\n   if (expr && expr->ts.type == BT_CLASS && e->value.compcall.name)\n     {\n       /* Since the typebound operators are generic, we have to ensure\n@@ -5923,22 +5925,26 @@ resolve_typebound_function (gfc_expr* e)\n     return FAILURE;\n   ts = e->ts;\n \n-  /* Then convert the expression to a procedure pointer component call.  */\n-  e->value.function.esym = NULL;\n-  e->symtree = st;\n+  if (overridable)\n+    {\n+      /* Convert the expression to a procedure pointer component call.  */\n+      e->value.function.esym = NULL;\n+      e->symtree = st;\n \n-  if (new_ref)  \n-    e->ref = new_ref;\n+      if (new_ref)  \n+\te->ref = new_ref;\n \n-  /* '_vptr' points to the vtab, which contains the procedure pointers.  */\n-  gfc_add_vptr_component (e);\n-  gfc_add_component_ref (e, name);\n+      /* '_vptr' points to the vtab, which contains the procedure pointers.  */\n+      gfc_add_vptr_component (e);\n+      gfc_add_component_ref (e, name);\n+\n+      /* Recover the typespec for the expression.  This is really only\n+\tnecessary for generic procedures, where the additional call\n+\tto gfc_add_component_ref seems to throw the collection of the\n+\tcorrect typespec.  */\n+      e->ts = ts;\n+    }\n \n-  /* Recover the typespec for the expression.  This is really only\n-     necessary for generic procedures, where the additional call\n-     to gfc_add_component_ref seems to throw the collection of the\n-     correct typespec.  */\n-  e->ts = ts;\n   return SUCCESS;\n }\n \n@@ -5957,11 +5963,13 @@ resolve_typebound_subroutine (gfc_code *code)\n   const char *name;\n   gfc_typespec ts;\n   gfc_expr *expr;\n+  bool overridable;\n \n   st = code->expr1->symtree;\n \n   /* Deal with typebound operators for CLASS objects.  */\n   expr = code->expr1->value.compcall.base_object;\n+  overridable = !code->expr1->value.compcall.tbp->non_overridable;\n   if (expr && expr->ts.type == BT_CLASS && code->expr1->value.compcall.name)\n     {\n       /* Since the typebound operators are generic, we have to ensure\n@@ -6006,22 +6014,26 @@ resolve_typebound_subroutine (gfc_code *code)\n     return FAILURE;\n   ts = code->expr1->ts;\n \n-  /* Then convert the expression to a procedure pointer component call.  */\n-  code->expr1->value.function.esym = NULL;\n-  code->expr1->symtree = st;\n+  if (overridable)\n+    {\n+      /* Convert the expression to a procedure pointer component call.  */\n+      code->expr1->value.function.esym = NULL;\n+      code->expr1->symtree = st;\n+\n+      if (new_ref)\n+\tcode->expr1->ref = new_ref;\n \n-  if (new_ref)\n-    code->expr1->ref = new_ref;\n+      /* '_vptr' points to the vtab, which contains the procedure pointers.  */\n+      gfc_add_vptr_component (code->expr1);\n+      gfc_add_component_ref (code->expr1, name);\n \n-  /* '_vptr' points to the vtab, which contains the procedure pointers.  */\n-  gfc_add_vptr_component (code->expr1);\n-  gfc_add_component_ref (code->expr1, name);\n+      /* Recover the typespec for the expression.  This is really only\n+\tnecessary for generic procedures, where the additional call\n+\tto gfc_add_component_ref seems to throw the collection of the\n+\tcorrect typespec.  */\n+      code->expr1->ts = ts;\n+    }\n \n-  /* Recover the typespec for the expression.  This is really only\n-     necessary for generic procedures, where the additional call\n-     to gfc_add_component_ref seems to throw the collection of the\n-     correct typespec.  */\n-  code->expr1->ts = ts;\n   return SUCCESS;\n }\n "}, {"sha": "365f3b1b4c149607a7163f5c01e5576510853f24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd83db3d51f6379186a012f817d1f1ed003500b0", "patch": "@@ -1,3 +1,8 @@\n+2011-11-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/50919\n+\t* gfortran.dg/typebound_call_21.f03: New.\n+\n 2011-11-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/profile-dir-1.c: Adjust final scan."}, {"sha": "5f7d67283c42f835745c815ec21d645b01b59277", "filename": "gcc/testsuite/gfortran.dg/typebound_call_21.f03", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_21.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd83db3d51f6379186a012f817d1f1ed003500b0/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_21.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_21.f03?ref=fd83db3d51f6379186a012f817d1f1ed003500b0", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR 50919: [OOP] Don't use vtable for NON_OVERRIDABLE TBP\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+module m\n+\n+type t\n+contains\n+  procedure, nopass, NON_OVERRIDABLE :: testsub\n+  procedure, nopass, NON_OVERRIDABLE :: testfun\n+end type t\n+\n+contains\n+\n+  subroutine testsub()\n+    print *, \"t's test\"\n+  end subroutine\n+\n+  integer function testfun()\n+    testfun = 1\n+  end function\n+\n+end module m\n+\n+\n+  use m\n+  class(t), allocatable :: x\n+  allocate(x)\n+  call x%testsub()\n+  print *,x%testfun()\n+end\n+\n+! { dg-final { scan-tree-dump-times \"_vptr->\" 0 \"original\" } }\n+\n+! { dg-final { cleanup-modules \"m\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}