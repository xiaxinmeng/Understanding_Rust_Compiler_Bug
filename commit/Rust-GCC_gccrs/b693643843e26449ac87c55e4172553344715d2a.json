{"sha": "b693643843e26449ac87c55e4172553344715d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5MzY0Mzg0M2UyNjQ0OWFjODdjNTVlNDE3MjU1MzM0NDcxNWQyYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-02T12:33:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-09-02T12:33:35Z"}, "message": "Initial revision\n\nFrom-SVN: r22180", "tree": {"sha": "aee773dcff6069f10b338c90ead8cd5dd7ca56ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee773dcff6069f10b338c90ead8cd5dd7ca56ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b693643843e26449ac87c55e4172553344715d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693643843e26449ac87c55e4172553344715d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b693643843e26449ac87c55e4172553344715d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b693643843e26449ac87c55e4172553344715d2a/comments", "author": null, "committer": null, "parents": [{"sha": "768a887ca725d06c7ec1fff85e00e1ee2e528d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768a887ca725d06c7ec1fff85e00e1ee2e528d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768a887ca725d06c7ec1fff85e00e1ee2e528d5d"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "f66143da837446ac53422d9a8880174ca1c27157", "filename": "libstdc++/stl/stdexcept", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b693643843e26449ac87c55e4172553344715d2a/libstdc%2B%2B%2Fstl%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b693643843e26449ac87c55e4172553344715d2a/libstdc%2B%2B%2Fstl%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstdexcept?ref=b693643843e26449ac87c55e4172553344715d2a", "patch": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */ \n+\n+#ifndef __SGI_STDEXCEPT\n+#define __SGI_STDEXCEPT\n+\n+#include <stl_exception.h>\n+\n+#if !(defined(_MIPS_SIM) && defined(_ABIO32) && _MIPS_SIM == _ABIO32)\n+\n+#include <stl_string_fwd.h>\n+\n+__STL_BEGIN_NAMESPACE\n+\n+class logic_error : public __STL_EXCEPTION_BASE {\n+public:\n+  logic_error(const string& __s)\n+    { _S_string_copy(__s, _M_name, _S_bufsize); }\n+  virtual const char* what() const __STL_NOTHROW { return _M_name; }\n+private:\n+  enum { _S_bufsize = 256 };\n+  char _M_name[_S_bufsize];\n+};\n+\n+class runtime_error : public __STL_EXCEPTION_BASE {\n+public:\n+  runtime_error(const string& __s)\n+    { _S_string_copy(__s, _M_name, _S_bufsize); }\n+  virtual const char* what() const __STL_NOTHROW { return _M_name; }\n+private:\n+  enum { _S_bufsize = 256 };\n+  char _M_name[_S_bufsize];\n+};\n+\n+class domain_error : public logic_error {\n+public:\n+  domain_error(const string& __arg) : logic_error(__arg) {}\n+};\n+\n+class invalid_argument : public logic_error {\n+public:\n+  invalid_argument(const string& __arg) : logic_error(__arg) {}\n+};\n+\n+class length_error : public logic_error {\n+public:\n+  length_error(const string& __arg) : logic_error(__arg) {}\n+};\n+\n+class out_of_range : public logic_error {\n+public:\n+  out_of_range(const string& __arg) : logic_error(__arg) {}\n+};\n+\n+class range_error : public runtime_error {\n+public:\n+  range_error(const string& __arg) : runtime_error(__arg) {}\n+};\n+\n+class overflow_error : public runtime_error {\n+public:\n+  overflow_error(const string& __arg) : runtime_error(__arg) {}\n+};\n+\n+class underflow_error : public runtime_error {\n+public:\n+  underflow_error(const string& __arg) : runtime_error(__arg) {}\n+};\n+\n+__STL_END_NAMESPACE\n+\n+#ifndef __SGI_STL_STRING\n+#include <string>\n+#endif\n+\n+#endif /* Not o32 */\n+\n+#endif /* __SGI_STDEXCEPT */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}]}