{"sha": "463366a06a14ae693a56571b6ed348e70a146168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzMzY2YTA2YTE0YWU2OTNhNTY1NzFiNmVkMzQ4ZTcwYTE0NjE2OA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-09T15:35:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-09T15:35:39Z"}, "message": "PR jit/64166: Add API entrypoint gcc_jit_context_enable_dump\n\ngcc/jit/ChangeLog:\n\tPR jit/64166\n\t* docs/topics/contexts.rst (Debugging): Add description of\n\tgcc_jit_context_enable_dump.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-playback.c: Include context.h.\n\t(class auto_argvec): New class.\n\t(auto_argvec::~auto_argvec): New function.\n\t(gcc::jit::playback::context::compile): Convert fake_args to be\n\tan auto_argvec, so that it can contain dynamically-allocated\n\tstrings.   Construct a vec of all requested dumps, and pass it to\n\tmake_fake_args.  Extract requested dumps between the calls to\n\ttoplev::main and toplev::finalize.\n\t(gcc::jit::playback::context::make_fake_args): Convert param\n\t\"argvec\" to be a vec <char *>, and gain a \"requested_dumps\"\n\tparam.  Convert to dynamically-allocated arg strings by converting\n\tADD_ARG to take a copy of the arg, and add ADD_ARG_TAKE_OWNERSHIP\n\tfor args that are already a copy.  Add args for all requested dumps.\n\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n\tfunction.\n\t(gcc::jit::playback::context::read_dump_file): New function.\n\t* jit-playback.h (gcc::jit::playback::context::make_fake_args):\n\tConvert param \"argvec\" to be a vec <char *>, and gain a\n\t\"requested_dumps\" param.\n\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n\tfunction.\n\t(gcc::jit::playback::context::read_dump_file): New function.\n\t* jit-recording.c (gcc::jit::recording::context::enable_dump): New\n\tfunction.\n\t(gcc::jit::recording::context::get_all_requested_dumps): New\n\tfunction.\n\t* jit-recording.h (gcc::jit::recording::requested_dump): New\n\tstruct.\n\t(gcc::jit::recording::context::enable_dump): New function.\n\t(gcc::jit::recording::context::get_all_requested_dumps): New\n\tfunction.\n\t(gcc::jit::recording::context::m_requested_dumps): New field.\n\t* libgccjit.c (gcc_jit_context_enable_dump): New API entrypoint.\n\t* libgccjit.h (gcc_jit_context_enable_dump): New API entrypoint.\n\t* libgccjit.map (gcc_jit_context_enable_dump): New API entrypoint.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/64166\n\tPR jit/64020\n\t* jit.dg/harness.h (CHECK_STRING_CONTAINS): New macro.\n\t(check_string_contains): New function.\n\t* jit.dg/test-error-unrecognized-dump.c: New file.\n\t* jit.dg/test-functions.c (trig_sincos_dump): New variable.\n\t(trig_statistics_dump): New variable.\n\t(create_test_of_builtin_trig): Enable dumping of \"sincos\" and\n\t\"statistics\" into \"trig_sincos_dump\" and \"trig_statistics_dump\".\n\t(verify_test_of_builtin_trig): Verify the sincos and statistics\n\tdumps.\n\t* jit.dg/test-sum-of-squares.c (dump_vrp1): New variable.\n\t(create_code): Enable dumping of \"tree-vrp1\" into dump_vrp1.\n\t(verify_code): Verify the tree-vrp1 dump.\n\nFrom-SVN: r218521", "tree": {"sha": "9eab3d6e19824a1c4a3da5c613e0e4dfc2d313ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eab3d6e19824a1c4a3da5c613e0e4dfc2d313ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/463366a06a14ae693a56571b6ed348e70a146168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463366a06a14ae693a56571b6ed348e70a146168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463366a06a14ae693a56571b6ed348e70a146168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463366a06a14ae693a56571b6ed348e70a146168/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "799505ae0c8aa82a1557b882b495b303f24e3be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799505ae0c8aa82a1557b882b495b303f24e3be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799505ae0c8aa82a1557b882b495b303f24e3be3"}], "stats": {"total": 815, "additions": 662, "deletions": 153}, "files": [{"sha": "532ac255f0970c094a8a8013435dbdc8238af623", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -1,3 +1,45 @@\n+2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/64166\n+\t* docs/topics/contexts.rst (Debugging): Add description of\n+\tgcc_jit_context_enable_dump.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-playback.c: Include context.h.\n+\t(class auto_argvec): New class.\n+\t(auto_argvec::~auto_argvec): New function.\n+\t(gcc::jit::playback::context::compile): Convert fake_args to be\n+\tan auto_argvec, so that it can contain dynamically-allocated\n+\tstrings.   Construct a vec of all requested dumps, and pass it to\n+\tmake_fake_args.  Extract requested dumps between the calls to\n+\ttoplev::main and toplev::finalize.\n+\t(gcc::jit::playback::context::make_fake_args): Convert param\n+\t\"argvec\" to be a vec <char *>, and gain a \"requested_dumps\"\n+\tparam.  Convert to dynamically-allocated arg strings by converting\n+\tADD_ARG to take a copy of the arg, and add ADD_ARG_TAKE_OWNERSHIP\n+\tfor args that are already a copy.  Add args for all requested dumps.\n+\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n+\tfunction.\n+\t(gcc::jit::playback::context::read_dump_file): New function.\n+\t* jit-playback.h (gcc::jit::playback::context::make_fake_args):\n+\tConvert param \"argvec\" to be a vec <char *>, and gain a\n+\t\"requested_dumps\" param.\n+\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n+\tfunction.\n+\t(gcc::jit::playback::context::read_dump_file): New function.\n+\t* jit-recording.c (gcc::jit::recording::context::enable_dump): New\n+\tfunction.\n+\t(gcc::jit::recording::context::get_all_requested_dumps): New\n+\tfunction.\n+\t* jit-recording.h (gcc::jit::recording::requested_dump): New\n+\tstruct.\n+\t(gcc::jit::recording::context::enable_dump): New function.\n+\t(gcc::jit::recording::context::get_all_requested_dumps): New\n+\tfunction.\n+\t(gcc::jit::recording::context::m_requested_dumps): New field.\n+\t* libgccjit.c (gcc_jit_context_enable_dump): New API entrypoint.\n+\t* libgccjit.h (gcc_jit_context_enable_dump): New API entrypoint.\n+\t* libgccjit.map (gcc_jit_context_enable_dump): New API entrypoint.\n+\n 2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64166"}, {"sha": "6b0a1892ba7cfccb20cf2caf3d68c47b20037d33", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 230, "deletions": 146, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-libgccjit 5.0.0 (experimental 20141201), December 01, 2014\n+libgccjit 5.0.0 (experimental 20141209), December 09, 2014\n \n David Malcolm\n \n@@ -4072,8 +4072,62 @@ were a source file.  This may be of use in conjunction with\n code in a debugger.\n @end deffn\n \n+@geindex gcc_jit_context_enable_dump (C function)\n+@anchor{topics/contexts gcc_jit_context_enable_dump}@anchor{53}\n+@deffn {C Function} void           gcc_jit_context_enable_dump (gcc_jit_context@w{ }*ctxt, const char@w{ }*dumpname, char@w{ }**out_ptr)\n+\n+Enable the dumping of a specific set of internal state from the\n+compilation, capturing the result in-memory as a buffer.\n+\n+Parameter \"dumpname\" corresponds to the equivalent gcc command-line\n+option, without the \"-fdump-\" prefix.\n+For example, to get the equivalent of @code{-fdump-tree-vrp1},\n+supply @code{\"tree-vrp1\"}:\n+\n+@example\n+static char *dump_vrp1;\n+\n+void\n+create_code (gcc_jit_context *ctxt)\n+@{\n+   gcc_jit_context_enable_dump (ctxt, \"tree-vrp1\", &dump_vrp1);\n+   /* (other API calls omitted for brevity) */\n+@}\n+@end example\n+\n+@noindent\n+\n+The context directly stores the dumpname as a @code{(const char *)}, so\n+the passed string must outlive the context.\n+\n+@pxref{15,,gcc_jit_context_compile()} will capture the dump as a\n+dynamically-allocated buffer, writing it to @code{*out_ptr}.\n+\n+The caller becomes responsible for calling:\n+\n+@example\n+free (*out_ptr)\n+@end example\n+\n+@noindent\n+\n+each time that @pxref{15,,gcc_jit_context_compile()} is called.\n+@code{*out_ptr} will be written to, either with the address of a buffer,\n+or with @code{NULL} if an error occurred.\n+\n+@cartouche\n+@quotation Warning \n+This API entrypoint is likely to be less stable than the others.\n+In particular, both the precise dumpnames, and the format and content\n+of the dumps are subject to change.\n+\n+It exists primarily for writing the library's own test suite.\n+@end quotation\n+@end cartouche\n+@end deffn\n+\n @node Options<2>,,Debugging,Compilation contexts\n-@anchor{topics/contexts options}@anchor{53}\n+@anchor{topics/contexts options}@anchor{54}\n @subsection Options\n \n \n@@ -4085,25 +4139,25 @@ code in a debugger.\n @end menu\n \n @node String Options,Boolean options,,Options<2>\n-@anchor{topics/contexts string-options}@anchor{54}\n+@anchor{topics/contexts string-options}@anchor{55}\n @subsubsection String Options\n \n \n @geindex gcc_jit_context_set_str_option (C function)\n-@anchor{topics/contexts gcc_jit_context_set_str_option}@anchor{55}\n+@anchor{topics/contexts gcc_jit_context_set_str_option}@anchor{56}\n @deffn {C Function} void gcc_jit_context_set_str_option (gcc_jit_context@w{ }*ctxt, enum gcc_jit_str_option@w{ }opt, const char@w{ }*value)\n \n Set a string option of the context.\n \n @geindex gcc_jit_str_option (C type)\n-@anchor{topics/contexts gcc_jit_str_option}@anchor{56}\n+@anchor{topics/contexts gcc_jit_str_option}@anchor{57}\n @deffn {C Type} enum gcc_jit_str_option\n @end deffn\n \n There is currently just one string option:\n \n @geindex GCC_JIT_STR_OPTION_PROGNAME (C macro)\n-@anchor{topics/contexts GCC_JIT_STR_OPTION_PROGNAME}@anchor{57}\n+@anchor{topics/contexts GCC_JIT_STR_OPTION_PROGNAME}@anchor{58}\n @deffn {C Macro} GCC_JIT_STR_OPTION_PROGNAME\n \n The name of the program, for use as a prefix when printing error\n@@ -4112,7 +4166,7 @@ messages to stderr.  If @cite{NULL}, or default, \"libgccjit.so\" is used.\n @end deffn\n \n @node Boolean options,Integer options,String Options,Options<2>\n-@anchor{topics/contexts boolean-options}@anchor{58}\n+@anchor{topics/contexts boolean-options}@anchor{59}\n @subsubsection Boolean options\n \n \n@@ -4124,7 +4178,7 @@ Set a boolean option of the context.\n Zero is \"false\" (the default), non-zero is \"true\".\n \n @geindex gcc_jit_bool_option (C type)\n-@anchor{topics/contexts gcc_jit_bool_option}@anchor{59}\n+@anchor{topics/contexts gcc_jit_bool_option}@anchor{5a}\n @deffn {C Type} enum gcc_jit_bool_option\n @end deffn\n \n@@ -4142,7 +4196,7 @@ location information for the code (by creating and passing in\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}@anchor{5a}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}@anchor{5b}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE\n \n If true, @pxref{15,,gcc_jit_context_compile()} will dump its initial\n@@ -4239,7 +4293,7 @@ square:\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_SUMMARY (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_SUMMARY}@anchor{5b}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_SUMMARY}@anchor{5c}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_SUMMARY\n \n If true, @pxref{15,,gcc_jit_context_compile()} will print information to stderr\n@@ -4248,19 +4302,19 @@ the time taken and memory usage of each phase.\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING}@anchor{5c}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING}@anchor{5d}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING\n \n If true, @pxref{15,,gcc_jit_context_compile()} will dump copious\n amount of information on what it's doing to various\n files within a temporary directory.  Use\n-@pxref{5d,,GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES} (see below) to\n+@pxref{5e,,GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES} (see below) to\n see the results.  The files are intended to be human-readable,\n but the exact files and their formats are subject to change.\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_SELFCHECK_GC (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_SELFCHECK_GC}@anchor{5e}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_SELFCHECK_GC}@anchor{5f}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_SELFCHECK_GC\n \n If true, libgccjit will aggressively run its garbage collector, to\n@@ -4270,7 +4324,7 @@ used when running the selftest suite.\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES}@anchor{5d}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES}@anchor{5e}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES\n \n If true, the @pxref{8,,gcc_jit_context} will not clean up intermediate files\n@@ -4279,7 +4333,7 @@ written to the filesystem, and will display their location on stderr.\n @end deffn\n \n @node Integer options,,Boolean options,Options<2>\n-@anchor{topics/contexts integer-options}@anchor{5f}\n+@anchor{topics/contexts integer-options}@anchor{60}\n @subsubsection Integer options\n \n \n@@ -4290,7 +4344,7 @@ written to the filesystem, and will display their location on stderr.\n Set an integer option of the context.\n \n @geindex gcc_jit_int_option (C type)\n-@anchor{topics/contexts gcc_jit_int_option}@anchor{60}\n+@anchor{topics/contexts gcc_jit_int_option}@anchor{61}\n @deffn {C Type} enum gcc_jit_int_option\n @end deffn\n \n@@ -4327,7 +4381,7 @@ The default value is 0 (unoptimized).\n @c <http://www.gnu.org/licenses/>.\n \n @node Objects,Types,Compilation contexts,Topic Reference\n-@anchor{topics/objects objects}@anchor{61}@anchor{topics/objects doc}@anchor{62}\n+@anchor{topics/objects objects}@anchor{62}@anchor{topics/objects doc}@anchor{63}\n @section Objects\n \n \n@@ -4387,7 +4441,7 @@ gcc_jit_object *obj = gcc_jit_type_as_object (int_type);\n The object \"base class\" has the following operations:\n \n @geindex gcc_jit_object_get_context (C function)\n-@anchor{topics/objects gcc_jit_object_get_context}@anchor{63}\n+@anchor{topics/objects gcc_jit_object_get_context}@anchor{64}\n @deffn {C Function} gcc_jit_context *gcc_jit_object_get_context (gcc_jit_object@w{ }*obj)\n \n Which context is \"obj\" within?\n@@ -4443,7 +4497,7 @@ object's context is released.\n @c <http://www.gnu.org/licenses/>.\n \n @node Types,Expressions,Objects,Topic Reference\n-@anchor{topics/types doc}@anchor{64}@anchor{topics/types types}@anchor{65}\n+@anchor{topics/types doc}@anchor{65}@anchor{topics/types types}@anchor{66}\n @section Types\n \n \n@@ -4480,7 +4534,7 @@ See @pxref{b,,gcc_jit_context_get_type()} for the available types.\n \n @item \n derived types can be accessed by using functions such as\n-@pxref{66,,gcc_jit_type_get_pointer()} and @pxref{67,,gcc_jit_type_get_const()}:\n+@pxref{67,,gcc_jit_type_get_pointer()} and @pxref{68,,gcc_jit_type_get_const()}:\n \n @example\n gcc_jit_type *const_int_star = gcc_jit_type_get_pointer (gcc_jit_type_get_const (int_type));\n@@ -4501,7 +4555,7 @@ by creating structures (see below).\n @end menu\n \n @node Standard types,Pointers const and volatile,,Types\n-@anchor{topics/types standard-types}@anchor{68}\n+@anchor{topics/types standard-types}@anchor{69}\n @subsection Standard types\n \n \n@@ -4706,66 +4760,66 @@ C99's @code{_Complex long double}\n @end deffn\n \n @geindex gcc_jit_context_get_int_type (C function)\n-@anchor{topics/types gcc_jit_context_get_int_type}@anchor{69}\n+@anchor{topics/types gcc_jit_context_get_int_type}@anchor{6a}\n @deffn {C Function} gcc_jit_type *           gcc_jit_context_get_int_type (gcc_jit_context@w{ }*ctxt, int@w{ }num_bytes, int@w{ }is_signed)\n \n Access the integer type of the given size.\n @end deffn\n \n @node Pointers const and volatile,Structures and unions,Standard types,Types\n-@anchor{topics/types pointers-const-and-volatile}@anchor{6a}\n+@anchor{topics/types pointers-const-and-volatile}@anchor{6b}\n @subsection Pointers, @cite{const}, and @cite{volatile}\n \n \n @geindex gcc_jit_type_get_pointer (C function)\n-@anchor{topics/types gcc_jit_type_get_pointer}@anchor{66}\n+@anchor{topics/types gcc_jit_type_get_pointer}@anchor{67}\n @deffn {C Function} gcc_jit_type *gcc_jit_type_get_pointer (gcc_jit_type@w{ }*type)\n \n Given type \"T\", get type \"T*\".\n @end deffn\n \n @geindex gcc_jit_type_get_const (C function)\n-@anchor{topics/types gcc_jit_type_get_const}@anchor{67}\n+@anchor{topics/types gcc_jit_type_get_const}@anchor{68}\n @deffn {C Function} gcc_jit_type *gcc_jit_type_get_const (gcc_jit_type@w{ }*type)\n \n Given type \"T\", get type \"const T\".\n @end deffn\n \n @geindex gcc_jit_type_get_volatile (C function)\n-@anchor{topics/types gcc_jit_type_get_volatile}@anchor{6b}\n+@anchor{topics/types gcc_jit_type_get_volatile}@anchor{6c}\n @deffn {C Function} gcc_jit_type *gcc_jit_type_get_volatile (gcc_jit_type@w{ }*type)\n \n Given type \"T\", get type \"volatile T\".\n @end deffn\n \n @geindex gcc_jit_context_new_array_type (C function)\n-@anchor{topics/types gcc_jit_context_new_array_type}@anchor{6c}\n+@anchor{topics/types gcc_jit_context_new_array_type}@anchor{6d}\n @deffn {C Function} gcc_jit_type *            gcc_jit_context_new_array_type (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*element_type, int@w{ }num_elements)\n \n Given type \"T\", get type \"T[N]\" (for a constant N).\n @end deffn\n \n @node Structures and unions,,Pointers const and volatile,Types\n-@anchor{topics/types structures-and-unions}@anchor{6d}\n+@anchor{topics/types structures-and-unions}@anchor{6e}\n @subsection Structures and unions\n \n \n @geindex gcc_jit_struct (C type)\n-@anchor{topics/types gcc_jit_struct}@anchor{6e}\n+@anchor{topics/types gcc_jit_struct}@anchor{6f}\n @deffn {C Type} gcc_jit_struct\n @end deffn\n \n A compound type analagous to a C @cite{struct}.\n \n @geindex gcc_jit_field (C type)\n-@anchor{topics/types gcc_jit_field}@anchor{6f}\n+@anchor{topics/types gcc_jit_field}@anchor{70}\n @deffn {C Type} gcc_jit_field\n @end deffn\n \n-A field within a @pxref{6e,,gcc_jit_struct}.\n+A field within a @pxref{6f,,gcc_jit_struct}.\n \n-You can model C @cite{struct} types by creating @pxref{6e,,gcc_jit_struct *} and\n-@pxref{6f,,gcc_jit_field} instances, in either order:\n+You can model C @cite{struct} types by creating @pxref{6f,,gcc_jit_struct *} and\n+@pxref{70,,gcc_jit_field} instances, in either order:\n \n \n @itemize *\n@@ -4822,21 +4876,21 @@ gcc_jit_struct_set_fields (node, NULL, 2, fields);\n @end itemize\n \n @geindex gcc_jit_context_new_field (C function)\n-@anchor{topics/types gcc_jit_context_new_field}@anchor{70}\n+@anchor{topics/types gcc_jit_context_new_field}@anchor{71}\n @deffn {C Function} gcc_jit_field *           gcc_jit_context_new_field (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*type, const char@w{ }*name)\n \n Construct a new field, with the given type and name.\n @end deffn\n \n @geindex gcc_jit_field_as_object (C function)\n-@anchor{topics/types gcc_jit_field_as_object}@anchor{71}\n+@anchor{topics/types gcc_jit_field_as_object}@anchor{72}\n @deffn {C Function} gcc_jit_object *           gcc_jit_field_as_object (gcc_jit_field@w{ }*field)\n \n Upcast from field to object.\n @end deffn\n \n @geindex gcc_jit_context_new_struct_type (C function)\n-@anchor{topics/types gcc_jit_context_new_struct_type}@anchor{72}\n+@anchor{topics/types gcc_jit_context_new_struct_type}@anchor{73}\n @deffn {C Function} gcc_jit_struct *gcc_jit_context_new_struct_type (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, const char@w{ }*name, int@w{ }num_fields, gcc_jit_field@w{ }**fields)\n \n @quotation\n@@ -4846,24 +4900,24 @@ Construct a new struct type, with the given name and fields.\n @end deffn\n \n @geindex gcc_jit_context_new_opaque_struct (C function)\n-@anchor{topics/types gcc_jit_context_new_opaque_struct}@anchor{73}\n+@anchor{topics/types gcc_jit_context_new_opaque_struct}@anchor{74}\n @deffn {C Function} gcc_jit_struct *         gcc_jit_context_new_opaque_struct (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, const char@w{ }*name)\n \n Construct a new struct type, with the given name, but without\n specifying the fields.   The fields can be omitted (in which case the\n size of the struct is not known), or later specified using\n-@pxref{74,,gcc_jit_struct_set_fields()}.\n+@pxref{75,,gcc_jit_struct_set_fields()}.\n @end deffn\n \n @geindex gcc_jit_struct_as_type (C function)\n-@anchor{topics/types gcc_jit_struct_as_type}@anchor{75}\n+@anchor{topics/types gcc_jit_struct_as_type}@anchor{76}\n @deffn {C Function} gcc_jit_type *           gcc_jit_struct_as_type (gcc_jit_struct@w{ }*struct_type)\n \n Upcast from struct to type.\n @end deffn\n \n @geindex gcc_jit_struct_set_fields (C function)\n-@anchor{topics/types gcc_jit_struct_set_fields}@anchor{74}\n+@anchor{topics/types gcc_jit_struct_set_fields}@anchor{75}\n @deffn {C Function} void           gcc_jit_struct_set_fields (gcc_jit_struct@w{ }*struct_type, gcc_jit_location@w{ }*loc, int@w{ }num_fields, gcc_jit_field@w{ }**fields)\n \n Populate the fields of a formerly-opaque struct type.\n@@ -4889,7 +4943,7 @@ This can only be called once on a given struct type.\n @c <http://www.gnu.org/licenses/>.\n \n @node Expressions,Creating and using functions,Types,Topic Reference\n-@anchor{topics/expressions expressions}@anchor{76}@anchor{topics/expressions doc}@anchor{77}\n+@anchor{topics/expressions expressions}@anchor{77}@anchor{topics/expressions doc}@anchor{78}\n @section Expressions\n \n \n@@ -4915,7 +4969,7 @@ Lvalues\n \n \n @node Rvalues,Lvalues,,Expressions\n-@anchor{topics/expressions rvalues}@anchor{78}\n+@anchor{topics/expressions rvalues}@anchor{79}\n @subsection Rvalues\n \n \n@@ -4969,7 +5023,7 @@ Every rvalue has an associated type, and the API will check to ensure\n that types match up correctly (otherwise the context will emit an error).\n \n @geindex gcc_jit_rvalue_get_type (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_get_type}@anchor{79}\n+@anchor{topics/expressions gcc_jit_rvalue_get_type}@anchor{7a}\n @deffn {C Function} gcc_jit_type *gcc_jit_rvalue_get_type (gcc_jit_rvalue@w{ }*rvalue)\n \n Get the type of this rvalue.\n@@ -4993,7 +5047,7 @@ Upcast the given rvalue to be an object.\n @end menu\n \n @node Simple expressions,Unary Operations,,Rvalues\n-@anchor{topics/expressions simple-expressions}@anchor{7a}\n+@anchor{topics/expressions simple-expressions}@anchor{7b}\n @subsubsection Simple expressions\n \n \n@@ -5042,14 +5096,14 @@ the given constant value.\n @end deffn\n \n @geindex gcc_jit_context_new_rvalue_from_ptr (C function)\n-@anchor{topics/expressions gcc_jit_context_new_rvalue_from_ptr}@anchor{7b}\n+@anchor{topics/expressions gcc_jit_context_new_rvalue_from_ptr}@anchor{7c}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_rvalue_from_ptr (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*pointer_type, void@w{ }*value)\n \n Given a pointer type, build an rvalue for the given address.\n @end deffn\n \n @geindex gcc_jit_context_null (C function)\n-@anchor{topics/expressions gcc_jit_context_null}@anchor{7c}\n+@anchor{topics/expressions gcc_jit_context_null}@anchor{7d}\n @deffn {C Function} gcc_jit_rvalue *gcc_jit_context_null (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*pointer_type)\n \n Given a pointer type, build an rvalue for @code{NULL}.  Essentially this\n@@ -5063,27 +5117,27 @@ gcc_jit_context_new_rvalue_from_ptr (ctxt, pointer_type, NULL)\n @end deffn\n \n @geindex gcc_jit_context_new_string_literal (C function)\n-@anchor{topics/expressions gcc_jit_context_new_string_literal}@anchor{7d}\n+@anchor{topics/expressions gcc_jit_context_new_string_literal}@anchor{7e}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_string_literal (gcc_jit_context@w{ }*ctxt, const char@w{ }*value)\n \n Generate an rvalue for the given NIL-terminated string, of type\n @code{GCC_JIT_TYPE_CONST_CHAR_PTR}.\n @end deffn\n \n @node Unary Operations,Binary Operations,Simple expressions,Rvalues\n-@anchor{topics/expressions unary-operations}@anchor{7e}\n+@anchor{topics/expressions unary-operations}@anchor{7f}\n @subsubsection Unary Operations\n \n \n @geindex gcc_jit_context_new_unary_op (C function)\n-@anchor{topics/expressions gcc_jit_context_new_unary_op}@anchor{7f}\n+@anchor{topics/expressions gcc_jit_context_new_unary_op}@anchor{80}\n @deffn {C Function} gcc_jit_rvalue *            gcc_jit_context_new_unary_op (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, enum gcc_jit_unary_op@w{ }op, gcc_jit_type@w{ }*result_type, gcc_jit_rvalue@w{ }*rvalue)\n \n Build a unary operation out of an input rvalue.\n @end deffn\n \n @geindex gcc_jit_unary_op (C type)\n-@anchor{topics/expressions gcc_jit_unary_op}@anchor{80}\n+@anchor{topics/expressions gcc_jit_unary_op}@anchor{81}\n @deffn {C Type} enum gcc_jit_unary_op\n @end deffn\n \n@@ -5101,23 +5155,23 @@ C equivalent\n \n @item\n \n-@pxref{81,,GCC_JIT_UNARY_OP_MINUS}\n+@pxref{82,,GCC_JIT_UNARY_OP_MINUS}\n \n @tab\n \n @cite{-(EXPR)}\n \n @item\n \n-@pxref{82,,GCC_JIT_UNARY_OP_BITWISE_NEGATE}\n+@pxref{83,,GCC_JIT_UNARY_OP_BITWISE_NEGATE}\n \n @tab\n \n @cite{~(EXPR)}\n \n @item\n \n-@pxref{83,,GCC_JIT_UNARY_OP_LOGICAL_NEGATE}\n+@pxref{84,,GCC_JIT_UNARY_OP_LOGICAL_NEGATE}\n \n @tab\n \n@@ -5127,7 +5181,7 @@ C equivalent\n \n \n @geindex GCC_JIT_UNARY_OP_MINUS (C macro)\n-@anchor{topics/expressions GCC_JIT_UNARY_OP_MINUS}@anchor{81}\n+@anchor{topics/expressions GCC_JIT_UNARY_OP_MINUS}@anchor{82}\n @deffn {C Macro} GCC_JIT_UNARY_OP_MINUS\n \n Negate an arithmetic value; analogous to:\n@@ -5142,7 +5196,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_UNARY_OP_BITWISE_NEGATE (C macro)\n-@anchor{topics/expressions GCC_JIT_UNARY_OP_BITWISE_NEGATE}@anchor{82}\n+@anchor{topics/expressions GCC_JIT_UNARY_OP_BITWISE_NEGATE}@anchor{83}\n @deffn {C Macro} GCC_JIT_UNARY_OP_BITWISE_NEGATE\n \n Bitwise negation of an integer value (one's complement); analogous\n@@ -5158,7 +5212,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_UNARY_OP_LOGICAL_NEGATE (C macro)\n-@anchor{topics/expressions GCC_JIT_UNARY_OP_LOGICAL_NEGATE}@anchor{83}\n+@anchor{topics/expressions GCC_JIT_UNARY_OP_LOGICAL_NEGATE}@anchor{84}\n @deffn {C Macro} GCC_JIT_UNARY_OP_LOGICAL_NEGATE\n \n Logical negation of an arithmetic or pointer value; analogous to:\n@@ -5173,7 +5227,7 @@ in C.\n @end deffn\n \n @node Binary Operations,Comparisons,Unary Operations,Rvalues\n-@anchor{topics/expressions binary-operations}@anchor{84}\n+@anchor{topics/expressions binary-operations}@anchor{85}\n @subsubsection Binary Operations\n \n \n@@ -5185,7 +5239,7 @@ Build a binary operation out of two constituent rvalues.\n @end deffn\n \n @geindex gcc_jit_binary_op (C type)\n-@anchor{topics/expressions gcc_jit_binary_op}@anchor{85}\n+@anchor{topics/expressions gcc_jit_binary_op}@anchor{86}\n @deffn {C Type} enum gcc_jit_binary_op\n @end deffn\n \n@@ -5203,7 +5257,7 @@ C equivalent\n \n @item\n \n-@pxref{86,,GCC_JIT_BINARY_OP_PLUS}\n+@pxref{87,,GCC_JIT_BINARY_OP_PLUS}\n \n @tab\n \n@@ -5219,79 +5273,79 @@ C equivalent\n \n @item\n \n-@pxref{87,,GCC_JIT_BINARY_OP_MULT}\n+@pxref{88,,GCC_JIT_BINARY_OP_MULT}\n \n @tab\n \n @cite{x * y}\n \n @item\n \n-@pxref{88,,GCC_JIT_BINARY_OP_DIVIDE}\n+@pxref{89,,GCC_JIT_BINARY_OP_DIVIDE}\n \n @tab\n \n @cite{x / y}\n \n @item\n \n-@pxref{89,,GCC_JIT_BINARY_OP_MODULO}\n+@pxref{8a,,GCC_JIT_BINARY_OP_MODULO}\n \n @tab\n \n @cite{x % y}\n \n @item\n \n-@pxref{8a,,GCC_JIT_BINARY_OP_BITWISE_AND}\n+@pxref{8b,,GCC_JIT_BINARY_OP_BITWISE_AND}\n \n @tab\n \n @cite{x & y}\n \n @item\n \n-@pxref{8b,,GCC_JIT_BINARY_OP_BITWISE_XOR}\n+@pxref{8c,,GCC_JIT_BINARY_OP_BITWISE_XOR}\n \n @tab\n \n @cite{x ^ y}\n \n @item\n \n-@pxref{8c,,GCC_JIT_BINARY_OP_BITWISE_OR}\n+@pxref{8d,,GCC_JIT_BINARY_OP_BITWISE_OR}\n \n @tab\n \n @cite{x | y}\n \n @item\n \n-@pxref{8d,,GCC_JIT_BINARY_OP_LOGICAL_AND}\n+@pxref{8e,,GCC_JIT_BINARY_OP_LOGICAL_AND}\n \n @tab\n \n @cite{x && y}\n \n @item\n \n-@pxref{8e,,GCC_JIT_BINARY_OP_LOGICAL_OR}\n+@pxref{8f,,GCC_JIT_BINARY_OP_LOGICAL_OR}\n \n @tab\n \n @cite{x || y}\n \n @item\n \n-@pxref{8f,,GCC_JIT_BINARY_OP_LSHIFT}\n+@pxref{90,,GCC_JIT_BINARY_OP_LSHIFT}\n \n @tab\n \n @cite{x << y}\n \n @item\n \n-@pxref{90,,GCC_JIT_BINARY_OP_RSHIFT}\n+@pxref{91,,GCC_JIT_BINARY_OP_RSHIFT}\n \n @tab\n \n@@ -5301,7 +5355,7 @@ C equivalent\n \n \n @geindex GCC_JIT_BINARY_OP_PLUS (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_PLUS}@anchor{86}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_PLUS}@anchor{87}\n @deffn {C Macro} GCC_JIT_BINARY_OP_PLUS\n \n Addition of arithmetic values; analogous to:\n@@ -5314,7 +5368,7 @@ Addition of arithmetic values; analogous to:\n \n in C.\n \n-For pointer addition, use @pxref{91,,gcc_jit_context_new_array_access()}.\n+For pointer addition, use @pxref{92,,gcc_jit_context_new_array_access()}.\n @end deffn\n \n \n@@ -5332,7 +5386,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_MULT (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_MULT}@anchor{87}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_MULT}@anchor{88}\n @deffn {C Macro} GCC_JIT_BINARY_OP_MULT\n \n Multiplication of a pair of arithmetic values; analogous to:\n@@ -5347,7 +5401,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_DIVIDE (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_DIVIDE}@anchor{88}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_DIVIDE}@anchor{89}\n @deffn {C Macro} GCC_JIT_BINARY_OP_DIVIDE\n \n Quotient of division of arithmetic values; analogous to:\n@@ -5366,7 +5420,7 @@ a floating-point result type indicates floating-point division.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_MODULO (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_MODULO}@anchor{89}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_MODULO}@anchor{8a}\n @deffn {C Macro} GCC_JIT_BINARY_OP_MODULO\n \n Remainder of division of arithmetic values; analogous to:\n@@ -5381,7 +5435,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_BITWISE_AND (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_AND}@anchor{8a}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_AND}@anchor{8b}\n @deffn {C Macro} GCC_JIT_BINARY_OP_BITWISE_AND\n \n Bitwise AND; analogous to:\n@@ -5396,7 +5450,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_BITWISE_XOR (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_XOR}@anchor{8b}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_XOR}@anchor{8c}\n @deffn {C Macro} GCC_JIT_BINARY_OP_BITWISE_XOR\n \n Bitwise exclusive OR; analogous to:\n@@ -5411,7 +5465,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_BITWISE_OR (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_OR}@anchor{8c}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_OR}@anchor{8d}\n @deffn {C Macro} GCC_JIT_BINARY_OP_BITWISE_OR\n \n Bitwise inclusive OR; analogous to:\n@@ -5426,7 +5480,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_LOGICAL_AND (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_AND}@anchor{8d}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_AND}@anchor{8e}\n @deffn {C Macro} GCC_JIT_BINARY_OP_LOGICAL_AND\n \n Logical AND; analogous to:\n@@ -5441,7 +5495,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_LOGICAL_OR (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_OR}@anchor{8e}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_OR}@anchor{8f}\n @deffn {C Macro} GCC_JIT_BINARY_OP_LOGICAL_OR\n \n Logical OR; analogous to:\n@@ -5456,7 +5510,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_LSHIFT (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_LSHIFT}@anchor{8f}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_LSHIFT}@anchor{90}\n @deffn {C Macro} GCC_JIT_BINARY_OP_LSHIFT\n \n Left shift; analogous to:\n@@ -5471,7 +5525,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_RSHIFT (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_RSHIFT}@anchor{90}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_RSHIFT}@anchor{91}\n @deffn {C Macro} GCC_JIT_BINARY_OP_RSHIFT\n \n Right shift; analogous to:\n@@ -5486,7 +5540,7 @@ in C.\n @end deffn\n \n @node Comparisons,Function calls,Binary Operations,Rvalues\n-@anchor{topics/expressions comparisons}@anchor{92}\n+@anchor{topics/expressions comparisons}@anchor{93}\n @subsubsection Comparisons\n \n \n@@ -5498,7 +5552,7 @@ Build a boolean rvalue out of the comparison of two other rvalues.\n @end deffn\n \n @geindex gcc_jit_comparison (C type)\n-@anchor{topics/expressions gcc_jit_comparison}@anchor{93}\n+@anchor{topics/expressions gcc_jit_comparison}@anchor{94}\n @deffn {C Type} enum gcc_jit_comparison\n @end deffn\n \n@@ -5564,28 +5618,28 @@ C equivalent\n \n \n @node Function calls,Type-coercion,Comparisons,Rvalues\n-@anchor{topics/expressions function-calls}@anchor{94}\n+@anchor{topics/expressions function-calls}@anchor{95}\n @subsubsection Function calls\n \n \n @geindex gcc_jit_context_new_call (C function)\n-@anchor{topics/expressions gcc_jit_context_new_call}@anchor{95}\n+@anchor{topics/expressions gcc_jit_context_new_call}@anchor{96}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_call (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_function@w{ }*func, int@w{ }numargs, gcc_jit_rvalue@w{ }**args)\n \n Given a function and the given table of argument rvalues, construct a\n call to the function, with the result as an rvalue.\n \n @cartouche\n @quotation Note \n-@pxref{95,,gcc_jit_context_new_call()} merely builds a\n+@pxref{96,,gcc_jit_context_new_call()} merely builds a\n @pxref{13,,gcc_jit_rvalue} i.e. an expression that can be evaluated,\n perhaps as part of a more complicated expression.\n The call @emph{won't} happen unless you add a statement to a function\n that evaluates the expression.\n \n For example, if you want to call a function and discard the result\n (or to call a function with @code{void} return type), use\n-@pxref{96,,gcc_jit_block_add_eval()}:\n+@pxref{97,,gcc_jit_block_add_eval()}:\n \n @example\n /* Add \"(void)printf (arg0, arg1);\".  */\n@@ -5604,12 +5658,12 @@ gcc_jit_block_add_eval (\n @end deffn\n \n @node Type-coercion,,Function calls,Rvalues\n-@anchor{topics/expressions type-coercion}@anchor{97}\n+@anchor{topics/expressions type-coercion}@anchor{98}\n @subsubsection Type-coercion\n \n \n @geindex gcc_jit_context_new_cast (C function)\n-@anchor{topics/expressions gcc_jit_context_new_cast}@anchor{98}\n+@anchor{topics/expressions gcc_jit_context_new_cast}@anchor{99}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_cast (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*rvalue, gcc_jit_type@w{ }*type)\n \n Given an rvalue of T, construct another rvalue of another type.\n@@ -5634,7 +5688,7 @@ P*  <-> Q*, for pointer types P and Q\n @end deffn\n \n @node Lvalues,Working with pointers structs and unions,Rvalues,Expressions\n-@anchor{topics/expressions lvalues}@anchor{99}\n+@anchor{topics/expressions lvalues}@anchor{9a}\n @subsection Lvalues\n \n \n@@ -5648,21 +5702,21 @@ a storage area (such as a variable).  It is also usable as an rvalue,\n where the rvalue is computed by reading from the storage area.\n \n @geindex gcc_jit_lvalue_as_object (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_as_object}@anchor{9a}\n+@anchor{topics/expressions gcc_jit_lvalue_as_object}@anchor{9b}\n @deffn {C Function} gcc_jit_object *           gcc_jit_lvalue_as_object (gcc_jit_lvalue@w{ }*lvalue)\n \n Upcast an lvalue to be an object.\n @end deffn\n \n @geindex gcc_jit_lvalue_as_rvalue (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_as_rvalue}@anchor{9b}\n+@anchor{topics/expressions gcc_jit_lvalue_as_rvalue}@anchor{9c}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_lvalue_as_rvalue (gcc_jit_lvalue@w{ }*lvalue)\n \n Upcast an lvalue to be an rvalue.\n @end deffn\n \n @geindex gcc_jit_lvalue_get_address (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_get_address}@anchor{9c}\n+@anchor{topics/expressions gcc_jit_lvalue_get_address}@anchor{9d}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_lvalue_get_address (gcc_jit_lvalue@w{ }*lvalue, gcc_jit_location@w{ }*loc)\n \n Take the address of an lvalue; analogous to:\n@@ -5682,24 +5736,24 @@ in C.\n @end menu\n \n @node Global variables,,,Lvalues\n-@anchor{topics/expressions global-variables}@anchor{9d}\n+@anchor{topics/expressions global-variables}@anchor{9e}\n @subsubsection Global variables\n \n \n @geindex gcc_jit_context_new_global (C function)\n-@anchor{topics/expressions gcc_jit_context_new_global}@anchor{9e}\n+@anchor{topics/expressions gcc_jit_context_new_global}@anchor{9f}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_context_new_global (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*type, const char@w{ }*name)\n \n Add a new global variable of the given type and name to the context.\n @end deffn\n \n @node Working with pointers structs and unions,,Lvalues,Expressions\n-@anchor{topics/expressions working-with-pointers-structs-and-unions}@anchor{9f}\n+@anchor{topics/expressions working-with-pointers-structs-and-unions}@anchor{a0}\n @subsection Working with pointers, structs and unions\n \n \n @geindex gcc_jit_rvalue_dereference (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_dereference}@anchor{a0}\n+@anchor{topics/expressions gcc_jit_rvalue_dereference}@anchor{a1}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_rvalue_dereference (gcc_jit_rvalue@w{ }*rvalue, gcc_jit_location@w{ }*loc)\n \n Given an rvalue of pointer type @code{T *}, dereferencing the pointer,\n@@ -5717,7 +5771,7 @@ in C.\n Field access is provided separately for both lvalues and rvalues.\n \n @geindex gcc_jit_lvalue_access_field (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_access_field}@anchor{a1}\n+@anchor{topics/expressions gcc_jit_lvalue_access_field}@anchor{a2}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_lvalue_access_field (gcc_jit_lvalue@w{ }*struct_, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an lvalue of struct or union type, access the given field,\n@@ -5733,7 +5787,7 @@ in C.\n @end deffn\n \n @geindex gcc_jit_rvalue_access_field (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_access_field}@anchor{a2}\n+@anchor{topics/expressions gcc_jit_rvalue_access_field}@anchor{a3}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_rvalue_access_field (gcc_jit_rvalue@w{ }*struct_, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an rvalue of struct or union type, access the given field\n@@ -5749,7 +5803,7 @@ in C.\n @end deffn\n \n @geindex gcc_jit_rvalue_dereference_field (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_dereference_field}@anchor{a3}\n+@anchor{topics/expressions gcc_jit_rvalue_dereference_field}@anchor{a4}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_rvalue_dereference_field (gcc_jit_rvalue@w{ }*ptr, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an rvalue of pointer type @code{T *} where T is of struct or union\n@@ -5765,7 +5819,7 @@ in C, itself equivalent to @code{(*EXPR).FIELD}.\n @end deffn\n \n @geindex gcc_jit_context_new_array_access (C function)\n-@anchor{topics/expressions gcc_jit_context_new_array_access}@anchor{91}\n+@anchor{topics/expressions gcc_jit_context_new_array_access}@anchor{92}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_context_new_array_access (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*ptr, gcc_jit_rvalue@w{ }*index)\n \n Given an rvalue of pointer type @code{T *}, get at the element @cite{T} at\n@@ -5800,7 +5854,7 @@ in C (or, indeed, to @code{PTR + INDEX}).\n @c <http://www.gnu.org/licenses/>.\n \n @node Creating and using functions,Source Locations,Expressions,Topic Reference\n-@anchor{topics/functions doc}@anchor{a4}@anchor{topics/functions creating-and-using-functions}@anchor{a5}\n+@anchor{topics/functions doc}@anchor{a5}@anchor{topics/functions creating-and-using-functions}@anchor{a6}\n @section Creating and using functions\n \n \n@@ -5813,7 +5867,7 @@ in C (or, indeed, to @code{PTR + INDEX}).\n @end menu\n \n @node Params,Functions,,Creating and using functions\n-@anchor{topics/functions params}@anchor{a6}\n+@anchor{topics/functions params}@anchor{a7}\n @subsection Params\n \n \n@@ -5836,28 +5890,28 @@ Parameters are lvalues, and thus are also rvalues (and objects), so the\n following upcasts are available:\n \n @geindex gcc_jit_param_as_lvalue (C function)\n-@anchor{topics/functions gcc_jit_param_as_lvalue}@anchor{a7}\n+@anchor{topics/functions gcc_jit_param_as_lvalue}@anchor{a8}\n @deffn {C Function} gcc_jit_lvalue *            gcc_jit_param_as_lvalue (gcc_jit_param@w{ }*param)\n \n Upcasting from param to lvalue.\n @end deffn\n \n @geindex gcc_jit_param_as_rvalue (C function)\n-@anchor{topics/functions gcc_jit_param_as_rvalue}@anchor{a8}\n+@anchor{topics/functions gcc_jit_param_as_rvalue}@anchor{a9}\n @deffn {C Function} gcc_jit_rvalue *            gcc_jit_param_as_rvalue (gcc_jit_param@w{ }*param)\n \n Upcasting from param to rvalue.\n @end deffn\n \n @geindex gcc_jit_param_as_object (C function)\n-@anchor{topics/functions gcc_jit_param_as_object}@anchor{a9}\n+@anchor{topics/functions gcc_jit_param_as_object}@anchor{aa}\n @deffn {C Function} gcc_jit_object *            gcc_jit_param_as_object (gcc_jit_param@w{ }*param)\n \n Upcasting from param to object.\n @end deffn\n \n @node Functions,Blocks,Params,Creating and using functions\n-@anchor{topics/functions functions}@anchor{aa}\n+@anchor{topics/functions functions}@anchor{ab}\n @subsection Functions\n \n \n@@ -5876,7 +5930,7 @@ creating ourselves, or one that we're referencing.\n Create a gcc_jit_function with the given name and parameters.\n \n @geindex gcc_jit_function_kind (C type)\n-@anchor{topics/functions gcc_jit_function_kind}@anchor{ab}\n+@anchor{topics/functions gcc_jit_function_kind}@anchor{ac}\n @deffn {C Type} enum gcc_jit_function_kind\n @end deffn\n \n@@ -5886,7 +5940,7 @@ values:\n @quotation\n \n @geindex GCC_JIT_FUNCTION_EXPORTED (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_EXPORTED}@anchor{ac}\n+@anchor{topics/functions GCC_JIT_FUNCTION_EXPORTED}@anchor{ad}\n @deffn {C Macro} GCC_JIT_FUNCTION_EXPORTED\n \n Function is defined by the client code and visible\n@@ -5898,15 +5952,15 @@ for this function from a @pxref{16,,gcc_jit_result} via\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_INTERNAL (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_INTERNAL}@anchor{ad}\n+@anchor{topics/functions GCC_JIT_FUNCTION_INTERNAL}@anchor{ae}\n @deffn {C Macro} GCC_JIT_FUNCTION_INTERNAL\n \n Function is defined by the client code, but is invisible\n outside of the JIT.  Analogous to a \"static\" function.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_IMPORTED (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_IMPORTED}@anchor{ae}\n+@anchor{topics/functions GCC_JIT_FUNCTION_IMPORTED}@anchor{af}\n @deffn {C Macro} GCC_JIT_FUNCTION_IMPORTED\n \n Function is not defined by the client code; we're merely\n@@ -5915,7 +5969,7 @@ header file.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_ALWAYS_INLINE (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_ALWAYS_INLINE}@anchor{af}\n+@anchor{topics/functions GCC_JIT_FUNCTION_ALWAYS_INLINE}@anchor{b0}\n @deffn {C Macro} GCC_JIT_FUNCTION_ALWAYS_INLINE\n \n Function is only ever inlined into other functions, and is\n@@ -5932,19 +5986,19 @@ same as GCC_JIT_FUNCTION_INTERNAL.\n @end deffn\n \n @geindex gcc_jit_context_get_builtin_function (C function)\n-@anchor{topics/functions gcc_jit_context_get_builtin_function}@anchor{b0}\n+@anchor{topics/functions gcc_jit_context_get_builtin_function}@anchor{b1}\n @deffn {C Function} gcc_jit_function *gcc_jit_context_get_builtin_function (gcc_jit_context@w{ }*ctxt, const char@w{ }*name)\n @end deffn\n \n @geindex gcc_jit_function_as_object (C function)\n-@anchor{topics/functions gcc_jit_function_as_object}@anchor{b1}\n+@anchor{topics/functions gcc_jit_function_as_object}@anchor{b2}\n @deffn {C Function} gcc_jit_object *           gcc_jit_function_as_object (gcc_jit_function@w{ }*func)\n \n Upcasting from function to object.\n @end deffn\n \n @geindex gcc_jit_function_get_param (C function)\n-@anchor{topics/functions gcc_jit_function_get_param}@anchor{b2}\n+@anchor{topics/functions gcc_jit_function_get_param}@anchor{b3}\n @deffn {C Function} gcc_jit_param *            gcc_jit_function_get_param (gcc_jit_function@w{ }*func, int@w{ }index)\n \n Get the param of the given index (0-based).\n@@ -5966,7 +6020,7 @@ name.\n @end deffn\n \n @node Blocks,Statements,Functions,Creating and using functions\n-@anchor{topics/functions blocks}@anchor{b3}\n+@anchor{topics/functions blocks}@anchor{b4}\n @subsection Blocks\n \n \n@@ -5989,7 +6043,7 @@ one function.\n @end deffn\n \n @geindex gcc_jit_function_new_block (C function)\n-@anchor{topics/functions gcc_jit_function_new_block}@anchor{b4}\n+@anchor{topics/functions gcc_jit_function_new_block}@anchor{b5}\n @deffn {C Function} gcc_jit_block *            gcc_jit_function_new_block (gcc_jit_function@w{ }*func, const char@w{ }*name)\n \n Create a basic block of the given name.  The name may be NULL, but\n@@ -5999,26 +6053,26 @@ messages.\n @end deffn\n \n @geindex gcc_jit_block_as_object (C function)\n-@anchor{topics/functions gcc_jit_block_as_object}@anchor{b5}\n+@anchor{topics/functions gcc_jit_block_as_object}@anchor{b6}\n @deffn {C Function} gcc_jit_object *            gcc_jit_block_as_object (gcc_jit_block@w{ }*block)\n \n Upcast from block to object.\n @end deffn\n \n @geindex gcc_jit_block_get_function (C function)\n-@anchor{topics/functions gcc_jit_block_get_function}@anchor{b6}\n+@anchor{topics/functions gcc_jit_block_get_function}@anchor{b7}\n @deffn {C Function} gcc_jit_function *            gcc_jit_block_get_function (gcc_jit_block@w{ }*block)\n \n Which function is this block within?\n @end deffn\n \n @node Statements,,Blocks,Creating and using functions\n-@anchor{topics/functions statements}@anchor{b7}\n+@anchor{topics/functions statements}@anchor{b8}\n @subsection Statements\n \n \n @geindex gcc_jit_block_add_eval (C function)\n-@anchor{topics/functions gcc_jit_block_add_eval}@anchor{96}\n+@anchor{topics/functions gcc_jit_block_add_eval}@anchor{97}\n @deffn {C Function} void           gcc_jit_block_add_eval (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*rvalue)\n \n Add evaluation of an rvalue, discarding the result\n@@ -6086,7 +6140,7 @@ gcc_jit_block_add_assignment_op (\n \n Add a no-op textual comment to the internal representation of the\n code.  It will be optimized away, but will be visible in the dumps\n-seen via @pxref{5a,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}\n+seen via @pxref{5b,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}\n and @pxref{1c,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE},\n and thus may be of use when debugging how your project's internal\n representation gets converted to the libgccjit IR.\n@@ -6114,7 +6168,7 @@ block, boolval, on_true, and on_false must be non-NULL.\n @end deffn\n \n @geindex gcc_jit_block_end_with_jump (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_jump}@anchor{b8}\n+@anchor{topics/functions gcc_jit_block_end_with_jump}@anchor{b9}\n @deffn {C Function} void           gcc_jit_block_end_with_jump (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_block@w{ }*target)\n \n Terminate a block by adding a jump to the given target block.\n@@ -6129,7 +6183,7 @@ goto target;\n @end deffn\n \n @geindex gcc_jit_block_end_with_return (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_return}@anchor{b9}\n+@anchor{topics/functions gcc_jit_block_end_with_return}@anchor{ba}\n @deffn {C Function} void           gcc_jit_block_end_with_return (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*rvalue)\n \n Terminate a block by adding evaluation of an rvalue, returning the value.\n@@ -6144,7 +6198,7 @@ return expression;\n @end deffn\n \n @geindex gcc_jit_block_end_with_void_return (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_void_return}@anchor{ba}\n+@anchor{topics/functions gcc_jit_block_end_with_void_return}@anchor{bb}\n @deffn {C Function} void           gcc_jit_block_end_with_void_return (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc)\n \n Terminate a block by adding a valueless return, for use within a function\n@@ -6177,7 +6231,7 @@ return;\n @c <http://www.gnu.org/licenses/>.\n \n @node Source Locations,Compilation results,Creating and using functions,Topic Reference\n-@anchor{topics/locations source-locations}@anchor{bb}@anchor{topics/locations doc}@anchor{bc}\n+@anchor{topics/locations source-locations}@anchor{bc}@anchor{topics/locations doc}@anchor{bd}\n @section Source Locations\n \n \n@@ -6223,7 +6277,7 @@ location.\n @end menu\n \n @node Faking it,,,Source Locations\n-@anchor{topics/locations faking-it}@anchor{bd}\n+@anchor{topics/locations faking-it}@anchor{be}\n @subsection Faking it\n \n \n@@ -6261,7 +6315,7 @@ file, giving you @emph{something} you can step through in the debugger.\n @c <http://www.gnu.org/licenses/>.\n \n @node Compilation results,,Source Locations,Topic Reference\n-@anchor{topics/results compilation-results}@anchor{be}@anchor{topics/results doc}@anchor{bf}\n+@anchor{topics/results compilation-results}@anchor{bf}@anchor{topics/results doc}@anchor{c0}\n @section Compilation results\n \n \n@@ -6292,7 +6346,7 @@ Functions are looked up by name.  For this to succeed, a function\n with a name matching @cite{funcname} must have been created on\n @cite{result}'s context (or a parent context) via a call to\n @pxref{11,,gcc_jit_context_new_function()} with @cite{kind}\n-@pxref{ac,,GCC_JIT_FUNCTION_EXPORTED}:\n+@pxref{ad,,GCC_JIT_FUNCTION_EXPORTED}:\n \n @example\n gcc_jit_context_new_function (ctxt,\n@@ -6349,7 +6403,7 @@ valid to use the result, or any code that was obtained by calling\n @c <http://www.gnu.org/licenses/>.\n \n @node Internals,Indices and tables,Topic Reference,Top\n-@anchor{internals/index internals}@anchor{c0}@anchor{internals/index doc}@anchor{c1}\n+@anchor{internals/index internals}@anchor{c1}@anchor{internals/index doc}@anchor{c2}\n @chapter Internals\n \n \n@@ -6362,7 +6416,7 @@ valid to use the result, or any code that was obtained by calling\n @end menu\n \n @node Working on the JIT library,Running the test suite,,Internals\n-@anchor{internals/index working-on-the-jit-library}@anchor{c2}\n+@anchor{internals/index working-on-the-jit-library}@anchor{c3}\n @section Working on the JIT library\n \n \n@@ -6399,7 +6453,7 @@ gcc/libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),\n Here's what those configuration options mean:\n \n @geindex command line option; --enable-host-shared\n-@anchor{internals/index cmdoption--enable-host-shared}@anchor{c3}\n+@anchor{internals/index cmdoption--enable-host-shared}@anchor{c4}\n @deffn {Option} --enable-host-shared\n \n Configuring with this option means that the compiler is built as\n@@ -6408,15 +6462,15 @@ but it necessary for a shared library.\n @end deffn\n \n @geindex command line option; --enable-languages=jit\n-@anchor{internals/index cmdoption--enable-languages}@anchor{c4}\n+@anchor{internals/index cmdoption--enable-languages}@anchor{c5}\n @deffn {Option} --enable-languages=jit\n \n This specifies which frontends to build.  The JIT library looks like\n a frontend to the rest of the code.\n @end deffn\n \n @geindex command line option; --disable-bootstrap\n-@anchor{internals/index cmdoption--disable-bootstrap}@anchor{c5}\n+@anchor{internals/index cmdoption--disable-bootstrap}@anchor{c6}\n @deffn {Option} --disable-bootstrap\n \n For hacking on the \"jit\" subdirectory, performing a full\n@@ -6426,7 +6480,7 @@ the compiler can still bootstrap itself.\n @end deffn\n \n @geindex command line option; --enable-checking=release\n-@anchor{internals/index cmdoption--enable-checking}@anchor{c6}\n+@anchor{internals/index cmdoption--enable-checking}@anchor{c7}\n @deffn {Option} --enable-checking=release\n \n The compile can perform extensive self-checking as it runs, useful when\n@@ -6437,7 +6491,7 @@ disable this self-checking.\n @end deffn\n \n @node Running the test suite,Environment variables,Working on the JIT library,Internals\n-@anchor{internals/index running-the-test-suite}@anchor{c7}\n+@anchor{internals/index running-the-test-suite}@anchor{c8}\n @section Running the test suite\n \n \n@@ -6495,15 +6549,15 @@ and once a test has been compiled, you can debug it directly:\n @noindent\n \n @node Environment variables,Overview of code structure,Running the test suite,Internals\n-@anchor{internals/index environment-variables}@anchor{c8}\n+@anchor{internals/index environment-variables}@anchor{c9}\n @section Environment variables\n \n \n When running client code against a locally-built libgccjit, three\n environment variables need to be set up:\n \n @geindex environment variable; LD_LIBRARY_PATH\n-@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{c9}\n+@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{ca}\n @deffn {Environment Variable} LD_LIBRARY_PATH\n \n @quotation\n@@ -6525,7 +6579,7 @@ libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux),\n @end deffn\n \n @geindex environment variable; PATH\n-@anchor{internals/index envvar-PATH}@anchor{ca}\n+@anchor{internals/index envvar-PATH}@anchor{cb}\n @deffn {Environment Variable} PATH\n \n The library uses a driver executable for converting from .s assembler\n@@ -6544,7 +6598,7 @@ of development.\n @end deffn\n \n @geindex environment variable; LIBRARY_PATH\n-@anchor{internals/index envvar-LIBRARY_PATH}@anchor{cb}\n+@anchor{internals/index envvar-LIBRARY_PATH}@anchor{cc}\n @deffn {Environment Variable} LIBRARY_PATH\n \n The driver executable invokes the linker, and the latter needs to locate\n@@ -6580,7 +6634,7 @@ hello world\n @noindent\n \n @node Overview of code structure,,Environment variables,Internals\n-@anchor{internals/index overview-of-code-structure}@anchor{cc}\n+@anchor{internals/index overview-of-code-structure}@anchor{cd}\n @section Overview of code structure\n \n \n@@ -6677,9 +6731,13 @@ Client Code   . Generated .            libgccjit.so\n    \u2502          .           .          .               .\n    V          .           .  gcc_jit_context_compile .\n     \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>      .               .\n+              .           .    \u2502 start of recording::context::compile ()\n               .           .    \u2502     .               .\n               .           .    \u2502 ACQUIRE MUTEX       .\n               .           .    \u2502     .               .\n+              .           .    \u2502 start of playback::context::compile ()\n+              .           .    \u2502   (create tempdir)  .\n+              .           .    \u2502     .               .\n               .           .    V\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500> toplev::main (for now)\n               .           .          .               .       \u2502\n               .           .          .               .   (various code)\n@@ -6724,13 +6782,33 @@ Client Code   . Generated .            libgccjit.so\n               .           .          .               .   (the middle\u2500end and backend)\n               .           .          .               .       \u2193\n               .           .    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 end of toplev::main\n-              .           .    \u2502 RELEASE MUTEX       .\n               .           .    \u2502     .               .\n-              .           .    \u2502 Convert assembler to DSO\n+              .           .    V\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500> toplev::finalize\n+              .           .          .               . \u2502   (purge internal state)\n+              .           .    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 end of toplev::finalize\n+              .           .    \u2502     .               .\n+              .           .    \u2502 Convert assembler to DSO (\"fake.so\")\n               .           .    \u2502     .               .\n-              .           .    \u2502 Load DSO            .\n+              .           .    \u2502 Load DSO (dlopen \"fake.so\")\n+              .           .    \u2502     .               .\n+              .           .    \u2502 end of playback::context::compile ()\n+              .           .    \u2502     .               .\n+              .           .    \u2502 playback::context dtor\n+              .           .     \u2500\u2500>  .               .\n+              .           .       \u2502 Cleanup tempdir  .\n+              .           .       \u2502   (\"fake.so\" is unlinked from the\n+              .           .       \u2502    filesystem at this point)\n+              .           .    <\u2500\u2500   .               .\n+              .           .    \u2502     .               .\n+              .           .    \u2502 RELEASE MUTEX       .\n+              .           .    \u2502     .               .\n+              .           .    \u2502 end of recording::context::compile ()\n    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      .               .\n    \u2502          .           .          .               .\n+   V          .           .  gcc_jit_result_get_code .\n+    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>      .               .\n+              .           .    \u2502 dlsym () within loaded DSO\n+   <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      .               .\n    Get (void*).           .          .               .\n    \u2502          .           .          .               .\n    \u2502 Call it  .           .          .               .\n@@ -6739,8 +6817,14 @@ Client Code   . Generated .            libgccjit.so\n               .    \u2502      .          .               .\n    <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500       .          .               .\n    \u2502          .           .          .               .\n+etc\u2502          .           .          .               .\n+   \u2502          .           .          .               .\n+   V          .           .  gcc_jit_result_release  .\n+    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>      .               .\n+              .           .    \u2502 dlclose () the loaded DSO\n+              .           .    \u2502    (code becomes uncallable)\n+   <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      .               .\n    \u2502          .           .          .               .\n-etc\n \n @end example\n \n@@ -6821,7 +6905,7 @@ the APIs are not yet set in stone, and they shouldn't be used in\n production yet.\n \n @node Indices and tables,Index,Internals,Top\n-@anchor{index indices-and-tables}@anchor{cd}\n+@anchor{index indices-and-tables}@anchor{ce}\n @unnumbered Indices and tables\n \n "}, {"sha": "d03ccf4b12db2026a9429b3c03316663f95421c5", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -152,6 +152,53 @@ Debugging\n    :macro:`GCC_JIT_BOOL_OPTION_DEBUGINFO` to allow stepping through the\n    code in a debugger.\n \n+.. function:: void\\\n+              gcc_jit_context_enable_dump (gcc_jit_context *ctxt,\\\n+                                           const char *dumpname, \\\n+                                           char **out_ptr)\n+\n+   Enable the dumping of a specific set of internal state from the\n+   compilation, capturing the result in-memory as a buffer.\n+\n+   Parameter \"dumpname\" corresponds to the equivalent gcc command-line\n+   option, without the \"-fdump-\" prefix.\n+   For example, to get the equivalent of :option:`-fdump-tree-vrp1`,\n+   supply ``\"tree-vrp1\"``:\n+\n+   .. code-block:: c\n+\n+      static char *dump_vrp1;\n+\n+      void\n+      create_code (gcc_jit_context *ctxt)\n+      {\n+         gcc_jit_context_enable_dump (ctxt, \"tree-vrp1\", &dump_vrp1);\n+         /* (other API calls omitted for brevity) */\n+      }\n+\n+   The context directly stores the dumpname as a ``(const char *)``, so\n+   the passed string must outlive the context.\n+\n+   :func:`gcc_jit_context_compile` will capture the dump as a\n+   dynamically-allocated buffer, writing it to ``*out_ptr``.\n+\n+   The caller becomes responsible for calling:\n+\n+   .. code-block:: c\n+\n+      free (*out_ptr)\n+\n+   each time that :func:`gcc_jit_context_compile` is called.\n+   ``*out_ptr`` will be written to, either with the address of a buffer,\n+   or with ``NULL`` if an error occurred.\n+\n+   .. warning::\n+\n+      This API entrypoint is likely to be less stable than the others.\n+      In particular, both the precise dumpnames, and the format and content\n+      of the dumps are subject to change.\n+\n+      It exists primarily for writing the library's own test suite.\n \n Options\n -------"}, {"sha": "cf50fb3ee7d7f444893ec9ac518c25d8a7298fc2", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 136, "deletions": 5, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"gcc-driver-name.h\"\n #include \"attribs.h\"\n+#include \"context.h\"\n \n #include \"jit-common.h\"\n #include \"jit-playback.h\"\n@@ -1552,6 +1553,26 @@ make_tempdir_path_template ()\n   return result;\n }\n \n+/* A subclass of auto_vec <char *> that frees all of its elements on\n+   deletion.  */\n+\n+class auto_argvec : public auto_vec <char *>\n+{\n+ public:\n+  ~auto_argvec ();\n+};\n+\n+/* auto_argvec's dtor, freeing all contained strings, automatically\n+   chaining up to ~auto_vec <char *>, which frees the internal buffer.  */\n+\n+auto_argvec::~auto_argvec ()\n+{\n+  int i;\n+  char *str;\n+  FOR_EACH_VEC_ELT (*this, i, str)\n+    free (str);\n+}\n+\n /* Compile a playback::context:\n \n    - Use the context's options to cconstruct command-line options, and\n@@ -1594,14 +1615,25 @@ compile ()\n   if (!ctxt_progname)\n     ctxt_progname = \"libgccjit.so\";\n \n-  auto_vec <const char *> fake_args;\n-  make_fake_args (&fake_args, ctxt_progname);\n+  auto_vec <recording::requested_dump> requested_dumps;\n+  m_recording_ctxt->get_all_requested_dumps (&requested_dumps);\n+\n+  auto_argvec fake_args;\n+  make_fake_args (&fake_args, ctxt_progname, &requested_dumps);\n   if (errors_occurred ())\n     return NULL;\n \n+  /* This runs the compiler.  */\n   toplev toplev (false);\n   toplev.main (fake_args.length (),\n \t       const_cast <char **> (fake_args.address ()));\n+\n+  /* Extracting dumps makes use of the gcc::dump_manager, hence we\n+     need to do it between toplev::main (which creates the dump manager)\n+     and toplev::finalize (which deletes it).  */\n+  extract_any_requested_dumps (&requested_dumps);\n+\n+  /* Clean up the compiler.  */\n   toplev.finalize ();\n \n   active_playback_ctxt = NULL;\n@@ -1645,10 +1677,12 @@ compile ()\n \n void\n playback::context::\n-make_fake_args (auto_vec <const char *> *argvec,\n-\t\tconst char *ctxt_progname)\n+make_fake_args (vec <char *> *argvec,\n+\t\tconst char *ctxt_progname,\n+\t\tvec <recording::requested_dump> *requested_dumps)\n {\n-#define ADD_ARG(arg) argvec->safe_push (arg)\n+#define ADD_ARG(arg) argvec->safe_push (xstrdup (arg))\n+#define ADD_ARG_TAKE_OWNERSHIP(arg) argvec->safe_push (arg)\n \n   ADD_ARG (ctxt_progname);\n   ADD_ARG (m_path_c_file);\n@@ -1707,7 +1741,104 @@ make_fake_args (auto_vec <const char *> *argvec,\n       ADD_ARG (\"-fdump-rtl-all\");\n       ADD_ARG (\"-fdump-ipa-all\");\n     }\n+\n+  /* Add \"-fdump-\" options for any calls to\n+     gcc_jit_context_enable_dump.  */\n+  {\n+    int i;\n+    recording::requested_dump *d;\n+    FOR_EACH_VEC_ELT (*requested_dumps, i, d)\n+      {\n+\tchar *arg = concat (\"-fdump-\", d->m_dumpname, NULL);\n+\tADD_ARG_TAKE_OWNERSHIP (arg);\n+      }\n+  }\n+\n #undef ADD_ARG\n+#undef ADD_ARG_TAKE_OWNERSHIP\n+}\n+\n+/* The second half of the implementation of gcc_jit_context_enable_dump.\n+   Iterate through the requested dumps, reading the underlying files\n+   into heap-allocated buffers, writing pointers to the buffers into\n+   the char ** pointers provided by client code.\n+   Client code is responsible for calling free on the results.  */\n+\n+void\n+playback::context::\n+extract_any_requested_dumps (vec <recording::requested_dump> *requested_dumps)\n+{\n+  int i;\n+  recording::requested_dump *d;\n+  FOR_EACH_VEC_ELT (*requested_dumps, i, d)\n+    {\n+      dump_file_info *dfi;\n+      char *filename;\n+      char *content;\n+\n+      dfi = g->get_dumps ()->get_dump_file_info_by_switch (d->m_dumpname);\n+      if (!dfi)\n+\t{\n+\t  add_error (NULL, \"unrecognized dump: %s\", d->m_dumpname);\n+\t  continue;\n+\t}\n+\n+      filename = g->get_dumps ()->get_dump_file_name (dfi);\n+      content = read_dump_file (filename);\n+      *(d->m_out_ptr) = content;\n+      free (filename);\n+    }\n+}\n+\n+/* Helper function for playback::context::extract_any_requested_dumps\n+   (itself for use in implementation of gcc_jit_context_enable_dump).\n+\n+   Attempt to read the complete file at the given path, returning the\n+   bytes found there as a buffer.\n+   The caller is responsible for calling free on the result.\n+   Errors will be reported on the context, and lead to NULL being\n+   returned; an out-of-memory error will terminate the process.  */\n+\n+char *\n+playback::context::read_dump_file (const char *path)\n+{\n+  char *result = NULL;\n+  size_t total_sz = 0;\n+  char buf[4096];\n+  size_t sz;\n+  FILE *f_in;\n+\n+  f_in = fopen (path, \"r\");\n+  if (!f_in)\n+    {\n+      add_error (NULL, \"unable to open %s for reading\", path);\n+      return NULL;\n+    }\n+\n+  while ( (sz = fread (buf, 1, sizeof (buf), f_in)) )\n+    {\n+      size_t old_total_sz = total_sz;\n+      total_sz += sz;\n+      result = reinterpret_cast <char *> (xrealloc (result, total_sz + 1));\n+      memcpy (result + old_total_sz, buf, sz);\n+    }\n+\n+  if (!feof (f_in))\n+    {\n+      add_error (NULL, \"error reading from %s\", path);\n+      free (result);\n+      return NULL;\n+    }\n+\n+  fclose (f_in);\n+\n+  if (result)\n+    {\n+      result[total_sz] = '\\0';\n+      return result;\n+    }\n+  else\n+    return xstrdup (\"\");\n }\n \n /* Part of playback::context::compile ()."}, {"sha": "b2b983a68660636e4667f1fc44512d163e23a38a", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -236,8 +236,16 @@ class context\n   /* Functions for implementing \"compile\".  */\n \n   void\n-  make_fake_args (auto_vec <const char *> *argvec,\n-\t\t  const char *ctxt_progname);\n+  make_fake_args (vec <char *> *argvec,\n+\t\t  const char *ctxt_progname,\n+\t\t  vec <recording::requested_dump> *requested_dumps);\n+\n+  void\n+  extract_any_requested_dumps\n+    (vec <recording::requested_dump> *requested_dumps);\n+\n+  char *\n+  read_dump_file (const char *path);\n \n   void\n   convert_to_dso (const char *ctxt_progname);"}, {"sha": "74fd1116ed8dbfa43d18f08181ac4d6c9294a57a", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -868,6 +868,27 @@ recording::context::set_bool_option (enum gcc_jit_bool_option opt,\n   m_bool_options[opt] = value ? true : false;\n }\n \n+/* Add the given dumpname/out_ptr pair to this context's list of requested\n+   dumps.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_context_enable_dump.  */\n+\n+void\n+recording::context::enable_dump (const char *dumpname,\n+\t\t\t\t char **out_ptr)\n+{\n+  requested_dump d;\n+  gcc_assert (dumpname);\n+  gcc_assert (out_ptr);\n+\n+  d.m_dumpname = dumpname;\n+  d.m_out_ptr = out_ptr;\n+  *out_ptr = NULL;\n+  m_requested_dumps.safe_push (d);\n+}\n+\n+\n /* This mutex guards gcc::jit::recording::context::compile, so that only\n    one thread can be accessing the bulk of GCC's state at once.  */\n \n@@ -1026,6 +1047,19 @@ recording::context::dump_to_file (const char *path, bool update_locations)\n     }\n }\n \n+/* Copy the requested dumps within this context and all ancestors into\n+   OUT. */\n+\n+void\n+recording::context::get_all_requested_dumps (vec <recording::requested_dump> *out)\n+{\n+  if (m_parent_ctxt)\n+    m_parent_ctxt->get_all_requested_dumps (out);\n+\n+  out->reserve (m_requested_dumps.length ());\n+  out->splice (m_requested_dumps);\n+}\n+\n /* This is a pre-compilation check for the context (and any parents).\n \n    Detect errors within the context, adding errors if any are found.  */"}, {"sha": "d2f5ffb58ee61d6a68b14d1196757c5b7029eb19", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -45,6 +45,13 @@ playback_string (string *str);\n playback::block *\n playback_block (block *b);\n \n+/* A recording of a call to gcc_jit_context_enable_dump.  */\n+struct requested_dump\n+{\n+  const char *m_dumpname;\n+  char **m_out_ptr;\n+};\n+\n /* A JIT-compilation context.  */\n class context\n {\n@@ -191,6 +198,10 @@ class context\n   set_bool_option (enum gcc_jit_bool_option opt,\n \t\t   int value);\n \n+  void\n+  enable_dump (const char *dumpname,\n+\t       char **out_ptr);\n+\n   const char *\n   get_str_option (enum gcc_jit_str_option opt) const\n   {\n@@ -235,6 +246,9 @@ class context\n \n   void dump_to_file (const char *path, bool update_locations);\n \n+  void\n+  get_all_requested_dumps (vec <recording::requested_dump> *out);\n+\n private:\n   void validate ();\n \n@@ -250,6 +264,9 @@ class context\n   int m_int_options[GCC_JIT_NUM_INT_OPTIONS];\n   bool m_bool_options[GCC_JIT_NUM_BOOL_OPTIONS];\n \n+  /* Dumpfiles that were requested via gcc_jit_context_enable_dump.  */\n+  auto_vec<requested_dump> m_requested_dumps;\n+\n   /* Recorded API usage.  */\n   auto_vec<memento *> m_mementos;\n "}, {"sha": "0f50c434d91663504ae5f97821261c35ed7d4277", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -2001,6 +2001,24 @@ gcc_jit_context_set_bool_option (gcc_jit_context *ctxt,\n   ctxt->set_bool_option (opt, value);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::context::enable_dump method in\n+   jit-recording.c.  */\n+\n+void\n+gcc_jit_context_enable_dump (gcc_jit_context *ctxt,\n+\t\t\t     const char *dumpname,\n+\t\t\t     char **out_ptr)\n+{\n+  RETURN_IF_FAIL (ctxt, NULL, NULL, \"NULL context\");\n+  RETURN_IF_FAIL (dumpname, ctxt, NULL, \"NULL dumpname\");\n+  RETURN_IF_FAIL (out_ptr, ctxt, NULL, \"NULL out_ptr\");\n+\n+  ctxt->enable_dump (dumpname, out_ptr);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "71628e031219f032843696e92e08fb00bbdb3ad6", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -985,6 +985,40 @@ gcc_jit_block_end_with_void_return (gcc_jit_block *block,\n extern gcc_jit_context *\n gcc_jit_context_new_child_context (gcc_jit_context *parent_ctxt);\n \n+/**********************************************************************\n+ Implementation support.\n+ **********************************************************************/\n+\n+/* Enable the dumping of a specific set of internal state from the\n+   compilation, capturing the result in-memory as a buffer.\n+\n+   Parameter \"dumpname\" corresponds to the equivalent gcc command-line\n+   option, without the \"-fdump-\" prefix.\n+   For example, to get the equivalent of \"-fdump-tree-vrp1\", supply\n+   \"tree-vrp1\".\n+   The context directly stores the dumpname as a (const char *), so the\n+   passed string must outlive the context.\n+\n+   gcc_jit_context_compile will capture the dump as a\n+   dynamically-allocated buffer, writing it to ``*out_ptr``.\n+\n+   The caller becomes responsible for calling\n+      free (*out_ptr)\n+   each time that gcc_jit_context_compile is called.  *out_ptr will be\n+   written to, either with the address of a buffer, or with NULL if an\n+   error occurred.\n+\n+   This API entrypoint is likely to be less stable than the others.\n+   In particular, both the precise dumpnames, and the format and content\n+   of the dumps are subject to change.\n+\n+   It exists primarily for writing the library's own test suite.  */\n+\n+extern void\n+gcc_jit_context_enable_dump (gcc_jit_context *ctxt,\n+\t\t\t     const char *dumpname,\n+\t\t\t     char **out_ptr);\n+\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "0375e77578fe947e269e6b2214f482f00e83f8ad", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -33,6 +33,7 @@\n     gcc_jit_context_acquire;\n     gcc_jit_context_compile;\n     gcc_jit_context_dump_to_file;\n+    gcc_jit_context_enable_dump;\n     gcc_jit_context_get_builtin_function;\n     gcc_jit_context_get_first_error;\n     gcc_jit_context_get_type;"}, {"sha": "177fe2443a0b73e699dba0acd70f7564743cc45a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -1,3 +1,20 @@\n+2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/64166\n+\tPR jit/64020\n+\t* jit.dg/harness.h (CHECK_STRING_CONTAINS): New macro.\n+\t(check_string_contains): New function.\n+\t* jit.dg/test-error-unrecognized-dump.c: New file.\n+\t* jit.dg/test-functions.c (trig_sincos_dump): New variable.\n+\t(trig_statistics_dump): New variable.\n+\t(create_test_of_builtin_trig): Enable dumping of \"sincos\" and\n+\t\"statistics\" into \"trig_sincos_dump\" and \"trig_statistics_dump\".\n+\t(verify_test_of_builtin_trig): Verify the sincos and statistics\n+\tdumps.\n+\t* jit.dg/test-sum-of-squares.c (dump_vrp1): New variable.\n+\t(create_code): Enable dumping of \"tree-vrp1\" into dump_vrp1.\n+\t(verify_code): Verify the tree-vrp1 dump.\n+\n 2014-12-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR bootstrap/64213"}, {"sha": "19dabb510df562601ed9b092d60a4b510310dc58", "filename": "gcc/testsuite/jit.dg/harness.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fharness.h?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -84,6 +84,9 @@ static char test[1024];\n #define CHECK_STRING_STARTS_WITH(ACTUAL, EXPECTED_PREFIX) \\\n   check_string_starts_with ((ACTUAL), (EXPECTED_PREFIX));\n \n+#define CHECK_STRING_CONTAINS(ACTUAL, EXPECTED_SUBSTRING) \\\n+  check_string_contains (#ACTUAL, (ACTUAL), (EXPECTED_SUBSTRING));\n+\n #define CHECK(COND) \\\n   do {\t\t\t\t\t\\\n     if (COND)\t\t\t\t\\\n@@ -110,6 +113,11 @@ extern void\n check_string_starts_with (const char *actual,\n \t\t\t  const char *expected_prefix);\n \n+extern void\n+check_string_contains (const char *name,\n+\t\t       const char *actual,\n+\t\t       const char *expected_substring);\n+\n /* Implement framework needed for turning the testcase hooks into an\n    executable.  test-combination.c and test-threads.c each combine multiple\n    testcases into larger testcases, so we have COMBINED_TEST as a way of\n@@ -168,6 +176,31 @@ check_string_starts_with (const char *actual,\n \ttest, actual, expected_prefix);\n }\n \n+void\n+check_string_contains (const char *name,\n+\t\t       const char *actual,\n+\t\t       const char *expected_substring)\n+{\n+  if (!actual)\n+    {\n+      fail (\"%s: %s: actual: NULL does not contain expected substring: \\\"%s\\\"\",\n+\t    test, name, expected_substring);\n+      fprintf (stderr, \"incorrect value\\n\");\n+      abort ();\n+    }\n+\n+  if (!strstr (actual, expected_substring))\n+    {\n+      fail (\"%s: %s: actual: \\\"%s\\\" did not contain expected substring: \\\"%s\\\"\",\n+\t    test, name, actual, expected_substring);\n+      fprintf (stderr, \"incorrect value\\n\");\n+      abort ();\n+    }\n+\n+  pass (\"%s: %s: found substring: \\\"%s\\\"\",\n+\ttest, name, expected_substring);\n+}\n+\n static void set_options (gcc_jit_context *ctxt, const char *argv0)\n {\n   /* Set up options.  */"}, {"sha": "45c24d63c4daa85e52d43f07ab4482bb8e73c11c", "filename": "gcc/testsuite/jit.dg/test-functions.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2Fjit.dg%2Ftest-functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2Fjit.dg%2Ftest-functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-functions.c?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -167,6 +167,9 @@ create_test_of_builtin_strcmp (gcc_jit_context *ctxt)\n   gcc_jit_block_end_with_return (initial, NULL, call);\n }\n \n+static char *trig_sincos_dump;\n+static char *trig_statistics_dump;\n+\n static void\n create_test_of_builtin_trig (gcc_jit_context *ctxt)\n {\n@@ -178,6 +181,14 @@ create_test_of_builtin_trig (gcc_jit_context *ctxt)\n        }\n        (in theory, optimizable to sin (2 * theta))\n   */\n+\n+  gcc_jit_context_enable_dump (ctxt,\n+\t\t\t       \"tree-sincos\",\n+\t\t\t       &trig_sincos_dump);\n+  gcc_jit_context_enable_dump (ctxt,\n+\t\t\t       \"statistics\",\n+\t\t\t       &trig_statistics_dump);\n+\n   gcc_jit_type *double_t =\n     gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_DOUBLE);\n \n@@ -266,6 +277,22 @@ verify_test_of_builtin_trig (gcc_jit_context *ctxt, gcc_jit_result *result)\n   CHECK_DOUBLE_VALUE (test_of_builtin_trig (M_PI_2      ),  0.0);\n   CHECK_DOUBLE_VALUE (test_of_builtin_trig (M_PI_4 * 3.0), -1.0);\n   CHECK_DOUBLE_VALUE (test_of_builtin_trig (M_PI        ),  0.0);\n+\n+  /* PR jit/64020:\n+     The \"sincos\" pass merges sin/cos calls into the cexpi builtin.\n+     Verify that a dump of the \"sincos\" pass was provided, and that it\n+     shows a call to the cexpi builtin on a SSA name of \"theta\".  */\n+  CHECK_NON_NULL (trig_sincos_dump);\n+  CHECK_STRING_CONTAINS (trig_sincos_dump, \" = __builtin_cexpi (theta_\");\n+  free (trig_sincos_dump);\n+\n+  /* Similarly, verify that the statistics dump was provided, and that\n+     it shows the sincos optimization.  */\n+  CHECK_NON_NULL (trig_statistics_dump);\n+  CHECK_STRING_CONTAINS (\n+    trig_statistics_dump,\n+    \"sincos \\\"sincos statements inserted\\\" \\\"test_of_builtin_trig\\\" 1\");\n+  free (trig_statistics_dump);\n }\n \n static void"}, {"sha": "46fd5c28c412886a3eb177b42dbfc307432ebcc1", "filename": "gcc/testsuite/jit.dg/test-sum-of-squares.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2Fjit.dg%2Ftest-sum-of-squares.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463366a06a14ae693a56571b6ed348e70a146168/gcc%2Ftestsuite%2Fjit.dg%2Ftest-sum-of-squares.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-sum-of-squares.c?ref=463366a06a14ae693a56571b6ed348e70a146168", "patch": "@@ -6,6 +6,8 @@\n \n #include \"harness.h\"\n \n+static char *dump_vrp1;\n+\n void\n create_code (gcc_jit_context *ctxt, void *user_data)\n {\n@@ -22,6 +24,8 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n       }\n       return sum;\n    */\n+  gcc_jit_context_enable_dump (ctxt, \"tree-vrp1\", &dump_vrp1);\n+\n   gcc_jit_type *the_type =\n     gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n   gcc_jit_type *return_type = the_type;\n@@ -123,4 +127,16 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n   int val = loop_test (10);\n   note (\"loop_test returned: %d\", val);\n   CHECK_VALUE (val, 285);\n+\n+  CHECK_NON_NULL (dump_vrp1);\n+  /* PR jit/64166\n+     An example of using gcc_jit_context_enable_dump to verify a property\n+     of the compile.\n+\n+     In this case, verify that vrp is able to deduce the\n+     bounds of the iteration variable. Specifically, verify that some\n+     variable is known to be in the range negative infinity to some\n+     expression based on param \"n\" (actually n-1).  */\n+  CHECK_STRING_CONTAINS (dump_vrp1, \": [-INF, n_\");\n+  free (dump_vrp1);\n }"}]}