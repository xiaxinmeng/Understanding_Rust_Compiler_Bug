{"sha": "595c267987e963936fff82dbac96d5af28949c8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1YzI2Nzk4N2U5NjM5MzZmZmY4MmRiYWM5NmQ1YWYyODk0OWM4Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-03T14:25:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-03T14:25:32Z"}, "message": "tree-vect-loop.c (vect_analyze_loop_form): Clarify reason for not vectorizing.\n\n2013-01-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_analyze_loop_form): Clarify reason\n\tfor not vectorizing.\n\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref): Do\n\tnot build INDIRECT_REFs, call get_name once only.\n\t(vect_create_data_ref_ptr): Likewise.  Dump base object kind\n\tbased on DR_BASE_OBJECT, not DR_BASE_ADDRESS.\n\nFrom-SVN: r194853", "tree": {"sha": "33a92f8ba62507e426dc2d2a34af352aa722f2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a92f8ba62507e426dc2d2a34af352aa722f2ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/595c267987e963936fff82dbac96d5af28949c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595c267987e963936fff82dbac96d5af28949c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595c267987e963936fff82dbac96d5af28949c8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595c267987e963936fff82dbac96d5af28949c8c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3d420006ce5c39de2df39ff5faa3173d635c806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d420006ce5c39de2df39ff5faa3173d635c806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d420006ce5c39de2df39ff5faa3173d635c806"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "bdbbb71c41102c452b874dadc8b37bc89025915a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595c267987e963936fff82dbac96d5af28949c8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595c267987e963936fff82dbac96d5af28949c8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=595c267987e963936fff82dbac96d5af28949c8c", "patch": "@@ -1,3 +1,12 @@\n+2013-01-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_analyze_loop_form): Clarify reason\n+\tfor not vectorizing.\n+\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref): Do\n+\tnot build INDIRECT_REFs, call get_name once only.\n+\t(vect_create_data_ref_ptr): Likewise.  Dump base object kind\n+\tbased on DR_BASE_OBJECT, not DR_BASE_ADDRESS.\n+\n 2013-01-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/55857"}, {"sha": "1294b6d5c01fcd4f1e8021b044e6c15ea830b287", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595c267987e963936fff82dbac96d5af28949c8c/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595c267987e963936fff82dbac96d5af28949c8c/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=595c267987e963936fff82dbac96d5af28949c8c", "patch": "@@ -3576,7 +3576,7 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n   tree data_ref_base = unshare_expr (DR_BASE_ADDRESS (dr));\n-  tree base_name;\n+  const char *base_name;\n   tree data_ref_base_var;\n   tree vec_stmt;\n   tree addr_base, addr_expr;\n@@ -3601,12 +3601,12 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n     }\n \n   if (loop_vinfo)\n-    base_name = build_fold_indirect_ref (data_ref_base);\n+    base_name = get_name (data_ref_base);\n   else\n     {\n       base_offset = ssize_int (0);\n       init = ssize_int (0);\n-      base_name = build_fold_indirect_ref (unshare_expr (DR_REF (dr)));\n+      base_name = get_name (DR_REF (dr));\n     }\n \n   data_ref_base_var = create_tmp_var (TREE_TYPE (data_ref_base), \"batmp\");\n@@ -3654,7 +3654,7 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n \n   vec_stmt = fold_convert (vect_ptr_type, addr_base);\n   addr_expr = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var,\n-                                     get_name (base_name));\n+                                     base_name);\n   vec_stmt = force_gimple_operand (vec_stmt, &seq, false, addr_expr);\n   gimple_seq_add_seq (new_stmt_list, seq);\n \n@@ -3729,7 +3729,7 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n \t\t\t  gimple_stmt_iterator *gsi, gimple *ptr_incr,\n \t\t\t  bool only_init, bool *inv_p)\n {\n-  tree base_name;\n+  const char *base_name;\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n   struct loop *loop = NULL;\n@@ -3786,23 +3786,22 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n \n   /* Create an expression for the first address accessed by this load\n      in LOOP.  */\n-  base_name = build_fold_indirect_ref (unshare_expr (DR_BASE_ADDRESS (dr)));\n+  base_name = get_name (DR_BASE_ADDRESS (dr));\n \n   if (dump_enabled_p ())\n     {\n-      tree data_ref_base = base_name;\n+      tree dr_base_type = TREE_TYPE (DR_BASE_OBJECT (dr));\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"create %s-pointer variable to type: \",\n                        tree_code_name[(int) TREE_CODE (aggr_type)]);\n       dump_generic_expr (MSG_NOTE, TDF_SLIM, aggr_type);\n-      if (TREE_CODE (data_ref_base) == VAR_DECL\n-          || TREE_CODE (data_ref_base) == ARRAY_REF)\n+      if (TREE_CODE (dr_base_type) == ARRAY_TYPE)\n         dump_printf (MSG_NOTE, \"  vectorizing an array ref: \");\n-      else if (TREE_CODE (data_ref_base) == COMPONENT_REF)\n+      else if (TREE_CODE (dr_base_type) == RECORD_TYPE)\n         dump_printf (MSG_NOTE, \"  vectorizing a record based array ref: \");\n-      else if (TREE_CODE (data_ref_base) == SSA_NAME)\n+      else\n         dump_printf (MSG_NOTE, \"  vectorizing a pointer ref: \");\n-      dump_generic_expr (MSG_NOTE, TDF_SLIM, base_name);\n+      dump_generic_expr (MSG_NOTE, TDF_SLIM, DR_BASE_OBJECT (dr));\n     }\n \n   /* (1) Create the new aggregate-pointer variable.  */\n@@ -3813,8 +3812,7 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n     aggr_ptr_type\n       = build_qualified_type (aggr_ptr_type,\n \t\t\t      TYPE_QUALS (TREE_TYPE (TREE_OPERAND (base, 0))));\n-  aggr_ptr = vect_get_new_vect_var (aggr_ptr_type, vect_pointer_var,\n-                                    get_name (base_name));\n+  aggr_ptr = vect_get_new_vect_var (aggr_ptr_type, vect_pointer_var, base_name);\n \n   /* Vector and array types inherit the alias set of their component\n      type by default so we need to use a ref-all pointer if the data\n@@ -3827,7 +3825,7 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n \t= build_pointer_type_for_mode (aggr_type,\n \t\t\t\t       TYPE_MODE (aggr_ptr_type), true);\n       aggr_ptr = vect_get_new_vect_var (aggr_ptr_type, vect_pointer_var,\n-\t\t\t\t\tget_name (base_name));\n+\t\t\t\t\tbase_name);\n     }\n \n   /* Likewise for any of the data references in the stmt group.  */\n@@ -3845,7 +3843,7 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n \t\t\t\t\t       TYPE_MODE (aggr_ptr_type), true);\n \t      aggr_ptr\n \t\t= vect_get_new_vect_var (aggr_ptr_type, vect_pointer_var,\n-\t\t\t\t\t get_name (base_name));\n+\t\t\t\t\t base_name);\n \t      break;\n \t    }\n "}, {"sha": "4499dac7a6cf0ea1b8a4dc978fff8d4c8f2a7739", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595c267987e963936fff82dbac96d5af28949c8c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595c267987e963936fff82dbac96d5af28949c8c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=595c267987e963936fff82dbac96d5af28949c8c", "patch": "@@ -1167,11 +1167,11 @@ vect_analyze_loop_form (struct loop *loop)\n      before the loop if needed), where the loop header contains all the\n      executable statements, and the latch is empty.  */\n   if (!empty_block_p (loop->latch)\n-        || !gimple_seq_empty_p (phi_nodes (loop->latch)))\n+      || !gimple_seq_empty_p (phi_nodes (loop->latch)))\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"not vectorized: unexpected loop form.\");\n+\t\t\t \"not vectorized: latch block not empty.\");\n       if (inner_loop_vinfo)\n \tdestroy_loop_vec_info (inner_loop_vinfo, true);\n       return NULL;"}]}