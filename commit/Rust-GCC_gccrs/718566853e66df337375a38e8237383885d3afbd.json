{"sha": "718566853e66df337375a38e8237383885d3afbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4NTY2ODUzZTY2ZGYzMzczNzVhMzhlODIzNzM4Mzg4NWQzYWZiZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2009-06-13T02:17:22Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2009-06-13T02:17:22Z"}, "message": "rs6000-c.c (altivec_resolve_overloaded_builtin): Add location argument to build_decl call.\n\n        * config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n        Add location argument to build_decl call.\n        * config/rs6000/rs6000.c (rs6000_build_builtin_va_list): Same.\n        (rs6000_init_builtins): Same.\n        (spe_init_builtins): Same.\n        (rs6000_gimplify_va_arg): Add location argument to\n        create_artificial_label call.\n\nFrom-SVN: r148449", "tree": {"sha": "f666747d57b934ee256ee64fd3aebe90668f4579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f666747d57b934ee256ee64fd3aebe90668f4579"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/718566853e66df337375a38e8237383885d3afbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718566853e66df337375a38e8237383885d3afbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718566853e66df337375a38e8237383885d3afbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718566853e66df337375a38e8237383885d3afbd/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef4677ac5e63e66bc94694bdc06b9ffc1db1cac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4677ac5e63e66bc94694bdc06b9ffc1db1cac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4677ac5e63e66bc94694bdc06b9ffc1db1cac4"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "16529f942cefbbac0b49ff26214b2b2c339c9220", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718566853e66df337375a38e8237383885d3afbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718566853e66df337375a38e8237383885d3afbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=718566853e66df337375a38e8237383885d3afbd", "patch": "@@ -1,3 +1,13 @@\n+2009-06-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tAdd location argument to build_decl call.\n+\t* config/rs6000/rs6000.c (rs6000_build_builtin_va_list): Same.\n+\t(rs6000_init_builtins): Same.\n+\t(spe_init_builtins): Same.\n+\t(rs6000_gimplify_va_arg): Add location argument to\n+\tcreate_artificial_label call.\n+\n 2009-06-12  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* timevar.def (TV_COMBINE_STACK_ADJUST): New timevar."}, {"sha": "38af0f44f2f62afb3eff30b35de9d489bf12cd08", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718566853e66df337375a38e8237383885d3afbd/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718566853e66df337375a38e8237383885d3afbd/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=718566853e66df337375a38e8237383885d3afbd", "patch": "@@ -3117,7 +3117,7 @@ altivec_resolve_overloaded_builtin (tree fndecl, void *passed_arglist)\n \t\t\t      build_int_cst (TREE_TYPE (arg2),\n \t\t\t\t\t     TYPE_VECTOR_SUBPARTS (arg1_type)\n \t\t\t\t\t     - 1), 0);\n-      decl = build_decl (VAR_DECL, NULL_TREE, arg1_type);\n+      decl = build_decl (input_location, VAR_DECL, NULL_TREE, arg1_type);\n       DECL_EXTERNAL (decl) = 0;\n       TREE_PUBLIC (decl) = 0;\n       DECL_CONTEXT (decl) = current_function_decl;\n@@ -3173,7 +3173,7 @@ altivec_resolve_overloaded_builtin (tree fndecl, void *passed_arglist)\n \t\t\t      build_int_cst (TREE_TYPE (arg2),\n \t\t\t\t\t     TYPE_VECTOR_SUBPARTS (arg1_type)\n \t\t\t\t\t     - 1), 0);\n-      decl = build_decl (VAR_DECL, NULL_TREE, arg1_type);\n+      decl = build_decl (input_location, VAR_DECL, NULL_TREE, arg1_type);\n       DECL_EXTERNAL (decl) = 0;\n       TREE_PUBLIC (decl) = 0;\n       DECL_CONTEXT (decl) = current_function_decl;"}, {"sha": "7e923fbcc15f6c0549eb78a77515aca7be9c90c9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718566853e66df337375a38e8237383885d3afbd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718566853e66df337375a38e8237383885d3afbd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=718566853e66df337375a38e8237383885d3afbd", "patch": "@@ -6833,19 +6833,22 @@ rs6000_build_builtin_va_list (void)\n     return build_pointer_type (char_type_node);\n \n   record = (*lang_hooks.types.make_type) (RECORD_TYPE);\n-  type_decl = build_decl (TYPE_DECL, get_identifier (\"__va_list_tag\"), record);\n+  type_decl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+      \t\t\t  get_identifier (\"__va_list_tag\"), record);\n \n-  f_gpr = build_decl (FIELD_DECL, get_identifier (\"gpr\"),\n+  f_gpr = build_decl (BUILTINS_LOCATION, FIELD_DECL, get_identifier (\"gpr\"),\n \t\t      unsigned_char_type_node);\n-  f_fpr = build_decl (FIELD_DECL, get_identifier (\"fpr\"),\n+  f_fpr = build_decl (BUILTINS_LOCATION, FIELD_DECL, get_identifier (\"fpr\"),\n \t\t      unsigned_char_type_node);\n   /* Give the two bytes of padding a name, so that -Wpadded won't warn on\n      every user file.  */\n-  f_res = build_decl (FIELD_DECL, get_identifier (\"reserved\"),\n-\t\t      short_unsigned_type_node);\n-  f_ovf = build_decl (FIELD_DECL, get_identifier (\"overflow_arg_area\"),\n+  f_res = build_decl (BUILTINS_LOCATION, FIELD_DECL,\n+      \t\t      get_identifier (\"reserved\"), short_unsigned_type_node);\n+  f_ovf = build_decl (BUILTINS_LOCATION, FIELD_DECL,\n+      \t\t      get_identifier (\"overflow_arg_area\"),\n \t\t      ptr_type_node);\n-  f_sav = build_decl (FIELD_DECL, get_identifier (\"reg_save_area\"),\n+  f_sav = build_decl (BUILTINS_LOCATION, FIELD_DECL,\n+      \t\t      get_identifier (\"reg_save_area\"),\n \t\t      ptr_type_node);\n \n   va_list_gpr_counter_field = f_gpr;\n@@ -7066,8 +7069,8 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n     align = 16;\n   else\n     {\n-      lab_false = create_artificial_label ();\n-      lab_over = create_artificial_label ();\n+      lab_false = create_artificial_label (input_location);\n+      lab_over = create_artificial_label (input_location);\n \n       /* Long long and SPE vectors are aligned in the registers.\n \t As are any other 2 gpr item such as complex int due to a\n@@ -9397,19 +9400,22 @@ rs6000_init_builtins (void)\n   float_type_internal_node = float_type_node;\n   void_type_internal_node = void_type_node;\n \n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__bool char\"),\n+  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+      \t\t      get_identifier (\"__bool char\"),\n \t\t      bool_char_type_node);\n   TYPE_NAME (bool_char_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__bool short\"),\n+  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+      \t\t      get_identifier (\"__bool short\"),\n \t\t      bool_short_type_node);\n   TYPE_NAME (bool_short_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__bool int\"),\n+  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+      \t\t      get_identifier (\"__bool int\"),\n \t\t      bool_int_type_node);\n   TYPE_NAME (bool_int_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__pixel\"),\n+  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL, get_identifier (\"__pixel\"),\n \t\t      pixel_type_node);\n   TYPE_NAME (pixel_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n@@ -9419,50 +9425,61 @@ rs6000_init_builtins (void)\n   bool_V4SI_type_node = build_vector_type (bool_int_type_node, 4);\n   pixel_V8HI_type_node = build_vector_type (pixel_type_node, 8);\n \n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector unsigned char\"),\n+  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+      \t\t      get_identifier (\"__vector unsigned char\"),\n \t\t      unsigned_V16QI_type_node);\n   TYPE_NAME (unsigned_V16QI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector signed char\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector signed char\"),\n \t\t      V16QI_type_node);\n   TYPE_NAME (V16QI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __bool char\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector __bool char\"),\n \t\t      bool_V16QI_type_node);\n   TYPE_NAME ( bool_V16QI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector unsigned short\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector unsigned short\"),\n \t\t      unsigned_V8HI_type_node);\n   TYPE_NAME (unsigned_V8HI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector signed short\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector signed short\"),\n \t\t      V8HI_type_node);\n   TYPE_NAME (V8HI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __bool short\"),\n+  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+      \t\t      get_identifier (\"__vector __bool short\"),\n \t\t      bool_V8HI_type_node);\n   TYPE_NAME (bool_V8HI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector unsigned int\"),\n+  tdecl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+      \t\t      get_identifier (\"__vector unsigned int\"),\n \t\t      unsigned_V4SI_type_node);\n   TYPE_NAME (unsigned_V4SI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector signed int\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector signed int\"),\n \t\t      V4SI_type_node);\n   TYPE_NAME (V4SI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __bool int\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector __bool int\"),\n \t\t      bool_V4SI_type_node);\n   TYPE_NAME (bool_V4SI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n \n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector float\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector float\"),\n \t\t      V4SF_type_node);\n   TYPE_NAME (V4SF_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n-  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __pixel\"),\n+  tdecl = build_decl (BUILTINS_LOCATION,\n+      \t\t      TYPE_DECL, get_identifier (\"__vector __pixel\"),\n \t\t      pixel_V8HI_type_node);\n   TYPE_NAME (pixel_V8HI_type_node) = tdecl;\n   (*lang_hooks.decls.pushdecl) (tdecl);\n@@ -9668,7 +9685,8 @@ spe_init_builtins (void)\n \t\t\t    SPE_BUILTIN_EVSEL_FSTSTEQ);\n \n   (*lang_hooks.decls.pushdecl)\n-    (build_decl (TYPE_DECL, get_identifier (\"__ev64_opaque__\"),\n+    (build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+\t\t get_identifier (\"__ev64_opaque__\"),\n \t\t opaque_V2SI_type_node));\n \n   /* Initialize irregular SPE builtins.  */"}]}