{"sha": "614e5696d730a65998ff5b0373f905795a758dd6", "node_id": "C_kwDOANBUbNoAKDYxNGU1Njk2ZDczMGE2NTk5OGZmNWIwMzczZjkwNTc5NWE3NThkZDY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-27T10:25:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-27T10:59:53Z"}, "message": "libstdc++: Adjust deduction guides for static operator() [PR106651]\n\nAdjust the deduction guides for std::function and std::packaged_task to\nwork with static call operators. This finishes the implementation of\nP1169R4 for C++23.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR c++/106651\n\t* include/bits/std_function.h (__function_guide_t): New alias\n\ttemplate.\n\t[__cpp_static_call_operator] (__function_guide_static_helper):\n\tNew class template.\n\t(function): Use __function_guide_t in deduction guide.\n\t* include/std/future (packaged_task): Use __function_guide_t in\n\tdeduction guide.\n\t* testsuite/20_util/function/cons/deduction_c++23.cc: New test.\n\t* testsuite/30_threads/packaged_task/cons/deduction_c++23.cc:\n\tNew test.", "tree": {"sha": "e9e70d82b615bffeb186e73a7cb88c189ec4432c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e70d82b615bffeb186e73a7cb88c189ec4432c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/614e5696d730a65998ff5b0373f905795a758dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614e5696d730a65998ff5b0373f905795a758dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614e5696d730a65998ff5b0373f905795a758dd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614e5696d730a65998ff5b0373f905795a758dd6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b939a5cc4143908ddda4b85a848c313136ff6e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b939a5cc4143908ddda4b85a848c313136ff6e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b939a5cc4143908ddda4b85a848c313136ff6e0c"}], "stats": {"total": 75, "additions": 70, "deletions": 5}, "files": [{"sha": "f5423a3a5c73f0a8fe9af13639ca92db4d710998", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=614e5696d730a65998ff5b0373f905795a758dd6", "patch": "@@ -697,12 +697,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     >\n     { using type = _Res(_Args...); };\n \n+#if __cpp_static_call_operator >= 202207L && __cpp_concepts >= 202002L\n+  template<typename _StaticCallOp>\n+    struct __function_guide_static_helper\n+    { };\n+\n+  template<typename _Res, bool _Nx, typename... _Args>\n+    struct __function_guide_static_helper<_Res (*) (_Args...) noexcept(_Nx)>\n+    { using type = _Res(_Args...); };\n+\n+  template<typename _Fn, typename _Op>\n+    using __function_guide_t = typename __conditional_t<\n+      requires (_Fn& __f) { (void) __f.operator(); },\n+      __function_guide_static_helper<_Op>,\n+      __function_guide_helper<_Op>>::type;\n+#else\n+  template<typename _Fn, typename _Op>\n+    using __function_guide_t = typename __function_guide_helper<_Op>::type;\n+#endif\n+\n   template<typename _Res, typename... _ArgTypes>\n     function(_Res(*)(_ArgTypes...)) -> function<_Res(_ArgTypes...)>;\n \n-  template<typename _Functor, typename _Signature = typename\n-\t   __function_guide_helper<decltype(&_Functor::operator())>::type>\n-    function(_Functor) -> function<_Signature>;\n+  template<typename _Fn, typename _Signature\n+\t     = __function_guide_t<_Fn, decltype(&_Fn::operator())>>\n+    function(_Fn) -> function<_Signature>;\n #endif\n \n   // [20.7.15.2.6] null pointer comparisons"}, {"sha": "cf08c155a24bfab203ab5a0940cadd7992b6bdcf", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=614e5696d730a65998ff5b0373f905795a758dd6", "patch": "@@ -1649,8 +1649,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res, typename... _ArgTypes>\n     packaged_task(_Res(*)(_ArgTypes...)) -> packaged_task<_Res(_ArgTypes...)>;\n \n-  template<typename _Fun, typename _Signature = typename\n-\t   __function_guide_helper<decltype(&_Fun::operator())>::type>\n+  template<typename _Fun, typename _Signature\n+\t     = __function_guide_t<_Fun, decltype(&_Fun::operator())>>\n     packaged_task(_Fun) -> packaged_task<_Signature>;\n #endif\n "}, {"sha": "17454ea4108912970e6d6a83e101ea996f9f3fbd", "filename": "libstdc++-v3/testsuite/20_util/function/cons/deduction_c++23.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fdeduction_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fdeduction_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fdeduction_c%2B%2B23.cc?ref=614e5696d730a65998ff5b0373f905795a758dd6", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <functional>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test_static_call_operator()\n+{\n+  struct F1 { static long operator()() { return 0; } };\n+  std::function func1 = F1{};\n+  check_type<std::function<long()>>(func1);\n+\n+  struct F2 { static float operator()(char, void*) noexcept { return 0; } };\n+  std::function func2 = F2{};\n+  check_type<std::function<float(char, void*)>>(func2);\n+}"}, {"sha": "e36edfa0359218cf3f4642abc6142b1691f6c139", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/deduction_c++23.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fdeduction_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614e5696d730a65998ff5b0373f905795a758dd6/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fdeduction_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fdeduction_c%2B%2B23.cc?ref=614e5696d730a65998ff5b0373f905795a758dd6", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <future>\n+\n+template<typename T, typename U> struct require_same;\n+template<typename T> struct require_same<T, T> { using type = void; };\n+\n+template<typename T, typename U>\n+  typename require_same<T, U>::type\n+  check_type(U&) { }\n+\n+void\n+test_static_call_operator()\n+{\n+  struct F1 { static long operator()() { return 0; } };\n+  std::packaged_task task1{ F1{} };\n+  check_type<std::packaged_task<long()>>(task1);\n+\n+  struct F2 { static float operator()(char, void*) noexcept { return 0; } };\n+  std::packaged_task task2{ F2{} };\n+  check_type<std::packaged_task<float(char, void*)>>(task2);\n+}"}]}