{"sha": "00268eb38766fd4c114f5fc53b43217eb06d7862", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyNjhlYjM4NzY2ZmQ0YzExNGY1ZmM1M2I0MzIxN2ViMDZkNzg2Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-18T23:54:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-18T23:54:36Z"}, "message": "reload1.c (ior_hard_reg_set): Remove.\n\n\t* reload1.c (ior_hard_reg_set): Remove.\n\t(finish_spills): Use IOR_HARD_REG_SET instead of\n\tior_hard_reg_set.\n\nFrom-SVN: r89258", "tree": {"sha": "948be681242b92008f6c92355f8bf85397ba5dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948be681242b92008f6c92355f8bf85397ba5dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00268eb38766fd4c114f5fc53b43217eb06d7862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00268eb38766fd4c114f5fc53b43217eb06d7862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00268eb38766fd4c114f5fc53b43217eb06d7862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00268eb38766fd4c114f5fc53b43217eb06d7862/comments", "author": null, "committer": null, "parents": [{"sha": "26ebd00db32c097036912a22418c7230333bf5af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ebd00db32c097036912a22418c7230333bf5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ebd00db32c097036912a22418c7230333bf5af"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "e3cc16405afd34bf86d11bc8c4f920ac62b22745", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00268eb38766fd4c114f5fc53b43217eb06d7862/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00268eb38766fd4c114f5fc53b43217eb06d7862/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00268eb38766fd4c114f5fc53b43217eb06d7862", "patch": "@@ -1,3 +1,9 @@\n+2004-10-18  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* reload1.c (ior_hard_reg_set): Remove.\n+\t(finish_spills): Use IOR_HARD_REG_SET instead of\n+\tior_hard_reg_set.\n+\n 2004-10-18  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* sbitmap.h (EXECUTE_IF_SET_IN_SBITMAP): Speed up by shifting"}, {"sha": "106d547a1bdc98dffcd6620b0a4ee918de53cbe9", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00268eb38766fd4c114f5fc53b43217eb06d7862/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00268eb38766fd4c114f5fc53b43217eb06d7862/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=00268eb38766fd4c114f5fc53b43217eb06d7862", "patch": "@@ -390,7 +390,6 @@ static void init_elim_table (void);\n static void update_eliminables (HARD_REG_SET *);\n static void spill_hard_reg (unsigned int, int);\n static int finish_spills (int);\n-static void ior_hard_reg_set (HARD_REG_SET *, HARD_REG_SET *);\n static void scan_paradoxical_subregs (rtx);\n static void count_pseudo (int);\n static void order_regs_for_reload (struct insn_chain *);\n@@ -3534,15 +3533,6 @@ spill_hard_reg (unsigned int regno, int cant_eliminate)\n       SET_REGNO_REG_SET (&spilled_pseudos, i);\n }\n \n-/* I'm getting weird preprocessor errors if I use IOR_HARD_REG_SET\n-   from within EXECUTE_IF_SET_IN_REG_SET.  Hence this awkwardness.  */\n-\n-static void\n-ior_hard_reg_set (HARD_REG_SET *set1, HARD_REG_SET *set2)\n-{\n-  IOR_HARD_REG_SET (*set1, *set2);\n-}\n-\n /* After find_reload_regs has been run for all insn that need reloads,\n    and/or spill_hard_regs was called, this function is used to actually\n    spill pseudo registers and try to reallocate them.  It also sets up the\n@@ -3607,14 +3597,14 @@ finish_spills (int global)\n \t  EXECUTE_IF_SET_IN_REG_SET\n \t    (&chain->live_throughout, FIRST_PSEUDO_REGISTER, i, rsi)\n \t    {\n-\t      ior_hard_reg_set (pseudo_forbidden_regs + i,\n-\t\t\t\t&chain->used_spill_regs);\n+\t      IOR_HARD_REG_SET (pseudo_forbidden_regs[i],\n+\t\t\t\tchain->used_spill_regs);\n \t    }\n \t  EXECUTE_IF_SET_IN_REG_SET\n \t    (&chain->dead_or_set, FIRST_PSEUDO_REGISTER, i, rsi)\n \t    {\n-\t      ior_hard_reg_set (pseudo_forbidden_regs + i,\n-\t\t\t\t&chain->used_spill_regs);\n+\t      IOR_HARD_REG_SET (pseudo_forbidden_regs[i],\n+\t\t\t\tchain->used_spill_regs);\n \t    }\n \t}\n "}]}