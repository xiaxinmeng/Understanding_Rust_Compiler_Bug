{"sha": "7722328eefe4bbcb8cdd9fcd8545698100a56d04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcyMjMyOGVlZmU0YmJjYjhjZGQ5ZmNkODU0NTY5ODEwMGE1NmQwNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-05T00:17:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-05T00:17:47Z"}, "message": "(cse_insn): Always pass result of canon_reg through validate_change\nbefore using it in insn.\n\nFrom-SVN: r2835", "tree": {"sha": "ee8aad4d4bdca7b09d556bf802cb2c1377f132d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8aad4d4bdca7b09d556bf802cb2c1377f132d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7722328eefe4bbcb8cdd9fcd8545698100a56d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7722328eefe4bbcb8cdd9fcd8545698100a56d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7722328eefe4bbcb8cdd9fcd8545698100a56d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7722328eefe4bbcb8cdd9fcd8545698100a56d04/comments", "author": null, "committer": null, "parents": [{"sha": "a10a765e2d0e15c2bb17722b377f7d0c22a36447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10a765e2d0e15c2bb17722b377f7d0c22a36447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10a765e2d0e15c2bb17722b377f7d0c22a36447"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "98b509dbfdbab02887125ca3e953d114d6c25c6f", "filename": "gcc/cse.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7722328eefe4bbcb8cdd9fcd8545698100a56d04/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7722328eefe4bbcb8cdd9fcd8545698100a56d04/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7722328eefe4bbcb8cdd9fcd8545698100a56d04", "patch": "@@ -2326,8 +2326,11 @@ cse_rtx_addr_varies_p (x)\n    with the \"oldest\" equivalent register.\n \n    If INSN is non-zero and we are replacing a pseudo with a hard register\n-   or vice versa, verify that INSN remains valid after we make our\n-   substitution.  */\n+   or vice versa, validate_change is used to ensure that INSN remains valid\n+   after we make our substitution.  The calls are made with IN_GROUP non-zero\n+   so apply_change_group must be called upon the outermost return from this\n+   function (unless INSN is zero).  The result of apply_change_group can\n+   generally be discarded since the changes we are making are optional.  */\n \n static rtx\n canon_reg (x, insn)\n@@ -5584,7 +5587,8 @@ cse_insn (insn, in_libcall_block)\n \t The hard function value register is used only once, to copy to\n \t someplace else, so it isn't worth cse'ing (and on 80386 is unsafe)!\n \t Ensure we invalidate the destination register.  On the 80386 no\n-\t other code would invalidate it since it is a fixed_reg.  */\n+\t other code would invalidate it since it is a fixed_reg.\n+\t We need not check the return of apply_change_group; see canon_reg. */\n \n       else if (GET_CODE (SET_SRC (x)) == CALL)\n \t{\n@@ -5627,7 +5631,8 @@ cse_insn (insn, in_libcall_block)\n \t  register rtx y = XVECEXP (x, 0, i);\n \t  if (GET_CODE (y) == SET)\n \t    {\n-\t      /* As above, we ignore unconditional jumps and call-insns. */\n+\t      /* As above, we ignore unconditional jumps and call-insns and\n+\t\t ignore the result of apply_change_group.  */\n \t      if (GET_CODE (SET_SRC (y)) == CALL)\n \t\t{\n \t\t  canon_reg (SET_SRC (y), insn);\n@@ -5659,6 +5664,8 @@ cse_insn (insn, in_libcall_block)\n \t    canon_reg (y, NULL_RTX);\n \t  else if (GET_CODE (y) == CALL)\n \t    {\n+\t      /* The result of apply_change_group can be ignored; see\n+\t\t canon_reg.  */\n \t      canon_reg (y, insn);\n \t      apply_change_group ();\n \t      fold_rtx (y, insn);\n@@ -5681,6 +5688,7 @@ cse_insn (insn, in_libcall_block)\n     canon_reg (XEXP (x, 0), NULL_RTX);\n   else if (GET_CODE (x) == CALL)\n     {\n+      /* The result of apply_change_group can be ignored; see canon_reg.  */\n       canon_reg (x, insn);\n       apply_change_group ();\n       fold_rtx (x, insn);\n@@ -5740,7 +5748,9 @@ cse_insn (insn, in_libcall_block)\n      group and see if they all work.  Note that this will cause some\n      canonicalizations that would have worked individually not to be applied\n      because some other canonicalization didn't work, but this should not\n-     occur often.  */\n+     occur often. \n+\n+     The result of apply_change_group can be ignored; see canon_reg.  */\n \n   apply_change_group ();\n \n@@ -6201,7 +6211,12 @@ cse_insn (insn, in_libcall_block)\n \t  /* Look for a substitution that makes a valid insn.  */\n           else if (validate_change (insn, &SET_SRC (sets[i].rtl), trial, 0))\n \t    {\n-\t      SET_SRC (sets[i].rtl) = canon_reg (SET_SRC (sets[i].rtl), insn);\n+\t      /* The result of apply_change_group can be ignored; see\n+\t\t canon_reg.  */\n+\n+\t      validate_change (insn, &SET_SRC (sets[i].rtl),\n+\t\t\t       canon_reg (SET_SRC (sets[i].rtl), insn),\n+\t\t\t       1);\n \t      apply_change_group ();\n \t      break;\n \t    }"}]}