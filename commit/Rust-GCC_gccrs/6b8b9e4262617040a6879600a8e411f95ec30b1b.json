{"sha": "6b8b9e4262617040a6879600a8e411f95ec30b1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4YjllNDI2MjYxNzA0MGE2ODc5NjAwYThlNDExZjk1ZWMzMGIxYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-26T13:23:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-26T13:23:04Z"}, "message": "re PR c/41163 (verify_gimple fails)\n\n2009-08-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/41163\n\t* gimplify.c (gimplify_addr_expr): Canonicalize ADDR_EXPRs if\n\tthe types to not match.\n\t* tree-cfg.c (verify_gimple_assign_single): Adjust ADDR_EXPR\n\tverification.\n\t* tree-ssa.c (useless_type_conversion_p): Conversions to\n\tpointers to unprototyped functions are useless.\n\n\t* gcc.c-torture/compile/pr41163.c: New testcase.\n\t* gcc.dg/pr35899.c: Adjust.\n\nFrom-SVN: r151122", "tree": {"sha": "0a7c596dcfad5b0a80e1635e57a2911b24a32034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a7c596dcfad5b0a80e1635e57a2911b24a32034"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b8b9e4262617040a6879600a8e411f95ec30b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8b9e4262617040a6879600a8e411f95ec30b1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8b9e4262617040a6879600a8e411f95ec30b1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8b9e4262617040a6879600a8e411f95ec30b1b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c89ef5a3f267a25ffab1735adc754d43c486e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c89ef5a3f267a25ffab1735adc754d43c486e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c89ef5a3f267a25ffab1735adc754d43c486e0f"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "f50b14c18ade886405e4d00f0e522af17cdb9f8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b8b9e4262617040a6879600a8e411f95ec30b1b", "patch": "@@ -1,3 +1,13 @@\n+2009-08-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41163\n+\t* gimplify.c (gimplify_addr_expr): Canonicalize ADDR_EXPRs if\n+\tthe types to not match.\n+\t* tree-cfg.c (verify_gimple_assign_single): Adjust ADDR_EXPR\n+\tverification.\n+\t* tree-ssa.c (useless_type_conversion_p): Conversions to\n+\tpointers to unprototyped functions are useless.\n+\n 2009-08-26  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (create_variable_info_for): Remove"}, {"sha": "7f1dc4ae94bd861215bea72cdc54c2689d794b2b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6b8b9e4262617040a6879600a8e411f95ec30b1b", "patch": "@@ -4725,10 +4725,22 @@ gimplify_addr_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       if (TREE_CODE (op0) == INDIRECT_REF)\n \tgoto do_indirect_ref;\n \n+      mark_addressable (TREE_OPERAND (expr, 0));\n+\n+      /* The FEs may end up building ADDR_EXPRs early on a decl with\n+\t an incomplete type.  Re-build ADDR_EXPRs in canonical form\n+\t here.  */\n+      if (!types_compatible_p (TREE_TYPE (op0), TREE_TYPE (TREE_TYPE (expr))))\n+\t*expr_p = build_fold_addr_expr (op0);\n+\n       /* Make sure TREE_CONSTANT and TREE_SIDE_EFFECTS are set properly.  */\n-      recompute_tree_invariant_for_addr_expr (expr);\n+      recompute_tree_invariant_for_addr_expr (*expr_p);\n+\n+      /* If we re-built the ADDR_EXPR add a conversion to the original type\n+         if required.  */\n+      if (!useless_type_conversion_p (TREE_TYPE (expr), TREE_TYPE (*expr_p)))\n+\t*expr_p = fold_convert (TREE_TYPE (expr), *expr_p);\n \n-      mark_addressable (TREE_OPERAND (expr, 0));\n       break;\n     }\n "}, {"sha": "9ed0d6dde851dfcbf86ac82c425e4064ad51d4a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b8b9e4262617040a6879600a8e411f95ec30b1b", "patch": "@@ -1,3 +1,9 @@\n+2009-08-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41163\n+\t* gcc.c-torture/compile/pr41163.c: New testcase.\n+\t* gcc.dg/pr35899.c: Adjust.\n+\n 2009-08-26  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/restrict-4.c: New testcase."}, {"sha": "c224837837695d12945735cd774e4a11a41d0c9c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr41163.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41163.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41163.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41163.c?ref=6b8b9e4262617040a6879600a8e411f95ec30b1b", "patch": "@@ -0,0 +1,10 @@\n+struct option {\n+    void *value;\n+};\n+void parse_options (struct option *);\n+void cmd_grep(void)\n+{\n+  struct option options[] = { { &options } };\n+  parse_options(options);\n+}\n+"}, {"sha": "fca3a3d8621707259d2117288339e31b6cd8a31c", "filename": "gcc/testsuite/gcc.dg/pr35899.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35899.c?ref=6b8b9e4262617040a6879600a8e411f95ec30b1b", "patch": "@@ -5,7 +5,7 @@\n int\n foo (void)\n {\n-  int a = bar ();\t/* { dg-error \"returning 'void'\" } */\n+  int a = bar ();\n   return a;\n }\n "}, {"sha": "639c4ec710cf46ff62eba769346709718a3e67d6", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6b8b9e4262617040a6879600a8e411f95ec30b1b", "patch": "@@ -3889,12 +3889,13 @@ verify_gimple_assign_single (gimple stmt)\n \t    return true;\n \t  }\n \n-\tif (!one_pointer_to_useless_type_conversion_p (lhs_type,\n-\t\t\t\t\t\t       TREE_TYPE (op)))\n+\tif (!types_compatible_p (TREE_TYPE (op), TREE_TYPE (TREE_TYPE (rhs1)))\n+\t    && !one_pointer_to_useless_type_conversion_p (TREE_TYPE (rhs1),\n+\t\t\t\t\t\t\t  TREE_TYPE (op)))\n \t  {\n \t    error (\"type mismatch in address expression\");\n-\t    debug_generic_stmt (lhs_type);\n-\t    debug_generic_stmt (TYPE_POINTER_TO (TREE_TYPE (op)));\n+\t    debug_generic_stmt (TREE_TYPE (rhs1));\n+\t    debug_generic_stmt (TREE_TYPE (op));\n \t    return true;\n \t  }\n "}, {"sha": "51b1689912115fb07297b28cc91ca70461ff36c7", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9e4262617040a6879600a8e411f95ec30b1b/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=6b8b9e4262617040a6879600a8e411f95ec30b1b", "patch": "@@ -875,13 +875,21 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n       && POINTER_TYPE_P (outer_type))\n     {\n       /* If the outer type is (void *) or a pointer to an incomplete\n-\t record type, then the conversion is not necessary.  */\n+\t record type or a pointer to an unprototyped function,\n+\t then the conversion is not necessary.  */\n       if (VOID_TYPE_P (TREE_TYPE (outer_type))\n \t  || (AGGREGATE_TYPE_P (TREE_TYPE (outer_type))\n \t      && TREE_CODE (TREE_TYPE (outer_type)) != ARRAY_TYPE\n \t      && (TREE_CODE (TREE_TYPE (outer_type))\n \t\t  == TREE_CODE (TREE_TYPE (inner_type)))\n-\t      && !COMPLETE_TYPE_P (TREE_TYPE (outer_type))))\n+\t      && !COMPLETE_TYPE_P (TREE_TYPE (outer_type)))\n+\t  || ((TREE_CODE (TREE_TYPE (outer_type)) == FUNCTION_TYPE\n+\t       || TREE_CODE (TREE_TYPE (outer_type)) == METHOD_TYPE)\n+\t      && (TREE_CODE (TREE_TYPE (outer_type))\n+\t\t  == TREE_CODE (TREE_TYPE (inner_type)))\n+\t      && !TYPE_ARG_TYPES (TREE_TYPE (outer_type))\n+\t      && useless_type_conversion_p (TREE_TYPE (TREE_TYPE (outer_type)),\n+\t\t\t\t\t    TREE_TYPE (TREE_TYPE (inner_type)))))\n \treturn true;\n \n       /* Do not lose casts to restrict qualified pointers.  */"}]}