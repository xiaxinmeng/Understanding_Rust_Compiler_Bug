{"sha": "7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U5Yjk2OTc0YWJlNWE3NGJlYWFiMmY5MGQzYjQ3YmI1MmY5N2RiMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "r.sandiford@uk.ibm.com", "date": "2010-07-10T08:35:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-10T08:35:58Z"}, "message": "tree.h (DECL_REPLACEABLE_P): Strengthen check for weak symbols.\n\ngcc/\n\t* tree.h (DECL_REPLACEABLE_P): Strengthen check for weak symbols.\n\ngcc/testsuite/\n\t* gcc.dg/attr-weak-hidden-1.c, gcc.dg/attr-weak-hidden-1a.c: New test.\n\nFrom-SVN: r162031", "tree": {"sha": "47fefa28d0e5dd7ef562214409a73540f77eb359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47fefa28d0e5dd7ef562214409a73540f77eb359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/comments", "author": null, "committer": null, "parents": [{"sha": "058bfe530068df2d3ccc4131a1837b44a83acba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058bfe530068df2d3ccc4131a1837b44a83acba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058bfe530068df2d3ccc4131a1837b44a83acba4"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "834937315b74ca7c52b37d6664191ca49137f1d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "patch": "@@ -1,3 +1,7 @@\n+2010-07-10  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* tree.h (DECL_REPLACEABLE_P): Strengthen check for weak symbols.\n+\n 2010-07-10  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR objc/44140"}, {"sha": "f18f7b72a28a9ecf430220c08e8316c9eef87ef6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "patch": "@@ -1,3 +1,7 @@\n+2010-07-10  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* gcc.dg/attr-weak-hidden-1.c, gcc.dg/attr-weak-hidden-1a.c: New test.\n+\n 2010-07-10  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR objc/44140"}, {"sha": "968bab7ad34ac989a5bdeddfef2e872a26017603", "filename": "gcc/testsuite/gcc.dg/attr-weak-hidden-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weak-hidden-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weak-hidden-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weak-hidden-1.c?ref=7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-require-weak \"\" } */\n+/* { dg-require-visibility \"\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-sources \"attr-weak-hidden-1a.c\" } */\n+int __attribute__((weak, visibility(\"hidden\"))) foo (void) { return 0; }"}, {"sha": "b04d8d251ed85799bf655454d0a6fd094c9e95fb", "filename": "gcc/testsuite/gcc.dg/attr-weak-hidden-1a.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weak-hidden-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weak-hidden-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-weak-hidden-1a.c?ref=7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "patch": "@@ -0,0 +1,9 @@\n+void abort (void);\n+int __attribute__((weak, visibility(\"hidden\"))) foo (void) { return 1; }\n+int\n+main (void)\n+{\n+  if (foo ())\n+    abort ();\n+  return 0;\n+}"}, {"sha": "e749d696ec4fa9f5cb277dd99059df8fa50adf36", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e9b96974abe5a74beaab2f90d3b47bb52f97db1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7e9b96974abe5a74beaab2f90d3b47bb52f97db1", "patch": "@@ -3012,6 +3012,11 @@ struct GTY(()) tree_parm_decl {\n    not be treated as replaceable so that use of C++ template\n    instantiations is not penalized.\n \n+   In other respects, the condition is usually equivalent to whether\n+   the function binds to the current module (shared library or executable).\n+   However, weak functions can always be overridden by earlier TUs\n+   in the same module, even if they bind locally to that module.\n+\n    For example, DECL_REPLACEABLE is used to determine whether or not a\n    function (including a template instantiation) which is not\n    explicitly declared \"inline\" can be inlined.  If the function is\n@@ -3020,7 +3025,7 @@ struct GTY(()) tree_parm_decl {\n    function that is not DECL_REPLACEABLE can be inlined, since all\n    versions of the function will be functionally identical.  */\n #define DECL_REPLACEABLE_P(NODE) \\\n-  (!DECL_COMDAT (NODE) && !targetm.binds_local_p (NODE))\n+  (!DECL_COMDAT (NODE) && (DECL_WEAK (NODE) || !targetm.binds_local_p (NODE)))\n \n /* The name of the object as the assembler will see it (but before any\n    translations made by ASM_OUTPUT_LABELREF).  Often this is the same"}]}