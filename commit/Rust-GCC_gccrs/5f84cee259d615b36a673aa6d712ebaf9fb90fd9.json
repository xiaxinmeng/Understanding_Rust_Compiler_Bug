{"sha": "5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4NGNlZTI1OWQ2MTViMzZhNjczYWE2ZDcxMmViYWY5ZmI5MGZkOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-09-21T17:52:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-09-21T17:52:47Z"}, "message": "Add _FloatN, _FloatNx tests for __builtin_fpclassify.\n\nThis patch adds tests for _FloatN and _FloatNx arguments to the\n__builtin_fpclassify type-generic built-in function, omitted from the\noriginal tests for type-generic functions on these types.\n\nTested for x86_64-pc-linux-gnu; all the supported new tests pass.\n\n\t* gcc.dg/torture/float128-tg-3.c, gcc.dg/torture/float128x-tg-3.c,\n\tgcc.dg/torture/float16-tg-3.c, gcc.dg/torture/float32-tg-3.c,\n\tgcc.dg/torture/float32x-tg-3.c, gcc.dg/torture/float64-tg-3.c,\n\tgcc.dg/torture/float64x-tg-3.c, gcc.dg/torture/floatn-tg-3.h: New\n\ttests.\n\nFrom-SVN: r240328", "tree": {"sha": "3d573af5255cfad98a1ba8a9dc2513466fd3d5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d573af5255cfad98a1ba8a9dc2513466fd3d5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e15e303af1184973bbe35547602567303fa6fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e15e303af1184973bbe35547602567303fa6fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e15e303af1184973bbe35547602567303fa6fe"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "28e974b272c7d3cc81aca3f75e10af0d32a595b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -1,3 +1,11 @@\n+2016-09-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/float128-tg-3.c, gcc.dg/torture/float128x-tg-3.c,\n+\tgcc.dg/torture/float16-tg-3.c, gcc.dg/torture/float32-tg-3.c,\n+\tgcc.dg/torture/float32x-tg-3.c, gcc.dg/torture/float64-tg-3.c,\n+\tgcc.dg/torture/float64x-tg-3.c, gcc.dg/torture/floatn-tg-3.h: New\n+\ttests.\n+\n 2016-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.c-torture/unsorted/dump-noaddr.x: Remove debug statements."}, {"sha": "c358187c613b62318e2411e8df6ba78bf8352f00", "filename": "gcc/testsuite/gcc.dg/torture/float128-tg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-tg-3.c?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float128 type-generic built-in functions: __builtin_fpclassify.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float128_runtime } */\n+\n+#define WIDTH 128\n+#define EXT 0\n+#include \"floatn-tg-3.h\""}, {"sha": "afb42d30bea235a2fbde7bedc09a94f8307ed85f", "filename": "gcc/testsuite/gcc.dg/torture/float128x-tg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128x-tg-3.c?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float128x type-generic built-in functions: __builtin_fpclassify.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128x } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float128x_runtime } */\n+\n+#define WIDTH 128\n+#define EXT 1\n+#include \"floatn-tg-3.h\""}, {"sha": "9587ec1658526f6f9292b804a9ebeddded1dda7d", "filename": "gcc/testsuite/gcc.dg/torture/float16-tg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat16-tg-3.c?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float16 type-generic built-in functions: __builtin_fpclassify.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float16 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float16_runtime } */\n+\n+#define WIDTH 16\n+#define EXT 0\n+#include \"floatn-tg-3.h\""}, {"sha": "b07c07afce17e86f420dcc5e33f610f885dd1e00", "filename": "gcc/testsuite/gcc.dg/torture/float32-tg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32-tg-3.c?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float32 type-generic built-in functions: __builtin_fpclassify.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float32_runtime } */\n+\n+#define WIDTH 32\n+#define EXT 0\n+#include \"floatn-tg-3.h\""}, {"sha": "9f9f982be3ecb76399b9a695143bcf107953d393", "filename": "gcc/testsuite/gcc.dg/torture/float32x-tg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat32x-tg-3.c?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float32x type-generic built-in functions: __builtin_fpclassify.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32x } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float32x_runtime } */\n+\n+#define WIDTH 32\n+#define EXT 1\n+#include \"floatn-tg-3.h\""}, {"sha": "a83e781ca1dacaa27b46d63c293ba9a2100a01ff", "filename": "gcc/testsuite/gcc.dg/torture/float64-tg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64-tg-3.c?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float64 type-generic built-in functions: __builtin_fpclassify.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float64_runtime } */\n+\n+#define WIDTH 64\n+#define EXT 0\n+#include \"floatn-tg-3.h\""}, {"sha": "195c4fd094c7e399a4830d0feb07fd0bd6f5451e", "filename": "gcc/testsuite/gcc.dg/torture/float64x-tg-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat64x-tg-3.c?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,10 @@\n+/* Test _Float64x type-generic built-in functions: __builtin_fpclassify.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64x } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target float64x_runtime } */\n+\n+#define WIDTH 64\n+#define EXT 1\n+#include \"floatn-tg-3.h\""}, {"sha": "322e957e83eaa82942908d48d509e10d12ef0ee7", "filename": "gcc/testsuite/gcc.dg/torture/floatn-tg-3.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-tg-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f84cee259d615b36a673aa6d712ebaf9fb90fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-tg-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloatn-tg-3.h?ref=5f84cee259d615b36a673aa6d712ebaf9fb90fd9", "patch": "@@ -0,0 +1,79 @@\n+/* Tests for _FloatN / _FloatNx types: compile and execution tests for\n+   type-generic built-in functions: __builtin_fpclassify.  Before\n+   including this file, define WIDTH as the value N; define EXT to 1\n+   for _FloatNx and 0 for _FloatN.  */\n+\n+#define __STDC_WANT_IEC_60559_TYPES_EXT__\n+#include <float.h>\n+\n+#define CONCATX(X, Y) X ## Y\n+#define CONCAT(X, Y) CONCATX (X, Y)\n+#define CONCAT3(X, Y, Z) CONCAT (CONCAT (X, Y), Z)\n+#define CONCAT4(W, X, Y, Z) CONCAT (CONCAT (CONCAT (W, X), Y), Z)\n+\n+#if EXT\n+# define TYPE CONCAT3 (_Float, WIDTH, x)\n+# define CST(C) CONCAT4 (C, f, WIDTH, x)\n+# define MAX CONCAT3 (FLT, WIDTH, X_MAX)\n+# define MIN CONCAT3 (FLT, WIDTH, X_MIN)\n+# define TRUE_MIN CONCAT3 (FLT, WIDTH, X_TRUE_MIN)\n+#else\n+# define TYPE CONCAT (_Float, WIDTH)\n+# define CST(C) CONCAT3 (C, f, WIDTH)\n+# define MAX CONCAT3 (FLT, WIDTH, _MAX)\n+# define MIN CONCAT3 (FLT, WIDTH, _MIN)\n+# define TRUE_MIN CONCAT3 (FLT, WIDTH, _TRUE_MIN)\n+#endif\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+#define FP_NAN 0\n+#define FP_INFINITE 1\n+#define FP_ZERO 2\n+#define FP_SUBNORMAL 3\n+#define FP_NORMAL 4\n+\n+#define fpclassify(X) __builtin_fpclassify (FP_NAN, FP_INFINITE,     \\\n+\t\t\t\t\t    FP_NORMAL, FP_SUBNORMAL, \\\n+\t\t\t\t\t    FP_ZERO, (X))\n+\n+volatile TYPE inf = __builtin_inf (), nanval = __builtin_nan (\"\");\n+volatile TYPE neginf = -__builtin_inf (), negnanval = -__builtin_nan (\"\");\n+volatile TYPE zero = CST (0.0), negzero = -CST (0.0), one = CST (1.0);\n+volatile TYPE max = MAX, negmax = -MAX, min = MIN, negmin = -MIN;\n+volatile TYPE true_min = TRUE_MIN, negtrue_min = -TRUE_MIN;\n+\n+/* Allow for any optimizations of comparisons involving the result of\n+   fpclassify by also testing case where result is stored in a\n+   volatile variable and so the comparison cannot be optimized.  */\n+#define CHECK_FPCLASSIFY(VAL, EXP)\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      volatile int c;\t\t\t\t\\\n+      if (fpclassify (VAL) != (EXP))\t\t\\\n+\tabort ();\t\t\t\t\\\n+      c = fpclassify (VAL);\t\t\t\\\n+      if (c != (EXP))\t\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+int\n+main (void)\n+{\n+  CHECK_FPCLASSIFY (inf, FP_INFINITE);\n+  CHECK_FPCLASSIFY (neginf, FP_INFINITE);\n+  CHECK_FPCLASSIFY (nanval, FP_NAN);\n+  CHECK_FPCLASSIFY (negnanval, FP_NAN);\n+  CHECK_FPCLASSIFY (zero, FP_ZERO);\n+  CHECK_FPCLASSIFY (negzero, FP_ZERO);\n+  CHECK_FPCLASSIFY (one, FP_NORMAL);\n+  CHECK_FPCLASSIFY (max, FP_NORMAL);\n+  CHECK_FPCLASSIFY (negmax, FP_NORMAL);\n+  CHECK_FPCLASSIFY (min, FP_NORMAL);\n+  CHECK_FPCLASSIFY (negmin, FP_NORMAL);\n+  CHECK_FPCLASSIFY (true_min, FP_SUBNORMAL);\n+  CHECK_FPCLASSIFY (negtrue_min, FP_SUBNORMAL);\n+  exit (0);\n+}"}]}