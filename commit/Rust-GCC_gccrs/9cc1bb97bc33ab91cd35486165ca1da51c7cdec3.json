{"sha": "9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjMWJiOTdiYzMzYWI5MWNkMzU0ODYxNjVjYTFkYTUxYzdjZGVjMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-05T00:02:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-05T00:02:15Z"}, "message": "libgo: Use MAP_FIXED if necessary to grab arena.\n\nFrom Rainer Orth.\n\n\tPR go/48240\n\t* configure.ac: Check for mincore.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* runtime/mem.c: Include unistd.h.\n\t(addrspace_free): New function.\n\t(runtime_SysMap): Retry 64-bit runtime_mmap with MAP_FIXED.\n\nFrom-SVN: r171961", "tree": {"sha": "7e1cbd0df7cdc84ec806fd27d00a85113d7564c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1cbd0df7cdc84ec806fd27d00a85113d7564c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/comments", "author": null, "committer": null, "parents": [{"sha": "06ec98415ab559f97fe90f661d91c4f9427db42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ec98415ab559f97fe90f661d91c4f9427db42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ec98415ab559f97fe90f661d91c4f9427db42b"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "2976e979a360025a2e4f8f9bc2519ed765522a16", "filename": "libgo/config.h.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "patch": "@@ -15,6 +15,9 @@\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n+/* Define to 1 if you have the `mincore' function. */\n+#undef HAVE_MINCORE\n+\n /* Define to 1 if the system has the type `off64_t'. */\n #undef HAVE_OFF64_T\n \n@@ -30,6 +33,9 @@\n /* Define to 1 if you have the <stdlib.h> header file. */\n #undef HAVE_STDLIB_H\n \n+/* Define to 1 if you have the `strerror_r' function. */\n+#undef HAVE_STRERROR_R\n+\n /* Define to 1 if you have the <strings.h> header file. */\n #undef HAVE_STRINGS_H\n \n@@ -59,6 +65,9 @@\n /* Define to 1 if you have the <sys/ptrace.h> header file. */\n #undef HAVE_SYS_PTRACE_H\n \n+/* Define to 1 if you have the <sys/select.h> header file. */\n+#undef HAVE_SYS_SELECT_H\n+\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #undef HAVE_SYS_STAT_H\n \n@@ -77,6 +86,9 @@\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n+/* Define to 1 if you have the `wait4' function. */\n+#undef HAVE_WAIT4\n+\n /* Define if the C++ compiler is configured for setjmp/longjmp exceptions. */\n #undef LIBGO_SJLJ_EXCEPTIONS\n "}, {"sha": "611103fc4b51974fe42a1a375ac88a62fcc27f94", "filename": "libgo/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "patch": "@@ -14266,7 +14266,7 @@ else\n fi\n \n \n-for ac_func in srandom random strerror_r strsignal wait4\n+for ac_func in srandom random strerror_r strsignal wait4 mincore\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\""}, {"sha": "e772c2a12def2ea03b6c7d815e75b3a404ce6ea6", "filename": "libgo/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "patch": "@@ -426,7 +426,7 @@ esac\n AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h sys/select.h)\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n \n-AC_CHECK_FUNCS(srandom random strerror_r strsignal wait4)\n+AC_CHECK_FUNCS(srandom random strerror_r strsignal wait4 mincore)\n AM_CONDITIONAL(HAVE_STRERROR_R, test \"$ac_cv_func_strerror_r\" = yes)\n AM_CONDITIONAL(HAVE_WAIT4, test \"$ac_cv_func_wait4\" = yes)\n "}, {"sha": "90c2c61aff97608c703de97694614fcee90e2517", "filename": "libgo/runtime/mem.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fruntime%2Fmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc1bb97bc33ab91cd35486165ca1da51c7cdec3/libgo%2Fruntime%2Fmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmem.c?ref=9cc1bb97bc33ab91cd35486165ca1da51c7cdec3", "patch": "@@ -1,4 +1,5 @@\n #include <errno.h>\n+#include <unistd.h>\n \n #include \"runtime.h\"\n #include \"malloc.h\"\n@@ -16,6 +17,23 @@\n static int dev_zero = -1;\n #endif\n \n+static _Bool\n+addrspace_free(void *v __attribute__ ((unused)), uintptr n __attribute__ ((unused)))\n+{\n+#ifdef HAVE_MINCORE\n+\tsize_t page_size = getpagesize();\n+\tsize_t off;\n+\tchar one_byte;\n+\n+\terrno = 0;\n+\tfor(off = 0; off < n; off += page_size)\n+\t\tif(mincore((char *)v + off, page_size, (void *)&one_byte) != -1\n+\t\t   || errno != ENOMEM)\n+\t\t\treturn 0;\n+#endif\n+\treturn 1;\n+}\n+\n void*\n runtime_SysAlloc(uintptr n)\n {\n@@ -109,6 +127,11 @@ runtime_SysMap(void *v, uintptr n)\n \t// On 64-bit, we don't actually have v reserved, so tread carefully.\n \tif(sizeof(void*) == 8) {\n \t\tp = runtime_mmap(v, n, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANON|MAP_PRIVATE, fd, 0);\n+\t\tif(p != v && addrspace_free(v, n)) {\n+\t\t\t// On some systems, mmap ignores v without\n+\t\t\t// MAP_FIXED, so retry if the address space is free.\n+\t\t\tp = runtime_mmap(v, n, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_ANON|MAP_FIXED|MAP_PRIVATE, fd, 0);\n+\t\t}\n \t\tif(p != v) {\n \t\t\truntime_printf(\"runtime: address space conflict: map(%p) = %p\\n\", v, p);\n \t\t\truntime_throw(\"runtime: address space conflict\");"}]}