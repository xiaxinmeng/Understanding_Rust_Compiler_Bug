{"sha": "cad003bacf9bf8306fdeb296c018b252fdd91903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FkMDAzYmFjZjliZjgzMDZmZGViMjk2YzAxOGIyNTJmZGQ5MTkwMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T16:31:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T16:31:30Z"}, "message": "config/alpha/alpha.c: Use rtx_insn\n\ngcc/\n\t* config/alpha/alpha.c (alpha_emit_set_const): Strengthen local\n\t\"insn\" from rtx to rtx_insn *.\n\t(alpha_gp_save_rtx): Likewise for local \"seq\".\n\t(alpha_instantiate_decls): Likewise for local \"top\".\n\t(get_some_local_dynamic_name): Likewise for local \"insn\".\n\t(alpha_does_function_need_gp): Likewise.\n\t(set_frame_related_p): Likewise for return type and for locals\n\t\"seq\" and \"insn\".\n\t(emit_frame_store_1): Likewise for local \"insn\".\n\t(alpha_expand_prologue): Likewise for locals \"insn\", \"seq\".\n\t(alpha_end_function): Likewise for local \"insn\".\n\t(alpha_output_mi_thunk_osf): Likewise.\n\t(alphaev4_insn_pipe): Likewise for param \"insn\".\n\t(alphaev5_insn_pipe): Likewise.\n\t(alphaev4_next_group): Likewise for return type and param 1\n\t\"insn\".\n\t(alphaev5_next_group): Likewise.\n\t(alpha_align_insns_1): Likewise for return type and param 1 of\n\tcallback param \"next_group\", and for locals \"i\", \"next\", \"prev\",\n\t\"where\", \"where2\", \"insn\".\n\nFrom-SVN: r214435", "tree": {"sha": "87c678f9d3ba0cb14b7cd8712e66671a6ef93ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87c678f9d3ba0cb14b7cd8712e66671a6ef93ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cad003bacf9bf8306fdeb296c018b252fdd91903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad003bacf9bf8306fdeb296c018b252fdd91903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad003bacf9bf8306fdeb296c018b252fdd91903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad003bacf9bf8306fdeb296c018b252fdd91903/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adcde84f0e085a0dbf08d15cc1fe5751062a19a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcde84f0e085a0dbf08d15cc1fe5751062a19a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcde84f0e085a0dbf08d15cc1fe5751062a19a4"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "6856f0afde87b098613d50ab86c784e512a7862e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad003bacf9bf8306fdeb296c018b252fdd91903/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad003bacf9bf8306fdeb296c018b252fdd91903/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cad003bacf9bf8306fdeb296c018b252fdd91903", "patch": "@@ -1,3 +1,26 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_set_const): Strengthen local\n+\t\"insn\" from rtx to rtx_insn *.\n+\t(alpha_gp_save_rtx): Likewise for local \"seq\".\n+\t(alpha_instantiate_decls): Likewise for local \"top\".\n+\t(get_some_local_dynamic_name): Likewise for local \"insn\".\n+\t(alpha_does_function_need_gp): Likewise.\n+\t(set_frame_related_p): Likewise for return type and for locals\n+\t\"seq\" and \"insn\".\n+\t(emit_frame_store_1): Likewise for local \"insn\".\n+\t(alpha_expand_prologue): Likewise for locals \"insn\", \"seq\".\n+\t(alpha_end_function): Likewise for local \"insn\".\n+\t(alpha_output_mi_thunk_osf): Likewise.\n+\t(alphaev4_insn_pipe): Likewise for param \"insn\".\n+\t(alphaev5_insn_pipe): Likewise.\n+\t(alphaev4_next_group): Likewise for return type and param 1\n+\t\"insn\".\n+\t(alphaev5_next_group): Likewise.\n+\t(alpha_align_insns_1): Likewise for return type and param 1 of\n+\tcallback param \"next_group\", and for locals \"i\", \"next\", \"prev\",\n+\t\"where\", \"where2\", \"insn\".\n+\n 2014-08-25  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* tree-nested.c (finalize_nesting_tree_1): Initialize temporary earlier"}, {"sha": "dec604e36a46f02a8493c62e62d02986f6143ff4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad003bacf9bf8306fdeb296c018b252fdd91903/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad003bacf9bf8306fdeb296c018b252fdd91903/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=cad003bacf9bf8306fdeb296c018b252fdd91903", "patch": "@@ -2009,7 +2009,8 @@ alpha_emit_set_const (rtx target, enum machine_mode mode,\n       result = alpha_emit_set_const_1 (target, mode, c, i, no_output);\n       if (result)\n \t{\n-\t  rtx insn, set;\n+\t  rtx_insn *insn;\n+\t  rtx set;\n \n \t  if (no_output)\n \t    return result;\n@@ -4955,7 +4956,8 @@ alpha_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n rtx\n alpha_gp_save_rtx (void)\n {\n-  rtx seq, m = cfun->machine->gp_save_rtx;\n+  rtx_insn *seq;\n+  rtx m = cfun->machine->gp_save_rtx;\n \n   if (m == NULL)\n     {\n@@ -4993,7 +4995,7 @@ alpha_instantiate_decls (void)\n static int\n alpha_ra_ever_killed (void)\n {\n-  rtx top;\n+  rtx_insn *top;\n \n   if (!has_hard_reg_initial_val (Pmode, REG_RA))\n     return (int)df_regs_ever_live_p (REG_RA);\n@@ -5139,7 +5141,7 @@ get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n static const char *\n get_some_local_dynamic_name (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (cfun->machine->some_ld_name)\n     return cfun->machine->some_ld_name;\n@@ -7608,7 +7610,7 @@ alpha_find_lo_sum_using_gp (rtx insn)\n static int\n alpha_does_function_need_gp (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* The GP being variable is an OSF abi thing.  */\n   if (! TARGET_ABI_OSF)\n@@ -7651,16 +7653,16 @@ alpha_does_function_need_gp (void)\n /* Helper function to set RTX_FRAME_RELATED_P on instructions, including\n    sequences.  */\n \n-static rtx\n+static rtx_insn *\n set_frame_related_p (void)\n {\n-  rtx seq = get_insns ();\n-  rtx insn;\n+  rtx_insn *seq = get_insns ();\n+  rtx_insn *insn;\n \n   end_sequence ();\n \n   if (!seq)\n-    return NULL_RTX;\n+    return NULL;\n \n   if (INSN_P (seq))\n     {\n@@ -7692,7 +7694,8 @@ static void\n emit_frame_store_1 (rtx value, rtx base_reg, HOST_WIDE_INT frame_bias,\n \t\t    HOST_WIDE_INT base_ofs, rtx frame_reg)\n {\n-  rtx addr, mem, insn;\n+  rtx addr, mem;\n+  rtx_insn *insn;\n \n   addr = plus_constant (Pmode, base_reg, base_ofs);\n   mem = gen_frame_mem (DImode, addr);\n@@ -7953,8 +7956,9 @@ alpha_expand_prologue (void)\n       /* Register frame procedures save the fp.  */\n       if (alpha_procedure_type == PT_REGISTER)\n \t{\n-\t  rtx insn = emit_move_insn (gen_rtx_REG (DImode, vms_save_fp_regno),\n-\t\t\t\t     hard_frame_pointer_rtx);\n+\t  rtx_insn *insn =\n+\t    emit_move_insn (gen_rtx_REG (DImode, vms_save_fp_regno),\n+\t\t\t    hard_frame_pointer_rtx);\n \t  add_reg_note (insn, REG_CFA_REGISTER, NULL);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n@@ -7970,7 +7974,7 @@ alpha_expand_prologue (void)\n       /* If we have to allocate space for outgoing args, do it now.  */\n       if (crtl->outgoing_args_size != 0)\n \t{\n-\t  rtx seq\n+\t  rtx_insn *seq\n \t    = emit_move_insn (stack_pointer_rtx,\n \t\t\t      plus_constant\n \t\t\t      (Pmode, hard_frame_pointer_rtx,\n@@ -8410,7 +8414,7 @@ alpha_expand_epilogue (void)\n void\n alpha_end_function (FILE *file, const char *fnname, tree decl ATTRIBUTE_UNUSED)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* We output a nop after noreturn calls at the very end of the function to\n      ensure that the return address always remains in the caller's code range,\n@@ -8453,7 +8457,8 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\t   tree function)\n {\n   HOST_WIDE_INT hi, lo;\n-  rtx this_rtx, insn, funexp;\n+  rtx this_rtx, funexp;\n+  rtx_insn *insn;\n \n   /* We always require a valid GP.  */\n   emit_insn (gen_prologue_ldgp ());\n@@ -8914,7 +8919,7 @@ enum alphaev5_pipe {\n };\n \n static enum alphaev4_pipe\n-alphaev4_insn_pipe (rtx insn)\n+alphaev4_insn_pipe (rtx_insn *insn)\n {\n   if (recog_memoized (insn) < 0)\n     return EV4_STOP;\n@@ -8963,7 +8968,7 @@ alphaev4_insn_pipe (rtx insn)\n }\n \n static enum alphaev5_pipe\n-alphaev5_insn_pipe (rtx insn)\n+alphaev5_insn_pipe (rtx_insn *insn)\n {\n   if (recog_memoized (insn) < 0)\n     return EV5_STOP;\n@@ -9023,8 +9028,8 @@ alphaev5_insn_pipe (rtx insn)\n \n    LEN is, of course, the length of the group in bytes.  */\n \n-static rtx\n-alphaev4_next_group (rtx insn, int *pin_use, int *plen)\n+static rtx_insn *\n+alphaev4_next_group (rtx_insn *insn, int *pin_use, int *plen)\n {\n   int len, in_use;\n \n@@ -9121,8 +9126,8 @@ alphaev4_next_group (rtx insn, int *pin_use, int *plen)\n \n    LEN is, of course, the length of the group in bytes.  */\n \n-static rtx\n-alphaev5_next_group (rtx insn, int *pin_use, int *plen)\n+static rtx_insn *\n+alphaev5_next_group (rtx_insn *insn, int *pin_use, int *plen)\n {\n   int len, in_use;\n \n@@ -9306,15 +9311,15 @@ alphaev5_next_nop (int *pin_use)\n \n static void\n alpha_align_insns_1 (unsigned int max_align,\n-\t\t     rtx (*next_group) (rtx, int *, int *),\n+\t\t     rtx_insn *(*next_group) (rtx_insn *, int *, int *),\n \t\t     rtx (*next_nop) (int *))\n {\n   /* ALIGN is the known alignment for the insn group.  */\n   unsigned int align;\n   /* OFS is the offset of the current insn in the insn group.  */\n   int ofs;\n   int prev_in_use, in_use, len, ldgp;\n-  rtx i, next;\n+  rtx_insn *i, *next;\n \n   /* Let shorten branches care for assigning alignments to code labels.  */\n   shorten_branches (get_insns ());\n@@ -9372,7 +9377,7 @@ alpha_align_insns_1 (unsigned int max_align,\n       else if ((int) align < len)\n \t{\n \t  unsigned int new_log_align = len > 8 ? 4 : 3;\n-\t  rtx prev, where;\n+\t  rtx_insn *prev, *where;\n \n \t  where = prev = prev_nonnote_insn (i);\n \t  if (!where || !LABEL_P (where))\n@@ -9401,7 +9406,7 @@ alpha_align_insns_1 (unsigned int max_align,\n       else if (ofs + len > (int) align)\n \t{\n \t  int nop_count = (align - ofs) / 4;\n-\t  rtx where;\n+\t  rtx_insn *where;\n \n \t  /* Insert nops before labels, branches, and calls to truly merge\n \t     the execution of the nops with the previous instruction group.  */\n@@ -9410,7 +9415,7 @@ alpha_align_insns_1 (unsigned int max_align,\n \t    {\n \t      if (LABEL_P (where))\n \t\t{\n-\t\t  rtx where2 = prev_nonnote_insn (where);\n+\t\t  rtx_insn *where2 = prev_nonnote_insn (where);\n \t\t  if (where2 && JUMP_P (where2))\n \t\t    where = where2;\n \t\t}\n@@ -9448,7 +9453,7 @@ alpha_align_insns (void)\n static void\n alpha_pad_function_end (void)\n {\n-  rtx insn, next;\n+  rtx_insn *insn, *next;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {"}]}