{"sha": "7d793e369d9247bc0f839be7e7516075dea525be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3OTNlMzY5ZDkyNDdiYzBmODM5YmU3ZTc1MTYwNzVkZWE1MjViZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-02-01T05:28:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-02-01T05:28:23Z"}, "message": "tree-into-ssa.c (mark_def_sites_global_data): Make KILLS bitmap a sparse bitmap instead of a simple bitmap.\n\n        * tree-into-ssa.c (mark_def_sites_global_data): Make KILLS\n        bitmap a sparse bitmap instead of a simple bitmap.\n        (mark_def_sites_initialize_block):  Corresponding changes.\n        (ssa_mark_def_sites_initialize_block): Likewise.\n        (ssa_mark_phi_uses): Likewise.\n        (mark_def_site, ssa_mark_def_sites): Likewise.\n        (mark_def_site_blocks): Likewise.\n        (rewrite_ssa_into_ssa): Likewise.\n\nFrom-SVN: r94519", "tree": {"sha": "c9f4595fe26007a28988bcf9b06f20e969f9bb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9f4595fe26007a28988bcf9b06f20e969f9bb9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d793e369d9247bc0f839be7e7516075dea525be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d793e369d9247bc0f839be7e7516075dea525be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d793e369d9247bc0f839be7e7516075dea525be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d793e369d9247bc0f839be7e7516075dea525be/comments", "author": null, "committer": null, "parents": [{"sha": "5746637cfa10affd139b6c49a4e757ae3d5c6022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5746637cfa10affd139b6c49a4e757ae3d5c6022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5746637cfa10affd139b6c49a4e757ae3d5c6022"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "a67eb7f91c4de824db7d051d41b5b20a8301b818", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d793e369d9247bc0f839be7e7516075dea525be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d793e369d9247bc0f839be7e7516075dea525be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d793e369d9247bc0f839be7e7516075dea525be", "patch": "@@ -1,5 +1,14 @@\n 2005-01-31  Jeff Law  <law@redhat.com>\n \n+\t* tree-into-ssa.c (mark_def_sites_global_data): Make KILLS\n+\tbitmap a sparse bitmap instead of a simple bitmap.\n+\t(mark_def_sites_initialize_block):  Corresponding changes.\n+\t(ssa_mark_def_sites_initialize_block): Likewise.\n+\t(ssa_mark_phi_uses): Likewise.\n+\t(mark_def_site, ssa_mark_def_sites): Likewise.\n+\t(mark_def_site_blocks): Likewise.\n+\t(rewrite_ssa_into_ssa): Likewise.\n+\n \t* tree-ssa-dom.c (record_cond): Pass correct variable type\n \tfor last argument to htab_find_slot_with_hash.\n "}, {"sha": "c6124e24a1626d18f3f34890b8fd57ee80b98ddd", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d793e369d9247bc0f839be7e7516075dea525be/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d793e369d9247bc0f839be7e7516075dea525be/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=7d793e369d9247bc0f839be7e7516075dea525be", "patch": "@@ -121,7 +121,7 @@ struct mark_def_sites_global_data\n      are used in a basic block.  We keep it as a global variable\n      solely to avoid the overhead of allocating and deallocating\n      the bitmap.  */\n-  sbitmap kills;\n+  bitmap kills;\n \n   /* Bitmap of names to rename.  */\n   sbitmap names_to_rename;\n@@ -288,9 +288,9 @@ mark_def_sites_initialize_block (struct dom_walk_data *walk_data,\n \t\t\t\t basic_block bb ATTRIBUTE_UNUSED)\n {\n   struct mark_def_sites_global_data *gd = walk_data->global_data;\n-  sbitmap kills = gd->kills;\n+  bitmap kills = gd->kills;\n \n-  sbitmap_zero (kills);\n+  bitmap_clear (kills);\n }\n \n /* Block initialization routine for mark_def_sites.  Clear the \n@@ -301,11 +301,11 @@ ssa_mark_def_sites_initialize_block (struct dom_walk_data *walk_data,\n \t\t\t\t     basic_block bb)\n {\n   struct mark_def_sites_global_data *gd = walk_data->global_data;\n-  sbitmap kills = gd->kills;\n+  bitmap kills = gd->kills;\n   tree phi, def;\n   unsigned def_uid;\n \n-  sbitmap_zero (kills);\n+  bitmap_clear (kills);\n \n   for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n     {\n@@ -316,7 +316,7 @@ ssa_mark_def_sites_initialize_block (struct dom_walk_data *walk_data,\n \tcontinue;\n \n       set_def_block (def, bb, true, true);\n-      SET_BIT (kills, def_uid);\n+      bitmap_set_bit (kills, def_uid);\n     }\n }\n \n@@ -326,7 +326,7 @@ static void\n ssa_mark_phi_uses (struct dom_walk_data *walk_data, basic_block bb)\n {\n   struct mark_def_sites_global_data *gd = walk_data->global_data;\n-  sbitmap kills = gd->kills;\n+  bitmap kills = gd->kills;\n   edge e;\n   tree phi, use;\n   unsigned uid;\n@@ -346,7 +346,7 @@ ssa_mark_phi_uses (struct dom_walk_data *walk_data, basic_block bb)\n \t  uid = SSA_NAME_VERSION (use);\n \n \t  if (TEST_BIT (gd->names_to_rename, uid)\n-\t      && !TEST_BIT (kills, uid))\n+\t      && !bitmap_bit_p (kills, uid))\n \t    set_livein_block (use, bb);\n \t}\n     }\n@@ -373,7 +373,7 @@ mark_def_sites (struct dom_walk_data *walk_data,\n \t\tblock_stmt_iterator bsi)\n {\n   struct mark_def_sites_global_data *gd = walk_data->global_data;\n-  sbitmap kills = gd->kills;\n+  bitmap kills = gd->kills;\n   size_t uid;\n   tree stmt, def;\n   use_operand_p use_p;\n@@ -396,7 +396,7 @@ mark_def_sites (struct dom_walk_data *walk_data,\n       if (prepare_use_operand_for_rename (use_p, &uid))\n \t{\n \t  REWRITE_THIS_STMT (stmt) = 1;\n-\t  if (!TEST_BIT (kills, uid))\n+\t  if (!bitmap_bit_p (kills, uid))\n \t    set_livein_block (USE_FROM_PTR (use_p), bb);\n \t}\n     }\n@@ -427,7 +427,7 @@ mark_def_sites (struct dom_walk_data *walk_data,\n       if (prepare_def_operand_for_rename (def, &uid))\n \t{\n \t  set_def_block (def, bb, false, false);\n-\t  SET_BIT (kills, uid);\n+\t  bitmap_set_bit (kills, uid);\n \t  REWRITE_THIS_STMT (stmt) = 1;\n \t}\n     }\n@@ -442,7 +442,7 @@ ssa_mark_def_sites (struct dom_walk_data *walk_data,\n \t\t    block_stmt_iterator bsi)\n {\n   struct mark_def_sites_global_data *gd = walk_data->global_data;\n-  sbitmap kills = gd->kills;\n+  bitmap kills = gd->kills;\n   size_t uid, def_uid;\n   tree stmt, use, def;\n   ssa_op_iter iter;\n@@ -459,7 +459,7 @@ ssa_mark_def_sites (struct dom_walk_data *walk_data,\n       uid = SSA_NAME_VERSION (use);\n \n       if (TEST_BIT (gd->names_to_rename, uid)\n-\t  && !TEST_BIT (kills, uid))\n+\t  && !bitmap_bit_p (kills, uid))\n \tset_livein_block (use, bb);\n     }\n \t  \n@@ -472,7 +472,7 @@ ssa_mark_def_sites (struct dom_walk_data *walk_data,\n       if (TEST_BIT (gd->names_to_rename, def_uid))\n \t{\n \t  set_def_block (def, bb, false, true);\n-\t  SET_BIT (kills, def_uid);\n+\t  bitmap_set_bit (kills, def_uid);\n \t}\n     }\n }\n@@ -1521,7 +1521,7 @@ mark_def_site_blocks (void)\n   /* Notice that this bitmap is indexed using variable UIDs, so it must be\n      large enough to accommodate all the variables referenced in the\n      function, not just the ones we are renaming.  */\n-  mark_def_sites_global_data.kills = sbitmap_alloc (num_referenced_vars);\n+  mark_def_sites_global_data.kills = BITMAP_XMALLOC ();\n   walk_data.global_data = &mark_def_sites_global_data;\n \n   /* We do not have any local data.  */\n@@ -1537,7 +1537,7 @@ mark_def_site_blocks (void)\n   fini_walk_dominator_tree (&walk_data);\n \n   /* We no longer need this bitmap, clear and free it.  */\n-  sbitmap_free (mark_def_sites_global_data.kills);\n+  BITMAP_XFREE (mark_def_sites_global_data.kills);\n }\n \n \n@@ -1698,7 +1698,7 @@ rewrite_ssa_into_ssa (void)\n       set_current_def (ssa_name (i), NULL_TREE);\n     }\n \n-  mark_def_sites_global_data.kills = sbitmap_alloc (num_ssa_names);\n+  mark_def_sites_global_data.kills = BITMAP_XMALLOC ();\n   mark_def_sites_global_data.names_to_rename = snames_to_rename;\n   walk_data.global_data = &mark_def_sites_global_data;\n \n@@ -1717,7 +1717,7 @@ rewrite_ssa_into_ssa (void)\n   fini_walk_dominator_tree (&walk_data);\n \n   /* We no longer need this bitmap, clear and free it.  */\n-  sbitmap_free (mark_def_sites_global_data.kills);\n+  BITMAP_XFREE (mark_def_sites_global_data.kills);\n \n   /* Insert PHI nodes at dominance frontiers of definition blocks.  */\n   insert_phi_nodes (dfs, to_rename);"}]}