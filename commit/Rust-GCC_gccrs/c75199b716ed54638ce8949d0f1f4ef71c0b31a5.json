{"sha": "c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1MTk5YjcxNmVkNTQ2MzhjZTg5NDlkMGYxZjRlZjcxYzBiMzFhNQ==", "commit": {"author": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2019-11-21T00:51:22Z"}, "committer": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2020-01-22T06:35:09Z"}, "message": "Add error messages for missing methods of awaitable class\n\ngcc/cp/ChangeLog\n         * coroutines.cc (lookup_awaitable_member): Lookup an awaitable member.\n         (lookup_promise_method): Emit diagnostic when get NULL_TREE back only.\n         (build_co_await): Use lookup_awaitable_member instead of lookup_member.\n\ngcc/testsuite/ChangeLog\n         * g++.dg/coroutines/coro1-missing-await-method.C: New test.", "tree": {"sha": "40a9355ad0060d55061b871f104fdd19f2765124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40a9355ad0060d55061b871f104fdd19f2765124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/comments", "author": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105028315816eb4c8d7b16c79e25775afc656c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105028315816eb4c8d7b16c79e25775afc656c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105028315816eb4c8d7b16c79e25775afc656c9a"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "3f379d0d996e78c1d8101df872ecf9032ffe2a99", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "patch": "@@ -1,3 +1,9 @@\n+2020-01-22  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\t* coroutines.cc (lookup_awaitable_member): Lookup an awaitable member.\n+\t(lookup_promise_method): Emit diagnostic when get NULL_TREE back only.\n+\t(build_co_await): Use lookup_awaitable_member instead of lookup_member.\n+\n 2020-01-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/60855 - ICE with sizeof VLA capture."}, {"sha": "6381fdc2f11f3ffe92f2aa7f53c39b24393736a2", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "patch": "@@ -497,15 +497,32 @@ lookup_promise_method (tree fndecl, tree member_id, location_t loc,\n   tree promise = get_coroutine_promise_type (fndecl);\n   tree pm_memb\n     = lookup_member (promise, member_id,\n-\t\t     /*protect*/ 1, /*want_type*/ 0, tf_warning_or_error);\n-  if (musthave && (pm_memb == NULL_TREE || pm_memb == error_mark_node))\n+\t\t     /*protect=*/1, /*want_type=*/0, tf_warning_or_error);\n+  if (musthave && pm_memb == NULL_TREE)\n     {\n       error_at (loc, \"no member named %qE in %qT\", member_id, promise);\n       return error_mark_node;\n     }\n   return pm_memb;\n }\n \n+/* Lookup an Awaitable member, which should be await_ready, await_suspend\n+   or await_resume.  */\n+\n+static tree\n+lookup_awaitable_member (tree await_type, tree member_id, location_t loc)\n+{\n+  tree aw_memb\n+    = lookup_member (await_type, member_id,\n+\t\t     /*protect=*/1, /*want_type=*/0, tf_warning_or_error);\n+  if (aw_memb == NULL_TREE)\n+    {\n+      error_at (loc, \"no member named %qE in %qT\", member_id, await_type);\n+      return error_mark_node;\n+    }\n+  return aw_memb;\n+}\n+\n /* Here we check the constraints that are common to all keywords (since the\n    presence of a coroutine keyword makes the function into a coroutine).  */\n \n@@ -650,25 +667,18 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n \n   /* Check for required awaitable members and their types.  */\n   tree awrd_meth\n-    = lookup_member (o_type, coro_await_ready_identifier,\n-\t\t     /* protect */ 1, /*want_type=*/0, tf_warning_or_error);\n-\n+    = lookup_awaitable_member (o_type, coro_await_ready_identifier, loc);\n   if (!awrd_meth || awrd_meth == error_mark_node)\n     return error_mark_node;\n-\n   tree awsp_meth\n-    = lookup_member (o_type, coro_await_suspend_identifier,\n-\t\t     /* protect */ 1, /*want_type=*/0, tf_warning_or_error);\n-\n+    = lookup_awaitable_member (o_type, coro_await_suspend_identifier, loc);\n   if (!awsp_meth || awsp_meth == error_mark_node)\n     return error_mark_node;\n \n   /* The type of the co_await is the return type of the awaitable's\n-     co_resume(), so we need to look that up.  */\n+     await_resume, so we need to look that up.  */\n   tree awrs_meth\n-    = lookup_member (o_type, coro_await_resume_identifier,\n-\t\t     /* protect */ 1, /*want_type=*/0, tf_warning_or_error);\n-\n+    = lookup_awaitable_member (o_type, coro_await_resume_identifier, loc);\n   if (!awrs_meth || awrs_meth == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "08c81e1bf8ad9fa1bd745537c05038caaa7c4f69", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "patch": "@@ -1,3 +1,7 @@\n+2020-01-22  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\t* g++.dg/coroutines/coro1-missing-await-method.C: New test.\n+\n 2020-01-21  Andrew Pinski  <apinski@marvell.com>\n \n \tPR target/93119"}, {"sha": "c1869e0654c31e981808460abe5d47578ea37834", "filename": "gcc/testsuite/g++.dg/coroutines/coro1-missing-await-method.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-missing-await-method.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-missing-await-method.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-missing-await-method.C?ref=c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "patch": "@@ -0,0 +1,21 @@\n+//  { dg-additional-options \"-fsyntax-only -w\" }\n+#include \"coro.h\"\n+\n+#define MISSING_AWAIT_READY\n+#define MISSING_AWAIT_SUSPEND\n+#define MISSING_AWAIT_RESUME\n+#include \"coro1-ret-int-yield-int.h\"\n+\n+coro1\n+bar0 () // { dg-error {no member named 'await_suspend' in 'coro1::suspend_always_prt'} }\n+{\n+  co_await coro1::suspend_never_prt{}; // { dg-error {no member named 'await_ready' in 'coro1::suspend_never_prt'} }\n+  co_yield 5; // { dg-error {no member named 'await_suspend' in 'coro1::suspend_always_prt'} }\n+  co_await coro1::suspend_always_intprt(5); // { dg-error {no member named 'await_resume' in 'coro1::suspend_always_intprt'} }\n+  co_return 0;\n+}\n+\n+int main (int ac, char *av[]) {\n+  struct coro1 x0 = bar0 ();\n+  return 0;\n+}"}, {"sha": "abf625869fa5307c66eabb3211b646992033f2fe", "filename": "gcc/testsuite/g++.dg/coroutines/coro1-ret-int-yield-int.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75199b716ed54638ce8949d0f1f4ef71c0b31a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro1-ret-int-yield-int.h?ref=c75199b716ed54638ce8949d0f1f4ef71c0b31a5", "patch": "@@ -27,14 +27,20 @@ struct coro1 {\n   // Some awaitables to use in tests.\n   // With progress printing for debug.\n   struct suspend_never_prt {\n+#ifdef MISSING_AWAIT_READY\n+#else\n   bool await_ready() const noexcept { return true; }\n+#endif\n   void await_suspend(handle_type) const noexcept { PRINT (\"susp-never-susp\");}\n   void await_resume() const noexcept { PRINT (\"susp-never-resume\");}\n   };\n \n   struct  suspend_always_prt {\n   bool await_ready() const noexcept { return false; }\n+#ifdef MISSING_AWAIT_SUSPEND\n+#else\n   void await_suspend(handle_type) const noexcept { PRINT (\"susp-always-susp\");}\n+#endif\n   void await_resume() const noexcept { PRINT (\"susp-always-resume\");}\n   ~suspend_always_prt() { PRINT (\"susp-always-dtor\"); }\n   };\n@@ -46,7 +52,10 @@ struct coro1 {\n     ~suspend_always_intprt() {}\n     bool await_ready() const noexcept { return false; }\n     void await_suspend(coro::coroutine_handle<>) const noexcept { PRINT (\"susp-always-susp-intprt\");}\n+#ifdef MISSING_AWAIT_RESUME\n+#else\n     int await_resume() const noexcept { PRINT (\"susp-always-resume-intprt\"); return x;}\n+#endif\n   };\n   \n   /* This returns the square of the int that it was constructed with.  */"}]}