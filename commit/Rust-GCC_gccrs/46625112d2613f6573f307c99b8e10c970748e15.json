{"sha": "46625112d2613f6573f307c99b8e10c970748e15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2MjUxMTJkMjYxM2Y2NTczZjMwN2M5OWI4ZTEwYzk3MDc0OGUxNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-30T13:53:12Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-30T13:53:12Z"}, "message": "opt-functions.awk (static_var): Update comment.\n\n\t* opt-functions.awk (static_var): Update comment.\n\t(var_ref): Return offsetof expression or -1, not variable address.\n\t* optc-gen.awk: Generate structure field initializers instead of\n\tstatic variables.  Expect -1 for missing variables instead of null\n\tpointer.  Add gcc_options parameters to generated functions.\n\t* opth-gen.awk: Generate structure fields for static variables.\n\tAdd gcc_options parameters to generated functions.\n\t* common.opt (optimize, optimize_size): Add variables.\n\t* config/i386/i386-c.c (ix86_pragma_target_parse): Pass\n\t&global_options to cl_target_option_restore.\n\t* config/i386/i386.c (ix86_valid_target_attribute_p): Pass\n\t&global_options to cl_optimization_restore, cl_target_option_save\n\tand cl_target_option_restore.\n\t(ix86_set_current_function): Pass &global_options to\n\tcl_target_option_restore.\n\t* config/pdp11/pdp11.h (optimize): Remove.\n\t* config/rs6000/rs6000.h (optimize): Remove.\n\t* config/sh/sh.h (optimize): Remove.\n\t* config/xtensa/xtensa.h (optimize): Remove.\n\t* coretypes.h (struct gcc_options): Declare.\n\t* diagnostic.c (diagnostic_initialize): Initialize\n\tcontext->option_state.\n\t(diagnostic_report_diagnostic): Pass option_state to\n\toption_enabled hook.\n\t* diagnostic.h (diagnostic_context.option_enabled): Add void *\n\tparameter.\n\t(diagnostic_context.option_state): New field.\n\t* final.c (final_start_function, final, final_scan_insn): Rename\n\toptimize parameter to optimize_p.\n\t* flags.h (optimize, optimize_size): Remove.\n\t* function.c (invoke_set_current_function_hook): Pass\n\t&global_options to cl_optimization_restore.\n\t* gcc.c (driver_handle_option): Take gcc_options parameter.\n\tAssert that it is &global_options.\n\t(process_command): Pass &global_options to read_cmdline_option.\n\t* ipa-pure-const.c (suggest_attribute): Pass &global_options to\n\toption_enabled.\n\t* lto-opts.c (lto_reissue_options): Use option_flag_var.  Pass\n\t&global_options to set_option.\n\t* opts-common.c (handle_option, handle_generated_option,\n\tread_cmdline_option, set_option): Take explicit gcc_options\n\tparameters.  Use option_flag_var.\n\t(option_flag_var): New.\n\t* opts.c (common_handle_option, lang_handle_option,\n\ttarget_handle_option): Take gcc_options parameter.  Assert that it\n\tis &global_options.\n\t(read_cmdline_options): Pass &global_options to\n\tread_cmdline_option.\n\t(print_filtered_help): Use option_flag_var.  Pass &global_options\n\tto option_enabled.\n\t(common_handle_option): Use option_flag_var.\n\t(option_enabled): Take opts parameter.  Use option_flag_var.\n\t(get_option_state): Take gcc_options parameter.  Use\n\toption_flag_var.  Pass gcc_options parameter to option_enabled.\n\t(enable_warning_as_error): Pass &global_options to\n\thandle_generated_option.\n\t* opts.h (struct cl_option): Change flag_var to flag_var_offset.\n\t(cl_option_handler_func.handler): Take gcc_options parameter.\n\t(option_enabled, get_option_state, set_option, handle_option,\n\thandle_generated_option, read_cmdline_option): Take gcc_options\n\tparameters.\n\t* toplev.c (optimize, optimize_size): Remove.\n\t(print_switch_values): Pass &global_options to option_enabled.\n\t(option_affects_pch_p): Use option_flag_var.  Pass &global_options\n\tto get_option_state.\n\t(general_init): Initialize global_dc->option_state.\n\t* tree.c (build_optimization_node): Pass &global_options to\n\tcl_optimization_save.\n\t(build_target_option_node): Pass &global_options to\n\tcl_target_option_save.\n\nc-family:\n\t* c-common.c (handle_optimize_attribute): Pass &global_options to\n\tcl_optimization_save and cl_optimization_restore.\n\t* c-opts.c (c_common_handle_option): Pass &global_options to\n\thandle_generated_option.\n\t* c-pragma.c (handle_pragma_diagnostic): Use option_flag_var.\n\t(handle_pragma_pop_options, handle_pragma_reset_options): Pass\n\t&global_options to cl_optimization_restore.\n\nFrom-SVN: r164751", "tree": {"sha": "9e8ddd32df9fcfb0446877af547d5a2daa89da8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8ddd32df9fcfb0446877af547d5a2daa89da8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46625112d2613f6573f307c99b8e10c970748e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46625112d2613f6573f307c99b8e10c970748e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46625112d2613f6573f307c99b8e10c970748e15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46625112d2613f6573f307c99b8e10c970748e15/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ccfc46e8f0005bb8a3e08c189b95ca9948059a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ccfc46e8f0005bb8a3e08c189b95ca9948059a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ccfc46e8f0005bb8a3e08c189b95ca9948059a"}], "stats": {"total": 477, "additions": 305, "deletions": 172}, "files": [{"sha": "094c7e7d58674e22b315f6a47c93afd204c001ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -1,3 +1,76 @@\n+2010-09-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opt-functions.awk (static_var): Update comment.\n+\t(var_ref): Return offsetof expression or -1, not variable address.\n+\t* optc-gen.awk: Generate structure field initializers instead of\n+\tstatic variables.  Expect -1 for missing variables instead of null\n+\tpointer.  Add gcc_options parameters to generated functions.\n+\t* opth-gen.awk: Generate structure fields for static variables.\n+\tAdd gcc_options parameters to generated functions.\n+\t* common.opt (optimize, optimize_size): Add variables.\n+\t* config/i386/i386-c.c (ix86_pragma_target_parse): Pass\n+\t&global_options to cl_target_option_restore.\n+\t* config/i386/i386.c (ix86_valid_target_attribute_p): Pass\n+\t&global_options to cl_optimization_restore, cl_target_option_save\n+\tand cl_target_option_restore.\n+\t(ix86_set_current_function): Pass &global_options to\n+\tcl_target_option_restore.\n+\t* config/pdp11/pdp11.h (optimize): Remove.\n+\t* config/rs6000/rs6000.h (optimize): Remove.\n+\t* config/sh/sh.h (optimize): Remove.\n+\t* config/xtensa/xtensa.h (optimize): Remove.\n+\t* coretypes.h (struct gcc_options): Declare.\n+\t* diagnostic.c (diagnostic_initialize): Initialize\n+\tcontext->option_state.\n+\t(diagnostic_report_diagnostic): Pass option_state to\n+\toption_enabled hook.\n+\t* diagnostic.h (diagnostic_context.option_enabled): Add void *\n+\tparameter.\n+\t(diagnostic_context.option_state): New field.\n+\t* final.c (final_start_function, final, final_scan_insn): Rename\n+\toptimize parameter to optimize_p.\n+\t* flags.h (optimize, optimize_size): Remove.\n+\t* function.c (invoke_set_current_function_hook): Pass\n+\t&global_options to cl_optimization_restore.\n+\t* gcc.c (driver_handle_option): Take gcc_options parameter.\n+\tAssert that it is &global_options.\n+\t(process_command): Pass &global_options to read_cmdline_option.\n+\t* ipa-pure-const.c (suggest_attribute): Pass &global_options to\n+\toption_enabled.\n+\t* lto-opts.c (lto_reissue_options): Use option_flag_var.  Pass\n+\t&global_options to set_option.\n+\t* opts-common.c (handle_option, handle_generated_option,\n+\tread_cmdline_option, set_option): Take explicit gcc_options\n+\tparameters.  Use option_flag_var.\n+\t(option_flag_var): New.\n+\t* opts.c (common_handle_option, lang_handle_option,\n+\ttarget_handle_option): Take gcc_options parameter.  Assert that it\n+\tis &global_options.\n+\t(read_cmdline_options): Pass &global_options to\n+\tread_cmdline_option.\n+\t(print_filtered_help): Use option_flag_var.  Pass &global_options\n+\tto option_enabled.\n+\t(common_handle_option): Use option_flag_var.\n+\t(option_enabled): Take opts parameter.  Use option_flag_var.\n+\t(get_option_state): Take gcc_options parameter.  Use\n+\toption_flag_var.  Pass gcc_options parameter to option_enabled.\n+\t(enable_warning_as_error): Pass &global_options to\n+\thandle_generated_option.\n+\t* opts.h (struct cl_option): Change flag_var to flag_var_offset.\n+\t(cl_option_handler_func.handler): Take gcc_options parameter.\n+\t(option_enabled, get_option_state, set_option, handle_option,\n+\thandle_generated_option, read_cmdline_option): Take gcc_options\n+\tparameters.\n+\t* toplev.c (optimize, optimize_size): Remove.\n+\t(print_switch_values): Pass &global_options to option_enabled.\n+\t(option_affects_pch_p): Use option_flag_var.  Pass &global_options\n+\tto get_option_state.\n+\t(general_init): Initialize global_dc->option_state.\n+\t* tree.c (build_optimization_node): Pass &global_options to\n+\tcl_optimization_save.\n+\t(build_target_option_node): Pass &global_options to\n+\tcl_target_option_save.\n+\n 2010-09-30  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-sra.c (type_consists_of_records_p): Do not check for trailing"}, {"sha": "ed74c289aeaf766cf75cade2e05b1b4e07e02cf6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -1,3 +1,13 @@\n+2010-09-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (handle_optimize_attribute): Pass &global_options to\n+\tcl_optimization_save and cl_optimization_restore.\n+\t* c-opts.c (c_common_handle_option): Pass &global_options to\n+\thandle_generated_option.\n+\t* c-pragma.c (handle_pragma_diagnostic): Use option_flag_var.\n+\t(handle_pragma_pop_options, handle_pragma_reset_options): Pass\n+\t&global_options to cl_optimization_restore.\n+\n 2010-09-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-lex.c (c_lex_with_flags): Updated comments for CPP_AT_NAME"}, {"sha": "b7b445dee52e6e51220fa06afa95ca21c66a0468", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -7831,20 +7831,21 @@ handle_optimize_attribute (tree *node, tree name, tree args,\n       tree old_opts = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node);\n \n       /* Save current options.  */\n-      cl_optimization_save (&cur_opts);\n+      cl_optimization_save (&cur_opts, &global_options);\n \n       /* If we previously had some optimization options, use them as the\n \t default.  */\n       if (old_opts)\n-\tcl_optimization_restore (TREE_OPTIMIZATION (old_opts));\n+\tcl_optimization_restore (&global_options,\n+\t\t\t\t TREE_OPTIMIZATION (old_opts));\n \n       /* Parse options, and update the vector.  */\n       parse_optimize_options (args, true);\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n \t= build_optimization_node ();\n \n       /* Restore current options.  */\n-      cl_optimization_restore (&cur_opts);\n+      cl_optimization_restore (&global_options, &cur_opts);\n     }\n \n   return NULL_TREE;"}, {"sha": "3f00e56bc94eadc85a5f5f8eab0775dc8fb9eb02", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -436,7 +436,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wall:\n       warn_unused = value;\n       set_Wformat (value);\n-      handle_generated_option (OPT_Wimplicit, NULL, value,\n+      handle_generated_option (&global_options, OPT_Wimplicit, NULL, value,\n \t\t\t       c_family_lang_mask, kind, handlers);\n       warn_char_subscripts = value;\n       warn_missing_braces = value;\n@@ -530,10 +530,12 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wimplicit:\n       gcc_assert (value == 0 || value == 1);\n       if (warn_implicit_int == -1)\n-\thandle_generated_option (OPT_Wimplicit_int, NULL, value,\n+\thandle_generated_option (&global_options, OPT_Wimplicit_int,\n+\t\t\t\t NULL, value,\n \t\t\t\t c_family_lang_mask, kind, handlers);\n       if (warn_implicit_function_declaration == -1)\n-\thandle_generated_option (OPT_Wimplicit_function_declaration, NULL,\n+\thandle_generated_option (&global_options,\n+\t\t\t\t OPT_Wimplicit_function_declaration, NULL,\n \t\t\t\t value, c_family_lang_mask, kind, handlers);\n       break;\n "}, {"sha": "5aa209c8e6471693a532a3a5112a577501865eb3", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -1,6 +1,6 @@\n /* Handle #pragma, system V.4 style.  Supports #pragma weak and #pragma pack.\n    Copyright (C) 1992, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -751,13 +751,15 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n   for (option_index = 0; option_index < cl_options_count; option_index++)\n     if (strcmp (cl_options[option_index].opt_text, option_string) == 0)\n       {\n+\tvoid *flag_var = option_flag_var (option_index, &global_options);\n+\n \t/* This overrides -Werror, for example.  */\n \tdiagnostic_classify_diagnostic (global_dc, option_index, kind, input_location);\n \t/* This makes sure the option is enabled, like -Wfoo would do.  */\n \tif (cl_options[option_index].var_type == CLVC_BOOLEAN\n-\t    && cl_options[option_index].flag_var\n+\t    && flag_var\n \t    && kind != DK_IGNORED)\n-\t    *(int *) cl_options[option_index].flag_var = 1;\n+\t    *(int *) flag_var = 1;\n \treturn;\n       }\n   GCC_BAD (\"unknown option after %<#pragma GCC diagnostic%> kind\");\n@@ -983,7 +985,8 @@ handle_pragma_pop_options (cpp_reader *ARG_UNUSED(dummy))\n   if (p->optimize_binary != optimization_current_node)\n     {\n       tree old_optimize = optimization_current_node;\n-      cl_optimization_restore (TREE_OPTIMIZATION (p->optimize_binary));\n+      cl_optimization_restore (&global_options,\n+\t\t\t       TREE_OPTIMIZATION (p->optimize_binary));\n       c_cpp_builtins_optimize_pragma (parse_in, old_optimize,\n \t\t\t\t      p->optimize_binary);\n       optimization_current_node = p->optimize_binary;\n@@ -1020,7 +1023,8 @@ handle_pragma_reset_options (cpp_reader *ARG_UNUSED(dummy))\n   if (new_optimize != optimization_current_node)\n     {\n       tree old_optimize = optimization_current_node;\n-      cl_optimization_restore (TREE_OPTIMIZATION (new_optimize));\n+      cl_optimization_restore (&global_options,\n+\t\t\t       TREE_OPTIMIZATION (new_optimize));\n       c_cpp_builtins_optimize_pragma (parse_in, old_optimize, new_optimize);\n       optimization_current_node = new_optimize;\n     }"}, {"sha": "2b643668338d7cdcfc897e1ea776e0f92c0177c7", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -26,6 +26,12 @@\n Variable\n int target_flags\n \n+Variable\n+int optimize\n+\n+Variable\n+int optimize_size\n+\n ###\n Driver\n "}, {"sha": "1846efbe6178a5a64cadcdf5ab0fc73ef2ecf4e8", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -283,7 +283,8 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n       cur_tree = ((pop_target)\n \t\t  ? pop_target\n \t\t  : target_option_default_node);\n-      cl_target_option_restore (TREE_TARGET_OPTION (cur_tree));\n+      cl_target_option_restore (&global_options,\n+\t\t\t\tTREE_TARGET_OPTION (cur_tree));\n     }\n   else\n     {"}, {"sha": "c36ad74b157087aaca17c71c4859d0bb8fe9dd60", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -4180,11 +4180,12 @@ ix86_valid_target_attribute_p (tree fndecl,\n   /* If the function changed the optimization levels as well as setting target\n      options, start with the optimizations specified.  */\n   if (func_optimize && func_optimize != old_optimize)\n-    cl_optimization_restore (TREE_OPTIMIZATION (func_optimize));\n+    cl_optimization_restore (&global_options,\n+\t\t\t     TREE_OPTIMIZATION (func_optimize));\n \n   /* The target attributes may also change some optimization flags, so update\n      the optimization options if necessary.  */\n-  cl_target_option_save (&cur_target);\n+  cl_target_option_save (&cur_target, &global_options);\n   new_target = ix86_valid_target_attribute_tree (args);\n   new_optimize = build_optimization_node ();\n \n@@ -4199,10 +4200,11 @@ ix86_valid_target_attribute_p (tree fndecl,\n \tDECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) = new_optimize;\n     }\n \n-  cl_target_option_restore (&cur_target);\n+  cl_target_option_restore (&global_options, &cur_target);\n \n   if (old_optimize != new_optimize)\n-    cl_optimization_restore (TREE_OPTIMIZATION (old_optimize));\n+    cl_optimization_restore (&global_options,\n+\t\t\t     TREE_OPTIMIZATION (old_optimize));\n \n   return ret;\n }\n@@ -4291,7 +4293,8 @@ ix86_set_current_function (tree fndecl)\n \n       else if (new_tree)\n \t{\n-\t  cl_target_option_restore (TREE_TARGET_OPTION (new_tree));\n+\t  cl_target_option_restore (&global_options,\n+\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n \t  target_reinit ();\n \t}\n \n@@ -4300,7 +4303,7 @@ ix86_set_current_function (tree fndecl)\n \t  struct cl_target_option *def\n \t    = TREE_TARGET_OPTION (target_option_current_node);\n \n-\t  cl_target_option_restore (def);\n+\t  cl_target_option_restore (&global_options, def);\n \t  target_reinit ();\n \t}\n     }"}, {"sha": "a1a96a17677293abf56b20087c002ff03dab00b8", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -767,7 +767,6 @@ extern int may_call_alloca;\n   pdp11_register_move_cost (CLASS1, CLASS2)\n \n /* Tell emit-rtl.c how to initialize special values on a per-function base.  */\n-extern int optimize;\n extern struct rtx_def *cc0_reg_rtx;\n \n #define CC_STATUS_MDEP rtx"}, {"sha": "a4f9d4b082f634b06048387f1ee30e7b1612b2d0", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -2416,7 +2416,6 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n /* #define  MACHINE_no_sched_speculative_load */\n \n /* General flags.  */\n-extern int optimize;\n extern int frame_pointer_needed;\n \n /* Classification of the builtin functions to properly set the declaration tree"}, {"sha": "01236c18ab4f31ae2d8b756ed9df35d63d1a2562", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -2544,8 +2544,6 @@ enum processor_type {\n #define sh_cpu_attr ((enum attr_cpu)sh_cpu)\n extern enum processor_type sh_cpu;\n \n-extern int optimize; /* needed for gen_casesi.  */\n-\n enum mdep_reorg_phase_e\n {\n   SH_BEFORE_MDEP_REORG,"}, {"sha": "7dc22a2a466306e8683ba43d70e574396a4e670e", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -22,9 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Get Xtensa configuration settings */\n #include \"xtensa-config.h\"\n \n-/* Standard GCC variables that we reference.  */\n-extern int optimize;\n-\n /* External variables defined in xtensa.c.  */\n \n extern unsigned xtensa_current_frame_size;"}, {"sha": "4fc5ceacbb571717645f5a9b17494e22117faf17", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -64,6 +64,7 @@ typedef const union tree_node *const_tree;\n typedef const union gimple_statement_d *const_gimple;\n union section;\n typedef union section section;\n+struct gcc_options;\n struct cl_target_option;\n struct cl_optimization;\n struct cl_option;"}, {"sha": "40ddc23cfd7eadd3cfcb67a36e7a8c75ee41ac8f", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -113,6 +113,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   diagnostic_starter (context) = default_diagnostic_starter;\n   diagnostic_finalizer (context) = default_diagnostic_finalizer;\n   context->option_enabled = NULL;\n+  context->option_state = NULL;\n   context->option_name = NULL;\n   context->last_module = 0;\n   context->x_data = NULL;\n@@ -435,7 +436,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \n       /* This tests if the user provided the appropriate -Wfoo or\n \t -Wno-foo option.  */\n-      if (! context->option_enabled (diagnostic->option_index))\n+      if (! context->option_enabled (diagnostic->option_index,\n+\t\t\t\t     context->option_state))\n \treturn false;\n \n       /* This tests for #pragma diagnostic changes.  */"}, {"sha": "460fb8fa8c3ed841d56a921bd062d7151cf86823", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -146,7 +146,11 @@ struct diagnostic_context\n \n   /* Client hook to say whether the option controlling a diagnostic is\n      enabled.  Returns nonzero if enabled, zero if disabled.  */\n-  int (*option_enabled) (int);\n+  int (*option_enabled) (int, void *);\n+\n+  /* Client information to pass as second argument to\n+     option_enabled.  */\n+  void *option_state;\n \n   /* Client hook to return the name of an option that controls a\n      diagnostic.  Returns malloced memory.  The first diagnostic_t"}, {"sha": "5409a3df4e41f3e35d9464208ee1bbac6fa281a2", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -1512,12 +1512,12 @@ dwarf2_debug_info_emitted_p (tree decl)\n \n    FIRST is the first insn of the rtl for the function being compiled.\n    FILE is the file to write assembler code to.\n-   OPTIMIZE is nonzero if we should eliminate redundant\n+   OPTIMIZE_P is nonzero if we should eliminate redundant\n      test and compare insns.  */\n \n void\n final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n-\t\t      int optimize ATTRIBUTE_UNUSED)\n+\t\t      int optimize_p ATTRIBUTE_UNUSED)\n {\n   block_depth = 0;\n \n@@ -1662,7 +1662,7 @@ final_end_function (void)\n    For description of args, see `final_start_function', above.  */\n \n void\n-final (rtx first, FILE *file, int optimize)\n+final (rtx first, FILE *file, int optimize_p)\n {\n   rtx insn;\n   int max_uid = 0;\n@@ -1677,7 +1677,7 @@ final (rtx first, FILE *file, int optimize)\n #ifdef HAVE_cc0\n       /* If CC tracking across branches is enabled, record the insn which\n \t jumps to each branch only reached from one place.  */\n-      if (optimize && JUMP_P (insn))\n+      if (optimize_p && JUMP_P (insn))\n \t{\n \t  rtx lab = JUMP_LABEL (insn);\n \t  if (lab && LABEL_NUSES (lab) == 1)\n@@ -1707,7 +1707,7 @@ final (rtx first, FILE *file, int optimize)\n \tinsn_current_address = INSN_ADDRESSES (INSN_UID (insn));\n #endif /* HAVE_ATTR_length */\n \n-      insn = final_scan_insn (insn, file, optimize, 0, &seen);\n+      insn = final_scan_insn (insn, file, optimize_p, 0, &seen);\n     }\n }\n \f\n@@ -1803,7 +1803,7 @@ call_from_call_insn (rtx insn)\n    first.  */\n \n rtx\n-final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n+final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t\t int nopeepholes ATTRIBUTE_UNUSED, int *seen)\n {\n #ifdef HAVE_cc0\n@@ -2327,7 +2327,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t   and the next statement should reexamine the variable\n \t   to compute the condition codes.  */\n \n-\tif (optimize)\n+\tif (optimize_p)\n \t  {\n \t    if (set\n \t\t&& GET_CODE (SET_DEST (set)) == CC0\n@@ -2512,7 +2512,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #ifdef HAVE_peephole\n \t/* Do machine-specific peephole optimizations if desired.  */\n \n-\tif (optimize && !flag_no_peephole && !nopeepholes)\n+\tif (optimize_p && !flag_no_peephole && !nopeepholes)\n \t  {\n \t    rtx next = peephole (insn);\n \t    /* When peepholing, if there were notes within the peephole,\n@@ -2523,7 +2523,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \t\tfor (note = NEXT_INSN (insn); note != next;\n \t\t     note = NEXT_INSN (note))\n-\t\t  final_scan_insn (note, file, optimize, nopeepholes, seen);\n+\t\t  final_scan_insn (note, file, optimize_p, nopeepholes, seen);\n \n \t\t/* Put the notes in the proper position for a later\n \t\t   rescan.  For example, the SH target can do this"}, {"sha": "906168cfa9156e22ded2a571c706df98d1bb373c", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -107,14 +107,6 @@ struct visibility_flags\n /* Global visibility options.  */\n extern struct visibility_flags visibility_options;\n \n-/* Nonzero means do optimizations.  -opt.  */\n-\n-extern int optimize;\n-\n-/* Nonzero means optimize for size.  -Os.  */\n-\n-extern int optimize_size;\n-\n /* True if this is the LTO front end (lto1).  This is used to disable\n    gimple generation and lowering passes that are normally run on the\n    output of a front end.  These passes must be bypassed for lto since"}, {"sha": "bade369ae91d81a65cec48c79f22073dc54c50ad", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -4254,7 +4254,7 @@ invoke_set_current_function_hook (tree fndecl)\n       if (optimization_current_node != opts)\n \t{\n \t  optimization_current_node = opts;\n-\t  cl_optimization_restore (TREE_OPTIMIZATION (opts));\n+\t  cl_optimization_restore (&global_options, TREE_OPTIMIZATION (opts));\n \t}\n \n       targetm.set_current_function (fndecl);"}, {"sha": "ef637e9764b59c496ebe943acd5a06fcfa9a1917", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -3150,7 +3150,8 @@ static int last_language_n_infiles;\n    handle_option.  */\n \n static bool\n-driver_handle_option (const struct cl_decoded_option *decoded,\n+driver_handle_option (struct gcc_options *opts,\n+\t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n@@ -3161,6 +3162,7 @@ driver_handle_option (const struct cl_decoded_option *decoded,\n   bool validated = false;\n   bool do_save = true;\n \n+  gcc_assert (opts == &global_options);\n   gcc_assert (kind == DK_UNSPECIFIED);\n \n   switch (opt_index)\n@@ -3801,7 +3803,8 @@ process_command (unsigned int decoded_options_count,\n \t  continue;\n \t}\n \n-      read_cmdline_option (decoded_options + j, CL_DRIVER, &handlers);\n+      read_cmdline_option (&global_options, decoded_options + j,\n+\t\t\t   CL_DRIVER, &handlers);\n     }\n \n   /* If -save-temps=obj and -o name, create the prefix to use for %b."}, {"sha": "334b33c489e9353e82c639206ed18c5ef86d3fc1", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -138,7 +138,7 @@ suggest_attribute (int option, tree decl, bool known_finite,\n \t\t   struct pointer_set_t *warned_about,\n \t\t   const char * attrib_name)\n {\n-  if (!option_enabled (option))\n+  if (!option_enabled (option, &global_options))\n     return warned_about;\n   if (TREE_THIS_VOLATILE (decl)\n       || (known_finite && function_always_visible_to_compiler_p (decl)))"}, {"sha": "bbe21384fd3ccae640216b34f8f57f20a9034d41", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -1,6 +1,6 @@\n /* LTO IL options.\n \n-   Copyright 2009 Free Software Foundation, Inc.\n+   Copyright 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Simon Baldwin <simonb@google.com>\n \n This file is part of GCC.\n@@ -399,15 +399,16 @@ lto_reissue_options (void)\n \n   FOR_EACH_VEC_ELT (opt_t, opts, i, o)\n     {\n-      const struct cl_option *option = &cl_options[o->code];\n+      void *flag_var = option_flag_var (o->code, &global_options);\n \n-      if (option->flag_var)\n-\tset_option (o->code, o->value, o->arg, 0 /*DK_UNSPECIFIED*/);\n+      if (flag_var)\n+\tset_option (&global_options, o->code, o->value, o->arg,\n+\t\t    0 /*DK_UNSPECIFIED*/);\n \n       if (o->type == CL_TARGET)\n \ttargetm.handle_option (o->code, o->arg, o->value);\n       else if (o->type == CL_COMMON)\n-\tgcc_assert (option->flag_var);\n+\tgcc_assert (flag_var);\n       else\n \tgcc_unreachable ();\n     }"}, {"sha": "863c4787636709e1d167b4ea27808ff85a4fb51d", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -120,9 +120,9 @@ function needs_state_p(flags)\n \t\t&& !flag_set_p(\"Ignore\", flags))\n }\n \n-# If FLAGS describes an option that needs a static state variable,\n-# return the name of that variable, otherwise return \"\".  NAME is\n-# the name of the option.\n+# If FLAGS describes an option that needs state without a public\n+# variable name, return the name of that field, minus the initial\n+# \"x_\", otherwise return \"\".  NAME is the name of the option.\n function static_var(name, flags)\n {\n \tif (global_state_p(flags) || !needs_state_p(flags))\n@@ -193,12 +193,12 @@ function var_ref(name, flags)\n {\n \tname = var_name(flags) static_var(name, flags)\n \tif (name != \"\")\n-\t\treturn \"&\" name\n+\t\treturn \"offsetof (struct gcc_options, x_\" name \")\"\n \tif (opt_args(\"Mask\", flags) != \"\")\n-\t\treturn \"&target_flags\"\n+\t\treturn \"offsetof (struct gcc_options, x_target_flags)\"\n \tif (opt_args(\"InverseMask\", flags) != \"\")\n-\t\treturn \"&target_flags\"\n-\treturn \"0\"\n+\t\treturn \"offsetof (struct gcc_options, x_target_flags)\"\n+\treturn \"-1\"\n }\n \n # Given the option called NAME return a sanitized version of its name."}, {"sha": "bad055f09896a976526b237255c7fe972d82ec77", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -131,15 +131,14 @@ for (i = 0; i < n_opts; i++) {\n \n \tvar_seen[name] = 1;\n }\n-print \"};\"\n-\n-print \"\"\n-print \"/* Local state variables.  */\"\n for (i = 0; i < n_opts; i++) {\n \tname = static_var(opts[i], flags[i]);\n-\tif (name != \"\")\n-\t\tprint \"static \" var_type(flags[i]) name \";\"\n+\tif (name != \"\") {\n+\t\tprint \"  0, /* \" name \" (private state) */\"\n+\t\tprint \"#undef x_\" name\n+\t}\n }\n+print \"};\"\n print \"\"\n \n print \"const char * const lang_names[] =\\n{\"\n@@ -235,7 +234,7 @@ for (i = 0; i < n_opts; i++) {\n \t\talias_posarg = nth_arg(1, alias_arg)\n \t\talias_negarg = nth_arg(2, alias_arg)\n \n-\t\tif (var_ref(opts[i], flags[i]) != \"0\")\n+\t\tif (var_ref(opts[i], flags[i]) != \"-1\")\n \t\t\tprint \"#error Alias setting variable\"\n \n \t\tif (alias_posarg != \"\" && alias_negarg == \"\") {\n@@ -298,7 +297,7 @@ print \"#if !defined(GCC_DRIVER) && !defined(IN_LIBGCC2) && !defined(IN_TARGET_LI\n print \"\";\n print \"/* Save optimization variables into a structure.  */\"\n print \"void\";\n-print \"cl_optimization_save (struct cl_optimization *ptr)\";\n+print \"cl_optimization_save (struct cl_optimization *ptr, struct gcc_options *opts)\";\n print \"{\";\n \n n_opt_char = 2;\n@@ -345,48 +344,48 @@ for (i = 0; i < n_opts; i++) {\n for (i = 0; i < n_opt_char; i++) {\n \tname = var_opt_char[i];\n \tif (var_opt_range[name] != \"\")\n-\t\tprint \"  gcc_assert (IN_RANGE (\" name \", \" var_opt_range[name] \"));\";\n+\t\tprint \"  gcc_assert (IN_RANGE (opts->x_\" name \", \" var_opt_range[name] \"));\";\n }\n \n print \"\";\n for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  ptr->x_\" var_opt_other[i] \" = \" var_opt_other[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_other[i] \" = opts->x_\" var_opt_other[i] \";\";\n }\n \n for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  ptr->x_\" var_opt_int[i] \" = \" var_opt_int[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_int[i] \" = opts->x_\" var_opt_int[i] \";\";\n }\n \n for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  ptr->x_\" var_opt_short[i] \" = \" var_opt_short[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_short[i] \" = opts->x_\" var_opt_short[i] \";\";\n }\n \n for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  ptr->x_\" var_opt_char[i] \" = \" var_opt_char[i] \";\";\n+\tprint \"  ptr->x_\" var_opt_char[i] \" = opts->x_\" var_opt_char[i] \";\";\n }\n \n print \"}\";\n \n print \"\";\n print \"/* Restore optimization options from a structure.  */\";\n print \"void\";\n-print \"cl_optimization_restore (struct cl_optimization *ptr)\";\n+print \"cl_optimization_restore (struct gcc_options *opts, struct cl_optimization *ptr)\";\n print \"{\";\n \n for (i = 0; i < n_opt_other; i++) {\n-\tprint \"  \" var_opt_other[i] \" = ptr->x_\" var_opt_other[i] \";\";\n+\tprint \"  opts->x_\" var_opt_other[i] \" = ptr->x_\" var_opt_other[i] \";\";\n }\n \n for (i = 0; i < n_opt_int; i++) {\n-\tprint \"  \" var_opt_int[i] \" = ptr->x_\" var_opt_int[i] \";\";\n+\tprint \"  opts->x_\" var_opt_int[i] \" = ptr->x_\" var_opt_int[i] \";\";\n }\n \n for (i = 0; i < n_opt_short; i++) {\n-\tprint \"  \" var_opt_short[i] \" = ptr->x_\" var_opt_short[i] \";\";\n+\tprint \"  opts->x_\" var_opt_short[i] \" = ptr->x_\" var_opt_short[i] \";\";\n }\n \n for (i = 0; i < n_opt_char; i++) {\n-\tprint \"  \" var_opt_char[i] \" = ptr->x_\" var_opt_char[i] \";\";\n+\tprint \"  opts->x_\" var_opt_char[i] \" = ptr->x_\" var_opt_char[i] \";\";\n }\n \n print \"  targetm.override_options_after_change ();\";\n@@ -442,7 +441,7 @@ print \"}\";\n print \"\";\n print \"/* Save selected option variables into a structure.  */\"\n print \"void\";\n-print \"cl_target_option_save (struct cl_target_option *ptr)\";\n+print \"cl_target_option_save (struct cl_target_option *ptr, struct gcc_options *opts)\";\n print \"{\";\n \n n_target_char = 0;\n@@ -488,7 +487,7 @@ for (i = 0; i < n_target_char; i++) {\n \tname = var_target_char[i];\n \tif (var_target_range[name] != \"\") {\n \t\thave_assert = 1;\n-\t\tprint \"  gcc_assert (IN_RANGE (\" name \", \" var_target_range[name] \"));\";\n+\t\tprint \"  gcc_assert (IN_RANGE (opts->x_\" name \", \" var_target_range[name] \"));\";\n \t}\n }\n \n@@ -500,43 +499,43 @@ print \"    targetm.target_option.save (ptr);\";\n print \"\";\n \n for (i = 0; i < n_target_other; i++) {\n-\tprint \"  ptr->x_\" var_target_other[i] \" = \" var_target_other[i] \";\";\n+\tprint \"  ptr->x_\" var_target_other[i] \" = opts->x_\" var_target_other[i] \";\";\n }\n \n for (i = 0; i < n_target_int; i++) {\n-\tprint \"  ptr->x_\" var_target_int[i] \" = \" var_target_int[i] \";\";\n+\tprint \"  ptr->x_\" var_target_int[i] \" = opts->x_\" var_target_int[i] \";\";\n }\n \n for (i = 0; i < n_target_short; i++) {\n-\tprint \"  ptr->x_\" var_target_short[i] \" = \" var_target_short[i] \";\";\n+\tprint \"  ptr->x_\" var_target_short[i] \" = opts->x_\" var_target_short[i] \";\";\n }\n \n for (i = 0; i < n_target_char; i++) {\n-\tprint \"  ptr->x_\" var_target_char[i] \" = \" var_target_char[i] \";\";\n+\tprint \"  ptr->x_\" var_target_char[i] \" = opts->x_\" var_target_char[i] \";\";\n }\n \n print \"}\";\n \n print \"\";\n print \"/* Restore selected current options from a structure.  */\";\n print \"void\";\n-print \"cl_target_option_restore (struct cl_target_option *ptr)\";\n+print \"cl_target_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\";\n print \"{\";\n \n for (i = 0; i < n_target_other; i++) {\n-\tprint \"  \" var_target_other[i] \" = ptr->x_\" var_target_other[i] \";\";\n+\tprint \"  opts->x_\" var_target_other[i] \" = ptr->x_\" var_target_other[i] \";\";\n }\n \n for (i = 0; i < n_target_int; i++) {\n-\tprint \"  \" var_target_int[i] \" = ptr->x_\" var_target_int[i] \";\";\n+\tprint \"  opts->x_\" var_target_int[i] \" = ptr->x_\" var_target_int[i] \";\";\n }\n \n for (i = 0; i < n_target_short; i++) {\n-\tprint \"  \" var_target_short[i] \" = ptr->x_\" var_target_short[i] \";\";\n+\tprint \"  opts->x_\" var_target_short[i] \" = ptr->x_\" var_target_short[i] \";\";\n }\n \n for (i = 0; i < n_target_char; i++) {\n-\tprint \"  \" var_target_char[i] \" = ptr->x_\" var_target_char[i] \";\";\n+\tprint \"  opts->x_\" var_target_char[i] \" = ptr->x_\" var_target_char[i] \";\";\n }\n \n # This must occur after the normal variables in case the code depends on those"}, {"sha": "d27dfc087642c6a927d7ae20db529068c1444262", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -115,6 +115,15 @@ for (i = 0; i < n_opts; i++) {\n \tprint \"#define \" name \" global_options.x_\" name\n \tprint \"#endif\"\n }\n+for (i = 0; i < n_opts; i++) {\n+\tname = static_var(opts[i], flags[i]);\n+\tif (name != \"\") {\n+\t\tprint \"#ifndef GENERATOR_FILE\"\n+\t\tprint \"  \" var_type(flags[i]) \"x_\" name \";\"\n+\t\tprint \"#define x_\" name \" do_not_use\"\n+\t\tprint \"#endif\"\n+\t}\n+}\n print \"#ifndef GENERATOR_FILE\"\n print \"};\"\n print \"extern struct gcc_options global_options;\"\n@@ -258,19 +267,19 @@ print \"};\";\n print \"\";\n print \"\";\n print \"/* Save optimization variables into a structure.  */\"\n-print \"extern void cl_optimization_save (struct cl_optimization *);\";\n+print \"extern void cl_optimization_save (struct cl_optimization *, struct gcc_options *);\";\n print \"\";\n print \"/* Restore optimization variables from a structure.  */\";\n-print \"extern void cl_optimization_restore (struct cl_optimization *);\";\n+print \"extern void cl_optimization_restore (struct gcc_options *, struct cl_optimization *);\";\n print \"\";\n print \"/* Print optimization variables from a structure.  */\";\n print \"extern void cl_optimization_print (FILE *, int, struct cl_optimization *);\";\n print \"\";\n print \"/* Save selected option variables into a structure.  */\"\n-print \"extern void cl_target_option_save (struct cl_target_option *);\";\n+print \"extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *);\";\n print \"\";\n print \"/* Restore selected option variables from a structure.  */\"\n-print \"extern void cl_target_option_restore (struct cl_target_option *);\";\n+print \"extern void cl_target_option_restore (struct gcc_options *, struct cl_target_option *);\";\n print \"\";\n print \"/* Print target option variables from a structure.  */\";\n print \"extern void cl_target_option_print (FILE *, int, struct cl_target_option *);\";"}, {"sha": "09e5b11bdbf1d46254ba3edf96a6c7592dbf6a36", "filename": "gcc/opts-common.c", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -799,28 +799,30 @@ prune_options (struct cl_decoded_option **decoded_options,\n }\n \n /* Handle option DECODED for the language indicated by LANG_MASK,\n-   using the handlers in HANDLERS.  KIND is the diagnostic_t if this\n-   is a diagnostics option, DK_UNSPECIFIED otherwise.  Returns false\n-   if the switch was invalid.  */\n+   using the handlers in HANDLERS and setting fields in OPTS.  KIND is\n+   the diagnostic_t if this is a diagnostics option, DK_UNSPECIFIED\n+   otherwise.  Returns false if the switch was invalid.  */\n \n bool\n-handle_option (const struct cl_decoded_option *decoded,\n+handle_option (struct gcc_options *opts,\n+\t       const struct cl_decoded_option *decoded,\n \t       unsigned int lang_mask, int kind,\n \t       const struct cl_option_handlers *handlers)\n {\n   size_t opt_index = decoded->opt_index;\n   const char *arg = decoded->arg;\n   int value = decoded->value;\n   const struct cl_option *option = &cl_options[opt_index];\n+  void *flag_var = option_flag_var (opt_index, opts);\n   size_t i;\n \n-  if (option->flag_var)\n-    set_option (opt_index, value, arg, kind);\n+  if (flag_var)\n+    set_option (opts, opt_index, value, arg, kind);\n \n   for (i = 0; i < handlers->num_handlers; i++)\n     if (option->flags & handlers->handlers[i].mask)\n       {\n-\tif (!handlers->handlers[i].handler (decoded,\n+\tif (!handlers->handlers[i].handler (opts, decoded,\n \t\t\t\t\t    lang_mask, kind, handlers))\n \t  return false;\n \telse\n@@ -837,14 +839,15 @@ handle_option (const struct cl_decoded_option *decoded,\n    command line.  */\n \n bool\n-handle_generated_option (size_t opt_index, const char *arg, int value,\n+handle_generated_option (struct gcc_options *opts, size_t opt_index,\n+\t\t\t const char *arg, int value,\n \t\t\t unsigned int lang_mask, int kind,\n \t\t\t const struct cl_option_handlers *handlers)\n {\n   struct cl_decoded_option decoded;\n \n   generate_option (opt_index, arg, value, lang_mask, &decoded);\n-  return handle_option (&decoded, lang_mask, kind, handlers);\n+  return handle_option (opts, &decoded, lang_mask, kind, handlers);\n }\n \n /* Fill in *DECODED with an option described by OPT_INDEX, ARG and\n@@ -903,10 +906,11 @@ generate_option_input_file (const char *file,\n }\n \n /* Handle the switch DECODED for the language indicated by LANG_MASK,\n-   using the handlers in *HANDLERS.  */\n+   using the handlers in *HANDLERS and setting fields in OPTS.  */\n \n void\n-read_cmdline_option (struct cl_decoded_option *decoded,\n+read_cmdline_option (struct gcc_options *opts,\n+\t\t     struct cl_decoded_option *decoded,\n \t\t     unsigned int lang_mask,\n \t\t     const struct cl_option_handlers *handlers)\n {\n@@ -959,49 +963,64 @@ read_cmdline_option (struct cl_decoded_option *decoded,\n \n   gcc_assert (!decoded->errors);\n \n-  if (!handle_option (decoded, lang_mask, DK_UNSPECIFIED, handlers))\n+  if (!handle_option (opts, decoded, lang_mask, DK_UNSPECIFIED, handlers))\n     error (\"unrecognized command line option %qs\", opt);\n }\n \n-/* Set any variable for option OPT_INDEX according to VALUE and ARG,\n+/* Set any field in OPTS for option OPT_INDEX according to VALUE and ARG,\n    diagnostic kind KIND.  */\n \n void\n-set_option (int opt_index, int value, const char *arg, int kind)\n+set_option (struct gcc_options *opts, int opt_index, int value,\n+\t    const char *arg, int kind)\n {\n   const struct cl_option *option = &cl_options[opt_index];\n+  void *flag_var = option_flag_var (opt_index, opts);\n \n-  if (!option->flag_var)\n+  if (!flag_var)\n     return;\n \n   switch (option->var_type)\n     {\n     case CLVC_BOOLEAN:\n-\t*(int *) option->flag_var = value;\n+\t*(int *) flag_var = value;\n \tbreak;\n \n     case CLVC_EQUAL:\n-\t*(int *) option->flag_var = (value\n-\t\t\t\t     ? option->var_value\n-\t\t\t\t     : !option->var_value);\n+\t*(int *) flag_var = (value\n+\t\t\t     ? option->var_value\n+\t\t\t     : !option->var_value);\n \tbreak;\n \n     case CLVC_BIT_CLEAR:\n     case CLVC_BIT_SET:\n \tif ((value != 0) == (option->var_type == CLVC_BIT_SET))\n-\t  *(int *) option->flag_var |= option->var_value;\n+\t  *(int *) flag_var |= option->var_value;\n \telse\n-\t  *(int *) option->flag_var &= ~option->var_value;\n-\tif (option->flag_var == &target_flags)\n+\t  *(int *) flag_var &= ~option->var_value;\n+\tif (flag_var == &target_flags)\n \t  target_flags_explicit |= option->var_value;\n \tbreak;\n \n     case CLVC_STRING:\n-\t*(const char **) option->flag_var = arg;\n+\t*(const char **) flag_var = arg;\n \tbreak;\n     }\n \n   if ((diagnostic_t) kind != DK_UNSPECIFIED)\n     diagnostic_classify_diagnostic (global_dc, opt_index, (diagnostic_t) kind,\n \t\t\t\t    UNKNOWN_LOCATION);\n }\n+\n+/* Return the address of the flag variable for option OPT_INDEX in\n+   options structure OPTS, or NULL if there is no flag variable.  */\n+\n+void *\n+option_flag_var (int opt_index, struct gcc_options *opts)\n+{\n+  const struct cl_option *option = &cl_options[opt_index];\n+\n+  if (option->flag_var_offset == (unsigned short) -1)\n+    return NULL;\n+  return (void *)(((char *) opts) + option->flag_var_offset);\n+}"}, {"sha": "2b2071ef594a9e97ff299b43fa4f9b0323f9c12d", "filename": "gcc/opts.c", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -376,7 +376,8 @@ bool flag_warn_unused_result = false;\n const char **in_fnames;\n unsigned num_in_fnames;\n \n-static bool common_handle_option (const struct cl_decoded_option *decoded,\n+static bool common_handle_option (struct gcc_options *opts,\n+\t\t\t\t  const struct cl_decoded_option *decoded,\n \t\t\t\t  unsigned int lang_mask, int kind,\n \t\t\t\t  const struct cl_option_handlers *handlers);\n static void handle_param (const char *);\n@@ -515,10 +516,12 @@ post_handling_callback (const struct cl_decoded_option *decoded ATTRIBUTE_UNUSED\n    handle_option.  */\n \n static bool\n-lang_handle_option (const struct cl_decoded_option *decoded,\n+lang_handle_option (struct gcc_options *opts,\n+\t\t    const struct cl_decoded_option *decoded,\n \t\t    unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t    const struct cl_option_handlers *handlers)\n {\n+  gcc_assert (opts == &global_options);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   return lang_hooks.handle_option (decoded->opt_index, decoded->arg,\n \t\t\t\t   decoded->value, kind, handlers);\n@@ -528,10 +531,12 @@ lang_handle_option (const struct cl_decoded_option *decoded,\n    handle_option.  */\n \n static bool\n-target_handle_option (const struct cl_decoded_option *decoded,\n+target_handle_option (struct gcc_options *opts,\n+\t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n \t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n {\n+  gcc_assert (opts == &global_options);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   gcc_assert (kind == DK_UNSPECIFIED);\n   return targetm.handle_option (decoded->opt_index, decoded->arg,\n@@ -644,7 +649,8 @@ read_cmdline_options (struct cl_decoded_option *decoded_options,\n \t  continue;\n \t}\n \n-      read_cmdline_option (decoded_options + i, lang_mask, handlers);\n+      read_cmdline_option (&global_options, decoded_options + i,\n+\t\t\t   lang_mask, handlers);\n     }\n }\n \n@@ -1254,28 +1260,30 @@ print_filtered_help (unsigned int include_flags,\n \t with an option to be an indication of its current setting.  */\n       if (!quiet_flag)\n \t{\n+\t  void *flag_var = option_flag_var (i, &global_options);\n+\n \t  if (len < (LEFT_COLUMN + 2))\n \t    strcpy (new_help, \"\\t\\t\");\n \t  else\n \t    strcpy (new_help, \"\\t\");\n \n-\t  if (option->flag_var != NULL)\n+\t  if (flag_var != NULL)\n \t    {\n \t      if (option->flags & CL_JOINED)\n \t\t{\n \t\t  if (option->var_type == CLVC_STRING)\n \t\t    {\n-\t\t      if (* (const char **) option->flag_var != NULL)\n+\t\t      if (* (const char **) flag_var != NULL)\n \t\t\tsnprintf (new_help + strlen (new_help),\n \t\t\t\t  sizeof (new_help) - strlen (new_help),\n-\t\t\t\t  * (const char **) option->flag_var);\n+\t\t\t\t  * (const char **) flag_var);\n \t\t    }\n \t\t  else\n \t\t    sprintf (new_help + strlen (new_help),\n-\t\t\t     \"%#x\", * (int *) option->flag_var);\n+\t\t\t     \"%#x\", * (int *) flag_var);\n \t\t}\n \t      else\n-\t\tstrcat (new_help, option_enabled (i)\n+\t\tstrcat (new_help, option_enabled (i, &global_options)\n \t\t\t? _(\"[enabled]\") : _(\"[disabled]\"));\n \t    }\n \n@@ -1423,7 +1431,8 @@ print_specific_help (unsigned int include_flags,\n    DECODED->value assigned to a variable, it happens automatically.  */\n \n static bool\n-common_handle_option (const struct cl_decoded_option *decoded,\n+common_handle_option (struct gcc_options *opts,\n+\t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED,\n \t\t      const struct cl_option_handlers *handlers)\n {\n@@ -1433,6 +1442,7 @@ common_handle_option (const struct cl_decoded_option *decoded,\n   static bool verbose = false;\n   enum opt_code code = (enum opt_code) scode;\n \n+  gcc_assert (opts == &global_options);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n \n   switch (code)\n@@ -2102,7 +2112,7 @@ common_handle_option (const struct cl_decoded_option *decoded,\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */\n-      gcc_assert (cl_options[scode].flag_var);\n+      gcc_assert (option_flag_var (scode, opts));\n       break;\n     }\n \n@@ -2258,61 +2268,66 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg)\n     }\n }\n \n-/* Return 1 if OPTION is enabled, 0 if it is disabled, or -1 if it isn't\n-   a simple on-off switch.  */\n+/* Return 1 if option OPT_IDX is enabled in OPTS, 0 if it is disabled,\n+   or -1 if it isn't a simple on-off switch.  */\n \n int\n-option_enabled (int opt_idx)\n+option_enabled (int opt_idx, void *opts)\n {\n   const struct cl_option *option = &(cl_options[opt_idx]);\n+  struct gcc_options *optsg = (struct gcc_options *) opts;\n+  void *flag_var = option_flag_var (opt_idx, optsg);\n \n-  if (option->flag_var)\n+  if (flag_var)\n     switch (option->var_type)\n       {\n       case CLVC_BOOLEAN:\n-\treturn *(int *) option->flag_var != 0;\n+\treturn *(int *) flag_var != 0;\n \n       case CLVC_EQUAL:\n-\treturn *(int *) option->flag_var == option->var_value;\n+\treturn *(int *) flag_var == option->var_value;\n \n       case CLVC_BIT_CLEAR:\n-\treturn (*(int *) option->flag_var & option->var_value) == 0;\n+\treturn (*(int *) flag_var & option->var_value) == 0;\n \n       case CLVC_BIT_SET:\n-\treturn (*(int *) option->flag_var & option->var_value) != 0;\n+\treturn (*(int *) flag_var & option->var_value) != 0;\n \n       case CLVC_STRING:\n \tbreak;\n       }\n   return -1;\n }\n \n-/* Fill STATE with the current state of option OPTION.  Return true if\n-   there is some state to store.  */\n+/* Fill STATE with the current state of option OPTION in OPTS.  Return\n+   true if there is some state to store.  */\n \n bool\n-get_option_state (int option, struct cl_option_state *state)\n+get_option_state (struct gcc_options *opts, int option,\n+\t\t  struct cl_option_state *state)\n {\n-  if (cl_options[option].flag_var == 0)\n+  void *flag_var = option_flag_var (option, opts);\n+\n+  if (flag_var == 0)\n     return false;\n \n   switch (cl_options[option].var_type)\n     {\n     case CLVC_BOOLEAN:\n     case CLVC_EQUAL:\n-      state->data = cl_options[option].flag_var;\n+      state->data = flag_var;\n       state->size = sizeof (int);\n       break;\n \n     case CLVC_BIT_CLEAR:\n     case CLVC_BIT_SET:\n-      state->ch = option_enabled (option);\n+      state->ch = option_enabled (option, opts);\n       state->data = &state->ch;\n       state->size = 1;\n       break;\n \n     case CLVC_STRING:\n-      state->data = *(const char **) cl_options[option].flag_var;\n+      state->data = *(const char **) flag_var;\n       if (state->data == 0)\n \tstate->data = \"\";\n       state->size = strlen ((const char *) state->data) + 1;\n@@ -2369,7 +2384,8 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \n \t  /* -Werror=foo implies -Wfoo.  */\n \t  if (option->var_type == CLVC_BOOLEAN)\n-\t    handle_generated_option (option_index, NULL, value, lang_mask,\n+\t    handle_generated_option (&global_options, option_index,\n+\t\t\t\t     NULL, value, lang_mask,\n \t\t\t\t     (int)kind, handlers);\n \n \t  if (warning_as_error_callback)"}, {"sha": "6ede04d7b50379380b0e5c22815b0e600c0aa762", "filename": "gcc/opts.h", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -53,7 +53,7 @@ struct cl_option\n   unsigned char opt_len;\n   int neg_index;\n   unsigned int flags;\n-  void *flag_var;\n+  unsigned short flag_var_offset;\n   enum cl_var_type var_type;\n   int var_value;\n };\n@@ -156,7 +156,8 @@ struct cl_decoded_option\n struct cl_option_handler_func\n {\n   /* The function called to handle the option.  */\n-  bool (*handler) (const struct cl_decoded_option *decoded,\n+  bool (*handler) (struct gcc_options *opts,\n+\t\t   const struct cl_decoded_option *decoded,\n \t\t   unsigned int lang_mask, int kind,\n \t\t   const struct cl_option_handlers *handlers);\n \n@@ -209,21 +210,27 @@ extern void decode_cmdline_options_to_array (unsigned int argc,\n extern void decode_options (unsigned int argc, const char **argv,\n \t\t\t    struct cl_decoded_option **decoded_options,\n \t\t\t    unsigned int *decoded_options_count);\n-extern int option_enabled (int opt_idx);\n-extern bool get_option_state (int, struct cl_option_state *);\n-extern void set_option (int opt_index, int value, const char *arg, int);\n-bool handle_option (const struct cl_decoded_option *decoded,\n+extern int option_enabled (int opt_idx, void *opts);\n+extern bool get_option_state (struct gcc_options *, int,\n+\t\t\t      struct cl_option_state *);\n+extern void set_option (struct gcc_options *opts, int opt_index, int value,\n+\t\t\tconst char *arg, int);\n+extern void *option_flag_var (int opt_index, struct gcc_options *opts);\n+bool handle_option (struct gcc_options *opts,\n+\t\t    const struct cl_decoded_option *decoded,\n \t\t    unsigned int lang_mask, int kind,\n \t\t    const struct cl_option_handlers *handlers);\n-bool handle_generated_option (size_t opt_index, const char *arg, int value,\n+bool handle_generated_option (struct gcc_options *opts,\n+\t\t\t      size_t opt_index, const char *arg, int value,\n \t\t\t      unsigned int lang_mask, int kind,\n \t\t\t      const struct cl_option_handlers *handlers);\n void generate_option (size_t opt_index, const char *arg, int value,\n \t\t      unsigned int lang_mask,\n \t\t      struct cl_decoded_option *decoded);\n void generate_option_input_file (const char *file,\n \t\t\t\t struct cl_decoded_option *decoded);\n-extern void read_cmdline_option (struct cl_decoded_option *decoded,\n+extern void read_cmdline_option (struct gcc_options *opts,\n+\t\t\t\t struct cl_decoded_option *decoded,\n \t\t\t\t unsigned int lang_mask,\n \t\t\t\t const struct cl_option_handlers *handlers);\n extern void register_warning_as_error_callback (void (*callback) (int));"}, {"sha": "850cbf548a0fbf1ff59e44b31b0a50776b90a864", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -174,22 +174,6 @@ enum graph_dump_types graph_dump_format;\n \n const char *asm_file_name;\n \n-/* Nonzero means do optimizations.  -O.\n-   Particular numeric values stand for particular amounts of optimization;\n-   thus, -O2 stores 2 here.  However, the optimizations beyond the basic\n-   ones are not controlled directly by this variable.  Instead, they are\n-   controlled by individual `flag_...' variables that are defaulted\n-   based on this variable.  */\n-\n-int optimize = 0;\n-\n-/* Nonzero means optimize for size.  -Os.\n-   The only valid values are zero and nonzero. When optimize_size is\n-   nonzero, optimize defaults to 2, but certain individual code\n-   bloating optimizations are disabled.  */\n-\n-int optimize_size = 0;\n-\n /* True if this is the lto front end.  This is used to disable\n    gimple generation and lowering passes that are normally run on the\n    output of a front end.  These passes must be bypassed for lto since\n@@ -1316,7 +1300,7 @@ print_switch_values (print_switch_fn_type print_fn)\n \n   for (j = 0; j < cl_options_count; j++)\n     if ((cl_options[j].flags & CL_REPORT)\n-\t&& option_enabled (j) > 0)\n+\t&& option_enabled (j, &global_options) > 0)\n       pos = print_single_switch (print_fn, pos,\n \t\t\t\t SWITCH_TYPE_ENABLED, cl_options[j].opt_text);\n \n@@ -1395,10 +1379,10 @@ option_affects_pch_p (int option, struct cl_option_state *state)\n {\n   if ((cl_options[option].flags & CL_TARGET) == 0)\n     return false;\n-  if (cl_options[option].flag_var == &target_flags)\n+  if (option_flag_var (option, &global_options) == &target_flags)\n     if (targetm.check_pch_target_flags)\n       return false;\n-  return get_option_state (option, state);\n+  return get_option_state (&global_options, option, state);\n }\n \n /* Default version of get_pch_validity.\n@@ -1686,6 +1670,7 @@ general_init (const char *argv0)\n   global_dc->show_column = flag_show_column;\n   global_dc->internal_error = plugins_internal_error_function;\n   global_dc->option_enabled = option_enabled;\n+  global_dc->option_state = &global_options;\n   global_dc->option_name = option_name;\n \n   /* Trap fatal signals, e.g. SIGSEGV, and convert them to ICE messages.  */"}, {"sha": "4b3f6e6c2aee9dd6032485c9cbd4f704c1bfaeee", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46625112d2613f6573f307c99b8e10c970748e15/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=46625112d2613f6573f307c99b8e10c970748e15", "patch": "@@ -10750,7 +10750,8 @@ build_optimization_node (void)\n \n   /* Use the cache of optimization nodes.  */\n \n-  cl_optimization_save (TREE_OPTIMIZATION (cl_optimization_node));\n+  cl_optimization_save (TREE_OPTIMIZATION (cl_optimization_node),\n+\t\t\t&global_options);\n \n   slot = htab_find_slot (cl_option_hash_table, cl_optimization_node, INSERT);\n   t = (tree) *slot;\n@@ -10777,7 +10778,8 @@ build_target_option_node (void)\n \n   /* Use the cache of optimization nodes.  */\n \n-  cl_target_option_save (TREE_TARGET_OPTION (cl_target_option_node));\n+  cl_target_option_save (TREE_TARGET_OPTION (cl_target_option_node),\n+\t\t\t &global_options);\n \n   slot = htab_find_slot (cl_option_hash_table, cl_target_option_node, INSERT);\n   t = (tree) *slot;"}]}