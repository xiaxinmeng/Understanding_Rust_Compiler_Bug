{"sha": "b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjZjJlNDJiNWQzMGJkMzhiMDVjMTYzNjVhYjhlNWM5OGY3ZTEyYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-15T20:22:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-15T20:22:55Z"}, "message": "* decl.c (start_enum): Do compare dependent underlying type.\n\nFrom-SVN: r261655", "tree": {"sha": "6b0fc7bc3460fb90ade3e7d4458a843a888ead91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b0fc7bc3460fb90ade3e7d4458a843a888ead91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582f844c6e30e59ac5641a04cfb7fdd1aff78c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582f844c6e30e59ac5641a04cfb7fdd1aff78c66"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "d8ce66eb22c401187b60e0f4339867575c4c287d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "patch": "@@ -1,5 +1,7 @@\n 2018-06-15  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (start_enum): Do compare dependent underlying type.\n+\n \tPR c++/82882 - ICE with lambda in template default argument.\n \t* lambda.c (record_null_lambda_scope): New.\n \t* pt.c (tsubst_lambda_expr): Use it."}, {"sha": "d7df01289db4dc5c2667b0f5e0ff7dc48dac8b72", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "patch": "@@ -14131,8 +14131,6 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n \t  enumtype = error_mark_node;\n \t}\n       else if (underlying_type && ENUM_UNDERLYING_TYPE (enumtype)\n-\t       && !dependent_type_p (underlying_type)\n-\t       && !dependent_type_p (ENUM_UNDERLYING_TYPE (enumtype))\n \t       && !same_type_p (underlying_type,\n \t\t\t\tENUM_UNDERLYING_TYPE (enumtype)))\n \t{\n@@ -14157,7 +14155,7 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n \n       /* enumtype may be an ENUMERAL_TYPE if this is a redefinition\n          of an opaque enum, or an opaque enum of an already defined\n-\t enumeration (C++0x only).\n+\t enumeration (C++11).\n \t In any other case, it'll be NULL_TREE. */\n       if (!enumtype)\n \t{\n@@ -14166,14 +14164,9 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n \t}\n       prevtype = enumtype;\n \n-      /* Do not push the decl more than once, unless we need to\n-\t compare underlying types at instantiation time */\n+      /* Do not push the decl more than once.  */\n       if (!enumtype\n-\t  || TREE_CODE (enumtype) != ENUMERAL_TYPE\n-\t  || (underlying_type\n-\t      && dependent_type_p (underlying_type))\n-\t  || (ENUM_UNDERLYING_TYPE (enumtype)\n-\t      && dependent_type_p (ENUM_UNDERLYING_TYPE (enumtype))))\n+\t  || TREE_CODE (enumtype) != ENUMERAL_TYPE)\n \t{\n \t  enumtype = cxx_make_type (ENUMERAL_TYPE);\n \t  enumtype = pushtag (name, enumtype, /*tag_scope=*/ts_current);"}, {"sha": "2bda0f11d1d96a31923fcd3b9c31b2585e4e0633", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "patch": "@@ -112,7 +112,7 @@ enum scope_kind {\n \t\t\tof an if or switch statement.  */\n   sk_function_parms, /* The scope containing function parameters.  */\n   sk_class,\t     /* The scope containing the members of a class.  */\n-  sk_scoped_enum,    /* The scope containing the enumertors of a C++0x\n+  sk_scoped_enum,    /* The scope containing the enumerators of a C++11\n                         scoped enumeration.  */\n   sk_namespace,\t     /* The scope containing the members of a\n \t\t\tnamespace, including the global scope.  */"}, {"sha": "e5d8e49537c23cafcd4750bad30177b21c643279", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum10.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C?ref=b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "patch": "@@ -6,7 +6,7 @@ template<typename T> struct S1\n     enum E : T;   // { dg-message \"previous definition\" }\n     enum E : int;     // { dg-error \"different underlying type\" }\n };\n-template struct S1<short>; // { dg-message \"required from here\" }\n+template struct S1<short>;\n \n template<typename T> struct S2\n {\n@@ -17,8 +17,8 @@ template struct S2<short>;\n \n template<typename T1, typename T2> struct S3\n {\n-    enum E : T1;\n-    enum E : T2;\n+    enum E : T1;\t\t// { dg-message \"previous definition\" }\n+    enum E : T2;\t\t// { dg-error \"different underlying type\" }\n };\n template struct S3<short,short>;\n \n@@ -27,4 +27,4 @@ template<typename T1, typename T2> struct S4\n     enum E : T1; // { dg-message \"previous definition\" }\n     enum E : T2; // { dg-error \"different underlying type\" }\n };\n-template struct S4<short,char>; // { dg-message \"required from here\" }\n+template struct S4<short,char>;"}, {"sha": "d43bbc1caf2c09d954756946de64f7c270fa21ba", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum7.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum7.C?ref=b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "patch": "@@ -4,8 +4,6 @@\n template<typename T> struct S1\n {\n     enum E1 : int;\n-    enum E1 : T;\n-    enum class E2 : int;\n     enum class E2 : T;\n };\n "}, {"sha": "3f06cd4bd670bcca53d263a99892291fd8c1451a", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum8.C", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C?ref=b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "patch": "@@ -1,22 +1,19 @@\n // { dg-do compile { target c++11 } }\n \n-//This instatiation is ok\n template<typename T> struct S1\n {\n-    enum E : int;\n-    enum E : T;\n+    enum E : int;   // { dg-message \"previous definition\" }\n+    enum E : T;     // { dg-error \"different underlying type\" }\n };\n template struct S1<int>; //ok\n \n-//This error is diagnosed at instantiation time\n template<typename T> struct S2\n {\n     enum E : int;   // { dg-message \"previous definition\" }\n     enum E : T;     // { dg-error \"different underlying type\" }\n };\n-template struct S2<short>; // { dg-message \"required from here\" }\n+template struct S2<short>;\n \n-//This error is diagnosed at compilation time\n template<typename T> struct S3\n {\n     enum E : int;   // { dg-message \"previous definition\" }"}]}