{"sha": "7b7bdf67e021444850352aebe14b288aca4c29c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3YmRmNjdlMDIxNDQ0ODUwMzUyYWViZTE0YjI4OGFjYTRjMjljNw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-09-24T20:24:11Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-09-24T20:24:11Z"}, "message": "re PR fortran/33538 (bootstrap break in fortran on *-apple-darwin r128671)\n\n\tPR fortran/33538\n\t* scanner.c, parse.c, gfortran.h: Revert revision 128671.\n\nFrom-SVN: r128724", "tree": {"sha": "a958df7338069ae35548c9829c1e33474fb581be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a958df7338069ae35548c9829c1e33474fb581be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b7bdf67e021444850352aebe14b288aca4c29c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7bdf67e021444850352aebe14b288aca4c29c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7bdf67e021444850352aebe14b288aca4c29c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7bdf67e021444850352aebe14b288aca4c29c7/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d20fa91b82080984cedf14c7f06b55f646be8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d20fa91b82080984cedf14c7f06b55f646be8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d20fa91b82080984cedf14c7f06b55f646be8b"}], "stats": {"total": 75, "additions": 7, "deletions": 68}, "files": [{"sha": "00f2cb9176c16a386e716c2aac949ba147e0543a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7b7bdf67e021444850352aebe14b288aca4c29c7", "patch": "@@ -1,3 +1,8 @@\n+2007-09-24  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33538\n+\t* scanner.c, parse.c, gfortran.h: Revert revision 128671.\n+\n 2007-09-23  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33528"}, {"sha": "42002cee21e3dbdc9e3af90d0e28b7686b05b7f0", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7b7bdf67e021444850352aebe14b288aca4c29c7", "patch": "@@ -1935,7 +1935,6 @@ int gfc_at_bol (void);\n int gfc_at_eol (void);\n void gfc_advance_line (void);\n int gfc_check_include (void);\n-int gfc_define_undef_line (void);\n \n void gfc_skip_comments (void);\n int gfc_next_char_literal (int);"}, {"sha": "a6672f46ca6731829485ec018220b940cd92dd58", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=7b7bdf67e021444850352aebe14b288aca4c29c7", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gfortran.h\"\n #include \"match.h\"\n #include \"parse.h\"\n-#include \"debug.h\"\n \n /* Current statement label.  Zero means no statement label.  Because new_st\n    can get wiped during statement matching, we have to keep it separate.  */\n@@ -674,9 +673,6 @@ next_statement (void)\n \t  break;\n \t}\n \n-      if (gfc_define_undef_line ())\n-\tcontinue;\n-\n       st = (gfc_current_form == FORM_FIXED) ? next_fixed () : next_free ();\n \n       if (st != ST_NONE)\n@@ -3223,11 +3219,6 @@ gfc_parse_file (void)\n   gfc_statement st;\n   locus prog_locus;\n \n-  /* If the debugger wants the name of the main source file,\n-     we give it.  */\n-  if (debug_hooks->start_end_main_source_file)\n-    (*debug_hooks->start_source_file) (0, gfc_source_file);\n-\n   top.state = COMP_NONE;\n   top.sym = NULL;\n   top.previous = NULL;\n@@ -3338,9 +3329,6 @@ gfc_parse_file (void)\n   goto loop;\n \n done:\n-  if (debug_hooks->start_end_main_source_file)\n-    (*debug_hooks->end_source_file) (0);\n-\n   return SUCCESS;\n \n duplicate_main:"}, {"sha": "682c60c99ac89fa0cb94941cc2ceb4efefd706ae", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b7bdf67e021444850352aebe14b288aca4c29c7/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=7b7bdf67e021444850352aebe14b288aca4c29c7", "patch": "@@ -45,8 +45,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"gfortran.h\"\n #include \"toplev.h\"\n-#include \"debug.h\"\n-#include \"flags.h\"\n \n /* Structure for holding module and include file search path.  */\n typedef struct gfc_directorylist\n@@ -314,20 +312,6 @@ gfc_advance_line (void)\n       return;\n     } \n \n-  if (gfc_current_locus.lb->next)\n-    {\n-      if (gfc_current_locus.lb->file->next\n-\t  && gfc_current_locus.lb->file->up == gfc_current_locus.lb->file->next)\n-\t/* We exit from an included file. */\n-\t(*debug_hooks->end_source_file)\n-\t\t(gfc_linebuf_linenum (gfc_current_locus.lb->next));\n-      else if (gfc_current_locus.lb->next->file != gfc_current_locus.lb->file)\n-\t/* We enter into a new file.  */\n-\t(*debug_hooks->start_source_file)\n-\t\t(gfc_linebuf_linenum (gfc_current_locus.lb),\n-\t\t gfc_current_locus.lb->next->file->filename);\n-    }\n-\n   gfc_current_locus.lb = gfc_current_locus.lb->next;\n \n   if (gfc_current_locus.lb != NULL)\t \n@@ -388,31 +372,6 @@ skip_comment_line (void)\n }\n \n \n-int\n-gfc_define_undef_line (void)\n-{\n-  /* All lines beginning with '#' are either #define or #undef.  */\n-  if (! (debug_info_level == DINFO_LEVEL_VERBOSE\n-\t && (write_symbols == DWARF2_DEBUG\n-\t     || write_symbols == VMS_AND_DWARF2_DEBUG))\n-      || gfc_peek_char () != '#')\n-    return 0;\n-\n-  if (strncmp (gfc_current_locus.nextc, \"#define \", 8) == 0)\n-    (*debug_hooks->define) (gfc_linebuf_linenum (gfc_current_locus.lb),\n-\t\t\t    &(gfc_current_locus.nextc[8]));\n-\n-  if (strncmp (gfc_current_locus.nextc, \"#undef \", 7) == 0)\n-    (*debug_hooks->undef) (gfc_linebuf_linenum (gfc_current_locus.lb),\n-\t\t\t   &(gfc_current_locus.nextc[7]));\n-\n-  /* Skip the rest of the line.  */\n-  skip_comment_line ();\n-\n-  return 1;\n-}\n-\n-\n /* Comment lines are null lines, lines containing only blanks or lines\n    on which the first nonblank line is a '!'.\n    Return true if !$ openmp conditional compilation sentinel was\n@@ -1546,20 +1505,8 @@ load_file (const char *filename, bool initial)\n \n       if (line[0] == '#')\n \t{\n-\t  /* When -g3 is specified, it's possible that we emit #define\n-\t     and #undef lines, which we need to pass to the middle-end\n-\t     so that it can emit correct debug info.  */\n-\t  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-\t      && (write_symbols == DWARF2_DEBUG\n-\t\t  || write_symbols == VMS_AND_DWARF2_DEBUG)\n-\t      && (strncmp (line, \"#define \", 8) == 0\n-\t\t  || strncmp (line, \"#undef \", 7) == 0))\n-\t    ;\n-\t  else\n-\t    {\n-\t      preprocessor_line (line);\n-\t      continue;\n-\t    }\n+\t  preprocessor_line (line);\n+\t  continue;\n \t}\n \n       /* Preprocessed files have preprocessor lines added before the byte"}]}