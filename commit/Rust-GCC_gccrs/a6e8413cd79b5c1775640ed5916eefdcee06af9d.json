{"sha": "a6e8413cd79b5c1775640ed5916eefdcee06af9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlODQxM2NkNzliNWMxNzc1NjQwZWQ1OTE2ZWVmZGNlZTA2YWY5ZA==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2007-12-13T10:19:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:19:55Z"}, "message": "adaint.h: (__gnat_plist_init): Not defined for RTX.\n\n2007-12-06  Jose Ruiz  <ruiz@adacore.com>\n\n\t* adaint.h: (__gnat_plist_init): Not defined for RTX.\n\n\t* initialize.c (__gnat_initialize): Do not call __gnat_plist_init for\n\tRTX systems.\n\n\t* Makefile.in: Add new files s-tasinf-linux.ads and s-tasinf-linux.adb.\n\t(LIBGNAT_TARGET_PAIRS, MISCLIB, THREADSLIB,\n\tEXTRA_GNATRTL_NONTASKING_OBJS, EXTRA_GNATRTL_TASKING_OBJS,\n\tGNATLIB_SHARED for RTX run time): Use the versions required by RTX.\n\n\t* mingw32.h: \n\tDo not define GNAT_UNICODE_SUPPORT for RTX since it is not supported.\n\n\t* sysdep.c (winflush_function for RTX): Procedure that does nothing\n\tsince we only have problems with Windows 95/98, which are not\n\tsupported by RTX.\n\t(__gnat_ttyname): Return the empty string on Nucleus, just as\n\tdone on vxworks.\n\nFrom-SVN: r130816", "tree": {"sha": "824f194b17e9e4fc20003b76cd51c67d9f3feadd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824f194b17e9e4fc20003b76cd51c67d9f3feadd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6e8413cd79b5c1775640ed5916eefdcee06af9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e8413cd79b5c1775640ed5916eefdcee06af9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e8413cd79b5c1775640ed5916eefdcee06af9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e8413cd79b5c1775640ed5916eefdcee06af9d/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "561b58498765f443cf6905b7ee246af5a1a0f626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561b58498765f443cf6905b7ee246af5a1a0f626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561b58498765f443cf6905b7ee246af5a1a0f626"}], "stats": {"total": 166, "additions": 110, "deletions": 56}, "files": [{"sha": "d9792ca4744aa8d4e5c6a56f04f6c48bafdd28ff", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 73, "deletions": 18, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=a6e8413cd79b5c1775640ed5916eefdcee06af9d", "patch": "@@ -418,6 +418,9 @@ ifeq ($(strip $(filter-out m68k% wrs vx%,$(targ))),)\n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o\n \n+  EXTRA_LIBGNAT_SRCS+=vx_stack_info.c\n+  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n+\n   ifeq ($(strip $(filter-out yes,$(TRACE))),)\n     LIBGNAT_TARGET_PAIRS += \\\n     s-traces.adb<s-traces-default.adb \\\n@@ -488,6 +491,9 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(targ))),)\n   endif\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o\n+\n+  EXTRA_LIBGNAT_SRCS+=vx_stack_info.c\n+  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n endif\n \n # vxworksae / vxworks 653\n@@ -572,6 +578,9 @@ ifeq ($(strip $(filter-out sparc% wrs vx%,$(targ))),)\n \n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o\n+\n+  EXTRA_LIBGNAT_SRCS+=vx_stack_info.c\n+  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n endif\n \n ifeq ($(strip $(filter-out %86 wrs vxworks,$(targ))),)\n@@ -637,6 +646,9 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(targ))),)\n   endif\n \n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o\n+\n+  EXTRA_LIBGNAT_SRCS+=vx_stack_info.c\n+  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n endif\n \n ifeq ($(strip $(filter-out arm% coff wrs vx%,$(targ))),)\n@@ -669,6 +681,9 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(targ))),)\n \n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o\n+\n+  EXTRA_LIBGNAT_SRCS+=vx_stack_info.c\n+  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n endif\n \n ifeq ($(strip $(filter-out mips% wrs vx%,$(targ))),)\n@@ -701,6 +716,9 @@ ifeq ($(strip $(filter-out mips% wrs vx%,$(targ))),)\n \n   EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o\n+\n+  EXTRA_LIBGNAT_SRCS+=vx_stack_info.c\n+  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n endif\n \n ifeq ($(strip $(filter-out sparc% sun solaris%,$(targ))),)\n@@ -843,6 +861,8 @@ ifeq ($(strip $(filter-out %86 linux%,$(arch) $(osys))),)\n     g-soccon.ads<g-soccon-linux-x86.ads \\\n     s-osinte.adb<s-osinte-posix.adb \\\n     s-osinte.ads<s-osinte-linux.ads \\\n+    s-tasinf.ads<s-tasinf-linux.ads \\\n+    s-tasinf.adb<s-tasinf-linux.adb \\\n     s-taprop.adb<s-taprop-linux.adb\n \n     EH_MECHANISM=-gcc\n@@ -925,6 +945,8 @@ ifeq ($(strip $(filter-out s390% linux%,$(arch) $(osys))),)\n     s-osinte.ads<s-osinte-linux.ads \\\n     s-osprim.adb<s-osprim-posix.adb \\\n     s-taprop.adb<s-taprop-linux.adb \\\n+    s-tasinf.ads<s-tasinf-linux.ads \\\n+    s-tasinf.adb<s-tasinf-linux.adb \\\n     s-taspri.ads<s-taspri-posix.ads \\\n     s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n     system.ads<system-linux-s390x.ads\n@@ -937,6 +959,8 @@ ifeq ($(strip $(filter-out s390% linux%,$(arch) $(osys))),)\n     s-osinte.ads<s-osinte-linux.ads \\\n     s-osprim.adb<s-osprim-posix.adb \\\n     s-taprop.adb<s-taprop-linux.adb \\\n+    s-tasinf.ads<s-tasinf-linux.ads \\\n+    s-tasinf.adb<s-tasinf-linux.adb \\\n     s-taspri.ads<s-taspri-posix.ads \\\n     s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n     system.ads<system-linux-s390.ads\n@@ -1175,7 +1199,7 @@ ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n   s-osinte.adb<s-osinte-vms-ia64.adb \\\n   s-osinte.ads<s-osinte-vms-ia64.ads \\\n   s-vaflop.adb<s-vaflop-vms-ia64.adb \\\n-  system.ads<system-vms_64.ads\n+  system.ads<system-vms-ia64.ads\n \n   LIBGNAT_TARGET_PAIRS_AUX2 = \\\n   s-parame.ads<s-parame-vms-ia64.ads\n@@ -1222,6 +1246,7 @@ endif\n   i-cpoint.ads<i-cpoint-vms_64.ads \\\n   i-cpoint.adb<i-cpoint-vms_64.adb \\\n   i-cstrea.adb<i-cstrea-vms.adb \\\n+  i-forbla.ads<i-forbla-unimplemented.ads \\\n   s-inmaop.adb<s-inmaop-vms.adb \\\n   s-interr.adb<s-interr-vms.adb \\\n   s-intman.adb<s-intman-vms.adb \\\n@@ -1276,19 +1301,11 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-dirval.adb<a-dirval-mingw.adb \\\n   a-excpol.adb<a-excpol-abort.adb \\\n-  a-exetim.adb<a-exetim-mingw.adb \\\n-  a-exetim.ads<a-exetim-mingw.ads \\\n-  a-intnam.ads<a-intnam-mingw.ads \\\n   a-numaux.adb<a-numaux-x86.adb \\\n   a-numaux.ads<a-numaux-x86.ads \\\n   s-gloloc.adb<s-gloloc-mingw.adb \\\n   s-inmaop.adb<s-inmaop-dummy.adb \\\n-  s-interr.adb<s-interr-sigaction.adb \\\n-  s-intman.adb<s-intman-mingw.adb \\\n   s-memory.adb<s-memory-mingw.adb \\\n-  s-osinte.ads<s-osinte-mingw.ads \\\n-  s-osprim.adb<s-osprim-mingw.adb \\\n-  s-taprop.adb<s-taprop-mingw.adb \\\n   s-taspri.ads<s-taspri-mingw.ads \\\n   s-tasinf.adb<s-tasinf-mingw.adb \\\n   s-tasinf.ads<s-tasinf-mingw.ads \\\n@@ -1297,24 +1314,50 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n   g-socthi.adb<g-socthi-mingw.adb \\\n   g-stsifd.adb<g-stsifd-sockets.adb \\\n   g-soccon.ads<g-soccon-mingw.ads \\\n-  g-soliop.ads<g-soliop-mingw.ads \\\n-  system.ads<system-mingw.ads\n+  g-soliop.ads<g-soliop-mingw.ads\n+\n+  ifeq ($(strip $(filter-out rtx_w32 rtx_rtss,$(THREAD_KIND))),)\n+    LIBGNAT_TARGET_PAIRS += \\\n+    s-intman.adb<s-intman-dummy.adb \\\n+    s-osinte.ads<s-osinte-rtx.ads \\\n+    s-osprim.adb<s-osprim-rtx.adb \\\n+    s-taprop.adb<s-taprop-rtx.adb \\\n+    system.ads<system-rtx.ads\n+\n+    MISCLIB = -lwsock32 -lrtapi_w32\n+    THREADSLIB=-lrtapi_w32\n+  else\n+    LIBGNAT_TARGET_PAIRS += \\\n+    a-exetim.adb<a-exetim-mingw.adb \\\n+    a-exetim.ads<a-exetim-mingw.ads \\\n+    a-intnam.ads<a-intnam-mingw.ads \\\n+    s-interr.adb<s-interr-sigaction.adb \\\n+    s-intman.adb<s-intman-mingw.adb \\\n+    s-osinte.ads<s-osinte-mingw.ads \\\n+    s-osprim.adb<s-osprim-mingw.adb \\\n+    s-taprop.adb<s-taprop-mingw.adb \\\n+    system.ads<system-mingw.ads\n+\n+    EXTRA_GNATRTL_NONTASKING_OBJS = g-regist.o\n+    EXTRA_GNATRTL_TASKING_OBJS=a-exetim.o\n+\n+    MISCLIB = -lwsock32\n+\n+    # ??? This will be replaced by gnatlib-shared-dual-win32 when GNAT\n+    # auto-import support for array/record will be done.\n+    GNATLIB_SHARED = gnatlib-shared-win32\n+  endif\n \n   TOOLS_TARGET_PAIRS= \\\n   mlib-tgt-specific.adb<mlib-tgt-mingw.adb \\\n   indepsw.adb<indepsw-mingw.adb\n \n-  MISCLIB = -lwsock32\n+  EH_MECHANISM=-gcc\n   GMEM_LIB = gmemlib\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n   EXTRA_GNATTOOLS = ../../gnatdll$(exeext)\n   EXTRA_GNATMAKE_OBJS = mdll.o mdll-utl.o mdll-fil.o\n-  EXTRA_GNATRTL_NONTASKING_OBJS = g-regist.o\n-  EXTRA_GNATRTL_TASKING_OBJS = a-exetim.o\n   soext = .dll\n-# ??? This will be replaced by gnatlib-shared-dual-win32 when GNAT auto-import\n-# support for array/record will be done.\n-  GNATLIB_SHARED = gnatlib-shared-win32\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n@@ -1328,6 +1371,8 @@ ifeq ($(strip $(filter-out powerpc% linux%,$(arch) $(osys))),)\n   s-osinte.ads<s-osinte-linux.ads \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-linux-ppc.ads\n@@ -1353,6 +1398,8 @@ ifeq ($(strip $(filter-out sparc% linux%,$(arch) $(osys))),)\n   s-osinte.ads<s-osinte-linux.ads \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-linux-sparc.ads\n@@ -1378,6 +1425,8 @@ ifeq ($(strip $(filter-out hppa% linux%,$(arch) $(osys))),)\n   s-osinte.ads<s-osinte-linux-hppa.ads \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-linux-hppa.ads\n@@ -1431,6 +1480,8 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   s-osinte.adb<s-osinte-posix.adb \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   system.ads<system-linux-ia64.ads\n@@ -1457,6 +1508,8 @@ ifeq ($(strip $(filter-out alpha% linux%,$(arch) $(osys))),)\n   s-osinte.adb<s-osinte-posix.adb \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   system.ads<system-linux-alpha.ads\n@@ -1485,6 +1538,8 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n   s-osinte.adb<s-osinte-posix.adb \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-linux.adb \\\n+  s-tasinf.ads<s-tasinf-linux.ads \\\n+  s-tasinf.adb<s-tasinf-linux.adb \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   system.ads<system-linux-x86_64.ads\n@@ -1631,7 +1686,6 @@ ifeq ($(TOOLSCASE),cross)\n   vpath %.h   ../\n endif\n \n-\n ../../gnatchop$(exeext): \n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatchop --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatchop \n@@ -2127,6 +2181,7 @@ socket.o  : socket.c gsocket.h\n sysdep.o  : sysdep.c\n raise-gcc.o : raise-gcc.c raise.h\n raise.o   : raise.c raise.h\n+vx_stack_info.o : vx_stack_info.c\n \n gen-soccon: gen-soccon.c gsocket.h\n \t$(CC) $(ALL_CFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "77724cdd7947e73e4e000edf1ab9185c09621dba", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=a6e8413cd79b5c1775640ed5916eefdcee06af9d", "patch": "@@ -168,7 +168,7 @@ extern int    __gnat_dup2\t\t\t   (int, int);\n extern void   __gnat_os_filename                   (char *, char *, char *,\n \t\t\t\t\t\t    int *, char *, int *);\n \n-#ifdef __MINGW32__\n+#if defined (__MINGW32__) && !defined (RTX)\n extern void   __gnat_plist_init                    (void);\n #endif\n "}, {"sha": "a06e98ece65fefa5ca56e375efba6d57b32bde4e", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=a6e8413cd79b5c1775640ed5916eefdcee06af9d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -59,9 +59,14 @@\n #include <windows.h>\n \n extern void __gnat_init_float (void);\n-extern void __gnat_plist_init (void);\n extern void __gnat_install_SEH_handler (void *);\n \n+#ifndef RTX\n+/* Do not define for RTX since it is only used for creating child processes\n+   which is not supported in RTX. */\n+extern void __gnat_plist_init (void);\n+#endif\n+\n void\n __gnat_initialize (void *eh)\n {\n@@ -71,9 +76,11 @@ __gnat_initialize (void *eh)\n       given that we have set Max_Digits etc with this in mind */\n    __gnat_init_float ();\n \n+#ifndef RTX\n    /* Initialize a lock for a process handle list - see adaint.c for the\n       implementation of __gnat_portable_no_block_spawn, __gnat_portable_wait */\n    __gnat_plist_init();\n+#endif\n \n    /* Note that we do not activate this for the compiler itself to avoid a\n       bootstrap path problem.  Older version of gnatbind will generate a call"}, {"sha": "8018e14986ce7e6117d3093d455b50be7bf9b1b2", "filename": "gcc/ada/mingw32.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmingw32.h?ref=a6e8413cd79b5c1775640ed5916eefdcee06af9d", "patch": "@@ -41,9 +41,10 @@\n    version. It is not possible to use it with previous version due to a bug\n    in the MingW runtime.  */\n \n-#if ((__MINGW32_MAJOR_VERSION == 3 \\\n+#if (((__MINGW32_MAJOR_VERSION == 3 \\\n \t\t   && __MINGW32_MINOR_VERSION >= 9) \\\n-     || (__MINGW32_MAJOR_VERSION >= 4))\n+     || (__MINGW32_MAJOR_VERSION >= 4)) \\\n+     && !defined (RTX))\n #define GNAT_UNICODE_SUPPORT\n \n #else"}, {"sha": "6aca196af76e40493abf501909b3c6bb5a6ee9e8", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e8413cd79b5c1775640ed5916eefdcee06af9d/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=a6e8413cd79b5c1775640ed5916eefdcee06af9d", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2006, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 1992-2007, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -213,6 +213,23 @@ __gnat_ttyname (int filedes)\n    Calling FlushConsoleInputBuffer just after getch() fix the bug under\n    95/98. */\n \n+#ifdef RTX\n+\n+static void winflush_nt (void);\n+\n+/* winflush_function will do nothing since we only have problems with Windows\n+   95/98 which are not supported by RTX. */\n+\n+static void (*winflush_function) (void) = winflush_nt;\n+\n+static void\n+winflush_nt (void)\n+{\n+  /* Does nothing as there is no problem under NT.  */\n+}\n+\n+#else\n+\n static void winflush_init (void);\n \n static void winflush_95 (void);\n@@ -279,6 +296,8 @@ __gnat_is_windows_xp (void)\n \n #endif\n \n+#endif\n+\n #else\n \n static const char *mode_read_text = \"r\";\n@@ -309,15 +328,13 @@ __gnat_set_text_mode (int handle ATTRIBUTE_UNUSED)\n char *\n __gnat_ttyname (int filedes)\n {\n-#ifndef __vxworks\n+#if defined (__vxworks) || defined (__nucleus)\n+  return \"\";\n+#else\n   extern char *ttyname (int);\n \n   return ttyname (filedes);\n-\n-#else\n-  return \"\";\n-\n-#endif\n+#endif /* defined (__vxworks) || defined (__nucleus) */\n }\n #endif\n \f\n@@ -872,30 +889,4 @@ __gnat_get_task_options (void)\n #endif\n }\n \n-typedef struct\n-{\n-  int  size;\n-  char *base;\n-  char *end;\n-} stack_info;\n-\n-/* __gnat_get_stack_info is used by s-stchop.adb only for VxWorks. This\n-   procedure fills the stack information associated to the currently\n-   executing task. */\n-extern void __gnat_get_stack_info (stack_info *vxworks_stack_info);\n-\n-void\n-__gnat_get_stack_info (stack_info *vxworks_stack_info)\n-{\n-  TASK_DESC descriptor;\n-\n-  /* Ask the VxWorks kernel about stack values */\n-  taskInfoGet (taskIdSelf (), &descriptor);\n-\n-  /* Fill the stack data with the information provided by the kernel */\n-  vxworks_stack_info->size = descriptor.td_stackSize;\n-  vxworks_stack_info->base = descriptor.td_pStackBase;\n-  vxworks_stack_info->end  = descriptor.td_pStackEnd;\n-}\n-\n #endif"}]}