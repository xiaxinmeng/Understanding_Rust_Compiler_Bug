{"sha": "a7a09efa24289b93d127ec41d5bec873d9fe000d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhMDllZmEyNDI4OWI5M2QxMjdlYzQxZDViZWM4NzNkOWZlMDAwZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-18T23:33:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-18T23:33:54Z"}, "message": "re PR fortran/92977 (ICE in gfc_trans_omp_atomic, at fortran/trans-openmp.c:3526)\n\n\tPR fortran/92977\n\t* frontend-passes.c (in_omp_atomic): New variable.\n\t(cfe_expr_0, matmul_to_var_expr, matmul_temp_args,\n\tinline_matmul_assign, call_external_blas): Don't optimize in\n\tEXEC_OMP_ATOMIC.\n\t(optimize_namespace): Clear in_omp_atomic.\n\t(gfc_code_walker): Set in_omp_atomic for EXEC_OMP_ATOMIC, save/restore\n\tit around.\n\n\t* gfortran.dg/gomp/pr92977.f90: New test.\n\nFrom-SVN: r279554", "tree": {"sha": "a2e9663986bb3758ba550e3b6703a44580c889b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e9663986bb3758ba550e3b6703a44580c889b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a09efa24289b93d127ec41d5bec873d9fe000d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a09efa24289b93d127ec41d5bec873d9fe000d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a09efa24289b93d127ec41d5bec873d9fe000d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a09efa24289b93d127ec41d5bec873d9fe000d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "601399c0dfc02bf97132816a5b16e14e768c9e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601399c0dfc02bf97132816a5b16e14e768c9e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601399c0dfc02bf97132816a5b16e14e768c9e5a"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "12465bf43782a6a3afa97556f3241130d8901189", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a7a09efa24289b93d127ec41d5bec873d9fe000d", "patch": "@@ -1,3 +1,14 @@\n+2019-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/92977\n+\t* frontend-passes.c (in_omp_atomic): New variable.\n+\t(cfe_expr_0, matmul_to_var_expr, matmul_temp_args,\n+\tinline_matmul_assign, call_external_blas): Don't optimize in\n+\tEXEC_OMP_ATOMIC.\n+\t(optimize_namespace): Clear in_omp_atomic.\n+\t(gfc_code_walker): Set in_omp_atomic for EXEC_OMP_ATOMIC, save/restore\n+\tit around.\n+\n 2019-12-19  Julian Brown  <julian@codesourcery.com>\n \t    Maciej W. Rozycki  <macro@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>"}, {"sha": "5f83ad27c2cb2ae052cebe0d481b374e2c0d938c", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=a7a09efa24289b93d127ec41d5bec873d9fe000d", "patch": "@@ -92,6 +92,10 @@ static int forall_level;\n \n static bool in_omp_workshare;\n \n+/* Keep track of whether we are within an OMP atomic.  */\n+\n+static bool in_omp_atomic;\n+\n /* Keep track of whether we are within a WHERE statement.  */\n \n static bool in_where;\n@@ -913,9 +917,9 @@ cfe_expr_0 (gfc_expr **e, int *walk_subtrees,\n   gfc_expr *newvar;\n   gfc_expr **ei, **ej;\n \n-  /* Don't do this optimization within OMP workshare or ASSOC lists.  */\n+  /* Don't do this optimization within OMP workshare/atomic or ASSOC lists.  */\n \n-  if (in_omp_workshare || in_assoc_list)\n+  if (in_omp_workshare || in_omp_atomic || in_assoc_list)\n     {\n       *walk_subtrees = 0;\n       return 0;\n@@ -1464,6 +1468,7 @@ optimize_namespace (gfc_namespace *ns)\n   iterator_level = 0;\n   in_assoc_list = false;\n   in_omp_workshare = false;\n+  in_omp_atomic = false;\n \n   if (flag_frontend_optimize)\n     {\n@@ -2818,7 +2823,7 @@ matmul_to_var_expr (gfc_expr **ep, int *walk_subtrees ATTRIBUTE_UNUSED,\n     return 0;\n \n   if (forall_level > 0 || iterator_level > 0 || in_omp_workshare\n-      || in_where || in_assoc_list)\n+      || in_omp_atomic || in_where || in_assoc_list)\n     return 0;\n \n   /* Check if this is already in the form c = matmul(a,b).  */\n@@ -2880,7 +2885,7 @@ matmul_temp_args (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n     return 0;\n \n   if (forall_level > 0 || iterator_level > 0 || in_omp_workshare\n-      || in_where)\n+      || in_omp_atomic || in_where)\n     return 0;\n \n   /* This has some duplication with inline_matmul_assign.  This\n@@ -3848,7 +3853,7 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n   /* For now don't do anything in OpenMP workshare, it confuses\n      its translation, which expects only the allowed statements in there.\n      We should figure out how to parallelize this eventually.  */\n-  if (in_omp_workshare)\n+  if (in_omp_workshare || in_omp_atomic)\n     return 0;\n \n   expr1 = co->expr1;\n@@ -4385,7 +4390,7 @@ call_external_blas (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n   /* For now don't do anything in OpenMP workshare, it confuses\n      its translation, which expects only the allowed statements in there. */\n \n-  if (in_omp_workshare)\n+  if (in_omp_workshare | in_omp_atomic)\n     return 0;\n \n   expr1 = co->expr1;\n@@ -5047,13 +5052,15 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t  gfc_code *co;\n \t  gfc_association_list *alist;\n \t  bool saved_in_omp_workshare;\n+\t  bool saved_in_omp_atomic;\n \t  bool saved_in_where;\n \n \t  /* There might be statement insertions before the current code,\n \t     which must not affect the expression walker.  */\n \n \t  co = *c;\n \t  saved_in_omp_workshare = in_omp_workshare;\n+\t  saved_in_omp_atomic = in_omp_atomic;\n \t  saved_in_where = in_where;\n \n \t  switch (co->op)\n@@ -5251,6 +5258,10 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t      WALK_SUBEXPR (co->ext.dt->extra_comma);\n \t      break;\n \n+\t    case EXEC_OMP_ATOMIC:\n+\t      in_omp_atomic = true;\n+\t      break;\n+\n \t    case EXEC_OMP_PARALLEL:\n \t    case EXEC_OMP_PARALLEL_DO:\n \t    case EXEC_OMP_PARALLEL_DO_SIMD:\n@@ -5368,6 +5379,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    select_level --;\n \n \t  in_omp_workshare = saved_in_omp_workshare;\n+\t  in_omp_atomic = saved_in_omp_atomic;\n \t  in_where = saved_in_where;\n \t}\n     }"}, {"sha": "7fd6710168ed552bd6be0c18438bd85b587d5fcb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7a09efa24289b93d127ec41d5bec873d9fe000d", "patch": "@@ -1,3 +1,8 @@\n+2019-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/92977\n+\t* gfortran.dg/gomp/pr92977.f90: New test.\n+\n 2019-12-19  Julian Brown  <julian@codesourcery.com>\n \t    Maciej W. Rozycki  <macro@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>"}, {"sha": "0c31f470a94e6e61ab798566590df1df7060fb15", "filename": "gcc/testsuite/gfortran.dg/gomp/pr92977.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr92977.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a09efa24289b93d127ec41d5bec873d9fe000d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr92977.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr92977.f90?ref=a7a09efa24289b93d127ec41d5bec873d9fe000d", "patch": "@@ -0,0 +1,15 @@\n+! PR fortran/92977\n+! { dg-do compile }\n+! { dg-additional-options \"-O2\" }\n+\n+program pr92977\n+  integer :: n = 1\n+  integer :: a\n+!$omp atomic write\n+  a = f(n) - f(n)\n+contains\n+  integer function f(x)\n+    integer, intent(in) :: x\n+    f = x\n+  end\n+end"}]}