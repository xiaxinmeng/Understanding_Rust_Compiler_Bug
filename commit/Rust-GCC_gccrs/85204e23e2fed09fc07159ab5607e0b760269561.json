{"sha": "85204e23e2fed09fc07159ab5607e0b760269561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyMDRlMjNlMmZlZDA5ZmMwNzE1OWFiNTYwN2UwYjc2MDI2OTU2MQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-27T14:02:05Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-27T14:02:05Z"}, "message": "Less verbose fix-it hints for missing header files (PR 87091)\n\nThis patch tweaks maybe_add_include_fixit so that if we're emitting a note\nabout adding the header file, the note's primary location will be replaced\nby that of the fix-it hint, to avoid repeating a location we've already\nemitted (or one close to it).\n\nFor example, this simplifies:\n\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:87:27: error: msg 1\n  87 |       using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n     |                           ^~~~~~\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:87:22: note: msg 2\n   73 | # include <debug/vector>\n  +++ |+#include <vector>\n   74 | #endif\n  ....\n   87 |       using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n      |                      ^~~\n\nto:\n\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:87:27: error: msg 1\n  87 |       using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n     |                           ^~~~~~\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:74:1: note: msg 2\n   73 | # include <debug/vector>\n  +++ |+#include <vector>\n   74 | #endif\n\neliminating the repetition of line 87 in the note.\n\nDoing so requires converting show_caret_p to a tri-state, to avoid\nmeaninglessly printing a caret for the first column in the next line\n(and colorizing it):\n\n  ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:74:1: note: msg 2\n   73 | # include <debug/vector>\n  +++ |+#include <vector>\n   74 | #endif\n      | ^\n\ngcc/c-family/ChangeLog:\n\tPR 87091\n\t* c-common.c (c_cpp_error): Update for conversion of show_caret_p\n\tto a tri-state.\n\t(maybe_suggest_missing_token_insertion): Likewise.\n\t(maybe_add_include_fixit): Add param \"override_location\".  If set,\n\tand source-printing is enabled, then override the rich_location's\n\tprimary location with that of the insertion point for the fix-it\n\thint, marking it with SHOW_LINES_WITHOUT_RANGE.\n\t* c-common.h (extern void maybe_add_include_fixit): Add bool\n\tparam.\n\t* c-format.c (selftest::test_type_mismatch_range_labels): Update\n\tfor conversion of show_caret_p to a tri-state.\n\t* c-warn.c (warn_for_restrict): Likewise.\n\t* known-headers.cc\n\t(suggest_missing_header::~suggest_missing_header): Update call to\n\tmaybe_add_include_fixit to suggest overriding the location, as it\n\tis for a note.\n\ngcc/c/ChangeLog:\n\tPR 87091\n\t* c-decl.c (implicitly_declare): Update call to\n\tmaybe_add_include_fixit to suggest overriding the location, as it\n\tis for a note.\n\t* c-objc-common.c (c_tree_printer): Update for conversion of\n\tshow_caret_p to a tri-state.\n\ngcc/cp/ChangeLog:\n\tPR 87091\n\t* decl.c (grokdeclarator): Update for conversion of show_caret_p\n\tto a tri-state.\n\t* error.c (cp_printer): Likewise.\n\t* name-lookup.c (maybe_suggest_missing_std_header): Update call to\n\tmaybe_add_include_fixit to suggest overriding the location, as it\n\tis for a note.\n\t* parser.c (cp_parser_string_literal): Update for conversion of\n\tshow_caret_p to a tri-state.\n\t(cp_parser_elaborated_type_specifier): Likewise.\n\t(set_and_check_decl_spec_loc): Likewise.\n\t* pt.c (listify): Update call to maybe_add_include_fixit to not\n\toverride the location, as it is for an error.\n\t* rtti.c (typeid_ok_p): Likewise.\n\ngcc/ChangeLog:\n\tPR 87091\n\t* diagnostic-show-locus.c (class layout_range): Update for\n\tconversion of show_caret_p to a tri-state.\n\t(layout_range::layout_range): Likewise.\n\t(make_range): Likewise.\n\t(layout::maybe_add_location_range): Likewise.\n\t(layout::should_print_annotation_line_p): Don't show annotation\n\tlines for ranges that are SHOW_LINES_WITHOUT_RANGE.\n\t(layout::get_state_at_point): Update for conversion of\n\tshow_caret_p to a tri-state.  Bail out early for\n\tSHOW_LINES_WITHOUT_RANGE, so that such ranges don't affect\n\tunderlining or source colorization.\n\t(gcc_rich_location::add_location_if_nearby): Update for conversion\n\tof show_caret_p to a tri-state.\n\t(selftest::test_one_liner_multiple_carets_and_ranges): Likewise.\n\t(selftest::test_one_liner_fixit_replace_equal_secondary_range):\n\tLikewise.\n\t(selftest::test_one_liner_labels): Likewise.\n\t* gcc-rich-location.c (gcc_rich_location::add_expr): Update for\n\tconversion of show_caret_p to a tri-state.\n\t* pretty-print.c (text_info::set_location): Likewise.\n\t* pretty-print.h (text_info::set_location): Likewise.\n\t* substring-locations.c (format_warning_n_va): Likewise.\n\t* tree-diagnostic.c (default_tree_printer): Likewise.\n\t* tree-pretty-print.c (newline_and_indent): Likewise.\n\ngcc/fortran/ChangeLog:\n\tPR 87091\n\t* error.c (gfc_format_decoder): Update for conversion of\n\tshow_caret_p to a tri-state.\n\ngcc/testsuite/ChangeLog:\n\tPR 87091\n\t* gcc.dg/empty.h: New file.\n\t* gcc.dg/fixits-pr84852-1.c: Update for move of fix-it hint to\n\ttop of file and removal of redundant second printing of warning\n\tlocation.\n\t* gcc.dg/fixits-pr84852-2.c: Likewise.\n\t* gcc.dg/missing-header-fixit-3.c: Likewise.\n\t* gcc.dg/missing-header-fixit-4.c: New test.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c: Update for\n\tconversion of show_caret_p to a tri-state.\n\nlibcpp/ChangeLog:\n\tPR 87091\n\t* include/line-map.h (enum range_display_kind): New enum.\n\t(struct location_range): Replace field \"m_show_caret_p\" with\n\t\"m_range_display_kind\", converting from bool to the new enum.\n\t(class rich_location): Add example of line insertion fix-it hint.\n\t(rich_location::add_range): Convert param \"show_caret_p\" from bool\n\tto enum range_display_kind and rename to \"range_display_kind\",\n\tgiving it a default of SHOW_RANGE_WITHOUT_CARET.\n\t(rich_location::set_range): Likewise, albeit without a default.\n\t* line-map.c (rich_location::rich_location): Update for conversion\n\tof show_caret_p to tri-state enum.\n\t(rich_location::add_range): Likewise.\n\t(rich_location::set_range): Likewise.\n\nFrom-SVN: r263885", "tree": {"sha": "329a88e54e3b2d7854f2746bda51478b84b3e65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329a88e54e3b2d7854f2746bda51478b84b3e65e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85204e23e2fed09fc07159ab5607e0b760269561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85204e23e2fed09fc07159ab5607e0b760269561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85204e23e2fed09fc07159ab5607e0b760269561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85204e23e2fed09fc07159ab5607e0b760269561/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df308f8160051f72679981d45ccbabe6b3f25396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df308f8160051f72679981d45ccbabe6b3f25396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df308f8160051f72679981d45ccbabe6b3f25396"}], "stats": {"total": 424, "additions": 316, "deletions": 108}, "files": [{"sha": "4c4969deda351f9c780423e2dc979b4a28864eb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1,3 +1,31 @@\n+2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* diagnostic-show-locus.c (class layout_range): Update for\n+\tconversion of show_caret_p to a tri-state.\n+\t(layout_range::layout_range): Likewise.\n+\t(make_range): Likewise.\n+\t(layout::maybe_add_location_range): Likewise.\n+\t(layout::should_print_annotation_line_p): Don't show annotation\n+\tlines for ranges that are SHOW_LINES_WITHOUT_RANGE.\n+\t(layout::get_state_at_point): Update for conversion of\n+\tshow_caret_p to a tri-state.  Bail out early for\n+\tSHOW_LINES_WITHOUT_RANGE, so that such ranges don't affect\n+\tunderlining or source colorization.\n+\t(gcc_rich_location::add_location_if_nearby): Update for conversion\n+\tof show_caret_p to a tri-state.\n+\t(selftest::test_one_liner_multiple_carets_and_ranges): Likewise.\n+\t(selftest::test_one_liner_fixit_replace_equal_secondary_range):\n+\tLikewise.\n+\t(selftest::test_one_liner_labels): Likewise.\n+\t* gcc-rich-location.c (gcc_rich_location::add_expr): Update for\n+\tconversion of show_caret_p to a tri-state.\n+\t* pretty-print.c (text_info::set_location): Likewise.\n+\t* pretty-print.h (text_info::set_location): Likewise.\n+\t* substring-locations.c (format_warning_n_va): Likewise.\n+\t* tree-diagnostic.c (default_tree_printer): Likewise.\n+\t* tree-pretty-print.c (newline_and_indent): Likewise.\n+\n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 87091"}, {"sha": "2e844d47d48e3ccc837cf0026665de2625b8a574", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1,3 +1,23 @@\n+2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* c-common.c (c_cpp_error): Update for conversion of show_caret_p\n+\tto a tri-state.\n+\t(maybe_suggest_missing_token_insertion): Likewise.\n+\t(maybe_add_include_fixit): Add param \"override_location\".  If set,\n+\tand source-printing is enabled, then override the rich_location's\n+\tprimary location with that of the insertion point for the fix-it\n+\thint, marking it with SHOW_LINES_WITHOUT_RANGE.\n+\t* c-common.h (extern void maybe_add_include_fixit): Add bool\n+\tparam.\n+\t* c-format.c (selftest::test_type_mismatch_range_labels): Update\n+\tfor conversion of show_caret_p to a tri-state.\n+\t* c-warn.c (warn_for_restrict): Likewise.\n+\t* known-headers.cc\n+\t(suggest_missing_header::~suggest_missing_header): Update call to\n+\tmaybe_add_include_fixit to suggest overriding the location, as it\n+\tis for a note.\n+\n 2018-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* c-common.c (check_function_restrict): Use new function"}, {"sha": "6a5d99171a035e1fff76a17694fcc4e8e8c0674c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -6131,7 +6131,7 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n       gcc_unreachable ();\n     }\n   if (done_lexing)\n-    richloc->set_range (0, input_location, true);\n+    richloc->set_range (0, input_location, SHOW_RANGE_WITH_CARET);\n   diagnostic_set_info_translated (&diagnostic, msg, ap,\n \t\t\t\t  richloc, dlevel);\n   diagnostic_override_option_index (&diagnostic,\n@@ -8336,8 +8336,8 @@ maybe_suggest_missing_token_insertion (rich_location *richloc,\n       location_t hint_loc = hint->get_start_loc ();\n       location_t old_loc = richloc->get_loc ();\n \n-      richloc->set_range (0, hint_loc, true);\n-      richloc->add_range (old_loc, false);\n+      richloc->set_range (0, hint_loc, SHOW_RANGE_WITH_CARET);\n+      richloc->add_range (old_loc);\n     }\n }\n \n@@ -8475,10 +8475,16 @@ static added_includes_t *added_includes;\n    location.\n \n    This function is idempotent: a header will be added at most once to\n-   any given file.  */\n+   any given file.\n+\n+   If OVERRIDE_LOCATION is true, then if a fix-it is added and will be\n+   printed, then RICHLOC's primary location will be replaced by that of\n+   the fix-it hint (for use by \"inform\" notes where the location of the\n+   issue has already been reported).  */\n \n void\n-maybe_add_include_fixit (rich_location *richloc, const char *header)\n+maybe_add_include_fixit (rich_location *richloc, const char *header,\n+\t\t\t bool override_location)\n {\n   location_t loc = richloc->get_loc ();\n   const char *file = LOCATION_FILE (loc);\n@@ -8506,6 +8512,33 @@ maybe_add_include_fixit (rich_location *richloc, const char *header)\n   char *text = xasprintf (\"#include %s\\n\", header);\n   richloc->add_fixit_insert_before (include_insert_loc, text);\n   free (text);\n+\n+  if (override_location && global_dc->show_caret)\n+    {\n+      /* Replace the primary location with that of the insertion point for the\n+\t fix-it hint.\n+\n+\t We use SHOW_LINES_WITHOUT_RANGE so that we don't meaningless print a\n+\t caret for the insertion point (or colorize it).\n+\n+\t Hence we print e.g.:\n+\n+\t ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:74:1: note: msg 2\n+\t  73 | # include <debug/vector>\n+\t +++ |+#include <vector>\n+\t  74 | #endif\n+\n+\t rather than:\n+\n+\t ../x86_64-pc-linux-gnu/libstdc++-v3/include/vector:74:1: note: msg 2\n+\t  73 | # include <debug/vector>\n+\t +++ |+#include <vector>\n+\t  74 | #endif\n+\t     | ^\n+\n+\t avoiding the caret on the first column of line 74.  */\n+      richloc->set_range (0, include_insert_loc, SHOW_LINES_WITHOUT_RANGE);\n+    }\n }\n \n /* Attempt to convert a braced array initializer list CTOR for array"}, {"sha": "c5e2028cbaa48aa3e1238c95fc413b37245bcc8c", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1327,7 +1327,7 @@ excess_precision_mode_join (enum flt_eval_method, enum flt_eval_method);\n extern int c_flt_eval_method (bool ts18661_p);\n extern void add_no_sanitize_value (tree node, unsigned int flags);\n \n-extern void maybe_add_include_fixit (rich_location *, const char *);\n+extern void maybe_add_include_fixit (rich_location *, const char *, bool);\n extern void maybe_suggest_missing_token_insertion (rich_location *richloc,\n \t\t\t\t\t\t   enum cpp_ttype token_type,\n \t\t\t\t\t\t   location_t prev_token_loc);"}, {"sha": "98c49cf5d186b8a65b8e6c7f5042ee99ebbc3117", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -4352,7 +4352,7 @@ test_type_mismatch_range_labels ()\n   range_label_for_type_mismatch param_label (integer_type_node,\n \t\t\t\t\t     char_type_node);\n   gcc_rich_location richloc (fmt, &fmt_label);\n-  richloc.add_range (param, false, &param_label);\n+  richloc.add_range (param, SHOW_RANGE_WITHOUT_CARET, &param_label);\n \n   test_diagnostic_context dc;\n   diagnostic_show_locus (&dc, &richloc, DK_ERROR);"}, {"sha": "a1a7f9359644c6d635854e2bc2e03d92e122762d", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -2429,7 +2429,7 @@ warn_for_restrict (unsigned param_pos, tree *argarray, unsigned nargs)\n     {\n       arg = argarray[pos - 1];\n       if (EXPR_HAS_LOCATION (arg))\n-\trichloc.add_range (EXPR_LOCATION (arg), false);\n+\trichloc.add_range (EXPR_LOCATION (arg));\n     }\n \n   return warning_n (&richloc, OPT_Wrestrict, arg_positions.length (),"}, {"sha": "b0763cfe984871257b5f7a2252db152c2abe23c6", "filename": "gcc/c-family/known-headers.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fknown-headers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc-family%2Fknown-headers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.cc?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -192,7 +192,7 @@ suggest_missing_header::~suggest_missing_header ()\n     return;\n \n   gcc_rich_location richloc (get_location ());\n-  maybe_add_include_fixit (&richloc, m_header_hint);\n+  maybe_add_include_fixit (&richloc, m_header_hint, true);\n   inform (&richloc,\n \t  \"%qs is defined in header %qs;\"\n \t  \" did you forget to %<#include %s%>?\","}, {"sha": "d459dc465a18748213ce7a99e01d5615b8a20559", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1,3 +1,12 @@\n+2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* c-decl.c (implicitly_declare): Update call to\n+\tmaybe_add_include_fixit to suggest overriding the location, as it\n+\tis for a note.\n+\t* c-objc-common.c (c_tree_printer): Update for conversion of\n+\tshow_caret_p to a tri-state.\n+\n 2018-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* c-decl.c (locate_old_decl): Use new function"}, {"sha": "feafc022768aee33239bc10b0bf67e22c9c45006", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -3446,7 +3446,7 @@ implicitly_declare (location_t loc, tree functionid)\n \t\t  if (header != NULL && warned)\n \t\t    {\n \t\t      rich_location richloc (line_table, loc);\n-\t\t      maybe_add_include_fixit (&richloc, header);\n+\t\t      maybe_add_include_fixit (&richloc, header, true);\n \t\t      inform (&richloc,\n \t\t\t      \"include %qs or provide a declaration of %qD\",\n \t\t\t      header, decl);"}, {"sha": "12e777a48455948a461acf8bb190fb13f6feff77", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -161,7 +161,8 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n     {\n       t = va_arg (*text->args_ptr, tree);\n       if (set_locus)\n-\ttext->set_location (0, DECL_SOURCE_LOCATION (t), true);\n+\ttext->set_location (0, DECL_SOURCE_LOCATION (t),\n+\t\t\t    SHOW_RANGE_WITH_CARET);\n     }\n \n   switch (*spec)"}, {"sha": "a05049c747ac873b02e8831257e2c957781c0922", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1,3 +1,20 @@\n+2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* decl.c (grokdeclarator): Update for conversion of show_caret_p\n+\tto a tri-state.\n+\t* error.c (cp_printer): Likewise.\n+\t* name-lookup.c (maybe_suggest_missing_std_header): Update call to\n+\tmaybe_add_include_fixit to suggest overriding the location, as it\n+\tis for a note.\n+\t* parser.c (cp_parser_string_literal): Update for conversion of\n+\tshow_caret_p to a tri-state.\n+\t(cp_parser_elaborated_type_specifier): Likewise.\n+\t(set_and_check_decl_spec_loc): Likewise.\n+\t* pt.c (listify): Update call to maybe_add_include_fixit to not\n+\toverride the location, as it is for an error.\n+\t* rtti.c (typeid_ok_p): Likewise.\n+\n 2018-08-27  Martin Liska  <mliska@suse.cz>\n \n \t* call.c (build_call_a): Use new function"}, {"sha": "d9f4d3489292c0f14cb9ef4effc8a9345cfa2f23", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -10737,14 +10737,14 @@ grokdeclarator (const cp_declarator *declarator,\n       if (signed_p && unsigned_p)\n \t{\n \t  gcc_rich_location richloc (declspecs->locations[ds_signed]);\n-\t  richloc.add_range (declspecs->locations[ds_unsigned], false);\n+\t  richloc.add_range (declspecs->locations[ds_unsigned]);\n \t  error_at (&richloc,\n \t\t    \"%<signed%> and %<unsigned%> specified together\");\n \t}\n       else if (long_p && short_p)\n \t{\n \t  gcc_rich_location richloc (declspecs->locations[ds_long]);\n-\t  richloc.add_range (declspecs->locations[ds_short], false);\n+\t  richloc.add_range (declspecs->locations[ds_short]);\n \t  error_at (&richloc, \"%<long%> and %<short%> specified together\");\n \t}\n       else if (TREE_CODE (type) != INTEGER_TYPE\n@@ -10888,7 +10888,7 @@ grokdeclarator (const cp_declarator *declarator,\n       if (staticp == 2)\n \t{\n \t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n-\t  richloc.add_range (declspecs->locations[ds_storage_class], false);\n+\t  richloc.add_range (declspecs->locations[ds_storage_class]);\n \t  error_at (&richloc, \"member %qD cannot be declared both %<virtual%> \"\n \t\t    \"and %<static%>\", dname);\n \t  storage_class = sc_none;\n@@ -10897,7 +10897,7 @@ grokdeclarator (const cp_declarator *declarator,\n       if (constexpr_p)\n \t{\n \t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n-\t  richloc.add_range (declspecs->locations[ds_constexpr], false);\n+\t  richloc.add_range (declspecs->locations[ds_constexpr]);\n \t  error_at (&richloc, \"member %qD cannot be declared both %<virtual%> \"\n \t\t    \"and %<constexpr%>\", dname);\n \t}\n@@ -11448,7 +11448,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  {\n \t\t    /* Cannot be both friend and virtual.  */\n \t\t    gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n-\t\t    richloc.add_range (declspecs->locations[ds_friend], false);\n+\t\t    richloc.add_range (declspecs->locations[ds_friend]);\n \t\t    error_at (&richloc, \"virtual functions cannot be friends\");\n \t\t    friendp = 0;\n \t\t  }"}, {"sha": "5bab3f345ed8d8ebf0a191f27a491cc9e5c6cf8a", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -4119,7 +4119,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n \n   pp_string (pp, result);\n   if (set_locus && t != NULL)\n-    text->set_location (0, location_of (t), true);\n+    text->set_location (0, location_of (t), SHOW_RANGE_WITH_CARET);\n   return true;\n #undef next_tree\n #undef next_tcode"}, {"sha": "c0a12d746343a5c92f73d82ac66e1ec6526863dd", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -5630,7 +5630,7 @@ maybe_suggest_missing_std_header (location_t location, tree name)\n   if (cxx_dialect >= header_hint->min_dialect)\n     {\n       const char *header = header_hint->header;\n-      maybe_add_include_fixit (&richloc, header);\n+      maybe_add_include_fixit (&richloc, header, true);\n       inform (&richloc,\n \t      \"%<std::%s%> is defined in header %qs;\"\n \t      \" did you forget to %<#include %s%>?\","}, {"sha": "d8d4301272eb3b4a9f6310bcf4858cdd1de4a009", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -4133,7 +4133,7 @@ cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,\n \t      else if (curr_type != CPP_STRING)\n \t\t{\n \t\t  rich_location rich_loc (line_table, tok->location);\n-\t\t  rich_loc.add_range (last_tok_loc, false);\n+\t\t  rich_loc.add_range (last_tok_loc);\n \t\t  error_at (&rich_loc,\n \t\t\t    \"unsupported non-standard concatenation \"\n \t\t\t    \"of string literals\");\n@@ -17755,7 +17755,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t  || cp_parser_is_keyword (token, RID_STRUCT))\n \t{\n \t  gcc_rich_location richloc (token->location);\n-\t  richloc.add_range (input_location, false);\n+\t  richloc.add_range (input_location);\n \t  richloc.add_fixit_remove ();\n \t  pedwarn (&richloc, 0, \"elaborated-type-specifier for \"\n \t\t   \"a scoped enum must not use the %qD keyword\",\n@@ -28390,7 +28390,7 @@ set_and_check_decl_spec_loc (cp_decl_specifier_seq *decl_specs,\n \t  gcc_rich_location richloc (location);\n \t  if (gnu != decl_specs->gnu_thread_keyword_p)\n \t    {\n-\t      richloc.add_range (decl_specs->locations[ds_thread], false);\n+\t      richloc.add_range (decl_specs->locations[ds_thread]);\n \t      error_at (&richloc,\n \t\t\t\"both %<__thread%> and %<thread_local%> specified\");\n \t    }"}, {"sha": "a7266e368fc47838fbeba5791420c8eb4d244046", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -26077,7 +26077,7 @@ listify (tree arg)\n   if (!std_init_list || !DECL_CLASS_TEMPLATE_P (std_init_list))\n     {    \n       gcc_rich_location richloc (input_location);\n-      maybe_add_include_fixit (&richloc, \"<initializer_list>\");\n+      maybe_add_include_fixit (&richloc, \"<initializer_list>\", false);\n       error_at (&richloc,\n \t\t\"deducing from brace-enclosed initializer list\"\n \t\t\" requires %<#include <initializer_list>%>\");"}, {"sha": "94a921987815b30bb6e6c8e6108c5e93f2907582", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -317,7 +317,7 @@ typeid_ok_p (void)\n   if (!COMPLETE_TYPE_P (const_type_info_type_node))\n     {\n       gcc_rich_location richloc (input_location);\n-      maybe_add_include_fixit (&richloc, \"<typeinfo>\");\n+      maybe_add_include_fixit (&richloc, \"<typeinfo>\", false);\n       error_at (&richloc,\n \t\t\"must %<#include <typeinfo>%> before using\"\n \t\t\" %<typeid%>\");"}, {"sha": "6ce8a0f4a9b7e1bc949c95797dc10e3be19a69e9", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -126,7 +126,7 @@ class layout_range\n  public:\n   layout_range (const expanded_location *start_exploc,\n \t\tconst expanded_location *finish_exploc,\n-\t\tbool show_caret_p,\n+\t\tenum range_display_kind range_display_kind,\n \t\tconst expanded_location *caret_exploc,\n \t\tconst range_label *label);\n \n@@ -135,7 +135,7 @@ class layout_range\n \n   layout_point m_start;\n   layout_point m_finish;\n-  bool m_show_caret_p;\n+  enum range_display_kind m_range_display_kind;\n   layout_point m_caret;\n   const range_label *m_label;\n };\n@@ -412,12 +412,12 @@ colorizer::get_color_by_name (const char *name)\n \n layout_range::layout_range (const expanded_location *start_exploc,\n \t\t\t    const expanded_location *finish_exploc,\n-\t\t\t    bool show_caret_p,\n+\t\t\t    enum range_display_kind range_display_kind,\n \t\t\t    const expanded_location *caret_exploc,\n \t\t\t    const range_label *label)\n : m_start (*start_exploc),\n   m_finish (*finish_exploc),\n-  m_show_caret_p (show_caret_p),\n+  m_range_display_kind (range_display_kind),\n   m_caret (*caret_exploc),\n   m_label (label)\n {\n@@ -545,7 +545,7 @@ make_range (int start_line, int start_col, int end_line, int end_col)\n     = {\"test.c\", start_line, start_col, NULL, false};\n   const expanded_location finish_exploc\n     = {\"test.c\", end_line, end_col, NULL, false};\n-  return layout_range (&start_exploc, &finish_exploc, false,\n+  return layout_range (&start_exploc, &finish_exploc, SHOW_RANGE_WITHOUT_CARET,\n \t\t       &start_exploc, NULL);\n }\n \n@@ -986,21 +986,21 @@ layout::maybe_add_location_range (const location_range *loc_range,\n     return false;\n   if (finish.file != m_exploc.file)\n     return false;\n-  if (loc_range->m_show_caret_p)\n+  if (loc_range->m_range_display_kind == SHOW_RANGE_WITH_CARET)\n     if (caret.file != m_exploc.file)\n       return false;\n \n   /* Sanitize the caret location for non-primary ranges.  */\n   if (m_layout_ranges.length () > 0)\n-    if (loc_range->m_show_caret_p)\n+    if (loc_range->m_range_display_kind == SHOW_RANGE_WITH_CARET)\n       if (!compatible_locations_p (loc_range->m_loc, m_primary_loc))\n \t/* Discard any non-primary ranges that can't be printed\n \t   sanely relative to the primary location.  */\n \treturn false;\n \n   /* Everything is now known to be in the correct source file,\n      but it may require further sanitization.  */\n-  layout_range ri (&start, &finish, loc_range->m_show_caret_p, &caret,\n+  layout_range ri (&start, &finish, loc_range->m_range_display_kind, &caret,\n \t\t   loc_range->m_label);\n \n   /* If we have a range that finishes before it starts (perhaps\n@@ -1037,7 +1037,7 @@ layout::maybe_add_location_range (const location_range *loc_range,\n \treturn false;\n       if (!will_show_line_p (finish.line))\n \treturn false;\n-      if (loc_range->m_show_caret_p)\n+      if (loc_range->m_range_display_kind == SHOW_RANGE_WITH_CARET)\n \tif (!will_show_line_p (caret.line))\n \t  return false;\n     }\n@@ -1362,8 +1362,12 @@ layout::should_print_annotation_line_p (linenum_type row) const\n   layout_range *range;\n   int i;\n   FOR_EACH_VEC_ELT (m_layout_ranges, i, range)\n-    if (range->intersects_line_p (row))\n-      return true;\n+    {\n+      if (range->m_range_display_kind == SHOW_LINES_WITHOUT_RANGE)\n+\treturn false;\n+      if (range->intersects_line_p (row))\n+\treturn true;\n+    }\n   return false;\n }\n \n@@ -2102,13 +2106,18 @@ layout::get_state_at_point (/* Inputs.  */\n   int i;\n   FOR_EACH_VEC_ELT (m_layout_ranges, i, range)\n     {\n+      if (range->m_range_display_kind == SHOW_LINES_WITHOUT_RANGE)\n+\t/* Bail out early, so that such ranges don't affect underlining or\n+\t   source colorization.  */\n+\tcontinue;\n+\n       if (range->contains_point (row, column))\n \t{\n \t  out_state->range_idx = i;\n \n \t  /* Are we at the range's caret?  is it visible? */\n \t  out_state->draw_caret_p = false;\n-\t  if (range->m_show_caret_p\n+\t  if (range->m_range_display_kind == SHOW_RANGE_WITH_CARET\n \t      && row == range->m_caret.m_line\n \t      && column == range->m_caret.m_column)\n \t    out_state->draw_caret_p = true;\n@@ -2267,11 +2276,11 @@ gcc_rich_location::add_location_if_nearby (location_t loc)\n   layout layout (global_dc, this, DK_ERROR);\n   location_range loc_range;\n   loc_range.m_loc = loc;\n-  loc_range.m_show_caret_p = false;\n+  loc_range.m_range_display_kind = SHOW_RANGE_WITHOUT_CARET;\n   if (!layout.maybe_add_location_range (&loc_range, true))\n     return false;\n \n-  add_range (loc, false);\n+  add_range (loc);\n   return true;\n }\n \n@@ -2421,8 +2430,8 @@ test_one_liner_multiple_carets_and_ranges ()\n   dc.caret_chars[2] = 'C';\n \n   rich_location richloc (line_table, foo);\n-  richloc.add_range (bar, true);\n-  richloc.add_range (field, true);\n+  richloc.add_range (bar, SHOW_RANGE_WITH_CARET);\n+  richloc.add_range (field, SHOW_RANGE_WITH_CARET);\n   diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n   ASSERT_STREQ (\"\\n\"\n \t\t\" foo = bar.field;\\n\"\n@@ -2543,7 +2552,7 @@ test_one_liner_fixit_replace_equal_secondary_range ()\n   location_t finish = linemap_position_for_column (line_table, 15);\n   rich_location richloc (line_table, equals);\n   location_t field = make_location (start, start, finish);\n-  richloc.add_range (field, false);\n+  richloc.add_range (field);\n   richloc.add_fixit_replace (field, \"m_field\");\n   diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n   /* The replacement range is indicated in the annotation line,\n@@ -2690,8 +2699,8 @@ test_one_liner_labels ()\n     text_range_label label1 (\"1\");\n     text_range_label label2 (\"2\");\n     gcc_rich_location richloc (foo, &label0);\n-    richloc.add_range (bar, false, &label1);\n-    richloc.add_range (field, false, &label2);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label1);\n+    richloc.add_range (field, SHOW_RANGE_WITHOUT_CARET, &label2);\n \n     {\n       test_diagnostic_context dc;\n@@ -2722,8 +2731,8 @@ test_one_liner_labels ()\n     text_range_label label1 (\"label 1\");\n     text_range_label label2 (\"label 2\");\n     gcc_rich_location richloc (foo, &label0);\n-    richloc.add_range (bar, false, &label1);\n-    richloc.add_range (field, false, &label2);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label1);\n+    richloc.add_range (field, SHOW_RANGE_WITHOUT_CARET, &label2);\n \n     test_diagnostic_context dc;\n     diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n@@ -2744,8 +2753,8 @@ test_one_liner_labels ()\n     text_range_label label1 (\"bbbb\");\n     text_range_label label2 (\"c\");\n     gcc_rich_location richloc (foo, &label0);\n-    richloc.add_range (bar, false, &label1);\n-    richloc.add_range (field, false, &label2);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label1);\n+    richloc.add_range (field, SHOW_RANGE_WITHOUT_CARET, &label2);\n \n     test_diagnostic_context dc;\n     diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n@@ -2764,8 +2773,8 @@ test_one_liner_labels ()\n     text_range_label label1 (\"1\");\n     text_range_label label2 (\"2\");\n     gcc_rich_location richloc (field, &label0);\n-    richloc.add_range (bar, false, &label1);\n-    richloc.add_range (foo, false, &label2);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label1);\n+    richloc.add_range (foo, SHOW_RANGE_WITHOUT_CARET, &label2);\n \n     test_diagnostic_context dc;\n     diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n@@ -2784,8 +2793,8 @@ test_one_liner_labels ()\n     text_range_label label1 (\"label 1\");\n     text_range_label label2 (\"label 2\");\n     gcc_rich_location richloc (bar, &label0);\n-    richloc.add_range (bar, false, &label1);\n-    richloc.add_range (bar, false, &label2);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label1);\n+    richloc.add_range (bar, SHOW_RANGE_WITHOUT_CARET, &label2);\n \n     test_diagnostic_context dc;\n     diagnostic_show_locus (&dc, &richloc, DK_ERROR);"}, {"sha": "c8249f63380eb738b5def9f436e6057c84b17c70", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1,3 +1,9 @@\n+2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* error.c (gfc_format_decoder): Update for conversion of\n+\tshow_caret_p to a tri-state.\n+\n 2018-08-25  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/86545"}, {"sha": "b3b0138b0c39f11a45457f4751207edf88b556c4", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -953,7 +953,7 @@ gfc_format_decoder (pretty_printer *pp, text_info *text, const char *spec,\n \t  = linemap_position_for_loc_and_offset (line_table,\n \t\t\t\t\t\t loc->lb->location,\n \t\t\t\t\t\t offset);\n-\ttext->set_location (loc_num, src_loc, true);\n+\ttext->set_location (loc_num, src_loc, SHOW_RANGE_WITH_CARET);\n \tpp_string (pp, result[loc_num]);\n \treturn true;\n       }"}, {"sha": "81beb61661c6a81dce0060a578f5f692e4a4114a", "filename": "gcc/gcc-rich-location.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fgcc-rich-location.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fgcc-rich-location.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -47,7 +47,7 @@ gcc_rich_location::add_expr (tree expr, range_label *label)\n   gcc_assert (expr);\n \n   if (CAN_HAVE_RANGE_P (expr))\n-    add_range (EXPR_LOCATION (expr), false, label);\n+    add_range (EXPR_LOCATION (expr), SHOW_RANGE_WITHOUT_CARET, label);\n }\n \n /* If T is an expression, add a range for it to the rich_location,"}, {"sha": "7dd900b3bbf6028b6a01a4722e4fd171fd2d11ac", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -705,10 +705,11 @@ static void pp_quoted_string (pretty_printer *, const char *, size_t = -1);\n    For use e.g. when implementing \"+\" in client format decoders.  */\n \n void\n-text_info::set_location (unsigned int idx, location_t loc, bool show_caret_p)\n+text_info::set_location (unsigned int idx, location_t loc,\n+\t\t\t enum range_display_kind range_display_kind)\n {\n   gcc_checking_assert (m_richloc);\n-  m_richloc->set_range (idx, loc, show_caret_p);\n+  m_richloc->set_range (idx, loc, range_display_kind);\n }\n \n location_t"}, {"sha": "2decc516b1f08790598913b92e7eb75cc73dd536", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -36,7 +36,8 @@ struct text_info\n   void **x_data;\n   rich_location *m_richloc;\n \n-  void set_location (unsigned int idx, location_t loc, bool caret_p);\n+  void set_location (unsigned int idx, location_t loc,\n+\t\t     enum range_display_kind range_display_kind);\n   location_t get_location (unsigned int index_of_location) const;\n };\n "}, {"sha": "faf78845840d01e945b328417493231f3161aeca", "filename": "gcc/substring-locations.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fsubstring-locations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Fsubstring-locations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -171,7 +171,7 @@ format_warning_n_va (const substring_loc &fmt_loc,\n   gcc_rich_location richloc (primary_loc, primary_label);\n \n   if (param_loc != UNKNOWN_LOCATION)\n-    richloc.add_range (param_loc, false, param_label);\n+    richloc.add_range (param_loc, SHOW_RANGE_WITHOUT_CARET, param_label);\n \n   if (!err && corrected_substring && substring_within_range)\n     richloc.add_fixit_replace (fmt_substring_range, corrected_substring);"}, {"sha": "d99816171e48c73659edec15dfe54a0b486862eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1,3 +1,16 @@\n+2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* gcc.dg/empty.h: New file.\n+\t* gcc.dg/fixits-pr84852-1.c: Update for move of fix-it hint to\n+\ttop of file and removal of redundant second printing of warning\n+\tlocation.\n+\t* gcc.dg/fixits-pr84852-2.c: Likewise.\n+\t* gcc.dg/missing-header-fixit-3.c: Likewise.\n+\t* gcc.dg/missing-header-fixit-4.c: New test.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c: Update for\n+\tconversion of show_caret_p to a tri-state.\n+\n 2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR 87091"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/empty.h", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fempty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fempty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fempty.h?ref=85204e23e2fed09fc07159ab5607e0b760269561"}, {"sha": "346626b4eb975f6a72bc0d264280f7995c28abd8", "filename": "gcc/testsuite/gcc.dg/fixits-pr84852-1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits-pr84852-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits-pr84852-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits-pr84852-1.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -13,13 +13,10 @@\n int foo (void) { return strlen(\"\"); }\n \n /* { dg-warning \"incompatible implicit declaration of built-in function 'strlen'\" \"\" { target *-*-* } -812156810 } */\n-/* { dg-message \"include '<string.h>' or provide a declaration of 'strlen'\" \"\" { target *-*-* } -812156810 } */\n+/* { dg-message \"include '<string.h>' or provide a declaration of 'strlen'\" \"\" { target *-*-* } 1 } */\n #if 0\n { dg-begin-multiline-output \"\" }\n +#include <string.h>\n  /* This is padding (to avoid the output containing DejaGnu directives).  */\n { dg-end-multiline-output \"\" }\n #endif\n-\n-/* We need this, to consume a stray line marker for the bogus line.  */\n-/* { dg-regexp \".*fixits-pr84852-1.c:-812156810:25:\" } */"}, {"sha": "9bc70f59b59dbe11db2da396c96c4747323e5238", "filename": "gcc/testsuite/gcc.dg/fixits-pr84852-2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits-pr84852-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits-pr84852-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixits-pr84852-2.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -13,13 +13,10 @@\n int foo (void) { return strlen(\"\"); }\n \n /* { dg-warning \"incompatible implicit declaration of built-in function 'strlen'\" \"\" { target *-*-* } -812156810 } */\n-/* { dg-message \"include '<string.h>' or provide a declaration of 'strlen'\" \"\" { target *-*-* } -812156810 } */\n+/* { dg-message \"include '<string.h>' or provide a declaration of 'strlen'\" \"\" { target *-*-* } 1 } */\n #if 0\n { dg-begin-multiline-output \"\" }\n +#include <string.h>\n  /* This is padding (to avoid the output containing DejaGnu directives).  */\n { dg-end-multiline-output \"\" }\n #endif\n-\n-/* We need this, to consume a stray line marker for the bogus line.  */\n-/* { dg-regexp \".*fixits-pr84852-2.c:-812156810:25:\" } */"}, {"sha": "a692b4d21b392c323dc4c939257d4487434ef821", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-3.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-3.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -7,18 +7,15 @@\n void test (int i, int j)\n {\n   printf (\"%i of %i\\n\", i, j); /* { dg-warning \"implicit declaration\" } */\n-  /* { dg-message \"include '<stdio.h>' or provide a declaration of 'printf'\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-message \"include '<stdio.h>' or provide a declaration of 'printf'\" \"\" { target *-*-* } 1 } */\n #if 0\n /* { dg-begin-multiline-output \"\" }\n 9 |   printf (\"%i of %i\\n\", i, j);\n   |   ^~~~~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n-+++ |+#include <stdio.h>\n-  1 | /* Example of a fix-it hint that adds a #include directive,\n-....\n-  9 |   printf (\"%i of %i\\n\", i, j);\n-    |   ^~~~~~\n++ |+#include <stdio.h>\n+1 | /* Example of a fix-it hint that adds a #include directive,\n    { dg-end-multiline-output \"\" } */\n #endif\n }"}, {"sha": "0ed3e2c2922295da0cfe1801534e1cc7bad845d8", "filename": "gcc/testsuite/gcc.dg/missing-header-fixit-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmissing-header-fixit-4.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -0,0 +1,23 @@\n+/* Example of a fix-it hint that adds a #include directive,\n+   adding them after a pre-existing #include directive.  */\n+#include \"empty.h\"\n+int the_next_line;\n+\n+/* { dg-options \"-fdiagnostics-show-caret -fdiagnostics-show-line-numbers\" } */\n+\n+void test (int i, int j)\n+{\n+  printf (\"%i of %i\\n\", i, j); /* { dg-line printf } */\n+  /* { dg-warning \"implicit declaration of function\" \"\" { target *-*-* } printf } */\n+  /* { dg-warning \"incompatible implicit declaration\" \"\" { target *-*-* } printf } */\n+  /* { dg-begin-multiline-output \"\" }\n+10 |   printf (\"%i of %i\\n\", i, j);\n+   |   ^~~~~~\n+   { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"include '<stdio.h>' or provide a declaration of 'printf'\" \"\" { target *-*-* } 4 } */\n+  /* { dg-begin-multiline-output \"\" }\n+3 | #include \"empty.h\"\n++ |+#include <stdio.h>\n+4 | int the_next_line;\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "a55efafddff392bce6d5050ec8d815277423dae2", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -145,9 +145,11 @@ custom_diagnostic_finalizer (diagnostic_context *context,\n \n static void\n add_range (rich_location *richloc, location_t start, location_t finish,\n-\t   bool show_caret_p, const range_label *label = NULL)\n+\t   enum range_display_kind range_display_kind\n+\t     = SHOW_RANGE_WITHOUT_CARET,\n+\t   const range_label *label = NULL)\n {\n-  richloc->add_range (make_location (start, start, finish), show_caret_p,\n+  richloc->add_range (make_location (start, start, finish), range_display_kind,\n \t\t      label);\n }\n \n@@ -176,17 +178,17 @@ test_show_locus (function *fun)\n     {\n       const int line = fnstart_line + 2;\n       rich_location richloc (line_table, get_loc (line, 15));\n-      add_range (&richloc, get_loc (line, 10), get_loc (line, 14), false);\n-      add_range (&richloc, get_loc (line, 16), get_loc (line, 16), false);\n+      add_range (&richloc, get_loc (line, 10), get_loc (line, 14));\n+      add_range (&richloc, get_loc (line, 16), get_loc (line, 16));\n       warning_at (&richloc, 0, \"test\");\n     }\n \n   if (0 == strcmp (fnname, \"test_simple_2\"))\n     {\n       const int line = fnstart_line + 2;\n       rich_location richloc (line_table, get_loc (line, 24));\n-      add_range (&richloc, get_loc (line, 6), get_loc (line, 22), false);\n-      add_range (&richloc, get_loc (line, 26), get_loc (line, 43), false);\n+      add_range (&richloc, get_loc (line, 6), get_loc (line, 22));\n+      add_range (&richloc, get_loc (line, 26), get_loc (line, 43));\n       warning_at (&richloc, 0, \"test\");\n     }\n \n@@ -195,9 +197,8 @@ test_show_locus (function *fun)\n       const int line = fnstart_line + 2;\n       text_range_label label (\"label\");\n       rich_location richloc (line_table, get_loc (line + 1, 7), &label);\n-      add_range (&richloc, get_loc (line, 7), get_loc (line, 23), false);\n-      add_range (&richloc, get_loc (line + 1, 9), get_loc (line + 1, 26),\n-\t\t false);\n+      add_range (&richloc, get_loc (line, 7), get_loc (line, 23));\n+      add_range (&richloc, get_loc (line + 1, 9), get_loc (line + 1, 26));\n       warning_at (&richloc, 0, \"test\");\n     }\n \n@@ -208,10 +209,10 @@ test_show_locus (function *fun)\n       text_range_label label1 (\"label 1\");\n       text_range_label label2 (\"label 2\");\n       rich_location richloc (line_table, get_loc (line + 5, 7), &label0);\n-      add_range (&richloc, get_loc (line, 7), get_loc (line + 4, 65), false,\n-\t\t &label1);\n+      add_range (&richloc, get_loc (line, 7), get_loc (line + 4, 65),\n+\t\t SHOW_RANGE_WITHOUT_CARET, &label1);\n       add_range (&richloc, get_loc (line + 5, 9), get_loc (line + 10, 61),\n-\t\t false, &label2);\n+\t\t SHOW_RANGE_WITHOUT_CARET, &label2);\n       warning_at (&richloc, 0, \"test\");\n     }\n \n@@ -250,7 +251,8 @@ test_show_locus (function *fun)\n \t\t\t\t\t    get_loc (line, 90),\n \t\t\t\t\t    get_loc (line, 98)),\n \t\t\t     &label0);\n-      richloc.add_range (get_loc (line, 35), false, &label1);\n+      richloc.add_range (get_loc (line, 35), SHOW_RANGE_WITHOUT_CARET,\n+\t\t\t &label1);\n       richloc.add_fixit_replace (\"bar * foo\");\n       warning_at (&richloc, 0, \"test\");\n       global_dc->show_ruler_p = false;\n@@ -270,7 +272,8 @@ test_show_locus (function *fun)\n \t\t\t\t\t    get_loc (line, 98)),\n \t\t\t     &label0);\n       richloc.add_fixit_replace (\"bar * foo\");\n-      richloc.add_range (get_loc (line, 34), false, &label1);\n+      richloc.add_range (get_loc (line, 34), SHOW_RANGE_WITHOUT_CARET,\n+\t\t\t &label1);\n       warning_at (&richloc, 0, \"test\");\n       global_dc->show_ruler_p = false;\n     }\n@@ -282,7 +285,7 @@ test_show_locus (function *fun)\n       location_t caret_a = get_loc (line, 7);\n       location_t caret_b = get_loc (line, 11);\n       rich_location richloc (line_table, caret_a);\n-      add_range (&richloc, caret_b, caret_b, true);\n+      add_range (&richloc, caret_b, caret_b, SHOW_RANGE_WITH_CARET);\n       global_dc->caret_chars[0] = 'A';\n       global_dc->caret_chars[1] = 'B';\n       warning_at (&richloc, 0, \"test\");\n@@ -400,7 +403,7 @@ test_show_locus (function *fun)\n       location_t caret_a = get_loc (line, 5);\n       location_t caret_b = get_loc (line - 1, 19);\n       rich_location richloc (line_table, caret_a);\n-      richloc.add_range (caret_b, true);\n+      richloc.add_range (caret_b, SHOW_RANGE_WITH_CARET);\n       global_dc->caret_chars[0] = '1';\n       global_dc->caret_chars[1] = '2';\n       warning_at (&richloc, 0, \"test\");\n@@ -449,7 +452,7 @@ test_show_locus (function *fun)\n \t\t      location_t word\n \t\t\t= make_location (start_of_word, start_of_word,\n \t\t\t\t\t end_of_word);\n-\t\t      richloc.add_range (word, true, &label);\n+\t\t      richloc.add_range (word, SHOW_RANGE_WITH_CARET, &label);\n \n \t\t      /* Add a fixit, converting to upper case.  */\n \t\t      char_span word_span = content.subspan (start_idx, idx - start_idx);"}, {"sha": "c4a200f7fbc633c1220a77506077123387b58fb9", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -290,7 +290,7 @@ default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n     }\n \n   if (set_locus)\n-    text->set_location (0, DECL_SOURCE_LOCATION (t), true);\n+    text->set_location (0, DECL_SOURCE_LOCATION (t), SHOW_RANGE_WITH_CARET);\n \n   if (DECL_P (t))\n     {"}, {"sha": "990cc2167c7590e01e5046cb103e2d3901f56932", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -3962,7 +3962,7 @@ newline_and_indent (pretty_printer *pp, int spc)\n void\n percent_K_format (text_info *text, location_t loc, tree block)\n {\n-  text->set_location (0, loc, true);\n+  text->set_location (0, loc, SHOW_RANGE_WITH_CARET);\n   gcc_assert (pp_ti_abstract_origin (text) != NULL);\n   *pp_ti_abstract_origin (text) = NULL;\n "}, {"sha": "7b716cf9a3e973d216ced67c3096f23cab9d0995", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1,3 +1,19 @@\n+2018-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR 87091\n+\t* include/line-map.h (enum range_display_kind): New enum.\n+\t(struct location_range): Replace field \"m_show_caret_p\" with\n+\t\"m_range_display_kind\", converting from bool to the new enum.\n+\t(class rich_location): Add example of line insertion fix-it hint.\n+\t(rich_location::add_range): Convert param \"show_caret_p\" from bool\n+\tto enum range_display_kind and rename to \"range_display_kind\",\n+\tgiving it a default of SHOW_RANGE_WITHOUT_CARET.\n+\t(rich_location::set_range): Likewise, albeit without a default.\n+\t* line-map.c (rich_location::rich_location): Update for conversion\n+\tof show_caret_p to tri-state enum.\n+\t(rich_location::add_range): Likewise.\n+\t(rich_location::set_range): Likewise.\n+\n 2018-08-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/86872"}, {"sha": "e74ccbb5703e869806638f29c16c0067c2b68108", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -1283,6 +1283,36 @@ typedef struct\n \n class range_label;\n \n+/* A hint to diagnostic_show_locus on how to print a source range within a\n+   rich_location.\n+\n+   Typically this is SHOW_RANGE_WITH_CARET for the 0th range, and\n+   SHOW_RANGE_WITHOUT_CARET for subsequent ranges,\n+   but the Fortran frontend uses SHOW_RANGE_WITH_CARET repeatedly for\n+   printing things like:\n+\n+       x = x + y\n+           1   2\n+       Error: Shapes for operands at (1) and (2) are not conformable\n+\n+   where \"1\" and \"2\" are notionally carets.  */\n+\n+enum range_display_kind\n+{\n+  /* Show the pertinent source line(s), the caret, and underline(s).  */\n+  SHOW_RANGE_WITH_CARET,\n+\n+  /* Show the pertinent source line(s) and underline(s), but don't\n+     show the caret (just an underline).  */\n+  SHOW_RANGE_WITHOUT_CARET,\n+\n+  /* Just show the source lines; don't show the range itself.\n+     This is for use when displaying some line-insertion fix-it hints (for\n+     showing the user context on the change, for when it doesn't make sense\n+     to highlight the first column on the next line).  */\n+  SHOW_LINES_WITHOUT_RANGE\n+};\n+\n /* A location within a rich_location: a caret&range, with\n    the caret potentially flagged for display, and an optional\n    label.  */\n@@ -1291,16 +1321,7 @@ struct location_range\n {\n   source_location m_loc;\n \n-  /* Should a caret be drawn for this range?  Typically this is\n-     true for the 0th range, and false for subsequent ranges,\n-     but the Fortran frontend overrides this for rendering things like:\n-\n-       x = x + y\n-           1   2\n-       Error: Shapes for operands at (1) and (2) are not conformable\n-\n-     where \"1\" and \"2\" are notionally carets.  */\n-  bool m_show_caret_p;\n+  enum range_display_kind m_range_display_kind;\n \n   /* If non-NULL, the label for this range.  */\n   const range_label *m_label;\n@@ -1567,6 +1588,18 @@ class fixit_hint;\n    added via\n      richloc.add_fixit_replace (\"color\");\n \n+   Example J: fix-it hint: line insertion\n+   **************************************\n+\n+     3 | #include <stddef.h>\n+     + |+#include <stdio.h>\n+     4 | int the_next_line;\n+\n+   This rich location has a single range at line 4 column 1, marked\n+   with SHOW_LINES_WITHOUT_RANGE (to avoid printing a meaningless caret\n+   on the \"i\" of int).  It has a insertion fix-it hint of the string\n+   \"#include <stdio.h>\\n\".\n+\n    Adding a fix-it hint can fail: for example, attempts to insert content\n    at the transition between two line maps may fail due to there being no\n    source_location (aka location_t) value to express the new location.\n@@ -1610,11 +1643,14 @@ class rich_location\n   source_location get_loc (unsigned int idx) const;\n \n   void\n-  add_range (source_location loc,  bool show_caret_p,\n+  add_range (source_location loc,\n+\t     enum range_display_kind range_display_kind\n+\t       = SHOW_RANGE_WITHOUT_CARET,\n \t     const range_label *label = NULL);\n \n   void\n-  set_range (unsigned int idx, source_location loc, bool show_caret_p);\n+  set_range (unsigned int idx, source_location loc,\n+\t     enum range_display_kind range_display_kind);\n \n   unsigned int get_num_locations () const { return m_ranges.count (); }\n "}, {"sha": "73d94443090004ebba1cda5fcab42ef5ca652d3d", "filename": "libcpp/line-map.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85204e23e2fed09fc07159ab5607e0b760269561/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85204e23e2fed09fc07159ab5607e0b760269561/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=85204e23e2fed09fc07159ab5607e0b760269561", "patch": "@@ -2005,7 +2005,7 @@ rich_location::rich_location (line_maps *set, source_location loc,\n   m_seen_impossible_fixit (false),\n   m_fixits_cannot_be_auto_applied (false)\n {\n-  add_range (loc, true, label);\n+  add_range (loc, SHOW_RANGE_WITH_CARET, label);\n }\n \n /* The destructor for class rich_location.  */\n@@ -2081,18 +2081,19 @@ rich_location::override_column (int column)\n /* Add the given range.  */\n \n void\n-rich_location::add_range (source_location loc, bool show_caret_p,\n+rich_location::add_range (source_location loc,\n+\t\t\t  enum range_display_kind range_display_kind,\n \t\t\t  const range_label *label)\n {\n   location_range range;\n   range.m_loc = loc;\n-  range.m_show_caret_p = show_caret_p;\n+  range.m_range_display_kind = range_display_kind;\n   range.m_label = label;\n   m_ranges.push (range);\n }\n \n /* Add or overwrite the location given by IDX, setting its location to LOC,\n-   and setting its \"should my caret be printed\" flag to SHOW_CARET_P.\n+   and setting its m_range_display_kind to RANGE_DISPLAY_KIND.\n \n    It must either overwrite an existing location, or add one *exactly* on\n    the end of the array.\n@@ -2106,19 +2107,19 @@ rich_location::add_range (source_location loc, bool show_caret_p,\n \n void\n rich_location::set_range (unsigned int idx, source_location loc,\n-\t\t\t  bool show_caret_p)\n+\t\t\t  enum range_display_kind range_display_kind)\n {\n   /* We can either overwrite an existing range, or add one exactly\n      on the end of the array.  */\n   linemap_assert (idx <= m_ranges.count ());\n \n   if (idx == m_ranges.count ())\n-    add_range (loc,  show_caret_p);\n+    add_range (loc, range_display_kind);\n   else\n     {\n       location_range *locrange = get_range (idx);\n       locrange->m_loc = loc;\n-      locrange->m_show_caret_p = show_caret_p;\n+      locrange->m_range_display_kind = range_display_kind;\n     }\n \n   if (idx == 0)"}]}