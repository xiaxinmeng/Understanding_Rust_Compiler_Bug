{"sha": "87ce34d632040b4a51324f71e0dc87f1942f57d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjZTM0ZDYzMjA0MGI0YTUxMzI0ZjcxZTBkYzg3ZjE5NDJmNTdkOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-25T19:31:31Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-09-25T19:31:31Z"}, "message": "(instantiate_decl): Always store addr back into x.\n\nFrom-SVN: r12842", "tree": {"sha": "c8641b80ec988ea5f0dbf7063c1287095e36a69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8641b80ec988ea5f0dbf7063c1287095e36a69d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87ce34d632040b4a51324f71e0dc87f1942f57d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ce34d632040b4a51324f71e0dc87f1942f57d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ce34d632040b4a51324f71e0dc87f1942f57d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ce34d632040b4a51324f71e0dc87f1942f57d9/comments", "author": null, "committer": null, "parents": [{"sha": "f49e41275c653b4fe1e4e92b5f6d3df93e21a691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49e41275c653b4fe1e4e92b5f6d3df93e21a691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49e41275c653b4fe1e4e92b5f6d3df93e21a691"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "b34f48dd0e3be21e6a0dbd2b3c06491bcbdd2bbe", "filename": "gcc/function.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ce34d632040b4a51324f71e0dc87f1942f57d9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ce34d632040b4a51324f71e0dc87f1942f57d9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=87ce34d632040b4a51324f71e0dc87f1942f57d9", "patch": "@@ -2684,28 +2684,28 @@ instantiate_decl (x, size, valid_only)\n \n   instantiate_virtual_regs_1 (&addr, NULL_RTX, 0);\n \n-  if (! valid_only)\n-    return;\n-\n-  /* Now verify that the resulting address is valid for every integer or\n-     floating-point mode up to and including SIZE bytes long.  We do this\n-     since the object might be accessed in any mode and frame addresses\n-     are shared.  */\n-\n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n-       mode != VOIDmode && GET_MODE_SIZE (mode) <= size;\n-       mode = GET_MODE_WIDER_MODE (mode))\n-    if (! memory_address_p (mode, addr))\n-      return;\n+  if (valid_only)\n+    {\n+      /* Now verify that the resulting address is valid for every integer or\n+\t floating-point mode up to and including SIZE bytes long.  We do this\n+\t since the object might be accessed in any mode and frame addresses\n+\t are shared.  */\n+\n+      for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n+\t   mode != VOIDmode && GET_MODE_SIZE (mode) <= size;\n+\t   mode = GET_MODE_WIDER_MODE (mode))\n+\tif (! memory_address_p (mode, addr))\n+\t  return;\n \n-  for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);\n-       mode != VOIDmode && GET_MODE_SIZE (mode) <= size;\n-       mode = GET_MODE_WIDER_MODE (mode))\n-    if (! memory_address_p (mode, addr))\n-      return;\n+      for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);\n+\t   mode != VOIDmode && GET_MODE_SIZE (mode) <= size;\n+\t   mode = GET_MODE_WIDER_MODE (mode))\n+\tif (! memory_address_p (mode, addr))\n+\t  return;\n+    }\n \n-  /* Otherwise, put back the address, now that we have updated it and we\n-     know it is valid.  */\n+  /* Put back the address now that we have updated it and we either know\n+     it is valid or we don't care whether it is valid.  */\n \n   XEXP (x, 0) = addr;\n }"}]}