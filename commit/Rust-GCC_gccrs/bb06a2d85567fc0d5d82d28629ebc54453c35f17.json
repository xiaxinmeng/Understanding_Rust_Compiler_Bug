{"sha": "bb06a2d85567fc0d5d82d28629ebc54453c35f17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIwNmEyZDg1NTY3ZmMwZDVkODJkMjg2MjllYmM1NDQ1M2MzNWYxNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-22T21:39:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-22T21:39:29Z"}, "message": "Make more use of GET_MODE_UNIT_PRECISION\n\nThis patch is like the earlier GET_MODE_UNIT_SIZE one,\nbut for precisions rather than sizes.  There is one behavioural\nchange in expand_debug_expr: we shouldn't use lowpart subregs\nfor non-scalar truncations, since that would just reinterpret\nsome of the scalars and drop the rest.  (This probably doesn't\ntrigger in practice.)  Using TRUNCATE is fine for scalars,\nsince simplify_gen_unary knows when a subreg can be used.\n\n2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* cfgexpand.c (expand_debug_expr): Use GET_MODE_UNIT_PRECISION.\n\t(expand_debug_source_expr): Likewise.\n\t* combine.c (combine_simplify_rtx): Likewise.\n\t* cse.c (fold_rtx): Likewise.\n\t* optabs.c (expand_float): Likewise.\n\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n\t(simplify_binary_operation_1): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253991", "tree": {"sha": "4eaaa8513cdd739b4ec805e56e182a356e6d60b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eaaa8513cdd739b4ec805e56e182a356e6d60b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb06a2d85567fc0d5d82d28629ebc54453c35f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb06a2d85567fc0d5d82d28629ebc54453c35f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb06a2d85567fc0d5d82d28629ebc54453c35f17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb06a2d85567fc0d5d82d28629ebc54453c35f17/comments", "author": null, "committer": null, "parents": [{"sha": "1e3734f59eee29ed335da8fc9f40e66903f64b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3734f59eee29ed335da8fc9f40e66903f64b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3734f59eee29ed335da8fc9f40e66903f64b20"}], "stats": {"total": 85, "additions": 54, "deletions": 31}, "files": [{"sha": "ebaf8b354cc3c343bc298fd7f641fdfe08de7e82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb06a2d85567fc0d5d82d28629ebc54453c35f17", "patch": "@@ -1,3 +1,15 @@\n+2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* cfgexpand.c (expand_debug_expr): Use GET_MODE_UNIT_PRECISION.\n+\t(expand_debug_source_expr): Likewise.\n+\t* combine.c (combine_simplify_rtx): Likewise.\n+\t* cse.c (fold_rtx): Likewise.\n+\t* optabs.c (expand_float): Likewise.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n+\t(simplify_binary_operation_1): Likewise.\n+\n 2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "79204bd49e4c5a60183f450a26c7ee9483175f76", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=bb06a2d85567fc0d5d82d28629ebc54453c35f17", "patch": "@@ -4361,9 +4361,12 @@ expand_debug_expr (tree exp)\n \t    else\n \t      op0 = simplify_gen_unary (FIX, mode, op0, inner_mode);\n \t  }\n-\telse if (CONSTANT_P (op0)\n-\t\t || GET_MODE_PRECISION (mode) <= GET_MODE_PRECISION (inner_mode))\n+\telse if (GET_MODE_UNIT_PRECISION (mode)\n+\t\t == GET_MODE_UNIT_PRECISION (inner_mode))\n \t  op0 = lowpart_subreg (mode, op0, inner_mode);\n+\telse if (GET_MODE_UNIT_PRECISION (mode)\n+\t\t < GET_MODE_UNIT_PRECISION (inner_mode))\n+\t  op0 = simplify_gen_unary (TRUNCATE, mode, op0, inner_mode);\n \telse if (UNARY_CLASS_P (exp)\n \t\t ? TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0)))\n \t\t : unsignedp)\n@@ -5222,9 +5225,12 @@ expand_debug_source_expr (tree exp)\n       else\n \top0 = simplify_gen_unary (FIX, mode, op0, inner_mode);\n     }\n-  else if (CONSTANT_P (op0)\n-\t   || GET_MODE_BITSIZE (mode) <= GET_MODE_BITSIZE (inner_mode))\n+  else if (GET_MODE_UNIT_PRECISION (mode)\n+\t   == GET_MODE_UNIT_PRECISION (inner_mode))\n     op0 = lowpart_subreg (mode, op0, inner_mode);\n+  else if (GET_MODE_UNIT_PRECISION (mode)\n+\t   < GET_MODE_UNIT_PRECISION (inner_mode))\n+    op0 = simplify_gen_unary (TRUNCATE, mode, op0, inner_mode);\n   else if (TYPE_UNSIGNED (TREE_TYPE (exp)))\n     op0 = simplify_gen_unary (ZERO_EXTEND, mode, op0, inner_mode);\n   else"}, {"sha": "e5c276901d8d0e3140849ae230567bd2fb405ae4", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bb06a2d85567fc0d5d82d28629ebc54453c35f17", "patch": "@@ -5886,7 +5886,7 @@ combine_simplify_rtx (rtx x, machine_mode op0_mode, int in_dest,\n \n       if (GET_CODE (temp) == ASHIFTRT\n \t  && CONST_INT_P (XEXP (temp, 1))\n-\t  && INTVAL (XEXP (temp, 1)) == GET_MODE_PRECISION (mode) - 1)\n+\t  && INTVAL (XEXP (temp, 1)) == GET_MODE_UNIT_PRECISION (mode) - 1)\n \treturn simplify_shift_const (NULL_RTX, LSHIFTRT, mode, XEXP (temp, 0),\n \t\t\t\t     INTVAL (XEXP (temp, 1)));\n "}, {"sha": "65cc9ae110c1468fa194f587cae11f3fa424a442", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=bb06a2d85567fc0d5d82d28629ebc54453c35f17", "patch": "@@ -3607,7 +3607,7 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t      enum rtx_code associate_code;\n \n \t      if (is_shift\n-\t\t  && (INTVAL (const_arg1) >= GET_MODE_PRECISION (mode)\n+\t\t  && (INTVAL (const_arg1) >= GET_MODE_UNIT_PRECISION (mode)\n \t\t      || INTVAL (const_arg1) < 0))\n \t\t{\n \t\t  if (SHIFT_COUNT_TRUNCATED)\n@@ -3656,7 +3656,7 @@ fold_rtx (rtx x, rtx_insn *insn)\n                 break;\n \n \t      if (is_shift\n-\t\t  && (INTVAL (inner_const) >= GET_MODE_PRECISION (mode)\n+\t\t  && (INTVAL (inner_const) >= GET_MODE_UNIT_PRECISION (mode)\n \t\t      || INTVAL (inner_const) < 0))\n \t\t{\n \t\t  if (SHIFT_COUNT_TRUNCATED)\n@@ -3687,7 +3687,7 @@ fold_rtx (rtx x, rtx_insn *insn)\n \n \t      if (is_shift\n \t\t  && CONST_INT_P (new_const)\n-\t\t  && INTVAL (new_const) >= GET_MODE_PRECISION (mode))\n+\t\t  && INTVAL (new_const) >= GET_MODE_UNIT_PRECISION (mode))\n \t\t{\n \t\t  /* As an exception, we can turn an ASHIFTRT of this\n \t\t     form into a shift of the number of bits - 1.  */"}, {"sha": "15ca315d49e23e6e45e4dc6e7b64ffaa76b78265", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=bb06a2d85567fc0d5d82d28629ebc54453c35f17", "patch": "@@ -4655,7 +4655,8 @@ expand_float (rtx to, rtx from, int unsignedp)\n \tint doing_unsigned = unsignedp;\n \n \tif (fmode != GET_MODE (to)\n-\t    && significand_size (fmode) < GET_MODE_PRECISION (GET_MODE (from)))\n+\t    && (significand_size (fmode)\n+\t\t< GET_MODE_UNIT_PRECISION (GET_MODE (from))))\n \t  continue;\n \n \ticode = can_float_p (fmode, imode, unsignedp);"}, {"sha": "da0283dd1bf8a350f8f68ac00ad3ae70a46b54b6", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb06a2d85567fc0d5d82d28629ebc54453c35f17/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=bb06a2d85567fc0d5d82d28629ebc54453c35f17", "patch": "@@ -1136,15 +1136,15 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t C is equal to the width of MODE minus 1.  */\n       if (GET_CODE (op) == ASHIFTRT\n \t  && CONST_INT_P (XEXP (op, 1))\n-\t  && INTVAL (XEXP (op, 1)) == GET_MODE_PRECISION (mode) - 1)\n+\t  && INTVAL (XEXP (op, 1)) == GET_MODE_UNIT_PRECISION (mode) - 1)\n \treturn simplify_gen_binary (LSHIFTRT, mode,\n \t\t\t\t    XEXP (op, 0), XEXP (op, 1));\n \n       /* (neg (lshiftrt X C)) can be replaced by (ashiftrt X C) when\n \t C is equal to the width of MODE minus 1.  */\n       if (GET_CODE (op) == LSHIFTRT\n \t  && CONST_INT_P (XEXP (op, 1))\n-\t  && INTVAL (XEXP (op, 1)) == GET_MODE_PRECISION (mode) - 1)\n+\t  && INTVAL (XEXP (op, 1)) == GET_MODE_UNIT_PRECISION (mode) - 1)\n \treturn simplify_gen_binary (ASHIFTRT, mode,\n \t\t\t\t    XEXP (op, 0), XEXP (op, 1));\n \n@@ -1446,19 +1446,21 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \n \t      if (lcode == ASHIFTRT)\n \t\t/* Number of bits not shifted off the end.  */\n-\t\tbits = GET_MODE_PRECISION (lmode) - INTVAL (XEXP (lhs, 1));\n+\t\tbits = (GET_MODE_UNIT_PRECISION (lmode)\n+\t\t\t- INTVAL (XEXP (lhs, 1)));\n \t      else /* lcode == SIGN_EXTEND */\n \t\t/* Size of inner mode.  */\n-\t\tbits = GET_MODE_PRECISION (GET_MODE (XEXP (lhs, 0)));\n+\t\tbits = GET_MODE_UNIT_PRECISION (GET_MODE (XEXP (lhs, 0)));\n \n \t      if (rcode == ASHIFTRT)\n-\t\tbits += GET_MODE_PRECISION (rmode) - INTVAL (XEXP (rhs, 1));\n+\t\tbits += (GET_MODE_UNIT_PRECISION (rmode)\n+\t\t\t - INTVAL (XEXP (rhs, 1)));\n \t      else /* rcode == SIGN_EXTEND */\n-\t\tbits += GET_MODE_PRECISION (GET_MODE (XEXP (rhs, 0)));\n+\t\tbits += GET_MODE_UNIT_PRECISION (GET_MODE (XEXP (rhs, 0)));\n \n \t      /* We can only widen multiplies if the result is mathematiclly\n \t\t equivalent.  I.e. if overflow was impossible.  */\n-\t      if (bits <= GET_MODE_PRECISION (GET_MODE (op)))\n+\t      if (bits <= GET_MODE_UNIT_PRECISION (GET_MODE (op)))\n \t\treturn simplify_gen_binary\n \t\t\t (MULT, mode,\n \t\t\t  simplify_gen_unary (SIGN_EXTEND, mode, lhs, lmode),\n@@ -1483,8 +1485,8 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t (sign_extend:M (zero_extend:N <X>)) is (zero_extend:M <X>).  */\n       if (GET_CODE (op) == SIGN_EXTEND || GET_CODE (op) == ZERO_EXTEND)\n \t{\n-\t  gcc_assert (GET_MODE_PRECISION (mode)\n-\t\t      > GET_MODE_PRECISION (GET_MODE (op)));\n+\t  gcc_assert (GET_MODE_UNIT_PRECISION (mode)\n+\t\t      > GET_MODE_UNIT_PRECISION (GET_MODE (op)));\n \t  return simplify_gen_unary (GET_CODE (op), mode, XEXP (op, 0),\n \t\t\t\t     GET_MODE (XEXP (op, 0)));\n \t}\n@@ -1584,19 +1586,21 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \n \t      if (lcode == LSHIFTRT)\n \t\t/* Number of bits not shifted off the end.  */\n-\t\tbits = GET_MODE_PRECISION (lmode) - INTVAL (XEXP (lhs, 1));\n+\t\tbits = (GET_MODE_UNIT_PRECISION (lmode)\n+\t\t\t- INTVAL (XEXP (lhs, 1)));\n \t      else /* lcode == ZERO_EXTEND */\n \t\t/* Size of inner mode.  */\n-\t\tbits = GET_MODE_PRECISION (GET_MODE (XEXP (lhs, 0)));\n+\t\tbits = GET_MODE_UNIT_PRECISION (GET_MODE (XEXP (lhs, 0)));\n \n \t      if (rcode == LSHIFTRT)\n-\t\tbits += GET_MODE_PRECISION (rmode) - INTVAL (XEXP (rhs, 1));\n+\t\tbits += (GET_MODE_UNIT_PRECISION (rmode)\n+\t\t\t - INTVAL (XEXP (rhs, 1)));\n \t      else /* rcode == ZERO_EXTEND */\n-\t\tbits += GET_MODE_PRECISION (GET_MODE (XEXP (rhs, 0)));\n+\t\tbits += GET_MODE_UNIT_PRECISION (GET_MODE (XEXP (rhs, 0)));\n \n \t      /* We can only widen multiplies if the result is mathematiclly\n \t\t equivalent.  I.e. if overflow was impossible.  */\n-\t      if (bits <= GET_MODE_PRECISION (GET_MODE (op)))\n+\t      if (bits <= GET_MODE_UNIT_PRECISION (GET_MODE (op)))\n \t\treturn simplify_gen_binary\n \t\t\t (MULT, mode,\n \t\t\t  simplify_gen_unary (ZERO_EXTEND, mode, lhs, lmode),\n@@ -2144,7 +2148,6 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n {\n   rtx tem, reversed, opleft, opright;\n   HOST_WIDE_INT val;\n-  unsigned int width = GET_MODE_PRECISION (mode);\n   scalar_int_mode int_mode, inner_mode;\n \n   /* Even if we can't compute a constant result,\n@@ -2702,7 +2705,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n           && CONST_INT_P (XEXP (opleft, 1))\n           && CONST_INT_P (XEXP (opright, 1))\n           && (INTVAL (XEXP (opleft, 1)) + INTVAL (XEXP (opright, 1))\n-              == GET_MODE_PRECISION (mode)))\n+\t      == GET_MODE_UNIT_PRECISION (mode)))\n         return gen_rtx_ROTATE (mode, XEXP (opright, 0), XEXP (opleft, 1));\n \n       /* Same, but for ashift that has been \"simplified\" to a wider mode\n@@ -3328,11 +3331,12 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n #if defined(HAVE_rotate) && defined(HAVE_rotatert)\n       if (CONST_INT_P (trueop1)\n \t  && IN_RANGE (INTVAL (trueop1),\n-\t\t       GET_MODE_PRECISION (mode) / 2 + (code == ROTATE),\n-\t\t       GET_MODE_PRECISION (mode) - 1))\n+\t\t       GET_MODE_UNIT_PRECISION (mode) / 2 + (code == ROTATE),\n+\t\t       GET_MODE_UNIT_PRECISION (mode) - 1))\n \treturn simplify_gen_binary (code == ROTATE ? ROTATERT : ROTATE,\n-\t\t\t\t    mode, op0, GEN_INT (GET_MODE_PRECISION (mode)\n-\t\t\t\t\t\t\t- INTVAL (trueop1)));\n+\t\t\t\t    mode, op0,\n+\t\t\t\t    GEN_INT (GET_MODE_UNIT_PRECISION (mode)\n+\t\t\t\t\t     - INTVAL (trueop1)));\n #endif\n       /* FALLTHRU */\n     case ASHIFTRT:\n@@ -3383,7 +3387,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \n       if (SHIFT_COUNT_TRUNCATED && CONST_INT_P (op1))\n \t{\n-\t  val = INTVAL (op1) & (GET_MODE_PRECISION (mode) - 1);\n+\t  val = INTVAL (op1) & (GET_MODE_UNIT_PRECISION (mode) - 1);\n \t  if (val != INTVAL (op1))\n \t    return simplify_gen_binary (code, mode, op0, GEN_INT (val));\n \t}\n@@ -3408,7 +3412,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  && is_a <scalar_int_mode> (GET_MODE (XEXP (op0, 0)), &inner_mode)\n \t  && CONST_INT_P (trueop1)\n \t  && STORE_FLAG_VALUE == 1\n-\t  && INTVAL (trueop1) < (HOST_WIDE_INT)width)\n+\t  && INTVAL (trueop1) < GET_MODE_UNIT_PRECISION (mode))\n \t{\n \t  unsigned HOST_WIDE_INT zero_val = 0;\n "}]}