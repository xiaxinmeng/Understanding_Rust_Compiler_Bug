{"sha": "7868b4a2520b831eec35cbabc7f28d3694aebbf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2OGI0YTI1MjBiODMxZWVjMzVjYmFiYzdmMjhkMzY5NGFlYmJmNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-03-04T12:02:02Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-03-04T12:02:02Z"}, "message": "cppfiles.c (_cpp_execute_include): Don't make a null-terminated copy of the filename.\n\n\t* cppfiles.c (_cpp_execute_include): Don't make a null-terminated\n\tcopy of the filename.  Don't use CPP_PREV_BUFFER.  Don't call\n\tstrlen or strcpy; we already know the length.\n\t(_cpp_compare_file_date): Similarly.\n\t* cpphash.h (struct cpp_reader): Delete done_initialising.\n\t(CPP_PREV_BUFFER): Delete.\n\t* cppinit.c (cpp_start_read): Don't set done_initialising.\n\t* cpplex.c (parse_string): Guarantee null-termination.\n\t(_cpp_equiv_toklists): Remove.\n\t* cpplib.c (glue_header_name): Null-terminate.\n\t(do_line): Don't leak memory.\n\t* cpplib.h (BT_WEAK): Delete.\n\t* cppmain.c (cb_ident): Strings are now null-terminated.\n\nFrom-SVN: r40233", "tree": {"sha": "d7897ebb45f49ac182f124043b11088aa89ca781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7897ebb45f49ac182f124043b11088aa89ca781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7868b4a2520b831eec35cbabc7f28d3694aebbf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7868b4a2520b831eec35cbabc7f28d3694aebbf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7868b4a2520b831eec35cbabc7f28d3694aebbf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7868b4a2520b831eec35cbabc7f28d3694aebbf4/comments", "author": null, "committer": null, "parents": [{"sha": "91c704c4589f1d5e2a9d4cf3e070b56907cf5f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c704c4589f1d5e2a9d4cf3e070b56907cf5f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c704c4589f1d5e2a9d4cf3e070b56907cf5f61"}], "stats": {"total": 131, "additions": 53, "deletions": 78}, "files": [{"sha": "7a1772bb87e4079dcea82f46716770d448f3a142", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -1,9 +1,25 @@\n-2001-03-04  Laurynas Biveinis  <lauras@softhome.net>\r\n-\r\n-\t* gcc.c (convert_filename): Append executable suffix\r\n-\tif NO_AUTO_EXE_SUFFIX is not defined.\r\n-\t* gcc.texi: Document NO_AUTO_EXE_SUFFIX.\r\n-\t* config/i386/djgpp.h: Define NO_AUTO_EXE_SUFFIX.\r\n+2001-03-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppfiles.c (_cpp_execute_include): Don't make a null-terminated\n+\tcopy of the filename.  Don't use CPP_PREV_BUFFER.  Don't call\n+\tstrlen or strcpy; we already know the length.\n+\t(_cpp_compare_file_date): Similarly.\n+\t* cpphash.h (struct cpp_reader): Delete done_initialising.\n+\t(CPP_PREV_BUFFER): Delete.\n+\t* cppinit.c (cpp_start_read): Don't set done_initialising.\n+\t* cpplex.c (parse_string): Guarantee null-termination.\n+\t(_cpp_equiv_toklists): Remove.\n+\t* cpplib.c (glue_header_name): Null-terminate.\n+\t(do_line): Don't leak memory.\n+\t* cpplib.h (BT_WEAK): Delete.\n+\t* cppmain.c (cb_ident): Strings are now null-terminated.\n+\n+2001-03-04  Laurynas Biveinis  <lauras@softhome.net>\n+\n+\t* gcc.c (convert_filename): Append executable suffix\n+\tif NO_AUTO_EXE_SUFFIX is not defined.\n+\t* gcc.texi: Document NO_AUTO_EXE_SUFFIX.\n+\t* config/i386/djgpp.h: Define NO_AUTO_EXE_SUFFIX.\n \n 2001-03-03  David O'Brien  <obrien@FreeBSD.org>\n \t"}, {"sha": "0dfd9d0db66c0f2f7a0f69ce9adc3342b844fd09", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -585,10 +585,9 @@ _cpp_execute_include (pfile, header, no_reinclude, include_next)\n      int include_next;\n {\n   struct search_path *search_start = 0;\n-  unsigned int len = header->val.str.len;\n   unsigned int angle_brackets = header->type == CPP_HEADER_NAME;\n+  const char *fname = (const char *) header->val.str.text;\n   struct include_file *inc;\n-  char *fname;\n   int print_dep;\n \n   /* Help protect #include or similar from recursion.  */\n@@ -626,10 +625,6 @@ _cpp_execute_include (pfile, header, no_reinclude, include_next)\n \t}\n     }\n \n-  fname = alloca (len + 1);\n-  memcpy (fname, header->val.str.text, len);\n-  fname[len] = '\\0';\n-\n   if (!search_start)\n     {\n       if (angle_brackets)\n@@ -660,8 +655,8 @@ _cpp_execute_include (pfile, header, no_reinclude, include_next)\n \t  /* Handle -H option.  */\n \t  if (CPP_OPTION (pfile, print_include_names))\n \t    {\n-\t      cpp_buffer *fp = CPP_BUFFER (pfile);\n-\t      while ((fp = CPP_PREV_BUFFER (fp)) != NULL)\n+\t      cpp_buffer *fp = pfile->buffer;\n+\t      while ((fp = fp->prev) != NULL)\n \t\tputc ('.', stderr);\n \t      fprintf (stderr, \" %s\\n\", inc->name);\n \t    }\n@@ -692,13 +687,13 @@ _cpp_execute_include (pfile, header, no_reinclude, include_next)\n \n \t  /* FIXME: ptr can be null, no?  */\n \t  len = ptr->len;\n-\t  p = (char *) alloca (len + strlen (fname) + 2);\n+\t  p = (char *) alloca (len + header->val.str.len + 2);\n \t  if (len)\n \t    {\n \t      memcpy (p, ptr->name, len);\n \t      p[len++] = '/';\n \t    }\n-\t  strcpy (p + len, fname);\n+\t  memcpy (p + len, fname, header->val.str.len + 1);\n \t  _cpp_simplify_pathname (p);\n \t  deps_add_dep (pfile->deps, p);\n \t}\n@@ -722,8 +717,7 @@ _cpp_compare_file_date (pfile, f)\n      cpp_reader *pfile;\n      const cpp_token *f;\n {\n-  unsigned int len = f->val.str.len;\n-  char *fname;\n+  const char *fname = (const char *) f->val.str.text;\n   struct search_path *search_start;\n   struct include_file *inc;\n \n@@ -732,9 +726,6 @@ _cpp_compare_file_date (pfile, f)\n   else if (CPP_OPTION (pfile, ignore_srcdir))\n     search_start = pfile->buffer->search_from;\n \n-  fname = alloca (len + 1);\n-  memcpy (fname, f->val.str.text, len);\n-  fname[len] = '\\0';\n   inc = find_include_file (pfile, fname, search_start);\n   \n   if (!inc)"}, {"sha": "df27e7325b9ee3abd0edc7d3fd9fa2029018eb97", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -339,10 +339,6 @@ struct cpp_reader\n   /* We're printed a warning recommending against using #import.  */\n   unsigned char import_warning;\n \n-  /* True after cpp_start_read completes.  Used to inhibit some\n-     warnings while parsing the command line.  */\n-  unsigned char done_initializing;\n-\n   /* True if we are skipping a failed conditional group.  */\n   unsigned char skipping;\n \n@@ -380,7 +376,6 @@ extern unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n \n /* Macros.  */\n \n-#define CPP_PREV_BUFFER(BUFFER) ((BUFFER)->prev)\n #define CPP_PRINT_DEPS(PFILE) CPP_OPTION (PFILE, print_deps)\n #define CPP_IN_SYSTEM_HEADER(PFILE) \\\n   (CPP_BUFFER (PFILE) && CPP_BUFFER (PFILE)->sysp)"}, {"sha": "457d2662771e2c3c24ab4ee1ca2b88ade37ab08d", "filename": "gcc/cppinit.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -948,8 +948,6 @@ cpp_start_read (pfile, fname)\n       p = q;\n     }\n \n-  pfile->done_initializing = 1;\n-\n   /* The -imacros files can be scanned now, but the -include files\n      have to be pushed onto the buffer stack and processed later,\n      otherwise cppmain.c won't see the tokens.  include_head was built"}, {"sha": "37a0c61e3a3d0051fa4041acd3fd299daba89f61", "filename": "gcc/cpplex.c", "status": "modified", "additions": 19, "deletions": 39, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -629,10 +629,11 @@ unescaped_terminator_p (pfile, dest)\n }\n \n /* Parses a string, character constant, or angle-bracketed header file\n-   name.  Handles embedded trigraphs and escaped newlines.\n+   name.  Handles embedded trigraphs and escaped newlines.  The stored\n+   string is guaranteed NUL-terminated, but it is not guaranteed that\n+   this is the first NUL since embedded NULs are preserved.\n \n-   Multi-line strings are allowed, but they are deprecated within\n-   directives.  */\n+   Multi-line strings are allowed, but they are deprecated.  */\n static void\n parse_string (pfile, token, terminator)\n      cpp_reader *pfile;\n@@ -651,14 +652,21 @@ parse_string (pfile, token, terminator)\n   for (;;)\n     {\n       if (buffer->cur == buffer->rlimit)\n+\tc = EOF;\n+      else\n+\tc = *buffer->cur++;\n+\n+    have_char:\n+      /* We need space for the terminating NUL.  */\n+      if (dest >= limit)\n+\tlimit = _cpp_next_chunk (pool, 0, &dest);\n+\n+      if (c == EOF)\n \t{\n-\t  c = EOF;\n \t  unterminated (pfile, terminator);\n \t  break;\n \t}\n-      c = *buffer->cur++;\n \n-    have_char:\n       /* Handle trigraphs, escaped newlines etc.  */\n       if (c == '?' || c == '\\\\')\n \tc = skip_escaped_newlines (buffer, c);\n@@ -690,34 +698,26 @@ parse_string (pfile, token, terminator)\n \t  if (pfile->mlstring_pos.line == 0)\n \t    pfile->mlstring_pos = pfile->lexer_pos;\n \t      \n-\t  handle_newline (buffer, c);  /* Stores to read_ahead.  */\n-\t  c = '\\n';\n+\t  c = handle_newline (buffer, c);\n+\t  *dest++ = '\\n';\n+\t  goto have_char;\n \t}\n       else if (c == '\\0')\n \t{\n \t  if (nulls++ == 0)\n \t    cpp_warning (pfile, \"null character(s) preserved in literal\");\n \t}\n \n-      /* No terminating null for strings - they could contain nulls.  */\n-      if (dest >= limit)\n-\tlimit = _cpp_next_chunk (pool, 0, &dest);\n       *dest++ = c;\n-\n-      /* If we had a new line, the next character is in read_ahead.  */\n-      if (c != '\\n')\n-\tcontinue;\n-      c = buffer->read_ahead;\n-      if (c != EOF)\n-\tgoto have_char;\n     }\n \n   /* Remember the next character.  */\n   buffer->read_ahead = c;\n+  *dest = '\\0';\n \n   token->val.str.text = POOL_FRONT (pool);\n   token->val.str.len = dest - token->val.str.text;\n-  POOL_COMMIT (pool, token->val.str.len);\n+  POOL_COMMIT (pool, token->val.str.len + 1);\n }\n \n /* The stored comment includes the comment start and any terminator.  */\n@@ -1481,26 +1481,6 @@ _cpp_equiv_tokens (a, b)\n   return 0;\n }\n \n-#if 0\n-/* Compare two token lists.  */\n-int\n-_cpp_equiv_toklists (a, b)\n-     const struct toklist *a, *b;\n-{\n-  unsigned int i, count;\n-\n-  count = a->limit - a->first;\n-  if (count != (b->limit - b->first))\n-    return 0;\n-\n-  for (i = 0; i < count; i++)\n-    if (! _cpp_equiv_tokens (&a->first[i], &b->first[i]))\n-      return 0;\n-\n-  return 1;\n-}\n-#endif\n-\n /* Determine whether two tokens can be pasted together, and if so,\n    what the resulting token is.  Returns CPP_EOF if the tokens cannot\n    be pasted, or the appropriate type for the merged token if they"}, {"sha": "571e20471c96a314780906a1b0932011307667f4", "filename": "gcc/cpplib.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -525,8 +525,9 @@ glue_header_name (pfile, header)\n     cpp_error (pfile, \"missing terminating > character\");\n   else\n     {\n-      token_mem = _cpp_pool_alloc (&pfile->ident_pool, total_len);\n+      token_mem = _cpp_pool_alloc (&pfile->ident_pool, total_len + 1);\n       memcpy (token_mem, buffer, total_len);\n+      token_mem[total_len] = '\\0';\n \n       header->type = CPP_HEADER_NAME;\n       header->flags &= ~PREV_WHITE;\n@@ -708,14 +709,10 @@ do_line (pfile)\n   if (token.type == CPP_STRING)\n     {\n       char *fname;\n-      unsigned int len;\n+      unsigned int len = token.val.str.len + 1;\n \n-      /* FIXME: memory leak.  */\n-      len = token.val.str.len;\n-      fname = xmalloc (len + 1);\n+      fname = (char *) _cpp_pool_alloc (&pfile->ident_pool, len);\n       memcpy (fname, token.val.str.text, len);\n-      fname[len] = '\\0';\n-    \n       _cpp_simplify_pathname (fname);\n \n       /* Only accept flags for the # 55 form.  */"}, {"sha": "c0c3ff3dc9ffd1bb81dd28e2ae422c84dab056db", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -463,9 +463,7 @@ enum builtin_type\n   BT_BASE_FILE,\t\t\t/* `__BASE_FILE__' */\n   BT_INCLUDE_LEVEL,\t\t/* `__INCLUDE_LEVEL__' */\n   BT_TIME,\t\t\t/* `__TIME__' */\n-  BT_STDC,\t\t\t/* `__STDC__' */\n-  BT_WEAK                       /* Whether or not G++ supports weak \n-\t\t\t\t   symbols.  */\n+  BT_STDC\t\t\t/* `__STDC__' */\n };\n \n /* There is a slot in the hashnode for use by front ends when integrated"}, {"sha": "ceab9c992e76fedd715b12236633fa6b81c4db26", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7868b4a2520b831eec35cbabc7f28d3694aebbf4/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=7868b4a2520b831eec35cbabc7f28d3694aebbf4", "patch": "@@ -347,7 +347,7 @@ cb_ident (pfile, str)\n      const cpp_string * str;\n {\n   maybe_print_line (cpp_get_line (pfile)->output_line);\n-  fprintf (print.outf, \"#ident \\\"%.*s\\\"\\n\", (int) str->len, str->text);\n+  fprintf (print.outf, \"#ident \\\"%s\\\"\\n\", str->text);\n   print.lineno++;\n }\n "}]}