{"sha": "0a7183f6d173cbd69025a3deb30d16f91e6392b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3MTgzZjZkMTczY2JkNjkwMjVhM2RlYjMwZDE2ZjkxZTYzOTJiMg==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-06-02T07:38:01Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-07-01T16:07:51Z"}, "message": "Fortran  : Fortran translation issues PR52279\n\nMark strings for translation by enclosing in G_() and _().\n\n2020-06-24  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/fortran/\n\n\tPR fortran/52279\n\t* arith.c (reduce_binary_aa): Mark for translation the string\n\tparameter to gfc_check_conformance with G_().\n\t* check.c (gfc_invalid_boz): Mark hint for translation using\n\t_().  (gfc_check_achar): Mark for translation the message\n\tparameter to gfc_invalid_boz using G_().  (gfc_check_char):\n\tMark for translation the message parameter to gfc_invalid_boz\n\tusing G_().  (gfc_check_complex): Mark for translation the\n\tmessage parameter to gfc_invalid_boz using G_().\n\t(gfc_check_float): Mark for translation the message\n\tparameter to gfc_invalid_boz using G_().  (check_rest): Mark\n\tfor translation the string parameter to gfc_check_conformance\n\twith _().  (gfc_check_minloc_maxloc): Mark for translation\n\tthe string parameter to gfc_check_conformance with _().\n\t(gfc_check_findloc): Mark for translation the string parameter\n\tto gfc_check_conformance with _().  (check_reduction): Mark\n\tfor translation the string parameter to gfc_check_conformance\n\twith _().  (gfc_check_pack): Mark for translation the string\n\tparameter to gfc_check_conformance with _().\n\t* decl.c (match_old_style_init): Mark for translation the\n\tmessage parameter to gfc_invalid_boz using G_().\n\t* expr.c (gfc_check_assign): Mark for translation the string\n\tparameter to gfc_check_conformance with _().\n\t* intrinsic.c (check_specific): Mark for translation the string\n\tparameter to gfc_check_conformance with _().\n\t(gfc_check_intrinsic_standard): Mark symstd_msg strings for\n\ttranslation using G_(). No need to mark symstd_msg for\n\ttranslation in call to gfc_warning or when setting symstd.\n\t* io.c (check_open_constraints):  Mark strings for translation\n\tusing G_() in all calls to warn_or_error.  (match_io_element):\n\tMark for translation the message parameter to gfc_invalid_boz\n\tusing G_().\n\t* primary.c (match_boz_constant): Mark for translation the\n\tmessage parameter to gfc_invalid_boz using G_().\n\t* resolve.c (resolve_elemental_actual):  Mark for translation\n\tthe string parameter to gfc_check_conformance with _().\n\t(resolve_operator):  Mark for translation the string parameter\n\tto gfc_check_conformance with _().  Mark translation strings\n\tassigned to msg using G_() for use in a call to cfg_warning.", "tree": {"sha": "ea0cd38dc21a67808456c47ef81f62eb05f85427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea0cd38dc21a67808456c47ef81f62eb05f85427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a7183f6d173cbd69025a3deb30d16f91e6392b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7183f6d173cbd69025a3deb30d16f91e6392b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7183f6d173cbd69025a3deb30d16f91e6392b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7183f6d173cbd69025a3deb30d16f91e6392b2/comments", "author": null, "committer": null, "parents": [{"sha": "27aebb7d6cf14175aac862ab29f83a93538bfad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27aebb7d6cf14175aac862ab29f83a93538bfad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27aebb7d6cf14175aac862ab29f83a93538bfad8"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "c4c1041afdf1093c46ea082e7e96eda1537b2ecd", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -1387,7 +1387,7 @@ reduce_binary_aa (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   gfc_expr *r;\n   arith rc = ARITH_OK;\n \n-  if (!gfc_check_conformance (op1, op2, \"elemental binary operation\"))\n+  if (!gfc_check_conformance (op1, op2, _(\"elemental binary operation\")))\n     return ARITH_INCOMMENSURATE;\n \n   head = gfc_constructor_copy (op1->value.constructor);"}, {"sha": "d0ec3796f7bc4f51085ced45dcf0fc08f048bae5", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -67,7 +67,7 @@ gfc_invalid_boz (const char *msg, locus *loc)\n       return false;\n     }\n \n-  const char hint[] = \" [see %<-fno-allow-invalid-boz%>]\";\n+  const char hint[] = _(\" [see %<-fno-allow-invalid-boz%>]\");\n   size_t len = strlen (msg) + strlen (hint) + 1;\n   char *msg2 = (char *) alloca (len);\n   strcpy (msg2, msg);\n@@ -1313,8 +1313,8 @@ gfc_check_achar (gfc_expr *a, gfc_expr *kind)\n {\n   if (a->ts.type == BT_BOZ)\n     {\n-      if (gfc_invalid_boz (\"BOZ literal constant at %L cannot appear in \"\n-\t\t\t   \"ACHAR intrinsic subprogram\", &a->where))\n+      if (gfc_invalid_boz (G_(\"BOZ literal constant at %L cannot appear in \"\n+\t\t\t   \"ACHAR intrinsic subprogram\"), &a->where))\n \treturn false;\n \n       if (!gfc_boz2int (a, gfc_default_integer_kind))\n@@ -1973,8 +1973,8 @@ gfc_check_char (gfc_expr *i, gfc_expr *kind)\n {\n   if (i->ts.type == BT_BOZ)\n     {\n-      if (gfc_invalid_boz (\"BOZ literal constant at %L cannot appear in \"\n-\t\t\t   \"CHAR intrinsic subprogram\", &i->where))\n+      if (gfc_invalid_boz (G_(\"BOZ literal constant at %L cannot appear in \"\n+\t\t\t   \"CHAR intrinsic subprogram\"), &i->where))\n \treturn false;\n \n       if (!gfc_boz2int (i, gfc_default_integer_kind))\n@@ -2424,8 +2424,8 @@ gfc_check_complex (gfc_expr *x, gfc_expr *y)\n \n   if (x->ts.type == BT_BOZ)\n     {\n-      if (gfc_invalid_boz (\"BOZ constant at %L cannot appear in the COMPLEX \"\n-\t\t\t   \"intrinsic subprogram\", &x->where))\n+      if (gfc_invalid_boz (G_(\"BOZ constant at %L cannot appear in the COMPLEX\"\n+\t\t\t   \" intrinsic subprogram\"), &x->where))\n \t{\n \t  reset_boz (x);\n \t  return false;\n@@ -2438,8 +2438,8 @@ gfc_check_complex (gfc_expr *x, gfc_expr *y)\n \n   if (y->ts.type == BT_BOZ)\n     {\n-      if (gfc_invalid_boz (\"BOZ constant at %L cannot appear in the COMPLEX \"\n-\t\t\t   \"intrinsic subprogram\", &y->where))\n+      if (gfc_invalid_boz (G_(\"BOZ constant at %L cannot appear in the COMPLEX\"\n+\t\t\t   \" intrinsic subprogram\"), &y->where))\n \t{\n \t  reset_boz (y);\n \t  return false;\n@@ -2903,8 +2903,8 @@ gfc_check_float (gfc_expr *a)\n {\n   if (a->ts.type == BT_BOZ)\n     {\n-      if (gfc_invalid_boz (\"BOZ literal constant at %L cannot appear in the \"\n-\t\t\t   \"FLOAT intrinsic subprogram\", &a->where))\n+      if (gfc_invalid_boz (G_(\"BOZ literal constant at %L cannot appear in the\"\n+\t\t\t   \" FLOAT intrinsic subprogram\"), &a->where))\n \t{\n \t  reset_boz (a);\n \t  return false;\n@@ -3706,8 +3706,8 @@ check_rest (bt type, int kind, gfc_actual_arglist *arglist)\n \n       for (tmp = arglist, m=1; tmp != arg; tmp = tmp->next, m++)\n \tif (!gfc_check_conformance (tmp->expr, x,\n-\t\t\t\t    \"arguments 'a%d' and 'a%d' for \"\n-\t\t\t\t    \"intrinsic '%s'\", m, n,\n+\t\t\t\t    _(\"arguments 'a%d' and 'a%d' for \"\n+\t\t\t\t    \"intrinsic '%s'\"), m, n,\n \t\t\t\t    gfc_current_intrinsic))\n \t    return false;\n     }\n@@ -3914,7 +3914,7 @@ gfc_check_minloc_maxloc (gfc_actual_arglist *ap)\n \n   if (m != NULL\n       && !gfc_check_conformance (a, m,\n-\t\t\t\t \"arguments '%s' and '%s' for intrinsic %s\",\n+\t\t\t\t _(\"arguments '%s' and '%s' for intrinsic %s\"),\n \t\t\t\t gfc_current_intrinsic_arg[0]->name,\n \t\t\t\t gfc_current_intrinsic_arg[2]->name,\n \t\t\t\t gfc_current_intrinsic))\n@@ -3995,7 +3995,7 @@ gfc_check_findloc (gfc_actual_arglist *ap)\n \n   if (m != NULL\n       && !gfc_check_conformance (a, m,\n-\t\t\t\t \"arguments '%s' and '%s' for intrinsic %s\",\n+\t\t\t\t _(\"arguments '%s' and '%s' for intrinsic %s\"),\n \t\t\t\t gfc_current_intrinsic_arg[0]->name,\n \t\t\t\t gfc_current_intrinsic_arg[3]->name,\n \t\t\t\t gfc_current_intrinsic))\n@@ -4060,7 +4060,7 @@ check_reduction (gfc_actual_arglist *ap)\n \n   if (m != NULL\n       && !gfc_check_conformance (a, m,\n-\t\t\t\t \"arguments '%s' and '%s' for intrinsic %s\",\n+\t\t\t\t _(\"arguments '%s' and '%s' for intrinsic %s\"),\n \t\t\t\t gfc_current_intrinsic_arg[0]->name,\n \t\t\t\t gfc_current_intrinsic_arg[2]->name,\n \t\t\t\t gfc_current_intrinsic))\n@@ -4398,7 +4398,7 @@ gfc_check_pack (gfc_expr *array, gfc_expr *mask, gfc_expr *vector)\n     return false;\n \n   if (!gfc_check_conformance (array, mask,\n-\t\t\t      \"arguments '%s' and '%s' for intrinsic '%s'\",\n+\t\t\t      _(\"arguments '%s' and '%s' for intrinsic '%s'\"),\n \t\t\t      gfc_current_intrinsic_arg[0]->name,\n \t\t\t      gfc_current_intrinsic_arg[1]->name,\n \t\t\t      gfc_current_intrinsic))"}, {"sha": "52c2a624b6e31608671a9ce9cafbda67f186d181", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -576,16 +576,16 @@ match_old_style_init (const char *name)\n   for (nd = newdata; nd; nd = nd->next)\n     {\n       if (nd->value->expr->ts.type == BT_BOZ\n-\t  && gfc_invalid_boz (\"BOZ at %L cannot appear in an old-style \"\n-\t\t\t      \"initialization\", &nd->value->expr->where))\n+\t  && gfc_invalid_boz (G_(\"BOZ at %L cannot appear in an old-style \"\n+\t\t\t      \"initialization\"), &nd->value->expr->where))\n \treturn MATCH_ERROR;\n \n       if (nd->var->expr->ts.type != BT_INTEGER\n \t  && nd->var->expr->ts.type != BT_REAL\n \t  && nd->value->expr->ts.type == BT_BOZ)\n \t{\n-\t  gfc_error (\"BOZ literal constant near %L cannot be assigned to \"\n-\t\t     \"a %qs variable in an old-style initialization\",\n+\t  gfc_error (G_(\"BOZ literal constant near %L cannot be assigned to \"\n+\t\t     \"a %qs variable in an old-style initialization\"),\n \t\t     &nd->value->expr->where,\n \t\t     gfc_typename (&nd->value->expr->ts));\n \t  return MATCH_ERROR;"}, {"sha": "5bef65df86279f9a7042968a58b1033e733bcd4c", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -3693,7 +3693,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n \n   /* Check size of array assignments.  */\n   if (lvalue->rank != 0 && rvalue->rank != 0\n-      && !gfc_check_conformance (lvalue, rvalue, \"array assignment\"))\n+      && !gfc_check_conformance (lvalue, rvalue, _(\"array assignment\")))\n     return false;\n \n   /* Handle the case of a BOZ literal on the RHS.  */"}, {"sha": "3518a4e2c87cc52e201b8d1bc1556930534e8f71", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -4775,8 +4775,8 @@ check_specific (gfc_intrinsic_sym *specific, gfc_expr *expr, int error_flag)\n \n       for ( ; arg && arg->expr; arg = arg->next, n++)\n \tif (!gfc_check_conformance (first_expr, arg->expr,\n-\t\t\t\t    \"arguments '%s' and '%s' for \"\n-\t\t\t\t    \"intrinsic '%s'\",\n+\t\t\t\t    _(\"arguments '%s' and '%s' for \"\n+\t\t\t\t    \"intrinsic '%s'\"),\n \t\t\t\t    gfc_current_intrinsic_arg[0]->name,\n \t\t\t\t    gfc_current_intrinsic_arg[n]->name,\n \t\t\t\t    gfc_current_intrinsic))\n@@ -4812,39 +4812,39 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n   switch (isym->standard)\n     {\n     case GFC_STD_F77:\n-      symstd_msg = \"available since Fortran 77\";\n+      symstd_msg = _(\"available since Fortran 77\");\n       break;\n \n     case GFC_STD_F95_OBS:\n-      symstd_msg = \"obsolescent in Fortran 95\";\n+      symstd_msg = _(\"obsolescent in Fortran 95\");\n       break;\n \n     case GFC_STD_F95_DEL:\n-      symstd_msg = \"deleted in Fortran 95\";\n+      symstd_msg = _(\"deleted in Fortran 95\");\n       break;\n \n     case GFC_STD_F95:\n-      symstd_msg = \"new in Fortran 95\";\n+      symstd_msg = _(\"new in Fortran 95\");\n       break;\n \n     case GFC_STD_F2003:\n-      symstd_msg = \"new in Fortran 2003\";\n+      symstd_msg = _(\"new in Fortran 2003\");\n       break;\n \n     case GFC_STD_F2008:\n-      symstd_msg = \"new in Fortran 2008\";\n+      symstd_msg = _(\"new in Fortran 2008\");\n       break;\n \n     case GFC_STD_F2018:\n-      symstd_msg = \"new in Fortran 2018\";\n+      symstd_msg = _(\"new in Fortran 2018\");\n       break;\n \n     case GFC_STD_GNU:\n-      symstd_msg = \"a GNU Fortran extension\";\n+      symstd_msg = _(\"a GNU Fortran extension\");\n       break;\n \n     case GFC_STD_LEGACY:\n-      symstd_msg = \"for backward compatibility\";\n+      symstd_msg = _(\"for backward compatibility\");\n       break;\n \n     default:\n@@ -4857,8 +4857,8 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n     {\n       /* Do only print a warning if not a GNU extension.  */\n       if (!silent && isym->standard != GFC_STD_GNU)\n-\tgfc_warning (0, \"Intrinsic %qs (is %s) is used at %L\",\n-\t\t     isym->name, _(symstd_msg), &where);\n+\tgfc_warning (0, \"Intrinsic %qs (%s) used at %L\",\n+\t\t     isym->name, symstd_msg, &where);\n \n       return true;\n     }\n@@ -4869,7 +4869,7 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n \n   /* Otherwise, fail.  */\n   if (symstd)\n-    *symstd = _(symstd_msg);\n+    *symstd = symstd_msg;\n   return false;\n }\n "}, {"sha": "b350cd9389ccd53cfb9fe38d582dbe0876d6b6da", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -2406,7 +2406,7 @@ check_open_constraints (gfc_open *open, locus *where)\n       && open->recl->ts.type == BT_INTEGER\n       && mpz_sgn (open->recl->value.integer) != 1)\n     {\n-      warn_or_error (\"RECL in OPEN statement at %L must be positive\",\n+      warn_or_error (G_(\"RECL in OPEN statement at %L must be positive\"),\n \t\t     &open->recl->where);\n     }\n \n@@ -2431,8 +2431,8 @@ check_open_constraints (gfc_open *open, locus *where)\n \t{\n \t  char *s = gfc_widechar_to_char (open->status->value.character.string,\n \t\t\t\t\t  -1);\n-\t  warn_or_error (\"The STATUS specified in OPEN statement at %L is \"\n-\t\t\t \"%qs and no FILE specifier is present\",\n+\t  warn_or_error (G_(\"The STATUS specified in OPEN statement at %L is \"\n+\t\t\t \"%qs and no FILE specifier is present\"),\n \t\t\t &open->status->where, s);\n \t  free (s);\n \t}\n@@ -2442,9 +2442,9 @@ check_open_constraints (gfc_open *open, locus *where)\n       if (gfc_wide_strncasecmp (open->status->value.character.string,\n \t\t\t\t\"scratch\", 7) == 0 && open->file)\n \t{\n-\t  warn_or_error (\"The STATUS specified in OPEN statement at %L \"\n+\t  warn_or_error (G_(\"The STATUS specified in OPEN statement at %L \"\n \t\t\t \"cannot have the value SCRATCH if a FILE specifier \"\n-\t\t\t \"is present\", &open->status->where);\n+\t\t\t \"is present\"), &open->status->where);\n \t}\n     }\n \n@@ -2506,16 +2506,16 @@ check_open_constraints (gfc_open *open, locus *where)\n \t  spec = \"\";\n \t}\n \n-      warn_or_error (\"%s specifier at %L not allowed in OPEN statement for \"\n-\t\t     \"unformatted I/O\", spec, loc);\n+      warn_or_error (G_(\"%s specifier at %L not allowed in OPEN statement for \"\n+\t\t     \"unformatted I/O\"), spec, loc);\n     }\n \n   if (open->recl && open->access && open->access->expr_type == EXPR_CONSTANT\n       && gfc_wide_strncasecmp (open->access->value.character.string,\n \t\t\t       \"stream\", 6) == 0)\n     {\n-      warn_or_error (\"RECL specifier not allowed in OPEN statement at %L for \"\n-\t\t     \"stream I/O\", &open->recl->where);\n+      warn_or_error (G_(\"RECL specifier not allowed in OPEN statement at %L for \"\n+\t\t     \"stream I/O\"), &open->recl->where);\n     }\n \n   if (open->position\n@@ -2527,8 +2527,8 @@ check_open_constraints (gfc_open *open, locus *where)\n \t   || gfc_wide_strncasecmp (open->access->value.character.string,\n \t\t\t\t    \"append\", 6) == 0))\n     {\n-      warn_or_error (\"POSITION specifier in OPEN statement at %L only allowed \"\n-\t\t     \"for stream or sequential ACCESS\", &open->position->where);\n+      warn_or_error (G_(\"POSITION specifier in OPEN statement at %L only allowed \"\n+\t\t     \"for stream or sequential ACCESS\"), &open->position->where);\n     }\n \n   return true;\n@@ -3665,8 +3665,8 @@ match_io_element (io_kind k, gfc_code **cpp)\n \n       if (m == MATCH_YES && expr->ts.type == BT_BOZ)\n \t{\n-\t  if (gfc_invalid_boz (\"BOZ literal constant at %L cannot appear in \"\n-\t\t\t\t\"an output IO list\", &gfc_current_locus))\n+\t  if (gfc_invalid_boz (G_(\"BOZ literal constant at %L cannot appear in\"\n+\t\t\t\t\" an output IO list\"), &gfc_current_locus))\n \t    return MATCH_ERROR;\n \t  if (!gfc_boz2int (expr, gfc_max_integer_kind))\n \t    return MATCH_ERROR;"}, {"sha": "76b1607ee3d2eecffa49e3cf7b23ae736306a54c", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -432,8 +432,8 @@ match_boz_constant (gfc_expr **result)\n     goto backup;\n \n   if (x_hex\n-      && gfc_invalid_boz (\"Hexadecimal constant at %L uses \"\n-\t\t\t  \"nonstandard X instead of Z\", &gfc_current_locus))\n+      && gfc_invalid_boz (G_(\"Hexadecimal constant at %L uses \"\n+\t\t\t  \"nonstandard X instead of Z\"), &gfc_current_locus))\n     return MATCH_ERROR;\n \n   old_loc = gfc_current_locus;\n@@ -470,8 +470,8 @@ match_boz_constant (gfc_expr **result)\n \t  goto backup;\n \t}\n \n-      if (gfc_invalid_boz (\"BOZ constant at %C uses nonstandard postfix \"\n-\t\t\t   \"syntax\", &gfc_current_locus))\n+      if (gfc_invalid_boz (G_(\"BOZ constant at %C uses nonstandard postfix \"\n+\t\t\t   \"syntax\"), &gfc_current_locus))\n \treturn MATCH_ERROR;\n     }\n "}, {"sha": "1952b53d8216816b625abe39a3c1a2c207df85cb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7183f6d173cbd69025a3deb30d16f91e6392b2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=0a7183f6d173cbd69025a3deb30d16f91e6392b2", "patch": "@@ -2315,7 +2315,7 @@ resolve_elemental_actual (gfc_expr *expr, gfc_code *c)\n       /* Elemental procedure's array actual arguments must conform.  */\n       if (e != NULL)\n \t{\n-\t  if (!gfc_check_conformance (arg->expr, e, \"elemental procedure\"))\n+\t  if (!gfc_check_conformance (arg->expr, e, _(\"elemental procedure\")))\n \t    return false;\n \t}\n       else\n@@ -4190,9 +4190,9 @@ resolve_operator (gfc_expr *e)\n       /* If op1 is BOZ, then op2 is not!.  Try to convert to type of op2.  */\n       if (op1->ts.type == BT_BOZ)\n \t{\n-\t  if (gfc_invalid_boz (\"BOZ literal constant near %L cannot appear as \"\n-\t\t\t\t\"an operand of a relational operator\",\n-\t\t\t\t&op1->where))\n+\t  if (gfc_invalid_boz (G_(\"BOZ literal constant near %L cannot appear \"\n+\t\t\t       \"as an operand of a relational operator\"),\n+\t\t\t       &op1->where))\n \t    return false;\n \n \t  if (op2->ts.type == BT_INTEGER && !gfc_boz2int (op1, op2->ts.kind))\n@@ -4205,8 +4205,8 @@ resolve_operator (gfc_expr *e)\n       /* If op2 is BOZ, then op1 is not!.  Try to convert to type of op2. */\n       if (op2->ts.type == BT_BOZ)\n \t{\n-\t  if (gfc_invalid_boz (\"BOZ literal constant near %L cannot appear as \"\n-\t\t\t\t\"an operand of a relational operator\",\n+\t  if (gfc_invalid_boz (G_(\"BOZ literal constant near %L cannot appear\"\n+\t\t\t       \" as an operand of a relational operator\"),\n \t\t\t\t&op2->where))\n \t    return false;\n \n@@ -4244,9 +4244,9 @@ resolve_operator (gfc_expr *e)\n \t\t  const char *msg;\n \n \t\t  if (op == INTRINSIC_EQ || op == INTRINSIC_EQ_OS)\n-\t\t    msg = \"Equality comparison for %s at %L\";\n+\t\t    msg = G_(\"Equality comparison for %s at %L\");\n \t\t  else\n-\t\t    msg = \"Inequality comparison for %s at %L\";\n+\t\t    msg = G_(\"Inequality comparison for %s at %L\");\n \n \t\t  gfc_warning (OPT_Wcompare_reals, msg,\n \t\t\t       gfc_typename (op1), &op1->where);"}]}