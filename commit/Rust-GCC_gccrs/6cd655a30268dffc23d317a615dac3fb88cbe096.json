{"sha": "6cd655a30268dffc23d317a615dac3fb88cbe096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkNjU1YTMwMjY4ZGZmYzIzZDMxN2E2MTVkYWMzZmI4OGNiZTA5Ng==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2004-08-29T20:16:22Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-08-29T20:16:22Z"}, "message": "2004-08-29  Mark Wielaard  <mark@klomp.org>\n\n\t* java/util/Arrays.java\n\t(sort(byte[], int, int)): Check fromIndex < 0.\n\t(sort(char[], int, int)): Likewise.\n\t(sort(short[], int, int)): Likewise.\n\t(sort(int[], int, int)): Likewise.\n\t(sort(long[], int, int)): Likewise.\n\t(sort(float[], int, int)): Likewise.\n\t(sort(double[], int, int)): Likewise.\n\t(sort(Object[], int, int, Comparator)): Likewise.\n\t(qsort(byte[], int, int)): Honor lower bound from in insertion sort.\n\t(qsort(char[], int, int)): Likewise.\n\t(qsort(short[], int, int)): Likewise.\n\t(qsort(int[], int, int)): Likewise.\n\t(qsort(long[], int, int)): Likewise.\n\t(qsort(float[], int, int)): Likewise.\n\t(qsort(double[], int, int)): Likewise.\n\nFrom-SVN: r86734", "tree": {"sha": "39cb148419bbdc33b0be615377407d88afa12068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39cb148419bbdc33b0be615377407d88afa12068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd655a30268dffc23d317a615dac3fb88cbe096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd655a30268dffc23d317a615dac3fb88cbe096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd655a30268dffc23d317a615dac3fb88cbe096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd655a30268dffc23d317a615dac3fb88cbe096/comments", "author": null, "committer": null, "parents": [{"sha": "4ca1f68f884d05a22695c0c247a72b32c49ec554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca1f68f884d05a22695c0c247a72b32c49ec554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca1f68f884d05a22695c0c247a72b32c49ec554"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "33a66474af3ebb70380de0e4c4cb0413a98cace5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd655a30268dffc23d317a615dac3fb88cbe096/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd655a30268dffc23d317a615dac3fb88cbe096/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6cd655a30268dffc23d317a615dac3fb88cbe096", "patch": "@@ -1,3 +1,22 @@\n+2004-08-29  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/util/Arrays.java\n+\t(sort(byte[], int, int)): Check fromIndex < 0.\n+\t(sort(char[], int, int)): Likewise.\n+\t(sort(short[], int, int)): Likewise.\n+\t(sort(int[], int, int)): Likewise.\n+\t(sort(long[], int, int)): Likewise.\n+\t(sort(float[], int, int)): Likewise.\n+\t(sort(double[], int, int)): Likewise.\n+\t(sort(Object[], int, int, Comparator)): Likewise.\n+\t(qsort(byte[], int, int)): Honor lower bound from in insertion sort.\n+\t(qsort(char[], int, int)): Likewise.\n+\t(qsort(short[], int, int)): Likewise.\n+\t(qsort(int[], int, int)): Likewise.\n+\t(qsort(long[], int, int)): Likewise.\n+\t(qsort(float[], int, int)): Likewise.\n+\t(qsort(double[], int, int)): Likewise.\n+\n 2004-08-29  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n \n \t* java/util/AbstractCollection.java, java/util/AbstractList.java,"}, {"sha": "e34901a23f1567af64b5fd81578fa8d26ad4a5cf", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd655a30268dffc23d317a615dac3fb88cbe096/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd655a30268dffc23d317a615dac3fb88cbe096/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=6cd655a30268dffc23d317a615dac3fb88cbe096", "patch": "@@ -1,5 +1,6 @@\n /* Arrays.java -- Utility class with methods to operate on arrays\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -968,6 +969,8 @@ public static void sort(byte[] a, int fromIndex, int toIndex)\n   {\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException();\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n     qsort(a, fromIndex, toIndex - fromIndex);\n   }\n \n@@ -1028,7 +1031,7 @@ private static void qsort(byte[] array, int from, int count)\n     if (count <= 7)\n       {\n         for (int i = from + 1; i < from + count; i++)\n-          for (int j = i; j > 0 && array[j - 1] > array[j]; j--)\n+          for (int j = i; j > from && array[j - 1] > array[j]; j--)\n             swap(j, j - 1, array);\n         return;\n       }\n@@ -1130,6 +1133,8 @@ public static void sort(char[] a, int fromIndex, int toIndex)\n   {\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException();\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n     qsort(a, fromIndex, toIndex - fromIndex);\n   }\n \n@@ -1190,7 +1195,7 @@ private static void qsort(char[] array, int from, int count)\n     if (count <= 7)\n       {\n         for (int i = from + 1; i < from + count; i++)\n-          for (int j = i; j > 0 && array[j - 1] > array[j]; j--)\n+          for (int j = i; j > from && array[j - 1] > array[j]; j--)\n             swap(j, j - 1, array);\n         return;\n       }\n@@ -1292,6 +1297,8 @@ public static void sort(short[] a, int fromIndex, int toIndex)\n   {\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException();\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n     qsort(a, fromIndex, toIndex - fromIndex);\n   }\n \n@@ -1352,8 +1359,8 @@ private static void qsort(short[] array, int from, int count)\n     if (count <= 7)\n       {\n         for (int i = from + 1; i < from + count; i++)\n-          for (int j = i; j > 0 && array[j - 1] > array[j]; j--)\n-            swap(j, j - 1, array);\n+\t  for (int j = i; j > from && array[j - 1] > array[j]; j--)\n+\t    swap(j, j - 1, array);\n         return;\n       }\n \n@@ -1454,6 +1461,8 @@ public static void sort(int[] a, int fromIndex, int toIndex)\n   {\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException();\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n     qsort(a, fromIndex, toIndex - fromIndex);\n   }\n \n@@ -1526,7 +1535,7 @@ private static void qsort(int[] array, int from, int count)\n     if (count <= 7)\n       {\n         for (int i = from + 1; i < from + count; i++)\n-          for (int j = i; j > 0 && array[j - 1] > array[j]; j--)\n+          for (int j = i; j > from && array[j - 1] > array[j]; j--)\n             swap(j, j - 1, array);\n         return;\n       }\n@@ -1628,6 +1637,8 @@ public static void sort(long[] a, int fromIndex, int toIndex)\n   {\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException();\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n     qsort(a, fromIndex, toIndex - fromIndex);\n   }\n \n@@ -1700,7 +1711,7 @@ private static void qsort(long[] array, int from, int count)\n     if (count <= 7)\n       {\n         for (int i = from + 1; i < from + count; i++)\n-          for (int j = i; j > 0 && array[j - 1] > array[j]; j--)\n+          for (int j = i; j > from && array[j - 1] > array[j]; j--)\n             swap(j, j - 1, array);\n         return;\n       }\n@@ -1802,6 +1813,8 @@ public static void sort(float[] a, int fromIndex, int toIndex)\n   {\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException();\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n     qsort(a, fromIndex, toIndex - fromIndex);\n   }\n \n@@ -1865,7 +1878,7 @@ private static void qsort(float[] array, int from, int count)\n       {\n         for (int i = from + 1; i < from + count; i++)\n           for (int j = i;\n-               j > 0 && Float.compare(array[j - 1], array[j]) > 0;\n+               j > from && Float.compare(array[j - 1], array[j]) > 0;\n                j--)\n             {\n               swap(j, j - 1, array);\n@@ -1970,6 +1983,8 @@ public static void sort(double[] a, int fromIndex, int toIndex)\n   {\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException();\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n     qsort(a, fromIndex, toIndex - fromIndex);\n   }\n \n@@ -2033,7 +2048,7 @@ private static void qsort(double[] array, int from, int count)\n       {\n         for (int i = from + 1; i < from + count; i++)\n           for (int j = i;\n-               j > 0 && Double.compare(array[j - 1], array[j]) > 0;\n+               j > from && Double.compare(array[j - 1], array[j]) > 0;\n                j--)\n             {\n               swap(j, j - 1, array);\n@@ -2203,6 +2218,8 @@ public static void sort(Object[] a, int fromIndex, int toIndex, Comparator c)\n     if (fromIndex > toIndex)\n       throw new IllegalArgumentException(\"fromIndex \" + fromIndex\n                                          + \" > toIndex \" + toIndex);\n+    if (fromIndex < 0)\n+      throw new ArrayIndexOutOfBoundsException();\n \n     // In general, the code attempts to be simple rather than fast, the\n     // idea being that a good optimising JIT will be able to optimise it"}]}