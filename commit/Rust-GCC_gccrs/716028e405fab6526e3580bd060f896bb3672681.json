{"sha": "716028e405fab6526e3580bd060f896bb3672681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE2MDI4ZTQwNWZhYjY1MjZlMzU4MGJkMDYwZjg5NmJiMzY3MjY4MQ==", "commit": {"author": {"name": "Tadek Kijkowski", "email": "tkijkowski@gmail.com", "date": "2016-09-30T16:36:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-09-30T16:36:18Z"}, "message": "check.tpl: Convert line endings to unix on test outputs\n\n2016-09-30  Tadek Kijkowski  <tkijkowski@gmail.com>\n\n\t* check.tpl: Convert line endings to unix on test outputs\n\t* fixfixes.c: Fixed passing file name to apply_fix when\n\tSEPARATE_FIX_PROC is defined\n\t* fixincl.c: Use system_with_shell, fixes for MinGW and DJGPP\n\t* fixlib.c, fixlib.h: Added system_with_shell and fix_path_separators\n\nFrom-SVN: r240664", "tree": {"sha": "05fe6333f5ee57032bb8dc163aabf2e6c703115d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05fe6333f5ee57032bb8dc163aabf2e6c703115d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/716028e405fab6526e3580bd060f896bb3672681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716028e405fab6526e3580bd060f896bb3672681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716028e405fab6526e3580bd060f896bb3672681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716028e405fab6526e3580bd060f896bb3672681/comments", "author": {"login": "monkeyman79", "id": 22123431, "node_id": "MDQ6VXNlcjIyMTIzNDMx", "avatar_url": "https://avatars.githubusercontent.com/u/22123431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkeyman79", "html_url": "https://github.com/monkeyman79", "followers_url": "https://api.github.com/users/monkeyman79/followers", "following_url": "https://api.github.com/users/monkeyman79/following{/other_user}", "gists_url": "https://api.github.com/users/monkeyman79/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkeyman79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkeyman79/subscriptions", "organizations_url": "https://api.github.com/users/monkeyman79/orgs", "repos_url": "https://api.github.com/users/monkeyman79/repos", "events_url": "https://api.github.com/users/monkeyman79/events{/privacy}", "received_events_url": "https://api.github.com/users/monkeyman79/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af2d4873785d2638c293edf822b26d532d3201aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2d4873785d2638c293edf822b26d532d3201aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2d4873785d2638c293edf822b26d532d3201aa"}], "stats": {"total": 236, "additions": 228, "deletions": 8}, "files": [{"sha": "1d55b657d8c9eb7f2fa57eb8a13a530877d1823b", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=716028e405fab6526e3580bd060f896bb3672681", "patch": "@@ -1,3 +1,11 @@\n+2016-09-30  Tadek Kijkowski  <tkijkowski@gmail.com>\n+\n+\t* check.tpl: Convert line endings to unix on test outputs\n+\t* fixfixes.c: Fixed passing file name to apply_fix when\n+\tSEPARATE_FIX_PROC is defined\n+\t* fixincl.c: Use system_with_shell, fixes for MinGW and DJGPP\n+\t* fixlib.c, fixlib.h: Added system_with_shell and fix_path_separators\n+\n 2016-09-04  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* inclhack.def (hpux_longjmp): Adjust select regular expression."}, {"sha": "496420846bdec0764011b88a1d1ca07b5a5d0f5e", "filename": "fixincludes/check.tpl", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Fcheck.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Fcheck.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fcheck.tpl?ref=716028e405fab6526e3580bd060f896bb3672681", "patch": "@@ -123,6 +123,11 @@ exitok=`\n exec < ${TESTDIR}/LIST\n while read f\n do\n+  if [ -n \"$MSYSTEM\" -o -n \"$DJGPP\" ]\n+  then\n+    # On MinGW and DJGPP convert line endings to avoid false positives\n+    mv $f $f.dos; tr -d '\\r' < $f.dos > $f; rm $f.dos\n+  fi\n   if [ ! -f ${TESTBASE}/$f ]\n   then\n     echo \"Newly fixed header:  $f\" >&2"}, {"sha": "034e15d998586dd4d3585c85e93b5b792af404d5", "filename": "fixincludes/fixfixes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixfixes.c?ref=716028e405fab6526e3580bd060f896bb3672681", "patch": "@@ -790,7 +790,8 @@ main( int argc, char** argv )\n       return EXIT_FAILURE;\n     }\n \n-  apply_fix (pFix, argv[1]);\n+  /* Second parameter of apply_fix is file name */\n+  apply_fix (pFix, argv[2]);\n   fclose (stdout);\n   fclose (stdin);\n   unlink (argv[4]);"}, {"sha": "6dba2f6e830a9b9827a799984e68bb81e108fba6", "filename": "fixincludes/fixincl.c", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.c?ref=716028e405fab6526e3580bd060f896bb3672681", "patch": "@@ -74,9 +74,12 @@ int altered_ct = 0;\n #endif /* DO_STATS */\n \n const char incl_quote_pat[] = \"^[ \\t]*#[ \\t]*include[ \\t]*\\\"[^/]\";\n-tSCC z_fork_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n regex_t incl_quote_re;\n \n+#ifndef SEPARATE_FIX_PROC\n+tSCC z_fork_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n+#endif\n+\n static void do_version (void) ATTRIBUTE_NORETURN;\n char *load_file (const char *);\n void run_compiles (void);\n@@ -188,7 +191,7 @@ do_version (void)\n   puts (zBuf + 5);\n   exit (strcmp (run_shell (zBuf), program_id));\n #else\n-  exit (system (zBuf));\n+  exit (system_with_shell (zBuf));\n #endif\n }\n \n@@ -275,6 +278,11 @@ initialize ( int argc, char** argv )\n   /* NULL as the first argument to `tempnam' causes it to DTRT\n      wrt the temporary directory where the file will be created.  */\n   pz_temp_file = tempnam( NULL, \"fxinc\" );\n+\n+#if defined(__MINGW32__)\n+  fix_path_separators (pz_temp_file);\n+#endif\n+\n # endif\n \n   signal (SIGQUIT, SIG_IGN);\n@@ -566,6 +574,26 @@ fi\";\n   free ((void *) pz_res);\n   return res;\n }\n+#elif defined(__MINGW32__) || defined(__DJGPP__)\n+static int\n+test_test (tTestDesc* p_test, char* pz_test_file)\n+{\n+  tSCC cmd_fmt[] =\n+#if defined(__DJGPP__)\n+    \"file=%s; test %s >/dev/null 2>/dev/null\";\n+#else\n+    \"file=%s; test %s > /dev/null 2>&1\";\n+#endif\n+  int res;\n+\n+  char *cmd_buf = XNEWVEC (char, strlen(cmd_fmt) + strlen(pz_test_file) + strlen(p_test->pz_test_text));\n+\n+  sprintf (cmd_buf, cmd_fmt, pz_test_file, p_test->pz_test_text);\n+  res = system_with_shell (cmd_buf);\n+\n+  free (cmd_buf);\n+  return res ? SKIP_FIX : APPLY_FIX;\n+}\n #else\n /*\n  *  IF we are in MS-DOS land, then whatever shell-type test is required\n@@ -887,7 +915,7 @@ fix_with_system (tFixDesc* p_fixd,\n   else /* NOT an \"internal\" fix: */\n     {\n       size_t parg_size;\n-#ifdef __MSDOS__\n+#if defined(__MSDOS__) && !defined(__DJGPP__)\n       /* Don't use the \"src > dstX; rm -f dst; mv -f dstX dst\" trick:\n          dst is a temporary file anyway, so we know there's no other\n          file by that name; and DOS's system(3) doesn't mind to\n@@ -906,12 +934,18 @@ fix_with_system (tFixDesc* p_fixd,\n          implementations cannot cope  :-(.  */\n       tSCC   z_cmd_fmt[] = \" %s > %sX ; rm -f %s; mv -f %sX %s\";\n #endif\n+      tSCC   z_subshell_start[] = \"( \";\n+      tSCC   z_subshell_end[] = \" ) < \";\n       tCC**  ppArgs = p_fixd->patch_args;\n \n       argsize = sizeof( z_cmd_fmt ) + strlen( pz_temp_file )\n               + strlen( pz_file_source );\n       parg_size = argsize;\n       \n+      if (p_fixd->fd_flags & FD_SHELL_SCRIPT)\n+        {\n+          argsize += strlen( z_subshell_start ) + strlen ( z_subshell_end );\n+        }\n \n       /*\n        *  Compute the size of the command line.  Add lotsa extra space\n@@ -936,6 +970,16 @@ fix_with_system (tFixDesc* p_fixd,\n \n       ppArgs = p_fixd->patch_args;\n \n+      /*\n+       * If it's shell script, enclose it in parentheses and skip \"sh -c\".\n+       */\n+      if (p_fixd->fd_flags & FD_SHELL_SCRIPT)\n+        {\n+          strcpy (pz_scan, z_subshell_start);\n+          pz_scan += strlen (z_subshell_start);\n+          ppArgs += 2;\n+        }\n+\n       /*\n        *  Copy the program name, unquoted\n        */\n@@ -977,18 +1021,27 @@ fix_with_system (tFixDesc* p_fixd,\n             }\n         }\n \n+      /*\n+       * Close parenthesis if it's shell script.\n+       */\n+      if (p_fixd->fd_flags & FD_SHELL_SCRIPT)\n+        {\n+          strcpy (pz_scan, z_subshell_end);\n+          pz_scan += strlen (z_subshell_end);\n+        }\n+\n       /*\n        *  add the file machinations.\n        */\n-#ifdef __MSDOS__\n+#if defined(__MSDOS__) && !defined(__DJGPP__)\n       sprintf (pz_scan, z_cmd_fmt, pz_file_source, pz_temp_file );\n #else\n       sprintf (pz_scan, z_cmd_fmt, pz_file_source, pz_temp_file,\n                pz_temp_file, pz_temp_file, pz_temp_file);\n #endif\n     }\n-  system( pz_cmd );\n-  free( (void*)pz_cmd );\n+  system_with_shell (pz_cmd);\n+  free (pz_cmd);\n }\n \n /* * * * * * * * * * * * *\n@@ -1090,7 +1143,7 @@ fix_applies (tFixDesc* p_fixd)\n   t_bool saw_sum_test   = BOOL_FALSE;\n   t_bool one_sum_passed = BOOL_FALSE;\n \n-#ifdef SEPARATE_FIX_PROC\n+#if defined(__MSDOS__) && !defined(__DJGPP__)\n   /*\n    *  There is only one fix that uses a shell script as of this writing.\n    *  I hope to nuke it anyway, it does not apply to DOS and it would"}, {"sha": "4cdefe0bef4220bbc73e6cf1819f611d0bca6856", "filename": "fixincludes/fixlib.c", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.c?ref=716028e405fab6526e3580bd060f896bb3672681", "patch": "@@ -278,3 +278,141 @@ make_raw_shell_str( char* pz_d, tCC* pz_s, size_t smax )\n }\n \n #endif\n+\n+#if defined(__MINGW32__)\n+void\n+fix_path_separators (char* p)\n+{\n+    while (p != NULL)\n+      {\n+        p = strchr (p, '\\\\');\n+        if (p != NULL)\n+          {\n+            *p = '/';\n+            ++p;\n+          }\n+      }\n+}\n+\n+/* Count number of needle character ocurrences in str */\n+static int\n+count_occurrences_of_char (char* str, char needle)\n+{\n+  int cnt = 0;\n+\n+  while (str)\n+    {\n+       str = strchr (str, needle);\n+       if (str)\n+         {\n+           ++str;\n+           ++cnt;\n+         }\n+    }\n+\n+  return cnt;\n+}\n+\n+/* On Mingw32, system function will just start cmd by default.\n+   Call system function, but prepend ${CONFIG_SHELL} or ${SHELL} -c to the command,\n+   replace newlines with '$'\\n'', enclose command with double quotes\n+   and escape special characters which were originally enclosed in single quotes.\n+ */\n+int\n+system_with_shell (char* s)\n+{\n+  static const char z_shell_start_args[] = \" -c \\\"\";\n+  static const char z_shell_end_args[] = \"\\\"\";\n+  static const char z_shell_newline[] = \"'$'\\\\n''\";\n+\n+  /* Use configured shell if present */\n+  char *env_shell = getenv (\"CONFIG_SHELL\");\n+  int newline_cnt = count_occurrences_of_char (s, '\\n');\n+  int escapes_cnt  = count_occurrences_of_char( s, '\\\\')\n+                      + count_occurrences_of_char (s, '\"')\n+                      + count_occurrences_of_char (s, '`');\n+  char *long_cmd;\n+  char *cmd_endp;\n+  int sys_result;\n+  char *s_scan;\n+  int in_quotes;\n+\n+  if (env_shell == NULL)\n+    env_shell = getenv (\"SHELL\");\n+\n+  /* If neither CONFIGURED_SHELL nor SHELL is set, just call standard system function */\n+  if (env_shell == NULL)\n+    return system (s);\n+\n+  /* Allocate enough memory to fit newly created command string */\n+  long_cmd = XNEWVEC (char, strlen (env_shell)\n+                      + strlen (z_shell_start_args)\n+                      + strlen (s)\n+                      + newline_cnt * (strlen (z_shell_newline) - 1)\n+                      + escapes_cnt\n+                      + strlen (z_shell_end_args)\n+                      + 1);\n+\n+  /* Start with ${SHELL} */\n+  strcpy (long_cmd, env_shell);\n+  cmd_endp = long_cmd + strlen (long_cmd);\n+\n+  /* Opening quote */\n+  strcpy (cmd_endp, z_shell_start_args);\n+  cmd_endp += strlen (z_shell_start_args);\n+\n+  /* Replace newlines and escape special chars */\n+  in_quotes = 0;\n+  for (s_scan = s; *s_scan; ++s_scan)\n+    {\n+      switch (*s_scan)\n+        {\n+          case '\\n':\n+            if (in_quotes)\n+              {\n+                /* Replace newline inside quotes with '$'\\n'' */\n+                strcpy (cmd_endp, z_shell_newline);\n+                cmd_endp += strlen (z_shell_newline);\n+              }\n+            else\n+              {\n+                /* Replace newlines outside quotes with ; and merge subsequent newlines */\n+                *(cmd_endp++) = ';';\n+                *(cmd_endp++) = ' ';\n+                while (*(s_scan + 1) == '\\n' || *(s_scan + 1) == ' ' || *(s_scan + 1) == '\\t')\n+                  ++s_scan;\n+              }\n+            break;\n+          case '\\'':\n+            /* Escape single quote and toggle in_quotes flag */\n+            in_quotes = !in_quotes;\n+            *(cmd_endp++) = *s_scan;\n+            break;\n+          case '\\\\':\n+          case '`':\n+            /* Escape backslash and backtick inside quotes */\n+            if (in_quotes)\n+               *(cmd_endp++) = '\\\\';\n+            *(cmd_endp++) = *s_scan;\n+            break;\n+          case '\"':\n+            /* Escape double quotes always */\n+            *(cmd_endp++) = '\\\\';\n+            *(cmd_endp++) = *s_scan;\n+            break;\n+          default:\n+            *(cmd_endp++) = *s_scan;\n+        }\n+    }\n+\n+  /* Closing quote */\n+  strcpy (cmd_endp, z_shell_end_args);\n+\n+  sys_result = system (long_cmd);\n+\n+  free (long_cmd);\n+\n+  return sys_result;\n+}\n+\n+#endif /* defined(__MINGW32__) */"}, {"sha": "07beb3afcceb1131e619865a0423fb54ee4534ab", "filename": "fixincludes/fixlib.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/716028e405fab6526e3580bd060f896bb3672681/fixincludes%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.h?ref=716028e405fab6526e3580bd060f896bb3672681", "patch": "@@ -269,4 +269,19 @@ char*  make_raw_shell_str ( char* pz_d, tCC* pz_s, size_t smax );\n t_bool mn_get_regexps ( regex_t** label_re, regex_t** name_re, tCC *who );\n \n void   initialize_opts ( void );\n+\n+#if defined(__MINGW32__)\n+\n+void   fix_path_separators ( char* p );\n+\n+/* prepend shell name to command passed to system call */\n+int    system_with_shell ( char* s );\n+\n+#else\n+\n+/* normal call */\n+#define system_with_shell system\n+\n+#endif /* defined(__MINGW32__) */\n+\n #endif /* ! GCC_FIXLIB_H */"}]}