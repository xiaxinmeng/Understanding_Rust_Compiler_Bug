{"sha": "80e66af3c885e9b0137a8de22578ceca58c1453e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlNjZhZjNjODg1ZTliMDEzN2E4ZGUyMjU3OGNlY2E1OGMxNDUzZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-13T17:15:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-13T17:15:35Z"}, "message": "re PR target/78794 (We noticed ~9% regression in 32-bit mode for 462.libquntum on Avoton after r243202)\n\n\tPR target/78794\n\t* config/i386/i386.c (dimode_scalar_chain::compute_convert_gain):\n\tCalculate additional gain for andnot for targets without BMI.\n\ntestsuite/ChangeLog:\n\n\tPR target/78794\n\t* gcc.target/i386/pr78794.c: New test.\n\nFrom-SVN: r243615", "tree": {"sha": "a51fd76f8e6b74c7243970b1ee256661a069c6d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a51fd76f8e6b74c7243970b1ee256661a069c6d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80e66af3c885e9b0137a8de22578ceca58c1453e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e66af3c885e9b0137a8de22578ceca58c1453e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80e66af3c885e9b0137a8de22578ceca58c1453e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e66af3c885e9b0137a8de22578ceca58c1453e/comments", "author": null, "committer": null, "parents": [{"sha": "6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "cbf7b2f466d90fe9ec4d27f20ce16d219229550a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80e66af3c885e9b0137a8de22578ceca58c1453e", "patch": "@@ -1,3 +1,9 @@\n+2016-12-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78794\n+\t* config/i386/i386.c (dimode_scalar_chain::compute_convert_gain):\n+\tCalculate additional gain for andnot for targets without BMI.\n+\n 2016-12-13  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/rs6000-c.c: Add built-in support for\n@@ -21,11 +27,9 @@\n 2016-12-13  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/78428\n-\t* expr.c (store_constructor_field): Add new arguments to the\n-\tfunction.\n-\t(store_constructor): Set up bitregion_end and add\n-\tgcc_unreachable to fields that have either non-constant size\n-\tor (and) offset.\n+\t* expr.c (store_constructor_field): Add new arguments to the function.\n+\t(store_constructor): Set up bitregion_end and add gcc_unreachable to\n+\tfields that have either non-constant size or (and) offset.\n \n 2016-12-13  Marek Polacek  <polacek@redhat.com>\n "}, {"sha": "8fca3692a311f78446cdcae382a5f02c82ce7052", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=80e66af3c885e9b0137a8de22578ceca58c1453e", "patch": "@@ -3419,6 +3419,11 @@ dimode_scalar_chain::compute_convert_gain ()\n \t       || GET_CODE (src) == AND)\n \t{\n \t  gain += ix86_cost->add;\n+\t  /* Additional gain for andnot for targets without BMI.  */\n+\t  if (GET_CODE (XEXP (src, 0)) == NOT\n+\t      && !TARGET_BMI)\n+\t    gain += 2 * ix86_cost->add;\n+\n \t  if (CONST_INT_P (XEXP (src, 0)))\n \t    gain -= vector_const_cost (XEXP (src, 0));\n \t  if (CONST_INT_P (XEXP (src, 1)))\n@@ -3431,7 +3436,7 @@ dimode_scalar_chain::compute_convert_gain ()\n \t{\n \t  /* Assume comparison cost is the same.  */\n \t}\n-      else if (GET_CODE (src) == CONST_INT)\n+      else if (CONST_INT_P (src))\n \t{\n \t  if (REG_P (dst))\n \t    gain += COSTS_N_INSNS (2);"}, {"sha": "072e617415ac6af328abd1a3acd0786150f4ce20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80e66af3c885e9b0137a8de22578ceca58c1453e", "patch": "@@ -1,3 +1,8 @@\n+2016-12-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78794\n+\t* gcc.target/i386/pr78794.c: New test.\n+\n 2016-12-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/77785"}, {"sha": "6c3a3feb84ff8184939f57592ecf1c30696c96de", "filename": "gcc/testsuite/gcc.target/i386/pr78794.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78794.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e66af3c885e9b0137a8de22578ceca58c1453e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78794.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78794.c?ref=80e66af3c885e9b0137a8de22578ceca58c1453e", "patch": "@@ -0,0 +1,32 @@\n+/* PR target/pr78794 */\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -march=slm -mno-bmi -mno-stackrealign\" } */\n+/* { dg-final { scan-assembler \"pandn\" } } */\n+\n+typedef unsigned long long ull;\n+\n+struct S1\n+{\n+  float x;\n+  ull y;\n+};\n+\n+\n+struct S2\n+{\n+  int a1;\n+  struct S1 *node;\n+  int *a2;\n+};\n+\n+void\n+foo(int c1, int c2, int c3, struct S2 *reg)\n+{\n+  int i;\n+  for(i=0; i<reg->a1; i++)\n+    if(reg->node[i].y & ((ull) 1 << c1))\n+      {\n+\tif(reg->node[i].y & ((ull) 1 << c2))\n+\t  reg->node[i].y ^= ((ull) 1 << c3);\n+      }\n+}"}]}