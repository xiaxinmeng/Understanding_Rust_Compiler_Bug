{"sha": "ae7adb1b554f9a17421c74f45a727e90ef87682e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3YWRiMWI1NTRmOWExNzQyMWM3NGY0NWE3MjdlOTBlZjg3NjgyZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-10-15T13:54:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-10-15T13:54:47Z"}, "message": "exp_ch3.adb (Build_Init_Procedure): Keep separate the initialization of tagged types whose ultimate ancestor is a...\n\n2007-10-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Build_Init_Procedure): Keep separate the initialization\n\tof tagged types whose ultimate ancestor is a CPP type.\n\t(Freeze_Array_Type): For a packed array type, generate an initialization\n\tprocedure if the type is public, to handle properly a client that\n\tspecifies Normalize_Scalars.\n\nFrom-SVN: r129323", "tree": {"sha": "a3a7a6630623f316fce1d067b798e3a7d2fa8dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3a7a6630623f316fce1d067b798e3a7d2fa8dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae7adb1b554f9a17421c74f45a727e90ef87682e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7adb1b554f9a17421c74f45a727e90ef87682e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7adb1b554f9a17421c74f45a727e90ef87682e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7adb1b554f9a17421c74f45a727e90ef87682e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3192631e2438b31b79d6aa9873b6ed83417af857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3192631e2438b31b79d6aa9873b6ed83417af857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3192631e2438b31b79d6aa9873b6ed83417af857"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "6be11a7f640c0376a65182c585b0dbcfe1183dfd", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7adb1b554f9a17421c74f45a727e90ef87682e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7adb1b554f9a17421c74f45a727e90ef87682e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=ae7adb1b554f9a17421c74f45a727e90ef87682e", "patch": "@@ -631,7 +631,16 @@ package body Exp_Ch3 is\n    --  Start of processing for Build_Array_Init_Proc\n \n    begin\n-      if Suppress_Init_Proc (A_Type) or else Is_Value_Type (Comp_Type) then\n+      --  Nothing to generate in the following cases:\n+\n+      --    1. Initialization is suppressed for the type\n+      --    2. The type is a value type, in the CIL sense.\n+      --    3. An initialization already exists for the base type\n+\n+      if Suppress_Init_Proc (A_Type)\n+        or else Is_Value_Type (Comp_Type)\n+        or else Present (Base_Init_Proc (A_Type))\n+      then\n          return;\n       end if;\n \n@@ -2104,6 +2113,8 @@ package body Exp_Ch3 is\n          Iface_Elmt       : Elmt_Id;\n          Comp_Elmt        : Elmt_Id;\n \n+         pragma Warnings (Off, Ifaces_Tag_List);\n+\n       --  Start of processing for Build_Offset_To_Top_Functions\n \n       begin\n@@ -2117,8 +2128,8 @@ package body Exp_Ch3 is\n             return;\n          end if;\n \n-         Collect_Interfaces_Info (Rec_Type,\n-           Ifaces_List, Ifaces_Comp_List, Ifaces_Tag_List);\n+         Collect_Interfaces_Info\n+           (Rec_Type, Ifaces_List, Ifaces_Comp_List, Ifaces_Tag_List);\n \n          --  For each interface type with secondary dispatch table we generate\n          --  the Offset_To_Top_Functions (required to displace the pointer in\n@@ -2295,15 +2306,15 @@ package body Exp_Ch3 is\n             --  the parent. In that case we insert the tag initialization\n             --  after the calls to initialize the parent.\n \n-            if not Is_CPP_Class (Etype (Rec_Type)) then\n+            if not Is_CPP_Class (Root_Type (Rec_Type)) then\n                Prepend_To (Body_Stmts,\n                  Make_If_Statement (Loc,\n                    Condition => New_Occurrence_Of (Set_Tag, Loc),\n                    Then_Statements => Init_Tags_List));\n \n-            --  CPP_Class: In this case the dispatch table of the parent was\n-            --  built in the C++ side and we copy the table of the parent to\n-            --  initialize the new dispatch table.\n+            --  CPP_Class derivation: In this case the dispatch table of the\n+            --  parent was built in the C++ side and we copy the table of the\n+            --  parent to initialize the new dispatch table.\n \n             else\n                declare\n@@ -4921,11 +4932,14 @@ package body Exp_Ch3 is\n \n       --  For packed case, default initialization, except if the component type\n       --  is itself a packed structure with an initialization procedure, or\n-      --  initialize/normalize scalars active, and we have a base type.\n+      --  initialize/normalize scalars active, and we have a base type, or the\n+      --  type is public, because in that case a client might specify\n+      --  Normalize_Scalars and there better be a public Init_Proc for it.\n \n       elsif (Present (Init_Proc (Component_Type (Base)))\n                and then No (Base_Init_Proc (Base)))\n         or else (Init_Or_Norm_Scalars and then Base = Typ)\n+        or else Is_Public (Typ)\n       then\n          Build_Array_Init_Proc (Base, N);\n       end if;\n@@ -7317,12 +7331,13 @@ package body Exp_Ch3 is\n               TSS_Stream_Write,\n               TSS_Stream_Input,\n               TSS_Stream_Output);\n+\n       begin\n          for Op in Stream_Op_TSS_Names'Range loop\n             if Stream_Operation_OK (Tag_Typ, Stream_Op_TSS_Names (Op)) then\n                Append_To (Res,\n-                  Predef_Stream_Attr_Spec (Loc, Tag_Typ,\n-                    Stream_Op_TSS_Names (Op)));\n+                 Predef_Stream_Attr_Spec (Loc, Tag_Typ,\n+                  Stream_Op_TSS_Names (Op)));\n             end if;\n          end loop;\n       end;\n@@ -7749,6 +7764,8 @@ package body Exp_Ch3 is\n       Eq_Name   : Name_Id;\n       Ent       : Entity_Id;\n \n+      pragma Warnings (Off, Ent);\n+\n    begin\n       --  See if we have a predefined \"=\" operator\n "}]}