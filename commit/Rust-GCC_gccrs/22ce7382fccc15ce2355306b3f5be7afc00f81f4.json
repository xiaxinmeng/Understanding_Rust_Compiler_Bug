{"sha": "22ce7382fccc15ce2355306b3f5be7afc00f81f4", "node_id": "C_kwDOANBUbNoAKDIyY2U3MzgyZmNjYzE1Y2UyMzU1MzA2YjNmNWJlN2FmYzAwZjgxZjQ", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-03T08:07:34Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-04T08:09:46Z"}, "message": "Simplify (trunc)copysign((extend)a, (extend)b) to .COPYSIGN (a,b).\n\na and b are same type as the truncation type and has less precision\nthan extend type.\n\ngcc/ChangeLog:\n\n\tPR target/102464\n\t* match.pd: simplify (trunc)copysign((extend)a, (extend)b) to\n\t.COPYSIGN (a,b) when a and b are same type as the truncation\n\ttype and has less precision than extend type.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr102464-copysign-1.c: New test.", "tree": {"sha": "2c9cb87e1e26c43786f6c760a1ffc64501c3692f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c9cb87e1e26c43786f6c760a1ffc64501c3692f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ce7382fccc15ce2355306b3f5be7afc00f81f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ce7382fccc15ce2355306b3f5be7afc00f81f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ce7382fccc15ce2355306b3f5be7afc00f81f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ce7382fccc15ce2355306b3f5be7afc00f81f4/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d428c4ce425c470120a46427d5964f0bd09f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d428c4ce425c470120a46427d5964f0bd09f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d428c4ce425c470120a46427d5964f0bd09f89"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "651982c28fe8b01e1082551dc713302be7e21cc2", "filename": "gcc/match.pd", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce7382fccc15ce2355306b3f5be7afc00f81f4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce7382fccc15ce2355306b3f5be7afc00f81f4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=22ce7382fccc15ce2355306b3f5be7afc00f81f4", "patch": "@@ -6169,6 +6169,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t  && direct_internal_fn_supported_p (as_internal_fn (tos),\n \t\t\t\t\t     type, OPTIMIZE_FOR_BOTH))\n        (tos @0))))\n+\n+/* Simplify (trunc)copysign ((extend)x, (extend)y) to copysignf (x, y),\n+   x,y is float value, similar for _Float16/double.  */\n+(for copysigns (COPYSIGN_ALL)\n+ (simplify\n+  (convert (copysigns (convert@2 @0) (convert @1)))\n+   (if (optimize\n+       && types_match (type, TREE_TYPE (@0))\n+       && types_match (type, TREE_TYPE (@1))\n+       && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (@2))\n+       && direct_internal_fn_supported_p (IFN_COPYSIGN,\n+\t\t\t\t\t  type, OPTIMIZE_FOR_BOTH))\n+    (IFN_COPYSIGN @0 @1))))\n+\n #endif\n \n (for froms (XFLOORL XCEILL XROUNDL XRINTL)"}, {"sha": "95a395097380b2921ac86daa1391b8d17486b8b5", "filename": "gcc/testsuite/gcc.target/i386/pr102464-copysign-1.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ce7382fccc15ce2355306b3f5be7afc00f81f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-copysign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ce7382fccc15ce2355306b3f5be7afc00f81f4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-copysign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464-copysign-1.c?ref=22ce7382fccc15ce2355306b3f5be7afc00f81f4", "patch": "@@ -0,0 +1,80 @@\n+/* PR target/102464.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -mfpmath=sse -fdump-tree-optimized\" } */\n+\n+#include<math.h>\n+void foo1 (_Float16* __restrict a, _Float16* b, _Float16* c)\n+{\n+  for (int i = 0; i != 8; i++)\n+    a[i] = copysignf (b[i], c[i]);\n+}\n+\n+void foo2 (_Float16* __restrict a, _Float16* b, _Float16* c)\n+{\n+  for (int i = 0; i != 8; i++)\n+    a[i] = copysign (b[i], c[i]);\n+}\n+\n+void foo3 (_Float16* __restrict a, _Float16* b, _Float16* c)\n+{\n+  for (int i = 0; i != 8; i++)\n+    a[i] = copysignl (b[i], c[i]);\n+}\n+\n+void foo4 (float* __restrict a, float* b, float* c)\n+{\n+  for (int i = 0; i != 4; i++)\n+    a[i] = copysign (b[i], c[i]);\n+}\n+\n+void foo5 (float* __restrict a, float* b, float* c)\n+{\n+  for (int i = 0; i != 4; i++)\n+    a[i] = copysignl (b[i], c[i]);\n+}\n+\n+void foo6 (double* __restrict a, double* b, double* c)\n+{\n+  for (int i = 0; i != 4; i++)\n+    a[i] = copysignl (b[i], c[i]);\n+}\n+\n+void foo7 (_Float16* __restrict a, _Float16* b, _Float16* c)\n+{\n+  a[0] = copysignf (b[0], c[0]);\n+}\n+\n+void foo8 (_Float16* __restrict a, _Float16* b, _Float16* c)\n+{\n+  a[0] = copysign (b[0], c[0]);\n+}\n+\n+void foo9 (_Float16* __restrict a, _Float16* b, _Float16* c)\n+{\n+  a[0] = copysignl (b[0], c[0]);\n+}\n+\n+void foo10 (float* __restrict a, float* b, float* c)\n+{\n+  a[0] = copysign (b[0], c[0]);\n+}\n+\n+void foo11 (float* __restrict a, float* b, float* c)\n+{\n+  a[0] = copysignl (b[0], c[0]);\n+}\n+\n+void foo12 (double* __restrict a, double* b, double* c)\n+{\n+  a[0] = copysignl (b[0], c[0]);\n+}\n+\n+/* { dg-final { scan-assembler-not \"vcvtsh2s\\[sd\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vcvtss2sd\" } } */\n+/* { dg-final { scan-assembler-not \"fld\" } } */\n+/* { dg-final { scan-assembler-not \"vcvtph2p\\[sd\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vcvtps2pd\" } } */\n+/* { dg-final { scan-assembler-not \"extendhfxf\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\{1to8\\\\\\}\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\.COPYSIGN\" 12 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpternlog\" 12 } } */"}]}