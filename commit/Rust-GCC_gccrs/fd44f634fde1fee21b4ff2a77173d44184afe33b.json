{"sha": "fd44f634fde1fee21b4ff2a77173d44184afe33b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0NGY2MzRmZGUxZmVlMjFiNGZmMmE3NzE3M2Q0NDE4NGFmZTMzYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-05-28T22:27:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-05-28T22:27:04Z"}, "message": "re PR tree-optimization/21562 (Quiet bad codegen (unrolling + tail call interaction))\n\n\n\tPR tree-optimization/21562\n\t* cfgexpand.c (construct_init_block): Deal properly with the case\n\tof entry edge not pointing to very first basic block.\n\nFrom-SVN: r100305", "tree": {"sha": "85878c8310af843bb8bfb3a3b2df4ba27bd43cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85878c8310af843bb8bfb3a3b2df4ba27bd43cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd44f634fde1fee21b4ff2a77173d44184afe33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd44f634fde1fee21b4ff2a77173d44184afe33b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd44f634fde1fee21b4ff2a77173d44184afe33b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd44f634fde1fee21b4ff2a77173d44184afe33b/comments", "author": null, "committer": null, "parents": [{"sha": "6be8b52474f98eab9b3c490169627b9d1ece43df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be8b52474f98eab9b3c490169627b9d1ece43df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be8b52474f98eab9b3c490169627b9d1ece43df"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "f25e76e862ca6687c087c9639e31d2a7b6f012a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd44f634fde1fee21b4ff2a77173d44184afe33b", "patch": "@@ -1,3 +1,9 @@\n+2005-05-29  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/21562\n+\t* cfgexpand.c (construct_init_block): Deal properly with the case\n+\tof entry edge not pointing to very first basic block.\n+\n 2005-05-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-ccp.c (ccp_fold): Remove code that produces"}, {"sha": "4e4a8e208c3e36a5725cc86b337abb8ace6045ee", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=fd44f634fde1fee21b4ff2a77173d44184afe33b", "patch": "@@ -1157,22 +1157,25 @@ static basic_block\n construct_init_block (void)\n {\n   basic_block init_block, first_block;\n-  edge e = NULL, e2;\n-  edge_iterator ei;\n+  edge e = NULL;\n+  int flags;\n \n-  FOR_EACH_EDGE (e2, ei, ENTRY_BLOCK_PTR->succs)\n-    {\n-      /* Clear EDGE_EXECUTABLE.  This flag is never used in the backend.\n+  /* Multiple entry points not supported yet.  */\n+  gcc_assert (EDGE_COUNT (ENTRY_BLOCK_PTR->succs) == 1);\n \n-\t For all other blocks this edge flag is cleared while expanding\n-\t a basic block in expand_gimple_basic_block, but there we never\n-\t looked at the successors of the entry block.\n-\t This caused PR17513.  */\n-      e2->flags &= ~EDGE_EXECUTABLE;\n+  e = EDGE_SUCC (ENTRY_BLOCK_PTR, 0);\n \n-      if (e2->dest == ENTRY_BLOCK_PTR->next_bb)\n-\te = e2;\n+  /* When entry edge points to first basic block, we don't need jump,\n+     otherwise we have to jump into proper target.  */\n+  if (e && e->dest != ENTRY_BLOCK_PTR->next_bb)\n+    {\n+      tree label = tree_block_label (e->dest);\n+\n+      emit_jump (label_rtx (label));\n+      flags = 0;\n     }\n+  else\n+    flags = EDGE_FALLTHRU;\n \n   init_block = create_basic_block (NEXT_INSN (get_insns ()),\n \t\t\t\t   get_last_insn (),\n@@ -1183,7 +1186,7 @@ construct_init_block (void)\n     {\n       first_block = e->dest;\n       redirect_edge_succ (e, init_block);\n-      e = make_edge (init_block, first_block, EDGE_FALLTHRU);\n+      e = make_edge (init_block, first_block, flags);\n     }\n   else\n     e = make_edge (init_block, EXIT_BLOCK_PTR, EDGE_FALLTHRU);"}, {"sha": "f9a5e6a19898915c3618c631aa5d2071b518a602", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd44f634fde1fee21b4ff2a77173d44184afe33b", "patch": "@@ -1,3 +1,7 @@\n+2005-05-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/compile/pr21562.c: New.\n+\n 2005-05-28  Steven G. Kargl <kargls@comcast.net>\n \n \t* gfortran.dg/subnormal_1.f90: New test."}, {"sha": "d100b28dd4553dfc88abd9935aa551fff77bda2c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr21562.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21562.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd44f634fde1fee21b4ff2a77173d44184afe33b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21562.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21562.c?ref=fd44f634fde1fee21b4ff2a77173d44184afe33b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-O3 -fno-inline\" } */\n+struct foo { int a, b, c; };\n+void abort(void);\n+void exit(int);\n+\n+void\n+brother (int a, int b, int c)\n+{\n+  if (a)\n+    abort ();\n+}\n+\n+void\n+sister (struct foo f, int b, int c)\n+{\n+  brother ((f.b == b), b, c);\n+}\n+\n+int\n+main ()\n+{\n+  struct foo f = { 7, 8, 9 };\n+  sister (f, 1, 2);\n+  exit (0);\n+}"}]}