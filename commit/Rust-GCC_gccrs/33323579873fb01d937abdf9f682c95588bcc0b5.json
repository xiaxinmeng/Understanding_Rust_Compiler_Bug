{"sha": "33323579873fb01d937abdf9f682c95588bcc0b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMzMjM1Nzk4NzNmYjAxZDkzN2FiZGY5ZjY4MmM5NTU4OGJjYzBiNQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2005-06-01T20:04:05Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2005-06-01T20:04:05Z"}, "message": "JdwpPacket.java: New file.\n\n        * gnu/classpath/jdwp/transport/JdwpPacket.java: New file.\n        * gnu/classpath/jdwp/transport/JdwpCommandPacket.java: New file.\n        * gnu/classpath/jdwp/transport/JdwpReplyPacket.java: New file.\n\nFrom-SVN: r100463", "tree": {"sha": "b15f86050f6c3b5dc05eabc6273fbf52d36d585f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b15f86050f6c3b5dc05eabc6273fbf52d36d585f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33323579873fb01d937abdf9f682c95588bcc0b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33323579873fb01d937abdf9f682c95588bcc0b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33323579873fb01d937abdf9f682c95588bcc0b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33323579873fb01d937abdf9f682c95588bcc0b5/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd3352b625b40e18a95bb5db35de31b8951e4d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3352b625b40e18a95bb5db35de31b8951e4d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3352b625b40e18a95bb5db35de31b8951e4d82"}], "stats": {"total": 568, "additions": 568, "deletions": 0}, "files": [{"sha": "46c292e2c6e3b9b3c30f09291d3325b431094f79", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=33323579873fb01d937abdf9f682c95588bcc0b5", "patch": "@@ -1,3 +1,9 @@\n+2005-06-01  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/transport/JdwpPacket.java: New file.\n+\t* gnu/classpath/jdwp/transport/JdwpCommandPacket.java: New file.\n+\t* gnu/classpath/jdwp/transport/JdwpReplyPacket.java: New file.\n+\n 2005-06-01  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/21785:"}, {"sha": "cf193a2ed771a81649e2e90b93a8a02528da8949", "filename": "libjava/gnu/classpath/jdwp/transport/JdwpCommandPacket.java", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpCommandPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpCommandPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpCommandPacket.java?ref=33323579873fb01d937abdf9f682c95588bcc0b5", "patch": "@@ -0,0 +1,149 @@\n+/* JdwpCommandPacket.java -- JDWP command packet\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.transport;\n+\n+/**\n+ * A class representing a JDWP command packet.\n+ * This class adds command set and command to the packet header\n+ * information in {@link gnu.classpath.jdwp.transport.JdwpPacket}\n+ * and adds additional command packet-specific processing.\n+ *\n+ * @author Keith Seitz  <keiths@redhat.com>\n+ */\n+public class JdwpCommandPacket extends JdwpPacket\n+{\n+  /**\n+   * Command set\n+   */\n+  protected byte _commandSet;\n+\n+  /**\n+   * Command\n+   */\n+  protected byte _command;\n+\n+  // Minimum packet size [excluding super class]\n+  // ( commandSet (1) + command (1) )\n+  private static final int MINIMUM_LENGTH = 2;\n+\n+  /**\n+   * Constructs a new <code>JdwpCommandPacket</code>\n+   */\n+  public JdwpCommandPacket ()\n+  {\n+    // Don't assign an id. This constructor is called by\n+    // JdwpPacket.fromBytes, and that will assign a packet id.\n+  }\n+  \n+  /**\n+   * Constructs a new <code>JdwpCommandPacket</code>\n+   * with the given command set and command\n+   *\n+   * @param set      the command set\n+   * @param command  the command\n+   */\n+  public JdwpCommandPacket (byte set, byte command)\n+  {\n+    _id = ++_last_id;\n+    _commandSet = set;\n+    _command = command;\n+  }\n+\n+  /**\n+   * Retuns the length of this packet\n+   */\n+  public int getLength ()\n+  {\n+    return MINIMUM_LENGTH + super.getLength ();\n+  }\n+\n+  /**\n+   * Returns the command set\n+   */\n+  public byte getCommandSet ()\n+  {\n+    return _commandSet;\n+  }\n+\n+  /**\n+   * Sets the command set\n+   */\n+  public void setCommandSet (byte cs)\n+  { \n+    _commandSet = cs;\n+  }\n+\n+  /**\n+   * Returns the command\n+   */\n+  public byte getCommand ()\n+  {\n+    return _command;\n+  }\n+\n+  /**\n+   * Sets the command\n+   */\n+  public void setCommand (byte cmd)\n+  {\n+    _command = cmd;\n+  }\n+\n+  // Reads command packet data from the given buffer, starting\n+  // at the given offset\n+  protected int myFromBytes (byte[] bytes, int index)\n+  {\n+    int i = 0;\n+    setCommandSet (bytes[index + i++]);\n+    setCommand (bytes[index + i++]);\n+    return i;\n+  }\n+\n+  // Writes the command packet data into the given buffer\n+  protected int myToBytes (byte[] bytes, int index)\n+  {\n+    // Need to add command set & command\n+    int i = 0;\n+    bytes[index + i++] = getCommandSet ();\n+    bytes[index + i++] = getCommand ();\n+\n+    return i;\n+  }\n+}"}, {"sha": "06d6f1ab8a922b94cc2b31545984a524dcce4af2", "filename": "libjava/gnu/classpath/jdwp/transport/JdwpPacket.java", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpPacket.java?ref=33323579873fb01d937abdf9f682c95588bcc0b5", "patch": "@@ -0,0 +1,286 @@\n+/* JdwpPacket.java -- Base class for JDWP command and reply packets\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.transport;\n+\n+/**\n+ * All command and reply packets in JDWP share\n+ * common header type information:\n+ *\n+ *    length (4 bytes) : size of entire packet, including length\n+ *    id     (4 bytes) : unique packet id\n+ *    flags  (1 byte)  : flag byte\n+ *    [command packet stuff | reply packet stuff]\n+ *    data   (variable) : unique command-/reply-specific data\n+ *\n+ * This class deal with everything except the command- and reply-specific\n+ * data, which get handled in {@link\n+ * gnu.classpath.jdwp.transport.JdwpCommandPacket} and {@link\n+ * gnu.classpath.jdwp.transprot.JdwpReplyPacket}.\n+ *\n+ * @author Keith Seitz  <keiths@redhat.com>\n+ */\n+public abstract class JdwpPacket\n+{\n+  // Last id of packet constructed\n+  protected static int _last_id = 0;\n+\n+  // JDWP reply packet flag\n+  protected static final int JDWP_FLAG_REPLY = 0x80;\n+\n+  /**\n+   * Minimum packet size excluding sub-class data\n+   * ( length (4) + id (4) + flags (1) )\n+   */\n+  protected static final int MINIMUM_SIZE = 9;\n+\n+  /**\n+   * Id of command/reply\n+   */\n+  protected int _id;\n+\n+  /**\n+   * Packet flags\n+   */\n+  protected byte _flags;\n+\n+  /**\n+   * Packet-specific data\n+   */\n+  protected byte[] _data;\n+\n+  /**\n+   * Constructor\n+   */\n+  public JdwpPacket ()\n+  {\n+    // By default, DON'T assign an id. This way when a packet\n+    // is constructed from fromBytes, _last_id won't increment (i.e.,\n+    // it won't leave holes in the outgoing packet ids).\n+  }\n+\n+  /**\n+   * Constructs a <code>JdwpPacket</code> with the id\n+   * from the given packet.\n+   *\n+   * @param pkt  a packet whose id will be used in this new packet\n+   */\n+  public JdwpPacket (JdwpPacket pkt)\n+  {\n+    _id = pkt.getId ();\n+  }\n+\n+  /**\n+   * Returns the packet id\n+   */\n+  public int getId ()\n+  { \n+    return _id;\n+  }\n+\n+  /**\n+   * Sets the packet id\n+   */\n+  public void setId (int id)\n+  { \n+    _id = id;\n+  }\n+\n+  /**\n+   * Returns the packet flags\n+   */\n+  public byte getFlags ()\n+  { \n+    return _flags;\n+  }\n+\n+  /**\n+   * Sets the packet flags\n+   */\n+  public void setFlags (byte flags)\n+  { \n+    _flags = flags;\n+  }\n+\n+  /**\n+   * Gets the command/reply-specific data in this packet\n+   */\n+  public byte[] getData ()\n+  { \n+    return _data;\n+  }\n+\n+  /**\n+   * Sets the command/reply-specific data in this packet\n+   */\n+  public void setData (byte[] data)\n+  { \n+    _data = data;\n+  }\n+\n+  /**\n+   * Returns the length of this entire packet\n+   */\n+  public int getLength ()\n+  { \n+    return MINIMUM_SIZE + (_data == null ? 0 : _data.length);\n+  }\n+\n+  /**\n+   * Allow subclasses to initialize from data\n+   * \n+   * @param   bytes  packet data from the wire\n+   * @param   index  index into <code>bytes</code> to start processing\n+   * @return         number of bytes in <code>bytes</code> processed\n+   */\n+  protected abstract int myFromBytes (byte[] bytes, int index);\n+\n+  /**\n+   * Convert the given bytes into a <code>JdwpPacket</code>. Uses the\n+   * abstract method <code>myFromBytes</code> to allow subclasses to\n+   * process data.\n+   *\n+   * If the given data does not represent a valid JDWP packet, it returns\n+   * <code>null</code>.\n+   * \n+   * @param   bytes  packet data from the wire\n+   * @param   index  index into <code>bytes</code> to start processing\n+   * @return         number of bytes in <code>bytes</code> processed\n+   */\n+  public static JdwpPacket fromBytes (byte[] bytes)\n+  {\n+    int i = 0;\n+    int length = ((bytes[i++] & 0xff) << 24 | (bytes[i++] & 0xff) << 16\n+                  | (bytes[i++] & 0xff) << 8 | (bytes[i++] 0xff));\n+    int id = 0;\n+    byte flags = 0;\n+\n+    if (bytes.length == length)\n+      {\n+\tid = ((bytes[i++] & 0xff) << 24 | (bytes[i++] & 0xff) << 16\n+              | (bytes[i++] & 0xff) << 8 | (bytes[i++] & 0xff));\n+\tflags = bytes[i++];\n+\n+\tClass clazz = null;\n+\tif (flags == 0)\n+\t  clazz = JdwpCommandPacket.class;\n+\telse if ((flags & JDWP_FLAG_REPLY) != 0)\n+\t  clazz = JdwpReplyPacket.class;\n+\telse\n+\t  {\n+\t    // Malformed packet. Discard it.\n+\t    return null;\n+\t  }\n+\n+\tJdwpPacket pkt = null;\n+\ttry\n+\t  {\n+\t    pkt = (JdwpPacket) clazz.newInstance ();\n+\t  }\n+\tcatch (InstantiationException ie)\n+\t  {\n+\t    // Discard packet\n+\t    return null;\n+\t  }\n+\tcatch (IllegalAccessException iae)\n+\t  {\n+\t    // Discard packet\n+\t    return null;\n+\t  }\n+\n+\tpkt.setId (id);\n+\tpkt.setFlags (flags);\n+\n+\ti += pkt.myFromBytes (bytes, i);\n+\tbyte[] data = new byte[length - i];\n+\tSystem.arraycopy (bytes, i, data, 0, data.length);\n+\tpkt.setData (data);\n+\n+\treturn pkt;\n+      }\n+\t\n+    return null;\n+  }\n+\n+  // Put subclass information into bytes\n+  protected abstract int myToBytes (byte[] bytes, int index);\n+\n+  // Convert this packet to it byte representation (ready to send on the wire)\n+  // NOTE: All integers should be big-endian.\n+  public byte[] toBytes ()\n+  {\n+    // Allocate a new array to hold contents of packet\n+    int length = getLength ();\n+    byte[] bytes = new byte[length];\n+\t\n+    int i = 0;\n+\n+    //\n+    // Packet layout: length, id, flags, packet-specific, data (optional)\n+    //\n+\n+    // length\n+    bytes[i++] = (byte) (length >>> 24);\n+    bytes[i++] = (byte) (length >>> 16);\n+    bytes[i++] = (byte) (length >>> 8);\n+    bytes[i++] = (byte) length;\n+\n+    // id\n+    bytes[i++] = (byte) (getId () >>> 24);\n+    bytes[i++] = (byte) (getId () >>> 16);\n+    bytes[i++] = (byte) (getId () >>> 8);\n+    bytes[i++] = (byte) getId ();\n+\n+    // flag\n+    bytes[i++] = getFlags ();\n+\n+    // packet-specific stuff\n+    i += myToBytes (bytes, i);\n+\n+    // data (if any)\n+    byte[] data = getData ();\n+    if (data.length > 0 && i < length)\n+      {\n+\t// Would it pay to be over cautious?\n+\tSystem.arraycopy (data, 0, bytes, i, data.length);\n+      }\n+\n+    return bytes;\n+  }\n+}"}, {"sha": "1aa2dd344cbb77b99a9545af3ab16750eb35da31", "filename": "libjava/gnu/classpath/jdwp/transport/JdwpReplyPacket.java", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpReplyPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33323579873fb01d937abdf9f682c95588bcc0b5/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpReplyPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpReplyPacket.java?ref=33323579873fb01d937abdf9f682c95588bcc0b5", "patch": "@@ -0,0 +1,127 @@\n+/* JdwpReplyPacket.java -- JDWP reply packet\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.transport;\n+\n+/**\n+ * A class represents a JDWP reply packet.\n+ * This class adds an error code to the packet header information\n+ * in {@link gnu.classpath.transport.JdwpPacket} and adds additional\n+ * reply packet-specific processing.\n+ *\n+ * @author Keith Seitz  <keiths@redhat.com>\n+ */\n+public class JdwpReplyPacket extends JdwpPacket\n+{\n+  /**\n+   * Error code\n+   */\n+  protected short _errorCode;\n+\n+  // Minimum packet size [excluding super class] ( errorCode (2) )\n+  private static final int MINIMUM_LENGTH = 2;\n+\n+  /**\n+   * Constructs a <code>JdwpReplyPacket</code>.\n+   */\n+  public JdwpReplyPacket ()\n+  {\n+    // Don't assign a packet id. This is called by JdwpPacket.fromBytes\n+    // which assigns a packet id. (Not that a VM would do that...)\n+  }\n+\n+  /**\n+   * Constructs a <code>JdwpReplyPacket</code> with the\n+   * id from the given packet and error code\n+   *\n+   * @param pkt        the packet whose id this packet will use\n+   * @param errorCode  the error code\n+   */\n+  public JdwpReplyPacket (JdwpPacket pkt, short errorCode)\n+  {\n+    super (pkt);\n+    _flags = (byte) JDWP_FLAG_REPLY;\n+    _errorCode = errorCode;\n+  }\n+\n+  /**\n+   * Returns the length of this packet\n+   */\n+  public int getLength ()\n+  {\n+    return MINIMUM_LENGTH + super.getLength ();\n+  }\n+\n+  /**\n+   * Returns the error code\n+   */\n+  public short getErrorCode ()\n+  {\n+    return _errorCode;\n+  }\n+\n+  /**\n+   * Sets the error code\n+   */\n+  public void setErrorCode (short ec)\n+  {\n+    _errorCode = ec;\n+  }\n+\n+  // Reads command packet data from the given buffer, starting\n+  // at the given offset\n+  protected int myFromBytes (byte[] bytes, int index)\n+  {\n+    int i = 0;\n+    setErrorCode ((short) ((bytes[index + i++] & 0xff) << 8\n+\t\t\t   | (bytes[index + i++] & 0xff)));\n+    return i;\n+  }\n+\n+  // Writes the command packet data into the given buffer\n+  protected int myToBytes (byte[] bytes, int index)\n+  {\n+    // Need to add error code\n+    int i = 0;\n+    bytes[index + i++] = (byte) (getErrorCode () >>> 8);\n+    bytes[index + i++] = (byte) getErrorCode ();\n+    \n+    return i;\n+  }\n+}"}]}