{"sha": "8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "node_id": "C_kwDOANBUbNoAKDhiN2ZlZTFkZTlhNzIzY2NjMjRkMmRlMWM4OWQyMzNmMjdiMTZhMGE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-22T00:17:49Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-22T00:17:49Z"}, "message": "Daily bump.", "tree": {"sha": "5e647c2aa135aa4b2cd8d53048ec4f1a8a1c67ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e647c2aa135aa4b2cd8d53048ec4f1a8a1c67ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/comments", "author": null, "committer": null, "parents": [{"sha": "4e4e45a4fd341174d8231ee6a99e6fe308904f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4e45a4fd341174d8231ee6a99e6fe308904f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4e45a4fd341174d8231ee6a99e6fe308904f8f"}], "stats": {"total": 364, "additions": 363, "deletions": 1}, "files": [{"sha": "57ea5808120a9d2ab1b5ffd6cb884b2d75ddd6c5", "filename": "contrib/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,11 @@\n+2022-11-21  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Temporarily disable\n+\tcheck_line.start.\n+\n 2022-11-20  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Temporarily disable"}, {"sha": "9d14da72dff004ac9fba4aa83167c5e5f470d9ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,82 @@\n+2022-11-21  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/rtems.h (SUBTARGET_CC1_SPEC): Undef and define.\n+\n+2022-11-21  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* gcc.cc (SUBTARGET_CC1_SPEC): Define if not defined.\n+\t(cc1_spec): Append SUBTARGET_CC1_SPEC.\n+\n+2022-11-21  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* doc/sourcebuild.texi (sockets): Document new check.\n+\n+2022-11-21  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* tree-ssa-loop.h (tree_niter_desc): Update comment.\n+\n+2022-11-21  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* tree-ssa-loop-niter.cc\n+\t(number_of_iterations_exit_assumptions): Modify to call...\n+\t(number_of_iterations_bitcount): ...this new function.\n+\t(number_of_iterations_popcount): Now called by the above.\n+\tRefactor, and extract popcount expression builder to...\n+\t(build_popcount_expr): this new function.\n+\n+2022-11-21  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* tree-ssa-loop-niter.cc (ssa_defined_by_minus_one_stmt_p): Move\n+\t(number_of_iterations_popcount): Move, and remove separate prototype.\n+\n+2022-11-21  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_exit_assumptions):\n+\tMove at_stmt assignment.\n+\n+2022-11-21  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* genmultilib: Fix options and dirnames/osdirnames sanity check.\n+\n+2022-11-21  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\tPR target/107786\n+\t* config/riscv/riscv.md\n+\t(*branch<ANYI:mode>_shiftedarith_equals_zero): Wrap ANYI\n+\tin a subreg, as our branch instructions only supports X.\n+\n+2022-11-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107748\n+\t* config/i386/avx512fp16intrin.h (_mm512_castph512_ph128,\n+\t_mm512_castph512_ph256, _mm512_castph128_ph512,\n+\t_mm512_castph256_ph512, _mm512_set1_pch): Uglify names of local\n+\tvariables and union members.\n+\t* config/i386/avx512fp16vlintrin.h (_mm256_castph256_ph128,\n+\t_mm256_castph128_ph256, _mm256_set1_pch, _mm_set1_pch): Likewise.\n+\t* config/i386/smmintrin.h (_mm_extract_ps): Likewise.\n+\n+2022-11-21  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* genmultilib: Add sanity check.\n+\n+2022-11-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/arm/arm.cc (arm_attribute_table) <cmse_nonsecure_call>:\n+\tChange decl_required field to false.\n+\t(arm_handle_cmse_nonsecure_call): Deal with a TYPE node.\n+\n+2022-11-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gimplify.cc (gimplify_modify_expr): If\n+\teither *from_p or *to_p were error_operand\n+\treturn early.\n+\n+2022-11-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-builtins.cc (def_builtin): Handle \"shared\"\n+\tavx512bf16vl-avxneconvert builtins.\n+\n 2022-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/107183"}, {"sha": "00ec7aeeb714715c938fe4fea3ecfc71227fdbcb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1 +1 @@\n-20221121\n+20221122"}, {"sha": "e4adff45f44c29f9e206594b95cad9faa521ef82", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,127 @@\n+2022-11-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Constant>: Revert\n+\tlatest change.\n+\t* gcc-interface/trans.cc (gnat_to_gnu) <N_Object_Declaration>:\n+\tTweak latest change.\n+\n+2022-11-21  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* exp_pakd.adb (Create_Packed_Array_Impl_Type): Do not share PAT\n+\tif sizes of types differ.\n+\n+2022-11-21  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Restore\n+\talphabetical ordering.\n+\t* gnat_rm.texi: Regenerate.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-11-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Needs_Secondary_Stack): Test Is_Constrained\n+\tdirectly instead of Is_Definite_Subtype for an array subtype.\n+\n+2022-11-21  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/s-rident.ads: Define a new restriction,\n+\tNo_Task_Hierarchy_Implicit. This is like the No_Task_Hierarchy\n+\trestriction, but with the difference that setting this restriction\n+\tdoes not mean the H.6(6) post-compilation check is satisified.\n+\t* exp_ch6.adb (Add_Task_Actuals_To_Build_In_Place_Call): If it is\n+\tknown that the function result cannot have tasks, then pass in a\n+\tnull literal for the activation chain actual parameter. This\n+\tavoids generating a reference to an entity that\n+\tBuild_Activation_Chain_Entity may have chosen not to generate a\n+\tdeclaration for.\n+\t* gnatbind.adb (List_Applicable_Restrictions): Do not list the\n+\tNo_Task_Hierarchy_Implicit restriction.\n+\t* restrict.adb: Special treatment for the\n+\tNo_Task_Hierarchy_Implicit restriction in functions\n+\tGet_Restriction_Id and Restriction_Active. The former is needed to\n+\tdisallow the (unlikely) case that a user tries to explicitly\n+\treference the No_Task_Hierarchy_Implicit restriction.\n+\t* sem_prag.adb (Analyze_Pragma): If a Sequential\n+\tPartition_Elaboration_Policy is specified (and the\n+\tNo_Task_Hierarchy restriction is not already enabled), then enable\n+\tthe No_Task_Hierarchy_Implicit restriction.\n+\n+2022-11-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Use Typ local\n+\tconstant throughout, remove Ret_Obj_Typ local constant, rename\n+\tRef_Type into Acc_Typ in a couple of places, remove a useless call\n+\tto Set_Etype, use a consistent checks suppression scheme, adjust\n+\tcomments for the sake of consistencty and alphabetize some local\n+\tdeclarations.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Remove a couple of\n+\tredundant local constants.\n+\n+2022-11-21  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-sttebu.adb (Put): Add missing call to Encode.\n+\t* libgnat/a-strsup.ads: Declare new Put_Image procedure and add\n+\tPut_Image aspect specification for type Super_String.\n+\t* libgnat/a-strsup.adb (Put_Image): New procedure.\n+\t* libgnat/a-stwisu.ads: Declare new Put_Image procedure and add\n+\tPut_Image aspect specification for type Super_String.\n+\t* libgnat/a-stwisu.adb (Put_Image): New procedure.\n+\t* libgnat/a-stzsup.ads: Declare new Put_Image procedure and add\n+\tPut_Image aspect specification for type Super_String.\n+\t* libgnat/a-stzsup.adb (Put_Image): New procedure.\n+\n+2022-11-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* frontend.adb (Frontend): Disable subprogram call validation.\n+\n+2022-11-21  Bob Duff  <duff@adacore.com>\n+\n+\t* warnsw.ads, warnsw.adb: Move warning flags here from package\n+\tOpt. Rename Warning_Record to be Warnings_State. Use an array\n+\tinstead of a record; this simplifies the code. Add renamings of\n+\tall the array components for easy reference outside this package.\n+\tPass the \"Family\" to Set_Warning_Switch. Use more table-driven\n+\tcode. Misc cleanup and comment fixes.\n+\t* opt.ads: Move warning switches to Warnsw.\n+\t* gnat1drv.adb\n+\t(Adjust_Global_Switches): Expanded names needed.\n+\t* inline.ads: Rename Warning_Record to be Warnings_State.\n+\t* sem_ch12.adb: Likewise.\n+\t* sem_prag.adb: Use new Set_Warning_Switch.\n+\t* contracts.adb, errout.adb, exp_aggr.adb, exp_ch11.adb: Adjust\n+\timports for move to Warnsw.\n+\t* exp_ch5.adb, exp_prag.adb, exp_util.adb, frontend.adb: Likewise.\n+\t* layout.adb, lib-xref.adb, restrict.adb, scn.adb, sem_aggr.adb:\n+\tLikewise.\n+\t* sem_attr.adb, sem_case.adb, sem_ch10.adb, sem_ch11.adb:\n+\tLikewise.\n+\t* sem_ch13.adb, sem_ch3.adb, sem_ch4.adb, sem_ch5.adb: Likewise.\n+\t* sem_ch6.adb, sem_ch7.adb, sem_ch8.adb, sem_elab.adb: Likewise.\n+\t* sem_eval.adb, sem_res.adb, sem_util.adb, sem_warn.adb: Likewise.\n+\t* switch-c.adb: Likewise.\n+\n+2022-11-21  Steve Baird  <baird@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Improve\n+\tthe description of how the -gnatw.h switch interacts with\n+\t\"partial\" record layout specifications (i.e., specifications where\n+\tthe locations of some components are left unspecified).\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-11-21  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_ch13.adb (Check_One_Attr): produce error when Size attribute\n+\tused on aliased object of elementary types with nonconfirming\n+\tvalue.\n+\n+2022-11-21  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* sfn_scan.adb (Scan_SFN_Pragmas): Improve handling of comments.\n+\n+2022-11-21  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* par-ch3.adb (P_Declarative_Item): Tweak handling of with keyword.\n+\n 2022-11-14  Boris Yakobowski  <yakobowski@adacore.com>\n \n \t* sem_case.adb: silence false positive warning emitted by CodePeer"}, {"sha": "bc92a132b7b3eba04380e56dd44542f37ad289c3", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,27 @@\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107788\n+\t* region-model.cc (region_model::update_for_int_cst_return):\n+\tRequire that the return type be an integer type.\n+\t(region_model::update_for_nonzero_return): Likewise.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107783\n+\t* region-model-impl-calls.cc (kf_accept::matches_call_types_p):\n+\tRequire that args 1 and 2 be pointers.\n+\t(kf_bind::matches_call_types_p): Require that arg 1 be a pointer.\n+\t* region-model.h (call_details::arg_is_pointer_p): New\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107777\n+\t* call-summary.cc\n+\t(call_summary_replay::convert_region_from_summary_1): Handle\n+\tRK_THREAD_LOCAL and RK_ERRNO in switch.\n+\t* region-model.cc (region_model::get_representative_path_var_1):\n+\tLikewise.\n+\n 2022-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107582"}, {"sha": "476f4b030320d651a27e0a018576378ee6360341", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,87 @@\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107788\n+\t* g++.dg/analyzer/fd-bind-pr107783.C: New test.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107783\n+\t* gcc.dg/analyzer/fd-bind-pr107783.c: New test.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107777\n+\t* gcc.dg/analyzer/call-summaries-errno.c: New test.\n+\t* gcc.dg/analyzer/errno-pr107777.c: New test.\n+\n+2022-11-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/CWE-131-examples.c: New test.\n+\t* gcc.dg/analyzer/file-CWE-1341-example.c: New test.\n+\t* gcc.dg/analyzer/malloc-CWE-401-example.c: New test.\n+\t* gcc.dg/analyzer/malloc-CWE-415-examples.c: New test.\n+\t* gcc.dg/analyzer/malloc-CWE-416-examples.c: New test.\n+\t* gcc.dg/analyzer/malloc-CWE-590-examples.c: New test.\n+\n+2022-11-21  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* c-c++-common/gomp/pragma-omp-unknown.c: New test.\n+\n+2022-11-21  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.dg/analyzer/fd-accept.c: Require sockets.\n+\t* gcc.dg/analyzer/fd-bind.c: Ditto.\n+\t* gcc.dg/analyzer/fd-connect.c: Ditto.\n+\t* gcc.dg/analyzer/fd-datagram-socket.c: Ditto.\n+\t* gcc.dg/analyzer/fd-glibc-byte-stream-connection-server.c:\n+\tDitto.\n+\t* gcc.dg/analyzer/fd-glibc-byte-stream-socket.c: Ditto.\n+\t* gcc.dg/analyzer/fd-glibc-datagram-client.c: Ditto.\n+\t* gcc.dg/analyzer/fd-glibc-datagram-socket.c: Ditto.\n+\t* gcc.dg/analyzer/fd-listen.c: Ditto.\n+\t* gcc.dg/analyzer/fd-manpage-getaddrinfo-client.c: Ditto.\n+\t* gcc.dg/analyzer/fd-mappage-getaddrinfo-server.c: Ditto.\n+\t* gcc.dg/analyzer/fd-socket-meaning.c: Ditto.\n+\t* gcc.dg/analyzer/fd-socket-misuse.c: Ditto.\n+\t* gcc.dg/analyzer/fd-stream-socket-active-open.c: Ditto.\n+\t* gcc.dg/analyzer/fd-stream-socket-passive-open.c: Ditto.\n+\t* gcc.dg/analyzer/fd-stream-socket.c: Ditto.\n+\t* gcc.dg/analyzer/fd-symbolic-socket.c: Ditto.\n+\t* lib/target-supports.exp (check_effective_target_sockets): New\n+\tcheck.\n+\n+2022-11-21  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* gcc.dg/pr77975.c: Make tests more robust.\n+\n+2022-11-21  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* gcc.dg/tree-ssa/popcount-max.c: New test.\n+\n+2022-11-21  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX  <yvan.roux@foss.st.com>\n+\n+\t* g++.dg/modules/pr99023_b.X: Match Windows paths too.\n+\n+2022-11-21  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/pr107786-2.c: New test.\n+\t* gcc.target/riscv/pr107786.c: New test.\n+\n+2022-11-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/machine_attr2.ads, gnat.dg/machine_attr2.adb: New test.\n+\n+2022-11-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/redecl-23.c: New test.\n+\t* gcc.dg/redecl-24.c: New test.\n+\t* gcc.dg/redecl-25.c: New test.\n+\n+2022-11-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avxneconvert-1.c: New test.\n+\n 2022-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/107183"}, {"sha": "a2db376314f885f06fc33e84e73020262d278d14", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,16 @@\n+2022-11-21  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* directives.cc (do_pragma): Fix memory leak in token buffer.  Fix\n+\tunwanted paste between two tokens.\n+\n+2022-11-21  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\n+\t* files.cc: Ensure pattern matches before use.\n+\n+2022-11-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* config.in: Re-configure.\n+\n 2022-11-19  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \tPR preprocessor/107691"}, {"sha": "490f093dbcec0193b7019bd93481a39beef6a41d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,12 @@\n+2022-11-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/gcn/libgomp-gcn.h (struct output):\n+\tRemove 'msg_u64' from the union, change\n+\tvalue_u64[2] to value_u64[6].\n+\t* config/gcn/target.c (GOMP_target_ext): Update accordingly.\n+\t* plugin/plugin-gcn.c (process_reverse_offload, console_output):\n+\tLikewise.\n+\n 2022-11-19  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* config/gcn/libgomp-gcn.h: New file; contains"}, {"sha": "7a0a6f3dbdc4705e51fb8425f5cd6cc21a453bee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7fee1de9a723ccc24d2de1c89d233f27b16a0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b7fee1de9a723ccc24d2de1c89d233f27b16a0a", "patch": "@@ -1,3 +1,24 @@\n+2022-11-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/functional (_Bind_front0): New class template.\n+\t(_Bind_front_t): Use _Bind_front0 when there are no bound\n+\targuments.\n+\t* testsuite/20_util/function_objects/bind_front/107784.cc:\n+\tNew test.\n+\n+2022-11-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/chrono.h (duration): Check preconditions on\n+\ttemplate arguments before using them.\n+\n+2022-11-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/tuple: Add better Doxygen comments.\n+\n+2022-11-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* src/experimental/Makefile.in: Re-configure.\n+\n 2022-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/std/format: Add std qualification on isxdigit calls."}]}