{"sha": "d1c38823924506d389ca58d02926ace21bdf82fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFjMzg4MjM5MjQ1MDZkMzg5Y2E1OGQwMjkyNmFjZTIxYmRmODJmYQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-04-23T22:50:16Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-04-23T22:50:16Z"}, "message": "Makefile.in (LIBGCOV): Add _gcov_fork...\n\n\t* Makefile.in (LIBGCOV): Add _gcov_fork, _gcov_execl, _gcov_execlp,\n\t_gcov_execle, _gcov_execv, _gcov_execvp, _gcov_execve.\n\t* builtin-types.def (BT_PID, BT_PTR_CONST_STRING, BT_FN_PID,\n\tBT_FN_INT_CONST_STRING_PTR_CONST_STRING,\n\tBT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING): New.\n\t* builtins.c (expand_builtin_fork_or_exec): New.\n\t(expand_builtin): Call it.\n\t* builtins.def (BUILT_IN_EXECL, BUILT_IN_EXECLP,BUILT_IN_EXECLE,\n\tBUILT_IN_EXECV, BUILT_IN_EXECVP, BUILT_IN_EXECVE, BUILT_IN_FORK): New.\n\t* c-common.c (PID_TYPE): New macro.\n\t(c_common_nodes_and_builtins): Initialize pid_type_node.\n\t* calls.c (special_function_p): Do not handle fork and exec.\n\t(expand_call): Do not handle ECF_FORK_OR_EXEC.\n\t* gcov-io.h (__gcov_fork, __gcov_execl, __gcov_execlp, __gcov_execle,\n\t__gcov_execv, __gcov_execvp, __gcov_execve): Declare.\n\t* libgcov.c (__gcov_fork, __gcov_execl, __gcov_execlp, __gcov_execle,\n\t__gcov_execv, __gcov_execvp, __gcov_execve): New.\n\t* tree.h (enum tree_index): Add TI_PID_TYPE.\n\t(pid_type_node): New macro.\n\t(ECF_FORK_OR_EXEC): Removed.\n\nFrom-SVN: r81118", "tree": {"sha": "8f9b0102376621d66e7cba56d6bc27986f106252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9b0102376621d66e7cba56d6bc27986f106252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1c38823924506d389ca58d02926ace21bdf82fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c38823924506d389ca58d02926ace21bdf82fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1c38823924506d389ca58d02926ace21bdf82fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1c38823924506d389ca58d02926ace21bdf82fa/comments", "author": null, "committer": null, "parents": [{"sha": "adabbcf475e259e77ef3b3d94f2070327955ee0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adabbcf475e259e77ef3b3d94f2070327955ee0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adabbcf475e259e77ef3b3d94f2070327955ee0a"}], "stats": {"total": 315, "additions": 282, "deletions": 33}, "files": [{"sha": "e91015116a511c6f7aad18feb195317d8d83f89a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -1,3 +1,26 @@\n+2004-03-23  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* Makefile.in (LIBGCOV): Add _gcov_fork, _gcov_execl, _gcov_execlp,\n+\t_gcov_execle, _gcov_execv, _gcov_execvp, _gcov_execve.\n+\t* builtin-types.def (BT_PID, BT_PTR_CONST_STRING, BT_FN_PID,\n+\tBT_FN_INT_CONST_STRING_PTR_CONST_STRING,\n+\tBT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING): New.\n+\t* builtins.c (expand_builtin_fork_or_exec): New.\n+\t(expand_builtin): Call it.\n+\t* builtins.def (BUILT_IN_EXECL, BUILT_IN_EXECLP,BUILT_IN_EXECLE,\n+\tBUILT_IN_EXECV, BUILT_IN_EXECVP, BUILT_IN_EXECVE, BUILT_IN_FORK): New.\n+\t* c-common.c (PID_TYPE): New macro.\n+\t(c_common_nodes_and_builtins): Initialize pid_type_node.\n+\t* calls.c (special_function_p): Do not handle fork and exec.\n+\t(expand_call): Do not handle ECF_FORK_OR_EXEC.\n+\t* gcov-io.h (__gcov_fork, __gcov_execl, __gcov_execlp, __gcov_execle,\n+\t__gcov_execv, __gcov_execvp, __gcov_execve): Declare.\n+\t* libgcov.c (__gcov_fork, __gcov_execl, __gcov_execlp, __gcov_execle,\n+\t__gcov_execv, __gcov_execvp, __gcov_execve): New.\n+\t* tree.h (enum tree_index): Add TI_PID_TYPE.\n+\t(pid_type_node): New macro.\n+\t(ECF_FORK_OR_EXEC): Removed.\n+\n 2004-04-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR optimization/13985"}, {"sha": "4b718d503d70dc5100f66c828b9d7dccc0a6b410", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -905,7 +905,9 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n LIB2FUNCS_ST = _eprintf __gcc_bcmp\n \n # Defined in libgcov.c, included only in gcov library\n-LIBGCOV = _gcov _gcov_merge_add _gcov_merge_single _gcov_merge_delta\n+LIBGCOV = _gcov _gcov_merge_add _gcov_merge_single _gcov_merge_delta \\\n+    _gcov_fork _gcov_execl _gcov_execlp _gcov_execle \\\n+    _gcov_execv _gcov_execvp _gcov_execve\n \n FPBIT_FUNCS = _pack_sf _unpack_sf _addsub_sf _mul_sf _div_sf \\\n     _fpcmp_parts_sf _compare_sf _eq_sf _ne_sf _gt_sf _ge_sf \\"}, {"sha": "c6cf5d37e55395b17d99504f7a0b472070aa0555", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -80,6 +80,7 @@ DEF_PRIMITIVE_TYPE (BT_INT_PTR, integer_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_FLOAT_PTR, float_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE_PTR, double_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE_PTR, long_double_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_PID, pid_type_node)\n DEF_PRIMITIVE_TYPE (BT_SIZE, size_type_node)\n DEF_PRIMITIVE_TYPE (BT_SSIZE, signed_size_type_node)\n DEF_PRIMITIVE_TYPE (BT_WINT, wint_type_node)\n@@ -89,8 +90,11 @@ DEF_PRIMITIVE_TYPE (BT_CONST_STRING, const_string_type_node)\n DEF_PRIMITIVE_TYPE (BT_VALIST_REF, va_list_ref_type_node)\n DEF_PRIMITIVE_TYPE (BT_VALIST_ARG, va_list_arg_type_node)\n \n+DEF_POINTER_TYPE (BT_PTR_CONST_STRING, BT_CONST_STRING)\n+\n DEF_FUNCTION_TYPE_0 (BT_FN_VOID, BT_VOID)\n DEF_FUNCTION_TYPE_0 (BT_FN_PTR, BT_PTR)\n+DEF_FUNCTION_TYPE_0 (BT_FN_PID, BT_PID)\n DEF_FUNCTION_TYPE_0 (BT_FN_UNSIGNED, BT_UNSIGNED)\n DEF_FUNCTION_TYPE_0 (BT_FN_FLOAT, BT_FLOAT)\n DEF_FUNCTION_TYPE_0 (BT_FN_DOUBLE, BT_DOUBLE)\n@@ -223,6 +227,8 @@ DEF_FUNCTION_TYPE_2 (BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE_COMPLEX_DOUBLE,\n \t\t     BT_COMPLEX_DOUBLE, BT_COMPLEX_DOUBLE, BT_COMPLEX_DOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, \n \t             BT_COMPLEX_LONGDOUBLE, BT_COMPLEX_LONGDOUBLE, BT_COMPLEX_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_PTR_CONST_STRING,\n+\t\t     BT_INT, BT_CONST_STRING, BT_PTR_CONST_STRING)\n \n DEF_FUNCTION_TYPE_3 (BT_FN_STRING_STRING_CONST_STRING_SIZE,\n \t\t     BT_STRING, BT_STRING, BT_CONST_STRING, BT_SIZE)\n@@ -264,6 +270,8 @@ DEF_FUNCTION_TYPE_3 (BT_FN_VOID_DOUBLE_DOUBLEPTR_DOUBLEPTR,\n \t\t     BT_VOID, BT_DOUBLE, BT_DOUBLE_PTR, BT_DOUBLE_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_LONGDOUBLE_LONGDOUBLEPTR_LONGDOUBLEPTR,\n \t\t     BT_VOID, BT_LONGDOUBLE, BT_LONGDOUBLE_PTR, BT_LONGDOUBLE_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING,\n+\t\t     BT_INT, BT_CONST_STRING, BT_PTR_CONST_STRING, BT_PTR_CONST_STRING)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_PTR)"}, {"sha": "7c6cae19f1008c6ee836557e3726f20b8a13f6af", "filename": "gcc/builtins.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -5081,6 +5081,69 @@ expand_builtin_signbit (tree exp, rtx target)\n     }\n   return temp;\n }\n+\n+/* Expand fork or exec calls.  TARGET is the desired target of the\n+   call.  ARGLIST is the list of arguments of the call.  FN is the\n+   identificator of the actual function.  IGNORE is nonzero if the\n+   value is to be ignored.  */\n+\n+static rtx\n+expand_builtin_fork_or_exec (tree fn, tree arglist, rtx target, int ignore)\n+{\n+  tree id, decl;\n+  tree call;\n+\n+  /* If we are not profiling, just call the function.  */\n+  if (!profile_arc_flag)\n+    return NULL_RTX;\n+\n+  /* Otherwise call the wrapper.  This should be equivalent for the rest of\n+     compiler, so the code does not diverge, and the wrapper may run the\n+     code neccesary for keeping the profiling sane.  */\n+\n+  switch (DECL_FUNCTION_CODE (fn))\n+    {\n+    case BUILT_IN_FORK:\n+      id = get_identifier (\"__gcov_fork\");\n+      break;\n+\n+    case BUILT_IN_EXECL:\n+      id = get_identifier (\"__gcov_execl\");\n+      break;\n+\n+    case BUILT_IN_EXECV:\n+      id = get_identifier (\"__gcov_execv\");\n+      break;\n+\n+    case BUILT_IN_EXECLP:\n+      id = get_identifier (\"__gcov_execlp\");\n+      break;\n+\n+    case BUILT_IN_EXECLE:\n+      id = get_identifier (\"__gcov_execle\");\n+      break;\n+\n+    case BUILT_IN_EXECVP:\n+      id = get_identifier (\"__gcov_execvp\");\n+      break;\n+\n+    case BUILT_IN_EXECVE:\n+      id = get_identifier (\"__gcov_execve\");\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n+  decl = build_decl (FUNCTION_DECL, id, TREE_TYPE (fn));\n+  DECL_EXTERNAL (decl) = 1;\n+  TREE_PUBLIC (decl) = 1;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  TREE_NOTHROW (decl) = 1;\n+  call = build_function_call_expr (decl, arglist);\n+\n+  return expand_call (call, target, ignore);\n+}\n \f\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -5653,6 +5716,17 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       expand_builtin_prefetch (arglist);\n       return const0_rtx;\n \n+    case BUILT_IN_FORK:\n+    case BUILT_IN_EXECL:\n+    case BUILT_IN_EXECV:\n+    case BUILT_IN_EXECLP:\n+    case BUILT_IN_EXECLE:\n+    case BUILT_IN_EXECVP:\n+    case BUILT_IN_EXECVE:\n+      target = expand_builtin_fork_or_exec (fndecl, arglist, target, ignore);\n+      if (target)\n+\treturn target;\n+      break;\n \n     default:\t/* just do library call, if unknown builtin */\n       if (!DECL_ASSEMBLER_NAME_SET_P (fndecl))"}, {"sha": "72206254e97e3feab06c43c5b74f2f70db622861", "filename": "gcc/builtins.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -555,10 +555,17 @@ DEF_GCC_BUILTIN        (BUILT_IN_DWARF_CFA, \"dwarf_cfa\", BT_FN_PTR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_DWARF_SP_COLUMN, \"dwarf_sp_column\", BT_FN_UNSIGNED, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN, \"eh_return\", BT_FN_VOID_PTRMODE_PTR, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN_DATA_REGNO, \"eh_return_data_regno\", BT_FN_INT_INT, ATTR_NULL)\n+DEF_LIB_BUILTIN        (BUILT_IN_EXECL, \"execl\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_EXECLP, \"execlp\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_EXECLE, \"execle\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_EXECV, \"execv\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_EXECVP, \"execvp\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_EXECVE, \"execve\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_EXIT, \"exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXPECT, \"expect\", BT_FN_LONG_LONG_LONG, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTEND_POINTER, \"extend_pointer\", BT_FN_WORD_PTR, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTRACT_RETURN_ADDR, \"extract_return_addr\", BT_FN_PTR_PTR, ATTR_NULL)\n+DEF_LIB_BUILTIN        (BUILT_IN_FORK, \"fork\", BT_FN_PID, ATTR_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_FRAME_ADDRESS, \"frame_address\", BT_FN_PTR_UNSIGNED, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_FROB_RETURN_ADDR, \"frob_return_addr\", BT_FN_PTR_PTR, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GETTEXT, \"gettext\", BT_FN_STRING_CONST_STRING, ATTR_FORMAT_ARG_1)"}, {"sha": "c4f012920590e3f4c940c296e39e05ea97cd4021", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -55,6 +55,10 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n #define SIZE_TYPE \"long unsigned int\"\n #endif\n \n+#ifndef PID_TYPE\n+#define PID_TYPE \"int\"\n+#endif\n+\n #ifndef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n #endif\n@@ -3113,6 +3117,9 @@ c_common_nodes_and_builtins (void)\n   signed_size_type_node = c_common_signed_type (size_type_node);\n   set_sizetype (size_type_node);\n \n+  pid_type_node =\n+    TREE_TYPE (identifier_global_value (get_identifier (PID_TYPE)));\n+\n   build_common_tree_nodes_2 (flag_short_double);\n \n   record_builtin_type (RID_FLOAT, NULL, float_type_node);"}, {"sha": "091ea4e026c96b8f5eb6259b8ba6e189a3d6a98e", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -653,21 +653,8 @@ special_function_p (tree fndecl, int flags)\n       else if (tname[0] == 'l' && tname[1] == 'o'\n \t       && ! strcmp (tname, \"longjmp\"))\n \tflags |= ECF_LONGJMP;\n-\n-      else if ((tname[0] == 'f' && tname[1] == 'o'\n-\t\t&& ! strcmp (tname, \"fork\"))\n-\t       /* Linux specific: __clone.  check NAME to insist on the\n-\t\t  leading underscores, to avoid polluting the ISO / POSIX\n-\t\t  namespace.  */\n-\t       || (name[0] == '_' && name[1] == '_'\n-\t\t   && ! strcmp (tname, \"clone\"))\n-\t       || (tname[0] == 'e' && tname[1] == 'x' && tname[2] == 'e'\n-\t\t   && tname[3] == 'c' && (tname[4] == 'l' || tname[4] == 'v')\n-\t\t   && (tname[5] == '\\0'\n-\t\t       || ((tname[5] == 'p' || tname[5] == 'e')\n-\t\t\t   && tname[6] == '\\0'))))\n-\tflags |= ECF_FORK_OR_EXEC;\n     }\n+\n   return flags;\n }\n \n@@ -2626,18 +2613,6 @@ expand_call (tree exp, rtx target, int ignore)\n       stack_pointer_delta = save_stack_pointer_delta;\n     }\n \n-  if (profile_arc_flag && (flags & ECF_FORK_OR_EXEC))\n-    {\n-      /* A fork duplicates the profile information, and an exec discards\n-\t it.  We can't rely on fork/exec to be paired.  So write out the\n-\t profile information we have gathered so far, and clear it.  */\n-      /* ??? When Linux's __clone is called with CLONE_VM set, profiling\n-\t is subject to race conditions, just as with multithreaded\n-\t programs.  */\n-\n-      emit_library_call (gcov_flush_libfunc, LCT_ALWAYS_RETURN, VOIDmode, 0);\n-    }\n-\n   /* Ensure current function's preferred stack boundary is at least\n      what we need.  We don't have to increase alignment for recursive\n      functions.  */"}, {"sha": "8e0da0e572a3bea9a87dea553891928fa82930fb", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -447,6 +447,16 @@ extern void __gcov_merge_single (gcov_type *, unsigned);\n /* The merge function to choose the most common difference between\n    consecutive values.  */\n extern void __gcov_merge_delta (gcov_type *, unsigned);\n+\n+/* The wrappers around some library functions..  */\n+extern pid_t __gcov_fork (void);\n+extern int __gcov_execl (const char *, const char *, ...);\n+extern int __gcov_execlp (const char *, const char *, ...);\n+extern int __gcov_execle (const char *,  const char *, ...);\n+extern int __gcov_execv (const char *, char *const []);\n+extern int __gcov_execvp (const char *, char *const []);\n+extern int __gcov_execve (const char *, char  *const [], char *const []);\n+\n #endif /* IN_LIBGCOV */\n \n #if IN_LIBGCOV >= 0"}, {"sha": "0731ed01e5fe1d381edbf9c0f610562b8e1a9b5c", "filename": "gcc/libgcov.c", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -580,4 +580,146 @@ __gcov_merge_delta (gcov_type *counters, unsigned n_counters)\n }\n #endif /* L_gcov_merge_delta */\n \n+#ifdef L_gcov_fork\n+/* A wrapper for the fork function.  Flushes the accumulated profiling data, so\n+   that they are not counted twice.  */\n+\n+pid_t\n+__gcov_fork (void)\n+{\n+  __gcov_flush ();\n+  return fork ();\n+}\n+#endif\n+\n+#ifdef L_gcov_execl\n+/* A wrapper for the execl function.  Flushes the accumulated profiling data, so\n+   that they are not lost.  */\n+\n+int\n+__gcov_execl (const char *path, const char *arg, ...)\n+{\n+  va_list ap, aq;\n+  unsigned i, length;\n+  char **args;\n+\n+  __gcov_flush ();\n+\n+  va_start (ap, arg);\n+  va_copy (aq, ap);\n+\n+  length = 2;\n+  while (va_arg (ap, char *))\n+    length++;\n+  va_end (ap);\n+\n+  args = alloca (length * sizeof (void *));\n+  args[0] = (char *) arg;\n+  for (i = 1; i < length; i++)\n+    args[i] = va_arg (aq, char *);\n+  va_end (aq);\n+\n+  return execv (path, args);\n+}\n+#endif\n+\n+#ifdef L_gcov_execlp\n+/* A wrapper for the execlp function.  Flushes the accumulated profiling data, so\n+   that they are not lost.  */\n+\n+int\n+__gcov_execlp (const char *path, const char *arg, ...)\n+{\n+  va_list ap, aq;\n+  unsigned i, length;\n+  char **args;\n+\n+  __gcov_flush ();\n+\n+  va_start (ap, arg);\n+  va_copy (aq, ap);\n+\n+  length = 2;\n+  while (va_arg (ap, char *))\n+    length++;\n+  va_end (ap);\n+\n+  args = alloca (length * sizeof (void *));\n+  args[0] = (char *) arg;\n+  for (i = 1; i < length; i++)\n+    args[i] = va_arg (aq, char *);\n+  va_end (aq);\n+\n+  return execvp (path, args);\n+}\n+#endif\n+\n+#ifdef L_gcov_execle\n+/* A wrapper for the execle function.  Flushes the accumulated profiling data, so\n+   that they are not lost.  */\n+\n+int\n+__gcov_execle (const char *path, const char *arg, ...)\n+{\n+  va_list ap, aq;\n+  unsigned i, length;\n+  char **args;\n+  char **envp;\n+\n+  __gcov_flush ();\n+\n+  va_start (ap, arg);\n+  va_copy (aq, ap);\n+\n+  length = 2;\n+  while (va_arg (ap, char *))\n+    length++;\n+  va_end (ap);\n+\n+  args = alloca (length * sizeof (void *));\n+  args[0] = (char *) arg;\n+  for (i = 1; i < length; i++)\n+    args[i] = va_arg (aq, char *);\n+  envp = va_arg (aq, char **);\n+  va_end (aq);\n+\n+  return execve (path, args, envp);\n+}\n+#endif\n+\n+#ifdef L_gcov_execv\n+/* A wrapper for the execv function.  Flushes the accumulated profiling data, so\n+   that they are not lost.  */\n+\n+int\n+__gcov_execv (const char *path, char *const argv[])\n+{\n+  __gcov_flush ();\n+  return execv (path, argv);\n+}\n+#endif\n+\n+#ifdef L_gcov_execvp\n+/* A wrapper for the execvp function.  Flushes the accumulated profiling data, so\n+   that they are not lost.  */\n+\n+int\n+__gcov_execvp (const char *path, char *const argv[])\n+{\n+  __gcov_flush ();\n+  return execvp (path, argv);\n+}\n+#endif\n+\n+#ifdef L_gcov_execve\n+/* A wrapper for the execve function.  Flushes the accumulated profiling data, so\n+   that they are not lost.  */\n+\n+int\n+__gcov_execve (const char *path, char *const argv[], char *const envp[])\n+{\n+  __gcov_flush ();\n+  return execve (path, argv, envp);\n+}\n+#endif\n #endif /* inhibit_libc */"}, {"sha": "085d5fec22706dbfcdfbe1e1021e8661f421512d", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1c38823924506d389ca58d02926ace21bdf82fa/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d1c38823924506d389ca58d02926ace21bdf82fa", "patch": "@@ -1992,6 +1992,7 @@ enum tree_index\n   TI_PTR_TYPE,\n   TI_CONST_PTR_TYPE,\n   TI_SIZE_TYPE,\n+  TI_PID_TYPE,\n   TI_PTRDIFF_TYPE,\n   TI_VA_LIST_TYPE,\n   TI_BOOLEAN_TYPE,\n@@ -2056,6 +2057,7 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define const_ptr_type_node\t\tglobal_trees[TI_CONST_PTR_TYPE]\n /* The C type `size_t'.  */\n #define size_type_node                  global_trees[TI_SIZE_TYPE]\n+#define pid_type_node                   global_trees[TI_PID_TYPE]\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]\n \n@@ -3090,18 +3092,17 @@ extern rtx emit_line_note (location_t);\n #define ECF_LONGJMP\t\t64\n /* Nonzero if this is a syscall that makes a new process in the image of\n    the current one.  */\n-#define ECF_FORK_OR_EXEC\t128\n-#define ECF_SIBCALL\t\t256\n+#define ECF_SIBCALL\t\t128\n /* Nonzero if this is a call to \"pure\" function (like const function,\n    but may read memory.  */\n-#define ECF_PURE\t\t512\n+#define ECF_PURE\t\t256\n /* Nonzero if this is a call to a function that returns with the stack\n    pointer depressed.  */\n-#define ECF_SP_DEPRESSED\t1024\n+#define ECF_SP_DEPRESSED\t512\n /* Nonzero if this call is known to always return.  */\n-#define ECF_ALWAYS_RETURN\t2048\n+#define ECF_ALWAYS_RETURN\t1024\n /* Create libcall block around the call.  */\n-#define ECF_LIBCALL_BLOCK\t4096\n+#define ECF_LIBCALL_BLOCK\t2048\n \n extern int flags_from_decl_or_type (tree);\n extern int call_expr_flags (tree);"}]}