{"sha": "33befddcb849235353dc263db1c7d07dc15c9faa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiZWZkZGNiODQ5MjM1MzUzZGMyNjNkYjFjN2QwN2RjMTVjOWZhYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "richard.henderson@linaro.org", "date": "2019-09-19T14:36:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2019-09-19T14:36:38Z"}, "message": "aarch64: Add out-of-line functions for LSE atomics\n\nThis is the libgcc part of the interface -- providing the functions.\nRationale is provided at the top of libgcc/config/aarch64/lse.S.\n\n\t* config/aarch64/lse-init.c: New file.\n\t* config/aarch64/lse.S: New file.\n\t* config/aarch64/t-lse: New file.\n\t* config.host: Add t-lse to all aarch64 tuples.\n\nFrom-SVN: r275967", "tree": {"sha": "7cdebf0a266800d3053a23dd84626972b63a05e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cdebf0a266800d3053a23dd84626972b63a05e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33befddcb849235353dc263db1c7d07dc15c9faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33befddcb849235353dc263db1c7d07dc15c9faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33befddcb849235353dc263db1c7d07dc15c9faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33befddcb849235353dc263db1c7d07dc15c9faa/comments", "author": {"login": "rth7680", "id": 2529319, "node_id": "MDQ6VXNlcjI1MjkzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2529319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rth7680", "html_url": "https://github.com/rth7680", "followers_url": "https://api.github.com/users/rth7680/followers", "following_url": "https://api.github.com/users/rth7680/following{/other_user}", "gists_url": "https://api.github.com/users/rth7680/gists{/gist_id}", "starred_url": "https://api.github.com/users/rth7680/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rth7680/subscriptions", "organizations_url": "https://api.github.com/users/rth7680/orgs", "repos_url": "https://api.github.com/users/rth7680/repos", "events_url": "https://api.github.com/users/rth7680/events{/privacy}", "received_events_url": "https://api.github.com/users/rth7680/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7e560deb37e38fb224a0cf108e15df4a717167a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e560deb37e38fb224a0cf108e15df4a717167a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e560deb37e38fb224a0cf108e15df4a717167a"}], "stats": {"total": 335, "additions": 335, "deletions": 0}, "files": [{"sha": "37fadd4149c23db9c163b455c51582da7a47f6c6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=33befddcb849235353dc263db1c7d07dc15c9faa", "patch": "@@ -1,3 +1,10 @@\n+2019-09-19  Richard Henderson  <richard.henderson@linaro.org>\n+\n+\t* config/aarch64/lse-init.c: New file.\n+\t* config/aarch64/lse.S: New file.\n+\t* config/aarch64/t-lse: New file.\n+\t* config.host: Add t-lse to all aarch64 tuples.\n+\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n "}, {"sha": "122113fc5198cbd80388b40cb7901a3a43b71934", "filename": "libgcc/config.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=33befddcb849235353dc263db1c7d07dc15c9faa", "patch": "@@ -350,12 +350,14 @@ aarch64*-*-elf | aarch64*-*-rtems*)\n \textra_parts=\"$extra_parts crtbegin.o crtend.o crti.o crtn.o\"\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n+\ttmake_file=\"${tmake_file} ${cpu_type}/t-lse t-slibgcc-libgcc\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp t-crtfm\"\n \tmd_unwind_header=aarch64/aarch64-unwind.h\n \t;;\n aarch64*-*-freebsd*)\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n+\ttmake_file=\"${tmake_file} ${cpu_type}/t-lse t-slibgcc-libgcc\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp t-crtfm\"\n \tmd_unwind_header=aarch64/freebsd-unwind.h\n \t;;\n@@ -367,12 +369,14 @@ aarch64*-*-netbsd*)\n \t;;\n aarch64*-*-fuchsia*)\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n+\ttmake_file=\"${tmake_file} ${cpu_type}/t-lse t-slibgcc-libgcc\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp\"\n \t;;\n aarch64*-*-linux*)\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \tmd_unwind_header=aarch64/linux-unwind.h\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-aarch64\"\n+\ttmake_file=\"${tmake_file} ${cpu_type}/t-lse t-slibgcc-libgcc\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-softfp t-softfp t-crtfm\"\n \t;;\n alpha*-*-linux*)"}, {"sha": "33d2914747994a1e07dcae906f0352e64045ab02", "filename": "libgcc/config/aarch64/lse-init.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig%2Faarch64%2Flse-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig%2Faarch64%2Flse-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flse-init.c?ref=33befddcb849235353dc263db1c7d07dc15c9faa", "patch": "@@ -0,0 +1,45 @@\n+/* Out-of-line LSE atomics for AArch64 architecture, Init.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Contributed by Linaro Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Define the symbol gating the LSE implementations.  */\n+_Bool __aarch64_have_lse_atomics\n+  __attribute__((visibility(\"hidden\"), nocommon));\n+\n+/* Disable initialization of __aarch64_have_lse_atomics during bootstrap.  */\n+#ifndef inhibit_libc\n+# include <sys/auxv.h>\n+\n+/* Disable initialization if the system headers are too old.  */\n+# if defined(AT_HWCAP) && defined(HWCAP_ATOMICS)\n+\n+static void __attribute__((constructor))\n+init_have_lse_atomics (void)\n+{\n+  unsigned long hwcap = getauxval (AT_HWCAP);\n+  __aarch64_have_lse_atomics = (hwcap & HWCAP_ATOMICS) != 0;\n+}\n+\n+# endif /* HWCAP */\n+#endif /* inhibit_libc */"}, {"sha": "a5f6673596c73c497156a6f128799cc43b400504", "filename": "libgcc/config/aarch64/lse.S", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig%2Faarch64%2Flse.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig%2Faarch64%2Flse.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flse.S?ref=33befddcb849235353dc263db1c7d07dc15c9faa", "patch": "@@ -0,0 +1,235 @@\n+/* Out-of-line LSE atomics for AArch64 architecture.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Contributed by Linaro Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+ * The problem that we are trying to solve is operating system deployment\n+ * of ARMv8.1-Atomics, also known as Large System Exensions (LSE).\n+ *\n+ * There are a number of potential solutions for this problem which have\n+ * been proposed and rejected for various reasons.  To recap:\n+ *\n+ * (1) Multiple builds.  The dynamic linker will examine /lib64/atomics/\n+ * if HWCAP_ATOMICS is set, allowing entire libraries to be overwritten.\n+ * However, not all Linux distributions are happy with multiple builds,\n+ * and anyway it has no effect on main applications.\n+ *\n+ * (2) IFUNC.  We could put these functions into libgcc_s.so, and have\n+ * a single copy of each function for all DSOs.  However, ARM is concerned\n+ * that the branch-to-indirect-branch that is implied by using a PLT,\n+ * as required by IFUNC, is too much overhead for smaller cpus.\n+ *\n+ * (3) Statically predicted direct branches.  This is the approach that\n+ * is taken here.  These functions are linked into every DSO that uses them.\n+ * All of the symbols are hidden, so that the functions are called via a\n+ * direct branch.  The choice of LSE vs non-LSE is done via one byte load\n+ * followed by a well-predicted direct branch.  The functions are compiled\n+ * separately to minimize code size.\n+ */\n+\n+/* Tell the assembler to accept LSE instructions.  */\n+\t.arch armv8-a+lse\n+\n+/* Declare the symbol gating the LSE implementations.  */\n+\t.hidden\t__aarch64_have_lse_atomics\n+\n+/* Turn size and memory model defines into mnemonic fragments.  */\n+#if SIZE == 1\n+# define S     b\n+# define UXT   uxtb\n+#elif SIZE == 2\n+# define S     h\n+# define UXT   uxth\n+#elif SIZE == 4 || SIZE == 8 || SIZE == 16\n+# define S\n+# define UXT   mov\n+#else\n+# error\n+#endif\n+\n+#if MODEL == 1\n+# define SUFF  _relax\n+# define A\n+# define L\n+#elif MODEL == 2\n+# define SUFF  _acq\n+# define A     a\n+# define L\n+#elif MODEL == 3\n+# define SUFF  _rel\n+# define A\n+# define L     l\n+#elif MODEL == 4\n+# define SUFF  _acq_rel\n+# define A     a\n+# define L     l\n+#else\n+# error\n+#endif\n+\n+/* Concatenate symbols.  */\n+#define glue2_(A, B)\t\tA ## B\n+#define glue2(A, B)\t\tglue2_(A, B)\n+#define glue3_(A, B, C)\t\tA ## B ## C\n+#define glue3(A, B, C)\t\tglue3_(A, B, C)\n+#define glue4_(A, B, C, D)\tA ## B ## C ## D\n+#define glue4(A, B, C, D)\tglue4_(A, B, C, D)\n+\n+/* Select the size of a register, given a regno.  */\n+#define x(N)\t\t\tglue2(x, N)\n+#define w(N)\t\t\tglue2(w, N)\n+#if SIZE < 8\n+# define s(N)\t\t\tw(N)\n+#else\n+# define s(N)\t\t\tx(N)\n+#endif\n+\n+#define NAME(BASE)\t\tglue4(__aarch64_, BASE, SIZE, SUFF)\n+#define LDXR\t\t\tglue4(ld, A, xr, S)\n+#define STXR\t\t\tglue4(st, L, xr, S)\n+\n+/* Temporary registers used.  Other than these, only the return value\n+   register (x0) and the flags are modified.  */\n+#define tmp0\t16\n+#define tmp1\t17\n+#define tmp2\t15\n+\n+/* Start and end a function.  */\n+.macro\tSTARTFN name\n+\t.text\n+\t.balign\t16\n+\t.globl\t\\name\n+\t.hidden\t\\name\n+\t.type\t\\name, %function\n+\t.cfi_startproc\n+\\name:\n+.endm\n+\n+.macro\tENDFN name\n+\t.cfi_endproc\n+\t.size\t\\name, . - \\name\n+.endm\n+\n+/* Branch to LABEL if LSE is disabled.  */\n+.macro\tJUMP_IF_NOT_LSE label\n+\tadrp\tx(tmp0), __aarch64_have_lse_atomics\n+\tldrb\tw(tmp0), [x(tmp0), :lo12:__aarch64_have_lse_atomics]\n+\tcbz\tw(tmp0), \\label\n+.endm\n+\n+#ifdef L_cas\n+\n+STARTFN\tNAME(cas)\n+\tJUMP_IF_NOT_LSE\t8f\n+\n+#if SIZE < 16\n+#define CAS\tglue4(cas, A, L, S)\n+\n+\tCAS\t\ts(0), s(1), [x2]\n+\tret\n+\n+8:\tUXT\t\ts(tmp0), s(0)\n+0:\tLDXR\t\ts(0), [x2]\n+\tcmp\t\ts(0), s(tmp0)\n+\tbne\t\t1f\n+\tSTXR\t\tw(tmp1), s(1), [x2]\n+\tcbnz\t\tw(tmp1), 0b\n+1:\tret\n+\n+#else\n+#define LDXP\tglue3(ld, A, xp)\n+#define STXP\tglue3(st, L, xp)\n+#define CASP\tglue3(casp, A, L)\n+\n+\tCASP\t\tx0, x1, x2, x3, [x4]\n+\tret\n+\n+8:\tmov\t\tx(tmp0), x0\n+\tmov\t\tx(tmp1), x1\n+0:\tLDXP\t\tx0, x1, [x4]\n+\tcmp\t\tx0, x(tmp0)\n+\tccmp\t\tx1, x(tmp1), #0, eq\n+\tbne\t\t1f\n+\tSTXP\t\tw(tmp2), x(tmp0), x(tmp1), [x4]\n+\tcbnz\t\tw(tmp2), 0b\n+1:\tret\n+\n+#endif\n+\n+ENDFN\tNAME(cas)\n+#endif\n+\n+#ifdef L_swp\n+#define SWP\tglue4(swp, A, L, S)\n+\n+STARTFN\tNAME(swp)\n+\tJUMP_IF_NOT_LSE\t8f\n+\n+\tSWP\t\ts(0), s(0), [x1]\n+\tret\n+\n+8:\tmov\t\ts(tmp0), s(0)\n+0:\tLDXR\t\ts(0), [x1]\n+\tSTXR\t\tw(tmp1), s(tmp0), [x1]\n+\tcbnz\t\tw(tmp1), 0b\n+\tret\n+\n+ENDFN\tNAME(swp)\n+#endif\n+\n+#if defined(L_ldadd) || defined(L_ldclr) \\\n+    || defined(L_ldeor) || defined(L_ldset)\n+\n+#ifdef L_ldadd\n+#define LDNM\tldadd\n+#define OP\tadd\n+#elif defined(L_ldclr)\n+#define LDNM\tldclr\n+#define OP\tbic\n+#elif defined(L_ldeor)\n+#define LDNM\tldeor\n+#define OP\teor\n+#elif defined(L_ldset)\n+#define LDNM\tldset\n+#define OP\torr\n+#else\n+#error\n+#endif\n+#define LDOP\tglue4(LDNM, A, L, S)\n+\n+STARTFN\tNAME(LDNM)\n+\tJUMP_IF_NOT_LSE\t8f\n+\n+\tLDOP\t\ts(0), s(0), [x1]\n+\tret\n+\n+8:\tmov\t\ts(tmp0), s(0)\n+0:\tLDXR\t\ts(0), [x1]\n+\tOP\t\ts(tmp1), s(0), s(tmp0)\n+\tSTXR\t\tw(tmp1), s(tmp1), [x1]\n+\tcbnz\t\tw(tmp1), 0b\n+\tret\n+\n+ENDFN\tNAME(LDNM)\n+#endif"}, {"sha": "fe3868dacbf5582146aa5824c0ce11aa5b931d52", "filename": "libgcc/config/aarch64/t-lse", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig%2Faarch64%2Ft-lse", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33befddcb849235353dc263db1c7d07dc15c9faa/libgcc%2Fconfig%2Faarch64%2Ft-lse", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Ft-lse?ref=33befddcb849235353dc263db1c7d07dc15c9faa", "patch": "@@ -0,0 +1,44 @@\n+# Out-of-line LSE atomics for AArch64 architecture.\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+# Contributed by Linaro Ltd.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Compare-and-swap has 5 sizes and 4 memory models.\n+S0 := $(foreach s, 1 2 4 8 16, $(addsuffix _$(s), cas))\n+O0 := $(foreach m, 1 2 3 4, $(addsuffix _$(m)$(objext), $(S0)))\n+\n+# Swap, Load-and-operate have 4 sizes and 4 memory models\n+S1 := $(foreach s, 1 2 4 8, $(addsuffix _$(s), swp ldadd ldclr ldeor ldset))\n+O1 := $(foreach m, 1 2 3 4, $(addsuffix _$(m)$(objext), $(S1)))\n+\n+LSE_OBJS := $(O0) $(O1)\n+\n+libgcc-objects += $(LSE_OBJS) lse-init$(objext)\n+\n+empty      =\n+space      = $(empty) $(empty)\n+PAT_SPLIT  = $(subst _,$(space),$(*F))\n+PAT_BASE   = $(word 1,$(PAT_SPLIT))\n+PAT_N      = $(word 2,$(PAT_SPLIT))\n+PAT_M      = $(word 3,$(PAT_SPLIT))\n+\n+lse-init$(objext): $(srcdir)/config/aarch64/lse-init.c\n+\t$(gcc_compile) -c $<\n+\n+$(LSE_OBJS): $(srcdir)/config/aarch64/lse.S\n+\t$(gcc_compile) -DL_$(PAT_BASE) -DSIZE=$(PAT_N) -DMODEL=$(PAT_M) -c $<"}]}