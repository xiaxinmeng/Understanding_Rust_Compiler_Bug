{"sha": "63a0874077b3325c2b3cc47401d8bfe916d8f128", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhMDg3NDA3N2IzMzI1YzJiM2NjNDc0MDFkOGJmZTkxNmQ4ZjEyOA==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.de", "date": "2007-03-09T16:16:35Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2007-03-09T16:16:35Z"}, "message": "re PR c/17946 (wanted: warning for \"a && MASK\" when \"a & MASK\" was probably intended)\n\n2007-03-09  Dirk Mueller  <dmueller@suse.de>\n\n       PR c++/17946\n       * doc/invoke.texi (-Wlogical-op): Document.\n       * common.opt (-Wlogical-op): New.\n       * c-common.h (warn_logical_operator): Declare.\n       * c-common.c (warn_logical_operator): Define.\n       * c-typeck.c (parser_build_binary_op): Call\n       warn_logical_operator.\n\n       * cp/call.c (build_new_op): Call warn_logical_operator.\n\n       * testsuite/gcc.dg/Wlogical-op-1.c: New.\n       * testsuite/g++.dg/warn/Wlogical-op-1.C: New.\n\nFrom-SVN: r122751", "tree": {"sha": "0678efcbaa9704baaeb7ec0f167caf43462406c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0678efcbaa9704baaeb7ec0f167caf43462406c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63a0874077b3325c2b3cc47401d8bfe916d8f128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a0874077b3325c2b3cc47401d8bfe916d8f128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a0874077b3325c2b3cc47401d8bfe916d8f128", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a0874077b3325c2b3cc47401d8bfe916d8f128/comments", "author": null, "committer": null, "parents": [{"sha": "0de2ae02735c71f5318af4486444d33c26fc211a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de2ae02735c71f5318af4486444d33c26fc211a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0de2ae02735c71f5318af4486444d33c26fc211a"}], "stats": {"total": 286, "additions": 281, "deletions": 5}, "files": [{"sha": "7bd6d741ea151b4548e7907580d7e537abb077e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -1,3 +1,13 @@\n+2007-03-09  Dirk Mueller  <dmueller@suse.de>\n+\n+\tPR c++/17946\n+\t* doc/invoke.texi (-Wlogical-op): Document.\n+\t* common.opt (-Wlogical-op): New.\n+\t* c-common.h (warn_logical_operator): Declare.\n+\t* c-common.c (warn_logical_operator): Define.\n+\t* c-typeck.c (parser_build_binary_op): Call\n+\twarn_logical_operator.\n+\n 2007-03-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* rtl.h (gen_rtx_ASM_INPUT): Use \"\" instead of NULL file name."}, {"sha": "6216d5e123a78316df315733854fa8e7c2328945", "filename": "gcc/c-common.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -978,6 +978,44 @@ overflow_warning (tree value)\n     }\n }\n \n+\n+/* Warn about use of a logical || / && operator being used in a\n+   context where it is likely that the bitwise equivalent was intended\n+   by the programmer. CODE is the TREE_CODE of the operator, ARG1\n+   and ARG2 the arguments.  */\n+\n+void\n+warn_logical_operator (enum tree_code code, tree arg1, tree\n+    arg2)\n+{\n+  switch (code)\n+    {\n+      case TRUTH_ANDIF_EXPR:\n+      case TRUTH_ORIF_EXPR:\n+      case TRUTH_OR_EXPR:\n+      case TRUTH_AND_EXPR:\n+       if (!TREE_NO_WARNING (arg1)\n+            && INTEGRAL_TYPE_P (TREE_TYPE (arg1))\n+           && !CONSTANT_CLASS_P (arg1)\n+           && TREE_CODE (arg2) == INTEGER_CST\n+           && !integer_zerop (arg2)\n+           && !integer_onep (arg2))\n+         {\n+           warning (OPT_Wlogical_op,\n+                    \"logical %<%s%> with non-zero constant \"\n+                    \"will always evaluate as true\",\n+                    ((code == TRUTH_ANDIF_EXPR)\n+                     || (code == TRUTH_AND_EXPR)) ? \"&&\" : \"||\");\n+            TREE_NO_WARNING (arg1) = true;\n+         }\n+\n+        break;\n+      default:\n+        break;\n+    }\n+}\n+\n+\n /* Print a warning about casts that might indicate violation\n    of strict aliasing rules if -Wstrict-aliasing is used and\n    strict aliasing mode is in effect. OTYPE is the original"}, {"sha": "f47fa8e38150c9da75e5d6519e7181fd92f9c52f", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -673,6 +673,7 @@ extern void strict_aliasing_warning (tree, tree, tree);\n extern void empty_body_warning (tree, tree);\n extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n+extern void warn_logical_operator (enum tree_code, tree, tree);\n extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n extern bool same_scalar_type_ignoring_signedness (tree, tree);"}, {"sha": "e45c5e0bf971f0c7f32a5dd46f71aaac51e3d5c2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -2640,6 +2640,9 @@ parser_build_binary_op (enum tree_code code, struct c_expr arg1,\n   if (warn_parentheses)\n     warn_about_parentheses (code, code1, code2);\n \n+  if (code1 != tcc_comparison)\n+    warn_logical_operator (code, arg1.value, arg2.value);\n+\n   /* Warn about comparisons against string literals, with the exception\n      of testing for equality or inequality of a string literal with NULL.  */\n   if (code == EQ_EXPR || code == NE_EXPR)"}, {"sha": "bcf0fcd4ec82bed87c92d04cd561c56797c8e678", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -118,6 +118,10 @@ Wlarger-than-\n Common RejectNegative Joined UInteger Warning\n -Wlarger-than-<number>\tWarn if an object is larger than <number> bytes\n \n+Wlogical-op\n+Common Warning Var(warn_logical_op)\n+Warn when a logical operator is suspicously always evaluating to true or false\n+\n Wunsafe-loop-optimizations\n Common Var(warn_unsafe_loop_optimizations) Warning\n Warn if the loop cannot be optimized due to nontrivial assumptions."}, {"sha": "8d0ba18a79cd11dda644ed6bd21330ade7007995", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -1,3 +1,7 @@\n+2007-03-09  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* cp/call.c (build_new_op): Call warn_logical_operator.\n+\n 2007-03-08  Volker Reichelt  <reichelt@netcologne.de>\n \n \tPR c++/30852"}, {"sha": "fb4609edf7b6dc7a180a1c751b902ba4cb05c633", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -3694,6 +3694,7 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n   void *p;\n   bool strict_p;\n   bool any_viable_p;\n+  bool expl_eq_arg1 = false;\n \n   if (error_operand_p (arg1)\n       || error_operand_p (arg2)\n@@ -3723,6 +3724,12 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     case CALL_EXPR:\n       return build_object_call (arg1, arg2);\n \n+    case TRUTH_ORIF_EXPR:\n+    case TRUTH_ANDIF_EXPR:\n+    case TRUTH_AND_EXPR:\n+    case TRUTH_OR_EXPR:\n+      if (COMPARISON_CLASS_P (arg1))\n+\texpl_eq_arg1 = true;\n     default:\n       break;\n     }\n@@ -3930,6 +3937,12 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t\tconv = conv->u.next;\n \t      arg3 = convert_like (conv, arg3);\n \t    }\n+\n+\t  if (!expl_eq_arg1) \n+\t    {\n+\t      warn_logical_operator (code, arg1, arg2);\n+\t      expl_eq_arg1 = true;\n+\t    }\n \t}\n     }\n \n@@ -3950,6 +3963,12 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     case INDIRECT_REF:\n       return build_indirect_ref (arg1, \"unary *\");\n \n+    case TRUTH_ANDIF_EXPR:\n+    case TRUTH_ORIF_EXPR:\n+    case TRUTH_AND_EXPR:\n+    case TRUTH_OR_EXPR:\n+      if (!expl_eq_arg1)\n+\twarn_logical_operator (code, arg1, arg2);\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n@@ -3968,8 +3987,6 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     case BIT_AND_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n-    case TRUTH_ANDIF_EXPR:\n-    case TRUTH_ORIF_EXPR:\n       return cp_build_binary_op (code, arg1, arg2);\n \n     case UNARY_PLUS_EXPR:"}, {"sha": "987988441746a273926377b67a8c54d06fca5a9d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -236,9 +236,9 @@ Objective-C and Objective-C++ Dialects}.\n -Wformat-security  -Wformat-y2k @gol\n -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int @gol\n -Wimport  -Wno-import  -Winit-self  -Winline @gol\n--Wno-int-to-pointer-cast @gol\n--Wno-invalid-offsetof  -Winvalid-pch @gol\n--Wlarger-than-@var{len}  -Wunsafe-loop-optimizations  -Wlong-long @gol\n+-Wno-int-to-pointer-cast -Wno-invalid-offsetof @gol\n+-Winvalid-pch -Wlarger-than-@var{len}  -Wunsafe-loop-optimizations @gol\n+-Wlogical-op -Wlong-long @gol\n -Wmain  -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-format-attribute  -Wmissing-include-dirs @gol\n -Wmissing-noreturn @gol\n@@ -3420,6 +3420,13 @@ behavior and are not portable in C, so they usually indicate that the\n programmer intended to use @code{strcmp}.  This warning is enabled by\n @option{-Wall}.\n \n+@item -Wlogical-op\n+@opindex Wlogical-op\n+@opindex Wno-logical-op\n+Warn about suspicious uses of logical operators in expressions.\n+This includes using logical operators in contexts where a\n+bit-wise operator is likely to be expected.\n+\n @item -Waggregate-return\n @opindex Waggregate-return\n Warn if any functions that return structures or unions are defined or"}, {"sha": "75d1cff0fa5f2d91a02b426b30e06a55df131b4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -1,3 +1,9 @@\n+2007-03-09  Dirk Mueller  <dmueller@suse.de>\n+\n+\tPR c++/17946\n+\t* gcc.dg/Wlogical-op-1.c: New.\n+\t* g++.dg/warn/Wlogical-op-1.C: New.\n+\n 2007-03-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/30904"}, {"sha": "186f7ab0e7c5f6568f533fbbb9e5ee21fa5c933f", "filename": "gcc/testsuite/g++.dg/warn/Wlogical-op-1.C", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWlogical-op-1.C?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -0,0 +1,92 @@\n+// { dg-do compile}\n+// { dg-options \"-Wlogical-op\" }\n+\n+enum { a, b };\n+\n+enum testenum { t1, t2};\n+\n+extern int c;\n+extern bool bool_a, bool_b;\n+\n+template<typename Enum>\n+class QFlags\n+{\n+public:\n+    typedef void **Zero;\n+    int i;\n+    inline QFlags(Enum f) : i(f) {}\n+\n+    inline operator int() const\n+    { return i;}\n+\n+};\n+\n+QFlags<testenum> f(t2);\n+extern void do_something(int);\n+\n+extern testenum testa();\n+\n+void foo()\n+{\n+    if ( f && b )             // { dg-warning \"always evaluate as\" }\n+          do_something(1);\n+    if ( c && b )             // { dg-warning \"always evaluate as\" }\n+          do_something(2);\n+\n+    if ( b && c == a )        // { dg-bogus \"always evaluate as\" }\n+          do_something(101);\n+    if ( 1 && c )\n+          do_something(102);  // { dg-bogus \"always evaluate as\" }\n+    if ( t2 && b )            // { dg-bogus \"always evaluate as\" }\n+          do_something(103);\n+    if ( true && c == a )     // { dg-bogus \"always evaluate as\" }\n+          do_something(104);\n+    if ( b && true )          // { dg-bogus \"always evaluate as\" }\n+          do_something(105);\n+}\n+// { dg-do compile}\n+// { dg-options \"-Winvariant-expr\" }\n+\n+enum { a, b };\n+\n+enum testenum { t1, t2};\n+\n+extern int c;\n+extern bool bool_a, bool_b;\n+\n+template<typename Enum>\n+class QFlags\n+{\n+public:\n+    typedef void **Zero;\n+    int i;\n+    inline QFlags(Enum f) : i(f) {}\n+\n+    inline operator int() const\n+    { return i;}\n+\n+};\n+\n+QFlags<testenum> f(t2);\n+extern void do_something(int);\n+\n+extern testenum testa();\n+\n+void foo()\n+{\n+    if ( f && b )             // { dg-warning \"always evaluate as\" }\n+          do_something(1);\n+    if ( c && b )             // { dg-warning \"always evaluate as\" }\n+          do_something(2);\n+\n+    if ( b && c == a )        // { dg-bogus \"always evaluate as\" }\n+          do_something(101);\n+    if ( 1 && c )\n+          do_something(102);  // { dg-bogus \"always evaluate as\" }\n+    if ( t2 && b )            // { dg-bogus \"always evaluate as\" }\n+          do_something(103);\n+    if ( true && c == a )     // { dg-bogus \"always evaluate as\" }\n+          do_something(104);\n+    if ( b && true )          // { dg-bogus \"always evaluate as\" }\n+          do_something(105);\n+}"}, {"sha": "154e8f493f5ebd2276eb399f8a2ae0a290d22a56", "filename": "gcc/testsuite/gcc.dg/Wlogical-op-1.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a0874077b3325c2b3cc47401d8bfe916d8f128/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWlogical-op-1.c?ref=63a0874077b3325c2b3cc47401d8bfe916d8f128", "patch": "@@ -0,0 +1,94 @@\n+/*\n+   { dg-do compile}\n+   { dg-options \"-Wlogical-op\" }\n+*/\n+\n+enum { a, ba, b };\n+\n+enum testenum { t1, t2};\n+\n+extern int c;\n+extern char bool_a, bool_b;\n+\n+extern int testa();\n+\n+void foo()\n+{\n+    if ( testa() && b )     /* { dg-warning \"always evaluate as\" } */\n+         (void)testa();\n+\n+    if ( c && b )           /* { dg-warning \"always evaluate as\" } */\n+\t(void)testa();\n+\n+    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n+\t(void)testa();\n+\n+    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n+\t(void) testa();\n+\n+    if ( c && 0x80 >>6)     /* { dg-warning \"always evaluate as\" } */\n+\t(void)testa();\n+\n+\n+    if ( b && c == a )      /* { dg-bogus \"always evaluate as\" } */\n+          (void)testa();\n+\n+    if ( 1 && c )           /* { dg-warning \"always evaluate as\" } */\n+         (void)testa();\n+\n+    if ( t2 && b )          /* { dg-warning \"always evaluate as\" } */\n+          (void)testa();\n+\n+    if ( 0 && c == a )      /* { dg-warning \"always evaluate as\" } */\n+          (void)testa();\n+\n+    if ( b && 1 )           /* { dg-warning \"always evaluate as\" } */\n+          (void)testa();\n+}\n+/*\n+   { dg-do compile}\n+   { dg-options \"-Winvariant-expr\" }\n+*/\n+\n+enum { a, ba, b };\n+\n+enum testenum { t1, t2};\n+\n+extern int c;\n+extern char bool_a, bool_b;\n+\n+extern int testa();\n+\n+void foo()\n+{\n+    if ( testa() && b )     /* { dg-warning \"always evaluate as\" } */\n+         (void)testa();\n+\n+    if ( c && b )           /* { dg-warning \"always evaluate as\" } */\n+\t(void)testa();\n+\n+    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n+\t(void)testa();\n+\n+    if ( c && 0x42 )        /* { dg-warning \"always evaluate as\" } */\n+\t(void) testa();\n+\n+    if ( c && 0x80 >>6)     /* { dg-warning \"always evaluate as\" } */\n+\t(void)testa();\n+\n+\n+    if ( b && c == a )      /* { dg-bogus \"always evaluate as\" } */\n+          (void)testa();\n+\n+    if ( 1 && c )           /* { dg-warning \"always evaluate as\" } */\n+         (void)testa();\n+\n+    if ( t2 && b )          /* { dg-warning \"always evaluate as\" } */\n+          (void)testa();\n+\n+    if ( 0 && c == a )      /* { dg-warning \"always evaluate as\" } */\n+          (void)testa();\n+\n+    if ( b && 1 )           /* { dg-warning \"always evaluate as\" } */\n+          (void)testa();\n+}"}]}