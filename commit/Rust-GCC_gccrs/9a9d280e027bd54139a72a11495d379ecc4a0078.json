{"sha": "9a9d280e027bd54139a72a11495d379ecc4a0078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5ZDI4MGUwMjdiZDU0MTM5YTcyYTExNDk1ZDM3OWVjYzRhMDA3OA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-07-15T18:47:23Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-07-15T18:47:23Z"}, "message": "tree.h (enum tree_index): Add TI_INTEGER_THREE.\n\n\t* tree.h (enum tree_index): Add TI_INTEGER_THREE.\n\t(integer_three_node): Add.\n\t* tree.c (build_common_tree_nodes_2): Use integer_type_node insead of\n\tNULL_TREE in build_int_cst calls. Initialize the integer_three_node.\n\t* builtins.c (expand_builtin_prefetch): Use common tree nodes instead\n\tof call build_int_cst.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Ditto.\n\t* tree-ssa-loop-ivopts.c (idx_find_step): Ditto.\n\t(find_interesting_uses_address): Ditto.\n\t* tree-ssa-alias.c (ao_ref_init_from_ptr_and_size): Ditto.\n\t* tree-eh.c (lower_eh_constructs_2): Ditto.\n\t* tree-vect-loop.c (get_initial_def_for_induction): Ditto.\n\t* c-typeck.c (really_start_incremental_init, push_init_level): Ditto.\n\t* expmed.c (expand_divmod): Ditto.\n\t* tree-mudflap.c (mx_register_decls): Ditto.\n\t* varasm.c (array_size_for_constructor): Ditto.\n\t* tree-ssa-loop-prefetch.c (issue_prefetch_ref): Ditto.\n\t* c-parser.c (c_parser_postfix_expression): Ditto.\n\t\n/cp\n\t* decl.c (integer_three_node): Remove.\n\t(cxx_init_decl_processing): Do not initialize the integer_three_node.\n\t* cp-tree.h (integer_three_node): Remove.\n\nFrom-SVN: r162230", "tree": {"sha": "129e18a2292049e27d6bfd5704a22126bf3b8d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/129e18a2292049e27d6bfd5704a22126bf3b8d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a9d280e027bd54139a72a11495d379ecc4a0078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9d280e027bd54139a72a11495d379ecc4a0078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9d280e027bd54139a72a11495d379ecc4a0078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9d280e027bd54139a72a11495d379ecc4a0078/comments", "author": null, "committer": null, "parents": [{"sha": "67bb020619663c011d6b7ea913fc49fcd7142284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67bb020619663c011d6b7ea913fc49fcd7142284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67bb020619663c011d6b7ea913fc49fcd7142284"}], "stats": {"total": 91, "additions": 57, "deletions": 34}, "files": [{"sha": "1ef39edf1888abb88fbb991d075ee70e7d0cfa23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -1,3 +1,24 @@\n+2010-07-15  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* tree.h (enum tree_index): Add TI_INTEGER_THREE.\n+\t(integer_three_node): Add.\n+\t* tree.c (build_common_tree_nodes_2): Use integer_type_node insead of\n+\tNULL_TREE in build_int_cst calls. Initialize the integer_three_node.\n+\t* builtins.c (expand_builtin_prefetch): Use common tree nodes instead\n+\tof call build_int_cst.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Ditto.\n+\t* tree-ssa-loop-ivopts.c (idx_find_step): Ditto.\n+\t(find_interesting_uses_address): Ditto.\n+\t* tree-ssa-alias.c (ao_ref_init_from_ptr_and_size): Ditto.\n+\t* tree-eh.c (lower_eh_constructs_2): Ditto.\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Ditto.\n+\t* c-typeck.c (really_start_incremental_init, push_init_level): Ditto.\n+\t* expmed.c (expand_divmod): Ditto.\n+\t* tree-mudflap.c (mx_register_decls): Ditto.\n+\t* varasm.c (array_size_for_constructor): Ditto.\n+\t* tree-ssa-loop-prefetch.c (issue_prefetch_ref): Ditto.\n+\t* c-parser.c (c_parser_postfix_expression): Ditto.\n+\n 2010-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* postreload.c (last_label_ruid, first_index_reg, last_index_reg):"}, {"sha": "40327e0e858cfc25911d23e64d60e0dd5a041959", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -1062,7 +1062,7 @@ expand_builtin_prefetch (tree exp)\n   if (nargs > 2)\n     arg2 = CALL_EXPR_ARG (exp, 2);\n   else\n-    arg2 = build_int_cst (NULL_TREE, 3);\n+    arg2 = integer_three_node;\n \n   /* Argument 0 is an address.  */\n   op0 = expand_expr (arg0, NULL_RTX, Pmode, EXPAND_NORMAL);"}, {"sha": "306d46ba65f28491f6bc415cb3edcddc72101d3a", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -5847,9 +5847,8 @@ c_parser_postfix_expression (c_parser *parser)\n \t    e1 = TYPE_MAIN_VARIANT (groktypename (t1, NULL, NULL));\n \t    e2 = TYPE_MAIN_VARIANT (groktypename (t2, NULL, NULL));\n \n-\t    expr.value = comptypes (e1, e2)\n-\t      ? build_int_cst (NULL_TREE, 1)\n-\t      : build_int_cst (NULL_TREE, 0);\n+\t    expr.value\n+\t      = comptypes (e1, e2) ? integer_one_node : integer_zero_node;\n \t  }\n \t  break;\n \tcase RID_AT_SELECTOR:"}, {"sha": "bcbc2968d98c28929376c814cf4a6285382bd966", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -6498,14 +6498,14 @@ really_start_incremental_init (tree type)\n \t  /* Detect non-empty initializations of zero-length arrays.  */\n \t  if (constructor_max_index == NULL_TREE\n \t      && TYPE_SIZE (constructor_type))\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n+\t    constructor_max_index = integer_minus_one_node;\n \n \t  /* constructor_max_index needs to be an INTEGER_CST.  Attempts\n \t     to initialize VLAs will cause a proper error; avoid tree\n \t     checking errors as well by setting a safe value.  */\n \t  if (constructor_max_index\n \t      && TREE_CODE (constructor_max_index) != INTEGER_CST)\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n+\t    constructor_max_index = integer_minus_one_node;\n \n \t  constructor_index\n \t    = convert (bitsizetype,\n@@ -6706,14 +6706,14 @@ push_init_level (int implicit, struct obstack * braced_init_obstack)\n \t  /* Detect non-empty initializations of zero-length arrays.  */\n \t  if (constructor_max_index == NULL_TREE\n \t      && TYPE_SIZE (constructor_type))\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n+\t    constructor_max_index = integer_minus_one_node;\n \n \t  /* constructor_max_index needs to be an INTEGER_CST.  Attempts\n \t     to initialize VLAs will cause a proper error; avoid tree\n \t     checking errors as well by setting a safe value.  */\n \t  if (constructor_max_index\n \t      && TREE_CODE (constructor_max_index) != INTEGER_CST)\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n+\t    constructor_max_index = integer_minus_one_node;\n \n \t  constructor_index\n \t    = convert (bitsizetype,"}, {"sha": "e03ca757a40caec7646df170fb8020c299f56c7d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -1,3 +1,9 @@\n+2010-07-15  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* decl.c (integer_three_node): Remove.\n+\t(cxx_init_decl_processing): Do not initialize the integer_three_node.\n+\t* cp-tree.h (integer_three_node): Remove.\n+\n 2010-07-15  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* cp-tree.h: Carefully replace TREE_CHAIN with DECL_CHAIN."}, {"sha": "d5b01610acd881e8fa54d990d5c1462faafc2755", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -4006,7 +4006,6 @@ typedef enum base_kind {\n \n /* For building calls to `delete'.  */\n extern GTY(()) tree integer_two_node;\n-extern GTY(()) tree integer_three_node;\n \n /* The number of function bodies which we are currently processing.\n    (Zero if we are at namespace scope, one inside the body of a"}, {"sha": "5d07956554e65674374ac2b44972062dedd66bdd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -169,9 +169,9 @@ tree static_aggregates;\n \n /* -- end of C++ */\n \n-/* A node for the integer constants 2, and 3.  */\n+/* A node for the integer constant 2.  */\n \n-tree integer_two_node, integer_three_node;\n+tree integer_two_node;\n \n /* Used only for jumps to as-yet undefined labels, since jumps to\n    defined labels can have their validity checked immediately.  */\n@@ -3439,7 +3439,6 @@ cxx_init_decl_processing (void)\n   java_boolean_type_node = record_builtin_java_type (\"__java_boolean\", -1);\n \n   integer_two_node = build_int_cst (NULL_TREE, 2);\n-  integer_three_node = build_int_cst (NULL_TREE, 3);\n \n   record_builtin_type (RID_BOOL, \"bool\", boolean_type_node);\n   truthvalue_type_node = boolean_type_node;"}, {"sha": "ddace9f2e3929c2ae392dc35e5c2932397408176", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -4064,10 +4064,8 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t    t2 = force_operand (gen_rtx_MINUS (compute_mode,\n \t\t\t\t\t\t\t       op0, t1),\n \t\t\t\t\t\tNULL_RTX);\n-\t\t\t    t3 = expand_shift\n-\t\t\t      (RSHIFT_EXPR, compute_mode, t2,\n-\t\t\t       build_int_cst (NULL_TREE, 1),\n-\t\t\t       NULL_RTX,1);\n+\t\t\t    t3 = expand_shift (RSHIFT_EXPR, compute_mode, t2,\n+\t\t\t\t\t       integer_one_node, NULL_RTX, 1);\n \t\t\t    t4 = force_operand (gen_rtx_PLUS (compute_mode,\n \t\t\t\t\t\t\t      t1, t3),\n \t\t\t\t\t\tNULL_RTX);\n@@ -4751,8 +4749,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t      }\n \t    tem = plus_constant (op1, -1);\n \t    tem = expand_shift (RSHIFT_EXPR, compute_mode, tem,\n-\t\t\t\tbuild_int_cst (NULL_TREE, 1),\n-\t\t\t\tNULL_RTX, 1);\n+\t\t\t\tinteger_one_node, NULL_RTX, 1);\n \t    do_cmp_and_jump (remainder, tem, LEU, compute_mode, label);\n \t    expand_inc (quotient, const1_rtx);\n \t    expand_dec (remainder, op1);\n@@ -4777,8 +4774,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t    abs_rem = expand_abs (compute_mode, remainder, NULL_RTX, 1, 0);\n \t    abs_op1 = expand_abs (compute_mode, op1, NULL_RTX, 1, 0);\n \t    tem = expand_shift (LSHIFT_EXPR, compute_mode, abs_rem,\n-\t\t\t\tbuild_int_cst (NULL_TREE, 1),\n-\t\t\t\tNULL_RTX, 1);\n+\t\t\t\tinteger_one_node, NULL_RTX, 1);\n \t    do_cmp_and_jump (tem, abs_op1, LTU, compute_mode, label);\n \t    tem = expand_binop (compute_mode, xor_optab, op0, op1,\n \t\t\t\tNULL_RTX, 0, OPTAB_WIDEN);"}, {"sha": "ab501d5e0a63bbd3f330dfdd40a3c7c4f8760c81", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -1877,7 +1877,7 @@ lower_eh_constructs_2 (struct leh_state *state, gimple_stmt_iterator *gsi)\n \t      else\n \t\t{\n \t\t  /* The user has dome something silly.  Remove it.  */\n-\t\t  rhs = build_int_cst (ptr_type_node, 0);\n+\t\t  rhs = null_pointer_node;\n \t\t  goto do_replace;\n \t\t}\n \t      break;"}, {"sha": "99c5bce1726cad43232514cee1ce193a418eb369", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -1074,7 +1074,7 @@ mx_register_decls (tree decl, gimple_seq seq, location_t location)\n           unregister_fncall = gimple_build_call (mf_unregister_fndecl, 3,\n \t\t\t\t\t\t unregister_fncall_param,\n \t\t\t\t\t\t size,\n-\t\t\t\t\t\t build_int_cst (NULL_TREE, 3));\n+\t\t\t\t\t\t integer_three_node);\n \n \n           variable_name = mf_varname_tree (decl);\n@@ -1087,7 +1087,7 @@ mx_register_decls (tree decl, gimple_seq seq, location_t location)\n \t  register_fncall = gimple_build_call (mf_register_fndecl, 4,\n \t\t\t\t\t       register_fncall_param,\n \t\t\t\t\t       size,\n-\t\t\t\t\t       build_int_cst (NULL_TREE, 3),\n+\t\t\t\t\t       integer_three_node,\n \t\t\t\t\t       variable_name);\n \n "}, {"sha": "a95d78caca1824e8fead42f7f5a50707ab9132a0", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -517,7 +517,7 @@ ao_ref_init_from_ptr_and_size (ao_ref *ref, tree ptr, tree size)\n   else\n     {\n       ref->base = build2 (MEM_REF, char_type_node,\n-\t\t\t  ptr, build_int_cst (ptr_type_node, 0));\n+\t\t\t  ptr, null_pointer_node);\n       ref->offset = 0;\n     }\n   if (size"}, {"sha": "5f2c6ae0eb80ec6cd783fed62c17818e738f02c4", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -1418,7 +1418,7 @@ idx_find_step (tree base, tree *idx, void *data)\n     }\n   else\n     /* The step for pointer arithmetics already is 1 byte.  */\n-    step = build_int_cst (sizetype, 1);\n+    step = size_one_node;\n \n   iv_base = iv->base;\n   iv_step = iv->step;\n@@ -1611,7 +1611,7 @@ may_be_nonaddressable_p (tree expr)\n static void\n find_interesting_uses_address (struct ivopts_data *data, gimple stmt, tree *op_p)\n {\n-  tree base = *op_p, step = build_int_cst (sizetype, 0);\n+  tree base = *op_p, step = size_zero_node;\n   struct iv *civ;\n   struct ifs_ivopts_data ifs_ivopts_data;\n \n@@ -1669,7 +1669,7 @@ find_interesting_uses_address (struct ivopts_data *data, gimple stmt, tree *op_p\n     {\n       ifs_ivopts_data.ivopts_data = data;\n       ifs_ivopts_data.stmt = stmt;\n-      ifs_ivopts_data.step = build_int_cst (sizetype, 0);\n+      ifs_ivopts_data.step = size_zero_node;\n       if (!for_each_index (&base, idx_find_step, &ifs_ivopts_data)\n \t  || integer_zerop (ifs_ivopts_data.step))\n \tgoto fail;"}, {"sha": "a5b511262f9ed9064ac60359aac4cdf00667af8b", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -1083,7 +1083,7 @@ issue_prefetch_ref (struct mem_ref *ref, unsigned unroll_factor, unsigned ahead)\n   addr_base = force_gimple_operand_gsi (&bsi, unshare_expr (addr_base),\n \t\t\t\t\ttrue, NULL, true, GSI_SAME_STMT);\n   write_p = ref->write_p ? integer_one_node : integer_zero_node;\n-  local = build_int_cst (integer_type_node, nontemporal ? 0 : 3);\n+  local = nontemporal ? integer_zero_node : integer_three_node;\n \n   for (ap = 0; ap < n_prefetches; ap++)\n     {"}, {"sha": "8eafd9b9821829a35640f4b25fa6dd538392bd3f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -564,7 +564,7 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n \n       base = TMR_SYMBOL (ref) ? TMR_SYMBOL (ref) : TMR_BASE (ref);\n       if (!base)\n-\tbase = build_int_cst (ptr_type_node, 0);\n+\tbase = null_pointer_node;\n \n       memset (&temp, 0, sizeof (temp));\n       /* We do not care for spurious type qualifications.  */"}, {"sha": "49a8721c55d4f5c5de9f2f012c265f6763d43f2c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -2608,7 +2608,7 @@ get_initial_def_for_induction (gimple iv_phi)\n   if (INTEGRAL_TYPE_P (scalar_type))\n     step_expr = build_int_cst (scalar_type, 0);\n   else if (POINTER_TYPE_P (scalar_type))\n-    step_expr = build_int_cst (sizetype, 0);\n+    step_expr = size_zero_node;\n   else\n     step_expr = build_real (scalar_type, dconst0);\n "}, {"sha": "5726ca427ced4e3944551d48019b2a305b96d34c", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -8969,9 +8969,10 @@ void\n build_common_tree_nodes_2 (int short_double)\n {\n   /* Define these next since types below may used them.  */\n-  integer_zero_node = build_int_cst (NULL_TREE, 0);\n-  integer_one_node = build_int_cst (NULL_TREE, 1);\n-  integer_minus_one_node = build_int_cst (NULL_TREE, -1);\n+  integer_zero_node = build_int_cst (integer_type_node, 0);\n+  integer_one_node = build_int_cst (integer_type_node, 1);\n+  integer_three_node = build_int_cst (integer_type_node, 3);\n+  integer_minus_one_node = build_int_cst (integer_type_node, -1);\n \n   size_zero_node = size_int (0);\n   size_one_node = size_int (1);"}, {"sha": "3c0806e4e3aade337213f60fef6dbe3852b7824b", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -3515,6 +3515,7 @@ enum tree_index\n \n   TI_INTEGER_ZERO,\n   TI_INTEGER_ONE,\n+  TI_INTEGER_THREE,\n   TI_INTEGER_MINUS_ONE,\n   TI_NULL_POINTER,\n \n@@ -3669,6 +3670,7 @@ extern GTY(()) tree global_trees[TI_MAX];\n \n #define integer_zero_node\t\tglobal_trees[TI_INTEGER_ZERO]\n #define integer_one_node\t\tglobal_trees[TI_INTEGER_ONE]\n+#define integer_three_node              global_trees[TI_INTEGER_THREE]\n #define integer_minus_one_node\t\tglobal_trees[TI_INTEGER_MINUS_ONE]\n #define size_zero_node\t\t\tglobal_trees[TI_SIZE_ZERO]\n #define size_one_node\t\t\tglobal_trees[TI_SIZE_ONE]"}, {"sha": "9a4c193e2e76bbfcdf1d10b8258c7687d8773397", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9d280e027bd54139a72a11495d379ecc4a0078/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9a9d280e027bd54139a72a11495d379ecc4a0078", "patch": "@@ -4908,7 +4908,7 @@ array_size_for_constructor (tree val)\n   tmp = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (val)));\n   i = size_binop (MINUS_EXPR, fold_convert (sizetype, max_index),\n \t\t  fold_convert (sizetype, tmp));\n-  i = size_binop (PLUS_EXPR, i, build_int_cst (sizetype, 1));\n+  i = size_binop (PLUS_EXPR, i, size_one_node);\n \n   /* Multiply by the array element unit size to find number of bytes.  */\n   i = size_binop (MULT_EXPR, i, TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (val))));"}]}