{"sha": "28d18db363050e2e8122d202cd59d131a3ffa167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkMThkYjM2MzA1MGUyZTgxMjJkMjAyY2Q1OWQxMzFhM2ZmYTE2Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-09-25T03:28:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-09-25T03:28:06Z"}, "message": "compiler: don't permit nil assignment to blank identifier.\n\nFixes https://code.google.com/p/go/issues/detail?id=6005.\n\nFrom-SVN: r202881", "tree": {"sha": "6cadfca1790ee7591d7dc8676991f00011e27f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cadfca1790ee7591d7dc8676991f00011e27f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d18db363050e2e8122d202cd59d131a3ffa167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d18db363050e2e8122d202cd59d131a3ffa167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d18db363050e2e8122d202cd59d131a3ffa167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d18db363050e2e8122d202cd59d131a3ffa167/comments", "author": null, "committer": null, "parents": [{"sha": "6a9502fdf909ec3fbda5f42b6963f726c8cab4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9502fdf909ec3fbda5f42b6963f726c8cab4ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9502fdf909ec3fbda5f42b6963f726c8cab4ed"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "befe4bc7d836462e0871aaa6ec110306e74b6fa3", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d18db363050e2e8122d202cd59d131a3ffa167/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d18db363050e2e8122d202cd59d131a3ffa167/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=28d18db363050e2e8122d202cd59d131a3ffa167", "patch": "@@ -1940,12 +1940,9 @@ Parse::init_var(const Typed_identifier& tid, Type* type, Expression* init,\n \t{\n \t  if (this->gogo_->in_global_scope())\n \t    return this->create_dummy_global(type, init, location);\n-\t  else if (type == NULL)\n-\t    this->gogo_->add_statement(Statement::make_statement(init, true));\n \t  else\n \t    {\n-\t      // With both a type and an initializer, create a dummy\n-\t      // variable so that we will check whether the\n+\t      // Create a dummy variable so that we will check whether the\n \t      // initializer can be assigned to the type.\n \t      Variable* var = new Variable(type, init, false, false, false,\n \t\t\t\t\t   location);"}, {"sha": "a5102c0c450546d812b4a5f7bf43aba5eb77199d", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d18db363050e2e8122d202cd59d131a3ffa167/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d18db363050e2e8122d202cd59d131a3ffa167/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=28d18db363050e2e8122d202cd59d131a3ffa167", "patch": "@@ -594,6 +594,15 @@ Assignment_statement::do_check_types(Gogo*)\n \n   Type* lhs_type = this->lhs_->type();\n   Type* rhs_type = this->rhs_->type();\n+\n+  // Invalid assignment of nil to the blank identifier.\n+  if (lhs_type->is_sink_type()\n+      && rhs_type->is_nil_type())\n+    {\n+      this->report_error(_(\"use of untyped nil\"));\n+      return;\n+    }\n+\n   std::string reason;\n   bool ok;\n   if (this->are_hidden_fields_ok_)\n@@ -975,7 +984,10 @@ Tuple_assignment_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n \n       if ((*plhs)->is_sink_expression())\n \t{\n-\t  b->add_statement(Statement::make_statement(*prhs, true));\n+          if ((*prhs)->type()->is_nil_type())\n+            this->report_error(_(\"use of untyped nil\"));\n+          else\n+            b->add_statement(Statement::make_statement(*prhs, true));\n \t  continue;\n \t}\n "}]}