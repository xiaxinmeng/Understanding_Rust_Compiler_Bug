{"sha": "fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNjOWZlMWU2YTNjZTJlMGFmMzE4ZmMzOTg4NDU2NjczZGZhMDIzOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-12T20:29:37Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-12T20:29:37Z"}, "message": "sse.md (*sse_concatv4sf): Renamed to ...\n\ngcc/\n\n2008-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/sse.md (*sse_concatv4sf): Renamed to ...\n\t(*vec_concatv4sf_sse): This.\n\t(*sse2_concatv2si): Renamed to ...\n\t(*vec_concatv2si_sse2): This.\n\t(*sse1_concatv2si): Renamed to ...\n\t(*vec_concatv2si_sse): This.\n\t(*vec_concatv2di_rex): Renamed to ...\n\t(*vec_concatv2di_rex64): This.\n\t(*vec_concatv2si_sse4_1): New.\n\t(*vec_concatv2di_rex64_sse4_1): Likewise.\n\ngcc/testsuite\n\n2008-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/sse2-set-epi32-1.c: New.\n\t* gcc.target/i386/sse2-set-epi64x-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-set-epi32-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-set-epi64x-1.c: Likewise.\n\nFrom-SVN: r135229", "tree": {"sha": "88cf2f625e878d35dc519c6ca620c0a47f43040b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88cf2f625e878d35dc519c6ca620c0a47f43040b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "162bfc7efa6dd23a317147f89c557a709488b78b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162bfc7efa6dd23a317147f89c557a709488b78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162bfc7efa6dd23a317147f89c557a709488b78b"}], "stats": {"total": 220, "additions": 215, "deletions": 5}, "files": [{"sha": "bcf6c64b6a3d2f88bcef87e7c064db97156d23ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "patch": "@@ -1,3 +1,16 @@\n+2008-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/sse.md (*sse_concatv4sf): Renamed to ...\n+\t(*vec_concatv4sf_sse): This.\n+\t(*sse2_concatv2si): Renamed to ...\n+\t(*vec_concatv2si_sse2): This.\n+\t(*sse1_concatv2si): Renamed to ...\n+\t(*vec_concatv2si_sse): This.\n+\t(*vec_concatv2di_rex): Renamed to ...\n+\t(*vec_concatv2di_rex64): This.\n+\t(*vec_concatv2si_sse4_1): New.\n+\t(*vec_concatv2di_rex64_sse4_1): Likewise.\n+\n 2008-05-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/36111"}, {"sha": "983ffcf6c466f51ad987691095b91dfba46c0a41", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "patch": "@@ -2253,7 +2253,7 @@\n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n-(define_insn \"*sse_concatv2sf\"\n+(define_insn \"*vec_concatv2sf_sse\"\n   [(set (match_operand:V2SF 0 \"register_operand\"     \"=x,x,*y,*y\")\n \t(vec_concat:V2SF\n \t  (match_operand:SF 1 \"nonimmediate_operand\" \" 0,m, 0, m\")\n@@ -2267,7 +2267,7 @@\n   [(set_attr \"type\" \"sselog,ssemov,mmxcvt,mmxmov\")\n    (set_attr \"mode\" \"V4SF,SF,DI,DI\")])\n \n-(define_insn \"*sse_concatv4sf\"\n+(define_insn \"*vec_concatv4sf_sse\"\n   [(set (match_operand:V4SF 0 \"register_operand\"   \"=x,x\")\n \t(vec_concat:V4SF\n \t  (match_operand:V2SF 1 \"register_operand\" \" 0,0\")\n@@ -4726,10 +4726,22 @@\n   [(set_attr \"type\" \"sselog1,ssemov\")\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n+(define_insn \"*vec_concatv2si_sse4_1\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=x,x\")\n+\t(vec_concat:V2SI\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm\")\n+\t  (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")))]\n+  \"TARGET_SSE4_1\"\n+  \"@\n+  pinsrd\\t{$0x1, %2, %0|%0, %2, 0x1}\n+  pinsrd\\t{$0x0, %2, %0|%0, %2, 0x0}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n-(define_insn \"*sse2_concatv2si\"\n+(define_insn \"*vec_concatv2si_sse2\"\n   [(set (match_operand:V2SI 0 \"register_operand\"     \"=Y2, Y2,*y,*y\")\n \t(vec_concat:V2SI\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0 ,rm , 0,rm\")\n@@ -4743,7 +4755,7 @@\n   [(set_attr \"type\" \"sselog,ssemov,mmxcvt,mmxmov\")\n    (set_attr \"mode\" \"TI,TI,DI,DI\")])\n \n-(define_insn \"*sse1_concatv2si\"\n+(define_insn \"*vec_concatv2si_sse\"\n   [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x,*y,*y\")\n \t(vec_concat:V2SI\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0,m, 0,*rm\")\n@@ -4770,6 +4782,18 @@\n   [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n    (set_attr \"mode\" \"TI,V4SF,V2SF\")])\n \n+(define_insn \"*vec_concatv2di_rex64_sse4_1\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+\t(vec_concat:V2DI\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \"0,rm\")\n+\t  (match_operand:DI 2 \"nonimmediate_operand\" \"rm,0\")))]\n+  \"TARGET_64BIT && TARGET_SSE4_1\"\n+  \"@\n+  pinsrq\\t{$0x1, %2, %0|%0, %2, 0x1}\n+  pinsrq\\t{$0x0, %2, %0|%0, %2, 0x0}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,?Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n@@ -4786,7 +4810,7 @@\n   [(set_attr \"type\" \"ssemov,ssemov,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"mode\" \"TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n-(define_insn \"*vec_concatv2di_rex\"\n+(define_insn \"*vec_concatv2di_rex64\"\n   [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,Yi,!Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,r ,*y ,0 ,0,0,m\")"}, {"sha": "755d6832a89fc623ac424c6394882bc543669353", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "patch": "@@ -1,3 +1,10 @@\n+2008-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/sse2-set-epi32-1.c: New.\n+\t* gcc.target/i386/sse2-set-epi64x-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-epi32-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-epi64x-1.c: Likewise.\n+\n 2008-05-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/36111"}, {"sha": "f4dac40fc999764f581782529a4942946d2006e8", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-epi32-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi32-1.c?ref=fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned int *v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } u;\n+  unsigned int i;\n+  \n+  u.x = _mm_set_epi32 (v[3], v[2], v[1], v[0]);\n+\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != u.i[i])\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  unsigned int v[4]\n+    = { 0x7B5B5465, 0x73745665, 0x63746F72, 0x5D53475D };\n+  test (v);\n+}"}, {"sha": "67510b59c7edeb49a7209311656925c4c1685146", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-epi64x-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi64x-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi64x-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-epi64x-1.c?ref=fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned long long *v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned long long i[2];\n+    } u;\n+  unsigned int i;\n+  \n+  u.x = _mm_set_epi64x (v[1], v[0]);\n+\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != u.i[i])\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%llx != 0x%llx\\n\", i, v[i], u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  unsigned long long v[2]\n+    = { 0x7B5B546573745665LL, 0x63746F725D53475DLL };\n+  test (v);\n+}"}, {"sha": "989e4f7086f738fa230215d80d2a9da1c11bad91", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-epi32-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi32-1.c?ref=fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned int *v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } u;\n+  unsigned int i;\n+  \n+  u.x = _mm_set_epi32 (v[3], v[2], v[1], v[0]);\n+\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != u.i[i])\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  unsigned int v[4]\n+    = { 0x7B5B5465, 0x73745665, 0x63746F72, 0x5D53475D };\n+  test (v);\n+}"}, {"sha": "8679f52860f85c72e310dcc2602f19274e99cc88", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-epi64x-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi64x-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc9fe1e6a3ce2e0af318fc3988456673dfa0239/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi64x-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-epi64x-1.c?ref=fcc9fe1e6a3ce2e0af318fc3988456673dfa0239", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned long long *v)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned long long i[2];\n+    } u;\n+  unsigned int i;\n+  \n+  u.x = _mm_set_epi64x (v[1], v[0]);\n+\n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (v[i] != u.i[i])\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%llx != 0x%llx\\n\", i, v[i], u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  unsigned long long v[2]\n+    = { 0x7B5B546573745665LL, 0x63746F725D53475DLL };\n+  test (v);\n+}"}]}