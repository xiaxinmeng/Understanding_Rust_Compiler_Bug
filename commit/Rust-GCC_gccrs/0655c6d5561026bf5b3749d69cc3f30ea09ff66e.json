{"sha": "0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1NWM2ZDU1NjEwMjZiZjViMzc0OWQ2OWNjM2YzMGVhMDlmZjY2ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-01-19T14:37:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-01-19T14:37:51Z"}, "message": "PR c++/79130 - decomposition and direct-initialization\n\n\t* init.c (build_aggr_init): Communicate direct-initialization to\n\tbuild_vec_init.\n\t(build_vec_init): Check for array copy sooner.\n\t* parser.c (cp_parser_decomposition_declaration): Remove call to\n\tbuild_x_compound_expr_from_list.\n\nFrom-SVN: r244635", "tree": {"sha": "c4542bd3a072177016e813d586013c4b67e40f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4542bd3a072177016e813d586013c4b67e40f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "332429c807f56de7948885368277723a7a5ac0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332429c807f56de7948885368277723a7a5ac0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332429c807f56de7948885368277723a7a5ac0ac"}], "stats": {"total": 99, "additions": 76, "deletions": 23}, "files": [{"sha": "5b8eb7c891af409f816f08f0b623994b0e19030d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "patch": "@@ -1,3 +1,12 @@\n+2017-01-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79130 - decomposition and direct-initialization\n+\t* init.c (build_aggr_init): Communicate direct-initialization to\n+\tbuild_vec_init.\n+\t(build_vec_init): Check for array copy sooner.\n+\t* parser.c (cp_parser_decomposition_declaration): Remove call to\n+\tbuild_x_compound_expr_from_list.\n+\n 2017-01-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68666 - member variable template-id"}, {"sha": "15388b1426440a6b3093e0b238a26093fede28ce", "filename": "gcc/cp/init.c", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "patch": "@@ -1574,20 +1574,24 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n   TREE_READONLY (exp) = 0;\n   TREE_THIS_VOLATILE (exp) = 0;\n \n-  if (init && init != void_type_node\n-      && TREE_CODE (init) != TREE_LIST\n-      && !(TREE_CODE (init) == TARGET_EXPR\n-\t   && TARGET_EXPR_DIRECT_INIT_P (init))\n-      && !DIRECT_LIST_INIT_P (init))\n-    flags |= LOOKUP_ONLYCONVERTING;\n-\n   if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n       tree itype = init ? TREE_TYPE (init) : NULL_TREE;\n       int from_array = 0;\n \n       if (VAR_P (exp) && DECL_DECOMPOSITION_P (exp))\n-\tfrom_array = 1;\n+\t{\n+\t  from_array = 1;\n+\t  if (init && DECL_P (init)\n+\t      && !(flags & LOOKUP_ONLYCONVERTING))\n+\t    {\n+\t      /* Wrap the initializer in a CONSTRUCTOR so that build_vec_init\n+\t\t recognizes it as direct-initialization.  */\n+\t      init = build_constructor_single (init_list_type_node,\n+\t\t\t\t\t       NULL_TREE, init);\n+\t      CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n+\t    }\n+\t}\n       else\n \t{\n \t  /* An array may not be initialized use the parenthesized\n@@ -1621,6 +1625,13 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n       return stmt_expr;\n     }\n \n+  if (init && init != void_type_node\n+      && TREE_CODE (init) != TREE_LIST\n+      && !(TREE_CODE (init) == TARGET_EXPR\n+\t   && TARGET_EXPR_DIRECT_INIT_P (init))\n+      && !DIRECT_LIST_INIT_P (init))\n+    flags |= LOOKUP_ONLYCONVERTING;\n+\n   if ((VAR_P (exp) || TREE_CODE (exp) == PARM_DECL)\n       && !lookup_attribute (\"warn_unused\", TYPE_ATTRIBUTES (type)))\n     /* Just know that we've seen something for this node.  */\n@@ -3825,6 +3836,18 @@ build_vec_init (tree base, tree maxindex, tree init,\n       && from_array != 2)\n     init = TARGET_EXPR_INITIAL (init);\n \n+  bool direct_init = false;\n+  if (from_array && init && BRACE_ENCLOSED_INITIALIZER_P (init)\n+      && CONSTRUCTOR_NELTS (init) == 1)\n+    {\n+      tree elt = CONSTRUCTOR_ELT (init, 0)->value;\n+      if (TREE_CODE (TREE_TYPE (elt)) == ARRAY_TYPE)\n+\t{\n+\t  direct_init = DIRECT_LIST_INIT_P (init);\n+\t  init = elt;\n+\t}\n+    }\n+\n   /* If we have a braced-init-list, make sure that the array\n      is big enough for all the initializers.  */\n   bool length_check = (init && TREE_CODE (init) == CONSTRUCTOR\n@@ -3905,18 +3928,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n   base = get_temp_regvar (ptype, rval);\n   iterator = get_temp_regvar (ptrdiff_type_node, maxindex);\n \n-  bool direct_init = false;\n-  if (from_array && init && BRACE_ENCLOSED_INITIALIZER_P (init)\n-      && CONSTRUCTOR_NELTS (init) == 1)\n-    {\n-      tree elt = CONSTRUCTOR_ELT (init, 0)->value;\n-      if (TREE_CODE (TREE_TYPE (elt)) == ARRAY_TYPE)\n-\t{\n-\t  direct_init = DIRECT_LIST_INIT_P (init);\n-\t  init = elt;\n-\t}\n-    }\n-\n   /* If initializing one array from another, initialize element by\n      element.  We rely upon the below calls to do the argument\n      checking.  Evaluate the initializer before entering the try block.  */"}, {"sha": "29dcfea283fa3f6aa2b51db50a4afad4cc80f9ce", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "patch": "@@ -13026,9 +13026,6 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n       *init_loc = cp_lexer_peek_token (parser->lexer)->location;\n       tree initializer = cp_parser_initializer (parser, &is_direct_init,\n \t\t\t\t\t\t&non_constant_p);\n-      if (TREE_CODE (initializer) == TREE_LIST)\n-\tinitializer = build_x_compound_expr_from_list (initializer, ELK_INIT,\n-\t\t\t\t\t\t       tf_warning_or_error);\n \n       if (decl != error_mark_node)\n \t{"}, {"sha": "7a8a239d9e17c952be26c12a31121d0ae838c3c5", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp6.C", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0655c6d5561026bf5b3749d69cc3f30ea09ff66e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp6.C?ref=0655c6d5561026bf5b3749d69cc3f30ea09ff66e", "patch": "@@ -89,4 +89,40 @@ main ()\n   }\n   if (ccnt != 12 || dcnt != 24 || cccnt != 6 || tccnt != 6)\n     __builtin_abort ();\n+\n+  {\n+    A a[6];\n+    if (ccnt != 18 || dcnt != 24 || cccnt != 6 || tccnt != 6)\n+      __builtin_abort ();\n+    {\n+      auto [b,c,d,e,f,g] ( a );\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+      if (ccnt != 18 || dcnt != 24 || cccnt != 12 || tccnt != 6)\n+\t__builtin_abort ();\n+      b.a++;\n+      c.a += 2;\n+      f.a += 3;\n+      if (b.a != 7 || c.a != 8 || d.a != 6 || e.a != 6 || f.a != 9 || g.a != 6)\n+\t__builtin_abort ();\n+      if (&b == &a[0] || &c == &a[1] || &d == &a[2] || &e == &a[3] || &f == &a[4] || &g == &a[5])\n+\t__builtin_abort ();\n+      {\n+\tauto&[ h, i, j, k, l, m ] (a);\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+\tif (ccnt != 18 || dcnt != 24 || cccnt != 12 || tccnt != 6)\n+\t  __builtin_abort ();\n+\tj.a += 4;\n+\tk.a += 5;\n+\tm.a += 6;\n+\tif (a[0].a != 6 || a[1].a != 6 || a[2].a != 10 || a[3].a != 11 || a[4].a != 6 || a[5].a != 12)\n+\t  __builtin_abort ();\n+\tif (&h != &a[0] || &i != &a[1] || &j != &a[2] || &k != &a[3] || &l != &a[4] || &m != &a[5])\n+\t  __builtin_abort ();\n+      }\n+      if (ccnt != 18 || dcnt != 24 || cccnt != 12 || tccnt != 6)\n+\t__builtin_abort ();\n+    }\n+    if (ccnt != 18 || dcnt != 30 || cccnt != 12 || tccnt != 6)\n+      __builtin_abort ();\n+  }\n+  if (ccnt != 18 || dcnt != 36 || cccnt != 12 || tccnt != 6)\n+    __builtin_abort ();\n }"}]}