{"sha": "e3a771613feb915111421ff10f29937aee88c452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhNzcxNjEzZmViOTE1MTExNDIxZmYxMGYyOTkzN2FlZTg4YzQ1Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-21T22:15:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-21T22:15:32Z"}, "message": "(preserve_temp_slots): If argument is REG, see if it is address of a\ntemp slot we know about.\n\nFrom-SVN: r6843", "tree": {"sha": "9db21cf638d2bc7718fc44129058eb0f8d47b459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db21cf638d2bc7718fc44129058eb0f8d47b459"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a771613feb915111421ff10f29937aee88c452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a771613feb915111421ff10f29937aee88c452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a771613feb915111421ff10f29937aee88c452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a771613feb915111421ff10f29937aee88c452/comments", "author": null, "committer": null, "parents": [{"sha": "987c71d9bcf5f1211dfde6e515d8a35675ca5983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987c71d9bcf5f1211dfde6e515d8a35675ca5983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987c71d9bcf5f1211dfde6e515d8a35675ca5983"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "8726afb2a65306f0aea9365cef733497a6ee5ff2", "filename": "gcc/function.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a771613feb915111421ff10f29937aee88c452/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a771613feb915111421ff10f29937aee88c452/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e3a771613feb915111421ff10f29937aee88c452", "patch": "@@ -946,9 +946,23 @@ preserve_temp_slots (x)\n {\n   struct temp_slot *p;\n \n+  if (x == 0)\n+    return;\n+\n+  /* If X is a register that is being used as a pointer, see if we have\n+     a temporary slot we know it points to.  To be consistent with\n+     the code below, we really should preserve all non-kept slots\n+     if we can't find a match, but that seems to be much too costly.  */\n+  if (GET_CODE (x) == REG && REGNO_POINTER_FLAG (REGNO (x))\n+      && (p = find_temp_slot_from_address (x)) != 0)\n+    {\n+      p->level--;\n+      return;\n+    }\n+    \n   /* If X is not in memory or is at a constant address, it cannot be in\n      a temporary slot.  */\n-  if (x == 0 || GET_CODE (x) != MEM || CONSTANT_P (XEXP (x, 0)))\n+  if (GET_CODE (x) != MEM || CONSTANT_P (XEXP (x, 0)))\n     return;\n \n   /* First see if we can find a match.  */"}]}