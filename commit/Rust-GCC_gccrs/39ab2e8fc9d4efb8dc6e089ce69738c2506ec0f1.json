{"sha": "39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlhYjJlOGZjOWQ0ZWZiOGRjNmUwODljZTY5NzM4YzI1MDZlYzBmMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2010-10-26T13:06:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T13:06:34Z"}, "message": "utils2.c (build_compound_expr): New function.\n\n2010-10-26  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n\t* gcc-interface/utils2.c (build_compound_expr): New function.\n\t* gcc-interface/gigi.h (build_compound_expr): Declare it.\n\t* gcc-interface/trans.c (Attribute_to_gnu, call_to_gnu): Use it.\n\t(gnat_to_gnu, case N_Expression_With_Actions): Likewise.\n\nFrom-SVN: r165958", "tree": {"sha": "918558abb492cdf41d6ea2d511b9d54ff79e2d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/918558abb492cdf41d6ea2d511b9d54ff79e2d0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/comments", "author": null, "committer": null, "parents": [{"sha": "0592046e2397a7206383190f84017e9bbe1dd7bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0592046e2397a7206383190f84017e9bbe1dd7bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0592046e2397a7206383190f84017e9bbe1dd7bc"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "8ff1ac6a8c585b19ba06c7a2bfb66950e94bb89f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "patch": "@@ -1,3 +1,10 @@\n+2010-10-26  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* gcc-interface/utils2.c (build_compound_expr): New function.\n+\t* gcc-interface/gigi.h (build_compound_expr): Declare it.\n+\t* gcc-interface/trans.c (Attribute_to_gnu, call_to_gnu): Use it.\n+\t(gnat_to_gnu, case N_Expression_With_Actions): Likewise. \n+\n 2010-10-26  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_prag.adb (Process_Import_Or_Interface): Skip primitives of"}, {"sha": "36966f96d5e39d62b9335e55d9d54386c46dc9a0", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "patch": "@@ -777,6 +777,11 @@ extern tree build_unary_op (enum tree_code op_code, tree result_type,\n extern tree build_cond_expr (tree result_type, tree condition_operand,\n                              tree true_operand, tree false_operand);\n \n+/* Similar, but for COMPOUND_EXPR.  */\n+\n+extern tree build_compound_expr (tree result_type, tree stmt_operand,\n+\t\t\t\t tree expr_operand);\n+\n /* Similar, but for RETURN_EXPR.  */\n extern tree build_return_expr (tree ret_obj, tree ret_val);\n "}, {"sha": "f130439d7c380f17df6dbd65921f2884aaa31f02", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "patch": "@@ -1955,8 +1955,8 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n      example in AARM 11.6(5.e).  */\n   if (prefix_unused && TREE_SIDE_EFFECTS (gnu_prefix)\n       && !Is_Entity_Name (Prefix (gnat_node)))\n-    gnu_result = fold_build2 (COMPOUND_EXPR, TREE_TYPE (gnu_result),\n-\t\t\t      gnu_prefix, gnu_result);\n+    gnu_result = build_compound_expr  (TREE_TYPE (gnu_result), gnu_prefix,\n+\t\t\t\t       gnu_result);\n \n   *gnu_result_type_p = gnu_result_type;\n   return gnu_result;\n@@ -2921,8 +2921,8 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \n \t  /* But initialize it on the fly like for an implicit temporary as\n \t     we aren't necessarily dealing with a statement.  */\n-\t  gnu_name = build2 (COMPOUND_EXPR, TREE_TYPE (gnu_name), gnu_stmt,\n-\t\t\t     gnu_temp);\n+\t  gnu_name = build_compound_expr (TREE_TYPE (gnu_name), gnu_stmt,\n+\t\t\t\t\t  gnu_temp);\n \n \t  /* Set up to move the copy back to the original if needed.  */\n \t  if (!in_param)\n@@ -3307,19 +3307,8 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n   /* If we need a value, make a COMPOUND_EXPR to return it; otherwise,\n      return the result.  Deal specially with UNCONSTRAINED_ARRAY_REF.  */\n   if (returning_value)\n-    {\n-      if (TREE_CODE (gnu_call) == UNCONSTRAINED_ARRAY_REF\n-\t  || TREE_CODE (gnu_call) == INDIRECT_REF)\n-\tgnu_result = build1 (TREE_CODE (gnu_call), TREE_TYPE (gnu_call),\n-\t\t\t     fold_build2 (COMPOUND_EXPR,\n-\t\t\t\t\t  TREE_TYPE (TREE_OPERAND (gnu_call,\n-\t\t\t\t\t\t\t\t   0)),\n-\t\t\t\t\t  gnu_result,\n-\t\t\t\t\t  TREE_OPERAND (gnu_call, 0)));\n-      else\n-\tgnu_result = fold_build2 (COMPOUND_EXPR, TREE_TYPE (gnu_call),\n-\t\t\t\t  gnu_result, gnu_call);\n-    }\n+    gnu_result = build_compound_expr (TREE_TYPE (gnu_call), gnu_result,\n+\t\t\t\t      gnu_call);\n \n   return gnu_result;\n }\n@@ -5525,7 +5514,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       TREE_SIDE_EFFECTS (gnu_result) = 1;\n       gnu_expr = gnat_to_gnu (Expression (gnat_node));\n       gnu_result\n-\t= build2 (COMPOUND_EXPR, TREE_TYPE (gnu_expr), gnu_result, gnu_expr);\n+\t= build_compound_expr (TREE_TYPE (gnu_expr), gnu_result, gnu_expr);\n       break;\n \n     case N_Freeze_Entity:"}, {"sha": "0671308369f30c1e45209de66cf72509bcb92df8", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=39ab2e8fc9d4efb8dc6e089ce69738c2506ec0f1", "patch": "@@ -1372,6 +1372,33 @@ build_cond_expr (tree result_type, tree condition_operand,\n   return result;\n }\n \n+/* Similar, but for COMPOUND_EXPR.  */\n+\n+tree\n+build_compound_expr (tree result_type, tree stmt_operand, tree expr_operand)\n+{\n+  bool addr_p = false;\n+  tree result;\n+\n+  /* If the result type is unconstrained, take the address of the operand and\n+     then dereference the result.  Likewise if the result type is passed by\n+     reference, but this is natively handled in the gimplifier.  */\n+  if (TREE_CODE (result_type) == UNCONSTRAINED_ARRAY_TYPE\n+      || CONTAINS_PLACEHOLDER_P (TYPE_SIZE (result_type)))\n+    {\n+      result_type = build_pointer_type (result_type);\n+      expr_operand = build_unary_op (ADDR_EXPR, result_type, expr_operand);\n+      addr_p = true;\n+    }\n+\n+  result = fold_build2 (COMPOUND_EXPR, result_type, stmt_operand,\n+\t\t\texpr_operand);\n+\n+  if (addr_p)\n+    result = build_unary_op (INDIRECT_REF, NULL_TREE, result);\n+\n+  return result;\n+}\n /* Similar, but for RETURN_EXPR.  If RET_VAL is non-null, build a RETURN_EXPR\n    around the assignment of RET_VAL to RET_OBJ.  Otherwise just build a bare\n    RETURN_EXPR around RESULT_OBJ, which may be null in this case.  */"}]}