{"sha": "e841d4d8b3d1e64fe2f31329c8644ceca341874f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg0MWQ0ZDhiM2QxZTY0ZmUyZjMxMzI5Yzg2NDRjZWNhMzQxODc0Zg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-12-13T09:03:50Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-13T09:03:50Z"}, "message": "[Ada] Ada2020: Update Impunit for Ada 202X\n\n2019-12-13  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* impunit.ads: Add Ada_202X_Unit.\n\t* impunit.adb: Add a table Non_Imp_File_Names_2X analogous to\n\tthe other tables. Add code to search this table.\n\t* opt.ads: Add Warn_On_Ada_202X_Compatibility flag, currently\n\talways True.\n\t* sem_ch10.adb (Analyze_With_Clause): Give a warning if an Ada\n\t2020 unit is with-ed when Ada_Version < Ada_2020.  Change 'if'\n\tto 'case': Full coverage rules rule.\n\nFrom-SVN: r279346", "tree": {"sha": "aed108db93f82ae274c1278b8bea90bd77d2f1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aed108db93f82ae274c1278b8bea90bd77d2f1b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e841d4d8b3d1e64fe2f31329c8644ceca341874f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e841d4d8b3d1e64fe2f31329c8644ceca341874f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e841d4d8b3d1e64fe2f31329c8644ceca341874f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e841d4d8b3d1e64fe2f31329c8644ceca341874f/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90366d65738e17da9998dc5618d6e970b6ee3b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90366d65738e17da9998dc5618d6e970b6ee3b48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90366d65738e17da9998dc5618d6e970b6ee3b48"}], "stats": {"total": 99, "additions": 69, "deletions": 30}, "files": [{"sha": "209a2d452ec7e0717c5bed150655b8cfd3d141fa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e841d4d8b3d1e64fe2f31329c8644ceca341874f", "patch": "@@ -1,3 +1,14 @@\n+2019-12-13  Bob Duff  <duff@adacore.com>\n+\n+\t* impunit.ads: Add Ada_202X_Unit.\n+\t* impunit.adb: Add a table Non_Imp_File_Names_2X analogous to\n+\tthe other tables. Add code to search this table.\n+\t* opt.ads: Add Warn_On_Ada_202X_Compatibility flag, currently\n+\talways True.\n+\t* sem_ch10.adb (Analyze_With_Clause): Give a warning if an Ada\n+\t2020 unit is with-ed when Ada_Version < Ada_2020.  Change 'if'\n+\tto 'case': Full coverage rules rule.\n+\n 2019-12-13  Bob Duff  <duff@adacore.com>\n \n \t* rtsfind.ads: Minor comment fix."}, {"sha": "6bff383c4411a7d290bff91b2cd70934813e0d44", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=e841d4d8b3d1e64fe2f31329c8644ceca341874f", "patch": "@@ -613,6 +613,19 @@ package body Impunit is\n     (\"a-cvgpso\", F)   -- Ada.Containers.Vectors.Generic_Parallel_Sorting from\n    );                 -- GNATCOLL.OMP\n \n+   --------------------\n+   -- Ada 202X Units --\n+   --------------------\n+\n+   --  The following units should be used only in Ada 202X mode\n+\n+   Non_Imp_File_Names_2X : constant File_List := (\n+    0 => (\"a-stteou\", T)  -- Ada.Strings.Text_Output\n+    --  ???We use named notation, because there is only one of these so far.\n+    --  When we add more, we should switch to positional notation, and erase\n+    --  the \"0 =>\".\n+   );\n+\n    -----------------------\n    -- Alternative Units --\n    -----------------------\n@@ -733,6 +746,14 @@ package body Impunit is\n          end if;\n       end loop;\n \n+      --  See if name is in 202X list\n+\n+      for J in Non_Imp_File_Names_2X'Range loop\n+         if Buffer = Non_Imp_File_Names_2X (J).Fname then\n+            return Ada_202X_Unit;\n+         end if;\n+      end loop;\n+\n       --  Only remaining special possibilities are children of System.RPC and\n       --  System.Garlic and special files of the form System.Aux...\n "}, {"sha": "7e6ea61916bf72ed52e00cc94616fd9a22b192f5", "filename": "gcc/ada/impunit.ads", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fimpunit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fimpunit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.ads?ref=e841d4d8b3d1e64fe2f31329c8644ceca341874f", "patch": "@@ -45,19 +45,13 @@ package Impunit is\n       --  This is not a predefined unit, so no checks are needed\n \n       Ada_95_Unit,\n-      --  This unit is defined in the Ada 95 RM, and can be freely with'ed in\n-      --  both Ada 95 mode and Ada 05 mode. Note that in Ada 83 mode, no child\n-      --  units are allowed, so you can't even name such a unit.\n-\n       Ada_2005_Unit,\n-      --  This unit is defined in the Ada 2005 RM. Withing this unit from an\n-      --  Ada 95 mode program will generate a warning (again, strictly speaking\n-      --  this should be an error, but that seems over-strenuous).\n-\n-      Ada_2012_Unit);\n-      --  This unit is defined in the Ada 2012 RM. Withing this unit from an\n-      --  Ada 95 or 2005 mode program will generate a warning (again, strictly\n-      --  speaking this should be an error, but that seems over-strenuous).\n+      Ada_2012_Unit,\n+      Ada_202X_Unit);\n+      --  This unit is defined in the Ada RM of the given year. This is used to\n+      --  give a warning when withing a unit from a wrong mode (e.g. withing an\n+      --  Ada_2012_Unit when compiling with -gnat95). Note that in Ada 83 mode,\n+      --  no child units are allowed, so you can't even name such a unit.\n \n    function Get_Kind_Of_Unit (U : Unit_Number_Type) return Kind_Of_Unit;\n    --  Given the unit number of a unit, this function determines the type"}, {"sha": "fcfafc4d747292bf7c4b4d723bf2da627c7f2e5a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=e841d4d8b3d1e64fe2f31329c8644ceca341874f", "patch": "@@ -1767,6 +1767,12 @@ package Opt is\n    --  including warnings on Ada 2012 obsolescent features used in Ada 2012\n    --  mode. Modified by use of -gnatwy/Y.\n \n+   Warn_On_Ada_202X_Compatibility : Boolean := True;\n+   --  GNAT\n+   --  Set to True to generate all warnings on Ada 202X compatibility issues,\n+   --  including warnings on Ada 202X obsolescent features used in Ada 202X\n+   --  mode. ???There is no warning switch for this yet.\n+\n    Warn_On_All_Unread_Out_Parameters : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings in all cases where a variable is"}, {"sha": "ae8bca7e239b2d809e3bca1b12197c0d43e00694", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e841d4d8b3d1e64fe2f31329c8644ceca341874f/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=e841d4d8b3d1e64fe2f31329c8644ceca341874f", "patch": "@@ -2666,12 +2666,8 @@ package body Sem_Ch10 is\n            and then not Implicit_With (N)\n            and then not Restriction_Violation\n          then\n-            declare\n-               U_Kind : constant Kind_Of_Unit :=\n-                          Get_Kind_Of_Unit (Get_Source_Unit (U));\n-\n-            begin\n-               if U_Kind = Implementation_Unit then\n+            case Get_Kind_Of_Unit (Get_Source_Unit (U)) is\n+               when Implementation_Unit =>\n                   Error_Msg_F (\"& is an internal 'G'N'A'T unit?i?\", Name (N));\n \n                   --  Add alternative name if available, otherwise issue a\n@@ -2685,19 +2681,30 @@ package body Sem_Ch10 is\n                         & \"version-dependent?i?\", Name (N));\n                   end if;\n \n-               elsif U_Kind = Ada_2005_Unit\n-                 and then Ada_Version < Ada_2005\n-                 and then Warn_On_Ada_2005_Compatibility\n-               then\n-                  Error_Msg_N (\"& is an Ada 2005 unit?i?\", Name (N));\n+               when Not_Predefined_Unit | Ada_95_Unit =>\n+                  null; -- no checks needed\n \n-               elsif U_Kind = Ada_2012_Unit\n-                 and then Ada_Version < Ada_2012\n-                 and then Warn_On_Ada_2012_Compatibility\n-               then\n-                  Error_Msg_N (\"& is an Ada 2012 unit?i?\", Name (N));\n-               end if;\n-            end;\n+               when Ada_2005_Unit =>\n+                  if Ada_Version < Ada_2005\n+                    and then Warn_On_Ada_2005_Compatibility\n+                  then\n+                     Error_Msg_N (\"& is an Ada 2005 unit?i?\", Name (N));\n+                  end if;\n+\n+               when Ada_2012_Unit =>\n+                  if Ada_Version < Ada_2012\n+                    and then Warn_On_Ada_2012_Compatibility\n+                  then\n+                     Error_Msg_N (\"& is an Ada 2012 unit?i?\", Name (N));\n+                  end if;\n+\n+               when Ada_202X_Unit =>\n+                  if Ada_Version < Ada_2020\n+                    and then Warn_On_Ada_202X_Compatibility\n+                  then\n+                     Error_Msg_N (\"& is an Ada 202X unit?i?\", Name (N));\n+                  end if;\n+            end case;\n          end if;\n       end if;\n "}]}