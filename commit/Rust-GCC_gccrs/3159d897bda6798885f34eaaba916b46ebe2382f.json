{"sha": "3159d897bda6798885f34eaaba916b46ebe2382f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE1OWQ4OTdiZGE2Nzk4ODg1ZjM0ZWFhYmE5MTZiNDZlYmUyMzgyZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-08T18:42:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-08T18:42:04Z"}, "message": "compiler: lvalue context fixes in Unary_expression::do_get_backend\n    \n    A couple of the Backend::var_expression invocations in\n    Unary_expression::do_get_backend were selecting \"lvalue\" context\n    incorrectly (these var exprs were not in an assignment or LHS\n    position); fix is to change back to \"rvalue\" context.\n    \n    Reviewed-on: https://go-review.googlesource.com/45136\n\nFrom-SVN: r249029", "tree": {"sha": "f0433f7cef25f6f9b623e28860e74400426dd0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0433f7cef25f6f9b623e28860e74400426dd0e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3159d897bda6798885f34eaaba916b46ebe2382f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3159d897bda6798885f34eaaba916b46ebe2382f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3159d897bda6798885f34eaaba916b46ebe2382f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3159d897bda6798885f34eaaba916b46ebe2382f/comments", "author": null, "committer": null, "parents": [{"sha": "2163b9bcc627eb42ba5e629e54567b9f106e2f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2163b9bcc627eb42ba5e629e54567b9f106e2f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2163b9bcc627eb42ba5e629e54567b9f106e2f32"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "a30f61a2963b525e9dc85df413b51b61135ffaba", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3159d897bda6798885f34eaaba916b46ebe2382f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3159d897bda6798885f34eaaba916b46ebe2382f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3159d897bda6798885f34eaaba916b46ebe2382f", "patch": "@@ -1,4 +1,4 @@\n-4b857cde45939f0e9f3cf89b9e347b6f6ebe0f8f\n+81d9f6d05c2bb92b2b3af02807713b6bed9bf053\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "5689c77c0d8dfe34dc27e1aa0691d5c8762b8ba8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3159d897bda6798885f34eaaba916b46ebe2382f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3159d897bda6798885f34eaaba916b46ebe2382f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3159d897bda6798885f34eaaba916b46ebe2382f", "patch": "@@ -4370,7 +4370,7 @@ Unary_expression::do_get_backend(Translate_context* context)\n \t  gogo->backend()->implicit_variable_set_init(implicit, buf, btype,\n \t\t\t\t\t\t      true, copy_to_heap, false,\n \t\t\t\t\t\t      bexpr);\n-\t  bexpr = gogo->backend()->var_expression(implicit, VE_lvalue, loc);\n+\t  bexpr = gogo->backend()->var_expression(implicit, VE_rvalue, loc);\n \n \t  // If we are not copying a slice initializer to the heap,\n \t  // then it can be changed by the program, so if it can\n@@ -4380,7 +4380,7 @@ Unary_expression::do_get_backend(Translate_context* context)\n \t      && this->expr_->type()->has_pointer())\n \t    {\n \t      Bexpression* root =\n-                  gogo->backend()->var_expression(implicit, VE_lvalue, loc);\n+                  gogo->backend()->var_expression(implicit, VE_rvalue, loc);\n \t      root = gogo->backend()->address_expression(root, loc);\n \t      Type* type = Type::make_pointer_type(this->expr_->type());\n \t      gogo->add_gc_root(Expression::make_backend(root, type, loc));\n@@ -4400,7 +4400,7 @@ Unary_expression::do_get_backend(Translate_context* context)\n                                                 true, false, btype, loc);\n           gogo->backend()->immutable_struct_set_init(decl, buf, true, false,\n                                                      btype, loc, bexpr);\n-          bexpr = gogo->backend()->var_expression(decl, VE_lvalue, loc);\n+          bexpr = gogo->backend()->var_expression(decl, VE_rvalue, loc);\n         }\n \n       go_assert(!this->create_temp_ || this->expr_->is_variable());"}]}