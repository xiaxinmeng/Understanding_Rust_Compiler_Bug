{"sha": "3a323a38467a2a052386f847a0c5519a8d78c044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzMjNhMzg0NjdhMmEwNTIzODZmODQ3YTBjNTUxOWE4ZDc4YzA0NA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2013-10-01T13:19:31Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-10-01T13:19:31Z"}, "message": "re PR other/58578 (mpfr tasinh test doesn't terminate when built with trunk for ARM)\n\n2013-10-01  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tgcc/\n\tPR target/58578\n\tRevert\n\t2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n\t* config/arm/arm.md (arm_ashldi3_1bit):  define_insn into\n\tdefine_insn_and_split.\n\t(arm_ashrdi3_1bit,arm_lshrdi3_1bit): Likewise.\n\t(shiftsi3_compare): New pattern.\n\t(rrx): New pattern.\n\t* config/arm/unspecs.md (UNSPEC_RRX): New.\n\n\tgcc/testsuite\n\tPR target/58578\n\t* gcc.target/arm/pr58578.c: New test.\n\nFrom-SVN: r203059", "tree": {"sha": "586aa26bda20c43250d5a7d91f433bf0410c342f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586aa26bda20c43250d5a7d91f433bf0410c342f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a323a38467a2a052386f847a0c5519a8d78c044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a323a38467a2a052386f847a0c5519a8d78c044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a323a38467a2a052386f847a0c5519a8d78c044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a323a38467a2a052386f847a0c5519a8d78c044/comments", "author": null, "committer": null, "parents": [{"sha": "4523e44dcc8192f2211552386c87372e39d7421b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4523e44dcc8192f2211552386c87372e39d7421b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4523e44dcc8192f2211552386c87372e39d7421b"}], "stats": {"total": 98, "additions": 23, "deletions": 75}, "files": [{"sha": "32a4b1f1d90250d2c05ce6485a25302779ac4c14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a323a38467a2a052386f847a0c5519a8d78c044", "patch": "@@ -1,3 +1,15 @@\n+2013-10-01  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR target/58578\n+\tRevert\n+\t2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\t* config/arm/arm.md (arm_ashldi3_1bit):  define_insn into\n+\tdefine_insn_and_split.\n+\t(arm_ashrdi3_1bit,arm_lshrdi3_1bit): Likewise.\n+\t(shiftsi3_compare): New pattern.\n+\t(rrx): New pattern.\n+\t* config/arm/unspecs.md (UNSPEC_RRX): New.\n+\n 2013-10-01  Alan Modra  <amodra@gmail.com>\n \n \t* stmt.c (expand_asm_operands): Revert part of 2013-09-24 special"}, {"sha": "e8d5464f1395af42126c01817f14d5ce7e741ece", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 6, "deletions": 73, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3a323a38467a2a052386f847a0c5519a8d78c044", "patch": "@@ -3867,26 +3867,13 @@\n   \"\n )\n \n-(define_insn_and_split \"arm_ashldi3_1bit\"\n+(define_insn \"arm_ashldi3_1bit\"\n   [(set (match_operand:DI            0 \"s_register_operand\" \"=r,&r\")\n         (ashift:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n                    (const_int 1)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"#\"   ; \"movs\\\\t%Q0, %Q1, asl #1\\;adc\\\\t%R0, %R1, %R1\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (ashift:SI (match_dup 1) (const_int 1))\n-                               (const_int 0)))\n-\t      (set (match_dup 0) (ashift:SI (match_dup 1) (const_int 1)))])\n-   (set (match_dup 2) (plus:SI (plus:SI (match_dup 3) (match_dup 3))\n-\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n+  \"movs\\\\t%Q0, %Q1, asl #1\\;adc\\\\t%R0, %R1, %R1\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n@@ -3964,43 +3951,18 @@\n   \"\n )\n \n-(define_insn_and_split \"arm_ashrdi3_1bit\"\n+(define_insn \"arm_ashrdi3_1bit\"\n   [(set (match_operand:DI              0 \"s_register_operand\" \"=r,&r\")\n         (ashiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n                      (const_int 1)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"#\"   ; \"movs\\\\t%R0, %R1, asr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-                   (compare:CC (ashiftrt:SI (match_dup 3) (const_int 1))\n-                               (const_int 0)))\n-              (set (match_dup 2) (ashiftrt:SI (match_dup 3) (const_int 1)))])\n-   (set (match_dup 0) (unspec:SI [(match_dup 1)\n-                                  (reg:CC_C CC_REGNUM)]\n-                                 UNSPEC_RRX))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n+  \"movs\\\\t%R0, %R1, asr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n )\n \n-(define_insn \"*rrx\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-        (unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-                    (reg:CC_C CC_REGNUM)]\n-                   UNSPEC_RRX))]\n-  \"TARGET_32BIT\"\n-  \"mov\\\\t%0, %1, rrx\"\n-  [(set_attr \"conds\" \"use\")\n-   (set_attr \"type\" \"mov_shift\")]\n-)\n-\n (define_expand \"ashrsi3\"\n   [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n@@ -4070,27 +4032,13 @@\n   \"\n )\n \n-(define_insn_and_split \"arm_lshrdi3_1bit\"\n+(define_insn \"arm_lshrdi3_1bit\"\n   [(set (match_operand:DI              0 \"s_register_operand\" \"=r,&r\")\n         (lshiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n                      (const_int 1)))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"#\"   ;  \"movs\\\\t%R0, %R1, lsr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-                   (compare:CC (lshiftrt:SI (match_dup 3) (const_int 1))\n-                               (const_int 0)))\n-              (set (match_dup 2) (lshiftrt:SI (match_dup 3) (const_int 1)))])\n-   (set (match_dup 0) (unspec:SI [(match_dup 1)\n-                                  (reg:CC_C CC_REGNUM)]\n-                                 UNSPEC_RRX))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n+  \"movs\\\\t%R0, %R1, lsr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n@@ -4183,21 +4131,6 @@\n    (set_attr \"type\" \"alu_shift_reg,alu_shift_imm,alu_shift_imm,alu_shift_reg\")]\n )\n \n-(define_insn \"*shiftsi3_compare\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"M,r\")])\n-                    (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n-  \"TARGET_32BIT\"\n-  \"* return arm_output_shift(operands, 1);\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"type\"  \"alus_shift_imm,alus_shift_reg\")]\n-)\n-\n (define_insn \"*shiftsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\""}, {"sha": "508603cf6c8c8b6f480d8dfcc1879ba78776b181", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=3a323a38467a2a052386f847a0c5519a8d78c044", "patch": "@@ -83,8 +83,6 @@\n                         ; FPSCR rounding mode and signal inexactness.\n   UNSPEC_VRINTA         ; Represent a float to integral float rounding\n                         ; towards nearest, ties away from zero.\n-  UNSPEC_RRX            ; Rotate Right with Extend shifts register right\n-                        ; by one place, with Carry flag shifted into bit[31].\n ])\n \n (define_c_enum \"unspec\" ["}, {"sha": "7f553ae6c535ec697acb449431afaa4b99c0747d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a323a38467a2a052386f847a0c5519a8d78c044/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a323a38467a2a052386f847a0c5519a8d78c044", "patch": "@@ -1,3 +1,8 @@\n+2013-10-01  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR Target/58578\n+\t* gcc.target/arm/pr58578.c: New test.\n+\n 2013-10-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n      PR tree-optimization/58556"}]}