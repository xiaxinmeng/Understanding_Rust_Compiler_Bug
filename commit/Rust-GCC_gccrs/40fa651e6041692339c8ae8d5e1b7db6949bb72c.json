{"sha": "40fa651e6041692339c8ae8d5e1b7db6949bb72c", "node_id": "C_kwDOANBUbNoAKDQwZmE2NTFlNjA0MTY5MjMzOWM4YWU4ZDVlMWI3ZGI2OTQ5YmI3MmM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-02T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-12-02T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "723109bb7fad8b33ff2818ea496fc4f4c90d9379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/723109bb7fad8b33ff2818ea496fc4f4c90d9379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40fa651e6041692339c8ae8d5e1b7db6949bb72c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fa651e6041692339c8ae8d5e1b7db6949bb72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fa651e6041692339c8ae8d5e1b7db6949bb72c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fa651e6041692339c8ae8d5e1b7db6949bb72c/comments", "author": null, "committer": null, "parents": [{"sha": "860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860c56b5bc356960a4d0445dadc43ceddbe3c7e2"}], "stats": {"total": 619, "additions": 618, "deletions": 1}, "files": [{"sha": "545af700d709e88351aef3fe6a063f785f5325fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,121 @@\n+2021-12-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/102811\n+\t* config/i386/sse.md (VI2F): Remove mode iterator.\n+\t(VI2F_256_512): New mode iterator.\n+\t(vec_set<V8_128:mode>_0): New insn pattern.\n+\t(vec_set<VI2F_256_512:mode>_0>): Rename from vec_set<VI2F:mode>mode.\n+\tUse VI2F_256_512 mode iterator instead of VI2F.\n+\t(*axv512fp16_movsh): Remove.\n+\t(<sse2p4_1>_pinsr<ssemodesuffix>): Add (x,x,x) AVX2 alternative.\n+\tDo not disable V8HF mode insn on AVX2 targets.\n+\t(pinsrw -> pbroadcast + pblendw peephole2): New peephole.\n+\t(pinsrw -> pbroadcast + pblendw splitter): New post-reload splitter.\n+\t* config/i386/i386.md (extendhfsf): Call gen_vec_setv8hf_0.\n+\t* config/i386/i386-expand.c (ix86_expand_vector_set)\n+\t<case E_V8HFmode>: Use vec_merge path for TARGET_AVX2.\n+\n+2021-12-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-niter.c (number_of_iterations_until_wrap):\n+\tCheck if simplify_using_initial_conditions allows us to\n+\tsimplify the expression for may_be_zero.\n+\t* match.pd (X != C ? -X : -C -> -X): New transform.\n+\t(X != C ? ~X : ~C -> ~X): Likewise.\n+\t((X+1) > Y ? -X : 1 -> X >= Y ? -X : 1): Likewise.\n+\n+2021-12-01  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR middle-end/103127\n+\t* gimplify.c (is_var_need_auto_init): Handle opaque types.\n+\n+2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* common.opt (static-libphobos): Add option.\n+\t* config/darwin.h (LINK_SPEC): Substitute -lgphobos with libgphobos.a\n+\twhen linking statically.\n+\t* gcc.c (driver_handle_option): Set -static-libphobos as always valid.\n+\n+2021-12-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103310\n+\t* fold-const.c (maybe_nonzero_address): Use get_create or get\n+\tdepending on folding_initializer.\n+\t(fold_binary_initializer_loc): New.\n+\t* fold-const.h (fold_binary_initializer_loc): Declare.\n+\t* varasm.c (mark_weak): Don't use the decl location.\n+\t* doc/invoke.texi: Document -fconstexpr-fp-except.\n+\n+2021-12-01  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/102347\n+\t* config/rs6000/rs6000-c.c (rs6000-builtins.h): Stop including.\n+\t(rs6000-internal.h): Include.\n+\t(altivec_resolve_new_overloaded_builtin): Move call to\n+\trs6000_invalid_new_builtin here from rs6000_new_builtin_decl.\n+\t* config/rs6000/rs6000-call.c (rs6000-builtins.h): Stop including.\n+\t(rs6000_invalid_new_builtin): Remove static qualifier.\n+\t(rs6000_new_builtin_decl): Remove test for supported builtin.\n+\t* config/rs6000/rs6000-internal.h (rs6000-builtins.h): Include.\n+\t(rs6000_invalid_new_builtin): Declare.\n+\t* config/rs6000/rs6000.c (rs6000-builtins.h): Don't include.\n+\n+2021-12-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103409\n+\t* gimple-range-path.cc (path_range_query::compute_ranges_in_phis):\n+\tDo all the work with just one ssa_global_cache.\n+\t* gimple-range-path.h: Remove m_tmp_phi_cache.\n+\n+2021-12-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/103517\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): When allowing two\n+\tdifferent component references, check the codes of both them,\n+\trather than just the first.\n+\n+2021-12-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103464\n+\t* gimple-range.cc (gimple_ranger::prefill_name): Process phis also.\n+\t(gimple_ranger::prefill_stmt_dependencies): Ditto.\n+\n+2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* doc/install.texi (Prerequisites): Add note that D front end now\n+\trequires GDC installed in order to bootstrap.\n+\t(Building): Add D compiler section, referencing prerequisites.\n+\n+2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/x86-tune.def (X86_TUNE_SCHEDULE,\n+\tX86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY,\n+\tX86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Formatting fixes.\n+\t(X86_TUNE_USE_GATHER): Put m_GENERIC last for consistency.\n+\n+2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/102356\n+\t* rtl.h (simplify_context): Add assoc_count member and\n+\tmax_assoc_count static member.\n+\t* simplify-rtx.c (simplify_associative_operation): Don't reassociate\n+\tmore than max_assoc_count times within one outermost simplify_* call.\n+\t* dwarf2out.c (mem_loc_descriptor): Optimize binary operation\n+\twith both operands the same using DW_OP_dup.\n+\n+2021-12-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* match.pd: Move below pattern that rewrites to EQ, NE.\n+\t* tree.c (bitmask_inv_cst_vector_p): Correct do .. while indentation.\n+\n+2021-12-01  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\t    Martin Li\u0161ka  <mliska@suse.cz>\n+\n+\tPR tree-optimization/103456\n+\t* tree-object-size.c (merge_object_sizes): Update osi->changed\n+\tonly if object_sizes_set succeeded.\n+\n 2021-11-30  liuhongt  <hongtao.liu@intel.com>\n \n \tPR target/103463"}, {"sha": "428bbfd74ca8f67ad6e066be262025a3ea11e75d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1 +1 @@\n-20211201\n+20211202"}, {"sha": "b9c6e5941340df20e9f8897760490752a88315e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,274 @@\n+2021-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (E_Decimal_Fixed_Point_Subtype): Fix pasto.\n+\t* freeze.adb (Freeze_Fixed_Point_Type): Retrieve the underlying type\n+\tof the first subtype and do not use a stale value of Small_Value.\n+\t* sem_res.adb (Resolve_Real_Literal): In the case of a fixed-point\n+\ttype, make sure that the base type is frozen and use its Small_Value\n+\tto compute the corresponding integer value of the literal.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-cbdlli.ads (List): Remove extra space in Aggregate\n+\taspect.\n+\n+2021-12-01  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add\n+\tdocumentation of the new form of formal subprogram default in\n+\tthe section on language extensions (pragma Extensions_Allowed).\n+\t* gnat_rm.texi: Regenerate.\n+\t* gen_il-gen-gen_nodes.adb: Add Expression as a syntactic field\n+\tof N_Formal_(Abstract|Concrete)_Subprogram_Declaration nodes.\n+\t* par-ch12.adb (P_Formal_Subprogram_Declaration): Add parsing\n+\tsupport for the new default of a parenthesized expression for\n+\tformal functions. Issue an error when extensions are not\n+\tallowed, suggesting use of -gnatX. Update comment with extended\n+\tsyntax for SUBPROGRAM_DEFAULT.\n+\t* sem_ch12.adb (Analyze_Formal_Subprogram_Declaration): Issue an\n+\terror when an expression default is given for an abstract formal\n+\tfunction. When a default expression is present for a formal\n+\tfunction, install the function's formals and preanalyze the\n+\texpression.\n+\t(Instantiate_Formal_Subprogram): Fix typo in RM paragraph in a\n+\tcomment.  When a formal function has a default expression,\n+\tcreate a body for the function that will evaluate the expression\n+\tand will be called when the default applies in an instantiation.\n+\tThe implicit function is marked as inlined and as having\n+\tconvention Intrinsic.\n+\n+2021-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_elab.adb (Previous_Suitable_Construct): New function declared\n+\tin the Early_Call_Region_Processor package.\n+\t(Find_ECR): Call it to get the previous node at the start.\n+\t(Include): Call it to get the previous node during the traversal.\n+\n+2021-12-01  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Process_Compile_Time_Warning_Or_Error): Do not\n+\tfollow the Corresponding_Spec pointer if Acts_As_Spec is True,\n+\tbecause Corresponding_Spec is Empty in that case, so we would\n+\texit the loop prematurely, and incorrectly think we are not\n+\tinside a generic unit when we are.\n+\n+2021-12-01  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch3.adb (P_Access_Type_Definition): If Not_Null_Subtype is\n+\tTrue, give an error in the access-to-subprogram cases.\n+\n+2021-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Freeze_Package_Instance): Move up.\n+\n+2021-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Freeze_Subprogram_Body): Rename into...\n+\t(Freeze_Subprogram_Instance): ...this and change the name of the\n+\tfirst parameter and local variables for the sake of consistency.\n+\t(Insert_Freeze_Node_For_Instance): Use local variable Par_Inst.\n+\t(Install_Body): Rename into...\n+\t(Freeze_Package_Instance): ...this, remove first parameter and\n+\tchange the name of local variables for the sake of consistency.\n+\tDo not deal with the special case of incomplete actual types here\n+\tand do not insert the body.\n+\t(Instantiate_Package_Body): Deal with the special case of incomplete\n+\tactual types here and insert the body.  Call Freeze_Package_Instance\n+\tonly if expansion is done.\n+\t(Instantiate_Subprogram_Body): Minor consistency tweak.\n+\n+2021-12-01  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Aggregate): Fix typo in comment.\n+\n+2021-12-01  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_case.adb (Check_Bindings): Provide a second strategy for\n+\timplementing bindings and choose which strategy to use for a\n+\tgiven binding. The previous approach was to introduce a new\n+\tobject and assign the bound value to the object.  The new\n+\tapproach is to introduce a renaming of a dereference of an\n+\taccess value that references the appropriate subcomponent, so no\n+\tcopies are made.  The original strategy is still used if the\n+\ttype of the object is elementary.  When the renaming approach is\n+\tused, the initialization of the access value is not generated\n+\tuntil expansion. Until this missing initialization is added, the\n+\ttree looks like a known-at-compile-time dereference of a null\n+\taccess value: Temp : Some_Access_Type; Obj : Designated_Type\n+\trenames Temp.all; This leads to problems, so a bogus initial\n+\tvalue is provided here and then later deleted during expansion.\n+\t(Check_Composite_Case_Selector): Disallow a case selector\n+\texpression that requires finalization. Note that it is ok if the\n+\tselector's type requires finalization, as long as the expression\n+\titself doesn't have any \"newly constructed\" parts.\n+\t* exp_ch5.adb (Pattern_Match): Detect the case where analysis of\n+\ta general (i.e., composite selector type) case statement chose\n+\tto implement a binding as a renaming rather than by making a\n+\tcopy. In that case, generate the assignments to initialize the\n+\taccess-valued object whose designated value is later renamed\n+\t(and remove the bogus initial value for that object that was\n+\tadded during analysis).\n+\t* sem_util.ads, sem_util.adb: Add new function\n+\tIs_Newly_Constructed corresponding to RM 4.4 term.\n+\n+2021-12-01  Richard Kenner  <kenner@adacore.com>\n+\n+\t* frontend.adb (Frontend): Do unnesting after ignored ghost code\n+\thas been removed.\n+\t* inline.adb (Analyze_Inlined_Bodies): Don't put ignored ghost\n+\tentities on inlined subprogram list.\n+\n+2021-12-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* libgnarl/s-tasren.adb (Timed_Task_Entry_Call): Replace\n+\tDefer_Abort and Undefer_Abort with Defer_Abort_Nestable and\n+\tUndefer_Abort_Nestable.\n+\n+2021-12-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch7.adb (Cleanup_Record): Don't process parent.\n+\n+2021-12-01  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_attr.adb (Type_Key): Avoid premature use warnings when the\n+\tprefix is a generic actual.\n+\n+2021-12-01  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Force generation of object file if\n+\tcompilation unit is an ignored ghost.\n+\n+2021-12-01  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* tracebak.c: Add AArch64 RTEMS support.\n+\n+2021-12-01  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* init.c: Add __gnat_error_handler and __gnat_install_handler\n+\tfor RTEMS.\n+\n+2021-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sprint.ads (Source_Dump): Fix typo in comment.\n+\t* sprint.adb (Source_Dump): Set Dump_Freeze_Null for both -gnatG\n+\tand -gnatD.\n+\t* switch-c.adb (Scan_Front_End_Switches) <'D'>: Remove obsolete\n+\tkludge.\n+\n+2021-12-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.ads (Direct_Primitive_Operations): Update the doc to\n+\tindicate that this field is used for all types now.\n+\t* sem_ch4.adb (Try_Object_Operation): Add parameter\n+\tAllow_Extensions set to True to pretend that extensions are\n+\tallowed.\n+\t* sem_ch4.ads: Same.\n+\t* sem_ch6.adb: Do not require Extensions_Allowed.\n+\t* sem_ch8.adb (Find_Selected_Component): Remove duplicate\n+\t\"where\" in comment.  Improve the error messages regarding use of\n+\tprefixed calls.\n+\n+2021-12-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Is_Extended_Precision_Floating_Point_Type): New\n+\tfunction.\n+\t* sem_util.ads (Is_Extended_Precision_Floating_Point_Type): New\n+\tfunction.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb, sem_cat.adb, sem_ch10.adb, sem_ch12.adb,\n+\tsem_elim.adb, sem_util.adb: Replace uses of Subprogram_Kind with\n+\tIs_Subprogram.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-coinho.ads: Sync whitespace with\n+\ta-coinho__shared.ads.\n+\t* libgnat/a-coinho__shared.ads: Sync whitespace with\n+\ta-coinho.ads.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_TASKING_OBJS): Sort.\n+\t(GNATRTL_NONTASKING_OBJS): Sort.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* Makefile.rtl: Remove extra whitespace in special compilation\n+\trules.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/the_gnat_library.rst (System.Atomic_Counters):\n+\tSync description with comment in s-atocou.ads.\n+\t* gnat-style.texi, gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2021-12-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch10.adb (Is_Private_Library_Unit): Move query to\n+\tSem_Util for sharing.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Add continuation\n+\tmessage.\n+\t* sem_prag.adb (Analyze_Part_Of): Call new function\n+\tIs_Private_Library_Unit.\n+\t(Check_Valid_Library_Unit_Pragma): Specialize error messages on\n+\tmisplaced pragmas.\n+\t(Analyze_Refined_State_In_Decl_Part): Recognize missing Part_Of\n+\ton object in private part.\n+\t* sem_util.adb (Check_State_Refinements): Add continuation\n+\tmessage.\n+\t(Find_Placement_In_State_Space): Fix detection of placement,\n+\twhich relied wrongly on queries In_Package_Body/In_Private_Part\n+\twhich do not provide the right information here for all cases.\n+\t(Is_Private_Library_Unit): Move query here for sharing.\n+\t* sem_util.ads (Is_Private_Library_Unit): Move query here for\n+\tsharing.\n+\n+2021-12-01  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): If the full type\n+\thas a primitives list but its base type doesn't, set the base\n+\ttype's list to the full type's list (covers certain constrained\n+\tcases, such as for arrays).\n+\t(Analyze_Incomplete_Type_Decl): Unconditionally initialize an\n+\tincomplete type's primitives list.\n+\t(Analyze_Subtype_Declaration): Unconditionally set a subtype's\n+\tprimitives list to the base type's list, so the lists are\n+\tshared.\n+\t(Build_Derived_Private_Type): Unconditionally initialize a\n+\tderived private type's list to a new empty list.\n+\t(Build_Derived_Record_Type): Unconditionally initialize a\n+\tderived record type's list to a new empty list (now a single\n+\tcall for tagged and untagged cases).\n+\t(Derived_Type_Declaration): Unconditionally initialize a derived\n+\ttype's list to a new empty list in error cases (when Parent_Type\n+\tis undefined or illegal).\n+\t(Process_Full_View): Unconditionally copy the primitive\n+\toperations from the private view to the full view (rather than\n+\tconditioning it on whether extensions are enabled).\n+\t* sem_ch7.adb (New_Private_Type): Unconditionally initialize an\n+\tuntagged private type's primitives list to a new empty list.\n+\n+2021-12-01  Etienne Servais  <servais@adacore.com>\n+\n+\t* libgnat/a-cbhase.adb, libgnat/a-cborse.adb,\n+\tlibgnat/a-cihase.adb, libgnat/a-ciorse.adb,\n+\tlibgnat/a-cohase.adb, libgnat/a-coorse.adb\n+\t(Constant_Reference,Reference_Preserving_Key): Refactor using\n+\tthe equivalence stated in the RM.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Eq_Body): Refactor to avoid appending to an\n+\tempty list; also, when exiting early we will not create any\n+\tlist; fix style in comment.\n+\n+2021-12-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* repinfo.adb (List_Entities): Simplify detection of entries;\n+\trefactor potentially redundant comparison.\n+\n 2021-11-29  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/103021"}, {"sha": "04a307a708b7d02b5a1048e5ccc77b53c259aa54", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,10 @@\n+2021-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102471\n+\t* region-model-reachability.cc (reachable_regions::handle_parm):\n+\tTreat all svalues within a compound parm has reachable, and those\n+\twrapped in a cast.\n+\n 2021-11-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/103217"}, {"sha": "fecfe7a89f16e68a8cf02bbbd77b71d1abc37016", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,8 @@\n+2021-12-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103310\n+\t* c.opt: Add -fconstexpr-fp-except.\n+\n 2021-11-29  Richard Biener  <rguenther@suse.de>\n \n \t* c-format.c (check_format_string): Remove spurious"}, {"sha": "241c35d96b772451bb5b6c4368f8fb96354c20f0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,9 @@\n+2021-12-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103310\n+\t* constexpr.c (cxx_eval_binary_expression): Use\n+\tfold_binary_initializer_loc if manifestly cxeval.\n+\n 2021-11-30  Jason Merrill  <jason@redhat.com>\n \n \t* cp-gimplify.c (genericize_if_stmt): Always build a COND_EXPR."}, {"sha": "78c8130bbc1cf112f2011d4371a6710827bb0457", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,17 @@\n+2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-spec.cc (lang_specific_driver): Set SKIPOPT on -static-libstdc++\n+\tand -static-libphobos only when target supports LD_STATIC_DYNAMIC.\n+\tRemove generate_option to re-add -static-libstdc++.\n+\n+2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.texi (Runtime Options): Document -fcheckaction=, -fextern-std=,\n+\t-fpreview=, -frevert=.\n+\t(Code Generation): Document -fdump-c++-spec=, -fdump-c++-spec-verbose,\n+\t-fsave-mixins=.\n+\t(Warnings): Update list of supported -ftransitions=.\n+\n 2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd b8384668f."}, {"sha": "a7b900f26f2d96bff186d8ef02d388bd62807683", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,98 @@\n+2021-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/102471\n+\t* gcc.dg/analyzer/leak-3.c: New test.\n+\n+2021-12-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/102881\n+\t* gcc.target/i386/pr102811-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-1c.c (dg-final): Update\n+\tscan-assembler-times scan strings for ia32 targets.\n+\t* gcc.target/i386/pr102327-1.c (dg-final): Ditto.\n+\t* gcc.target/i386/pr102811.c: Rename from ...\n+\t* gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c: ... this.\n+\n+2021-12-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-condneg-1.c: New test case.\n+\t* gcc.dg/fold-condneg-2.c: New test case.\n+\t* gcc.dg/fold-condnot-1.c: New test case.\n+\t* gcc.dg/pr101145-1.c: New test case.\n+\t* gcc.dg/pr101145-2.c: New test case.\n+\n+2021-12-01  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR middle-end/103127\n+\t* gcc.target/powerpc/pr103127.c: New test.\n+\n+2021-12-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103310\n+\t* g++.dg/cpp0x/constexpr-fp-except1.C: New test.\n+\t* g++.dg/cpp1z/constexpr-if36.C: New test.\n+\t* gcc.dg/tree-ssa/nonzero-1.c: Now well-formed.\n+\t* gcc.dg/tree-ssa/nonzero-1a.c: New test.\n+\n+2021-12-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/103517\n+\t* gcc.dg/vect/pr103517.c: New test.\n+\n+2021-12-01  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* gcc.target/aarch64/aapcs64/macro-def.h (PTR): Fix typo in\n+\tcomment.\n+\n+2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* g++.dg/cpp/ucnid-1.C: Adjust expected diagnostics.\n+\t* g++.dg/cpp/ucnid-1-utf8.C: Likewise.\n+\n+2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/102356\n+\t* gcc.dg/pr102356.c: New test.\n+\n+2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/103415\n+\t* c-c++-common/cpp/va-opt-8.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-38.c: New test.\n+\n+2021-12-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/bic-bitmask-10.c: Moved to gcc.dg/vect/vect-bic-bitmask-10.c.\n+\t* gcc.dg/bic-bitmask-11.c: Moved to gcc.dg/vect/vect-bic-bitmask-11.c.\n+\t* gcc.dg/bic-bitmask-12.c: Moved to gcc.dg/vect/vect-bic-bitmask-12.c.\n+\t* gcc.dg/bic-bitmask-3.c: Moved to gcc.dg/vect/vect-bic-bitmask-3.c.\n+\t* gcc.dg/bic-bitmask-23.c: Moved to gcc.dg/vect/vect-bic-bitmask-23.c.\n+\t* gcc.dg/bic-bitmask-2.c: Moved to gcc.dg/vect/vect-bic-bitmask-2.c.\n+\t* gcc.dg/bic-bitmask-4.c: Moved to gcc.dg/vect/vect-bic-bitmask-4.c.\n+\t* gcc.dg/bic-bitmask-5.c: Moved to gcc.dg/vect/vect-bic-bitmask-5.c.\n+\t* gcc.dg/bic-bitmask-6.c: Moved to gcc.dg/vect/vect-bic-bitmask-6.c.\n+\t* gcc.dg/bic-bitmask-8.c: Moved to gcc.dg/vect/vect-bic-bitmask-8.c.\n+\t* gcc.dg/bic-bitmask-9.c: Moved to gcc.dg/vect/vect-bic-bitmask-9.c.\n+\t* gcc.dg/vect/vect-bic-bitmask-10.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-11.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-12.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-2.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-23.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-3.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-4.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-5.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-6.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-8.c: New file.\n+\t* gcc.dg/vect/vect-bic-bitmask-9.c: New file.\n+\n+2021-12-01  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\t    Martin Li\u0161ka  <mliska@suse.cz>\n+\n+\tPR tree-optimization/103456\n+\t* gcc.dg/ubsan/pr103456.c: New test.\n+\n 2021-11-30  liuhongt  <hongtao.liu@intel.com>\n \n \t* gcc.target/i386/pr103463.c: New test."}, {"sha": "f80d15dba156b60852383bf1a31b0a9443d0b298", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,24 @@\n+2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* init.c (struct lang_flags): Remove cxx23_identifiers.\n+\t(lang_defaults): Remove cxx23_identifiers initializers.\n+\t(cpp_set_lang): Don't copy cxx23_identifiers.\n+\t* include/cpplib.h (struct cpp_options): Adjust comment about\n+\tc11_identifiers.  Remove cxx23_identifiers field.\n+\t* lex.c (warn_about_normalization): Use cplusplus instead of\n+\tcxx23_identifiers.\n+\t* charset.c (ucn_valid_in_identifier): Likewise.\n+\n+2021-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/103415\n+\t* macro.c (stringify_arg): Remove va_opt argument and va_opt handling.\n+\t(paste_tokens): On successful paste or in PREV_WHITE and\n+\tPREV_FALLTHROUGH flags from the *plhs token to the new token.\n+\t(replace_args): Adjust stringify_arg callers.  For #__VA_OPT__,\n+\tperform token pasting in a separate loop before stringify_arg call.\n+\n 2021-11-30  Richard Biener  <rguenther@suse.de>\n \n \t* charset.c (convert_escape): Remove unreachable break."}, {"sha": "4352d9caa68f01cd7f9d9475741039833c07db42", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,8 @@\n+2021-12-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* testsuite/testsuite_flags.in: Add libphobos library directory as\n+\tsearch path to --gdcldflags.\n+\n 2021-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime e6caaab9."}, {"sha": "2d934f8e49c43d11ead19b22babaabfde04b25a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fa651e6041692339c8ae8d5e1b7db6949bb72c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fa651e6041692339c8ae8d5e1b7db6949bb72c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=40fa651e6041692339c8ae8d5e1b7db6949bb72c", "patch": "@@ -1,3 +1,78 @@\n+2021-12-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103501\n+\t* include/bits/stl_tree.h (_Rb_tree(_Rb_tree&&, false_type)):\n+\tClear container if elements have been moved-from.\n+\t* testsuite/23_containers/map/allocator/move_cons.cc: Expect\n+\tmoved-from container to be empty.\n+\t* testsuite/23_containers/multimap/allocator/move_cons.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multiset/allocator/103501.cc: New test.\n+\t* testsuite/23_containers/set/allocator/103501.cc: New test.\n+\n+2021-12-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in (PREDEFINED): Change macro name.\n+\t* include/bits/allocator.h (allocate, deallocate): Use\n+\tstd::__is_constant_evaluated() unconditionally, instead of\n+\tchecking whether std::is_constant_evaluated() (or the built-in)\n+\tcan be used.\n+\t* include/bits/basic_string.h: Check new macro. call\n+\tstd::is_constant_evaluated() directly in C++20-only code that is\n+\tguarded by a suitable macro.\n+\t* include/bits/basic_string.tcc: Likewise.\n+\t* include/bits/c++config (__is_constant_evaluated): Define.\n+\t(_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED): Replace with ...\n+\t(_GLIBCXX_HAVE_IS_CONSTANT_EVALUATED): New macro.\n+\t* include/bits/char_traits.h (char_traits): Replace conditional\n+\tcalls to std::is_constant_evaluated with unconditional calls to\n+\tstd::__is_constant_evaluated.\n+\t* include/bits/cow_string.h: Use new macro.\n+\t* include/bits/ranges_algobase.h (__copy_or_move): Replace\n+\tconditional calls to std::is_constant_evaluated with unconditional\n+\tcalls to std::__is_constant_evaluated.\n+\t(__copy_or_move_backward, __fill_n_fn): Likewise.\n+\t* include/bits/ranges_cmp.h (ranges::less): Likewise.\n+\t* include/bits/stl_algobase.h (lexicographical_compare_three_way):\n+\tLikewise.\n+\t* include/bits/stl_bvector.h: Call std::is_constant_evaluated\n+\tdirectly in C++20-only code that is guarded by a suitable macro.\n+\t* include/bits/stl_construct.h (_Construct, _Destroy, _Destroy_n):\n+\tReplace is_constant_evaluated with __is_constant_evaluated.\n+\t* include/bits/stl_function.h (greater, less, greater_equal)\n+\t(less_equal): Replace __builtin_is_constant_evaluated and\n+\t__builtin_constant_p with __is_constant_evaluated.\n+\t* include/bits/stl_vector.h: Call std::is_constant_evaluated()\n+\tin C++20-only code.\n+\t* include/debug/helper_functions.h (__check_singular): Use\n+\t__is_constant_evaluated instead of built-in, or remove check\n+\tentirely.\n+\t* include/std/array (operator<=>): Use __is_constant_evaluated\n+\tunconditionally.\n+\t* include/std/bit (__bit_ceil): Likewise.\n+\t* include/std/type_traits (is_constant_evaluated): Define using\n+\t'if consteval' if possible.\n+\t* include/std/version: Use new macro.\n+\t* libsupc++/compare: Use __is_constant_evaluated instead of\n+\t__builtin_is_constant_evaluated.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n+\tAdjust dg-error lines.\n+\n+2021-12-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h (basic_string::_M_is_leaked): Use\n+\tnon-atomic load when __is_single_threaded() is true.\n+\t(basic_string::_M_is_shared): Likewise.\n+\t(basic_string::(basic_string&&)) [_GLIBCXX_FULLY_DYNAMIC_STRING]:\n+\tUse non-atomic store when rvalue is not shared.\n+\n+2021-12-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/fs_path.cc (path::_M_split_cmpts()): Remove\n+\tmicro-optimization for \"/\" path.\n+\t* src/filesystem/path.cc (path::_M_split_cmpts()): Only access\n+\tthe contents of _M_pathname using const member functions.\n+\n 2021-11-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/21_strings/basic_string/cons/char/moveable.cc: Allow"}]}