{"sha": "2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRiNWI0N2U2ZDg3ZmQ5Zjc2YzExY2I1NzhhOGIwZTdmZGVjYTg3ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-04T14:49:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-04T14:49:39Z"}, "message": "[multiple changes]\n\n2014-02-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_aggr.adb: Change \"runtime\" to \"run time\" in warning message,\n\tfor consistency with other messages.\n\n2014-02-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb  (Expand_Iterator_Loop):  For a container element\n\titerator, indicate that the element is a constant if the container\n\ttype does not have a variable indexing aspect.\n\t* sem_ch8.adb (Analyze_Object_Renaming): If the entity is already\n\tmarked as constant, do not reset its Ekind, to ensure that\n\tcontainer elements in an element loop are not modified if the\n\tcontainer (e.g. a hashed set) only has a constant indexing aspect.\n\n2014-02-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* g-souinf.ads: Subprograms in this unit are actually not pure.\n\t* freeze.adb (Freeze_Subprogram): Do not reset Is_Pure for Intrinsics.\n\t* einfo.ads (Is_Pure): Update doc to match implementation.\n\nFrom-SVN: r207469", "tree": {"sha": "756cc1baf04f8f93de206f9821d2ef6c57cd187b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/756cc1baf04f8f93de206f9821d2ef6c57cd187b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/comments", "author": null, "committer": null, "parents": [{"sha": "5a521b8ade74674b926ba242e3449ba094274bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a521b8ade74674b926ba242e3449ba094274bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a521b8ade74674b926ba242e3449ba094274bc3"}], "stats": {"total": 77, "additions": 61, "deletions": 16}, "files": [{"sha": "8f43cfe9de6467ffb37c956a7ff72a2482c41c49", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "patch": "@@ -1,3 +1,24 @@\n+2014-02-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_aggr.adb: Change \"runtime\" to \"run time\" in warning message,\n+\tfor consistency with other messages.\n+\n+2014-02-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb  (Expand_Iterator_Loop):  For a container element\n+\titerator, indicate that the element is a constant if the container\n+\ttype does not have a variable indexing aspect.\n+\t* sem_ch8.adb (Analyze_Object_Renaming): If the entity is already\n+\tmarked as constant, do not reset its Ekind, to ensure that\n+\tcontainer elements in an element loop are not modified if the\n+\tcontainer (e.g. a hashed set) only has a constant indexing aspect.\n+\n+2014-02-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* g-souinf.ads: Subprograms in this unit are actually not pure.\n+\t* freeze.adb (Freeze_Subprogram): Do not reset Is_Pure for Intrinsics.\n+\t* einfo.ads (Is_Pure): Update doc to match implementation.\n+\n 2014-02-04  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch13.adb: Minor spelling fix."}, {"sha": "fae25dee0fdc5a7a8f947e486a11acf9c78f578d", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "patch": "@@ -2775,13 +2775,13 @@ package Einfo is\n \n --    Is_Pure (Flag44)\n --       Defined in all entities. Set in all entities of a unit to which a\n---       pragma Pure is applied, and also set for the entity of the unit\n---       itself. In addition, this flag may be set for any other functions\n---       or procedures that are known to be side effect free, so in the case\n---       of subprograms, the Is_Pure flag may be used by the optimizer to\n---       imply that it can assume freedom from side effects (other than those\n---       resulting from assignment to out parameters, or to objects designated\n---       by access parameters).\n+--       pragma Pure is applied except for non intrinsic imported subprogram,\n+--       and also set for the entity of the unit itself. In addition, this\n+--       flag may be set for any other functions or procedures that are known\n+--       to be side effect free, so in the case of subprograms, the Is_Pure\n+--       flag may be used by the optimizer to imply that it can assume freedom\n+--       from side effects (other than those resulting from assignment to out\n+--       parameters, or to objects designated by access parameters).\n \n --    Is_Pure_Unit_Access_Type (Flag189)\n --       Defined in access type and subtype entities. Set if the type or"}, {"sha": "d64d0c82a93ec5fd953c0e1a9e6ab96291a90685", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "patch": "@@ -3128,6 +3128,15 @@ package body Exp_Ch5 is\n \n                Set_Debug_Info_Needed (Id);\n \n+               --  If the container does not have a variable indexing aspect,\n+               --  the element is a constant in the loop.\n+\n+               if No (Find_Value_Of_Aspect\n+                       (Container_Typ, Aspect_Variable_Indexing))\n+               then\n+                  Set_Ekind (Id, E_Constant);\n+               end if;\n+\n                --  If the container holds controlled objects, wrap the loop\n                --  statements and element renaming declaration with a block.\n                --  This ensures that the result of Element (Cusor) is"}, {"sha": "ad74fba927b8eb4f7abee36aca33f19aeadc68b2", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "patch": "@@ -6514,15 +6514,17 @@ package body Freeze is\n       end if;\n \n       --  Reset the Pure indication on an imported subprogram unless an\n-      --  explicit Pure_Function pragma was present. We do this because\n-      --  otherwise it is an insidious error to call a non-pure function from\n-      --  pure unit and have calls mysteriously optimized away. What happens\n-      --  here is that the Import can bypass the normal check to ensure that\n-      --  pure units call only pure subprograms.\n+      --  explicit Pure_Function pragma was present or the subprogram is an\n+      --  intrinsic. We do this because otherwise it is an insidious error\n+      --  to call a non-pure function from pure unit and have calls\n+      --  mysteriously optimized away. What happens here is that the Import\n+      --  can bypass the normal check to ensure that pure units call only pure\n+      --  subprograms.\n \n       if Is_Imported (E)\n         and then Is_Pure (E)\n         and then not Has_Pragma_Pure_Function (E)\n+        and then not Is_Intrinsic_Subprogram (E)\n       then\n          Set_Is_Pure (E, False);\n       end if;"}, {"sha": "8810f4db07f3e8902f48112c50688d6b3f86be3b", "filename": "gcc/ada/g-souinf.ads", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fg-souinf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fg-souinf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-souinf.ads?ref=2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2005 AdaCore                      --\n+--          Copyright (C) 2000-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,14 @@\n --  the name of the source file in which the exception is handled.\n \n package GNAT.Source_Info is\n-   pragma Pure;\n+   pragma Preelaborate;\n+   --  Note that this unit is Preelaborate, but not Pure, that's because the\n+   --  functions here such as Line are clearly not pure functions, and normally\n+   --  we mark intrinsic functions in a Pure unit as Pure, even though they are\n+   --  imported.\n+   --\n+   --  Historical note: this used to be Pure, but that was when we marked all\n+   --  intrinsics as not Pure, even in Pure units, so no problems arose.\n \n    function File return String;\n    --  Return the name of the current file, not including the path information."}, {"sha": "6ba4c120ebd99a4ef455794e9776f96087fdd4d9", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "patch": "@@ -4743,7 +4743,7 @@ package body Sem_Aggr is\n          Error_Msg_N\n            (\"(Ada 2005) null not allowed in null-excluding component??\", Expr);\n          Error_Msg_N\n-           (\"\\Constraint_Error will be raised at runtime?\", Expr);\n+           (\"\\Constraint_Error will be raised at run time?\", Expr);\n \n          Rewrite (Expr,\n            Make_Raise_Constraint_Error"}, {"sha": "da5c6002ac1ebe21cd12bb84258416bb3b2eac77", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=2db5b47e6d87fd9f76c11cb578a8b0e7fdeca87e", "patch": "@@ -1193,7 +1193,13 @@ package body Sem_Ch8 is\n          end;\n       end if;\n \n-      Set_Ekind (Id, E_Variable);\n+      --  Set the Ekind of the entity, unless it has been set already, as is\n+      --  the case for the iteration object over a container with no variable\n+      --  indexing.\n+\n+      if Ekind (Id) /= E_Constant then\n+         Set_Ekind (Id, E_Variable);\n+      end if;\n \n       --  Initialize the object size and alignment. Note that we used to call\n       --  Init_Size_Align here, but that's wrong for objects which have only"}]}