{"sha": "279a9ce9d545f65a0bb1bc4564abafabfc25f82d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc5YTljZTlkNTQ1ZjY1YTBiYjFiYzQ1NjRhYmFmYWJmYzI1ZjgyZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-28T09:24:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-28T09:24:20Z"}, "message": "wide-int: Fix up set_bit_large\n\n> >> wide_int new_lb = wi::set_bit (r.lower_bound (0), 127)\n> >>\n> >> and creates the value:\n> >>\n> >> p new_lb\n> >> {<wide_int_storage> = {val = {-65535, -1, 0}, len = 2, precision = 128},\n> >> static is_sign_extended = true}\n> >\n> > This is non-canonical and so invalid, if the low HWI has the MSB set\n> > and the high HWI is -1, it should have been just\n> > val = {-65535}, len = 1, precision = 128}\n> >\n> > I guess the bug is that wi::set_bit_large doesn't call canonize.\n>\n> Yeah, looks like a micro-optimisation gone wrong.\n\n2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n\n\t* wide-int.cc (wi::set_bit_large): Call canonize unless setting\n\tmsb bit and clearing bits above it.", "tree": {"sha": "df958d1e0e695632ae03c0146e37513e99eebff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df958d1e0e695632ae03c0146e37513e99eebff3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/279a9ce9d545f65a0bb1bc4564abafabfc25f82d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279a9ce9d545f65a0bb1bc4564abafabfc25f82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279a9ce9d545f65a0bb1bc4564abafabfc25f82d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279a9ce9d545f65a0bb1bc4564abafabfc25f82d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2241061463ad43de95eb7d3e07546bcb5efa8607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2241061463ad43de95eb7d3e07546bcb5efa8607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2241061463ad43de95eb7d3e07546bcb5efa8607"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "99d7ded9568b19ea7b5db74563b8eb8b353dda5f", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279a9ce9d545f65a0bb1bc4564abafabfc25f82d/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279a9ce9d545f65a0bb1bc4564abafabfc25f82d/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=279a9ce9d545f65a0bb1bc4564abafabfc25f82d", "patch": "@@ -702,8 +702,11 @@ wi::set_bit_large (HOST_WIDE_INT *val, const HOST_WIDE_INT *xval,\n       /* If the bit we just set is at the msb of the block, make sure\n \t that any higher bits are zeros.  */\n       if (bit + 1 < precision && subbit == HOST_BITS_PER_WIDE_INT - 1)\n-\tval[len++] = 0;\n-      return len;\n+\t{\n+\t  val[len++] = 0;\n+\t  return len;\n+\t}\n+      return canonize (val, len, precision);\n     }\n   else\n     {"}]}