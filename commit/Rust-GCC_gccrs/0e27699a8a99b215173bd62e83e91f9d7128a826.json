{"sha": "0e27699a8a99b215173bd62e83e91f9d7128a826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyNzY5OWE4YTk5YjIxNTE3M2JkNjJlODNlOTFmOWQ3MTI4YTgyNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-18T08:33:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-18T08:33:47Z"}, "message": "lto-symtab.c (lto_varpool_replace_node): Remove code handling extra name aliases.\n\n\n\t* lto-symtab.c (lto_varpool_replace_node): Remove code handling\n\textra name aliases.\n\t(lto_symtab_resolve_can_prevail_p): Likewise.\n\t(lto_symtab_merge_cgraph_nodes): Update alias_of pointers.\n\t* cgraphbuild.c (record_reference): Remove extra body alias code.\n\t(mark_load): Likewise.\n\t(mark_store): Likewise.\n\t* cgraph.h (varpool_node): Remove extra_name filed;\n\tadd alias_of and extraname_alias.\n\t(varpool_create_variable_alias, varpool_for_node_and_aliases): Declare.\n\t(varpool_alias_aliased_node): New inline function.\n\t(varpool_variable_node): New function.\n\t* cgraphunit.c (handle_alias_pairs): Handle also variable aliases.\n\t* ipa-ref.c (ipa_record_reference): Allow aliases on variables.\n\t* lto-cgraph.c (lto_output_varpool_node): Update streaming.\n\t(input_varpool_node): Likewise.\n\t* lto-streamer-out.c (produce_symtab): Remove extra name aliases.\n\t(varpool_externally_visible_p): Remove extra body alias code.\n\t(function_and_variable_visibility): Likewise.\n\t* tree-ssa-structalias.c (associate_varinfo_to_alias_1): New function.\n\t(ipa_pta_execute): Use it.\n\t* varpool.c (varpool_remove_node): Remove extra name alias code.\n\t(varpool_mark_needed_node): Likewise.\n\t(varpool_analyze_pending_decls): Analyze aliases.\n\t(assemble_aliases): New functoin.\n\t(varpool_assemble_decl): Use it.\n\t(varpool_create_variable_alias): New function.\n\t(varpool_extra_name_alias): Rewrite.\n\t(varpool_for_node_and_aliases): New function.\n\nFrom-SVN: r175169", "tree": {"sha": "92ef40a17a9585af7df791295b1cbc59dc587bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ef40a17a9585af7df791295b1cbc59dc587bd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e27699a8a99b215173bd62e83e91f9d7128a826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e27699a8a99b215173bd62e83e91f9d7128a826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e27699a8a99b215173bd62e83e91f9d7128a826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e27699a8a99b215173bd62e83e91f9d7128a826/comments", "author": null, "committer": null, "parents": [{"sha": "3bd7219042e45ee1fc84318d7e1b4cf9a3773f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd7219042e45ee1fc84318d7e1b4cf9a3773f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd7219042e45ee1fc84318d7e1b4cf9a3773f4a"}], "stats": {"total": 30, "additions": 2, "deletions": 28}, "files": [{"sha": "260cc26cc6faba8e5ab0cd306abaf57eb48cc6b3", "filename": "gcc/ipa.c", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e27699a8a99b215173bd62e83e91f9d7128a826/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e27699a8a99b215173bd62e83e91f9d7128a826/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=0e27699a8a99b215173bd62e83e91f9d7128a826", "patch": "@@ -655,7 +655,6 @@ cgraph_externally_visible_p (struct cgraph_node *node,\n static bool\n varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n {\n-  struct varpool_node *alias;\n   if (!DECL_COMDAT (vnode->decl) && !TREE_PUBLIC (vnode->decl))\n     return false;\n \n@@ -668,14 +667,6 @@ varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n   if (varpool_used_from_object_file_p (vnode))\n     return true;\n \n-  /* FIXME: We get wrong symbols with asm aliases in callgraph and LTO.\n-     This is because very little of code knows that assembler name needs to\n-     mangled.  Avoid touching declarations with user asm name set to mask\n-     some of the problems.  */\n-  if (DECL_ASSEMBLER_NAME_SET_P (vnode->decl)\n-      && IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (vnode->decl))[0]=='*')\n-    return true;\n-\n   if (DECL_PRESERVE_P (vnode->decl))\n     return true;\n   if (lookup_attribute (\"externally_visible\",\n@@ -694,11 +685,6 @@ varpool_externally_visible_p (struct varpool_node *vnode, bool aliased)\n      This is needed for i.e. references from asm statements.   */\n   if (varpool_used_from_object_file_p (vnode))\n     return true;\n-  for (alias = vnode->extra_name; alias; alias = alias->next)\n-    if (alias->resolution != LDPR_PREVAILING_DEF_IRONLY)\n-      break;\n-  if (!alias && vnode->resolution == LDPR_PREVAILING_DEF_IRONLY)\n-    return false;\n \n   /* As a special case, the COMDAT virutal tables can be unshared.\n      In LTO mode turn vtables into static variables.  The variable is readonly,\n@@ -782,13 +768,7 @@ function_and_variable_visibility (bool whole_program)\n         {\n \t  if (!node->analyzed)\n \t    continue;\n-\t  /* Weakrefs alias symbols from other compilation unit.  In the case\n-\t     the destination of weakref became available because of LTO, we must\n-\t     mark it as needed.  */\n-\t  if (in_lto_p\n-\t      && lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl))\n-\t      && !node->needed)\n-\t    cgraph_mark_needed_node (node);\n+\t  cgraph_mark_needed_node (node);\n \t  gcc_assert (node->needed);\n \t  pointer_set_insert (aliased_nodes, node);\n \t  if (dump_file)\n@@ -798,13 +778,7 @@ function_and_variable_visibility (bool whole_program)\n       else if ((vnode = varpool_node_for_asm (p->target)) != NULL\n \t       && !DECL_EXTERNAL (vnode->decl))\n         {\n-\t  /* Weakrefs alias symbols from other compilation unit.  In the case\n-\t     the destination of weakref became available because of LTO, we must\n-\t     mark it as needed.  */\n-\t  if (in_lto_p\n-\t      && lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl))\n-\t      && !vnode->needed)\n-\t    varpool_mark_needed_node (vnode);\n+\t  varpool_mark_needed_node (vnode);\n \t  gcc_assert (vnode->needed);\n \t  pointer_set_insert (aliased_vnodes, vnode);\n \t  if (dump_file)"}]}