{"sha": "421844e7209277ce775c5b635a5cc76906df94e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxODQ0ZTcyMDkyNzdjZTc3NWM1YjYzNWE1Y2M3NjkwNmRmOTRlOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-22T22:52:32Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-22T22:52:32Z"}, "message": "cp-tree.h (IDENTIFIER_TYPENAME_P): Use a flag, not strncmp.\n\n\t* cp-tree.h (IDENTIFIER_TYPENAME_P): Use a flag, not strncmp.\n\t(DECL_CONV_FN_P): Simplify.\n\t(DECL_OPERATOR): Remove.\n\t(language_to_string): Declare.\n\t* decl.c (duplicate_decls): Fix typo in comment.\n\t(grokdeclarator): Adjust use of IDENTIFIER_TYPENAME_P.\n\t(grok_op_properties): Use DECL_CONV_FN_P instead of\n\tIDENTIFIER_TYPENAME_P.\n\t* dump.c (dequeue_and_dump): Dump the language linkage of\n\tdeclarations.\n\t* error.c (language_to_string): Give it external linkage.\n\t* method.c (build_typename_overload): Set IDENTIFIER_TYPENAME_P.\n\t(implicitly_declare_fn): Set DECL_LANGUAGE.\n\t* pt.c (check_explicit_specialization): Use DECL_CONV_FN_P, not\n\tIDENTIFIER_TYPENAME_P.\n\t(tsubst_decl): Likewise.\n\t(tsubst_copy): Adjust use of IDENTIFIER_TYPENAME_P.\n\t* semantics.c (finish_member_declaration): Don't mark members of\n\tclasses declared in an extern \"C\" region as extern \"C\".\n\nFrom-SVN: r34095", "tree": {"sha": "6319116f418cc5370863bfb90a208f517c9c0b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6319116f418cc5370863bfb90a208f517c9c0b29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421844e7209277ce775c5b635a5cc76906df94e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421844e7209277ce775c5b635a5cc76906df94e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421844e7209277ce775c5b635a5cc76906df94e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421844e7209277ce775c5b635a5cc76906df94e9/comments", "author": null, "committer": null, "parents": [{"sha": "46972a3631a4753e90899e09149fc6febbd64c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46972a3631a4753e90899e09149fc6febbd64c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46972a3631a4753e90899e09149fc6febbd64c73"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "5fa56d00296aebc59d1bc0b5ca63fba5aa695942", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -1,3 +1,25 @@\n+2000-05-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (IDENTIFIER_TYPENAME_P): Use a flag, not strncmp.\n+\t(DECL_CONV_FN_P): Simplify.\n+\t(DECL_OPERATOR): Remove.\n+\t(language_to_string): Declare.\n+\t* decl.c (duplicate_decls): Fix typo in comment.\n+\t(grokdeclarator): Adjust use of IDENTIFIER_TYPENAME_P.\n+\t(grok_op_properties): Use DECL_CONV_FN_P instead of\n+\tIDENTIFIER_TYPENAME_P.\n+\t* dump.c (dequeue_and_dump): Dump the language linkage of\n+\tdeclarations.\n+\t* error.c (language_to_string): Give it external linkage.\n+\t* method.c (build_typename_overload): Set IDENTIFIER_TYPENAME_P.\n+\t(implicitly_declare_fn): Set DECL_LANGUAGE.\n+\t* pt.c (check_explicit_specialization): Use DECL_CONV_FN_P, not\n+\tIDENTIFIER_TYPENAME_P.\n+\t(tsubst_decl): Likewise.\n+\t(tsubst_copy): Adjust use of IDENTIFIER_TYPENAME_P.\n+\t* semantics.c (finish_member_declaration): Don't mark members of\n+\tclasses declared in an extern \"C\" region as extern \"C\".\n+\t\n 2000-05-22  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* decl2.c (qualified_lookup_using_namespace): Look through"}, {"sha": "1cc9740a3f7f789101370eafca159f518db19563", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -73,6 +73,7 @@ Boston, MA 02111-1307, USA.  */\n           or FIELD_DECL).\n       NEED_TEMPORARY_P (in REF_BIND, BASE_CONV)\n       SCOPE_PARTIAL_P (in SCOPE_STMT)\n+      IDENTIFIER_TYPENAME_P (in IDENTIFIER_NODE)\n    5: BINFO_PRIMARY_MARKED_P (in BINFO)\n    6: BINFO_VBASE_PRIMARY_P (in BINFO)\n \n@@ -484,10 +485,8 @@ struct tree_srcloc\n \n /* Nonzero if this identifier is the name of a type-conversion\n    operator.  */\n-#define IDENTIFIER_TYPENAME_P(NODE)\t\t\t\\\n-  (! strncmp (IDENTIFIER_POINTER (NODE),\t\t\\\n-              OPERATOR_TYPENAME_FORMAT,\t\t\t\\\n-\t      strlen (OPERATOR_TYPENAME_FORMAT)))\n+#define IDENTIFIER_TYPENAME_P(NODE) \\\n+  (TREE_LANG_FLAG_4 (NODE))\n \n /* Nonzero if this identifier is the name of a constructor or\n    destructor.  */\n@@ -1972,8 +1971,8 @@ struct lang_decl\n   (DECL_LANG_SPECIFIC (NODE)->cloned_function)\n \n /* Non-zero if NODE is a user-defined conversion operator.  */\n-#define DECL_CONV_FN_P(NODE)\t\t\t\t\t\t     \\\n-  (IDENTIFIER_TYPENAME_P (DECL_NAME (NODE)) && TREE_TYPE (DECL_NAME (NODE)))\n+#define DECL_CONV_FN_P(NODE) \\\n+  (IDENTIFIER_TYPENAME_P (DECL_NAME (NODE)))\n \n /* Non-zero if NODE is an overloaded operator.  */\n #define DECL_OVERLOADED_OPERATOR_P(NODE)\t\\\n@@ -2684,11 +2683,6 @@ extern int flag_new_for_scope;\n #define DECL_THIS_STATIC(NODE) \\\n   DECL_LANG_FLAG_6 (VAR_FUNCTION_OR_PARM_DECL_CHECK (NODE))\n \n-/* Nonzero in FUNCTION_DECL means it is really an operator.\n-   Just used to communicate formatting information to dbxout.c.  */\n-#define DECL_OPERATOR(NODE) \\\n-  (DECL_LANG_SPECIFIC(FUNCTION_DECL_CHECK (NODE))->decl_flags.operator_attr)\n-\n /* Nonzero if TYPE is an anonymous union or struct type.  We have to use a\n    flag for this because \"A union for which objects or pointers are\n    declared is not an anonymous union\" [class.union].  */\n@@ -4084,6 +4078,7 @@ extern const char *context_as_string            PARAMS ((tree, enum tree_string_\n extern const char *lang_decl_name\t\tPARAMS ((tree, int));\n extern const char *cp_file_of\t\t\tPARAMS ((tree));\n extern int cp_line_of\t\t\t\tPARAMS ((tree));\n+extern const char *language_to_string           PARAMS ((enum languages, int));\n \n /* in except.c */\n extern void init_exception_processing\t\tPARAMS ((void));"}, {"sha": "2fd0fe109e0e6ff4c23d6e7aee22bc36a82e6a27", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -3126,9 +3126,9 @@ duplicate_decls (newdecl, olddecl)\n \t  DECL_THIS_STATIC (olddecl) = 1;\n \t  TREE_PUBLIC (olddecl) = 0;\n \n-\t  /* Make the olddeclaration consistent with the new one so that\n-\t     all remnants of the builtin-ness of this function will be\n-\t     banished.  */\n+\t  /* Make the old declaration consistent with the new one so\n+\t     that all remnants of the builtin-ness of this function\n+\t     will be banished.  */\n \t  DECL_LANGUAGE (olddecl) = DECL_LANGUAGE (newdecl);\n \t  DECL_RTL (olddecl) = DECL_RTL (newdecl);\n \t  DECL_ASSEMBLER_NAME (olddecl) = DECL_ASSEMBLER_NAME (newdecl);\n@@ -9643,9 +9643,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\t  dname);\n \t\tname = IDENTIFIER_POINTER (dname);\n \t      }\n-\t    if (! IDENTIFIER_OPNAME_P (dname)\n-\t\t/* GNU/Linux headers use '__op'.  Arrgh.  */\n-\t\t|| (IDENTIFIER_TYPENAME_P (dname) && ! TREE_TYPE (dname)))\n+\t    else if (!IDENTIFIER_OPNAME_P (dname))\n \t      name = IDENTIFIER_POINTER (dname);\n \t    else\n \t      {\n@@ -12183,7 +12181,7 @@ grok_op_properties (decl, virtualp, friendp)\n \t an enumeration, or a reference to an enumeration.  13.4.0.6 */\n       if (! methodp || DECL_STATIC_FUNCTION_P (decl))\n \t{\n-\t  if (IDENTIFIER_TYPENAME_P (name)\n+\t  if (DECL_CONV_FN_P (decl)\n \t      || name == ansi_opname[(int) CALL_EXPR]\n \t      || name == ansi_opname[(int) MODIFY_EXPR]\n \t      || name == ansi_opname[(int) COMPONENT_REF]"}, {"sha": "16cbba399b7daabf7713a56bf01d786568b65710", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -395,6 +395,8 @@ dequeue_and_dump (di)\n \tdump_string (di, \"artificial\");\n       if (TREE_CHAIN (t))\n \tdump_child (\"chan\", TREE_CHAIN (t));\n+      if (DECL_LANG_SPECIFIC (t) && DECL_LANGUAGE (t) != lang_cplusplus)\n+\tdump_string (di, language_to_string (DECL_LANGUAGE (t), 0));\n     }\n   else if (code_class == 't')\n     {"}, {"sha": "bfd921f5aadc82f51efca6348fd6ecbef0f7537c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -64,7 +64,6 @@ static const char *cv_to_string\t\t\tPARAMS ((tree, int));\n static const char *decl_to_string\t\tPARAMS ((tree, int));\n static const char *expr_to_string\t\tPARAMS ((tree, int));\n static const char *fndecl_to_string\t\tPARAMS ((tree, int));\n-static const char *language_to_string\t\tPARAMS ((enum languages, int));\n static const char *op_to_string\t\t\tPARAMS ((enum tree_code, int));\n static const char *parm_to_string\t\tPARAMS ((int, int));\n static const char *type_to_string\t\tPARAMS ((tree, int));\n@@ -2267,7 +2266,7 @@ code_to_string (c, v)\n   return tree_code_name [c];\n }\n \n-static const char *\n+const char *\n language_to_string (c, v)\n      enum languages c;\n      int v ATTRIBUTE_UNUSED;"}, {"sha": "53b51536bb94cde1c80bd1cb2ad4adbfd89ed1cd", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -1766,6 +1766,7 @@ build_typename_overload (type)\n   build_mangled_name (type, 0, 1);\n   id = get_identifier (obstack_base (&scratch_obstack));\n   IDENTIFIER_OPNAME_P (id) = 1;\n+  IDENTIFIER_TYPENAME_P (id) = 1;\n   TREE_TYPE (id) = type;\n   end_squangling ();\n   return id;\n@@ -2580,6 +2581,9 @@ implicitly_declare_fn (kind, type, const_p)\n   DECL_NOT_REALLY_EXTERN (fn) = 1;\n   DECL_THIS_INLINE (fn) = 1;\n   DECL_INLINE (fn) = 1;\n+  /* Even within an `extern \"C\"' block, members get C++ linkage.  See\n+     [dcl.link] for details.  */\n+  DECL_LANGUAGE (fn) = lang_cplusplus;\n   defer_fn (fn);\n   \n   return fn;"}, {"sha": "04cac4e04e7fe4c0f9c5949e31b6a86bf82820ac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -1392,7 +1392,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t      name = is_constructor ? ctor_identifier : dtor_identifier;\n \t    }\n \n-\t  if (!IDENTIFIER_TYPENAME_P (name))\n+\t  if (!DECL_CONV_FN_P (decl))\n \t    {\n \t      idx = lookup_fnfields_1 (ctype, name);\n \t      if (idx >= 0)\n@@ -5687,7 +5687,7 @@ tsubst_decl (t, args, type, in_decl)\n \t\t\t      /*complain=*/1, t,\n \t\t\t      /*entering_scope=*/1);\n \n-\tif (member && IDENTIFIER_TYPENAME_P (DECL_NAME (r)))\n+\tif (member && DECL_CONV_FN_P (r))\n \t  /* Type-conversion operator.  Reconstruct the name, in\n \t     case it's the name of one of the template's parameters.  */\n \t  DECL_NAME (r) = build_typename_overload (TREE_TYPE (type));\n@@ -7055,12 +7055,9 @@ tsubst_copy (t, args, complain, in_decl)\n       return tsubst (t, args, complain, in_decl);\n \n     case IDENTIFIER_NODE:\n-      if (IDENTIFIER_TYPENAME_P (t)\n-\t  /* Make sure it's not just a variable named `__opr', for instance,\n-\t     which can occur in some existing code.  */\n-\t  && TREE_TYPE (t))\n-\treturn build_typename_overload\n-\t  (tsubst (TREE_TYPE (t), args, complain, in_decl));\n+      if (IDENTIFIER_TYPENAME_P (t))\n+\treturn (build_typename_overload\n+\t\t(tsubst (TREE_TYPE (t), args, complain, in_decl)));\n       else\n \treturn t;\n "}, {"sha": "b5cf6890c1f9e38d783827a3fd01bb57e3c4c605", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421844e7209277ce775c5b635a5cc76906df94e9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=421844e7209277ce775c5b635a5cc76906df94e9", "patch": "@@ -2004,6 +2004,13 @@ finish_member_declaration (decl)\n   /* Mark the DECL as a member of the current class.  */\n   DECL_CONTEXT (decl) = current_class_type;\n \n+  /* [dcl.link]\n+\n+     A C language linkage is ignored for the names of class members\n+     and the member function type of class member functions.  */\n+  if (DECL_LANG_SPECIFIC (decl) && DECL_LANGUAGE (decl) == lang_c)\n+    DECL_LANGUAGE (decl) = lang_cplusplus;\n+\n   /* Put functions on the TYPE_METHODS list and everything else on the\n      TYPE_FIELDS list.  Note that these are built up in reverse order.\n      We reverse them (to obtain declaration order) in finish_struct.  */"}]}