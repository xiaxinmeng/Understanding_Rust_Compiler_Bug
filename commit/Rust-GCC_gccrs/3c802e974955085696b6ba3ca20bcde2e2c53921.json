{"sha": "3c802e974955085696b6ba3ca20bcde2e2c53921", "node_id": "C_kwDOANBUbNoAKDNjODAyZTk3NDk1NTA4NTY5NmI2YmEzY2EyMGJjZGUyZTJjNTM5MjE", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-03-11T10:19:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:48Z"}, "message": "[Ada] Allow inlining for proof inside generics\n\nFor local subprograms without contracts inside generics, allow their\ninlining for proof in GNATprove mode. This requires forbidding the\ninlining of subprograms which contain references to object renamings,\nwhich would be replaced in the SPARK expansion and violate assumptions\nof the inlining code.\n\ngcc/ada/\n\n\t* exp_spark.adb (Expand_SPARK_Potential_Renaming): Deal with no\n\tentity case.\n\t* inline.ads (Check_Object_Renaming_In_GNATprove_Mode): New\n\tprocedure.\n\t* inline.adb (Check_Object_Renaming_In_GNATprove_Mode): New\n\tprocedure.\n\t(Can_Be_Inlined_In_GNATprove_Mode): Remove case forbidding\n\tinlining for subprograms inside generics.\n\t* sem_ch12.adb (Copy_Generic_Node): Preserve global entities\n\twhen inlining in GNATprove mode.\n\t* sem_ch6.adb (Analyse_Subprogram_Body_Helper): Remove body to\n\tinline if renaming is detected in GNATprove mode.", "tree": {"sha": "981dce3e0621d37e60a6bc67d45b9cf4915312f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/981dce3e0621d37e60a6bc67d45b9cf4915312f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c802e974955085696b6ba3ca20bcde2e2c53921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c802e974955085696b6ba3ca20bcde2e2c53921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c802e974955085696b6ba3ca20bcde2e2c53921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c802e974955085696b6ba3ca20bcde2e2c53921/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "867bf6f087e9566339cecce358319603ecd08248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867bf6f087e9566339cecce358319603ecd08248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/867bf6f087e9566339cecce358319603ecd08248"}], "stats": {"total": 113, "additions": 103, "deletions": 10}, "files": [{"sha": "c89d604aa8098224b9a713581e1c6125b9789d63", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=3c802e974955085696b6ba3ca20bcde2e2c53921", "patch": "@@ -850,9 +850,12 @@ package body Exp_SPARK is\n    --  Start of processing for Expand_SPARK_Potential_Renaming\n \n    begin\n-      --  Replace a reference to a renaming with the actual renamed object\n+      --  Replace a reference to a renaming with the actual renamed object.\n+      --  Protect against previous errors leaving no entity in N.\n \n-      if Is_Object (Obj_Id) then\n+      if Present (Obj_Id)\n+        and then Is_Object (Obj_Id)\n+      then\n          Ren := Renamed_Object (Obj_Id);\n \n          if Present (Ren) then"}, {"sha": "cc10c2933e4dec98af4f402d632a38a206ffdada", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 69, "deletions": 7, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=3c802e974955085696b6ba3ca20bcde2e2c53921", "patch": "@@ -1893,13 +1893,6 @@ package body Inline is\n       then\n          return False;\n \n-      --  Subprograms in generic instances are currently not inlined, as this\n-      --  interacts badly with the expansion of object renamings in GNATprove\n-      --  mode.\n-\n-      elsif Instantiation_Location (Sloc (Id)) /= No_Location then\n-         return False;\n-\n       --  Do not inline subprograms and entries defined inside protected types,\n       --  which typically are not helper subprograms, which also avoids getting\n       --  spurious messages on calls that cannot be inlined.\n@@ -2643,6 +2636,75 @@ package body Inline is\n       end if;\n    end Check_And_Split_Unconstrained_Function;\n \n+   ---------------------------------------------\n+   -- Check_Object_Renaming_In_GNATprove_Mode --\n+   ---------------------------------------------\n+\n+   procedure Check_Object_Renaming_In_GNATprove_Mode (Spec_Id : Entity_Id) is\n+      Decl      : constant Node_Id := Unit_Declaration_Node (Spec_Id);\n+      Body_Decl : constant Node_Id :=\n+        Unit_Declaration_Node (Corresponding_Body (Decl));\n+\n+      function Check_Object_Renaming (N : Node_Id) return Traverse_Result;\n+      --  Returns Abandon on node N if this is a reference to an object\n+      --  renaming, which will be expanded into the renamed object in\n+      --  GNATprove mode.\n+\n+      ---------------------------\n+      -- Check_Object_Renaming --\n+      ---------------------------\n+\n+      function Check_Object_Renaming (N : Node_Id) return Traverse_Result is\n+      begin\n+         case Nkind (Original_Node (N)) is\n+            when N_Expanded_Name\n+               | N_Identifier\n+            =>\n+               declare\n+                  Obj_Id : constant Entity_Id := Entity (Original_Node (N));\n+               begin\n+                  --  Recognize the case when SPARK expansion rewrites a\n+                  --  reference to an object renaming.\n+\n+                  if Present (Obj_Id)\n+                    and then Is_Object (Obj_Id)\n+                    and then Present (Renamed_Object (Obj_Id))\n+                    and then Nkind (Renamed_Object (Obj_Id)) not in N_Entity\n+\n+                    --  Copy_Generic_Node called for inlining expects the\n+                    --  references to global entities to have the same kind\n+                    --  in the \"generic\" code and its \"instantiation\".\n+\n+                    and then Nkind (Original_Node (N)) /=\n+                      Nkind (Renamed_Object (Obj_Id))\n+                  then\n+                     return Abandon;\n+                  else\n+                     return OK;\n+                  end if;\n+               end;\n+\n+            when others =>\n+               return OK;\n+         end case;\n+      end Check_Object_Renaming;\n+\n+      function Check_All_Object_Renamings is new\n+        Traverse_Func (Check_Object_Renaming);\n+\n+   --  Start of processing for Check_Object_Renaming_In_GNATprove_Mode\n+\n+   begin\n+      --  Subprograms with object renamings replaced by the special SPARK\n+      --  expansion cannot be inlined.\n+\n+      if Check_All_Object_Renamings (Body_Decl) /= OK then\n+         Cannot_Inline (\"cannot inline & (object renaming)?\",\n+                        Body_Decl, Spec_Id);\n+         Set_Body_To_Inline (Decl, Empty);\n+      end if;\n+   end Check_Object_Renaming_In_GNATprove_Mode;\n+\n    -------------------------------------\n    -- Check_Package_Body_For_Inlining --\n    -------------------------------------"}, {"sha": "05aaac751e6120987a6a22007d3e618132cfb546", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=3c802e974955085696b6ba3ca20bcde2e2c53921", "patch": "@@ -198,6 +198,15 @@ package Inline is\n    --  cases documented in Check_Body_To_Inline) then build the body-to-inline\n    --  associated with N and attach it to the declaration node of Spec_Id.\n \n+   procedure Check_Object_Renaming_In_GNATprove_Mode (Spec_Id : Entity_Id)\n+   with\n+     Pre => GNATprove_Mode;\n+   --  This procedure is called only in GNATprove mode, on subprograms for\n+   --  which a Body_To_Inline was created, to check if the subprogram has\n+   --  references to object renamings which will be replaced by the special\n+   --  SPARK expansion into nodes of a different kind, which is not expected\n+   --  by the inlining mechanism. In that case, the Body_To_Inline is deleted.\n+\n    procedure Check_Package_Body_For_Inlining (N : Node_Id; P : Entity_Id);\n    --  If front-end inlining is enabled and a package declaration contains\n    --  inlined subprograms, load and compile the package body to collect the"}, {"sha": "bc083359813a6fd7fc63bfb5f11340e0d6695e54", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3c802e974955085696b6ba3ca20bcde2e2c53921", "patch": "@@ -8122,7 +8122,10 @@ package body Sem_Ch12 is\n                      Set_Entity (New_N, Entity (Name (Assoc)));\n \n                   elsif Nkind (Assoc) in N_Entity\n-                    and then Expander_Active\n+                    and then (Expander_Active or\n+                                (GNATprove_Mode\n+                                  and then not In_Spec_Expression\n+                                  and then not Inside_A_Generic))\n                   then\n                      --  Inlining case: we are copying a tree that contains\n                      --  global entities, which are preserved in the copy to be"}, {"sha": "2939394d88d7f743ab114273ce6b8a283df3a668", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c802e974955085696b6ba3ca20bcde2e2c53921/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3c802e974955085696b6ba3ca20bcde2e2c53921", "patch": "@@ -5459,6 +5459,22 @@ package body Sem_Ch6 is\n          end;\n       end;\n \n+      --  Check if a Body_To_Inline was created, but the subprogram has\n+      --  references to object renamings which will be replaced by the special\n+      --  SPARK expansion into nodes of a different kind, which is not expected\n+      --  by the inlining mechanism. In that case, the Body_To_Inline is\n+      --  deleted prior to being analyzed. This check needs to take place\n+      --  after analysis of the subprogram body.\n+\n+      if GNATprove_Mode\n+        and then Present (Spec_Id)\n+        and then\n+          Nkind (Unit_Declaration_Node (Spec_Id)) = N_Subprogram_Declaration\n+        and then Present (Body_To_Inline (Unit_Declaration_Node (Spec_Id)))\n+      then\n+         Check_Object_Renaming_In_GNATprove_Mode (Spec_Id);\n+      end if;\n+\n       --  Check for variables that are never modified\n \n       declare"}]}