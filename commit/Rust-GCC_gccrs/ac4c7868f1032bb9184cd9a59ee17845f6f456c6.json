{"sha": "ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM0Yzc4NjhmMTAzMmJiOTE4NGNkOWE1OWVlMTc4NDVmNmY0NTZjNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-10-17T20:00:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-17T20:00:38Z"}, "message": "decl.c (grokfndecl): Remove redundant use of in_system_header_at.\n\n/cp\n2019-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokfndecl): Remove redundant use of in_system_header_at.\n\t(compute_array_index_type_loc): Likewise.\n\t(grokdeclarator): Likewise.\n\t* error.c (cp_printer): Likewise.\n\t* lambda.c (add_default_capture): Likewise.\n\t* parser.c (cp_parser_primary_expression): Likewise.\n\t(cp_parser_selection_statement): Likewise.\n\t(cp_parser_toplevel_declaration): Likewise.\n\t(cp_parser_enumerator_list): Likewise.\n\t(cp_parser_using_declaration): Likewise.\n\t(cp_parser_member_declaration): Likewise.\n\t(cp_parser_exception_specification_opt): Likewise.\n\t(cp_parser_std_attribute_spec): Likewise.\n\t* pt.c (do_decl_instantiation): Likewise.\n\t(do_type_instantiation): Likewise.\n\t* typeck.c (cp_build_unary_op): Likewise.\n\n\t* decl.c (check_tag_decl): Pass to in_system_header_at the same\n\tlocation used for the permerror.\n\t(grokdeclarator): Likewise.\n\n\t* decl.c (check_tag_decl): Use locations[ds_typedef] in error_at.\n\n/testsuite\n2019-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.old-deja/g++.other/decl9.C: Check locations too.\n\nFrom-SVN: r277133", "tree": {"sha": "087cdb040fedacacd6a432cb39fa755b1100c9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/087cdb040fedacacd6a432cb39fa755b1100c9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/comments", "author": null, "committer": null, "parents": [{"sha": "8228c8f2a54be12c70070d4eb2cd64483782b138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8228c8f2a54be12c70070d4eb2cd64483782b138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8228c8f2a54be12c70070d4eb2cd64483782b138"}], "stats": {"total": 104, "additions": 58, "deletions": 46}, "files": [{"sha": "d07a5e59eb83f57326920e138a1636b20e2b2724", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -1,3 +1,28 @@\n+2019-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokfndecl): Remove redundant use of in_system_header_at.\n+\t(compute_array_index_type_loc): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* error.c (cp_printer): Likewise.\n+\t* lambda.c (add_default_capture): Likewise.\n+\t* parser.c (cp_parser_primary_expression): Likewise.\n+\t(cp_parser_selection_statement): Likewise.\n+\t(cp_parser_toplevel_declaration): Likewise.\n+\t(cp_parser_enumerator_list): Likewise.\n+\t(cp_parser_using_declaration): Likewise.\n+\t(cp_parser_member_declaration): Likewise.\n+\t(cp_parser_exception_specification_opt): Likewise.\n+\t(cp_parser_std_attribute_spec): Likewise.\n+\t* pt.c (do_decl_instantiation): Likewise.\n+\t(do_type_instantiation): Likewise.\n+\t* typeck.c (cp_build_unary_op): Likewise.\n+\n+\t* decl.c (check_tag_decl): Pass to in_system_header_at the same\n+\tlocation used for the permerror.\n+\t(grokdeclarator): Likewise.\n+\n+\t* decl.c (check_tag_decl): Use locations[ds_typedef] in error_at.\n+\n 2019-10-17  Jason Merrill  <jason@redhat.com>\n \n \t* cp-gimplify.c (cp_gimplify_expr): Use get_initialized_tmp_var."}, {"sha": "35fa9e92aa57d3945c55874bc7991987a5054ea2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -4912,9 +4912,9 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n \t      \"multiple types in one declaration\");\n   else if (declspecs->redefined_builtin_type)\n     {\n-      if (!in_system_header_at (input_location))\n-\tpermerror (declspecs->locations[ds_redefined_builtin_type_spec],\n-\t\t   \"redeclaration of C++ built-in type %qT\",\n+      location_t loc = declspecs->locations[ds_redefined_builtin_type_spec];\n+      if (!in_system_header_at (loc))\n+\tpermerror (loc, \"redeclaration of C++ built-in type %qT\",\n \t\t   declspecs->redefined_builtin_type);\n       return NULL_TREE;\n     }\n@@ -4963,7 +4963,8 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n \t --end example]  */\n       if (saw_typedef)\n \t{\n-\t  error (\"missing type-name in typedef-declaration\");\n+\t  error_at (declspecs->locations[ds_typedef],\n+\t\t    \"missing type-name in typedef-declaration\");\n \t  return NULL_TREE;\n \t}\n       /* Anonymous unions are objects, so they can have specifiers.  */;\n@@ -9307,7 +9308,6 @@ grokfndecl (tree ctype,\n \t    }\n \t  /* 17.6.3.3.5  */\n \t  if (suffix[0] != '_'\n-\t      && !in_system_header_at (location)\n \t      && !current_function_decl && !(friendp && !funcdef_flag))\n \t    warning_at (location, OPT_Wliteral_suffix,\n \t\t\t\"literal operator suffixes not preceded by %<_%>\"\n@@ -10015,8 +10015,6 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n \t       indicated by the state of complain), so that\n \t       another substitution can be found.  */\n \t    return error_mark_node;\n-\t  else if (in_system_header_at (input_location))\n-\t    /* Allow them in system headers because glibc uses them.  */;\n \t  else if (name)\n \t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"ISO C++ forbids zero-size array %qD\", name);\n@@ -10983,7 +10981,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n       if (type_was_error_mark_node)\n \t/* We've already issued an error, don't complain more.  */;\n-      else if (in_system_header_at (input_location) || flag_ms_extensions)\n+      else if (in_system_header_at (id_loc) || flag_ms_extensions)\n \t/* Allow it, sigh.  */;\n       else if (! is_main)\n \tpermerror (id_loc, \"ISO C++ forbids declaration of %qs with no type\",\n@@ -11016,7 +11014,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n       /* Don't pedwarn if the alternate \"__intN__\" form has been used instead\n \t of \"__intN\".  */\n-      else if (!int_n_alt && pedantic && ! in_system_header_at (input_location))\n+      else if (!int_n_alt && pedantic)\n \tpedwarn (declspecs->locations[ds_type_spec], OPT_Wpedantic,\n \t\t \"ISO C++ does not support %<__int%d%> for %qs\",\n \t\t int_n_data[declspecs->int_n_idx].bitsize, name);\n@@ -12674,10 +12672,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t    else\n \t      {\n \t\t/* Array is a flexible member.  */\n-\t\tif (in_system_header_at (input_location))\n-\t\t  /* Do not warn on flexible array members in system\n-\t\t     headers because glibc uses them.  */;\n-\t\telse if (name)\n+\t\tif (name)\n \t\t  pedwarn (id_loc, OPT_Wpedantic,\n \t\t\t   \"ISO C++ forbids flexible array member %qs\", name);\n \t\telse"}, {"sha": "30166f9c4ec25aa839ad3f193035e7cd97df1caa", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -4317,10 +4317,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n void\n maybe_warn_cpp0x (cpp0x_warn_str str)\n {\n-  if ((cxx_dialect == cxx98) && !in_system_header_at (input_location))\n-    /* We really want to suppress this warning in system headers,\n-       because libstdc++ uses variadic templates even when we aren't\n-       in C++0x mode. */\n+  if (cxx_dialect == cxx98)\n     switch (str)\n       {\n       case CPP0X_INITIALIZER_LISTS:"}, {"sha": "f128ed800f68c1783776945b6a349650c68bdc5b", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -697,8 +697,7 @@ add_default_capture (tree lambda_stack, tree id, tree initializer)\n       /* Warn about deprecated implicit capture of this via [=].  */\n       if (cxx_dialect >= cxx2a\n \t  && this_capture_p\n-\t  && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) == CPLD_COPY\n-\t  && !in_system_header_at (LAMBDA_EXPR_LOCATION (lambda)))\n+\t  && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) == CPLD_COPY)\n \t{\n \t  if (warning_at (LAMBDA_EXPR_LOCATION (lambda), OPT_Wdeprecated,\n \t\t\t  \"implicit capture of %qE via %<[=]%> is deprecated \""}, {"sha": "b29ed0c982de15d8933473fff449be81788bece7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -5364,8 +5364,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t  {\n \t    expr = cp_parser_fold_expression (parser, expr);\n \t    if (expr != error_mark_node\n-\t\t&& cxx_dialect < cxx17\n-\t\t&& !in_system_header_at (input_location))\n+\t\t&& cxx_dialect < cxx17)\n \t      pedwarn (input_location, 0, \"fold-expressions only available \"\n \t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \t  }\n@@ -11817,7 +11816,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t  {\n \t    cx = true;\n \t    cp_token *tok = cp_lexer_consume_token (parser->lexer);\n-\t    if (cxx_dialect < cxx17 && !in_system_header_at (tok->location))\n+\t    if (cxx_dialect < cxx17)\n \t      pedwarn (tok->location, 0, \"%<if constexpr%> only available \"\n \t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \t  }\n@@ -13314,8 +13313,7 @@ cp_parser_toplevel_declaration (cp_parser* parser)\n       /* A declaration consisting of a single semicolon is\n \t invalid.  Allow it unless we're being pedantic.  */\n       cp_lexer_consume_token (parser->lexer);\n-      if (!in_system_header_at (input_location))\n-\tpedwarn (input_location, OPT_Wpedantic, \"extra %<;%>\");\n+      pedwarn (input_location, OPT_Wpedantic, \"extra %<;%>\");\n     }\n   else\n     /* Parse the declaration itself.  */\n@@ -19193,7 +19191,7 @@ cp_parser_enumerator_list (cp_parser* parser, tree type)\n       /* If the next token is a `}', there is a trailing comma.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))\n \t{\n-\t  if (cxx_dialect < cxx11 && !in_system_header_at (input_location))\n+\t  if (cxx_dialect < cxx11)\n \t    pedwarn (input_location, OPT_Wpedantic,\n                      \"comma at end of enumerator list\");\n \t  break;\n@@ -19655,8 +19653,7 @@ cp_parser_using_declaration (cp_parser* parser,\n   else if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n     {\n       cp_token *ell = cp_lexer_consume_token (parser->lexer);\n-      if (cxx_dialect < cxx17\n-\t  && !in_system_header_at (ell->location))\n+      if (cxx_dialect < cxx17)\n \tpedwarn (ell->location, 0,\n \t\t \"pack expansion in using-declaration only available \"\n \t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n@@ -24835,7 +24832,6 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t  location_t loc\n \t\t    = cp_lexer_peek_token (parser->lexer)->location;\n \t\t  if (cxx_dialect < cxx2a\n-\t\t      && !in_system_header_at (loc)\n \t\t      && identifier != NULL_TREE)\n \t\t    pedwarn (loc, 0,\n \t\t\t     \"default member initializers for bit-fields \"\n@@ -25692,7 +25688,7 @@ cp_parser_exception_specification_opt (cp_parser* parser, cp_parser_flags flags)\n \t\t\t \"specifications\");\n \t  type_id_list = NULL_TREE;\n \t}\n-      else if (cxx_dialect >= cxx11 && !in_system_header_at (loc))\n+      else if (cxx_dialect >= cxx11)\n \twarning_at (loc, OPT_Wdeprecated,\n \t\t    \"dynamic exception specifications are deprecated in \"\n \t\t    \"C++11\");\n@@ -26680,8 +26676,7 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n \t  if (attr_ns\n \t      && cp_lexer_nth_token_is (parser->lexer, 3, CPP_COLON))\n \t    {\n-\t      if (cxx_dialect < cxx17\n-\t\t  && !in_system_header_at (input_location))\n+\t      if (cxx_dialect < cxx17)\n \t\tpedwarn (input_location, 0,\n \t\t\t \"attribute using prefix only available \"\n \t\t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");"}, {"sha": "7f7f99297c07ba09a1f621637ce74693a00de6c0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -24257,7 +24257,7 @@ do_decl_instantiation (tree decl, tree storage)\n     ;\n   else if (storage == ridpointers[(int) RID_EXTERN])\n     {\n-      if (!in_system_header_at (input_location) && (cxx_dialect == cxx98))\n+      if (cxx_dialect == cxx98)\n \tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"ISO C++ 1998 forbids the use of %<extern%> on explicit \"\n \t\t \"instantiations\");\n@@ -24339,20 +24339,17 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n \n   if (storage != NULL_TREE)\n     {\n-      if (!in_system_header_at (input_location))\n+      if (storage == ridpointers[(int) RID_EXTERN])\n \t{\n-\t  if (storage == ridpointers[(int) RID_EXTERN])\n-\t    {\n-\t      if (cxx_dialect == cxx98)\n-\t\tpedwarn (input_location, OPT_Wpedantic,\n-\t\t\t \"ISO C++ 1998 forbids the use of %<extern%> on \"\n-\t\t\t \"explicit instantiations\");\n-\t    }\n-\t  else\n+\t  if (cxx_dialect == cxx98)\n \t    pedwarn (input_location, OPT_Wpedantic,\n-\t\t     \"ISO C++ forbids the use of %qE\"\n-\t\t     \" on explicit instantiations\", storage);\n+\t\t     \"ISO C++ 1998 forbids the use of %<extern%> on \"\n+\t\t     \"explicit instantiations\");\n \t}\n+      else\n+\tpedwarn (input_location, OPT_Wpedantic,\n+\t\t \"ISO C++ forbids the use of %qE\"\n+\t\t \" on explicit instantiations\", storage);\n \n       if (storage == ridpointers[(int) RID_INLINE])\n \tnomem_p = 1;"}, {"sha": "83604f546fc800119d39b68d08fc177867930890", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -6533,7 +6533,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t    return error_mark_node;\n \t\t  }\n \t\t/* Otherwise, [depr.incr.bool] says this is deprecated.  */\n-\t\telse if (!in_system_header_at (input_location))\n+\t\telse\n \t\t  warning (OPT_Wdeprecated, \"use of an operand of type %qT \"\n \t\t\t   \"in %<operator++%> is deprecated\",\n \t\t\t   boolean_type_node);"}, {"sha": "93f15a54705b755791e1692285c009876cd6281d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -1,3 +1,7 @@\n+2019-10-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.old-deja/g++.other/decl9.C: Check locations too.\n+\n 2019-10-17  Yuliang Wang  <yuliang.wang@arm.com>\n \n \t* gcc.target/aarch64/sve2/eor3_1.c: New test."}, {"sha": "a8d944c589db1e5d1a4ba7f00b10db19257e7463", "filename": "gcc/testsuite/g++.old-deja/g++.other/decl9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac4c7868f1032bb9184cd9a59ee17845f6f456c6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdecl9.C?ref=ac4c7868f1032bb9184cd9a59ee17845f6f456c6", "patch": "@@ -4,7 +4,7 @@\n // Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n typedef struct { } S;           // OK\n-typedef struct { };             // { dg-error \"\" } Missing type-name\n+typedef struct { };             // { dg-error \"1:missing type-name\" } Missing type-name\n \n typedef union { } U;            // OK\n-typedef union { };              // { dg-error \"\" } Missing type-name\n+typedef union { };              // { dg-error \"1:missing type-name\" } Missing type-name"}]}