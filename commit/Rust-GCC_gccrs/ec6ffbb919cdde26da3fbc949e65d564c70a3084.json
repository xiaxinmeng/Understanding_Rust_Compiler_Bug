{"sha": "ec6ffbb919cdde26da3fbc949e65d564c70a3084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM2ZmZiYjkxOWNkZGUyNmRhM2ZiYzk0OWU2NWQ1NjRjNzBhMzA4NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-11T00:16:45Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-11T00:16:45Z"}, "message": "Daily bump.", "tree": {"sha": "5ddf8a859bd2de84100a35f98d0a5afd638915d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ddf8a859bd2de84100a35f98d0a5afd638915d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec6ffbb919cdde26da3fbc949e65d564c70a3084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6ffbb919cdde26da3fbc949e65d564c70a3084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6ffbb919cdde26da3fbc949e65d564c70a3084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6ffbb919cdde26da3fbc949e65d564c70a3084/comments", "author": null, "committer": null, "parents": [{"sha": "a73051a0ea9ce8281e748a74dd924a6eb8fb3723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73051a0ea9ce8281e748a74dd924a6eb8fb3723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73051a0ea9ce8281e748a74dd924a6eb8fb3723"}], "stats": {"total": 583, "additions": 582, "deletions": 1}, "files": [{"sha": "3a385d68c50c928cde6f744166d3a9abc96832fa", "filename": "contrib/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1,3 +1,22 @@\n+2020-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Fix renamed files in\n+\tparse_git_name_status.\n+\t* gcc-changelog/test_email.py: Add test for it.\n+\n+2020-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Add more supported prefixes.\n+\t* gcc-changelog/test_email.py: Fix one flake8 error.\n+\t* gcc-changelog/test_patches.txt: Add tested for newly\n+\tsupported prefixes.\n+\n+2020-06-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* gcc-changelog/git_commit.py (GitCommit.parse_changelog):\n+\tImprove error strings.\n+\t* gcc-changelog/test_email.py: Update expected errors.\n+\n 2020-06-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* gcc-changelog/git_email.py: Set exit status on error."}, {"sha": "b0860738d04637f8e9e0e029e999dc4428e7b8a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1,3 +1,223 @@\n+2020-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95353\n+\tPR middle-end/92939\n+\t* builtins.c (inform_access): New function.\n+\t(check_access): Call it.  Add argument.\n+\t(addr_decl_size): Remove.\n+\t(get_range): New function.\n+\t(compute_objsize): New overload.  Only use compute_builtin_object_size\n+\twith raw memory function.\n+\t(check_memop_access): Pass new argument to compute_objsize and\n+\tcheck_access.\n+\t(expand_builtin_memchr, expand_builtin_strcat): Same.\n+\t(expand_builtin_strcpy, expand_builtin_stpcpy_1): Same.\n+\t(expand_builtin_stpncpy, check_strncat_sizes): Same.\n+\t(expand_builtin_strncat, expand_builtin_strncpy): Same.\n+\t(expand_builtin_memcmp): Same.\n+\t* builtins.h (check_nul_terminated_array): Declare extern.\n+\t(check_access): Add argument.\n+\t(struct access_ref, struct access_data): New structs.\n+\t* gimple-ssa-warn-restrict.c (clamp_offset): New helper.\n+\t(builtin_access::overlap): Call it.\n+\t* tree-object-size.c (decl_init_size): Declare extern.\n+\t(addr_object_size): Correct offset computation.\n+\t* tree-object-size.h (decl_init_size): Declare.\n+\t* tree-ssa-strlen.c (handle_integral_assign): Remove a call\n+\tto maybe_warn_overflow when assigning to an SSA_NAME.\n+\n+2020-06-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_determine_vectorization_factor):\n+\tSkip debug stmts.\n+\t(_loop_vec_info::_loop_vec_info): Likewise.\n+\t(vect_update_vf_for_slp): Likewise.\n+\t(vect_analyze_loop_operations): Likewise.\n+\t(update_epilogue_loop_vinfo): Likewise.\n+\t* tree-vect-patterns.c (vect_determine_precisions): Likewise.\n+\t(vect_pattern_recog): Likewise.\n+\t* tree-vect-slp.c (vect_detect_hybrid_slp): Likewise.\n+\t(_bb_vec_info::_bb_vec_info): Likewise.\n+\t* tree-vect-stmts.c (vect_mark_stmts_to_be_vectorized):\n+\tLikewise.\n+\n+2020-06-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95576\n+\t* tree-vect-slp.c (vect_slp_bb): Skip leading debug stmts.\n+\n+2020-06-10  Haijian Zhang  <z.zhanghaijian@huawei.com>\n+\n+\tPR target/95523\n+\t* config/aarch64/aarch64-sve-builtins.h\n+\t(sve_switcher::m_old_maximum_field_alignment): New member.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(sve_switcher::sve_switcher): Save maximum_field_alignment in\n+\tm_old_maximum_field_alignment and clear maximum_field_alignment.\n+\t(sve_switcher::~sve_switcher): Restore maximum_field_alignment.\n+\n+2020-06-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (_slp_tree::vec_stmts): Make it a vector\n+\tof gimple * stmts.\n+\t(_stmt_vec_info::vec_stmts): Likewise.\n+\t(vec_info::stmt_vec_info_ro): New flag.\n+\t(vect_finish_replace_stmt): Adjust declaration.\n+\t(vect_finish_stmt_generation): Likewise.\n+\t(vectorizable_induction): Likewise.\n+\t(vect_transform_reduction): Likewise.\n+\t(vectorizable_lc_phi): Likewise.\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Do not\n+\tallocate stmt infos for increments.\n+\t(vect_record_grouped_load_vectors): Adjust.\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Likewise.\n+\t(vectorize_fold_left_reduction): Likewise.\n+\t(vect_transform_reduction): Likewise.\n+\t(vect_transform_cycle_phi): Likewise.\n+\t(vectorizable_lc_phi): Likewise.\n+\t(vectorizable_induction): Likewise.\n+\t(vectorizable_live_operation): Likewise.\n+\t(vect_transform_loop): Likewise.\n+\t* tree-vect-patterns.c (vect_pattern_recog): Set stmt_vec_info_ro.\n+\t* tree-vect-slp.c (vect_get_slp_vect_def): Adjust.\n+\t(vect_get_slp_defs): Likewise.\n+\t(vect_transform_slp_perm_load): Likewise.\n+\t(vect_schedule_slp_instance): Likewise.\n+\t(vectorize_slp_instance_root_stmt): Likewise.\n+\t* tree-vect-stmts.c (vect_get_vec_defs_for_operand): Likewise.\n+\t(vect_finish_stmt_generation_1): Do not allocate a stmt info.\n+\t(vect_finish_replace_stmt): Do not return anything.\n+\t(vect_finish_stmt_generation): Likewise.\n+\t(vect_build_gather_load_calls): Adjust.\n+\t(vectorizable_bswap): Likewise.\n+\t(vectorizable_call): Likewise.\n+\t(vectorizable_simd_clone_call): Likewise.\n+\t(vect_create_vectorized_demotion_stmts): Likewise.\n+\t(vectorizable_conversion): Likewise.\n+\t(vectorizable_assignment): Likewise.\n+\t(vectorizable_shift): Likewise.\n+\t(vectorizable_operation): Likewise.\n+\t(vectorizable_scan_store): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.\n+\t(vectorizable_condition): Likewise.\n+\t(vectorizable_comparison): Likewise.\n+\t(vect_transform_stmt): Likewise.\n+\t* tree-vectorizer.c (vec_info::vec_info): Initialize\n+\tstmt_vec_info_ro.\n+\t(vec_info::replace_stmt): Copy over stmt UID rather than\n+\tunsetting/setting a stmt info allocating a new UID.\n+\t(vec_info::set_vinfo_for_stmt): Assert !stmt_vec_info_ro.\n+\n+2020-06-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-loop-versioning.cc (loop_versioning::name_prop::get_value):\n+\tAdd stmt parameter.\n+\t* gimple-ssa-evrp.c (class evrp_folder): New.\n+\t(class evrp_dom_walker): Remove.\n+\t(execute_early_vrp): Use evrp_folder instead of evrp_dom_walker.\n+\t* tree-ssa-ccp.c (ccp_folder::get_value): Add stmt parameter.\n+\t* tree-ssa-copy.c (copy_folder::get_value): Same.\n+\t* tree-ssa-propagate.c (substitute_and_fold_engine::replace_uses_in):\n+\tPass stmt to get_value.\n+\t(substitute_and_fold_engine::replace_phi_args_in): Same.\n+\t(substitute_and_fold_dom_walker::after_dom_children): Call\n+\tpost_fold_bb.\n+\t(substitute_and_fold_dom_walker::foreach_new_stmt_in_bb): New.\n+\t(substitute_and_fold_dom_walker::propagate_into_phi_args): New.\n+\t(substitute_and_fold_dom_walker::before_dom_children): Adjust to\n+\tcall virtual functions for folding, pre_folding, and post folding.\n+\tCall get_value with PHI.  Tweak dump.\n+\t* tree-ssa-propagate.h (class substitute_and_fold_engine):\n+\tNew argument to get_value.\n+\tNew virtual function pre_fold_bb.\n+\tNew virtual function post_fold_bb.\n+\tNew virtual function pre_fold_stmt.\n+\tNew virtual function post_new_stmt.\n+\tNew function propagate_into_phi_args.\n+\t* tree-vrp.c (vrp_folder::get_value): Add stmt argument.\n+\t* vr-values.c (vr_values::extract_range_from_stmt): Adjust dump\n+\toutput.\n+\t(vr_values::fold_cond): New.\n+\t(vr_values::simplify_cond_using_ranges_1): Call fold_cond.\n+\t* vr-values.h (class vr_values): Add\n+\tsimplify_cond_using_ranges_when_edge_is_known.\n+\n+2020-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/94910\n+\t* asan.c (asan_emit_stack_protection): Emit\n+\talso **SavedFlagPtr(FakeStack, class_id) = 0 in order to release\n+\ta stack frame.\n+\n+2020-06-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_mult_cost): Adjust costs for mul.\n+\n+2020-06-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_vfa_access_size): Adjust.\n+\t(vect_record_grouped_load_vectors): Likewise.\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Likewise.\n+\t(vectorize_fold_left_reduction): Likewise.\n+\t(vect_transform_reduction): Likewise.\n+\t(vect_transform_cycle_phi): Likewise.\n+\t(vectorizable_lc_phi): Likewise.\n+\t(vectorizable_induction): Likewise.\n+\t(vectorizable_live_operation): Likewise.\n+\t(vect_transform_loop): Likewise.\n+\t* tree-vect-slp.c (vect_get_slp_defs): New function, split out\n+\tfrom overload.\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand_1): Remove.\n+\t(vect_get_vec_def_for_operand): Likewise.\n+\t(vect_get_vec_def_for_stmt_copy): Likewise.\n+\t(vect_get_vec_defs_for_stmt_copy): Likewise.\n+\t(vect_get_vec_defs_for_operand): New function.\n+\t(vect_get_vec_defs): Likewise.\n+\t(vect_build_gather_load_calls): Adjust.\n+\t(vect_get_gather_scatter_ops): Likewise.\n+\t(vectorizable_bswap): Likewise.\n+\t(vectorizable_call): Likewise.\n+\t(vectorizable_simd_clone_call): Likewise.\n+\t(vect_get_loop_based_defs): Remove.\n+\t(vect_create_vectorized_demotion_stmts): Adjust.\n+\t(vectorizable_conversion): Likewise.\n+\t(vectorizable_assignment): Likewise.\n+\t(vectorizable_shift): Likewise.\n+\t(vectorizable_operation): Likewise.\n+\t(vectorizable_scan_store): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t(vectorizable_load): Likewise.\n+\t(vectorizable_condition): Likewise.\n+\t(vectorizable_comparison): Likewise.\n+\t(vect_transform_stmt): Adjust and remove no longer applicable\n+\tsanity checks.\n+\t* tree-vectorizer.c (vec_info::new_stmt_vec_info): Initialize\n+\tSTMT_VINFO_VEC_STMTS.\n+\t(vec_info::free_stmt_vec_info): Relase it.\n+\t* tree-vectorizer.h (_stmt_vec_info::vectorized_stmt): Remove.\n+\t(_stmt_vec_info::vec_stmts): Add.\n+\t(STMT_VINFO_VEC_STMT): Remove.\n+\t(STMT_VINFO_VEC_STMTS): New.\n+\t(vect_get_vec_def_for_operand_1): Remove.\n+\t(vect_get_vec_def_for_operand): Likewise.\n+\t(vect_get_vec_defs_for_stmt_copy): Likewise.\n+\t(vect_get_vec_def_for_stmt_copy): Likewise.\n+\t(vect_get_vec_defs): New overloads.\n+\t(vect_get_vec_defs_for_operand): New.\n+\t(vect_get_slp_defs): Declare.\n+\n+2020-06-10  Qian Chao  <qianchao9@huawei.com>\n+\n+\tPR tree-optimization/95569\n+\t* trans-mem.c (expand_assign_tm): Ensure that rtmp is marked TREE_ADDRESSABLE.\n+\n+2020-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/92860\n+\t* optc-save-gen.awk: Generate new function cl_optimization_compare.\n+\t* opth-gen.awk: Generate declaration of the function.\n+\n 2020-06-09  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/ppc-auxv.h (PPC_PLATFORM_FUTURE): Allocate"}, {"sha": "1094e86b516ac35e7af13da411015ccd4763f464", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1 +1 @@\n-20200610\n+20200611"}, {"sha": "b4258dccde0377ded5d48fd5203511fa28caaa46", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1,3 +1,212 @@\n+2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-aomoar.ads, libgnat/s-aomoar.adb: New files.\n+\t* libgnat/s-atopar.ads: Move...\n+\t* libgnat/s-aoinar.ads: Here.\n+\t* libgnat/s-atopar.adb: Move...\n+\t* libgnat/s-aoinar.adb: Here.\n+\t* impunit.adb: Update list of runtime files.\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS=): Adjust.\n+\n+2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* snames.ads-tmpl (Name_Characters_Assertion_Check,\n+\tName_Containers_Assertion_Check,\n+\tName_Interfaces_Assertion_Check, Name_IO_Assertion_Check,\n+\tName_Numerics_Assertion_Check, Name_Strings_Assertion_Check,\n+\tName_System_Assertion_Check): New constants.\n+\t* types.ads (Characters_Assertion_Check,\n+\tContainers_Assertion_Check, Interfaces_Assertion_Check,\n+\tIO_Assertion_Check, Numerics_Assertion_Check,\n+\tStrings_Assertion_Check, System_Assertion_Check): New constants.\n+\t(All_Checks): Update accordingly.\n+\n+2020-06-10  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Equivalent_Record_Aggregate): Return Empty\n+\tif Etype of record component has predicates.\n+\n+2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Statements): Implement the notion of\n+\t\"require late initialization\".\n+\n+2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Copy_And_Maybe_Dereference): Temporarily copy\n+\tthe parent node of the original tree when dereferencing.\n+\n+2020-06-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Add a warning when\n+\ttwo actuals in a call overlap, both are composite types that may\n+\tbe passed by reference, and only one of them is writable.\n+\n+2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_In): Use an expression with actions to\n+\tinsert the PE raise statement for the Unchecked_Union case.\n+\n+2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Call): Use idiomatic condition.\n+\t* sem_res.adb (Resolve_Call): Remove obsolete code.\n+\n+2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Copy_And_Maybe_Dereference): New function.\n+\t(Build_Access_Record_Constraint): Use it to copy the prefix.\n+\t(Build_Actual_Array_Constraint): Likewise.\n+\t(Build_Actual_Record_Constraint): Likewise.\n+\n+2020-06-10  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Invariant): Remove the pragma removing code.  It\n+\tdoesn't work to remove the pragma, because various flags are set\n+\tduring Build_Invariant_Procedure_Declaration and\n+\tBuild_Invariant_Procedure_Body that need to be set to avoid the\n+\tspurious warnings.\n+\t* exp_util.adb (Make_Invariant_Call): Avoid calling the\n+\tinvariant-checking procedure if the body is empty. This is an\n+\toptimization.\n+\n+2020-06-10  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Fix gnatmetric\n+\tswitches description.\n+\n+2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* repinfo-input.ads, repinfo-input.adb, repinfo.adb,\n+\trepinfo.ads: Update header.\n+\n+2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (In_Place_Assign_OK): Do not necessarily return\n+\tfalse for a type with discriminants.\n+\t(Convert_To_Assignments): Use Parent_Node and Parent_Kind more\n+\tconsistently.  In the in-place assignment case, first apply a\n+\tdiscriminant check if need be, and be prepared for a rewritten\n+\taggregate as a result.\n+\n+2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* atree.adb, contracts.adb, debug.adb, freeze.adb,\n+\trepinfo-input.adb, repinfo.adb, sem_attr.adb, sem_ch10.adb,\n+\tsem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_ch6.adb,\n+\tsem_ch8.adb, sem_ch9.adb, sem_disp.adb, sem_eval.adb,\n+\tsem_prag.adb: Remove more references to ASIS.\n+\n+2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-secsta.adb (Round_Up): Fix typo in exception\n+\tmessage.\n+\n+2020-06-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch4.adb (P_Membership_Test): Fix typo in a grammar rule.\n+\n+2020-06-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Remove\n+\texpansion of First and Last attributes.\n+\n+2020-06-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Remove folding\n+\tfor Enum_Rep attribute.\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Remove\n+\tduplicated code for folding Enum_Rep attribute.\n+\t* sem_attr.adb (Eval_Attribute): Relax condition for folding\n+\tEnum_Rep attribute; previously dead code is now executed when\n+\tthe attribute prefix is an enumeration literal; refine type in\n+\tprocessing of Enum_Val.\n+\n+2020-06-10  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Adjust the machinery that\n+\ttakes care of late body overriding of initialize, adjust,\n+\tfinalize.  Remove ASIS mode code.\n+\n+2020-06-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads (Access_Subprogram_Wrapper): New attribute of\n+\tSubprogram_Type entities. Denotes subprogram constructed for\n+\tAccess_To_Subprogram types that include pre- and postconditions.\n+\t* einfo.adb: Subprogram bodies for Access_Subprogram_Wrapper.\n+\t* exp_ch6.adb (Expand_Call): An indirect call through an\n+\tAccess_To_subprogram that includes contracts is rewritten as a\n+\tcall to the corresponding Access_ ubprogram_Wrapper. Handle\n+\tderived types that inherit contract from parent.\n+\t* sem_prag.adb (Build_Access_Subprogram_Wrapper): Build\n+\tsubprogram declaration for subprogram that incorporates the\n+\tcontracts of an Access_To_Subprogram type declaration. Build\n+\tcorresponding body and attach it to freeze actions for type.\n+\t* sem_util.ads, sem_util.adb (Is_Access_Subprogram_Wrapper):\n+\tUtility that uses signature of the subprogram to determine\n+\twhether it is a generated wrapper for an Access_To_Subprogram\n+\ttype.\n+\n+2020-06-10  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* par-ch6.adb (P_Subprogram): Make sure the specification\n+\tbelongs to a procedure.\n+\n+2020-06-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (All_Membership_Choices_Static): Assert an AST\n+\tproperty documented in sinfo.ads and simplify an excessive\n+\tcondition.\n+\n+2020-06-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Fix a copy-paste\n+\tmistake in comment.\n+\t* sem_res.adb (Flag_Effectively_Volatile_Objects): Fix a type in\n+\tthe SPARK RM rule number.\n+\t* exp_ch4.adb, sem_util.adb: Fix style in single line comments.\n+\n+2020-06-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aux.ads, sem_aux.adb (Get_Low_Bound): Remove.\n+\n+2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* scn.adb (Determine_License): Remove.\n+\n+2020-06-10  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Add condition to\n+\thandle processing of objects initialized by a call to a function\n+\treturn an anonymous access type.\n+\t* exp_ch6.adb, exp_ch6.ads\n+\t(Has_Unconstrained_Access_Discriminants): Moved to sem_util.adb\n+\t(Needs_Result_Accessibility_Level): Moved to sem_util.adb\n+\t* sem_util.adb, sem_util.ads\n+\t(Has_Unconstrained_Access_Discriminants): Moved from exp_ch6.adb\n+\t(Needs_Result_Accessibility_Level): Moved from exp_ch6.adb\n+\t* sem_res.adb (Valid_Conversion): Add condition for the special\n+\tcase where the operand of a conversion is the result of an\n+\tanonymous access type\n+\n+2020-06-10  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* par-ch6.adb (P_Subprogram): Reject duplicate subprogram\n+\tdeclarations.\n+\n+2020-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Insert_Post_Call_Actions): Deal with the context\n+\tof an if-expression and with a call written in prefixed notation.\n+\n+2020-06-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting of a comment.\n+\t* exp_aggr.adb: Minor reformatting and a grammar correction.\n+\t* exp_attr.adb: Minor reformatting and a typo fix in some\n+\tcomments.\n+\t* sem_ch12.adb: Fix three typos in comments.\n+\n 2020-06-09  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch6.adb (New_Overloaded_Entity): Add missing call to check"}, {"sha": "71085837dd3f3e23354a589c95a8561c64ef953f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1,3 +1,13 @@\n+2020-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/92860\n+\t* c-attribs.c (handle_optimize_attribute):\n+\tSave global options and compare it after parsing of function\n+\tattribute.\n+\t* c-pragma.c (opt_stack::saved_global_options): New field.\n+\t(handle_pragma_push_options): Save global_options.\n+\t(handle_pragma_pop_options): Compare them after pop.\n+\n 2020-06-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/95580"}, {"sha": "c6448360f936636fbeb63473a4df356715cc5b83", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1,3 +1,18 @@\n+2020-06-10  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95440\n+\t* call.c (add_candidates): Use vec_safe_length() for\n+\ttesting the arguments list.\n+\t(build_new_method_call_1): Use vec_safe_is_empty() when\n+\tchecking for an empty args list.\n+\n+2020-06-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95562\n+\t* parser.c (cp_parser_direct_declarator): Clear\n+\tCP_PARSER_FLAGS_DELAY_NOEXCEPT if the declarator kind is not\n+\tcdk_id.\n+\n 2020-06-09  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/95137"}, {"sha": "83751a117d98a8f698557395619dcaaf9f3881bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1,3 +1,62 @@\n+2020-06-10  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR rtl-optimization/51447\n+\t* gcc.c-torture/execute/pr51447.c (main): Preserve call-saved\n+\tregister.\n+\n+2020-06-10  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95440\n+\t* g++.dg/coroutines/pr95440.C: New test.\n+\n+2020-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95353\n+\tPR middle-end/92939\n+\t* c-c++-common/Wstringop-truncation.c: Remove an xfail.\n+\t* gcc.dg/Warray-bounds-46.c: Remove a bogus warning.\n+\t* gcc.dg/Wrestrict-9.c: Disable -Wstringop-overflow.\n+\t* gcc.dg/Wstringop-overflow-12.c: Remove xfails.\n+\t* gcc.dg/Wstringop-overflow-28.c: Same.\n+\t* gcc.dg/builtin-stringop-chk-4.c: Same.\n+\t* gcc.dg/builtin-stringop-chk-5.c: Same.\n+\t* gcc.dg/builtin-stringop-chk-8.c: Same.\n+\t* gcc.dg/strlenopt-74.c: Avoid buffer overflow.\n+\t* gcc.dg/Wstringop-overflow-34.c: New test.\n+\t* gcc.dg/Wstringop-overflow-35.c: New test.\n+\t* gcc.dg/Wstringop-overflow-36.c: New test.\n+\t* gcc.dg/Wstringop-overflow-37.c: New test.\n+\t* gcc.dg/Wstringop-overflow-38.c: New test.\n+\n+2020-06-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95576\n+\t* g++.dg/vect/pr95576.cc: New testcase.\n+\n+2020-06-10  Haijian Zhang  <z.zhanghaijian@huawei.com>\n+\n+\tPR target/95523\n+\t* gcc.target/aarch64/sve/pr95523.c: New test.\n+\n+2020-06-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95562\n+\t* g++.dg/cpp0x/noexcept60.C: New test.\n+\n+2020-06-10  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dse-30.c: Adjust test for folding of\n+\tmemmove happening later.\n+\n+2020-06-10  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/asimd-mull-elem.c: New test.\n+\n+2020-06-10  Qian Chao  <qianchao9@huawei.com>\n+\n+\tPR tree-optimization/95569\n+\t* gcc.dg/tm/pr95569.c: New test.\n+\n 2020-06-09  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* gcc.target/powerpc/clone3.c: New test for using 'future' with"}, {"sha": "6f8e2f2e18682a69fce446fe89b9a7c9e3fd50e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6ffbb919cdde26da3fbc949e65d564c70a3084/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6ffbb919cdde26da3fbc949e65d564c70a3084/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec6ffbb919cdde26da3fbc949e65d564c70a3084", "patch": "@@ -1,3 +1,52 @@\n+2020-06-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/95578\n+\t* include/bits/ranges_algo.h (__lexicographical_compare_fn):\n+\tAlso check that the iterator and sentinel have the same type before\n+\tapplying the unwrapping optimization for __normal_iterator.\n+\tSplit the check into two, one for the first iterator/sentinel\n+\tpair and another for second iterator/sentinel pair.  Remove uses\n+\tof __niter_base, and remove uses of std::move on a\n+\t__normal_iterator.\n+\t* include/bits/ranges_algobase.h (__equal_fn): Likewise.\n+\t(__copy_or_move): Likewise.  Perform similar adjustments for\n+\tthe reverse_iterator and move_iterator optimizations.  Inline\n+\tthe checks into the if-constexprs, and use using-declarations to\n+\tmake them less visually noisy.  Remove uses of __niter_wrap.\n+\t(__copy_or_move_backward): Likewise.\n+\t* testsuite/25_algorithms/copy/95578.cc: New test.\n+\t* testsuite/25_algorithms/copy_backward/95578.cc: New test.\n+\t* testsuite/25_algorithms/equal/95578.cc: New test.\n+\t* testsuite/25_algorithms/lexicographical_compare/95578.cc: New test.\n+\t* testsuite/25_algorithms/move/95578.cc: New test.\n+\t* testsuite/25_algorithms/move_backward/95578.cc: New test.\n+\n+2020-06-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/deque.tcc (__lex_cmp_dit): New.\n+\t(__lexicographical_compare_aux1): Define overloads for deque\n+\titerators.\n+\t* include/bits/stl_algobase.h (__lexicographical_compare::__3way):\n+\tNew static member function.\n+\t(__lexicographical_compare<true>::__3way): Likewise.\n+\t(__lexicographical_compare<true>::__lc): Use __3way.\n+\t(__lexicographical_compare_aux): Rename to\n+\t__lexicographical_compare_aux1 and declare overloads for deque\n+\titerators.\n+\t(__lexicographical_compare_aux): Define new forwarding function\n+\tthat calls __lexicographical_compare_aux1 and declare new overloads\n+\tfor safe iterators.\n+\t(lexicographical_compare): Do not use __niter_base on\n+\tparameters.\n+\t* include/debug/safe_iterator.tcc\n+\t(__lexicographical_compare_aux): Define overloads for safe\n+\titerators.\n+\t* testsuite/25_algorithms/lexicographical_compare/1.cc: Add\n+\tchecks with random access iterators.\n+\t* testsuite/25_algorithms/lexicographical_compare/deque_iterators/1.cc:\n+\tNew test.\n+\n 2020-06-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_iterator.h (move_iterator::operator=): Define."}]}