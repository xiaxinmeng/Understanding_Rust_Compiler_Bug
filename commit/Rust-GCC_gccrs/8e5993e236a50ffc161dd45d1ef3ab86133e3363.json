{"sha": "8e5993e236a50ffc161dd45d1ef3ab86133e3363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1OTkzZTIzNmE1MGZmYzE2MWRkNDVkMWVmM2FiODYxMzNlMzM2Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-10-17T19:09:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-10-17T19:09:53Z"}, "message": "cp-gimplify.c (cp_gimplify_expr): Use get_initialized_tmp_var.\n\n\t* cp-gimplify.c (cp_gimplify_expr): Use get_initialized_tmp_var.\n\nThe comment for get_formal_tmp_var says that it shouldn't be used for\nexpressions whose value might change between initialization and use, and in\nthis case we're creating a temporary precisely because the value might\nchange, so we should use get_initialized_tmp_var instead.\n\nI also noticed that many callers of get_initialized_tmp_var pass NULL for\npost_p, so it seems appropriate to make it a default argument.\n\ngcc/\n\t* gimplify.h (get_initialized_tmp_var): Add default argument to\n\tpost_p.\n\t* gimplify.c (gimplify_self_mod_expr, gimplify_omp_atomic): Remove\n\tNULL post_p argument.\n\t* targhooks (std_gimplify_va_arg_expr): Likewise.\n\nFrom-SVN: r277128", "tree": {"sha": "c5450036b286821b43db98f6d8a071af778b76bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5450036b286821b43db98f6d8a071af778b76bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e5993e236a50ffc161dd45d1ef3ab86133e3363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5993e236a50ffc161dd45d1ef3ab86133e3363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e5993e236a50ffc161dd45d1ef3ab86133e3363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e5993e236a50ffc161dd45d1ef3ab86133e3363/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c11cccc0285f02f117a1e80924fb7673b6486ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11cccc0285f02f117a1e80924fb7673b6486ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11cccc0285f02f117a1e80924fb7673b6486ce9"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "99a6b00bbc81842b78417a20ca4700bb0a9fc006", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e5993e236a50ffc161dd45d1ef3ab86133e3363", "patch": "@@ -1,3 +1,11 @@\n+2019-10-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* gimplify.h (get_initialized_tmp_var): Add default argument to\n+\tpost_p.\n+\t* gimplify.c (gimplify_self_mod_expr, gimplify_omp_atomic): Remove\n+\tNULL post_p argument.\n+\t* targhooks (std_gimplify_va_arg_expr): Likewise.\n+\n 2019-10-17  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (_stmt_vec_info::cond_reduc_code): Remove."}, {"sha": "d5c7e13f64d24ed4e65a16beab7dcfc86d345ebc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e5993e236a50ffc161dd45d1ef3ab86133e3363", "patch": "@@ -1,3 +1,8 @@\n+2019-10-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-gimplify.c (cp_gimplify_expr): Use get_initialized_tmp_var.\n+\t(gimplify_to_rvalue): Remove default NULL argument.\n+\n 2019-10-17  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (builtin_function_1): Merge into ..."}, {"sha": "9fc60c964e0f07c39befe8887089b6ac3c33d6d4", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=8e5993e236a50ffc161dd45d1ef3ab86133e3363", "patch": "@@ -650,7 +650,7 @@ gimplify_to_rvalue (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   if (t == GS_ERROR)\n     return GS_ERROR;\n   else if (is_gimple_variable (*expr_p) && TREE_CODE (*expr_p) != SSA_NAME)\n-    *expr_p = get_initialized_tmp_var (*expr_p, pre_p, NULL);\n+    *expr_p = get_initialized_tmp_var (*expr_p, pre_p);\n   return t;\n }\n \n@@ -767,7 +767,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\t&& (TREE_CODE (op1) == CALL_EXPR\n \t\t    || (SCALAR_TYPE_P (TREE_TYPE (op1))\n \t\t\t&& !TREE_CONSTANT (op1))))\n-\t TREE_OPERAND (*expr_p, 1) = get_formal_tmp_var (op1, pre_p);\n+\t TREE_OPERAND (*expr_p, 1) = get_initialized_tmp_var (op1, pre_p);\n       }\n       ret = GS_OK;\n       break;"}, {"sha": "914bb8eb8d699efe7be36a72b43a59f8fecd9dbc", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8e5993e236a50ffc161dd45d1ef3ab86133e3363", "patch": "@@ -661,8 +661,9 @@ get_formal_tmp_var (tree val, gimple_seq *pre_p)\n    are as in gimplify_expr.  */\n \n tree\n-get_initialized_tmp_var (tree val, gimple_seq *pre_p, gimple_seq *post_p,\n-\t\t\t bool allow_ssa)\n+get_initialized_tmp_var (tree val, gimple_seq *pre_p,\n+\t\t\t gimple_seq *post_p /* = NULL */,\n+\t\t\t bool allow_ssa /* = true */)\n {\n   return internal_get_tmp_var (val, pre_p, post_p, false, allow_ssa);\n }\n@@ -3149,7 +3150,7 @@ gimplify_self_mod_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       if (ret == GS_ERROR)\n \treturn ret;\n \n-      lhs = get_initialized_tmp_var (lhs, pre_p, NULL);\n+      lhs = get_initialized_tmp_var (lhs, pre_p);\n     }\n \n   /* For POINTERs increment, use POINTER_PLUS_EXPR.  */\n@@ -12688,7 +12689,7 @@ gimplify_omp_atomic (tree *expr_p, gimple_seq *pre_p)\n \t  tree bitsize;\n \t  tree tmp_store = tmp_load;\n \t  if (TREE_CODE (*expr_p) == OMP_ATOMIC_CAPTURE_OLD)\n-\t    tmp_store = get_initialized_tmp_var (tmp_load, pre_p, NULL);\n+\t    tmp_store = get_initialized_tmp_var (tmp_load, pre_p);\n \t  if (INTEGRAL_TYPE_P (TREE_TYPE (op1)))\n \t    bitsize = bitsize_int (TYPE_PRECISION (TREE_TYPE (op1)));\n \t  else"}, {"sha": "6c997a769cd9a0745e7945e8bce69575e9008ebb", "filename": "gcc/gimplify.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=8e5993e236a50ffc161dd45d1ef3ab86133e3363", "patch": "@@ -57,7 +57,7 @@ extern gbind *gimple_current_bind_expr (void);\n extern vec<gbind *> gimple_bind_expr_stack (void);\n extern void gimplify_and_add (tree, gimple_seq *);\n extern tree get_formal_tmp_var (tree, gimple_seq *);\n-extern tree get_initialized_tmp_var (tree, gimple_seq *, gimple_seq *,\n+extern tree get_initialized_tmp_var (tree, gimple_seq *, gimple_seq * = NULL,\n \t\t\t\t     bool = true);\n extern void declare_vars (tree, gimple *, bool);\n extern void gimple_add_tmp_var (tree);"}, {"sha": "fee4cc271cd86a2206e18da2c2db24c5e04b0f4f", "filename": "gcc/targhooks.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e5993e236a50ffc161dd45d1ef3ab86133e3363/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8e5993e236a50ffc161dd45d1ef3ab86133e3363", "patch": "@@ -2164,11 +2164,11 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n       real_part = std_gimplify_va_arg_expr (valist,\n \t\t\t\t\t    TREE_TYPE (type), pre_p, NULL);\n-      real_part = get_initialized_tmp_var (real_part, pre_p, NULL);\n+      real_part = get_initialized_tmp_var (real_part, pre_p);\n \n       imag_part = std_gimplify_va_arg_expr (unshare_expr (valist),\n \t\t\t\t\t    TREE_TYPE (type), pre_p, NULL);\n-      imag_part = get_initialized_tmp_var (imag_part, pre_p, NULL);\n+      imag_part = get_initialized_tmp_var (imag_part, pre_p);\n \n       return build2 (COMPLEX_EXPR, type, real_part, imag_part);\n    }\n@@ -2186,7 +2186,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   boundary /= BITS_PER_UNIT;\n \n   /* Hoist the valist value into a temporary for the moment.  */\n-  valist_tmp = get_initialized_tmp_var (valist, pre_p, NULL);\n+  valist_tmp = get_initialized_tmp_var (valist, pre_p);\n \n   /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n      requires greater alignment, we must perform dynamic alignment.  */"}]}