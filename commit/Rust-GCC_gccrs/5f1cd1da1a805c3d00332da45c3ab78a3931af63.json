{"sha": "5f1cd1da1a805c3d00332da45c3ab78a3931af63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxY2QxZGExYTgwNWMzZDAwMzMyZGE0NWMzYWI3OGEzOTMxYWY2Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-27T10:45:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-27T21:21:56Z"}, "message": "c++: Avoid ICE with dependent attribute on type.\n\nWe previously happened to accept this testcase, but never actually did\nanything useful with the attribute.  The patch for PR86379 stopped using\nTREE_TYPE as USING_DECL_SCOPE, so 'using A::b' no longer had TREE_TYPE set,\nso the language-independent decl_attributes started crashing on it.\n\nGNU attributes are more flexible in their placement than C++11 attributes,\nso if we encounter a dependent GNU attribute that syntactically appertains\nto a type rather than the declaration as a whole, move it to the\ndeclaration; that's almost certainly what the user meant, anyway.\n\ngcc/cp/ChangeLog\n2020-04-27  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/90750\n\tPR c++/79585\n\t* decl.c (grokdeclarator): Move dependent attribute to decl.\n\t* decl2.c (splice_template_attributes): No longer static.", "tree": {"sha": "4b729b83f175414d577724f14267b6c8fafbacc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b729b83f175414d577724f14267b6c8fafbacc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f1cd1da1a805c3d00332da45c3ab78a3931af63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1cd1da1a805c3d00332da45c3ab78a3931af63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1cd1da1a805c3d00332da45c3ab78a3931af63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1cd1da1a805c3d00332da45c3ab78a3931af63/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb7ed17aa1102de9f99fb9608f1119eb4df613fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7ed17aa1102de9f99fb9608f1119eb4df613fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7ed17aa1102de9f99fb9608f1119eb4df613fe"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "2b44b24461fd228d9093160fa7720c01d0df2fcf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f1cd1da1a805c3d00332da45c3ab78a3931af63", "patch": "@@ -1,3 +1,10 @@\n+2020-04-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90750\n+\tPR c++/79585\n+\t* decl.c (grokdeclarator): Move dependent attribute to decl.\n+\t* decl2.c (splice_template_attributes): No longer static.\n+\n 2020-04-27  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94772"}, {"sha": "fff0016b3aa2c196b20ad6b888c05285d2e27003", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5f1cd1da1a805c3d00332da45c3ab78a3931af63", "patch": "@@ -6626,6 +6626,7 @@ extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t       tree, bool, tree, tree);\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree, tree, tree);\n+extern tree splice_template_attributes\t\t(tree *, tree);\n extern bool any_dependent_type_attributes_p\t(tree);\n extern tree cp_reconstruct_complex_type\t\t(tree, tree);\n extern bool attributes_naming_typedef_ok\t(tree);"}, {"sha": "cf855dae9096859f49e81473fd0f2cfc04357e29", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5f1cd1da1a805c3d00332da45c3ab78a3931af63", "patch": "@@ -11937,9 +11937,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t    attr_flags |= (int) ATTR_FLAG_FUNCTION_NEXT;\n \t  if (declarator->kind == cdk_array)\n \t    attr_flags |= (int) ATTR_FLAG_ARRAY_NEXT;\n+\t  /* Assume that any attributes that get applied late to templates will\n+\t     DTRT when applied to the declaration as a whole.  */\n+\t  tree late_attrs = splice_template_attributes (&attrs, type);\n \t  returned_attrs = decl_attributes (&type,\n \t\t\t\t\t    chainon (returned_attrs, attrs),\n \t\t\t\t\t    attr_flags);\n+\t  returned_attrs = chainon (late_attrs, returned_attrs);\n \t}\n \n       inner_declarator = declarator->declarator;"}, {"sha": "ac65529a01d1a036371483b4c43c80db4573532a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5f1cd1da1a805c3d00332da45c3ab78a3931af63", "patch": "@@ -1228,7 +1228,7 @@ is_late_template_attribute (tree attr, tree decl)\n    the declaration itself is dependent, so all attributes should be applied\n    at instantiation time.  */\n \n-static tree\n+tree\n splice_template_attributes (tree *attr_p, tree decl)\n {\n   tree *p = attr_p;"}, {"sha": "6e84cccea1f12d0dc0304ca3f0b463b932570ca2", "filename": "gcc/testsuite/g++.dg/ext/attr-type1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-type1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-type1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-type1.C?ref=5f1cd1da1a805c3d00332da45c3ab78a3931af63", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/90750\n+// { dg-do compile { target c++11 } }\n+\n+template <typename> struct S\n+{\n+  static const int b = 64;\n+};\n+\n+template <typename a> struct T: S<a>\n+{\n+  using A = S<a>;\n+  using A::b;\n+  char* __attribute__((aligned(b))) c;\n+};\n+\n+T<int> t;\n+\n+#define SA(X) static_assert (X,#X)\n+SA (alignof(T<int>) == S<int>::b);"}, {"sha": "89c53de88a4686f18fdaa754522d717e0d5aa882", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-26.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1cd1da1a805c3d00332da45c3ab78a3931af63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-26.C?ref=5f1cd1da1a805c3d00332da45c3ab78a3931af63", "patch": "@@ -47,10 +47,10 @@ template <class T>\n void f_var_type_unused ()\n {\n   // The variable's type is marked unused.\n-  T* UNUSED t = new T;   // { dg-bogus \"unused variable\" \"bug 79585\" { xfail *-*-* } }\n+  T* UNUSED t = new T;   // { dg-bogus \"unused variable\" \"bug 79585\" }\n \n   typedef T U;\n-  U* UNUSED u = new U;   // { dg-bogus \"unused variable\" \"bug 79585\" { xfail *-*-* } }\n+  U* UNUSED u = new U;   // { dg-bogus \"unused variable\" \"bug 79585\" }\n \n   typedef T UNUSED U;\n   U v = U ();   // { dg-bogus \"unused variable\" \"bug 79585\" }"}]}