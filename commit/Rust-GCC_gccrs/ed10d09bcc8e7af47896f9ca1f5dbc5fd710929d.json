{"sha": "ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxMGQwOWJjYzhlN2FmNDc4OTZmOWNhMWY1ZGJjNWZkNzEwOTI5ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-11-14T09:06:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-11-14T09:06:12Z"}, "message": "ipa-split.c (struct split_point): Add count.\n\n\t* ipa-split.c (struct split_point): Add count.\n\t(consider_split): Do not compute incoming frequency; compute incoming\n\tcount and store it to split_point.\n\t(split_function): Set count of the call to split part correctly.\n\n\t* testsuite/gcc.dg/tree-ssa/fnsplit-2.c: New testcase.\n\nFrom-SVN: r254720", "tree": {"sha": "3a6b8461491456a3149ce524eb1e518bda31b711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a6b8461491456a3149ce524eb1e518bda31b711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/comments", "author": null, "committer": null, "parents": [{"sha": "9b24c104aeb9dcaa06c0fe1324b8d9ef1fc2d92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b24c104aeb9dcaa06c0fe1324b8d9ef1fc2d92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b24c104aeb9dcaa06c0fe1324b8d9ef1fc2d92a"}], "stats": {"total": 88, "additions": 71, "deletions": 17}, "files": [{"sha": "6d719d316887b1860bac62c1db3e64b5796f09eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "patch": "@@ -1,3 +1,10 @@\n+2017-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-split.c (struct split_point): Add count.\n+\t(consider_split): Do not compute incoming frequency; compute incoming\n+\tcount and store it to split_point.\n+\t(split_function): Set count of the call to split part correctly.\n+\n 2017-11-13  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/altivec.md (altivec_vsumsws_be): Add define_expand."}, {"sha": "9f893915c1749b5121f741f912a73290d21da330", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "patch": "@@ -129,6 +129,10 @@ struct split_point\n   /* Basic block where we split (that will become entry point of new function.  */\n   basic_block entry_bb;\n \n+  /* Count for entering the split part.\n+     This is not count of the entry_bb because it may be in loop.  */\n+  profile_count count;\n+\n   /* Basic blocks we are splitting away.  */\n   bitmap split_bbs;\n \n@@ -426,26 +430,28 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n   edge_iterator ei;\n   gphi_iterator bsi;\n   unsigned int i;\n-  int incoming_freq = 0;\n   tree retval;\n   tree retbnd;\n   bool back_edge = false;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_split_point (dump_file, current);\n \n+  current->count = profile_count::zero ();\n   FOR_EACH_EDGE (e, ei, current->entry_bb->preds)\n     {\n       if (e->flags & EDGE_DFS_BACK)\n \tback_edge = true;\n       if (!bitmap_bit_p (current->split_bbs, e->src->index))\n-        incoming_freq += EDGE_FREQUENCY (e);\n+\tcurrent->count += e->count ();\n     }\n \n-  /* Do not split when we would end up calling function anyway.  */\n-  if (incoming_freq\n-      >= (ENTRY_BLOCK_PTR_FOR_FN (cfun)->count.to_frequency (cfun)\n-\t  * PARAM_VALUE (PARAM_PARTIAL_INLINING_ENTRY_PROBABILITY) / 100))\n+  /* Do not split when we would end up calling function anyway.\n+     Compares are three state, use !(...<...) to also give up when outcome\n+     is unknown.  */\n+  if (!(current->count\n+       < (ENTRY_BLOCK_PTR_FOR_FN (cfun)->count.apply_scale\n+\t   (PARAM_VALUE (PARAM_PARTIAL_INLINING_ENTRY_PROBABILITY), 100))))\n     {\n       /* When profile is guessed, we can not expect it to give us\n \t realistic estimate on likelyness of function taking the\n@@ -454,14 +460,17 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n \t is likely noticeable win.  */\n       if (back_edge\n \t  && profile_status_for_fn (cfun) != PROFILE_READ\n-\t  && incoming_freq\n-\t\t < ENTRY_BLOCK_PTR_FOR_FN (cfun)->count.to_frequency (cfun))\n+\t  && current->count\n+\t\t < ENTRY_BLOCK_PTR_FOR_FN (cfun)->count)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file,\n-\t\t     \"  Split before loop, accepting despite low frequencies %i %i.\\n\",\n-\t\t     incoming_freq,\n-\t\t     ENTRY_BLOCK_PTR_FOR_FN (cfun)->count.to_frequency (cfun));\n+\t    {\n+\t      fprintf (dump_file,\n+\t\t       \"  Split before loop, accepting despite low counts\");\n+\t      current->count.dump (dump_file);\n+\t      fprintf (dump_file, \" \");\n+\t      ENTRY_BLOCK_PTR_FOR_FN (cfun)->count.dump (dump_file);\n+\t    }\n \t}\n       else\n \t{\n@@ -711,14 +720,13 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"  Accepted!\\n\");\n \n-  /* At the moment chose split point with lowest frequency and that leaves\n+  /* At the moment chose split point with lowest count and that leaves\n      out smallest size of header.\n      In future we might re-consider this heuristics.  */\n   if (!best_split_point.split_bbs\n-      || best_split_point.entry_bb->count.to_frequency (cfun)\n-\t > current->entry_bb->count.to_frequency (cfun)\n-      || (best_split_point.entry_bb->count.to_frequency (cfun)\n-\t  == current->entry_bb->count.to_frequency (cfun)\n+      || best_split_point.count\n+\t > current->count\n+      || (best_split_point.count == current->count \n \t  && best_split_point.split_size < current->split_size))\n \t\n     {\n@@ -1446,6 +1454,7 @@ split_function (basic_block return_bb, struct split_point *split_point,\n       }\n     else\n       break;\n+  call_bb->count = split_point->count;\n   e = split_block (split_point->entry_bb, last_stmt);\n   remove_edge (e);\n "}, {"sha": "11a4a121f13a368f58a4dc97ee8327275eb3c9ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "patch": "@@ -1,3 +1,7 @@\n+2017-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/fnsplit-2.c: New testcase.\n+\n 2017-11-13  Fritz Reese <fritzoreese@gmail.com>\n \n \tPR fortran/78240"}, {"sha": "1b9696dcb117be38913423b82299a0ec71e97ee2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/fnsplit-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffnsplit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffnsplit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffnsplit-1.c?ref=ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "patch": "@@ -19,4 +19,5 @@ main(void)\n   return 0;\n }\n /* { dg-final { scan-tree-dump-times \"Splitting function at:\" 1 \"fnsplit\"} } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum\" 0 \"fnsplit\"} } */\n "}, {"sha": "c00213cc18294e15b35b57462cc6a142cd62500e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/fnsplit-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffnsplit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffnsplit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffnsplit-2.c?ref=ed10d09bcc8e7af47896f9ca1f5dbc5fd710929d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fnsplit-blocks-details\" } */\n+void q (void);\n+int b;\n+void test (void);\n+void\n+split_me (int *a)\n+{\n+  if (__builtin_expect (a==0, 0))\n+    do\n+    {\n+      test();\n+      test();\n+      test();\n+      test();\n+      test();\n+    }\n+    while (b);\n+  else\n+    q();\n+}\n+\n+int\n+main(void)\n+{\n+  int i;\n+  for (i = 0; i < 1000; i++)\n+    split_me(&i);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Splitting function at:\" 1 \"fnsplit\"} } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum\" 0 \"fnsplit\"} } */"}]}