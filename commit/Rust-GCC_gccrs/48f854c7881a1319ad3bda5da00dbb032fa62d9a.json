{"sha": "48f854c7881a1319ad3bda5da00dbb032fa62d9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmODU0Yzc4ODFhMTMxOWFkM2JkYTVkYTAwZGJiMDMyZmE2MmQ5YQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-12-10T10:09:10Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-12-10T10:09:10Z"}, "message": "update boehm-gc for powerpc m64 darwin.\n\nboehm-gc:\n\n\t* powerpc_darwin_mach_dep.s:  Update for m64.  Add eh frames.\n\tDo not build or use the picsymbol stub for Darwin >= 9.\n\t* tests/test.c (reverse_test):  Modify count for ppc64-darwin.\n\t* pthread_support.c (GC_get_thread_stack_base): Correct a debug\n\tstatement.\n\nFrom-SVN: r167681", "tree": {"sha": "f55901893a1534081c19939aa6fcd70e3569958e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55901893a1534081c19939aa6fcd70e3569958e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f854c7881a1319ad3bda5da00dbb032fa62d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f854c7881a1319ad3bda5da00dbb032fa62d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f854c7881a1319ad3bda5da00dbb032fa62d9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f854c7881a1319ad3bda5da00dbb032fa62d9a/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec3e9f826773a7aa4cfc135b4cc9e2de222bc137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3e9f826773a7aa4cfc135b4cc9e2de222bc137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3e9f826773a7aa4cfc135b4cc9e2de222bc137"}], "stats": {"total": 168, "additions": 132, "deletions": 36}, "files": [{"sha": "1712ffbc5cdc6929bc340ba674b83800527cba30", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=48f854c7881a1319ad3bda5da00dbb032fa62d9a", "patch": "@@ -1,3 +1,11 @@\n+2010-12-10  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* powerpc_darwin_mach_dep.s:  Update for m64.  Add eh frames.\n+\tDo not build or use the picsymbol stub for Darwin >= 9.\n+\t* tests/test.c (reverse_test):  Modify count for ppc64-darwin.\n+\t* pthread_support.c (GC_get_thread_stack_base): Correct a debug\n+\tstatement.\n+\n 2010-11-29  Iain Sandoe  <iains@gcc.gnu.org>\n \t    Mike Stump  <mrs@gcc.gnu.org>\n "}, {"sha": "d61acc034c42d9f51892136f6bff9fad491048ea", "filename": "boehm-gc/powerpc_darwin_mach_dep.s", "status": "modified", "additions": 117, "deletions": 34, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2Fpowerpc_darwin_mach_dep.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2Fpowerpc_darwin_mach_dep.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fpowerpc_darwin_mach_dep.s?ref=48f854c7881a1319ad3bda5da00dbb032fa62d9a", "patch": "@@ -4,11 +4,37 @@\n #define MODE_CHOICE(x, y) x\n #endif\n \n-#define lgu     MODE_CHOICE(lwzu, ldu)\n+#define machine_choice\tMODE_CHOICE(ppc7400,ppc64)\n \n-#define g_long  MODE_CHOICE(long, quad)         /* usage is \".g_long\" */\n+; Define some pseudo-opcodes for size-independent load & store of GPRs ...\n+#define lgu\t\tMODE_CHOICE(lwzu, ldu)\n+#define lg\t\tMODE_CHOICE(lwz,ld)\n+#define sg\t\tMODE_CHOICE(stw,std)\n+#define sgu\t\tMODE_CHOICE(stwu,stdu)\n \n-#define LOG2_GPR_BYTES  MODE_CHOICE(2,3)        /* log2(GPR_BYTES) */\n+; ... and the size of GPRs and their storage indicator.\n+#define GPR_BYTES\tMODE_CHOICE(4,8)\n+#define LOG2_GPR_BYTES\tMODE_CHOICE(2,3)\t/* log2(GPR_BYTES) */\n+#define g_long\t\tMODE_CHOICE(long, quad)\t/* usage is \".g_long\" */\n+\n+; From the ABI doc: \"Mac OS X ABI Function Call Guide\" Version 2009-02-04.\n+#define LINKAGE_SIZE\tMODE_CHOICE(24,48)\n+#define PARAM_AREA\tMODE_CHOICE(32,64)\n+#define SAVED_LR_OFFSET\tMODE_CHOICE(8,16)\t/* save position for lr */\n+\n+; The whole stack frame **MUST** be 16byte-aligned.\n+#define SAVE_SIZE (LINKAGE_SIZE+PARAM_AREA)\n+\n+#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050\n+; We no longer need the pic symbol stub for Darwin >= 9.\n+#define BLGCP1\t_GC_push_one\n+#undef WANT_STUB\n+#else\n+#define BLGCP1\tL_GC_push_one$stub\n+#define WANT_STUB\n+#endif\n+\n+\t.machine machine_choice\n \n ; GC_push_regs function. Under some optimization levels GCC will clobber\n ; some of the non-volatile registers before we get a chance to save them\n@@ -21,61 +47,116 @@ _GC_push_regs:\n     \n     ; Prolog\n \tmflr r0\n-\tstw r0,8(r1)\n-\tstwu r1,-80(r1)\n+\tsg r0,SAVED_LR_OFFSET(r1)\n+\tsgu r1,-SAVE_SIZE(r1)\n \n-\t; Push r13-r31\n+L_body:\n+    ; 'Push' r13-r31\n \tmr r3,r13\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r14\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r15\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r16\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r17\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r18\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r19\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r20\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r21\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r22\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r23\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r24\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r25\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r26\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r27\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r28\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r29\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r30\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \tmr r3,r31\n-\tbl L_GC_push_one$stub\n+\tbl BLGCP1\n \n-    ; \n-    lwz r0,88(r1)\n-    addi r1,r1,80\n+L_epilog:\n+    ; Epilog\n+\tlg r0,SAVE_SIZE+SAVED_LR_OFFSET(r1)\n+\taddi r1,r1,SAVE_SIZE\n \tmtlr r0\n     \t\n-\t; Return\n+    ; Return\n \tblr\n+LFE0:\n \n-; PIC stuff, generated by GCC\n+; eh frames, for those that want 'em.\n \n-.data\n-.section __TEXT,__picsymbolstub1,symbol_stubs,pure_instructions,32\n+#define EH_DATA_ALIGN_FACT MODE_CHOICE(0x7c,0x78)\n+#define EH_FRAME_OFFSET MODE_CHOICE(0x40,0x70)\n+\n+\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n+EH_frame1:\n+\t.set L$set$0,LECIE1-LSCIE1\n+\t.long L$set$0\t; Length of Common Information Entry\n+LSCIE1:\n+\t.long\t0\t; CIE Identifier Tag\n+\t.byte\t0x1\t; CIE Version\n+\t.ascii \"zR\\0\"\t; CIE Augmentation\n+\t.byte\t0x1\t; uleb128 0x1; CIE Code Alignment Factor\n+\t.byte\tEH_DATA_ALIGN_FACT\t; sleb128 -4/-8; CIE Data Alignment Factor\n+\t.byte\t0x41\t; CIE RA Column\n+\t.byte\t0x1\t; uleb128 0x1; Augmentation size\n+\t.byte\t0x10\t; FDE Encoding (pcrel)\n+\t.byte\t0xc\t; DW_CFA_def_cfa\n+\t.byte\t0x1\t; uleb128 0x1\n+\t.byte\t0\t; uleb128 0\n+\t.align\tLOG2_GPR_BYTES\n+LECIE1:\n+\n+\t.globl _GC_push_regs.eh\n+_GC_push_regs.eh:\n+LSFDE1:\n+\t.set L$set$1,LEFDE1-LASFDE1\n+\t.long L$set$1\t; FDE Length\n+LASFDE1:\n+\t.long\tLASFDE1-EH_frame1\t; FDE CIE offset\n+\t.g_long\t_GC_push_regs-.\t; FDE initial location\n+\t.set L$set$2,LFE0-_GC_push_regs\n+\t.g_long L$set$2\t; FDE address range\n+\t.byte\t0\t; uleb128 0; Augmentation size\n+\t.byte\t0x4\t; DW_CFA_advance_loc4\n+\t.set L$set$3,L_body-_GC_push_regs\n+\t.long L$set$3\n+\t.byte\t0xe\t; DW_CFA_def_cfa_offset\n+\t.byte\tEH_FRAME_OFFSET\t; uleb128 0x40/0x70\n+\t.byte\t0x11\t; DW_CFA_offset_extended_sf\n+\t.byte\t0x41\t; uleb128 0x41\n+\t.byte\t0x7e\t; sleb128 -2\n+\t.byte\t0x4\t; DW_CFA_advance_loc4\n+\t.set L$set$4,L_epilog-L_body\n+\t.long L$set$4\n+\t.byte\t0xe\t; DW_CFA_def_cfa_offset\n+\t.byte\t0\t; uleb128 0\n+\t.align\tLOG2_GPR_BYTES\n+LEFDE1:\n+\n+\t.data\n+#ifdef WANT_STUB\n+; PIC stub stuff, generated by GCC\n+\n+\t.section __TEXT,__picsymbolstub1,symbol_stubs,pure_instructions,32\n \t.align LOG2_GPR_BYTES\n L_GC_push_one$stub:\n \t.indirect_symbol _GC_push_one\n@@ -88,8 +169,10 @@ L0$_GC_push_one:\n \tlgu r12,lo16(L_GC_push_one$lazy_ptr-L0$_GC_push_one)(r11)\n \tmtctr r12\n \tbctr\n-.data\n-.lazy_symbol_pointer\n+\n+\t.data\n+\t.lazy_symbol_pointer\n L_GC_push_one$lazy_ptr:\n \t.indirect_symbol _GC_push_one\n \t.g_long dyld_stub_binding_helper\n+#endif"}, {"sha": "b3abc69e68b58ffcd425ed7b262bdd2443921510", "filename": "boehm-gc/pthread_support.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2Fpthread_support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2Fpthread_support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fpthread_support.c?ref=48f854c7881a1319ad3bda5da00dbb032fa62d9a", "patch": "@@ -1158,7 +1158,7 @@ GC_PTR GC_get_thread_stack_base()\n \n # else\n #   ifdef DEBUG_THREADS\n-\tGC_printf1(\"Can not determine stack base for attached thread\");\n+\tGC_printf0(\"Can not determine stack base for attached thread\");\n #   endif\n   return 0;\n # endif"}, {"sha": "1180ab152ad0d46fe44e6ac52fc21f5b2e3f866f", "filename": "boehm-gc/tests/test.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2Ftests%2Ftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f854c7881a1319ad3bda5da00dbb032fa62d9a/boehm-gc%2Ftests%2Ftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Ftests%2Ftest.c?ref=48f854c7881a1319ad3bda5da00dbb032fa62d9a", "patch": "@@ -624,7 +624,12 @@ void reverse_test()\n \t    /* OSF has limited stack space by default, and large frames. */\n #           define BIG 200\n #\t  else\n-#           define BIG 4500\n+#\t    if defined(__MACH__) && defined(__ppc64__)\n+\t      /* Small stack and largish frames.  */\n+#             define BIG 2500\t      \n+#\t    else\n+#             define BIG 4500\n+#\t    endif\n #\t  endif\n #\tendif\n #     endif"}]}