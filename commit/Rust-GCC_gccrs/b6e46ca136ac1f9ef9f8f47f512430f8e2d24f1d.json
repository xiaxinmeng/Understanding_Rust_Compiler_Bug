{"sha": "b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlNDZjYTEzNmFjMWY5ZWY5ZjhmNDdmNTEyNDMwZjhlMmQyNGYxZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-05T16:39:58Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-02-05T16:39:58Z"}, "message": "alpha.c (alpha_add_builtins): New Helper function.\n\n\n\t* config/alpha/alpha.c (alpha_add_builtins): New Helper function.\n\tSet TREE_READONLY and TREE_NOTHROW directly, not via attributes.\n\t(alpha_init_builtins): Use alpha_add_builtins to process tables.\n\nFrom-SVN: r121603", "tree": {"sha": "4ebd4ed1e61a21b98e381904418346c19551d81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ebd4ed1e61a21b98e381904418346c19551d81e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d/comments", "author": null, "committer": null, "parents": [{"sha": "8d0510ddbd6631df4b2b811b19b5d315ad52c82f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0510ddbd6631df4b2b811b19b5d315ad52c82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0510ddbd6631df4b2b811b19b5d315ad52c82f"}], "stats": {"total": 77, "additions": 45, "deletions": 32}, "files": [{"sha": "ec8b63369ac44911d59c5e81684dd92fc67fbf92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d", "patch": "@@ -1,3 +1,9 @@\n+2007-02-05  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/alpha/alpha.c (alpha_add_builtins): New Helper function.\n+\tSet TREE_READONLY and TREE_NOTHROW directly, not via attributes.\n+\t(alpha_init_builtins): Use alpha_add_builtins to process tables.\n+\n 2007-02-05  Roger Sayle  <roger@eyesopen.com>\n \n \t* mips-tfile.c (initialize_init_file): Correct endianness test."}, {"sha": "d4808a7db15b1ed91a5b900bc3f76a0043b2c154", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b6e46ca136ac1f9ef9f8f47f512430f8e2d24f1d", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on the DEC Alpha.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GCC.\n@@ -6506,55 +6506,62 @@ static GTY(()) tree alpha_v8qi_s;\n static GTY(()) tree alpha_v4hi_u;\n static GTY(()) tree alpha_v4hi_s;\n \n+/* Helper function of alpha_init_builtins.  Add the COUNT built-in\n+   functions pointed to by P, with function type FTYPE.  */\n+\n+static void\n+alpha_add_builtins (const struct alpha_builtin_def *p, size_t count,\n+\t\t    tree ftype)\n+{\n+  tree decl;\n+  size_t i;\n+\n+  for (i = 0; i < count; ++i, ++p)\n+    if ((target_flags & p->target_mask) == p->target_mask)\n+      {\n+\tdecl = add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\t\t     NULL, NULL);\n+\tif (p->is_const)\n+\t  TREE_READONLY (decl) = 1;\n+\tTREE_NOTHROW (decl) = 1;\n+      }\n+}\n+\n+\n static void\n alpha_init_builtins (void)\n {\n-  const struct alpha_builtin_def *p;\n   tree dimode_integer_type_node;\n-  tree ftype, attrs[2];\n-  size_t i;\n+  tree ftype, decl;\n \n   dimode_integer_type_node = lang_hooks.types.type_for_mode (DImode, 0);\n \n-  attrs[0] = tree_cons (get_identifier (\"nothrow\"), NULL, NULL);\n-  attrs[1] = tree_cons (get_identifier (\"const\"), NULL, attrs[0]);\n-\n   ftype = build_function_type (dimode_integer_type_node, void_list_node);\n-\n-  p = zero_arg_builtins;\n-  for (i = 0; i < ARRAY_SIZE (zero_arg_builtins); ++i, ++p)\n-    if ((target_flags & p->target_mask) == p->target_mask)\n-      add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\t    NULL, attrs[p->is_const]);\n+  alpha_add_builtins (zero_arg_builtins, ARRAY_SIZE (zero_arg_builtins),\n+\t\t      ftype);\n \n   ftype = build_function_type_list (dimode_integer_type_node,\n \t\t\t\t    dimode_integer_type_node, NULL_TREE);\n-\n-  p = one_arg_builtins;\n-  for (i = 0; i < ARRAY_SIZE (one_arg_builtins); ++i, ++p)\n-    if ((target_flags & p->target_mask) == p->target_mask)\n-      add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\t    NULL, attrs[p->is_const]);\n+  alpha_add_builtins (one_arg_builtins, ARRAY_SIZE (one_arg_builtins),\n+\t\t      ftype);\n \n   ftype = build_function_type_list (dimode_integer_type_node,\n \t\t\t\t    dimode_integer_type_node,\n \t\t\t\t    dimode_integer_type_node, NULL_TREE);\n-\n-  p = two_arg_builtins;\n-  for (i = 0; i < ARRAY_SIZE (two_arg_builtins); ++i, ++p)\n-    if ((target_flags & p->target_mask) == p->target_mask)\n-      add_builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n-\t\t\t    NULL, attrs[p->is_const]);\n+  alpha_add_builtins (two_arg_builtins, ARRAY_SIZE (two_arg_builtins),\n+\t\t      ftype);\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n-  add_builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t\tALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\tNULL, attrs[0]);\n+  decl = add_builtin_function (\"__builtin_thread_pointer\", ftype,\n+\t\t\t       ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\t       NULL, NULL);\n+  TREE_NOTHROW (decl) = 1;\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n-  add_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t\tALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n-\t\t\tNULL, attrs[0]);\n+  decl = add_builtin_function (\"__builtin_set_thread_pointer\", ftype,\n+\t\t\t       ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n+\t\t\t       NULL, NULL);\n+  TREE_NOTHROW (decl) = 1;\n \n   alpha_v8qi_u = build_vector_type (unsigned_intQI_type_node, 8);\n   alpha_v8qi_s = build_vector_type (intQI_type_node, 8);"}]}