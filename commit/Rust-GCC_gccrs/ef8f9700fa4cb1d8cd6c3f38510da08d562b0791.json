{"sha": "ef8f9700fa4cb1d8cd6c3f38510da08d562b0791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4Zjk3MDBmYTRjYjFkOGNkNmMzZjM4NTEwZGEwOGQ1NjJiMDc5MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-09-26T09:16:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:16:33Z"}, "message": "[Ada] Unnesting: fix handling of up level refs for entries\n\n2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_unst.adb: Fix handling of up level references for entries.\n\nFrom-SVN: r264603", "tree": {"sha": "93cc3c5d9a52e032e11a2317ce21a3d47f5a177e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93cc3c5d9a52e032e11a2317ce21a3d47f5a177e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33d2551767100d004ffa85efbd1165cb731dc87d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d2551767100d004ffa85efbd1165cb731dc87d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d2551767100d004ffa85efbd1165cb731dc87d"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "cbedcc098da9d89cdf61284331dcaeae3ce8c1af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef8f9700fa4cb1d8cd6c3f38510da08d562b0791", "patch": "@@ -1,3 +1,7 @@\n+2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.adb: Fix handling of up level references for entries.\n+\n 2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* contracts.adb (Expand_Subprogram_Contract,"}, {"sha": "e31d84acb0ee1f374dacac6945eabc81c980e4c0", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 83, "deletions": 9, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8f9700fa4cb1d8cd6c3f38510da08d562b0791/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=ef8f9700fa4cb1d8cd6c3f38510da08d562b0791", "patch": "@@ -260,8 +260,8 @@ package body Exp_Unst is\n          E := Ultimate_Alias (E);\n \n          --  The body of a protected operation has a different name and\n-         --  has been scanned at this point, and thus has an entry in the\n-         --  subprogram table.\n+         --  has been scanned at this point, and thus has an entry in\n+         --  the subprogram table.\n \n          if E = Sub and then Convention (E) = Convention_Protected then\n             E := Protected_Body_Subprogram (E);\n@@ -535,6 +535,29 @@ package body Exp_Unst is\n                         end loop;\n                      end;\n \n+                     --  The type of the prefix may be have an uplevel\n+                     --  reference if this needs bounds.\n+\n+                     if Nkind (N) = N_Attribute_Reference then\n+                        declare\n+                           Attr : constant Attribute_Id :=\n+                             Get_Attribute_Id (Attribute_Name (N));\n+                        begin\n+                           if (Attr = Attribute_First\n+                                 or else Attr = Attribute_Last\n+                                 or else Attr = Attribute_Length)\n+                             and then Is_Constrained (Etype (Prefix (N)))\n+                           then\n+                              declare\n+                                 DT : Boolean := False;\n+                              begin\n+                                 Check_Static_Type\n+                                   (Etype (Prefix (N)), Empty, DT);\n+                              end;\n+                           end if;\n+                        end;\n+                     end if;\n+\n                   --  Binary operator cases. These can apply to arrays for\n                   --  which we may need bounds.\n \n@@ -699,6 +722,9 @@ package body Exp_Unst is\n                  and then Corresponding_Procedure (Callee) = Caller\n                then\n                   return;\n+\n+               elsif Ekind_In (Callee, E_Entry, E_Entry_Family) then\n+                  return;\n                end if;\n \n                --  We have a new uplevel referenced entity\n@@ -748,6 +774,22 @@ package body Exp_Unst is\n                    ARECnU        => Empty));\n \n                Set_Subps_Index (E, UI_From_Int (Subps.Last));\n+\n+               --  If we marked this reachable because it's in a synchronized\n+               --  unit, we have to mark all enclosing subprograms as reachable\n+               --  as well.\n+\n+               if In_Synchronized_Unit (E) then\n+                  declare\n+                     S : Entity_Id := E;\n+\n+                  begin\n+                     for J in reverse 1 .. L  - 1 loop\n+                        S := Enclosing_Subprogram (S);\n+                        Subps.Table (Subp_Index (S)).Reachable := True;\n+                     end loop;\n+                  end;\n+               end if;\n             end Register_Subprogram;\n \n          --  Start of processing for Visit_Node\n@@ -1109,12 +1151,24 @@ package body Exp_Unst is\n                   end if;\n \n                --  Pragmas and component declarations can be ignored\n+               --  Quantified expressions are expanded into explicit loops\n+               --  and the original epression must be ignored.\n \n                when N_Component_Declaration\n                   | N_Pragma\n+                  | N_Quantified_Expression\n                =>\n                   return Skip;\n \n+               --  We want to skip the function spec for a generic function\n+               --  to avoid looking at any generic types that might be in\n+               --  its formals.\n+\n+               when N_Function_Specification =>\n+                  if Is_Generic_Subprogram  (Unique_Defining_Entity (N)) then\n+                     return Skip;\n+                  end if;\n+\n                --  Otherwise record an uplevel reference in a local identifier\n \n                when others =>\n@@ -1965,13 +2019,26 @@ package body Exp_Unst is\n                                  --  If we have a loop parameter, we have\n                                  --  to insert before the first statement\n                                  --  of the loop. Ins points to the\n-                                 --  N_Loop_Parameter_Specification.\n-\n-                                 if Ekind (Ent) = E_Loop_Parameter then\n-                                    Ins :=\n-                                      First\n-                                        (Statements (Parent (Parent (Ins))));\n-                                    Insert_Before (Ins, Asn);\n+                                 --  N_Loop_Parameter_Specification or to\n+                                 --  an N_Iterator_Specification.\n+\n+                                 if Nkind_In (Ins, N_Iterator_Specification,\n+                                              N_Loop_Parameter_Specification)\n+                                 then\n+                                    --  Quantified expression are rewrittne\n+                                    --  as loops during expansion.\n+\n+                                    if Nkind (Parent (Ins)) =\n+                                      N_Quantified_Expression\n+                                    then\n+                                       null;\n+\n+                                    else\n+                                       Ins :=\n+                                         First\n+                                         (Statements (Parent (Parent (Ins))));\n+                                       Insert_Before (Ins, Asn);\n+                                    end if;\n \n                                  else\n                                     Insert_After (Ins, Asn);\n@@ -2369,6 +2436,13 @@ package body Exp_Unst is\n \n          elsif Nkind (N) in N_Body_Stub then\n             Do_Search (Library_Unit (N));\n+\n+         --  Skip generic packages\n+\n+         elsif Nkind (N) = N_Package_Body\n+           and then Ekind (Corresponding_Spec (N)) = E_Generic_Package\n+         then\n+            return Skip;\n          end if;\n \n          return OK;"}]}