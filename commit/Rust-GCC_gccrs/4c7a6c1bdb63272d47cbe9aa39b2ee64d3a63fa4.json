{"sha": "4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3YTZjMWJkYjYzMjcyZDQ3Y2JlOWFhMzliMmVlNjRkM2E2M2ZhNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-12-03T18:58:43Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-12-03T18:58:43Z"}, "message": "c-common.c (c_sizeof_or_alignof_type): Use fold_convert instead of building a NOP_EXPR.\n\n\t* c-common.c (c_sizeof_or_alignof_type): Use fold_convert instead\n\tof building a NOP_EXPR.\n\t(c_alignof_expr): Likewise.  Handle CONVERT_EXPR the same as\n\tNOP_EXPR.\n\t* c-convert.c (convert): Use fold_convert instead of building\n\tNOP_EXPRs and CONVERT_EXPRs directly.  Don't special case\n\tc_objc_common_truthvalue_conversion returning a NOP_EXPR.  Remove\n\t#if 0 code.\n\t* c-pretty-print.c (pp_c_cast_expression, pp_c_expression): Handle\n\tNOP_EXPR the same as CONVERT_EXPR.\n\t* c-typeck.c (build_function_call): Use fold_convert instead of\n\tbuilding a NOP_EXPR directly.\n\t(build_compound_expr): Handle NOP_EXPR the same as CONVERT_EXPR.\n\ntestsuite:\n\t* gcc.dg/cast-pretty-print-1.c: New test.\n\nFrom-SVN: r108001", "tree": {"sha": "8a5a86529d5c77ec43f37dd146c1b7272877a41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a5a86529d5c77ec43f37dd146c1b7272877a41c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a34a91f0b73dad394cd0db44f5702406c09a06c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34a91f0b73dad394cd0db44f5702406c09a06c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34a91f0b73dad394cd0db44f5702406c09a06c6"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "afe22a09faa293f08b0192963dff4607386d3f31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "patch": "@@ -1,3 +1,19 @@\n+2005-12-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_sizeof_or_alignof_type): Use fold_convert instead\n+\tof building a NOP_EXPR.\n+\t(c_alignof_expr): Likewise.  Handle CONVERT_EXPR the same as\n+\tNOP_EXPR.\n+\t* c-convert.c (convert): Use fold_convert instead of building\n+\tNOP_EXPRs and CONVERT_EXPRs directly.  Don't special case\n+\tc_objc_common_truthvalue_conversion returning a NOP_EXPR.  Remove\n+\t#if 0 code.\n+\t* c-pretty-print.c (pp_c_cast_expression, pp_c_expression): Handle\n+\tNOP_EXPR the same as CONVERT_EXPR.\n+\t* c-typeck.c (build_function_call): Use fold_convert instead of\n+\tbuilding a NOP_EXPR directly.\n+\t(build_compound_expr): Handle NOP_EXPR the same as CONVERT_EXPR.\n+\n 2005-12-03  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR rtl-optimization/25197"}, {"sha": "898f3944d0234cc573701cb9eddb60bd421fa285", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "patch": "@@ -2873,7 +2873,7 @@ c_sizeof_or_alignof_type (tree type, bool is_sizeof, int complain)\n      TYPE_IS_SIZETYPE means that certain things (like overflow) will\n      never happen.  However, this node should really have type\n      `size_t', which is just a typedef for an ordinary integer type.  */\n-  value = fold_build1 (NOP_EXPR, size_type_node, value);\n+  value = fold_convert (size_type_node, value);\n   gcc_assert (!TYPE_IS_SIZETYPE (TREE_TYPE (value)));\n \n   return value;\n@@ -2908,7 +2908,7 @@ c_alignof_expr (tree expr)\n       tree best = t;\n       int bestalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n \n-      while (TREE_CODE (t) == NOP_EXPR\n+      while ((TREE_CODE (t) == NOP_EXPR || TREE_CODE (t) == CONVERT_EXPR)\n \t     && TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == POINTER_TYPE)\n \t{\n \t  int thisalign;\n@@ -2923,7 +2923,7 @@ c_alignof_expr (tree expr)\n   else\n     return c_alignof (TREE_TYPE (expr));\n \n-  return fold_build1 (NOP_EXPR, size_type_node, t);\n+  return fold_convert (size_type_node, t);\n }\n \f\n /* Handle C and C++ default attributes.  */"}, {"sha": "bf306c8ea2fe7e55be4e199a8a1322fc06a245d6", "filename": "gcc/c-convert.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "patch": "@@ -88,7 +88,7 @@ convert (tree type, tree expr)\n     return expr;\n \n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (TREE_TYPE (expr)))\n-    return fold_build1 (NOP_EXPR, type, expr);\n+    return fold_convert (type, expr);\n   if (TREE_CODE (TREE_TYPE (expr)) == ERROR_MARK)\n     return error_mark_node;\n   if (TREE_CODE (TREE_TYPE (expr)) == VOID_TYPE)\n@@ -97,28 +97,11 @@ convert (tree type, tree expr)\n       return error_mark_node;\n     }\n   if (code == VOID_TYPE)\n-    return build1 (CONVERT_EXPR, type, e);\n-#if 0\n-  /* This is incorrect.  A truncation can't be stripped this way.\n-     Extensions will be stripped by the use of get_unwidened.  */\n-  if (TREE_CODE (expr) == NOP_EXPR)\n-    return convert (type, TREE_OPERAND (expr, 0));\n-#endif\n+    return fold_convert (type, e);\n   if (code == INTEGER_TYPE || code == ENUMERAL_TYPE)\n     return fold (convert_to_integer (type, e));\n   if (code == BOOLEAN_TYPE)\n-    {\n-      tree t = c_objc_common_truthvalue_conversion (expr);\n-      if (TREE_CODE (t) == ERROR_MARK)\n-\treturn t;\n-\n-      /* If it returns a NOP_EXPR, we must fold it here to avoid\n-\t infinite recursion between fold () and convert ().  */\n-      if (TREE_CODE (t) == NOP_EXPR)\n-\treturn fold_build1 (NOP_EXPR, type, TREE_OPERAND (t, 0));\n-      else\n-\treturn fold_build1 (NOP_EXPR, type, t);\n-    }\n+    return fold_convert (type, c_objc_common_truthvalue_conversion (expr));\n   if (code == POINTER_TYPE || code == REFERENCE_TYPE)\n     return fold (convert_to_pointer (type, e));\n   if (code == REAL_TYPE)"}, {"sha": "6618a70b7b1c95d20a9291916ea3dcdc84931e1d", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "patch": "@@ -1492,6 +1492,7 @@ pp_c_cast_expression (c_pretty_printer *pp, tree e)\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n     case CONVERT_EXPR:\n+    case NOP_EXPR:\n       pp_c_type_cast (pp, TREE_TYPE (e));\n       pp_c_cast_expression (pp, TREE_OPERAND (e, 0));\n       break;\n@@ -1870,6 +1871,7 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n     case CONVERT_EXPR:\n+    case NOP_EXPR:\n       pp_c_cast_expression (pp, e);\n       break;\n \n@@ -1938,7 +1940,6 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n       pp_c_right_paren (pp);\n       break;\n \n-    case NOP_EXPR:\n     case NON_LVALUE_EXPR:\n     case SAVE_EXPR:\n       pp_expression (pp, TREE_OPERAND (e, 0));"}, {"sha": "8b8eb56ea4424cb70f12a97a2ee04ed04e4d2798", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "patch": "@@ -2191,7 +2191,7 @@ build_function_call (tree function, tree params)\n \t    rhs = build_compound_literal (return_type,\n \t\t\t\t\t  build_constructor (return_type, 0));\n \t  else\n-\t    rhs = fold_build1 (NOP_EXPR, return_type, integer_zero_node);\n+\t    rhs = fold_convert (return_type, integer_zero_node);\n \n \t  return build2 (COMPOUND_EXPR, return_type, trap, rhs);\n \t}\n@@ -3270,11 +3270,13 @@ build_compound_expr (tree expr1, tree expr2)\n       if (warn_unused_value)\n \t{\n \t  if (VOID_TYPE_P (TREE_TYPE (expr1))\n-\t      && TREE_CODE (expr1) == CONVERT_EXPR)\n+\t      && (TREE_CODE (expr1) == NOP_EXPR\n+\t\t  || TREE_CODE (expr1) == CONVERT_EXPR))\n \t    ; /* (void) a, b */\n \t  else if (VOID_TYPE_P (TREE_TYPE (expr1))\n \t\t   && TREE_CODE (expr1) == COMPOUND_EXPR\n-\t\t   && TREE_CODE (TREE_OPERAND (expr1, 1)) == CONVERT_EXPR)\n+\t\t   && (TREE_CODE (TREE_OPERAND (expr1, 1)) == CONVERT_EXPR\n+\t\t       || TREE_CODE (TREE_OPERAND (expr1, 1)) == NOP_EXPR))\n \t    ; /* (void) a, (void) b, c */\n \t  else\n \t    warning (0, \"left-hand operand of comma expression has no effect\");"}, {"sha": "257c74a5d1a4392ceca237a987598fe190af1b53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "patch": "@@ -1,3 +1,7 @@\n+2005-12-03  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cast-pretty-print-1.c: New test.\n+\n 2005-12-03  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c90-const-expr-4.c, gcc.dg/c99-const-expr-4.c: New tests."}, {"sha": "e5ecec1a096a2f7bfd6adc8f1e673720a1967431", "filename": "gcc/testsuite/gcc.dg/cast-pretty-print-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-pretty-print-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-pretty-print-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-pretty-print-1.c?ref=4c7a6c1bdb63272d47cbe9aa39b2ee64d3a63fa4", "patch": "@@ -0,0 +1,12 @@\n+/* Test pretty-printing of casts.  Should not depend on whether\n+   NOP_EXPR or CONVERT_EXPR is used.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+int i;\n+void\n+f (void)\n+{\n+  ((unsigned int)i)(); /* { dg-error \"error: called object '\\\\(unsigned int\\\\)i' is not a function\" } */\n+  ((char)i)(); /* { dg-error \"error: called object '\\\\(char\\\\)i' is not a function\" } */\n+}"}]}