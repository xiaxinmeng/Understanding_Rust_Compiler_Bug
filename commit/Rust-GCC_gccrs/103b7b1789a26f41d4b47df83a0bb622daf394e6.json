{"sha": "103b7b1789a26f41d4b47df83a0bb622daf394e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAzYjdiMTc4OWEyNmY0MWQ0YjQ3ZGY4M2EwYmI2MjJkYWYzOTRlNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-28T05:48:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-28T05:48:46Z"}, "message": "(process_init_constructor, digest_init):\n\nCheck and set new static var partial_bracket_mentioned.\n\nFrom-SVN: r3899", "tree": {"sha": "83bc27f42ab26f3e43ea76aa512d92d7ade2d09d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83bc27f42ab26f3e43ea76aa512d92d7ade2d09d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/103b7b1789a26f41d4b47df83a0bb622daf394e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103b7b1789a26f41d4b47df83a0bb622daf394e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103b7b1789a26f41d4b47df83a0bb622daf394e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103b7b1789a26f41d4b47df83a0bb622daf394e6/comments", "author": null, "committer": null, "parents": [{"sha": "f41372d40f468e8a1d4b4f26b9660454eb46d359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41372d40f468e8a1d4b4f26b9660454eb46d359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41372d40f468e8a1d4b4f26b9660454eb46d359"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "1bbbfda06d40b03b0d5145b0ec473889d2eb42aa", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103b7b1789a26f41d4b47df83a0bb622daf394e6/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103b7b1789a26f41d4b47df83a0bb622daf394e6/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=103b7b1789a26f41d4b47df83a0bb622daf394e6", "patch": "@@ -33,6 +33,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"c-tree.h\"\n #include \"flags.h\"\n \n+/* Nonzero if we've already printed a \"partly bracketed initializer\"\n+   message within this initializer.  */\n+static int partial_bracket_mentioned = 0;\n+\n extern char *index ();\n extern char *rindex ();\n \n@@ -4689,7 +4693,8 @@ pedwarn_init (format, local, ofwhat)\n \n    If OFWHAT is nonnull, it specifies what we are initializing, for error\n    messages.   Examples: variable name, variable.member, array[44].\n-   If OFWHAT is null, the component name is stored on the spelling stack.  */\n+   If OFWHAT is null, the component name is stored on the spelling stack.\n+   (That is true for all nested calls to digest_init.)  */\n \n tree\n digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n@@ -4706,6 +4711,11 @@ digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n     = TREE_CODE (init) == CONSTRUCTOR && TREE_TYPE (init) == 0;\n   tree inside_init = init;\n \n+  /* Make sure there is just one \"partially bracketed\" message\n+     per top-level initializer or constructor.  */\n+  if (ofwhat != 0)\n+    partial_bracket_mentioned = 0;\n+\n   /* By default, assume we use one element from a list.\n      We correct this later in the sole case where it is not true.  */\n \n@@ -5030,8 +5040,10 @@ digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n \n    OFWHAT is a character string describing the object being initialized,\n    for error messages.  It might be \"variable\" or \"variable.member\"\n-   or \"variable[17].member[5]\".  If OFWHAT is null, the description string\n-   is stored on the spelling stack.  */\n+   or \"variable[17].member[5]\".\n+\n+   If OFWHAT is null, the description string is stored on the spelling\n+   stack.  That is always true for recursive calls.  */\n \n static tree\n process_init_constructor (type, init, elts, constant_value, constant_element,\n@@ -5059,7 +5071,11 @@ process_init_constructor (type, init, elts, constant_value, constant_element,\n   if (elts)\n     {\n       if (warn_missing_braces)\n-\twarning (\"aggregate has a partly bracketed initializer\");\n+\t{\n+\t  if (! partial_bracket_mentioned)\n+\t    warning (\"aggregate has a partly bracketed initializer\");\n+\t  partial_bracket_mentioned = 1;\n+\t}\n       tail = *elts;\n     }\n   else"}]}