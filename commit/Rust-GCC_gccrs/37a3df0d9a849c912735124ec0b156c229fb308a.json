{"sha": "37a3df0d9a849c912735124ec0b156c229fb308a", "node_id": "C_kwDOANBUbNoAKDM3YTNkZjBkOWE4NDljOTEyNzM1MTI0ZWMwYjE1NmMyMjlmYjMwOGE", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-07-28T12:13:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-23T13:06:13Z"}, "message": "[Ada] Remove global parameter in Global contracts of Ada.Strings.Bounded\n\ngcc/ada/\n\n\t* libgnat/a-strbou.ads (Generic_Bounded_Length): Remove non-null\n\tGlobal contracts.", "tree": {"sha": "ccaee11f037ecbe099100a17da2b45e1a751e986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccaee11f037ecbe099100a17da2b45e1a751e986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37a3df0d9a849c912735124ec0b156c229fb308a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a3df0d9a849c912735124ec0b156c229fb308a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a3df0d9a849c912735124ec0b156c229fb308a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a3df0d9a849c912735124ec0b156c229fb308a/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62e66ee5bfe93de637f9ea9849a73807894936e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e66ee5bfe93de637f9ea9849a73807894936e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e66ee5bfe93de637f9ea9849a73807894936e0"}], "stats": {"total": 128, "additions": 48, "deletions": 80}, "files": [{"sha": "cc24f707e5f851cfd952ff7c75370ec8a2b288fa", "filename": "gcc/ada/libgnat/a-strbou.ads", "status": "modified", "additions": 48, "deletions": 80, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3df0d9a849c912735124ec0b156c229fb308a/gcc%2Fada%2Flibgnat%2Fa-strbou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3df0d9a849c912735124ec0b156c229fb308a/gcc%2Fada%2Flibgnat%2Fa-strbou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strbou.ads?ref=37a3df0d9a849c912735124ec0b156c229fb308a", "patch": "@@ -95,8 +95,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n            others  --  Drop = Right\n            =>\n              To_String (To_Bounded_String'Result) =\n-               Source (Source'First .. Source'First - 1 + Max_Length)),\n-        Global         => Max_Length;\n+               Source (Source'First .. Source'First - 1 + Max_Length));\n \n       function To_String (Source : Bounded_String) return String with\n         Global => null;\n@@ -120,8 +119,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n            others  --  Drop = Right\n            =>\n              To_String (Target) =\n-               Source (Source'First .. Source'First - 1 + Max_Length)),\n-        Global         => (Proof_In => Max_Length);\n+               Source (Source'First .. Source'First - 1 + Max_Length));\n       pragma Ada_05 (Set_Bounded_String);\n \n       function Append\n@@ -167,8 +165,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  (if Length (Left) < Max_Length then\n                     Slice (Append'Result, Length (Left) + 1, Max_Length) =\n-                      Slice (Right, 1, Max_Length - Length (Left)))),\n-        Global         => (Proof_In => Max_Length);\n+                      Slice (Right, 1, Max_Length - Length (Left))));\n \n       function Append\n         (Left  : Bounded_String;\n@@ -222,9 +219,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                  (if Length (Left) < Max_Length then\n                     Slice (Append'Result, Length (Left) + 1, Max_Length) =\n                       Right (Right'First\n-                        .. Max_Length - Length (Left) - 1 + Right'First))),\n-        Global         => (Proof_In => Max_Length);\n-\n+                        .. Max_Length - Length (Left) - 1 + Right'First)));\n       function Append\n         (Left  : String;\n          Right : Bounded_String;\n@@ -274,8 +269,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                     --  The result is the first Max_Length characters of Left\n \n                     To_String (Append'Result) =\n-                      Left (Left'First .. Max_Length - 1 + Left'First))),\n-        Global         => (Proof_In => Max_Length);\n+                      Left (Left'First .. Max_Length - 1 + Left'First)));\n \n       function Append\n         (Left  : Bounded_String;\n@@ -302,8 +296,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  Slice (Append'Result, 1, Max_Length - 1) =\n                    Slice (Left, 2, Max_Length)\n-               and then Element (Append'Result, Max_Length) = Right),\n-        Global         => (Proof_In => Max_Length);\n+               and then Element (Append'Result, Max_Length) = Right);\n \n       function Append\n         (Left  : Character;\n@@ -331,8 +324,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  Slice (Append'Result, 2, Max_Length) =\n                    Slice (Right, 1, Max_Length - 1)\n-               and then Element (Append'Result, 1) = Left),\n-        Global         => (Proof_In => Max_Length);\n+               and then Element (Append'Result, 1) = Left);\n \n       procedure Append\n         (Source   : in out Bounded_String;\n@@ -378,8 +370,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  (if Length (Source'Old) < Max_Length then\n                     Slice (Source, Length (Source'Old) + 1, Max_Length) =\n-                      Slice (New_Item, 1, Max_Length - Length (Source'Old)))),\n-        Global         => (Proof_In => Max_Length);\n+                      Slice (New_Item, 1, Max_Length - Length (Source'Old))));\n \n       procedure Append\n         (Source   : in out Bounded_String;\n@@ -436,8 +427,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                     Slice (Source, Length (Source'Old) + 1, Max_Length) =\n                       New_Item (New_Item'First\n                         .. Max_Length - Length (Source'Old) - 1\n-                          + New_Item'First))),\n-        Global         => (Proof_In => Max_Length);\n+                          + New_Item'First)));\n \n       procedure Append\n         (Source   : in out Bounded_String;\n@@ -465,68 +455,62 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  Slice (Source, 1, Max_Length - 1) =\n                    Slice (Source'Old, 2, Max_Length)\n-               and then Element (Source, Max_Length) = New_Item),\n-        Global         => (Proof_In => Max_Length);\n+               and then Element (Source, Max_Length) = New_Item);\n \n       function \"&\"\n         (Left  : Bounded_String;\n          Right : Bounded_String) return Bounded_String\n       with\n-        Pre    => Length (Left) <= Max_Length - Length (Right),\n-        Post   => Length (\"&\"'Result) = Length (Left) + Length (Right)\n+        Pre  => Length (Left) <= Max_Length - Length (Right),\n+        Post => Length (\"&\"'Result) = Length (Left) + Length (Right)\n           and then Slice (\"&\"'Result, 1, Length (Left)) = To_String (Left)\n           and then\n             (if Length (Right) > 0 then\n                Slice (\"&\"'Result, Length (Left) + 1, Length (\"&\"'Result)) =\n-                 To_String (Right)),\n-        Global => (Proof_In => Max_Length);\n+                 To_String (Right));\n \n       function \"&\"\n         (Left  : Bounded_String;\n          Right : String) return Bounded_String\n       with\n-        Pre    => Right'Length <= Max_Length - Length (Left),\n-        Post   => Length (\"&\"'Result) = Length (Left) + Right'Length\n+        Pre  => Right'Length <= Max_Length - Length (Left),\n+        Post => Length (\"&\"'Result) = Length (Left) + Right'Length\n           and then Slice (\"&\"'Result, 1, Length (Left)) = To_String (Left)\n           and then\n             (if Right'Length > 0 then\n                Slice (\"&\"'Result, Length (Left) + 1, Length (\"&\"'Result)) =\n-                 Right),\n-        Global => (Proof_In => Max_Length);\n+                 Right);\n \n       function \"&\"\n         (Left  : String;\n          Right : Bounded_String) return Bounded_String\n       with\n-        Pre    => Left'Length <= Max_Length - Length (Right),\n-        Post   => Length (\"&\"'Result) = Left'Length + Length (Right)\n+        Pre  => Left'Length <= Max_Length - Length (Right),\n+        Post => Length (\"&\"'Result) = Left'Length + Length (Right)\n           and then Slice (\"&\"'Result, 1, Left'Length) = Left\n           and then\n             (if Length (Right) > 0 then\n                Slice (\"&\"'Result, Left'Length + 1, Length (\"&\"'Result)) =\n-                 To_String (Right)),\n-        Global => (Proof_In => Max_Length);\n+                 To_String (Right));\n \n       function \"&\"\n         (Left  : Bounded_String;\n          Right : Character) return Bounded_String\n       with\n-        Pre    => Length (Left) < Max_Length,\n-        Post   => Length (\"&\"'Result) = Length (Left) + 1\n+        Pre  => Length (Left) < Max_Length,\n+        Post => Length (\"&\"'Result) = Length (Left) + 1\n           and then Slice (\"&\"'Result, 1, Length (Left)) = To_String (Left)\n-          and then Element (\"&\"'Result, Length (Left) + 1) = Right,\n-        Global => (Proof_In => Max_Length);\n+          and then Element (\"&\"'Result, Length (Left) + 1) = Right;\n \n       function \"&\"\n         (Left  : Character;\n          Right : Bounded_String) return Bounded_String\n       with\n-        Pre    => Length (Right) < Max_Length,\n-        Post   => Length (\"&\"'Result) = 1 + Length (Right)\n+        Pre  => Length (Right) < Max_Length,\n+        Post => Length (\"&\"'Result) = 1 + Length (Right)\n           and then Element (\"&\"'Result, 1) = Left\n           and then\n-            Slice (\"&\"'Result, 2, Length (\"&\"'Result)) = To_String (Right),\n-        Global => (Proof_In => Max_Length);\n+            Slice (\"&\"'Result, 2, Length (\"&\"'Result)) = To_String (Right);\n \n       function Element\n         (Source : Bounded_String;\n@@ -1426,8 +1410,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                         Low + By'Length, Max_Length) =\n                           Slice (Source, Integer'Max (High + 1, Low),\n                             Integer'Max (High + 1, Low) +\n-                              (Max_Length - Low - By'Length)))),\n-        Global         => (Proof_In => Max_Length);\n+                              (Max_Length - Low - By'Length))));\n \n       procedure Replace_Slice\n         (Source   : in out Bounded_String;\n@@ -1551,8 +1534,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                       and then Slice (Source, Low + By'Length, Max_Length) =\n                         Slice (Source'Old, Integer'Max (High + 1, Low),\n                           Integer'Max (High + 1, Low) +\n-                            (Max_Length - Low - By'Length)))),\n-        Global         => (Proof_In => Max_Length);\n+                            (Max_Length - Low - By'Length))));\n \n       function Insert\n         (Source   : Bounded_String;\n@@ -1666,8 +1648,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                       and then Slice (Insert'Result,\n                         Before + New_Item'Length, Max_Length) =\n                           Slice (Source,\n-                            Before, Max_Length - New_Item'Length))),\n-        Global         => (Proof_In => Max_Length);\n+                            Before, Max_Length - New_Item'Length)));\n \n       procedure Insert\n         (Source   : in out Bounded_String;\n@@ -1780,8 +1761,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                       and then\n                         Slice (Source, Before + New_Item'Length, Max_Length) =\n                           Slice (Source'Old,\n-                            Before, Max_Length - New_Item'Length))),\n-        Global         => (Proof_In => Max_Length);\n+                            Before, Max_Length - New_Item'Length)));\n \n       function Overwrite\n         (Source   : Bounded_String;\n@@ -1867,8 +1847,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n \n                and then Slice (Overwrite'Result, Position, Max_Length) =\n                  New_Item\n-                   (New_Item'First .. Max_Length - Position + New_Item'First)),\n-        Global         => (Proof_In => Max_Length);\n+                   (New_Item'First .. Max_Length - Position + New_Item'First));\n \n       procedure Overwrite\n         (Source    : in out Bounded_String;\n@@ -1953,8 +1932,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n \n                and then Slice (Source, Position, Max_Length) =\n                  New_Item\n-                   (New_Item'First .. Max_Length - Position + New_Item'First)),\n-        Global         => (Proof_In => Max_Length);\n+                   (New_Item'First .. Max_Length - Position + New_Item'First));\n \n       function Delete\n         (Source  : Bounded_String;\n@@ -2166,8 +2144,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  Slice (Head'Result,\n                    Max_Length - Count + Length (Source) + 1, Max_Length) =\n-                     (1 .. Count - Length (Source) => Pad)),\n-        Global         => (Proof_In => Max_Length);\n+                     (1 .. Count - Length (Source) => Pad));\n \n       procedure Head\n         (Source : in out Bounded_String;\n@@ -2225,8 +2202,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  Slice (Source,\n                    Max_Length - Count + Length (Source'Old) + 1, Max_Length) =\n-                     (1 .. Count - Length (Source'Old) => Pad)),\n-        Global         => (Proof_In => Max_Length);\n+                     (1 .. Count - Length (Source'Old) => Pad));\n \n       function Tail\n         (Source : Bounded_String;\n@@ -2287,8 +2263,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                    (1 .. Count - Length (Source) => Pad)\n                and then\n                  Slice (Tail'Result, Count - Length (Source) + 1, Max_Length) =\n-                   Slice (Source, 1, Max_Length - Count + Length (Source))),\n-        Global         => (Proof_In => Max_Length);\n+                   Slice (Source, 1, Max_Length - Count + Length (Source)));\n \n       procedure Tail\n         (Source : in out Bounded_String;\n@@ -2351,8 +2326,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  Slice (Source, Count - Length (Source'Old) + 1, Max_Length) =\n                    Slice (Source'Old,\n-                     1, Max_Length - Count + Length (Source'Old))),\n-        Global         => (Proof_In => Max_Length);\n+                     1, Max_Length - Count + Length (Source'Old)));\n \n       ------------------------------------\n       -- String Constructor Subprograms --\n@@ -2362,48 +2336,44 @@ package Ada.Strings.Bounded with SPARK_Mode is\n         (Left  : Natural;\n          Right : Character) return Bounded_String\n       with\n-        Pre    => Left <= Max_Length,\n-        Post   => To_String (\"*\"'Result) = (1 .. Left => Right),\n-        Global => Max_Length;\n+        Pre  => Left <= Max_Length,\n+        Post => To_String (\"*\"'Result) = (1 .. Left => Right);\n \n       function \"*\"\n         (Left  : Natural;\n          Right : String) return Bounded_String\n       with\n-        Pre    => (if Left /= 0 then Right'Length <= Max_Length / Left),\n-        Post   =>\n+        Pre  => (if Left /= 0 then Right'Length <= Max_Length / Left),\n+        Post =>\n           Length (\"*\"'Result) = Left * Right'Length\n             and then\n               (if Right'Length > 0 then\n                  (for all K in 1 .. Left * Right'Length =>\n                     Element (\"*\"'Result, K) =\n-                      Right (Right'First + (K - 1) mod Right'Length))),\n-        Global => Max_Length;\n+                      Right (Right'First + (K - 1) mod Right'Length)));\n \n       function \"*\"\n         (Left  : Natural;\n          Right : Bounded_String) return Bounded_String\n       with\n-        Pre    => (if Left /= 0 then Length (Right) <= Max_Length / Left),\n-        Post   =>\n+        Pre  => (if Left /= 0 then Length (Right) <= Max_Length / Left),\n+        Post =>\n           Length (\"*\"'Result) = Left * Length (Right)\n             and then\n               (if Length (Right) > 0 then\n                  (for all K in 1 .. Left * Length (Right) =>\n                     Element (\"*\"'Result, K) =\n-                      Element (Right, 1 + (K - 1) mod Length (Right)))),\n-        Global => (Proof_In => Max_Length);\n+                      Element (Right, 1 + (K - 1) mod Length (Right))));\n \n       function Replicate\n         (Count : Natural;\n          Item  : Character;\n          Drop  : Truncation := Error) return Bounded_String\n       with\n-        Pre    => (if Count > Max_Length then Drop /= Error),\n-        Post   =>\n+        Pre  => (if Count > Max_Length then Drop /= Error),\n+        Post =>\n           To_String (Replicate'Result) =\n-            (1 .. Natural'Min (Max_Length, Count) => Item),\n-        Global => Max_Length;\n+            (1 .. Natural'Min (Max_Length, Count) => Item);\n \n       function Replicate\n         (Count : Natural;\n@@ -2437,8 +2407,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                and then\n                  (for all K in 1 .. Max_Length =>\n                     Element (Replicate'Result, K) =\n-                      Item (Item'Last - (Max_Length - K) mod Item'Length))),\n-        Global         => Max_Length;\n+                      Item (Item'Last - (Max_Length - K) mod Item'Length)));\n \n       function Replicate\n         (Count : Natural;\n@@ -2473,8 +2442,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                  (for all K in 1 .. Max_Length =>\n                     Element (Replicate'Result, K) =\n                       Element (Item,\n-                        Length (Item) - (Max_Length - K) mod Length (Item)))),\n-        Global         => (Proof_In => Max_Length);\n+                        Length (Item) - (Max_Length - K) mod Length (Item))));\n \n    private\n       --  Most of the implementation is in the separate non generic package"}]}