{"sha": "84b63c01f8965aed1e8723b20a58031b705eab68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRiNjNjMDFmODk2NWFlZDFlODcyM2IyMGE1ODAzMWI3MDVlYWI2OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-05-27T23:25:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-05-27T23:25:54Z"}, "message": "future: Use noexcept.\n\n2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/future: Use noexcept.\n\t* src/future.cc: Likewise.\n\nFrom-SVN: r174368", "tree": {"sha": "e426764b7c6894c5b6ede9228eecfb8868ce8d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e426764b7c6894c5b6ede9228eecfb8868ce8d91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84b63c01f8965aed1e8723b20a58031b705eab68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b63c01f8965aed1e8723b20a58031b705eab68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b63c01f8965aed1e8723b20a58031b705eab68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b63c01f8965aed1e8723b20a58031b705eab68/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76aa42d2663180d0eda360689a42040ac7ec92bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aa42d2663180d0eda360689a42040ac7ec92bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76aa42d2663180d0eda360689a42040ac7ec92bd"}], "stats": {"total": 139, "additions": 72, "deletions": 67}, "files": [{"sha": "6d27f0aa5e3d96e27a1f5fc38c5d25d4f61f4395", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b63c01f8965aed1e8723b20a58031b705eab68/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b63c01f8965aed1e8723b20a58031b705eab68/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=84b63c01f8965aed1e8723b20a58031b705eab68", "patch": "@@ -1,3 +1,8 @@\n+2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/future: Use noexcept.\n+\t* src/future.cc: Likewise.\n+\n 2011-05-27  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/thread (this_thread::sleep_until): Move after sleep_for."}, {"sha": "479904c5cf997792b5fc81481d72e255556e7212", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b63c01f8965aed1e8723b20a58031b705eab68/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b63c01f8965aed1e8723b20a58031b705eab68/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=84b63c01f8965aed1e8723b20a58031b705eab68", "patch": "@@ -72,16 +72,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Points to a statically-allocated object derived from error_category.\n   const error_category&\n-  future_category();\n+  future_category() noexcept;\n \n   /// Overload for make_error_code.\n   inline error_code \n-  make_error_code(future_errc __errc)\n+  make_error_code(future_errc __errc) noexcept\n   { return error_code(static_cast<int>(__errc), future_category()); }\n \n   /// Overload for make_error_condition.\n   inline error_condition \n-  make_error_condition(future_errc __errc)\n+  make_error_condition(future_errc __errc) noexcept\n   { return error_condition(static_cast<int>(__errc), future_category()); }\n \n   /**\n@@ -97,13 +97,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : logic_error(\"std::future_error\"), _M_code(__ec)\n     { }\n \n-    virtual ~future_error() throw();\n+    virtual ~future_error() noexcept;\n \n     virtual const char* \n-    what() const throw();\n+    what() const noexcept;\n \n     const error_code& \n-    code() const throw() { return _M_code; }\n+    code() const noexcept { return _M_code; }\n   };\n \n   // Forward declarations.\n@@ -197,7 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool \t\t\t_M_initialized;\n \n       public:\n-\t_Result() : _M_initialized() { }\n+\t_Result() noexcept : _M_initialized() { }\n \t\n \t~_Result()\n \t{\n@@ -207,7 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t// Return lvalue, future will add const or rvalue-reference\n \t_Res& \n-\t_M_value() { return *static_cast<_Res*>(_M_addr()); }\n+\t_M_value() noexcept { return *static_cast<_Res*>(_M_addr()); }\n \n \tvoid\n \t_M_set(const _Res& __res)\n@@ -226,7 +226,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       private:\n \tvoid _M_destroy() { delete this; }\n \n-\tvoid* _M_addr() { return static_cast<void*>(&_M_storage); }\n+\tvoid* _M_addr() noexcept { return static_cast<void*>(&_M_storage); }\n     };\n \n     // TODO: use template alias when available\n@@ -294,7 +294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       once_flag\t\t\t_M_once;\n \n     public:\n-      _State_base() : _M_result(), _M_retrieved(ATOMIC_FLAG_INIT) { }\n+      _State_base() noexcept : _M_result(), _M_retrieved(ATOMIC_FLAG_INIT) { }\n       _State_base(const _State_base&) = delete;\n       _State_base& operator=(const _State_base&) = delete;\n       virtual ~_State_base();\n@@ -454,7 +454,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         __set = true;\n       }\n \n-      bool _M_ready() const { return static_cast<bool>(_M_result); }\n+      bool _M_ready() const noexcept { return static_cast<bool>(_M_result); }\n \n       virtual void _M_run_deferred() { }\n     };\n@@ -476,11 +476,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res>\n     struct __future_base::_Result<_Res&> : __future_base::_Result_base\n     {\n-      _Result() : _M_value_ptr() { }\n+      _Result() noexcept : _M_value_ptr() { }\n \n-      void _M_set(_Res& __res) { _M_value_ptr = &__res; }\n+      void _M_set(_Res& __res) noexcept { _M_value_ptr = &__res; }\n \n-      _Res& _M_get() { return *_M_value_ptr; }\n+      _Res& _M_get() noexcept { return *_M_value_ptr; }\n \n     private:\n       _Res* \t\t\t_M_value_ptr;\n@@ -514,7 +514,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __basic_future& operator=(const __basic_future&) = delete;\n \n       bool \n-      valid() const { return static_cast<bool>(_M_state); }\n+      valid() const noexcept { return static_cast<bool>(_M_state); }\n \n       void \n       wait() const\n@@ -551,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return static_cast<__result_type>(__res);\n       }\n \n-      void _M_swap(__basic_future& __that)\n+      void _M_swap(__basic_future& __that) noexcept\n       {\n         _M_state.swap(__that._M_state);\n       }\n@@ -566,21 +566,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Copy construction from a shared_future\n       explicit\n-      __basic_future(const shared_future<_Res>&);\n+      __basic_future(const shared_future<_Res>&) noexcept;\n \n       // Move construction from a shared_future\n       explicit\n-      __basic_future(shared_future<_Res>&&);\n+      __basic_future(shared_future<_Res>&&) noexcept;\n \n       // Move construction from a future\n       explicit\n-      __basic_future(future<_Res>&&);\n+      __basic_future(future<_Res>&&) noexcept;\n \n-      constexpr __basic_future() : _M_state() { }\n+      constexpr __basic_future() noexcept : _M_state() { }\n \n       struct _Reset\n       {\n-        explicit _Reset(__basic_future& __fut) : _M_fut(__fut) { }\n+        explicit _Reset(__basic_future& __fut) noexcept : _M_fut(__fut) { }\n         ~_Reset() { _M_fut._M_state.reset(); }\n         __basic_future& _M_fut;\n       };\n@@ -604,16 +604,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       future(const __state_type& __state) : _Base_type(__state) { }\n \n     public:\n-      constexpr future() : _Base_type() { }\n+      constexpr future() noexcept : _Base_type() { }\n \n       /// Move constructor\n-      future(future&& __uf) : _Base_type(std::move(__uf)) { }\n+      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }\n \n       // Disable copying\n       future(const future&) = delete;\n       future& operator=(const future&) = delete;\n \n-      future& operator=(future&& __fut)\n+      future& operator=(future&& __fut) noexcept\n       {\n         future(std::move(__fut))._M_swap(*this);\n         return *this;\n@@ -647,16 +647,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       future(const __state_type& __state) : _Base_type(__state) { }\n \n     public:\n-      constexpr future() : _Base_type() { }\n+      constexpr future() noexcept : _Base_type() { }\n \n       /// Move constructor\n-      future(future&& __uf) : _Base_type(std::move(__uf)) { }\n+      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }\n \n       // Disable copying\n       future(const future&) = delete;\n       future& operator=(const future&) = delete;\n \n-      future& operator=(future&& __fut)\n+      future& operator=(future&& __fut) noexcept\n       {\n         future(std::move(__fut))._M_swap(*this);\n         return *this;\n@@ -690,16 +690,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       future(const __state_type& __state) : _Base_type(__state) { }\n \n     public:\n-      constexpr future() : _Base_type() { }\n+      constexpr future() noexcept : _Base_type() { }\n \n       /// Move constructor\n-      future(future&& __uf) : _Base_type(std::move(__uf)) { }\n+      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }\n \n       // Disable copying\n       future(const future&) = delete;\n       future& operator=(const future&) = delete;\n \n-      future& operator=(future&& __fut)\n+      future& operator=(future&& __fut) noexcept\n       {\n         future(std::move(__fut))._M_swap(*this);\n         return *this;\n@@ -724,18 +724,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __basic_future<_Res> _Base_type;\n \n     public:\n-      constexpr shared_future() : _Base_type() { }\n+      constexpr shared_future() noexcept : _Base_type() { }\n \n       /// Copy constructor\n       shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n \n       /// Construct from a future rvalue\n-      shared_future(future<_Res>&& __uf)\n+      shared_future(future<_Res>&& __uf) noexcept\n       : _Base_type(std::move(__uf))\n       { }\n \n       /// Construct from a shared_future rvalue\n-      shared_future(shared_future&& __sf)\n+      shared_future(shared_future&& __sf) noexcept\n       : _Base_type(std::move(__sf))\n       { }\n \n@@ -745,7 +745,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return *this;\n       }\n \n-      shared_future& operator=(shared_future&& __sf)\n+      shared_future& operator=(shared_future&& __sf) noexcept\n       {\n         shared_future(std::move(__sf))._M_swap(*this);\n         return *this;\n@@ -768,18 +768,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __basic_future<_Res&>           _Base_type;\n \n     public:\n-      constexpr shared_future() : _Base_type() { }\n+      constexpr shared_future() noexcept : _Base_type() { }\n \n       /// Copy constructor\n       shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n \n       /// Construct from a future rvalue\n-      shared_future(future<_Res&>&& __uf)\n+      shared_future(future<_Res&>&& __uf) noexcept\n       : _Base_type(std::move(__uf))\n       { }\n \n       /// Construct from a shared_future rvalue\n-      shared_future(shared_future&& __sf)\n+      shared_future(shared_future&& __sf) noexcept\n       : _Base_type(std::move(__sf))\n       { }\n \n@@ -789,7 +789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return *this;\n       }\n \n-      shared_future& operator=(shared_future&& __sf)\n+      shared_future& operator=(shared_future&& __sf) noexcept\n       {\n         shared_future(std::move(__sf))._M_swap(*this);\n         return *this;\n@@ -807,18 +807,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __basic_future<void> _Base_type;\n \n     public:\n-      constexpr shared_future() : _Base_type() { }\n+      constexpr shared_future() noexcept : _Base_type() { }\n \n       /// Copy constructor\n       shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n \n       /// Construct from a future rvalue\n-      shared_future(future<void>&& __uf)\n+      shared_future(future<void>&& __uf) noexcept\n       : _Base_type(std::move(__uf))\n       { }\n \n       /// Construct from a shared_future rvalue\n-      shared_future(shared_future&& __sf)\n+      shared_future(shared_future&& __sf) noexcept\n       : _Base_type(std::move(__sf))\n       { }\n \n@@ -828,7 +828,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return *this;\n       }\n \n-      shared_future& operator=(shared_future&& __sf)\n+      shared_future& operator=(shared_future&& __sf) noexcept\n       {\n         shared_future(std::move(__sf))._M_swap(*this);\n         return *this;\n@@ -842,19 +842,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Now we can define the protected __basic_future constructors.\n   template<typename _Res>\n     inline __basic_future<_Res>::\n-    __basic_future(const shared_future<_Res>& __sf)\n+    __basic_future(const shared_future<_Res>& __sf) noexcept\n     : _M_state(__sf._M_state)\n     { }\n \n   template<typename _Res>\n     inline __basic_future<_Res>::\n-    __basic_future(shared_future<_Res>&& __sf)\n+    __basic_future(shared_future<_Res>&& __sf) noexcept\n     : _M_state(std::move(__sf._M_state))\n     { }\n \n   template<typename _Res>\n     inline __basic_future<_Res>::\n-    __basic_future(future<_Res>&& __uf)\n+    __basic_future(future<_Res>&& __uf) noexcept\n     : _M_state(std::move(__uf._M_state))\n     { }\n \n@@ -890,7 +890,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_storage(new _Res_type())\n       { }\n \n-      promise(promise&& __rhs)\n+      promise(promise&& __rhs) noexcept\n       : _M_future(std::move(__rhs._M_future)),\n \t_M_storage(std::move(__rhs._M_storage))\n       { }\n@@ -911,7 +911,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Assignment\n       promise&\n-      operator=(promise&& __rhs)\n+      operator=(promise&& __rhs) noexcept\n       {\n         promise(std::move(__rhs)).swap(*this);\n         return *this;\n@@ -920,7 +920,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       promise& operator=(const promise&) = delete;\n \n       void\n-      swap(promise& __rhs)\n+      swap(promise& __rhs) noexcept\n       {\n         _M_future.swap(__rhs._M_future);\n         _M_storage.swap(__rhs._M_storage);\n@@ -956,7 +956,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Res>\n     inline void\n-    swap(promise<_Res>& __x, promise<_Res>& __y)\n+    swap(promise<_Res>& __x, promise<_Res>& __y) noexcept\n     { __x.swap(__y); }\n \n   template<typename _Res, typename _Alloc>\n@@ -982,7 +982,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_storage(new _Res_type())\n       { }\n \n-      promise(promise&& __rhs)\n+      promise(promise&& __rhs) noexcept\n       : _M_future(std::move(__rhs._M_future)), \n \t_M_storage(std::move(__rhs._M_storage))\n       { }\n@@ -1003,7 +1003,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Assignment\n       promise&\n-      operator=(promise&& __rhs)\n+      operator=(promise&& __rhs) noexcept\n       {\n         promise(std::move(__rhs)).swap(*this);\n         return *this;\n@@ -1012,7 +1012,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       promise& operator=(const promise&) = delete;\n \n       void\n-      swap(promise& __rhs)\n+      swap(promise& __rhs) noexcept\n       {\n         _M_future.swap(__rhs._M_future);\n         _M_storage.swap(__rhs._M_storage);\n@@ -1057,7 +1057,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_storage(new _Res_type())\n       { }\n \n-      promise(promise&& __rhs)\n+      promise(promise&& __rhs) noexcept\n       : _M_future(std::move(__rhs._M_future)),\n \t_M_storage(std::move(__rhs._M_storage))\n       { }\n@@ -1078,7 +1078,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Assignment\n       promise&\n-      operator=(promise&& __rhs)\n+      operator=(promise&& __rhs) noexcept\n       {\n         promise(std::move(__rhs)).swap(*this);\n         return *this;\n@@ -1087,7 +1087,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       promise& operator=(const promise&) = delete;\n \n       void\n-      swap(promise& __rhs)\n+      swap(promise& __rhs) noexcept\n       {\n         _M_future.swap(__rhs._M_future);\n         _M_storage.swap(__rhs._M_storage);\n@@ -1226,7 +1226,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       // Construction and destruction\n-      packaged_task() { }\n+      packaged_task() noexcept { }\n \n       template<typename _Fn>\n         explicit\n@@ -1252,21 +1252,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       packaged_task& operator=(packaged_task&) = delete;\n \n       // Move support\n-      packaged_task(packaged_task&& __other)\n+      packaged_task(packaged_task&& __other) noexcept\n       { this->swap(__other); }\n \n-      packaged_task& operator=(packaged_task&& __other)\n+      packaged_task& operator=(packaged_task&& __other) noexcept\n       {\n         packaged_task(std::move(__other)).swap(*this);\n         return *this;\n       }\n \n       void\n-      swap(packaged_task& __other)\n+      swap(packaged_task& __other) noexcept\n       { _M_state.swap(__other._M_state); }\n \n       bool\n-      valid() const\n+      valid() const noexcept\n       { return static_cast<bool>(_M_state); }\n \n       // Result retrieval\n@@ -1294,7 +1294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res, typename... _ArgTypes>\n     inline void\n     swap(packaged_task<_Res(_ArgTypes...)>& __x,\n-\t packaged_task<_Res(_ArgTypes...)>& __y)\n+\t packaged_task<_Res(_ArgTypes...)>& __y) noexcept\n     { __x.swap(__y); }\n \n   template<typename _Res, typename _Alloc>"}, {"sha": "ad941f95ad2d98000ef992d5b20e59d782c9aaea", "filename": "libstdc++-v3/src/future.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b63c01f8965aed1e8723b20a58031b705eab68/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b63c01f8965aed1e8723b20a58031b705eab68/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc?ref=84b63c01f8965aed1e8723b20a58031b705eab68", "patch": "@@ -28,10 +28,10 @@ namespace\n {\n   struct future_error_category : public std::error_category\n   {\n-    future_error_category() {}\n+    future_error_category() noexcept {}\n \n     virtual const char*\n-    name() const \n+    name() const noexcept\n     { return \"future\"; }\n \n     virtual std::string message(int __ec) const\n@@ -60,7 +60,7 @@ namespace\n   };\n \n   const future_error_category&\n-  __future_category_instance()\n+  __future_category_instance() noexcept\n   {\n     static const future_error_category __fec;\n     return __fec;\n@@ -71,13 +71,13 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  const error_category& future_category()\n+  const error_category& future_category() noexcept\n   { return __future_category_instance(); }\n \n-  future_error::~future_error() throw() { }\n+  future_error::~future_error() noexcept { }\n \n   const char* \n-  future_error::what() const throw() { return _M_code.message().c_str(); }\n+  future_error::what() const noexcept { return _M_code.message().c_str(); }\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n   && defined(_GLIBCXX_ATOMIC_BUILTINS_4)"}]}