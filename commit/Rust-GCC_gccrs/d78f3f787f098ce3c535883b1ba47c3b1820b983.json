{"sha": "d78f3f787f098ce3c535883b1ba47c3b1820b983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4ZjNmNzg3ZjA5OGNlM2M1MzU4ODNiMWJhNDdjM2IxODIwYjk4Mw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-02-05T20:14:59Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-02-05T20:14:59Z"}, "message": "tree-vrp.c (cfg_loops): Removed.\n\n\t* tree-vrp.c (cfg_loops): Removed.\n\t(adjust_range_with_scev, vrp_visit_assignment, execute_vrp):\n\tUse current_loops instead of cfg_loops.  Pass flags to\n\tloop_optimizer_init.\n\t* cfgloopmanip.c (fix_loop_structure): Update only available\n\tinformation.\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Pass flags to\n\tloop_optimizer_init.\n\t* modulo-sched.c (build_loops_structure): Removed.\n\t(sms_schedule): Use loop_optimizer_init.\n\t* loop-init.c (loop_optimizer_init): Use flags to determine\n\twhich properties of loops to prepare.\n\t(rtl_loop_init): Pass flags to loop_optimizer_init.\n\t* tree-ssa-sink.c (execute_sink_code): Ditto.\n\t* tree-ssa-loop.c (tree_loop_optimizer_init): Ditto.\n\t* tree-ssa-pre.c (init_pre): Ditto.\n\t* cfgloop.h (LOOPS_NORMAL): New.\n\t(loop_optimizer_init): Declaration changed.\n\nFrom-SVN: r110620", "tree": {"sha": "f9c43362e6fd6ea70ca28c6eb34ce8db0d770637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9c43362e6fd6ea70ca28c6eb34ce8db0d770637"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d78f3f787f098ce3c535883b1ba47c3b1820b983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78f3f787f098ce3c535883b1ba47c3b1820b983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78f3f787f098ce3c535883b1ba47c3b1820b983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78f3f787f098ce3c535883b1ba47c3b1820b983/comments", "author": null, "committer": null, "parents": [{"sha": "efb0828de397e990ed58d9429e4f70cd4694b718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb0828de397e990ed58d9429e4f70cd4694b718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb0828de397e990ed58d9429e4f70cd4694b718"}], "stats": {"total": 131, "additions": 60, "deletions": 71}, "files": [{"sha": "93a10d71d78c4f4a5c922422121e20a3f45725f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -1,3 +1,24 @@\n+2006-02-04  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-vrp.c (cfg_loops): Removed.\n+\t(adjust_range_with_scev, vrp_visit_assignment, execute_vrp):\n+\tUse current_loops instead of cfg_loops.  Pass flags to\n+\tloop_optimizer_init.\n+\t* cfgloopmanip.c (fix_loop_structure): Update only available\n+\tinformation.\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Pass flags to\n+\tloop_optimizer_init.\n+\t* modulo-sched.c (build_loops_structure): Removed.\n+\t(sms_schedule): Use loop_optimizer_init.\n+\t* loop-init.c (loop_optimizer_init): Use flags to determine\n+\twhich properties of loops to prepare.\n+\t(rtl_loop_init): Pass flags to loop_optimizer_init.\n+\t* tree-ssa-sink.c (execute_sink_code): Ditto.\n+\t* tree-ssa-loop.c (tree_loop_optimizer_init): Ditto.\n+\t* tree-ssa-pre.c (init_pre): Ditto.\n+\t* cfgloop.h (LOOPS_NORMAL): New.\n+\t(loop_optimizer_init): Declaration changed.\n+\n 2006-02-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa/x-ada-hpux10, pa/t-pa-hpux10, pa/t-pa-hpux11: New files."}, {"sha": "9e573849195ef0fc7f6e14b4cea3188ab58ebd03", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -185,6 +185,9 @@ enum\n   LOOPS_HAVE_MARKED_SINGLE_EXITS = 8\n };\n \n+#define LOOPS_NORMAL (LOOPS_HAVE_PREHEADERS | LOOPS_HAVE_SIMPLE_LATCHES \\\n+\t\t      | LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n+\n /* Structure to hold CFG information about natural loops within a function.  */\n struct loops\n {\n@@ -434,7 +437,7 @@ extern unsigned global_cost_for_size (unsigned, unsigned, unsigned);\n extern void init_set_costs (void);\n \n /* Loop optimizer initialization.  */\n-extern struct loops *loop_optimizer_init (FILE *);\n+extern struct loops *loop_optimizer_init (FILE *, unsigned);\n extern void loop_optimizer_finalize (struct loops *, FILE *);\n \n /* Optimization passes.  */"}, {"sha": "bb7aca0faebdd060ddf63705b987bd6b4ab1c123", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -1617,6 +1617,8 @@ fix_loop_structure (struct loops *loops, bitmap changed_bbs)\n       bb->aux = NULL;\n     }\n \n-  mark_single_exit_loops (loops);\n-  mark_irreducible_loops (loops);\n+  if (loops->state & LOOPS_HAVE_MARKED_SINGLE_EXITS)\n+    mark_single_exit_loops (loops);\n+  if (loops->state & LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n+    mark_irreducible_loops (loops);\n }"}, {"sha": "d6c370314cccb0ede847c7c5ebb0000c16b436d8", "filename": "gcc/loop-init.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -34,10 +34,11 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n \f\n /* Initialize loop optimizer.  This is used by the tree and RTL loop\n-   optimizers.  */\n+   optimizers.  FLAGS specify what properties to compute and/or ensure for\n+   loops.  */\n \n struct loops *\n-loop_optimizer_init (FILE *dumpfile)\n+loop_optimizer_init (FILE *dumpfile, unsigned flags)\n {\n   struct loops *loops = XCNEW (struct loops);\n   edge e;\n@@ -77,13 +78,19 @@ loop_optimizer_init (FILE *dumpfile)\n   loops->cfg.dfs_order = NULL;\n \n   /* Create pre-headers.  */\n-  create_preheaders (loops, CP_SIMPLE_PREHEADERS);\n+  if (flags & LOOPS_HAVE_PREHEADERS)\n+    create_preheaders (loops, CP_SIMPLE_PREHEADERS);\n \n   /* Force all latches to have only single successor.  */\n-  force_single_succ_latches (loops);\n+  if (flags & LOOPS_HAVE_SIMPLE_LATCHES)\n+    force_single_succ_latches (loops);\n \n   /* Mark irreducible loops.  */\n-  mark_irreducible_loops (loops);\n+  if (flags & LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS)\n+    mark_irreducible_loops (loops);\n+\n+  if (flags & LOOPS_HAVE_MARKED_SINGLE_EXITS)\n+    mark_single_exit_loops (loops);\n \n   /* Dump loops.  */\n   flow_loops_dump (loops, dumpfile, NULL, 1);\n@@ -166,7 +173,7 @@ rtl_loop_init (void)\n   /* Initialize structures for layout changes.  */\n   cfg_layout_initialize (0);\n \n-  current_loops = loop_optimizer_init (dump_file);\n+  current_loops = loop_optimizer_init (dump_file, LOOPS_NORMAL);\n }\n \n struct tree_opt_pass pass_rtl_loop_init ="}, {"sha": "52190e0e777bf09b5aec701a68a58656b8b51b91", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -894,44 +894,6 @@ canon_loop (struct loop *loop)\n     }\n }\n \n-/* Build the loop information without loop\n-   canonization, the loop canonization will\n-   be performed if the loop is SMSable.  */\n-static struct loops *\n-build_loops_structure (FILE *dumpfile)\n-{\n-  struct loops *loops = XCNEW (struct loops);\n-\n-  /* Find the loops.  */\n-\n-  if (flow_loops_find (loops) <= 1)\n-    {\n-      /* No loops.  */\n-      flow_loops_free (loops);\n-      free (loops);\n-\n-      return NULL;\n-    }\n-\n-  /* Not going to update these.  */\n-  free (loops->cfg.rc_order);\n-  loops->cfg.rc_order = NULL;\n-  free (loops->cfg.dfs_order);\n-  loops->cfg.dfs_order = NULL;\n-\n-  create_preheaders (loops, CP_SIMPLE_PREHEADERS);\n-  mark_single_exit_loops (loops);\n-  /* Dump loops.  */\n-  flow_loops_dump (loops, dumpfile, NULL, 1);\n-\n-#ifdef ENABLE_CHECKING\n-  verify_dominators (CDI_DOMINATORS);\n-  verify_loop_structure (loops);\n-#endif\n-\n-  return loops;\n-}\n-\n /* Main entry point, perform SMS scheduling on the loops of the function\n    that consist of single basic blocks.  */\n static void\n@@ -953,10 +915,11 @@ sms_schedule (FILE *dump_file)\n   edge latch_edge;\n   gcov_type trip_count = 0;\n \n-  if (! (loops = build_loops_structure (dump_file)))\n+  loops = loop_optimizer_init (dump_file, (LOOPS_HAVE_PREHEADERS\n+\t\t\t\t\t   | LOOPS_HAVE_MARKED_SINGLE_EXITS));\n+  if (!loops)\n     return;  /* There is no loops to schedule.  */\n \n-\n   stats_file = dump_file;\n \n   /* Initialize issue_rate.  */"}, {"sha": "b9d1ce95058262ad5fc23e38141cb531fb1555b3", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -132,13 +132,10 @@ copy_loop_headers (void)\n   unsigned n_bbs;\n   unsigned bbs_size;\n \n-  loops = loop_optimizer_init (dump_file);\n+  loops = loop_optimizer_init (dump_file, (LOOPS_HAVE_PREHEADERS\n+\t\t\t\t\t   | LOOPS_HAVE_SIMPLE_LATCHES));\n   if (!loops)\n     return;\n-  \n-  /* We do not try to keep the information about irreducible regions\n-     up-to-date.  */\n-  loops->state &= ~LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS;\n \n #ifdef ENABLE_CHECKING\n   verify_loop_structure (loops);"}, {"sha": "b776d0fb3a65ebadfb7f5ab97d0baa8c37d1ca05", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -48,7 +48,10 @@ struct loops *current_loops = NULL;\n static struct loops *\n tree_loop_optimizer_init (FILE *dump)\n {\n-  struct loops *loops = loop_optimizer_init (dump);\n+  struct loops *loops;\n+ \n+  loops = loop_optimizer_init (dump, (LOOPS_NORMAL\n+\t\t\t\t      | LOOPS_HAVE_MARKED_SINGLE_EXITS));\n \n   if (!loops)\n     return NULL;\n@@ -92,9 +95,6 @@ tree_ssa_loop_init (void)\n   if (!current_loops)\n     return;\n \n-  /* Find the loops that are exited just through a single edge.  */\n-  mark_single_exit_loops (current_loops);\n-\n   scev_initialize (current_loops);\n }\n   "}, {"sha": "4c4cec50da336eb6a9526d5e4b8d1304a69f5b4f", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -3441,7 +3441,7 @@ init_pre (bool do_fre)\n \n   vn_init ();\n   if (!do_fre)\n-    current_loops = loop_optimizer_init (dump_file);\n+    current_loops = loop_optimizer_init (dump_file, LOOPS_NORMAL);\n \n   connect_infinite_loops_to_exit ();\n   memset (&pre_stats, 0, sizeof (pre_stats));"}, {"sha": "ed6baf2cd893b8d7860d6d2c15fa7a29a14a19d0", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -522,7 +522,7 @@ sink_code_in_bb (basic_block bb)\n static void\n execute_sink_code (void)\n {\n-  struct loops *loops = loop_optimizer_init (dump_file);\n+  struct loops *loops = loop_optimizer_init (dump_file, LOOPS_NORMAL);\n   connect_infinite_loops_to_exit ();\n   memset (&sink_stats, 0, sizeof (sink_stats));\n   calculate_dominance_info (CDI_DOMINATORS | CDI_POST_DOMINATORS);"}, {"sha": "0938d6ce28b6f5223c93e49190772958c9a42ba0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78f3f787f098ce3c535883b1ba47c3b1820b983/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d78f3f787f098ce3c535883b1ba47c3b1820b983", "patch": "@@ -41,10 +41,6 @@ Boston, MA 02110-1301, USA.  */\n    sub-graph in find_assert_locations.  */\n static sbitmap found_in_subgraph;\n \n-/* Loop structure of the program.  Used to analyze scalar evolutions\n-   inside adjust_range_with_scev.  */\n-static struct loops *cfg_loops;\n-\n /* Local functions.  */\n static int compare_values (tree val1, tree val2);\n \n@@ -1909,7 +1905,7 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop, tree stmt,\n \n   /* Do not adjust ranges when chrec may wrap.  */\n   if (scev_probably_wraps_p (chrec_type (chrec), init, step, stmt,\n-\t\t\t     cfg_loops->parray[CHREC_VARIABLE (chrec)],\n+\t\t\t     current_loops->parray[CHREC_VARIABLE (chrec)],\n \t\t\t     &init_is_max, &unknown_max)\n       || unknown_max)\n     return;\n@@ -3278,7 +3274,7 @@ vrp_visit_assignment (tree stmt, tree *output_p)\n       /* If STMT is inside a loop, we may be able to know something\n \t else about the range of LHS by examining scalar evolution\n \t information.  */\n-      if (cfg_loops && (l = loop_containing_stmt (stmt)))\n+      if (current_loops && (l = loop_containing_stmt (stmt)))\n \tadjust_range_with_scev (&new_vr, l, stmt, lhs);\n \n       if (update_value_range (lhs, &new_vr))\n@@ -4312,18 +4308,18 @@ execute_vrp (void)\n {\n   insert_range_assertions ();\n \n-  cfg_loops = loop_optimizer_init (NULL);\n-  if (cfg_loops)\n-    scev_initialize (cfg_loops);\n+  current_loops = loop_optimizer_init (NULL, LOOPS_NORMAL);\n+  if (current_loops)\n+    scev_initialize (current_loops);\n \n   vrp_initialize ();\n   ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n   vrp_finalize ();\n \n-  if (cfg_loops)\n+  if (current_loops)\n     {\n       scev_finalize ();\n-      loop_optimizer_finalize (cfg_loops, NULL);\n+      loop_optimizer_finalize (current_loops, NULL);\n       current_loops = NULL;\n     }\n "}]}