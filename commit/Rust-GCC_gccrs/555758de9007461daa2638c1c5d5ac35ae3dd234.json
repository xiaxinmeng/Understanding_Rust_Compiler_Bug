{"sha": "555758de9007461daa2638c1c5d5ac35ae3dd234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1NzU4ZGU5MDA3NDYxZGFhMjYzOGMxYzVkNWFjMzVhZTNkZDIzNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-12T09:21:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-12T09:21:35Z"}, "message": "re PR tree-optimization/83359 (ICE in expand_LOOP_DIST_ALIAS, at internal-fn.c:2362)\n\n\tPR tree-optimization/83359\n\t* tree-cfg.h (fold_loop_internal_call): Declare.\n\t* tree-vectorizer.c (fold_loop_internal_call): Moved to ...\n\t* tree-cfg.c (fold_loop_internal_call): ... here.  No longer static.\n\t(find_loop_dist_alias): New function.\n\t(move_sese_region_to_fn): If any dloop->orig_loop_num value is\n\tupdated, also adjust any corresponding LOOP_DIST_ALIAS internal\n\tcalls.\n\n\t* gcc.dg/graphite/pr83359.c: New test.\n\nFrom-SVN: r255575", "tree": {"sha": "c1ad730e9cadb28705113d3cb38417d7d6c7e436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ad730e9cadb28705113d3cb38417d7d6c7e436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/555758de9007461daa2638c1c5d5ac35ae3dd234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555758de9007461daa2638c1c5d5ac35ae3dd234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555758de9007461daa2638c1c5d5ac35ae3dd234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555758de9007461daa2638c1c5d5ac35ae3dd234/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12c667b5b449a9c86c763438fb96e6e029533fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c667b5b449a9c86c763438fb96e6e029533fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c667b5b449a9c86c763438fb96e6e029533fb7"}], "stats": {"total": 182, "additions": 156, "deletions": 26}, "files": [{"sha": "8c24c0ec722b21c85243b0a9c06af18d97e59de7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=555758de9007461daa2638c1c5d5ac35ae3dd234", "patch": "@@ -1,5 +1,14 @@\n 2017-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83359\n+\t* tree-cfg.h (fold_loop_internal_call): Declare.\n+\t* tree-vectorizer.c (fold_loop_internal_call): Moved to ...\n+\t* tree-cfg.c (fold_loop_internal_call): ... here.  No longer static.\n+\t(find_loop_dist_alias): New function.\n+\t(move_sese_region_to_fn): If any dloop->orig_loop_num value is\n+\tupdated, also adjust any corresponding LOOP_DIST_ALIAS internal\n+\tcalls.\n+\n \tPR tree-optimization/80631\n \t* tree-vect-loop.c (get_initial_def_for_reduction): Fix comment typo.\n \t(vect_create_epilog_for_reduction): Add INDUC_VAL and INDUC_CODE"}, {"sha": "811ec8d381a95912bcb8167fda3e9b1854de8d38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=555758de9007461daa2638c1c5d5ac35ae3dd234", "patch": "@@ -1,5 +1,8 @@\n 2017-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83359\n+\t* gcc.dg/graphite/pr83359.c: New test.\n+\n \tPR tree-optimization/80631\n \t* gcc.dg/vect/pr80631-1.c: New test.\n \t* gcc.dg/vect/pr80631-2.c: New test."}, {"sha": "91171180a23077d1b0062bbe0968a3b67a88b03d", "filename": "gcc/testsuite/gcc.dg/graphite/pr83359.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr83359.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr83359.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr83359.c?ref=555758de9007461daa2638c1c5d5ac35ae3dd234", "patch": "@@ -0,0 +1,40 @@\n+/* PR tree-optimization/83359 */\n+/* { dg-do compile { target pthread } } */\n+/* { dg-options \"-O3 -floop-parallelize-all -ftree-parallelize-loops=2\" } */\n+\n+int a, b, c;\n+\n+void\n+foo (int x, int y)\n+{\n+  int *d = &a;\n+  int *e = &x;\n+\n+  for (a = 0; a < 1; ++a)\n+    d = &x;\n+\n+  while (b < 10)\n+    {\n+      for (b = 0; b < 1; ++b)\n+        if (x == 0)\n+          while (x < 1)\n+            ++x;\n+        else\n+          while (x < 1)\n+            {\n+              d = &y;\n+              ++x;\n+            }\n+      ++b;\n+    }\n+\n+  for (;;)\n+    for (c = 0; c < 2; ++c)\n+      {\n+        if (*d != 0)\n+          a = *e;\n+\n+        e = &b;\n+        y = 0;\n+      }\n+}"}, {"sha": "9a4e3e206a1515ecc7af70900e83160d3666837a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 103, "deletions": 5, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=555758de9007461daa2638c1c5d5ac35ae3dd234", "patch": "@@ -7375,6 +7375,47 @@ gather_ssa_name_hash_map_from (tree const &from, tree const &, void *data)\n   return true;\n }\n \n+/* Return LOOP_DIST_ALIAS call if present in BB.  */\n+\n+static gimple *\n+find_loop_dist_alias (basic_block bb)\n+{\n+  gimple *g = last_stmt (bb);\n+  if (g == NULL || gimple_code (g) != GIMPLE_COND)\n+    return NULL;\n+\n+  gimple_stmt_iterator gsi = gsi_for_stmt (g);\n+  gsi_prev (&gsi);\n+  if (gsi_end_p (gsi))\n+    return NULL;\n+\n+  g = gsi_stmt (gsi);\n+  if (gimple_call_internal_p (g, IFN_LOOP_DIST_ALIAS))\n+    return g;\n+  return NULL;\n+}\n+\n+/* Fold loop internal call G like IFN_LOOP_VECTORIZED/IFN_LOOP_DIST_ALIAS\n+   to VALUE and update any immediate uses of it's LHS.  */\n+\n+void\n+fold_loop_internal_call (gimple *g, tree value)\n+{\n+  tree lhs = gimple_call_lhs (g);\n+  use_operand_p use_p;\n+  imm_use_iterator iter;\n+  gimple *use_stmt;\n+  gimple_stmt_iterator gsi = gsi_for_stmt (g);\n+\n+  update_call_from_tree (&gsi, value);\n+  FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n+    {\n+      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\tSET_USE (use_p, value);\n+      update_stmt (use_stmt);\n+    }\n+}\n+\n /* Move a single-entry, single-exit region delimited by ENTRY_BB and\n    EXIT_BB to function DEST_CFUN.  The whole region is replaced by a\n    single basic block in the original CFG and the new basic block is\n@@ -7548,7 +7589,6 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n \t  }\n     }\n \n-\n   /* Adjust the number of blocks in the tree root of the outlined part.  */\n   get_loop (dest_cfun, 0)->num_nodes = bbs.length () + 2;\n \n@@ -7559,19 +7599,77 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n   /* Fix up orig_loop_num.  If the block referenced in it has been moved\n      to dest_cfun, update orig_loop_num field, otherwise clear it.  */\n   struct loop *dloop;\n+  signed char *moved_orig_loop_num = NULL;\n   FOR_EACH_LOOP_FN (dest_cfun, dloop, 0)\n     if (dloop->orig_loop_num)\n       {\n+\tif (moved_orig_loop_num == NULL)\n+\t  moved_orig_loop_num\n+\t    = XCNEWVEC (signed char, vec_safe_length (larray));\n \tif ((*larray)[dloop->orig_loop_num] != NULL\n \t    && get_loop (saved_cfun, dloop->orig_loop_num) == NULL)\n-\t  dloop->orig_loop_num = (*larray)[dloop->orig_loop_num]->num;\n+\t  {\n+\t    if (moved_orig_loop_num[dloop->orig_loop_num] >= 0\n+\t\t&& moved_orig_loop_num[dloop->orig_loop_num] < 2)\n+\t      moved_orig_loop_num[dloop->orig_loop_num]++;\n+\t    dloop->orig_loop_num = (*larray)[dloop->orig_loop_num]->num;\n+\t  }\n \telse\n-\t  dloop->orig_loop_num = 0;\n+\t  {\n+\t    moved_orig_loop_num[dloop->orig_loop_num] = -1;\n+\t    dloop->orig_loop_num = 0;\n+\t  }\n       }\n-  ggc_free (larray);\n-\n   pop_cfun ();\n \n+  if (moved_orig_loop_num)\n+    {\n+      FOR_EACH_VEC_ELT (bbs, i, bb)\n+\t{\n+\t  gimple *g = find_loop_dist_alias (bb);\n+\t  if (g == NULL)\n+\t    continue;\n+\n+\t  int orig_loop_num = tree_to_shwi (gimple_call_arg (g, 0));\n+\t  gcc_assert (orig_loop_num\n+\t\t      && (unsigned) orig_loop_num < vec_safe_length (larray));\n+\t  if (moved_orig_loop_num[orig_loop_num] == 2)\n+\t    {\n+\t      /* If we have moved both loops with this orig_loop_num into\n+\t\t dest_cfun and the LOOP_DIST_ALIAS call is being moved there\n+\t\t too, update the first argument.  */\n+\t      gcc_assert ((*larray)[dloop->orig_loop_num] != NULL\n+\t\t\t  && (get_loop (saved_cfun, dloop->orig_loop_num)\n+\t\t\t      == NULL));\n+\t      tree t = build_int_cst (integer_type_node,\n+\t\t\t\t      (*larray)[dloop->orig_loop_num]->num);\n+\t      gimple_call_set_arg (g, 0, t);\n+\t      update_stmt (g);\n+\t      /* Make sure the following loop will not update it.  */\n+\t      moved_orig_loop_num[orig_loop_num] = 0;\n+\t    }\n+\t  else\n+\t    /* Otherwise at least one of the loops stayed in saved_cfun.\n+\t       Remove the LOOP_DIST_ALIAS call.  */\n+\t    fold_loop_internal_call (g, gimple_call_arg (g, 1));\n+\t}\n+      FOR_EACH_BB_FN (bb, saved_cfun)\n+\t{\n+\t  gimple *g = find_loop_dist_alias (bb);\n+\t  if (g == NULL)\n+\t    continue;\n+\t  int orig_loop_num = tree_to_shwi (gimple_call_arg (g, 0));\n+\t  gcc_assert (orig_loop_num\n+\t\t      && (unsigned) orig_loop_num < vec_safe_length (larray));\n+\t  if (moved_orig_loop_num[orig_loop_num])\n+\t    /* LOOP_DIST_ALIAS call remained in saved_cfun, if at least one\n+\t       of the corresponding loops was moved, remove it.  */\n+\t    fold_loop_internal_call (g, gimple_call_arg (g, 1));\n+\t}\n+      XDELETEVEC (moved_orig_loop_num);\n+    }\n+  ggc_free (larray);\n+\n   /* Move blocks from BBS into DEST_CFUN.  */\n   gcc_assert (bbs.length () >= 2);\n   after = dest_cfun->cfg->x_entry_block_ptr;"}, {"sha": "12deaa354b76ad8bbcd47f78906fd0e84e25457d", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=555758de9007461daa2638c1c5d5ac35ae3dd234", "patch": "@@ -77,6 +77,7 @@ extern void gather_blocks_in_sese_region (basic_block entry, basic_block exit,\n \t\t\t\t\t  vec<basic_block> *bbs_p);\n extern void verify_sese (basic_block, basic_block, vec<basic_block> *);\n extern bool gather_ssa_name_hash_map_from (tree const &, tree const &, void *);\n+extern void fold_loop_internal_call (gimple *, tree);\n extern basic_block move_sese_region_to_fn (struct function *, basic_block,\n \t\t\t\t           basic_block, tree);\n extern void dump_function_to_file (tree, FILE *, dump_flags_t);"}, {"sha": "a46d2a33a7061ba569a05afa5df0dda58c4163c5", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555758de9007461daa2638c1c5d5ac35ae3dd234/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=555758de9007461daa2638c1c5d5ac35ae3dd234", "patch": "@@ -464,27 +464,6 @@ vect_loop_vectorized_call (struct loop *loop)\n   return NULL;\n }\n \n-/* Fold loop internal call G like IFN_LOOP_VECTORIZED/IFN_LOOP_DIST_ALIAS\n-   to VALUE and update any immediate uses of it's LHS.  */\n-\n-static void\n-fold_loop_internal_call (gimple *g, tree value)\n-{\n-  tree lhs = gimple_call_lhs (g);\n-  use_operand_p use_p;\n-  imm_use_iterator iter;\n-  gimple *use_stmt;\n-  gimple_stmt_iterator gsi = gsi_for_stmt (g);\n-\n-  update_call_from_tree (&gsi, value);\n-  FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n-    {\n-      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n-\tSET_USE (use_p, value);\n-      update_stmt (use_stmt);\n-    }\n-}\n-\n /* If LOOP has been versioned during loop distribution, return the gurading\n    internal call.  */\n "}]}