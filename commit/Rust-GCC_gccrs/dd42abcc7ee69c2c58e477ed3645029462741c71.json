{"sha": "dd42abcc7ee69c2c58e477ed3645029462741c71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0MmFiY2M3ZWU2OWMyYzU4ZTQ3N2VkMzY0NTAyOTQ2Mjc0MWM3MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-25T09:25:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-25T09:25:05Z"}, "message": "locale_classes.h: Remove redundant inline specifiers.\n\n2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_classes.h: Remove redundant inline specifiers.\n\t* include/bits/ios_base.h: Likewise.\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust dg-error line\n\tnumbers.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Likewise.\n\nFrom-SVN: r124148", "tree": {"sha": "c36f24b070121c38ac15e99ed6673438cd355ae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c36f24b070121c38ac15e99ed6673438cd355ae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd42abcc7ee69c2c58e477ed3645029462741c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd42abcc7ee69c2c58e477ed3645029462741c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd42abcc7ee69c2c58e477ed3645029462741c71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd42abcc7ee69c2c58e477ed3645029462741c71/comments", "author": null, "committer": null, "parents": [{"sha": "29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ea08dac3ae8e0b45e0e60ced36dbf5ce5fe764"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "295a3580f728a5a8ceb72033bba8c66fb3f04065", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd42abcc7ee69c2c58e477ed3645029462741c71", "patch": "@@ -1,3 +1,11 @@\n+2007-04-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_classes.h: Remove redundant inline specifiers.\n+\t* include/bits/ios_base.h: Likewise.\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust dg-error line\n+\tnumbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Likewise.\n+\n 2007-04-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.h (class collate, class collate_byname):"}, {"sha": "c7aa8fc7966619622a3b03a1e6fe5e8cabf17f93", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=dd42abcc7ee69c2c58e477ed3645029462741c71", "patch": "@@ -546,8 +546,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  @brief  Access to format flags.\n      *  @return  The format control flags for both input and output.\n     */\n-    inline fmtflags\n-    flags() const { return _M_flags; }\n+    fmtflags\n+    flags() const\n+    { return _M_flags; }\n \n     /**\n      *  @brief  Setting new format flags all at once.\n@@ -556,7 +557,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *\n      *  This function overwrites all the format flags with @a fmtfl.\n     */\n-    inline fmtflags\n+    fmtflags\n     flags(fmtflags __fmtfl)\n     {\n       fmtflags __old = _M_flags;\n@@ -572,7 +573,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  This function sets additional flags in format control.  Flags that\n      *  were previously set remain set.\n     */\n-    inline fmtflags\n+    fmtflags\n     setf(fmtflags __fmtfl)\n     {\n       fmtflags __old = _M_flags;\n@@ -589,7 +590,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  This function clears @a mask in the format flags, then sets\n      *  @a fmtfl @c & @a mask.  An example mask is @c ios_base::adjustfield.\n     */\n-    inline fmtflags\n+    fmtflags\n     setf(fmtflags __fmtfl, fmtflags __mask)\n     {\n       fmtflags __old = _M_flags;\n@@ -604,8 +605,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *\n      *  This function clears @a mask in the format flags.\n     */\n-    inline void\n-    unsetf(fmtflags __mask) { _M_flags &= ~__mask; }\n+    void\n+    unsetf(fmtflags __mask)\n+    { _M_flags &= ~__mask; }\n \n     /**\n      *  @brief  Flags access.\n@@ -616,15 +618,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  DR 189.\n      *  @endif\n     */\n-    inline streamsize\n-    precision() const { return _M_precision; }\n+    streamsize\n+    precision() const\n+    { return _M_precision; }\n \n     /**\n      *  @brief  Changing flags.\n      *  @param  prec  The new precision value.\n      *  @return  The previous value of precision().\n     */\n-    inline streamsize\n+    streamsize\n     precision(streamsize __prec)\n     {\n       streamsize __old = _M_precision;\n@@ -638,15 +641,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *\n      *  \"Minimum field width\" refers to the number of characters.\n     */\n-    inline streamsize\n-    width() const { return _M_width; }\n+    streamsize\n+    width() const\n+    { return _M_width; }\n \n     /**\n      *  @brief  Changing flags.\n      *  @param  wide  The new width value.\n      *  @return  The previous value of width().\n     */\n-    inline streamsize\n+    streamsize\n     width(streamsize __wide)\n     {\n       streamsize __old = _M_width;\n@@ -688,8 +692,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),\n      *  the global C++ locale.\n     */\n-    inline locale\n-    getloc() const { return _M_ios_locale; }\n+    locale\n+    getloc() const\n+    { return _M_ios_locale; }\n \n     /**\n      *  @brief  Locale access\n@@ -698,8 +703,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  Like getloc above, but returns a reference instead of\n      *  generating a copy.\n     */\n-    inline const locale&\n-    _M_getloc() const { return _M_ios_locale; }\n+    const locale&\n+    _M_getloc() const\n+    { return _M_ios_locale; }\n \n     // [27.4.2.5] ios_base storage functions\n     /**\n@@ -732,7 +738,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  obtain an index that is safe to use.  Also note that since the array\n      *  can grow dynamically, it is not safe to hold onto the reference.\n     */\n-    inline long&\n+    long&\n     iword(int __ix)\n     {\n       _Words& __word = (__ix < _M_word_size)\n@@ -753,7 +759,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  obtain an index that is safe to use.  Also note that since the array\n      *  can grow dynamically, it is not safe to hold onto the reference.\n     */\n-    inline void*&\n+    void*&\n     pword(int __ix)\n     {\n       _Words& __word = (__ix < _M_word_size)"}, {"sha": "141f44cc147be95c2f2b13dd69c6386bd436fd9f", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=dd42abcc7ee69c2c58e477ed3645029462741c71", "patch": "@@ -237,9 +237,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  @param  other  The locale to compare against.\n      *  @return  ! (*this == other)\n     */\n-    inline bool\n+    bool\n     operator!=(const locale& __other) const throw ()\n-    { return !(this->operator==(__other));  }\n+    { return !(this->operator==(__other)); }\n \n     /**\n      *  @brief  Compare two strings according to collate.\n@@ -398,11 +398,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _S_get_c_name();\n \n   private:\n-    inline void\n+    void\n     _M_add_reference() const throw()\n     { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\n \n-    inline void\n+    void\n     _M_remove_reference() const throw()\n     {\n       if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\n@@ -503,11 +503,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static const locale::id* const\t_S_id_messages[];\n     static const locale::id* const* const _S_facet_categories[];\n \n-    inline void\n+    void\n     _M_add_reference() throw()\n     { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\n \n-    inline void\n+    void\n     _M_remove_reference() throw()\n     {\n       if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\n@@ -530,7 +530,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     void\n     operator=(const _Impl&);  // Not defined.\n \n-    inline bool\n+    bool\n     _M_check_same_name()\n     {\n       bool __ret = true;\n@@ -554,7 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_install_facet(const locale::id*, const facet*);\n \n     template<typename _Facet>\n-      inline void\n+      void\n       _M_init_facet(_Facet* __facet)\n       { _M_install_facet(&_Facet::id, __facet); }\n "}, {"sha": "ec27d187e7b1381617580e7bb188cd49f3c43101", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=dd42abcc7ee69c2c58e477ed3645029462741c71", "patch": "@@ -42,5 +42,5 @@ void test01()\n }\n // { dg-error \"synthesized\" \"\" { target *-*-* } 41 } \n // { dg-error \"within this context\" \"\" { target *-*-* } 34 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 784 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 790 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "0c6bb296d38c32d5c33d241bbe9a8601a9abbf41", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd42abcc7ee69c2c58e477ed3645029462741c71/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=dd42abcc7ee69c2c58e477ed3645029462741c71", "patch": "@@ -42,5 +42,5 @@ void test02()\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 35 } \n // { dg-error \"synthesized\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 781 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 787 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}