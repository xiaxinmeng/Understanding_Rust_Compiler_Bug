{"sha": "ba29ed0f57b5005586e49d40aaec55d943caff61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyOWVkMGY1N2I1MDA1NTg2ZTQ5ZDQwYWFlYzU1ZDk0M2NhZmY2MQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@cavium.com", "date": "2019-01-17T19:08:12Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2019-01-17T19:08:12Z"}, "message": "pr60823-1.c: Add aarch64 specific warning checks and assembler scans.\n\n2018-01-17  Steve Ellcey  <sellcey@cavium.com>\n\n\t* c-c++-common/gomp/pr60823-1.c: Add aarch64 specific\n\twarning checks and assembler scans.\n\t* c-c++-common/gomp/pr60823-3.c: Ditto.\n\t* c-c++-common/gomp/pr63328.c: Ditto.\n\t* g++.dg/gomp/declare-simd-1.C: Ditto.\n\t* g++.dg/gomp/declare-simd-3.C: Ditto.\n\t* g++.dg/gomp/declare-simd-4.C: Ditto.\n\t* g++.dg/gomp/declare-simd-7.C: Ditto.\n\t* g++.dg/gomp/pr88182.C: Ditto.\n\t* g++.dg/vect/simd-clone-7.cc: Ditto.\n\t* gcc.dg/gomp/declare-simd-1.c: Ditto.\n\t* gcc.dg/gomp/declare-simd-3.c: Ditto.\n\t* gcc.dg/gomp/pr59669-2.c: Ditto.\n\t* gcc.dg/gomp/pr87895-1.c: Ditto.\n\t* gcc.dg/gomp/pr87895-2.c: Ditto.\n\t* gcc.dg/gomp/simd-clones-2.c: Ditto.\n\t* gfortran.dg/gomp/declare-simd-2.f90: Ditto.\n\t* gfortran.dg/gomp/pr79154-1.f90: Ditto.\n\t* gfortran.dg/gomp/pr83977.f90: Ditto.\n\nFrom-SVN: r268045", "tree": {"sha": "32be24a03d8d638021585afdc0d7a05700f650b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32be24a03d8d638021585afdc0d7a05700f650b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba29ed0f57b5005586e49d40aaec55d943caff61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba29ed0f57b5005586e49d40aaec55d943caff61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba29ed0f57b5005586e49d40aaec55d943caff61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba29ed0f57b5005586e49d40aaec55d943caff61/comments", "author": {"login": "sellcey", "id": 25938520, "node_id": "MDQ6VXNlcjI1OTM4NTIw", "avatar_url": "https://avatars.githubusercontent.com/u/25938520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sellcey", "html_url": "https://github.com/sellcey", "followers_url": "https://api.github.com/users/sellcey/followers", "following_url": "https://api.github.com/users/sellcey/following{/other_user}", "gists_url": "https://api.github.com/users/sellcey/gists{/gist_id}", "starred_url": "https://api.github.com/users/sellcey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sellcey/subscriptions", "organizations_url": "https://api.github.com/users/sellcey/orgs", "repos_url": "https://api.github.com/users/sellcey/repos", "events_url": "https://api.github.com/users/sellcey/events{/privacy}", "received_events_url": "https://api.github.com/users/sellcey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9186814809888b38657fbb968c6eea02f3b9fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9186814809888b38657fbb968c6eea02f3b9fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9186814809888b38657fbb968c6eea02f3b9fd0"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "84cb714a1487a1088647adc6e32af92287dd6646", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -1,3 +1,25 @@\n+2018-01-17  Steve Ellcey  <sellcey@cavium.com>\n+\n+\t* c-c++-common/gomp/pr60823-1.c: Add aarch64 specific\n+\twarning checks and assembler scans.\n+\t* c-c++-common/gomp/pr60823-3.c: Ditto.\n+\t* c-c++-common/gomp/pr63328.c: Ditto.\n+\t* g++.dg/gomp/declare-simd-1.C: Ditto.\n+\t* g++.dg/gomp/declare-simd-3.C: Ditto.\n+\t* g++.dg/gomp/declare-simd-4.C: Ditto.\n+\t* g++.dg/gomp/declare-simd-7.C: Ditto.\n+\t* g++.dg/gomp/pr88182.C: Ditto.\n+\t* g++.dg/vect/simd-clone-7.cc: Ditto.\n+\t* gcc.dg/gomp/declare-simd-1.c: Ditto.\n+\t* gcc.dg/gomp/declare-simd-3.c: Ditto.\n+\t* gcc.dg/gomp/pr59669-2.c: Ditto.\n+\t* gcc.dg/gomp/pr87895-1.c: Ditto.\n+\t* gcc.dg/gomp/pr87895-2.c: Ditto.\n+\t* gcc.dg/gomp/simd-clones-2.c: Ditto.\n+\t* gfortran.dg/gomp/declare-simd-2.f90: Ditto.\n+\t* gfortran.dg/gomp/pr79154-1.f90: Ditto.\n+\t* gfortran.dg/gomp/pr83977.f90: Ditto.\n+\n 2019-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/auto52.C: Test locations too."}, {"sha": "d0aeb2ee5d8b748d5d59a214c30a26adec7d2cdc", "filename": "gcc/testsuite/c-c++-common/gomp/pr60823-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-1.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -17,3 +17,4 @@ foo (const double c1, const double c2)\n     }\n   return res;\n }\n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-13 } */"}, {"sha": "5c36286615da5c48b470bcadd7807b2241dc5292", "filename": "gcc/testsuite/c-c++-common/gomp/pr60823-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr60823-3.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -28,5 +28,6 @@ foo (double c1, double c2)\n   baz (*(struct S *)&c1, *(struct S *)&c2);\n   return c1 + c2 + ((struct S *)&c1)->c[1];\n }\n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-16 } */\n \n #endif"}, {"sha": "54efacea49a80b5d778bbe8c9263179ce99ec923", "filename": "gcc/testsuite/c-c++-common/gomp/pr63328.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63328.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63328.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63328.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -3,3 +3,5 @@\n /* { dg-options \"-O2 -fopenmp-simd -fno-strict-aliasing -fcompare-debug\" } */\n \n #include \"pr60823-3.c\"\n+/* { dg-excess-errors \"partial simd clone support\" { target { aarch64*-*-* } } }  */\n+"}, {"sha": "cc17c9cedca135b6b8c330d6249a217f8d01eb4e", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-1.C", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-1.C?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -14,6 +14,7 @@ int f2 (int a, int *b, int c)\n   return a + *b + c;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 }\n // { dg-final { scan-assembler-times \"_ZGVbM8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM8uva32l4__Z2f2iPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -89,6 +90,8 @@ namespace N1\n // { dg-final { scan-assembler-times \"_ZGVdN2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVeM2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVeN2va16__ZN2N12N23f10EPx:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVnM2va16__ZN2N12N23f10EPx:\" 1 { target { aarch64-*-* } } } }\n+// { dg-final { scan-assembler-times \"_ZGVnN2va16__ZN2N12N23f10EPx:\" 1 { target { aarch64-*-* } } } }\n \n struct A\n {\n@@ -191,6 +194,7 @@ int B<int>::f25<7> (int a, int *b, int c)\n   return a + *b + c;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 }\n // { dg-final { scan-assembler-times \"_ZGVbM8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM8vuva32u__ZN1BIiE3f25ILi7EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -208,6 +212,7 @@ int B<int>::f26<-1> (int a, int *b, int c)\n   return a + *b + c;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 }\n // { dg-final { scan-assembler-times \"_ZGVbM4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM4vl2va32__ZN1BIiE3f26ILin1EEEiiPii:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -239,6 +244,7 @@ f30 (int x)\n   return x;\n }\n \n+// { dg-warning \"GCC does not currently support simdlen 16 for type 'int'\" \"\" { target aarch64-*-* } .-7 }\n // { dg-final { scan-assembler-times \"_ZGVbM16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM16v__Z3f30i:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -281,6 +287,7 @@ struct D\n   int f37 (int a);\n   int e;\n };\n+// { dg-warning \"GCC does not currently support simdlen 16 for type 'int'\" \"\" { target aarch64-*-* } .-3 }\n \n void\n f38 (D &d)"}, {"sha": "0706c79aba24bdce48395a43515354af5536309c", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-3.C", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-3.C?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -13,6 +13,7 @@ int f1 (int a, int b, int c, int &d, int &e, int &f)\n   return a + b + c + d + e + f;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-11 }\n // { dg-final { scan-assembler-times \"_ZGVbM4vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN4vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM4vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -21,6 +22,7 @@ int f1 (int a, int b, int c, int &d, int &e, int &f)\n // { dg-final { scan-assembler-times \"_ZGVdN8vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVeM16vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVeN16vulLUR4__Z2f1iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n+                                      \n \n #pragma omp declare simd uniform(b) linear(c, d) linear(uval(e)) linear(ref(f))\n int f2 (int a, int b, int c, int &d, int &e, int &f)\n@@ -40,6 +42,7 @@ int f2 (int a, int b, int c, int &d, int &e, int &f)\n   return a + b + c + d + e + f;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-17 }\n // { dg-final { scan-assembler-times \"_ZGVbM4vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN4vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM4vulLUR4__Z2f2iiiRiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -55,6 +58,7 @@ int f3 (const int a, const int b, const int c, const int &d, const int &e, const\n   return a + b + c + d + e + f;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 }\n // { dg-final { scan-assembler-times \"_ZGVbM4vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN4vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM4vulLUR4__Z2f3iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -76,6 +80,7 @@ int f4 (const int a, const int b, const int c, const int &d, const int &e, const\n   return a + b + c + d + e + f;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-11 }\n // { dg-final { scan-assembler-times \"_ZGVbM4vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN4vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM4vulLUR4__Z2f4iiiRKiS0_S0_:\" 1 { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "1289f485f86b007546bfc6cab63dbd29639a7157", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-4.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-4.C?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -5,6 +5,7 @@ f1 (int *p, int *q, short *s)\n   return *p + *q + *s;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 }\n // { dg-final { scan-assembler-times \"_ZGVbM4l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVbN4l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcM4l4ln4ln6__Z2f1PiS_Ps:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -21,6 +22,7 @@ f2 (int *p, short *q, int s, int r, int &t)\n   return *p + *q + r;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 }\n // { dg-final { scan-assembler-times \"_ZGVbN8ls2ls4uls2u__Z2f2PiPsiiRi:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcN8ls2ls4uls2u__Z2f2PiPsiiRi:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8ls2ls4uls2u__Z2f2PiPsiiRi:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n@@ -33,6 +35,7 @@ f3 (int &p, short &q, int s, int &r, int &t)\n   return p + q + r;\n }\n \n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 }\n // { dg-final { scan-assembler-times \"_ZGVbN8Rs2Ls4uUs2u__Z2f3RiRsiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVcN8Rs2Ls4uUs2u__Z2f3RiRsiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }\n // { dg-final { scan-assembler-times \"_ZGVdN8Rs2Ls4uUs2u__Z2f3RiRsiS_S_:\" 1 { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "1614db5b0f61f8b1dccfe64f8ceeb9dc634a372f", "filename": "gcc/testsuite/g++.dg/gomp/declare-simd-7.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-simd-7.C?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -18,6 +18,7 @@ foo1 (int a, int b, float c, S d, int *e, int f, int &g, int &h, int &i, int j,\n {\n   return bar1 (a, b, c, d, e, f, g, h, i, j, k);\n }\n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-4 }\n \n #pragma omp declare simd inbranch uniform (b, c, d, e) aligned (e : 16) \\\n \t\t    linear (f : 2) linear (ref (g) : 1) \\\n@@ -28,6 +29,7 @@ foo2 (int a, int b, float c, S d, int *e, int f, int &g, int &h, int &i, int j,\n {\n   return bar2 (a, b, c, d, e, f, g, h, i, j, k);\n }\n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-4 }\n \n #pragma omp declare simd notinbranch uniform (b, c, d, e) aligned (e : 16) \\\n \t\t    linear (f : 2) linear (ref (g) : 1) \\\n@@ -38,6 +40,7 @@ foo3 (int a, int b, float c, S d, int *e, int f, int &g, int &h, int &i, int j,\n {\n   return bar3 (a, b, c, d, e, f, g, h, i, j, k);\n }\n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-4 }\n \n #pragma omp declare simd inbranch uniform (b, c, d, e) aligned (e : 16) \\\n \t\t    linear (f : 2) linear (ref (g) : 1) \\\n@@ -48,3 +51,4 @@ foo4 (int a, int b, float c, S d, int *e, int f, int &g, int &h, int &i, int j,\n {\n   return bar4 (a, b, c, d, e, f, g, h, i, j, k);\n }\n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-4 }"}, {"sha": "c783edc4bad519c7dcca2b529b77d902ce0084e3", "filename": "gcc/testsuite/g++.dg/gomp/pr88182.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr88182.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr88182.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr88182.C?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -18,6 +18,7 @@ foo (double c1, double c2)\n     }\n   return res;\n }\n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-15 }\n \n __attribute__((noinline, noclone)) void\n bar (double *x, double *y)"}, {"sha": "c2a63cd5f8e2e7e3e37ccc2991c27e0cf72f99fa", "filename": "gcc/testsuite/g++.dg/vect/simd-clone-7.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-clone-7.cc?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -8,3 +8,4 @@ bar (float x, float *y, int)\n {\n   return y[0] + y[1] * x;\n }\n+// { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-4 }"}, {"sha": "003b05437a4b0a34916835718171cd299d8fb6e3", "filename": "gcc/testsuite/gcc.dg/gomp/declare-simd-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-1.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -13,6 +13,7 @@ int f2 (int a, int *b, int c)\n   return a + *b + c;\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' function\" \"\" { target aarch64-*-* } .-5 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM8uva32l4_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n@@ -49,6 +50,7 @@ f7 (int x)\n   return x;\n }\n \n+/* { dg-warning \"GCC does not currently support simdlen 16 for type 'int'\" \"\" { target aarch64-*-* } .-7 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM16v_f7:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n@@ -68,6 +70,7 @@ f13 (int c; int *b; int a; int a, int *b, int c)\n   return a + *b + c;\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' function\" \"\" { target aarch64-*-* } .-5 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM8uva32l4_f13:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n@@ -86,6 +89,7 @@ f14 (a, b, c)\n   return a + *b + c;\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' function\" \"\" { target aarch64-*-* } .-7 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM8uva32l4_f14:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n@@ -102,6 +106,7 @@ f15 (int a, int *b, int c)\n   return a + *b + c;\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' function\" \"\" { target aarch64-*-* } .-5 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM8uva32l4_f15:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n@@ -123,6 +128,7 @@ int f17 (int g, long *h)\n   return g + h[0];\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' function\" \"\" { target aarch64-*-* } .-5 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM4l20va8_f17:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n@@ -149,6 +155,7 @@ f18 (j, i)\n   return j + i[0];\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' function\" \"\" { target aarch64-*-* } .-7 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM4l20va8_f18:\" 1 { target { { i?86-*-* x86_64-*-* } && lp64 } } } } */"}, {"sha": "66dc740ad472641bb9fbdc41eebf719e5f89594f", "filename": "gcc/testsuite/gcc.dg/gomp/declare-simd-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fdeclare-simd-3.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -5,6 +5,7 @@ f1 (int *p, int *q, short *s)\n   return *p + *q + *s;\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 } */\n /* { dg-final { scan-assembler-times \"_ZGVbM4l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVbN4l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcM4l4ln4ln6_f1:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n@@ -21,6 +22,7 @@ f2 (int *p, short *q, int s, int r, int t)\n   return *p + *q + r;\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 } */\n /* { dg-final { scan-assembler-times \"_ZGVbN8ls2ls4uls2u_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVcN8ls2ls4uls2u_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */\n /* { dg-final { scan-assembler-times \"_ZGVdN8ls2ls4uls2u_f2:\" 1 { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "46294dbf0e37c3559916a1cd82a891ec164c0feb", "filename": "gcc/testsuite/gcc.dg/gomp/pr59669-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr59669-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr59669-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr59669-2.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -7,3 +7,4 @@ void\n bar (int *a)\n {\n }\n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-3 } */"}, {"sha": "7f5397b091404e7cf964a40d3a29800597bb62ba", "filename": "gcc/testsuite/gcc.dg/gomp/pr87895-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87895-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87895-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87895-1.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -17,3 +17,4 @@ bar (int *x, int y)\n   if ((y == 0) ? (*x = 0) : *x)\n     return 0;\n }\n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-5 } */"}, {"sha": "26827ac82643fd5a5a4cef36a4e136957ff881de", "filename": "gcc/testsuite/gcc.dg/gomp/pr87895-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87895-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87895-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr87895-2.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -3,3 +3,4 @@\n /* { dg-additional-options \"-O1\" } */\n \n #include \"pr87895-1.c\"\n+/* { dg-excess-errors \"partial simd clone support\" { target { aarch64*-*-* } } }  */"}, {"sha": "3201c96c882db8fb85d38a17dad8776b30136fc1", "filename": "gcc/testsuite/gcc.dg/gomp/simd-clones-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-clones-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-clones-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fsimd-clones-2.c?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -6,6 +6,7 @@ int addit(int a, int b, int *c)\n {\n   return a + b;\n }\n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-4 } */\n \n #pragma omp declare simd uniform(a) aligned(a:32) linear(k:1) notinbranch\n float setArray(float *a, float x, int k)\n@@ -14,6 +15,7 @@ float setArray(float *a, float x, int k)\n   return a[k];\n }\n \n+/* { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" \"\" { target aarch64-*-* } .-6 } */\n /* { dg-final { scan-tree-dump \"_ZGVbN4ua32vl_setArray\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump \"_ZGVbN4vvva32_addit\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump \"_ZGVbM4vl66u_addit\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */"}, {"sha": "fd4e119744d94c91d2a8beea903b88652c739997", "filename": "gcc/testsuite/gfortran.dg/gomp/declare-simd-2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-simd-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-simd-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-simd-2.f90?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n \n-function f1 (a, b, c, d, e, f)\n+function f1 (a, b, c, d, e, f) ! { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" }\n   integer, value :: a, b, c\n   integer :: d, e, f, f1\n !$omp declare simd (f1) uniform(b) linear(c, d) linear(uval(e)) linear(ref(f))\n@@ -12,7 +12,7 @@ function f1 (a, b, c, d, e, f)\n   f = f + 1\n   f1 = a + b + c + d + e + f\n end function f1\n-integer function f2 (a, b)\n+integer function f2 (a, b) ! { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" }\n   integer :: a, b\n !$omp declare simd uniform(b) linear(ref(a):b)\n   a = a + 1"}, {"sha": "953dcadd786dd35fc7476eaaa465e74fc52a8fe1", "filename": "gcc/testsuite/gfortran.dg/gomp/pr79154-1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr79154-1.f90?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -1,7 +1,7 @@\n ! PR fortran/79154\n ! { dg-do compile }\n \n-pure real function foo (a, b)\n+pure real function foo (a, b)\t\t! { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" }\n !$omp declare simd(foo)\t\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n   real, intent(in) :: a, b\n   foo = a + b\n@@ -20,7 +20,7 @@ pure real function baz (a, b)\n   real, intent(in) :: a, b\n   baz = a + b\n end function baz\n-elemental real function fooe (a, b)\n+elemental real function fooe (a, b)\t! { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" }\n !$omp declare simd(fooe)\t\t! { dg-bogus \"may not appear in PURE or ELEMENTAL\" }\n   real, intent(in) :: a, b\n   fooe = a + b"}, {"sha": "6dfdbc32c2d6ec2ec90fe72d23e86e2a0bcc6a29", "filename": "gcc/testsuite/gfortran.dg/gomp/pr83977.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr83977.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba29ed0f57b5005586e49d40aaec55d943caff61/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr83977.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr83977.f90?ref=ba29ed0f57b5005586e49d40aaec55d943caff61", "patch": "@@ -1,7 +1,7 @@\n ! PR middle-end/83977\n ! { dg-do compile }\n \n-integer function foo (a, b)\n+integer function foo (a, b) ! { dg-warning \"GCC does not currently support mixed size types for 'simd' functions\" }\n    integer :: a, b\n !$omp declare simd uniform(b) linear(ref(a):b)\n    a = a + 1"}]}