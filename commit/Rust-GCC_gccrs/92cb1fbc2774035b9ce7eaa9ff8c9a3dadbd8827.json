{"sha": "92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJjYjFmYmMyNzc0MDM1YjljZTdlYWE5ZmY4YzlhM2RhZGJkODgyNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-09-18T13:28:50Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-09-18T13:28:50Z"}, "message": "[AArch64][testsuite][committed] Fix gcc.target/aarch64/combine_bfxil.c for -mabi=ilp32\n\nAs described in https://gcc.gnu.org/ml/gcc-patches/2018-09/msg00963.html this test generates UXTW instructions with -mabi=ilp32\nbecause the foo* functions take pointers and store results into them. In ILP32 the callee clears the top bits with a UXTW.\nThis trips the scan-assembler-not UXTW test that checks that the zero_extend form of the BFXIL pattern is used, which it is.\n\nThis patch avoids this problem by not passing pointers to the results, but instead using global variables for which the foo* functions\nwill synthesise the address using ADRP, avoiding the UXTW instructions.\n\nWith this patch the test PASSes fully with -mabi=ilp32 and still PASSes on LP64.\n\n\t* gcc.target/aarch64/combine_bfxil.c: Avoid passing pointers to\n\tfunctions.\n\nFrom-SVN: r264389", "tree": {"sha": "82785d9fe703321c770bdfbb5e99c3370ae7ee46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82785d9fe703321c770bdfbb5e99c3370ae7ee46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932"}], "stats": {"total": 81, "additions": 43, "deletions": 38}, "files": [{"sha": "6794fb6e4e8d06eae6be863111c79168ca532c9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827", "patch": "@@ -1,3 +1,8 @@\n+2018-09-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/combine_bfxil.c: Avoid passing pointers to\n+\tfunctions.\n+\n 2018-09-17  Cesar Philippidis  <cesar@codesourcery.com>\n \t    Bernd Schmidt <bernds_cb1@t-online.de>\n "}, {"sha": "84e5377ce9a10953f50b7c13ed06563bef014a55", "filename": "gcc/testsuite/gcc.target/aarch64/combine_bfxil.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcombine_bfxil.c?ref=92cb1fbc2774035b9ce7eaa9ff8c9a3dadbd8827", "patch": "@@ -19,7 +19,7 @@ combine_balanced (unsigned long long a, unsigned long long b)\n unsigned long long\n combine_minimal (unsigned long long a, unsigned long long b)\n {\n-  return (a & 0xfffffffffffffffe) | (b & 0x0000000000000001);\n+  return (a & 0xfffffffffffffffell) | (b & 0x0000000000000001ll);\n }\n \n unsigned long long\n@@ -40,77 +40,77 @@ combine_unbalanced_int (unsigned int a, unsigned int b)\n   return (a & 0xffffff00ll) | (b & 0x000000ffll);\n }\n \n+unsigned long long c, d;\n+\n __attribute__ ((noinline)) void\n-foo (unsigned long long a, unsigned long long b, unsigned long long *c,\n-  unsigned long long *d)\n+foo (unsigned long long a, unsigned long long b)\n {\n-  *c = combine_minimal (a, b);\n-  *d = combine_minimal (b, a);\n+  c = combine_minimal (a, b);\n+  d = combine_minimal (b, a);\n }\n \n __attribute__ ((noinline)) void\n-foo2 (unsigned long long a, unsigned long long b, unsigned long long *c,\n-  unsigned long long *d)\n+foo2 (unsigned long long a, unsigned long long b)\n {\n-  *c = combine_balanced (a, b);\n-  *d = combine_balanced (b, a);\n+  c = combine_balanced (a, b);\n+  d = combine_balanced (b, a);\n }\n \n __attribute__ ((noinline)) void\n-foo3 (unsigned long long a, unsigned long long b, unsigned long long *c,\n-  unsigned long long *d)\n+foo3 (unsigned long long a, unsigned long long b)\n {\n-  *c = combine_unbalanced (a, b);\n-  *d = combine_unbalanced (b, a);\n+  c = combine_unbalanced (a, b);\n+  d = combine_unbalanced (b, a);\n }\n \n+unsigned int ic, id;\n+\n void\n-foo4 (unsigned int a, unsigned int b, unsigned int *c, unsigned int *d)\n+foo4 (unsigned int a, unsigned int b)\n {\n-  *c = combine_balanced_int (a, b);\n-  *d = combine_balanced_int (b, a);\n+  ic = combine_balanced_int (a, b);\n+  id = combine_balanced_int (b, a);\n }\n \n void\n-foo5 (unsigned int a, unsigned int b, unsigned int *c, unsigned int *d)\n+foo5 (unsigned int a, unsigned int b)\n {\n-  *c = combine_unbalanced_int (a, b);\n-  *d = combine_unbalanced_int (b, a);\n+  ic = combine_unbalanced_int (a, b);\n+  id = combine_unbalanced_int (b, a);\n }\n \n void\n-foo6 (unsigned int a, unsigned int b, unsigned long long *c, unsigned long long *d)\n+foo6 (unsigned int a, unsigned int b)\n {\n-  *c = combine_zero_extended_int(a, b);\n-  *d = combine_zero_extended_int(b, a);\n+  c = combine_zero_extended_int(a, b);\n+  d = combine_zero_extended_int(b, a);\n }\n \n int\n main (void)\n {\n-  unsigned long long a = 0x0123456789ABCDEF, b = 0xFEDCBA9876543210, c, d;\n-  foo3 (a, b, &c, &d);\n+  unsigned long long a = 0x0123456789ABCDEF, b = 0xFEDCBA9876543210;\n+  foo3 (a, b);\n   if (c != 0x0123456789543210) abort ();\n   if (d != 0xfedcba9876abcdef) abort ();\n-  foo2 (a, b, &c, &d);\n+  foo2 (a, b);\n   if (c != 0x0123456776543210) abort ();\n   if (d != 0xfedcba9889abcdef) abort ();\n-  foo (a, b, &c, &d);\n+  foo (a, b);\n   if (c != 0x0123456789abcdee) abort ();\n   if (d != 0xfedcba9876543211) abort ();\n \n-  unsigned int a2 = 0x01234567, b2 = 0xFEDCBA98, c2, d2;\n-  foo4 (a2, b2, &c2, &d2);\n-  if (c2 != 0x0123ba98) abort ();\n-  if (d2 != 0xfedc4567) abort ();\n-  foo5 (a2, b2, &c2, &d2);\n-  if (c2 != 0x01234598) abort ();\n-  if (d2 != 0xfedcba67) abort ();\n-\n-  unsigned long long c3, d3;\n-  foo6 (a2, b2, &c3, &d3);\n-  if (c3 != 0x0123ba98) abort ();\n-  if (d3 != 0xfedc4567) abort ();\n+  unsigned int a2 = 0x01234567, b2 = 0xFEDCBA98;\n+  foo4 (a2, b2);\n+  if (ic != 0x0123ba98) abort ();\n+  if (id != 0xfedc4567) abort ();\n+  foo5 (a2, b2);\n+  if (ic != 0x01234598) abort ();\n+  if (id != 0xfedcba67) abort ();\n+\n+  foo6 (a2, b2);\n+  if (c != 0x0123ba98) abort ();\n+  if (d != 0xfedc4567) abort ();\n   return 0;\n }\n "}]}