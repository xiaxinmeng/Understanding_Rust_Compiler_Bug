{"sha": "4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "node_id": "C_kwDOANBUbNoAKDRkNTQwYzdhNGE3ZmI4N2IwNGQwNmUxZWU3ZjliMDA0MTE2Mjc5YTQ", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-11-26T20:00:35Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-11-26T20:00:35Z"}, "message": "Fortran: improve check of arguments to the RESHAPE intrinsic\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/103411\n\t* check.c (gfc_check_reshape): Improve check of size of source\n\tarray for the RESHAPE intrinsic against the given shape when pad\n\tis not given, and shape is a parameter.  Try other simplifications\n\tof shape.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/103411\n\t* gfortran.dg/pr68153.f90: Adjust test to improved check.\n\t* gfortran.dg/reshape_7.f90: Likewise.\n\t* gfortran.dg/reshape_9.f90: New test.", "tree": {"sha": "99226378237d96d9f21a76feaa1cf787e53364a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99226378237d96d9f21a76feaa1cf787e53364a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa04517e6f78a562f36897a6e7171f0121101b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa04517e6f78a562f36897a6e7171f0121101b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa04517e6f78a562f36897a6e7171f0121101b4"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "3e65f3d8b1f8a2a8a7beb19b180f037a6e5d8552", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "patch": "@@ -4699,6 +4699,7 @@ gfc_check_reshape (gfc_expr *source, gfc_expr *shape,\n   mpz_t size;\n   mpz_t nelems;\n   int shape_size;\n+  bool shape_is_const;\n \n   if (!array_check (source, 0))\n     return false;\n@@ -4732,7 +4733,11 @@ gfc_check_reshape (gfc_expr *source, gfc_expr *shape,\n \t\t \"than %d elements\", &shape->where, GFC_MAX_DIMENSIONS);\n       return false;\n     }\n-  else if (shape->expr_type == EXPR_ARRAY && gfc_is_constant_expr (shape))\n+\n+  gfc_simplify_expr (shape, 0);\n+  shape_is_const = gfc_is_constant_expr (shape);\n+\n+  if (shape->expr_type == EXPR_ARRAY && shape_is_const)\n     {\n       gfc_expr *e;\n       int i, extent;\n@@ -4748,38 +4753,7 @@ gfc_check_reshape (gfc_expr *source, gfc_expr *shape,\n \t      gfc_error (\"%qs argument of %qs intrinsic at %L has \"\n \t\t\t \"negative element (%d)\",\n \t\t\t gfc_current_intrinsic_arg[1]->name,\n-\t\t\t gfc_current_intrinsic, &e->where, extent);\n-\t      return false;\n-\t    }\n-\t}\n-    }\n-  else if (shape->expr_type == EXPR_VARIABLE && shape->ref\n-\t   && shape->ref->u.ar.type == AR_FULL && shape->ref->u.ar.dimen == 1\n-\t   && shape->ref->u.ar.as\n-\t   && shape->ref->u.ar.as->lower[0]->expr_type == EXPR_CONSTANT\n-\t   && shape->ref->u.ar.as->lower[0]->ts.type == BT_INTEGER\n-\t   && shape->ref->u.ar.as->upper[0]->expr_type == EXPR_CONSTANT\n-\t   && shape->ref->u.ar.as->upper[0]->ts.type == BT_INTEGER\n-\t   && shape->symtree->n.sym->attr.flavor == FL_PARAMETER\n-\t   && shape->symtree->n.sym->value)\n-    {\n-      int i, extent;\n-      gfc_expr *e, *v;\n-\n-      v = shape->symtree->n.sym->value;\n-\n-      for (i = 0; i < shape_size; i++)\n-\t{\n-\t  e = gfc_constructor_lookup_expr (v->value.constructor, i);\n-\t  if (e == NULL)\n-\t     break;\n-\n-\t  gfc_extract_int (e, &extent);\n-\n-\t  if (extent < 0)\n-\t    {\n-\t      gfc_error (\"Element %d of actual argument of RESHAPE at %L \"\n-\t\t\t \"cannot be negative\", i + 1, &shape->where);\n+\t\t\t gfc_current_intrinsic, &shape->where, extent);\n \t      return false;\n \t    }\n \t}\n@@ -4856,8 +4830,7 @@ gfc_check_reshape (gfc_expr *source, gfc_expr *shape,\n \t}\n     }\n \n-  if (pad == NULL && shape->expr_type == EXPR_ARRAY\n-      && gfc_is_constant_expr (shape)\n+  if (pad == NULL && shape->expr_type == EXPR_ARRAY && shape_is_const\n       && !(source->expr_type == EXPR_VARIABLE && source->symtree->n.sym->as\n \t   && source->symtree->n.sym->as->type == AS_ASSUMED_SIZE))\n     {"}, {"sha": "46a3bc029d7167e3ecc351831ca3725d2090c33f", "filename": "gcc/testsuite/gfortran.dg/pr68153.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68153.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68153.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68153.f90?ref=4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "patch": "@@ -5,5 +5,5 @@\n !\n program foo\n    integer, parameter :: a(2) = [2, -2]\n-   integer, parameter :: b(2,2) = reshape([1, 2, 3, 4], a) ! { dg-error \"cannot be negative\" }\n+   integer, parameter :: b(2,2) = reshape([1, 2, 3, 4], a) ! { dg-error \"negative\" }\n end program foo"}, {"sha": "4216cb60cbb27ff1c8a8901a25c433ceb26ca459", "filename": "gcc/testsuite/gfortran.dg/reshape_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_7.f90?ref=4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "patch": "@@ -4,7 +4,7 @@\n subroutine p0\n    integer, parameter :: sh(2) = [2, 3]\n    integer, parameter :: &\n-   & a(2,2) = reshape([1, 2, 3, 4], sh)   ! { dg-error \"Different shape\" }\n+   & a(2,2) = reshape([1, 2, 3, 4], sh)   ! { dg-error \"not enough elements\" }\n    if (a(1,1) /= 0) STOP 1\n end subroutine p0\n "}, {"sha": "dc52e26cc86cd1d22571af2179dfbbed17ec4425", "filename": "gcc/testsuite/gfortran.dg/reshape_9.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d540c7a4a7fb87b04d06e1ee7f9b004116279a4/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_9.f90?ref=4d540c7a4a7fb87b04d06e1ee7f9b004116279a4", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! PR fortran/103411 - ICE in gfc_conv_array_initializer\n+! Based on testcase by G. Steinmetz\n+! Test simplifications for checks of shape argument to reshape intrinsic\n+\n+program p\n+  integer :: i\n+  integer, parameter :: a(2) = [2,2]\n+  integer, parameter :: u(5) = [1,2,2,42,2]\n+  integer, parameter :: v(1,3) = 2\n+  integer, parameter :: d(2,2) = reshape([1,2,3,4,5], a)\n+  integer, parameter :: c(2,2) = reshape([1,2,3,4], a)\n+  integer, parameter :: b(2,2) = &\n+           reshape([1,2,3], a) ! { dg-error \"not enough elements\" }\n+  print *, reshape([1,2,3], a) ! { dg-error \"not enough elements\" }\n+  print *, reshape([1,2,3,4], a)\n+  print *, reshape([1,2,3,4,5], a)\n+  print *, b, c, d\n+  print *, reshape([1,2,3], [(u(i),i=1,2)])\n+  print *, reshape([1,2,3], [(u(i),i=2,3)]) ! { dg-error \"not enough elements\" }\n+  print *, reshape([1,2,3],              &\n+                   [(u(i)*(-1)**i,i=2,3)]) ! { dg-error \"has negative element\" }\n+  print *, reshape([1,2,3,4], u(5:3:-2))\n+  print *, reshape([1,2,3],   u(5:3:-2))  ! { dg-error \"not enough elements\" }\n+  print *, reshape([1,2,3,4], u([5,3]))\n+  print *, reshape([1,2,3]  , u([5,3]))   ! { dg-error \"not enough elements\" }\n+  print *, reshape([1,2,3,4], v(1,2:))\n+  print *, reshape([1,2,3],   v(1,2:))    ! { dg-error \"not enough elements\" }\n+  print *, reshape([1,2,3,4], v(1,[2,1]))\n+  print *, reshape([1,2,3] ,  v(1,[2,1])) ! { dg-error \"not enough elements\" }\n+end"}]}