{"sha": "3966726333b2a4cf54333549c8331d833364266e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2NjcyNjMzM2IyYTRjZjU0MzMzNTQ5YzgzMzFkODMzMzY0MjY2ZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-06-24T19:40:25Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-06-27T20:30:29Z"}, "message": "aix: Add AIX 7.3 configuration and SPDX License Identifiers.\n\n\tThe anticipated release of AIX 7.3 has been announced.  This\n\tpatch adds the configuration bits based on AIX 7.2 configuration.\n\ngcc/ChangeLog:\n\n\t* config.gcc: Add SPDX License Identifier.\n\t(powerpc-ibm-aix789): Default to aix73.h.\n\t(powerpc-ibm-aix7.2.*.*): New stanza.\n\t* config/rs6000/aix72.h: Add SPDX License Identifier.\n\t* config/rs6000/aix73.h: New file.", "tree": {"sha": "16add43d87394c7a5cddf191756c826098663d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16add43d87394c7a5cddf191756c826098663d36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3966726333b2a4cf54333549c8331d833364266e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3966726333b2a4cf54333549c8331d833364266e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3966726333b2a4cf54333549c8331d833364266e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3966726333b2a4cf54333549c8331d833364266e/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "461f937b47278eaa4ca3c5507c80cca26af4b015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/461f937b47278eaa4ca3c5507c80cca26af4b015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/461f937b47278eaa4ca3c5507c80cca26af4b015"}], "stats": {"total": 315, "additions": 312, "deletions": 3}, "files": [{"sha": "0230bb88861dd02112fc2beb3c629e043f8047d8", "filename": "gcc/config.gcc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3966726333b2a4cf54333549c8331d833364266e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3966726333b2a4cf54333549c8331d833364266e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3966726333b2a4cf54333549c8331d833364266e", "patch": "@@ -1,3 +1,4 @@\n+# SPDX-License-Identifier: GPL-3.0-or-later\n # GCC target-specific configuration file.\n # Copyright (C) 1997-2021 Free Software Foundation, Inc.\n \n@@ -3099,7 +3100,7 @@ rs6000-ibm-aix7.1.* | powerpc-ibm-aix7.1.*)\n \tuse_gcc_stdint=wrap\n \tdefault_use_cxa_atexit=yes\n \t;;\n-rs6000-ibm-aix[789].* | powerpc-ibm-aix[789].*)\n+rs6000-ibm-aix7.2.* | powerpc-ibm-aix7.2.*)\n \ttmake_file=\"rs6000/t-aix52 t-slibgcc\"\n \tif test x$cpu_is_64bit = xyes; then\n \t    tm_file=\"${tm_file} rs6000/biarch64.h\"\n@@ -3112,6 +3113,19 @@ rs6000-ibm-aix[789].* | powerpc-ibm-aix[789].*)\n \tuse_gcc_stdint=wrap\n \tdefault_use_cxa_atexit=yes\n \t;;\n+rs6000-ibm-aix[789].* | powerpc-ibm-aix[789].*)\n+\ttmake_file=\"rs6000/t-aix52 t-slibgcc\"\n+\tif test x$cpu_is_64bit = xyes; then\n+\t    tm_file=\"${tm_file} rs6000/biarch64.h\"\n+\t    tmake_file=\"rs6000/t-aix64 t-slibgcc\"\n+\tfi\n+\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix73.h rs6000/xcoff.h rs6000/aix-stdint.h\"\n+\textra_options=\"${extra_options} rs6000/aix64.opt\"\n+\tuse_collect2=yes\n+\tthread_file='aix'\n+\tuse_gcc_stdint=wrap\n+\tdefault_use_cxa_atexit=yes\n+\t;;\n rl78-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttarget_has_targetm_common=no"}, {"sha": "a497a7d8541875f6874f9607e43e8aaab8ec0c58", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3966726333b2a4cf54333549c8331d833364266e/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3966726333b2a4cf54333549c8331d833364266e/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=3966726333b2a4cf54333549c8331d833364266e", "patch": "@@ -1,3 +1,4 @@\n+// SPDX-License-Identifier: GPL-3.0-or-later\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V7.2.\n    Copyright (C) 2002-2021 Free Software Foundation, Inc.\n@@ -124,7 +125,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n   %{pthread: -D_THREAD_SAFE}\"\n \n-/* The GNU C++ standard library requires that these macros be \n+/* The GNU C++ standard library requires that these macros be\n    defined.  Synchronize with libstdc++ os_defines.h.  */\n #define CPLUSPLUS_CPP_SPEC_COMMON\t\t\\\n   \"-D_ALL_SOURCE -D__COMPATMATH__\t\t\\\n@@ -254,7 +255,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LD_INIT_SWITCH \"-binitfini\"\n \n #ifndef _AIX52\n-extern long long int    atoll(const char *);  \n+extern long long int    atoll(const char *);\n #endif\n \n /* This target uses the aix64.opt file.  */"}, {"sha": "c707c7e76b6998385522a2d22e4f3e5a7340c3ed", "filename": "gcc/config/rs6000/aix73.h", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3966726333b2a4cf54333549c8331d833364266e/gcc%2Fconfig%2Frs6000%2Faix73.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3966726333b2a4cf54333549c8331d833364266e/gcc%2Fconfig%2Frs6000%2Faix73.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix73.h?ref=3966726333b2a4cf54333549c8331d833364266e", "patch": "@@ -0,0 +1,294 @@\n+// SPDX-License-Identifier: GPL-3.0-or-later\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V7.3.\n+   Copyright (C) 2002-2021 Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control in TARGET_OPTION_OVERRIDE.  */\n+\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\t\t\\\n+      warning (0, \"%<-maix64%> requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (global_options_set.x_rs6000_long_double_type_size)\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"%<-maix64%> required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if ((rs6000_isa_flags_explicit\t\t\t\t\t\\\n+       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (global_options_set.x_rs6000_current_cmodel\t\t\t\\\n+\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\\\n+\terror (\"%<-mcmodel%> incompatible with other toc options\"); \t\\\n+      SET_CMODEL (CMODEL_SMALL);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (rs6000_current_cmodel != CMODEL_SMALL)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TARGET_NO_FP_IN_TOC = 1;\t\t\t\t\t\t\\\n+      TARGET_NO_SUM_IN_TOC = 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (rs6000_current_cmodel == CMODEL_MEDIUM)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_current_cmodel = CMODEL_LARGE;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (! strcmp (lang_hooks.name, \"GNU Go\")\t\t\t\t\\\n+      && TARGET_32BIT)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      /* aix/ppc doesn't support -mvsx and -maltivec with Go */\t\t\\\n+      rs6000_isa_flags &= ~(OPTION_MASK_VSX | OPTION_MASK_ALTIVEC);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (!global_options_set.x_dwarf_version)\t\t\t\t\\\n+    /* AIX only supports DWARF 4.  */\t\t\t\t\t\\\n+    dwarf_version = 4;\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+#define ASM_SPEC32 \"-a32\"\n+#define ASM_SPEC64 \"-a64\"\n+#define ASM_SPEC_COMMON \"-u %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets for\n+   handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n+   provide the default assembler options if the user uses -mcpu=native, so if\n+   you make changes here, make them there also.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{mcpu=native: %(asm_cpu_native); \\\n+  mcpu=power10: -mpwr10; \\\n+  mcpu=power9: -mpwr9; \\\n+  mcpu=power8: -mpwr8; \\\n+  mcpu=power7: -mpwr7; \\\n+  mcpu=power6x|mcpu=power6: -mpwr6; \\\n+  mcpu=power5+: -mpwr5x; \\\n+  mcpu=power5: -mpwr5; \\\n+  mcpu=power4: -mpwr4; \\\n+  mcpu=power3: -m620; \\\n+  mcpu=powerpc: -mppc; \\\n+  mcpu=rs64: -mppc; \\\n+  mcpu=603: -m603; \\\n+  mcpu=603e: -m603; \\\n+  mcpu=604: -m604; \\\n+  mcpu=604e: -m604; \\\n+  mcpu=620: -m620; \\\n+  mcpu=630: -m620; \\\n+  mcpu=970|mcpu=G5: -m970; \\\n+  !mcpu*: %(asm_default)} \\\n+-many\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mpwr7\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      builtin_define (\"_AIX51\");     \\\n+      builtin_define (\"_AIX52\");     \\\n+      builtin_define (\"_AIX53\");     \\\n+      builtin_define (\"_AIX61\");     \\\n+      builtin_define (\"_AIX71\");     \\\n+      builtin_define (\"_AIX72\");     \\\n+      builtin_define (\"_AIX73\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#define CPP_SPEC32 \"\"\n+#define CPP_SPEC64 \"-D__64BIT__\"\n+#define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be\n+   defined.  Synchronize with libstdc++ os_defines.h.  */\n+#define CPLUSPLUS_CPP_SPEC_COMMON\t\t\\\n+  \"-D_ALL_SOURCE -D__COMPATMATH__\t\t\\\n+   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#define RS6000_CPU(NAME, CPU, FLAGS)\n+#include \"rs6000-cpus.def\"\n+#undef RS6000_CPU\n+\n+#undef  TARGET_DEFAULT\n+#ifdef RS6000_BI_ARCH\n+#define TARGET_DEFAULT (ISA_2_6_MASKS_EMBEDDED | MASK_POWERPC64 | MASK_64BIT)\n+#else\n+#define TARGET_DEFAULT ISA_2_6_MASKS_EMBEDDED\n+#endif\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER7\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER7\n+\n+/* AIX 7.2 kernel and assembler have necessary support for Altivec and VSX.  */\n+#undef OS_MISSING_ALTIVEC\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef MULTILIB_DEFAULTS\n+\n+#define DEFAULT_ARCH64_P (TARGET_DEFAULT & MASK_64BIT)\n+\n+#define LIB_SPEC32 \"%{!shared:%{g*:-lg}}\"\n+#define LIB_SPEC64 \"\"\n+#define LIB_SPEC_COMMON \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+   %{fprofile-arcs|fprofile-generate*|coverage:-lpthreads}\\\n+   %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{mlong-double-128:-lc128}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#define LINK_SPEC32 \"%{!shared:%{g*: %(link_libg) }} -b32\"\n+#define LINK_SPEC64 \"-b64\"\n+#define LINK_SPEC_COMMON \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{mpe:-binitfini:poe_remote_main} \"\n+\n+#undef STARTFILE_SPEC\n+#if DEFAULT_ARCH64_P\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{!maix32:%{pg:gcrt0_64%O%s;:%{p:mcrt0_64%O%s;:crt0_64%O%s}};:\\\n+     %{pthread:%{pg:gcrt0_r%O%s;:%{p:mcrt0_r%O%s;:crt0_r%O%s}};:\\\n+       %{pg:gcrt0%O%s;:%{p:mcrt0%O%s;:crt0%O%s}}}}}\\\n+   %{!maix32:%{shared:crtcxa_64_s%O%s;:crtcxa_64%O%s} crtdbase_64%O%s;:\\\n+     %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s}\"\n+#else\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s;:%{p:mcrt0_64%O%s;:crt0_64%O%s}};:\\\n+     %{pthread:%{pg:gcrt0_r%O%s;:%{p:mcrt0_r%O%s;:crt0_r%O%s}};:\\\n+       %{pg:gcrt0%O%s;:%{p:mcrt0%O%s;:crt0%O%s}}}}}\\\n+   %{maix64:%{shared:crtcxa_64_s%O%s;:crtcxa_64%O%s} crtdbase_64%O%s;:\\\n+     %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s}\"\n+#endif\n+\n+\n+#undef ASM_SPEC\n+#undef CPP_SPEC\n+#undef CPLUSPLUS_CPP_SPEC\n+#undef LIB_SPEC\n+#undef LINK_SPEC\n+\n+#if DEFAULT_ARCH64_P\n+#define ASM_SPEC \"%{maix32:%(asm_spec32);:%(asm_spec64)} %(asm_spec_common)\"\n+#define CPP_SPEC \"%{maix32:%(cpp_spec32);:%(cpp_spec64)} %(cpp_spec_common)\"\n+#define CPLUSPLUS_CPP_SPEC \"%{maix32:%(cpp_spec32);:%(cpp_spec64)} %(cplusplus_cpp_spec_common)\"\n+#define LIB_SPEC \"%{maix32:%(lib_spec32);:%(lib_spec64)} %(lib_spec_common)\"\n+#define LINK_SPEC \"%{maix32:%(link_spec32);:%(link_spec64)} %(link_spec_common)\"\n+#else\n+#define ASM_SPEC \"%{maix64:%(asm_spec64);:%(asm_spec32)} %(asm_spec_common)\"\n+#define CPP_SPEC \"%{maix64:%(cpp_spec64);:%(cpp_spec32)} %(cpp_spec_common)\"\n+#define CPLUSPLUS_CPP_SPEC \"%{maix64:%(cpp_spec64);:%(cpp_spec32)} %(cplusplus_cpp_spec_common)\"\n+#define LIB_SPEC \"%{maix64:%(lib_spec64);:%(lib_spec32)} %(lib_spec_common)\"\n+#define LINK_SPEC \"%{maix64:%(link_spec64);:%(link_spec32)} %(link_spec_common)\"\n+#endif\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\\\n+  { \"cpp_spec_common\",\t\tCPP_SPEC_COMMON },\t\t\\\n+  { \"cplusplus_cpp_spec_common\", CPLUSPLUS_CPP_SPEC_COMMON },\t\\\n+  { \"cpp_spec32\",\t\tCPP_SPEC32 },\t\t\t\\\n+  { \"cpp_spec64\",\t\tCPP_SPEC64 },\t\t\t\\\n+  { \"lib_spec_common\",\t\tLIB_SPEC_COMMON },\t\t\\\n+  { \"lib_spec32\",\t\tLIB_SPEC32 },\t\t\t\\\n+  { \"lib_spec64\",\t\tLIB_SPEC64 },\t\t\t\\\n+  { \"link_spec_common\",\t\tLINK_SPEC_COMMON },\t\t\\\n+  { \"link_spec32\",\t\tLINK_SPEC32 },\t\t\t\\\n+  { \"link_spec64\",\t\tLINK_SPEC64 },\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+#ifndef _AIX52\n+extern long long int    atoll(const char *);\n+#endif\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+/* Large TOC Support */\n+#ifdef HAVE_LD_LARGE_TOC\n+#undef TARGET_CMODEL\n+#define TARGET_CMODEL rs6000_current_cmodel\n+#define SET_CMODEL(opt) rs6000_current_cmodel = opt\n+#else\n+#define SET_CMODEL(opt) do {} while (0)\n+#endif\n+\n+/* This target defines SUPPORTS_WEAK and TARGET_ASM_NAMED_SECTION,\n+   but does not have crtbegin/end.  */\n+\n+#define TARGET_AIX_VERSION 72\n+\n+/* AIX 7.2 supports DWARF3+ debugging.  */\n+#define DWARF2_DEBUGGING_INFO 1\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+#define DEBUG_INFO_SECTION\t\"0x10000\"\n+#define DEBUG_LINE_SECTION\t\"0x20000\"\n+#define DEBUG_PUBNAMES_SECTION\t\"0x30000\"\n+#define DEBUG_PUBTYPES_SECTION\t\"0x40000\"\n+#define DEBUG_ARANGES_SECTION\t\"0x50000\"\n+#define DEBUG_ABBREV_SECTION\t\"0x60000\"\n+#define DEBUG_STR_SECTION\t\"0x70000\"\n+#define DEBUG_RANGES_SECTION\t\"0x80000\"\n+#define DEBUG_LOC_SECTION\t\"0x90000\"\n+#define DEBUG_FRAME_SECTION\t\"0xA0000\"\n+#define DEBUG_MACINFO_SECTION\t\"0xB0000\"\n+#define DEBUG_MACRO_SECTION\t\"0xB0000\"\n+"}]}