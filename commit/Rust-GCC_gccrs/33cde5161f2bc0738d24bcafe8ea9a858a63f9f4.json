{"sha": "33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNjZGU1MTYxZjJiYzA3MzhkMjRiY2FmZThlYTlhODU4YTYzZjlmNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-07-11T06:10:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-07-11T06:10:49Z"}, "message": "re PR testsuite/40699 (All sparcv9 libjava execution tests fail on Solaris 11/SPARC)\n\ngcc/testsuite/\n\tPR testsuite/40699\n\tPR testsuite/40707\n\tPR testsuite/40709\n\t* lib/gcc-defs.exp, lib/target-libpath.exp, lib/objc.exp,\n\tlib/gfortran.exp, lib/g++.exp, lib/obj-c++.exp, lib/c-torture.exp,\n\tlib/gcc-dg.exp, lib/gnat.exp, g++.dg/compat/compat.exp,\n\tg++.dg/compat/struct-layout-1.exp: Revert 2009-06-30 commit.\n\nlibstdc++-v3/\n\tPR testsuite/40699\n\tPR testsuite/40707\n\tPR testsuite/40709\n\t* testsuite/lib/libstdc++.exp: Revert 2009-06-30 commit.\n\nlibjava/\n\tPR testsuite/40699\n\tPR testsuite/40707\n\tPR testsuite/40709\n\t* testsuite/lib/libjava.exp: Revert 2009-06-30 commit.\n\nlibgomp/\n\tPR testsuite/40699\n\tPR testsuite/40707\n\tPR testsuite/40709\n\t* testsuite/lib/libgomp.exp: Revert 2009-07-02 and 2009-06-30 commits.\n\t* testsuite/libgomp.c/c.exp, testsuite/libgomp.c++/c++.exp,\n\ttestsuite/libgomp.fortran/fortran.exp: Revert 2009-06-30 commits.\n\nlibffi/\n\tPR testsuite/40699\n\tPR testsuite/40707\n\tPR testsuite/40709\n\t* testsuite/lib/libffi-dg.exp: Revert 2009-07-02, 2009-07-01 and\n\t2009-06-30 commits.\n\nlibmudflap/\n\tPR testsuite/40699\n\tPR testsuite/40707\n\tPR testsuite/40709\n\t* testsuite/lib/libmudflap.exp: Revert 2009-06-30 commit.\n\nFrom-SVN: r149508", "tree": {"sha": "3ae36f07c961c579d1e473b88f00c276ca8cf2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae36f07c961c579d1e473b88f00c276ca8cf2e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82e45095505d635a123bc8928e46f6b25d5bbb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e45095505d635a123bc8928e46f6b25d5bbb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e45095505d635a123bc8928e46f6b25d5bbb4f"}], "stats": {"total": 731, "additions": 496, "deletions": 235}, "files": [{"sha": "a29bd83b4dc0967f8b7b66843871a728f1673dc6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -1,3 +1,13 @@\n+2009-07-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR testsuite/40699\n+\tPR testsuite/40707\n+\tPR testsuite/40709\n+\t* lib/gcc-defs.exp, lib/target-libpath.exp, lib/objc.exp,\n+\tlib/gfortran.exp, lib/g++.exp, lib/obj-c++.exp, lib/c-torture.exp,\n+\tlib/gcc-dg.exp, lib/gnat.exp, g++.dg/compat/compat.exp,\n+\tg++.dg/compat/struct-layout-1.exp: Revert 2009-06-30 commit.\n+\n 2009-07-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33197"}, {"sha": "7fb16fed95930f1ff6aefc38f02d8eda64d5d43e", "filename": "gcc/testsuite/g++.dg/compat/compat.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -103,14 +103,14 @@ set sid \"cp_compat\"\n # are different.\n set use_alt 0\n set same_alt 0\n-set alt_ld_library_path \"\"\n+set alt_ld_library_path \".\"\n if [info exists ALT_CXX_UNDER_TEST] then {\n     set use_alt 1\n     if [string match \"same\" $ALT_CXX_UNDER_TEST] then {\n \tset same_alt 1\n     } else {\n \tif [info exists ALT_LD_LIBRARY_PATH] then {\n-\t    set alt_ld_library_path $ALT_LD_LIBRARY_PATH\n+\t    append alt_ld_library_path \":${ALT_LD_LIBRARY_PATH}\"\n \t}\n     }\n }"}, {"sha": "7fa89470e16e1a67246ff762cfbe1d8b90fda5e4", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -109,14 +109,14 @@ set sid \"cp_compat\"\n # are different.\n set use_alt 0\n set same_alt 0\n-set alt_ld_library_path \"\"\n+set alt_ld_library_path \".\"\n if [info exists ALT_CXX_UNDER_TEST] then {\n     set use_alt 1\n     if [string match \"same\" $ALT_CXX_UNDER_TEST] then {\n \tset same_alt 1\n     } else {\n \tif [info exists ALT_LD_LIBRARY_PATH] then {\n-\t    set alt_ld_library_path $ALT_LD_LIBRARY_PATH\n+\t    append alt_ld_library_path \":${ALT_LD_LIBRARY_PATH}\"\n \t}\n     }\n }"}, {"sha": "769ec97d3eccfd8cdd82f6cd19036901f1c41bea", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -54,6 +54,15 @@ if ![info exists GCC_UNDER_TEST] {\n     set GCC_UNDER_TEST \"[find_gcc]\"\n }\n \n+global orig_environment_saved\n+\n+# This file may be sourced, so don't override environment settings\n+# that have been previously setup.\n+if { $orig_environment_saved == 0 } {\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+}\n+\n #\n # c-torture-compile -- runs the Tege C-torture test\n #\n@@ -99,13 +108,6 @@ proc c-torture-compile { src option } {\n #\n proc c-torture-execute { sources args } {\n     global tmpdir tool srcdir output compiler_conditional_xfail_data\n-    global ld_library_path ld_library_path_multilib GCC_UNDER_TEST\n-\n-    if { \"$ld_library_path_multilib\"\n-\t != \"[board_info target multilib_flags]\" } {\n-\tset ld_library_path [find_libgcc_s $GCC_UNDER_TEST]\n-\tset_ld_library_path_env_vars\n-    }\n \n     # Use the first source filename given as the filename under test.\n     set src [lindex $sources 0]"}, {"sha": "a5f26800c1c27d8cc85e54714ae77607eab2e49f", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -106,51 +106,52 @@ proc g++_link_flags { paths } {\n     set gccpath ${paths}\n     set libio_dir \"\"\n     set flags \"\"\n-    set ld_library_path \"\"\n+    set ld_library_path \".\"\n \n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n \n     if { $gccpath != \"\" } {\n       if [file exists \"${gccpath}/lib/libstdc++.a\"] {\n-\t  add_path ld_library_path \"${gccpath}/lib\"\n+          append ld_library_path \":${gccpath}/lib\"\n       }\n       if [file exists \"${gccpath}/libg++/libg++.a\"] {\n           append flags \"-L${gccpath}/libg++ \"\n-\t  add_path ld_library_path \"${gccpath}/libg++\"\n+          append ld_library_path \":${gccpath}/libg++\"\n       }\n       if [file exists \"${gccpath}/libstdc++/libstdc++.a\"] {\n           append flags \"-L${gccpath}/libstdc++ \"\n-\t  add_path ld_library_path \"${gccpath}/libstdc++\"\n+          append ld_library_path \":${gccpath}/libstdc++\"\n       }\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] {\n           append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n+          append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       # Look for libstdc++.${shlib_ext}.\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] {\n \t  append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n+\t  append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n       }\n+\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n           append flags \"-L${gccpath}/libiberty \"\n       }\n       if [file exists \"${gccpath}/librx/librx.a\"] {\n           append flags \"-L${gccpath}/librx \"\n       }\n-      add_path ld_library_path [find_libgcc_s $GXX_UNDER_TEST]\n+      append ld_library_path [gcc-set-multilib-library-path $GXX_UNDER_TEST]\n     } else {\n       global tool_root_dir\n \n       set libgpp [lookfor_file ${tool_root_dir} libg++]\n       if { $libgpp != \"\" } {\n           append flags \"-L${libgpp} \"\n-\t  add_path ld_library_path ${libgpp}\n+          append ld_library_path \":${libgpp}\"\n       }\n       set libstdcpp [lookfor_file ${tool_root_dir} libstdc++]\n       if { $libstdcpp != \"\" } {\n           append flags \"-L${libstdcpp} \"\n-\t  add_path ld_library_path ${libstdcpp}\n+          append ld_library_path \":${libstdcpp}\"\n       }\n       set libiberty [lookfor_file ${tool_root_dir} libiberty]\n       if { $libiberty != \"\" } {"}, {"sha": "53926a69a232a0a063d174057c4a6ed7052fa2b3", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -233,3 +233,35 @@ proc dg-additional-files-options { options source } {\n \n     return $options\n }\n+\n+# Return a colon-separate list of directories to search for libraries\n+# for COMPILER, including multilib directories.\n+\n+proc gcc-set-multilib-library-path { compiler } {\n+    global rootme\n+\n+    # ??? rootme will not be set when testing an installed compiler.\n+    # In that case, we should perhaps use some other method to find\n+    # libraries.\n+    if {![info exists rootme]} {\n+\treturn \"\"\n+    }\n+\n+    set libpath \":${rootme}\"\n+    set compiler [lindex $compiler 0]\n+    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\tforeach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t\tcontinue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${rootme}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t\tappend libpath \":${rootme}/${mldir}\"\n+\t    }\n+\t}\n+    }\n+\n+    return $libpath\n+}"}, {"sha": "7e684171be9266c4880c58f655bacef944cd139d", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -65,6 +65,15 @@ if ![info exists GCC_UNDER_TEST] {\n     set GCC_UNDER_TEST \"[find_gcc]\"\n }\n \n+global orig_environment_saved\n+\n+# This file may be sourced, so don't override environment settings\n+# that have been previously setup.\n+if { $orig_environment_saved == 0 } {\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+}\n+\n # Define gcc callbacks for dg.exp.\n \n proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n@@ -108,14 +117,6 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \t    set output_file \"[file rootname [file tail $prog]].o\"\n \t}\n \t\"run\" {\n-\t    global ld_library_path ld_library_path_multilib GCC_UNDER_TEST\n-\n-\t    if { \"$ld_library_path_multilib\"\n-\t\t != \"[board_info target multilib_flags]\" } {\n-\t\tset ld_library_path [find_libgcc_s $GCC_UNDER_TEST]\n-\t\tset_ld_library_path_env_vars\n-\t    }\n-\n \t    set compile_type \"executable\"\n \t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n \t    # Should this be handled elsewhere?"}, {"sha": "a4d6e2b5d38aa52daa801ac22da07128e79a69ee", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -84,7 +84,7 @@ proc gfortran_link_flags { paths } {\n     set gccpath ${paths}\n     set libio_dir \"\"\n     set flags \"\"\n-    set ld_library_path \"\"\n+    set ld_library_path \".\"\n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n \n@@ -94,19 +94,20 @@ proc gfortran_link_flags { paths } {\n           # for uninstalled testing.\n           append flags \"-B${gccpath}/libgfortran/.libs \"\n           append flags \"-L${gccpath}/libgfortran/.libs \"\n-\t  add_path ld_library_path \"${gccpath}/libgfortran/.libs\"\n+          append ld_library_path \":${gccpath}/libgfortran/.libs\"\n       }\n       if [file exists \"${gccpath}/libgfortran/.libs/libgfortran.${shlib_ext}\"] {\n \t  append flags \"-L${gccpath}/libgfortran/.libs \"\n-\t  add_path ld_library_path \"${gccpath}/libgfortran/.libs\"\n+\t  append ld_library_path \":${gccpath}/libgfortran/.libs\"\n       }\n       if [file exists \"${gccpath}/libgfortran/libgforbegin.a\"] {\n           append flags \"-L${gccpath}/libgfortran \"\n       }\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n           append flags \"-L${gccpath}/libiberty \"\n       }\n-      add_path ld_library_path [find_libgcc_s $GFORTRAN_UNDER_TEST]\n+      append ld_library_path \\\n+\t[gcc-set-multilib-library-path $GFORTRAN_UNDER_TEST]\n     }\n \n     set_ld_library_path_env_vars"}, {"sha": "35e18da93d2caf916e3e9a0ade68bec99f4e49aa", "filename": "gcc/testsuite/lib/gnat.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgnat.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -147,7 +147,7 @@ proc gnat_target_compile { source dest type options } {\n         set GNAT_UNDER_TEST \"$GNAT_UNDER_TEST_ORIG $gnat_rts_opt\"\n     }\n \n-    set ld_library_path ${gnat_libgcc_s_path}\n+    set ld_library_path \".:${gnat_libgcc_s_path}\"\n     lappend options \"compiler=$GNAT_UNDER_TEST -q -f\"\n     lappend options \"timeout=[timeout_value]\"\n "}, {"sha": "b61dc556437a3f17c0922ddb399cea342ef211fc", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -106,30 +106,30 @@ proc obj-c++_link_flags { paths } {\n     set gccpath ${paths}\n     set libio_dir \"\"\n     set flags \"\"\n-    set ld_library_path \"\"\n+    set ld_library_path \".\"\n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n \n     if { $gccpath != \"\" } {\n       if [file exists \"${gccpath}/lib/libstdc++.a\"] {\n-\t  add_path ld_library_path \"${gccpath}/lib\"\n+          append ld_library_path \":${gccpath}/lib\"\n       }\n       if [file exists \"${gccpath}/libg++/libg++.a\"] {\n           append flags \"-L${gccpath}/libg++ \"\n-\t  add_path ld_library_path \"${gccpath}/libg++\"\n+          append ld_library_path \":${gccpath}/libg++\"\n       }\n       if [file exists \"${gccpath}/libstdc++/libstdc++.a\"] {\n           append flags \"-L${gccpath}/libstdc++ \"\n-\t  add_path ld_library_path \"${gccpath}/libstdc++\"\n+          append ld_library_path \":${gccpath}/libstdc++\"\n       }\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] {\n           append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n+          append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       # Look for libstdc++.${shlib_ext}.\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] {\n \t  append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n+\t  append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n           append flags \"-L${gccpath}/libiberty \"\n@@ -158,21 +158,23 @@ proc obj-c++_link_flags { paths } {\n       if { $libobjc_dir != \"\" } {\n \t  set libobjc_dir [file dirname ${libobjc_dir}]\n \t  append flags \"-L${libobjc_dir}\"\n-\t  add_path ld_library_path ${libobjc_dir}\n+\t  append ld_library_path \":${libobjc_dir}\"\n       }\n-      add_path ld_library_path [find_libgcc_s $OBJCXX_UNDER_TEST]\n+      append ld_library_path \\\n+\t  [gcc-set-multilib-library-path $OBJCXX_UNDER_TEST]\n+\n     } else {\n       global tool_root_dir;\n \n       set libgpp [lookfor_file ${tool_root_dir} libg++];\n       if { $libgpp != \"\" } {\n           append flags \"-L${libgpp} \";\n-\t  add_path ld_library_path ${libgpp}\n+          append ld_library_path \":${libgpp}\"\n       }\n       set libstdcpp [lookfor_file ${tool_root_dir} libstdc++];\n       if { $libstdcpp != \"\" } {\n           append flags \"-L${libstdcpp} \";\n-\t  add_path ld_library_path ${libstdcpp}\n+          append ld_library_path \":${libstdcpp}\"\n       }\n       set libiberty [lookfor_file ${tool_root_dir} libiberty];\n       if { $libiberty != \"\" } {"}, {"sha": "934f31dabdcd1519229b15040c9fccdd30b3ee99", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -121,7 +121,7 @@ proc objc_init { args } {\n \n     objc_maybe_build_wrapper \"${tmpdir}/objc-testglue.o\"\n \n-    set objc_libgcc_s_path [find_libgcc_s $OBJC_UNDER_TEST]\n+    set objc_libgcc_s_path [gcc-set-multilib-library-path $OBJC_UNDER_TEST]\n }\n \n proc objc_target_compile { source dest type options } {\n@@ -135,7 +135,7 @@ proc objc_target_compile { source dest type options } {\n     global objc_libgcc_s_path\n     global shlib_ext\n \n-    set ld_library_path ${objc_libgcc_s_path}\n+    set ld_library_path \".:${objc_libgcc_s_path}\"\n     lappend options \"libs=-lobjc\"\n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n@@ -191,7 +191,7 @@ proc objc_target_compile { source dest type options } {\n \tset libobjc_dir [file dirname ${libobjc_dir}]\n \tset objc_link_flags \"-L${libobjc_dir}\"\n \tlappend options \"additional_flags=${objc_link_flags}\"\n-\tadd_path ld_library_path ${libobjc_dir}\n+\tappend ld_library_path \":${libobjc_dir}\"\n     }\n     if { $type == \"precompiled_header\" } {\n \t# If we generating a precompiled header, we have say this is an"}, {"sha": "6a01d9498e71253eb7211b32820f03b58b7a9680", "filename": "gcc/testsuite/lib/target-libpath.exp", "status": "modified", "additions": 223, "deletions": 155, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -16,142 +16,253 @@\n \n # This file was contributed by John David Anglin (dave.anglin@nrc-cnrc.gc.ca)\n \n-# A list of ld library path environment variables that might need to be\n-# defined.\n-#\n-# Some variables represent ABI-specific paths, and if these variables\n-# aren't defined, the dynamic loader might fall back on a more general\n-# variable.  We must do the same when trying to read the current setting\n-# of such a path.  Each element of this list is therefore itself a list:\n-# the first element of each sublist specifies the name of the variable,\n-# and the other elements specify fallback alternatives.  We use FOO as a\n-# shorthand for { FOO }.\n-set ld_library_path_vars {\n-    LD_LIBRARY_PATH\n-    LD_RUN_PATH\n-    SHLIB_PATH\n-    { LD_LIBRARYN32_PATH LD_LIBRARY_PATH }\n-    { LD_LIBRARY64_PATH LD_LIBRARY_PATH }\n-    { LD_LIBRARY_PATH_32 LD_LIBRARY_PATH }\n-    { LD_LIBRARY_PATH_64 LD_LIBRARY_PATH }\n-    DYLD_LIBRARY_PATH\n-}\n-\n-# Set up the global orig_FOO_saved variables.  We define this as a function\n-# to avoid polluting the global namespace with local variables.\n-proc init_ld_library_path_env_vars { } {\n-    global ld_library_path_vars\n-\n-    foreach spec $ld_library_path_vars {\n-\tset var orig_[string tolower [lindex $spec 0]]_saved\n-\tglobal $var\n-\tset $var 0\n-    }\n-}\n-init_ld_library_path_env_vars\n set orig_environment_saved 0\n+set orig_ld_library_path_saved 0\n+set orig_ld_run_path_saved 0\n+set orig_shlib_path_saved 0\n+set orig_ld_libraryn32_path_saved 0\n+set orig_ld_library64_path_saved 0\n+set orig_ld_library_path_32_saved 0\n+set orig_ld_library_path_64_saved 0\n+set orig_dyld_library_path_saved 0\n set orig_gcc_exec_prefix_saved 0\n set orig_gcc_exec_prefix_checked 0\n-set ld_library_path_multilib unset\n+\n \n #######################################\n # proc set_ld_library_path_env_vars { }\n #######################################\n \n proc set_ld_library_path_env_vars { } {\n-    global ld_library_path\n-    global orig_environment_saved\n-    global ld_library_path_vars\n-    global orig_gcc_exec_prefix_saved\n-    global orig_gcc_exec_prefix_checked\n-    global orig_gcc_exec_prefix\n-    global TEST_GCC_EXEC_PREFIX\n-    global ld_library_path_multilib\n-    global env\n-\n-    # Save the original GCC_EXEC_PREFIX.\n-    if { $orig_gcc_exec_prefix_checked == 0 } {\n-\tif [info exists env(GCC_EXEC_PREFIX)] {\n-\t    set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n-\t    set orig_gcc_exec_prefix_saved 1\n-\t}\n-\tset orig_gcc_exec_prefix_checked 1\n-    }\n+  global ld_library_path\n+  global orig_environment_saved\n+  global orig_ld_library_path_saved\n+  global orig_ld_run_path_saved\n+  global orig_shlib_path_saved\n+  global orig_ld_libraryn32_path_saved\n+  global orig_ld_library64_path_saved\n+  global orig_ld_library_path_32_saved\n+  global orig_ld_library_path_64_saved\n+  global orig_dyld_library_path_saved\n+  global orig_gcc_exec_prefix_saved\n+  global orig_gcc_exec_prefix_checked\n+  global orig_ld_library_path\n+  global orig_ld_run_path\n+  global orig_shlib_path\n+  global orig_ld_libraryn32_path\n+  global orig_ld_library64_path\n+  global orig_ld_library_path_32\n+  global orig_ld_library_path_64\n+  global orig_dyld_library_path\n+  global orig_gcc_exec_prefix\n+  global TEST_GCC_EXEC_PREFIX\n+  global env\n \n-    # Set GCC_EXEC_PREFIX for the compiler under test to pick up files not in\n-    # the build tree from a specified location (normally the install tree).\n-    if [info exists TEST_GCC_EXEC_PREFIX] {\n-\tsetenv GCC_EXEC_PREFIX \"$TEST_GCC_EXEC_PREFIX\"\n+  # Save the original GCC_EXEC_PREFIX.\n+  if { $orig_gcc_exec_prefix_checked == 0 } {\n+    if [info exists env(GCC_EXEC_PREFIX)] {\n+      set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n+      set orig_gcc_exec_prefix_saved 1\n     }\n+    set orig_gcc_exec_prefix_checked 1\n+  }\n \n-    # Setting the ld library path causes trouble when testing cross-compilers.\n-    if { [is_remote target] } {\n-\treturn\n-    }\n+  # Set GCC_EXEC_PREFIX for the compiler under test to pick up files not in\n+  # the build tree from a specified location (normally the install tree).\n+  if [info exists TEST_GCC_EXEC_PREFIX] {\n+    setenv GCC_EXEC_PREFIX \"$TEST_GCC_EXEC_PREFIX\"\n+  }\n \n-    set ld_library_path_multilib [board_info target multilib_flags]\n-\n-    foreach spec $ld_library_path_vars {\n-\tset var [lindex $spec 0]\n-\tset lvar [string tolower $var]\n-\n-\tglobal orig_$lvar\n-\tglobal orig_${lvar}_saved\n-\n-\tif { $orig_environment_saved == 0 } {\n-\t    if [info exists env($var)] {\n-\t\tset orig_$lvar [set env($var)]\n-\t\tset orig_${lvar}_saved 1\n-\t    }\n-\t}\n-\tset value $ld_library_path\n-\tforeach extra $spec {\n-\t    set lextra [string tolower $extra]\n-\t    if [set orig_${lextra}_saved] {\n-\t\tadd_path value [set orig_$lextra]\n-\t\tbreak\n-\t    }\n-\t}\n-\tsetenv $var $value\n-    }\n+  # Setting the ld library path causes trouble when testing cross-compilers.\n+  if { [is_remote target] } {\n+    return\n+  }\n+\n+  if { $orig_environment_saved == 0 } {\n     set orig_environment_saved 1\n-    verbose -log \"set_ld_library_path_env_vars: ld_library_path=$ld_library_path\"\n+\n+    # Save the original environment.\n+    if [info exists env(LD_LIBRARY_PATH)] {\n+      set orig_ld_library_path \"$env(LD_LIBRARY_PATH)\"\n+      set orig_ld_library_path_saved 1\n+    }\n+    if [info exists env(LD_RUN_PATH)] {\n+      set orig_ld_run_path \"$env(LD_RUN_PATH)\"\n+      set orig_ld_run_path_saved 1\n+    }\n+    if [info exists env(SHLIB_PATH)] {\n+      set orig_shlib_path \"$env(SHLIB_PATH)\"\n+      set orig_shlib_path_saved 1\n+    }\n+    if [info exists env(LD_LIBRARYN32_PATH)] {\n+      set orig_ld_libraryn32_path \"$env(LD_LIBRARYN32_PATH)\"\n+      set orig_ld_libraryn32_path_saved 1\n+    }\n+    if [info exists env(LD_LIBRARY64_PATH)] {\n+      set orig_ld_library64_path \"$env(LD_LIBRARY64_PATH)\"\n+      set orig_ld_library64_path_saved 1\n+    }\n+    if [info exists env(LD_LIBRARY_PATH_32)] {\n+      set orig_ld_library_path_32 \"$env(LD_LIBRARY_PATH_32)\"\n+      set orig_ld_library_path_32_saved 1\n+    }\n+    if [info exists env(LD_LIBRARY_PATH_64)] {\n+      set orig_ld_library_path_64 \"$env(LD_LIBRARY_PATH_64)\"\n+      set orig_ld_library_path_64_saved 1\n+    }\n+    if [info exists env(DYLD_LIBRARY_PATH)] {\n+      set orig_dyld_library_path \"$env(DYLD_LIBRARY_PATH)\"\n+      set orig_dyld_library_path_saved 1\n+    }\n+  }\n+\n+  # We need to set ld library path in the environment.  Currently,\n+  # unix.exp doesn't set the environment correctly for all systems.\n+  # It only sets SHLIB_PATH and LD_LIBRARY_PATH when it executes a\n+  # program.  We also need the environment set for compilations, etc.\n+  #\n+  # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n+  # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n+  # (for the 64-bit ABI).  The same applies to Darwin (DYLD_LIBRARY_PATH),\n+  # Solaris 32 bit (LD_LIBRARY_PATH_32), Solaris 64 bit (LD_LIBRARY_PATH_64),\n+  # and HP-UX (SHLIB_PATH).  In some cases, the variables are independent\n+  # of LD_LIBRARY_PATH, and in other cases LD_LIBRARY_PATH is used if the\n+  # variable is not defined.\n+  #\n+  # Doing this is somewhat of a hack as ld_library_path gets repeated in\n+  # SHLIB_PATH and LD_LIBRARY_PATH when unix_load sets these variables.\n+  if { $orig_ld_library_path_saved } {\n+    setenv LD_LIBRARY_PATH \"$ld_library_path:$orig_ld_library_path\"\n+  } else {\n+    setenv LD_LIBRARY_PATH \"$ld_library_path\"\n+  }\n+  if { $orig_ld_run_path_saved } {\n+    setenv LD_RUN_PATH \"$ld_library_path:$orig_ld_run_path\"\n+  } else {\n+    setenv LD_RUN_PATH \"$ld_library_path\"\n+  }\n+  # The default shared library dynamic path search for 64-bit\n+  # HP-UX executables searches LD_LIBRARY_PATH before SHLIB_PATH.\n+  # LD_LIBRARY_PATH isn't used for 32-bit executables.  Thus, we\n+  # set LD_LIBRARY_PATH and SHLIB_PATH as if they were independent.\n+  if { $orig_shlib_path_saved } {\n+    setenv SHLIB_PATH \"$ld_library_path:$orig_shlib_path\"\n+  } else {\n+    setenv SHLIB_PATH \"$ld_library_path\"\n+  }\n+  if { $orig_ld_libraryn32_path_saved } {\n+    setenv LD_LIBRARYN32_PATH \"$ld_library_path:$orig_ld_libraryn32_path\"\n+  } elseif { $orig_ld_library_path_saved } {\n+    setenv LD_LIBRARYN32_PATH \"$ld_library_path:$orig_ld_library_path\"\n+  } else {\n+    setenv LD_LIBRARYN32_PATH \"$ld_library_path\"\n+  }\n+  if { $orig_ld_library64_path_saved } {\n+    setenv LD_LIBRARY64_PATH \"$ld_library_path:$orig_ld_library64_path\"\n+  } elseif { $orig_ld_library_path_saved } {\n+    setenv LD_LIBRARY64_PATH \"$ld_library_path:$orig_ld_library_path\"\n+  } else {\n+    setenv LD_LIBRARY64_PATH \"$ld_library_path\"\n+  }\n+  if { $orig_ld_library_path_32_saved } {\n+    setenv LD_LIBRARY_PATH_32 \"$ld_library_path:$orig_ld_library_path_32\"\n+  } elseif { $orig_ld_library_path_saved } {\n+    setenv LD_LIBRARY_PATH_32 \"$ld_library_path:$orig_ld_library_path\"\n+  } else {\n+    setenv LD_LIBRARY_PATH_32 \"$ld_library_path\"\n+  }\n+  if { $orig_ld_library_path_64_saved } {\n+    setenv LD_LIBRARY_PATH_64 \"$ld_library_path:$orig_ld_library_path_64\"\n+  } elseif { $orig_ld_library_path_saved } {\n+    setenv LD_LIBRARY_PATH_64 \"$ld_library_path:$orig_ld_library_path\"\n+  } else {\n+    setenv LD_LIBRARY_PATH_64 \"$ld_library_path\"\n+  }\n+  if { $orig_dyld_library_path_saved } {\n+    setenv DYLD_LIBRARY_PATH \"$ld_library_path:$orig_dyld_library_path\"\n+  } else {\n+    setenv DYLD_LIBRARY_PATH \"$ld_library_path\"\n+  }\n+\n+  verbose -log \"set_ld_library_path_env_vars: ld_library_path=$ld_library_path\"\n }\n \n #######################################\n # proc restore_ld_library_path_env_vars { }\n #######################################\n \n proc restore_ld_library_path_env_vars { } {\n-    global orig_environment_saved\n-    global ld_library_path_vars\n-    global orig_gcc_exec_prefix_saved\n-    global orig_gcc_exec_prefix\n-    global env\n-\n-    if { $orig_gcc_exec_prefix_saved } {\n-\tsetenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n-    } elseif [info exists env(GCC_EXEC_PREFIX)] {\n-\tunsetenv GCC_EXEC_PREFIX\n-    }\n+  global orig_environment_saved\n+  global orig_ld_library_path_saved\n+  global orig_ld_run_path_saved\n+  global orig_shlib_path_saved\n+  global orig_ld_libraryn32_path_saved\n+  global orig_ld_library64_path_saved\n+  global orig_ld_library_path_32_saved\n+  global orig_ld_library_path_64_saved\n+  global orig_dyld_library_path_saved\n+  global orig_gcc_exec_prefix_saved\n+  global orig_ld_library_path\n+  global orig_ld_run_path\n+  global orig_shlib_path\n+  global orig_ld_libraryn32_path\n+  global orig_ld_library64_path\n+  global orig_ld_library_path_32\n+  global orig_ld_library_path_64\n+  global orig_dyld_library_path\n+  global orig_gcc_exec_prefix\n+  global env\n \n-    if { $orig_environment_saved == 0 } {\n-\treturn\n-    }\n-\n-    foreach spec $ld_library_path_vars {\n-\tset var [lindex $spec 0]\n-\tset lvar [string tolower $var]\n+  if { $orig_gcc_exec_prefix_saved } {\n+    setenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n+  } elseif [info exists env(GCC_EXEC_PREFIX)] {\n+    unsetenv GCC_EXEC_PREFIX\n+  }\n \n-\tglobal orig_$lvar\n-\tglobal orig_${lvar}_saved\n+  if { $orig_environment_saved == 0 } {\n+    return\n+  }\n \n-\tif [set orig_${lvar}_saved] {\n-\t    setenv $var [set orig_$lvar]\n-\t} elseif [info exists env($var)] {\n-\t    unsetenv $var\n-\t}\n-    }\n+  if { $orig_ld_library_path_saved } {\n+    setenv LD_LIBRARY_PATH \"$orig_ld_library_path\"\n+  } elseif [info exists env(LD_LIBRARY_PATH)] {\n+    unsetenv LD_LIBRARY_PATH\n+  }\n+  if { $orig_ld_run_path_saved } {\n+    setenv LD_RUN_PATH \"$orig_ld_run_path\"\n+  } elseif [info exists env(LD_RUN_PATH)] {\n+    unsetenv LD_RUN_PATH\n+  }\n+  if { $orig_shlib_path_saved } {\n+    setenv SHLIB_PATH \"$orig_shlib_path\"\n+  } elseif [info exists env(SHLIB_PATH)] {\n+    unsetenv SHLIB_PATH\n+  }\n+  if { $orig_ld_libraryn32_path_saved } {\n+    setenv LD_LIBRARYN32_PATH \"$orig_ld_libraryn32_path\"\n+  } elseif [info exists env(LD_LIBRARYN32_PATH)] {\n+    unsetenv LD_LIBRARYN32_PATH\n+  }\n+  if { $orig_ld_library64_path_saved } {\n+    setenv LD_LIBRARY64_PATH \"$orig_ld_library64_path\"\n+  } elseif [info exists env(LD_LIBRARY64_PATH)] {\n+    unsetenv LD_LIBRARY64_PATH\n+  }\n+  if { $orig_ld_library_path_32_saved } {\n+    setenv LD_LIBRARY_PATH_32 \"$orig_ld_library_path_32\"\n+  } elseif [info exists env(LD_LIBRARY_PATH_32)] {\n+    unsetenv LD_LIBRARY_PATH_32\n+  }\n+  if { $orig_ld_library_path_64_saved } {\n+    setenv LD_LIBRARY_PATH_64 \"$orig_ld_library_path_64\"\n+  } elseif [info exists env(LD_LIBRARY_PATH_64)] {\n+    unsetenv LD_LIBRARY_PATH_64\n+  }\n+  if { $orig_dyld_library_path_saved } {\n+    setenv DYLD_LIBRARY_PATH \"$orig_dyld_library_path\"\n+  } elseif [info exists env(DYLD_LIBRARY_PATH)] {\n+    unsetenv DYLD_LIBRARY_PATH\n+  }\n }\n \n #######################################\n@@ -173,46 +284,3 @@ proc get_shlib_extension { } {\n     return $shlib_ext\n }\n \n-# If DIR is not an empty string, add it to the end of variable UPPATH,\n-# which represents a colon-separated path.\n-proc add_path { uppath dir } {\n-    upvar $uppath path\n-\n-    if { $dir != \"\" } {\n-\tif { [info exists path] && $path != \"\" } {\n-\t    append path \":\"\n-\t}\n-\tappend path $dir\n-    }\n-}\n-\n-# Return the directory that contains the shared libgcc for this multilib,\n-# or \"\" if we don't know.\n-proc find_libgcc_s { compiler } {\n-    # Remote host testing requires an installed compiler (get_multilibs\n-    # imposes the same restriction).  It is up to the board file or\n-    # tester to make sure that the installed compiler's libraries\n-    # can be found in the library path.\n-    if { [is_remote host] } {\n-\treturn \"\"\n-    }\n-    # The same goes if we can't find the compiler.\n-    set compiler_path [which [lindex $compiler 0]]\n-    if { $compiler_path == \"\" } {\n-\treturn \"\"\n-    }\n-    # Run the compiler with the current multilib flags to get the\n-    # relative multilib directory.\n-    set subdir [eval exec $compiler [board_info target multilib_flags] \\\n-\t\t    --print-multi-directory]\n-    # We are only interested in cases where libgcc_s is in the same\n-    # directory as the compiler itself.\n-    set dir [file dirname $compiler_path]\n-    if { $subdir != \".\" } {\n-\tset dir [file join $dir $subdir]\n-    }\n-    if { ![file exists $dir] } {\n-\treturn \"\"\n-    }\n-    return $dir\n-}"}, {"sha": "7ba04c24e542e61375b364f262ca8127d0d02ef2", "filename": "libffi/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -1,3 +1,11 @@\n+2009-07-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR testsuite/40699\n+\tPR testsuite/40707\n+\tPR testsuite/40709\n+\t* testsuite/lib/libffi-dg.exp: Revert 2009-07-02, 2009-07-01 and\n+\t2009-06-30 commits.\n+\n 2009-07-01  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* testsuite/lib/libffi-dg.exp (libffi-init): Set ld_library_path"}, {"sha": "8db38c286a833a24e6ebe62888e2aa9b258131aa", "filename": "libffi/testsuite/lib/libffi-dg.exp", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -107,16 +107,33 @@ proc libffi-init { args } {\n     set blddircxx [lookfor_file [get_multilibs] libstdc++-v3]\n     verbose \"libstdc++ $blddircxx\"\n \n-    set ld_library_path \"\"\n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n     if {$gccdir != \"\"} {\n \tset gccdir [file dirname $gccdir]\n-\tadd_path ld_library_path [find_libgcc_s \"$gccdir/xgcc\"]\n+    }\n+    verbose \"gccdir $gccdir\"\n+\n+    set ld_library_path \".\"\n+    append ld_library_path \":${gccdir}\"\n+\n+    set compiler \"${gccdir}/xgcc\"\n+    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\tforeach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t\tcontinue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t\tappend ld_library_path \":${gccdir}/${mldir}\"\n+\t    }\n+\t}\n     }\n     # add the library path for libffi.\n-    add_path ld_library_path \"${blddirffi}/.libs\"\n+    append ld_library_path \":${blddirffi}/.libs\"\n     # add the library path for libstdc++ as well.\n-    add_path ld_library_path \"${blddircxx}/src/.libs\"\n+    append ld_library_path \":${blddircxx}/src/.libs\"\n \n     verbose \"ld_library_path: $ld_library_path\"\n "}, {"sha": "89157021e9710fd104ae49fb72090f6a0e664b29", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -1,3 +1,12 @@\n+2009-07-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR testsuite/40699\n+\tPR testsuite/40707\n+\tPR testsuite/40709\n+\t* testsuite/lib/libgomp.exp: Revert 2009-07-02 and 2009-06-30 commits.\n+\t* testsuite/libgomp.c/c.exp, testsuite/libgomp.c++/c++.exp,\n+\ttestsuite/libgomp.fortran/fortran.exp: Revert 2009-06-30 commits.\n+\n 2009-07-02  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* testsuite/lib/libgomp.exp (libgomp_init): Use the ALWAYS_CFLAGS"}, {"sha": "972d4a1fdd3f6124edc9a7d3d8065cc60ab92030", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -86,6 +86,40 @@ proc libgomp_init { args } {\n \tset CFLAGS \"\"\n     }\n \n+    # Locate libgcc.a so we don't need to account for different values of\n+    # SHLIB_EXT on different platforms\n+    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n+    if {$gccdir != \"\"} {\n+        set gccdir [file dirname $gccdir]\n+    }\n+\n+    # Compute what needs to be put into LD_LIBRARY_PATH\n+    set always_ld_library_path \".:${blddir}/.libs\"\n+\n+    # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n+    if {$gccdir != \"\"} {\n+\t# Add AIX pthread directory first.\n+\tif { [llength [glob -nocomplain ${gccdir}/pthread/libgcc_s*.a]] >= 1 } {\n+\t    append always_ld_library_path \":${gccdir}/pthread\"\n+\t}\n+\tappend always_ld_library_path \":${gccdir}\"\n+\tset compiler [lindex $GCC_UNDER_TEST 0]\n+\n+\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t      continue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t      append always_ld_library_path \":${gccdir}/${mldir}\"\n+\t    }\n+\t  }\n+\t}\n+    }\n+\n     set ALWAYS_CFLAGS \"\"\n     if { $blddir != \"\" } {\n         lappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/\"\n@@ -119,16 +153,6 @@ proc libgomp_init { args } {\n \n     # And, gee, turn on OpenMP.\n     lappend ALWAYS_CFLAGS \"additional_flags=-fopenmp\"\n-\n-    set compiler $GCC_UNDER_TEST\n-    foreach flag $ALWAYS_CFLAGS {\n-\tif { [regexp {^(additional_flags|ldflags)=(.*)} $flag d1 d2 option] } {\n-\t    lappend compiler $option\n-\t}\n-    }\n-\n-    set always_ld_library_path \"${blddir}/.libs\"\n-    add_path always_ld_library_path [find_libgcc_s $compiler]\n }\n \n #"}, {"sha": "decda3d1a122ebab2d2bc1dfa27dbb431418c056", "filename": "libgomp/testsuite/libgomp.c++/c++.exp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -37,10 +37,12 @@ if { $lang_test_file_found } {\n     # Gather a list of all tests.\n     set tests [lsort [glob -nocomplain $srcdir/$subdir/*.C]]\n \n-    set ld_library_path $always_ld_library_path\n     if { $blddir != \"\" } {\n-\tadd_path ld_library_path \"${blddir}/${lang_library_path}\"\n+        set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    } else {\n+        set ld_library_path \"$always_ld_library_path\"\n     }\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n     set_ld_library_path_env_vars\n \n     set flags_file \"${blddir}/../libstdc++-v3/scripts/testsuite_flags\""}, {"sha": "980bb526f3f75bcb0a20e8c1109c96bbb60df6f6", "filename": "libgomp/testsuite/libgomp.c/c.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -20,6 +20,7 @@ dg-init\n set tests [lsort [find $srcdir/$subdir *.c]]\n \n set ld_library_path $always_ld_library_path\n+append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n set_ld_library_path_env_vars\n \n # Main loop."}, {"sha": "3d6615ffee7a924aab68e7cc13d82dc65b903722", "filename": "libgomp/testsuite/libgomp.fortran/fortran.exp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -26,10 +26,12 @@ if { $lang_test_file_found } {\n     # Gather a list of all tests.\n     set tests [lsort [find $srcdir/$subdir *.\\[fF\\]{,90,95,03,08}]]\n \n-    set ld_library_path $always_ld_library_path\n     if { $blddir != \"\" } {\n-\tadd_path ld_library_path \"${blddir}/${lang_library_path}\"\n+        set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    } else {\n+        set ld_library_path \"$always_ld_library_path\"\n     }\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n     set_ld_library_path_env_vars\n \n     # Main loop."}, {"sha": "cad3e377fe73c918310202e1de5f3a770fe7c0ed", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -1,3 +1,10 @@\n+2009-07-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR testsuite/40699\n+\tPR testsuite/40707\n+\tPR testsuite/40709\n+\t* testsuite/lib/libjava.exp: Revert 2009-06-30 commit.\n+\n 2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n \n \t* testsuite/lib/libjava.exp (libjava_init): Just add"}, {"sha": "510e4ac80d8b8d671ea83344977ddf9cb653bf80", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -197,8 +197,36 @@ proc libjava_init { args } {\n     }\n \n     # Finally, add the gcc build directory so that we can find the\n-    # shared libgcc.\n-    set libjava_libgcc_s_path [find_libgcc_s $GCJ_UNDER_TEST]\n+    # shared libgcc.  This, like much of dejagnu, is hideous.\n+    set libjava_libgcc_s_path {}\n+\n+    if { [istarget \"*-*-darwin*\"] } {\n+\tset so_extension \"dylib\"\n+    } elseif { [istarget \"*-*-cygwin*\"] || [istarget \"*-*-mingw*\"] } {\n+\tset so_extension \"dll\"\n+    } else {\n+\tset so_extension \"so\"\n+    }\n+    set gccdir [lookfor_file $tool_root_dir gcc/libgcc_s.${so_extension}]\n+    if {$gccdir != \"\"} {\n+\tset gccdir [file dirname $gccdir]\n+\tlappend libjava_libgcc_s_path $gccdir\n+\tverbose \"libjava_libgcc_s_path = $libjava_libgcc_s_path\"\n+\tset compiler ${gccdir}/xgcc\n+\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\t    foreach i \"[exec $compiler --print-multi-lib]\" {\n+\t\tset mldir \"\"\n+\t\tregexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t\tset mldir [string trimright $mldir \"\\;@\"]\n+\t\tif { \"$mldir\" == \".\" } {\n+\t\t    continue\n+\t\t}\n+\t\tif { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.${so_extension}.*]] >= 1 } {\n+\t\t    lappend libjava_libgcc_s_path \"${gccdir}/${mldir}\"\n+\t\t}\n+\t    }\n+\t}\n+    }\n \n     set libjava_initialized 1\n }\n@@ -309,8 +337,6 @@ proc libjava_arguments {{mode compile}} {\n     # Basically we want to build up a colon separated path list from\n     # the value of $libjava.\n \n-    # Add \".\" to the list so that we pick up shared libraries created\n-    # by the testsuite itself.\n     set lpath \".\"\n     foreach dir [list $libjava] {\n \tforeach item [split $dir \" \"] {\n@@ -444,8 +470,8 @@ proc gcj_invoke {program expectFile ld_library_additions} {\n   global ld_library_path\n \n   set ld_library_path \"$libjava_ld_library_path\"\n-  foreach path $ld_library_additions {\n-    add_path ld_library_path $path\n+  if {[llength $ld_library_additions] > 0} {\n+    append ld_library_path :[join $ld_library_additions :]\n   }\n \n   set_ld_library_path_env_vars\n@@ -486,8 +512,8 @@ proc exec_gij {jarfile expectFile {ld_library_additions {}} {addl_flags {}}} {\n   global ld_library_path\n \n   set ld_library_path \"$libjava_ld_library_path\"\n-  foreach path $ld_library_additions {\n-    add_path ld_library_path $path\n+  if {[llength $ld_library_additions] > 0} {\n+  append ld_library_path :[join $ld_library_additions :]\n   }\n \t\n   set_ld_library_path_env_vars\n@@ -536,8 +562,8 @@ proc libjava_invoke {errname testName optName executable inpfile resultfile\n     global ld_library_path\n \n     set ld_library_path \"$libjava_ld_library_path\"\n-    foreach path $ld_library_additions {\n-\tadd_path ld_library_path $path\n+    if {[llength $ld_library_additions] > 0} {\n+\tappend ld_library_path :[join $ld_library_additions :]\n     }\n \n     set_ld_library_path_env_vars"}, {"sha": "78507bc017b582ec3cfb36ae1786ecf4ed11e288", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -1,3 +1,10 @@\n+2009-07-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR testsuite/40699\n+\tPR testsuite/40707\n+\tPR testsuite/40709\n+\t* testsuite/lib/libmudflap.exp: Revert 2009-06-30 commit.\n+\n 2009-07-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19831"}, {"sha": "c69e84ade29d054a96562f0749a47294c8aefd5d", "filename": "libmudflap/testsuite/lib/libmudflap.exp", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -60,9 +60,28 @@ proc libmudflap-init { language } {\n     # set LD_LIBRARY_PATH so that libgcc_s, libstdc++ binaries can be found.\n     # locate libgcc.a so we don't need to account for different values of\n     # SHLIB_EXT on different platforms\n-    set ld_library_path [find_libgcc_s $cxx]\n-    add_path ld_library_path \"${cxxblddir}/src/.libs\"\n-    add_path ld_library_path \"${blddir}/.libs\"\n+    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n+    if {$gccdir != \"\"} {\n+\tset gccdir [file dirname $gccdir]\n+    }\n+\n+    set ld_library_path \".\"\n+    append ld_library_path \":${gccdir}\"\n+    append ld_library_path \":${cxxblddir}/src/.libs\"\n+    if {[is_remote host] == 0} {\n+\tforeach i \"[exec ${gccdir}/xgcc --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t\tcontinue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t\tappend ld_library_path \":${gccdir}/${mldir}\"\n+\t    }\n+\t}\n+    }\n+    append ld_library_path \":${blddir}/.libs\"\n \n     set libs \"-L${blddir}/.libs\"\n     set cxxflags \"-ggdb3 -DDEBUG_ASSERT\""}, {"sha": "f9cac8c42725a1d6d8da7bf683307649736b5946", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -1,3 +1,10 @@\n+2009-07-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR testsuite/40699\n+\tPR testsuite/40707\n+\tPR testsuite/40709\n+\t* testsuite/lib/libstdc++.exp: Revert 2009-06-30 commit.\n+\n 2009-07-08  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR libstdc++/40691"}, {"sha": "45e92d756ecf80c0045d1acfd2258bb75caed053", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33cde5161f2bc0738d24bcafe8ea9a858a63f9f4/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=33cde5161f2bc0738d24bcafe8ea9a858a63f9f4", "patch": "@@ -132,6 +132,7 @@ proc libstdc++_init { testfile } {\n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n     if {$gccdir != \"\"} {\n         set gccdir [file dirname $gccdir]\n+\tappend ld_library_path_tmp \":${gccdir}\"\n     }\n     v3track gccdir 3\n \n@@ -141,7 +142,7 @@ proc libstdc++_init { testfile } {\n     if {$libgompdir != \"\"} {\n \tset v3-libgomp 1\n         set libgompdir [file dirname $libgompdir]\n-\tadd_path ld_library_path_tmp ${libgompdir}\n+\tappend ld_library_path_tmp \":${libgompdir}\"\n \tverbose -log \"libgomp support detected\"\n     }\n     v3track libgompdir 3\n@@ -161,8 +162,22 @@ proc libstdc++_init { testfile } {\n     if {$gccdir != \"\"} {\n \tset compiler ${gccdir}/g++\n \tset ld_library_path ${ld_library_path_tmp}\n-\tadd_path ld_library_path \"${blddir}/src/.libs\"\n-\tadd_path ld_library_path [find_libgcc_s $compiler]\n+\tappend ld_library_path \":${blddir}/src/.libs\"\n+\n+\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t      continue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t      append ld_library_path \":${gccdir}/${mldir}\"\n+\t    }\n+\t  }\n+\t}\n+\n \tset_ld_library_path_env_vars\n \tif [info exists env(LD_LIBRARY_PATH)] {\n \t  verbose -log \"LD_LIBRARY_PATH = $env(LD_LIBRARY_PATH)\""}]}