{"sha": "481efdd94dcacba36b297f05d83e6da9acdfc7b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxZWZkZDk0ZGNhY2JhMzZiMjk3ZjA1ZDgzZTZkYTlhY2RmYzdiNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-20T11:04:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-20T11:04:43Z"}, "message": "md.texi (Standard Names): Move entry for addptr3 around...\n\n\t* doc/md.texi (Standard Names): Move entry for addptr3 around,\n\tadd entries for addv4, subv4, mulv4, umulv4 and negv3, fixes\n\tglitch in entries for cbranch4 and jump.\n\nFrom-SVN: r230651", "tree": {"sha": "fca3b14e108dfc512036ecf7f4fa7e179306a5f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fca3b14e108dfc512036ecf7f4fa7e179306a5f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481efdd94dcacba36b297f05d83e6da9acdfc7b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481efdd94dcacba36b297f05d83e6da9acdfc7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481efdd94dcacba36b297f05d83e6da9acdfc7b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481efdd94dcacba36b297f05d83e6da9acdfc7b6/comments", "author": null, "committer": null, "parents": [{"sha": "f993a85385e262572a1be89b15976ef47227964f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f993a85385e262572a1be89b15976ef47227964f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f993a85385e262572a1be89b15976ef47227964f"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "b94c81200ec853f915fab0ccad25d845f27956c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481efdd94dcacba36b297f05d83e6da9acdfc7b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481efdd94dcacba36b297f05d83e6da9acdfc7b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=481efdd94dcacba36b297f05d83e6da9acdfc7b6", "patch": "@@ -1,7 +1,14 @@\n+2015-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/md.texi (Standard Names): Move entry for addptr3 around,\n+\tadd entries for addv4, subv4, mulv4, umulv4 and negv3, fixes\n+\tglitch in entries for cbranch4 and jump.\n+\n 2015-11-20  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/68373\n-\t* tree-scalar-evolution.c (final_value_replacement_loop): Factor out of ...\n+\t* tree-scalar-evolution.c (final_value_replacement_loop): Factor out\n+\tof ...\n \t(scev_const_prop): ... here.\n \t* tree-scalar-evolution.h (final_value_replacement_loop): Declare.\n \t* tree-parloops.c (try_create_reduction_list): Call"}, {"sha": "79f3cf1d0f34ee2bbdd2b46151bc093eb53829f1", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481efdd94dcacba36b297f05d83e6da9acdfc7b6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481efdd94dcacba36b297f05d83e6da9acdfc7b6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=481efdd94dcacba36b297f05d83e6da9acdfc7b6", "patch": "@@ -4872,17 +4872,6 @@ Add operand 2 and operand 1, storing the result in operand 0.  All operands\n must have mode @var{m}.  This can be used even on two-address machines, by\n means of constraints requiring operands 1 and 0 to be the same location.\n \n-@cindex @code{addptr@var{m}3} instruction pattern\n-@item @samp{addptr@var{m}3}\n-Like @code{add@var{m}3} but is guaranteed to only be used for address\n-calculations.  The expanded code is not allowed to clobber the\n-condition code.  It only needs to be defined if @code{add@var{m}3}\n-sets the condition code.  If adds used for address calculations and\n-normal adds are not compatible it is required to expand a distinct\n-pattern (e.g. using an unspec).  The pattern is used by LRA to emit\n-address calculations.  @code{add@var{m}3} is used if\n-@code{addptr@var{m}3} is not defined.\n-\n @cindex @code{ssadd@var{m}3} instruction pattern\n @cindex @code{usadd@var{m}3} instruction pattern\n @cindex @code{sub@var{m}3} instruction pattern\n@@ -4912,6 +4901,35 @@ address calculations.  @code{add@var{m}3} is used if\n @itemx @samp{and@var{m}3}, @samp{ior@var{m}3}, @samp{xor@var{m}3}\n Similar, for other arithmetic operations.\n \n+@cindex @code{addv@var{m}4} instruction pattern\n+@item @samp{addv@var{m}4}\n+Like @code{add@var{m}3} but takes a @code{code_label} as operand 3 and\n+emits code to jump to it if signed overflow occurs during the addition.\n+This pattern is used to implement the built-in functions performing\n+signed integer addition with overflow checking.\n+\n+@cindex @code{subv@var{m}4} instruction pattern\n+@cindex @code{mulv@var{m}4} instruction pattern\n+@item @samp{subv@var{m}4}, @samp{mulv@var{m}4}\n+Similar, for other signed arithmetic operations.\n+\n+@cindex @code{umulv@var{m}4} instruction pattern\n+@item @samp{umulv@var{m}4}\n+Like @code{mulv@var{m}4} but for unsigned multiplication.  That is to\n+say, the operation is the same as signed multiplication but the jump\n+is taken only on unsigned overflow.\n+\n+@cindex @code{addptr@var{m}3} instruction pattern\n+@item @samp{addptr@var{m}3}\n+Like @code{add@var{m}3} but is guaranteed to only be used for address\n+calculations.  The expanded code is not allowed to clobber the\n+condition code.  It only needs to be defined if @code{add@var{m}3}\n+sets the condition code.  If adds used for address calculations and\n+normal adds are not compatible it is required to expand a distinct\n+pattern (e.g. using an unspec).  The pattern is used by LRA to emit\n+address calculations.  @code{add@var{m}3} is used if\n+@code{addptr@var{m}3} is not defined.\n+\n @cindex @code{fma@var{m}4} instruction pattern\n @item @samp{fma@var{m}4}\n Multiply operand 2 and operand 1, then add operand 3, storing the\n@@ -5277,6 +5295,11 @@ Reverse the order of bytes of operand 1 and store the result in operand 0.\n @item @samp{neg@var{m}2}, @samp{ssneg@var{m}2}, @samp{usneg@var{m}2}\n Negate operand 1 and store the result in operand 0.\n \n+@cindex @code{negv@var{m}3} instruction pattern\n+@item @samp{negv@var{m}3}\n+Like @code{neg@var{m}2} but takes a @code{code_label} as operand 2 and\n+emits code to jump to it if signed overflow occurs during the negation.\n+\n @cindex @code{abs@var{m}2} instruction pattern\n @item @samp{abs@var{m}2}\n Store the absolute value of operand 1 into operand 0.\n@@ -5926,13 +5949,13 @@ from the machine description.\n Conditional branch instruction combined with a compare instruction.\n Operand 0 is a comparison operator.  Operand 1 and operand 2 are the\n first and second operands of the comparison, respectively.  Operand 3\n-is a @code{label_ref} that refers to the label to jump to.\n+is the @code{code_label} to jump to.\n \n @cindex @code{jump} instruction pattern\n @item @samp{jump}\n A jump inside a function; an unconditional branch.  Operand 0 is the\n-@code{label_ref} of the label to jump to.  This pattern name is mandatory\n-on all machines.\n+@code{code_label} to jump to.  This pattern name is mandatory on all\n+machines.\n \n @cindex @code{call} instruction pattern\n @item @samp{call}"}]}