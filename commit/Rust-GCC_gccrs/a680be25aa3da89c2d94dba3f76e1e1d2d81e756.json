{"sha": "a680be25aa3da89c2d94dba3f76e1e1d2d81e756", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4MGJlMjVhYTNkYTg5YzJkOTRkYmEzZjc2ZTFlMWQyZDgxZTc1Ng==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-14T13:20:05Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-05-19T13:44:57Z"}, "message": "testsuite: aarch64: Add tests for high-half narrowing instructions\n\nAdd tests to confirm that a *2 (write to high-half) Neon instruction\nis generated from vcombine* of a narrowing intrinsic sequence.\n\ngcc/testsuite/ChangeLog:\n\n2021-05-14  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/narrow_high_combine.c: New test.", "tree": {"sha": "3a6c27c654b82754b1e38235fef8805247b494b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a6c27c654b82754b1e38235fef8805247b494b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a680be25aa3da89c2d94dba3f76e1e1d2d81e756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a680be25aa3da89c2d94dba3f76e1e1d2d81e756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a680be25aa3da89c2d94dba3f76e1e1d2d81e756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a680be25aa3da89c2d94dba3f76e1e1d2d81e756/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbdb9a384f53419d0e6fbcca2a4534a2668e5f8"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "cf649bda28d4d648c9392d202fcc5660107a11d7", "filename": "gcc/testsuite/gcc.target/aarch64/narrow_high_combine.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a680be25aa3da89c2d94dba3f76e1e1d2d81e756/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high_combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a680be25aa3da89c2d94dba3f76e1e1d2d81e756/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high_combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnarrow_high_combine.c?ref=a680be25aa3da89c2d94dba3f76e1e1d2d81e756", "patch": "@@ -0,0 +1,125 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+#define TEST_ARITH(name, rettype, rmwtype, intype, fs, rs) \\\n+  rettype test_ ## name ## _ ## fs ## _high_combine \\\n+\t\t(rmwtype a, intype b, intype c) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (a, name ## _ ## fs (b, c)); \\\n+\t}\n+\n+TEST_ARITH (vaddhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_ARITH (vaddhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_ARITH (vaddhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_ARITH (vaddhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vaddhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vaddhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_ARITH (vraddhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_ARITH (vraddhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_ARITH (vraddhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_ARITH (vraddhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vraddhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vraddhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_ARITH (vsubhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_ARITH (vsubhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_ARITH (vsubhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_ARITH (vsubhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vsubhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vsubhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_ARITH (vrsubhn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_ARITH (vrsubhn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_ARITH (vrsubhn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_ARITH (vrsubhn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_ARITH (vrsubhn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_ARITH (vrsubhn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+#define TEST_SHIFT(name, rettype, rmwtype, intype, fs, rs) \\\n+  rettype test_ ## name ## _ ## fs ## _high_combine \\\n+\t\t(rmwtype a, intype b) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (a, name ## _ ## fs (b, 4)); \\\n+\t}\n+\n+TEST_SHIFT (vshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vrshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vrshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vrshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vrshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vrshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vrshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vqshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vqshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vqshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vqshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vqshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vqshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vqrshrn_n, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_SHIFT (vqrshrn_n, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_SHIFT (vqrshrn_n, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_SHIFT (vqrshrn_n, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_SHIFT (vqrshrn_n, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_SHIFT (vqrshrn_n, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_SHIFT (vqshrun_n, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n+TEST_SHIFT (vqshrun_n, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n+TEST_SHIFT (vqshrun_n, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n+\n+TEST_SHIFT (vqrshrun_n, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n+TEST_SHIFT (vqrshrun_n, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n+TEST_SHIFT (vqrshrun_n, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n+\n+#define TEST_UNARY(name, rettype, rmwtype, intype, fs, rs) \\\n+  rettype test_ ## name ## _ ## fs ## _high_combine \\\n+\t\t(rmwtype a, intype b) \\\n+\t{ \\\n+\t\treturn vcombine_ ## rs (a, name ## _ ## fs (b)); \\\n+\t}\n+\n+TEST_UNARY (vmovn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_UNARY (vmovn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_UNARY (vmovn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_UNARY (vmovn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_UNARY (vmovn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_UNARY (vmovn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_UNARY (vqmovn, int8x16_t, int8x8_t, int16x8_t, s16, s8)\n+TEST_UNARY (vqmovn, int16x8_t, int16x4_t, int32x4_t, s32, s16)\n+TEST_UNARY (vqmovn, int32x4_t, int32x2_t, int64x2_t, s64, s32)\n+TEST_UNARY (vqmovn, uint8x16_t, uint8x8_t, uint16x8_t, u16, u8)\n+TEST_UNARY (vqmovn, uint16x8_t, uint16x4_t, uint32x4_t, u32, u16)\n+TEST_UNARY (vqmovn, uint32x4_t, uint32x2_t, uint64x2_t, u64, u32)\n+\n+TEST_UNARY (vqmovun, uint8x16_t, uint8x8_t, int16x8_t, s16, u8)\n+TEST_UNARY (vqmovun, uint16x8_t, uint16x4_t, int32x4_t, s32, u16)\n+TEST_UNARY (vqmovun, uint32x4_t, uint32x2_t, int64x2_t, s64, u32)\n+\n+/* { dg-final { scan-assembler-times \"\\\\taddhn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsubhn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trsubhn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\traddhn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\trshrn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tshrn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrun2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrun2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqshrn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqshrn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqrshrn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqrshrn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\txtn2\\\\tv\" 6} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tuqxtn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtn2\\\\tv\" 3} }  */\n+/* { dg-final { scan-assembler-times \"\\\\tsqxtun2\\\\tv\" 3} }  */"}]}