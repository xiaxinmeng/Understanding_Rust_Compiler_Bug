{"sha": "93638d7a89548904eca63862085c30e2808922dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2MzhkN2E4OTU0ODkwNGVjYTYzODYyMDg1YzMwZTI4MDg5MjJkYw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-09-07T00:19:27Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-09-07T00:19:27Z"}, "message": "tm.texi (TARGET_ASM_ASSEMBLE_VISIBILITY): Describe.\n\n\t* doc/tm.texi (TARGET_ASM_ASSEMBLE_VISIBILITY): Describe.\n\t* target-def.h (TARGET_ASM_ASSEMBLE_VISIBILITY): Define.\n\t(TARGET_ASM_OUT): Add the above here.\n\t* target.h (struct gcc_target): Add \"visibility\" field.\n\t* varasm.c (maybe_assemble_visibility): Call targetm visibility func.\n\t* config/rs6000/rs6000.c (rs6000_assemble_visibility): New function.\n\t(TARGET_ASM_ASSEMBLE_VISIBILITY): Define.\n\t(rs6000_legitimize_reload_address, first_reg_to_save): Formatting.\n\nFrom-SVN: r56906", "tree": {"sha": "5de5ac5f72323e7b1a2c867059483f6f69c4f135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5de5ac5f72323e7b1a2c867059483f6f69c4f135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93638d7a89548904eca63862085c30e2808922dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93638d7a89548904eca63862085c30e2808922dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93638d7a89548904eca63862085c30e2808922dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93638d7a89548904eca63862085c30e2808922dc/comments", "author": null, "committer": null, "parents": [{"sha": "370ce32a02500b1394456b4d1ca495e464624cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370ce32a02500b1394456b4d1ca495e464624cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370ce32a02500b1394456b4d1ca495e464624cc0"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "98f460b494240f938746b5bffd98040fd991d3a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638d7a89548904eca63862085c30e2808922dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638d7a89548904eca63862085c30e2808922dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93638d7a89548904eca63862085c30e2808922dc", "patch": "@@ -1,3 +1,14 @@\n+2002-09-07  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* doc/tm.texi (TARGET_ASM_ASSEMBLE_VISIBILITY): Describe.\n+\t* target-def.h (TARGET_ASM_ASSEMBLE_VISIBILITY): Define.\n+\t(TARGET_ASM_OUT): Add the above here.\n+\t* target.h (struct gcc_target): Add \"visibility\" field.\n+\t* varasm.c (maybe_assemble_visibility): Call targetm visibility func.\n+\t* config/rs6000/rs6000.c (rs6000_assemble_visibility): New function.\n+\t(TARGET_ASM_ASSEMBLE_VISIBILITY): Define.\n+\t(rs6000_legitimize_reload_address, first_reg_to_save): Formatting.\n+\n 2002-09-06  Ziemowit Laski <zlaski@apple.com>\n \n \t* c-lang.c (objc_is_id): New stub."}, {"sha": "5f66c58223116993f8c98505105e175bbbd05196", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638d7a89548904eca63862085c30e2808922dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638d7a89548904eca63862085c30e2808922dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=93638d7a89548904eca63862085c30e2808922dc", "patch": "@@ -186,6 +186,7 @@ static void toc_hash_mark_table PARAMS ((void *));\n static int constant_pool_expr_1 PARAMS ((rtx, int *, int *));\n static struct machine_function * rs6000_init_machine_status PARAMS ((void));\n static bool rs6000_assemble_integer PARAMS ((rtx, unsigned int, int));\n+static void rs6000_assemble_visibility PARAMS ((tree, const char *));\n static int rs6000_ra_ever_killed PARAMS ((void));\n static tree rs6000_handle_longcall_attribute PARAMS ((tree *, tree, tree, int, bool *));\n const struct attribute_spec rs6000_attribute_table[];\n@@ -344,6 +345,11 @@ static const char alt_reg_names[][8] =\n #undef TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER rs6000_assemble_integer\n \n+#ifdef HAVE_GAS_HIDDEN\n+#undef TARGET_ASM_ASSEMBLE_VISIBILITY\n+#define TARGET_ASM_ASSEMBLE_VISIBILITY rs6000_assemble_visibility\n+#endif\n+\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE rs6000_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n@@ -2249,7 +2255,7 @@ rs6000_legitimize_reload_address (x, mode, opnum, type, ind_levels, win)\n       && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER\n       && REG_MODE_OK_FOR_BASE_P (XEXP (x, 0), mode)\n       && GET_CODE (XEXP (x, 1)) == CONST_INT\n-       && !SPE_VECTOR_MODE (mode)\n+      && !SPE_VECTOR_MODE (mode)\n       && !ALTIVEC_VECTOR_MODE (mode))\n     {\n       HOST_WIDE_INT val = INTVAL (XEXP (x, 1));\n@@ -8152,6 +8158,31 @@ rs6000_assemble_integer (x, size, aligned_p)\n #endif /* RELOCATABLE_NEEDS_FIXUP */\n   return default_assemble_integer (x, size, aligned_p);\n }\n+\n+#ifdef HAVE_GAS_HIDDEN\n+/* Emit an assembler directive to set symbol visibility for DECL to\n+   VISIBILITY_TYPE.  */\n+\n+void\n+rs6000_assemble_visibility (decl, visibility_type)\n+     tree decl;\n+     const char *visibility_type;\n+{\n+  assemble_visibility (decl, visibility_type);\n+\n+  /* Functions need to have their entry point symbol visibility set as\n+     well as their descriptor symbol visibility.  */\n+  if (DEFAULT_ABI == ABI_AIX && TREE_CODE (decl) == FUNCTION_DECL)\n+    {\n+      const char *name;\n+\n+      name = ((* targetm.strip_name_encoding)\n+\t      (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl))));\n+\n+      fprintf (asm_out_file, \"\\t.%s\\t.%s\\n\", visibility_type, name);\n+    }\n+}\n+#endif\n \f\n enum rtx_code\n rs6000_reverse_condition (mode, code)\n@@ -8787,8 +8818,9 @@ first_reg_to_save ()\n       break;\n \n #if TARGET_MACHO\n-  if (flag_pic && current_function_uses_pic_offset_table &&\n-      (first_reg > RS6000_PIC_OFFSET_TABLE_REGNUM))\n+  if (flag_pic\n+      && current_function_uses_pic_offset_table\n+      && first_reg > RS6000_PIC_OFFSET_TABLE_REGNUM)\n     return RS6000_PIC_OFFSET_TABLE_REGNUM;\n #endif\n "}, {"sha": "7bc63b6619dec71f4abc01965e550d723478267c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638d7a89548904eca63862085c30e2808922dc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638d7a89548904eca63862085c30e2808922dc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=93638d7a89548904eca63862085c30e2808922dc", "patch": "@@ -6663,6 +6663,12 @@ you want to control one-only symbol support with a compiler flag, or if\n setting the @code{DECL_ONE_ONLY} flag is enough to mark a declaration to\n be emitted as one-only.\n \n+@deftypefn {Target Hook} void TARGET_ASM_ASSEMBLE_VISIBILITY (tree @var{decl}, const char *@var{visibility})\n+This target hook is a function to output to @var{asm_out_file} some\n+commands that will make the symbol(s) associated with @var{decl} have\n+hidden, protected or internal visibility as specified by @var{visibility}.\n+@end deftypefn\n+\n @findex ASM_OUTPUT_EXTERNAL\n @item ASM_OUTPUT_EXTERNAL (@var{stream}, @var{decl}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream"}, {"sha": "939502f1e14deb4dd4f30b7e74afd30186c9ddf6", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638d7a89548904eca63862085c30e2808922dc/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638d7a89548904eca63862085c30e2808922dc/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=93638d7a89548904eca63862085c30e2808922dc", "patch": "@@ -58,6 +58,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_GLOBALIZE_LABEL default_globalize_label\n #endif\n \n+#ifndef TARGET_ASM_ASSEMBLE_VISIBILITY\n+#define TARGET_ASM_ASSEMBLE_VISIBILITY assemble_visibility\n+#endif\n+\n #define TARGET_ASM_FUNCTION_PROLOGUE default_function_pro_epilogue\n #define TARGET_ASM_FUNCTION_EPILOGUE default_function_pro_epilogue\n #define TARGET_ASM_FUNCTION_END_PROLOGUE no_asm_to_stream\n@@ -149,6 +153,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_UNALIGNED_INT_OP,\t\t\\\n \t\t\tTARGET_ASM_INTEGER,\t\t\t\\\n \t\t\tTARGET_ASM_GLOBALIZE_LABEL,\t\t\\\n+\t\t\tTARGET_ASM_ASSEMBLE_VISIBILITY,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_PROLOGUE,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_END_PROLOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE,\t\\"}, {"sha": "f68cfb13632f0848fc10bc5ae34ed17b1fcf1a3e", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638d7a89548904eca63862085c30e2808922dc/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638d7a89548904eca63862085c30e2808922dc/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=93638d7a89548904eca63862085c30e2808922dc", "patch": "@@ -72,6 +72,10 @@ struct gcc_target\n     /* Output code that will globalize a label.  */\n     void (* globalize_label) PARAMS ((FILE *, const char *));\n \n+    /* Emit an assembler directive to set visibility for the symbol\n+       associated with the tree decl.  */\n+    void (* visibility) PARAMS ((tree, const char *));\n+\n     /* Output the assembler code for entry to a function.  */\n     void (* function_prologue) PARAMS ((FILE *, HOST_WIDE_INT));\n "}, {"sha": "2d214a0f065de8ffcc0831c94b21d53c7fcc74f0", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638d7a89548904eca63862085c30e2808922dc/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638d7a89548904eca63862085c30e2808922dc/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=93638d7a89548904eca63862085c30e2808922dc", "patch": "@@ -4624,7 +4624,7 @@ maybe_assemble_visibility (decl)\n     {\n       const char *type\n \t= TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (visibility)));\n-      assemble_visibility (decl, type);\n+      (* targetm.asm_out.visibility) (decl, type);\n     }\n }\n "}]}