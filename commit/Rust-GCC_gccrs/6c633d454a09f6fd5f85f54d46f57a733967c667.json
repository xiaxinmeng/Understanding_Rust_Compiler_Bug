{"sha": "6c633d454a09f6fd5f85f54d46f57a733967c667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2MzNkNDU0YTA5ZjZmZDVmODVmNTRkNDZmNTdhNzMzOTY3YzY2Nw==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2008-01-18T01:37:53Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2008-01-18T01:37:53Z"}, "message": "unwind-dw2-xtensa.h (_Unwind_FrameState): Remove pc field and add signal_ra.\n\n\t* config/xtensa/unwind-dw2-xtensa.h (_Unwind_FrameState): Remove pc\n\tfield and add signal_ra.\n\t* config/xtensa/unwind-dw2-xtensa.c (uw_frame_state_for): Remove\n\tassignments to frame state pc.  Move end of stack check after\n\tMD_FALLBACK_FRAME_STATE_FOR.\n\t(uw_update_context_1): Use frame state signal_regs if set, instead\n\tof checking signal_frame flag.\n\t(uw_update_context): Use frame state signal_ra if set.\n\t* config/xtensa/linux.h (MD_UNWIND_SUPPORT): Define.\n\t* config/xtensa/linux-unwind.h: New file.\n\nFrom-SVN: r131622", "tree": {"sha": "6219f1d30d60702cb7e92d745b8b5c91246b458e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6219f1d30d60702cb7e92d745b8b5c91246b458e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c633d454a09f6fd5f85f54d46f57a733967c667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c633d454a09f6fd5f85f54d46f57a733967c667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c633d454a09f6fd5f85f54d46f57a733967c667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c633d454a09f6fd5f85f54d46f57a733967c667/comments", "author": null, "committer": null, "parents": [{"sha": "c0184444694a44ea62d46f1ea90a6a47e8997174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0184444694a44ea62d46f1ea90a6a47e8997174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0184444694a44ea62d46f1ea90a6a47e8997174"}], "stats": {"total": 155, "additions": 138, "deletions": 17}, "files": [{"sha": "987a47bf6b8c3495545e51a036ebea7ce5e43523", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c633d454a09f6fd5f85f54d46f57a733967c667", "patch": "@@ -1,3 +1,16 @@\n+2007-01-17  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/unwind-dw2-xtensa.h (_Unwind_FrameState): Remove pc\n+\tfield and add signal_ra.\n+\t* config/xtensa/unwind-dw2-xtensa.c (uw_frame_state_for): Remove\n+\tassignments to frame state pc.  Move end of stack check after\n+\tMD_FALLBACK_FRAME_STATE_FOR.\n+\t(uw_update_context_1): Use frame state signal_regs if set, instead\n+\tof checking signal_frame flag.\n+\t(uw_update_context): Use frame state signal_ra if set.\n+\t* config/xtensa/linux.h (MD_UNWIND_SUPPORT): Define.\n+\t* config/xtensa/linux-unwind.h: New file.\n+\n 2007-01-18  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \t* modulo-sched.c (get_sched_window): Fix comment typo."}, {"sha": "18daff2d133c923d464c0e934eb7cc0d4f05bfa0", "filename": "gcc/config/xtensa/linux-unwind.h", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux-unwind.h?ref=6c633d454a09f6fd5f85f54d46f57a733967c667", "patch": "@@ -0,0 +1,101 @@\n+/* DWARF2 EH unwinding support for Xtensa.\n+   Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2-xtensa.c for the structs.\n+   Don't use this at all if inhibit_libc is used.  */\n+\n+#ifndef inhibit_libc\n+\n+#include <signal.h>\n+#include <sys/ucontext.h>\n+\n+/* Encoded bytes for Xtensa instructions:\n+\tmovi a2, __NR_rt_sigreturn\n+\tsyscall\n+\tentry (first byte only)\n+   Some of the bytes are endian-dependent.  */\n+\n+#define MOVI_BYTE0 0x22\n+#define MOVI_BYTE2 225 /* __NR_rt_sigreturn */\n+#define SYSC_BYTE0 0\n+#define SYSC_BYTE2 0\n+\n+#ifdef __XTENSA_EB__\n+#define MOVI_BYTE1 0x0a\n+#define SYSC_BYTE1 0x05\n+#define ENTRY_BYTE 0x6c\n+#else\n+#define MOVI_BYTE1 0xa0\n+#define SYSC_BYTE1 0x50\n+#define ENTRY_BYTE 0x36\n+#endif\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR xtensa_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+xtensa_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t     _Unwind_FrameState *fs)\n+{\n+  unsigned char *pc = context->ra;\n+  struct sigcontext *sc;\n+\n+  struct rt_sigframe {\n+    struct siginfo info;\n+    struct ucontext uc;\n+  } *rt_;\n+\n+  /* movi a2, __NR_rt_sigreturn; syscall */\n+  if (pc[0] != MOVI_BYTE0\n+      || pc[1] != MOVI_BYTE1\n+      || pc[2] != MOVI_BYTE2\n+      || pc[3] != SYSC_BYTE0\n+      || pc[4] != SYSC_BYTE1\n+      || pc[5] != SYSC_BYTE2)\n+    return _URC_END_OF_STACK;\n+\n+  rt_ = context->sp;\n+  sc = &rt_->uc.uc_mcontext;\n+  fs->signal_regs = (_Unwind_Word *) sc->sc_a;\n+\n+  /* If the signal arrived just before an ENTRY instruction, find the return\n+     address and pretend the signal arrived before executing the CALL.  */\n+  if (*(unsigned char *) sc->sc_pc == ENTRY_BYTE)\n+   {\n+     unsigned callinc = (sc->sc_ps >> 16) & 3;\n+     fs->signal_ra = ((sc->sc_a[callinc << 2] & XTENSA_RA_FIELD_MASK)\n+\t\t      | context->ra_high_bits) - 3;\n+   }\n+  else\n+    fs->signal_ra = sc->sc_pc;\n+\n+  fs->signal_frame = 1;\n+  return _URC_NO_REASON;\n+}\n+\n+#endif /* ifdef inhibit_libc  */"}, {"sha": "69ab626b20114e319e5b0e0124a524d797fe460b", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=6c633d454a09f6fd5f85f54d46f57a733967c667", "patch": "@@ -1,6 +1,7 @@\n /* Xtensa Linux configuration.\n    Derived from the configuration for GCC for Intel i386 running Linux.\n-   Copyright (C) 2001, 2002, 2003, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -59,3 +60,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Always enable \"-fpic\" for Xtensa Linux.  */\n #define XTENSA_ALWAYS_PIC 1\n+\n+#define MD_UNWIND_SUPPORT \"config/xtensa/linux-unwind.h\"\n+"}, {"sha": "22b492f9eadfb849c9a2333eb88503a314d4c56b", "filename": "gcc/config/xtensa/unwind-dw2-xtensa.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.c?ref=6c633d454a09f6fd5f85f54d46f57a733967c667", "patch": "@@ -1,6 +1,6 @@\n /* DWARF2 exception handling and frame unwinding for Xtensa.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-   2007\n+   2007, 2008\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -325,10 +325,6 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   memset (fs, 0, sizeof (*fs));\n   context->lsda = 0;\n \n-  ra_ptr = context->reg[0];\n-  if (ra_ptr && *ra_ptr == 0)\n-    return _URC_END_OF_STACK;\n-\n   fde = _Unwind_Find_FDE (context->ra + _Unwind_IsSignalFrame (context) - 1,\n \t\t\t  &context->bases);\n   if (fde == NULL)\n@@ -341,16 +337,13 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n       reason = MD_FALLBACK_FRAME_STATE_FOR (context, fs);\n       if (reason != _URC_END_OF_STACK)\n \treturn reason;\n+#endif\n       /* The frame was not recognized and handled by the fallback function,\n \t but it is not really the end of the stack.  Fall through here and\n \t unwind it anyway.  */\n-#endif\n-      fs->pc = context->ra;\n     }\n   else\n     {\n-      fs->pc = context->bases.func;\n-\n       cie = get_cie (fde);\n       if (extract_cie_info (cie, context, fs) == NULL)\n \t/* CIE contained unknown augmentation.  */\n@@ -373,6 +366,15 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \t}\n     }\n \n+  /* Check for the end of the stack.  This needs to be checked after\n+     the MD_FALLBACK_FRAME_STATE_FOR check for signal frames because\n+     the contents of context->reg[0] are undefined at a signal frame,\n+     and register a0 may appear to be zero.  (The return address in\n+     context->ra comes from register a4 or a8).  */\n+  ra_ptr = context->reg[0];\n+  if (ra_ptr && *ra_ptr == 0)\n+    return _URC_END_OF_STACK;\n+\n   /* Find the window size from the high bits of the return address.  */\n   if (ra_ptr)\n     window_size = (*ra_ptr >> 30) * 4;\n@@ -391,7 +393,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   _Unwind_Word *sp, *cfa, *next_cfa;\n   int i;\n \n-  if (fs->signal_frame)\n+  if (fs->signal_regs)\n     {\n       cfa = (_Unwind_Word *) fs->signal_regs[1];\n       next_cfa = (_Unwind_Word *) cfa[-3];\n@@ -437,8 +439,11 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \n   /* Compute the return address now, since the return address column\n      can change from frame to frame.  */\n-  context->ra = (void *) ((_Unwind_GetGR (context, fs->retaddr_column)\n-\t\t\t   & XTENSA_RA_FIELD_MASK) | context->ra_high_bits);\n+  if (fs->signal_ra != 0)\n+    context->ra = (void *) fs->signal_ra;\n+  else\n+    context->ra = (void *) ((_Unwind_GetGR (context, fs->retaddr_column)\n+\t\t\t     & XTENSA_RA_FIELD_MASK) | context->ra_high_bits);\n }\n \n static void"}, {"sha": "f88f7f3a84aba7908445ab41597a724d88b483da", "filename": "gcc/config/xtensa/unwind-dw2-xtensa.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c633d454a09f6fd5f85f54d46f57a733967c667/gcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h?ref=6c633d454a09f6fd5f85f54d46f57a733967c667", "patch": "@@ -1,5 +1,5 @@\n /* DWARF2 frame unwind data structure for Xtensa.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007, 2008\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -39,9 +39,6 @@\n    _Unwind_FrameState.  */\n typedef struct\n {\n-  /* The PC described by the current frame state.  */\n-  void *pc;\n-\n   /* The information we care about from the CIE/FDE.  */\n   _Unwind_Personality_Fn personality;\n   _Unwind_Word retaddr_column;\n@@ -53,5 +50,6 @@ typedef struct\n \n   /* Saved registers for a signal frame.  */\n   _Unwind_Word *signal_regs;\n+  _Unwind_Word signal_ra;\n } _Unwind_FrameState;\n "}]}