{"sha": "d2d604d83edb86ce3f492d03900fb29dea97725d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJkNjA0ZDgzZWRiODZjZTNmNDkyZDAzOTAwZmIyOWRlYTk3NzI1ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-06-27T11:13:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-27T11:13:10Z"}, "message": "re PR target/90991 (_mm_loadu_ps instrinsic translates to vmovaps in combination with _mm512_insertf32x4)\n\n\tPR target/90991\n\t* config/i386/sse.md (avx_vec_concat<mode>): Use nonimmediate_operand\n\tinstead of register_operand for operands[1], add m to its constraints\n\tif operands[2] uses \"C\" constraint.  Ensure in condition that if\n\toperands[2] is not 0, then operands[1] is not a MEM.  For last two\n\talternatives, use unaligned loads instead of aligned if operands[1] is\n\tmisaligned_operand.\n\n\t* gcc.target/i386/avx2-pr90991-1.c: New test.\n\t* gcc.target/i386/avx512dq-pr90991-2.c: New test.\n\nFrom-SVN: r272745", "tree": {"sha": "57818937b504189e908dd1ee12d60648c3ce0356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57818937b504189e908dd1ee12d60648c3ce0356"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2d604d83edb86ce3f492d03900fb29dea97725d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d604d83edb86ce3f492d03900fb29dea97725d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d604d83edb86ce3f492d03900fb29dea97725d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d604d83edb86ce3f492d03900fb29dea97725d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45309d286c80ecad8b7a4efba0e9aba35d847af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45309d286c80ecad8b7a4efba0e9aba35d847af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45309d286c80ecad8b7a4efba0e9aba35d847af6"}], "stats": {"total": 183, "additions": 167, "deletions": 16}, "files": [{"sha": "73c0be048aceedbf60ba57a6c73ba9bd6976a66c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2d604d83edb86ce3f492d03900fb29dea97725d", "patch": "@@ -1,3 +1,13 @@\n+2019-06-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/90991\n+\t* config/i386/sse.md (avx_vec_concat<mode>): Use nonimmediate_operand\n+\tinstead of register_operand for operands[1], add m to its constraints\n+\tif operands[2] uses \"C\" constraint.  Ensure in condition that if\n+\toperands[2] is not 0, then operands[1] is not a MEM.  For last two\n+\talternatives, use unaligned loads instead of aligned if operands[1] is\n+\tmisaligned_operand.\n+\n 2019-06-27  Martin Liska  <mliska@suse.cz>\n \n \t* asan.c (asan_emit_allocas_unpoison): Remove obviously"}, {"sha": "8b4f6c185d0b1fb98be2377a276c5f4b32621493", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 54, "deletions": 16, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d2d604d83edb86ce3f492d03900fb29dea97725d", "patch": "@@ -20743,9 +20743,11 @@\n (define_insn \"avx_vec_concat<mode>\"\n   [(set (match_operand:V_256_512 0 \"register_operand\" \"=x,v,x,Yv\")\n \t(vec_concat:V_256_512\n-\t  (match_operand:<ssehalfvecmode> 1 \"register_operand\" \"x,v,x,v\")\n+\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"x,v,xm,vm\")\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimm_or_0_operand\" \"xm,vm,C,C\")))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX\n+   && (operands[2] == CONST0_RTX (<ssehalfvecmode>mode)\n+       || !MEM_P (operands[1]))\"\n {\n   switch (which_alternative)\n     {\n@@ -20771,27 +20773,63 @@\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V16SF:\n-\t  return \"vmovaps\\t{%1, %t0|%t0, %1}\";\n+\t  if (misaligned_operand (operands[1], <ssehalfvecmode>mode))\n+\t    return \"vmovups\\t{%1, %t0|%t0, %1}\";\n+\t  else\n+\t    return \"vmovaps\\t{%1, %t0|%t0, %1}\";\n \tcase MODE_V8DF:\n-\t  return \"vmovapd\\t{%1, %t0|%t0, %1}\";\n+\t  if (misaligned_operand (operands[1], <ssehalfvecmode>mode))\n+\t    return \"vmovupd\\t{%1, %t0|%t0, %1}\";\n+\t  else\n+\t    return \"vmovapd\\t{%1, %t0|%t0, %1}\";\n \tcase MODE_V8SF:\n-\t  return \"vmovaps\\t{%1, %x0|%x0, %1}\";\n+\t  if (misaligned_operand (operands[1], <ssehalfvecmode>mode))\n+\t    return \"vmovups\\t{%1, %x0|%x0, %1}\";\n+\t  else\n+\t    return \"vmovaps\\t{%1, %x0|%x0, %1}\";\n \tcase MODE_V4DF:\n-\t  return \"vmovapd\\t{%1, %x0|%x0, %1}\";\n+\t  if (misaligned_operand (operands[1], <ssehalfvecmode>mode))\n+\t    return \"vmovupd\\t{%1, %x0|%x0, %1}\";\n+\t  else\n+\t    return \"vmovapd\\t{%1, %x0|%x0, %1}\";\n \tcase MODE_XI:\n-\t  if (which_alternative == 2)\n-\t    return \"vmovdqa\\t{%1, %t0|%t0, %1}\";\n-\t  else if (GET_MODE_SIZE (<ssescalarmode>mode) == 8)\n-\t    return \"vmovdqa64\\t{%1, %t0|%t0, %1}\";\n+\t  if (misaligned_operand (operands[1], <ssehalfvecmode>mode))\n+\t    {\n+\t      if (which_alternative == 2)\n+\t\treturn \"vmovdqu\\t{%1, %t0|%t0, %1}\";\n+\t      else if (GET_MODE_SIZE (<ssescalarmode>mode) == 8)\n+\t\treturn \"vmovdqu64\\t{%1, %t0|%t0, %1}\";\n+\t      else\n+\t\treturn \"vmovdqu32\\t{%1, %t0|%t0, %1}\";\n+\t    }\n \t  else\n-\t    return \"vmovdqa32\\t{%1, %t0|%t0, %1}\";\n+\t    {\n+\t      if (which_alternative == 2)\n+\t\treturn \"vmovdqa\\t{%1, %t0|%t0, %1}\";\n+\t      else if (GET_MODE_SIZE (<ssescalarmode>mode) == 8)\n+\t\treturn \"vmovdqa64\\t{%1, %t0|%t0, %1}\";\n+\t      else\n+\t\treturn \"vmovdqa32\\t{%1, %t0|%t0, %1}\";\n+\t    }\n \tcase MODE_OI:\n-\t  if (which_alternative == 2)\n-\t    return \"vmovdqa\\t{%1, %x0|%x0, %1}\";\n-\t  else if (GET_MODE_SIZE (<ssescalarmode>mode) == 8)\n-\t    return \"vmovdqa64\\t{%1, %x0|%x0, %1}\";\n+\t  if (misaligned_operand (operands[1], <ssehalfvecmode>mode))\n+\t    {\n+\t      if (which_alternative == 2)\n+\t\treturn \"vmovdqu\\t{%1, %x0|%x0, %1}\";\n+\t      else if (GET_MODE_SIZE (<ssescalarmode>mode) == 8)\n+\t\treturn \"vmovdqu64\\t{%1, %x0|%x0, %1}\";\n+\t      else\n+\t\treturn \"vmovdqu32\\t{%1, %x0|%x0, %1}\";\n+\t    }\n \t  else\n-\t    return \"vmovdqa32\\t{%1, %x0|%x0, %1}\";\n+\t    {\n+\t      if (which_alternative == 2)\n+\t\treturn \"vmovdqa\\t{%1, %x0|%x0, %1}\";\n+\t      else if (GET_MODE_SIZE (<ssescalarmode>mode) == 8)\n+\t\treturn \"vmovdqa64\\t{%1, %x0|%x0, %1}\";\n+\t      else\n+\t\treturn \"vmovdqa32\\t{%1, %x0|%x0, %1}\";\n+\t    }\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "41918c8667795ca07c1dccc7835c424327e64b32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2d604d83edb86ce3f492d03900fb29dea97725d", "patch": "@@ -1,3 +1,9 @@\n+2019-06-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/90991\n+\t* gcc.target/i386/avx2-pr90991-1.c: New test.\n+\t* gcc.target/i386/avx512dq-pr90991-2.c: New test.\n+\n 2019-06-27  Jan Beulich  <jbeulich@suse.com>\n \n \t* gcc.target/i386/gfni-4.c: Pass -msse2."}, {"sha": "1f0467efcb14cc3a47dd64b9dfd7b95be577fa2a", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr90991-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr90991-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr90991-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr90991-1.c?ref=d2d604d83edb86ce3f492d03900fb29dea97725d", "patch": "@@ -0,0 +1,50 @@\n+/* PR target/90991 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovups\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovupd\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %xmm0\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovaps\\[^\\n\\r]*xmm0\\[^\\n\\r]*xmm0\" } } */\n+/* { dg-final { scan-assembler-not \"vmovapd\\[^\\n\\r]*xmm0\\[^\\n\\r]*xmm0\" } } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\\[^\\n\\r]*xmm0\\[^\\n\\r]*xmm0\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m256\n+f1 (void *a)\n+{\n+  return _mm256_insertf128_ps (_mm256_set1_ps (0.0f), _mm_load_ps (a), 0);\n+}\n+\n+__m256d\n+f2 (void *a)\n+{\n+  return _mm256_insertf128_pd (_mm256_set1_pd (0.0), _mm_load_pd (a), 0);\n+}\n+\n+__m256i\n+f3 (void *a)\n+{\n+  return _mm256_insertf128_si256 (_mm256_set1_epi32 (0), _mm_load_si128 (a), 0);\n+}\n+\n+__m256\n+f4 (void *a)\n+{\n+  return _mm256_insertf128_ps (_mm256_set1_ps (0.0f), _mm_loadu_ps (a), 0);\n+}\n+\n+__m256d\n+f5 (void *a)\n+{\n+  return _mm256_insertf128_pd (_mm256_set1_pd (0.0), _mm_loadu_pd (a), 0);\n+}\n+\n+__m256i\n+f6 (void *a)\n+{\n+  return _mm256_insertf128_si256 (_mm256_set1_epi32 (0), _mm_loadu_si128 (a), 0);\n+}"}, {"sha": "7699c3149aee244a25395a25b2d9d1b097372c0a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-pr90991-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr90991-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d604d83edb86ce3f492d03900fb29dea97725d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr90991-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-pr90991-2.c?ref=d2d604d83edb86ce3f492d03900fb29dea97725d", "patch": "@@ -0,0 +1,47 @@\n+/* PR target/90991 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512dq -masm=att -mtune=intel\" } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovups\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovupd\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %ymm0\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\t]\\+\\\\(\\[^\\n\\r]*\\\\), %ymm0\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+__m512\n+f1 (void *a)\n+{\n+  return _mm512_insertf32x8 (_mm512_set1_ps (0.0f), _mm256_load_ps (a), 0);\n+}\n+\n+__m512d\n+f2 (void *a)\n+{\n+  return _mm512_insertf64x4 (_mm512_set1_pd (0.0), _mm256_load_pd (a), 0);\n+}\n+\n+__m512i\n+f3 (void *a)\n+{\n+  return _mm512_inserti32x8 (_mm512_set1_epi32 (0), _mm256_load_si256 (a), 0);\n+}\n+\n+__m512\n+f4 (void *a)\n+{\n+  return _mm512_insertf32x8 (_mm512_set1_ps (0.0f), _mm256_loadu_ps (a), 0);\n+}\n+\n+__m512d\n+f5 (void *a)\n+{\n+  return _mm512_insertf64x4 (_mm512_set1_pd (0.0), _mm256_loadu_pd (a), 0);\n+}\n+\n+__m512i\n+f6 (void *a)\n+{\n+  return _mm512_inserti32x8 (_mm512_set1_epi32 (0), _mm256_loadu_si256 (a), 0);\n+}"}]}