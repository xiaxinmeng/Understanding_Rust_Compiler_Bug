{"sha": "5244db056ba9d864cb79d780e4be2b579068dfd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI0NGRiMDU2YmE5ZDg2NGNiNzlkNzgwZTRiZTJiNTc5MDY4ZGZkNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-12T13:07:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-12T13:07:53Z"}, "message": "(round_push, allocate_dynamic_stack_space): Avoid using CEIL_DIV_EXPR;\n\nadd adjustment and use TRUNC_DIV_EXPR instead.\n\nFrom-SVN: r7738", "tree": {"sha": "b141017cc7e4e08595acc02a21363e06ccddd0ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b141017cc7e4e08595acc02a21363e06ccddd0ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5244db056ba9d864cb79d780e4be2b579068dfd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5244db056ba9d864cb79d780e4be2b579068dfd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5244db056ba9d864cb79d780e4be2b579068dfd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5244db056ba9d864cb79d780e4be2b579068dfd5/comments", "author": null, "committer": null, "parents": [{"sha": "667732d8498fecd3c1e0fb75bfe7f611f96336f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667732d8498fecd3c1e0fb75bfe7f611f96336f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667732d8498fecd3c1e0fb75bfe7f611f96336f4"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "0d2445359c4b0c0119f8596ab6449f95e2f63129", "filename": "gcc/explow.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5244db056ba9d864cb79d780e4be2b579068dfd5/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5244db056ba9d864cb79d780e4be2b579068dfd5/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=5244db056ba9d864cb79d780e4be2b579068dfd5", "patch": "@@ -742,7 +742,11 @@ round_push (size)\n     }\n   else\n     {\n-      size = expand_divmod (0, CEIL_DIV_EXPR, Pmode, size, GEN_INT (align),\n+      /* CEIL_DIV_EXPR needs to worry about the addition overflowing,\n+\t but we know it can't.  So add ourselves and then do TRUNC_DIV_EXPR. */\n+      size = expand_binop (Pmode, add_optab, size, GEN_INT (align - 1),\n+\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+      size = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, size, GEN_INT (align),\n \t\t\t    NULL_RTX, 1);\n       size = expand_mult (Pmode, size, GEN_INT (align), NULL_RTX, 1);\n     }\n@@ -1053,10 +1057,14 @@ allocate_dynamic_stack_space (size, target, known_align)\n   if (known_align % BIGGEST_ALIGNMENT != 0)\n #endif\n     {\n-      target = expand_divmod (0, CEIL_DIV_EXPR, Pmode, target,\n+      /* CEIL_DIV_EXPR needs to worry about the addition overflowing,\n+\t but we know it can't.  So add ourselves and then do TRUNC_DIV_EXPR. */\n+      target = expand_binop (Pmode, add_opatab, target,\n+\t\t\t     GEN_INT (BIGGEST_ALIGNMENT / BITS_PER_UNIT - 1),\n+\t\t\t     NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+      target = expand_divmod (0, TRUNC_DIV_EXPR, Pmode, target,\n \t\t\t      GEN_INT (BIGGEST_ALIGNMENT / BITS_PER_UNIT),\n \t\t\t      NULL_RTX, 1);\n-\n       target = expand_mult (Pmode, target,\n \t\t\t    GEN_INT (BIGGEST_ALIGNMENT / BITS_PER_UNIT),\n \t\t\t    NULL_RTX, 1);"}]}