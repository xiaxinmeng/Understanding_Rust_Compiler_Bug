{"sha": "1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5OTJkMWU2YmVjNDEwMjMwYzMzMmJhOGI3ZTJhOWY5M2RlZDBiOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2014-01-10T15:12:03Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2014-01-10T15:12:03Z"}, "message": "re PR c++/9744 (Explicit parameterization of templated return value fails within templated function)\n\n\tPR target/9744\n\ngcc:\n\t* aarch64-modes.def (CC_Zmode): New flags mode.\n\t* aarch64.c (aarch64_select_cc_mode): Only allow NEG when the condition\n\trepresents an equality.\n\t(aarch64_get_condition_code0): Handle CC_Zmode.\n\t* aarch64.md (compare_neg<mode>): Restrict to equality operations.\n\ngcc/testsuite:\n\t* gcc.target/aarch64/cmn-neg.c: Use equality comparisons.\n\t* gcc.target/aarch64/cmn-neg2.c: New test.\n\nFrom-SVN: r206529", "tree": {"sha": "2c939e057b708acff0ccd49411ec2c820ae42945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c939e057b708acff0ccd49411ec2c820ae42945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/comments", "author": null, "committer": null, "parents": [{"sha": "86464cbd91790f0bb04cb382f20a60f6afbc323a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86464cbd91790f0bb04cb382f20a60f6afbc323a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86464cbd91790f0bb04cb382f20a60f6afbc323a"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "4811aa3a4b49691a7b2253dc58ef9ded83e8412e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "patch": "@@ -1,3 +1,12 @@\n+2014-01-10  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/9744\n+\t* aarch64-modes.def (CC_Zmode): New flags mode.\n+\t* aarch64.c (aarch64_select_cc_mode): Only allow NEG when the condition\n+\trepresents an equality.\n+\t(aarch64_get_condition_code0): Handle CC_Zmode.\n+\t* aarch64.md (compare_neg<mode>): Restrict to equality operations.\n+\n 2014-01-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_tbegin): Remove jump over CC"}, {"sha": "1d2cc767946623fc557e2f6518827e40c4df9b73", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "patch": "@@ -24,6 +24,7 @@ CC_MODE (CC_SWP);\n CC_MODE (CC_ZESWP); /* zero-extend LHS (but swap to make it RHS).  */\n CC_MODE (CC_SESWP); /* sign-extend LHS (but swap to make it RHS).  */\n CC_MODE (CC_NZ);    /* Only N and Z bits of condition flags are valid.  */\n+CC_MODE (CC_Z);     /* Only Z bit of condition flags is valid.  */\n \n /* Vector modes.  */\n VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI.  */"}, {"sha": "3b1f6b510491e0eba79f0b87fc62f2105da6c355", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "patch": "@@ -3326,17 +3326,24 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n \t  || GET_CODE (x) == NEG))\n     return CC_NZmode;\n \n-  /* A compare with a shifted or negated operand.  Because of canonicalization,\n+  /* A compare with a shifted operand.  Because of canonicalization,\n      the comparison will have to be swapped when we emit the assembly\n      code.  */\n   if ((GET_MODE (x) == SImode || GET_MODE (x) == DImode)\n       && (GET_CODE (y) == REG || GET_CODE (y) == SUBREG)\n       && (GET_CODE (x) == ASHIFT || GET_CODE (x) == ASHIFTRT\n \t  || GET_CODE (x) == LSHIFTRT\n-\t  || GET_CODE (x) == ZERO_EXTEND || GET_CODE (x) == SIGN_EXTEND\n-\t  || GET_CODE (x) == NEG))\n+\t  || GET_CODE (x) == ZERO_EXTEND || GET_CODE (x) == SIGN_EXTEND))\n     return CC_SWPmode;\n \n+  /* Similarly for a negated operand, but we can only do this for\n+     equalities.  */\n+  if ((GET_MODE (x) == SImode || GET_MODE (x) == DImode)\n+      && (GET_CODE (y) == REG || GET_CODE (y) == SUBREG)\n+      && (code == EQ || code == NE)\n+      && GET_CODE (x) == NEG)\n+    return CC_Zmode;\n+\n   /* A compare of a mode narrower than SI mode against zero can be done\n      by extending the value in the comparison.  */\n   if ((GET_MODE (x) == QImode || GET_MODE (x) == HImode)\n@@ -3427,6 +3434,15 @@ aarch64_get_condition_code (rtx x)\n \t}\n       break;\n \n+    case CC_Zmode:\n+      switch (comp_code)\n+\t{\n+\tcase NE: return AARCH64_NE;\n+\tcase EQ: return AARCH64_EQ;\n+\tdefault: gcc_unreachable ();\n+\t}\n+      break;\n+\n     default:\n       gcc_unreachable ();\n       break;"}, {"sha": "3b5e92e4162916fcbc161b4999963f44b64107d2", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "patch": "@@ -1250,8 +1250,8 @@\n )\n \n (define_insn \"*compare_neg<mode>\"\n-  [(set (reg:CC_SWP CC_REGNUM)\n-\t(compare:CC_SWP\n+  [(set (reg:CC_Z CC_REGNUM)\n+\t(compare:CC_Z\n \t (neg:GPI (match_operand:GPI 0 \"register_operand\" \"r\"))\n \t (match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\""}, {"sha": "387236928235e78cb32272ff584e31c6b2df6fb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "patch": "@@ -1,3 +1,9 @@\n+2014-01-10  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/59744\n+\t* gcc.target/aarch64/cmn-neg.c: Use equality comparisons.\n+\t* gcc.target/aarch64/cmn-neg2.c: New test.\n+\n 2014-01-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59374"}, {"sha": "ab264e798efae9afce44c1bdb3f21ecc7c632c68", "filename": "gcc/testsuite/gcc.target/aarch64/cmn-neg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg.c?ref=1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "patch": "@@ -6,15 +6,15 @@ extern void abort (void);\n void __attribute__ ((noinline))\n foo_s32 (int a, int b)\n {\n-  if (a < -b)\n+  if (a == -b)\n     abort ();\n }\n /* { dg-final { scan-assembler \"cmn\\tw\\[0-9\\]\" } } */\n \n void __attribute__ ((noinline))\n foo_s64 (long long a, long long b)\n {\n-  if (a < -b)\n+  if (a == -b)\n     abort ();\n }\n /* { dg-final { scan-assembler \"cmn\\tx\\[0-9\\]\" } } */"}, {"sha": "ca45a53435f9cbdbd160f3133af1bcc73329f952", "filename": "gcc/testsuite/gcc.target/aarch64/cmn-neg2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c992d1e6bec410230c332ba8b7e2a9f93ded0b9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmn-neg2.c?ref=1c992d1e6bec410230c332ba8b7e2a9f93ded0b9", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+extern void abort (void);\n+\n+/* It's unsafe to use CMN in these comparisons.  */\n+\n+void __attribute__ ((noinline))\n+foo_s32 (int a, int b)\n+{\n+  if (a < -b)\n+    abort ();\n+}\n+\n+void __attribute__ ((noinline))\n+foo_s64 (unsigned long long a, unsigned long long b)\n+{\n+  if (a > -b)\n+    abort ();\n+}\n+\n+\n+int\n+main (void)\n+{\n+  int a = 30;\n+  int b = 42;\n+  foo_s32 (a, b);\n+  foo_s64 (a, b);\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-not \"cmn\\t\" } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}