{"sha": "e196b22163a6c1a723648b3f09501ebd586fa1c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5NmIyMjE2M2E2YzFhNzIzNjQ4YjNmMDk1MDFlYmQ1ODZmYTFjMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-13T16:37:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-13T16:37:06Z"}, "message": "tree.c (build_zero_cst): New.\n\n\n\t* tree.c (build_zero_cst): New.\n\t* tree.h (build_zero_cst): Declare.\n\t* tree-ssa-ccp.c (get_constant_value): Accept general operands.\n\t(get_base_constructor): Break out from ...\n\t(fold_const_aggregate_ref): Here; handle empty constructors.\n\n\t* gcc.dg/torture/pr23821.c: Drop static keyword.\n\t* gcc.dg/tree-ssa/loop-19.c: Likewise.\n\t* gcc.dg/tree-ssa/foldconst-4.c: New.\n\nFrom-SVN: r164250", "tree": {"sha": "be54f7c64c42685735916f091dcaff628b5c5255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be54f7c64c42685735916f091dcaff628b5c5255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e196b22163a6c1a723648b3f09501ebd586fa1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e196b22163a6c1a723648b3f09501ebd586fa1c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e196b22163a6c1a723648b3f09501ebd586fa1c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e196b22163a6c1a723648b3f09501ebd586fa1c0/comments", "author": null, "committer": null, "parents": [{"sha": "ac42c96090394e592af5e835412b73db6e424594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac42c96090394e592af5e835412b73db6e424594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac42c96090394e592af5e835412b73db6e424594"}], "stats": {"total": 232, "additions": 131, "deletions": 101}, "files": [{"sha": "9341f89ec4a07a1ec27c36a52d205169ddbaae0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -1,3 +1,11 @@\n+2010-09-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (build_zero_cst): New.\n+\t* tree.h (build_zero_cst): Declare.\n+\t* tree-ssa-ccp.c (get_constant_value): Accept general operands.\n+\t(get_base_constructor): Break out from ...\n+\t(fold_const_aggregate_ref): Here; handle empty constructors.\n+\n 2010-09-13  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/arm/arm.md: (define_attr \"conds\"): Update comment."}, {"sha": "59118c228b7496c833a1cb229248ccd91a9674e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -1,3 +1,9 @@\n+2010-09-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/torture/pr23821.c: Drop static keyword.\n+\t* gcc.dg/tree-ssa/loop-19.c: Likewise.\n+\t* gcc.dg/tree-ssa/foldconst-4.c: New testcase.\n+\n 2010-09-13  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* gcc.target/arm/sync-1.c: New."}, {"sha": "7632d8425ca8b744ac1a42cf1b8dca202f1aac65", "filename": "gcc/testsuite/gcc.dg/torture/pr23821.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr23821.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr23821.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr23821.c?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -5,7 +5,7 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-O1\" } { \"\" } } */\n /* { dg-options \"-fdump-tree-ivcanon-details\" } */\n \n-static int a[199];\n+int a[199];\n \n extern void abort (void);\n "}, {"sha": "b416d371e98e44ad0608439fdb28c73b95e974e2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldconst-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-4.c?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp2\" } */\n+\n+struct a {int a,b;};\n+const static struct a a;\n+static int b[10];\n+int c;\n+test()\n+{\n+  return a.a+b[c];\n+}\n+/* { dg-final { scan-tree-dump \"return 0;\" \"ccp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp2\" } } */"}, {"sha": "80f2e601e31ce068a3ae8639b46fb347a5850217", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -9,7 +9,7 @@\n /* { dg-options \"-O3 -fno-prefetch-loop-arrays -fdump-tree-optimized\" } */\n \n # define N      2000000\n-static double   a[N],c[N];\n+double   a[N],c[N];\n void tuned_STREAM_Copy()\n {\n   int j;"}, {"sha": "42b8a58b9d32311551a38cdbcde6186f9df17de9", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 89, "deletions": 99, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -315,7 +315,14 @@ get_value (tree var)\n static inline tree\n get_constant_value (tree var)\n {\n-  prop_value_t *val = get_value (var);\n+  prop_value_t *val;\n+  if (TREE_CODE (var) != SSA_NAME)\n+    {\n+      if (is_gimple_min_invariant (var))\n+        return var;\n+      return NULL_TREE;\n+    }\n+  val = get_value (var);\n   if (val\n       && val->lattice_val == CONSTANT\n       && (TREE_CODE (val->value) != INTEGER_CST\n@@ -1308,14 +1315,70 @@ ccp_fold (gimple stmt)\n     }\n }\n \n+/* See if we can find constructor defining value of BASE.\n+\n+   As a special case, return error_mark_node when constructor\n+   is not explicitly available, but it is known to be zero\n+   such as 'static const int a;'.  */\n+static tree\n+get_base_constructor (tree base, tree *offset)\n+{\n+  *offset = NULL;\n+  if (TREE_CODE (base) == MEM_REF)\n+    {\n+      if (!integer_zerop (TREE_OPERAND (base, 1)))\n+        *offset = TREE_OPERAND (base, 1);\n+\n+      base = get_constant_value (TREE_OPERAND (base, 0));\n+      if (!base || TREE_CODE (base) != ADDR_EXPR)\n+        return NULL_TREE;\n+      base = TREE_OPERAND (base, 0);\n+    }\n+\n+  /* Get a CONSTRUCTOR.  If BASE is a VAR_DECL, get its\n+     DECL_INITIAL.  If BASE is a nested reference into another\n+     ARRAY_REF or COMPONENT_REF, make a recursive call to resolve\n+     the inner reference.  */\n+  switch (TREE_CODE (base))\n+    {\n+    case VAR_DECL:\n+      if (!TREE_READONLY (base)\n+\t  || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n+\t      && !varpool_get_node (base)->const_value_known))\n+\treturn NULL_TREE;\n+\n+      /* Fallthru.  */\n+    case CONST_DECL:\n+      if (!DECL_INITIAL (base)\n+\t  && (TREE_STATIC (base) || DECL_EXTERNAL (base)))\n+        return error_mark_node;\n+      return DECL_INITIAL (base);\n+      \n+      break;\n+\n+    case ARRAY_REF:\n+    case COMPONENT_REF:\n+      return fold_const_aggregate_ref (base);\n+      break;\n+\n+    case STRING_CST:\n+    case CONSTRUCTOR:\n+      return base;\n+      break;\n+\n+    default:\n+      return NULL_TREE;\n+    }\n+}\n+\n /* Return the tree representing the element referenced by T if T is an\n    ARRAY_REF or COMPONENT_REF into constant aggregates.  Return\n    NULL_TREE otherwise.  */\n \n tree\n fold_const_aggregate_ref (tree t)\n {\n-  tree base, ctor, idx, field;\n+  tree ctor, idx, field;\n   unsigned HOST_WIDE_INT cnt;\n   tree cfield, cval;\n   tree tem;\n@@ -1330,46 +1393,13 @@ fold_const_aggregate_ref (tree t)\n   switch (TREE_CODE (t))\n     {\n     case ARRAY_REF:\n-      /* Get a CONSTRUCTOR.  If BASE is a VAR_DECL, get its\n-\t DECL_INITIAL.  If BASE is a nested reference into another\n-\t ARRAY_REF or COMPONENT_REF, make a recursive call to resolve\n-\t the inner reference.  */\n-      base = TREE_OPERAND (t, 0);\n-      switch (TREE_CODE (base))\n-\t{\n-\tcase MEM_REF:\n-\t  /* ???  We could handle this case.  */\n-\t  if (!integer_zerop (TREE_OPERAND (base, 1)))\n-\t    return NULL_TREE;\n-\t  base = get_base_address (base);\n-\t  if (!base\n-\t      || TREE_CODE (base) != VAR_DECL)\n-\t    return NULL_TREE;\n+      ctor = get_base_constructor (TREE_OPERAND (t, 0), &idx);\n \n-\t  /* Fallthru.  */\n-\tcase VAR_DECL:\n-\t  if (!TREE_READONLY (base)\n-\t      || TREE_CODE (TREE_TYPE (base)) != ARRAY_TYPE\n-\t      || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n-\t\t  && !varpool_get_node (base)->const_value_known))\n-\t    return NULL_TREE;\n-\n-\t  ctor = DECL_INITIAL (base);\n-\t  break;\n-\n-\tcase ARRAY_REF:\n-\tcase COMPONENT_REF:\n-\t  ctor = fold_const_aggregate_ref (base);\n-\t  break;\n-\n-\tcase STRING_CST:\n-\tcase CONSTRUCTOR:\n-\t  ctor = base;\n-\t  break;\n+      if (idx)\n+\treturn NULL_TREE;\n \n-\tdefault:\n-\t  return NULL_TREE;\n-\t}\n+      if (ctor == error_mark_node)\n+\treturn build_zero_cst (TREE_TYPE (t));\n \n       if (ctor == NULL_TREE\n \t  || (TREE_CODE (ctor) != CONSTRUCTOR\n@@ -1436,27 +1466,13 @@ fold_const_aggregate_ref (tree t)\n \t DECL_INITIAL.  If BASE is a nested reference into another\n \t ARRAY_REF or COMPONENT_REF, make a recursive call to resolve\n \t the inner reference.  */\n-      base = TREE_OPERAND (t, 0);\n-      switch (TREE_CODE (base))\n-\t{\n-\tcase VAR_DECL:\n-\t  if (!TREE_READONLY (base)\n-\t      || TREE_CODE (TREE_TYPE (base)) != RECORD_TYPE\n-\t      || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n-\t\t  && !varpool_get_node (base)->const_value_known))\n-\t    return NULL_TREE;\n+      ctor = get_base_constructor (TREE_OPERAND (t, 0), &idx);\n \n-\t  ctor = DECL_INITIAL (base);\n-\t  break;\n-\n-\tcase ARRAY_REF:\n-\tcase COMPONENT_REF:\n-\t  ctor = fold_const_aggregate_ref (base);\n-\t  break;\n+      if (idx)\n+\treturn NULL_TREE;\n \n-\tdefault:\n-\t  return NULL_TREE;\n-\t}\n+      if (ctor == error_mark_node)\n+\treturn build_zero_cst (TREE_TYPE (t));\n \n       if (ctor == NULL_TREE\n \t  || TREE_CODE (ctor) != CONSTRUCTOR)\n@@ -1482,55 +1498,29 @@ fold_const_aggregate_ref (tree t)\n       }\n \n     case MEM_REF:\n-      /* Get the base object we are accessing.  */\n-      base = TREE_OPERAND (t, 0);\n-      if (TREE_CODE (base) == SSA_NAME\n-\t  && (tem = get_constant_value (base)))\n-\tbase = tem;\n-      if (TREE_CODE (base) != ADDR_EXPR)\n-\treturn NULL_TREE;\n-      base = TREE_OPERAND (base, 0);\n-      switch (TREE_CODE (base))\n-\t{\n-\tcase VAR_DECL:\n-\t  if (DECL_P (base)\n-\t      && !AGGREGATE_TYPE_P (TREE_TYPE (base))\n-\t      && integer_zerop (TREE_OPERAND (t, 1)))\n-\t    {\n-\t      tree res = get_symbol_constant_value (base);\n-\t      if (res\n-\t\t  && !useless_type_conversion_p\n-\t\t        (TREE_TYPE (t), TREE_TYPE (res)))\n-\t\tres = fold_unary (VIEW_CONVERT_EXPR, TREE_TYPE (t), res);\n-\t      return res;\n-\t    }\n-\n-\t  if (!TREE_READONLY (base)\n-\t      || TREE_CODE (TREE_TYPE (base)) != ARRAY_TYPE\n-\t      || ((TREE_STATIC (base) || DECL_EXTERNAL (base))\n-\t\t  && !varpool_get_node (base)->const_value_known))\n-\t    return NULL_TREE;\n+      ctor = get_base_constructor (t, &idx);\n \n-\t  ctor = DECL_INITIAL (base);\n-\t  break;\n-\n-\tcase STRING_CST:\n-\tcase CONSTRUCTOR:\n-\t  ctor = base;\n-\t  break;\n+      if (ctor == error_mark_node)\n+\treturn build_zero_cst (TREE_TYPE (t));\n \n-\tdefault:\n-\t  return NULL_TREE;\n+      if (ctor && !AGGREGATE_TYPE_P (TREE_TYPE (ctor))\n+\t  && !idx)\n+\t{\n+\t  if (ctor\n+\t      && !useless_type_conversion_p\n+\t\t    (TREE_TYPE (t), TREE_TYPE (ctor)))\n+\t    ctor = fold_unary (VIEW_CONVERT_EXPR, TREE_TYPE (t), ctor);\n+\t  return ctor;\n \t}\n \n+      if (!idx)\n+\tidx = integer_zero_node;\n+\n       if (ctor == NULL_TREE\n \t  || (TREE_CODE (ctor) != CONSTRUCTOR\n \t      && TREE_CODE (ctor) != STRING_CST))\n \treturn NULL_TREE;\n \n-      /* Get the byte offset.  */\n-      idx = TREE_OPERAND (t, 1);\n-\n       /* Fold read from constant string.  */\n       if (TREE_CODE (ctor) == STRING_CST)\n \t{"}, {"sha": "fd593e39ebd05cbac11fef6e4b063658c179a4e5", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -1583,6 +1583,18 @@ build_one_cst (tree type)\n     }\n }\n \n+/* Build 0 constant of type TYPE.  This is used by constructor folding and thus\n+   the constant should correspond zero in memory representation.  */\n+\n+tree\n+build_zero_cst (tree type)\n+{\n+  if (!AGGREGATE_TYPE_P (type))\n+    return fold_convert (type, integer_zero_node);\n+  return build_constructor (type, NULL);\n+}\n+\n+\n /* Build a BINFO with LEN language slots.  */\n \n tree"}, {"sha": "d261c3fffefbfd03a70c24492ddc8a37038ac33e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e196b22163a6c1a723648b3f09501ebd586fa1c0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e196b22163a6c1a723648b3f09501ebd586fa1c0", "patch": "@@ -4038,6 +4038,7 @@ extern tree build_constructor_from_list (tree, tree);\n extern tree build_real_from_int_cst (tree, const_tree);\n extern tree build_complex (tree, tree, tree);\n extern tree build_one_cst (tree);\n+extern tree build_zero_cst (tree);\n extern tree build_string (int, const char *);\n extern tree build_tree_list_stat (tree, tree MEM_STAT_DECL);\n #define build_tree_list(t,q) build_tree_list_stat(t,q MEM_STAT_INFO)"}]}