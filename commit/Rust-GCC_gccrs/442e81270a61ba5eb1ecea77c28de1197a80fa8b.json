{"sha": "442e81270a61ba5eb1ecea77c28de1197a80fa8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQyZTgxMjcwYTYxYmE1ZWIxZWNlYTc3YzI4ZGUxMTk3YTgwZmE4Yg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:48:23Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:48:23Z"}, "message": "vshr_n.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vshr_n.c: New file.\n\nFrom-SVN: r224655", "tree": {"sha": "e7f8c3d54d5447bef53b4b67009d5f6edd03e765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f8c3d54d5447bef53b4b67009d5f6edd03e765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/442e81270a61ba5eb1ecea77c28de1197a80fa8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442e81270a61ba5eb1ecea77c28de1197a80fa8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442e81270a61ba5eb1ecea77c28de1197a80fa8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442e81270a61ba5eb1ecea77c28de1197a80fa8b/comments", "author": null, "committer": null, "parents": [{"sha": "061df55eca44a7d64f003ebed9c8627b0ecc232e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061df55eca44a7d64f003ebed9c8627b0ecc232e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061df55eca44a7d64f003ebed9c8627b0ecc232e"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "18c7f1c5f3de2ad2fcb87e62a2d0ecdab90c475b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442e81270a61ba5eb1ecea77c28de1197a80fa8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442e81270a61ba5eb1ecea77c28de1197a80fa8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=442e81270a61ba5eb1ecea77c28de1197a80fa8b", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vshr_n.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vrshl.c: New file."}, {"sha": "122ce41fb5c2de40a60da98dac02509c49013f70", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshr_n.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442e81270a61ba5eb1ecea77c28de1197a80fa8b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshr_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442e81270a61ba5eb1ecea77c28de1197a80fa8b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshr_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshr_n.c?ref=442e81270a61ba5eb1ecea77c28de1197a80fa8b", "patch": "@@ -0,0 +1,95 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf8, 0xf9, 0xf9,\n+\t\t\t\t       0xfa, 0xfa, 0xfb, 0xfb };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x3c, 0x3c, 0x3c, 0x3c,\n+\t\t\t\t\t0x3d, 0x3d, 0x3d, 0x3d };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x1ffe, 0x1ffe, 0x1ffe, 0x1ffe };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x7ffffff, 0x7ffffff };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x7fffffff };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf8, 0xf8, 0xf9, 0xf9,\n+\t\t\t\t\t0xfa, 0xfa, 0xfb, 0xfb,\n+\t\t\t\t\t0xfc, 0xfc, 0xfd, 0xfd,\n+\t\t\t\t\t0xfe, 0xfe, 0xff, 0xff };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffffc, 0xfffffffc,\n+\t\t\t\t\t0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xffffffffffffffff, 0xffffffffffffffff };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x3c, 0x3c, 0x3c, 0x3c,\n+\t\t\t\t\t 0x3d, 0x3d, 0x3d, 0x3d,\n+\t\t\t\t\t 0x3e, 0x3e, 0x3e, 0x3e,\n+\t\t\t\t\t 0x3f, 0x3f, 0x3f, 0x3f };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x1ffe, 0x1ffe, 0x1ffe, 0x1ffe,\n+\t\t\t\t\t 0x1ffe, 0x1ffe, 0x1ffe, 0x1ffe };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x7ffffff, 0x7ffffff,\n+\t\t\t\t\t 0x7ffffff, 0x7ffffff };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x7fffffff, 0x7fffffff };\n+\n+#define TEST_MSG \"VSHR_N\"\n+void exec_vshr_n (void)\n+{\n+  /* Basic test: y=vshr_n(x,v), then store the result.  */\n+#define TEST_VSHR_N(Q, T1, T2, W, N, V)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vshr##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\tV);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VSHR_N(, int, s, 8, 8, 1);\n+  TEST_VSHR_N(, int, s, 16, 4, 12);\n+  TEST_VSHR_N(, int, s, 32, 2, 2);\n+  TEST_VSHR_N(, int, s, 64, 1, 32);\n+  TEST_VSHR_N(, uint, u, 8, 8, 2);\n+  TEST_VSHR_N(, uint, u, 16, 4, 3);\n+  TEST_VSHR_N(, uint, u, 32, 2, 5);\n+  TEST_VSHR_N(, uint, u, 64, 1, 33);\n+\n+  TEST_VSHR_N(q, int, s, 8, 16, 1);\n+  TEST_VSHR_N(q, int, s, 16, 8, 12);\n+  TEST_VSHR_N(q, int, s, 32, 4, 2);\n+  TEST_VSHR_N(q, int, s, 64, 2, 32);\n+  TEST_VSHR_N(q, uint, u, 8, 16, 2);\n+  TEST_VSHR_N(q, uint, u, 16, 8, 3);\n+  TEST_VSHR_N(q, uint, u, 32, 4, 5);\n+  TEST_VSHR_N(q, uint, u, 64, 2, 33);\n+\n+#define CMT \"\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vshr_n ();\n+  return 0;\n+}"}]}