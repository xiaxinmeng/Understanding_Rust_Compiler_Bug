{"sha": "36a072b429a9501946cb1fafdc9b1af7c574594d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZhMDcyYjQyOWE5NTAxOTQ2Y2IxZmFmZGM5YjFhZjdjNTc0NTk0ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-17T08:48:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-17T08:48:58Z"}, "message": "re PR middle-end/86505 (__builtin_va_arg_pack_len() computes the number of arguments wrongly)\n\n2018-08-17  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/86505\n\t* tree-inline.c (copy_bb): When inlining __builtin_va_arg_pack_len ()\n\tacross a va-arg-pack using call adjust its return value accordingly.\n\n\t* gcc.dg/torture/pr86505.c: New testcase.\n\nFrom-SVN: r263613", "tree": {"sha": "40d0364573f5c9199c9b1b3c41447cf007c38188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d0364573f5c9199c9b1b3c41447cf007c38188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36a072b429a9501946cb1fafdc9b1af7c574594d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a072b429a9501946cb1fafdc9b1af7c574594d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36a072b429a9501946cb1fafdc9b1af7c574594d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36a072b429a9501946cb1fafdc9b1af7c574594d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbcbd744b80c2cd40d7ef41d32dbd6ee7400701f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcbd744b80c2cd40d7ef41d32dbd6ee7400701f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbcbd744b80c2cd40d7ef41d32dbd6ee7400701f"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "a6a8fffc42273f7d6451788c750e332bedd47420", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,3 +1,9 @@\n+2018-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/86505\n+\t* tree-inline.c (copy_bb): When inlining __builtin_va_arg_pack_len ()\n+\tacross a va-arg-pack using call adjust its return value accordingly.\n+\n 2018-08-16  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86853"}, {"sha": "99e44a63a377b749f4c0d2090955e8af5c1ffbdf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1,3 +1,8 @@\n+2018-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/86505\n+\t* gcc.dg/torture/pr86505.c: New testcase.\n+\n 2018-08-16  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86853"}, {"sha": "db102d308e6835a885600c7efbb39707e0609070", "filename": "gcc/testsuite/gcc.dg/torture/pr86505.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86505.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86505.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr86505.c?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+\n+static inline __attribute__(( __always_inline__)) int \n+funA(unsigned int param, ...) \n+{ \n+  return __builtin_va_arg_pack_len(); \n+}\n+\n+static inline __attribute__(( __always_inline__)) int\n+funB(unsigned int param, ...)\n+{ \n+  return funA(param,  2, 4, __builtin_va_arg_pack()); \n+}\n+\n+int \n+testBuiltin(void) \n+{ \n+  int rc = funB(0,1,2); \n+  if (rc != 4)\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+main()\n+{\n+  int rc = testBuiltin();\n+  if (rc == 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "21464d6e28fbe010bb020f28819bcc2a961a1fa0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36a072b429a9501946cb1fafdc9b1af7c574594d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=36a072b429a9501946cb1fafdc9b1af7c574594d", "patch": "@@ -1940,8 +1940,7 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t\t   && id->call_stmt\n \t\t   && (decl = gimple_call_fndecl (stmt))\n \t\t   && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n-\t\t   && DECL_FUNCTION_CODE (decl) == BUILT_IN_VA_ARG_PACK_LEN\n-\t\t   && ! gimple_call_va_arg_pack_p (id->call_stmt))\n+\t\t   && DECL_FUNCTION_CODE (decl) == BUILT_IN_VA_ARG_PACK_LEN)\n \t    {\n \t      /* __builtin_va_arg_pack_len () should be replaced by\n \t\t the number of anonymous arguments.  */\n@@ -1952,10 +1951,22 @@ copy_bb (copy_body_data *id, basic_block bb,\n \t      for (p = DECL_ARGUMENTS (id->src_fn); p; p = DECL_CHAIN (p))\n \t\tnargs--;\n \n-\t      count = build_int_cst (integer_type_node, nargs);\n-\t      new_stmt = gimple_build_assign (gimple_call_lhs (stmt), count);\n-\t      gsi_replace (&copy_gsi, new_stmt, false);\n-\t      stmt = new_stmt;\n+\t      if (!gimple_call_va_arg_pack_p (id->call_stmt))\n+\t\t{\n+\t\t  count = build_int_cst (integer_type_node, nargs);\n+\t\t  new_stmt = gimple_build_assign (gimple_call_lhs (stmt), count);\n+\t\t  gsi_replace (&copy_gsi, new_stmt, false);\n+\t\t  stmt = new_stmt;\n+\t\t}\n+\t      else if (nargs != 0)\n+\t\t{\n+\t\t  tree newlhs = create_tmp_reg_or_ssa_name (integer_type_node);\n+\t\t  count = build_int_cst (integer_type_node, nargs);\n+\t\t  new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t\t  PLUS_EXPR, newlhs, count);\n+\t\t  gimple_call_set_lhs (stmt, newlhs);\n+\t\t  gsi_insert_after (&copy_gsi, new_stmt, GSI_NEW_STMT);\n+\t\t}\n \t    }\n \t  else if (call_stmt\n \t\t   && id->call_stmt"}]}