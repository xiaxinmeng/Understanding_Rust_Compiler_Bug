{"sha": "e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwZGFiN2Y4ZGMyNTJlOGZhN2NiNDJhNGY0NDUyYjBmNDkzYmRjYw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2008-03-26T07:38:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:38:16Z"}, "message": "exp_attr.adb (N_Pragma): Chars field removed.\n\n2008-03-26  Javier Miranda  <miranda@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb (N_Pragma): Chars field removed.\n\t(Expand_N_Attribute_Reference): If the designated type associated with\n\tattribute 'Unrestricted_Access is a subprogram entity then replace it\n\tby an E_Subprogram_Type itype.\n\tImplement attribute Old\n\n\t* sem_attr.ads (Attribute_Class_Array): Move to snames.ads\n\n\t* sem_attr.adb (Build_Access_Subprogram_Itype): Add documentation.\n\tReplace call to\n\tNew_Internal_Entity by call to Create_Itype to centralize calls\n\tbuilding itypes, ad propagate the convention of the designated\n\tsubprogram. In addition, disable the machinery cleaning constant\n\tindications from all entities in current scope when 'Unrestricted_Access\n\tcorresponds with a node initializing a dispatch table slot.\n\t(Analyze_Attribute): Parameterless attributes returning a string or a\n\ttype will not be called with improper arguments, so we can remove junk\n\tcode that was dealing with this case.\n\tImplement attribute Old\n\n\t* snames.ads, snames.h, snames.adb: Add entries for attribute Old\n\tAdd entry for pragma Optimize_Alignment\n\tNew standard names Sync and Synchronize\n\nFrom-SVN: r133559", "tree": {"sha": "d372641a25b1510d1a128e297a1fefd0e4146ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d372641a25b1510d1a128e297a1fefd0e4146ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acf63f8c062cc57d127c9bc65af2b60c3548bcab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf63f8c062cc57d127c9bc65af2b60c3548bcab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf63f8c062cc57d127c9bc65af2b60c3548bcab"}], "stats": {"total": 2072, "additions": 1143, "deletions": 929}, "files": [{"sha": "a5ff0011a6ffb1b5d6cb3f9f2ebae579ee70c3c5", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 198, "deletions": 40, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,6 +49,7 @@ with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Eval; use Sem_Eval;\n@@ -611,6 +612,121 @@ package body Exp_Attr is\n             Ref_Object : constant Node_Id := Get_Referenced_Object (Pref);\n \n          begin\n+            --  In order to improve the text of error messages, the designated\n+            --  type of access-to-subprogram itypes is set by the semantics as\n+            --  the associated subprogram entity (see sem_attr). Now we replace\n+            --  such node with the proper E_Subprogram_Type itype.\n+\n+            if Id = Attribute_Unrestricted_Access\n+              and then Is_Subprogram (Directly_Designated_Type (Typ))\n+            then\n+               --  The following assertion ensures that this special management\n+               --  is done only for \"Address!(Prim'Unrestricted_Access)\" nodes.\n+               --  At this stage other cases in which the designated type is\n+               --  still a subprogram (instead of an E_Subprogram_Type) are\n+               --  wrong because the semantics must have overriden the type of\n+               --  the node with the type imposed by the context.\n+\n+               pragma Assert (Nkind (Parent (N)) = N_Unchecked_Type_Conversion\n+                 and then Etype (Parent (N)) = RTE (RE_Address));\n+\n+               declare\n+                  Subp : constant Entity_Id := Directly_Designated_Type (Typ);\n+\n+                  Extra      : Entity_Id := Empty;\n+                  New_Formal : Entity_Id;\n+                  Old_Formal : Entity_Id := First_Formal (Subp);\n+                  Subp_Typ   : Entity_Id;\n+\n+               begin\n+                  Subp_Typ := Create_Itype (E_Subprogram_Type, N);\n+                  Set_Etype (Subp_Typ, Etype (Subp));\n+                  Set_Returns_By_Ref (Subp_Typ, Returns_By_Ref (Subp));\n+\n+                  if Present (Old_Formal) then\n+                     New_Formal := New_Copy (Old_Formal);\n+                     Set_First_Entity (Subp_Typ, New_Formal);\n+\n+                     loop\n+                        Set_Scope (New_Formal, Subp_Typ);\n+\n+                        --  Handle itypes\n+\n+                        if Is_Itype (Etype (New_Formal)) then\n+                           Extra := New_Copy (Etype (New_Formal));\n+\n+                           if Ekind (Extra) = E_Record_Subtype\n+                             or else Ekind (Extra) = E_Class_Wide_Subtype\n+                           then\n+                              Set_Cloned_Subtype (Extra,\n+                                Etype (New_Formal));\n+                           end if;\n+\n+                           Set_Etype (New_Formal, Extra);\n+                           Set_Scope (Etype (New_Formal), Subp_Typ);\n+                        end if;\n+\n+                        Extra := New_Formal;\n+                        Next_Formal (Old_Formal);\n+                        exit when No (Old_Formal);\n+\n+                        Set_Next_Entity (New_Formal,\n+                          New_Copy (Old_Formal));\n+                        Next_Entity (New_Formal);\n+                     end loop;\n+\n+                     Set_Next_Entity (New_Formal, Empty);\n+                     Set_Last_Entity (Subp_Typ, Extra);\n+                  end if;\n+\n+                  --  Now that the explicit formals have been duplicated,\n+                  --  any extra formals needed by the subprogram must be\n+                  --  created.\n+\n+                  if Present (Extra) then\n+                     Set_Extra_Formal (Extra, Empty);\n+                  end if;\n+\n+                  Create_Extra_Formals (Subp_Typ);\n+                  Set_Directly_Designated_Type (Typ, Subp_Typ);\n+\n+                  --  Complete decoration of access-to-subprogram itype to\n+                  --  indicate to the backend that this itype corresponds to\n+                  --  a statically allocated dispatch table.\n+\n+                  --  ??? more comments on structure here, three level parent\n+                  --  references are worrisome!\n+\n+                  if Nkind (Ref_Object) in N_Has_Entity\n+                    and then Is_Dispatching_Operation (Entity (Ref_Object))\n+                    and then Present (Parent (Parent (N)))\n+                    and then Nkind (Parent (Parent (N))) = N_Aggregate\n+                    and then Present (Parent (Parent (Parent (N))))\n+                  then\n+                     declare\n+                        P    : constant Node_Id :=\n+                                 Parent (Parent (Parent (N)));\n+                        Prim : constant Entity_Id := Entity (Ref_Object);\n+\n+                     begin\n+                        Set_Is_Static_Dispatch_Table_Entity (Typ,\n+                           (Is_Predefined_Dispatching_Operation (Prim)\n+                              and then Nkind (P) = N_Object_Declaration\n+                              and then Is_Static_Dispatch_Table_Entity\n+                                         (Defining_Identifier (P)))\n+                          or else\n+                           (not Is_Predefined_Dispatching_Operation (Prim)\n+                              and then Nkind (P) = N_Aggregate\n+                              and then Present (Parent (P))\n+                              and then Nkind (Parent (P))\n+                                         = N_Object_Declaration\n+                              and then Is_Static_Dispatch_Table_Entity\n+                                         (Defining_Identifier (Parent (P)))));\n+                     end;\n+                  end if;\n+               end;\n+            end if;\n+\n             if Is_Access_Protected_Subprogram_Type (Btyp) then\n                Expand_Access_To_Protected_Op (N, Pref, Typ);\n \n@@ -1208,18 +1324,20 @@ package body Exp_Attr is\n          --  Protected case\n \n          if Is_Protected_Type (Conctype) then\n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Conctype) > 1\n-            then\n-               Name :=\n-                 New_Reference_To\n-                   (RTE (RE_Protected_Entry_Caller), Loc);\n-            else\n-               Name :=\n-                 New_Reference_To\n-                   (RTE (RE_Protected_Single_Entry_Caller), Loc);\n-            end if;\n+            case Corresponding_Runtime_Package (Conctype) is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Name :=\n+                    New_Reference_To\n+                      (RTE (RE_Protected_Entry_Caller), Loc);\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Name :=\n+                    New_Reference_To\n+                      (RTE (RE_Protected_Single_Entry_Caller), Loc);\n+\n+               when others =>\n+                  raise Program_Error;\n+            end case;\n \n             Rewrite (N,\n               Unchecked_Convert_To (Id_Kind,\n@@ -1488,31 +1606,35 @@ package body Exp_Attr is\n \n          if Is_Protected_Type (Conctyp) then\n \n-            if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n-              or else Number_Entries (Conctyp) > 1\n-            then\n-               Name := New_Reference_To (RTE (RE_Protected_Count), Loc);\n-\n-               Call :=\n-                 Make_Function_Call (Loc,\n-                   Name => Name,\n-                   Parameter_Associations => New_List (\n-                     New_Reference_To (\n-                       Object_Ref (\n-                         Corresponding_Body (Parent (Conctyp))), Loc),\n-                     Entry_Index_Expression (\n-                       Loc, Entity (Entnam), Index, Scope (Entity (Entnam)))));\n-            else\n-               Name := New_Reference_To (RTE (RE_Protected_Count_Entry), Loc);\n-\n-               Call := Make_Function_Call (Loc,\n-                   Name => Name,\n-                   Parameter_Associations => New_List (\n-                     New_Reference_To (\n-                       Object_Ref (\n-                         Corresponding_Body (Parent (Conctyp))), Loc)));\n-            end if;\n+            case Corresponding_Runtime_Package (Conctyp) is\n+               when System_Tasking_Protected_Objects_Entries =>\n+                  Name := New_Reference_To (RTE (RE_Protected_Count), Loc);\n+\n+                  Call :=\n+                    Make_Function_Call (Loc,\n+                      Name => Name,\n+                      Parameter_Associations => New_List (\n+                        New_Reference_To (\n+                          Object_Ref (\n+                            Corresponding_Body (Parent (Conctyp))), Loc),\n+                        Entry_Index_Expression (Loc,\n+                          Entity (Entnam), Index, Scope (Entity (Entnam)))));\n+\n+               when System_Tasking_Protected_Objects_Single_Entry =>\n+                  Name := New_Reference_To\n+                           (RTE (RE_Protected_Count_Entry), Loc);\n+\n+                  Call :=\n+                    Make_Function_Call (Loc,\n+                      Name => Name,\n+                      Parameter_Associations => New_List (\n+                        New_Reference_To (\n+                          Object_Ref (\n+                            Corresponding_Body (Parent (Conctyp))), Loc)));\n+               when others =>\n+                  raise Program_Error;\n+\n+            end case;\n \n          --  Task case\n \n@@ -2726,6 +2848,41 @@ package body Exp_Attr is\n \n       --  The processing for Object_Size shares the processing for Size\n \n+      ---------\n+      -- Old --\n+      ---------\n+\n+      when Attribute_Old => Old : declare\n+         Tnn     : constant Entity_Id :=\n+                     Make_Defining_Identifier (Loc,\n+                       Chars => New_Internal_Name ('T'));\n+         Subp    : Node_Id;\n+         Asn_Stm : Node_Id;\n+\n+      begin\n+         Subp := N;\n+         loop\n+            Subp := Parent (Subp);\n+            exit when Nkind (Subp) = N_Subprogram_Body;\n+         end loop;\n+\n+         Asn_Stm :=\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Tnn,\n+             Constant_Present    => True,\n+             Object_Definition   => New_Occurrence_Of (Etype (N), Loc),\n+             Expression          => Pref);\n+\n+         if Is_Empty_List (Declarations (Subp)) then\n+            Set_Declarations (Subp, New_List (Asn_Stm));\n+            Analyze (Asn_Stm);\n+         else\n+            Insert_Action (First (Declarations (Subp)), Asn_Stm);\n+         end if;\n+\n+         Rewrite (N, New_Occurrence_Of (Tnn, Loc));\n+      end Old;\n+\n       ------------\n       -- Output --\n       ------------\n@@ -5177,8 +5334,9 @@ package body Exp_Attr is\n \n       N := First_Rep_Item (Implementation_Base_Type (T));\n       while Present (N) loop\n-         if Nkind (N) = N_Pragma and then Chars (N) = Name_Stream_Convert then\n-\n+         if Nkind (N) = N_Pragma\n+           and then Pragma_Name (N) = Name_Stream_Convert\n+         then\n             --  For tagged types this pragma is not inherited, so we\n             --  must verify that it is defined for the given type and\n             --  not an ancestor."}, {"sha": "114df98d0739c06640b00077404b7958bfe02354", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 116, "deletions": 68, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "patch": "@@ -35,6 +35,7 @@ with Exp_Dist; use Exp_Dist;\n with Exp_Util; use Exp_Util;\n with Expander; use Expander;\n with Freeze;   use Freeze;\n+with Itypes;   use Itypes;\n with Lib;      use Lib;\n with Lib.Xref; use Lib.Xref;\n with Nlists;   use Nlists;\n@@ -447,18 +448,41 @@ package body Sem_Attr is\n             --  subprogram itself as the designated type. Type-checking in\n             --  this case compares the signatures of the designated types.\n \n+            --  Note: This fragment of the tree is temporarily malformed\n+            --  because the correct tree requires an E_Subprogram_Type entity\n+            --  as the designated type. In most cases this designated type is\n+            --  later overriden by the semantics with the type imposed by the\n+            --  context during the resolution phase. In the specific case of\n+            --  the expression Address!(Prim'Unrestricted_Access), used to\n+            --  initialize slots of dispatch tables, this work will be done by\n+            --  the expander (see Exp_Aggr).\n+\n+            --  The reason to temporarily add this kind of node to the tree\n+            --  instead of a proper E_Subprogram_Type itype, is the following:\n+            --  in case of errors found in the source file we report better\n+            --  error messages. For example, instead of generating the\n+            --  following error:\n+\n+            --      \"expected access to subprogram with profile\n+            --       defined at line X\"\n+\n+            --  we currently generate:\n+\n+            --      \"expected access to function Z defined at line X\"\n+\n             Set_Etype (N, Any_Type);\n \n             if not Is_Overloaded (P) then\n                Check_Local_Access (Entity (P));\n \n                if not Is_Intrinsic_Subprogram (Entity (P)) then\n-                  Acc_Type :=\n-                    New_Internal_Entity\n-                      (Get_Kind (Entity (P)), Current_Scope, Loc, 'A');\n+                  Acc_Type := Create_Itype (Get_Kind (Entity (P)), N);\n+                  Set_Is_Public (Acc_Type, False);\n                   Set_Etype (Acc_Type, Acc_Type);\n+                  Set_Convention (Acc_Type, Convention (Entity (P)));\n                   Set_Directly_Designated_Type (Acc_Type, Entity (P));\n                   Set_Etype (N, Acc_Type);\n+                  Freeze_Before (N, Acc_Type);\n                end if;\n \n             else\n@@ -467,12 +491,13 @@ package body Sem_Attr is\n                   Check_Local_Access (It.Nam);\n \n                   if not Is_Intrinsic_Subprogram (It.Nam) then\n-                     Acc_Type :=\n-                       New_Internal_Entity\n-                         (Get_Kind (It.Nam), Current_Scope, Loc, 'A');\n+                     Acc_Type := Create_Itype (Get_Kind (It.Nam), N);\n+                     Set_Is_Public (Acc_Type, False);\n                      Set_Etype (Acc_Type, Acc_Type);\n+                     Set_Convention (Acc_Type, Convention (It.Nam));\n                      Set_Directly_Designated_Type (Acc_Type, It.Nam);\n                      Add_One_Interp (N, Acc_Type, Acc_Type);\n+                     Freeze_Before (N, Acc_Type);\n                   end if;\n \n                   Get_Next_Interp (Index, It);\n@@ -502,9 +527,7 @@ package body Sem_Attr is\n                (Nkind (Par) = N_Component_Association\n                  or else Nkind (Par) in N_Subexpr)\n             loop\n-               if Nkind (Par) = N_Aggregate\n-                 or else Nkind (Par) = N_Extension_Aggregate\n-               then\n+               if Nkind_In (Par, N_Aggregate, N_Extension_Aggregate) then\n                   if Etype (Par) = Typ then\n                      Set_Has_Self_Reference (Par);\n                      return True;\n@@ -552,7 +575,23 @@ package body Sem_Attr is\n             --  could modify local variables to be passed out of scope\n \n             if Aname = Name_Unrestricted_Access then\n-               Kill_Current_Values;\n+\n+               --  Do not kill values on nodes initializing dispatch tables\n+               --  slots. The construct Address!(Prim'Unrestricted_Access)\n+               --  is currently generated by the expander only for this\n+               --  purpose. Done to keep the quality of warnings currently\n+               --  generated by the compiler (otherwise any declaration of\n+               --  a tagged type cleans constant indications from its scope).\n+\n+               if Nkind (Parent (N)) = N_Unchecked_Type_Conversion\n+                 and then Etype (Parent (N)) = RTE (RE_Address)\n+                 and then Is_Dispatching_Operation\n+                            (Directly_Designated_Type (Etype (N)))\n+               then\n+                  null;\n+               else\n+                  Kill_Current_Values;\n+               end if;\n             end if;\n \n             return;\n@@ -626,10 +665,9 @@ package body Sem_Attr is\n \n                   if not In_Default_Expression\n                     and then not Has_Completion (Scop)\n-                    and then\n-                      Nkind (Parent (N)) /= N_Discriminant_Association\n-                    and then\n-                      Nkind (Parent (N)) /= N_Index_Or_Discriminant_Constraint\n+                    and then not\n+                      Nkind_In (Parent (N), N_Discriminant_Association,\n+                                            N_Index_Or_Discriminant_Constraint)\n                   then\n                      Error_Msg_N\n                        (\"current instance attribute must appear alone\", N);\n@@ -726,8 +764,8 @@ package body Sem_Attr is\n                   Kill_Current_Values (Ent);\n                   exit;\n \n-               elsif Nkind (PP) = N_Selected_Component\n-                 or else Nkind (PP) = N_Indexed_Component\n+               elsif Nkind_In (PP, N_Selected_Component,\n+                                   N_Indexed_Component)\n                then\n                   PP := Prefix (PP);\n \n@@ -1414,8 +1452,8 @@ package body Sem_Attr is\n             null;\n \n          elsif Is_List_Member (N)\n-           and then Nkind (Parent (N)) /= N_Procedure_Call_Statement\n-           and then Nkind (Parent (N)) /= N_Aggregate\n+           and then not Nkind_In (Parent (N), N_Procedure_Call_Statement,\n+                                              N_Aggregate)\n          then\n             null;\n \n@@ -2145,9 +2183,7 @@ package body Sem_Attr is\n          --  or of a variable of the enclosing task type.\n \n          else\n-            if Nkind (Pref) = N_Identifier\n-              or else Nkind (Pref) = N_Expanded_Name\n-            then\n+            if Nkind_In (Pref, N_Identifier, N_Expanded_Name) then\n                Ent := Entity (Pref);\n \n                if not OK_Entry (Ent)\n@@ -2297,9 +2333,7 @@ package body Sem_Attr is\n       begin\n          Check_E0;\n \n-         if Nkind (P) = N_Identifier\n-           or else Nkind (P) = N_Expanded_Name\n-         then\n+         if Nkind_In (P, N_Identifier, N_Expanded_Name) then\n             Ent := Entity (P);\n \n             if not Is_Entry (Ent) then\n@@ -2500,9 +2534,7 @@ package body Sem_Attr is\n       begin\n          Check_E0;\n \n-         if Nkind (P) = N_Identifier\n-           or else Nkind (P) = N_Expanded_Name\n-         then\n+         if Nkind_In (P, N_Identifier, N_Expanded_Name) then\n             Ent := Entity (P);\n \n             if Ekind (Ent) /= E_Entry then\n@@ -2623,7 +2655,6 @@ package body Sem_Attr is\n       when Attribute_Default_Bit_Order => Default_Bit_Order :\n       begin\n          Check_Standard_Prefix;\n-         Check_E0;\n \n          if Bytes_Big_Endian then\n             Rewrite (N,\n@@ -2733,7 +2764,6 @@ package body Sem_Attr is\n \n          if Nkind (P) /= N_Identifier then\n             Error_Msg_N (\"identifier expected (check name)\", P);\n-\n          elsif Get_Check_Id (Chars (P)) = No_Check_Id then\n             Error_Msg_N (\"& is not a recognized check name\", P);\n          end if;\n@@ -2802,7 +2832,6 @@ package body Sem_Attr is\n       ---------------\n \n       when Attribute_Fast_Math =>\n-         Check_E0;\n          Check_Standard_Prefix;\n \n          if Opt.Fast_Math then\n@@ -3320,19 +3349,17 @@ package body Sem_Attr is\n \n          --  Case of attribute used as actual for subprogram (positional)\n \n-         elsif (Nkind (Parnt) = N_Procedure_Call_Statement\n-                 or else\n-                Nkind (Parnt) = N_Function_Call)\n+         elsif Nkind_In (Parnt, N_Procedure_Call_Statement,\n+                                N_Function_Call)\n             and then Is_Entity_Name (Name (Parnt))\n          then\n             Must_Be_Imported (Entity (Name (Parnt)));\n \n          --  Case of attribute used as actual for subprogram (named)\n \n          elsif Nkind (Parnt) = N_Parameter_Association\n-           and then (Nkind (GParnt) = N_Procedure_Call_Statement\n-                       or else\n-                     Nkind (GParnt) = N_Function_Call)\n+           and then Nkind_In (GParnt, N_Procedure_Call_Statement,\n+                                      N_Function_Call)\n            and then Is_Entity_Name (Name (GParnt))\n          then\n             Must_Be_Imported (Entity (Name (GParnt)));\n@@ -3343,7 +3370,6 @@ package body Sem_Attr is\n             Bad_Null_Parameter\n               (\"Null_Parameter must be actual or default parameter\");\n          end if;\n-\n       end Null_Parameter;\n \n       -----------------\n@@ -3356,6 +3382,22 @@ package body Sem_Attr is\n          Check_Not_Incomplete_Type;\n          Set_Etype (N, Universal_Integer);\n \n+      ---------\n+      -- Old --\n+      ---------\n+\n+      when Attribute_Old =>\n+         Check_E0;\n+         Set_Etype (N, P_Type);\n+\n+         if not Is_Subprogram (Current_Scope) then\n+            Error_Attr (\"attribute % can only appear within subprogram\", N);\n+         end if;\n+\n+         if Is_Limited_Type (P_Type) then\n+            Error_Attr (\"attribute % cannot apply to limited objects\", P);\n+         end if;\n+\n       ------------\n       -- Output --\n       ------------\n@@ -3370,17 +3412,17 @@ package body Sem_Attr is\n       -- Partition_ID --\n       ------------------\n \n-      when Attribute_Partition_ID =>\n+      when Attribute_Partition_ID => Partition_Id :\n+      begin\n          Check_E0;\n \n          if P_Type /= Any_Type then\n             if not Is_Library_Level_Entity (Entity (P)) then\n                Error_Attr_P\n                  (\"prefix of % attribute must be library-level entity\");\n \n-            --  The defining entity of prefix should not be declared inside\n-            --  a Pure unit. RM E.1(8).\n-            --  The Is_Pure flag has been set during declaration.\n+            --  The defining entity of prefix should not be declared inside a\n+            --  Pure unit. RM E.1(8). Is_Pure was set during declaration.\n \n             elsif Is_Entity_Name (P)\n               and then Is_Pure (Entity (P))\n@@ -3391,6 +3433,7 @@ package body Sem_Attr is\n          end if;\n \n          Set_Etype (N, Universal_Integer);\n+      end Partition_Id;\n \n       -------------------------\n       -- Passed_By_Reference --\n@@ -3522,6 +3565,7 @@ package body Sem_Attr is\n       ------------------\n \n       when Attribute_Range_Length =>\n+         Check_E0;\n          Check_Discrete_Type;\n          Set_Etype (N, Universal_Integer);\n \n@@ -3654,7 +3698,8 @@ package body Sem_Attr is\n       -- Size --\n       ----------\n \n-      when Attribute_Size | Attribute_VADS_Size =>\n+      when Attribute_Size | Attribute_VADS_Size => Size :\n+      begin\n          Check_E0;\n \n          --  If prefix is parameterless function call, rewrite and resolve\n@@ -3693,6 +3738,7 @@ package body Sem_Attr is\n \n          Check_Not_Incomplete_Type;\n          Set_Etype (N, Universal_Integer);\n+      end Size;\n \n       -----------\n       -- Small --\n@@ -3707,10 +3753,11 @@ package body Sem_Attr is\n       -- Storage_Pool --\n       ------------------\n \n-      when Attribute_Storage_Pool =>\n-         if Is_Access_Type (P_Type) then\n-            Check_E0;\n+      when Attribute_Storage_Pool => Storage_Pool :\n+      begin\n+         Check_E0;\n \n+         if Is_Access_Type (P_Type) then\n             if Ekind (P_Type) = E_Access_Subprogram_Type then\n                Error_Attr_P\n                  (\"cannot use % attribute for access-to-subprogram type\");\n@@ -3735,14 +3782,17 @@ package body Sem_Attr is\n          else\n             Error_Attr_P (\"prefix of % attribute must be access type\");\n          end if;\n+      end Storage_Pool;\n \n       ------------------\n       -- Storage_Size --\n       ------------------\n \n-      when Attribute_Storage_Size =>\n+      when Attribute_Storage_Size => Storage_Size :\n+      begin\n+         Check_E0;\n+\n          if Is_Task_Type (P_Type) then\n-            Check_E0;\n             Set_Etype (N, Universal_Integer);\n \n          elsif Is_Access_Type (P_Type) then\n@@ -3754,7 +3804,6 @@ package body Sem_Attr is\n             if Is_Entity_Name (P)\n               and then Is_Type (Entity (P))\n             then\n-               Check_E0;\n                Check_Type;\n                Set_Etype (N, Universal_Integer);\n \n@@ -3768,14 +3817,14 @@ package body Sem_Attr is\n             --  of an access value designating a task.\n \n             else\n-               Check_E0;\n                Check_Task_Prefix;\n                Set_Etype (N, Universal_Integer);\n             end if;\n \n          else\n             Error_Attr_P (\"prefix of % attribute must be access or task type\");\n          end if;\n+      end Storage_Size;\n \n       ------------------\n       -- Storage_Unit --\n@@ -3845,7 +3894,8 @@ package body Sem_Attr is\n       -- Tag --\n       ---------\n \n-      when Attribute_Tag =>\n+      when Attribute_Tag => Tag :\n+      begin\n          Check_E0;\n          Check_Dereference;\n \n@@ -3875,6 +3925,7 @@ package body Sem_Attr is\n          --  Set appropriate type\n \n          Set_Etype (N, RTE (RE_Tag));\n+      end Tag;\n \n       -----------------\n       -- Target_Name --\n@@ -3886,7 +3937,6 @@ package body Sem_Attr is\n \n       begin\n          Check_Standard_Prefix;\n-         Check_E0;\n \n          TL := TN'Last;\n \n@@ -4022,9 +4072,7 @@ package body Sem_Attr is\n                   Negative := False;\n                end if;\n \n-               if Nkind (Expr) /= N_Integer_Literal\n-                 and then Nkind (Expr) /= N_Real_Literal\n-               then\n+               if not Nkind_In (Expr, N_Integer_Literal, N_Real_Literal) then\n                   Error_Attr\n                     (\"named number for % attribute must be simple literal\", N);\n                end if;\n@@ -4987,12 +5035,11 @@ package body Sem_Attr is\n       then\n          P_Type := P_Entity;\n \n-      --  We can fold 'Size applied to a type if the size is known\n-      --  (as happens for a size from an attribute definition clause).\n-      --  At this stage, this can happen only for types (e.g. record\n-      --  types) for which the size is always non-static. We exclude\n-      --  generic types from consideration (since they have bogus\n-      --  sizes set within templates).\n+      --  We can fold 'Size applied to a type if the size is known (as happens\n+      --  for a size from an attribute definition clause). At this stage, this\n+      --  can happen only for types (e.g. record types) for which the size is\n+      --  always non-static. We exclude generic types from consideration (since\n+      --  they have bogus sizes set within templates).\n \n       elsif Id = Attribute_Size\n         and then Is_Type (P_Entity)\n@@ -6924,6 +6971,7 @@ package body Sem_Attr is\n            Attribute_Input                    |\n            Attribute_Last_Bit                 |\n            Attribute_Maximum_Alignment        |\n+           Attribute_Old                      |\n            Attribute_Output                   |\n            Attribute_Partition_ID             |\n            Attribute_Pool_Address             |\n@@ -6961,10 +7009,10 @@ package body Sem_Attr is\n       --  An exception is the GNAT attribute Constrained_Array which is\n       --  defined to be a static attribute in all cases.\n \n-      if Nkind (N) = N_Integer_Literal\n-        or else Nkind (N) = N_Real_Literal\n-        or else Nkind (N) = N_Character_Literal\n-        or else Nkind (N) = N_String_Literal\n+      if Nkind_In (N, N_Integer_Literal,\n+                      N_Real_Literal,\n+                      N_Character_Literal,\n+                      N_String_Literal)\n         or else (Is_Entity_Name (N)\n                   and then Ekind (Entity (N)) = E_Enumeration_Literal)\n       then\n@@ -7060,9 +7108,8 @@ package body Sem_Attr is\n \n             if Is_Record_Type (Current_Scope)\n               and then\n-                (Nkind (Parent (N)) = N_Discriminant_Association\n-                   or else\n-                 Nkind (Parent (N)) = N_Index_Or_Discriminant_Constraint)\n+                Nkind_In (Parent (N), N_Discriminant_Association,\n+                                      N_Index_Or_Discriminant_Constraint)\n             then\n                Indic := Parent (Parent (N));\n                while Present (Indic)\n@@ -7122,7 +7169,8 @@ package body Sem_Attr is\n             | Attribute_Unchecked_Access\n             | Attribute_Unrestricted_Access =>\n \n-         Access_Attribute : begin\n+         Access_Attribute :\n+         begin\n             if Is_Variable (P) then\n                Note_Possible_Modification (P);\n             end if;"}, {"sha": "95fc9b1e4f2013eb13b64234e52b785812ff1c0a", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "patch": "@@ -206,6 +206,7 @@ package body Snames is\n      \"no_run_time#\" &\n      \"no_strict_aliasing#\" &\n      \"normalize_scalars#\" &\n+     \"optimize_alignment#\" &\n      \"polling#\" &\n      \"persistent_bss#\" &\n      \"priority_specific_dispatching#\" &\n@@ -495,6 +496,7 @@ package body Snames is\n      \"modulus#\" &\n      \"null_parameter#\" &\n      \"object_size#\" &\n+     \"old#\" &\n      \"partition_id#\" &\n      \"passed_by_reference#\" &\n      \"pool_address#\" &\n@@ -778,6 +780,8 @@ package body Snames is\n      \"stack#\" &\n      \"switches#\" &\n      \"symbolic_link_supported#\" &\n+     \"sync#\" &\n+     \"synchronize#\" &\n      \"toolchain_description#\" &\n      \"toolchain_version#\" &\n      \"runtime_library_dir#\" &"}, {"sha": "6a6d0ceb31663ed6e720cc4c8b8fe8fe0f7ee857", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 617, "deletions": 615, "changes": 1232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "patch": "@@ -371,128 +371,129 @@ package Snames is\n    Name_No_Run_Time                    : constant Name_Id := N + 145; -- GNAT\n    Name_No_Strict_Aliasing             : constant Name_Id := N + 146; -- GNAT\n    Name_Normalize_Scalars              : constant Name_Id := N + 147;\n-   Name_Polling                        : constant Name_Id := N + 148; -- GNAT\n-   Name_Persistent_BSS                 : constant Name_Id := N + 149; -- GNAT\n-   Name_Priority_Specific_Dispatching  : constant Name_Id := N + 150; -- Ada 05\n-   Name_Profile                        : constant Name_Id := N + 151; -- Ada 05\n-   Name_Profile_Warnings               : constant Name_Id := N + 152; -- GNAT\n-   Name_Propagate_Exceptions           : constant Name_Id := N + 153; -- GNAT\n-   Name_Queuing_Policy                 : constant Name_Id := N + 154;\n-   Name_Ravenscar                      : constant Name_Id := N + 155; -- GNAT\n-   Name_Restricted_Run_Time            : constant Name_Id := N + 156; -- GNAT\n-   Name_Restrictions                   : constant Name_Id := N + 157;\n-   Name_Restriction_Warnings           : constant Name_Id := N + 158; -- GNAT\n-   Name_Reviewable                     : constant Name_Id := N + 159;\n-   Name_Source_File_Name               : constant Name_Id := N + 160; -- GNAT\n-   Name_Source_File_Name_Project       : constant Name_Id := N + 161; -- GNAT\n-   Name_Style_Checks                   : constant Name_Id := N + 162; -- GNAT\n-   Name_Suppress                       : constant Name_Id := N + 163;\n-   Name_Suppress_Exception_Locations   : constant Name_Id := N + 164; -- GNAT\n-   Name_Task_Dispatching_Policy        : constant Name_Id := N + 165;\n-   Name_Universal_Data                 : constant Name_Id := N + 166; -- AAMP\n-   Name_Unsuppress                     : constant Name_Id := N + 167; -- GNAT\n-   Name_Use_VADS_Size                  : constant Name_Id := N + 168; -- GNAT\n-   Name_Validity_Checks                : constant Name_Id := N + 169; -- GNAT\n-   Name_Warnings                       : constant Name_Id := N + 170; -- GNAT\n-   Name_Wide_Character_Encoding        : constant Name_Id := N + 171; -- GNAT\n-   Last_Configuration_Pragma_Name      : constant Name_Id := N + 171;\n+   Name_Optimize_Alignment             : constant Name_Id := N + 148; -- GNAT\n+   Name_Polling                        : constant Name_Id := N + 149; -- GNAT\n+   Name_Persistent_BSS                 : constant Name_Id := N + 150; -- GNAT\n+   Name_Priority_Specific_Dispatching  : constant Name_Id := N + 151; -- Ada 05\n+   Name_Profile                        : constant Name_Id := N + 152; -- Ada 05\n+   Name_Profile_Warnings               : constant Name_Id := N + 153; -- GNAT\n+   Name_Propagate_Exceptions           : constant Name_Id := N + 154; -- GNAT\n+   Name_Queuing_Policy                 : constant Name_Id := N + 155;\n+   Name_Ravenscar                      : constant Name_Id := N + 156; -- GNAT\n+   Name_Restricted_Run_Time            : constant Name_Id := N + 157; -- GNAT\n+   Name_Restrictions                   : constant Name_Id := N + 158;\n+   Name_Restriction_Warnings           : constant Name_Id := N + 159; -- GNAT\n+   Name_Reviewable                     : constant Name_Id := N + 160;\n+   Name_Source_File_Name               : constant Name_Id := N + 161; -- GNAT\n+   Name_Source_File_Name_Project       : constant Name_Id := N + 162; -- GNAT\n+   Name_Style_Checks                   : constant Name_Id := N + 163; -- GNAT\n+   Name_Suppress                       : constant Name_Id := N + 164;\n+   Name_Suppress_Exception_Locations   : constant Name_Id := N + 165; -- GNAT\n+   Name_Task_Dispatching_Policy        : constant Name_Id := N + 166;\n+   Name_Universal_Data                 : constant Name_Id := N + 167; -- AAMP\n+   Name_Unsuppress                     : constant Name_Id := N + 168; -- GNAT\n+   Name_Use_VADS_Size                  : constant Name_Id := N + 169; -- GNAT\n+   Name_Validity_Checks                : constant Name_Id := N + 170; -- GNAT\n+   Name_Warnings                       : constant Name_Id := N + 171; -- GNAT\n+   Name_Wide_Character_Encoding        : constant Name_Id := N + 172; -- GNAT\n+   Last_Configuration_Pragma_Name      : constant Name_Id := N + 172;\n \n    --  Remaining pragma names\n \n-   Name_Abort_Defer                    : constant Name_Id := N + 172; -- GNAT\n-   Name_All_Calls_Remote               : constant Name_Id := N + 173;\n-   Name_Annotate                       : constant Name_Id := N + 174; -- GNAT\n+   Name_Abort_Defer                    : constant Name_Id := N + 173; -- GNAT\n+   Name_All_Calls_Remote               : constant Name_Id := N + 174;\n+   Name_Annotate                       : constant Name_Id := N + 175; -- GNAT\n \n    --  Note: AST_Entry is not in this list because its name matches   -- VMS\n    --  the name of the corresponding attribute. However, it is\n    --  included in the definition of the type Pragma_Id, and the\n    --  functions Get_Pragma_Id and Is_Pragma_Id correctly recognize\n    --  and process Name_AST_Entry.\n \n-   Name_Assert                         : constant Name_Id := N + 175; -- Ada 05\n-   Name_Asynchronous                   : constant Name_Id := N + 176;\n-   Name_Atomic                         : constant Name_Id := N + 177;\n-   Name_Atomic_Components              : constant Name_Id := N + 178;\n-   Name_Attach_Handler                 : constant Name_Id := N + 179;\n-   Name_CIL_Constructor                : constant Name_Id := N + 180; -- GNAT\n-   Name_Comment                        : constant Name_Id := N + 181; -- GNAT\n-   Name_Common_Object                  : constant Name_Id := N + 182; -- GNAT\n-   Name_Complete_Representation        : constant Name_Id := N + 183; -- GNAT\n-   Name_Complex_Representation         : constant Name_Id := N + 184; -- GNAT\n-   Name_Controlled                     : constant Name_Id := N + 185;\n-   Name_Convention                     : constant Name_Id := N + 186;\n-   Name_CPP_Class                      : constant Name_Id := N + 187; -- GNAT\n-   Name_CPP_Constructor                : constant Name_Id := N + 188; -- GNAT\n-   Name_CPP_Virtual                    : constant Name_Id := N + 189; -- GNAT\n-   Name_CPP_Vtable                     : constant Name_Id := N + 190; -- GNAT\n-   Name_Debug                          : constant Name_Id := N + 191; -- GNAT\n-   Name_Elaborate                      : constant Name_Id := N + 192; -- Ada 83\n-   Name_Elaborate_All                  : constant Name_Id := N + 193;\n-   Name_Elaborate_Body                 : constant Name_Id := N + 194;\n-   Name_Export                         : constant Name_Id := N + 195;\n-   Name_Export_Exception               : constant Name_Id := N + 196; -- VMS\n-   Name_Export_Function                : constant Name_Id := N + 197; -- GNAT\n-   Name_Export_Object                  : constant Name_Id := N + 198; -- GNAT\n-   Name_Export_Procedure               : constant Name_Id := N + 199; -- GNAT\n-   Name_Export_Value                   : constant Name_Id := N + 200; -- GNAT\n-   Name_Export_Valued_Procedure        : constant Name_Id := N + 201; -- GNAT\n-   Name_External                       : constant Name_Id := N + 202; -- GNAT\n-   Name_Finalize_Storage_Only          : constant Name_Id := N + 203; -- GNAT\n-   Name_Ident                          : constant Name_Id := N + 204; -- VMS\n-   Name_Implemented_By_Entry           : constant Name_Id := N + 205; -- Ada 05\n-   Name_Import                         : constant Name_Id := N + 206;\n-   Name_Import_Exception               : constant Name_Id := N + 207; -- VMS\n-   Name_Import_Function                : constant Name_Id := N + 208; -- GNAT\n-   Name_Import_Object                  : constant Name_Id := N + 209; -- GNAT\n-   Name_Import_Procedure               : constant Name_Id := N + 210; -- GNAT\n-   Name_Import_Valued_Procedure        : constant Name_Id := N + 211; -- GNAT\n-   Name_Inline                         : constant Name_Id := N + 212;\n-   Name_Inline_Always                  : constant Name_Id := N + 213; -- GNAT\n-   Name_Inline_Generic                 : constant Name_Id := N + 214; -- GNAT\n-   Name_Inspection_Point               : constant Name_Id := N + 215;\n-   Name_Interface_Name                 : constant Name_Id := N + 216; -- GNAT\n-   Name_Interrupt_Handler              : constant Name_Id := N + 217;\n-   Name_Interrupt_Priority             : constant Name_Id := N + 218;\n-   Name_Java_Constructor               : constant Name_Id := N + 219; -- GNAT\n-   Name_Java_Interface                 : constant Name_Id := N + 220; -- GNAT\n-   Name_Keep_Names                     : constant Name_Id := N + 221; -- GNAT\n-   Name_Link_With                      : constant Name_Id := N + 222; -- GNAT\n-   Name_Linker_Alias                   : constant Name_Id := N + 223; -- GNAT\n-   Name_Linker_Constructor             : constant Name_Id := N + 224; -- GNAT\n-   Name_Linker_Destructor              : constant Name_Id := N + 225; -- GNAT\n-   Name_Linker_Options                 : constant Name_Id := N + 226;\n-   Name_Linker_Section                 : constant Name_Id := N + 227; -- GNAT\n-   Name_List                           : constant Name_Id := N + 228;\n-   Name_Machine_Attribute              : constant Name_Id := N + 229; -- GNAT\n-   Name_Main                           : constant Name_Id := N + 230; -- GNAT\n-   Name_Main_Storage                   : constant Name_Id := N + 231; -- GNAT\n-   Name_Memory_Size                    : constant Name_Id := N + 232; -- Ada 83\n-   Name_No_Body                        : constant Name_Id := N + 233; -- GNAT\n-   Name_No_Return                      : constant Name_Id := N + 234; -- GNAT\n-   Name_Obsolescent                    : constant Name_Id := N + 235; -- GNAT\n-   Name_Optimize                       : constant Name_Id := N + 236;\n-   Name_Pack                           : constant Name_Id := N + 237;\n-   Name_Page                           : constant Name_Id := N + 238;\n-   Name_Passive                        : constant Name_Id := N + 239; -- GNAT\n-   Name_Preelaborable_Initialization   : constant Name_Id := N + 240; -- Ada 05\n-   Name_Preelaborate                   : constant Name_Id := N + 241;\n-   Name_Preelaborate_05                : constant Name_Id := N + 242; -- GNAT\n+   Name_Assert                         : constant Name_Id := N + 176; -- Ada 05\n+   Name_Asynchronous                   : constant Name_Id := N + 177;\n+   Name_Atomic                         : constant Name_Id := N + 178;\n+   Name_Atomic_Components              : constant Name_Id := N + 179;\n+   Name_Attach_Handler                 : constant Name_Id := N + 180;\n+   Name_CIL_Constructor                : constant Name_Id := N + 181; -- GNAT\n+   Name_Comment                        : constant Name_Id := N + 182; -- GNAT\n+   Name_Common_Object                  : constant Name_Id := N + 183; -- GNAT\n+   Name_Complete_Representation        : constant Name_Id := N + 184; -- GNAT\n+   Name_Complex_Representation         : constant Name_Id := N + 185; -- GNAT\n+   Name_Controlled                     : constant Name_Id := N + 186;\n+   Name_Convention                     : constant Name_Id := N + 187;\n+   Name_CPP_Class                      : constant Name_Id := N + 188; -- GNAT\n+   Name_CPP_Constructor                : constant Name_Id := N + 189; -- GNAT\n+   Name_CPP_Virtual                    : constant Name_Id := N + 190; -- GNAT\n+   Name_CPP_Vtable                     : constant Name_Id := N + 191; -- GNAT\n+   Name_Debug                          : constant Name_Id := N + 192; -- GNAT\n+   Name_Elaborate                      : constant Name_Id := N + 193; -- Ada 83\n+   Name_Elaborate_All                  : constant Name_Id := N + 194;\n+   Name_Elaborate_Body                 : constant Name_Id := N + 195;\n+   Name_Export                         : constant Name_Id := N + 196;\n+   Name_Export_Exception               : constant Name_Id := N + 197; -- VMS\n+   Name_Export_Function                : constant Name_Id := N + 198; -- GNAT\n+   Name_Export_Object                  : constant Name_Id := N + 199; -- GNAT\n+   Name_Export_Procedure               : constant Name_Id := N + 200; -- GNAT\n+   Name_Export_Value                   : constant Name_Id := N + 201; -- GNAT\n+   Name_Export_Valued_Procedure        : constant Name_Id := N + 202; -- GNAT\n+   Name_External                       : constant Name_Id := N + 203; -- GNAT\n+   Name_Finalize_Storage_Only          : constant Name_Id := N + 204; -- GNAT\n+   Name_Ident                          : constant Name_Id := N + 205; -- VMS\n+   Name_Implemented_By_Entry           : constant Name_Id := N + 206; -- Ada 05\n+   Name_Import                         : constant Name_Id := N + 207;\n+   Name_Import_Exception               : constant Name_Id := N + 208; -- VMS\n+   Name_Import_Function                : constant Name_Id := N + 209; -- GNAT\n+   Name_Import_Object                  : constant Name_Id := N + 210; -- GNAT\n+   Name_Import_Procedure               : constant Name_Id := N + 211; -- GNAT\n+   Name_Import_Valued_Procedure        : constant Name_Id := N + 212; -- GNAT\n+   Name_Inline                         : constant Name_Id := N + 213;\n+   Name_Inline_Always                  : constant Name_Id := N + 214; -- GNAT\n+   Name_Inline_Generic                 : constant Name_Id := N + 215; -- GNAT\n+   Name_Inspection_Point               : constant Name_Id := N + 216;\n+   Name_Interface_Name                 : constant Name_Id := N + 217; -- GNAT\n+   Name_Interrupt_Handler              : constant Name_Id := N + 218;\n+   Name_Interrupt_Priority             : constant Name_Id := N + 219;\n+   Name_Java_Constructor               : constant Name_Id := N + 220; -- GNAT\n+   Name_Java_Interface                 : constant Name_Id := N + 221; -- GNAT\n+   Name_Keep_Names                     : constant Name_Id := N + 222; -- GNAT\n+   Name_Link_With                      : constant Name_Id := N + 223; -- GNAT\n+   Name_Linker_Alias                   : constant Name_Id := N + 224; -- GNAT\n+   Name_Linker_Constructor             : constant Name_Id := N + 225; -- GNAT\n+   Name_Linker_Destructor              : constant Name_Id := N + 226; -- GNAT\n+   Name_Linker_Options                 : constant Name_Id := N + 227;\n+   Name_Linker_Section                 : constant Name_Id := N + 228; -- GNAT\n+   Name_List                           : constant Name_Id := N + 229;\n+   Name_Machine_Attribute              : constant Name_Id := N + 230; -- GNAT\n+   Name_Main                           : constant Name_Id := N + 231; -- GNAT\n+   Name_Main_Storage                   : constant Name_Id := N + 232; -- GNAT\n+   Name_Memory_Size                    : constant Name_Id := N + 233; -- Ada 83\n+   Name_No_Body                        : constant Name_Id := N + 234; -- GNAT\n+   Name_No_Return                      : constant Name_Id := N + 235; -- GNAT\n+   Name_Obsolescent                    : constant Name_Id := N + 236; -- GNAT\n+   Name_Optimize                       : constant Name_Id := N + 237;\n+   Name_Pack                           : constant Name_Id := N + 238;\n+   Name_Page                           : constant Name_Id := N + 239;\n+   Name_Passive                        : constant Name_Id := N + 240; -- GNAT\n+   Name_Preelaborable_Initialization   : constant Name_Id := N + 241; -- Ada 05\n+   Name_Preelaborate                   : constant Name_Id := N + 242;\n+   Name_Preelaborate_05                : constant Name_Id := N + 243; -- GNAT\n \n    --  Note: Priority is not in this list because its name matches\n    --  the name of the corresponding attribute. However, it is\n    --  included in the definition of the type Pragma_Id, and the\n    --  functions Get_Pragma_Id and Is_Pragma_Id correctly recognize\n    --  and process Priority. Priority is a standard Ada 95 pragma.\n \n-   Name_Psect_Object                   : constant Name_Id := N + 243; -- VMS\n-   Name_Pure                           : constant Name_Id := N + 244;\n-   Name_Pure_05                        : constant Name_Id := N + 245; -- GNAT\n-   Name_Pure_Function                  : constant Name_Id := N + 246; -- GNAT\n-   Name_Remote_Call_Interface          : constant Name_Id := N + 247;\n-   Name_Remote_Types                   : constant Name_Id := N + 248;\n-   Name_Share_Generic                  : constant Name_Id := N + 249; -- GNAT\n-   Name_Shared                         : constant Name_Id := N + 250; -- Ada 83\n-   Name_Shared_Passive                 : constant Name_Id := N + 251;\n+   Name_Psect_Object                   : constant Name_Id := N + 244; -- VMS\n+   Name_Pure                           : constant Name_Id := N + 245;\n+   Name_Pure_05                        : constant Name_Id := N + 246; -- GNAT\n+   Name_Pure_Function                  : constant Name_Id := N + 247; -- GNAT\n+   Name_Remote_Call_Interface          : constant Name_Id := N + 248;\n+   Name_Remote_Types                   : constant Name_Id := N + 249;\n+   Name_Share_Generic                  : constant Name_Id := N + 250; -- GNAT\n+   Name_Shared                         : constant Name_Id := N + 251; -- Ada 83\n+   Name_Shared_Passive                 : constant Name_Id := N + 252;\n \n    --  Note: Storage_Size is not in this list because its name\n    --  matches the name of the corresponding attribute. However,\n@@ -503,30 +504,30 @@ package Snames is\n    --  Note: Storage_Unit is also omitted from the list because\n    --  of a clash with an attribute name, and is treated similarly.\n \n-   Name_Source_Reference               : constant Name_Id := N + 252; -- GNAT\n-   Name_Static_Elaboration_Desired     : constant Name_Id := N + 253; -- GNAT\n-   Name_Stream_Convert                 : constant Name_Id := N + 254; -- GNAT\n-   Name_Subtitle                       : constant Name_Id := N + 255; -- GNAT\n-   Name_Suppress_All                   : constant Name_Id := N + 256; -- GNAT\n-   Name_Suppress_Debug_Info            : constant Name_Id := N + 257; -- GNAT\n-   Name_Suppress_Initialization        : constant Name_Id := N + 258; -- GNAT\n-   Name_System_Name                    : constant Name_Id := N + 259; -- Ada 83\n-   Name_Task_Info                      : constant Name_Id := N + 260; -- GNAT\n-   Name_Task_Name                      : constant Name_Id := N + 261; -- GNAT\n-   Name_Task_Storage                   : constant Name_Id := N + 262; -- VMS\n-   Name_Time_Slice                     : constant Name_Id := N + 263; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 264; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 265; -- GNAT\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 266; -- GNAT\n-   Name_Universal_Aliasing             : constant Name_Id := N + 267; -- GNAT\n-   Name_Unmodified                     : constant Name_Id := N + 268; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 269; -- GNAT\n-   Name_Unreferenced_Objects           : constant Name_Id := N + 270; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 271; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 272;\n-   Name_Volatile_Components            : constant Name_Id := N + 273;\n-   Name_Weak_External                  : constant Name_Id := N + 274; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 274;\n+   Name_Source_Reference               : constant Name_Id := N + 253; -- GNAT\n+   Name_Static_Elaboration_Desired     : constant Name_Id := N + 254; -- GNAT\n+   Name_Stream_Convert                 : constant Name_Id := N + 255; -- GNAT\n+   Name_Subtitle                       : constant Name_Id := N + 256; -- GNAT\n+   Name_Suppress_All                   : constant Name_Id := N + 257; -- GNAT\n+   Name_Suppress_Debug_Info            : constant Name_Id := N + 258; -- GNAT\n+   Name_Suppress_Initialization        : constant Name_Id := N + 259; -- GNAT\n+   Name_System_Name                    : constant Name_Id := N + 260; -- Ada 83\n+   Name_Task_Info                      : constant Name_Id := N + 261; -- GNAT\n+   Name_Task_Name                      : constant Name_Id := N + 262; -- GNAT\n+   Name_Task_Storage                   : constant Name_Id := N + 263; -- VMS\n+   Name_Time_Slice                     : constant Name_Id := N + 264; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 265; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 266; -- GNAT\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 267; -- GNAT\n+   Name_Universal_Aliasing             : constant Name_Id := N + 268; -- GNAT\n+   Name_Unmodified                     : constant Name_Id := N + 269; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 270; -- GNAT\n+   Name_Unreferenced_Objects           : constant Name_Id := N + 271; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 272; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 273;\n+   Name_Volatile_Components            : constant Name_Id := N + 274;\n+   Name_Weak_External                  : constant Name_Id := N + 275; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 275;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -537,119 +538,119 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 275;\n-   Name_Ada                            : constant Name_Id := N + 275;\n-   Name_Assembler                      : constant Name_Id := N + 276;\n-   Name_CIL                            : constant Name_Id := N + 277;\n-   Name_COBOL                          : constant Name_Id := N + 278;\n-   Name_CPP                            : constant Name_Id := N + 279;\n-   Name_Fortran                        : constant Name_Id := N + 280;\n-   Name_Intrinsic                      : constant Name_Id := N + 281;\n-   Name_Java                           : constant Name_Id := N + 282;\n-   Name_Stdcall                        : constant Name_Id := N + 283;\n-   Name_Stubbed                        : constant Name_Id := N + 284;\n-   Last_Convention_Name                : constant Name_Id := N + 284;\n+   First_Convention_Name               : constant Name_Id := N + 276;\n+   Name_Ada                            : constant Name_Id := N + 276;\n+   Name_Assembler                      : constant Name_Id := N + 277;\n+   Name_CIL                            : constant Name_Id := N + 278;\n+   Name_COBOL                          : constant Name_Id := N + 279;\n+   Name_CPP                            : constant Name_Id := N + 280;\n+   Name_Fortran                        : constant Name_Id := N + 281;\n+   Name_Intrinsic                      : constant Name_Id := N + 282;\n+   Name_Java                           : constant Name_Id := N + 283;\n+   Name_Stdcall                        : constant Name_Id := N + 284;\n+   Name_Stubbed                        : constant Name_Id := N + 285;\n+   Last_Convention_Name                : constant Name_Id := N + 285;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 285;\n-   Name_Assembly                       : constant Name_Id := N + 286;\n+   Name_Asm                            : constant Name_Id := N + 286;\n+   Name_Assembly                       : constant Name_Id := N + 287;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 287;\n+   Name_Default                        : constant Name_Id := N + 288;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are preset as synonyms for CPP\n \n-   Name_C_Plus_Plus                    : constant Name_Id := N + 288;\n+   Name_C_Plus_Plus                    : constant Name_Id := N + 289;\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 289;\n-   Name_Win32                          : constant Name_Id := N + 290;\n+   Name_DLL                            : constant Name_Id := N + 290;\n+   Name_Win32                          : constant Name_Id := N + 291;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 291;\n-   Name_Attribute_Name                 : constant Name_Id := N + 292;\n-   Name_Body_File_Name                 : constant Name_Id := N + 293;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 294;\n-   Name_Check                          : constant Name_Id := N + 295;\n-   Name_Casing                         : constant Name_Id := N + 296;\n-   Name_Code                           : constant Name_Id := N + 297;\n-   Name_Component                      : constant Name_Id := N + 298;\n-   Name_Component_Size_4               : constant Name_Id := N + 299;\n-   Name_Copy                           : constant Name_Id := N + 300;\n-   Name_D_Float                        : constant Name_Id := N + 301;\n-   Name_Descriptor                     : constant Name_Id := N + 302;\n-   Name_Dot_Replacement                : constant Name_Id := N + 303;\n-   Name_Dynamic                        : constant Name_Id := N + 304;\n-   Name_Entity                         : constant Name_Id := N + 305;\n-   Name_Entry_Count                    : constant Name_Id := N + 306;\n-   Name_External_Name                  : constant Name_Id := N + 307;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 308;\n-   Name_Form                           : constant Name_Id := N + 309;\n-   Name_G_Float                        : constant Name_Id := N + 310;\n-   Name_Gcc                            : constant Name_Id := N + 311;\n-   Name_Gnat                           : constant Name_Id := N + 312;\n-   Name_GPL                            : constant Name_Id := N + 313;\n-   Name_IEEE_Float                     : constant Name_Id := N + 314;\n-   Name_Ignore                         : constant Name_Id := N + 315;\n-   Name_Info                           : constant Name_Id := N + 316;\n-   Name_Internal                       : constant Name_Id := N + 317;\n-   Name_Link_Name                      : constant Name_Id := N + 318;\n-   Name_Lowercase                      : constant Name_Id := N + 319;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 320;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 321;\n-   Name_Max_Size                       : constant Name_Id := N + 322;\n-   Name_Mechanism                      : constant Name_Id := N + 323;\n-   Name_Message                        : constant Name_Id := N + 324;\n-   Name_Mixedcase                      : constant Name_Id := N + 325;\n-   Name_Modified_GPL                   : constant Name_Id := N + 326;\n-   Name_Name                           : constant Name_Id := N + 327;\n-   Name_NCA                            : constant Name_Id := N + 328;\n-   Name_No                             : constant Name_Id := N + 329;\n-   Name_No_Dependence                  : constant Name_Id := N + 330;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 331;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 332;\n-   Name_No_Requeue                     : constant Name_Id := N + 333;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 334;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 335;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 336;\n-   Name_On                             : constant Name_Id := N + 337;\n-   Name_Parameter_Types                : constant Name_Id := N + 338;\n-   Name_Reference                      : constant Name_Id := N + 339;\n-   Name_Restricted                     : constant Name_Id := N + 340;\n-   Name_Result_Mechanism               : constant Name_Id := N + 341;\n-   Name_Result_Type                    : constant Name_Id := N + 342;\n-   Name_Runtime                        : constant Name_Id := N + 343;\n-   Name_SB                             : constant Name_Id := N + 344;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 345;\n-   Name_Section                        : constant Name_Id := N + 346;\n-   Name_Semaphore                      : constant Name_Id := N + 347;\n-   Name_Simple_Barriers                : constant Name_Id := N + 348;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 349;\n-   Name_State                          : constant Name_Id := N + 350;\n-   Name_Static                         : constant Name_Id := N + 351;\n-   Name_Stack_Size                     : constant Name_Id := N + 352;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 353;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 354;\n-   Name_Task_Type                      : constant Name_Id := N + 355;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 356;\n-   Name_Top_Guard                      : constant Name_Id := N + 357;\n-   Name_UBA                            : constant Name_Id := N + 358;\n-   Name_UBS                            : constant Name_Id := N + 359;\n-   Name_UBSB                           : constant Name_Id := N + 360;\n-   Name_Unit_Name                      : constant Name_Id := N + 361;\n-   Name_Unknown                        : constant Name_Id := N + 362;\n-   Name_Unrestricted                   : constant Name_Id := N + 363;\n-   Name_Uppercase                      : constant Name_Id := N + 364;\n-   Name_User                           : constant Name_Id := N + 365;\n-   Name_VAX_Float                      : constant Name_Id := N + 366;\n-   Name_VMS                            : constant Name_Id := N + 367;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 368;\n-   Name_Working_Storage                : constant Name_Id := N + 369;\n+   Name_As_Is                          : constant Name_Id := N + 292;\n+   Name_Attribute_Name                 : constant Name_Id := N + 293;\n+   Name_Body_File_Name                 : constant Name_Id := N + 294;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 295;\n+   Name_Check                          : constant Name_Id := N + 296;\n+   Name_Casing                         : constant Name_Id := N + 297;\n+   Name_Code                           : constant Name_Id := N + 298;\n+   Name_Component                      : constant Name_Id := N + 299;\n+   Name_Component_Size_4               : constant Name_Id := N + 300;\n+   Name_Copy                           : constant Name_Id := N + 301;\n+   Name_D_Float                        : constant Name_Id := N + 302;\n+   Name_Descriptor                     : constant Name_Id := N + 303;\n+   Name_Dot_Replacement                : constant Name_Id := N + 304;\n+   Name_Dynamic                        : constant Name_Id := N + 305;\n+   Name_Entity                         : constant Name_Id := N + 306;\n+   Name_Entry_Count                    : constant Name_Id := N + 307;\n+   Name_External_Name                  : constant Name_Id := N + 308;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 309;\n+   Name_Form                           : constant Name_Id := N + 310;\n+   Name_G_Float                        : constant Name_Id := N + 311;\n+   Name_Gcc                            : constant Name_Id := N + 312;\n+   Name_Gnat                           : constant Name_Id := N + 313;\n+   Name_GPL                            : constant Name_Id := N + 314;\n+   Name_IEEE_Float                     : constant Name_Id := N + 315;\n+   Name_Ignore                         : constant Name_Id := N + 316;\n+   Name_Info                           : constant Name_Id := N + 317;\n+   Name_Internal                       : constant Name_Id := N + 318;\n+   Name_Link_Name                      : constant Name_Id := N + 319;\n+   Name_Lowercase                      : constant Name_Id := N + 320;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 321;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 322;\n+   Name_Max_Size                       : constant Name_Id := N + 323;\n+   Name_Mechanism                      : constant Name_Id := N + 324;\n+   Name_Message                        : constant Name_Id := N + 325;\n+   Name_Mixedcase                      : constant Name_Id := N + 326;\n+   Name_Modified_GPL                   : constant Name_Id := N + 327;\n+   Name_Name                           : constant Name_Id := N + 328;\n+   Name_NCA                            : constant Name_Id := N + 329;\n+   Name_No                             : constant Name_Id := N + 330;\n+   Name_No_Dependence                  : constant Name_Id := N + 331;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 332;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 333;\n+   Name_No_Requeue                     : constant Name_Id := N + 334;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 335;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 336;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 337;\n+   Name_On                             : constant Name_Id := N + 338;\n+   Name_Parameter_Types                : constant Name_Id := N + 339;\n+   Name_Reference                      : constant Name_Id := N + 340;\n+   Name_Restricted                     : constant Name_Id := N + 341;\n+   Name_Result_Mechanism               : constant Name_Id := N + 342;\n+   Name_Result_Type                    : constant Name_Id := N + 343;\n+   Name_Runtime                        : constant Name_Id := N + 344;\n+   Name_SB                             : constant Name_Id := N + 345;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 346;\n+   Name_Section                        : constant Name_Id := N + 347;\n+   Name_Semaphore                      : constant Name_Id := N + 348;\n+   Name_Simple_Barriers                : constant Name_Id := N + 349;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 350;\n+   Name_State                          : constant Name_Id := N + 351;\n+   Name_Static                         : constant Name_Id := N + 352;\n+   Name_Stack_Size                     : constant Name_Id := N + 353;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 354;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 355;\n+   Name_Task_Type                      : constant Name_Id := N + 356;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 357;\n+   Name_Top_Guard                      : constant Name_Id := N + 358;\n+   Name_UBA                            : constant Name_Id := N + 359;\n+   Name_UBS                            : constant Name_Id := N + 360;\n+   Name_UBSB                           : constant Name_Id := N + 361;\n+   Name_Unit_Name                      : constant Name_Id := N + 362;\n+   Name_Unknown                        : constant Name_Id := N + 363;\n+   Name_Unrestricted                   : constant Name_Id := N + 364;\n+   Name_Uppercase                      : constant Name_Id := N + 365;\n+   Name_User                           : constant Name_Id := N + 366;\n+   Name_VAX_Float                      : constant Name_Id := N + 367;\n+   Name_VMS                            : constant Name_Id := N + 368;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 369;\n+   Name_Working_Storage                : constant Name_Id := N + 370;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -663,466 +664,469 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 370;\n-   Name_Abort_Signal                   : constant Name_Id := N + 370; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 371;\n-   Name_Address                        : constant Name_Id := N + 372;\n-   Name_Address_Size                   : constant Name_Id := N + 373; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 374;\n-   Name_Alignment                      : constant Name_Id := N + 375;\n-   Name_Asm_Input                      : constant Name_Id := N + 376; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 377; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 378; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 379; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 380;\n-   Name_Bit_Position                   : constant Name_Id := N + 381; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 382;\n-   Name_Callable                       : constant Name_Id := N + 383;\n-   Name_Caller                         : constant Name_Id := N + 384;\n-   Name_Code_Address                   : constant Name_Id := N + 385; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 386;\n-   Name_Compose                        : constant Name_Id := N + 387;\n-   Name_Constrained                    : constant Name_Id := N + 388;\n-   Name_Count                          : constant Name_Id := N + 389;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 390; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 391;\n-   Name_Delta                          : constant Name_Id := N + 392;\n-   Name_Denorm                         : constant Name_Id := N + 393;\n-   Name_Digits                         : constant Name_Id := N + 394;\n-   Name_Elaborated                     : constant Name_Id := N + 395; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 396; -- Ada 83\n-   Name_Enabled                        : constant Name_Id := N + 397; -- GNAT\n-   Name_Enum_Rep                       : constant Name_Id := N + 398; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 399; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 400;\n-   Name_External_Tag                   : constant Name_Id := N + 401;\n-   Name_Fast_Math                      : constant Name_Id := N + 402; -- GNAT\n-   Name_First                          : constant Name_Id := N + 403;\n-   Name_First_Bit                      : constant Name_Id := N + 404;\n-   Name_Fixed_Value                    : constant Name_Id := N + 405; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 406;\n-   Name_Has_Access_Values              : constant Name_Id := N + 407; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 408; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 409;\n-   Name_Img                            : constant Name_Id := N + 410; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 411; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 412; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 413;\n-   Name_Last_Bit                       : constant Name_Id := N + 414;\n-   Name_Leading_Part                   : constant Name_Id := N + 415;\n-   Name_Length                         : constant Name_Id := N + 416;\n-   Name_Machine_Emax                   : constant Name_Id := N + 417;\n-   Name_Machine_Emin                   : constant Name_Id := N + 418;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 419;\n-   Name_Machine_Overflows              : constant Name_Id := N + 420;\n-   Name_Machine_Radix                  : constant Name_Id := N + 421;\n-   Name_Machine_Rounding               : constant Name_Id := N + 422; -- Ada 05\n-   Name_Machine_Rounds                 : constant Name_Id := N + 423;\n-   Name_Machine_Size                   : constant Name_Id := N + 424; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 425; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 426;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 427; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 428; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 429; -- Ada 05\n-   Name_Model_Emin                     : constant Name_Id := N + 430;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 431;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 432;\n-   Name_Model_Small                    : constant Name_Id := N + 433;\n-   Name_Modulus                        : constant Name_Id := N + 434;\n-   Name_Null_Parameter                 : constant Name_Id := N + 435; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 436; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 437;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 438; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 439;\n-   Name_Pos                            : constant Name_Id := N + 440;\n-   Name_Position                       : constant Name_Id := N + 441;\n-   Name_Priority                       : constant Name_Id := N + 442; -- Ada 05\n-   Name_Range                          : constant Name_Id := N + 443;\n-   Name_Range_Length                   : constant Name_Id := N + 444; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 445;\n-   Name_Safe_Emax                      : constant Name_Id := N + 446; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 447;\n-   Name_Safe_Large                     : constant Name_Id := N + 448; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 449;\n-   Name_Safe_Small                     : constant Name_Id := N + 450; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 451;\n-   Name_Scaling                        : constant Name_Id := N + 452;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 453;\n-   Name_Size                           : constant Name_Id := N + 454;\n-   Name_Small                          : constant Name_Id := N + 455;\n-   Name_Storage_Size                   : constant Name_Id := N + 456;\n-   Name_Storage_Unit                   : constant Name_Id := N + 457; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 458; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 459;\n-   Name_Target_Name                    : constant Name_Id := N + 460; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 461;\n-   Name_To_Address                     : constant Name_Id := N + 462; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 463; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 464; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 465;\n-   Name_Unchecked_Access               : constant Name_Id := N + 466;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 467;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 468; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 469; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 470; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 471;\n-   Name_Valid                          : constant Name_Id := N + 472;\n-   Name_Value_Size                     : constant Name_Id := N + 473; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 474;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 475; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 476; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 477;\n-   Name_Width                          : constant Name_Id := N + 478;\n-   Name_Word_Size                      : constant Name_Id := N + 479; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 371;\n+   Name_Abort_Signal                   : constant Name_Id := N + 371; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 372;\n+   Name_Address                        : constant Name_Id := N + 373;\n+   Name_Address_Size                   : constant Name_Id := N + 374; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 375;\n+   Name_Alignment                      : constant Name_Id := N + 376;\n+   Name_Asm_Input                      : constant Name_Id := N + 377; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 378; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 379; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 380; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 381;\n+   Name_Bit_Position                   : constant Name_Id := N + 382; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 383;\n+   Name_Callable                       : constant Name_Id := N + 384;\n+   Name_Caller                         : constant Name_Id := N + 385;\n+   Name_Code_Address                   : constant Name_Id := N + 386; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 387;\n+   Name_Compose                        : constant Name_Id := N + 388;\n+   Name_Constrained                    : constant Name_Id := N + 389;\n+   Name_Count                          : constant Name_Id := N + 390;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 391; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 392;\n+   Name_Delta                          : constant Name_Id := N + 393;\n+   Name_Denorm                         : constant Name_Id := N + 394;\n+   Name_Digits                         : constant Name_Id := N + 395;\n+   Name_Elaborated                     : constant Name_Id := N + 396; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 397; -- Ada 83\n+   Name_Enabled                        : constant Name_Id := N + 398; -- GNAT\n+   Name_Enum_Rep                       : constant Name_Id := N + 399; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 400; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 401;\n+   Name_External_Tag                   : constant Name_Id := N + 402;\n+   Name_Fast_Math                      : constant Name_Id := N + 403; -- GNAT\n+   Name_First                          : constant Name_Id := N + 404;\n+   Name_First_Bit                      : constant Name_Id := N + 405;\n+   Name_Fixed_Value                    : constant Name_Id := N + 406; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 407;\n+   Name_Has_Access_Values              : constant Name_Id := N + 408; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 409; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 410;\n+   Name_Img                            : constant Name_Id := N + 411; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 412; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 413; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 414;\n+   Name_Last_Bit                       : constant Name_Id := N + 415;\n+   Name_Leading_Part                   : constant Name_Id := N + 416;\n+   Name_Length                         : constant Name_Id := N + 417;\n+   Name_Machine_Emax                   : constant Name_Id := N + 418;\n+   Name_Machine_Emin                   : constant Name_Id := N + 419;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 420;\n+   Name_Machine_Overflows              : constant Name_Id := N + 421;\n+   Name_Machine_Radix                  : constant Name_Id := N + 422;\n+   Name_Machine_Rounding               : constant Name_Id := N + 423; -- Ada 05\n+   Name_Machine_Rounds                 : constant Name_Id := N + 424;\n+   Name_Machine_Size                   : constant Name_Id := N + 425; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 426; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 427;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 428; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 429; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 430; -- Ada 05\n+   Name_Model_Emin                     : constant Name_Id := N + 431;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 432;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 433;\n+   Name_Model_Small                    : constant Name_Id := N + 434;\n+   Name_Modulus                        : constant Name_Id := N + 435;\n+   Name_Null_Parameter                 : constant Name_Id := N + 436; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 437; -- GNAT\n+   Name_Old                            : constant Name_Id := N + 438; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 439;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 440; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 441;\n+   Name_Pos                            : constant Name_Id := N + 442;\n+   Name_Position                       : constant Name_Id := N + 443;\n+   Name_Priority                       : constant Name_Id := N + 444; -- Ada 05\n+   Name_Range                          : constant Name_Id := N + 445;\n+   Name_Range_Length                   : constant Name_Id := N + 446; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 447;\n+   Name_Safe_Emax                      : constant Name_Id := N + 448; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 449;\n+   Name_Safe_Large                     : constant Name_Id := N + 450; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 451;\n+   Name_Safe_Small                     : constant Name_Id := N + 452; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 453;\n+   Name_Scaling                        : constant Name_Id := N + 454;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 455;\n+   Name_Size                           : constant Name_Id := N + 456;\n+   Name_Small                          : constant Name_Id := N + 457;\n+   Name_Storage_Size                   : constant Name_Id := N + 458;\n+   Name_Storage_Unit                   : constant Name_Id := N + 459; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 460; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 461;\n+   Name_Target_Name                    : constant Name_Id := N + 462; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 463;\n+   Name_To_Address                     : constant Name_Id := N + 464; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 465; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 466; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 467;\n+   Name_Unchecked_Access               : constant Name_Id := N + 468;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 469;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 470; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 471; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 472; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 473;\n+   Name_Valid                          : constant Name_Id := N + 474;\n+   Name_Value_Size                     : constant Name_Id := N + 475; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 476;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 477; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 478; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 479;\n+   Name_Width                          : constant Name_Id := N + 480;\n+   Name_Word_Size                      : constant Name_Id := N + 481; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 480;\n-   Name_Adjacent                       : constant Name_Id := N + 480;\n-   Name_Ceiling                        : constant Name_Id := N + 481;\n-   Name_Copy_Sign                      : constant Name_Id := N + 482;\n-   Name_Floor                          : constant Name_Id := N + 483;\n-   Name_Fraction                       : constant Name_Id := N + 484;\n-   Name_Image                          : constant Name_Id := N + 485;\n-   Name_Input                          : constant Name_Id := N + 486;\n-   Name_Machine                        : constant Name_Id := N + 487;\n-   Name_Max                            : constant Name_Id := N + 488;\n-   Name_Min                            : constant Name_Id := N + 489;\n-   Name_Model                          : constant Name_Id := N + 490;\n-   Name_Pred                           : constant Name_Id := N + 491;\n-   Name_Remainder                      : constant Name_Id := N + 492;\n-   Name_Rounding                       : constant Name_Id := N + 493;\n-   Name_Succ                           : constant Name_Id := N + 494;\n-   Name_Truncation                     : constant Name_Id := N + 495;\n-   Name_Value                          : constant Name_Id := N + 496;\n-   Name_Wide_Image                     : constant Name_Id := N + 497;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 498;\n-   Name_Wide_Value                     : constant Name_Id := N + 499;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 500;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 500;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 482;\n+   Name_Adjacent                       : constant Name_Id := N + 482;\n+   Name_Ceiling                        : constant Name_Id := N + 483;\n+   Name_Copy_Sign                      : constant Name_Id := N + 484;\n+   Name_Floor                          : constant Name_Id := N + 485;\n+   Name_Fraction                       : constant Name_Id := N + 486;\n+   Name_Image                          : constant Name_Id := N + 487;\n+   Name_Input                          : constant Name_Id := N + 488;\n+   Name_Machine                        : constant Name_Id := N + 489;\n+   Name_Max                            : constant Name_Id := N + 490;\n+   Name_Min                            : constant Name_Id := N + 491;\n+   Name_Model                          : constant Name_Id := N + 492;\n+   Name_Pred                           : constant Name_Id := N + 493;\n+   Name_Remainder                      : constant Name_Id := N + 494;\n+   Name_Rounding                       : constant Name_Id := N + 495;\n+   Name_Succ                           : constant Name_Id := N + 496;\n+   Name_Truncation                     : constant Name_Id := N + 497;\n+   Name_Value                          : constant Name_Id := N + 498;\n+   Name_Wide_Image                     : constant Name_Id := N + 499;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 500;\n+   Name_Wide_Value                     : constant Name_Id := N + 501;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 502;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 502;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 501;\n-   Name_Output                         : constant Name_Id := N + 501;\n-   Name_Read                           : constant Name_Id := N + 502;\n-   Name_Write                          : constant Name_Id := N + 503;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 503;\n+   First_Procedure_Attribute           : constant Name_Id := N + 503;\n+   Name_Output                         : constant Name_Id := N + 503;\n+   Name_Read                           : constant Name_Id := N + 504;\n+   Name_Write                          : constant Name_Id := N + 505;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 505;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 504;\n-   Name_Elab_Body                      : constant Name_Id := N + 504; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 505; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 506;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 506;\n+   Name_Elab_Body                      : constant Name_Id := N + 506; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 507; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 508;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 507;\n-   Name_Base                           : constant Name_Id := N + 507;\n-   Name_Class                          : constant Name_Id := N + 508;\n-   Name_Stub_Type                      : constant Name_Id := N + 509;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 509;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 509;\n-   Last_Attribute_Name                 : constant Name_Id := N + 509;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 509;\n+   Name_Base                           : constant Name_Id := N + 509;\n+   Name_Class                          : constant Name_Id := N + 510;\n+   Name_Stub_Type                      : constant Name_Id := N + 511;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 511;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 511;\n+   Last_Attribute_Name                 : constant Name_Id := N + 511;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 510;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 510;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 511;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 511;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 512;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 512;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 513;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 513;\n \n    --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 512;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 512;\n-   Name_Priority_Queuing               : constant Name_Id := N + 513;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 513;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 514;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 514;\n+   Name_Priority_Queuing               : constant Name_Id := N + 515;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 515;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Within_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 514;\n-   Name_EDF_Across_Priorities          : constant Name_Id := N + 514;\n-   Name_FIFO_Within_Priorities         : constant Name_Id := N + 515;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 516;\n+   Name_EDF_Across_Priorities          : constant Name_Id := N + 516;\n+   Name_FIFO_Within_Priorities         : constant Name_Id := N + 517;\n    Name_Non_Preemptive_Within_Priorities\n                                        : constant Name_Id := N + 513;\n-   Name_Round_Robin_Within_Priorities  : constant Name_Id := N + 516;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 516;\n+   Name_Round_Robin_Within_Priorities  : constant Name_Id := N + 518;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 518;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 517;\n-   Name_Access_Check                   : constant Name_Id := N + 517;\n-   Name_Accessibility_Check            : constant Name_Id := N + 518;\n-   Name_Alignment_Check                : constant Name_Id := N + 519; -- GNAT\n-   Name_Discriminant_Check             : constant Name_Id := N + 520;\n-   Name_Division_Check                 : constant Name_Id := N + 521;\n-   Name_Elaboration_Check              : constant Name_Id := N + 522;\n-   Name_Index_Check                    : constant Name_Id := N + 523;\n-   Name_Length_Check                   : constant Name_Id := N + 524;\n-   Name_Overflow_Check                 : constant Name_Id := N + 525;\n-   Name_Range_Check                    : constant Name_Id := N + 526;\n-   Name_Storage_Check                  : constant Name_Id := N + 527;\n-   Name_Tag_Check                      : constant Name_Id := N + 528;\n-   Name_Validity_Check                 : constant Name_Id := N + 529; -- GNAT\n-   Name_All_Checks                     : constant Name_Id := N + 530;\n-   Last_Check_Name                     : constant Name_Id := N + 530;\n+   First_Check_Name                    : constant Name_Id := N + 519;\n+   Name_Access_Check                   : constant Name_Id := N + 519;\n+   Name_Accessibility_Check            : constant Name_Id := N + 520;\n+   Name_Alignment_Check                : constant Name_Id := N + 521; -- GNAT\n+   Name_Discriminant_Check             : constant Name_Id := N + 522;\n+   Name_Division_Check                 : constant Name_Id := N + 523;\n+   Name_Elaboration_Check              : constant Name_Id := N + 524;\n+   Name_Index_Check                    : constant Name_Id := N + 525;\n+   Name_Length_Check                   : constant Name_Id := N + 526;\n+   Name_Overflow_Check                 : constant Name_Id := N + 527;\n+   Name_Range_Check                    : constant Name_Id := N + 528;\n+   Name_Storage_Check                  : constant Name_Id := N + 529;\n+   Name_Tag_Check                      : constant Name_Id := N + 530;\n+   Name_Validity_Check                 : constant Name_Id := N + 531; -- GNAT\n+   Name_All_Checks                     : constant Name_Id := N + 532;\n+   Last_Check_Name                     : constant Name_Id := N + 532;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 531;\n-   Name_Abs                            : constant Name_Id := N + 532;\n-   Name_Accept                         : constant Name_Id := N + 533;\n-   Name_And                            : constant Name_Id := N + 534;\n-   Name_All                            : constant Name_Id := N + 535;\n-   Name_Array                          : constant Name_Id := N + 536;\n-   Name_At                             : constant Name_Id := N + 537;\n-   Name_Begin                          : constant Name_Id := N + 538;\n-   Name_Body                           : constant Name_Id := N + 539;\n-   Name_Case                           : constant Name_Id := N + 540;\n-   Name_Constant                       : constant Name_Id := N + 541;\n-   Name_Declare                        : constant Name_Id := N + 542;\n-   Name_Delay                          : constant Name_Id := N + 543;\n-   Name_Do                             : constant Name_Id := N + 544;\n-   Name_Else                           : constant Name_Id := N + 545;\n-   Name_Elsif                          : constant Name_Id := N + 546;\n-   Name_End                            : constant Name_Id := N + 547;\n-   Name_Entry                          : constant Name_Id := N + 548;\n-   Name_Exception                      : constant Name_Id := N + 549;\n-   Name_Exit                           : constant Name_Id := N + 550;\n-   Name_For                            : constant Name_Id := N + 551;\n-   Name_Function                       : constant Name_Id := N + 552;\n-   Name_Generic                        : constant Name_Id := N + 553;\n-   Name_Goto                           : constant Name_Id := N + 554;\n-   Name_If                             : constant Name_Id := N + 555;\n-   Name_In                             : constant Name_Id := N + 556;\n-   Name_Is                             : constant Name_Id := N + 557;\n-   Name_Limited                        : constant Name_Id := N + 558;\n-   Name_Loop                           : constant Name_Id := N + 559;\n-   Name_New                            : constant Name_Id := N + 560;\n-   Name_Not                            : constant Name_Id := N + 561;\n-   Name_Null                           : constant Name_Id := N + 562;\n-   Name_Of                             : constant Name_Id := N + 563;\n-   Name_Or                             : constant Name_Id := N + 564;\n-   Name_Others                         : constant Name_Id := N + 565;\n-   Name_Out                            : constant Name_Id := N + 566;\n-   Name_Package                        : constant Name_Id := N + 567;\n-   Name_Pragma                         : constant Name_Id := N + 568;\n-   Name_Private                        : constant Name_Id := N + 569;\n-   Name_Procedure                      : constant Name_Id := N + 570;\n-   Name_Raise                          : constant Name_Id := N + 571;\n-   Name_Record                         : constant Name_Id := N + 572;\n-   Name_Rem                            : constant Name_Id := N + 573;\n-   Name_Renames                        : constant Name_Id := N + 574;\n-   Name_Return                         : constant Name_Id := N + 575;\n-   Name_Reverse                        : constant Name_Id := N + 576;\n-   Name_Select                         : constant Name_Id := N + 577;\n-   Name_Separate                       : constant Name_Id := N + 578;\n-   Name_Subtype                        : constant Name_Id := N + 579;\n-   Name_Task                           : constant Name_Id := N + 580;\n-   Name_Terminate                      : constant Name_Id := N + 581;\n-   Name_Then                           : constant Name_Id := N + 582;\n-   Name_Type                           : constant Name_Id := N + 583;\n-   Name_Use                            : constant Name_Id := N + 584;\n-   Name_When                           : constant Name_Id := N + 585;\n-   Name_While                          : constant Name_Id := N + 586;\n-   Name_With                           : constant Name_Id := N + 587;\n-   Name_Xor                            : constant Name_Id := N + 588;\n+   Name_Abort                          : constant Name_Id := N + 533;\n+   Name_Abs                            : constant Name_Id := N + 534;\n+   Name_Accept                         : constant Name_Id := N + 535;\n+   Name_And                            : constant Name_Id := N + 536;\n+   Name_All                            : constant Name_Id := N + 537;\n+   Name_Array                          : constant Name_Id := N + 538;\n+   Name_At                             : constant Name_Id := N + 539;\n+   Name_Begin                          : constant Name_Id := N + 540;\n+   Name_Body                           : constant Name_Id := N + 541;\n+   Name_Case                           : constant Name_Id := N + 542;\n+   Name_Constant                       : constant Name_Id := N + 543;\n+   Name_Declare                        : constant Name_Id := N + 544;\n+   Name_Delay                          : constant Name_Id := N + 545;\n+   Name_Do                             : constant Name_Id := N + 546;\n+   Name_Else                           : constant Name_Id := N + 547;\n+   Name_Elsif                          : constant Name_Id := N + 548;\n+   Name_End                            : constant Name_Id := N + 549;\n+   Name_Entry                          : constant Name_Id := N + 550;\n+   Name_Exception                      : constant Name_Id := N + 551;\n+   Name_Exit                           : constant Name_Id := N + 552;\n+   Name_For                            : constant Name_Id := N + 553;\n+   Name_Function                       : constant Name_Id := N + 554;\n+   Name_Generic                        : constant Name_Id := N + 555;\n+   Name_Goto                           : constant Name_Id := N + 556;\n+   Name_If                             : constant Name_Id := N + 557;\n+   Name_In                             : constant Name_Id := N + 558;\n+   Name_Is                             : constant Name_Id := N + 559;\n+   Name_Limited                        : constant Name_Id := N + 560;\n+   Name_Loop                           : constant Name_Id := N + 561;\n+   Name_New                            : constant Name_Id := N + 562;\n+   Name_Not                            : constant Name_Id := N + 563;\n+   Name_Null                           : constant Name_Id := N + 564;\n+   Name_Of                             : constant Name_Id := N + 565;\n+   Name_Or                             : constant Name_Id := N + 566;\n+   Name_Others                         : constant Name_Id := N + 567;\n+   Name_Out                            : constant Name_Id := N + 568;\n+   Name_Package                        : constant Name_Id := N + 569;\n+   Name_Pragma                         : constant Name_Id := N + 570;\n+   Name_Private                        : constant Name_Id := N + 571;\n+   Name_Procedure                      : constant Name_Id := N + 572;\n+   Name_Raise                          : constant Name_Id := N + 573;\n+   Name_Record                         : constant Name_Id := N + 574;\n+   Name_Rem                            : constant Name_Id := N + 575;\n+   Name_Renames                        : constant Name_Id := N + 576;\n+   Name_Return                         : constant Name_Id := N + 577;\n+   Name_Reverse                        : constant Name_Id := N + 578;\n+   Name_Select                         : constant Name_Id := N + 579;\n+   Name_Separate                       : constant Name_Id := N + 580;\n+   Name_Subtype                        : constant Name_Id := N + 581;\n+   Name_Task                           : constant Name_Id := N + 582;\n+   Name_Terminate                      : constant Name_Id := N + 583;\n+   Name_Then                           : constant Name_Id := N + 584;\n+   Name_Type                           : constant Name_Id := N + 585;\n+   Name_Use                            : constant Name_Id := N + 586;\n+   Name_When                           : constant Name_Id := N + 587;\n+   Name_While                          : constant Name_Id := N + 588;\n+   Name_With                           : constant Name_Id := N + 589;\n+   Name_Xor                            : constant Name_Id := N + 590;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 589;\n-   Name_Divide                          : constant Name_Id := N + 589;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 590;\n-   Name_Exception_Information           : constant Name_Id := N + 591;\n-   Name_Exception_Message               : constant Name_Id := N + 592;\n-   Name_Exception_Name                  : constant Name_Id := N + 593;\n-   Name_File                            : constant Name_Id := N + 594;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 595;\n-   Name_Import_Address                  : constant Name_Id := N + 596;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 597;\n-   Name_Import_Value                    : constant Name_Id := N + 598;\n-   Name_Is_Negative                     : constant Name_Id := N + 599;\n-   Name_Line                            : constant Name_Id := N + 600;\n-   Name_Rotate_Left                     : constant Name_Id := N + 601;\n-   Name_Rotate_Right                    : constant Name_Id := N + 602;\n-   Name_Shift_Left                      : constant Name_Id := N + 603;\n-   Name_Shift_Right                     : constant Name_Id := N + 604;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 605;\n-   Name_Source_Location                 : constant Name_Id := N + 606;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 607;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 608;\n-   Name_To_Pointer                      : constant Name_Id := N + 609;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 609;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 591;\n+   Name_Divide                          : constant Name_Id := N + 591;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 592;\n+   Name_Exception_Information           : constant Name_Id := N + 593;\n+   Name_Exception_Message               : constant Name_Id := N + 594;\n+   Name_Exception_Name                  : constant Name_Id := N + 595;\n+   Name_File                            : constant Name_Id := N + 596;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 597;\n+   Name_Import_Address                  : constant Name_Id := N + 598;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 599;\n+   Name_Import_Value                    : constant Name_Id := N + 600;\n+   Name_Is_Negative                     : constant Name_Id := N + 601;\n+   Name_Line                            : constant Name_Id := N + 602;\n+   Name_Rotate_Left                     : constant Name_Id := N + 603;\n+   Name_Rotate_Right                    : constant Name_Id := N + 604;\n+   Name_Shift_Left                      : constant Name_Id := N + 605;\n+   Name_Shift_Right                     : constant Name_Id := N + 606;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 607;\n+   Name_Source_Location                 : constant Name_Id := N + 608;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 609;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 610;\n+   Name_To_Pointer                      : constant Name_Id := N + 611;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 611;\n \n    --  Names used in processing intrinsic calls\n \n-   Name_Free                           : constant Name_Id := N + 610;\n+   Name_Free                           : constant Name_Id := N + 612;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 611;\n-   Name_Abstract                       : constant Name_Id := N + 611;\n-   Name_Aliased                        : constant Name_Id := N + 612;\n-   Name_Protected                      : constant Name_Id := N + 613;\n-   Name_Until                          : constant Name_Id := N + 614;\n-   Name_Requeue                        : constant Name_Id := N + 615;\n-   Name_Tagged                         : constant Name_Id := N + 616;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 616;\n+   First_95_Reserved_Word              : constant Name_Id := N + 613;\n+   Name_Abstract                       : constant Name_Id := N + 613;\n+   Name_Aliased                        : constant Name_Id := N + 614;\n+   Name_Protected                      : constant Name_Id := N + 615;\n+   Name_Until                          : constant Name_Id := N + 616;\n+   Name_Requeue                        : constant Name_Id := N + 617;\n+   Name_Tagged                         : constant Name_Id := N + 618;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 618;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 617;\n+   Name_Raise_Exception                : constant Name_Id := N + 619;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 618;\n-   Name_Archive_Builder                : constant Name_Id := N + 619;\n-   Name_Archive_Indexer                : constant Name_Id := N + 620;\n-   Name_Archive_Suffix                 : constant Name_Id := N + 621;\n-   Name_Binder                         : constant Name_Id := N + 622;\n-   Name_Binder_Prefix                  : constant Name_Id := N + 623;\n-   Name_Body_Suffix                    : constant Name_Id := N + 624;\n-   Name_Builder                        : constant Name_Id := N + 625;\n-   Name_Builder_Switches               : constant Name_Id := N + 626;\n-   Name_Compiler                       : constant Name_Id := N + 627;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 628;\n-   Name_Config_Body_File_Name          : constant Name_Id := N + 629;\n-   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 630;\n-   Name_Config_File_Switches           : constant Name_Id := N + 631;\n-   Name_Config_File_Unique             : constant Name_Id := N + 632;\n-   Name_Config_Spec_File_Name          : constant Name_Id := N + 633;\n-   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 634;\n-   Name_Cross_Reference                : constant Name_Id := N + 635;\n-   Name_Default_Language               : constant Name_Id := N + 636;\n-   Name_Default_Switches               : constant Name_Id := N + 637;\n-   Name_Dependency_Driver              : constant Name_Id := N + 638;\n-   Name_Dependency_File_Kind           : constant Name_Id := N + 639;\n-   Name_Dependency_Switches            : constant Name_Id := N + 640;\n-   Name_Driver                         : constant Name_Id := N + 641;\n-   Name_Excluded_Source_Dirs           : constant Name_Id := N + 642;\n-   Name_Excluded_Source_Files          : constant Name_Id := N + 643;\n-   Name_Exec_Dir                       : constant Name_Id := N + 644;\n-   Name_Executable                     : constant Name_Id := N + 645;\n-   Name_Executable_Suffix              : constant Name_Id := N + 646;\n-   Name_Extends                        : constant Name_Id := N + 647;\n-   Name_Externally_Built               : constant Name_Id := N + 648;\n-   Name_Finder                         : constant Name_Id := N + 649;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 650;\n-   Name_Global_Config_File             : constant Name_Id := N + 651;\n-   Name_Gnatls                         : constant Name_Id := N + 652;\n-   Name_Gnatstub                       : constant Name_Id := N + 653;\n-   Name_Implementation                 : constant Name_Id := N + 654;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 655;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 656;\n-   Name_Include_Switches               : constant Name_Id := N + 657;\n-   Name_Include_Path                   : constant Name_Id := N + 658;\n-   Name_Include_Path_File              : constant Name_Id := N + 659;\n-   Name_Language_Kind                  : constant Name_Id := N + 660;\n-   Name_Language_Processing            : constant Name_Id := N + 661;\n-   Name_Languages                      : constant Name_Id := N + 662;\n-   Name_Library_Ali_Dir                : constant Name_Id := N + 663;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 664;\n-   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 665;\n-   Name_Library_Builder                : constant Name_Id := N + 666;\n-   Name_Library_Dir                    : constant Name_Id := N + 667;\n-   Name_Library_GCC                    : constant Name_Id := N + 668;\n-   Name_Library_Interface              : constant Name_Id := N + 669;\n-   Name_Library_Kind                   : constant Name_Id := N + 670;\n-   Name_Library_Name                   : constant Name_Id := N + 671;\n-   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 672;\n-   Name_Library_Options                : constant Name_Id := N + 673;\n-   Name_Library_Partial_Linker         : constant Name_Id := N + 674;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 675;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 676;\n-   Name_Library_Support                : constant Name_Id := N + 677;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 678;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 679;\n-   Name_Library_Version                : constant Name_Id := N + 680;\n-   Name_Library_Version_Switches       : constant Name_Id := N + 681;\n-   Name_Linker                         : constant Name_Id := N + 682;\n-   Name_Linker_Executable_Option       : constant Name_Id := N + 683;\n-   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 684;\n-   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 685;\n-   Name_Local_Config_File              : constant Name_Id := N + 686;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 687;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 688;\n-   Name_Mapping_File_Switches          : constant Name_Id := N + 689;\n-   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 690;\n-   Name_Mapping_Body_Suffix            : constant Name_Id := N + 691;\n-   Name_Metrics                        : constant Name_Id := N + 692;\n-   Name_Naming                         : constant Name_Id := N + 693;\n-   Name_Objects_Path                   : constant Name_Id := N + 694;\n-   Name_Objects_Path_File              : constant Name_Id := N + 695;\n-   Name_Object_Dir                     : constant Name_Id := N + 696;\n-   Name_Pic_Option                     : constant Name_Id := N + 697;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 698;\n-   Name_Prefix                         : constant Name_Id := N + 699;\n-   Name_Project                        : constant Name_Id := N + 700;\n-   Name_Roots                          : constant Name_Id := N + 701;\n-   Name_Required_Switches              : constant Name_Id := N + 702;\n-   Name_Run_Path_Option                : constant Name_Id := N + 703;\n-   Name_Runtime_Project                : constant Name_Id := N + 704;\n-   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 705;\n-   Name_Shared_Library_Prefix          : constant Name_Id := N + 706;\n-   Name_Shared_Library_Suffix          : constant Name_Id := N + 707;\n-   Name_Separate_Suffix                : constant Name_Id := N + 708;\n-   Name_Source_Dirs                    : constant Name_Id := N + 709;\n-   Name_Source_Files                   : constant Name_Id := N + 710;\n-   Name_Source_List_File               : constant Name_Id := N + 711;\n-   Name_Spec                           : constant Name_Id := N + 712;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 713;\n-   Name_Specification                  : constant Name_Id := N + 714;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 715;\n-   Name_Specification_Suffix           : constant Name_Id := N + 716;\n-   Name_Stack                          : constant Name_Id := N + 717;\n-   Name_Switches                       : constant Name_Id := N + 718;\n-   Name_Symbolic_Link_Supported        : constant Name_Id := N + 719;\n-   Name_Toolchain_Description          : constant Name_Id := N + 720;\n-   Name_Toolchain_Version              : constant Name_Id := N + 721;\n-   Name_Runtime_Library_Dir            : constant Name_Id := N + 722;\n+   Name_Ada_Roots                      : constant Name_Id := N + 620;\n+   Name_Archive_Builder                : constant Name_Id := N + 621;\n+   Name_Archive_Indexer                : constant Name_Id := N + 622;\n+   Name_Archive_Suffix                 : constant Name_Id := N + 623;\n+   Name_Binder                         : constant Name_Id := N + 624;\n+   Name_Binder_Prefix                  : constant Name_Id := N + 625;\n+   Name_Body_Suffix                    : constant Name_Id := N + 626;\n+   Name_Builder                        : constant Name_Id := N + 627;\n+   Name_Builder_Switches               : constant Name_Id := N + 628;\n+   Name_Compiler                       : constant Name_Id := N + 629;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 630;\n+   Name_Config_Body_File_Name          : constant Name_Id := N + 631;\n+   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 632;\n+   Name_Config_File_Switches           : constant Name_Id := N + 633;\n+   Name_Config_File_Unique             : constant Name_Id := N + 634;\n+   Name_Config_Spec_File_Name          : constant Name_Id := N + 635;\n+   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 636;\n+   Name_Cross_Reference                : constant Name_Id := N + 637;\n+   Name_Default_Language               : constant Name_Id := N + 638;\n+   Name_Default_Switches               : constant Name_Id := N + 639;\n+   Name_Dependency_Driver              : constant Name_Id := N + 640;\n+   Name_Dependency_File_Kind           : constant Name_Id := N + 641;\n+   Name_Dependency_Switches            : constant Name_Id := N + 642;\n+   Name_Driver                         : constant Name_Id := N + 643;\n+   Name_Excluded_Source_Dirs           : constant Name_Id := N + 644;\n+   Name_Excluded_Source_Files          : constant Name_Id := N + 645;\n+   Name_Exec_Dir                       : constant Name_Id := N + 646;\n+   Name_Executable                     : constant Name_Id := N + 647;\n+   Name_Executable_Suffix              : constant Name_Id := N + 648;\n+   Name_Extends                        : constant Name_Id := N + 649;\n+   Name_Externally_Built               : constant Name_Id := N + 650;\n+   Name_Finder                         : constant Name_Id := N + 651;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 652;\n+   Name_Global_Config_File             : constant Name_Id := N + 653;\n+   Name_Gnatls                         : constant Name_Id := N + 654;\n+   Name_Gnatstub                       : constant Name_Id := N + 655;\n+   Name_Implementation                 : constant Name_Id := N + 656;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 657;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 658;\n+   Name_Include_Switches               : constant Name_Id := N + 659;\n+   Name_Include_Path                   : constant Name_Id := N + 660;\n+   Name_Include_Path_File              : constant Name_Id := N + 661;\n+   Name_Language_Kind                  : constant Name_Id := N + 662;\n+   Name_Language_Processing            : constant Name_Id := N + 663;\n+   Name_Languages                      : constant Name_Id := N + 664;\n+   Name_Library_Ali_Dir                : constant Name_Id := N + 665;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 666;\n+   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 667;\n+   Name_Library_Builder                : constant Name_Id := N + 668;\n+   Name_Library_Dir                    : constant Name_Id := N + 669;\n+   Name_Library_GCC                    : constant Name_Id := N + 670;\n+   Name_Library_Interface              : constant Name_Id := N + 671;\n+   Name_Library_Kind                   : constant Name_Id := N + 672;\n+   Name_Library_Name                   : constant Name_Id := N + 673;\n+   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 674;\n+   Name_Library_Options                : constant Name_Id := N + 675;\n+   Name_Library_Partial_Linker         : constant Name_Id := N + 676;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 677;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 678;\n+   Name_Library_Support                : constant Name_Id := N + 679;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 680;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 681;\n+   Name_Library_Version                : constant Name_Id := N + 682;\n+   Name_Library_Version_Switches       : constant Name_Id := N + 683;\n+   Name_Linker                         : constant Name_Id := N + 684;\n+   Name_Linker_Executable_Option       : constant Name_Id := N + 685;\n+   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 686;\n+   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 687;\n+   Name_Local_Config_File              : constant Name_Id := N + 688;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 689;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 690;\n+   Name_Mapping_File_Switches          : constant Name_Id := N + 691;\n+   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 692;\n+   Name_Mapping_Body_Suffix            : constant Name_Id := N + 693;\n+   Name_Metrics                        : constant Name_Id := N + 694;\n+   Name_Naming                         : constant Name_Id := N + 695;\n+   Name_Objects_Path                   : constant Name_Id := N + 696;\n+   Name_Objects_Path_File              : constant Name_Id := N + 697;\n+   Name_Object_Dir                     : constant Name_Id := N + 698;\n+   Name_Pic_Option                     : constant Name_Id := N + 699;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 700;\n+   Name_Prefix                         : constant Name_Id := N + 701;\n+   Name_Project                        : constant Name_Id := N + 702;\n+   Name_Roots                          : constant Name_Id := N + 703;\n+   Name_Required_Switches              : constant Name_Id := N + 704;\n+   Name_Run_Path_Option                : constant Name_Id := N + 705;\n+   Name_Runtime_Project                : constant Name_Id := N + 706;\n+   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 707;\n+   Name_Shared_Library_Prefix          : constant Name_Id := N + 708;\n+   Name_Shared_Library_Suffix          : constant Name_Id := N + 709;\n+   Name_Separate_Suffix                : constant Name_Id := N + 710;\n+   Name_Source_Dirs                    : constant Name_Id := N + 711;\n+   Name_Source_Files                   : constant Name_Id := N + 712;\n+   Name_Source_List_File               : constant Name_Id := N + 713;\n+   Name_Spec                           : constant Name_Id := N + 714;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 715;\n+   Name_Specification                  : constant Name_Id := N + 716;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 717;\n+   Name_Specification_Suffix           : constant Name_Id := N + 718;\n+   Name_Stack                          : constant Name_Id := N + 719;\n+   Name_Switches                       : constant Name_Id := N + 720;\n+   Name_Symbolic_Link_Supported        : constant Name_Id := N + 721;\n+   Name_Sync                           : constant Name_Id := N + 722;\n+   Name_Synchronize                    : constant Name_Id := N + 723;\n+   Name_Toolchain_Description          : constant Name_Id := N + 724;\n+   Name_Toolchain_Version              : constant Name_Id := N + 725;\n+   Name_Runtime_Library_Dir            : constant Name_Id := N + 726;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 723;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 727;\n \n    --  Ada 2005 reserved words\n \n-   First_2005_Reserved_Word            : constant Name_Id := N + 724;\n-   Name_Interface                      : constant Name_Id := N + 724;\n-   Name_Overriding                     : constant Name_Id := N + 725;\n-   Name_Synchronized                   : constant Name_Id := N + 726;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 726;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 728;\n+   Name_Interface                      : constant Name_Id := N + 728;\n+   Name_Overriding                     : constant Name_Id := N + 729;\n+   Name_Synchronized                   : constant Name_Id := N + 730;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 730;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 726;\n+   Last_Predefined_Name                : constant Name_Id := N + 730;\n \n    ---------------------------------------\n    -- Subtypes Defining Name Categories --\n@@ -1206,6 +1210,7 @@ package Snames is\n       Attribute_Modulus,\n       Attribute_Null_Parameter,\n       Attribute_Object_Size,\n+      Attribute_Old,\n       Attribute_Partition_ID,\n       Attribute_Passed_By_Reference,\n       Attribute_Pool_Address,\n@@ -1292,6 +1297,9 @@ package Snames is\n       Attribute_Class,\n       Attribute_Stub_Type);\n \n+   type Attribute_Class_Array is array (Attribute_Id) of Boolean;\n+   --  Type used to build attribute classification flag arrays\n+\n    ------------------------------------\n    -- Convention Name ID Definitions --\n    ------------------------------------\n@@ -1376,6 +1384,7 @@ package Snames is\n       Pragma_No_Run_Time,\n       Pragma_No_Strict_Aliasing,\n       Pragma_Normalize_Scalars,\n+      Pragma_Optimize_Alignment,\n       Pragma_Polling,\n       Pragma_Persistent_BSS,\n       Pragma_Priority_Specific_Dispatching,\n@@ -1538,13 +1547,6 @@ package Snames is\n       Task_Dispatching_FIFO_Within_Priorities);\n    --  Id values used to identify task dispatching policies\n \n-   ------------------\n-   -- Helper types --\n-   ------------------\n-\n-   type Attribute_Class_Array is array (Attribute_Id) of Boolean;\n-   --  Type used to build attribute classification flag arrays\n-\n    -----------------\n    -- Subprograms --\n    -----------------"}, {"sha": "2f282edf4d18e20d2a662a7ba3354b4e71277fb1", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 208, "deletions": 206, "changes": 414, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=e10dab7f8dc252e8fa7cb42a4f4452b0f493bdcc", "patch": "@@ -111,79 +111,80 @@ extern unsigned char Get_Attribute_Id (int);\n #define  Attr_Modulus                       64\n #define  Attr_Null_Parameter                65\n #define  Attr_Object_Size                   66\n-#define  Attr_Partition_ID                  67\n-#define  Attr_Passed_By_Reference           68\n-#define  Attr_Pool_Address                  69\n-#define  Attr_Pos                           70\n-#define  Attr_Position                      71\n-#define  Attr_Priority                      72\n-#define  Attr_Range                         73\n-#define  Attr_Range_Length                  74\n-#define  Attr_Round                         75\n-#define  Attr_Safe_Emax                     76\n-#define  Attr_Safe_First                    77\n-#define  Attr_Safe_Large                    78\n-#define  Attr_Safe_Last                     79\n-#define  Attr_Safe_Small                    80\n-#define  Attr_Scale                         81\n-#define  Attr_Scaling                       82\n-#define  Attr_Signed_Zeros                  83\n-#define  Attr_Size                          84\n-#define  Attr_Small                         85\n-#define  Attr_Storage_Size                  86\n-#define  Attr_Storage_Unit                  87\n-#define  Attr_Stream_Size                   88\n-#define  Attr_Tag                           89\n-#define  Attr_Target_Name                   90\n-#define  Attr_Terminated                    91\n-#define  Attr_To_Address                    92\n-#define  Attr_Type_Class                    93\n-#define  Attr_UET_Address                   94\n-#define  Attr_Unbiased_Rounding             95\n-#define  Attr_Unchecked_Access              96\n-#define  Attr_Unconstrained_Array           97\n-#define  Attr_Universal_Literal_String      98\n-#define  Attr_Unrestricted_Access           99\n-#define  Attr_VADS_Size                     100\n-#define  Attr_Val                           101\n-#define  Attr_Valid                         102\n-#define  Attr_Value_Size                    103\n-#define  Attr_Version                       104\n-#define  Attr_Wchar_T_Size                  105\n-#define  Attr_Wide_Wide_Width               106\n-#define  Attr_Wide_Width                    107\n-#define  Attr_Width                         108\n-#define  Attr_Word_Size                     109\n-#define  Attr_Adjacent                      110\n-#define  Attr_Ceiling                       111\n-#define  Attr_Copy_Sign                     112\n-#define  Attr_Floor                         113\n-#define  Attr_Fraction                      114\n-#define  Attr_Image                         115\n-#define  Attr_Input                         116\n-#define  Attr_Machine                       117\n-#define  Attr_Max                           118\n-#define  Attr_Min                           119\n-#define  Attr_Model                         120\n-#define  Attr_Pred                          121\n-#define  Attr_Remainder                     122\n-#define  Attr_Rounding                      123\n-#define  Attr_Succ                          124\n-#define  Attr_Truncation                    125\n-#define  Attr_Value                         126\n-#define  Attr_Wide_Image                    127\n-#define  Attr_Wide_Wide_Image               128\n-#define  Attr_Wide_Value                    129\n-#define  Attr_Wide_Wide_Value               130\n-#define  Attr_Output                        131\n-#define  Attr_Read                          132\n-#define  Attr_Write                         133\n-#define  Attr_Elab_Body                     134\n-#define  Attr_Elab_Spec                     135\n-#define  Attr_Storage_Pool                  136\n-#define  Attr_Base                          137\n-#define  Attr_Class                         138\n-#define  Attr_Stub_Type                     139\n+#define  Attr_Old                           67\n+#define  Attr_Partition_ID                  68\n+#define  Attr_Passed_By_Reference           69\n+#define  Attr_Pool_Address                  70\n+#define  Attr_Pos                           71\n+#define  Attr_Position                      72\n+#define  Attr_Priority                      73\n+#define  Attr_Range                         74\n+#define  Attr_Range_Length                  75\n+#define  Attr_Round                         76\n+#define  Attr_Safe_Emax                     77\n+#define  Attr_Safe_First                    78\n+#define  Attr_Safe_Large                    79\n+#define  Attr_Safe_Last                     80\n+#define  Attr_Safe_Small                    81\n+#define  Attr_Scale                         82\n+#define  Attr_Scaling                       83\n+#define  Attr_Signed_Zeros                  84\n+#define  Attr_Size                          85\n+#define  Attr_Small                         86\n+#define  Attr_Storage_Size                  87\n+#define  Attr_Storage_Unit                  88\n+#define  Attr_Stream_Size                   89\n+#define  Attr_Tag                           90\n+#define  Attr_Target_Name                   91\n+#define  Attr_Terminated                    92\n+#define  Attr_To_Address                    93\n+#define  Attr_Type_Class                    94\n+#define  Attr_UET_Address                   95\n+#define  Attr_Unbiased_Rounding             96\n+#define  Attr_Unchecked_Access              97\n+#define  Attr_Unconstrained_Array           98\n+#define  Attr_Universal_Literal_String      99\n+#define  Attr_Unrestricted_Access           100\n+#define  Attr_VADS_Size                     101\n+#define  Attr_Val                           102\n+#define  Attr_Valid                         103\n+#define  Attr_Value_Size                    104\n+#define  Attr_Version                       105\n+#define  Attr_Wchar_T_Size                  106\n+#define  Attr_Wide_Wide_Width               107\n+#define  Attr_Wide_Width                    108\n+#define  Attr_Width                         109\n+#define  Attr_Word_Size                     110\n+#define  Attr_Adjacent                      111\n+#define  Attr_Ceiling                       112\n+#define  Attr_Copy_Sign                     113\n+#define  Attr_Floor                         114\n+#define  Attr_Fraction                      115\n+#define  Attr_Image                         116\n+#define  Attr_Input                         117\n+#define  Attr_Machine                       118\n+#define  Attr_Max                           119\n+#define  Attr_Min                           120\n+#define  Attr_Model                         121\n+#define  Attr_Pred                          122\n+#define  Attr_Remainder                     123\n+#define  Attr_Rounding                      124\n+#define  Attr_Succ                          125\n+#define  Attr_Truncation                    126\n+#define  Attr_Value                         127\n+#define  Attr_Wide_Image                    128\n+#define  Attr_Wide_Wide_Image               129\n+#define  Attr_Wide_Value                    130\n+#define  Attr_Wide_Wide_Value               131\n+#define  Attr_Output                        132\n+#define  Attr_Read                          133\n+#define  Attr_Write                         134\n+#define  Attr_Elab_Body                     135\n+#define  Attr_Elab_Spec                     136\n+#define  Attr_Storage_Pool                  137\n+#define  Attr_Base                          138\n+#define  Attr_Class                         139\n+#define  Attr_Stub_Type                     140\n \n /* Define the numeric values for the conventions.  */\n \n@@ -247,138 +248,139 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_No_Run_Time                   28\n #define  Pragma_No_Strict_Aliasing            29\n #define  Pragma_Normalize_Scalars             30\n-#define  Pragma_Polling                       31\n-#define  Pragma_Persistent_BSS                32\n-#define  Pragma_Priority_Specific_Dispatching 33\n-#define  Pragma_Profile                       34\n-#define  Pragma_Profile_Warnings              35\n-#define  Pragma_Propagate_Exceptions          36\n-#define  Pragma_Queuing_Policy                37\n-#define  Pragma_Ravenscar                     38\n-#define  Pragma_Restricted_Run_Time           39\n-#define  Pragma_Restrictions                  40\n-#define  Pragma_Restriction_Warnings          41\n-#define  Pragma_Reviewable                    42\n-#define  Pragma_Source_File_Name              43\n-#define  Pragma_Source_File_Name_Project      44\n-#define  Pragma_Style_Checks                  45\n-#define  Pragma_Suppress                      46\n-#define  Pragma_Suppress_Exception_Locations  47\n-#define  Pragma_Task_Dispatching_Policy       48\n-#define  Pragma_Universal_Data                49\n-#define  Pragma_Unsuppress                    50\n-#define  Pragma_Use_VADS_Size                 51\n-#define  Pragma_Validity_Checks               52\n-#define  Pragma_Warnings                      53\n-#define  Pragma_Wide_Character_Encoding       54\n-#define  Pragma_Abort_Defer                   55\n-#define  Pragma_All_Calls_Remote              56\n-#define  Pragma_Annotate                      57\n-#define  Pragma_Assert                        58\n-#define  Pragma_Asynchronous                  59\n-#define  Pragma_Atomic                        60\n-#define  Pragma_Atomic_Components             61\n-#define  Pragma_Attach_Handler                62\n-#define  Pragma_CIL_Constructor               63\n-#define  Pragma_Comment                       64\n-#define  Pragma_Common_Object                 65\n-#define  Pragma_Complete_Representation       66\n-#define  Pragma_Complex_Representation        67\n-#define  Pragma_Controlled                    68\n-#define  Pragma_Convention                    69\n-#define  Pragma_CPP_Class                     70\n-#define  Pragma_CPP_Constructor               71\n-#define  Pragma_CPP_Virtual                   72\n-#define  Pragma_CPP_Vtable                    73\n-#define  Pragma_Debug                         74\n-#define  Pragma_Elaborate                     75\n-#define  Pragma_Elaborate_All                 76\n-#define  Pragma_Elaborate_Body                77\n-#define  Pragma_Export                        78\n-#define  Pragma_Export_Exception              79\n-#define  Pragma_Export_Function               80\n-#define  Pragma_Export_Object                 81\n-#define  Pragma_Export_Procedure              82\n-#define  Pragma_Export_Value                  83\n-#define  Pragma_Export_Valued_Procedure       84\n-#define  Pragma_External                      85\n-#define  Pragma_Finalize_Storage_Only         86\n-#define  Pragma_Ident                         87\n-#define  Pragma_Implemented_By_Entry          88\n-#define  Pragma_Import                        89\n-#define  Pragma_Import_Exception              90\n-#define  Pragma_Import_Function               91\n-#define  Pragma_Import_Object                 92\n-#define  Pragma_Import_Procedure              93\n-#define  Pragma_Import_Valued_Procedure       94\n-#define  Pragma_Inline                        95\n-#define  Pragma_Inline_Always                 96\n-#define  Pragma_Inline_Generic                97\n-#define  Pragma_Inspection_Point              98\n-#define  Pragma_Interface_Name                99\n-#define  Pragma_Interrupt_Handler             100\n-#define  Pragma_Interrupt_Priority            101\n-#define  Pragma_Java_Constructor              102\n-#define  Pragma_Java_Interface                103\n-#define  Pragma_Keep_Names                    104\n-#define  Pragma_Link_With                     105\n-#define  Pragma_Linker_Alias                  106\n-#define  Pragma_Linker_Constructor            107\n-#define  Pragma_Linker_Destructor             108\n-#define  Pragma_Linker_Options                109\n-#define  Pragma_Linker_Section                110\n-#define  Pragma_List                          111\n-#define  Pragma_Machine_Attribute             112\n-#define  Pragma_Main                          113\n-#define  Pragma_Main_Storage                  114\n-#define  Pragma_Memory_Size                   115\n-#define  Pragma_No_Body                       116\n-#define  Pragma_No_Return                     117\n-#define  Pragma_Obsolescent                   118\n-#define  Pragma_Optimize                      119\n-#define  Pragma_Pack                          120\n-#define  Pragma_Page                          121\n-#define  Pragma_Passive                       122\n-#define  Pragma_Preelaborable_Initialization  123\n-#define  Pragma_Preelaborate                  124\n-#define  Pragma_Preelaborate_05               125\n-#define  Pragma_Psect_Object                  126\n-#define  Pragma_Pure                          127\n-#define  Pragma_Pure_05                       128\n-#define  Pragma_Pure_Function                 129\n-#define  Pragma_Remote_Call_Interface         130\n-#define  Pragma_Remote_Types                  131\n-#define  Pragma_Share_Generic                 132\n-#define  Pragma_Shared                        133\n-#define  Pragma_Shared_Passive                134\n-#define  Pragma_Source_Reference              135\n-#define  Pragma_Static_Elaboration_Desired    136\n-#define  Pragma_Stream_Convert                137\n-#define  Pragma_Subtitle                      138\n-#define  Pragma_Suppress_All                  139\n-#define  Pragma_Suppress_Debug_Info           140\n-#define  Pragma_Suppress_Initialization       141\n-#define  Pragma_System_Name                   142\n-#define  Pragma_Task_Info                     143\n-#define  Pragma_Task_Name                     144\n-#define  Pragma_Task_Storage                  145\n-#define  Pragma_Time_Slice                    146\n-#define  Pragma_Title                         147\n-#define  Pragma_Unchecked_Union               148\n-#define  Pragma_Unimplemented_Unit            149\n-#define  Pragma_Universal_Aliasing            150\n-#define  Pragma_Unmodified                    151\n-#define  Pragma_Unreferenced                  152\n-#define  Pragma_Unreferenced_Objects          153\n-#define  Pragma_Unreserve_All_Interrupts      154\n-#define  Pragma_Volatile                      155\n-#define  Pragma_Volatile_Components           156\n-#define  Pragma_Weak_External                 157\n-#define  Pragma_AST_Entry                     158\n-#define  Pragma_Fast_Math                     159\n-#define  Pragma_Interface                     160\n-#define  Pragma_Priority                      161\n-#define  Pragma_Storage_Size                  162\n-#define  Pragma_Storage_Unit                  163\n+#define  Pragma_Optimize_Alignment            31\n+#define  Pragma_Polling                       32\n+#define  Pragma_Persistent_BSS                33\n+#define  Pragma_Priority_Specific_Dispatching 34\n+#define  Pragma_Profile                       35\n+#define  Pragma_Profile_Warnings              36\n+#define  Pragma_Propagate_Exceptions          37\n+#define  Pragma_Queuing_Policy                38\n+#define  Pragma_Ravenscar                     39\n+#define  Pragma_Restricted_Run_Time           40\n+#define  Pragma_Restrictions                  41\n+#define  Pragma_Restriction_Warnings          42\n+#define  Pragma_Reviewable                    43\n+#define  Pragma_Source_File_Name              44\n+#define  Pragma_Source_File_Name_Project      45\n+#define  Pragma_Style_Checks                  46\n+#define  Pragma_Suppress                      47\n+#define  Pragma_Suppress_Exception_Locations  48\n+#define  Pragma_Task_Dispatching_Policy       49\n+#define  Pragma_Universal_Data                50\n+#define  Pragma_Unsuppress                    51\n+#define  Pragma_Use_VADS_Size                 52\n+#define  Pragma_Validity_Checks               53\n+#define  Pragma_Warnings                      54\n+#define  Pragma_Wide_Character_Encoding       55\n+#define  Pragma_Abort_Defer                   56\n+#define  Pragma_All_Calls_Remote              57\n+#define  Pragma_Annotate                      58\n+#define  Pragma_Assert                        59\n+#define  Pragma_Asynchronous                  60\n+#define  Pragma_Atomic                        61\n+#define  Pragma_Atomic_Components             62\n+#define  Pragma_Attach_Handler                63\n+#define  Pragma_CIL_Constructor               64\n+#define  Pragma_Comment                       65\n+#define  Pragma_Common_Object                 66\n+#define  Pragma_Complete_Representation       67\n+#define  Pragma_Complex_Representation        68\n+#define  Pragma_Controlled                    69\n+#define  Pragma_Convention                    70\n+#define  Pragma_CPP_Class                     71\n+#define  Pragma_CPP_Constructor               72\n+#define  Pragma_CPP_Virtual                   73\n+#define  Pragma_CPP_Vtable                    74\n+#define  Pragma_Debug                         75\n+#define  Pragma_Elaborate                     76\n+#define  Pragma_Elaborate_All                 77\n+#define  Pragma_Elaborate_Body                78\n+#define  Pragma_Export                        79\n+#define  Pragma_Export_Exception              80\n+#define  Pragma_Export_Function               81\n+#define  Pragma_Export_Object                 82\n+#define  Pragma_Export_Procedure              83\n+#define  Pragma_Export_Value                  84\n+#define  Pragma_Export_Valued_Procedure       85\n+#define  Pragma_External                      86\n+#define  Pragma_Finalize_Storage_Only         87\n+#define  Pragma_Ident                         88\n+#define  Pragma_Implemented_By_Entry          89\n+#define  Pragma_Import                        90\n+#define  Pragma_Import_Exception              91\n+#define  Pragma_Import_Function               92\n+#define  Pragma_Import_Object                 93\n+#define  Pragma_Import_Procedure              94\n+#define  Pragma_Import_Valued_Procedure       95\n+#define  Pragma_Inline                        96\n+#define  Pragma_Inline_Always                 97\n+#define  Pragma_Inline_Generic                98\n+#define  Pragma_Inspection_Point              99\n+#define  Pragma_Interface_Name                100\n+#define  Pragma_Interrupt_Handler             101\n+#define  Pragma_Interrupt_Priority            102\n+#define  Pragma_Java_Constructor              103\n+#define  Pragma_Java_Interface                104\n+#define  Pragma_Keep_Names                    105\n+#define  Pragma_Link_With                     106\n+#define  Pragma_Linker_Alias                  107\n+#define  Pragma_Linker_Constructor            108\n+#define  Pragma_Linker_Destructor             109\n+#define  Pragma_Linker_Options                110\n+#define  Pragma_Linker_Section                111\n+#define  Pragma_List                          112\n+#define  Pragma_Machine_Attribute             113\n+#define  Pragma_Main                          114\n+#define  Pragma_Main_Storage                  115\n+#define  Pragma_Memory_Size                   116\n+#define  Pragma_No_Body                       117\n+#define  Pragma_No_Return                     118\n+#define  Pragma_Obsolescent                   119\n+#define  Pragma_Optimize                      120\n+#define  Pragma_Pack                          121\n+#define  Pragma_Page                          122\n+#define  Pragma_Passive                       123\n+#define  Pragma_Preelaborable_Initialization  124\n+#define  Pragma_Preelaborate                  125\n+#define  Pragma_Preelaborate_05               126\n+#define  Pragma_Psect_Object                  127\n+#define  Pragma_Pure                          128\n+#define  Pragma_Pure_05                       129\n+#define  Pragma_Pure_Function                 130\n+#define  Pragma_Remote_Call_Interface         131\n+#define  Pragma_Remote_Types                  132\n+#define  Pragma_Share_Generic                 133\n+#define  Pragma_Shared                        134\n+#define  Pragma_Shared_Passive                135\n+#define  Pragma_Source_Reference              136\n+#define  Pragma_Static_Elaboration_Desired    137\n+#define  Pragma_Stream_Convert                138\n+#define  Pragma_Subtitle                      139\n+#define  Pragma_Suppress_All                  140\n+#define  Pragma_Suppress_Debug_Info           141\n+#define  Pragma_Suppress_Initialization       142\n+#define  Pragma_System_Name                   143\n+#define  Pragma_Task_Info                     144\n+#define  Pragma_Task_Name                     145\n+#define  Pragma_Task_Storage                  146\n+#define  Pragma_Time_Slice                    147\n+#define  Pragma_Title                         148\n+#define  Pragma_Unchecked_Union               149\n+#define  Pragma_Unimplemented_Unit            150\n+#define  Pragma_Universal_Aliasing            151\n+#define  Pragma_Unmodified                    152\n+#define  Pragma_Unreferenced                  153\n+#define  Pragma_Unreferenced_Objects          154\n+#define  Pragma_Unreserve_All_Interrupts      155\n+#define  Pragma_Volatile                      156\n+#define  Pragma_Volatile_Components           157\n+#define  Pragma_Weak_External                 158\n+#define  Pragma_AST_Entry                     159\n+#define  Pragma_Fast_Math                     160\n+#define  Pragma_Interface                     161\n+#define  Pragma_Priority                      162\n+#define  Pragma_Storage_Size                  163\n+#define  Pragma_Storage_Unit                  164\n \n /* End of snames.h (C version of Snames package spec) */"}]}