{"sha": "e79b60a72c50b9d1ba1e196048cb6c4329556cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5YjYwYTcyYzUwYjlkMWJhMWUxOTYwNDhjYjZjNDMyOTU1NmNiYQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-01-08T18:31:39Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-01-08T18:31:39Z"}, "message": "[multiple changes]\n\n2005-01-08  Jeff Law  <law@redhat.com>\n\t    Diego Novillo  <dnovillo@redhat.com>\n\n\t* tree-nrv.c (tree_nrv): Ignore volatile return values.\n\t* tree-ssa-dse.c (dse_optimize_stmt): Do not optimize\n\tstatements with volatile operands.\n\t* tree-ssa-operands.c (add_stmt_operand): Do add volatile\n\toperands after marking a statement with has_volatile_ops.\n\ntestsuite/ChangeLog:\n\n2005-01-08  Diego Novillo  <dnovillo@redhat.com>\n\n\t* gcc.dg/pr18241-1.c: New test.\n\t* gcc.dg/pr18241-2.c: New test.\n\t* gcc.dg/pr18241-3.c: New test.\n\t* gcc.dg/pr18241-4.c: New test.\n\t* gcc.dg/pr18241-5.c: New test.\n\nFrom-SVN: r93088", "tree": {"sha": "0414cc3da4abf709fe841647da112fa2d898af87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0414cc3da4abf709fe841647da112fa2d898af87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e79b60a72c50b9d1ba1e196048cb6c4329556cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79b60a72c50b9d1ba1e196048cb6c4329556cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79b60a72c50b9d1ba1e196048cb6c4329556cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79b60a72c50b9d1ba1e196048cb6c4329556cba/comments", "author": null, "committer": null, "parents": [{"sha": "1dba11822e73daaaf1afc31ab17d616d85c217e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dba11822e73daaaf1afc31ab17d616d85c217e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dba11822e73daaaf1afc31ab17d616d85c217e3"}], "stats": {"total": 272, "additions": 265, "deletions": 7}, "files": [{"sha": "5960c6ef9e7b710399d77b08484e2b562f1a2dc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -1,3 +1,12 @@\n+2005-01-08  Jeff Law  <law@redhat.com>\n+\t    Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-nrv.c (tree_nrv): Ignore volatile return values.\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Do not optimize\n+\tstatements with volatile operands.\n+\t* tree-ssa-operands.c (add_stmt_operand): Do add volatile\n+\toperands after marking a statement with has_volatile_ops.\n+\n 2005-01-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* tree.c (int_fits_type_p): Always honor integer constant"}, {"sha": "ce3e92af33cfcd6d81f608e6a258d1703d76f0b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -1,3 +1,11 @@\n+2005-01-08  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.dg/pr18241-1.c: New test.\n+\t* gcc.dg/pr18241-2.c: New test.\n+\t* gcc.dg/pr18241-3.c: New test.\n+\t* gcc.dg/pr18241-4.c: New test.\n+\t* gcc.dg/pr18241-5.c: New test.\n+\n 2005-01-08  Steven G. Kargl  <kargls@comcast.net>\n \n \t* gfortran.dg/select_2.f90, gfortran.dg/select_3.f90,"}, {"sha": "6f5bd9c0593f329231316316e766c07ad4cc006c", "filename": "gcc/testsuite/gcc.dg/pr18241-1.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-1.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-do execute } */\n+/* { dg-options \"-std=gnu99 -Wall -Wextra -O1\" } */ \n+\n+extern void *memset (void*, int, unsigned long);\n+extern void abort (void);\n+\n+struct radix_tree_root {\n+\tunsigned int height;\n+\tstruct radix_tree_node *rnode;\n+};\n+\n+struct radix_tree_node {\n+\tunsigned int count;\n+\tvoid *slots[64];\n+\tunsigned long tags[2][2];\n+};\n+\n+struct radix_tree_path {\n+\tstruct radix_tree_node *node, **slot;\n+\tint offset;\n+};\n+\n+static unsigned long height_to_maxindex[7] =\n+{0, 63, 4095, 262143, 16777215, 1073741823, 4294967295};\n+\n+static inline void tag_clear(struct radix_tree_node *node, int tag, int offset)\n+{\n+\tint nr;\n+\tvolatile unsigned long *addr;\n+\tint mask;\n+\t\n+\tnr = offset;\n+\taddr = &node->tags[tag][0];\n+\n+\taddr += nr >> 5;\n+\tmask = 1 << (nr & 0x1f);\n+\t*addr &= ~mask;\n+}\n+\n+void *radix_tree_tag_clear(struct radix_tree_root *root, unsigned long index, int tag)\n+{\n+\tstruct radix_tree_path path[7], *pathp = path;\n+\tunsigned int height, shift;\n+\tvoid *ret = 0;\n+\t\n+\theight = root->height;\n+\tif (index > height_to_maxindex[height])\n+\t\tgoto out;\n+\t\n+\tshift = (height - 1) * 6;\n+\tpathp->node = 0;\n+\tpathp->slot = &root->rnode;\n+\t\n+\twhile (height > 0) {\n+\t\tint offset;\n+\t\t\n+\t\tif (*pathp->slot == 0)\n+\t\t\tgoto out;\n+\t\t\n+\t\toffset = (index >> shift) & (64-1);\n+\t\tpathp[1].offset = offset;\n+\t\tpathp[1].node = *pathp[0].slot;\n+\t\tpathp[1].slot = (struct radix_tree_node **)\n+\t\t\t(pathp[1].node->slots + offset);\n+\t\tpathp++;\n+\t\tshift -= 6;\n+\t\theight--;\n+\t}\n+\t\n+\tret = *pathp[0].slot;\n+\tif (ret == 0)\n+\t\tgoto out;\n+\t\n+\tdo {\n+\t\tint idx;\n+\t\t\n+\t\ttag_clear(pathp[0].node, tag, pathp[0].offset);\n+\t\tfor (idx = 0; idx < 2; idx++) {\n+\t\t\tif (pathp[0].node->tags[tag][idx])\n+\t\t\t\tgoto out;\n+\t\t}\n+\t\tpathp--;\n+\t} while (pathp[0].node);\n+out:\n+\treturn ret;\n+}\n+\n+int main ()\n+{\n+\tstruct radix_tree_root r;\n+\tstruct radix_tree_node node;\n+\tvoid *p = (void *) 0xdeadbeef;\n+\t\n+  \tr.height = 1;\n+\tr.rnode = &node;\n+\t\n+\tmemset (&node, 0, sizeof (node));\n+\t\n+\tnode.count = 1;\n+\tnode.slots [13] = p;\n+\t\n+\tradix_tree_tag_clear (&r, 13, 1);\n+\t\n+\tif (r.rnode->slots[13] != p)\n+\t\tabort ();\n+\treturn 0;\n+}"}, {"sha": "dce9656a8332de10267fd8d019f8e8be985dd51c", "filename": "gcc/testsuite/gcc.dg/pr18241-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-2.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do execute } */\n+/* { dg-options \"-std=gnu99 -Wall -Wextra -O1\" } */ \n+\n+extern void *memset (void*, int, unsigned long);\n+extern void abort (void);\n+\n+struct radix_tree_root {\n+\tunsigned int height;\n+\tstruct radix_tree_node *rnode;\n+};\n+\n+struct radix_tree_node {\n+\tunsigned int count;\n+\tvoid *slots[64];\n+\tunsigned long tags[2];\n+};\n+\n+struct radix_tree_path {\n+\tstruct radix_tree_node *node, **slot;\n+\tint offset;\n+};\n+\n+void radix_tree_tag_clear(struct radix_tree_root *root, unsigned long index)\n+{\n+\tstruct radix_tree_path path[7], *pathp = path;\n+\tunsigned int height, shift;\n+\tvolatile unsigned long *addr;\n+\t\n+\theight = root->height;\n+\t\n+\tshift = (height - 1) * 6;\n+\tpath[0].slot = &root->rnode;\n+\t\n+\twhile (height > 0) {\n+\t\tint offset;\n+\t\t\n+\t\toffset = (index >> shift) & (64-1);\n+\t\tpathp[1].offset = offset;\n+\t\tpathp[1].node = *pathp[0].slot;\n+\t\tpathp[1].slot = (struct radix_tree_node **)\n+\t\t\t(pathp[1].node->slots + offset);\n+\t\tpathp++;\n+\t\tshift -= 6;\n+\t\theight--;\n+\t}\n+\t\n+\taddr = &(pathp->node->tags[0]) + 1;\n+\t*addr = 574;\n+}\n+\n+struct radix_tree_root r;\n+struct radix_tree_node node;\n+\n+int main ()\n+{\n+  \tr.height = 1;\n+\tr.rnode = &node;\n+\t\n+\tmemset (&node, 0, sizeof (node));\n+\t\n+\tnode.count = 1;\n+\t\n+\tradix_tree_tag_clear (&r, 13);\n+\treturn 0;\n+}"}, {"sha": "e2bc3d7ff433098c8b240ef0397a425c9a7794b3", "filename": "gcc/testsuite/gcc.dg/pr18241-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-3.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do execute } */\n+/* { dg-options \"-O1\" } */ \n+\n+void abort (void);\n+\n+void radix_tree_tag_clear (int *node)\n+{\n+\tint *path[2], **pathp = path, height;\n+\tvolatile int *addr;\n+\t\n+\theight = 1;\n+\tpathp[0] = node;\n+\t\n+\twhile (height > 0) {\n+\t\tpathp[1] = pathp[0];\n+\t\tpathp++;\n+\t\theight--;\n+\t}\n+\t\n+\taddr = pathp[0];\n+\t*addr = 1;\n+}\n+\n+int main ()\n+{\n+\tint n;\n+\tradix_tree_tag_clear (&n);\n+\tif (n != 1)\n+\t\tabort ();\n+\treturn 0;\n+}"}, {"sha": "ba18d6eee3418bdc5ea54ec276a7677d324b8f58", "filename": "gcc/testsuite/gcc.dg/pr18241-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-4.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do execute } */\n+/* { dg-options \"-O1\" } */ \n+\n+void abort (void);\n+\n+int f(int i1243)\n+{\n+  int i[2], *i1 = i;\n+  i[0] = 1;\n+  volatile int *i2 = i1;\n+  i2[1] = 1;\n+  i1243 = 0;\n+  return i2[1]+i2[0];\n+}\n+\n+\n+int main(void)\n+{\n+  if( f(100) != 2)\n+   abort ();\n+  return 0;\n+}"}, {"sha": "e462a657f4c8e4a4d432ab1a1659b825599aa28a", "filename": "gcc/testsuite/gcc.dg/pr18241-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-5.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do execute } */\n+/* { dg-options \"-O1\" } */ \n+\n+void abort (void);\n+\n+int main ()\n+{\n+  int a;\n+  volatile int *b = &a;\n+  a = 1;\n+  if (*b != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "71de0db82c2279b5080c4e1770ce89385f07061c", "filename": "gcc/tree-nrv.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftree-nrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftree-nrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -154,6 +154,7 @@ tree_nrv (void)\n \t  /* The returned value must be a local automatic variable of the\n \t     same type and alignment as the function's result.  */\n \t  if (TREE_CODE (found) != VAR_DECL\n+\t      || TREE_THIS_VOLATILE (found)\n \t      || DECL_CONTEXT (found) != current_function_decl\n \t      || TREE_STATIC (found)\n \t      || TREE_ADDRESSABLE (found)"}, {"sha": "86622e96bb248af2345e1d92a9df7e6a75e28324", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -259,6 +259,10 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n      not also a function call, then record it into our table.  */\n   if (get_call_expr_in (stmt))\n     return;\n+\n+  if (ann->has_volatile_ops)\n+    return;\n+\n   if (TREE_CODE (stmt) == MODIFY_EXPR)\n     {\n       dataflow_t df = get_immediate_uses (stmt);"}, {"sha": "2ca208ef8fc5151bd14d5dfa5e3776159aece70f", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b60a72c50b9d1ba1e196048cb6c4329556cba/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=e79b60a72c50b9d1ba1e196048cb6c4329556cba", "patch": "@@ -1520,13 +1520,10 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n   sym = (TREE_CODE (var) == SSA_NAME ? SSA_NAME_VAR (var) : var);\n   v_ann = var_ann (sym);\n \n-  /* Don't expose volatile variables to the optimizers.  */\n-  if (TREE_THIS_VOLATILE (sym))\n-    {\n-      if (s_ann)\n-\ts_ann->has_volatile_ops = true;\n-      return;\n-    }\n+  /* Mark statements with volatile operands.  Optimizers should back\n+     off from statements having volatile operands.  */\n+  if (TREE_THIS_VOLATILE (sym) && s_ann)\n+    s_ann->has_volatile_ops = true;\n \n   if (is_real_op)\n     {"}]}