{"sha": "dc16b00717f72aae2d93865a8007ff220b6f022f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMxNmIwMDcxN2Y3MmFhZTJkOTM4NjVhODAwN2ZmMjIwYjZmMDIyZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-09-28T11:33:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-09-28T11:33:29Z"}, "message": "tree.h (BLOCK_ORIGIN): New.\n\n2018-09-28  Richard Biener  <rguenther@suse.de>\n\n\t* tree.h (BLOCK_ORIGIN): New.\n\t* omp-expand.c (grid_expand_target_grid_body): Assign\n\tBLOCK_ORIGIN to BLOCK_ABSTRACT_ORIGIN.\n\t* tree-inline.c (remap_block): Likewise.\n\n\t* auto-profile.c (get_function_decl_from_block): Simplify\n\tby eliding the BLOCK_ABSTRACT_ORIGIN chasing.\n\t* langhooks.c (lhd_print_error_function): Likewise.\n\t* optinfo-emit-json.cc (optrecord_json_writer::inlining_chain_to):\n\tLikewise.\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Likewise.\n\t* tree.c (block_nonartificial_location): Likewise.\n\t(block_ultimate_origin): Likewise.\n\t* tree-pretty-print.c (percent_K_format): Likewise.  Remove\n\tno longer needed LTO case.\n\n\tcp/\n\t* error.c (cp_print_error_function): Simplify by eliding\n\tthe BLOCK_ABSTRACT_ORIGIN chasing.\n\nFrom-SVN: r264689", "tree": {"sha": "ccfb814b58f42d2c18830a1f2b72031aeede8e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccfb814b58f42d2c18830a1f2b72031aeede8e48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc16b00717f72aae2d93865a8007ff220b6f022f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc16b00717f72aae2d93865a8007ff220b6f022f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc16b00717f72aae2d93865a8007ff220b6f022f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc16b00717f72aae2d93865a8007ff220b6f022f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bd4ca7ad508ec9b94f8c3442a6e39d5276d7915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd4ca7ad508ec9b94f8c3442a6e39d5276d7915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd4ca7ad508ec9b94f8c3442a6e39d5276d7915"}], "stats": {"total": 113, "additions": 30, "deletions": 83}, "files": [{"sha": "7c5e78b61fc334ac918ec6b542d4e76f72b8aa03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -1,3 +1,20 @@\n+2018-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.h (BLOCK_ORIGIN): New.\n+\t* omp-expand.c (grid_expand_target_grid_body): Assign\n+\tBLOCK_ORIGIN to BLOCK_ABSTRACT_ORIGIN.\n+\t* tree-inline.c (remap_block): Likewise.\n+\t* auto-profile.c (get_function_decl_from_block): Simplify\n+\tby eliding the BLOCK_ABSTRACT_ORIGIN chasing.\n+\t* langhooks.c (lhd_print_error_function): Likewise.\n+\t* optinfo-emit-json.cc (optrecord_json_writer::inlining_chain_to):\n+\tLikewise.\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Likewise.\n+\t* tree.c (block_nonartificial_location): Likewise.\n+\t(block_ultimate_origin): Likewise.\n+\t* tree-pretty-print.c (percent_K_format): Likewise.  Remove\n+\tno longer needed LTO case.\n+\n 2018-09-28  Andrew Stubbs  <ams@codesourcery.com>\n \t    Jan Hubicka  <jh@suse.cz>\n \t    Martin Jambor  <mjambor@suse.cz>"}, {"sha": "f7ba32c30ac227cfb99c573cfe423c79f9fdb692", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -354,17 +354,10 @@ get_combined_location (location_t loc, tree decl)\n static tree\n get_function_decl_from_block (tree block)\n {\n-  tree decl;\n-\n-  if (LOCATION_LOCUS (BLOCK_SOURCE_LOCATION (block)) == UNKNOWN_LOCATION)\n+  if (!inlined_function_outer_scope_p (block))\n     return NULL_TREE;\n \n-  for (decl = BLOCK_ABSTRACT_ORIGIN (block);\n-       decl && (TREE_CODE (decl) == BLOCK);\n-       decl = BLOCK_ABSTRACT_ORIGIN (decl))\n-    if (TREE_CODE (decl) == FUNCTION_DECL)\n-      break;\n-  return decl;\n+  return BLOCK_ABSTRACT_ORIGIN (block);\n }\n \n /* Store inline stack for STMT in STACK.  */"}, {"sha": "f5d602de026dd0d78bc047aef8d37bf604b6be3f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -1,3 +1,8 @@\n+2018-09-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* error.c (cp_print_error_function): Simplify by eliding\n+\tthe BLOCK_ABSTRACT_ORIGIN chasing.\n+\n 2018-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84940"}, {"sha": "0b14dccba3a125581eb79bc47d4d17e36bad5da3", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -3339,10 +3339,6 @@ cp_print_error_function (diagnostic_context *context,\n \t  if (abstract_origin)\n \t    {\n \t      ao = BLOCK_ABSTRACT_ORIGIN (abstract_origin);\n-\t      while (TREE_CODE (ao) == BLOCK\n-\t\t     && BLOCK_ABSTRACT_ORIGIN (ao)\n-\t\t     && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\t\tao = BLOCK_ABSTRACT_ORIGIN (ao);\n \t      gcc_assert (TREE_CODE (ao) == FUNCTION_DECL);\n \t      fndecl = ao;\n \t    }\n@@ -3364,12 +3360,6 @@ cp_print_error_function (diagnostic_context *context,\n \t\t     && BLOCK_ABSTRACT_ORIGIN (block))\n \t\t{\n \t\t  ao = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-\t\t  while (TREE_CODE (ao) == BLOCK\n-\t\t\t && BLOCK_ABSTRACT_ORIGIN (ao)\n-\t\t\t && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\t\t    ao = BLOCK_ABSTRACT_ORIGIN (ao);\n-\n \t\t  if (TREE_CODE (ao) == FUNCTION_DECL)\n \t\t    {\n \t\t      fndecl = ao;"}, {"sha": "9d7c2d3425d3d1e7929ce69837290bd662fcde31", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -385,10 +385,6 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t  if (abstract_origin)\n \t    {\n \t      ao = BLOCK_ABSTRACT_ORIGIN (abstract_origin);\n-\t      while (TREE_CODE (ao) == BLOCK\n-\t\t     && BLOCK_ABSTRACT_ORIGIN (ao)\n-\t\t     && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\t\tao = BLOCK_ABSTRACT_ORIGIN (ao);\n \t      gcc_assert (TREE_CODE (ao) == FUNCTION_DECL);\n \t      fndecl = ao;\n \t    }\n@@ -416,12 +412,6 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n \t\t     && BLOCK_ABSTRACT_ORIGIN (block))\n \t\t{\n \t\t  ao = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-\t\t  while (TREE_CODE (ao) == BLOCK\n-\t\t\t && BLOCK_ABSTRACT_ORIGIN (ao)\n-\t\t\t && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\t\t    ao = BLOCK_ABSTRACT_ORIGIN (ao);\n-\n \t\t  if (TREE_CODE (ao) == FUNCTION_DECL)\n \t\t    {\n \t\t      fndecl = ao;"}, {"sha": "e8abde413dbb73e99c7ab2d5a2d50ee7b20272db", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -7629,7 +7629,7 @@ grid_expand_target_grid_body (struct omp_region *target)\n   SET_DECL_ASSEMBLER_NAME (kern_fndecl, DECL_NAME (kern_fndecl));\n   tree tgtblock = gimple_block (tgt_stmt);\n   tree fniniblock = make_node (BLOCK);\n-  BLOCK_ABSTRACT_ORIGIN (fniniblock) = tgtblock;\n+  BLOCK_ABSTRACT_ORIGIN (fniniblock) = BLOCK_ORIGIN (tgtblock);\n   BLOCK_SOURCE_LOCATION (fniniblock) = BLOCK_SOURCE_LOCATION (tgtblock);\n   BLOCK_SOURCE_END_LOCATION (fniniblock) = BLOCK_SOURCE_END_LOCATION (tgtblock);\n   BLOCK_SUPERCONTEXT (fniniblock) = kern_fndecl;"}, {"sha": "efdbdb3ae014359ec90fde428098da84fa7a3795", "filename": "gcc/optinfo-emit-json.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Foptinfo-emit-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Foptinfo-emit-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptinfo-emit-json.cc?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -299,12 +299,6 @@ optrecord_json_writer::inlining_chain_to_json (location_t loc)\n \t     && BLOCK_ABSTRACT_ORIGIN (block))\n \t{\n \t  tree ao = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-\t  while (TREE_CODE (ao) == BLOCK\n-\t\t && BLOCK_ABSTRACT_ORIGIN (ao)\n-\t\t && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\t    ao = BLOCK_ABSTRACT_ORIGIN (ao);\n-\n \t  if (TREE_CODE (ao) == FUNCTION_DECL)\n \t    {\n \t      fndecl = ao;"}, {"sha": "42c33d23b9b45a89aad400a0b6cf3e4602d1a076", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -704,7 +704,7 @@ remap_block (tree *block, copy_body_data *id)\n   old_block = *block;\n   new_block = make_node (BLOCK);\n   TREE_USED (new_block) = TREE_USED (old_block);\n-  BLOCK_ABSTRACT_ORIGIN (new_block) = old_block;\n+  BLOCK_ABSTRACT_ORIGIN (new_block) = BLOCK_ORIGIN (old_block);\n   BLOCK_SOURCE_LOCATION (new_block) = BLOCK_SOURCE_LOCATION (old_block);\n   BLOCK_NONLOCALIZED_VARS (new_block)\n     = vec_safe_copy (BLOCK_NONLOCALIZED_VARS (old_block));"}, {"sha": "75b939a9418df970d04e6a134602618e7a5a986a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -3976,35 +3976,11 @@ percent_K_format (text_info *text, location_t loc, tree block)\n   gcc_assert (pp_ti_abstract_origin (text) != NULL);\n   *pp_ti_abstract_origin (text) = NULL;\n \n-  if (in_lto_p)\n-    {\n-      /* ???  LTO drops all BLOCK_ABSTRACT_ORIGINs apart from those\n-         representing the outermost block of an inlined function.\n-\t So walk the BLOCK tree until we hit such a scope.  */\n-      while (block\n-\t     && TREE_CODE (block) == BLOCK)\n-\t{\n-\t  if (inlined_function_outer_scope_p (block))\n-\t    {\n-\t      *pp_ti_abstract_origin (text) = block;\n-\t      break;\n-\t    }\n-\t  block = BLOCK_SUPERCONTEXT (block);\n-\t}\n-      return;\n-    }\n-\n   while (block\n \t && TREE_CODE (block) == BLOCK\n \t && BLOCK_ABSTRACT_ORIGIN (block))\n     {\n       tree ao = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-      while (TREE_CODE (ao) == BLOCK\n-\t     && BLOCK_ABSTRACT_ORIGIN (ao)\n-\t     && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\tao = BLOCK_ABSTRACT_ORIGIN (ao);\n-\n       if (TREE_CODE (ao) == FUNCTION_DECL)\n \t{\n \t  *pp_ti_abstract_origin (text) = block;"}, {"sha": "eee21a63bd708072f8f7cdbe7faf48d7fc681643", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -561,12 +561,7 @@ remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n \t  will not be emitted properly.  */\n        if (inlined_function_outer_scope_p (scope))\n \t {\n-\t   tree ao = scope;\n-\n-\t   while (ao\n-\t\t  && TREE_CODE (ao) == BLOCK\n-\t\t  && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\t     ao = BLOCK_ABSTRACT_ORIGIN (ao);\n+\t   tree ao = BLOCK_ORIGIN (scope);\n \t   if (ao\n \t       && TREE_CODE (ao) == FUNCTION_DECL\n \t       && DECL_DECLARED_INLINE_P (ao)"}, {"sha": "2bd209b564836bf1dd67b558b4162513d1778c51", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -11964,12 +11964,6 @@ block_nonartificial_location (tree block)\n \t && BLOCK_ABSTRACT_ORIGIN (block))\n     {\n       tree ao = BLOCK_ABSTRACT_ORIGIN (block);\n-\n-      while (TREE_CODE (ao) == BLOCK\n-\t     && BLOCK_ABSTRACT_ORIGIN (ao)\n-\t     && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n-\tao = BLOCK_ABSTRACT_ORIGIN (ao);\n-\n       if (TREE_CODE (ao) == FUNCTION_DECL)\n \t{\n \t  /* If AO is an artificial inline, point RET to the\n@@ -12150,16 +12144,7 @@ block_ultimate_origin (const_tree block)\n     return NULL_TREE;\n   else\n     {\n-      tree ret_val;\n-      tree lookahead = immediate_origin;\n-\n-      do\n-\t{\n-\t  ret_val = lookahead;\n-\t  lookahead = (TREE_CODE (ret_val) == BLOCK\n-\t\t       ? BLOCK_ABSTRACT_ORIGIN (ret_val) : NULL);\n-\t}\n-      while (lookahead != NULL && lookahead != ret_val);\n+      tree ret_val = immediate_origin;\n \n       /* The block's abstract origin chain may not be the *ultimate* origin of\n \t the block. It could lead to a DECL that has an abstract origin set."}, {"sha": "35536f372a300280e000c8f19170c7e9b0c295f4", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc16b00717f72aae2d93865a8007ff220b6f022f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dc16b00717f72aae2d93865a8007ff220b6f022f", "patch": "@@ -1789,6 +1789,8 @@ extern tree maybe_wrap_with_location (tree, location_t);\n #define BLOCK_SUPERCONTEXT(NODE) (BLOCK_CHECK (NODE)->block.supercontext)\n #define BLOCK_CHAIN(NODE) (BLOCK_CHECK (NODE)->block.chain)\n #define BLOCK_ABSTRACT_ORIGIN(NODE) (BLOCK_CHECK (NODE)->block.abstract_origin)\n+#define BLOCK_ORIGIN(NODE) \\\n+  (BLOCK_ABSTRACT_ORIGIN(NODE) ? BLOCK_ABSTRACT_ORIGIN(NODE) : (NODE))\n #define BLOCK_ABSTRACT(NODE) (BLOCK_CHECK (NODE)->block.abstract_flag)\n #define BLOCK_DIE(NODE) (BLOCK_CHECK (NODE)->block.die)\n "}]}