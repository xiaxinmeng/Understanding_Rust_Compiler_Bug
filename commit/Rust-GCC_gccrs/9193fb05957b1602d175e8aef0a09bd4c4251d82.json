{"sha": "9193fb05957b1602d175e8aef0a09bd4c4251d82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE5M2ZiMDU5NTdiMTYwMmQxNzVlOGFlZjBhMDliZDRjNDI1MWQ4Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-04T15:39:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-04T15:39:57Z"}, "message": "cpp.texi (__GCC_IEC_559, [...]): Document macros.\n\n\t* doc/cpp.texi (__GCC_IEC_559, __GCC_IEC_559_COMPLEX): Document\n\tmacros.\n\t* target.def (float_exceptions_rounding_supported_p): New hook.\n\t* targhooks.c (default_float_exceptions_rounding_supported_p): New\n\tfunction.\n\t* targhooks.h (default_float_exceptions_rounding_supported_p):\n\tDeclare.\n\t* doc/tm.texi.in (TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P):\n\tNew @hook.\n\t* doc/tm.texi: Regenerate.\n\t* config.gcc (powerpc*-*-linux*): Set extra_objs.\n\t* config/rs6000/rs6000-linux.c: New file.\n\t* config/rs6000/rs6000-protos.h\n\t(rs6000_linux_float_exceptions_rounding_supported_p): Declare.\n\t* config/rs6000/linux.h\n\t(TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P): New macro.\n\t* config/rs6000/linux64.h\n\t(TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P): Likewise.\n\t* config/rs6000/t-linux (rs6000-linux.o): New rule.\n\t* config/rs6000/t-linux64 (rs6000-linux.o): Likewise.\n\nc-family:\n\t* c-cppbuiltin.c (cpp_iec_559_value, cpp_iec_559_complex_value):\n\tNew functions.\n\t(c_cpp_builtins): Define __GCC_IEC_559 and __GCC_IEC_559_COMPLEX.\n\ntestsuite:\n\t* gcc.dg/iec-559-macros-1.c, gcc.dg/iec-559-macros-2.c,\n\tgcc.dg/iec-559-macros-3.c, gcc.dg/iec-559-macros-4.c,\n\tgcc.dg/iec-559-macros-5.c, gcc.dg/iec-559-macros-6.c,\n\tgcc.dg/iec-559-macros-7.c, gcc.dg/iec-559-macros-8.c,\n\tgcc.dg/iec-559-macros-9.c: New tests.\n\nFrom-SVN: r204351", "tree": {"sha": "8756f9f52a3c5e06a3012fe2ac067879d37c313e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8756f9f52a3c5e06a3012fe2ac067879d37c313e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9193fb05957b1602d175e8aef0a09bd4c4251d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9193fb05957b1602d175e8aef0a09bd4c4251d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9193fb05957b1602d175e8aef0a09bd4c4251d82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9193fb05957b1602d175e8aef0a09bd4c4251d82/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "411f1755096acb1655b2cb5ed45ffc8338919184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411f1755096acb1655b2cb5ed45ffc8338919184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411f1755096acb1655b2cb5ed45ffc8338919184"}], "stats": {"total": 451, "additions": 451, "deletions": 0}, "files": [{"sha": "32e4c30dc54c1bf44819cbfcb27b7fab6fb08bfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -1,3 +1,26 @@\n+2013-11-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/cpp.texi (__GCC_IEC_559, __GCC_IEC_559_COMPLEX): Document\n+\tmacros.\n+\t* target.def (float_exceptions_rounding_supported_p): New hook.\n+\t* targhooks.c (default_float_exceptions_rounding_supported_p): New\n+\tfunction.\n+\t* targhooks.h (default_float_exceptions_rounding_supported_p):\n+\tDeclare.\n+\t* doc/tm.texi.in (TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P):\n+\tNew @hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* config.gcc (powerpc*-*-linux*): Set extra_objs.\n+\t* config/rs6000/rs6000-linux.c: New file.\n+\t* config/rs6000/rs6000-protos.h\n+\t(rs6000_linux_float_exceptions_rounding_supported_p): Declare.\n+\t* config/rs6000/linux.h\n+\t(TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P): New macro.\n+\t* config/rs6000/linux64.h\n+\t(TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P): Likewise.\n+\t* config/rs6000/t-linux (rs6000-linux.o): New rule.\n+\t* config/rs6000/t-linux64 (rs6000-linux.o): Likewise.\n+\n 2013-11-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/vsx.md (*vsx_le_perm_store_<mode> for VSX_D):"}, {"sha": "6747bdd24af9489f8ea11ffb17aa14d7067690d7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -1,3 +1,9 @@\n+2013-11-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (cpp_iec_559_value, cpp_iec_559_complex_value):\n+\tNew functions.\n+\t(c_cpp_builtins): Define __GCC_IEC_559 and __GCC_IEC_559_COMPLEX.\n+\n 2013-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.h (cpp_operation): Add IS_TRIVIAL."}, {"sha": "09c75c4ff9b5b85157a4d865c395cb4e53016777", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -683,6 +683,92 @@ cpp_atomic_builtins (cpp_reader *pfile)\n \t\t\t(have_swap[psize]? 2 : 1));\n }\n \n+/* Return the value for __GCC_IEC_559.  */\n+static int\n+cpp_iec_559_value (void)\n+{\n+  /* The default is support for IEEE 754-2008.  */\n+  int ret = 2;\n+\n+  /* float and double must be binary32 and binary64.  If they are but\n+     with reversed NaN convention, at most IEEE 754-1985 is\n+     supported.  */\n+  const struct real_format *ffmt\n+    = REAL_MODE_FORMAT (TYPE_MODE (float_type_node));\n+  const struct real_format *dfmt\n+    = REAL_MODE_FORMAT (TYPE_MODE (double_type_node));\n+  if (!ffmt->qnan_msb_set || !dfmt->qnan_msb_set)\n+    ret = 1;\n+  if (ffmt->b != 2\n+      || ffmt->p != 24\n+      || ffmt->pnan != 24\n+      || ffmt->emin != -125\n+      || ffmt->emax != 128\n+      || ffmt->signbit_rw != 31\n+      || ffmt->round_towards_zero\n+      || !ffmt->has_sign_dependent_rounding\n+      || !ffmt->has_nans\n+      || !ffmt->has_inf\n+      || !ffmt->has_denorm\n+      || !ffmt->has_signed_zero\n+      || dfmt->b != 2\n+      || dfmt->p != 53\n+      || dfmt->pnan != 53\n+      || dfmt->emin != -1021\n+      || dfmt->emax != 1024\n+      || dfmt->signbit_rw != 63\n+      || dfmt->round_towards_zero\n+      || !dfmt->has_sign_dependent_rounding\n+      || !dfmt->has_nans\n+      || !dfmt->has_inf\n+      || !dfmt->has_denorm\n+      || !dfmt->has_signed_zero)\n+    ret = 0;\n+\n+  /* In strict C standards conformance mode, consider unpredictable\n+     excess precision to mean lack of IEEE 754 support.  ??? The same\n+     should apply to unpredictable contraction, but at present\n+     standards conformance options do not enable conforming\n+     contraction.  For C++, and outside strict conformance mode, do\n+     not consider these options to mean lack of IEEE 754 support.  */\n+  if (flag_iso\n+      && !c_dialect_cxx ()\n+      && TARGET_FLT_EVAL_METHOD != 0\n+      && flag_excess_precision != EXCESS_PRECISION_STANDARD)\n+    ret = 0;\n+\n+  /* Various options are contrary to IEEE 754 semantics.  */\n+  if (flag_unsafe_math_optimizations\n+      || flag_associative_math\n+      || flag_reciprocal_math\n+      || flag_finite_math_only\n+      || !flag_signed_zeros\n+      || flag_single_precision_constant)\n+    ret = 0;\n+\n+  /* If the target does not support IEEE 754 exceptions and rounding\n+     modes, consider IEEE 754 support to be absent.  */\n+  if (!targetm.float_exceptions_rounding_supported_p ())\n+    ret = 0;\n+\n+  return ret;\n+}\n+\n+/* Return the value for __GCC_IEC_559_COMPLEX.  */\n+static int\n+cpp_iec_559_complex_value (void)\n+{\n+  /* The value is no bigger than that of __GCC_IEC_559.  */\n+  int ret = cpp_iec_559_value ();\n+\n+  /* Some options are contrary to the required default state of the\n+     CX_LIMITED_RANGE pragma.  */\n+  if (flag_complex_method != 2)\n+    ret = 0;\n+\n+  return ret;\n+}\n+\n /* Hook that registers front end and target-specific built-ins.  */\n void\n c_cpp_builtins (cpp_reader *pfile)\n@@ -760,6 +846,13 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* stdint.h and the testsuite need to know these.  */\n   builtin_define_stdint_macros ();\n \n+  /* Provide information for library headers to determine whether to\n+     define macros such as __STDC_IEC_559__ and\n+     __STDC_IEC_559_COMPLEX__.  */\n+  builtin_define_with_int_value (\"__GCC_IEC_559\", cpp_iec_559_value ());\n+  builtin_define_with_int_value (\"__GCC_IEC_559_COMPLEX\",\n+\t\t\t\t cpp_iec_559_complex_value ());\n+\n   /* float.h needs to know this.  */\n   builtin_define_with_int_value (\"__FLT_EVAL_METHOD__\",\n \t\t\t\t TARGET_FLT_EVAL_METHOD);"}, {"sha": "6c62a64d25d8e8c54aaaab0fdd81dcaf4cbb3c39", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -2214,6 +2214,7 @@ powerpc*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h rs6000/sysv4.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n+\textra_objs=\"$extra_objs rs6000-linux.o\"\n \tcase ${target} in\n \t    powerpc*le-*-*)\n \t\ttm_file=\"${tm_file} rs6000/sysv4le.h\" ;;"}, {"sha": "f7df111b57e29ce6dc96557865b8699fcff163f1", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -145,3 +145,9 @@\n \n /* Static stack checking is supported by means of probes.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* Software floating point support for exceptions and rounding modes\n+   depends on the C library in use.  */\n+#undef TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P\n+#define TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P \\\n+  rs6000_linux_float_exceptions_rounding_supported_p"}, {"sha": "c1adbd78a4d83f9ae766844d62d74c603af7be2e", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -558,3 +558,9 @@ extern int dot_symbols;\n \n /* The default value isn't sufficient in 64-bit mode.  */\n #define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)\n+\n+/* Software floating point support for exceptions and rounding modes\n+   depends on the C library in use.  */\n+#undef TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P\n+#define TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P \\\n+  rs6000_linux_float_exceptions_rounding_supported_p"}, {"sha": "17b51af7ead8b37b2b66503d4da44489e41c4414", "filename": "gcc/config/rs6000/rs6000-linux.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Frs6000-linux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Frs6000-linux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-linux.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,38 @@\n+/* Functions for Linux on PowerPC.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"tm_p.h\"\n+\n+/* Implement TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P.  */\n+\n+bool\n+rs6000_linux_float_exceptions_rounding_supported_p (void)\n+{\n+  /* glibc has support for exceptions and rounding modes for software\n+     floating point.  */\n+  if (OPTION_GLIBC)\n+    return true;\n+  else\n+    return TARGET_DF_INSN;\n+}"}, {"sha": "d1d1737dca1fe4d5ab562ecb4640bbf92112e2a3", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -212,4 +212,6 @@ void rs6000_final_prescan_insn (rtx, rtx *operand, int num_operands);\n extern bool rs6000_hard_regno_mode_ok_p[][FIRST_PSEUDO_REGISTER];\n extern unsigned char rs6000_class_max_nregs[][LIM_REG_CLASSES];\n extern unsigned char rs6000_hard_regno_nregs[][FIRST_PSEUDO_REGISTER];\n+\n+extern bool rs6000_linux_float_exceptions_rounding_supported_p (void);\n #endif  /* rs6000-protos.h */"}, {"sha": "0b92eba46179c5ef2ba76481d29d5fb1fd2924fc", "filename": "gcc/config/rs6000/t-linux", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-linux?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -7,3 +7,7 @@ else\n MULTIARCH_DIRNAME = powerpc-linux-gnu\n endif\n endif\n+\n+rs6000-linux.o: $(srcdir)/config/rs6000/rs6000-linux.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)"}, {"sha": "0b17ed6a5cf47dc793d689527dbee0329dc9c0e7", "filename": "gcc/config/rs6000/t-linux64", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fconfig%2Frs6000%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-linux64?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -30,3 +30,7 @@ MULTILIB_DIRNAMES   := 64 32\n MULTILIB_EXTRA_OPTS := \n MULTILIB_OSDIRNAMES := m64=../lib64$(call if_multiarch,:powerpc64-linux-gnu)\n MULTILIB_OSDIRNAMES += m32=$(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR))/../../usr/lib32),../lib32,../lib)$(call if_multiarch,:powerpc-linux-gnu)\n+\n+rs6000-linux.o: $(srcdir)/config/rs6000/rs6000-linux.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)"}, {"sha": "0ab9361bb42abd4363447a3f9b27601c41a8173f", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -2389,6 +2389,40 @@ These macros are defined with value 1 if the backend supports the\n the include file @file{math.h} can define the macros\n @code{FP_FAST_FMA}, @code{FP_FAST_FMAF}, and @code{FP_FAST_FMAL}\n for compatibility with the 1999 C standard.\n+\n+@item __GCC_IEC_559\n+This macro is defined to indicate the intended level of support for\n+IEEE 754 (IEC 60559) floating-point arithmetic.  It expands to a\n+nonnegative integer value.  If 0, it indicates that the combination of\n+the compiler configuration and the command-line options is not\n+intended to support IEEE 754 arithmetic for @code{float} and\n+@code{double} as defined in C99 and C11 Annex F (for example, that the\n+standard rounding modes and exceptions are not supported, or that\n+optimizations are enabled that conflict with IEEE 754 semantics).  If\n+1, it indicates that IEEE 754 arithmetic is intended to be supported;\n+this does not mean that all relevant language features are supported\n+by GCC.  If 2 or more, it additionally indicates support for IEEE\n+754-2008 (in particular, that the binary encodings for quiet and\n+signaling NaNs are as specified in IEEE 754-2008).\n+\n+This macro does not indicate the default state of command-line options\n+that control optimizations that C99 and C11 permit to be controlled by\n+standard pragmas, where those standards do not require a particular\n+default state.  It does not indicate whether optimizations respect\n+signaling NaN semantics (the macro for that is\n+@code{__SUPPORT_SNAN__}).  It does not indicate support for decimal\n+floating point or the IEEE 754 binary16 and binary128 types.\n+\n+@item __GCC_IEC_559_COMPLEX\n+This macro is defined to indicate the intended level of support for\n+IEEE 754 (IEC 60559) floating-point arithmetic for complex numbers, as\n+defined in C99 and C11 Annex G.  It expands to a nonnegative integer\n+value.  If 0, it indicates that the combination of the compiler\n+configuration and the command-line options is not intended to support\n+Annex G requirements (for example, because @option{-fcx-limited-range}\n+was used).  If 1 or more, it indicates that it is intended to support\n+those requirements; this does not mean that all relevant language\n+features are supported by GCC.\n @end table\n \n @node System-specific Predefined Macros"}, {"sha": "fc5e1a544b3207e8b5a174c3c8d0e2cb2ae15adb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -768,6 +768,10 @@ Define this macro to 1 if your target needs this facility.  The default\n is 0.\n @end defmac\n \n+@deftypefn {Target Hook} bool TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P (void)\n+Returns true if the target supports IEEE 754 floating-point exceptions and rounding modes, false otherwise.  This is intended to relate to the @code{float} and @code{double} types, but not necessarily @code{long double}. By default, returns true if the @code{adddf3} instruction pattern is available and false otherwise, on the assumption that hardware floating point supports exceptions and rounding modes but software floating point does not.\n+@end deftypefn\n+\n @node Per-Function Data\n @section Defining data structures for per-function information.\n @cindex per-function data"}, {"sha": "a641f3dcd30cf51916aafbd1926dafa8f21d5405", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -744,6 +744,8 @@ Define this macro to 1 if your target needs this facility.  The default\n is 0.\n @end defmac\n \n+@hook TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P\n+\n @node Per-Function Data\n @section Defining data structures for per-function information.\n @cindex per-function data"}, {"sha": "3bbbbd302600f2cc50814324b8d4c055b26da15b", "filename": "gcc/target.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -1935,6 +1935,18 @@ DEFHOOK_UNDOC\n  bool, (void),\n  targhook_float_words_big_endian)\n \n+DEFHOOK\n+(float_exceptions_rounding_supported_p,\n+ \"Returns true if the target supports IEEE 754 floating-point exceptions\\\n+ and rounding modes, false otherwise.  This is intended to relate to the\\\n+ @code{float} and @code{double} types, but not necessarily @code{long double}.\\\n+ By default, returns true if the @code{adddf3} instruction pattern is\\\n+ available and false otherwise, on the assumption that hardware floating\\\n+ point supports exceptions and rounding modes but software floating point\\\n+ does not.\",\n+ bool, (void),\n+ default_float_exceptions_rounding_supported_p)\n+\n /* True if the target supports decimal floating point.  */\n DEFHOOK\n (decimal_float_supported_p,"}, {"sha": "7585c14b56ff28b03eca1feb4aeee46c6cec2bf0", "filename": "gcc/targhooks.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -436,6 +436,19 @@ targhook_float_words_big_endian (void)\n   return !!FLOAT_WORDS_BIG_ENDIAN;\n }\n \n+/* True if the target supports floating-point exceptions and rounding\n+   modes.  */\n+\n+bool\n+default_float_exceptions_rounding_supported_p (void)\n+{\n+#ifdef HAVE_adddf3\n+  return HAVE_adddf3;\n+#else\n+  return false;\n+#endif\n+}\n+\n /* True if the target supports decimal floating point.  */\n \n bool"}, {"sha": "e3e613ac3f3e23f76f520c3a4370186b1bdd3f18", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -69,6 +69,7 @@ extern tree default_mangle_assembler_name (const char *);\n extern bool default_scalar_mode_supported_p (enum machine_mode);\n extern bool targhook_words_big_endian (void);\n extern bool targhook_float_words_big_endian (void);\n+extern bool default_float_exceptions_rounding_supported_p (void);\n extern bool default_decimal_float_supported_p (void);\n extern bool default_fixed_point_supported_p (void);\n "}, {"sha": "3ebaf82a760d859cd56a43a1692fd5fdc47d8012", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -1,3 +1,11 @@\n+2013-11-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/iec-559-macros-1.c, gcc.dg/iec-559-macros-2.c,\n+\tgcc.dg/iec-559-macros-3.c, gcc.dg/iec-559-macros-4.c,\n+\tgcc.dg/iec-559-macros-5.c, gcc.dg/iec-559-macros-6.c,\n+\tgcc.dg/iec-559-macros-7.c, gcc.dg/iec-559-macros-8.c,\n+\tgcc.dg/iec-559-macros-9.c: New tests.\n+\n 2013-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/58946"}, {"sha": "bd5d037afc4b7073fa44ae6c2c42417fdeffe974", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-1.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,16 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif"}, {"sha": "5a28574ac99f6486cfc7c67f55d87b47de8c8f9e", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-2.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,23 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-funsafe-math-optimizations\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559 != 0\n+# error \"__GCC_IEC_559 != 0 with -funsafe-math-optimizations\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX != 0\n+# error \"__GCC_IEC_559_COMPLEX != 0 with -funsafe-math-optimizations\"\n+#endif"}, {"sha": "5eeb34503fecd755dceaac4a25a1f3009a2dd8ec", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-3.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,23 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-freciprocal-math\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559 != 0\n+# error \"__GCC_IEC_559 != 0 with -freciprocal-math\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX != 0\n+# error \"__GCC_IEC_559_COMPLEX != 0 with -freciprocal-math\"\n+#endif"}, {"sha": "7bf6b9c30bcdf786207b43a99e5295daac407853", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-4.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,23 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-ffinite-math-only\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559 != 0\n+# error \"__GCC_IEC_559 != 0 with -ffinite-math-only\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX != 0\n+# error \"__GCC_IEC_559_COMPLEX != 0 with -ffinite-math-only\"\n+#endif"}, {"sha": "ea37474fd1ef5b08bd3be9cf8c36a6af1dd039d3", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-5.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-5.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,23 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fno-signed-zeros\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559 != 0\n+# error \"__GCC_IEC_559 != 0 with -fno-signed-zeros\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX != 0\n+# error \"__GCC_IEC_559_COMPLEX != 0 with -fno-signed-zeros\"\n+#endif"}, {"sha": "e2be757f86cf56d56ec82eecfdd5d279922309e4", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-6.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,23 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fsingle-precision-constant\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559 != 0\n+# error \"__GCC_IEC_559 != 0 with -fsingle-precision-constant\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX != 0\n+# error \"__GCC_IEC_559_COMPLEX != 0 with -fsingle-precision-constant\"\n+#endif"}, {"sha": "3b1f79172d79925a46342297bb9418fbf6821062", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-7.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-7.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,20 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fcx-limited-range\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559_COMPLEX != 0\n+# error \"__GCC_IEC_559_COMPLEX != 0 with -fcx-limited-range\"\n+#endif"}, {"sha": "1990b944dc5c6fc348dd563cc86a13918ffa2733", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-8.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,20 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fcx-fortran-rules\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559_COMPLEX != 0\n+# error \"__GCC_IEC_559_COMPLEX != 0 with -fcx-fortran-rules\"\n+#endif"}, {"sha": "6179a3bfe451cc411bb8d3a15bf3469897ff15e1", "filename": "gcc/testsuite/gcc.dg/iec-559-macros-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9193fb05957b1602d175e8aef0a09bd4c4251d82/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fiec-559-macros-9.c?ref=9193fb05957b1602d175e8aef0a09bd4c4251d82", "patch": "@@ -0,0 +1,23 @@\n+/* Test __GCC_IEC_559 and __GCC_IEC_559_COMPLEX macros values.  */\n+/* { dg-do preprocess { target i?86-*-linux* x86_64-*-linux* powerpc*-*-linux* } } */\n+/* { dg-options \"-std=c11\" } */\n+\n+#ifndef __GCC_IEC_559\n+# error \"__GCC_IEC_559 not defined\"\n+#endif\n+#ifndef __GCC_IEC_559_COMPLEX\n+# error \"__GCC_IEC_559_COMPLEX not defined\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX > __GCC_IEC_559\n+# error \"__GCC_IEC_559_COMPLEX > __GCC_IEC_559\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 0\n+# error \"__GCC_IEC_559_COMPLEX < 0\"\n+#endif\n+\n+#if __GCC_IEC_559 < 2\n+# error \"__GCC_IEC_559 < 2\"\n+#endif\n+#if __GCC_IEC_559_COMPLEX < 2\n+# error \"__GCC_IEC_559_COMPLEX < 2\"\n+#endif"}]}