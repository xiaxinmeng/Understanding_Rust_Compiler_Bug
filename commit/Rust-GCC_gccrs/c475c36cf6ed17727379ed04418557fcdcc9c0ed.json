{"sha": "c475c36cf6ed17727379ed04418557fcdcc9c0ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ3NWMzNmNmNmVkMTc3MjczNzllZDA0NDE4NTU3ZmNkY2M5YzBlZA==", "commit": {"author": {"name": "David Wohlferd", "email": "dw@LimeGreenSocks.com", "date": "2014-12-08T21:58:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-12-08T21:58:23Z"}, "message": "re PR inline-asm/61692 (ICE in extract_insn in recog.c for asm with many parameters)\n\n        PR target/61692\n\t* cfgexpand.c (expand_asm_operands): Count all inline asm params.\n\n\tPR target/61692\n        * gcc.dg/pr61692.c: New test.\n\nFrom-SVN: r218494", "tree": {"sha": "6d302eddb7cb68a41a9ab4eb404e171547d59b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d302eddb7cb68a41a9ab4eb404e171547d59b58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c475c36cf6ed17727379ed04418557fcdcc9c0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c475c36cf6ed17727379ed04418557fcdcc9c0ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c475c36cf6ed17727379ed04418557fcdcc9c0ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c475c36cf6ed17727379ed04418557fcdcc9c0ed/comments", "author": null, "committer": null, "parents": [{"sha": "eecea65c8bc8de3a4826f62af23ac28515287c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eecea65c8bc8de3a4826f62af23ac28515287c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eecea65c8bc8de3a4826f62af23ac28515287c90"}], "stats": {"total": 186, "additions": 185, "deletions": 1}, "files": [{"sha": "c44fce6bc914d1aa64ecc38ce0323264cc27b5d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c475c36cf6ed17727379ed04418557fcdcc9c0ed", "patch": "@@ -1,3 +1,8 @@\n+2014-11-15  David Wohlferd <dw@LimeGreenSocks.com>\n+\n+        PR target/61692\n+\t* cfgexpand.c (expand_asm_operands): Count all inline asm params.\n+\n 2014-12-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/63854"}, {"sha": "d85dbca659cefb84f71c1bcac5dfbcb785bff238", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=c475c36cf6ed17727379ed04418557fcdcc9c0ed", "patch": "@@ -2594,7 +2594,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n     }\n \n   ninputs += ninout;\n-  if (ninputs + noutputs > MAX_RECOG_OPERANDS)\n+  if (ninputs + noutputs + nlabels > MAX_RECOG_OPERANDS)\n     {\n       error (\"more than %d operands in %<asm%>\", MAX_RECOG_OPERANDS);\n       return;"}, {"sha": "79963a7e3eaeb953c4c73e3cfd7d8665bfeb0b79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c475c36cf6ed17727379ed04418557fcdcc9c0ed", "patch": "@@ -1,3 +1,8 @@\n+2014-11-15  David Wohlferd <dw@LimeGreenSocks.com> \n+\n+\tPR target/61692\n+        * gcc.dg/pr61692.c: New test.\n+\n 2014-12-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR ipa/64049"}, {"sha": "1b619bd753555e6fa92399ea7b56fc6fe66a520e", "filename": "gcc/testsuite/gcc.dg/pr61692.c", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61692.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c475c36cf6ed17727379ed04418557fcdcc9c0ed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61692.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61692.c?ref=c475c36cf6ed17727379ed04418557fcdcc9c0ed", "patch": "@@ -0,0 +1,174 @@\n+/*  PR 61692  */\n+/* { dg-do compile } */\n+\n+/* Check for ice when exceededing the max #\n+   of parameters to inline asm. */\n+\n+int Labels()\n+{\n+    label01: label02: label03: label04: label05:\n+    label06: label07: label08: label09: label10:\n+    label11: label12: label13: label14: label15:\n+    label16: label17: label18: label19: label20:\n+    label21: label22: label23: label24: label25:\n+    label26: label27: label28: label29: label30:\n+    label31:\n+\n+    __asm__ goto (\"\" /* Works. */\n+        : /* no outputs */ \n+        : /* no inputs */ \n+        : /* no clobbers */\n+        : label01, label02, label03, label04, label05, \n+          label06, label07, label08, label09, label10, \n+          label11, label12, label13, label14, label15, \n+          label16, label17, label18, label19, label20, \n+          label21, label22, label23, label24, label25, \n+          label26, label27, label28, label29, label30);\n+\n+    __asm__ goto (\"\" /* { dg-error \"more than 30 operands\" } */\n+        : /* no outputs */ \n+        : /* no inputs */ \n+        : /* no clobbers */\n+        : label01, label02, label03, label04, label05, \n+          label06, label07, label08, label09, label10, \n+          label11, label12, label13, label14, label15, \n+          label16, label17, label18, label19, label20, \n+          label21, label22, label23, label24, label25, \n+          label26, label27, label28, label29, label30, \n+          label31);\n+\n+    return 0;\n+}\n+\n+int Labels_and_Inputs()\n+{\n+    int b01, b02, b03, b04, b05, b06, b07, b08, b09, b10;\n+    int b11, b12, b13, b14, b15, b16, b17, b18, b19, b20;\n+    int b21, b22, b23, b24, b25, b26, b27, b28, b29, b30;\n+    int b31;\n+\n+    label01: label02: label03: label04: label05:\n+    label06: label07: label08: label09: label10:\n+    label11: label12: label13: label14: label15:\n+    label16: label17: label18: label19: label20:\n+    label21: label22: label23: label24: label25:\n+    label26: label27: label28: label29: label30:\n+    label31:\n+\n+    b01 = b02 = b03 = b04 = b05 = b06 = b07 = b08 = b09 = b10 = 0;\n+    b11 = b12 = b13 = b14 = b15 = b16 = b17 = b18 = b19 = b20 = 0;\n+    b21 = b22 = b23 = b24 = b25 = b26 = b27 = b28 = b29 = b30 = 0;\n+    b31 = 0;\n+\n+    __asm__ goto (\"\" /* Works. */\n+      : /* no outputs */\n+      : \"m\" (b01), \"m\" (b02), \"m\" (b03), \"m\" (b04), \"m\" (b05), \n+        \"m\" (b06), \"m\" (b07), \"m\" (b08), \"m\" (b09), \"m\" (b10), \n+        \"m\" (b11), \"m\" (b12), \"m\" (b13), \"m\" (b14), \"m\" (b15),\n+        \"m\" (b16), \"m\" (b17), \"m\" (b18), \"m\" (b19), \"m\" (b20), \n+        \"m\" (b21), \"m\" (b22), \"m\" (b23), \"m\" (b24), \"m\" (b25),\n+        \"m\" (b26), \"m\" (b27), \"m\" (b28), \"m\" (b29)\n+      : /* no clobbers */\n+      : label01);\n+\n+    __asm__ goto (\"\" /* { dg-error \"more than 30 operands\" } */\n+      : /* no outputs */\n+      : \"m\" (b01), \"m\" (b02), \"m\" (b03), \"m\" (b04), \"m\" (b05), \n+        \"m\" (b06), \"m\" (b07), \"m\" (b08), \"m\" (b09), \"m\" (b10), \n+        \"m\" (b11), \"m\" (b12), \"m\" (b13), \"m\" (b14), \"m\" (b15),\n+        \"m\" (b16), \"m\" (b17), \"m\" (b18), \"m\" (b19), \"m\" (b20), \n+        \"m\" (b21), \"m\" (b22), \"m\" (b23), \"m\" (b24), \"m\" (b25),\n+        \"m\" (b26), \"m\" (b27), \"m\" (b28), \"m\" (b29), \"m\" (b30)\n+      : /* no clobbers */\n+      : label01);\n+\n+      return 0;\n+}\n+\n+int Outputs()\n+{\n+    int b01, b02, b03, b04, b05, b06, b07, b08, b09, b10;\n+    int b11, b12, b13, b14, b15, b16, b17, b18, b19, b20;\n+    int b21, b22, b23, b24, b25, b26, b27, b28, b29, b30;\n+    int b31;\n+\n+    /* Outputs. */\n+    __asm__ volatile (\"\" /* Works. */\n+         : \"=m\" (b01),  \"=m\" (b02),  \"=m\" (b03),  \"=m\" (b04), \"=m\" (b05),\n+           \"=m\" (b06),  \"=m\" (b07),  \"=m\" (b08),  \"=m\" (b09), \"=m\" (b10),\n+           \"=m\" (b11),  \"=m\" (b12),  \"=m\" (b13),  \"=m\" (b14), \"=m\" (b15),\n+           \"=m\" (b16),  \"=m\" (b17),  \"=m\" (b18),  \"=m\" (b19), \"=m\" (b20), \n+           \"=m\" (b21),  \"=m\" (b22),  \"=m\" (b23),  \"=m\" (b24), \"=m\" (b25),\n+           \"=m\" (b26),  \"=m\" (b27),  \"=m\" (b28),  \"=m\" (b29), \"=m\" (b30));\n+\n+    __asm__ volatile (\"\" /* { dg-error \"more than 30 operands\" } */\n+         : \"=m\" (b01),  \"=m\" (b02),  \"=m\" (b03),  \"=m\" (b04), \"=m\" (b05),\n+           \"=m\" (b06),  \"=m\" (b07),  \"=m\" (b08),  \"=m\" (b09), \"=m\" (b10),\n+           \"=m\" (b11),  \"=m\" (b12),  \"=m\" (b13),  \"=m\" (b14), \"=m\" (b15),\n+           \"=m\" (b16),  \"=m\" (b17),  \"=m\" (b18),  \"=m\" (b19), \"=m\" (b20), \n+           \"=m\" (b21),  \"=m\" (b22),  \"=m\" (b23),  \"=m\" (b24), \"=m\" (b25),\n+           \"=m\" (b26),  \"=m\" (b27),  \"=m\" (b28),  \"=m\" (b29), \"=m\" (b30),\n+           \"=m\" (b31));\n+\n+    return 0;\n+}\n+\n+int Inputs()\n+{\n+    int b01, b02, b03, b04, b05, b06, b07, b08, b09, b10;\n+    int b11, b12, b13, b14, b15, b16, b17, b18, b19, b20;\n+    int b21, b22, b23, b24, b25, b26, b27, b28, b29, b30;\n+    int b31;\n+\n+    b01 = b02 = b03 = b04 = b05 = b06 = b07 = b08 = b09 = b10 = 0;\n+    b11 = b12 = b13 = b14 = b15 = b16 = b17 = b18 = b19 = b20 = 0;\n+    b21 = b22 = b23 = b24 = b25 = b26 = b27 = b28 = b29 = b30 = 0;\n+    b31 = 0;\n+\n+    __asm__ volatile (\"\" /* Works. */\n+      : /* no outputs */\n+      : \"m\" (b01), \"m\" (b02), \"m\" (b03), \"m\" (b04), \"m\" (b05), \n+        \"m\" (b06), \"m\" (b07), \"m\" (b08), \"m\" (b09), \"m\" (b10), \n+        \"m\" (b11), \"m\" (b12), \"m\" (b13), \"m\" (b14), \"m\" (b15),\n+        \"m\" (b16), \"m\" (b17), \"m\" (b18), \"m\" (b19), \"m\" (b20), \n+        \"m\" (b21), \"m\" (b22), \"m\" (b23), \"m\" (b24), \"m\" (b25),\n+        \"m\" (b26), \"m\" (b27), \"m\" (b28), \"m\" (b29), \"m\" (b30));\n+\n+    __asm__ volatile (\"\" /* { dg-error \"more than 30 operands\" } */\n+      : /* no outputs */\n+      : \"m\" (b01), \"m\" (b02), \"m\" (b03), \"m\" (b04), \"m\" (b05), \n+        \"m\" (b06), \"m\" (b07), \"m\" (b08), \"m\" (b09), \"m\" (b10), \n+        \"m\" (b11), \"m\" (b12), \"m\" (b13), \"m\" (b14), \"m\" (b15),\n+        \"m\" (b16), \"m\" (b17), \"m\" (b18), \"m\" (b19), \"m\" (b20), \n+        \"m\" (b21), \"m\" (b22), \"m\" (b23), \"m\" (b24), \"m\" (b25),\n+        \"m\" (b26), \"m\" (b27), \"m\" (b28), \"m\" (b29), \"m\" (b30),\n+        \"m\" (b31));\n+\n+    return 0;\n+}\n+\n+int Input_Output()\n+{\n+    int b01, b02, b03, b04, b05, b06, b07, b08, b09, b10;\n+    int b11, b12, b13, b14, b15, b16, b17, b18, b19, b20;\n+    int b21, b22, b23, b24, b25, b26, b27, b28, b29, b30;\n+    int b31;\n+\n+    b01 = b02 = b03 = b04 = b05 = b06 = b07 = b08 = b09 = b10 = 0;\n+    b11 = b12 = b13 = b14 = b15 = b16 = b17 = b18 = b19 = b20 = 0;\n+    b21 = b22 = b23 = b24 = b25 = b26 = b27 = b28 = b29 = b30 = 0;\n+    b31 = 0;\n+\n+    __asm__ volatile (\"\" /* Works. */\n+         : \"+m\" (b01),  \"+m\" (b02),  \"+m\" (b03),  \"+m\" (b04), \"+m\" (b05),\n+           \"+m\" (b06),  \"+m\" (b07),  \"+m\" (b08),  \"+m\" (b09), \"+m\" (b10),\n+           \"+m\" (b11),  \"+m\" (b12),  \"+m\" (b13),  \"+m\" (b14), \"+m\" (b15));\n+\n+    __asm__ volatile (\"\" /* { dg-error \"more than 30 operands\" } */\n+         : \"+m\" (b01),  \"+m\" (b02),  \"+m\" (b03),  \"+m\" (b04), \"+m\" (b05),\n+           \"+m\" (b06),  \"+m\" (b07),  \"+m\" (b08),  \"+m\" (b09), \"+m\" (b10),\n+           \"+m\" (b11),  \"+m\" (b12),  \"+m\" (b13),  \"+m\" (b14), \"+m\" (b15),\n+           \"+m\" (b16));\n+\n+    return 0;\n+}"}]}