{"sha": "386065531e4009c2c5ac80cf4e8b1cf4c53ba493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2MDY1NTMxZTQwMDljMmM1YWM4MGNmNGU4YjFjZjRjNTNiYTQ5Mw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-12-19T20:10:41Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-12-19T20:10:41Z"}, "message": "i386.c (ix86_split_to_parts): Use an array with four elements for decoding a CONST_DOUBLE on 64 bits targets.\n\n\t* config/i386/i386.c (ix86_split_to_parts): Use an array with\n\tfour elements for decoding a CONST_DOUBLE on 64 bits targets.\n\nFrom-SVN: r92387", "tree": {"sha": "8c3801026bc7d9e4ae16bca5a8ae983cfda40dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c3801026bc7d9e4ae16bca5a8ae983cfda40dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386065531e4009c2c5ac80cf4e8b1cf4c53ba493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386065531e4009c2c5ac80cf4e8b1cf4c53ba493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386065531e4009c2c5ac80cf4e8b1cf4c53ba493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386065531e4009c2c5ac80cf4e8b1cf4c53ba493/comments", "author": null, "committer": null, "parents": [{"sha": "ed9c846c2079c536b0313dfaeef15c22e3e66a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9c846c2079c536b0313dfaeef15c22e3e66a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9c846c2079c536b0313dfaeef15c22e3e66a2b"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "c3ee48f579056c0d33dff5908bc9a9997c0f60c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386065531e4009c2c5ac80cf4e8b1cf4c53ba493/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386065531e4009c2c5ac80cf4e8b1cf4c53ba493/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=386065531e4009c2c5ac80cf4e8b1cf4c53ba493", "patch": "@@ -1,11 +1,16 @@\n+2003-12-19  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* config/i386/i386.c (ix86_split_to_parts): Use an array with\n+\tfour elements for decoding a CONST_DOUBLE on 64 bits targets.\n+\n 2004-12-19  Bernardo Innocenti  <bernie@develer.com>\n \n \t* config/m68k/m68kemb.h (TARGET_OS_CPP_BUILTINS): Remove redundant\n \tdefinition of mc68000, already present in TARGET_CPU_CPP_BUILTINS.\n \n 2004-12-18  Daniel Berlin  <dberlin@dberlin.org>\n \n-        * lambda-code.c (can_convert_to_perfect_nest): Make checking\n+\t* lambda-code.c (can_convert_to_perfect_nest): Make checking\n \tmatch up with what perfect_nestify can actually handle.\n \t(perfect_nestify): Don't return false in the phi node loop.\n \n@@ -68,17 +73,17 @@\n \n 2004-12-18  Zdenek Dvorak  <dvorakz@suse.cz>\n \n-        PR tree-optimization/18800\n-        * params.def (PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND): New parameter.\n-        * tree-ssa-loop-ivopts.c (struct iv_ca): Add n_cands field.\n-        (ALWAYS_PRUNE_CAND_SET_BOUND): New macro.\n-        (iv_ca_set_no_cp, iv_ca_set_cp, iv_ca_new): Update n_cands field.\n-        (iv_ca_delta_join, iv_ca_delta_reverse, iv_ca_n_cands, iv_ca_prune):\n-        New functions.\n-        (iv_ca_extend): Return number of candidates in the set.\n-        (try_add_cand_for): Add argument to iv_ca_extend calls.\n-        (try_improve_iv_set): Use iv_ca_prune.\n-        * doc/invoke.texi (iv-always-prune-cand-set-bound): Document.\n+\tPR tree-optimization/18800\n+\t* params.def (PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND): New parameter.\n+\t* tree-ssa-loop-ivopts.c (struct iv_ca): Add n_cands field.\n+\t(ALWAYS_PRUNE_CAND_SET_BOUND): New macro.\n+\t(iv_ca_set_no_cp, iv_ca_set_cp, iv_ca_new): Update n_cands field.\n+\t(iv_ca_delta_join, iv_ca_delta_reverse, iv_ca_n_cands, iv_ca_prune):\n+\tNew functions.\n+\t(iv_ca_extend): Return number of candidates in the set.\n+\t(try_add_cand_for): Add argument to iv_ca_extend calls.\n+\t(try_improve_iv_set): Use iv_ca_prune.\n+\t* doc/invoke.texi (iv-always-prune-cand-set-bound): Document.\n \n 2004-12-18  Zdenek Dvorak  <dvorakz@suse.cz>\n "}, {"sha": "04ebe8c2a046795e7178f0f723a29c340982a046", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386065531e4009c2c5ac80cf4e8b1cf4c53ba493/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386065531e4009c2c5ac80cf4e8b1cf4c53ba493/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=386065531e4009c2c5ac80cf4e8b1cf4c53ba493", "patch": "@@ -9835,10 +9835,11 @@ ix86_split_to_parts (rtx operand, rtx *parts, enum machine_mode mode)\n \t  else if (GET_CODE (operand) == CONST_DOUBLE)\n \t    {\n \t      REAL_VALUE_TYPE r;\n-\t      long l[3];\n+\t      long l[4];\n \n \t      REAL_VALUE_FROM_CONST_DOUBLE (r, operand);\n \t      real_to_target (l, &r, mode);\n+\n \t      /* Do not use shift by 32 to avoid warning on 32bit systems.  */\n \t      if (HOST_BITS_PER_WIDE_INT >= 64)\n \t        parts[0]\n@@ -9848,6 +9849,7 @@ ix86_split_to_parts (rtx operand, rtx *parts, enum machine_mode mode)\n \t\t       DImode);\n \t      else\n \t        parts[0] = immed_double_const (l[0], l[1], DImode);\n+\n \t      if (upper_mode == SImode)\n \t        parts[1] = gen_int_mode (l[2], SImode);\n \t      else if (HOST_BITS_PER_WIDE_INT >= 64)"}]}