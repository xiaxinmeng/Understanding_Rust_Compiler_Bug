{"sha": "4cea8675697151f7e8c5b30259da9ac0971ab070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlYTg2NzU2OTcxNTFmN2U4YzViMzAyNTlkYTlhYzA5NzFhYjA3MA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-01-20T14:38:18Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-01-20T14:38:18Z"}, "message": "omp-offload: use PROP_gimple_lomp_dev\n\n\t* omp-expand.c (expand_omp_simd): Clear PROP_gimple_lomp_dev regardless\n\tof safelen status.\n\t* omp-offload.c (pass_omp_device_lower::gate): Use PROP_gimple_lomp_dev.\n\t* passes.c (dump_properties): Handle PROP_gimple_lomp_dev.\n\t* tree-inline.c (expand_call_inline): Propagate PROP_gimple_lomp_dev.\n\nFrom-SVN: r244717", "tree": {"sha": "28137ac51f0fa414324d86543939710c9a791a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28137ac51f0fa414324d86543939710c9a791a93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cea8675697151f7e8c5b30259da9ac0971ab070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea8675697151f7e8c5b30259da9ac0971ab070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cea8675697151f7e8c5b30259da9ac0971ab070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea8675697151f7e8c5b30259da9ac0971ab070/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b0fb476f24b0cec64502a2c2bed16a0c429f8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0fb476f24b0cec64502a2c2bed16a0c429f8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0fb476f24b0cec64502a2c2bed16a0c429f8d2"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "0b3d0c98bb0f4a3dd4e8162e4757a943e0ada153", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cea8675697151f7e8c5b30259da9ac0971ab070", "patch": "@@ -1,3 +1,11 @@\n+2017-01-20  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* omp-expand.c (expand_omp_simd): Clear PROP_gimple_lomp_dev regardless\n+\tof safelen status.\n+\t* omp-offload.c (pass_omp_device_lower::gate): Use PROP_gimple_lomp_dev.\n+\t* passes.c (dump_properties): Handle PROP_gimple_lomp_dev.\n+\t* tree-inline.c (expand_call_inline): Propagate PROP_gimple_lomp_dev.\n+\n 2017-01-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/71270"}, {"sha": "d3891e3175e1554c11b9c0db2c29699c8e907dff", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=4cea8675697151f7e8c5b30259da9ac0971ab070", "patch": "@@ -4590,13 +4590,16 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n     }\n   tree step = fd->loop.step;\n \n-  bool is_simt = (safelen_int > 1\n-\t\t  && omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n-\t\t\t\t      OMP_CLAUSE__SIMT_));\n-  tree simt_lane = NULL_TREE, simt_maxlane = NULL_TREE;\n+  bool is_simt = omp_find_clause (gimple_omp_for_clauses (fd->for_stmt),\n+\t\t\t\t  OMP_CLAUSE__SIMT_);\n   if (is_simt)\n     {\n       cfun->curr_properties &= ~PROP_gimple_lomp_dev;\n+      is_simt = safelen_int > 1;\n+    }\n+  tree simt_lane = NULL_TREE, simt_maxlane = NULL_TREE;\n+  if (is_simt)\n+    {\n       simt_lane = create_tmp_var (unsigned_type_node);\n       gimple *g = gimple_build_call_internal (IFN_GOMP_SIMT_LANE, 0);\n       gimple_call_set_lhs (g, simt_lane);"}, {"sha": "6ff6bc2eeb9557c463894ed4b862ff03f79ec8c4", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=4cea8675697151f7e8c5b30259da9ac0971ab070", "patch": "@@ -1613,14 +1613,9 @@ class pass_omp_device_lower : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *ARG_UNUSED (fun))\n+  virtual bool gate (function *fun)\n     {\n-      /* FIXME: this should use PROP_gimple_lomp_dev.  */\n-#ifdef ACCEL_COMPILER\n-      return true;\n-#else\n-      return ENABLE_OFFLOADING && (flag_openmp || in_lto_p);\n-#endif\n+      return !(fun->curr_properties & PROP_gimple_lomp_dev);\n     }\n   virtual unsigned int execute (function *)\n     {"}, {"sha": "ace68b8ee7a4a7d831520ca8b5170c69e07325bb", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=4cea8675697151f7e8c5b30259da9ac0971ab070", "patch": "@@ -2929,6 +2929,8 @@ dump_properties (FILE *dump, unsigned int props)\n     fprintf (dump, \"PROP_rtl\\n\");\n   if (props & PROP_gimple_lomp)\n     fprintf (dump, \"PROP_gimple_lomp\\n\");\n+  if (props & PROP_gimple_lomp_dev)\n+    fprintf (dump, \"PROP_gimple_lomp_dev\\n\");\n   if (props & PROP_gimple_lcx)\n     fprintf (dump, \"PROP_gimple_lcx\\n\");\n   if (props & PROP_gimple_lvec)"}, {"sha": "42055bd83186cd5e44c5538b7ad923e77ef157da", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cea8675697151f7e8c5b30259da9ac0971ab070/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=4cea8675697151f7e8c5b30259da9ac0971ab070", "patch": "@@ -4413,6 +4413,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   bool purge_dead_abnormal_edges;\n   gcall *call_stmt;\n   unsigned int i;\n+  unsigned int prop_mask, src_properties;\n \n   /* The gimplifier uses input_location in too many places, such as\n      internal_get_tmp_var ().  */\n@@ -4617,11 +4618,13 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   id->call_stmt = stmt;\n \n   /* If the src function contains an IFN_VA_ARG, then so will the dst\n-     function after inlining.  */\n-  if ((id->src_cfun->curr_properties & PROP_gimple_lva) == 0)\n+     function after inlining.  Likewise for IFN_GOMP_USE_SIMT.  */\n+  prop_mask = PROP_gimple_lva | PROP_gimple_lomp_dev;\n+  src_properties = id->src_cfun->curr_properties & prop_mask;\n+  if (src_properties != prop_mask)\n     {\n       struct function *dst_cfun = DECL_STRUCT_FUNCTION (id->dst_fn);\n-      dst_cfun->curr_properties &= ~PROP_gimple_lva;\n+      dst_cfun->curr_properties &= src_properties | ~prop_mask;\n     }\n \n   gcc_assert (!id->src_cfun->after_inlining);"}]}