{"sha": "50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "node_id": "C_kwDOANBUbNoAKDUwZDljYTcxMDRkNDBmMGEzMzFkMGRkMDFlM2MwNjllY2Y3ZjZjOTc", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-02-25T07:09:03Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-02-28T01:37:25Z"}, "message": "AVX512F: Add helper enumeration for ternary logic intrinsics.\n\nSync with llvm change in https://reviews.llvm.org/D120307 to\nadd enumeration and truncate imm to unsigned char, so users could\nuse ~ on immediates.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fintrin.h (_MM_TERNLOG_ENUM): New enum.\n\t(_mm512_ternarylogic_epi64): Truncate imm to unsigned\n\tchar to avoid error when using ~enum as parameter.\n\t(_mm512_mask_ternarylogic_epi64): Likewise.\n\t(_mm512_maskz_ternarylogic_epi64): Likewise.\n\t(_mm512_ternarylogic_epi32): Likewise.\n\t(_mm512_mask_ternarylogic_epi32): Likewise.\n\t(_mm512_maskz_ternarylogic_epi32): Likewise.\n\t* config/i386/avx512vlintrin.h (_mm256_ternarylogic_epi64):\n\tAdjust imm param type to unsigned char.\n\t(_mm256_mask_ternarylogic_epi64): Likewise.\n\t(_mm256_maskz_ternarylogic_epi64): Likewise.\n\t(_mm256_ternarylogic_epi32): Likewise.\n\t(_mm256_mask_ternarylogic_epi32): Likewise.\n\t(_mm256_maskz_ternarylogic_epi32): Likewise.\n\t(_mm_ternarylogic_epi64): Likewise.\n\t(_mm_mask_ternarylogic_epi64): Likewise.\n\t(_mm_maskz_ternarylogic_epi64): Likewise.\n\t(_mm_ternarylogic_epi32): Likewise.\n\t(_mm_mask_ternarylogic_epi32): Likewise.\n\t(_mm_maskz_ternarylogic_epi32): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512f-vpternlogd-1.c: Use new enum.\n\t* gcc.target/i386/avx512f-vpternlogq-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-vpternlogd-1.c: Likewise.\n\t* gcc.target/i386/avx512vl-vpternlogq-1.c: Likewise.\n\t* gcc.target/i386/testimm-10.c: Remove imm check for vpternlog\n\tinsns since the imm has been truncated in intrinsic.", "tree": {"sha": "3d665e8ae8b734f13e033e5ed20fb0eba22c8639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d665e8ae8b734f13e033e5ed20fb0eba22c8639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c1b0385aab2d83836bbd814fbb6abb72259d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c1b0385aab2d83836bbd814fbb6abb72259d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c1b0385aab2d83836bbd814fbb6abb72259d80"}], "stats": {"total": 458, "additions": 285, "deletions": 173}, "files": [{"sha": "29511fd28316a7f2a5afd5025e00721b2097a91a", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 87, "deletions": 45, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "patch": "@@ -1639,94 +1639,136 @@ _mm_maskz_sub_round_ss (__mmask8 __U, __m128 __A, __m128 __B,\n \n #endif\n \n+/* Constant helper to represent the ternary logic operations among\n+   vector A, B and C.  */\n+typedef enum\n+{\n+  _MM_TERNLOG_A = 0xF0,\n+  _MM_TERNLOG_B = 0xCC,\n+  _MM_TERNLOG_C = 0xAA\n+} _MM_TERNLOG_ENUM;\n+\n #ifdef __OPTIMIZE__\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_ternarylogic_epi64 (__m512i __A, __m512i __B, __m512i __C,\n \t\t\t   const int __imm)\n {\n-  return (__m512i) __builtin_ia32_pternlogq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t     (__v8di) __B,\n-\t\t\t\t\t\t     (__v8di) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) -1);\n+  return (__m512i)\n+    __builtin_ia32_pternlogq512_mask ((__v8di) __A,\n+\t\t\t\t      (__v8di) __B,\n+\t\t\t\t      (__v8di) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) -1);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_ternarylogic_epi64 (__m512i __A, __mmask8 __U, __m512i __B,\n \t\t\t\t__m512i __C, const int __imm)\n {\n-  return (__m512i) __builtin_ia32_pternlogq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t     (__v8di) __B,\n-\t\t\t\t\t\t     (__v8di) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m512i)\n+    __builtin_ia32_pternlogq512_mask ((__v8di) __A,\n+\t\t\t\t      (__v8di) __B,\n+\t\t\t\t      (__v8di) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_ternarylogic_epi64 (__mmask8 __U, __m512i __A, __m512i __B,\n \t\t\t\t __m512i __C, const int __imm)\n {\n-  return (__m512i) __builtin_ia32_pternlogq512_maskz ((__v8di) __A,\n-\t\t\t\t\t\t      (__v8di) __B,\n-\t\t\t\t\t\t      (__v8di) __C,\n-\t\t\t\t\t\t      __imm, (__mmask8) __U);\n+  return (__m512i)\n+    __builtin_ia32_pternlogq512_maskz ((__v8di) __A,\n+\t\t\t\t       (__v8di) __B,\n+\t\t\t\t       (__v8di) __C,\n+\t\t\t\t       (unsigned char) __imm,\n+\t\t\t\t       (__mmask8) __U);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_ternarylogic_epi32 (__m512i __A, __m512i __B, __m512i __C,\n \t\t\t   const int __imm)\n {\n-  return (__m512i) __builtin_ia32_pternlogd512_mask ((__v16si) __A,\n-\t\t\t\t\t\t     (__v16si) __B,\n-\t\t\t\t\t\t     (__v16si) __C,\n-\t\t\t\t\t\t     __imm, (__mmask16) -1);\n+  return (__m512i)\n+    __builtin_ia32_pternlogd512_mask ((__v16si) __A,\n+\t\t\t\t      (__v16si) __B,\n+\t\t\t\t      (__v16si) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask16) -1);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_ternarylogic_epi32 (__m512i __A, __mmask16 __U, __m512i __B,\n \t\t\t\t__m512i __C, const int __imm)\n {\n-  return (__m512i) __builtin_ia32_pternlogd512_mask ((__v16si) __A,\n-\t\t\t\t\t\t     (__v16si) __B,\n-\t\t\t\t\t\t     (__v16si) __C,\n-\t\t\t\t\t\t     __imm, (__mmask16) __U);\n+  return (__m512i)\n+    __builtin_ia32_pternlogd512_mask ((__v16si) __A,\n+\t\t\t\t      (__v16si) __B,\n+\t\t\t\t      (__v16si) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask16) __U);\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_ternarylogic_epi32 (__mmask16 __U, __m512i __A, __m512i __B,\n \t\t\t\t __m512i __C, const int __imm)\n {\n-  return (__m512i) __builtin_ia32_pternlogd512_maskz ((__v16si) __A,\n-\t\t\t\t\t\t      (__v16si) __B,\n-\t\t\t\t\t\t      (__v16si) __C,\n-\t\t\t\t\t\t      __imm, (__mmask16) __U);\n+  return (__m512i)\n+    __builtin_ia32_pternlogd512_maskz ((__v16si) __A,\n+\t\t\t\t       (__v16si) __B,\n+\t\t\t\t       (__v16si) __C,\n+\t\t\t\t       (unsigned char) __imm,\n+\t\t\t\t       (__mmask16) __U);\n }\n #else\n-#define _mm512_ternarylogic_epi64(A, B, C, I)\t\t\t\t\\\n-  ((__m512i) __builtin_ia32_pternlogq512_mask ((__v8di)(__m512i)(A),\t\\\n-    (__v8di)(__m512i)(B), (__v8di)(__m512i)(C), (int)(I), (__mmask8)-1))\n-#define _mm512_mask_ternarylogic_epi64(A, U, B, C, I)\t\t\t\\\n-  ((__m512i) __builtin_ia32_pternlogq512_mask ((__v8di)(__m512i)(A),\t\\\n-    (__v8di)(__m512i)(B), (__v8di)(__m512i)(C), (int)(I), (__mmask8)(U)))\n-#define _mm512_maskz_ternarylogic_epi64(U, A, B, C, I)\t\t\t\\\n-  ((__m512i) __builtin_ia32_pternlogq512_maskz ((__v8di)(__m512i)(A),\t\\\n-    (__v8di)(__m512i)(B), (__v8di)(__m512i)(C), (int)(I), (__mmask8)(U)))\n-#define _mm512_ternarylogic_epi32(A, B, C, I)\t\t\t\t\\\n-  ((__m512i) __builtin_ia32_pternlogd512_mask ((__v16si)(__m512i)(A),\t\\\n-    (__v16si)(__m512i)(B), (__v16si)(__m512i)(C), (int)(I),\t\t\\\n-    (__mmask16)-1))\n-#define _mm512_mask_ternarylogic_epi32(A, U, B, C, I)\t\t\t\\\n-  ((__m512i) __builtin_ia32_pternlogd512_mask ((__v16si)(__m512i)(A),\t\\\n-    (__v16si)(__m512i)(B), (__v16si)(__m512i)(C), (int)(I),\t\t\\\n-    (__mmask16)(U)))\n-#define _mm512_maskz_ternarylogic_epi32(U, A, B, C, I)\t\t\t\\\n-  ((__m512i) __builtin_ia32_pternlogd512_maskz ((__v16si)(__m512i)(A),\t\\\n-    (__v16si)(__m512i)(B), (__v16si)(__m512i)(C), (int)(I),\t\t\\\n-    (__mmask16)(U)))\n+#define _mm512_ternarylogic_epi64(A, B, C, I)\t\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq512_mask ((__v8di) (__m512i) (A),\t\\\n+\t\t\t\t     (__v8di) (__m512i) (B),\t\\\n+\t\t\t\t     (__v8di) (__m512i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) -1))\n+#define _mm512_mask_ternarylogic_epi64(A, U, B, C, I)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq512_mask ((__v8di) (__m512i) (A),\t\\\n+\t\t\t\t     (__v8di) (__m512i) (B),\t\\\n+\t\t\t\t     (__v8di) (__m512i) (C),\t\\\n+\t\t\t\t     (unsigned char)(I),\t\\\n+\t\t\t\t     (__mmask8) (U)))\n+#define _mm512_maskz_ternarylogic_epi64(U, A, B, C, I)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq512_maskz ((__v8di) (__m512i) (A),\t\\\n+\t\t\t\t      (__v8di) (__m512i) (B),\t\\\n+\t\t\t\t      (__v8di) (__m512i) (C),\t\\\n+\t\t\t\t      (unsigned char) (I),\t\\\n+\t\t\t\t      (__mmask8) (U)))\n+#define _mm512_ternarylogic_epi32(A, B, C, I)\t\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd512_mask ((__v16si) (__m512i) (A),\t\\\n+\t\t\t\t     (__v16si) (__m512i) (B),\t\\\n+\t\t\t\t     (__v16si) (__m512i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask16) -1))\n+#define _mm512_mask_ternarylogic_epi32(A, U, B, C, I)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd512_mask ((__v16si) (__m512i) (A),\t\\\n+\t\t\t\t     (__v16si) (__m512i) (B),\t\\\n+\t\t\t\t     (__v16si) (__m512i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask16) (U)))\n+#define _mm512_maskz_ternarylogic_epi32(U, A, B, C, I)\t\t\\\n+  ((__m512i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd512_maskz ((__v16si) (__m512i) (A),\t\\\n+\t\t\t\t      (__v16si) (__m512i) (B),\t\\\n+\t\t\t\t      (__v16si) (__m512i) (C),\t\\\n+\t\t\t\t      (unsigned char) (I),\t\\\n+\t\t\t\t      (__mmask16) (U)))\n #endif\n \n extern __inline __m512d"}, {"sha": "26b286eae6b79ee8bd4e475423be8cf3eebd0383", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 175, "deletions": 103, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "patch": "@@ -10575,10 +10575,12 @@ __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_ternarylogic_epi64 (__m256i __A, __m256i __B, __m256i __C,\n \t\t\t   const int __imm)\n {\n-  return (__m256i) __builtin_ia32_pternlogq256_mask ((__v4di) __A,\n-\t\t\t\t\t\t     (__v4di) __B,\n-\t\t\t\t\t\t     (__v4di) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) -1);\n+  return (__m256i)\n+    __builtin_ia32_pternlogq256_mask ((__v4di) __A,\n+\t\t\t\t      (__v4di) __B,\n+\t\t\t\t      (__v4di) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) -1);\n }\n \n extern __inline __m256i\n@@ -10587,10 +10589,12 @@ _mm256_mask_ternarylogic_epi64 (__m256i __A, __mmask8 __U,\n \t\t\t\t__m256i __B, __m256i __C,\n \t\t\t\tconst int __imm)\n {\n-  return (__m256i) __builtin_ia32_pternlogq256_mask ((__v4di) __A,\n-\t\t\t\t\t\t     (__v4di) __B,\n-\t\t\t\t\t\t     (__v4di) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m256i)\n+    __builtin_ia32_pternlogq256_mask ((__v4di) __A,\n+\t\t\t\t      (__v4di) __B,\n+\t\t\t\t      (__v4di) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m256i\n@@ -10599,22 +10603,25 @@ _mm256_maskz_ternarylogic_epi64 (__mmask8 __U, __m256i __A,\n \t\t\t\t __m256i __B, __m256i __C,\n \t\t\t\t const int __imm)\n {\n-  return (__m256i) __builtin_ia32_pternlogq256_maskz ((__v4di) __A,\n-\t\t\t\t\t\t      (__v4di) __B,\n-\t\t\t\t\t\t      (__v4di) __C,\n-\t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) __U);\n+  return (__m256i)\n+    __builtin_ia32_pternlogq256_maskz ((__v4di) __A,\n+\t\t\t\t       (__v4di) __B,\n+\t\t\t\t       (__v4di) __C,\n+\t\t\t\t       (unsigned char) __imm,\n+\t\t\t\t       (__mmask8) __U);\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_ternarylogic_epi32 (__m256i __A, __m256i __B, __m256i __C,\n \t\t\t   const int __imm)\n {\n-  return (__m256i) __builtin_ia32_pternlogd256_mask ((__v8si) __A,\n-\t\t\t\t\t\t     (__v8si) __B,\n-\t\t\t\t\t\t     (__v8si) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) -1);\n+  return (__m256i)\n+    __builtin_ia32_pternlogd256_mask ((__v8si) __A,\n+\t\t\t\t      (__v8si) __B,\n+\t\t\t\t      (__v8si) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) -1);\n }\n \n extern __inline __m256i\n@@ -10623,10 +10630,12 @@ _mm256_mask_ternarylogic_epi32 (__m256i __A, __mmask8 __U,\n \t\t\t\t__m256i __B, __m256i __C,\n \t\t\t\tconst int __imm)\n {\n-  return (__m256i) __builtin_ia32_pternlogd256_mask ((__v8si) __A,\n-\t\t\t\t\t\t     (__v8si) __B,\n-\t\t\t\t\t\t     (__v8si) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m256i)\n+    __builtin_ia32_pternlogd256_mask ((__v8si) __A,\n+\t\t\t\t      (__v8si) __B,\n+\t\t\t\t      (__v8si) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m256i\n@@ -10635,79 +10644,94 @@ _mm256_maskz_ternarylogic_epi32 (__mmask8 __U, __m256i __A,\n \t\t\t\t __m256i __B, __m256i __C,\n \t\t\t\t const int __imm)\n {\n-  return (__m256i) __builtin_ia32_pternlogd256_maskz ((__v8si) __A,\n-\t\t\t\t\t\t      (__v8si) __B,\n-\t\t\t\t\t\t      (__v8si) __C,\n-\t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) __U);\n+  return (__m256i)\n+    __builtin_ia32_pternlogd256_maskz ((__v8si) __A,\n+\t\t\t\t       (__v8si) __B,\n+\t\t\t\t       (__v8si) __C,\n+\t\t\t\t       (unsigned char) __imm,\n+\t\t\t\t       (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ternarylogic_epi64 (__m128i __A, __m128i __B, __m128i __C,\n \t\t\tconst int __imm)\n {\n-  return (__m128i) __builtin_ia32_pternlogq128_mask ((__v2di) __A,\n-\t\t\t\t\t\t     (__v2di) __B,\n-\t\t\t\t\t\t     (__v2di) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) -1);\n+  return (__m128i)\n+    __builtin_ia32_pternlogq128_mask ((__v2di) __A,\n+\t\t\t\t      (__v2di) __B,\n+\t\t\t\t      (__v2di) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) -1);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_ternarylogic_epi64 (__m128i __A, __mmask8 __U,\n-\t\t\t     __m128i __B, __m128i __C, const int __imm)\n+\t\t\t     __m128i __B, __m128i __C,\n+\t\t\t     const int __imm)\n {\n-  return (__m128i) __builtin_ia32_pternlogq128_mask ((__v2di) __A,\n-\t\t\t\t\t\t     (__v2di) __B,\n-\t\t\t\t\t\t     (__v2di) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m128i)\n+    __builtin_ia32_pternlogq128_mask ((__v2di) __A,\n+\t\t\t\t      (__v2di) __B,\n+\t\t\t\t      (__v2di) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_ternarylogic_epi64 (__mmask8 __U, __m128i __A,\n-\t\t\t      __m128i __B, __m128i __C, const int __imm)\n+\t\t\t      __m128i __B, __m128i __C,\n+\t\t\t      const int __imm)\n {\n-  return (__m128i) __builtin_ia32_pternlogq128_maskz ((__v2di) __A,\n-\t\t\t\t\t\t      (__v2di) __B,\n-\t\t\t\t\t\t      (__v2di) __C,\n-\t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) __U);\n+  return (__m128i)\n+    __builtin_ia32_pternlogq128_maskz ((__v2di) __A,\n+\t\t\t\t       (__v2di) __B,\n+\t\t\t\t       (__v2di) __C,\n+\t\t\t\t       (unsigned char) __imm,\n+\t\t\t\t       (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_ternarylogic_epi32 (__m128i __A, __m128i __B, __m128i __C,\n \t\t\tconst int __imm)\n {\n-  return (__m128i) __builtin_ia32_pternlogd128_mask ((__v4si) __A,\n-\t\t\t\t\t\t     (__v4si) __B,\n-\t\t\t\t\t\t     (__v4si) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) -1);\n+  return (__m128i)\n+    __builtin_ia32_pternlogd128_mask ((__v4si) __A,\n+\t\t\t\t      (__v4si) __B,\n+\t\t\t\t      (__v4si) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) -1);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_ternarylogic_epi32 (__m128i __A, __mmask8 __U,\n-\t\t\t     __m128i __B, __m128i __C, const int __imm)\n+\t\t\t     __m128i __B, __m128i __C,\n+\t\t\t     const int __imm)\n {\n-  return (__m128i) __builtin_ia32_pternlogd128_mask ((__v4si) __A,\n-\t\t\t\t\t\t     (__v4si) __B,\n-\t\t\t\t\t\t     (__v4si) __C, __imm,\n-\t\t\t\t\t\t     (__mmask8) __U);\n+  return (__m128i)\n+    __builtin_ia32_pternlogd128_mask ((__v4si) __A,\n+\t\t\t\t      (__v4si) __B,\n+\t\t\t\t      (__v4si) __C,\n+\t\t\t\t      (unsigned char) __imm,\n+\t\t\t\t      (__mmask8) __U);\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_ternarylogic_epi32 (__mmask8 __U, __m128i __A,\n-\t\t\t      __m128i __B, __m128i __C, const int __imm)\n+\t\t\t      __m128i __B, __m128i __C,\n+\t\t\t      const int __imm)\n {\n-  return (__m128i) __builtin_ia32_pternlogd128_maskz ((__v4si) __A,\n-\t\t\t\t\t\t      (__v4si) __B,\n-\t\t\t\t\t\t      (__v4si) __C,\n-\t\t\t\t\t\t      __imm,\n-\t\t\t\t\t\t      (__mmask8) __U);\n+  return (__m128i)\n+    __builtin_ia32_pternlogd128_maskz ((__v4si) __A,\n+\t\t\t\t       (__v4si) __B,\n+\t\t\t\t       (__v4si) __C,\n+\t\t\t\t       (unsigned char) __imm,\n+\t\t\t\t       (__mmask8) __U);\n }\n \n extern __inline __m256\n@@ -12910,53 +12934,101 @@ _mm256_permutex_pd (__m256d __X, const int __M)\n     (__v2di)(__m128i)_mm_setzero_si128 (),\\\n     (__mmask8)(U)))\n \n-#define _mm256_ternarylogic_epi64(A, B, C, I)                           \\\n-  ((__m256i) __builtin_ia32_pternlogq256_mask ((__v4di)(__m256i)(A),\t\\\n-    (__v4di)(__m256i)(B), (__v4di)(__m256i)(C), (int)(I), (__mmask8)-1))\n-\n-#define _mm256_mask_ternarylogic_epi64(A, U, B, C, I)\t\t\t\\\n-  ((__m256i) __builtin_ia32_pternlogq256_mask ((__v4di)(__m256i)(A),\t\\\n-    (__v4di)(__m256i)(B), (__v4di)(__m256i)(C), (int)(I), (__mmask8)(U)))\n-\n-#define _mm256_maskz_ternarylogic_epi64(U, A, B, C, I)\t\t\t\\\n-  ((__m256i) __builtin_ia32_pternlogq256_maskz ((__v4di)(__m256i)(A),\t\\\n-    (__v4di)(__m256i)(B), (__v4di)(__m256i)(C), (int)(I), (__mmask8)(U)))\n-\n-#define _mm256_ternarylogic_epi32(A, B, C, I)                           \\\n-  ((__m256i) __builtin_ia32_pternlogd256_mask ((__v8si)(__m256i)(A),\t\\\n-    (__v8si)(__m256i)(B), (__v8si)(__m256i)(C), (int)(I), (__mmask8)-1))\n-\n-#define _mm256_mask_ternarylogic_epi32(A, U, B, C, I)                   \\\n-  ((__m256i) __builtin_ia32_pternlogd256_mask ((__v8si)(__m256i)(A),\t\\\n-    (__v8si)(__m256i)(B), (__v8si)(__m256i)(C), (int)(I), (__mmask8)(U)))\n-\n-#define _mm256_maskz_ternarylogic_epi32(U, A, B, C, I)\t\t\t\\\n-  ((__m256i) __builtin_ia32_pternlogd256_maskz ((__v8si)(__m256i)(A),\t\\\n-    (__v8si)(__m256i)(B), (__v8si)(__m256i)(C), (int)(I), (__mmask8)(U)))\n-\n-#define _mm_ternarylogic_epi64(A, B, C, I)                              \\\n-  ((__m128i) __builtin_ia32_pternlogq128_mask ((__v2di)(__m128i)(A),\t\\\n-    (__v2di)(__m128i)(B), (__v2di)(__m128i)(C), (int)(I), (__mmask8)-1))\n-\n-#define _mm_mask_ternarylogic_epi64(A, U, B, C, I)\t\t\t\\\n-  ((__m128i) __builtin_ia32_pternlogq128_mask ((__v2di)(__m128i)(A),\t\\\n-    (__v2di)(__m128i)(B), (__v2di)(__m128i)(C), (int)(I), (__mmask8)(U)))\n-\n-#define _mm_maskz_ternarylogic_epi64(U, A, B, C, I)\t\t\t\\\n-  ((__m128i) __builtin_ia32_pternlogq128_maskz ((__v2di)(__m128i)(A),\t\\\n-    (__v2di)(__m128i)(B), (__v2di)(__m128i)(C), (int)(I), (__mmask8)(U)))\n-\n-#define _mm_ternarylogic_epi32(A, B, C, I)                              \\\n-  ((__m128i) __builtin_ia32_pternlogd128_mask ((__v4si)(__m128i)(A),\t\\\n-    (__v4si)(__m128i)(B), (__v4si)(__m128i)(C), (int)(I), (__mmask8)-1))\n-\n-#define _mm_mask_ternarylogic_epi32(A, U, B, C, I)\t\t\t\\\n-  ((__m128i) __builtin_ia32_pternlogd128_mask ((__v4si)(__m128i)(A),\t\\\n-    (__v4si)(__m128i)(B), (__v4si)(__m128i)(C), (int)(I), (__mmask8)(U)))\n-\n-#define _mm_maskz_ternarylogic_epi32(U, A, B, C, I)\t\t\t\\\n-  ((__m128i) __builtin_ia32_pternlogd128_maskz ((__v4si)(__m128i)(A),\t\\\n-    (__v4si)(__m128i)(B), (__v4si)(__m128i)(C), (int)(I), (__mmask8)(U)))\n+#define _mm256_ternarylogic_epi64(A, B, C, I)\t\t\t\\\n+  ((__m256i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq256_mask ((__v4di) (__m256i) (A),\t\\\n+\t\t\t\t     (__v4di) (__m256i) (B),\t\\\n+\t\t\t\t     (__v4di) (__m256i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) -1))\n+\n+#define _mm256_mask_ternarylogic_epi64(A, U, B, C, I)\t\t\\\n+  ((__m256i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq256_mask ((__v4di) (__m256i) (A),\t\\\n+\t\t\t\t     (__v4di) (__m256i) (B),\t\\\n+\t\t\t\t     (__v4di) (__m256i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) (U)))\n+\n+#define _mm256_maskz_ternarylogic_epi64(U, A, B, C, I)\t\t\\\n+  ((__m256i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq256_maskz ((__v4di) (__m256i) (A),\t\\\n+\t\t\t\t      (__v4di) (__m256i) (B),\t\\\n+\t\t\t\t      (__v4di) (__m256i) (C),\t\\\n+\t\t\t\t      (unsigned char) (I),\t\\\n+\t\t\t\t      (__mmask8) (U)))\n+\n+#define _mm256_ternarylogic_epi32(A, B, C, I)\t\t\t\\\n+  ((__m256i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd256_mask ((__v8si) (__m256i) (A),\t\\\n+\t\t\t\t     (__v8si) (__m256i) (B),\t\\\n+\t\t\t\t     (__v8si) (__m256i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) -1))\n+\n+#define _mm256_mask_ternarylogic_epi32(A, U, B, C, I)\t\t\\\n+  ((__m256i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd256_mask ((__v8si) (__m256i) (A),\t\\\n+\t\t\t\t     (__v8si) (__m256i) (B),\t\\\n+\t\t\t\t     (__v8si) (__m256i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) (U)))\n+\n+#define _mm256_maskz_ternarylogic_epi32(U, A, B, C, I)\t\t\\\n+  ((__m256i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd256_maskz ((__v8si) (__m256i) (A),\t\\\n+\t\t\t\t      (__v8si) (__m256i) (B),\t\\\n+\t\t\t\t      (__v8si) (__m256i) (C),\t\\\n+\t\t\t\t      (unsigned char) (I),\t\\\n+\t\t\t\t      (__mmask8) (U)))\n+\n+#define _mm_ternarylogic_epi64(A, B, C, I)\t\t\t\\\n+  ((__m128i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq128_mask ((__v2di) (__m128i) (A),\t\\\n+\t\t\t\t     (__v2di) (__m128i) (B),\t\\\n+\t\t\t\t     (__v2di) (__m128i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) -1))\n+\n+#define _mm_mask_ternarylogic_epi64(A, U, B, C, I)\t\t\\\n+  ((__m128i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq128_mask ((__v2di) (__m128i) (A),\t\\\n+\t\t\t\t     (__v2di) (__m128i) (B),\t\\\n+\t\t\t\t     (__v2di) (__m128i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) (U)))\n+\n+#define _mm_maskz_ternarylogic_epi64(U, A, B, C, I)\t\t\\\n+  ((__m128i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogq128_maskz ((__v2di) (__m128i) (A),\t\\\n+\t\t\t\t      (__v2di) (__m128i) (B),\t\\\n+\t\t\t\t      (__v2di) (__m128i) (C),\t\\\n+\t\t\t\t      (unsigned char) (I),\t\\\n+\t\t\t\t      (__mmask8) (U)))\n+\n+#define _mm_ternarylogic_epi32(A, B, C, I)\t\t\t\\\n+  ((__m128i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd128_mask ((__v4si) (__m128i) (A),\t\\\n+\t\t\t\t     (__v4si) (__m128i) (B),\t\\\n+\t\t\t\t     (__v4si) (__m128i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) -1))\n+\n+#define _mm_mask_ternarylogic_epi32(A, U, B, C, I)\t\t\\\n+  ((__m128i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd128_mask ((__v4si) (__m128i) (A),\t\\\n+\t\t\t\t     (__v4si) (__m128i) (B),\t\\\n+\t\t\t\t     (__v4si) (__m128i) (C),\t\\\n+\t\t\t\t     (unsigned char) (I),\t\\\n+\t\t\t\t     (__mmask8) (U)))\n+\n+#define _mm_maskz_ternarylogic_epi32(U, A, B, C, I)\t\t\\\n+  ((__m128i)\t\t\t\t\t\t\t\\\n+   __builtin_ia32_pternlogd128_maskz ((__v4si) (__m128i) (A),\t\\\n+\t\t\t\t      (__v4si) (__m128i) (B),\t\\\n+\t\t\t\t      (__v4si) (__m128i) (C),\t\\\n+\t\t\t\t      (unsigned char) (I),\t\\\n+\t\t\t\t      (__mmask8) (U)))\n \n #define _mm256_roundscale_ps(A, B)\t\t\t\t        \\\n   ((__m256) __builtin_ia32_rndscaleps_256_mask ((__v8sf)(__m256)(A),    \\"}, {"sha": "a88153a85db3f27261bcd665da073b39132d7982", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpternlogd-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpternlogd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpternlogd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpternlogd-1.c?ref=50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "patch": "@@ -12,7 +12,8 @@ volatile __mmask16 m;\n void extern\n avx512f_test (void)\n {\n-  x = _mm512_ternarylogic_epi32 (x, y, z, 0xF0);\n-  x = _mm512_mask_ternarylogic_epi32 (x, m, y, z, 0xF0);\n-  x = _mm512_maskz_ternarylogic_epi32 (m, x, y, z, 0xF0);\n+  x = _mm512_ternarylogic_epi32 (x, y, z, _MM_TERNLOG_A);\n+  x = _mm512_mask_ternarylogic_epi32 (x, m, y, z, _MM_TERNLOG_B);\n+  x = _mm512_maskz_ternarylogic_epi32 (m, x, y, z,\n+\t\t\t\t       _MM_TERNLOG_A | _MM_TERNLOG_C);\n }"}, {"sha": "ef302464765afc291f6626c589fcaf43219ae0e7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpternlogq-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpternlogq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpternlogq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpternlogq-1.c?ref=50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "patch": "@@ -12,7 +12,8 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n-  x = _mm512_ternarylogic_epi64 (x, y, z, 0xF0);\n-  x = _mm512_mask_ternarylogic_epi64 (x, m, y, z, 0xF0);\n-  x = _mm512_maskz_ternarylogic_epi64 (m, x, y, z, 0xF0);\n+  x = _mm512_ternarylogic_epi64 (x, y, z, _MM_TERNLOG_A);\n+  x = _mm512_mask_ternarylogic_epi64 (x, m, y, z, _MM_TERNLOG_B);\n+  x = _mm512_maskz_ternarylogic_epi64 (m, x, y, z,\n+\t\t\t\t       _MM_TERNLOG_A | _MM_TERNLOG_C);\n }"}, {"sha": "045a266664c5c9f25847eb8594de64449e831e49", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpternlogd-1.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpternlogd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpternlogd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpternlogd-1.c?ref=50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "patch": "@@ -16,11 +16,12 @@ volatile __mmask8 m;\n void extern\n avx512vl_test (void)\n {\n-  y = _mm256_ternarylogic_epi32 (y, y2, y3, 0xF0);\n-  y = _mm256_mask_ternarylogic_epi32 (y, m, y2, y3, 0xF0);\n-  y = _mm256_maskz_ternarylogic_epi32 (m, y, y2, y3, 0xF0);\n+  y = _mm256_ternarylogic_epi32 (y, y2, y3, _MM_TERNLOG_A);\n+  y = _mm256_mask_ternarylogic_epi32 (y, m, y2, y3, _MM_TERNLOG_B);\n+  y = _mm256_maskz_ternarylogic_epi32 (m, y, y2, y3, _MM_TERNLOG_C);\n \n-  x = _mm_ternarylogic_epi32 (x, x2, x3, 0xF0);\n-  x = _mm_mask_ternarylogic_epi32 (x, m, x2, x3, 0xF0);\n-  x = _mm_maskz_ternarylogic_epi32 (m, x, x2, x3, 0xF0);\n+  x = _mm_ternarylogic_epi32 (x, x2, x3, _MM_TERNLOG_A);\n+  x = _mm_mask_ternarylogic_epi32 (x, m, x2, x3, ~_MM_TERNLOG_B);\n+  x = _mm_maskz_ternarylogic_epi32 (m, x, x2, x3,\n+\t\t\t\t    _MM_TERNLOG_A | _MM_TERNLOG_C);\n }"}, {"sha": "3a6707c8f65d3523cf49f969e311653d9366fd04", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpternlogq-1.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpternlogq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpternlogq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpternlogq-1.c?ref=50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "patch": "@@ -16,11 +16,13 @@ volatile __mmask8 m;\n void extern\n avx512vl_test (void)\n {\n-  y = _mm256_ternarylogic_epi64 (y, y2, y3, 0xF0);\n-  y = _mm256_mask_ternarylogic_epi64 (y, m, y2, y3, 0xF0);\n-  y = _mm256_maskz_ternarylogic_epi64 (m, y, y2, y3, 0xF0);\n+  y = _mm256_ternarylogic_epi64 (y, y2, y3, _MM_TERNLOG_A);\n+  y = _mm256_mask_ternarylogic_epi64 (y, m, y2, y3, ~_MM_TERNLOG_B);\n+  y = _mm256_maskz_ternarylogic_epi64 (m, y, y2, y3,\n+\t\t\t\t       _MM_TERNLOG_A | _MM_TERNLOG_C);\n \n-  x = _mm_ternarylogic_epi64 (x, x2, x3, 0xF0);\n-  x = _mm_mask_ternarylogic_epi64 (x, m, x2, x3, 0xF0);\n-  x = _mm_maskz_ternarylogic_epi64 (m, x, x2, x3, 0xF0);\n+  x = _mm_ternarylogic_epi64 (x, x2, x3, _MM_TERNLOG_A);\n+  x = _mm_mask_ternarylogic_epi64 (x, m, x2, x3, ~_MM_TERNLOG_B);\n+  x = _mm_maskz_ternarylogic_epi64 (m, x, x2, x3,\n+\t\t\t\t    _MM_TERNLOG_A | _MM_TERNLOG_C);\n }"}, {"sha": "426295a439e690a2b9e252a4dddd887a0392d88a", "filename": "gcc/testsuite/gcc.target/i386/testimm-10.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c?ref=50d9ca7104d40f0a331d0dd01e3c069ecf7f6c97", "patch": "@@ -22,13 +22,6 @@ test8bit (void)\n   m512i = _mm512_mask_permutex_epi64 (m512i, mmask8, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n   m512i = _mm512_maskz_permutex_epi64 (mmask8, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n \n-  m512i = _mm512_ternarylogic_epi64 (m512i, m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n-  m512i = _mm512_mask_ternarylogic_epi64 (m512i, mmask8, m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n-  m512i = _mm512_maskz_ternarylogic_epi64 (mmask8, m512i, m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n-  m512i = _mm512_ternarylogic_epi32 (m512i, m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n-  m512i = _mm512_mask_ternarylogic_epi32 (m512i, mmask16, m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n-  m512i = _mm512_maskz_ternarylogic_epi32 (mmask16, m512i, m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n-\n   m512i = _mm512_shuffle_epi32 (m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n   m512i = _mm512_mask_shuffle_epi32 (m512i, mmask16, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n   m512i = _mm512_maskz_shuffle_epi32 (mmask16, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */"}]}