{"sha": "b5d0b3d27ac0f109f014b23563ae38535e3815d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkMGIzZDI3YWMwZjEwOWYwMTRiMjM1NjNhZTM4NTM1ZTM4MTVkNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-01-26T21:08:47Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-01-26T21:08:47Z"}, "message": "rs6000: Fix safe-indirect-jump-[18].c\n\nThis patch merges the safe-indirect-jump-1.c and -8.c testcases,\nsince they do the same thing.  On the 64-bit and AIX ABIs the indirect\ncall is not a sibcall, since there is code generated after the call\n(the restore of r2).  On the 32-bit non-AIX ABIs it is a sibcall.\n\n\n\t* gcc.target/powerpc/safe-indirect-jump-1.c: Build on all targets.\n\tMake expected output depend on whether we expect sibcalls or not.\n\t* gcc.target/powerpc/safe-indirect-jump-8.c: Delete (merged into\n\tsafe-indirect-jump-1.c).\n\nFrom-SVN: r257108", "tree": {"sha": "17eb78f168ec228640ffa350b794ac44a8031b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17eb78f168ec228640ffa350b794ac44a8031b4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5d0b3d27ac0f109f014b23563ae38535e3815d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d0b3d27ac0f109f014b23563ae38535e3815d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d0b3d27ac0f109f014b23563ae38535e3815d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d0b3d27ac0f109f014b23563ae38535e3815d4/comments", "author": null, "committer": null, "parents": [{"sha": "5bb1c2be88b8f99e050df8ec9052771b122b769f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb1c2be88b8f99e050df8ec9052771b122b769f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb1c2be88b8f99e050df8ec9052771b122b769f"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "42ba2fd857b1c6a5951a97d65b60df1b995d8a55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0b3d27ac0f109f014b23563ae38535e3815d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0b3d27ac0f109f014b23563ae38535e3815d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5d0b3d27ac0f109f014b23563ae38535e3815d4", "patch": "@@ -1,6 +1,13 @@\n+2018-01-26  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/safe-indirect-jump-1.c: Build on all targets.\n+\tMake expected output depend on whether we expect sibcalls or not.\n+\t* gcc.target/powerpc/safe-indirect-jump-8.c: Delete (merged into\n+\tsafe-indirect-jump-1.c).\n+\n 2018-01-26  Damian Rouson  <damian@sourceryinstitute.org>\n-\tAlessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n-\tSoren Rasmussen  <s.c.rasmussen@gmail.com>\n+\t    Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Soren Rasmussen  <s.c.rasmussen@gmail.com>\n \n \tFortran 2018 teams tests.\n "}, {"sha": "d1ab83a11d4bb819c6f1fc53b47a43437b862a33", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-1.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d0b3d27ac0f109f014b23563ae38535e3815d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d0b3d27ac0f109f014b23563ae38535e3815d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-1.c?ref=b5d0b3d27ac0f109f014b23563ae38535e3815d4", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { lp64 } } } */\n+/* { dg-do compile } */\n /* { dg-additional-options \"-mno-speculate-indirect-jumps\" } */\n \n /* Test for deliberate misprediction of indirect calls.  */\n@@ -11,4 +11,10 @@ int bar ()\n }\n \n /* { dg-final { scan-assembler \"crset 2\" } } */\n-/* { dg-final { scan-assembler \"beqctrl-\" } } */\n+\n+/* The AIX and ELFv2 ABIs don't allow a sibcall here.  */\n+/* { dg-final { scan-assembler \"beqctrl-\" { target { lp64 || { powerpc*-*-aix* } } } } } */\n+\n+/* The other ABIs do allow a sibcall.  */\n+/* { dg-final { scan-assembler \"beqctr-\" { target { ilp32 && !powerpc*-*-aix* } } } } */\n+/* { dg-final { scan-assembler {b \\$} { target { ilp32 && !powerpc*-*-aix* } } } } */"}, {"sha": "0a6f2312d9496b3a8baf9406d6a8a8c90e48d942", "filename": "gcc/testsuite/gcc.target/powerpc/safe-indirect-jump-8.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb1c2be88b8f99e050df8ec9052771b122b769f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb1c2be88b8f99e050df8ec9052771b122b769f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsafe-indirect-jump-8.c?ref=5bb1c2be88b8f99e050df8ec9052771b122b769f", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile { target { ilp32 } } } */\n-/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n-/* { dg-additional-options \"-O2 -mno-speculate-indirect-jumps\" } */\n-\n-/* Test for deliberate misprediction of -m32 sibcalls.  */\n-\n-extern int (*f)();\n-\n-int bar ()\n-{\n-  return (*f) ();\n-}\n-\n-/* { dg-final { scan-assembler \"crset 2\" } } */\n-/* { dg-final { scan-assembler \"beqctr-\" } } */\n-/* { dg-final { scan-assembler {b \\$} } } */"}]}