{"sha": "5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5NGY3ZDU0MGZmMmY4Y2NiYjNiNzhhMDk2MmEwN2ZmYTU5NjBjYg==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "m.ostapenko@samsung.com", "date": "2017-07-06T16:05:00Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2017-07-06T16:05:00Z"}, "message": "asan.h (asan_sanitize_allocas_p): Declare.\n\ngcc/\n\t* asan.h (asan_sanitize_allocas_p): Declare.\n\t* asan.c (asan_sanitize_allocas_p): New function.\n\t(handle_builtin_stack_restore): Bail out if !asan_sanitize_allocas_p.\n\t(handle_builtin_alloca): Likewise.\n\t* cfgexpand.c (expand_used_vars): Do not add allocas unpoisoning stuff\n\tif !asan_sanitize_allocas_p.\n\t* params.def (asan-instrument-allocas): Add new option.\n\t* params.h (ASAN_PROTECT_ALLOCAS): Define.\n\t* opts.c (common_handle_option): Disable allocas sanitization for\n\tKASan by default.\n\ngcc/testsuite/\n\t* c-c++-common/asan/kasan-alloca-1.c: New test.\n\t* c-c++-common/asan/kasan-alloca-2.c: Likewise.\n\nFrom-SVN: r250032", "tree": {"sha": "abe11990d7fbf767d605ed325548aeca19664586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abe11990d7fbf767d605ed325548aeca19664586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/comments", "author": null, "committer": null, "parents": [{"sha": "e3174bdf35c172f69daf08350401aa177f8f1498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3174bdf35c172f69daf08350401aa177f8f1498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3174bdf35c172f69daf08350401aa177f8f1498"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "e0fe1a63858657d5755209219c84b62238fb2602", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -1,3 +1,16 @@\n+2017-07-06  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\t* asan.h (asan_sanitize_allocas_p): Declare.\n+\t* asan.c (asan_sanitize_allocas_p): New function.\n+\t(handle_builtin_stack_restore): Bail out if !asan_sanitize_allocas_p.\n+\t(handle_builtin_alloca): Likewise.\n+\t* cfgexpand.c (expand_used_vars): Do not add allocas unpoisoning stuff\n+\tif !asan_sanitize_allocas_p.\n+\t* params.def (asan-instrument-allocas): Add new option.\n+\t* params.h (ASAN_PROTECT_ALLOCAS): Define.\n+\t* opts.c (common_handle_option): Disable allocas sanitization for\n+\tKASan by default.\n+\n 2017-07-06  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \t* asan.c: Include gimple-fold.h."}, {"sha": "95004d734a5556c0b5ef938401b42a3ab4f5ae5d", "filename": "gcc/asan.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -310,6 +310,12 @@ asan_sanitize_stack_p (void)\n   return (sanitize_flags_p (SANITIZE_ADDRESS) && ASAN_STACK);\n }\n \n+bool\n+asan_sanitize_allocas_p (void)\n+{\n+  return (asan_sanitize_stack_p () && ASAN_PROTECT_ALLOCAS);\n+}\n+\n /* Checks whether section SEC should be sanitized.  */\n \n static bool\n@@ -569,7 +575,7 @@ get_last_alloca_addr ()\n static void\n handle_builtin_stack_restore (gcall *call, gimple_stmt_iterator *iter)\n {\n-  if (!iter)\n+  if (!iter || !asan_sanitize_allocas_p ())\n     return;\n \n   tree last_alloca = get_last_alloca_addr ();\n@@ -607,7 +613,7 @@ handle_builtin_stack_restore (gcall *call, gimple_stmt_iterator *iter)\n static void\n handle_builtin_alloca (gcall *call, gimple_stmt_iterator *iter)\n {\n-  if (!iter)\n+  if (!iter || !asan_sanitize_allocas_p ())\n     return;\n \n   gassign *g;"}, {"sha": "c82d4d901e50a9242b5070206a4fe60027160aae", "filename": "gcc/asan.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -108,6 +108,8 @@ extern void set_sanitized_sections (const char *);\n \n extern bool asan_sanitize_stack_p (void);\n \n+extern bool asan_sanitize_allocas_p (void);\n+\n /* Return TRUE if builtin with given FCODE will be intercepted by\n    libasan.  */\n "}, {"sha": "c427a89bab085c232120f1c85d09def5a3981d2e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -2241,7 +2241,7 @@ expand_used_vars (void)\n       expand_stack_vars (NULL, &data);\n     }\n \n-  if ((flag_sanitize & SANITIZE_ADDRESS) && cfun->calls_alloca)\n+  if (asan_sanitize_allocas_p () && cfun->calls_alloca)\n     var_end_seq = asan_emit_allocas_unpoison (virtual_stack_dynamic_rtx,\n \t\t\t\t\t      virtual_stack_vars_rtx,\n \t\t\t\t\t      var_end_seq);"}, {"sha": "7555ed5543407d1e068010940a5a514b61fae5e8", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -1909,6 +1909,9 @@ common_handle_option (struct gcc_options *opts,\n \t\t\t\t opts_set->x_param_values);\n \t  maybe_set_param_value (PARAM_ASAN_STACK, 0, opts->x_param_values,\n \t\t\t\t opts_set->x_param_values);\n+\t  maybe_set_param_value (PARAM_ASAN_PROTECT_ALLOCAS, 0,\n+\t\t\t\t opts->x_param_values,\n+\t\t\t\t opts_set->x_param_values);\n \t  maybe_set_param_value (PARAM_ASAN_USE_AFTER_RETURN, 0,\n \t\t\t\t opts->x_param_values,\n \t\t\t\t opts_set->x_param_values);"}, {"sha": "805302bb93e94cf7a57db590c5335c6116b49946", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -1142,6 +1142,11 @@ DEFPARAM (PARAM_ASAN_STACK,\n          \"Enable asan stack protection.\",\n          1, 0, 1)\n \n+DEFPARAM (PARAM_ASAN_PROTECT_ALLOCAS,\n+\t\"asan-instrument-allocas\",\n+\t\"Enable asan allocas/VLAs protection.\",\n+\t1, 0, 1)\n+\n DEFPARAM (PARAM_ASAN_GLOBALS,\n          \"asan-globals\",\n          \"Enable asan globals protection.\","}, {"sha": "2188e1877e9e79bfdafa4b56eda1d8a546662a3e", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -232,6 +232,8 @@ extern void init_param_values (int *params);\n   PARAM_VALUE (PARAM_ALLOW_PACKED_STORE_DATA_RACES)\n #define ASAN_STACK \\\n   PARAM_VALUE (PARAM_ASAN_STACK)\n+#define ASAN_PROTECT_ALLOCAS \\\n+  PARAM_VALUE (PARAM_ASAN_PROTECT_ALLOCAS)\n #define ASAN_GLOBALS \\\n   PARAM_VALUE (PARAM_ASAN_GLOBALS)\n #define ASAN_INSTRUMENT_READS \\"}, {"sha": "ac18d1ab2931a8d3e7edb5a32f2988e2e63e4174", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -1,3 +1,8 @@\n+2017-07-06  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\t* c-c++-common/asan/kasan-alloca-1.c: New test.\n+\t* c-c++-common/asan/kasan-alloca-2.c: Likewise.\n+\n 2017-07-06  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \t* c-c++-common/asan/alloca_big_alignment.c: New test."}, {"sha": "518d19050ed7dcc8f1dc6ec7660d3ecd134887be", "filename": "gcc/testsuite/c-c++-common/asan/kasan-alloca-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-alloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-alloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-alloca-1.c?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address -fdump-tree-sanopt\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+void foo(int index, int len) {\n+  char str[len];\n+  str[index] = '1'; // BOOM\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin___asan_alloca_poison\" \"sanopt\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin___asan_allocas_unpoison\" \"sanopt\" } } */"}, {"sha": "e3999d93f6fca51eab15ecafe5868e27cbd7a2f2", "filename": "gcc/testsuite/c-c++-common/asan/kasan-alloca-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-alloca-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-alloca-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-alloca-2.c?ref=5094f7d540ff2f8ccbb3b78a0962a07ffa5960cb", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address --param asan-instrument-allocas=1 --param asan-stack=1 -fdump-tree-sanopt\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+void foo(int index, int len) {\n+  char str[len];\n+  str[index] = '1'; // BOOM\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_alloca_poison\" 1 \"sanopt\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_allocas_unpoison\" 1 \"sanopt\" } } */"}]}