{"sha": "621ea10ca060ba19ec693aa73b5e29d553cca849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxZWExMGNhMDYwYmExOWVjNjkzYWE3M2I1ZTI5ZDU1M2NjYTg0OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-04T19:28:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-04T20:33:59Z"}, "message": "libstdc++: Implement LWG 3403 for std::ranges::ssize\n\nI already changed the constraints for ranges::ssize to use ranges::size,\nthis implements the rest of LWG 3403, so that the returned type is the\nsigned type corresponding to the result of ranges::size.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (_SSize): Return the result of\n\tranges::size converted to the wider of make-signed-like-t<S> and\n\tptrdiff_t, rather than the ranges different type.\n\t* testsuite/std/ranges/access/ssize.cc: Adjust expected result\n\tfor an iota_view that uses an integer class type for its\n\tdifference_type.", "tree": {"sha": "c6e6597462a2efb9f5c72357b4ac701e97e1bb9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6e6597462a2efb9f5c72357b4ac701e97e1bb9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/621ea10ca060ba19ec693aa73b5e29d553cca849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621ea10ca060ba19ec693aa73b5e29d553cca849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621ea10ca060ba19ec693aa73b5e29d553cca849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621ea10ca060ba19ec693aa73b5e29d553cca849/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e5f2425f80aedd00f28235022a2755eb46f310d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5f2425f80aedd00f28235022a2755eb46f310d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5f2425f80aedd00f28235022a2755eb46f310d"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "e3c3962bcd95e4273783492570ee6ff9105624fc", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ea10ca060ba19ec693aa73b5e29d553cca849/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ea10ca060ba19ec693aa73b5e29d553cca849/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=621ea10ca060ba19ec693aa73b5e29d553cca849", "patch": "@@ -425,22 +425,32 @@ namespace ranges\n \n     struct _SSize\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3403. Domain of ranges::ssize(E) doesn't match ranges::size(E)\n       template<typename _Tp>\n \trequires requires (_Tp& __t) { _Size{}(__t); }\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(noexcept(_Size{}(__t)))\n \t{\n-\t  using __iter_type = decltype(_Begin{}(__t));\n-\t  using __diff_type = iter_difference_t<__iter_type>;\n-\t  using __gnu_cxx::__int_traits;\n \t  auto __size = _Size{}(__t);\n-\t  if constexpr (integral<__diff_type>)\n+\t  using __size_type = decltype(__size);\n+\t  // Return the wider of ptrdiff_t and make-signed-like-t<__size_type>.\n+\t  if constexpr (integral<__size_type>)\n \t    {\n-\t      if constexpr (__int_traits<__diff_type>::__digits\n+\t      using __gnu_cxx::__int_traits;\n+\t      if constexpr (__int_traits<__size_type>::__digits\n \t\t\t    < __int_traits<ptrdiff_t>::__digits)\n \t\treturn static_cast<ptrdiff_t>(__size);\n+\t      else\n+\t\treturn static_cast<make_signed_t<__size_type>>(__size);\n \t    }\n-\t  return static_cast<__diff_type>(__size);\n+#if defined __STRICT_ANSI__ && defined __SIZEOF_INT128__\n+\t  // For strict-ansi modes integral<__int128> is false\n+\t  else if constexpr (__detail::__is_int128<__size_type>)\n+\t    return static_cast<unsigned __int128>(__size);\n+#endif\n+\t  else // Must be one of __max_diff_type or __max_size_type.\n+\t    return __detail::__max_diff_type(__size);\n \t}\n     };\n "}, {"sha": "f53f462580cc7d9f77b24d8b40e6e4febaeb7408", "filename": "libstdc++-v3/testsuite/std/ranges/access/ssize.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ea10ca060ba19ec693aa73b5e29d553cca849/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ea10ca060ba19ec693aa73b5e29d553cca849/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc?ref=621ea10ca060ba19ec693aa73b5e29d553cca849", "patch": "@@ -76,9 +76,12 @@ void\n test06()\n {\n   auto i = std::views::iota(1ull, 5u);\n-  auto s = std::ranges::ssize(i);\n-  using R = std::ranges::range_difference_t<decltype(i)>;\n-  static_assert( std::same_as<decltype(s), R> );\n+  auto s = std::ranges::size(i);\n+  auto ss = std::ranges::ssize(i);\n+  // std::ranges::range_difference_t<decltype(i)> is larger than long long,\n+  // but LWG 3403 says ranges::ssize(i) returns the signed version of the\n+  // type that ranges::size(i) returns, not the range's difference_type.\n+  static_assert( std::same_as<decltype(ss), std::make_signed_t<decltype(s)>> );\n   VERIFY( s == 4 );\n }\n "}]}