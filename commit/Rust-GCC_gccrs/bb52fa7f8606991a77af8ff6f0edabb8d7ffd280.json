{"sha": "bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MmZhN2Y4NjA2OTkxYTc3YWY4ZmY2ZjBlZGFiYjhkN2ZmZDI4MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-10T02:23:08Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-10T02:23:08Z"}, "message": "cpplib.h: Provide HASHNODE typedef and forward decl of struct hashnode only.\n\n\t* cpplib.h: Provide HASHNODE typedef and forward decl of\n\tstruct hashnode only.  Kill cpp_hashnode typedef.  MACRODEF,\n\tDEFINITION, struct hashnode, struct macrodef, struct\n\tdefinition, scan_decls prototype, default defn of\n\tINCLUDE_LEN_FUDGE moved elsewhere.\n\n\t* cpphash.h: MACRODEF, DEFINITION, struct macrodef, struct\n\tdefinition, and struct hashnode moved here. Remove the unused\n\t'predefined' field from struct definition.  Replace the 'args'\n\tunion with its sole member.  All users updated (cpphash.c).\n\tDelete HASHSTEP and MAKE_POS macros, and hashf prototype.  Add\n\tmultiple include guard.\n\n\t* cpphash.c (hashf): Make static; use better algorithm; drop\n\tHASHSIZE parameter; return an unsigned int.\n\t(cpp_lookup): Drop HASH parameter.  PFILE parameter is\n\tused. Calculate HASHSIZE modulus here.\n\t(cpp_install): Drop HASH parameter. Calculate HASHSIZE modulus\n\there.\n\t(create_definition): Drop PREDEFINITION parameter.\n\t* cpplib.c (do_define): Don't calculate a hash value here.\n\tDon't pass (keyword == NULL) to create_definition.\n\n\t* scan.h: Prototype scan_decls here.\n\t* cppfiles.c: Move INCLUDE_LEN_FUDGE default defn here.\n\t* cppexp.c, cppfiles.c, cppinit.c, cpplib.c, fix-header.c: All\n\tcallers of cpp_lookup and cpp_install updated.\n\nFrom-SVN: r31881", "tree": {"sha": "a1c32725cdbb29b80f1f744fec3575eb7ad9997d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c32725cdbb29b80f1f744fec3575eb7ad9997d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/comments", "author": null, "committer": null, "parents": [{"sha": "ae6f3fe9f6035dd43b0eaa153e95843325f67f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6f3fe9f6035dd43b0eaa153e95843325f67f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6f3fe9f6035dd43b0eaa153e95843325f67f08"}], "stats": {"total": 295, "additions": 151, "deletions": 144}, "files": [{"sha": "4b6602c38a87e7a4ec5ed69954e62b07f05b6cc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -1,5 +1,33 @@\n 2000-02-09  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* cpplib.h: Provide HASHNODE typedef and forward decl of\n+\tstruct hashnode only.  Kill cpp_hashnode typedef.  MACRODEF,\n+\tDEFINITION, struct hashnode, struct macrodef, struct\n+\tdefinition, scan_decls prototype, default defn of\n+\tINCLUDE_LEN_FUDGE moved elsewhere.\n+\n+\t* cpphash.h: MACRODEF, DEFINITION, struct macrodef, struct\n+\tdefinition, and struct hashnode moved here. Remove the unused\n+\t'predefined' field from struct definition.  Replace the 'args'\n+\tunion with its sole member.  All users updated (cpphash.c).\n+\tDelete HASHSTEP and MAKE_POS macros, and hashf prototype.  Add\n+\tmultiple include guard.\n+\n+\t* cpphash.c (hashf): Make static; use better algorithm; drop\n+\tHASHSIZE parameter; return an unsigned int.\n+\t(cpp_lookup): Drop HASH parameter.  PFILE parameter is\n+\tused. Calculate HASHSIZE modulus here.\n+\t(cpp_install): Drop HASH parameter. Calculate HASHSIZE modulus\n+\there.\n+\t(create_definition): Drop PREDEFINITION parameter.\n+\t* cpplib.c (do_define): Don't calculate a hash value here.\n+\tDon't pass (keyword == NULL) to create_definition.\n+\n+\t* scan.h: Prototype scan_decls here.\n+\t* cppfiles.c: Move INCLUDE_LEN_FUDGE default defn here.\n+\t* cppexp.c, cppfiles.c, cppinit.c, cpplib.c, fix-header.c: All\n+\tcallers of cpp_lookup and cpp_install updated.\n+\t\n \t* cpphash.c (macarg): Hoist all the flag diddling out of the\n \tfunction...\n \t(macroexpand): ... and out of the loop that calls macarg."}, {"sha": "7f8c9174797f6063be3f7846027f6b2efee2229d", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -332,7 +332,7 @@ parse_charconst (pfile, start, end)\n   num_bits = num_chars * width;\n       \n   if (cpp_lookup (pfile, (const U_CHAR *)\"__CHAR_UNSIGNED__\",\n-\t\t  sizeof (\"__CHAR_UNSIGNED__\")-1, -1)\n+\t\t  sizeof (\"__CHAR_UNSIGNED__\")-1)\n       || ((result >> (num_bits - 1)) & 1) == 0)\n     op.value = result & ((unsigned HOST_WIDEST_INT) ~0\n \t\t\t >> (HOST_BITS_PER_WIDEST_INT - num_bits));\n@@ -472,7 +472,7 @@ cpp_lex (pfile, skip_evaluation)\n \t\tgoto oops;\n \t      ++ip->cur;\n \t    }\n-\t  hp = cpp_lookup (pfile, tok, len, -1);\n+\t  hp = cpp_lookup (pfile, tok, len);\n \t  if (hp != NULL)\n \t    {\n \t      if (hp->type == T_POISON)"}, {"sha": "deb8bf019e75824a737693b73c6d86076950417b", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -68,6 +68,10 @@ static void hack_vms_include_specification PARAMS ((char *));\n #define INO_T_EQ(a, b) ((a) == (b))\n #endif\n \n+#ifndef INCLUDE_LEN_FUDGE\n+#define INCLUDE_LEN_FUDGE 0\n+#endif\n+\n /* Merge the four include chains together in the order quote, bracket,\n    system, after.  Remove duplicate dirs (as determined by\n    INO_T_EQ()).  The system_include and after_include chains are never\n@@ -282,7 +286,7 @@ redundant_include_p (pfile, ihash, ilist)\n \t    included again if the string is the name of a defined macro. */\n \t return (i->control_macro\n \t\t && (i->control_macro[0] == '\\0'\n-\t\t     || cpp_lookup (pfile, i->control_macro, -1, -1)))\n+\t\t     || cpp_lookup (pfile, i->control_macro, -1)))\n \t     ? (struct include_hash *)-1 : i;\n \n   return 0;"}, {"sha": "0a4e8607dfb9910b39b97cc070b9533cf54be9b7", "filename": "gcc/cpphash.c", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -29,6 +29,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"cpphash.h\"\n #undef abort\n \n+static unsigned int hashf\t  PARAMS ((const U_CHAR *, int));\n static int comp_def_part\t PARAMS ((int, U_CHAR *, int, U_CHAR *,\n \t\t\t\t\t  int, int));\n static void push_macro_expansion PARAMS ((cpp_reader *,\n@@ -91,47 +92,43 @@ struct argdata\n /* Return hash function on name.  must be compatible with the one\n    computed a step at a time, elsewhere  */\n \n-int\n-hashf (name, len, hashsize)\n-     register const U_CHAR *name;\n+static unsigned int\n+hashf (s, len)\n+     register const U_CHAR *s;\n      register int len;\n-     int hashsize;\n {\n-  register int r = 0;\n-\n-  while (len--)\n-    r = HASHSTEP (r, *name++);\n+  unsigned int n = len;\n+  unsigned int r = 0;\n \n-  return MAKE_POS (r) % hashsize;\n+  do\n+    r = r * 67 + (*s++ - 113);\n+  while (--n);\n+  return r + len;\n }\n \n /* Find the most recent hash node for name \"name\" (ending with first\n    non-identifier char) installed by cpp_install\n \n    If LEN is >= 0, it is the length of the name.\n-   Otherwise, compute the length by scanning the entire name.\n-\n-   If HASH is >= 0, it is the precomputed hash code.\n-   Otherwise, compute the hash code.  */\n+   Otherwise, compute the length by scanning the entire name.  */\n \n HASHNODE *\n-cpp_lookup (pfile, name, len, hash)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+cpp_lookup (pfile, name, len)\n+     cpp_reader *pfile;\n      const U_CHAR *name;\n      int len;\n-     int hash;\n {\n   register const U_CHAR *bp;\n   register HASHNODE *bucket;\n+  register unsigned int hash;\n \n   if (len < 0)\n     {\n       for (bp = name; is_idchar (*bp); bp++);\n       len = bp - name;\n     }\n \n-  if (hash < 0)\n-    hash = hashf (name, len, HASHSIZE);\n+  hash = hashf (name, len) % HASHSIZE;\n \n   bucket = pfile->hashtab[hash];\n   while (bucket)\n@@ -183,7 +180,7 @@ delete_macro (hp)\n \t  free (ap);\n \t}\n       if (d->nargs >= 0)\n-\tfree (d->args.argnames);\n+\tfree (d->argnames);\n       free (d);\n     }\n \n@@ -204,17 +201,17 @@ delete_macro (hp)\n    Otherwise, compute the hash code.  */\n \n HASHNODE *\n-cpp_install (pfile, name, len, type, value, hash)\n+cpp_install (pfile, name, len, type, value)\n      cpp_reader *pfile;\n      const U_CHAR *name;\n      int len;\n      enum node_type type;\n      const char *value;\n-     int hash;\n {\n   register HASHNODE *hp;\n   register int i, bucket;\n   register const U_CHAR *p;\n+  unsigned int hash;\n \n   if (len < 0)\n     {\n@@ -224,8 +221,7 @@ cpp_install (pfile, name, len, type, value, hash)\n       len = p - name;\n     }\n \n-  if (hash < 0)\n-    hash = hashf (name, len, HASHSIZE);\n+  hash = hashf (name, len) % HASHSIZE;\n \n   i = sizeof (HASHNODE) + len + 1;\n   hp = (HASHNODE *) xmalloc (i);\n@@ -582,10 +578,9 @@ static char rest_extension[] = \"...\";\n    as for do_define.  */\n \n MACRODEF\n-create_definition (buf, limit, pfile, predefinition)\n+create_definition (buf, limit, pfile)\n      U_CHAR *buf, *limit;\n      cpp_reader *pfile;\n-     int predefinition;\n {\n   U_CHAR *bp;\t\t\t/* temp ptr into input buffer */\n   U_CHAR *symname;\t\t/* remember where symbol name starts */\n@@ -701,24 +696,24 @@ create_definition (buf, limit, pfile, predefinition)\n       defn = collect_expansion (pfile, bp, limit, argno, arg_ptrs);\n       defn->rest_args = rest_args;\n \n-      /* Now set defn->args.argnames to the result of concatenating\n+      /* Now set defn->argnames to the result of concatenating\n          the argument names in reverse order\n          with comma-space between them.  */\n-      defn->args.argnames = (U_CHAR *) xmalloc (arglengths + 1);\n+      defn->argnames = (U_CHAR *) xmalloc (arglengths + 1);\n       {\n \tstruct arglist *temp;\n \tint i = 0;\n \tfor (temp = arg_ptrs; temp; temp = temp->next)\n \t  {\n-\t    bcopy (temp->name, &defn->args.argnames[i], temp->length);\n+\t    bcopy (temp->name, &defn->argnames[i], temp->length);\n \t    i += temp->length;\n \t    if (temp->next != 0)\n \t      {\n-\t\tdefn->args.argnames[i++] = ',';\n-\t\tdefn->args.argnames[i++] = ' ';\n+\t\tdefn->argnames[i++] = ',';\n+\t\tdefn->argnames[i++] = ' ';\n \t      }\n \t  }\n-\tdefn->args.argnames[i] = 0;\n+\tdefn->argnames[i] = 0;\n       }\n     }\n   else\n@@ -741,14 +736,12 @@ create_definition (buf, limit, pfile, predefinition)\n \t}\n       /* now everything from bp before limit is the definition.  */\n       defn = collect_expansion (pfile, bp, limit, -1, NULL_PTR);\n-      defn->args.argnames = (U_CHAR *) \"\";\n+      defn->argnames = (U_CHAR *) \"\";\n     }\n \n   defn->line = line;\n   defn->file = file;\n \n-  /* OP is null if this is a predefinition */\n-  defn->predefined = predefinition;\n   mdef.defn = defn;\n   mdef.symnam = symname;\n   mdef.symlen = sym_length;\n@@ -1504,7 +1497,7 @@ compare_defs (pfile, d1, d2)\n   if (d1->nargs != d2->nargs)\n     return 1;\n   if (CPP_PEDANTIC (pfile)\n-      && strcmp ((char *) d1->args.argnames, (char *) d2->args.argnames))\n+      && strcmp ((char *) d1->argnames, (char *) d2->argnames))\n     return 1;\n   for (a1 = d1->pattern, a2 = d2->pattern; a1 && a2;\n        a1 = a1->next, a2 = a2->next)\n@@ -1607,7 +1600,7 @@ dump_definition (pfile, macro)\n   else\n     {\n       struct reflist *r;\n-      unsigned char *argnames = (unsigned char *) xstrdup (defn->args.argnames);\n+      unsigned char *argnames = (unsigned char *) xstrdup (defn->argnames);\n       unsigned char **argv = (unsigned char **) alloca (defn->nargs *\n \t\t\t\t\t\t\tsizeof(char *));\n       int *argl = (int *) alloca (defn->nargs * sizeof(int));"}, {"sha": "960700cc9c2f9e386e1e895b0b58f2a77062a2b8", "filename": "gcc/cpphash.h", "status": "modified", "additions": 63, "deletions": 15, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -15,6 +15,65 @@ You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n+#ifndef __GCC_CPPHASH__\n+#define __GCC_CPPHASH__\n+\n+/* Structure returned by create_definition */\n+typedef struct macrodef MACRODEF;\n+struct macrodef\n+{\n+  struct definition *defn;\n+  const U_CHAR *symnam;\n+  int symlen;\n+};\n+\n+/* Structure allocated for every #define.  For a simple replacement\n+   such as\n+   \t#define foo bar ,\n+   nargs = -1, the `pattern' list is null, and the expansion is just\n+   the replacement text.  Nargs = 0 means a functionlike macro with no args,\n+   e.g.,\n+       #define getchar() getc (stdin) .\n+   When there are args, the expansion is the replacement text with the\n+   args squashed out, and the reflist is a list describing how to\n+   build the output from the input: e.g., \"3 chars, then the 1st arg,\n+   then 9 chars, then the 3rd arg, then 0 chars, then the 2nd arg\".\n+   The chars here come from the expansion.  Whatever is left of the\n+   expansion after the last arg-occurrence is copied after that arg.\n+   Note that the reflist can be arbitrarily long---\n+   its length depends on the number of times the arguments appear in\n+   the replacement text, not how many args there are.  Example:\n+   #define f(x) x+x+x+x+x+x+x would have replacement text \"++++++\" and\n+   pattern list\n+     { (0, 1), (1, 1), (1, 1), ..., (1, 1), NULL }\n+   where (x, y) means (nchars, argno). */\n+\n+typedef struct definition DEFINITION;\n+struct definition {\n+  int nargs;\n+  int length;\t\t\t/* length of expansion string */\n+  unsigned char *expansion;\n+  int line;\t\t\t/* Line number of definition */\n+  const char *file;\t\t/* File of definition */\n+  char rest_args;\t\t/* Nonzero if last arg. absorbs the rest */\n+  struct reflist {\n+    struct reflist *next;\n+    char stringify;\t\t/* nonzero if this arg was preceded by a\n+\t\t\t\t   # operator. */\n+    char raw_before;\t\t/* Nonzero if a ## operator before arg. */\n+    char raw_after;\t\t/* Nonzero if a ## operator after arg. */\n+    char rest_args;\t\t/* Nonzero if this arg. absorbs the rest */\n+    int nchars;\t\t\t/* Number of literal chars to copy before\n+\t\t\t\t   this arg occurrence.  */\n+    int argno;\t\t\t/* Number of arg to substitute (origin-0) */\n+  } *pattern;\n+  /* Names of macro args, concatenated in reverse order\n+     with comma-space between them.\n+     The only use of this is that we warn on redefinition\n+     if this differs between the old and new definitions.  */\n+  unsigned char *argnames;\n+};\n+\n /* different kinds of things that can appear in the value field\n    of a hash node. */\n union hashval\n@@ -36,26 +95,15 @@ struct hashnode {\n   union hashval value;\t\t/* pointer to expansion, or whatever */\n };\n \n-typedef struct hashnode HASHNODE;\n-\n-/* Some definitions for the hash table.  The hash function MUST be\n-   computed as shown in hashf () below.  That is because the rescan\n-   loop computes the hash value `on the fly' for most tokens,\n-   in order to avoid the overhead of a lot of procedure calls to\n-   the hashf () function.  Hashf () only exists for the sake of\n-   politeness, for use when speed isn't so important. */\n-\n-#define HASHSTEP(old, c) ((old << 2) + c)\n-#define MAKE_POS(v) (v & 0x7fffffff) /* make number positive */\n-\n extern HASHNODE *cpp_install\t  PARAMS ((cpp_reader *, const U_CHAR *, int,\n-\t\t\t\t\t   enum node_type, const char *, int));\n-extern int hashf\t\t  PARAMS ((const U_CHAR *, int, int));\n+\t\t\t\t\t   enum node_type, const char *));\n extern void delete_macro\t  PARAMS ((HASHNODE *));\n \n extern MACRODEF create_definition PARAMS ((U_CHAR *, U_CHAR *,\n-\t\t\t\t\t   cpp_reader *, int));\n+\t\t\t\t\t   cpp_reader *));\n extern int compare_defs\t\t  PARAMS ((cpp_reader *, DEFINITION *,\n \t\t\t\t\t   DEFINITION *));\n extern void macroexpand\t\t  PARAMS ((cpp_reader *, HASHNODE *));\n extern void dump_definition\t  PARAMS ((cpp_reader *, MACRODEF));\n+\n+#endif"}, {"sha": "9ca7e7e5616d1e12ceabd3ecb9464f5c0de02f4b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -553,7 +553,7 @@ initialize_builtins (pfile)\n       val = (b->flags & ULP) ? user_label_prefix : b->value;\n       len = strlen (b->name);\n \n-      cpp_install (pfile, b->name, len, b->type, val, -1);\n+      cpp_install (pfile, b->name, len, b->type, val);\n       if ((b->flags & DUMP) && CPP_OPTIONS (pfile)->debug_output)\n \tdump_special_to_buffer (pfile, b->name);\n     }"}, {"sha": "896d602414c065caa7b658997d08d06d34fbe169", "filename": "gcc/cpplib.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -654,7 +654,6 @@ do_define (pfile, keyword)\n      cpp_reader *pfile;\n      const struct directive *keyword;\n {\n-  int hashcode;\n   MACRODEF mdef;\n   HASHNODE *hp;\n   long here;\n@@ -678,13 +677,11 @@ do_define (pfile, keyword)\n \n   CPP_SET_WRITTEN (pfile, here);\n \n-  mdef = create_definition (macro, end, pfile, keyword == NULL);\n+  mdef = create_definition (macro, end, pfile);\n   if (mdef.defn == 0)\n     return 0;\n \n-  hashcode = hashf (mdef.symnam, mdef.symlen, HASHSIZE);\n-\n-  if ((hp = cpp_lookup (pfile, mdef.symnam, mdef.symlen, hashcode)) != NULL)\n+  if ((hp = cpp_lookup (pfile, mdef.symnam, mdef.symlen)) != NULL)\n     {\n       int ok = 0;\n       /* Redefining a precompiled key is ok.  */\n@@ -720,8 +717,7 @@ do_define (pfile, keyword)\n \t}\n     }\n   else\n-    cpp_install (pfile, mdef.symnam, mdef.symlen, new_type,\n-\t\t (char *) mdef.defn, hashcode);\n+    cpp_install (pfile, mdef.symnam, mdef.symlen, new_type, (char *)mdef.defn);\n \n   if (keyword != NULL && keyword->type == T_DEFINE)\n     {\n@@ -1475,7 +1471,7 @@ do_undef (pfile, keyword)\n \n   sym_length = check_macro_name (pfile, buf);\n \n-  while ((hp = cpp_lookup (pfile, name, sym_length, -1)) != NULL)\n+  while ((hp = cpp_lookup (pfile, name, sym_length)) != NULL)\n     {\n       /* If we are generating additional info for debugging (with -g) we\n \t need to pass through all effective #undef commands.  */\n@@ -1923,7 +1919,7 @@ do_xifdef (pfile, keyword)\n     }\n   else if (token == CPP_NAME)\n     {\n-      HASHNODE *hp = cpp_lookup (pfile, ident, ident_length, -1);\n+      HASHNODE *hp = cpp_lookup (pfile, ident, ident_length);\n       skip = (hp == NULL) ^ (keyword->type == T_IFNDEF);\n       if (start_of_file && !skip)\n \t{\n@@ -2617,7 +2613,7 @@ cpp_get_token (pfile)\n \t      return CPP_NAME;\n \t    ident = pfile->token_buffer + before_name_written;\n \t    ident_len = CPP_PWRITTEN (pfile) - ident;\n-\t    hp = cpp_lookup (pfile, ident, ident_len, -1);\n+\t    hp = cpp_lookup (pfile, ident, ident_len);\n \t    if (!hp)\n \t      return CPP_NAME;\n \t    if (hp->type == T_DISABLED)\n@@ -3018,16 +3014,16 @@ do_assert (pfile, keyword)\n \n   thislen = strlen (sym);\n   baselen = index (sym, '(') - sym;\n-  this = cpp_lookup (pfile, sym, thislen, -1);\n+  this = cpp_lookup (pfile, sym, thislen);\n   if (this)\n     {\n       cpp_warning (pfile, \"`%s' re-asserted\", sym);\n       goto error;\n     }\n \n-  base = cpp_lookup (pfile, sym, baselen, -1);\n+  base = cpp_lookup (pfile, sym, baselen);\n   if (! base)\n-    base = cpp_install (pfile, sym, baselen, T_ASSERT, 0, -1);\n+    base = cpp_install (pfile, sym, baselen, T_ASSERT, 0);\n   else if (base->type != T_ASSERT)\n   {\n     /* Token clash - but with what?! */\n@@ -3036,7 +3032,7 @@ do_assert (pfile, keyword)\n   }\n \n   this = cpp_install (pfile, sym, thislen, T_ASSERT,\n-\t\t      (char *)base->value.aschain, -1);\n+\t\t      (char *)base->value.aschain);\n   base->value.aschain = this;\n   \n   pfile->limit = (unsigned char *) sym; /* Pop */\n@@ -3077,7 +3073,7 @@ do_unassert (pfile, keyword)\n   thislen = strlen (sym);\n   if (ret == 1)\n     {\n-      base = cpp_lookup (pfile, sym, thislen, -1);\n+      base = cpp_lookup (pfile, sym, thislen);\n       if (! base)\n \tgoto error;  /* It isn't an error to #undef what isn't #defined,\n \t\t\tso it isn't an error to #unassert what isn't\n@@ -3093,9 +3089,9 @@ do_unassert (pfile, keyword)\n   else\n     {\n       baselen = index (sym, '(') - sym;\n-      base = cpp_lookup (pfile, sym, baselen, -1);\n+      base = cpp_lookup (pfile, sym, baselen);\n       if (! base) goto error;\n-      this = cpp_lookup (pfile, sym, thislen, -1);\n+      this = cpp_lookup (pfile, sym, thislen);\n       if (! this) goto error;\n \n       next = base;\n@@ -3144,7 +3140,7 @@ cpp_read_check_assertion (pfile)\n     result = 0;\n   else\n     {\n-      hp = cpp_lookup (pfile, name, CPP_PWRITTEN (pfile) - name, -1);\n+      hp = cpp_lookup (pfile, name, CPP_PWRITTEN (pfile) - name);\n       result = (hp != 0);\n     }\n "}, {"sha": "266b90305abfdc1cb4bf3a659720e33c1b4359c1", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 70, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -33,7 +33,6 @@ typedef unsigned char U_CHAR;\n typedef struct cpp_reader cpp_reader;\n typedef struct cpp_buffer cpp_buffer;\n typedef struct cpp_options cpp_options;\n-typedef struct hashnode cpp_hashnode;\n \n enum cpp_token {\n   CPP_EOF = -1,\n@@ -140,6 +139,9 @@ struct file_name_map_list;\n    Applying cpp_get_token repeatedly yields a stream of pre-processor\n    tokens.  Usually, there is only one cpp_reader object active. */\n \n+struct hashnode;\n+typedef struct hashnode HASHNODE;\n+\n struct cpp_reader\n {\n   parse_underflow_t get_token;\n@@ -167,7 +169,7 @@ struct cpp_reader\n \n   /* Hash table of macros and assertions.  See cpphash.c */\n #define HASHSIZE 1403\n-  struct hashnode **hashtab;\n+  HASHNODE **hashtab;\n \n   /* Hash table of other included files.  See cppfiles.c */\n #define ALL_INCLUDE_HASHSIZE 71\n@@ -603,66 +605,6 @@ enum node_type {\n  T_UNUSED\t/* Used for something not defined.  */\n  };\n \n-/* Structure returned by create_definition */\n-typedef struct macrodef MACRODEF;\n-struct macrodef\n-{\n-  struct definition *defn;\n-  const U_CHAR *symnam;\n-  int symlen;\n-};\n-\n-/* Structure allocated for every #define.  For a simple replacement\n-   such as\n-   \t#define foo bar ,\n-   nargs = -1, the `pattern' list is null, and the expansion is just\n-   the replacement text.  Nargs = 0 means a functionlike macro with no args,\n-   e.g.,\n-       #define getchar() getc (stdin) .\n-   When there are args, the expansion is the replacement text with the\n-   args squashed out, and the reflist is a list describing how to\n-   build the output from the input: e.g., \"3 chars, then the 1st arg,\n-   then 9 chars, then the 3rd arg, then 0 chars, then the 2nd arg\".\n-   The chars here come from the expansion.  Whatever is left of the\n-   expansion after the last arg-occurrence is copied after that arg.\n-   Note that the reflist can be arbitrarily long---\n-   its length depends on the number of times the arguments appear in\n-   the replacement text, not how many args there are.  Example:\n-   #define f(x) x+x+x+x+x+x+x would have replacement text \"++++++\" and\n-   pattern list\n-     { (0, 1), (1, 1), (1, 1), ..., (1, 1), NULL }\n-   where (x, y) means (nchars, argno). */\n-\n-typedef struct definition DEFINITION;\n-struct definition {\n-  int nargs;\n-  int length;\t\t\t/* length of expansion string */\n-  int predefined;\t\t/* True if the macro was builtin or */\n-\t\t\t\t/* came from the command line */\n-  unsigned char *expansion;\n-  int line;\t\t\t/* Line number of definition */\n-  const char *file;\t\t/* File of definition */\n-  char rest_args;\t\t/* Nonzero if last arg. absorbs the rest */\n-  struct reflist {\n-    struct reflist *next;\n-    char stringify;\t\t/* nonzero if this arg was preceded by a\n-\t\t\t\t   # operator. */\n-    char raw_before;\t\t/* Nonzero if a ## operator before arg. */\n-    char raw_after;\t\t/* Nonzero if a ## operator after arg. */\n-    char rest_args;\t\t/* Nonzero if this arg. absorbs the rest */\n-    int nchars;\t\t\t/* Number of literal chars to copy before\n-\t\t\t\t   this arg occurrence.  */\n-    int argno;\t\t\t/* Number of arg to substitute (origin-0) */\n-  } *pattern;\n-  union {\n-    /* Names of macro args, concatenated in reverse order\n-       with comma-space between them.\n-       The only use of this is that we warn on redefinition\n-       if this differs between the old and new definitions.  */\n-    unsigned char *argnames;\n-  } args;\n-};\n-\n /* Character classes.\n    If the definition of `numchar' looks odd to you, please look up the\n    definition of a pp-number in the C standard [section 6.4.8 of C99] */\n@@ -744,14 +686,12 @@ extern void cpp_grow_buffer PARAMS ((cpp_reader *, long));\n extern cpp_buffer *cpp_push_buffer PARAMS ((cpp_reader *,\n \t\t\t\t\t    unsigned char *, long));\n extern cpp_buffer *cpp_pop_buffer PARAMS ((cpp_reader *));\n+extern HASHNODE *cpp_lookup PARAMS ((cpp_reader *, const U_CHAR *, int));\n \n-extern cpp_hashnode *cpp_lookup PARAMS ((cpp_reader *, const unsigned char *,\n-\t\t\t\t\t int, int));\n extern void cpp_reader_init PARAMS ((cpp_reader *));\n extern void cpp_options_init PARAMS ((cpp_options *));\n extern int cpp_start_read PARAMS ((cpp_reader *, char *));\n extern int cpp_read_check_assertion PARAMS ((cpp_reader *));\n-extern int scan_decls PARAMS ((cpp_reader *, int, char **));\n extern void skip_rest_of_line PARAMS ((cpp_reader *));\n extern void cpp_finish PARAMS ((cpp_reader *));\n \n@@ -779,11 +719,6 @@ extern void deps_output\t\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\tconst char *, int));\n extern struct include_hash *include_hash PARAMS ((cpp_reader *, const char *, int));\n \n-#ifndef INCLUDE_LEN_FUDGE\n-#define INCLUDE_LEN_FUDGE 0\n-#endif\n-\n-\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "802d6364ac363725d18ff49e5af718e5216353af", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -603,7 +603,7 @@ check_macro_names (pfile, names)\n {\n   while (*names)\n     {\n-      if (cpp_lookup (pfile, names, -1, -1))\n+      if (cpp_lookup (pfile, names, -1))\n \trecognized_macro (names);\n       names += strlen (names) + 1;\n     }"}, {"sha": "1c321f531598bc96453bb68ad0dbb3e79411ae16", "filename": "gcc/scan.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fscan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb52fa7f8606991a77af8ff6f0edabb8d7ffd280/gcc%2Fscan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.h?ref=bb52fa7f8606991a77af8ff6f0edabb8d7ffd280", "patch": "@@ -62,6 +62,9 @@ extern void recognized_function _PARAMS((const char *, int, int, const char *, i\n extern void recognized_extern _PARAMS((const char *, int, const char *, int));\n extern unsigned int hashstr _PARAMS((const char *, unsigned int));\n \n+struct cpp_reader;\n+extern int scan_decls _PARAMS((struct cpp_reader *, int, char **));\n+\n /* get_token is a simple C lexer. */\n #define IDENTIFIER_TOKEN 300\n #define CHAR_TOKEN 301"}]}