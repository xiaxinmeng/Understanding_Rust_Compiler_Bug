{"sha": "b1009a5d128e8754873a3353285e0099d76dd778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwMDlhNWQxMjhlODc1NDg3M2EzMzUzMjg1ZTAwOTlkNzZkZDc3OA==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-02-27T21:31:36Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-02-27T21:31:36Z"}, "message": "tree.c (pod_type_p): Treat VECTOR_TYPEs as PODs.\n\n[gcc/cp/ChangeLog]\n2004-02-27  Ziemowit Laski  <zlaski@apple.com>\n\n        * tree.c (pod_type_p): Treat VECTOR_TYPEs as PODs.\n\n[gcc/testsuite/ChangeLog]\n2004-02-27  Ziemowit Laski  <zlaski@apple.com>\n\n        * g++.dg/ext/altivec-3.C: New.\n\nFrom-SVN: r78578", "tree": {"sha": "a005d9499161a7bcded6c5bf3623cad04a1e34b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a005d9499161a7bcded6c5bf3623cad04a1e34b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1009a5d128e8754873a3353285e0099d76dd778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1009a5d128e8754873a3353285e0099d76dd778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1009a5d128e8754873a3353285e0099d76dd778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1009a5d128e8754873a3353285e0099d76dd778/comments", "author": null, "committer": null, "parents": [{"sha": "00d04db68213730dd9a17ad3a748c470382e5cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d04db68213730dd9a17ad3a748c470382e5cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d04db68213730dd9a17ad3a748c470382e5cf6"}], "stats": {"total": 141, "additions": 140, "deletions": 1}, "files": [{"sha": "77a68bdbafc5bb9c695367b7cda72b9a45a490ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b1009a5d128e8754873a3353285e0099d76dd778", "patch": "@@ -1,3 +1,7 @@\n+2004-02-27  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* tree.c (pod_type_p): Treat VECTOR_TYPEs as PODs.\n+\n 2004-02-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14278"}, {"sha": "89ead788b942a3ea9f26d96503c25aa3dddc43d9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b1009a5d128e8754873a3353285e0099d76dd778", "patch": "@@ -1767,7 +1767,10 @@ pod_type_p (tree t)\n     return 1; /* pointer to non-member */\n   if (TYPE_PTR_TO_MEMBER_P (t))\n     return 1; /* pointer to member */\n-  \n+\n+  if (TREE_CODE (t) == VECTOR_TYPE)\n+    return 1; /* vectors are (small) arrays if scalars */\n+\n   if (! CLASS_TYPE_P (t))\n     return 0; /* other non-class type (reference or function) */\n   if (CLASSTYPE_NON_POD_P (t))"}, {"sha": "e8bd8ebd07288e7894e2ebb49f7773c281ead478", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1009a5d128e8754873a3353285e0099d76dd778", "patch": "@@ -1,3 +1,7 @@\n+2004-02-27  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* g++.dg/ext/altivec-3.C: New.\n+\n 2004-02-26  Richard Henderson  <rth@redhat.com>\n \n         * g++.dg/ext/attrib10.C: Mark for warning."}, {"sha": "a98d4a73041cc6b1e349e81d61f4f3dc2587a911", "filename": "gcc/testsuite/g++.dg/ext/altivec-3.C", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1009a5d128e8754873a3353285e0099d76dd778/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-3.C?ref=b1009a5d128e8754873a3353285e0099d76dd778", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* Test for correct handling of AltiVec constants passed\n+   through '...' (va_arg).  */\n+\n+#include <stdarg.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include <altivec.h>\n+#include \"altivec_check.h\"\n+\n+#define CHECK_INVARIANT(expr) \\\n+  if (!(expr)) { \\\n+    printf (\"ASSERT FAILED: %d: %s\\n\", __LINE__, #expr); \\\n+    abort (); \\\n+  }\n+\n+struct foo { int x; int y; };\n+struct vfoo { int x; __vector signed int v; int y; };\n+union u { __vector signed int v; signed int i[4]; };\n+\n+struct foo x_g = { 3, 4};\n+struct vfoo vx_g = { 10, (vector signed int) {11, 12, 13, 14}, 15 };\n+__vector signed int v_g = (vector signed int) {22, 23, 24, 25};\n+struct vfoo vx2_g = { 30, (vector signed int) {31, 32, 33, 34}, 35 };\n+__vector signed int v2_g = (vector signed int) {40, 41, 42, 43};\n+int i_1 = 99, i_2 = 33;\n+double d_2 = 1.5, d_3 = 1.75;\n+double ld_1 = 1.25;\n+\n+void bar (int i, ... )\n+{\n+    struct foo xi;\n+    double d;\n+    double ld;\n+    float f;\n+    char c;\n+    short s;\n+    va_list ap;\n+    va_start(ap, i);\n+    xi = va_arg(ap, struct foo);\n+    s = (short)va_arg(ap, int);\n+    f = (float)va_arg(ap, double);\n+    ld = va_arg(ap, double);\n+    c = (char)va_arg(ap, int);\n+    d = va_arg(ap, double);\n+    va_end(ap);\n+    \n+    CHECK_INVARIANT (xi.x == x_g.x && xi.y == x_g.y);\n+    CHECK_INVARIANT (s == (short)i_2);\n+    CHECK_INVARIANT (f == (float)d_2);\n+    CHECK_INVARIANT (ld == ld_1);\n+    CHECK_INVARIANT (c == (char)i_1);\n+    CHECK_INVARIANT (d == d_3);\n+}\n+\n+void baz (int i, ... )\n+{\n+    struct vfoo vx, vx2;\n+    __vector signed int v_i, v2_i;\n+    int j, k, l;\n+    va_list ap;\n+    va_start(ap, i);\n+    v_i = va_arg(ap, __vector signed int); \n+    j = va_arg(ap, int);\n+    vx = va_arg(ap, struct vfoo);\n+    k = va_arg(ap, int);\n+    v2_i = va_arg(ap, __vector signed int);\n+    l = va_arg(ap, int);\n+    vx2 = va_arg(ap, struct vfoo);\n+    va_end(ap);\n+      \n+    CHECK_INVARIANT (vec_all_eq (v_i, v_g));\n+    CHECK_INVARIANT (j == i_1);\n+    CHECK_INVARIANT (vx.x == vx_g.x && vec_all_eq(vx.v, vx_g.v) && vx.y == vx_g.y);\n+    CHECK_INVARIANT (k == i_1);\n+    CHECK_INVARIANT (vec_all_eq (v2_i, v2_g));\n+    CHECK_INVARIANT (l == i_1);\n+    CHECK_INVARIANT (vx2.x == vx2_g.x && vec_all_eq(vx2.v, vx2_g.v) && vx2.y == vx2_g.y);\n+}\n+\n+void quux (int i, ... )\n+{\n+    __vector signed int v_i, v2_i;\n+    union u vi, v2i;\n+    va_list ap;\n+    va_start(ap, i);\n+    v_i = va_arg(ap, __vector signed int);\n+    v2_i = va_arg(ap, __vector signed int);\n+    va_end(ap);\n+    vi.v = v_i;\n+    v2i.v = v2_i;\n+\n+    CHECK_INVARIANT (vec_all_eq (v_i, v_g));\n+    CHECK_INVARIANT (vec_all_eq (v2_i, v_g));\n+    CHECK_INVARIANT (vec_all_eq (vi.v, v_g));\n+    CHECK_INVARIANT (vec_all_eq (v2i.v, v_g));\n+}\n+\n+void baz2 (int i, ... )\n+{\n+    struct vfoo vx;\n+    union u vxi;\n+    va_list ap;\n+    va_start(ap, i);\n+    vx = va_arg(ap, struct vfoo);\n+    va_end(ap);\n+    vxi.v = vx.v;\n+\n+    CHECK_INVARIANT (vx.x == vx_g.x && vec_all_eq(vx.v, vx_g.v) && vx.y == vx_g.y);\n+    CHECK_INVARIANT (vec_all_eq (vxi.v, vx_g.v));\n+}\n+\n+int main(void)\n+{\n+    CHECK_INVARIANT (sizeof(struct foo) == 8 && sizeof(struct vfoo) == 48);\n+\n+    altivec_check();\n+\n+    bar(i_1, x_g, (short)i_2, (float)d_2, ld_1, (char)i_1, d_3);\n+    baz(i_1, v_g, i_1, vx_g, i_1, v2_g, i_1, vx2_g); \n+    quux(i_1, v_g, v_g);\n+    baz2(i_1, vx_g);\n+    \n+    return 0;\n+}"}]}