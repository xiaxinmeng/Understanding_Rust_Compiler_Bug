{"sha": "894ac7bce590dc5036c7f1477b881dc767ce2e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0YWM3YmNlNTkwZGM1MDM2YzdmMTQ3N2I4ODFkYzc2N2NlMmU1YQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2020-05-11T15:04:03Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-11T15:04:03Z"}, "message": "rs6000: Add vector pdep/pext\n\nAdd support for the vpdepd and vpextd instructions that perform\nvector parallel bit deposit and vector parallel bit extract.\n\n[gcc]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_pdep): New macro implementing new\n\tbuilt-in function.\n\t(vec_pext): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_VPDEPD): New constant.\n\t(UNSPEC_VPEXTD): Likewise.\n\t(vpdepd): New insn.\n\t(vpextd): Likewise.\n\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vpdepd): New\n\tbuilt-in function.\n\t(__builtin_altivec_vpextd): Likewise.\n\t* config/rs6000/rs6000-call.c (builtin_function_type): Add\n\thandling for FUTURE_BUILTIN_VPDEPD and FUTURE_BUILTIN_VPEXTD\n\tcases.\n\t* doc/extend.texi (PowerPC Altivec Built-in Functions Available\n\tfor a Future Architecture): Add description of vec_pdep and\n\tvec_pext built-in functions.\n\n[gcc/testsuite]\n\n2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vec-pdep-0.c: New.\n\t* gcc.target/powerpc/vec-pdep-1.c: New.\n\t* gcc.target/powerpc/vec-pext-0.c: New.\n\t* gcc.target/powerpc/vec-pext-1.c: New.", "tree": {"sha": "d9db3eeb9215e08be7f2d60f934326d31d29ad9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9db3eeb9215e08be7f2d60f934326d31d29ad9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894ac7bce590dc5036c7f1477b881dc767ce2e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894ac7bce590dc5036c7f1477b881dc767ce2e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894ac7bce590dc5036c7f1477b881dc767ce2e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894ac7bce590dc5036c7f1477b881dc767ce2e5a/comments", "author": null, "committer": null, "parents": [{"sha": "a1821a249d998894dd38b14d5298647e8d7b5dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1821a249d998894dd38b14d5298647e8d7b5dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1821a249d998894dd38b14d5298647e8d7b5dc8"}], "stats": {"total": 288, "additions": 288, "deletions": 0}, "files": [{"sha": "34c7bc0918d5672da22bbd98aa5cce8ad6cc6d9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -1,3 +1,23 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\t    Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_pdep): New macro implementing new\n+\tbuilt-in function.\n+\t(vec_pext): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_VPDEPD): New constant.\n+\t(UNSPEC_VPEXTD): Likewise.\n+\t(vpdepd): New insn.\n+\t(vpextd): Likewise.\n+\t* config/rs6000/rs6000-builtin.def (__builtin_altivec_vpdepd): New\n+\tbuilt-in function.\n+\t(__builtin_altivec_vpextd): Likewise.\n+\t* config/rs6000/rs6000-call.c (builtin_function_type): Add\n+\thandling for FUTURE_BUILTIN_VPDEPD and FUTURE_BUILTIN_VPEXTD\n+\tcases.\n+\t* doc/extend.texi (PowerPC Altivec Built-in Functions Available\n+\tfor a Future Architecture): Add description of vec_pdep and\n+\tvec_pext built-in functions.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \t    Bill Schmidt  <wschmidt@linux.ibm.com>\n "}, {"sha": "12dfcd8d2bf96e4ef9e9b491064400a51d6a900b", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -691,6 +691,9 @@ __altivec_scalar_pred(vec_any_nle,\n    with support for different vector argument and result types.  */\n #define vec_clzm(a, b)\t__builtin_altivec_vclzdm (a, b)\n #define vec_ctzm(a, b)\t__builtin_altivec_vctzdm (a, b)\n+#define vec_pdep(a, b)\t__builtin_altivec_vpdepd (a, b)\n+#define vec_pext(a, b)\t__builtin_altivec_vpextd (a, b)\n+\n #endif\n \n #endif /* _ALTIVEC_H */"}, {"sha": "33ba57855bc73fb70ac491b589235499e47f19af", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -162,6 +162,8 @@\n    UNSPEC_VRLNM\n    UNSPEC_VCLZDM\n    UNSPEC_VCTZDM\n+   UNSPEC_VPDEPD\n+   UNSPEC_VPEXTD\n ])\n \n (define_c_enum \"unspecv\"\n@@ -4116,6 +4118,24 @@\n    \"vctzdm %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"vpdepd\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VPDEPD))]\n+   \"TARGET_FUTURE\"\n+   \"vpdepd %0,%1,%2\"\n+   [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"vpextd\"\n+  [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_VPEXTD))]\n+   \"TARGET_FUTURE\"\n+   \"vpextd %0,%1,%2\"\n+   [(set_attr \"type\" \"vecsimple\")])\n+\n \n (define_expand \"bcd<bcd_add_sub>_<code>\"\n   [(parallel [(set (reg:CCFP CR6_REGNO)"}, {"sha": "776fc542ebfc43573fdcd1c985f15559423b98b8", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -2518,6 +2518,8 @@ BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n /* Future architecture vector built-ins.  */\n BU_FUTURE_V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n+BU_FUTURE_V_2 (VPDEPD, \"vpdepd\", CONST, vpdepd)\n+BU_FUTURE_V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox_v2di)"}, {"sha": "ab6ba57660558fd9487d7880cd31a00a1c3f1190", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -12928,6 +12928,8 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P8V_BUILTIN_ORC_V1TI_UNS:\n     case FUTURE_BUILTIN_VCLZDM:\n     case FUTURE_BUILTIN_VCTZDM:\n+    case FUTURE_BUILTIN_VPDEPD:\n+    case FUTURE_BUILTIN_VPEXTD:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "23c7aa6fb7937e32967be175f7851b757270b130", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -20713,6 +20713,21 @@ Perform a vector count trailing zeros under bit mask operation, as if\n implemented by the Future @code{vctzdm} instruction.\n @findex vec_ctzm\n \n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_pdep (vector unsigned long long int, vector unsigned long long int)\n+@end smallexample\n+Perform a vector parallel bits deposit operation, as if implemented by\n+the Future @code{vpdepd} instruction.\n+@findex vec_pdep\n+\n+@smallexample\n+@exdent vector unsigned long long int\n+@exdent vec_pext (vector unsigned long long int, vector unsigned long long int)\n+@end smallexample\n+Perform a vector parallel bit extract operation, as if implemented by\n+the Future @code{vpextd} instruction.\n+@findex vec_pext\n \n @node PowerPC Hardware Transactional Memory Built-in Functions\n @subsection PowerPC Hardware Transactional Memory Built-in Functions"}, {"sha": "05b409a0587ee527369257dee8bd8db18492f9a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -1,3 +1,10 @@\n+2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vec-pdep-0.c: New.\n+\t* gcc.target/powerpc/vec-pdep-1.c: New.\n+\t* gcc.target/powerpc/vec-pext-0.c: New.\n+\t* gcc.target/powerpc/vec-pext-1.c: New.\n+\n 2020-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/94988"}, {"sha": "541b0aa6f4502086c35054547d0ec41055ff6a1b", "filename": "gcc/testsuite/gcc.target/powerpc/vec-pdep-0.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pdep-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pdep-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pdep-0.c?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_pdep (vector unsigned long long int source,\n+\t     vector unsigned long long int mask) {\n+  return vec_pdep (source, mask);\n+}\n+\n+int\n+vectors_equal (vector unsigned long long int a,\n+\t       vector unsigned long long int b)\n+{\n+  return (a[0] == b[0]) && (a[1] == b[1]);\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See pdepd-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0x7e3c0000ull, 0x0000a5f0ull };\n+  vector unsigned long long int result_ab = { 0x070e030cull, 0xa050f000ull };\n+  vector unsigned long long int result_ba = { 0xf07e0000ull, 0x0000e7c3ull };\n+  vector unsigned long long int result_bb = { 0x0f00070eull, 0xe070c030ull };\n+\n+  if (!vec_all_eq (do_vec_pdep (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pdep (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pdep (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pdep (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvpdepd\\M} } } */"}, {"sha": "75249c50eeec0a0f1d9eed5d0149c27440e6030f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-pdep-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pdep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pdep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pdep-1.c?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_pdep (vector unsigned long long int source,\n+\t     vector unsigned long long int mask) {\n+  return vec_pdep (source, mask);\n+}\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See pdepd-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0x7e3c0000ull, 0x0000a5f0ull };\n+  vector unsigned long long int result_ab = { 0x070e030cull, 0xa050f000ull };\n+  vector unsigned long long int result_ba = { 0xf07e0000ull, 0x0000e7c3ull };\n+  vector unsigned long long int result_bb = { 0x0f00070eull, 0xe070c030ull };\n+\n+  if (!vec_all_eq (do_vec_pdep (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pdep (source_a, mask_b), result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pdep (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pdep (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "1d12f048dbd1650444287c6e9a2f2d12131c5f2c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-pext-0.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pext-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pext-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pext-0.c?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_pext (vector unsigned long long int source,\n+\t     vector unsigned long long int mask) {\n+  return vec_pext (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See pextd-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0x0000a5f0ull, 0x0000a5f0ull };\n+  vector unsigned long long int result_ab = { 0x000050ecull, 0x000073afull };\n+  vector unsigned long long int result_ba = { 0x00003ca5ull, 0x0000e7c3ull };\n+  vector unsigned long long int result_bb = { 0x0000c50eull, 0x000050ecull };\n+\n+  if (!vec_all_eq (do_vec_pext (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pext (source_a, mask_b),result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pext (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pext (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvpextd\\M} } } */"}, {"sha": "db1b95e729a3812aaf31abb45ba1b02cc90afd9f", "filename": "gcc/testsuite/gcc.target/powerpc/vec-pext-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894ac7bce590dc5036c7f1477b881dc767ce2e5a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-pext-1.c?ref=894ac7bce590dc5036c7f1477b881dc767ce2e5a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+/* { dg-options \"-mdejagnu-cpu=future\" } */\n+\n+#include <altivec.h>\n+\n+extern void abort (void);\n+\n+vector unsigned long long int\n+do_vec_pext (vector unsigned long long int source,\n+\t     vector unsigned long long int mask) {\n+  return vec_pext (source, mask);\n+}\n+\n+int main (int argc, char *argv [])\n+{\n+  vector unsigned long long int source_a = { 0xa5f07e3cull, 0x7e3ca5f0ull };\n+  vector unsigned long long int source_b = { 0x3ca5f07eull, 0x5a0fe7c3ull };\n+\n+  vector unsigned long long int mask_a = { 0xffff0000ull, 0x0000ffffull };\n+  vector unsigned long long int mask_b = { 0x0f0f0f0full, 0xf0f0f0f0ull };\n+\n+  /* See pextd-0.c for derivation of expected results.\n+\n+     result_aa [0] is compute (source [0], mask [0];\n+     result_aa [1] is compute (source [1], mask [1].\n+\n+     result_ab [0] is compute (source [0], mask [2];\n+     result_ab [1] is compute (source [1], mask [3].\n+\n+     result_ba [0] is compute (source [2], mask [0];\n+     result_ba [1] is compute (source [3], mask [1].\n+\n+     result_bb [0] is compute (source [2], mask [2];\n+     result_bb [1] is compute (source [3], mask [3].  */\n+\n+  vector unsigned long long int result_aa = { 0x0000a5f0ull, 0x0000a5f0ull };\n+  vector unsigned long long int result_ab = { 0x000050ecull, 0x000073afull };\n+  vector unsigned long long int result_ba = { 0x00003ca5ull, 0x0000e7c3ull };\n+  vector unsigned long long int result_bb = { 0x0000c50eull, 0x000050ecull };\n+\n+  if (!vec_all_eq (do_vec_pext (source_a, mask_a), result_aa))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pext (source_a, mask_b),result_ab))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pext (source_b, mask_a), result_ba))\n+    abort ();\n+  if (!vec_all_eq (do_vec_pext (source_b, mask_b), result_bb))\n+    abort ();\n+\n+  return 0;\n+}"}]}