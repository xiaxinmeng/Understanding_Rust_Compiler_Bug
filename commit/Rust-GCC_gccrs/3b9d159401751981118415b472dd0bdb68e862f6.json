{"sha": "3b9d159401751981118415b472dd0bdb68e862f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I5ZDE1OTQwMTc1MTk4MTExODQxNWI0NzJkZDBiZGI2OGU4NjJmNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-09-26T09:16:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:16:49Z"}, "message": "[Ada] Wrong handling of address clause for limited record type\n\n2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Adjust\n\tcode retrieving the address when a clause has already been\n\tprocessed.\n\t* gcc-interface/trans.c (gnat_to_gnu)\n\t<N_Attribute_Definition_Clause>: For an object with a Freeze\n\tnode, build a meaningful expression.\n\ngcc/testsuite/\n\n\t* gnat.dg/addr12.adb, gnat.dg/addr12_a.adb,\n\tgnat.dg/addr12_a.ads, gnat.dg/addr12_b.adb,\n\tgnat.dg/addr12_b.ads, gnat.dg/addr12_c.ads: New testcase.\n\nFrom-SVN: r264606", "tree": {"sha": "784b824f3eb73fef6ee98fbc3e7a2dfbfbd4f130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/784b824f3eb73fef6ee98fbc3e7a2dfbfbd4f130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b9d159401751981118415b472dd0bdb68e862f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9d159401751981118415b472dd0bdb68e862f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b9d159401751981118415b472dd0bdb68e862f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9d159401751981118415b472dd0bdb68e862f6/comments", "author": null, "committer": null, "parents": [{"sha": "1ac984f5952c52f0f70e64f5ab7a99fa62877df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac984f5952c52f0f70e64f5ab7a99fa62877df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac984f5952c52f0f70e64f5ab7a99fa62877df7"}], "stats": {"total": 124, "additions": 114, "deletions": 10}, "files": [{"sha": "b296122fa45de1df2c262ed79aef567ae2394627", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -1,3 +1,12 @@\n+2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Adjust\n+\tcode retrieving the address when a clause has already been\n+\tprocessed.\n+\t* gcc-interface/trans.c (gnat_to_gnu)\n+\t<N_Attribute_Definition_Clause>: For an object with a Freeze\n+\tnode, build a meaningful expression.\n+\n 2018-09-26  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat1drv.adb (Adjust_Global_Switches): -gnatd_A sets"}, {"sha": "c15b0c8ef2e9280408e1de9d88d9788cd9675eee", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -1147,10 +1147,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tif (definition && Present (Address_Clause (gnat_entity)))\n \t  {\n \t    const Node_Id gnat_clause = Address_Clause (gnat_entity);\n-\t    Node_Id gnat_address = Expression (gnat_clause);\n-\t    tree gnu_address\n-\t      = present_gnu_tree (gnat_entity)\n-\t\t? get_gnu_tree (gnat_entity) : gnat_to_gnu (gnat_address);\n+\t    const Node_Id gnat_address = Expression (gnat_clause);\n+\t    tree gnu_address = present_gnu_tree (gnat_entity)\n+\t\t\t       ? TREE_OPERAND (get_gnu_tree (gnat_entity), 0)\n+\t\t\t       : gnat_to_gnu (gnat_address);\n \n \t    save_gnu_tree (gnat_entity, NULL_TREE, false);\n "}, {"sha": "3e129b60ce1327484f8d1882e0f98d93eecc858d", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -7570,13 +7570,33 @@ gnat_to_gnu (Node_Id gnat_node)\n \n       /* And we only deal with 'Address if the object has a Freeze node.  */\n       gnat_temp = Entity (Name (gnat_node));\n-      if (No (Freeze_Node (gnat_temp)))\n-\tbreak;\n+      if (Freeze_Node (gnat_temp))\n+\t{\n+\t  tree gnu_address = gnat_to_gnu (Expression (gnat_node));\n+\n+\t  /* Get the value to use as the address and save it as the equivalent\n+\t     for the object; when it is frozen, gnat_to_gnu_entity will do the\n+\t     right thing.  For a subprogram, put the naked address but build a\n+\t     meaningfull expression for an object in case its address is taken\n+\t     before the Freeze node is encountered; this can happen if the type\n+\t     of the object is limited and it is initialized with the result of\n+\t     a function call.  */\n+\t  if (Is_Subprogram (gnat_temp))\n+\t    gnu_result = gnu_address;\n+\t  else\n+\t    {\n+\t      tree gnu_type = gnat_to_gnu_type (Etype (gnat_temp));\n+\t      /* Drop atomic and volatile qualifiers for the expression.  */\n+\t      gnu_type = TYPE_MAIN_VARIANT (gnu_type);\n+\t      gnu_type\n+\t\t= build_reference_type_for_mode (gnu_type, ptr_mode, true);\n+\t      gnu_address = convert (gnu_type, gnu_address);\n+\t      gnu_result\n+\t\t= build_unary_op (INDIRECT_REF, NULL_TREE, gnu_address);\n+\t    }\n \n-      /* Get the value to use as the address and save it as the equivalent\n-\t for the object.  When it is frozen, gnat_to_gnu_entity will do the\n-\t right thing.  */\n-      save_gnu_tree (gnat_temp, gnat_to_gnu (Expression (gnat_node)), true);\n+\t  save_gnu_tree (gnat_temp, gnu_result, true);\n+\t}\n       break;\n \n     case N_Enumeration_Representation_Clause:"}, {"sha": "c97b9c509ee8e1f339ac05a6855cd7f6fc70180d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -3,6 +3,12 @@\n \tPR c++/67656\n \t* g++.dg/concepts/pr67656.C: New.\n \n+2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/addr12.adb, gnat.dg/addr12_a.adb,\n+\tgnat.dg/addr12_a.ads, gnat.dg/addr12_b.adb,\n+\tgnat.dg/addr12_b.ads, gnat.dg/addr12_c.ads: New testcase.\n+\n 2018-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* g++.dg/other/vthunk1.C: Rename to..."}, {"sha": "7143d5054dbf5ef31195fcacb672b4251503153b", "filename": "gcc/testsuite/gnat.dg/addr12.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12.adb?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -0,0 +1,8 @@\n+--  { dg-do run }\n+\n+with Addr12_A;\n+\n+procedure Addr12 is\n+begin\n+   Addr12_A.Do_Stuff;\n+end;"}, {"sha": "fac145a80e702c6594a6f929ddde3db50494bebf", "filename": "gcc/testsuite/gnat.dg/addr12_a.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_a.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_a.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_a.adb?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -0,0 +1,20 @@\n+with Addr12_B;\n+with Addr12_C;\n+with System;\n+\n+package body Addr12_A is\n+\n+   First_Address  : constant System.Address := Addr12_C.First'Address;\n+   Second_Address : constant System.Address := Addr12_C.Second'Address;\n+\n+   First_Channel : Addr12_B.Shared_Context_Type := Addr12_B.Initial_State\n+   with Volatile, Async_Readers, Address => First_Address;\n+\n+   Second_Channel : Addr12_B.Shared_Context_Type := Addr12_B.Initial_State\n+   with Volatile, Async_Readers;\n+\n+   for Second_Channel'Address use Second_Address;\n+\n+   procedure Do_Stuff is null;\n+\n+end Addr12_A;"}, {"sha": "3278b8c548025d961ca4162a73fcdd627b8748bc", "filename": "gcc/testsuite/gnat.dg/addr12_a.ads", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_a.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_a.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_a.ads?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -0,0 +1,3 @@\n+package Addr12_A is\n+   procedure Do_Stuff;\n+end Addr12_A;"}, {"sha": "b35c44f5bafc6bd4226fc72a9f8d154ee6cf01bb", "filename": "gcc/testsuite/gnat.dg/addr12_b.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_b.adb?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -0,0 +1,8 @@\n+package body Addr12_B is\n+\n+   function Initial_State return Shared_Context_Type is\n+   begin\n+      return Shared_Context_Type'(Data => (others => Null_Entry));\n+   end Initial_State;\n+\n+end Addr12_B;"}, {"sha": "8b5840001ae6912822799e2f9d61376afc061490", "filename": "gcc/testsuite/gnat.dg/addr12_b.ads", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_b.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_b.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_b.ads?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -0,0 +1,24 @@\n+package Addr12_B is\n+\n+   type Entry_Type is record\n+      Auto_Init : Boolean;\n+   end record;\n+\n+   type Entry_Range  is range 1 .. 20;\n+   type Entries_Type is array (Entry_Range) of Entry_Type;\n+\n+   Null_Entry : constant Entry_Type := Entry_Type'(Auto_Init => False);\n+\n+   type Shared_Context_Type is limited private;\n+\n+   function Initial_State return Shared_Context_Type\n+   with Volatile_Function;\n+\n+private\n+\n+   type Shared_Context_Type is limited record\n+      Data : Entries_Type;\n+   end record\n+   with Volatile;\n+\n+end Addr12_B;"}, {"sha": "957189bbe89bf5117cd62fafcf99ab038b7804d8", "filename": "gcc/testsuite/gnat.dg/addr12_c.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9d159401751981118415b472dd0bdb68e862f6/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faddr12_c.ads?ref=3b9d159401751981118415b472dd0bdb68e862f6", "patch": "@@ -0,0 +1,6 @@\n+with Addr12_B;\n+\n+package Addr12_C is\n+   First : Addr12_B.Shared_Context_Type;\n+   Second : Addr12_B.Shared_Context_Type;\n+end Addr12_C;"}]}