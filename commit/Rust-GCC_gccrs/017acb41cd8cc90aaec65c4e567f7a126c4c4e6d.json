{"sha": "017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3YWNiNDFjZDhjYzkwYWFlYzY1YzRlNTY3ZjdhMTI2YzRjNGU2ZA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-06-20T20:34:19Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-06-20T20:34:19Z"}, "message": "cppexp.c (cpp_interpret_integer): Don't force traditional numbers to be unsigned.\n\n\t* cppexp.c (cpp_interpret_integer): Don't force traditional\n\tnumbers to be unsigned.\n\t* cpplib.c (prepare_directive_trad): Set line number for\n\tdiagnostics.\n\t* cpptrad.c (scan_out_logical_line): Continue scanning out\n\tat start of buffer.\n\t* gcc.c (trad_capable_cpp): Use cc1 always.\nf:\n\t* lang-specs.h: Use cc1 for traditional preprocessing.\ntestsuite:\n\t* gcc.dg/cpp/assert_trad1.c, gcc.dg/cpp/assert_trad2.c,\n\tgcc.dg/cpp/assert_trad3.c, gcc.dg/cpp/defined_trad.c,\n\tgcc.dg/cpp/hash2.c, gcc.dg/cpp/tr-define.c, gcc.dg/cpp/tr-direct.c,\n\tgcc.dg/cpp/tr-sign.c, gcc.dg/cpp/tr-str.c, gcc.dg/cpp/uchar-2.c:\n\tRemove.\n\nFrom-SVN: r54856", "tree": {"sha": "a0323cce9b4103b2363bc451d6e3a03652a528b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0323cce9b4103b2363bc451d6e3a03652a528b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ab23d80ecd18fbe314d192bf54584a0cf185413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab23d80ecd18fbe314d192bf54584a0cf185413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab23d80ecd18fbe314d192bf54584a0cf185413"}], "stats": {"total": 273, "additions": 35, "deletions": 238}, "files": [{"sha": "f7b0f3261b57e60cbf5f19f9b17a51e61181e96c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -1,3 +1,13 @@\n+2002-06-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppexp.c (cpp_interpret_integer): Don't force traditional\n+\tnumbers to be unsigned.\n+\t* cpplib.c (prepare_directive_trad): Set line number for\n+\tdiagnostics.\n+\t* cpptrad.c (scan_out_logical_line): Continue scanning out\n+\tat start of buffer.\n+\t* gcc.c (trad_capable_cpp): Use cc1 always.\n+\n 2002-06-20  Jeffrey Law  <law@redhat.com>\n \n \t* i386.h (TARGET_DEFAULT): Do not turn on frame pointer"}, {"sha": "b3a7ce60966f2501c4ea6130f6ca42417e979ae9", "filename": "gcc/cppexp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -375,10 +375,13 @@ cpp_interpret_integer (pfile, token, type)\n       if (overflow)\n \tcpp_error (pfile, DL_PEDWARN,\n \t\t   \"integer constant is too large for its type\");\n-      else if (!result.unsignedp && !num_positive (result, precision))\n+      /* If too big to be signed, consider it unsigned.  Only warn for\n+\t decimal numbers.  Traditional numbers were always signed (but\n+\t we still honour an explicit U suffix).  */\n+      else if (!result.unsignedp\n+\t       && !CPP_OPTION (pfile, traditional)\n+\t       && !num_positive (result, precision))\n \t{\n-\t  /* If too big to be signed, consider it unsigned.  Only warn\n-\t     for decimal numbers.  */\n \t  if (base == 10)\n \t    cpp_error (pfile, DL_WARNING,\n \t\t       \"integer constant is so large that it is unsigned\");"}, {"sha": "d3c95e75c864fdc3e87f30f2051764c161b08608", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -303,6 +303,8 @@ prepare_directive_trad (pfile)\n       pfile->state.skipping = was_skipping;\n       _cpp_overlay_buffer (pfile, pfile->out.base,\n \t\t\t   pfile->out.cur - pfile->out.base);\n+      /* Report diagnostics on the line of the directive.  */\n+      pfile->line = pfile->directive_line;\n     }\n \n   /* Stop ISO C from expanding anything.  */"}, {"sha": "74976dbe2310ecf70eeb17f33b43d9a148821b0e", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -38,7 +38,7 @@ struct block\n };\n \n #define BLOCK_HEADER_LEN offsetof (struct block, text)\n-#define BLOCK_LEN(TEXT_LEN) CPP_ALIGN (BLOCK_HEADER_LEN + TEXT_LEN)\n+#define BLOCK_LEN(TEXT_LEN) CPP_ALIGN (BLOCK_HEADER_LEN + (TEXT_LEN))\n \n /* Structure holding information about a function-like macro\n    invocation.  */\n@@ -602,8 +602,9 @@ scan_out_logical_line (pfile, macro)\n \t\t{\n \t\t  /* Found a parameter in the replacement text of a\n \t\t     #define.  Remove its name from the output.  */\n-\t\t  out = pfile->out.cur = out_start;\n+\t\t  pfile->out.cur = out_start;\n \t\t  save_replacement_text (pfile, macro, node->arg_index);\n+\t\t  out = pfile->out.base;\n \t\t}\n \t      else if (lex_state == ls_hash)\n \t\t{"}, {"sha": "fa3128ca8735ea7356cd96f76154bc63ad1960a4", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -1,3 +1,7 @@\n+Thu Jun 20 21:56:34 2002  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang-specs.h: Use cc1 for traditional preprocessing.\n+\n 2002-06-20  Andreas Jaeger  <aj@suse.de>\n \n \t* com.c (ffecom_prepare_expr_,ffecom_expr_power_integer_):"}, {"sha": "5536f78cab060588cd8b8c147b2398e8484a8bcd", "filename": "gcc/f/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Ff%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Ff%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-specs.h?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -28,7 +28,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   {\".fpp\", \"@f77-cpp-input\", 0},\n   {\".FPP\", \"@f77-cpp-input\", 0},\n   {\"@f77-cpp-input\",\n-   \"tradcpp0 -lang-fortran %(cpp_options) \\\n+   \"cc1 -E -traditional-cpp -D_LANGUAGE_FORTRAN %(cpp_options) \\\n         %{E|M|MM:%(cpp_debug_options)}\\\n         %{!M:%{!MM:%{!E:%{!pipe:%g.f} |\\n\\\n     f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}}}\", 0},"}, {"sha": "fc0f3592c9798ee33e09b5e6219b9a05cd822644", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -675,8 +675,7 @@ static const char *startfile_prefix_spec = STARTFILE_PREFIX_SPEC;\n    call cc1 (or cc1obj in objc/lang-specs.h) from the main specs so\n    that we default the front end language better.  */\n static const char *trad_capable_cpp =\n-\"%{traditional|ftraditional|traditional-cpp:tradcpp0}\\\n- %{!traditional:%{!ftraditional:%{!traditional-cpp:cc1 -E}}}\";\n+\"cc1 -E %{traditional|ftraditional|traditional-cpp:-traditional-cpp}\";\n \n static const char *cpp_unique_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\"}, {"sha": "498e67171a509b8c4a119b2c4633d3f703d8626f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017acb41cd8cc90aaec65c4e567f7a126c4c4e6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=017acb41cd8cc90aaec65c4e567f7a126c4c4e6d", "patch": "@@ -1,3 +1,11 @@\n+2002-06-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/assert_trad1.c, gcc.dg/cpp/assert_trad2.c,\n+\tgcc.dg/cpp/assert_trad3.c, gcc.dg/cpp/defined_trad.c,\n+\tgcc.dg/cpp/hash2.c, gcc.dg/cpp/tr-define.c, gcc.dg/cpp/tr-direct.c,\n+\tgcc.dg/cpp/tr-sign.c, gcc.dg/cpp/tr-str.c, gcc.dg/cpp/uchar-2.c:\n+\tRemove.\n+\n 2002-06-20  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.dg/20020620-1.c: New test."}, {"sha": "6d3c04e1a0db9c0993d42ceb98c85513e7cb51a4", "filename": "gcc/testsuite/gcc.dg/cpp/assert_trad1.c", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad1.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,46 +0,0 @@\n-/* Basic tests of the #assert preprocessor extension. */\n-/* { dg-do compile } */\n-/* { dg-options \"-traditional-cpp\" } */\n-\n-/* #define def unused expansion */ /* tradcpp can't handle macros in answers.  */\n-#define fail int failit\n-\n-#assert abc (def)\n-#assert abc (ghi)\n-#assert abc (jkl)\n-#assert space ( s p a c e )\n-\n-/* Basic: */\n-#if !#abc (def) || !#abc (ghi) || !#abc (jkl)\n-fail\n-#endif\n-\n-/* any answer for #abc */\n-#if !#abc\n-fail\n-#endif\n-\n-/* internal whitespace is collapsed,\n-   external whitespace is deleted  */\n-#if !#space (s p  a  c e) || !#space (  s p a c e  ) || #space (space)\n-fail\n-#endif\n-\n-/* removing assertions */\n-#unassert abc (jkl)\n-#if !#abc || !#abc (def) || !#abc (ghi) || #abc (jkl)\n-fail\n-#endif\n-\n-#unassert abc\n-#if #abc || #abc (def) || #abc (ghi) || #abc (jkl)\n-fail\n-#endif\n-\n-int gobble\n-\n-/* make sure it can succeed too.\n-   also check space before open paren isn't significant */\n-#if #space(s p a c e)\n-;\n-#endif"}, {"sha": "2f6963ec9c0789756b505029f5b3b1276cb3ebb6", "filename": "gcc/testsuite/gcc.dg/cpp/assert_trad2.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad2.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,24 +0,0 @@\n-/* Malformed assertion tests.  */\n-/* { dg-do preprocess } */\n-/* { dg-options \"-traditional\" } */\n-\n-#assert\t\t/* { dg-error \"without predicate\" \"assert w/o predicate\" } */\n-#assert %\t/* { dg-error \"an identifier\" \"assert punctuation\" } */\n-#assert 12\t/* { dg-error \"an identifier\" \"assert number\" } */\n-#assert abc\t/* { dg-error \"missing\" \"assert w/o answer\" } */\n-\n-#if #\t\t/* { dg-error \"without predicate\" \"test w/o predicate\" } */\n-#endif\n-\n-#if #%\t\t/* { dg-error \"an identifier\" \"test punctuation\" } */\n-#endif\t\t/* { dg-error \"parse error\" \"\" { target *-*-* } 13 } */\n-\n-#if #12\t\t/* { dg-error \"an identifier\" \"test number\" } */\n-#endif\t\t/* { dg-error \"parse error\" \"\" { target *-*-* } 16 } */\n-\n-#if #abc\n-#error\t\t/* { dg-bogus \"error\" \"test w/o answer\" } */\n-#endif\n-\n-#if #abc[def]\t/* { dg-error \"parse error\" \"bad syntax\" } */\n-#endif"}, {"sha": "641ba5c042948a399753eb75424248dded5b04b2", "filename": "gcc/testsuite/gcc.dg/cpp/assert_trad3.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fassert_trad3.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,10 +0,0 @@\n-/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n-\n-/* { dg-do preprocess } */\n-/* { dg-options \"-A abc=def -A abc\\(ghi\\) \\\"-Aabc = jkl\\\" -A abc=mno -A -abc=mno -traditional\" } */\n-\n-/* Test -A command line syntax.  Source Neil Booth.  31 Oct 2000.  */\n-\n-#if !#abc (def) || !#abc (ghi) || !#abc (jkl) || #abc(mno)\n-#error Command line -A assertions\n-#endif"}, {"sha": "666fd712f5adf71c4a1a1936e57cfb54fc6f8184", "filename": "gcc/testsuite/gcc.dg/cpp/defined_trad.c", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined_trad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined_trad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined_trad.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,79 +0,0 @@\n-/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n-\n-/* { dg-do preprocess } */\n-/* { dg-options \"-traditional\" } */\n-\n-/* Tests tradcpp0 with defined.  The defined operator in traditional C\n-   works just the same as the defined operator in Standard C.  */\n-\n-/* Source: Zack Weinberg, glibc, Neil Booth 11 Dec 2000.  */\n-\n-#if defined REGPARMS\n-#error REGPARMS should not be defined\n-#endif\n-\n-#define REGPARMS 1\n-#if !defined REGPARMS\n-#error REGPARMS should be defined\n-#endif\n-\n-#define defined\t\t\t/* { dg-error \"defined\" } */\n-\n-/* No diagnostics, though you could argue there should be.  */\n-#if defined defined\n-#error defined is defined!\n-#endif\n-\n-#define is_Z_defined defined Z\n-\n-#if defined Z\n-#error Z is not defined\n-#endif\n-\n-/* The behaviour of \"defined\" when it comes from a macro expansion is\n-   now documented.  */\n-#if is_Z_defined\n-#error Macro expanding into defined operator test 1\n-#endif\n-\n-#define Z\n-\n-#if !defined Z\n-#error Z is defined\n-#endif\n-\n-#if !is_Z_defined\n-#error Macro expanding into defined operator test 2\n-#endif\n-\n-#undef is_Z_defined\n-#undef Z\n-\n-/* Do all the tests over again with the () form of defined.  */\n-\n-/* No diagnostics, though you could argue there should be.  */\n-#if defined(defined)\n-#error defined is defined!\n-#endif\n-\n-#define is_Z_defined defined ( Z )\n-\n-#if defined(Z)\n-#error Z is not defined\n-#endif\n-\n-/* The behaviour of \"defined\" when it comes from a macro expansion is\n-   now documented.  */\n-#if is_Z_defined\n-#error Macro expanding into defined operator test 1\n-#endif\n-\n-#define Z\n-\n-#if !defined(Z)\n-#error Z is defined\n-#endif\n-\n-#if !is_Z_defined\n-#error Macro expanding into defined operator test 2\n-#endif"}, {"sha": "4e177f4e0142e186dd589a81500028e69a526623", "filename": "gcc/testsuite/gcc.dg/cpp/hash2.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fhash2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fhash2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fhash2.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,15 +0,0 @@\n-/* Test for erroneously thinking comments are token-pastes.\n-   From XFree86 4.0.  */\n-/* { dg-do preprocess } */\n-/* { dg-options \"-traditional\" } */\n-\n-#ifndef foo\n-#define foo\t/**/\n-#endif\n-\n-#ifndef foo\n-#define foo\t/* as nothing */\n-#endif\n-\n-/* { dg-bogus \"(start|end) of macro\" \"paste at end\" { target *-*-* } 7 } */\n-/* { dg-bogus \"(start|end) of macro\" \"comment at end\" { target *-*-* } 11 } */"}, {"sha": "54bd7a73b3b5a549eaf7c748310daaf93d51d46d", "filename": "gcc/testsuite/gcc.dg/cpp/tr-define.c", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-define.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-define.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-define.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,2 +0,0 @@\n-/* { dg-do preprocess } */\n-/* { dg-options \"-traditional -DDEFINE1DEFINE -DDEFINE2DEFIN=\" } */"}, {"sha": "56a52ba1b3b0780070da821842702e834541ada3", "filename": "gcc/testsuite/gcc.dg/cpp/tr-direct.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-direct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-direct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-direct.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,11 +0,0 @@\n-/* Test for some basic aspects of -traditional directive processing.  */\n-\n-/* { dg-do preprocess } */\n-/* { dg-options -traditional } */\n-\n-/* There is a #error directive.  */\n-\n-#error bad\t/* { dg-error \"bad\" } */\n-\n-/* Directives with their #s indented are not recognized.  */\n- #if 0\t/* { dg-bogus \"unterminated\" } */"}, {"sha": "e48e8ccadd86e25024920c442921d10819774aa6", "filename": "gcc/testsuite/gcc.dg/cpp/tr-sign.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-sign.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,18 +0,0 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.  */\n-\n-/* { dg-do preprocess { target i?86-*-* } } */\n-\n-/* { dg-options \"-traditional\" } */\n-\n-/* Tests that traditional numbers are signed, unless otherwise\n-   specified.  This test assumes a 32 bit target.\n-\n-   Neil Booth, 5 Aug 2001.  Inspired by PR 3824.  */\n-\n-#if 0xffffffff >= 0\n-# error\t0xffffffff\t/* { dg-bogus \"0xffffffff\" \"0xffffffff positive\" } */\n-#endif\n-\n-#if 0xffffffffU <= 0\n-# error\t0xffffffffU\t/* { dg-bogus \"0xffffffffU\" \"0xffffffffU negative\" } */\n-#endif"}, {"sha": "342347381d04d4152160f1c1d6a5c7ea2b298ff3", "filename": "gcc/testsuite/gcc.dg/cpp/tr-str.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-str.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-str.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-str.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,17 +0,0 @@\n-/* Test whether traditional stringify works.  */\n-/* { dg-do run } */\n-/* { dg-options \"-traditional-cpp\" } */\n-#define foo(a, b) c=\"a\"; d=\"b\";\n-\n-extern void abort ();\n-\n-int main ()\n-{\n-  char *c, *d;\n-\n-  foo (p, q);\n-  if (c[0] != 'p' || d[0] != 'q')\n-    abort ();\n-\n-  exit (0);\n-}"}, {"sha": "739573c1098cfcabf08dfef7f44e61a16eb8e2fd", "filename": "gcc/testsuite/gcc.dg/cpp/uchar-2.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab23d80ecd18fbe314d192bf54584a0cf185413/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-2.c?ref=5ab23d80ecd18fbe314d192bf54584a0cf185413", "patch": "@@ -1,8 +0,0 @@\n-/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n-\n-/* { dg-do preprocess } */\n-/* { dg-options \"-funsigned-char -fsigned-char -traditional\" } */\n-\n-#if defined (__CHAR_UNSIGNED__)\n-# error __CHAR_UNSIGNED__ defined\n-#endif"}]}