{"sha": "2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ1NWYyNmZjMTQ0OTg0ZmE0MTBhYzg1YWU5ZWZhNmNiYmFjNmZmYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-28T20:29:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-28T20:29:09Z"}, "message": "class.c (finish_struct_1): Don't complain about non-copy assignment ops in union members.\n\n\t* class.c (finish_struct_1): Don't complain about non-copy\n\tassignment ops in union members.\n\t* class.c (build_vtable): Don't pass at_eof to import_export_vtable.\n\t(prepare_fresh_vtable): Likewise.\n\t(finish_struct_1): Don't call import_export_class.\n\t* decl2.c (finish_vtable_vardecl): Do import/export stuff.\n\t(finish_prevtable_vardecl): Lose.\n\t(finish_file): Don't call it.\n\t* pt.c (instantiate_class_template): Likewise.\n\nFrom-SVN: r23410", "tree": {"sha": "1759b343f2eb1c3aad245bc554c71b567c1b84d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1759b343f2eb1c3aad245bc554c71b567c1b84d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/comments", "author": null, "committer": null, "parents": [{"sha": "5916476fda427a0d18acc12adc68031f0a944a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5916476fda427a0d18acc12adc68031f0a944a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5916476fda427a0d18acc12adc68031f0a944a09"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "8fff4d0b92a4ed35a2269c970f79b9a483895c15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "patch": "@@ -1,5 +1,16 @@\n 1998-10-28  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* class.c (finish_struct_1): Don't complain about non-copy\n+\tassignment ops in union members.\n+\n+\t* class.c (build_vtable): Don't pass at_eof to import_export_vtable.\n+\t(prepare_fresh_vtable): Likewise.\n+\t(finish_struct_1): Don't call import_export_class.\n+\t* decl2.c (finish_vtable_vardecl): Do import/export stuff.\n+\t(finish_prevtable_vardecl): Lose.\n+\t(finish_file): Don't call it.\n+\t* pt.c (instantiate_class_template): Likewise.\n+\n \t* init.c (build_delete): Reset TYPE_HAS_DESTRUCTOR here.\n \t* decl.c (finish_function): Not here.\n \t(start_function): Do set DECL_INITIAL."}, {"sha": "1378fa28a9466b57f545ce4c83f5bacfbdfe676d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "patch": "@@ -717,7 +717,7 @@ build_vtable (binfo, type)\n #endif\n \n   /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (decl, type, at_eof);\n+  import_export_vtable (decl, type, 0);\n \n   decl = pushdecl_top_level (decl);\n   SET_IDENTIFIER_GLOBAL_VALUE (name, decl);\n@@ -901,7 +901,7 @@ prepare_fresh_vtable (binfo, for_type)\n #endif\n \n   /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (new_decl, for_type, at_eof);\n+  import_export_vtable (new_decl, for_type, 0);\n \n   if (TREE_VIA_VIRTUAL (binfo))\n     my_friendly_assert (binfo == binfo_member (BINFO_TYPE (binfo),\n@@ -3703,8 +3703,8 @@ finish_struct_1 (t, warn_anon)\n \t\t    fie = \"constructor\";\n \t\t  else if (TYPE_NEEDS_DESTRUCTOR (type))\n \t\t    fie = \"destructor\";\n-\t\t  else if (TYPE_HAS_REAL_ASSIGNMENT (type))\n-\t\t    fie = \"assignment operator\";\n+\t\t  else if (TYPE_HAS_COMPLEX_ASSIGN_REF (type))\n+\t\t    fie = \"copy assignment operator\";\n \t\t  if (fie)\n \t\t    cp_error_at (\"member `%#D' with %s not allowed in union\", x,\n \t\t\t\t fie);\n@@ -4043,11 +4043,6 @@ finish_struct_1 (t, warn_anon)\n   if (max_has_virtual > 0)\n     TYPE_VIRTUAL_P (t) = 1;\n \n-  /* Do this here before we start messing with vtables so that we are ready\n-     for import_export_vtable.  */\n-  if (at_eof)\n-    import_export_class (t);\n-\n   if (flag_rtti && TYPE_VIRTUAL_P (t) && !pending_hard_virtuals)\n     modify_all_vtables (t, NULL_TREE, NULL_TREE);\n "}, {"sha": "9c46c90a1113b4d634419bab3ad283958c74e021", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "patch": "@@ -2686,7 +2686,6 @@ extern tree coerce_delete_type\t\t\tPROTO((tree));\n extern void comdat_linkage\t\t\tPROTO((tree));\n extern void import_export_class\t\t\tPROTO((tree));\n extern void import_export_vtable\t\tPROTO((tree, tree, int));\n-extern int finish_prevtable_vardecl\t\tPROTO((tree, tree));\n extern int walk_vtables\t\t\t\tPROTO((void (*)(tree, tree),\n \t\t\t\t\t\t       int (*)(tree, tree)));\n extern void walk_sigtables\t\t\tPROTO((void (*)(tree, tree),"}, {"sha": "8d6083fb90177f7446934802aa5493d753c11653", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "patch": "@@ -2578,16 +2578,6 @@ import_export_class (ctype)\n     }\n }\n     \n-int\n-finish_prevtable_vardecl (prev, vars)\n-     tree prev ATTRIBUTE_UNUSED, vars;\n-{\n-  tree ctype = DECL_CONTEXT (vars);\n-  import_export_class (ctype);\n-  import_export_vtable (vars, ctype, 1);\n-  return 1;\n-}\n-\n /* We need to describe to the assembler the relationship between\n    a vtable and the vtable of the parent class.  */\n \n@@ -2619,6 +2609,10 @@ static int\n finish_vtable_vardecl (prev, vars)\n      tree prev, vars;\n {\n+  tree ctype = DECL_CONTEXT (vars);\n+  import_export_class (ctype);\n+  import_export_vtable (vars, ctype, 1);\n+\n   if (! DECL_EXTERNAL (vars)\n       && (DECL_INTERFACE_KNOWN (vars)\n \t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (vars))\n@@ -3352,11 +3346,6 @@ finish_file ()\n   pushdecl (vars);\n #endif\n \n-  /* Walk to mark the inline functions we need, then output them so\n-     that we can pick up any other tdecls that those routines need.  */\n-  walk_vtables ((void (*) PROTO ((tree, tree))) 0,\n-\t\tfinish_prevtable_vardecl);\n-\n   for (vars = static_aggregates; vars; vars = TREE_CHAIN (vars))\n     if (! TREE_ASM_WRITTEN (TREE_VALUE (vars)))\n       rest_of_decl_compilation (TREE_VALUE (vars), 0, 1, 1);"}, {"sha": "f232c6018fb369e588e6077205431a2030cb713f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2455f26fc144984fa410ac85ae9efa6cbbac6ffb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2455f26fc144984fa410ac85ae9efa6cbbac6ffb", "patch": "@@ -4736,8 +4736,6 @@ instantiate_class_template (type)\n   CLASSTYPE_GOT_SEMICOLON (type) = 1;\n \n   repo_template_used (type);\n-  if (at_eof && TYPE_BINFO_VTABLE (type) != NULL_TREE)\n-    finish_prevtable_vardecl (NULL, TYPE_BINFO_VTABLE (type));\n \n  end:\n   TYPE_BEING_DEFINED (type) = 0;"}]}