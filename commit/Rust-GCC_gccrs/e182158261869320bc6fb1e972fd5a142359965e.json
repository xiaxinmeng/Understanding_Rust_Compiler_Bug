{"sha": "e182158261869320bc6fb1e972fd5a142359965e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4MjE1ODI2MTg2OTMyMGJjNmZiMWU5NzJmZDVhMTQyMzU5OTY1ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-31T22:31:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-31T22:31:20Z"}, "message": "PR libstdc++/86751 default assignment operators for std::pair\n\nThe solution for PR 77537 causes ambiguities due to the extra copy\nassignment operator taking a __nonesuch_no_braces parameter. By making\nthe base class non-assignable we don't need the extra deleted overload\nin std::pair. The copy assignment operator will be implicitly deleted\n(and the move assignment operator not declared) as needed. Without the\nadditional user-provided operator in std::pair the ambiguity is avoided.\n\n\tPR libstdc++/86751\n\t* include/bits/stl_pair.h (__pair_base): New class with deleted copy\n\tassignment operator.\n\t(pair): Derive from __pair_base.\n\t(pair::operator=): Remove deleted overload.\n\t* python/libstdcxx/v6/printers.py (StdPairPrinter): New pretty printer\n\tso that new base class isn't shown in GDB.\n\t* testsuite/20_util/pair/86751.cc: New test.\n\t* testsuite/20_util/pair/ref_assign.cc: New test.\n\nFrom-SVN: r263185", "tree": {"sha": "d7eb7ca6f086116d8255266c60687c914c552802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7eb7ca6f086116d8255266c60687c914c552802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e182158261869320bc6fb1e972fd5a142359965e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e182158261869320bc6fb1e972fd5a142359965e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e182158261869320bc6fb1e972fd5a142359965e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e182158261869320bc6fb1e972fd5a142359965e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff273400466f44c64a19b917151641706318c268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff273400466f44c64a19b917151641706318c268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff273400466f44c64a19b917151641706318c268"}], "stats": {"total": 172, "additions": 164, "deletions": 8}, "files": [{"sha": "b8532c280db02511d379ab7d3ebe8998bcd6c743", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e182158261869320bc6fb1e972fd5a142359965e", "patch": "@@ -1,5 +1,15 @@\n 2018-07-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/86751\n+\t* include/bits/stl_pair.h (__pair_base): New class with deleted copy\n+\tassignment operator.\n+\t(pair): Derive from __pair_base.\n+\t(pair::operator=): Remove deleted overload.\n+\t* python/libstdcxx/v6/printers.py (StdPairPrinter): New pretty printer\n+\tso that new base class isn't shown in GDB.\n+\t* testsuite/20_util/pair/86751.cc: New test.\n+\t* testsuite/20_util/pair/ref_assign.cc: New test.\n+\n \t* include/bits/c++config (_GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP)\n \t(_GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE): Move definitions here.\n \t(_GLIBCXX_HAVE_BUILTIN_LAUNDER): Likewise. Use !__is_identifier"}, {"sha": "ea8bd981559bdcfd8b130138a874a492541b26b8", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=e182158261869320bc6fb1e972fd5a142359965e", "patch": "@@ -185,8 +185,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __nonesuch_no_braces : std::__nonesuch {\n     explicit __nonesuch_no_braces(const __nonesuch&) = delete;\n   };\n+#endif // C++11\n \n-#endif\n+  class __pair_base\n+  {\n+#if __cplusplus >= 201103L\n+    template<typename _T1, typename _T2> friend struct pair;\n+    __pair_base() = default;\n+    ~__pair_base() = default;\n+    __pair_base(const __pair_base&) = default;\n+    __pair_base& operator=(const __pair_base&) = delete;\n+#endif // C++11\n+  };\n \n  /**\n    *  @brief Struct holding two objects of arbitrary type.\n@@ -196,6 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _T1, typename _T2>\n     struct pair\n+    : private __pair_base\n     {\n       typedef _T1 first_type;    /// @c first_type is the first bound type\n       typedef _T2 second_type;   /// @c second_type is the second bound type\n@@ -374,19 +385,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      pair&\n-      operator=(typename conditional<\n-\t\t__not_<__and_<is_copy_assignable<_T1>,\n-\t\t              is_copy_assignable<_T2>>>::value,\n-\t\tconst pair&, const __nonesuch_no_braces&>::type __p) = delete;\n-\n       pair&\n       operator=(typename conditional<\n \t\t__and_<is_move_assignable<_T1>,\n \t\t       is_move_assignable<_T2>>::value,\n \t\tpair&&, __nonesuch_no_braces&&>::type __p)\n       noexcept(__and_<is_nothrow_move_assignable<_T1>,\n-\t              is_nothrow_move_assignable<_T2>>::value)\n+\t\t      is_nothrow_move_assignable<_T2>>::value)\n       {\n \tfirst = std::forward<first_type>(__p.first);\n \tsecond = std::forward<second_type>(__p.second);"}, {"sha": "43d459ec8ecbd300cd970518bc2d6e5ed78f2a43", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=e182158261869320bc6fb1e972fd5a142359965e", "patch": "@@ -1229,6 +1229,39 @@ def children(self):\n         return self._iterator(self.val['_M_cmpts'])\n \n \n+class StdPairPrinter:\n+    \"Print a std::pair object, with 'first' and 'second' as children\"\n+\n+    def __init__(self, typename, val):\n+        self.val = val\n+\n+    class _iter(Iterator):\n+        \"An iterator for std::pair types. Returns 'first' then 'second'.\"\n+\n+        def __init__(self, val):\n+            self.val = val\n+            self.which = 'first'\n+\n+        def __iter__(self):\n+            return self\n+\n+        def __next__(self):\n+            if self.which is None:\n+                raise StopIteration\n+            which = self.which\n+            if which == 'first':\n+                self.which = 'second'\n+            else:\n+                self.which = None\n+            return (which, self.val[which])\n+\n+    def children(self):\n+        return self._iter(self.val)\n+\n+    def to_string(self):\n+        return None\n+\n+\n # A \"regular expression\" printer which conforms to the\n # \"SubPrettyPrinter\" protocol from gdb.printing.\n class RxPrinter(object):\n@@ -1629,6 +1662,7 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_container('std::', 'map', StdMapPrinter)\n     libstdcxx_printer.add_container('std::', 'multimap', StdMapPrinter)\n     libstdcxx_printer.add_container('std::', 'multiset', StdSetPrinter)\n+    libstdcxx_printer.add_version('std::', 'pair', StdPairPrinter)\n     libstdcxx_printer.add_version('std::', 'priority_queue',\n                                   StdStackOrQueuePrinter)\n     libstdcxx_printer.add_version('std::', 'queue', StdStackOrQueuePrinter)"}, {"sha": "76a76c0d656020d3fcf8426f438c41c9315e0b5d", "filename": "libstdc++-v3/testsuite/20_util/pair/86751.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F86751.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F86751.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F86751.cc?ref=e182158261869320bc6fb1e972fd5a142359965e", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <utility>\n+\n+struct X {\n+  template<typename T> operator T() const;\n+};\n+\n+\n+void\n+test01()\n+{\n+  std::pair<int, int> p;\n+  X x;\n+  p = x;  // PR libstdc++/86751\n+}"}, {"sha": "ea37fcfcf529f76d133e0222c166ce264c5fb1f7", "filename": "libstdc++-v3/testsuite/20_util/pair/ref_assign.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fref_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e182158261869320bc6fb1e972fd5a142359965e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fref_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fref_assign.cc?ref=e182158261869320bc6fb1e972fd5a142359965e", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  typedef std::pair<int&, int> pair_type;\n+  int i = 1;\n+  int j = 2;\n+  pair_type p(i, 3);\n+  const pair_type q(j, 4);\n+  p = q;\n+  VERIFY( p.first == q.first );\n+  VERIFY( p.second == q.second );\n+  VERIFY( i == j );\n+}\n+\n+void\n+test02()\n+{\n+  typedef std::pair<int, int&> pair_type;\n+  int i = 1;\n+  int j = 2;\n+  pair_type p(3, i);\n+  const pair_type q(4, j);\n+  p = q;\n+  VERIFY( p.first == q.first );\n+  VERIFY( p.second == q.second );\n+  VERIFY( i == j );\n+}\n+\n+void\n+test03()\n+{\n+  typedef std::pair<int&, int&> pair_type;\n+  int i = 1;\n+  int j = 2;\n+  int k = 3;\n+  int l = 4;\n+  pair_type p(i, j);\n+  const pair_type q(k, l);\n+  p = q;\n+  VERIFY( p.first == q.first );\n+  VERIFY( p.second == q.second );\n+  VERIFY( i == k );\n+  VERIFY( j == l );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}