{"sha": "0673fc691175bfdb72d70c2fbbfcad238a3a9942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3M2ZjNjkxMTc1YmZkYjcyZDcwYzJmYmJmY2FkMjM4YTNhOTk0Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-09T08:36:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-09T08:36:11Z"}, "message": "fold-const: Fix native_encode_initializer bitfield handling [PR98199]\n\nWith the bit_cast changes, I have added support for bitfields which don't\nhave scalar representatives.  For bit_cast it works fine, as when mask\nis non-NULL, off is asserted to be 0.  But when native_encode_initializer\nis called e.g. from sccvn with off > 0 (i.e. we are interested in encoding\njust a few bytes out of it somewhere from the middle or at the end), the\nfollowing computations are incorrect.\npos is a byte position from the start of the constructor, repr_size is the\nsize in bytes of the bit-field representative and len is the length\nof the buffer.  If the buffer is offsetted by positive off, those numbers\nare uncomparable though, we need to add off to len to make both\ncount bytes from the start of the constructor, and o is a utility temporary\nset to off != -1 ? off : 0 (because off -1 also means start at offset 0\nand just force special behavior).\n\n2020-12-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98199\n\t* fold-const.c (native_encode_initializer): Fix handling bit-fields\n\twhen off > 0.\n\n\t* gcc.c-torture/compile/pr98199.c: New test.", "tree": {"sha": "037d0bb87c2ab00fa0f23bed6c002213c534cbd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037d0bb87c2ab00fa0f23bed6c002213c534cbd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0673fc691175bfdb72d70c2fbbfcad238a3a9942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0673fc691175bfdb72d70c2fbbfcad238a3a9942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0673fc691175bfdb72d70c2fbbfcad238a3a9942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0673fc691175bfdb72d70c2fbbfcad238a3a9942/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "b78f3ab145f776770ebf30f203bad7aa3299a1d9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0673fc691175bfdb72d70c2fbbfcad238a3a9942/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0673fc691175bfdb72d70c2fbbfcad238a3a9942/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0673fc691175bfdb72d70c2fbbfcad238a3a9942", "patch": "@@ -8320,11 +8320,11 @@ native_encode_initializer (tree init, unsigned char *ptr, int len,\n \t\t\treturn 0;\n \t\t      HOST_WIDE_INT repr_size = int_size_in_bytes (repr_type);\n \t\t      gcc_assert (repr_size > 0 && repr_size <= len);\n-\t\t      if (pos + repr_size <= len)\n+\t\t      if (pos + repr_size <= o + len)\n \t\t\trpos = pos;\n \t\t      else\n \t\t\t{\n-\t\t\t  rpos = len - repr_size;\n+\t\t\t  rpos = o + len - repr_size;\n \t\t\t  gcc_assert (rpos <= pos);\n \t\t\t}\n \t\t    }"}, {"sha": "b5c8d204f0e016743610acba370e1fc2bdafddd5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr98199.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0673fc691175bfdb72d70c2fbbfcad238a3a9942/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98199.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0673fc691175bfdb72d70c2fbbfcad238a3a9942/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98199.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98199.c?ref=0673fc691175bfdb72d70c2fbbfcad238a3a9942", "patch": "@@ -0,0 +1,7 @@\n+/* PR tree-optimization/98199 */\n+\n+struct A { long a; short d; int c, f, e, g; };\n+struct B { int a, i; short j; struct A k; signed : 20; int e, g; } __attribute__((packed));\n+struct C { short a; unsigned i, k; struct B d; const int : 30; signed e : 20; signed : 18; };\n+const struct C l = { 1, 6, 0, {}, 0 };\n+int foo (void) { return l.e || 0; }"}]}