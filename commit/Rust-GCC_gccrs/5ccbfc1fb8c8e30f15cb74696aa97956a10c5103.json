{"sha": "5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjYmZjMWZiOGM4ZTMwZjE1Y2I3NDY5NmFhOTc5NTZhMTBjNTEwMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-22T12:14:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-22T12:14:27Z"}, "message": "re PR middle-end/45017 (miscompile with bitfield and optimization)\n\n2010-07-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/45017\n\t* tree-ssa-sccvn.c (vn_reference_eq): Make sure we honor\n\tTYPE_PRECISION of integral types in addition to size.\n\n\t* gcc.c-torture/execute/pr45017.c: New testcase.\n\nFrom-SVN: r162411", "tree": {"sha": "7ce6db24c7d1e48bf57676eca6afc1c3d54bcd6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ce6db24c7d1e48bf57676eca6afc1c3d54bcd6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1d818f7eabdac4b3a814866fe05e4f2a82860ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d818f7eabdac4b3a814866fe05e4f2a82860ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d818f7eabdac4b3a814866fe05e4f2a82860ed"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "b9725dce3073783e23d4663a5ca06e350e22e3bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "patch": "@@ -1,3 +1,9 @@\n+2010-07-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45017\n+\t* tree-ssa-sccvn.c (vn_reference_eq): Make sure we honor\n+\tTYPE_PRECISION of integral types in addition to size.\n+\n 2010-07-22  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/rs6000/sysv4.h (CHOOSE_DYNAMIC_LINKER): Default to GLIBC"}, {"sha": "35ae9948cfb1a7efe75e67e9d1f75d91a3bec3e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "patch": "@@ -1,3 +1,8 @@\n+2010-07-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45017\n+\t* gcc.c-torture/execute/pr45017.c: New testcase.\n+\n 2010-07-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45019"}, {"sha": "37ff286cc72b2538256acfa56aa8c630d0d682da", "filename": "gcc/testsuite/gcc.c-torture/execute/pr45017.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45017.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45017.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr45017.c?ref=5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "patch": "@@ -0,0 +1,22 @@\n+int tester(char *bytes)\n+{\n+  union {\n+      struct {\n+\t  unsigned int r1:4;\n+\t  unsigned int r2:4;\n+      } fmt;\n+      char value[1];\n+  } ovl;\n+\n+  ovl.value[0] = bytes[0];\n+  return ovl.fmt.r1;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  char buff = 0x2f;\n+  if (tester(&buff) != 0x0f)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "c99c8a8f3719bc945e3ea8bc62f53c66207f0dae", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccbfc1fb8c8e30f15cb74696aa97956a10c5103/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=5ccbfc1fb8c8e30f15cb74696aa97956a10c5103", "patch": "@@ -498,6 +498,21 @@ vn_reference_eq (const void *p1, const void *p2)\n   if (!expressions_equal_p (TYPE_SIZE (vr1->type), TYPE_SIZE (vr2->type)))\n     return false;\n \n+  if (INTEGRAL_TYPE_P (vr1->type)\n+      && INTEGRAL_TYPE_P (vr2->type))\n+    {\n+      if (TYPE_PRECISION (vr1->type) != TYPE_PRECISION (vr2->type))\n+\treturn false;\n+    }\n+  else if (INTEGRAL_TYPE_P (vr1->type)\n+\t   && (TYPE_PRECISION (vr1->type)\n+\t       != TREE_INT_CST_LOW (TYPE_SIZE (vr1->type))))\n+    return false;\n+  else if (INTEGRAL_TYPE_P (vr2->type)\n+\t   && (TYPE_PRECISION (vr2->type)\n+\t       != TREE_INT_CST_LOW (TYPE_SIZE (vr2->type))))\n+    return false;\n+\n   i = 0;\n   j = 0;\n   do"}]}