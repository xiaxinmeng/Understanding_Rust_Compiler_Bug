{"sha": "0453694246f95eac300dca7c931d0f25368da2bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1MzY5NDI0NmY5NWVhYzMwMGRjYTdjOTMxZDBmMjUzNjhkYTJiYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-27T19:31:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-27T19:31:51Z"}, "message": "re PR c++/49181 ([C++0x] Error reporting routines re-entered)\n\n\tPR c++/49181\n\t* pt.c (get_mostly_instantiated_function_type): Use push_access_scope.\n\nFrom-SVN: r174352", "tree": {"sha": "fd06313568c97d53b3b50dafa7de168715e28b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd06313568c97d53b3b50dafa7de168715e28b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0453694246f95eac300dca7c931d0f25368da2bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0453694246f95eac300dca7c931d0f25368da2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0453694246f95eac300dca7c931d0f25368da2bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0453694246f95eac300dca7c931d0f25368da2bb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cc4f2f437f583f78c3bae594bb019b7a767eb13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc4f2f437f583f78c3bae594bb019b7a767eb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc4f2f437f583f78c3bae594bb019b7a767eb13"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "332b98cbf93095ee2121603a69f0321012776b46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0453694246f95eac300dca7c931d0f25368da2bb", "patch": "@@ -1,3 +1,8 @@\n+2011-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49181\n+\t* pt.c (get_mostly_instantiated_function_type): Use push_access_scope.\n+\n 2011-05-27  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* cp-tree.h (building_stmt_tree): Delete."}, {"sha": "71fe0a0f1e1b3a8029378eeb07cbd50256a47245", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0453694246f95eac300dca7c931d0f25368da2bb", "patch": "@@ -18080,9 +18080,9 @@ get_mostly_instantiated_function_type (tree decl)\n \t\t\t   TMPL_ARGS_DEPTH (targs),\n \t\t\t   make_tree_vec (DECL_NTPARMS (tmpl)));\n \n-      /* Disable access control as this function is used only during\n-\t name-mangling.  */\n-      push_deferring_access_checks (dk_no_check);\n+      /* Make sure that we can see identifiers, and compute access\n+\t correctly.  */\n+      push_access_scope (decl);\n \n       ++processing_template_decl;\n       /* Now, do the (partial) substitution to figure out the\n@@ -18097,7 +18097,7 @@ get_mostly_instantiated_function_type (tree decl)\n       TREE_VEC_LENGTH (partial_args)--;\n       tparms = tsubst_template_parms (tparms, partial_args, tf_error);\n \n-      pop_deferring_access_checks ();\n+      pop_access_scope (decl);\n     }\n \n   return fn_type;"}, {"sha": "474b8579456b0fd6c0448aff66bf057b3f855c3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0453694246f95eac300dca7c931d0f25368da2bb", "patch": "@@ -1,3 +1,7 @@\n+2011-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/error5.C: New.\n+\n 2011-05-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/49165"}, {"sha": "193192642248f245417766840e3f28b9b99b9d22", "filename": "gcc/testsuite/g++.dg/cpp0x/error5.C", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0453694246f95eac300dca7c931d0f25368da2bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C?ref=0453694246f95eac300dca7c931d0f25368da2bb", "patch": "@@ -0,0 +1,107 @@\n+// PR c++/49181\n+// { dg-options -std=c++0x }\n+\n+namespace std\n+{\n+  typedef __SIZE_TYPE__ size_t;\n+\n+  template<typename _Tp, _Tp>\n+    struct integral_constant;\n+\n+  template<typename _Tp, _Tp __v>\n+    struct integral_constant\n+    {\n+      static constexpr _Tp value = __v;\n+      typedef _Tp value_type;\n+      typedef integral_constant<_Tp, __v> type;\n+      constexpr operator value_type() { return value; }\n+    };\n+\n+  typedef integral_constant<bool, true> true_type;\n+\n+  typedef integral_constant<bool, false> false_type;\n+\n+  template<typename _Tp, _Tp __v>\n+    constexpr _Tp integral_constant<_Tp, __v>::value;\n+\n+  template<bool, typename _Tp = void>\n+    struct enable_if\n+    { };\n+\n+  template<typename _Tp>\n+    struct enable_if<true, _Tp>\n+    { typedef _Tp type; };\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    declval();\n+\n+struct bad_alloc { };\n+}\n+\n+void* operator new(std::size_t) throw (std::bad_alloc);\n+\n+namespace std\n+{\n+\n+  template<typename _Tp>\n+    class allocator\n+    {\n+    public:\n+      typedef _Tp* pointer;\n+      typedef _Tp value_type;\n+\n+      pointer\n+      allocate(size_t, const void* = 0);\n+    };\n+\n+  template<typename _Alloc>\n+    struct allocator_traits\n+    {\n+      typedef typename _Alloc::value_type value_type;\n+\n+      template<typename _Tp> static typename _Tp::pointer\n+_S_pointer_helper(_Tp*);\n+      static value_type* _S_pointer_helper(...);\n+      typedef decltype(_S_pointer_helper((_Alloc*)0)) __pointer;\n+\n+      typedef __pointer pointer;\n+\n+      typedef const void* const_void_pointer;\n+\n+      private:\n+      template<typename _Alloc2>\n+    struct __allocate_helper\n+    {\n+      template<typename _Alloc3,\n+        typename = decltype(std::declval<_Alloc3*>()->allocate(\n+          std::declval<size_t>(),\n+          std::declval<const_void_pointer>()))>\n+          static true_type __test(int);\n+\n+      template<typename>\n+        static false_type __test(...);\n+\n+      typedef decltype(__test<_Alloc>(0)) type;\n+      static const bool value = type::value;\n+    };\n+\n+      template<typename _Alloc2>\n+    static typename\n+    enable_if<__allocate_helper<_Alloc2>::value, pointer>::type\n+    _S_allocate(_Alloc2& __a, size_t __n, const_void_pointer __hint)\n+    { return __a.allocate(__n, __hint); }\n+\n+      public:\n+      static pointer\n+    allocate(_Alloc& __a, size_t __n, const_void_pointer __hint)\n+    { return _S_allocate(__a, __n, __hint); }\n+    };\n+\n+}\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct allocator_traits<allocator<test_type>>;\n+}"}]}