{"sha": "7c428aa29d75ef163c334cf3974f87b3630d8b8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M0MjhhYTI5ZDc1ZWYxNjNjMzM0Y2YzOTc0Zjg3YjM2MzBkOGI4Yg==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2016-07-28T11:21:53Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2016-07-28T11:21:53Z"}, "message": "[PATCH] Revert Revert r238497 because of PR 71961.\n\nThis patch reverts the change for PR 71902 since it causes 178.gagel\nmiscompile in spec2000 as reported in PR 71961 which was observed in\nx86_64, aarch64, powerpc64.\n\ngcc/fortran/ChangeLog:\n\n2016-07-28  Renlin Li  <renlin.li@arm.com>\n\n\tRevert\n\t2016-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/71902\n\t* dependency.c (gfc_check_dependency): Use dep_ref.  Handle case\n\tif identical is true and two array element references differ.\n\t(gfc_dep_resovler):  Move most of the code to dep_ref.\n\t(dep_ref):  New function.\n\t* frontend-passes.c (realloc_string_callback):  Name temporary\n\tvariable \"realloc_string\".\n\ngcc/testsuite/ChangeLog:\n\n2016-07-28  Renlin Li  <renlin.li@arm.com>\n\n\tRevert\n\t2016-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/71902\n\t* gfortran.dg/dependency_47.f90:  New test.\n\nFrom-SVN: r238815", "tree": {"sha": "36cf158bc4248a1de2f2b7944f5c6180fe9c0f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36cf158bc4248a1de2f2b7944f5c6180fe9c0f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c428aa29d75ef163c334cf3974f87b3630d8b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c428aa29d75ef163c334cf3974f87b3630d8b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c428aa29d75ef163c334cf3974f87b3630d8b8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c428aa29d75ef163c334cf3974f87b3630d8b8b/comments", "author": null, "committer": null, "parents": [{"sha": "b505225ba4de6de34a791571354a0df5d1bd2ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b505225ba4de6de34a791571354a0df5d1bd2ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b505225ba4de6de34a791571354a0df5d1bd2ed7"}], "stats": {"total": 117, "additions": 36, "deletions": 81}, "files": [{"sha": "5baf3982c5e296fa874abf7eab8986a9f5a39877", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7c428aa29d75ef163c334cf3974f87b3630d8b8b", "patch": "@@ -1,3 +1,16 @@\n+2016-07-28  Renlin Li  <renlin.li@arm.com>\n+\n+\tRevert\n+\t2016-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/71902\n+\t* dependency.c (gfc_check_dependency): Use dep_ref.  Handle case\n+\tif identical is true and two array element references differ.\n+\t(gfc_dep_resovler):  Move most of the code to dep_ref.\n+\t(dep_ref):  New function.\n+\t* frontend-passes.c (realloc_string_callback):  Name temporary\n+\tvariable \"realloc_string\".\n+\n 2016-07-26  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/71862"}, {"sha": "f117de03640e95b77ebe6b11035b9795fee7b628", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 14, "deletions": 65, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=7c428aa29d75ef163c334cf3974f87b3630d8b8b", "patch": "@@ -54,8 +54,6 @@ enum gfc_dependency\n static gfc_dependency check_section_vs_section (gfc_array_ref *,\n \t\t\t\t\t\tgfc_array_ref *, int);\n \n-static gfc_dependency dep_ref (gfc_ref *, gfc_ref *, gfc_reverse *);\n-\n /* Returns 1 if the expr is an integer constant value 1, 0 if it is not or\n    def if the value could not be determined.  */\n \n@@ -1318,33 +1316,13 @@ gfc_check_dependency (gfc_expr *expr1, gfc_expr *expr2, bool identical)\n \t  return 0;\n \t}\n \n+      if (identical)\n+\treturn 1;\n+\n       /* Identical and disjoint ranges return 0,\n \t overlapping ranges return 1.  */\n       if (expr1->ref && expr2->ref)\n-\t{\n-\t  gfc_dependency dep;\n-\t  dep = dep_ref (expr1->ref, expr2->ref, NULL);\n-\t  switch (dep)\n-\t    {\n-\t    case GFC_DEP_EQUAL:\n-\t      return identical;\n-\n-\t    case GFC_DEP_FORWARD:\n-\t      return 0;\n-\n-\t    case GFC_DEP_BACKWARD:\n-\t      return 1;\n-\n-\t    case GFC_DEP_OVERLAP:\n-\t      return 1;\n-\n-\t    case GFC_DEP_NODEP:\n-\t      return 0;\n-\n-\t    default:\n-\t      gcc_unreachable();\n-\t    }\n-\t}\n+\treturn gfc_dep_resolver (expr1->ref, expr2->ref, NULL);\n \n       return 1;\n \n@@ -2074,38 +2052,10 @@ ref_same_as_full_array (gfc_ref *full_ref, gfc_ref *ref)\n    \t2 : array references are overlapping but reversal of one or\n \t    more dimensions will clear the dependency.\n    \t1 : array references are overlapping.\n-   \t0 : array references are identical or can be handled in a forward loop.  */\n+   \t0 : array references are identical or not overlapping.  */\n \n int\n gfc_dep_resolver (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n-{\n-  enum gfc_dependency dep;\n-  dep = dep_ref (lref, rref, reverse);\n-  switch (dep)\n-    {\n-    case GFC_DEP_EQUAL:\n-      return 0;\n-\n-    case GFC_DEP_FORWARD:\n-      return 0;\n-\n-    case GFC_DEP_BACKWARD:\n-      return 2;\n-\n-    case GFC_DEP_OVERLAP:\n-      return 1;\n-\n-    case GFC_DEP_NODEP:\n-      return 0;\n-\n-    default:\n-      gcc_unreachable();\n-    }\n-}\n-\n-\n-static gfc_dependency\n-dep_ref (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n {\n   int n;\n   int m;\n@@ -2129,22 +2079,21 @@ dep_ref (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n \t  /* The two ranges can't overlap if they are from different\n \t     components.  */\n \t  if (lref->u.c.component != rref->u.c.component)\n-\t    return GFC_DEP_NODEP;\n+\t    return 0;\n \t  break;\n \n \tcase REF_SUBSTRING:\n \t  /* Substring overlaps are handled by the string assignment code\n \t     if there is not an underlying dependency.  */\n-\n-\t  return fin_dep == GFC_DEP_ERROR ? GFC_DEP_NODEP : fin_dep;\n+\t  return (fin_dep == GFC_DEP_OVERLAP) ? 1 : 0;\n \n \tcase REF_ARRAY:\n \n \t  if (ref_same_as_full_array (lref, rref))\n-\t    return GFC_DEP_EQUAL;\n+\t    return 0;\n \n \t  if (ref_same_as_full_array (rref, lref))\n-\t    return GFC_DEP_EQUAL;\n+\t    return 0;\n \n \t  if (lref->u.ar.dimen != rref->u.ar.dimen)\n \t    {\n@@ -2155,7 +2104,7 @@ dep_ref (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n \t\tfin_dep = gfc_full_array_ref_p (lref, NULL) ? GFC_DEP_EQUAL\n \t\t\t\t\t\t\t    : GFC_DEP_OVERLAP;\n \t      else\n-\t\treturn GFC_DEP_OVERLAP;\n+\t\treturn 1;\n \t      break;\n \t    }\n \n@@ -2199,7 +2148,7 @@ dep_ref (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n \n \t      /* If any dimension doesn't overlap, we have no dependency.  */\n \t      if (this_dep == GFC_DEP_NODEP)\n-\t\treturn GFC_DEP_NODEP;\n+\t\treturn 0;\n \n \t      /* Now deal with the loop reversal logic:  This only works on\n \t\t ranges and is activated by setting\n@@ -2266,7 +2215,7 @@ dep_ref (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n \t  /* Exactly matching and forward overlapping ranges don't cause a\n \t     dependency.  */\n \t  if (fin_dep < GFC_DEP_BACKWARD)\n-\t    return fin_dep == GFC_DEP_ERROR ? GFC_DEP_NODEP : fin_dep;\n+\t    return 0;\n \n \t  /* Keep checking.  We only have a dependency if\n \t     subsequent references also overlap.  */\n@@ -2284,7 +2233,7 @@ dep_ref (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n \n   /* Assume the worst if we nest to different depths.  */\n   if (lref || rref)\n-    return GFC_DEP_OVERLAP;\n+    return 1;\n \n-  return fin_dep;\n+  return fin_dep == GFC_DEP_OVERLAP;\n }"}, {"sha": "a543ab2d4c59615d9b21bbb64f3f90785bee7367", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=7c428aa29d75ef163c334cf3974f87b3630d8b8b", "patch": "@@ -185,7 +185,7 @@ realloc_string_callback (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n   current_code = c;\n   inserted_block = NULL;\n   changed_statement = NULL;\n-  n = create_var (expr2, \"realloc_string\");\n+  n = create_var (expr2, \"trim\");\n   co->expr2 = n;\n   return 0;\n }"}, {"sha": "343293c592e85016491e5a4ee00a96522ad23311", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c428aa29d75ef163c334cf3974f87b3630d8b8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c428aa29d75ef163c334cf3974f87b3630d8b8b", "patch": "@@ -1,3 +1,11 @@\n+2016-07-28  Renlin Li  <renlin.li@arm.com>\n+\n+\tRevert\n+\t2016-07-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/71902\n+\t* gfortran.dg/dependency_47.f90:  New test.\n+\n 2016-07-28  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/68025"}, {"sha": "eebc910766d7cc7e80f53183697dc037dbfe664b", "filename": "gcc/testsuite/gfortran.dg/dependency_47.f90", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505225ba4de6de34a791571354a0df5d1bd2ed7/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_47.f90?ref=b505225ba4de6de34a791571354a0df5d1bd2ed7", "patch": "@@ -1,15 +0,0 @@\n-! { dg-do compile }\n-! Make sure there is only one instance of a temporary variable here.\n-! { dg-options \"-fdump-tree-original\" }\n-\n-SUBROUTINE prtdata(ilen)\n-  INTEGER :: ilen\n-  character(len=ilen), allocatable :: cline(:)\n-  allocate(cline(2))\n-  cline(1) = 'a'\n-  cline(1)(2:3) = cline(1)(1:2)\n-  cline(2) = cline(1)\n-  print *,c\n-END SUBROUTINE prtdata\n-! { dg-final { scan-tree-dump-not \"__var_2\" \"original\" } }\n-! { dg-final { scan-tree-dump-times \"__var_1\" 3 \"original\" } }"}]}