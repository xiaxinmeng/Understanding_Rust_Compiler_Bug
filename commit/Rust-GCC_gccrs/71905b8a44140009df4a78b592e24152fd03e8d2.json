{"sha": "71905b8a44140009df4a78b592e24152fd03e8d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5MDViOGE0NDE0MDAwOWRmNGE3OGI1OTJlMjQxNTJmZDAzZThkMg==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2019-04-13T00:13:46Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgertq@gcc.gnu.org", "date": "2019-04-13T00:13:46Z"}, "message": "Uglify identifiers missed in previous commit(s)\n\n       * include/pstl/algorithm_impl.h: Uglify identfiers.\n       * include/pstl/numeric_impl.h:  Uglify identfiers.\n       * include/pstl/parallel_backend_tbb.h: Uglify identfiers.\n\nFrom-SVN: r270332", "tree": {"sha": "5c0cc58618fe372c5049506ac93f3b3fee2be0cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c0cc58618fe372c5049506ac93f3b3fee2be0cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71905b8a44140009df4a78b592e24152fd03e8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71905b8a44140009df4a78b592e24152fd03e8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71905b8a44140009df4a78b592e24152fd03e8d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71905b8a44140009df4a78b592e24152fd03e8d2/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "377c9e461130f54ebedb57441be0a0bc371226ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377c9e461130f54ebedb57441be0a0bc371226ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377c9e461130f54ebedb57441be0a0bc371226ef"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "55d2538b76e869eb841b9baaf65fb88cf273e5bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=71905b8a44140009df4a78b592e24152fd03e8d2", "patch": "@@ -1,3 +1,9 @@\n+2019-04-12  Thomas Rodgers  <trodgers@redhat.com>\n+\t\n+\t* include/pstl/algorithm_impl.h: Uglify identfiers.\n+\t* include/pstl/numeric_impl.h:  Uglify identfiers.\n+\t* include/pstl/parallel_backend_tbb.h: Uglify identfiers.\n+\n 2019-04-11  Thomas Rodgers  <trodgers@redhat.com>\n \n \t* include/bits/c++config:"}, {"sha": "d39e99add05ee8ce0422e0c04944fc378ae978c6", "filename": "libstdc++-v3/include/pstl/algorithm_impl.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h?ref=71905b8a44140009df4a78b592e24152fd03e8d2", "patch": "@@ -283,20 +283,20 @@ __pattern_walk2(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardI\n template <class _ExecutionPolicy, class _ForwardIterator1, class _Size, class _ForwardIterator2, class _Function,\n           class _IsVector>\n _ForwardIterator2\n-__pattern_walk2_n(_ExecutionPolicy&&, _ForwardIterator1 __first1, _Size n, _ForwardIterator2 __first2, _Function f,\n+__pattern_walk2_n(_ExecutionPolicy&&, _ForwardIterator1 __first1, _Size __n, _ForwardIterator2 __first2, _Function __f,\n                   _IsVector is_vector, /*parallel=*/std::false_type) noexcept\n {\n-    return __internal::__brick_walk2_n(__first1, n, __first2, f, is_vector);\n+    return __internal::__brick_walk2_n(__first1, __n, __first2, __f, is_vector);\n }\n \n template <class _ExecutionPolicy, class _RandomAccessIterator1, class _Size, class _RandomAccessIterator2,\n           class _Function, class _IsVector>\n _RandomAccessIterator2\n-__pattern_walk2_n(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Size n, _RandomAccessIterator2 __first2,\n-                  _Function f, _IsVector is_vector, /*parallel=*/std::true_type)\n+__pattern_walk2_n(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Size __n, _RandomAccessIterator2 __first2,\n+                  _Function __f, _IsVector __is_vector, /*parallel=*/std::true_type)\n {\n-    return __internal::__pattern_walk2(std::forward<_ExecutionPolicy>(__exec), __first1, __first1 + n, __first2, f, is_vector,\n-                           std::true_type());\n+    return __internal::__pattern_walk2(std::forward<_ExecutionPolicy>(__exec), __first1, __first1 + __n, __first2, __f,\n+                                       __is_vector, std::true_type());\n }\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Brick>\n@@ -1033,7 +1033,7 @@ __pattern_copy_if(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _Ran\n         return __internal::__except_handler([&__exec, __n, __first, __result, __is_vector, __pred, &__mask_buf]() {\n             bool* __mask = __mask_buf.get();\n             _DifferenceType __m{};\n-            __par_backend::parallel_strict_scan(\n+            __par_backend::__parallel_strict_scan(\n                 std::forward<_ExecutionPolicy>(__exec), __n, _DifferenceType(0),\n                 [=](_DifferenceType __i, _DifferenceType __len) { // Reduce\n                     return __internal::__brick_calc_mask_1<_DifferenceType>(__first + __i, __first + (__i + __len), __mask + __i,\n@@ -1182,7 +1182,7 @@ __remove_elements(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardI\n         __mask += __min;\n         _DifferenceType __m{};\n         // 2. Elements that doesn't satisfy pred are moved to result\n-        __par_backend::parallel_strict_scan(\n+        __par_backend::__parallel_strict_scan(\n             std::forward<_ExecutionPolicy>(__exec), __n, _DifferenceType(0),\n             [__mask, __is_vector](_DifferenceType __i, _DifferenceType __len) {\n                 return __internal::__brick_count(__mask + __i, __mask + __i + __len, [](bool __val) { return __val; }, __is_vector);\n@@ -1309,7 +1309,7 @@ __pattern_unique_copy(_ExecutionPolicy&& __exec, _RandomAccessIterator __first,\n             return __internal::__except_handler([&__exec, __n, __first, __result, __pred, __is_vector, &__mask_buf]() {\n                 bool* __mask = __mask_buf.get();\n                 _DifferenceType __m{};\n-                __par_backend::parallel_strict_scan(\n+                __par_backend::__parallel_strict_scan(\n                     std::forward<_ExecutionPolicy>(__exec), __n, _DifferenceType(0),\n                     [=](_DifferenceType __i, _DifferenceType __len) -> _DifferenceType { // Reduce\n                         _DifferenceType __extra = 0;\n@@ -2033,7 +2033,7 @@ __pattern_partition_copy(_ExecutionPolicy&& __exec, _RandomAccessIterator __firs\n         return __internal::__except_handler([&__exec, __n, __first, __out_true, __out_false, __is_vector, __pred, &__mask_buf]() {\n             bool* __mask = __mask_buf.get();\n             _ReturnType __m{};\n-            __par_backend::parallel_strict_scan(\n+            __par_backend::__parallel_strict_scan(\n                 std::forward<_ExecutionPolicy>(__exec), __n, std::make_pair(_DifferenceType(0), _DifferenceType(0)),\n                 [=](_DifferenceType __i, _DifferenceType __len) { // Reduce\n                     return __internal::__brick_calc_mask_1<_DifferenceType>(__first + __i, __first + (__i + __len), __mask + __i,\n@@ -2801,7 +2801,7 @@ __parallel_set_op(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _Forwar\n                 __internal::__brick_move(__buffer + __s.__buf_pos, __buffer + (__s.__buf_pos + __s.__len), __result + __s.__pos,\n                              __is_vector);\n         };\n-        __par_backend::parallel_strict_scan(\n+        __par_backend::__parallel_strict_scan(\n             std::forward<_ExecutionPolicy>(__exec), __n1, _SetRange{0, 0, 0}, //-1, 0},\n             [=](_DifferenceType __i, _DifferenceType __len) {                 // Reduce\n                 //[__b; __e) - a subrange of the first sequence, to reduce"}, {"sha": "b8e1282164711a330167b62ee249423b9d4a62c9", "filename": "libstdc++-v3/include/pstl/numeric_impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h?ref=71905b8a44140009df4a78b592e24152fd03e8d2", "patch": "@@ -275,7 +275,7 @@ __pattern_transform_scan(_ExecutionPolicy&& __exec, _RandomAccessIterator __firs\n         return __result;\n     }\n     return __internal::__except_handler([&]() {\n-        __par_backend::parallel_strict_scan(\n+        __par_backend::__parallel_strict_scan(\n             std::forward<_ExecutionPolicy>(__exec), __n, __init,\n             [__first, __unary_op, __binary_op, __result, __is_vector](_DifferenceType __i, _DifferenceType __len) {\n                 return __internal::__brick_transform_scan(__first + __i, __first + (__i + __len), __result + __i, __unary_op, _Tp{},"}, {"sha": "8b60cfe630fd5690054ca28de5f7362d4c3fbcf9", "filename": "libstdc++-v3/include/pstl/parallel_backend_tbb.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71905b8a44140009df4a78b592e24152fd03e8d2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h?ref=71905b8a44140009df4a78b592e24152fd03e8d2", "patch": "@@ -290,7 +290,7 @@ __split(_Index __m)\n }\n \n //------------------------------------------------------------------------\n-// parallel_strict_scan\n+// __parallel_strict_scan\n //------------------------------------------------------------------------\n \n template <typename _Index, typename _Tp, typename _Rp, typename _Cp>\n@@ -346,7 +346,8 @@ __downsweep(_Index __i, _Index __m, _Index __tilesize, _Tp* __r, _Index __lastsi\n // T must have a trivial constructor and destructor.\n template <class _ExecutionPolicy, typename _Index, typename _Tp, typename _Rp, typename _Cp, typename _Sp, typename _Ap>\n void\n-parallel_strict_scan(_ExecutionPolicy&&, _Index __n, _Tp __initial, _Rp __reduce, _Cp __combine, _Sp __scan, _Ap __apex)\n+__parallel_strict_scan(_ExecutionPolicy&&, _Index __n, _Tp __initial, _Rp __reduce, _Cp __combine, _Sp __scan,\n+                       _Ap __apex)\n {\n     tbb::this_task_arena::isolate([=, &__combine]() {\n         if (__n > 1)"}]}