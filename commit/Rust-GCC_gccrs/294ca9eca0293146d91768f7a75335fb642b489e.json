{"sha": "294ca9eca0293146d91768f7a75335fb642b489e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0Y2E5ZWNhMDI5MzE0NmQ5MTc2OGY3YTc1MzM1ZmI2NDJiNDg5ZQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-13T20:46:17Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-13T20:46:17Z"}, "message": "VAX: Handle subtracting from self with QMATH DImode add/sub\n\nRemove an assertion the failure of which has not been actually observed,\nbut which appears clearly dangerous, for when the QMATH DImode add/sub\nhandler is invoked with the subtrahend and the minuend both the same.\nInstead handle the operation by emitting a move of constant 0 to the\noutput operand.  Adjust the relevant inline comment accordingly.\n\n\tgcc/\n\t* config/vax/vax.c (vax_expand_addsub_di_operands): Handle equal\n\tinput operands with subtraction.", "tree": {"sha": "601edd7bf5a02ee8ab5cab2eea35166ae70bb7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/601edd7bf5a02ee8ab5cab2eea35166ae70bb7de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294ca9eca0293146d91768f7a75335fb642b489e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294ca9eca0293146d91768f7a75335fb642b489e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294ca9eca0293146d91768f7a75335fb642b489e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294ca9eca0293146d91768f7a75335fb642b489e/comments", "author": null, "committer": null, "parents": [{"sha": "ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb1dcf6222ef8bdbd234b34fe98a9cacc262f00"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "07c499c78af29125dc816c1d70b20335fa785c56", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294ca9eca0293146d91768f7a75335fb642b489e/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294ca9eca0293146d91768f7a75335fb642b489e/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=294ca9eca0293146d91768f7a75335fb642b489e", "patch": "@@ -2042,12 +2042,14 @@ vax_expand_addsub_di_operands (rtx * operands, enum rtx_code code)\n     }\n   else\n     {\n-      /* If are adding the same value together, that's really a multiply by 2,\n-\t and that's just a left shift of 1.  */\n+      /* If we are adding a value to itself, that's really a multiply by 2,\n+\t and that's just a left shift by 1.  If subtracting, it's just 0.  */\n       if (rtx_equal_p (operands[1], operands[2]))\n \t{\n-\t  gcc_assert (code != MINUS);\n-\t  emit_insn (gen_ashldi3 (operands[0], operands[1], const1_rtx));\n+\t  if (code == PLUS)\n+\t    emit_insn (gen_ashldi3 (operands[0], operands[1], const1_rtx));\n+\t  else\n+\t    emit_move_insn (operands[0], const0_rtx);\n \t  return;\n \t}\n "}]}