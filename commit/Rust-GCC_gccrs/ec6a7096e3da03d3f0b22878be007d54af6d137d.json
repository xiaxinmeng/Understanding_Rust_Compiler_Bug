{"sha": "ec6a7096e3da03d3f0b22878be007d54af6d137d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM2YTcwOTZlM2RhMDNkM2YwYjIyODc4YmUwMDdkNTRhZjZkMTM3ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-02-12T19:30:53Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-02-12T19:30:53Z"}, "message": "re PR fortran/64932 (ICE in gfc_conv_descriptor_data_get for generated finalizer)\n\n2015-02-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/64932\n\t* trans-stmt.c (gfc_trans_deallocate): If a component array\n\texpression is not a descriptor type and it is a derived type\n\tthat has allocatable components and is not finalizable, then\n\tdeallocate the allocatable components.\n\n2015-02-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/64932\n\t* gfortran.dg/finalize_28.f90: New test\n\nFrom-SVN: r220654", "tree": {"sha": "65515247139d8d4088e1b6ba93b4bbe760bc68eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65515247139d8d4088e1b6ba93b4bbe760bc68eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec6a7096e3da03d3f0b22878be007d54af6d137d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6a7096e3da03d3f0b22878be007d54af6d137d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6a7096e3da03d3f0b22878be007d54af6d137d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6a7096e3da03d3f0b22878be007d54af6d137d/comments", "author": null, "committer": null, "parents": [{"sha": "12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d0d3581b0acf77d6cb57b6e77eaf92e0413b78"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "bff0cb6454ae3b134ca1a9a03f56ab5b587f7080", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ec6a7096e3da03d3f0b22878be007d54af6d137d", "patch": "@@ -1,3 +1,11 @@\n+2015-02-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/64932\n+\t* trans-stmt.c (gfc_trans_deallocate): If a component array\n+\texpression is not a descriptor type and it is a derived type\n+\tthat has allocatable components and is not finalizable, then\n+\tdeallocate the allocatable components.\n+\n 2015-02-08  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/63744"}, {"sha": "505f9052cf693ce779bfa90f1a41d0207572cf15", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=ec6a7096e3da03d3f0b22878be007d54af6d137d", "patch": "@@ -5575,11 +5575,13 @@ gfc_trans_deallocate (gfc_code *code)\n \n       if (expr->rank || gfc_is_coarray (expr))\n \t{\n+\t  gfc_ref *ref;\n+\n \t  if (expr->ts.type == BT_DERIVED && expr->ts.u.derived->attr.alloc_comp\n \t      && !gfc_is_finalizable (expr->ts.u.derived, NULL))\n \t    {\n-\t      gfc_ref *ref;\n \t      gfc_ref *last = NULL;\n+\n \t      for (ref = expr->ref; ref; ref = ref->next)\n \t\tif (ref->type == REF_COMPONENT)\n \t\t  last = ref;\n@@ -5590,13 +5592,45 @@ gfc_trans_deallocate (gfc_code *code)\n \t\t    && !(!last && expr->symtree->n.sym->attr.pointer))\n \t\t{\n \t\t  tmp = gfc_deallocate_alloc_comp (expr->ts.u.derived, se.expr,\n-\t\t\t\t\t\t  expr->rank);\n+\t\t\t\t\t\t   expr->rank);\n \t\t  gfc_add_expr_to_block (&se.pre, tmp);\n \t\t}\n \t    }\n-\t  tmp = gfc_array_deallocate (se.expr, pstat, errmsg, errlen,\n-\t\t\t\t      label_finish, expr);\n-\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\n+\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (se.expr)))\n+\t    {\n+\t      tmp = gfc_array_deallocate (se.expr, pstat, errmsg, errlen,\n+\t\t\t\t          label_finish, expr);\n+\t      gfc_add_expr_to_block (&se.pre, tmp);\n+\t    }\n+\t  else if (TREE_CODE (se.expr) == COMPONENT_REF\n+\t\t   && TREE_CODE (TREE_TYPE (se.expr)) == ARRAY_TYPE\n+\t\t   && TREE_CODE (TREE_TYPE (TREE_TYPE (se.expr)))\n+\t\t\t== RECORD_TYPE)\n+\t    {\n+\t      /* class.c(finalize_component) generates these, when a\n+\t\t finalizable entity has a non-allocatable derived type array\n+\t\t component, which has allocatable components. Obtain the\n+\t\t derived type of the array and deallocate the allocatable\n+\t\t components. */\n+\t      for (ref = expr->ref; ref; ref = ref->next)\n+\t\t{\n+\t\t  if (ref->u.c.component->attr.dimension\n+\t\t      && ref->u.c.component->ts.type == BT_DERIVED)\n+\t\t    break;\n+\t\t}\n+\n+\t      if (ref && ref->u.c.component->ts.u.derived->attr.alloc_comp\n+\t\t  && !gfc_is_finalizable (ref->u.c.component->ts.u.derived,\n+\t\t\t\t\t  NULL))\n+\t\t{\n+\t\t  tmp = gfc_deallocate_alloc_comp\n+\t\t\t\t(ref->u.c.component->ts.u.derived,\n+\t\t\t\t se.expr, expr->rank);\n+\t\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\t\t}\n+\t    }\n+\n \t  if (al->expr->ts.type == BT_CLASS)\n \t    gfc_reset_vptr (&se.pre, al->expr);\n \t}"}, {"sha": "ef26e99d2d23622011d7b0f1b7be1a2273dfc5ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec6a7096e3da03d3f0b22878be007d54af6d137d", "patch": "@@ -1,3 +1,8 @@\n+2015-02-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/64932\n+\t* gfortran.dg/finalize_28.f90: New test\n+\n 2015-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/55541"}, {"sha": "03de5d0d28bc442f424257b7553e68d4bcf32589", "filename": "gcc/testsuite/gfortran.dg/finalize_28.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6a7096e3da03d3f0b22878be007d54af6d137d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_28.f90?ref=ec6a7096e3da03d3f0b22878be007d54af6d137d", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR64932.\n+!\n+! Reported by Daniel Shapiro  <shapero@uw.edu>\n+!\n+module coo_graphs\n+  implicit none\n+  type :: dynamic_array\n+    integer :: length, capacity, min_capacity\n+    integer, allocatable :: array(:)\n+  end type\n+  type :: coo_graph\n+    type(dynamic_array) :: edges(2)\n+    integer, private :: ne\n+  end type coo_graph\n+contains\n+  subroutine coo_dump_edges(g, edges)\n+    class(coo_graph), intent(in) :: g\n+    integer, intent(out) :: edges(:,:)\n+  end subroutine coo_dump_edges\n+end module coo_graphs\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 3 \"original\" } }"}]}