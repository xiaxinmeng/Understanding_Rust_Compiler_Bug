{"sha": "90e3c064aa9d5812f597ee1865ec169bd86436cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlM2MwNjRhYTlkNTgxMmY1OTdlZTE4NjVlYzE2OWJkODY0MzZjYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-10-06T16:26:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-10-06T16:26:00Z"}, "message": "re PR c++/47791 (finish function is using literal value instead of a #defined one)\n\n2017-10-06  Paolo Carlini  <paolo.carlini@oracle>\n\n\tPR c++/47791\n\t* decl.c (finish_function): Take a bool intead of an int; adjust.\n\t* cp-tree.h (finish_function): Adjust declaration.\n\t* decl2.c (generate_tls_wrapper, finish_objects,\n\tfinish_static_storage_duration_function): Adjust calls.\n\t* lambda.c (maybe_add_lambda_conv_op, finish_lambda_function):\n\tLikewise.\n\t* method.c (synthesize_method): Likewise.\n\t* optimize.c (maybe_thunk_body, maybe_clone_body): Likewise.\n\t* pt.c (instantiate_decl): Likewise.\n\t* parser.c (cp_parser_function_definition_after_declarator,\n\tcp_parser_late_parsing_for_member, cp_parser_omp_declare_reduction):\n\tLikewise.\n\t(cp_parser_ctor_initializer_opt,\n\tcp_parser_ctor_initializer_opt_and_function_body,\n\tcp_parser_function_try_block,\n\tcp_parser_function_definition_after_declarator,\n\tcp_parser_function_transaction): Return void; adjust declarations.\n\nFrom-SVN: r253497", "tree": {"sha": "68c98db55f431935c3f79a99bcab0a4451954666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c98db55f431935c3f79a99bcab0a4451954666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90e3c064aa9d5812f597ee1865ec169bd86436cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e3c064aa9d5812f597ee1865ec169bd86436cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e3c064aa9d5812f597ee1865ec169bd86436cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e3c064aa9d5812f597ee1865ec169bd86436cc/comments", "author": null, "committer": null, "parents": [{"sha": "9db84ecedae899c04ac693d970120a065c58350e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9db84ecedae899c04ac693d970120a065c58350e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9db84ecedae899c04ac693d970120a065c58350e"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "6e18dd24e737316232a7a6237e7142ac45c61e6e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -1,3 +1,24 @@\n+2017-10-06  Paolo Carlini  <paolo.carlini@oracle>\n+\n+\tPR c++/47791\n+\t* decl.c (finish_function): Take a bool intead of an int; adjust.\n+\t* cp-tree.h (finish_function): Adjust declaration.\n+\t* decl2.c (generate_tls_wrapper, finish_objects,\n+\tfinish_static_storage_duration_function): Adjust calls.\n+\t* lambda.c (maybe_add_lambda_conv_op, finish_lambda_function):\n+\tLikewise.\n+\t* method.c (synthesize_method): Likewise.\n+\t* optimize.c (maybe_thunk_body, maybe_clone_body): Likewise.\n+\t* pt.c (instantiate_decl): Likewise.\n+\t* parser.c (cp_parser_function_definition_after_declarator,\n+\tcp_parser_late_parsing_for_member, cp_parser_omp_declare_reduction):\n+\tLikewise.\n+\t(cp_parser_ctor_initializer_opt,\n+\tcp_parser_ctor_initializer_opt_and_function_body,\n+\tcp_parser_function_try_block,\n+\tcp_parser_function_definition_after_declarator,\n+\tcp_parser_function_transaction): Return void; adjust declarations.\n+\n 2017-10-06  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/82424"}, {"sha": "b29e4e0be02633abf0a39f7ee0494798669eb3f2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -6125,7 +6125,7 @@ extern bool start_function\t\t\t(cp_decl_specifier_seq *,\n extern tree begin_function_body\t\t\t(void);\n extern void finish_function_body\t\t(tree);\n extern tree outer_curly_brace_block\t\t(tree);\n-extern tree finish_function\t\t\t(int);\n+extern tree finish_function\t\t\t(bool);\n extern tree grokmethod\t\t\t\t(cp_decl_specifier_seq *, const cp_declarator *, tree);\n extern void maybe_register_incomplete_var\t(tree);\n extern void maybe_commonize_var\t\t\t(tree);"}, {"sha": "0e70bb5d59d5a325d0ff7d867c834d8dbdef48ec", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -7827,7 +7827,7 @@ start_cleanup_fn (void)\n static void\n end_cleanup_fn (void)\n {\n-  expand_or_defer_fn (finish_function (0));\n+  expand_or_defer_fn (finish_function (/*inline_p=*/false));\n \n   pop_from_top_level ();\n }\n@@ -15459,20 +15459,16 @@ maybe_save_function_definition (tree fun)\n \n /* Finish up a function declaration and compile that function\n    all the way to assembler language output.  The free the storage\n-   for the function definition.\n-\n-   FLAGS is a bitwise or of the following values:\n-     2 - INCLASS_INLINE\n-       We just finished processing the body of an in-class inline\n-       function definition.  (This processing will have taken place\n-       after the class definition is complete.)  */\n+   for the function definition. INLINE_P is TRUE if we just\n+   finished processing the body of an in-class inline function\n+   definition.  (This processing will have taken place after the\n+   class definition is complete.)  */\n \n tree\n-finish_function (int flags)\n+finish_function (bool inline_p)\n {\n   tree fndecl = current_function_decl;\n   tree fntype, ctype = NULL_TREE;\n-  int inclass_inline = (flags & 2) != 0;\n \n   /* When we get some parse errors, we can end up without a\n      current_function_decl, so cope.  */\n@@ -15732,7 +15728,7 @@ finish_function (int flags)\n      bindings for the template parameters that we added in\n      maybe_begin_member_template_processing when start_function was\n      called.  */\n-  if (inclass_inline)\n+  if (inline_p)\n     maybe_end_member_template_processing ();\n \n   /* Leave the scope of the class.  */"}, {"sha": "1cbd11dac454c00c119080a6f1828d57746a4218", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -3328,7 +3328,7 @@ generate_tls_wrapper (tree fn)\n     TREE_READONLY (fn) = true;\n   finish_return_stmt (convert_from_reference (var));\n   finish_function_body (body);\n-  expand_or_defer_fn (finish_function (0));\n+  expand_or_defer_fn (finish_function (/*inline_p=*/false));\n }\n \n /* Start the process of running a particular set of global constructors\n@@ -3395,7 +3395,7 @@ finish_objects (int method_type, int initp, tree body)\n \n   /* Finish up.  */\n   finish_compound_stmt (body);\n-  fn = finish_function (0);\n+  fn = finish_function (/*inline_p=*/false);\n \n   if (method_type == 'I')\n     {\n@@ -3535,7 +3535,7 @@ finish_static_storage_duration_function (tree body)\n {\n   /* Close out the function.  */\n   finish_compound_stmt (body);\n-  expand_or_defer_fn (finish_function (0));\n+  expand_or_defer_fn (finish_function (/*inline_p=*/false));\n }\n \n /* Return the information about the indicated PRIORITY level.  If no\n@@ -4284,7 +4284,7 @@ handle_tls_init (void)\n   finish_then_clause (if_stmt);\n   finish_if_stmt (if_stmt);\n   finish_function_body (body);\n-  expand_or_defer_fn (finish_function (0));\n+  expand_or_defer_fn (finish_function (/*inline_p=*/false));\n }\n \n /* We're at the end of compilation, so generate any mangling aliases that\n@@ -5249,7 +5249,7 @@ vtv_finish_verification_constructor_init_function (tree function_body)\n   tree fn;\n \n   finish_compound_stmt (function_body);\n-  fn = finish_function (0);\n+  fn = finish_function (/*inline_p=*/false);\n   DECL_STATIC_CONSTRUCTOR (fn) = 1;\n   decl_init_priority_insert (fn, MAX_RESERVED_INIT_PRIORITY - 1);\n "}, {"sha": "78bd89782aaba4b274d83a00a5780adfe2f7c133", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -1223,7 +1223,7 @@ maybe_add_lambda_conv_op (tree type)\n   finish_compound_stmt (compound_stmt);\n   finish_function_body (body);\n \n-  fn = finish_function (/*inline*/2);\n+  fn = finish_function (/*inline_p=*/true);\n   if (!generic_lambda_p)\n     expand_or_defer_fn (fn);\n \n@@ -1241,7 +1241,7 @@ maybe_add_lambda_conv_op (tree type)\n   finish_compound_stmt (compound_stmt);\n   finish_function_body (body);\n \n-  fn = finish_function (/*inline*/2);\n+  fn = finish_function (/*inline_p=*/true);\n   if (!generic_lambda_p)\n     expand_or_defer_fn (fn);\n \n@@ -1362,7 +1362,7 @@ finish_lambda_function (tree body)\n   finish_function_body (body);\n \n   /* Finish the function and generate code for it if necessary.  */\n-  tree fn = finish_function (/*inline*/2);\n+  tree fn = finish_function (/*inline_p=*/true);\n \n   /* Only expand if the call op is not a template.  */\n   if (!DECL_TEMPLATE_INFO (fn))"}, {"sha": "4e56874ae26e2e400ee6e460b4c5fa73d997cac3", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -953,7 +953,7 @@ synthesize_method (tree fndecl)\n     }\n \n   finish_function_body (stmt);\n-  expand_or_defer_fn (finish_function (0));\n+  expand_or_defer_fn (finish_function (/*inline_p=*/false));\n \n   input_location = save_input_location;\n "}, {"sha": "2645ae47e095d2b6a199704982e71c96d63fa29e", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -416,7 +416,7 @@ maybe_thunk_body (tree fn, bool force)\n \t}\n \n       DECL_ABSTRACT_ORIGIN (clone) = NULL;\n-      expand_or_defer_fn (finish_function (0));\n+      expand_or_defer_fn (finish_function (/*inline_p=*/false));\n     }\n   return 1;\n }\n@@ -657,7 +657,7 @@ maybe_clone_body (tree fn)\n       cp_function_chain->can_throw = !TREE_NOTHROW (fn);\n \n       /* Now, expand this function into RTL, if appropriate.  */\n-      finish_function (0);\n+      finish_function (/*inline_p=*/false);\n       BLOCK_ABSTRACT_ORIGIN (DECL_INITIAL (clone)) = DECL_INITIAL (fn);\n       if (alias)\n \t{"}, {"sha": "7883c64f33f8102ea74c089bb20d6d5e06fac1af", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -2257,7 +2257,7 @@ static cp_expr cp_parser_braced_list\n static vec<constructor_elt, va_gc> *cp_parser_initializer_list\n   (cp_parser *, bool *);\n \n-static bool cp_parser_ctor_initializer_opt_and_function_body\n+static void cp_parser_ctor_initializer_opt_and_function_body\n   (cp_parser *, bool);\n \n static tree cp_parser_late_parsing_omp_declare_simd\n@@ -2310,7 +2310,7 @@ static tree cp_parser_conversion_type_id\n   (cp_parser *);\n static cp_declarator *cp_parser_conversion_declarator_opt\n   (cp_parser *);\n-static bool cp_parser_ctor_initializer_opt\n+static void cp_parser_ctor_initializer_opt\n   (cp_parser *);\n static void cp_parser_mem_initializer_list\n   (cp_parser *);\n@@ -2353,7 +2353,7 @@ static void cp_parser_explicit_specialization\n \n static tree cp_parser_try_block\n   (cp_parser *);\n-static bool cp_parser_function_try_block\n+static void cp_parser_function_try_block\n   (cp_parser *);\n static void cp_parser_handler_seq\n   (cp_parser *);\n@@ -2438,7 +2438,7 @@ static tree cp_parser_transaction\n   (cp_parser *, cp_token *);\n static tree cp_parser_transaction_expression\n   (cp_parser *, enum rid);\n-static bool cp_parser_function_transaction\n+static void cp_parser_function_transaction\n   (cp_parser *, enum rid);\n static tree cp_parser_transaction_cancel\n   (cp_parser *);\n@@ -14253,11 +14253,9 @@ cp_parser_conversion_declarator_opt (cp_parser* parser)\n /* Parse an (optional) ctor-initializer.\n \n    ctor-initializer:\n-     : mem-initializer-list\n+     : mem-initializer-list  */\n \n-   Returns TRUE iff the ctor-initializer was actually present.  */\n-\n-static bool\n+static void\n cp_parser_ctor_initializer_opt (cp_parser* parser)\n {\n   /* If the next token is not a `:', then there is no\n@@ -14267,16 +14265,13 @@ cp_parser_ctor_initializer_opt (cp_parser* parser)\n       /* Do default initialization of any bases and members.  */\n       if (DECL_CONSTRUCTOR_P (current_function_decl))\n \tfinish_mem_initializers (NULL_TREE);\n-\n-      return false;\n+      return;\n     }\n \n   /* Consume the `:' token.  */\n   cp_lexer_consume_token (parser->lexer);\n   /* And the mem-initializer-list.  */\n   cp_parser_mem_initializer_list (parser);\n-\n-  return true;\n }\n \n /* Parse a mem-initializer-list.\n@@ -21701,12 +21696,11 @@ cp_parser_function_body (cp_parser *parser, bool in_function_try_block)\n    true if a ctor-initializer was present.  When IN_FUNCTION_TRY_BLOCK\n    is true we are parsing a function-try-block.  */\n \n-static bool\n+static void\n cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n \t\t\t\t\t\t  bool in_function_try_block)\n {\n   tree body, list;\n-  bool ctor_initializer_p;\n   const bool check_body_p =\n      DECL_CONSTRUCTOR_P (current_function_decl)\n      && DECL_DECLARED_CONSTEXPR_P (current_function_decl);\n@@ -21715,7 +21709,7 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n   /* Begin the function body.  */\n   body = begin_function_body ();\n   /* Parse the optional ctor-initializer.  */\n-  ctor_initializer_p = cp_parser_ctor_initializer_opt (parser);\n+  cp_parser_ctor_initializer_opt (parser);\n \n   /* If we're parsing a constexpr constructor definition, we need\n      to check that the constructor body is indeed empty.  However,\n@@ -21735,8 +21729,6 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n     check_constexpr_ctor_body (last, list, /*complain=*/true);\n   /* Finish the function body.  */\n   finish_function_body (body);\n-\n-  return ctor_initializer_p;\n }\n \n /* Parse an initializer.\n@@ -24364,29 +24356,26 @@ cp_parser_try_block (cp_parser* parser)\n    function-try-block:\n      try ctor-initializer [opt] function-body handler-seq  */\n \n-static bool\n+static void\n cp_parser_function_try_block (cp_parser* parser)\n {\n   tree compound_stmt;\n   tree try_block;\n-  bool ctor_initializer_p;\n \n   /* Look for the `try' keyword.  */\n   if (!cp_parser_require_keyword (parser, RID_TRY, RT_TRY))\n-    return false;\n+    return;\n   /* Let the rest of the front end know where we are.  */\n   try_block = begin_function_try_block (&compound_stmt);\n   /* Parse the function-body.  */\n-  ctor_initializer_p = cp_parser_ctor_initializer_opt_and_function_body\n+  cp_parser_ctor_initializer_opt_and_function_body\n     (parser, /*in_function_try_block=*/true);\n   /* We're done with the `try' part.  */\n   finish_function_try_block (try_block);\n   /* Parse the handlers.  */\n   cp_parser_handler_seq (parser);\n   /* We're done with the handlers.  */\n   finish_function_handler_sequence (try_block, compound_stmt);\n-\n-  return ctor_initializer_p;\n }\n \n /* Parse a handler-seq.\n@@ -26561,7 +26550,6 @@ cp_parser_function_definition_after_declarator (cp_parser* parser,\n \t\t\t\t\t\tbool inline_p)\n {\n   tree fn;\n-  bool ctor_initializer_p = false;\n   bool saved_in_unbraced_linkage_specification_p;\n   bool saved_in_function_body;\n   unsigned saved_num_template_parameter_lists;\n@@ -26619,21 +26607,18 @@ cp_parser_function_definition_after_declarator (cp_parser* parser,\n      or function-transaction-block.  Note that all of these include the\n      function-body.  */\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRANSACTION_ATOMIC))\n-    ctor_initializer_p = cp_parser_function_transaction (parser,\n-\tRID_TRANSACTION_ATOMIC);\n+    cp_parser_function_transaction (parser, RID_TRANSACTION_ATOMIC);\n   else if (cp_lexer_next_token_is_keyword (parser->lexer,\n       RID_TRANSACTION_RELAXED))\n-    ctor_initializer_p = cp_parser_function_transaction (parser,\n-\tRID_TRANSACTION_RELAXED);\n+    cp_parser_function_transaction (parser, RID_TRANSACTION_RELAXED);\n   else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRY))\n-    ctor_initializer_p = cp_parser_function_try_block (parser);\n+    cp_parser_function_try_block (parser);\n   else\n-    ctor_initializer_p = cp_parser_ctor_initializer_opt_and_function_body\n+    cp_parser_ctor_initializer_opt_and_function_body\n       (parser, /*in_function_try_block=*/false);\n \n   /* Finish the function.  */\n-  fn = finish_function ((ctor_initializer_p ? 1 : 0) |\n-\t\t\t(inline_p ? 2 : 0));\n+  fn = finish_function (inline_p);\n   /* Generate code for it, if necessary.  */\n   expand_or_defer_fn (fn);\n   /* Restore the saved values.  */\n@@ -27504,7 +27489,7 @@ cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)\n \t{\n \t  parser->lexer->in_pragma = true;\n \t  cp_parser_omp_declare_reduction_exprs (member_function, parser);\n-\t  finish_function (/*inline*/2);\n+\t  finish_function (/*inline_p=*/true);\n \t  cp_check_omp_declare_reduction (member_function);\n \t}\n       else\n@@ -37692,7 +37677,7 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n       if (!cp_parser_omp_declare_reduction_exprs (fndecl, parser))\n \t{\n \t  if (!block_scope)\n-\t    finish_function (0);\n+\t    finish_function (/*inline_p=*/false);\n \t  else\n \t    DECL_CONTEXT (fndecl) = current_function_decl;\n \t  if (cp)\n@@ -37702,7 +37687,7 @@ cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,\n       if (cp)\n \tcp_parser_pop_lexer (parser);\n       if (!block_scope)\n-\tfinish_function (0);\n+\tfinish_function (/*inline_p=*/false);\n       else\n \t{\n \t  DECL_CONTEXT (fndecl) = current_function_decl;\n@@ -38397,13 +38382,12 @@ cp_parser_transaction_expression (cp_parser *parser, enum rid keyword)\n      __transaction_relaxed function-try-block\n */\n \n-static bool\n+static void\n cp_parser_function_transaction (cp_parser *parser, enum rid keyword)\n {\n   unsigned char old_in = parser->in_transaction;\n   unsigned char new_in = 1;\n   tree compound_stmt, stmt, attrs;\n-  bool ctor_initializer_p;\n   cp_token *token;\n \n   gcc_assert (keyword == RID_TRANSACTION_ATOMIC\n@@ -38427,16 +38411,14 @@ cp_parser_function_transaction (cp_parser *parser, enum rid keyword)\n   parser->in_transaction = new_in;\n \n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRY))\n-    ctor_initializer_p = cp_parser_function_try_block (parser);\n+    cp_parser_function_try_block (parser);\n   else\n-    ctor_initializer_p = cp_parser_ctor_initializer_opt_and_function_body\n+    cp_parser_ctor_initializer_opt_and_function_body\n       (parser, /*in_function_try_block=*/false);\n \n   parser->in_transaction = old_in;\n \n   finish_transaction_stmt (stmt, compound_stmt, new_in, NULL_TREE);\n-\n-  return ctor_initializer_p;\n }\n \n /* Parse a __transaction_cancel statement."}, {"sha": "52fc4d6a222e67c9d27866561848cff7efc29a37", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e3c064aa9d5812f597ee1865ec169bd86436cc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=90e3c064aa9d5812f597ee1865ec169bd86436cc", "patch": "@@ -23281,7 +23281,7 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n \tDECL_SAVED_TREE (d) = pop_stmt_list (block);\n       else\n \t{\n-\t  d = finish_function (0);\n+\t  d = finish_function (/*inline_p=*/false);\n \t  expand_or_defer_fn (d);\n \t}\n "}]}