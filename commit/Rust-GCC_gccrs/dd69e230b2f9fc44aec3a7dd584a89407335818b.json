{"sha": "dd69e230b2f9fc44aec3a7dd584a89407335818b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2OWUyMzBiMmY5ZmM0NGFlYzNhN2RkNTg0YTg5NDA3MzM1ODE4Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-11-12T20:02:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-11-12T20:02:32Z"}, "message": "h8300.c (shift_alg_si): Use special code for 15-bit logical shifts and 31-bit logical shifts.\n\n\t* config/h8300/h8300.c (shift_alg_si): Use special code for\n\t15-bit logical shifts and 31-bit logical shifts.\n\t(get_shift_alg): Generate special code for 15-bit and 31-bit\n\tlogical shifts.\n\nFrom-SVN: r46965", "tree": {"sha": "bf04e3f438279bb65d8336a419286f48bf82d74d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf04e3f438279bb65d8336a419286f48bf82d74d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd69e230b2f9fc44aec3a7dd584a89407335818b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd69e230b2f9fc44aec3a7dd584a89407335818b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd69e230b2f9fc44aec3a7dd584a89407335818b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd69e230b2f9fc44aec3a7dd584a89407335818b/comments", "author": null, "committer": null, "parents": [{"sha": "e0f19bd096a6151cbb45790588589de72a7d60e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f19bd096a6151cbb45790588589de72a7d60e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f19bd096a6151cbb45790588589de72a7d60e9"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "91e86f25a5b83ae3ac9f37c7eeee69cee00c3464", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69e230b2f9fc44aec3a7dd584a89407335818b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69e230b2f9fc44aec3a7dd584a89407335818b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd69e230b2f9fc44aec3a7dd584a89407335818b", "patch": "@@ -1,3 +1,10 @@\n+2001-11-12  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c (shift_alg_si): Use special code for\n+\t15-bit logical shifts and 31-bit logical shifts.\n+\t(get_shift_alg): Generate special code for 15-bit and 31-bit\n+\tlogical shifts.\n+\n 2001-11-12  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (shift_alg_qi): Use rotations when"}, {"sha": "e31ddfa0367898fa61b7e9d4f449c3185bdb9b9e", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69e230b2f9fc44aec3a7dd584a89407335818b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69e230b2f9fc44aec3a7dd584a89407335818b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=dd69e230b2f9fc44aec3a7dd584a89407335818b", "patch": "@@ -2252,13 +2252,13 @@ static const enum shift_alg shift_alg_si[3][3][32] = {\n     /* 16   17   18   19   20   21   22   23  */\n     /* 24   25   26   27   28   29   30   31  */\n     { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n       SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, ROT, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n+      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_ASHIFT   */\n     { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n       SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, ROT, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_LSHIFTRT */\n     { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n       SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n       SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n@@ -2271,13 +2271,13 @@ static const enum shift_alg shift_alg_si[3][3][32] = {\n     /* 16   17   18   19   20   21   22   23  */\n     /* 24   25   26   27   28   29   30   31  */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n+      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n       SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, LOP, LOP, LOP, ROT, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n+      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_ASHIFT   */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n+      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n       SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, LOP, LOP, LOP, ROT, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_LSHIFTRT */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n       INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n       SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n@@ -2514,6 +2514,18 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t      goto end;\n \t    }\n \t}\n+      else if (count == 15 && !TARGET_H8300)\n+\t{\n+\t  switch (shift_type)\n+\t    {\n+\t    case SHIFT_ASHIFT:\n+\t      info->special = \"shlr.w\\t%e0\\n\\tmov.w\\t%f0,%e0\\n\\txor.w\\t%f0,%f0\\n\\trotxr.l\\t%S0\";\n+\t      goto end;\n+\t    case SHIFT_LSHIFTRT:\n+\t      info->special = \"shll.w\\t%e0\\n\\tmov.w\\t%e0,%f0\\n\\txor.w\\t%e0,%e0\\n\\trotxl.l\\t%S0\";\n+\t      goto end;\n+\t    }\n+\t}\n       else if ((TARGET_H8300 && count == 16)\n \t       || (TARGET_H8300H && 16 <= count && count <= 19)\n \t       || (TARGET_H8300S && 16 <= count && count <= 21))\n@@ -2559,22 +2571,33 @@ get_shift_alg (shift_type, shift_mode, count, info)\n \t}\n       else if (count == 31)\n \t{\n-\t  if (shift_type == SHIFT_ASHIFTRT)\n+\t  if (TARGET_H8300)\n \t    {\n-\t      if (TARGET_H8300)\n-\t\tinfo->special = \"shll\\t%z0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n-\t      else\n-\t\tinfo->special = \"shll\\t%e0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n-\t      goto end;\n+\t      switch (shift_type)\n+\t\t{\n+\t\tcase SHIFT_ASHIFT:\n+\t\t  info->special = \"sub.w\\t%e0,%e0\\n\\tshlr\\t%w0\\n\\tmov.w\\t%e0,%f0\\n\\trotxr\\t%z0\";\n+\t\t  goto end;\n+\t\tcase SHIFT_LSHIFTRT:\n+\t\t  info->special = \"sub.w\\t%f0,%f0\\n\\tshll\\t%z0\\n\\tmov.w\\t%f0,%e0\\n\\trotxl\\t%w0\";\n+\t\t  goto end;\n+\t\tcase SHIFT_ASHIFTRT:\n+\t\t  info->special = \"shll\\t%z0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n+\t\t  goto end;\n+\t\t}\n \t    }\n \t  else\n \t    {\n-\t      if (TARGET_H8300)\n+\t      switch (shift_type)\n \t\t{\n-\t\t  if (shift_type == SHIFT_ASHIFT)\n-\t\t    info->special = \"sub.w\\t%e0,%e0\\n\\tshlr\\t%w0\\n\\tmov.w\\t%e0,%f0\\n\\trotxr\\t%z0\";\n-\t\t  else\n-\t\t    info->special = \"sub.w\\t%f0,%f0\\n\\tshll\\t%z0\\n\\tmov.w\\t%f0,%e0\\n\\trotxl\\t%w0\";\n+\t\tcase SHIFT_ASHIFT:\n+\t\t  info->special = \"shlr.l\\t%S0\\n\\txor.l\\t%S0,%S0\\n\\trotxr.l\\t%S0\";\n+\t\t  goto end;\n+\t\tcase SHIFT_LSHIFTRT:\n+\t\t  info->special = \"shll.l\\t%S0\\n\\txor.l\\t%S0,%S0\\n\\trotxl.l\\t%S0\";\n+\t\t  goto end;\n+\t\tcase SHIFT_ASHIFTRT:\n+\t\t  info->special = \"shll\\t%e0\\n\\tsubx\\t%w0,%w0\\n\\tmov.b\\t%w0,%x0\\n\\tmov.w\\t%f0,%e0\";\n \t\t  goto end;\n \t\t}\n \t    }"}]}