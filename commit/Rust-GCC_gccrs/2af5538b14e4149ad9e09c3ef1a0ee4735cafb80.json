{"sha": "2af5538b14e4149ad9e09c3ef1a0ee4735cafb80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmNTUzOGIxNGU0MTQ5YWQ5ZTA5YzNlZjFhMGVlNDczNWNhZmI4MA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-06-07T08:17:35Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-06-07T08:17:35Z"}, "message": "config.in: Regenerate.\n\n2004-06-06  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config.in: Regenerate.\n\nFrom-SVN: r82684", "tree": {"sha": "6f442af94d1b0c16c4059955959c4bcf657962e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f442af94d1b0c16c4059955959c4bcf657962e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7853504d63ff5c13c0f64e09d4515ea0ce67ffb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7853504d63ff5c13c0f64e09d4515ea0ce67ffb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7853504d63ff5c13c0f64e09d4515ea0ce67ffb8"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "98dd0160724162f634ad30a95e80b385f306d5a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2af5538b14e4149ad9e09c3ef1a0ee4735cafb80", "patch": "@@ -1,3 +1,7 @@\n+2004-06-06  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config.in: Regenerate.\n+\n 2004-06-06  Steven Bosscher  <stevenb@suse.de>\n \n \t* tree-cfg.c (tree_verify_flow_info): Make sure that labels in"}, {"sha": "376759e70df8ddd8d01d5dd7f223f763eed5db08", "filename": "gcc/config.in", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af5538b14e4149ad9e09c3ef1a0ee4735cafb80/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2af5538b14e4149ad9e09c3ef1a0ee4735cafb80", "patch": "@@ -53,7 +53,8 @@\n \n /* Define if you want all operations on trees (the basic data structure of the\n    front ends) to be checked for dynamic type safety at runtime. This is\n-   moderately expensive. */\n+   moderately expensive. The tree browser debugging routines will also be\n+   enabled by this option. */\n #undef ENABLE_TREE_CHECKING\n \n /* Define if you want to run subprograms and generated programs through\n@@ -135,6 +136,9 @@\n /* Define to 1 if you have the `atoq' function. */\n #undef HAVE_ATOQ\n \n+/* Define if BANSHEE is available */\n+#undef HAVE_BANSHEE\n+\n /* Define to 1 if you have the `clock' function. */\n #undef HAVE_CLOCK\n \n@@ -437,9 +441,6 @@\n /* Define to 1 if you have the <time.h> header file. */\n #undef HAVE_TIME_H\n \n-/* Define if <sys/types.h> defines \\`uchar'. */\n-#undef HAVE_UCHAR\n-\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n@@ -568,15 +569,6 @@\n /* Define to `int' if <sys/types.h> does not define. */\n #undef ssize_t\n \n-/* Define if your linker supports -pie option. */\n-#undef HAVE_LD_PIE\n-\n-/* Define if BANSHEE is available */\n-#undef HAVE_BANSHEE\n-\n-/* Define to PREFIX/include if cpp should also search that directory. */\n-#undef PREFIX_INCLUDE_DIR\n-\n /* Define to `int' if <sys/types.h> doesn't define. */\n #undef uid_t\n "}]}