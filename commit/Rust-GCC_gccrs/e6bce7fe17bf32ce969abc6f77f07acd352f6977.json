{"sha": "e6bce7fe17bf32ce969abc6f77f07acd352f6977", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiY2U3ZmUxN2JmMzJjZTk2OWFiYzZmNzdmMDdhY2QzNTJmNjk3Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-01-28T23:46:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-01-28T23:54:03Z"}, "message": "gccgo driver: always act as though -g is passed\n\nThe go1 compiler always turns on debugging, to support Go stack traces\nand functions like runtime.Callers.  With the recent switch to turn on\nDWARF 5 by default, this caused failures with some versions of gas,\nsuch as 2.35.1, because the assembly code would assume DWARF 5 but the\ndriver would not pass --gdwarf-5 to gas.  gas would then give an\nerror: \"file number less than one\".\n\nThis change avoids that problem by having the gccgo driver spec add a\n-g option to the command line if no other -g option is present.  The\nnewly added -g option is passed to the assembler as --gdwarf-5.\n\n\t* gospec.c (lang_specific_driver): Add -g if no debugging options\n\twere passed.", "tree": {"sha": "74586cf74f23e55d6174f2a544bee2463d6a5b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74586cf74f23e55d6174f2a544bee2463d6a5b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6bce7fe17bf32ce969abc6f77f07acd352f6977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bce7fe17bf32ce969abc6f77f07acd352f6977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bce7fe17bf32ce969abc6f77f07acd352f6977", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bce7fe17bf32ce969abc6f77f07acd352f6977/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "850a8ec54c4310d779004299bf9a0dec52324e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850a8ec54c4310d779004299bf9a0dec52324e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850a8ec54c4310d779004299bf9a0dec52324e9e"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "cf8d0f2b60ef6e33f0db233dca86352a003aa67d", "filename": "gcc/go/gospec.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bce7fe17bf32ce969abc6f77f07acd352f6977/gcc%2Fgo%2Fgospec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bce7fe17bf32ce969abc6f77f07acd352f6977/gcc%2Fgo%2Fgospec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgospec.c?ref=e6bce7fe17bf32ce969abc6f77f07acd352f6977", "patch": "@@ -127,6 +127,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* The first input file with an extension of .go.  */\n   const char *first_go_file = NULL;  \n \n+  /* Whether we saw any -g option.  */\n+  bool saw_opt_g = false;\n+\n   argc = *in_decoded_options_count;\n   decoded_options = *in_decoded_options;\n   added_libraries = *in_added_libraries;\n@@ -208,6 +211,18 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  saw_opt_o = true;\n \t  break;\n \n+\tcase OPT_g:\n+\tcase OPT_gdwarf:\n+\tcase OPT_gdwarf_:\n+\tcase OPT_ggdb:\n+\tcase OPT_gstabs:\n+\tcase OPT_gstabs_:\n+\tcase OPT_gvms:\n+\tcase OPT_gxcoff:\n+\tcase OPT_gxcoff_:\n+\t  saw_opt_g = true;\n+\t  break;\n+\n \tcase OPT_static:\n \t  static_link = 1;\n \t  break;\n@@ -271,6 +286,15 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n       j++;\n     }\n \n+  /* The go1 compiler is going to enable debug info by default.  If we\n+     don't see any -g options, force -g, so that we invoke the\n+     assembler with the right debug option.  */\n+  if (!saw_opt_g)\n+    {\n+      generate_option (OPT_g, \"1\", 0, CL_DRIVER, &new_decoded_options[j]);\n+      j++;\n+    }\n+\n   /* NOTE: We start at 1 now, not 0.  */\n   while (i < argc)\n     {"}]}