{"sha": "589163e18a291ce6f0befc67be4ca9ad6924d959", "node_id": "C_kwDOANBUbNoAKDU4OTE2M2UxOGEyOTFjZTZmMGJlZmM2N2JlNGNhOWFkNjkyNGQ5NTk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-22T18:38:15Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:20Z"}, "message": "[Ada] Do not generate DW_TAG_typedef for constrained array types\n\nIt no longer serves any useful purpose at this point.\n\ngcc/ada/\n\n\t* gcc-interface/utils.cc (gnat_pushdecl): Build DECL_ORIGINAL_TYPE\n\tonly for pointer types.", "tree": {"sha": "fee1e93d72a17a34605ce5a2cf29e5d85d881b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee1e93d72a17a34605ce5a2cf29e5d85d881b16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/589163e18a291ce6f0befc67be4ca9ad6924d959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589163e18a291ce6f0befc67be4ca9ad6924d959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/589163e18a291ce6f0befc67be4ca9ad6924d959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589163e18a291ce6f0befc67be4ca9ad6924d959/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d927cb527cb17547b24d2b52ddd29e8fad621a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d927cb527cb17547b24d2b52ddd29e8fad621a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d927cb527cb17547b24d2b52ddd29e8fad621a66"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "a57143021a79efcf21996618d0bb4b0c3c64c2e6", "filename": "gcc/ada/gcc-interface/utils.cc", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589163e18a291ce6f0befc67be4ca9ad6924d959/gcc%2Fada%2Fgcc-interface%2Futils.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589163e18a291ce6f0befc67be4ca9ad6924d959/gcc%2Fada%2Fgcc-interface%2Futils.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.cc?ref=589163e18a291ce6f0befc67be4ca9ad6924d959", "patch": "@@ -877,21 +877,18 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n     {\n       tree t = TREE_TYPE (decl);\n \n-      /* Array and pointer types aren't tagged types in the C sense so we need\n-\t to generate a typedef in DWARF for them and make sure it is preserved,\n-\t unless the type is artificial.  */\n+      /* Pointer types aren't named types in the C sense so we need to generate\n+         a typedef in DWARF for them and make sure it is preserved, unless the\n+         type is artificial.  */\n       if (!(TYPE_NAME (t) && TREE_CODE (TYPE_NAME (t)) == TYPE_DECL)\n-\t  && ((TREE_CODE (t) != ARRAY_TYPE && TREE_CODE (t) != POINTER_TYPE)\n-\t      || DECL_ARTIFICIAL (decl)))\n+\t  && (TREE_CODE (t) != POINTER_TYPE || DECL_ARTIFICIAL (decl)))\n \t;\n-      /* For array and pointer types, create the DECL_ORIGINAL_TYPE that will\n-\t generate the typedef in DWARF.  Also do that for fat pointer types\n-\t because, even though they are tagged types in the C sense, they are\n-\t still XUP types attached to the base array type at this point.  */\n+      /* For pointer types, create the DECL_ORIGINAL_TYPE that will generate\n+\t the typedef in DWARF.  Also do that for fat pointer types because,\n+\t even though they are named types in the C sense, they are still the\n+\t XUP types created for the base array type at this point.  */\n       else if (!DECL_ARTIFICIAL (decl)\n-\t       && (TREE_CODE (t) == ARRAY_TYPE\n-\t\t   || TREE_CODE (t) == POINTER_TYPE\n-\t\t   || TYPE_IS_FAT_POINTER_P (t)))\n+\t       && (TREE_CODE (t) == POINTER_TYPE || TYPE_IS_FAT_POINTER_P (t)))\n \t{\n \t  tree tt = build_variant_type_copy (t);\n \t  TYPE_NAME (tt) = decl;\n@@ -905,10 +902,6 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t    DECL_ORIGINAL_TYPE (decl) = DECL_ORIGINAL_TYPE (TYPE_NAME (t));\n \t  else\n \t    DECL_ORIGINAL_TYPE (decl) = t;\n-\t  /* Array types need to have a name so that they can be related to\n-\t     their GNAT encodings.  */\n-\t  if (TREE_CODE (t) == ARRAY_TYPE && !TYPE_NAME (t))\n-\t    TYPE_NAME (t) = DECL_NAME (decl);\n \t  /* Remark the canonical fat pointer type as artificial.  */\n \t  if (TYPE_IS_FAT_POINTER_P (t))\n \t    TYPE_ARTIFICIAL (t) = 1;"}]}