{"sha": "8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4ZjdlY2E1MGZhZDBlZWU2N2UwNTA3NmI5YmJkZWE4YWI5Nzc5OQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-12-16T23:32:29Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-12-16T23:32:29Z"}, "message": "re PR fortran/25106 ([4.0/4.1] statement label is zero)\n\n2005-12-10  Steven G. Kargl <kargls@comcast.net>\n \n        PR fortran/25106\n        PR fortran/25055\n        * match.c (gfc_match_small_literal_int): Add cnt argument;\n        (gfc_match_st_label,gfc_match_stopcode): Account for cnt argument.\n        * match.h (gfc_match_small_literal_int): Update prototype.\n        * decl.c (match_char_length,gfc_match_old_kind_spec): Account for cnt.\n        * parse.c (next_free): Ditto.\n        * primary.c (match_kind_param): Ditto.\n\n        gfortran.dg/label_1.f90: New test.\n\nFrom-SVN: r108692", "tree": {"sha": "af4a62d1af49037d9561614ff58e6768018c14d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4a62d1af49037d9561614ff58e6768018c14d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/comments", "author": null, "committer": null, "parents": [{"sha": "e99c1d841da65d97a3a34ce1cfda9fcb15f2559d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99c1d841da65d97a3a34ce1cfda9fcb15f2559d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99c1d841da65d97a3a34ce1cfda9fcb15f2559d"}], "stats": {"total": 94, "additions": 68, "deletions": 26}, "files": [{"sha": "eb85853e34563907eeb6e9e5834209789229c69a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -1,3 +1,14 @@\n+2005-12-16  Steven G. Kargl <kargls@comcast.net>\n+ \n+\tPR fortran/25106\n+\tPR fortran/25055\n+\t* match.c (gfc_match_small_literal_int): Add cnt argument;\n+\t(gfc_match_st_label,gfc_match_stopcode): Account for cnt argument.\n+\t* match.h (gfc_match_small_literal_int): Update prototype.\n+\t* decl.c (match_char_length,gfc_match_old_kind_spec): Account for cnt.\n+\t* parse.c (next_free): Ditto.\n+\t* primary.c (match_kind_param): Ditto.\n+\n 2005-12-16  Richard Guenther  <rguenther@suse.de>\n \n \t* trans.h (tree): Remove declaration of gfc_build_function_call."}, {"sha": "45a0442786022656ed50aa8044a9abeff05c0131", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -508,14 +508,15 @@ char_len_param_value (gfc_expr ** expr)\n static match\n match_char_length (gfc_expr ** expr)\n {\n-  int length;\n+  int length, cnt;\n   match m;\n \n   m = gfc_match_char ('*');\n   if (m != MATCH_YES)\n     return m;\n \n-  m = gfc_match_small_literal_int (&length);\n+  /* cnt is unused, here.  */\n+  m = gfc_match_small_literal_int (&length, &cnt);\n   if (m == MATCH_ERROR)\n     return m;\n \n@@ -1279,12 +1280,13 @@ match\n gfc_match_old_kind_spec (gfc_typespec * ts)\n {\n   match m;\n-  int original_kind;\n+  int original_kind, cnt;\n \n   if (gfc_match_char ('*') != MATCH_YES)\n     return MATCH_NO;\n \n-  m = gfc_match_small_literal_int (&ts->kind);\n+  /* cnt is unsed, here.  */\n+  m = gfc_match_small_literal_int (&ts->kind, &cnt);\n   if (m != MATCH_YES)\n     return MATCH_ERROR;\n "}, {"sha": "501a0918937bb008f3ec316cb764298fcca770b6", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -141,11 +141,11 @@ gfc_match_eos (void)\n    old-style character length specifications.  */\n \n match\n-gfc_match_small_literal_int (int *value)\n+gfc_match_small_literal_int (int *value, int *cnt)\n {\n   locus old_loc;\n   char c;\n-  int i;\n+  int i, j;\n \n   old_loc = gfc_current_locus;\n \n@@ -159,6 +159,7 @@ gfc_match_small_literal_int (int *value)\n     }\n \n   i = c - '0';\n+  j = 1;\n \n   for (;;)\n     {\n@@ -169,6 +170,7 @@ gfc_match_small_literal_int (int *value)\n \tbreak;\n \n       i = 10 * i + c - '0';\n+      j++;\n \n       if (i > 99999999)\n \t{\n@@ -180,6 +182,7 @@ gfc_match_small_literal_int (int *value)\n   gfc_current_locus = old_loc;\n \n   *value = i;\n+  *cnt = j;\n   return MATCH_YES;\n }\n \n@@ -221,24 +224,31 @@ gfc_match_st_label (gfc_st_label ** label)\n {\n   locus old_loc;\n   match m;\n-  int i;\n+  int i, cnt;\n \n   old_loc = gfc_current_locus;\n \n-  m = gfc_match_small_literal_int (&i);\n+  m = gfc_match_small_literal_int (&i, &cnt);\n   if (m != MATCH_YES)\n     return m;\n \n-  if (i > 0 && i <= 99999)\n+  if (cnt > 5)\n     {\n-      *label = gfc_get_st_label (i);\n-      return MATCH_YES;\n+      gfc_error (\"Too many digits in statement label at %C\");\n+      goto cleanup;\n     }\n \n   if (i == 0)\n-    gfc_error (\"Statement label at %C is zero\");\n-  else\n-    gfc_error (\"Statement label at %C is out of range\");\n+    {\n+      gfc_error (\"Statement label at %C is zero\");\n+      goto cleanup;\n+    }\n+\n+  *label = gfc_get_st_label (i);\n+  return MATCH_YES;\n+\n+cleanup:\n+\n   gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n@@ -1407,21 +1417,22 @@ gfc_match_stopcode (gfc_statement st)\n   int stop_code;\n   gfc_expr *e;\n   match m;\n+  int cnt;\n \n   stop_code = -1;\n   e = NULL;\n \n   if (gfc_match_eos () != MATCH_YES)\n     {\n-      m = gfc_match_small_literal_int (&stop_code);\n+      m = gfc_match_small_literal_int (&stop_code, &cnt);\n       if (m == MATCH_ERROR)\n         goto cleanup;\n \n-      if (m == MATCH_YES && stop_code > 99999)\n-        {\n-          gfc_error (\"STOP code out of range at %C\");\n-          goto cleanup;\n-        }\n+      if (m == MATCH_YES && cnt > 5)\n+\t{\n+\t  gfc_error (\"Too many digits in STOP code at %C\");\n+\t  goto cleanup;\n+\t}\n \n       if (m == MATCH_NO)\n         {"}, {"sha": "1c5115e0b45093e6b51353987ef2872a2a57ade8", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -40,7 +40,7 @@ extern gfc_st_label *gfc_statement_label;\n /* Generic match subroutines */\n match gfc_match_space (void);\n match gfc_match_eos (void);\n-match gfc_match_small_literal_int (int *);\n+match gfc_match_small_literal_int (int *, int *);\n match gfc_match_st_label (gfc_st_label **);\n match gfc_match_label (void);\n match gfc_match_small_int (int *);"}, {"sha": "f53a2e4e5c78943a4c09b5f177b9088bb3cce4ee", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -309,7 +309,7 @@ static gfc_statement\n next_free (void)\n {\n   match m;\n-  int c, d;\n+  int c, d, cnt;\n \n   gfc_gobble_whitespace ();\n \n@@ -323,11 +323,13 @@ next_free (void)\n       d = gfc_peek_char ();\n       if (m != MATCH_YES || !gfc_is_whitespace (d))\n \t{\n-\t  gfc_match_small_literal_int (&c);\n+\t  gfc_match_small_literal_int (&c, &cnt);\n+\n+          if (cnt > 5)\n+\t    gfc_error_now (\"Too many digits in statement label at %C\");\n+\t  \n \t  if (c == 0)\n \t    gfc_error_now (\"Statement label at %C is zero\");\n-\t  else\n-\t    gfc_error_now (\"Statement label at %C is out of range\");\n \n \t  do\n \t    c = gfc_next_char ();"}, {"sha": "b60e0c1283406fcc84ab683ab07942c880f0f316", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -40,8 +40,10 @@ match_kind_param (int *kind)\n   gfc_symbol *sym;\n   const char *p;\n   match m;\n+  int cnt;\n \n-  m = gfc_match_small_literal_int (kind);\n+  /* cnt is unused, here.  */\n+  m = gfc_match_small_literal_int (kind, &cnt);\n   if (m != MATCH_NO)\n     return m;\n "}, {"sha": "bd4561a26343d0bc7107e3f9568aa2751096e946", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -1,3 +1,7 @@\n+2005-12-16  Steven G. Kargl <kargls@comcast.net>\n+\n+\tgfortran.dg/label_1.f90: New test.\n+\n 2005-12-15  Ben Elliston  <bje@au.ibm.com>\n \n \tPR testsuite/25422"}, {"sha": "149c79f10297129bb7c348f21073dc05d3a3aae9", "filename": "gcc/testsuite/gfortran.dg/label_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ftestsuite%2Fgfortran.dg%2Flabel_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8f7eca50fad0eee67e05076b9bbdea8ab97799/gcc%2Ftestsuite%2Fgfortran.dg%2Flabel_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flabel_1.f90?ref=8a8f7eca50fad0eee67e05076b9bbdea8ab97799", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! Test the fix for PR 25106 and 25055.\n+\n+program a\n+0056780 continue    ! { dg-error \"Too many digits\" }\n+0 continue          ! { dg-error \"Statement label at\" }\n+  stop 001234       ! { dg-error \"Too many digits\" }\n+end program a\n+\n+"}]}