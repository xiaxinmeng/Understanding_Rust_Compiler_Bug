{"sha": "6b3a1ce9f4f8b780f5fab81cddb81f517a036532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzYTFjZTlmNGY4Yjc4MGY1ZmFiODFjZGRiODFmNTE3YTAzNjUzMg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-06-29T16:03:34Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-06-29T16:03:34Z"}, "message": "re PR target/65697 (__atomic memory barriers not strong enough for __sync builtins)\n\n2015-06-29  Matthew Wahab  <matthew.wahab@arm.com>\n\n\tPR target/65697\n\t* config/armc/arm.c (arm_split_atomic_op): For ARMv8, replace an\n\tinitial acquire barrier with final barrier.\n\nFrom-SVN: r225132", "tree": {"sha": "ac3155f5959d9c673ae9a1110de94891d966c151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac3155f5959d9c673ae9a1110de94891d966c151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b3a1ce9f4f8b780f5fab81cddb81f517a036532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3a1ce9f4f8b780f5fab81cddb81f517a036532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3a1ce9f4f8b780f5fab81cddb81f517a036532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3a1ce9f4f8b780f5fab81cddb81f517a036532/comments", "author": null, "committer": null, "parents": [{"sha": "e85f8bb8b3aecde1a86c40ffc3a8ab28bc80276c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85f8bb8b3aecde1a86c40ffc3a8ab28bc80276c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85f8bb8b3aecde1a86c40ffc3a8ab28bc80276c"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "2a7ef9d10502486d8bd6ce9ce15a54746f403539", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3a1ce9f4f8b780f5fab81cddb81f517a036532/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3a1ce9f4f8b780f5fab81cddb81f517a036532/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b3a1ce9f4f8b780f5fab81cddb81f517a036532", "patch": "@@ -1,3 +1,9 @@\n+2015-06-29  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\tPR target/65697\n+\t* config/armc/arm.c (arm_split_atomic_op): For ARMv8, replace an\n+\tinitial acquire barrier with final barrier.\n+\n 2015-06-29  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/constraints.md (Bf): New constraint."}, {"sha": "56677634ee01acdc0db317b4e08fa9e1b8c8a9e3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3a1ce9f4f8b780f5fab81cddb81f517a036532/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3a1ce9f4f8b780f5fab81cddb81f517a036532/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6b3a1ce9f4f8b780f5fab81cddb81f517a036532", "patch": "@@ -27679,6 +27679,8 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n   rtx_code_label *label;\n   rtx x;\n \n+  bool is_armv8_sync = arm_arch8 && is_mm_sync (model);\n+\n   bool use_acquire = TARGET_HAVE_LDACQ\n                      && !(is_mm_relaxed (model) || is_mm_consume (model)\n \t\t\t  || is_mm_release (model));\n@@ -27687,6 +27689,11 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n                      && !(is_mm_relaxed (model) || is_mm_consume (model)\n \t\t\t  || is_mm_acquire (model));\n \n+  /* For ARMv8, a load-acquire is too weak for __sync memory orders.  Instead,\n+     a full barrier is emitted after the store-release.  */\n+  if (is_armv8_sync)\n+    use_acquire = false;\n+\n   /* Checks whether a barrier is needed and emits one accordingly.  */\n   if (!(use_acquire || use_release))\n     arm_pre_atomic_barrier (model);\n@@ -27757,7 +27764,8 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n   emit_unlikely_jump (gen_cbranchsi4 (x, cond, const0_rtx, label));\n \n   /* Checks whether a barrier is needed and emits one accordingly.  */\n-  if (!(use_acquire || use_release))\n+  if (is_armv8_sync\n+      || !(use_acquire || use_release))\n     arm_post_atomic_barrier (model);\n }\n \f"}]}