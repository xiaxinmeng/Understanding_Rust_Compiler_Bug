{"sha": "1e74f08c141eca935005d45840f2b77acbf63531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3NGYwOGMxNDFlY2E5MzUwMDVkNDU4NDBmMmI3N2FjYmY2MzUzMQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-12T15:19:05Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-19T14:30:23Z"}, "message": "Add QualifiedTypePath HIR lowering\n\nQualifiedTypePath resolution differs from normal PathInExpressions and can\nresolve to trait items this adds the hir lowering for this.", "tree": {"sha": "afc2d4f4f2cbefcadc5f2da6caa91bff59c0c342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc2d4f4f2cbefcadc5f2da6caa91bff59c0c342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e74f08c141eca935005d45840f2b77acbf63531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e74f08c141eca935005d45840f2b77acbf63531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e74f08c141eca935005d45840f2b77acbf63531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e74f08c141eca935005d45840f2b77acbf63531/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3475f10cbf58ff748298be438a4bf8cf98fec4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3475f10cbf58ff748298be438a4bf8cf98fec4ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3475f10cbf58ff748298be438a4bf8cf98fec4ab"}], "stats": {"total": 155, "additions": 115, "deletions": 40}, "files": [{"sha": "07489f86e231b70f84566aa8ac7364cf78ed3449", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=1e74f08c141eca935005d45840f2b77acbf63531", "patch": "@@ -284,6 +284,9 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::Type *lower_type_no_bounds (AST::TypeNoBounds *type);\n \n   HIR::TypeParamBound *lower_bound (AST::TypeParamBound *bound);\n+\n+  HIR::QualifiedPathType\n+  lower_qual_path_type (AST::QualifiedPathType &qual_path_type);\n };\n \n } // namespace HIR"}, {"sha": "3415567c86b1ee55b2ddda2d0fd10e1fa5bd69ad", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=1e74f08c141eca935005d45840f2b77acbf63531", "patch": "@@ -48,6 +48,28 @@ class ASTLowerPathInExpression : public ASTLoweringBase\n   HIR::PathInExpression *translated;\n };\n \n+class ASTLowerQualPathInExpression : public ASTLoweringBase\n+{\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n+public:\n+  static HIR::QualifiedPathInExpression *\n+  translate (AST::QualifiedPathInExpression *expr)\n+  {\n+    ASTLowerQualPathInExpression compiler;\n+    expr->accept_vis (compiler);\n+    rust_assert (compiler.translated);\n+    return compiler.translated;\n+  }\n+\n+  void visit (AST::QualifiedPathInExpression &expr) override;\n+\n+private:\n+  ASTLowerQualPathInExpression () : translated (nullptr) {}\n+\n+  HIR::QualifiedPathInExpression *translated;\n+};\n+\n class ASTLoweringExpr : public ASTLoweringBase\n {\n   using Rust::HIR::ASTLoweringBase::visit;\n@@ -145,6 +167,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated = ASTLowerPathInExpression::translate (&expr);\n   }\n \n+  void visit (AST::QualifiedPathInExpression &expr) override\n+  {\n+    translated = ASTLowerQualPathInExpression::translate (&expr);\n+  }\n+\n   void visit (AST::ReturnExpr &expr) override\n   {\n     terminated = true;"}, {"sha": "e693799d4b5f9d4a498903cf4ebd1a3f0585a7d0", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=1e74f08c141eca935005d45840f2b77acbf63531", "patch": "@@ -282,6 +282,55 @@ ASTLowerPathInExpression::visit (AST::PathInExpression &expr)\n \t\t\t\t\t  expr.opening_scope_resolution ());\n }\n \n+HIR::QualifiedPathType\n+ASTLoweringBase::lower_qual_path_type (AST::QualifiedPathType &qualified_type)\n+{\n+  HIR::Type *type\n+    = ASTLoweringType::translate (qualified_type.get_type ().get ());\n+  HIR::TypePath *trait\n+    = qualified_type.has_as_clause ()\n+\t? ASTLowerTypePath::translate (qualified_type.get_as_type_path ())\n+\t: nullptr;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, qualified_type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  return HIR::QualifiedPathType (mapping, std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t std::unique_ptr<HIR::TypePath> (trait),\n+\t\t\t\t qualified_type.get_locus ());\n+}\n+\n+void\n+ASTLowerQualPathInExpression::visit (AST::QualifiedPathInExpression &expr)\n+{\n+  HIR::QualifiedPathType qual_path_type\n+    = lower_qual_path_type (expr.get_qualified_path_type ());\n+\n+  std::vector<HIR::PathExprSegment> path_segments;\n+  expr.iterate_path_segments ([&] (AST::PathExprSegment &s) mutable -> bool {\n+    path_segments.push_back (lower_path_expr_seg (s));\n+\n+    // insert the mappings for the segment\n+    HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n+    mappings->insert_hir_path_expr_seg (\n+      lowered_seg->get_mappings ().get_crate_num (),\n+      lowered_seg->get_mappings ().get_hirid (), lowered_seg);\n+    return true;\n+  });\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::QualifiedPathInExpression (mapping, qual_path_type,\n+\t\t\t\t\t\t   std::move (path_segments),\n+\t\t\t\t\t\t   expr.get_locus (),\n+\t\t\t\t\t\t   expr.get_outer_attrs ());\n+}\n+\n // rust-ast-lower-base.h\n \n std::vector<std::unique_ptr<HIR::GenericParam> >"}, {"sha": "62262a29cfd5a6b227f3c4dee742aef208d4af5f", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=1e74f08c141eca935005d45840f2b77acbf63531", "patch": "@@ -1192,11 +1192,11 @@ std::string\n QualifiedPathType::as_string () const\n {\n   std::string str (\"<\");\n-  str += type_to_invoke_on->as_string ();\n+  str += type->as_string ();\n \n   if (has_as_clause ())\n     {\n-      str += \" as \" + trait_path.as_string ();\n+      str += \" as \" + trait->as_string ();\n     }\n \n   return str + \">\";"}, {"sha": "a8bbbb62ef6a847e570bb1e8cb2c368511ca8c91", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 34, "deletions": 38, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e74f08c141eca935005d45840f2b77acbf63531/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=1e74f08c141eca935005d45840f2b77acbf63531", "patch": "@@ -709,26 +709,26 @@ class TypePath : public TypeNoBounds\n struct QualifiedPathType\n {\n private:\n-  std::unique_ptr<Type> type_to_invoke_on;\n-\n-  // bool has_as_clause;\n-  TypePath trait_path;\n-\n+  std::unique_ptr<Type> type;\n+  std::unique_ptr<TypePath> trait;\n   Location locus;\n+  Analysis::NodeMapping mappings;\n \n public:\n   // Constructor\n-  QualifiedPathType (std::unique_ptr<Type> invoke_on_type,\n-\t\t     Location locus = Location (),\n-\t\t     TypePath trait_path = TypePath::create_error ())\n-    : type_to_invoke_on (std::move (invoke_on_type)),\n-      trait_path (std::move (trait_path)), locus (locus)\n+  QualifiedPathType (Analysis::NodeMapping mappings, std::unique_ptr<Type> type,\n+\t\t     std::unique_ptr<TypePath> trait, Location locus)\n+    : type (std::move (type)), trait (std::move (trait)), locus (locus),\n+      mappings (mappings)\n   {}\n \n   // Copy constructor uses custom deep copy for Type to preserve polymorphism\n   QualifiedPathType (QualifiedPathType const &other)\n-    : type_to_invoke_on (other.type_to_invoke_on->clone_type ()),\n-      trait_path (other.trait_path), locus (other.locus)\n+    : type (other.type->clone_type ()),\n+      trait (other.has_as_clause () ? std::unique_ptr<HIR::TypePath> (\n+\t       new HIR::TypePath (*other.trait))\n+\t\t\t\t    : nullptr),\n+      locus (other.locus), mappings (other.mappings)\n   {}\n \n   // default destructor\n@@ -737,9 +737,14 @@ struct QualifiedPathType\n   // overload assignment operator to use custom clone method\n   QualifiedPathType &operator= (QualifiedPathType const &other)\n   {\n-    type_to_invoke_on = other.type_to_invoke_on->clone_type ();\n-    trait_path = other.trait_path;\n+    type = other.type->clone_type ();\n     locus = other.locus;\n+    mappings = other.mappings;\n+    trait\n+      = other.has_as_clause ()\n+\t  ? std::unique_ptr<HIR::TypePath> (new HIR::TypePath (*other.trait))\n+\t  : nullptr;\n+\n     return *this;\n   }\n \n@@ -748,20 +753,21 @@ struct QualifiedPathType\n   QualifiedPathType &operator= (QualifiedPathType &&other) = default;\n \n   // Returns whether the qualified path type has a rebind as clause.\n-  bool has_as_clause () const { return !trait_path.is_error (); }\n-\n-  // Returns whether the qualified path type is in an error state.\n-  bool is_error () const { return type_to_invoke_on == nullptr; }\n-\n-  // Creates an error state qualified path type.\n-  static QualifiedPathType create_error ()\n-  {\n-    return QualifiedPathType (nullptr);\n-  }\n+  bool has_as_clause () const { return trait != nullptr; }\n \n   std::string as_string () const;\n \n   Location get_locus () const { return locus; }\n+\n+  Analysis::NodeMapping get_mappings () const { return mappings; }\n+\n+  std::unique_ptr<Type> &get_type () { return type; }\n+\n+  std::unique_ptr<TypePath> &get_trait ()\n+  {\n+    rust_assert (has_as_clause ());\n+    return trait;\n+  }\n };\n \n /* HIR node representing a qualified path-in-expression pattern (path that\n@@ -785,25 +791,15 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n       path_type (std::move (qual_path_type)), locus (locus)\n   {}\n \n-  /* TODO: maybe make a shortcut constructor that has QualifiedPathType elements\n-   * as params */\n-\n-  // Returns whether qualified path in expression is in an error state.\n-  bool is_error () const { return path_type.is_error (); }\n-\n-  // Creates an error qualified path in expression.\n-  static QualifiedPathInExpression create_error ()\n-  {\n-    return QualifiedPathInExpression (Analysis::NodeMapping::get_error (),\n-\t\t\t\t      QualifiedPathType::create_error (),\n-\t\t\t\t      std::vector<PathExprSegment> ());\n-  }\n-\n   Location get_locus () const { return locus; }\n   Location get_locus_slow () const override { return get_locus (); }\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  QualifiedPathType &get_path_type () { return path_type; }\n+\n+  Location get_locus () { return locus; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}]}