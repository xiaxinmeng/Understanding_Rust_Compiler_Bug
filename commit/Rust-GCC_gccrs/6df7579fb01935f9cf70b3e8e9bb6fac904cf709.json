{"sha": "6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmNzU3OWZiMDE5MzVmOWNmNzBiM2U4ZTliYjZmYWM5MDRjZjcwOQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-29T07:09:46Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-29T07:09:46Z"}, "message": "AVX-512. 87/n. Add rest of the tests.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512bw-check.h: New.\n\t* gcc.target/i386/avx512bw-kunpckdq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kunpckwd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vdbpsadbw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vdbpsadbw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vmovdqu16-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vmovdqu16-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vmovdqu8-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vmovdqu8-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpabsb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpabsb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpabsw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpabsw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpackssdw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpackssdw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpacksswb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpacksswb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpackusdw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpackusdw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpackuswb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpackuswb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddsb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddsb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddsw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddsw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddusb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddusb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddusw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddusw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpaddw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpalignr-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpalignr-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpavgb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpavgb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpavgw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpavgw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpblendmb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpblendmb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpblendmw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpblendmw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpbroadcastb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpbroadcastb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpbroadcastw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpbroadcastw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpeqb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpeqb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpeqw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpeqw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpub-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpub-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpermi2w-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpermi2w-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpermt2w-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpermt2w-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpermw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpermw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaddubsw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaddubsw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaddwd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaddwd-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxsb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxsb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxsw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxsw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxub-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxub-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmaxuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminsb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminsb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminsw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminsw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminub-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminub-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpminuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovb2m-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovb2m-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovm2b-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovm2b-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovm2w-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovm2w-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovswb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovswb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovsxbw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovsxbw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovuswb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovuswb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovw2m-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovw2m-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovwb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovwb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovzxbw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovzxbw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmulhrsw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmulhrsw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmulhuw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmulhuw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmulhw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmulhw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmullw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmullw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpshufb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpshufb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpshufhw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpshufhw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpshuflw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpshuflw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpslldq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsllvw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsllvw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsllw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsllw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsllwi-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsllwi-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsravw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsravw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsraw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsraw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrawi-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrawi-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrldq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrlvw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrlvw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrlw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrlw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrlwi-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsrlwi-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubsb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubsb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubsw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubsw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubusb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubusb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubusw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubusw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpsubw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestmb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestmb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestmw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestmw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestnmb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestnmb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestnmw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vptestnmw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpckhbw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpckhbw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpckhwd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpckhwd-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpcklbw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpcklbw-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpcklwd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpunpcklwd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-check.h: Ditto.\n\t* gcc.target/i386/avx512dq-vandnpd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vandnpd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vandnps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vandnps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vandpd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vandpd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vandps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vandps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcastf32x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcastf32x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcastf32x8-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcastf32x8-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcastf64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcastf64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcasti32x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcasti32x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcasti32x8-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcasti32x8-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcasti64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vbroadcasti64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtpd2qq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtpd2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtpd2uqq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtpd2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtps2qq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtps2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtps2uqq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtps2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtqq2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtqq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtqq2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtqq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttpd2qq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttpd2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttpd2uqq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttpd2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttps2qq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttps2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttps2uqq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvttps2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtuqq2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtuqq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtuqq2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vcvtuqq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vextractf32x8-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vextractf64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vextractf64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vextracti32x8-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vextracti64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vextracti64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vfpclasspd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vfpclasspd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vfpclassps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vfpclassps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vfpclasssd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vfpclassss-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vinsertf32x8-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vinsertf64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vinsertf64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vinserti32x8-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vinserti64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vinserti64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vorpd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vorpd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vorps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vorps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovd2m-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovd2m-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovm2d-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovm2d-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovm2q-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovm2q-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovq2m-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmovq2m-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmullq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vpmullq-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vrangepd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vrangepd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vrangeps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vrangeps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vrangesd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vrangess-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducepd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducepd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreduceps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreduceps-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducesd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vreducess-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vxorpd-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vxorpd-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-vxorps-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-vxorps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-check.h: Ditto.\n\t* gcc.target/i386/avx512vl-gather-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32gatherd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32gatherpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32gatherps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32gatherq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32scatterd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32scatterpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32scatterps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i32scatterq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64gatherd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64gatherpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64gatherps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64gatherq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64scatterd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64scatterpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64scatterps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-i64scatterq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vaddpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vaddpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vaddps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vaddps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-valignd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-valignd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-valignq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-valignq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vandnpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vandnps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vandpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vandps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vblendmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vblendmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vblendmps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vblendmps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastf32x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastf32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastf32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastf64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcasti32x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcasti32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcasti32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcasti64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastsd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastsd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastss-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vbroadcastss-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcmppd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcmppd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcmpps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcmpps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcompresspd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcompresspd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcompressps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcompressps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtdq2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtdq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtdq2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtdq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtpd2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtph2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtph2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2ph-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2ph-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtps2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtqq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtqq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttpd2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttpd2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttpd2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttpd2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttpd2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttpd2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttps2dq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttps2dq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttps2qq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttps2udq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttps2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvttps2uqq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtudq2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtudq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtudq2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtudq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtuqq2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vcvtuqq2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vdbpsadbw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vdivpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vdivpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vdivps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vdivps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vexpandpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vexpandpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vexpandps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vexpandps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vextractf32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vextractf32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vextractf64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vextracti32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vextracti32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vextracti64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfixupimmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfixupimmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfixupimmps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfixupimmps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddsubXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddsubXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddsubXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmaddsubXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubaddXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubaddXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubaddXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfmsubaddXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmaddXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmaddXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmaddXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmaddXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmsubXXXpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmsubXXXpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmsubXXXps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfnmsubXXXps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfpclasspd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vfpclassps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetexppd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetexppd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetexpps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetexpps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetmantpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetmantpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetmantps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vgetmantps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vinsertf32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vinsertf32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vinsertf64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vinserti32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vinserti32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vinserti64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmaxpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmaxpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmaxps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmaxps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vminpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vminpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vminps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vminps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovapd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovapd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovaps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovaps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovddup-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovddup-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa32-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa32-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa64-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa64-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqu16-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqu32-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqu32-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqu64-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqu64-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqu8-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovntdqa-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovshdup-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovshdup-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovsldup-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovsldup-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovupd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovupd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovups-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovups-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmulpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmulpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmulps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmulps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vorpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vorps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpabsb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpabsd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpabsd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpabsq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpabsq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpabsw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpackssdw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpacksswb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpackusdw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpackuswb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddsb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddsw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddusb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddusw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpaddw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpalignr-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandnd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandnd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandnq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandnq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpandq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpavgb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpavgw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpblendmb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpblendmd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpblendmd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpblendmq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpblendmq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpblendmw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastmb2q-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastmw2d-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpbroadcastw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpged-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgeq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgeud-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgeuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpled-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpleq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpleud-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpleuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltud-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpltuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpneqd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpneqq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpnequd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpnequq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpub-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpud-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpud-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpuq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpuw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcompressd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcompressd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcompressq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcompressq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpconflictd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpconflictq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2d-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2d-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2q-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2q-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermi2w-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilpdi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilpdi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilpsi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermilpsi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermpdi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermpdi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermq-imm-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermq-imm-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermq-var-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermq-var-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2d-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2d-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2pd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2q-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2q-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermt2w-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpermw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpexpandd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpexpandd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpexpandq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpexpandq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vplzcntd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vplzcntq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaddubsw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaddwd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxsb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxsd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxsd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxsq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxsq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxsw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxub-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxud-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxud-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxuq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmaxuw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminsb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminsd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminsd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminsq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminsq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminsw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminub-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminud-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminud-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminuq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminuq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpminuw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovb2m-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovd2m-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovdb-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovdb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovdw-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovdw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovm2b-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovm2d-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovm2q-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovm2w-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovq2m-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovqb-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovqb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovqd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovqd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovqw-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovqw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsdb-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsdb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsdw-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsdw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsqb-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsqb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsqd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsqd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsqw-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsqw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovswb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxbd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxbd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxbq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxbq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxbw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxdq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxdq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxwd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxwd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxwq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovsxwq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusdb-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusdb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusdw-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusdw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusqb-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusqb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusqd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusqd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusqw-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovusqw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovuswb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovw2m-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovwb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxbd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxbd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxbq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxbq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxbw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxdq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxdq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxwd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxwd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxwq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmovzxwq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmuldq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmuldq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmulhrsw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmulhuw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmulhw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmulld-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmulld-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmullq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmullw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmuludq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpmuludq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpord-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpord-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vporq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vporq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprold-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprold-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprolq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprolq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprolvd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprolvd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprolvq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprolvq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprord-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprord-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprorq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprorq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprorvd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprorvd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprorvq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vprorvq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsadbw-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshufb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshufd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshufd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshufhw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshuflw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpslld-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpslld-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpslldi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpslldi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllqi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllqi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllvd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllvd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllvq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllvq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllvw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsllwi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrad-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrad-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsradi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsradi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsraq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsraq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsraqi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsraqi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsravd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsravd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsravq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsravq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsravw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsraw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrawi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrld-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrld-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrldi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrldi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlqi-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlqi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlvd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlvd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlvq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlvq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlvw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsrlwi-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubsb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubsw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubusb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubusw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpsubw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpternlogd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpternlogd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpternlogq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpternlogq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestmb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestmd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestmd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestmq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestmq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestmw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestnmb-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestnmd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestnmd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestnmq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestnmq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vptestnmw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckhbw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckhdq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckhdq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckhqdq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckhqdq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckhwd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpcklbw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckldq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpckldq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpcklqdq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpcklqdq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpunpcklwd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpxord-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpxord-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpxorq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpxorq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrangepd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrangeps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrcp14pd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrcp14pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrcp14ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrcp14ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vreducepd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vreduceps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrndscalepd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrndscalepd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrndscaleps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrndscaleps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrsqrt14pd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrsqrt14pd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrsqrt14ps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vrsqrt14ps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vscalefpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vscalefpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vscalefps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vscalefps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshuff32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshuff32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshuff64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshuff64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufi32x4-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufi32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufi64x2-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufi64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vshufps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsqrtpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsqrtpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsqrtps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsqrtps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsubpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsubpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsubps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vsubps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpckhpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpckhpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpckhps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpckhps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpcklpd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpcklpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpcklps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vunpcklps-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vxorpd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vxorps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-helper.h: Make avx512vl friendly.\n\t* gcc.target/i386/avx512f-mask-type.h: Ditto.\n\t* gcc.target/i386/avx512f-vcmppd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcmpps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtpd2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtph2ps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtps2ph-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvttpd2udq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandnd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandnq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpandq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpbroadcastq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermilpdi-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermq-imm-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpermq-var-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovdb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovdw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovqw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsdb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsdw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovsqw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusdb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusdw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqb-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpmovusqw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpord-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vporq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpxord-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpxorq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalepd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaleps-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshuff32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshuff64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufi32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufi64x2-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vshufpd-2.c: Ditto.\n\t* gcc.target/i386/i386.exp: Ditto.\n\t* gcc.target/i386/m512-check.h: Ditto.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216818", "tree": {"sha": "0ec4d7362a9a5022206b23db70252ecedc15e414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ec4d7362a9a5022206b23db70252ecedc15e414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/comments", "author": null, "committer": null, "parents": [{"sha": "60463738d4fedb82daa367f9892328c9049a9daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60463738d4fedb82daa367f9892328c9049a9daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60463738d4fedb82daa367f9892328c9049a9daa"}], "stats": {"total": 23764, "additions": 23589, "deletions": 175}, "files": [{"sha": "fe3c64ca89c6d52f2d34992cefe183c33b9f2f44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 935, "deletions": 0, "changes": 935, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -1,3 +1,938 @@\n+2014-10-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-check.h: New.\n+\t* gcc.target/i386/avx512bw-kunpckdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kunpckwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vdbpsadbw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vdbpsadbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vmovdqu16-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vmovdqu16-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vmovdqu8-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vmovdqu8-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpabsb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpabsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpabsw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpabsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpackssdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpackssdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpacksswb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpacksswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpackusdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpackusdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpackuswb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpackuswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddsb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddsw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddusb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddusb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddusw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddusw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpaddw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpalignr-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpalignr-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpavgb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpavgb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpavgw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpavgw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpblendmb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpblendmb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpblendmw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpblendmw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpbroadcastb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpbroadcastb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpbroadcastw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpbroadcastw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpeqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpeqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpeqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpeqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpgtw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpub-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpermi2w-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpermi2w-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpermt2w-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpermt2w-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpermw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpermw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaddubsw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaddubsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaddwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaddwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxsb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxsw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxub-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmaxuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminsb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminsw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminub-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpminuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovb2m-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovb2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovm2b-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovm2b-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovm2w-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovm2w-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovswb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovsxbw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovsxbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovuswb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovuswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovw2m-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovw2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovwb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovwb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovzxbw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovzxbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmulhrsw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmulhrsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmulhuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmulhuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmulhw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmulhw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmullw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmullw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpshufb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpshufb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpshufhw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpshufhw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpshuflw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpshuflw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpslldq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsllvw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsllvw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsllw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsllw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsllwi-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsllwi-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsravw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsravw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsraw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsraw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrawi-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrawi-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrldq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrlvw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrlvw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrlw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrlw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrlwi-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsrlwi-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubsb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubsw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubusb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubusb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubusw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubusw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpsubw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestmb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestmb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestmw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestmw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestnmb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestnmb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestnmw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vptestnmw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpckhbw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpckhbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpckhwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpckhwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpcklbw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpcklbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpcklwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpunpcklwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-check.h: Ditto.\n+\t* gcc.target/i386/avx512dq-vandnpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vandnpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vandnps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vandnps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vandpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vandpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vandps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vandps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcastf32x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcastf32x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcastf32x8-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcastf32x8-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcastf64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcastf64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcasti32x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcasti32x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcasti32x8-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcasti32x8-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcasti64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vbroadcasti64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtpd2qq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtpd2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtpd2uqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtpd2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtps2qq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtps2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtps2uqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtps2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtqq2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtqq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtqq2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtqq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttpd2qq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttpd2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttpd2uqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttpd2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttps2qq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttps2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttps2uqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvttps2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtuqq2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtuqq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtuqq2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vcvtuqq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vextractf32x8-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vextractf64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vextractf64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vextracti32x8-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vextracti64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vextracti64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vfpclasspd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vfpclasspd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vfpclassps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vfpclassps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vfpclasssd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vfpclassss-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vinsertf32x8-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vinsertf64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vinsertf64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vinserti32x8-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vinserti64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vinserti64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vorpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vorpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vorps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vorps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovd2m-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovd2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovm2d-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovm2d-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovm2q-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovm2q-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovq2m-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmovq2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmullq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vpmullq-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vrangepd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vrangepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vrangeps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vrangeps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vrangesd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vrangess-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducepd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreduceps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreduceps-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducesd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducess-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vxorpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vxorpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vxorps-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vxorps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-check.h: Ditto.\n+\t* gcc.target/i386/avx512vl-gather-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32gatherd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32gatherpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32gatherps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32gatherq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32scatterd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32scatterpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32scatterps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i32scatterq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64gatherd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64gatherpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64gatherps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64gatherq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64scatterd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64scatterpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64scatterps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-i64scatterq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vaddpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vaddpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vaddps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vaddps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-valignd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-valignd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-valignq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-valignq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vandnpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vandnps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vandpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vandps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vblendmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vblendmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vblendmps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vblendmps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastf32x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastf32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastf32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastf64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcasti32x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcasti32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcasti32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcasti64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastss-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vbroadcastss-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcmppd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcmppd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcmpps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcmpps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcompresspd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcompresspd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcompressps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcompressps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtdq2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtdq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtdq2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtdq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtpd2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtph2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtph2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2ph-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2ph-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtqq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtqq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttpd2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttpd2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttpd2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttpd2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttpd2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttpd2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttps2dq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttps2dq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttps2qq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttps2udq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttps2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvttps2uqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtudq2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtudq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtudq2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtudq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtuqq2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtuqq2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vdbpsadbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vdivpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vdivpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vdivps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vdivps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vexpandpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vexpandpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vexpandps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vexpandps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vextractf32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vextractf32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vextractf64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vextracti32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vextracti32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vextracti64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfixupimmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfixupimmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfixupimmps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfixupimmps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddsubXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddsubXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddsubXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmaddsubXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubaddXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubaddXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubaddXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfmsubaddXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmaddXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmaddXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmaddXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmaddXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmsubXXXpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmsubXXXpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmsubXXXps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfnmsubXXXps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfpclasspd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vfpclassps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetexppd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetexppd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetexpps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetexpps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetmantpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetmantpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetmantps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vgetmantps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vinsertf32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vinsertf32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vinsertf64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vinserti32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vinserti32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vinserti64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmaxpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmaxpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmaxps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmaxps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vminpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vminpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vminps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vminps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovapd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovapd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovaps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovaps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovddup-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovddup-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa32-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa32-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa64-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa64-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqu16-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqu32-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqu32-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqu64-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqu64-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqu8-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovntdqa-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovshdup-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovshdup-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovsldup-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovsldup-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovupd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovupd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovups-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovups-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmulpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmulpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmulps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmulps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vorpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vorps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpabsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpabsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpabsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpabsq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpabsq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpabsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpackssdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpacksswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpackusdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpackuswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddusb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddusw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpaddw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpalignr-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandnd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandnd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandnq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandnq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpandq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpavgb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpavgw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpblendmb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpblendmd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpblendmd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpblendmq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpblendmq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpblendmw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastmb2q-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastmw2d-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpbroadcastw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpeqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpged-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgeq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgeud-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgeuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpgtw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpled-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpleq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpleud-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpleuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltud-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpltuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpneqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpneqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpnequd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpnequq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpub-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpud-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcompressd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcompressd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcompressq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcompressq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpconflictd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpconflictq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2d-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2d-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2q-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2q-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermi2w-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilpdi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilpdi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilpsi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermilpsi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermpdi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermpdi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermq-imm-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermq-imm-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermq-var-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermq-var-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2d-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2d-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2q-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2q-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermt2w-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpermw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpexpandd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpexpandd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpexpandq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpexpandq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vplzcntd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vplzcntq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaddubsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaddwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxsq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxsq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxub-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxud-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmaxuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminsq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminsq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminub-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminud-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpminuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovb2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovd2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovdb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovm2b-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovm2d-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovm2q-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovm2w-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovq2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsdb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxbd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxbd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxbq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxbq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxwq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovsxwq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusdb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusdw-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusqb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusqw-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovusqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovuswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovw2m-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovwb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxbd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxbd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxbq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxbq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxwd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxwq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmovzxwq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmuldq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmuldq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmulhrsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmulhuw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmulhw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmulld-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmulld-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmullq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmullw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmuludq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpmuludq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpord-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpord-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vporq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vporq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprold-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprold-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprolq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprolq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprolvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprolvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprolvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprolvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprord-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprord-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprorq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprorq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprorvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprorvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprorvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vprorvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsadbw-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshufb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshufd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshufd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshufhw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshuflw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpslld-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpslld-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpslldi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpslldi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllqi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllqi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllvw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsllwi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrad-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrad-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsradi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsradi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsraq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsraq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsraqi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsraqi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsravd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsravd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsravq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsravq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsravw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsraw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrawi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrld-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrld-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrldi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrldi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlqi-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlqi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlvd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlvq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlvw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsrlwi-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubsb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubsw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubusb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubusw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpsubw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpternlogd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpternlogd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpternlogq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpternlogq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestmb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestmd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestmd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestmq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestmq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestmw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestnmb-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestnmd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestnmd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestnmq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestnmq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vptestnmw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckhbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckhdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckhdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckhqdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckhqdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckhwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpcklbw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckldq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpckldq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpcklqdq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpcklqdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpunpcklwd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpxord-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpxord-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpxorq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpxorq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrangepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrangeps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrcp14pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrcp14pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrcp14ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrcp14ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vreducepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vreduceps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrndscalepd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrndscalepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrndscaleps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrndscaleps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrsqrt14pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrsqrt14pd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrsqrt14ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vrsqrt14ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vscalefpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vscalefpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vscalefps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vscalefps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshuff32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshuff32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshuff64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshuff64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufi32x4-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufi32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufi64x2-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufi64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vshufps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsqrtpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsqrtpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsqrtps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsqrtps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsubpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsubpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsubps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vsubps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpckhpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpckhpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpckhps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpckhps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpcklpd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpcklpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpcklps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vunpcklps-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vxorpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vxorps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-helper.h: Make avx512vl friendly.\n+\t* gcc.target/i386/avx512f-mask-type.h: Ditto.\n+\t* gcc.target/i386/avx512f-vcmppd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcmpps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtpd2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtph2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtps2ph-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvttpd2udq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandnd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandnq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpandq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpbroadcastq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermilpdi-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermq-imm-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpermq-var-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovsqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqb-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpmovusqw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpord-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vporq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpxord-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpxorq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalepd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaleps-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshuff32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshuff64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufi32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufi64x2-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vshufpd-2.c: Ditto.\n+\t* gcc.target/i386/i386.exp: Ditto.\n+\t* gcc.target/i386/m512-check.h: Ditto.\n+\n+2014-10-29  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add new options.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Add new options and builtins.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx-1.c: Add new builtins.\n+\n 2014-10-28  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n         * gcc.misc-tests/godump.exp: New."}, {"sha": "4cae3092fe7d8b1ee8b67b3897ee5559760b71d0", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-check.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-check.h?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,47 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512bw_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512bw_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX512BW test only if host has AVX512BW support.  */\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ebx & bit_AVX512BW) == bit_AVX512BW))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "16fce46f8e1105281884535635109584f569cb49", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kunpckdq-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckdq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckdq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckdq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kunpckdq\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  __mmask64 k1, k2, k3;\n+  volatile __m512i x;\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kunpackd (k1, k2);\n+  x = _mm512_mask_avg_epu8 (x, k3, x, x);\n+}"}, {"sha": "eece5e8f2644edb11d65ab675f7ce0673df73c0c", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kunpckwd-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kunpckwd\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  volatile __mmask32 k1, k2, k3;\n+  volatile __m256i x;\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _mm512_kunpackw (k1, k2);\n+  //x = _mm256_mask_avg_epu8 (x, k3, x, x);\n+}"}, {"sha": "3a6522cbee73028a7d0d1331068e6b23de2dbb9d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vdbpsadbw-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vdbpsadbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vdbpsadbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vdbpsadbw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdbpsadbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x, a;\n+volatile __m256i y, b;\n+volatile __m128i z, c;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_dbsad_epu8 (a, a, 0xaa);\n+  x = _mm512_mask_dbsad_epu8 (x, m1, a, a, 0xaa);\n+  x = _mm512_maskz_dbsad_epu8 (m1, a, a, 0xaa);\n+  y = _mm256_dbsad_epu8 (b, b, 0xbb);\n+  y = _mm256_mask_dbsad_epu8 (y, m2, b, b, 0xbb);\n+  y = _mm256_maskz_dbsad_epu8 (m2, b, b, 0xbb);\n+  z = _mm_dbsad_epu8 (c, c, 0xcc);\n+  z = _mm_mask_dbsad_epu8 (z, m3, c, c, 0xcc);\n+  z = _mm_maskz_dbsad_epu8 (m3, c, c, 0xcc);\n+}"}, {"sha": "cbd50d3a7ef6922241b4c411fa7d9668282de569", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vdbpsadbw-2.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vdbpsadbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vdbpsadbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vdbpsadbw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned short *dst, unsigned char *src1, unsigned char *src2,\n+      int imm)\n+{\n+  int i, j, k, part, power;\n+  unsigned char tmp[2 * SIZE];;\n+\n+  for (i = 0; i < 2 * SIZE; i += 16)\n+    {\n+      for (j = 0; j < 4; j++)\n+\t{\n+\t  power = 1;\n+\t  for (k = 0; k < j; k++)\n+\t    power *= 4;\n+\t  part = (imm & (3 * power)) >> (2 * j);\n+\t  for (k = 0; k < 4; k++)\n+\t    tmp[i + 4 * j + k] = src2[i + 4 * part + k];\n+\t}\n+    }\n+\n+  for (i = 0; i < SIZE; i += 4)\n+    {\n+      dst[i] = dst[i + 1] = dst[i + 2] = dst[i + 3] = 0;\n+      for (j = 0; j < 4; j++)\n+\t{\n+\t  dst[i] += abs (src1[2 * i + j] - tmp[2 * i + j]);\n+\t  dst[i + 1] += abs (src1[2 * i + j] - tmp[2 * i + j + 1]);\n+\t  dst[i + 2] += abs (src1[2 * i + j + 4] - tmp[2 * i + j + 2]);\n+\t  dst[i + 3] += abs (src1[2 * i + j + 4] - tmp[2 * i + j + 3]);\n+\t}\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short res_ref[SIZE];\n+  int imm = 0x22;\n+\n+  sign = -1;\n+  for (i = 0; i < 2*SIZE; i++)\n+    {\n+      src1.a[i] = 1 + 34 * i * sign;\n+      src1.a[i] = 179 - i;\n+      sign = sign * -1;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+      res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_dbsad_epu8) (src1.x, src2.x, imm);\n+  res2.x = INTRINSIC (_mask_dbsad_epu8) (res2.x, mask, src1.x, src2.x, imm);\n+  res3.x = INTRINSIC (_maskz_dbsad_epu8) (mask, src1.x, src2.x, imm);\n+\n+  CALC (res_ref, src1.a, src2.a, imm);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "96682a5611890ffd3f42fd32b5d1a23f55fab71f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu16-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+short *p;\n+volatile __m512i x1, yy;\n+volatile __m256i x2, y2;\n+volatile __m128i x3, y3;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x1 = _mm512_mask_mov_epi16 (x1, m32, yy);\n+  x2 = _mm256_mask_mov_epi16 (x2, m16, y2);\n+  x3 = _mm_mask_mov_epi16 (x3, m8, y3);\n+\n+  x1 = _mm512_maskz_mov_epi16 (m32, yy);\n+  x2 = _mm256_maskz_mov_epi16 (m16, y2);\n+  x3 = _mm_maskz_mov_epi16 (m8, y3);\n+\n+  x1 = _mm512_mask_loadu_epi16 (x1, m32, p);\n+  x2 = _mm256_mask_loadu_epi16 (x2, m16, p);\n+  x3 = _mm_mask_loadu_epi16 (x3, m8, p);\n+\n+  x1 = _mm512_maskz_loadu_epi16 (m32, p);\n+  x2 = _mm256_maskz_loadu_epi16 (m16, p);\n+  x3 = _mm_maskz_loadu_epi16 (m8, p);\n+\n+  _mm512_mask_storeu_epi16 (p, m32, x1);\n+  _mm256_mask_storeu_epi16 (p, m16, x2);\n+  _mm_mask_storeu_epi16 (p, m8, x3);\n+}"}, {"sha": "48a59b8482433fb44cebd7f7b111493df7b4d03e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu16-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE ((AVX512F_LEN) / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+typedef struct\n+{\n+  char c;\n+  short a[SIZE];\n+} __attribute__ ((packed)) EVAL(unaligned_array, AVX512F_LEN,);\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s3, res1, res2, res3, res4;\n+  EVAL(unaligned_array, AVX512F_LEN,) s2, res5;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 123 * i * sign;\n+      s2.a[i] = 456 * i * sign;\n+      s3.a[i] = 789 * i * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_mov_epi16) (res1.x, mask, s1.x);\n+  res2.x = INTRINSIC (_maskz_mov_epi16) (mask, s1.x);\n+  res3.x = INTRINSIC (_mask_loadu_epi16) (res3.x, mask, s2.a);\n+  res4.x = INTRINSIC (_maskz_loadu_epi16) (mask, s2.a);\n+  INTRINSIC (_mask_storeu_epi16) (res5.a, mask, s3.x);\n+\n+  MASK_MERGE (i_w) (s1.a, mask, SIZE);\n+  if (checkVs (res1.a, s1.a, SIZE))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (s1.a, mask, SIZE);\n+  if (checkVs (res2.a, s1.a, SIZE))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (s2.a, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, s2.a))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (s2.a, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res4, s2.a))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (s3.a, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (s3, res5.a))\n+    abort ();\n+}"}, {"sha": "8856a21f12612dad5741ea83d187194000218628", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu8-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+char *p;\n+volatile __m512i x1, yy;\n+volatile __m256i x2, y2;\n+volatile __m128i x3, y3;\n+volatile __mmask64 m64;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x1 = _mm512_mask_mov_epi8 (x1, m64, yy);\n+  x2 = _mm256_mask_mov_epi8 (x2, m32, y2);\n+  x3 = _mm_mask_mov_epi8 (x3, m16, y3);\n+\n+  x1 = _mm512_maskz_mov_epi8 (m64, yy);\n+  x2 = _mm256_maskz_mov_epi8 (m32, y2);\n+  x3 = _mm_maskz_mov_epi8 (m16, y3);\n+\n+  x1 = _mm512_mask_loadu_epi8 (x1, m64, p);\n+  x2 = _mm256_mask_loadu_epi8 (x2, m32, p);\n+  x3 = _mm_mask_loadu_epi8 (x3, m16, p);\n+\n+  x1 = _mm512_maskz_loadu_epi8 (m64, p);\n+  x2 = _mm256_maskz_loadu_epi8 (m32, p);\n+  x3 = _mm_maskz_loadu_epi8 (m16, p);\n+\n+  _mm512_mask_storeu_epi8 (p, m64, x1);\n+  _mm256_mask_storeu_epi8 (p, m32, x2);\n+  _mm_mask_storeu_epi8 (p, m16, x3);\n+}"}, {"sha": "4c65cf54e43c611dba9b04370a6b7a42bb9e0062", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu8-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE ((AVX512F_LEN) / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+typedef struct\n+{\n+  char c;\n+  char a[SIZE];\n+} __attribute__ ((packed)) EVAL(unaligned_array, AVX512F_LEN,);\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, s3, res1, res2, res3, res4;\n+  EVAL(unaligned_array, AVX512F_LEN,) s2, res5;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = (i + 1) * sign;\n+      s2.a[i] = (i + 2) * sign;\n+      s3.a[i] = (i * 2) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_mov_epi8) (res1.x, mask, s1.x);\n+  res2.x = INTRINSIC (_maskz_mov_epi8) (mask, s1.x);\n+  res3.x = INTRINSIC (_mask_loadu_epi8) (res3.x, mask, s2.a);\n+  res4.x = INTRINSIC (_maskz_loadu_epi8) (mask, s2.a);\n+  INTRINSIC (_mask_storeu_epi8) (res5.a, mask, s3.x);\n+\n+  MASK_MERGE (i_b) (s1.a, mask, SIZE);\n+  if (checkVc (res1.a, s1.a, SIZE))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (s1.a, mask, SIZE);\n+  if (checkVc (res2.a, s1.a, SIZE))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (s2.a, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, s2.a))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (s2.a, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res4, s2.a))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (s3.a, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (s3, res5.a))\n+    abort ();\n+}"}, {"sha": "298b9ef2c083d5b3a23f1a1311277d9c8234e50a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpabsb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask64 m1;\n+volatile __mmask32 m2;\n+volatile __mmask16 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_abs_epi8 (z);\n+  z = _mm512_mask_abs_epi8 (z, m1, z);\n+  z = _mm512_maskz_abs_epi8 (m1, z);\n+  y = _mm256_mask_abs_epi8 (y, m2, y);\n+  y = _mm256_maskz_abs_epi8 (m2, y);\n+  x = _mm_mask_abs_epi8 (x, m3, x);\n+  x = _mm_maskz_abs_epi8 (m3, x);\n+}"}, {"sha": "9cd6ce18b8e8fecc216f3f868d889572a32a38db", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpabsb-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *s, char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s[i] < 0)\n+      r[i] = -s[i];\n+    else\n+      r[i] = s[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = i * 7 + (i << 15) + 356;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (s.a, res_ref);\n+\n+  res1.x = INTRINSIC (_abs_epi8) (s.x);\n+  res2.x = INTRINSIC (_mask_abs_epi8) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_abs_epi8) (mask, s.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();}"}, {"sha": "73a3af1eee5678de8faea457ca05ced3a871b8d5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpabsw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpabsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_abs_epi16 (z);\n+  z = _mm512_mask_abs_epi16 (z, m1, z);\n+  z = _mm512_maskz_abs_epi16 (m1, z);\n+  y = _mm256_mask_abs_epi16 (y, m2, y);\n+  y = _mm256_maskz_abs_epi16 (m2, y);\n+  x = _mm_mask_abs_epi16 (x, m3, x);\n+  x = _mm_maskz_abs_epi16 (m3, x);\n+}"}, {"sha": "07e9bfea64f8e9d47b21e5faca25f50904cbb6ae", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpabsw-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpabsw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *s, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s[i] < 0)\n+      r[i] = -s[i];\n+    else\n+      r[i] = s[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = i * 7 + (i << 15) + 356;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (s.a, res_ref);\n+\n+  res1.x = INTRINSIC (_abs_epi16) (s.x);\n+  res2.x = INTRINSIC (_mask_abs_epi16) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_abs_epi16) (mask, s.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "71ff18f881c75accc4d578544da79e2f912e3488", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpackssdw-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackssdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackssdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackssdw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackssdw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask64 mx;\n+volatile __mmask32 my;\n+volatile __mmask16 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_packs_epi32 (x, x);\n+  x = _mm512_mask_packs_epi32 (x, mx, x, x);\n+  x = _mm512_maskz_packs_epi32 (mx, x, x);\n+  y = _mm256_mask_packs_epi32 (y, my, y, y);\n+  y = _mm256_maskz_packs_epi32 (my, y, y);\n+  z = _mm_mask_packs_epi32 (z, mz, z, z);\n+  z = _mm_maskz_packs_epi32 (mz, z, z);\n+}"}, {"sha": "3a9f5c0b4fbe4fdf96c5535fd0e7e9a7b551a5cf", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpackssdw-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackssdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackssdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackssdw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define DST_SIZE (AVX512F_LEN / 16)\n+#define SRC_SIZE (AVX512F_LEN / 32)\n+\n+#include \"limits.h\"\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static short\n+EVAL(int_to_short, AVX512F_LEN,) (int iVal)\n+{\n+  short sVal;\n+\n+  if (iVal < SHRT_MIN)\n+    sVal = SHRT_MIN;\n+  else if (iVal > SHRT_MAX)\n+    sVal = SHRT_MAX;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void\n+CALC (int *src1, int *src2, short *dst)\n+{\n+  int i;\n+  int *ptr;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      ptr = (i / 4) % 2 ? src2 : src1;\n+      dst[i] = EVAL(int_to_short, AVX512F_LEN,) (ptr[i % 4 + (i / 8) * 4]);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s1, s2;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short dst_ref[DST_SIZE];\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s1.a[i] = i + 10;\n+      s2.a[i] = i + 15;\n+    }\n+\n+  res1.x = INTRINSIC (_packs_epi32) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_packs_epi32) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_packs_epi32) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, dst_ref))\n+    abort ();\n+\n+}"}, {"sha": "251867d45b35aef126eb338e9886ad70cad0aed2", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpacksswb-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpacksswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpacksswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpacksswb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpacksswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask64 mx;\n+volatile __mmask32 my;\n+volatile __mmask16 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_packs_epi16 (x, x);\n+  x = _mm512_mask_packs_epi16 (x, mx, x, x);\n+  x = _mm512_maskz_packs_epi16 (mx, x, x);\n+  y = _mm256_mask_packs_epi16 (y, my, y, y);\n+  y = _mm256_maskz_packs_epi16 (my, y, y);\n+  z = _mm_mask_packs_epi16 (z, mz, z, z);\n+  z = _mm_maskz_packs_epi16 (mz, z, z);\n+}"}, {"sha": "734f3ffe0475eedcde5673acaa0614e847bce52a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpacksswb-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpacksswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpacksswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpacksswb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define DST_SIZE (AVX512F_LEN / 8)\n+#define SRC_SIZE (AVX512F_LEN / 16)\n+\n+#include \"limits.h\"\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static char\n+EVAL(short_to_char, AVX512F_LEN,) (short iVal)\n+{\n+  char sVal;\n+\n+  if (iVal < CHAR_MIN)\n+    sVal = CHAR_MIN;\n+  else if (iVal > CHAR_MAX)\n+    sVal = CHAR_MAX;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void\n+CALC (short *src1, short *src2, char *dst)\n+{\n+  int i;\n+  short *ptr;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      ptr = (i / 8) % 2 ? src2 : src1;\n+      dst[i] = EVAL(short_to_char, AVX512F_LEN,) (ptr[i % 8 + (i / 16) * 8]);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char dst_ref[DST_SIZE];\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s1.a[i] = i + 10;\n+      s2.a[i] = i + 15;\n+    }\n+\n+  res1.x = INTRINSIC (_packs_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_packs_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_packs_epi16) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, dst_ref))\n+    abort ();\n+\n+}"}, {"sha": "b6d0166c0d1302d0fcc17f47cbbdf4f5dc7e54bf", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpackusdw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackusdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackusdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackusdw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackusdw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask64 mx;\n+volatile __mmask32 my;\n+volatile __mmask16 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_packus_epi32 (x, x);\n+  x = _mm512_mask_packus_epi32 (x, mx, x, x);\n+  x = _mm512_maskz_packus_epi32 (mx, x, x);\n+  y = _mm256_mask_packus_epi32 (y, my, y, y);\n+  y = _mm256_maskz_packus_epi32 (my, y, y);\n+  z = _mm_mask_packus_epi32 (z, mz, z, z);\n+  z = _mm_maskz_packus_epi32 (mz, z, z);\n+}\n+"}, {"sha": "2083b59a837c4fa3b935589d1c4c68dd03274ed5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpackusdw-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackusdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackusdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackusdw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define DST_SIZE (AVX512F_LEN / 16)\n+#define SRC_SIZE (AVX512F_LEN / 32)\n+\n+#include \"limits.h\"\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static unsigned short\n+EVAL(int_to_ushort, AVX512F_LEN,) (int iVal)\n+{\n+  unsigned short sVal;\n+\n+  if (iVal < 0)\n+    sVal = 0;\n+  else if (iVal > USHRT_MAX)\n+    sVal = USHRT_MAX;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void\n+CALC (int *src1, int *src2, unsigned short *dst)\n+{\n+  int i;\n+  int *ptr;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      ptr = (i / 4) % 2 ? src2 : src1;\n+      dst[i] = EVAL(int_to_ushort, AVX512F_LEN,) (ptr[i % 4 + (i / 8) * 4]);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s1, s2;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short dst_ref[DST_SIZE];\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s1.a[i] = i + 10;\n+      s2.a[i] = i + 15;\n+    }\n+\n+  res1.x = INTRINSIC (_packus_epi32) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_packus_epi32) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_packus_epi32) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, dst_ref))\n+    abort ();\n+\n+}"}, {"sha": "69135cb9bc560e4caec39320c924bbb11b653e31", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpackuswb-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackuswb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpackuswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask64 mx;\n+volatile __mmask32 my;\n+volatile __mmask16 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_packus_epi16 (x, x);\n+  x = _mm512_mask_packus_epi16 (x, mx, x, x);\n+  x = _mm512_maskz_packus_epi16 (mx, x, x);\n+  y = _mm256_mask_packus_epi16 (y, my, y, y);\n+  y = _mm256_maskz_packus_epi16 (my, y, y);\n+  z = _mm_mask_packus_epi16 (z, mz, z, z);\n+  z = _mm_maskz_packus_epi16 (mz, z, z);\n+}"}, {"sha": "5a8d796fd1c528c4c3918ef91a5c89a89eb2c670", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpackuswb-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackuswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackuswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpackuswb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define DST_SIZE (AVX512F_LEN / 8)\n+#define SRC_SIZE (AVX512F_LEN / 16)\n+\n+#include \"limits.h\"\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static unsigned char\n+EVAL(short_to_uchar, AVX512F_LEN,) (short iVal)\n+{\n+  unsigned char sVal;\n+\n+  if (iVal < 0)\n+    sVal = 0;\n+  else if (iVal > UCHAR_MAX)\n+    sVal = UCHAR_MAX;\n+  else\n+    sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+void\n+CALC (short *src1, short *src2, unsigned char *dst)\n+{\n+  int i;\n+  short *ptr;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      ptr = (i / 8) % 2 ? src2 : src1;\n+      dst[i] = EVAL(short_to_uchar, AVX512F_LEN,) (ptr[i % 8 + (i / 16) * 8]);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned char dst_ref[DST_SIZE];\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s1.a[i] = i + 10;\n+      s2.a[i] = i + 15;\n+    }\n+\n+  res1.x = INTRINSIC (_packus_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_packus_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_packus_epi16) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (dst_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, dst_ref))\n+    abort ();\n+\n+}"}, {"sha": "6e106f2bc82475bbc8b86250ec3772fa5f003e71", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m512;\n+volatile __mmask32 m256;\n+volatile __mmask16 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_add_epi8 (x512, x512);\n+  x512 = _mm512_mask_add_epi8 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_add_epi8 (m512, x512, x512);\n+  x256 = _mm256_mask_add_epi8 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_add_epi8 (m256, x256, x256);\n+  x128 = _mm_mask_add_epi8 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_add_epi8 (m128, x128, x128);\n+}"}, {"sha": "92ab041857b730383bd77737b29c795ae0b41a70", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddb-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] + s2[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_add_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_add_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_add_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a2352b6e762fbab0313e9a03342c9074a57ebbb5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddsb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m512;\n+volatile __mmask32 m256;\n+volatile __mmask16 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_adds_epi8 (x512, x512);\n+  x512 = _mm512_mask_adds_epi8 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_adds_epi8 (m512, x512, x512);\n+  x256 = _mm256_mask_adds_epi8 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_adds_epi8 (m256, x256, x256);\n+  x128 = _mm_mask_adds_epi8 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_adds_epi8 (m128, x128, x128);\n+}"}, {"sha": "28759bb025466743ee45c3979b5e5ff3b984ca5e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddsb-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] + (int)s2[i];\n+      if (tmp > 0x7F) tmp = 0x7F;\n+      if (tmp < (char)0x80) tmp = (char)0x80;\n+      r[i] = (char)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_adds_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_adds_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_adds_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "187b0e978605b55860744fbca4d1837a94cb6502", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddsw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m512;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_adds_epi16 (x512, x512);\n+  x512 = _mm512_mask_adds_epi16 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_adds_epi16 (m512, x512, x512);\n+  x256 = _mm256_mask_adds_epi16 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_adds_epi16 (m256, x256, x256);\n+  x128 = _mm_mask_adds_epi16 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_adds_epi16 (m128, x128, x128);\n+}"}, {"sha": "2f6b118be4e00cc54da179d13344b2ec6a5522ea", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddsw-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddsw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] + (int)s2[i];\n+      if (tmp > 0x7FFF) tmp = 0x7FFF;\n+      if (tmp < (short)0x8000) tmp = (short)0x8000;\n+      r[i] = (short)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_adds_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_adds_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_adds_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "e1036cb019e3519a98e46e4d86d2d0db6c5c72f1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddusb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m512;\n+volatile __mmask32 m256;\n+volatile __mmask16 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_adds_epu8 (x512, x512);\n+  x512 = _mm512_mask_adds_epu8 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_adds_epu8 (m512, x512, x512);\n+  x256 = _mm256_mask_adds_epu8 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_adds_epu8 (m256, x256, x256);\n+  x128 = _mm_mask_adds_epu8 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_adds_epu8 (m128, x128, x128);\n+}"}, {"sha": "e67232f9486206cfd02a222cf11bb16f5ceee6f7", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddusb-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned char *r, unsigned char *s1, unsigned char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] + (int)s2[i];\n+      if (tmp > 0xFF) tmp = 0xFF;\n+      if (tmp < 0) tmp = 0;\n+      r[i] = (unsigned char)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned char res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + 7 * i % 291;\n+      src2.a[i] = 3 + 11 * (i % 377) * i;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_adds_epu8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_adds_epu8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_adds_epu8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "95520c629b03e910baffb3c55152f10170aa2b45", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddusw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddusw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m512;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_adds_epu16 (x512, x512);\n+  x512 = _mm512_mask_adds_epu16 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_adds_epu16 (m512, x512, x512);\n+  x256 = _mm256_mask_adds_epu16 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_adds_epu16 (m256, x256, x256);\n+  x128 = _mm_mask_adds_epu16 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_adds_epu16 (m128, x128, x128);\n+}"}, {"sha": "138ee4098ce2d815213bd9340923348294363b98", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddusw-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddusw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned short *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] + (int)s2[i];\n+      if (tmp > 0xFFFF) tmp = 0xFFFF;\n+      if (tmp < 0) tmp = 0;\n+      r[i] = (unsigned short)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + 7 * i % 291;\n+      src2.a[i] = 3 + 11 * (i % 377) * i;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_adds_epu16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_adds_epu16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_adds_epu16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "86029ea6094f8725c105ddee066b7a88d8263dff", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpaddw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m512;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_add_epi16 (x512, x512);\n+  x512 = _mm512_mask_add_epi16 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_add_epi16 (m512, x512, x512);\n+  x256 = _mm256_mask_add_epi16 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_add_epi16 (m256, x256, x256);\n+  x128 = _mm_mask_add_epi16 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_add_epi16 (m128, x128, x128);\n+}"}, {"sha": "3b383703d3aa9f4ef2e40d36364171461eced34b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpaddw-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpaddw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] + s2[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_add_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_add_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_add_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "c609365f89bb350d4556996c76e887085fb84a0f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpalignr-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpalignr\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask64 m1;\n+volatile __mmask32 m2;\n+volatile __mmask16 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_alignr_epi8 (z, z, 10);\n+  z = _mm512_mask_alignr_epi8 (z, m1, z, z, 10);\n+  z = _mm512_maskz_alignr_epi8 (m1, z, z, 10);\n+  y = _mm256_mask_alignr_epi8 (y, m2, y, y, 10);\n+  y = _mm256_maskz_alignr_epi8 (m2, y, y, 10);\n+  x = _mm_mask_alignr_epi8 (x, m3, x, x, 10);\n+  x = _mm_maskz_alignr_epi8 (m3, x, x, 10);\n+}"}, {"sha": "4de6e05db7985000edb322143a2fcb9bc2f75dd5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpalignr-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <string.h>\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+#define N 0x3\n+\n+void\n+CALC (char *src1, char *src2, char * dst)\n+{\n+  /* result for EVEX.U1.512 version consists from 4 result block, each of them\n+   * has length of 128 bits. */\n+  unsigned block_len = 16;\n+  unsigned double_block_len = 32;\n+  unsigned shift = 0;\n+  char buf[double_block_len];\n+  char *bout = dst;\n+  int bits, i;\n+\n+  for (bits = 0; bits < AVX512F_LEN; bits += 128)\n+    {\n+      memcpy (&buf[0], src2 + shift, block_len);\n+      memcpy (&buf[block_len], src1 + shift, block_len);\n+\n+      for (i = 0; i < block_len; i++)\n+\t/* shift counts larger than 32 produces zero result. */\n+\tif (N >= 32 || N + i >= 32)\n+\t  bout[i] = 0;\n+\telse\n+\t  bout[i] = buf[N + i];\n+\n+      shift += block_len;\n+      bout += block_len;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i;\n+      s2.a[i] = i * 2;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_alignr_epi8) (s1.x, s2.x, N);\n+  res2.x = INTRINSIC (_mask_alignr_epi8) (res2.x, mask, s1.x, s2.x, N);\n+  res3.x = INTRINSIC (_maskz_alignr_epi8) (mask, s1.x, s2.x, N);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "266a1bfa0129ff67aa2ec36b444ba2bb5b02d55a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpavgb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+volatile __m256i y;\n+volatile __m512i z;\n+volatile __mmask64 m1;\n+volatile __mmask32 m2;\n+volatile __mmask16 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_avg_epu8 (z, z);\n+  z = _mm512_mask_avg_epu8 (z, m1, z, z);\n+  z = _mm512_maskz_avg_epu8 (m1, z, z);\n+  y = _mm256_mask_avg_epu8 (y, m2, y, y);\n+  y = _mm256_maskz_avg_epu8 (m2, y, y);\n+  x = _mm_mask_avg_epu8 (x, m3, x, x);\n+  x = _mm_maskz_avg_epu8 (m3, x, x);\n+}"}, {"sha": "2dabd71947892f7f9e9494f1b41eea361933dd71", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpavgb-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *s1, char *s2, char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = ((unsigned char) s1[i] +\n+      (unsigned char) s2[i] + 1) >> 1;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, s2, res1, res2 ,res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i + 15;\n+      s2.a[i] = i + 14;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_avg_epu8) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_avg_epu8) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_avg_epu8) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "3b00784bbadbe7d5fe84754af641476aa9b1d734", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpavgw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpavgw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x;\n+volatile __m256i y;\n+volatile __m512i z;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_avg_epu16 (z, z);\n+  z = _mm512_mask_avg_epu16 (z, m1, z, z);\n+  z = _mm512_maskz_avg_epu16 (m1, z, z);\n+  y = _mm256_mask_avg_epu16 (y, m2, y, y);\n+  y = _mm256_maskz_avg_epu16 (m2, y, y);\n+  x = _mm_mask_avg_epu16 (x, m3, x, x);\n+  x = _mm_maskz_avg_epu16 (m3, x, x);\n+}"}, {"sha": "51496865d6451cae2876319b18bc800163dc91f5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpavgw-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpavgw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = ((unsigned short) s1[i] +\n+      (unsigned short) s2[i] + 1) >> 1;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res1, res2 ,res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i + 15;\n+      s2.a[i] = i + 14;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_avg_epu16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_avg_epu16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_avg_epu16) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "d001c27c3882d1ec356938b20ded310b3cb84163", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpblendmb-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"(vpblendmb|vmovdqu8)\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"(vpblendmb|vmovdqu8)\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"(vpblendmb|vmovdqu8)\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+volatile __m128i xx;\n+volatile __m512i xxx;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm256_mask_blend_epi8 (m, x, x);\n+  xx = _mm_mask_blend_epi8 (m, xx, xx);\n+  xxx = _mm512_mask_blend_epi8 (m, xxx, xxx);\n+}"}, {"sha": "107559bbc9e98f61da1a0136d323d4c273f852f5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpblendmb-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2, MASK_TYPE mask)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (mask & (1LL << i)) ? s2[i] : s1[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 15 + 46 * i * sign;\n+      src2.a[i] = -22 + i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_blend_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "65431cdea418d413d6c9bf8ec02415c303d71184", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpblendmw-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"(vpblendmw|vmovdqu16)\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"(vpblendmw|vmovdqu16)\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"(vpblendmw|vmovdqu16)\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x;\n+volatile __m128i xx;\n+volatile __m512i xxx;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm256_mask_blend_epi16 (m, x, x);\n+  xx = _mm_mask_blend_epi16 (m, xx, xx);\n+  xxx = _mm512_mask_blend_epi16 (m, xxx, xxx);\n+}"}, {"sha": "d4fb51c431d0146476ccbcb662e72b843ddc59e3", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpblendmw-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpblendmw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short *s2, MASK_TYPE mask)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (mask & (1 << i)) ? s2[i] : s1[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 15 + 3467 * i * sign;\n+      src2.a[i] = -2217 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_blend_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "1880105a7016958b3bd55398ffc004fc34adfa94", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpbroadcastb-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile char w;\n+volatile __mmask64 mx;\n+volatile __mmask32 my;\n+volatile __mmask16 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_broadcastb_epi8 (z);\n+  x = _mm512_mask_broadcastb_epi8 (x, mx, z);\n+  x = _mm512_maskz_broadcastb_epi8 (mx, z);\n+  y = _mm256_mask_broadcastb_epi8 (y, my, z);\n+  y = _mm256_maskz_broadcastb_epi8 (my, z);\n+  z = _mm_mask_broadcastb_epi8 (z, mz, z);\n+  z = _mm_maskz_broadcastb_epi8 (mz, z);\n+\n+  x = _mm512_set1_epi8 (w);\n+  x = _mm512_mask_set1_epi8 (x, mx, w);\n+  x = _mm512_maskz_set1_epi8 (mx, w);\n+  y = _mm256_mask_set1_epi8 (y, my, w);\n+  y = _mm256_maskz_set1_epi8 (my, w);\n+  z = _mm_mask_set1_epi8 (z, mz, w);\n+  z = _mm_maskz_set1_epi8 (mz, w);\n+}"}, {"sha": "821b5dd849118e7507b441e613b532d8ff1a68c1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpbroadcastb-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[0];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3;\n+  UNION_TYPE (128, i_b) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 16; i++)\n+    {\n+      src.a[i] = 1 + 3 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  CALC (res_ref, src.a);\n+\n+  if (AVX512F_LEN == 512)\n+    {\n+      res1.x = INTRINSIC (_broadcastb_epi8) (src.x);\n+      if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+\tabort ();\n+    }\n+\n+  res2.x = INTRINSIC (_mask_broadcastb_epi8) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcastb_epi8) (mask, src.x);\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+\n+  CALC (res_ref, src.a);\n+\n+  if (AVX512F_LEN == 512)\n+    {\n+      res1.x = INTRINSIC (_set1_epi8) (src.a[0]);\n+      if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+\tabort ();\n+    }\n+\n+  res2.x = INTRINSIC (_mask_set1_epi8) (res2.x, mask, src.a[0]);\n+  res3.x = INTRINSIC (_maskz_set1_epi8) (mask, src.a[0]);\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "5255f4f07573242e3d40f6a9f2a898b3cab08b9f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpbroadcastw-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile short w;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_broadcastw_epi16 (z);\n+  x = _mm512_mask_broadcastw_epi16 (x, mx, z);\n+  x = _mm512_maskz_broadcastw_epi16 (mx, z);\n+  y = _mm256_mask_broadcastw_epi16 (y, my, z);\n+  y = _mm256_maskz_broadcastw_epi16 (my, z);\n+  z = _mm_mask_broadcastw_epi16 (z, mz, z);\n+  z = _mm_maskz_broadcastw_epi16 (mz, z);\n+\n+  x = _mm512_set1_epi16 (w);\n+  x = _mm512_mask_set1_epi16 (x, mx, w);\n+  x = _mm512_maskz_set1_epi16 (mx, w);\n+  y = _mm256_mask_set1_epi16 (y, my, w);\n+  y = _mm256_maskz_set1_epi16 (my, w);\n+  z = _mm_mask_set1_epi16 (z, mz, w);\n+  z = _mm_maskz_set1_epi16 (mz, w);\n+}"}, {"sha": "6e68aa145ad6bfac87d90c4f768b5515e8a092c8", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpbroadcastw-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpbroadcastw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[0];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3;\n+  UNION_TYPE (128, i_w) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 1 + 3 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  CALC (res_ref, src.a);\n+\n+  if (AVX512F_LEN == 512)\n+    {\n+      res1.x = INTRINSIC (_broadcastw_epi16) (src.x);\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+\tabort ();\n+    }\n+\n+  res2.x = INTRINSIC (_mask_broadcastw_epi16) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcastw_epi16) (mask, src.x);\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+\n+  CALC (res_ref, src.a);\n+\n+  if (AVX512F_LEN == 512)\n+    {\n+      res1.x = INTRINSIC (_set1_epi16) (src.a[0]);\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+\tabort ();\n+    }\n+\n+  res2.x = INTRINSIC (_mask_set1_epi16) (res2.x, mask, src.a[0]);\n+  res3.x = INTRINSIC (_maskz_set1_epi16) (mask, src.a[0]);\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "6a76a7cd5ea235275f30f4a9ea33dfa357438864", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i xq;\n+volatile __m256i x;\n+volatile __m128i xx;\n+volatile __mmask16 m;\n+volatile __mmask32 mm;\n+volatile __mmask64 mmm;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  mmm = _mm512_cmp_epi8_mask (xq, xq, _MM_CMPINT_GE);\n+  mmm = _mm512_mask_cmp_epi8_mask (m, xq, xq, _MM_CMPINT_NLE);\n+  mm = _mm256_cmp_epi8_mask (x, x, _MM_CMPINT_GT);\n+  mm = _mm256_mask_cmp_epi8_mask (m, x, x, _MM_CMPINT_EQ);\n+  m = _mm_cmp_epi8_mask (xx, xx, _MM_CMPINT_LT);\n+  m = _mm_mask_cmp_epi8_mask (m, xx, xx, _MM_CMPINT_LE);\n+}"}, {"sha": "8b0c541a9029cbddcfd138aea01da5f955ffc451", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpb-2.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+#if AVX512F_LEN == 512\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 64; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n+    dst1 = _mm512_cmp_epi8_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm512_mask_cmp_epi8_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 32; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\\\n+    dst1 = _mm256_cmp_epi8_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epi8_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 16; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epi8_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epi8_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+void\n+TEST ()\n+{\n+    char s1[64] = {34, 78,  53, 64,\n+\t\t  1, 57, 11, 231,\n+\t\t  14, 45, 71, 75,\n+\t\t  55, 66, 21, 73,\n+\t\t  34, 68, 3, 56,\n+\t\t  1, 57, 111, 241,\n+\t\t  14,  15, 61, 75,\n+\t\t  55,  16, 52, 3,\n+\t\t  34, 78,  53, 64,\n+\t\t  1, 57, 11, 231,\n+\t\t  14, 45, 71, 75,\n+\t\t  45, 66, 21, 73,\n+\t\t  34, 68, 3, 56,\n+\t\t  1, 57, 111, 241,\n+\t\t  14,  15, 61, 75,\n+\t\t  55,  16, 52, 3};\n+    char s2[64] = {4, 68, 86, 8,\n+\t\t  1, 46,  1, 1,\n+\t\t  45, 67, 36, 3,\n+\t\t  4, 39, 56, 56,\n+\t\t  124, 78, 53, 56,\n+\t\t  1, 46,  1, 12,\n+\t\t  45, 47, 36, 13,\n+\t\t  4, 35, 56, 67,\n+\t\t  4, 68, 86, 8,\n+\t\t  1, 46,  1, 1,\n+\t\t  45, 67, 36, 3,\n+\t\t  4, 39, 56, 56,\n+\t\t  124, 78, 53, 56,\n+\t\t  1, 46,  1, 12,\n+\t\t  45, 47, 36, 13,\n+\t\t  4, 35, 56, 67};\n+    UNION_TYPE (AVX512F_LEN, i_b) source1, source2;\n+    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE mask = MASK_VALUE;\n+    int i;\n+\n+    CMP(0x00, s1[i] == s2[i]);\n+    CMP(0x01, s1[i] < s2[i]);\n+    CMP(0x02, s1[i] <= s2[i]);\n+    CMP(0x03, 0);\n+    CMP(0x04, s1[i] != s2[i]);\n+    CMP(0x05, s1[i] >= s2[i]);\n+    CMP(0x06, s1[i] > s2[i]);\n+    CMP(0x07, 1);\n+}"}, {"sha": "732a951a4b4432256c0a4bf93c9bd4c47a6e427b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpeqb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpeqb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpeq_epi8_mask (x128, x128);\n+  m32 = _mm256_cmpeq_epi8_mask (x256, x256);\n+  m64 = _mm512_cmpeq_epi8_mask (x512, x512);\n+  m16 = _mm_mask_cmpeq_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpeq_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpeq_epi8_mask (3, x512, x512);\n+}"}, {"sha": "4e81f2bcfb33ed0e648570b43d6f79d896b4ce35", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpeqb-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, char *s1, char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] == s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpeq_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpeq_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "b77203bfb3f955c8b607f909eb708294ef9be3b5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpeqw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpeqw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpeqw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpeq_epi16_mask (x128, x128);\n+  m8 = _mm_mask_cmpeq_epi16_mask (3, x128, x128);\n+  m16 = _mm256_cmpeq_epi16_mask (x256, x256);\n+  m16 = _mm256_mask_cmpeq_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpeq_epi16_mask (3, x512, x512);\n+  m32 = _mm512_cmpeq_epi16_mask (x512, x512);\n+}"}, {"sha": "2ff608a0605e3ce28a8dc916e2300f51720fca72", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpeqw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, short *s1, short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] == s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpeq_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpeq_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "1b54de5ec9d751a56470c3797d1ea546833c59cf", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpgtb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_cmpgt_epi8_mask (x128, x128);\n+  m32 = _mm256_cmpgt_epi8_mask (x256, x256);\n+  m64 = _mm512_cmpgt_epi8_mask (x512, x512);\n+  m16 = _mm_mask_cmpgt_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_cmpgt_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_cmpgt_epi8_mask (3, x512, x512);\n+}"}, {"sha": "f99c23885cd6042fcead0da94adab9e7555c71b4", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtb-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, char *s1, char *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] > s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpgt_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpgt_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "0f2671345fe9c317ca71b920858cf1fbf91e30e6", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpcmpgtw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpgtw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_cmpgt_epi16_mask (x128, x128);\n+  m16 = _mm256_cmpgt_epi16_mask (x256, x256);\n+  m32 = _mm512_cmpgt_epi16_mask (x512, x512);\n+  m8 = _mm_mask_cmpgt_epi16_mask (3, x128, x128);\n+  m16 = _mm256_mask_cmpgt_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_cmpgt_epi16_mask (3, x512, x512);\n+}"}, {"sha": "b56fca8180a77d0a84a88b6efd2513c7a8f4650f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtw-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, short *s1, short *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] > s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpgt_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpgt_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "32117ac721e1acfaf8087ae595b9ee76989ed4c0", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpub-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i xq;\n+volatile __m256i x;\n+volatile __m128i xx;\n+volatile __mmask16 m;\n+volatile __mmask32 mm;\n+volatile __mmask64 mmm;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  mmm = _mm512_cmp_epu8_mask (xq, xq, _MM_CMPINT_EQ);\n+  mmm = _mm512_mask_cmp_epu8_mask (m, xq, xq, _MM_CMPINT_LT);\n+  mm = _mm256_cmp_epu8_mask (x, x, _MM_CMPINT_LE);\n+  mm = _mm256_mask_cmp_epu8_mask (m, x, x, _MM_CMPINT_UNUSED);\n+  m = _mm_cmp_epu8_mask (xx, xx, _MM_CMPINT_NE);\n+  m = _mm_mask_cmp_epu8_mask (m, xx, xx, _MM_CMPINT_NLT);\n+}"}, {"sha": "be288c9b3e6796950845879c79914f2c669ab334", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpub-2.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpub-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,107 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+#if AVX512F_LEN == 512\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 64; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n+    dst1 = _mm512_cmp_epu8_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm512_mask_cmp_epu8_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 32; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\\\n+    dst1 = _mm256_cmp_epu8_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epu8_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 16; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epu8_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epu8_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+void\n+TEST ()\n+{\n+    unsigned char s1[64] = {34, 78,  53, 64,\n+\t\t\t    1, 57, 11, 231,\n+\t\t\t    14, 45, 71, 75,\n+\t\t\t    55, 66, 21, 73,\n+\t\t\t    34, 68, 3, 56,\n+\t\t\t    1, 57, 111, 241,\n+\t\t\t    14,  15, 61, 75,\n+\t\t\t    55,  16, 52, 3,\n+\t\t\t    34, 78,  53, 64,\n+\t\t\t    1, 57, 11, 231,\n+\t\t\t    14, 45, 71, 75,\n+\t\t\t    55, 66, 21, 73,\n+\t\t\t    34, 68, 3, 56,\n+\t\t\t    1, 57, 111, 241,\n+\t\t\t    14,  15, 61, 75,\n+\t\t\t    55,  16, 52, 3};\n+    unsigned char s2[64] = {4, 68, 86, 8,\n+\t\t\t    1, 46,  1, 1,\n+\t\t\t    45, 67, 36, 3,\n+\t\t\t    4, 39, 56, 56,\n+\t\t\t    124, 78, 53, 56,\n+\t\t\t    1, 46,  1, 12,\n+\t\t\t    45, 47, 36, 13,\n+\t\t\t    4, 35, 56, 67,\n+\t\t\t    4, 68, 86, 8,\n+\t\t\t    1, 46,  1, 1,\n+\t\t\t    45, 67, 36, 3,\n+\t\t\t    4, 39, 56, 56,\n+\t\t\t    124, 78, 53, 56,\n+\t\t\t    1, 46,  1, 12,\n+\t\t\t    45, 47, 36, 13,\n+\t\t\t    4, 35, 56, 67};\n+    UNION_TYPE (AVX512F_LEN, i_b) source1, source2;\n+    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE mask = MASK_VALUE;\n+    int i;\n+\n+    CMP(0x00, s1[i] == s2[i]);\n+    CMP(0x01, s1[i] < s2[i]);\n+    CMP(0x02, s1[i] <= s2[i]);\n+    CMP(0x03, 0);\n+    CMP(0x04, s1[i] != s2[i]);\n+    CMP(0x05, s1[i] >= s2[i]);\n+    CMP(0x06, s1[i] > s2[i]);\n+    CMP(0x07, 1);\n+}"}, {"sha": "916f01b0fabd659aa36389f2ecef18678fe0eddc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpuw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpuw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i xq;\n+volatile __m256i x;\n+volatile __m128i xx;\n+volatile __mmask8 m;\n+volatile __mmask16 mm;\n+volatile __mmask32 mmm;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  mmm = _mm512_cmp_epu16_mask (xq, xq, _MM_CMPINT_NE);\n+  mmm = _mm512_mask_cmp_epu16_mask (m, xq, xq, _MM_CMPINT_NLT);\n+  mm = _mm256_cmp_epu16_mask (x, x, _MM_CMPINT_GE);\n+  mm = _mm256_mask_cmp_epu16_mask (m, x, x, _MM_CMPINT_NLE);\n+  m = _mm_cmp_epu16_mask (xx, xx, _MM_CMPINT_GT);\n+  m = _mm_mask_cmp_epu16_mask (m, xx, xx, _MM_CMPINT_EQ);\n+}"}, {"sha": "587030535aff7c1e24ca476af24d059186a5462e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpuw-2.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpuw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+#if AVX512F_LEN == 512\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 32; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n+    dst1 = _mm512_cmp_epu16_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm512_mask_cmp_epu16_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 16; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\\\n+    dst1 = _mm256_cmp_epu16_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epu16_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 8; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epu16_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epu16_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+void\n+TEST ()\n+{\n+    unsigned short s1[32] = {2134,  6678,  453, 54646,\n+\t\t\t    231, 5674,  111, 23241,\n+\t\t\t    12314,  145,  671, 7575,\n+\t\t\t    23455,  166, 5321, 5673,\n+\t\t\t    2134,  6678,  453, 54646,\n+\t\t\t    231, 5674,  111, 23241,\n+\t\t\t    12314,  145,  671, 7575,\n+\t\t\t    23455,  166, 5321, 5673};\n+    unsigned short s2[32] = {41124, 6678, 8653,   856,\n+\t\t\t    231, 4646,  111,   124,\n+\t\t\t    2745, 4567, 3676,   123,\n+\t\t\t    714, 3589, 5683,  5673,\n+\t\t\t    41124, 6678, 8653,   856,\n+\t\t\t    231, 4646,  111,   124,\n+\t\t\t    2745, 4567, 3676,   123,\n+\t\t\t    714, 3589, 5683,  5673};\n+    UNION_TYPE (AVX512F_LEN, i_w) source1, source2;\n+    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE mask = MASK_VALUE;\n+    int i;\n+\n+    CMP(0x00, s1[i] == s2[i]);\n+    CMP(0x01, s1[i] < s2[i]);\n+    CMP(0x02, s1[i] <= s2[i]);\n+    CMP(0x03, 0);\n+    CMP(0x04, s1[i] != s2[i]);\n+    CMP(0x05, s1[i] >= s2[i]);\n+    CMP(0x06, s1[i] > s2[i]);\n+    CMP(0x07, 1);\n+}"}, {"sha": "a506dc12e0a13d10495e52dd4026aee1b1cf43f1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vpcmpw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i xq;\n+volatile __m256i x;\n+volatile __m128i xx;\n+volatile __mmask8 m;\n+volatile __mmask16 mm;\n+volatile __mmask32 mmm;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  mmm = _mm512_cmp_epi16_mask (xq, xq, _MM_CMPINT_GT);\n+  mmm = _mm512_mask_cmp_epi16_mask (m, xq, xq, _MM_CMPINT_EQ);\n+  mm = _mm256_cmp_epi16_mask (x, x, _MM_CMPINT_EQ);\n+  mm = _mm256_mask_cmp_epi16_mask (m, x, x, _MM_CMPINT_LT);\n+  m = _mm_cmp_epi16_mask (xx, xx, _MM_CMPINT_LE);\n+  m = _mm_mask_cmp_epi16_mask (m, xx, xx, _MM_CMPINT_UNUSED);\n+}"}, {"sha": "54c3588238bd49ec1e1625de68fa59556ab5e1e9", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpw-2.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+#if AVX512F_LEN == 512\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 32; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm512_loadu_si512 (s1);\t\t\\\n+    source2.x = _mm512_loadu_si512 (s2);\t\t\\\n+    dst1 = _mm512_cmp_epi16_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm512_mask_cmp_epi16_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 16; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\\\n+    dst1 = _mm256_cmp_epi16_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epi16_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 8; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epi16_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epi16_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+void\n+TEST ()\n+{\n+    short s1[32] = {2134,  6678,  453, 54646,\n+\t\t   231, 5674,  111, 23241,\n+\t\t   12314,  145,  671, 7575,\n+\t\t   23455,  166, 5321, 5673,\n+\t\t   2134,  6678,  453, 54646,\n+\t\t   231, 5674,  111, 23241,\n+\t\t   12314,  145,  671, 7575,\n+\t\t   23455,  166, 5321, 5673};\n+    short s2[32] = {41124, 6678, 8653,   856,\n+\t\t   231, 4646,  111,   124,\n+\t\t   2745, 4567, 3676,   123,\n+\t\t   714, 3589, 5683,  5673,\n+\t\t   41124, 6678, 8653,   856,\n+\t\t   231, 4646,  111,   124,\n+\t\t   2745, 4567, 3676,   123,\n+\t\t   714, 3589, 5683,  5673};\n+    UNION_TYPE (AVX512F_LEN, i_w) source1, source2;\n+    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE mask = MASK_VALUE;\n+    int i;\n+\n+    CMP(0x00, s1[i] == s2[i]);\n+    CMP(0x01, s1[i] < s2[i]);\n+    CMP(0x02, s1[i] <= s2[i]);\n+    CMP(0x03, 0);\n+    CMP(0x04, s1[i] != s2[i]);\n+    CMP(0x05, s1[i] >= s2[i]);\n+    CMP(0x06, s1[i] > s2[i]);\n+    CMP(0x07, 1);\n+}"}, {"sha": "275fef47c2a310412ecad1f78a017202c1097bb1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpermi2w-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermi2w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermi2w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermi2w-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermi2w\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermi2w\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermi2w\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x3;\n+volatile __m256i x2;\n+volatile __m128i x1;\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m3;\n+volatile __mmask16 m2;\n+volatile __mmask8 m1;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x3 = _mm512_mask2_permutex2var_epi16 (x3, z, m3, x3);\n+  x2 = _mm256_mask2_permutex2var_epi16 (x2, y, m2, x2);\n+  x1 = _mm_mask2_permutex2var_epi16 (x1, x, m1, x1);\n+}"}, {"sha": "52d7ac274fcf4ddcf12378c54fd4371469b494b4", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpermi2w-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermi2w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermi2w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermi2w-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"math.h\"\n+#include \"values.h\"\n+#include \"avx512f-mask-type.h\"\n+\n+#define NUM 32\n+\n+void\n+CALC (short *dst, short *src1, short *ind, short *src2)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      unsigned long long offset = ind[i] & (SIZE - 1);\n+      unsigned long long cond = ind[i] & SIZE;\n+\n+      dst[i] = cond ? src2[offset] : src1[offset];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, j;\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res, ind;\n+  short res_ref[SIZE];\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      for (j = 0; j < SIZE; j++)\n+\t{\n+\t  ind.a[j] = DEFAULT_VALUE;\n+\t  s1.a[j] = i * 2 * j + 1;\n+\t  s2.a[j] = i * 2 * j;\n+\n+\t  res.a[j] = DEFAULT_VALUE;\n+\t}\n+\n+      CALC (res_ref, s1.a, ind.a, s2.a);\n+\n+      res.x =\n+\tINTRINSIC (_mask2_permutex2var_epi16) (s1.x, ind.x, mask,\n+\t\t\t\t\t       s2.x);\n+\n+      MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res, res_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "1596695251cd357367b460b47034fd0a6fafb7ec", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpermt2w-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } *\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermt2w\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x3;\n+volatile __m256i x2;\n+volatile __m128i x1;\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m3;\n+volatile __mmask16 m2;\n+volatile __mmask8 m1;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x3 = _mm512_permutex2var_epi16 (x3, z, x3);\n+  x3 = _mm512_mask_permutex2var_epi16 (x3, m3, z, x3);\n+  x3 = _mm512_maskz_permutex2var_epi16 (m3, x3, z, x3);\n+  x2 = _mm256_permutex2var_epi16 (x2, y, x2);\n+  x2 = _mm256_mask_permutex2var_epi16 (x2, m2, y, x2);\n+  x2 = _mm256_maskz_permutex2var_epi16 (m2, x2, y, x2);\n+  x1 = _mm_permutex2var_epi16 (x1, x, x1);\n+  x1 = _mm_mask_permutex2var_epi16 (x1, m1, x, x1);\n+  x1 = _mm_maskz_permutex2var_epi16 (m1, x1, x, x1);\n+}"}, {"sha": "58d75f4b8ec9a9e55610fcdff2d82dd2cfe72565", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpermt2w-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermt2w-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"math.h\"\n+#include \"values.h\"\n+#include \"avx512f-mask-type.h\"\n+\n+#define NUM 32\n+\n+void\n+CALC (short *dst, short *src1, short *ind, short *src2)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      unsigned long long offset = ind[i] & (SIZE - 1);\n+      unsigned long long cond = ind[i] & SIZE;\n+\n+      dst[i] = cond ? src2[offset] : src1[offset];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, j;\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res1, res2, res3, ind;\n+  short res_ref[SIZE];\n+\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      for (j = 0; j < SIZE; j++)\n+\t{\n+\t  ind.a[j] = i * (j << 1);\n+\t  s1.a[j] = DEFAULT_VALUE;\n+\t  s2.a[j] = 1.5 * i * 2 * j;\n+\n+\t  res1.a[j] = DEFAULT_VALUE;\n+\t  res2.a[j] = DEFAULT_VALUE;\n+\t  res3.a[j] = DEFAULT_VALUE;\n+\t}\n+\n+      CALC (res_ref, s1.a, ind.a, s2.a);\n+\n+      res1.x = INTRINSIC (_permutex2var_epi16) (s1.x, ind.x, s2.x);\n+      res2.x =\n+\tINTRINSIC (_mask_permutex2var_epi16) (s1.x, mask, ind.x, s2.x);\n+      res3.x =\n+\tINTRINSIC (_maskz_permutex2var_epi16) (mask, s1.x, ind.x,\n+\t\t\t\t\t       s2.x);\n+\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+\tabort ();\n+\n+      MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+\tabort ();\n+\n+      MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "4d8f356ddc83cc165adc704539b5233235e6dea1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpermw-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpermw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x1;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x1 = _mm512_permutexvar_epi16 (x1, x1);\n+  x1 = _mm512_maskz_permutexvar_epi16 (m1, x1, x1);\n+  x1 = _mm512_mask_permutexvar_epi16 (x1, m1, x1, x1);\n+  x2 = _mm256_permutexvar_epi16 (x2, x2);\n+  x2 = _mm256_maskz_permutexvar_epi16 (m2, x2, x2);\n+  x2 = _mm256_mask_permutexvar_epi16 (x2, m2, x2, x2);\n+  x3 = _mm_permutexvar_epi16 (x3, x3);\n+  x3 = _mm_maskz_permutexvar_epi16 (m3, x3, x3);\n+  x3 = _mm_mask_permutexvar_epi16 (x3, m3, x3, x3);\n+}"}, {"sha": "1746534fa4ae9e05464277de3200fd01ebce94e9", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpermw-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpermw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *ind, short *src, short *res)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res[i] = src[ind[i] & (SIZE - 1)];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res1, res2, res3;\n+  short res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * i * i;\n+      s2.a[i] = i + 20;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_permutexvar_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_permutexvar_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_permutexvar_epi16) (mask, s1.x, s2.x);\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w)(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w)(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "f4f41b58df7a6b26888dc8675e8baa40674b3835", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaddubsw-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddubsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddubsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddubsw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddubsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i xq;\n+volatile __m128i xw;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_maddubs_epi16 (x, x);\n+  x = _mm512_mask_maddubs_epi16 (x, 2, x, x);\n+  x = _mm512_maskz_maddubs_epi16 (2, x, x);\n+  xq = _mm256_mask_maddubs_epi16 (xq, 2, xq, xq);\n+  xq = _mm256_maskz_maddubs_epi16 (2, xq, xq);\n+  xw = _mm_mask_maddubs_epi16 (xw, 2, xw, xw);\n+  xw = _mm_maskz_maddubs_epi16 (2, xw, xw);\n+}"}, {"sha": "e3bd83fee8ae8ea21c666db933c33d630da39b7e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaddubsw-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddubsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddubsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddubsw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#include <values.h>\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *i1, short *i2, short *r)\n+{\n+  unsigned char *ub1 = (unsigned char *) i1;\n+  char *sb2 = (char *) i2;\n+  short *sout = (short *) r;\n+  int t0;\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      t0 = ((int) ub1[2 * i] * (int) sb2[2 * i] +\n+\t    (int) ub1[2 * i + 1] * (int) sb2[2 * i + 1]);\n+      if (t0 > (int) 0x7fff)\n+\tsout[i] = 0x7fff;\n+      else if (t0 < (int) 0xffff8000)\n+\tsout[i] = 0x8000;\n+      else\n+\tsout[i] = (short) t0;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res1, res2, res3;\n+  short res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+  int fail = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * 17 + i;\n+      s2.a[i] = i * -17 + i * 2;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_maddubs_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_maddubs_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_maddubs_epi16) (mask, s1.x, s2.x);\n+\n+  CALC(s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "42e20a6799c69e5f4e1801d514f956efdc5abdef", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaddwd-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddwd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaddwd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i xq;\n+volatile __m128i xw;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_madd_epi16 (x, x);\n+  x = _mm512_mask_madd_epi16 (x, 2, x, x);\n+  x = _mm512_maskz_madd_epi16 (2, x, x);\n+  xq = _mm256_mask_madd_epi16 (xq, 2, xq, xq);\n+  xq = _mm256_maskz_madd_epi16 (2, xq, xq);\n+  xw = _mm_mask_madd_epi16 (xw, 2, xw, xw);\n+  xw = _mm_maskz_madd_epi16 (2, xw, xw);\n+}"}, {"sha": "fb6ef8e1b94309257378503e0edab03ea3f46bef", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaddwd-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddwd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddwd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaddwd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#include <values.h>\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *i1, short *i2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = ((int) i1[2 * i] * (int) i2[2 * i] +\n+\t    (int) i1[2 * i + 1] * (int) i2[2 * i + 1]);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  int res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i;\n+\n+  for (i = 0; i < SIZE * 2; i++)\n+    {\n+      s1.a[i] = i * 17 + i;\n+      s2.a[i] = i * -17 + i * 2;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_madd_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_madd_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_madd_epi16) (mask, s1.x, s2.x);\n+\n+  CALC(s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "ad8d9095a8d187fd87646520e127a62d98eb6397", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxsb-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_max_epi8 (x, x);\n+  x = _mm512_mask_max_epi8 (x, mx, x, x);\n+  x = _mm512_maskz_max_epi8 (mx, x, x);\n+  y = _mm256_mask_max_epi8 (y, my, y, y);\n+  y = _mm256_maskz_max_epi8 (my, y, y);\n+  z = _mm_mask_max_epi8 (z, mz, z, z);\n+  z = _mm_maskz_max_epi8 (mz, z, z);\n+}"}, {"sha": "9d81e41a6422259087055862e473da7fe1c836ad", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxsb-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *src1, char *src2, char *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] > src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] =  i * sign;\n+      src2.a[i] = (i + 20) * sign;\n+      sign = -sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_max_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_max_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_max_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "237b9b8b287370f850231590798240b622359113", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxsw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_max_epi16 (x, x);\n+  x = _mm512_mask_max_epi16 (x, mx, x, x);\n+  x = _mm512_maskz_max_epi16 (mx, x, x);\n+  y = _mm256_mask_max_epi16 (y, my, y, y);\n+  y = _mm256_maskz_max_epi16 (my, y, y);\n+  z = _mm_mask_max_epi16 (z, mz, z, z);\n+  z = _mm_maskz_max_epi16 (mz, z, z);\n+}"}, {"sha": "608fbf40fbcdadde3dec13d47272004ad080a9c7", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxsw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxsw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *src1, short *src2, short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] > src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] =  i * sign;\n+      src2.a[i] = (i + 20) * sign;\n+      sign = -sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_max_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_max_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_max_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "87728891557c9a4623af9bbbba6884cbcdd33ced", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxub-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxub-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_max_epu8 (x, x);\n+  x = _mm512_mask_max_epu8 (x, mx, x, x);\n+  x = _mm512_maskz_max_epu8 (mx, x, x);\n+  y = _mm256_mask_max_epu8 (y, my, y, y);\n+  y = _mm256_maskz_max_epu8 (my, y, y);\n+  z = _mm_mask_max_epu8 (z, mz, z, z);\n+  z = _mm_maskz_max_epu8 (mz, z, z);\n+}"}, {"sha": "bcfa472f7332502b144aa275ef655d92ec47b17b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxub-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxub-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned char *src1, unsigned char *src2,\n+      unsigned char *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] > src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned char res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i;\n+      src2.a[i] = i + 20;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_max_epu8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_max_epu8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_max_epu8) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a0dc29f2293c25f990c843f54d18432acd5677de", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxuw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxuw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmaxuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_max_epu16 (x, x);\n+  x = _mm512_mask_max_epu16 (x, mx, x, x);\n+  x = _mm512_maskz_max_epu16 (mx, x, x);\n+  y = _mm256_mask_max_epu16 (y, my, y, y);\n+  y = _mm256_maskz_max_epu16 (my, y, y);\n+  z = _mm_mask_max_epu16 (z, mz, z, z);\n+  z = _mm_maskz_max_epu16 (mz, z, z);\n+}"}, {"sha": "e9f80f8764c13f88872f19a2291866e4c6476ddd", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmaxuw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmaxuw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned short *src1, unsigned short *src2,\n+      unsigned short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] > src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i;\n+      src2.a[i] = i + 20;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_max_epu16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_max_epu16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_max_epu16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "091607373b6b2d1b23fb43feb30330cc76c17f1d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminsb-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_min_epi8 (x, x);\n+  x = _mm512_mask_min_epi8 (x, mx, x, x);\n+  x = _mm512_maskz_min_epi8 (mx, x, x);\n+  y = _mm256_mask_min_epi8 (y, my, y, y);\n+  y = _mm256_maskz_min_epi8 (my, y, y);\n+  z = _mm_mask_min_epi8 (z, mz, z, z);\n+  z = _mm_maskz_min_epi8 (mz, z, z);\n+}"}, {"sha": "7f5532e139c19cae06ec812ab8e353a13591a902", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminsb-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *src1, char *src2, char *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] < src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] =  i * sign;\n+      src2.a[i] = (i + 20) * sign;\n+      sign = -sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_min_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_min_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_min_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "e712752078134290bc25d0600042dbb0937a016f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminsw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_min_epi16 (x, x);\n+  x = _mm512_mask_min_epi16 (x, mx, x, x);\n+  x = _mm512_maskz_min_epi16 (mx, x, x);\n+  y = _mm256_mask_min_epi16 (y, my, y, y);\n+  y = _mm256_maskz_min_epi16 (my, y, y);\n+  z = _mm_mask_min_epi16 (z, mz, z, z);\n+  z = _mm_maskz_min_epi16 (mz, z, z);\n+}"}, {"sha": "d7e6896097b28a031fe74ed5855aec92b900e9e8", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminsw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminsw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *src1, short *src2, short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] < src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] =  i * sign;\n+      src2.a[i] = (i + 20) * sign;\n+      sign = -sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_min_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_min_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_min_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "6e36e344558aecd4f2e5cc9938dfb92682822ecc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminub-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminub-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_min_epu8 (x, x);\n+  x = _mm512_mask_min_epu8 (x, mx, x, x);\n+  x = _mm512_maskz_min_epu8 (mx, x, x);\n+  y = _mm256_mask_min_epu8 (y, my, y, y);\n+  y = _mm256_maskz_min_epu8 (my, y, y);\n+  z = _mm_mask_min_epu8 (z, mz, z, z);\n+  z = _mm_maskz_min_epu8 (mz, z, z);\n+}"}, {"sha": "57e1ed5cf6e73b5a2892652388a02dc81e185244", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminub-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminub-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned char *src1, unsigned char *src2,\n+      unsigned char *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] < src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned char res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i;\n+      src2.a[i] = i + 20;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_min_epu8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_min_epu8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_min_epu8) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "4ca15b38abb89e0ec614860b6e927fb011352041", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminuw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminuw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask32 mx;\n+volatile __mmask16 my;\n+volatile __mmask8 mz;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_min_epu16 (x, x);\n+  x = _mm512_mask_min_epu16 (x, mx, x, x);\n+  x = _mm512_maskz_min_epu16 (mx, x, x);\n+  y = _mm256_mask_min_epu16 (y, my, y, y);\n+  y = _mm256_maskz_min_epu16 (my, y, y);\n+  z = _mm_mask_min_epu16 (z, mz, z, z);\n+  z = _mm_maskz_min_epu16 (mz, z, z);\n+}"}, {"sha": "a3834b36ec1112ed49385f9b040a6d5f7898b7d9", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpminuw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpminuw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned short *src1, unsigned short *src2,\n+      unsigned short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] < src2[i] ? src1[i] : src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i;\n+      src2.a[i] = i + 20;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_min_epu16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_min_epu16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_min_epu16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "48284783bef5a41300b41aab4f1481ec157ca9ac", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovb2m-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovb2m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovb2m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovb2m-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovb2m\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovb2m\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovb2m\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m64;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_movepi8_mask (x128);\n+  m32 = _mm256_movepi8_mask (x256);\n+  m64 = _mm512_movepi8_mask (x512);\n+}"}, {"sha": "0e6db4d7c5b0ffdcc3cb86ecb9c738e07274f354", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovb2m-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovb2m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovb2m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovb2m-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, char *s1)\n+{\n+  int i;\n+  MASK_TYPE res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >> 7)\n+      res = res | (one << i);\n+\n+  *r = res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) src;\n+  MASK_TYPE res, res_ref = 0;\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 2 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res = INTRINSIC (_movepi8_mask) (src.x);\n+\n+  CALC (&res_ref, src.a);\n+\n+  if (res_ref != res)\n+    abort ();\n+}"}, {"sha": "a832479dc4f7d43cded09510ae06530db422cf0e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovm2b-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2b-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2b-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2b-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovm2b\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2b\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2b\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%zmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m64;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x128 = _mm_movm_epi8 (m16);\n+  x256 = _mm256_movm_epi8 (m32);\n+  x512 = _mm512_movm_epi8 (m64);\n+}"}, {"sha": "17a6dc6238b6d99eccde5fa15b7efa58bc060c51", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovm2b-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2b-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, MASK_TYPE s)\n+{\n+  int i;\n+  char all_ones = 0xff;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = ((s >> i) & 1) ? all_ones : 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) res, res_ref;\n+  MASK_TYPE src = (MASK_TYPE) 0x1111abeffeec1234;\n+\n+  res.x = INTRINSIC (_movm_epi8) (src);\n+\n+  CALC (res_ref.a, src);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res, res_ref.a))\n+    abort ();\n+}"}, {"sha": "d356d5e89a42d840e76035330dda041fd0de282f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovm2w-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2w-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovm2w\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2w\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2w\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%zmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x128 = _mm_movm_epi16 (m8);\n+  x256 = _mm256_movm_epi16 (m16);\n+  x512 = _mm512_movm_epi16 (m32);\n+}"}, {"sha": "073bdc92c012fd55c3d6facbfb38df4de44772b4", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovm2w-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovm2w-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, MASK_TYPE s)\n+{\n+  int i;\n+  short all_ones = 0xffff;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = ((s >> i) & 1) ? all_ones : 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) res, res_ref;\n+  MASK_TYPE src = (MASK_TYPE) 0x1111abc2;\n+\n+  res.x = INTRINSIC (_movm_epi16) (src);\n+\n+  CALC (res_ref.a, src);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res, res_ref.a))\n+    abort ();\n+}"}, {"sha": "ea02205b0698d255b1a9a3aed00f89ebd10bbdc2", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovswb-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x, z;\n+volatile __m256i y;\n+volatile __m512i u;\n+volatile __mmask8 m1;\n+volatile __mmask16 m2;\n+volatile __mmask32 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm_cvtsepi16_epi8 (x);\n+  z = _mm_mask_cvtsepi16_epi8 (z, m1, x);\n+  z = _mm_maskz_cvtsepi16_epi8 (m1, x);\n+  z = _mm256_cvtsepi16_epi8 (y);\n+  z = _mm256_mask_cvtsepi16_epi8 (z, m2, y);\n+  z = _mm256_maskz_cvtsepi16_epi8 (m2, y);\n+  y = _mm512_cvtsepi16_epi8 (u);\n+  y = _mm512_mask_cvtsepi16_epi8 (y, m3, u);\n+  y = _mm512_maskz_cvtsepi16_epi8 (m3, u);\n+}"}, {"sha": "46cf03ce6a25a5a88698dc1a3bcf15d2c9a49b50", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovswb-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#define SIZE_HALF (AVX512F_LEN_HALF / 8)\n+#include \"avx512f-mask-type.h\"\n+#include <limits.h>\n+\n+void\n+CALC (char *r, short *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE_HALF; i++)\n+    {\n+      if (s[i] < CHAR_MIN)\n+\tr[i] = CHAR_MIN;\n+      else if (s[i] > CHAR_MAX)\n+\tr[i] = CHAR_MAX;\n+      else\n+\tr[i] = s[i];\n+      r[i] = (i < SIZE) ? r[i] : 0;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_b) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN, i_w) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[32];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 1 + 34 * i * sign;\n+      sign = sign * -1;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtsepi16_epi8) (src.x);\n+  res2.x = INTRINSIC (_mask_cvtsepi16_epi8) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvtsepi16_epi8) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "78be054595eac7ef56fd56911f33c33f81fb9b64", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovsxbw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovsxbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovsxbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovsxbw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res1;\n+volatile __m256i s1, res2;\n+volatile __m128i s2, res3;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  res1 = _mm512_cvtepi8_epi16 (s1);\n+\n+  res1 = _mm512_mask_cvtepi8_epi16 (res1, m32, s1);\n+  res2 = _mm256_mask_cvtepi8_epi16 (res2, m16, s2);\n+  res3 = _mm_mask_cvtepi8_epi16 (res3, m8, s2);\n+\n+  res1 = _mm512_maskz_cvtepi8_epi16 (m32, s1);\n+  res2 = _mm256_maskz_cvtepi8_epi16 (m16, s2);\n+  res3 = _mm_maskz_cvtepi8_epi16 (m8, s2);\n+}"}, {"sha": "4cc440530689baa2dc8586c1c04e9b25724d00f4", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovsxbw-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovsxbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovsxbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovsxbw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE (AVX512F_LEN_HALF / 8)\n+#define DST_SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *s, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      r[i] = (short) s[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN_HALF, i_b) s;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[DST_SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 8 * i * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvtepi8_epi16) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepi8_epi16) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepi8_epi16) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "03fd07bea63e078b1cac0a74ab0caa45c591c472", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovuswb-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x, z;\n+volatile __m256i y;\n+volatile __m512i u;\n+volatile __mmask8 m1;\n+volatile __mmask16 m2;\n+volatile __mmask32 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm_cvtusepi16_epi8 (x);\n+  z = _mm_mask_cvtusepi16_epi8 (z, m1, x);\n+  z = _mm_maskz_cvtusepi16_epi8 (m1, x);\n+  z = _mm256_cvtusepi16_epi8 (y);\n+  z = _mm256_mask_cvtusepi16_epi8 (z, m2, y);\n+  z = _mm256_maskz_cvtusepi16_epi8 (m2, y);\n+  y = _mm512_cvtusepi16_epi8 (u);\n+  y = _mm512_mask_cvtusepi16_epi8 (y, m3, u);\n+  y = _mm512_maskz_cvtusepi16_epi8 (m3, u);\n+}"}, {"sha": "cc82398b662120a0d82603c93e659ef79ad6a9ff", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovuswb-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#define SIZE_HALF (AVX512F_LEN_HALF / 8)\n+#include \"avx512f-mask-type.h\"\n+#include <limits.h>\n+\n+void\n+CALC (unsigned char *r, unsigned short *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE_HALF; i++)\n+      r[i] = (i < SIZE) ? ((s[i] > UCHAR_MAX) ? UCHAR_MAX : s[i]) : 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_b) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN, i_w) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned char res_ref[32];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 1 + 34 * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtusepi16_epi8) (src.x);\n+  res2.x = INTRINSIC (_mask_cvtusepi16_epi8) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvtusepi16_epi8) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "31a64ffc0d9b64ac128eeb87fc22be8330fbc8fb", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovw2m-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovw2m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovw2m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovw2m-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovw2m\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovw2m\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovw2m\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_movepi16_mask (x128);\n+  m16 = _mm256_movepi16_mask (x256);\n+  m32 = _mm512_movepi16_mask (x512);\n+}"}, {"sha": "916d481350da8d568c9969922f2ee5542d04e0dc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovw2m-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovw2m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovw2m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovw2m-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, short *s1)\n+{\n+  int i;\n+  MASK_TYPE res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >> 15)\n+      res = res | (one << i);\n+\n+  *r = res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) src;\n+  MASK_TYPE res, res_ref = 0;\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 2 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res = INTRINSIC (_movepi16_mask) (src.x);\n+\n+  CALC (&res_ref, src.a);\n+\n+  if (res_ref != res)\n+    abort ();\n+}"}, {"sha": "115a54747f4194f89c8f3aa198fda7f9d09d779d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovwb-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x, z;\n+volatile __m256i y;\n+volatile __m512i u;\n+volatile __mmask8 m1;\n+volatile __mmask16 m2;\n+volatile __mmask32 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm_cvtepi16_epi8 (x);\n+  z = _mm_mask_cvtepi16_epi8 (z, m1, x);\n+  z = _mm_maskz_cvtepi16_epi8 (m1, x);\n+  z = _mm256_cvtepi16_epi8 (y);\n+  z = _mm256_mask_cvtepi16_epi8 (z, m2, y);\n+  z = _mm256_maskz_cvtepi16_epi8 (m2, y);\n+  y = _mm512_cvtepi16_epi8 (u);\n+  y = _mm512_mask_cvtepi16_epi8 (y, m3, u);\n+  y = _mm512_maskz_cvtepi16_epi8 (m3, u);\n+}"}, {"sha": "16dff18ce50609a693461ae33ed51755eb9aa38b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovwb-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#define SIZE_HALF (AVX512F_LEN_HALF / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, short *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE_HALF; i++)\n+    {\n+      r[i] = (i < SIZE) ? (char) s[i] : 0;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN_HALF, i_b) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN, i_w) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[32];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 1 + 34 * i * sign;\n+      sign = sign * -1;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtepi16_epi8) (src.x);\n+  res2.x = INTRINSIC (_mask_cvtepi16_epi8) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvtepi16_epi8) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "691b9b70e2cd88ae5ac8abff12ed9a8856b7ba97", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovzxbw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovzxbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovzxbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovzxbw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i res1;\n+volatile __m256i s1, res2;\n+volatile __m128i s2, res3;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  res1 = _mm512_cvtepu8_epi16 (s1);\n+\n+  res1 = _mm512_mask_cvtepu8_epi16 (res1, m32, s1);\n+  res2 = _mm256_mask_cvtepu8_epi16 (res2, m16, s2);\n+  res3 = _mm_mask_cvtepu8_epi16 (res3, m8, s2);\n+\n+  res1 = _mm512_maskz_cvtepu8_epi16 (m32, s1);\n+  res2 = _mm256_maskz_cvtepu8_epi16 (m16, s2);\n+  res3 = _mm_maskz_cvtepu8_epi16 (m8, s2);\n+}"}, {"sha": "7048147e743f83be4b99e0516c4c4ae21cef1c70", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovzxbw-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovzxbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovzxbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovzxbw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SRC_SIZE (AVX512F_LEN_HALF / 8)\n+#define DST_SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned char *s, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    {\n+      r[i] = s[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN_HALF, i_b) s;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[DST_SIZE];\n+  int i;\n+\n+  for (i = 0; i < SRC_SIZE; i++)\n+    {\n+      s.a[i] = 16 * i;\n+    }\n+\n+  for (i = 0; i < DST_SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_cvtepu8_epi16) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepu8_epi16) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepu8_epi16) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, DST_SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "066da24dfae9f33545b2281fd8ee33d67d9dac28", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmulhrsw-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhrsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhrsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhrsw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhrsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x, y, z;\n+volatile __m256i xq, yq, zq;\n+volatile __m128i xw, yw, zw;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_mulhrs_epi16 (y, z);\n+  x = _mm512_mask_mulhrs_epi16 (x, 2, y, z);\n+  x = _mm512_maskz_mulhrs_epi16 (2, y, z);\n+  xq = _mm256_mask_mulhrs_epi16 (xq, 2, yq, zq);\n+  xq = _mm256_maskz_mulhrs_epi16 (2, yq, zq);\n+  xw = _mm_mask_mulhrs_epi16 (xw, 2, yw, zw);\n+  xw = _mm_maskz_mulhrs_epi16 (2, yw, zw);\n+}"}, {"sha": "4ae2f36f73bc09a8952ca69bbc84c24b1d504209", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmulhrsw-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhrsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhrsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhrsw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *src1, short *src2, short *dst)\n+{\n+  int i, t0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      t0 = (((int) src1[i] * (int) src2[i]) >> 14) + 1;\n+      dst[i] = (short) (t0 >> 1);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, dst1, dst2, dst3;\n+  short dst_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i, sign = -1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i % 2;\n+      src2.a[i] = i * sign;\n+      dst2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  dst1.x = INTRINSIC (_mulhrs_epi16) (src1.x, src2.x);\n+  dst2.x =\n+    INTRINSIC (_mask_mulhrs_epi16) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_mulhrs_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "4ffda9365494855d253e3221963d97ca744184d7", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmulhuw-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhuw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhuw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x, y, z;\n+volatile __m256i xq, yq, zq;\n+volatile __m128i xw, yw, zw;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_mulhi_epu16 (y, z);\n+  x = _mm512_mask_mulhi_epu16 (x, 2, y, z);\n+  x = _mm512_maskz_mulhi_epu16 (2, y, z);\n+  xq = _mm256_mask_mulhi_epu16 (xq, 2, yq, zq);\n+  xq = _mm256_maskz_mulhi_epu16 (2, yq, zq);\n+  xw = _mm_mask_mulhi_epu16 (xw, 2, yw, zw);\n+  xw = _mm_maskz_mulhi_epu16 (2, yw, zw);\n+}"}, {"sha": "512940a2765502a245f0056820f36316f5000b15", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmulhuw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhuw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhuw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhuw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *src1, short *src2, short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = (src1[i] * src2[i]) >> 16;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, dst1, dst2, dst3;\n+  short dst_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i, sign = -1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i % 2;\n+      src2.a[i] = i * sign;\n+      dst2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  dst1.x = INTRINSIC (_mulhi_epu16) (src1.x, src2.x);\n+  dst2.x =\n+    INTRINSIC (_mask_mulhi_epu16) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_mulhi_epu16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "70c2f561bdab06259a9ba0610f135b7a943bab9b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmulhw-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmulhw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x, y, z;\n+volatile __m256i xq, yq, zq;\n+volatile __m128i xw, yw, zw;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_mulhi_epi16 (y, z);\n+  x = _mm512_mask_mulhi_epi16 (x, 2, y, z);\n+  x = _mm512_maskz_mulhi_epi16 (2, y, z);\n+  xq = _mm256_mask_mulhi_epi16 (xq, 2, yq, zq);\n+  xq = _mm256_maskz_mulhi_epi16 (2, yq, zq);\n+  xw = _mm_mask_mulhi_epi16 (xw, 2, yw, zw);\n+  xw = _mm_maskz_mulhi_epi16 (2, yw, zw);\n+}"}, {"sha": "d87932d304e7417e4b92370175c459fe974c641e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmulhw-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmulhw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *src1, short *src2, short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = (src1[i] * src2[i]) >> 16;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, dst1, dst2, dst3;\n+  short dst_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i, sign = -1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i % 2;\n+      src2.a[i] = i * sign;\n+      dst2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  dst1.x = INTRINSIC (_mulhi_epi16) (src1.x, src2.x);\n+  dst2.x =\n+    INTRINSIC (_mask_mulhi_epi16) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_mulhi_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "1d27e88a936c09e827269b86ec52ce30dca5b192", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmullw-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmullw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmullw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmullw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x, y, z;\n+volatile __m256i xq, yq, zq;\n+volatile __m128i xw, yw, zw;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_mullo_epi16 (y, z);\n+  x = _mm512_mask_mullo_epi16 (x, 3, y, z);\n+  x = _mm512_maskz_mullo_epi16 (3, y, z);\n+  xq = _mm256_mask_mullo_epi16 (xq, 3, yq, zq);\n+  xq = _mm256_maskz_mullo_epi16 (3, yq, zq);\n+  xw = _mm_mask_mullo_epi16 (xw, 3, yw, zw);\n+  xw = _mm_maskz_mullo_epi16 (3, yw, zw);\n+}"}, {"sha": "603882330b9c6f4123a8d810133824e28353edb0", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmullw-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmullw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmullw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmullw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *src1, short *src2, short *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = (short) ((int) src1[i] * (int) src2[i]);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2, dst1, dst2, dst3;\n+  short dst_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * sign;\n+      src2.a[i] = i + 20 * sign;\n+      sign = -sign;\n+      dst2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  dst1.x = INTRINSIC (_mullo_epi16) (src1.x, src2.x);\n+  dst2.x = INTRINSIC (_mask_mullo_epi16) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_mullo_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (src1.a, src2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "200ec8957f55614449b8a8e050f7a44cf30564ac", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpshufb-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask64 m1;\n+volatile __mmask32 m2;\n+volatile __mmask16 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_shuffle_epi8 (z, z);\n+  z = _mm512_mask_shuffle_epi8 (z, m1, z, z);\n+  z = _mm512_maskz_shuffle_epi8 (m1, z, z);\n+  y = _mm256_mask_shuffle_epi8 (y, m2, y, y);\n+  y = _mm256_maskz_shuffle_epi8 (m2, y, y);\n+  x = _mm_mask_shuffle_epi8 (x, m3, x, x);\n+  x = _mm_maskz_shuffle_epi8 (m3, x, x);\n+}"}, {"sha": "6b43dcfb744b31fa1d65001342e053b9da5f6b75", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpshufb-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *s1, char *s2, char *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      if (s2[i] < 0)\n+\tr[i] = 0;\n+      else\n+\tr[i] = s1[(s2[i] & 0xf) + 16 * (i / 16)];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, s2, res1, res2, res3;\n+  char res_ref[SIZE];\n+  int i, sign = 1;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * i * sign;\n+      s2.a[i] = 179 - i;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_shuffle_epi8) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_shuffle_epi8) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_shuffle_epi8) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "66de86451dd86e6a1ce81723930a6e855bfa8ce3", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpshufhw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufhw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufhw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_shufflehi_epi16 (z, _MM_PERM_AADB);\n+  z = _mm512_mask_shufflehi_epi16 (z, m1, z, _MM_PERM_AADB);\n+  z = _mm512_maskz_shufflehi_epi16 (m1, z, _MM_PERM_AADB);\n+  y = _mm256_mask_shufflehi_epi16 (y, m2, y, _MM_PERM_AADB);\n+  y = _mm256_maskz_shufflehi_epi16 (m2, y, _MM_PERM_AADB);\n+  x = _mm_mask_shufflehi_epi16 (x, m3, x, _MM_PERM_AADB);\n+  x = _mm_maskz_shufflehi_epi16 (m3, x, _MM_PERM_AADB);\n+}"}, {"sha": "4043217ba7bb733c529a0d5ae10a898c7f839970", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpshufhw-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufhw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufhw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshufhw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *s, unsigned char imm, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE / 8; i++)\n+    {\n+      r[8 * i] = s[8 * i];\n+      r[8 * i + 1] = s[8 * i + 1];\n+      r[8 * i + 2] = s[8 * i + 2];\n+      r[8 * i + 3] = s[8 * i + 3];\n+      r[8 * i + 4] = s[8 * i + (imm >> 0 & 3) + 4];\n+      r[8 * i + 5] = s[8 * i + (imm >> 2 & 3) + 4];\n+      r[8 * i + 6] = s[8 * i + (imm >> 4 & 3) + 4];\n+      r[8 * i + 7] = s[8 * i + (imm >> 6 & 3) + 4];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, res1, res2, res3;\n+  short res_ref[SIZE];\n+  int i, sign = 1;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * i * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_shufflehi_epi16) (s1.x, 0xec);\n+  res2.x =\n+    INTRINSIC (_mask_shufflehi_epi16) (res2.x, mask, s1.x, 0xec);\n+  res3.x = INTRINSIC (_maskz_shufflehi_epi16) (mask, s1.x, 0xec);\n+\n+  CALC (s1.a, 0xec, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "1b18f99c0c068608a05fe61e5fa303abd92d562e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpshuflw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshuflw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshuflw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshuflw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshuflw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_shufflelo_epi16 (z, _MM_PERM_AADB);\n+  z = _mm512_mask_shufflelo_epi16 (z, m1, z, _MM_PERM_AADB);\n+  z = _mm512_maskz_shufflelo_epi16 (m1, z, _MM_PERM_AADB);\n+  y = _mm256_mask_shufflelo_epi16 (y, m2, y, _MM_PERM_AADB);\n+  y = _mm256_maskz_shufflelo_epi16 (m2, y, _MM_PERM_AADB);\n+  x = _mm_mask_shufflelo_epi16 (x, m3, x, _MM_PERM_AADB);\n+  x = _mm_maskz_shufflelo_epi16 (m3, x, _MM_PERM_AADB);\n+}"}, {"sha": "72dda61c3c204dca0651313db46466c986a31caf", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpshuflw-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshuflw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshuflw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpshuflw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *s, unsigned char imm, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE / 8; i++)\n+    {\n+      r[8 * i] = s[8 * i + (imm >> 0 & 3)];\n+      r[8 * i + 1] = s[8 * i + (imm >> 2 & 3)];\n+      r[8 * i + 2] = s[8 * i + (imm >> 4 & 3)];\n+      r[8 * i + 3] = s[8 * i + (imm >> 6 & 3)];\n+      r[8 * i + 4] = s[8 * i + 4];\n+      r[8 * i + 5] = s[8 * i + 5];\n+      r[8 * i + 6] = s[8 * i + 6];\n+      r[8 * i + 7] = s[8 * i + 7];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, res1, res2, res3;\n+  short res_ref[SIZE];\n+  int i, sign = 1;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * i * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_shufflelo_epi16) (s1.x, 0xec);\n+  res2.x =\n+    INTRINSIC (_mask_shufflelo_epi16) (res2.x, mask, s1.x, 0xec);\n+  res3.x = INTRINSIC (_maskz_shufflelo_epi16) (mask, s1.x, 0xec);\n+\n+  CALC (s1.a, 0xec, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "4964c1df8955c8ebac9000213ac1ebf4ac1f3d35", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpslldq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpslldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpslldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpslldq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpslldq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+extern volatile __m512i x;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_bslli_epi128 (x, 13);\n+}"}, {"sha": "bdf0da64e5000a55a68ffaf00446df4923051d15", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsllvw-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllvw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllvw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllvw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_sllv_epi16 (z, z);\n+  z = _mm512_mask_sllv_epi16 (z, m1, z, z);\n+  z = _mm512_maskz_sllv_epi16 (m1, z, z);\n+  y = _mm256_sllv_epi16 (y, y);\n+  y = _mm256_mask_sllv_epi16 (y, m2, y, y);\n+  y = _mm256_maskz_sllv_epi16 (m2, y, y);\n+  x = _mm_sllv_epi16 (x, x);\n+  x = _mm_mask_sllv_epi16 (x, m3, x, x);\n+  x = _mm_maskz_sllv_epi16 (m3, x, x);\n+}"}, {"sha": "e8a5f20b657f7591b7beba01c896cbd96a6ef0e1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsllvw-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllvw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllvw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllvw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE    (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; ++i)\n+    {\n+      r[i] = ((unsigned short) s1[i]) << s2[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * sign;\n+      s2.a[i] = i >> 2;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_sllv_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_sllv_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_sllv_epi16) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "42457fb0107d18eb67fe39e4047c9f89bf2fa6da", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsllw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 7 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __m512i x;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __m128i y;\n+volatile __mmask32 m;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_sll_epi16 (x, y);\n+  x = _mm512_mask_sll_epi16 (x, m, x, y);\n+  x = _mm512_maskz_sll_epi16 (m, x, y);\n+  x256 = _mm256_mask_sll_epi16 (x256, m256, x256, y);\n+  x256 = _mm256_maskz_sll_epi16 (m256, x256, y);\n+  x128 = _mm_mask_sll_epi16 (x128, m128, x128, y);\n+  x128 = _mm_maskz_sll_epi16 (m128, x128, y);\n+}"}, {"sha": "3eb629b988fa129b9477596089f4526b59cbc9b9", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsllw-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, long long *s2)\n+{\n+  int i;\n+  long long count = s2[0];\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = count < 16 ? (s1[i] << count) : 0;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1;\n+  UNION_TYPE (128, i_q) src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  long long imm;\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < 2; i++)\n+    {\n+      src2.a[i] = 0;\n+    }\n+\n+  for (imm = 1; imm <= 17; imm++)\n+    {\n+      src2.a[0] = imm;\n+      for (i = 0; i < SIZE; i++)\n+\tres2.a[i] = DEFAULT_VALUE;\n+\n+      res1.x = INTRINSIC (_sll_epi16) (src1.x, src2.x);\n+      res2.x = INTRINSIC (_mask_sll_epi16) (res2.x, mask, src1.x, src2.x);\n+      res3.x = INTRINSIC (_maskz_sll_epi16) (mask, src1.x, src2.x);\n+\n+      CALC (res_ref, src1.a, src2.a);\n+\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+\tabort ();\n+\n+      MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+\tabort ();\n+\n+      MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+      if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+\tabort ();\n+    }\n+}"}, {"sha": "83d4c04710edef2999399c0ad4f5dcbc67ba9832", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsllwi-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllwi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllwi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllwi-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __m512i x;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+#define y 7\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_slli_epi16 (x, y);\n+  x = _mm512_mask_slli_epi16 (x, m, x, y);\n+  x = _mm512_maskz_slli_epi16 (m, x, y);\n+  x256 = _mm256_mask_slli_epi16 (x256, m256, x256, y);\n+  x256 = _mm256_maskz_slli_epi16 (m256, x256, y);\n+  x128 = _mm_mask_slli_epi16 (x128, m128, x128, y);\n+  x128 = _mm_maskz_slli_epi16 (m128, x128, y);\n+}"}, {"sha": "87d55f79d92d7ac3d1e6cbc33f7029330ee78e67", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsllwi-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllwi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllwi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsllwi-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short count)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = count < 16 ? (s1[i] << count) : 0;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      sign = sign * -1;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_slli_epi16) (src1.x, 5);\n+  res2.x = INTRINSIC (_mask_slli_epi16) (res2.x, mask, src1.x, 5);\n+  res3.x = INTRINSIC (_maskz_slli_epi16) (mask, src1.x, 5);\n+\n+  CALC (res_ref, src1.a, 5);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+\n+\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_slli_epi16) (src1.x, 17);\n+  res2.x = INTRINSIC (_mask_slli_epi16) (res2.x, mask, src1.x, 17);\n+  res3.x = INTRINSIC (_maskz_slli_epi16) (mask, src1.x, 17);\n+\n+  CALC (res_ref, src1.a, 17);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "70db2fda45387c656583c0b397f855348f4e8488", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsravw-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsravw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsravw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsravw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsravw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_srav_epi16 (z, z);\n+  z = _mm512_mask_srav_epi16 (z, m1, z, z);\n+  z = _mm512_maskz_srav_epi16 (m1, z, z);\n+  y = _mm256_srav_epi16 (y, y);\n+  y = _mm256_mask_srav_epi16 (y, m2, y, y);\n+  y = _mm256_maskz_srav_epi16 (m2, y, y);\n+  x = _mm_srav_epi16 (x, x);\n+  x = _mm_mask_srav_epi16 (x, m3, x, x);\n+  x = _mm_maskz_srav_epi16 (m3, x, x);\n+}"}, {"sha": "225d732a7b4acafab40eb71836fc32ffe0a57e1f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsravw-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsravw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsravw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsravw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE    (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; ++i)\n+    {\n+      r[i] = s2[i] < 16 ? (s1[i] >> s2[i]) : (s1[i] > 0 ? 0 : 0xFFFF);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * sign;\n+      s2.a[i] = i >> 2;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_srav_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_srav_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_srav_epi16) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "667825bd7eb248e5af7647c03a25bd21f5b8f735", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsraw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsraw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsraw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsraw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_sra_epi16 (z, x);\n+  z = _mm512_mask_sra_epi16 (z, m1, z, x);\n+  z = _mm512_maskz_sra_epi16 (m1, z, x);\n+  y = _mm256_mask_sra_epi16 (y, m2, y, x);\n+  y = _mm256_maskz_sra_epi16 (m2, y, x);\n+  x  = _mm_mask_sra_epi16 (x, m3, x, x);\n+  x  = _mm_maskz_sra_epi16 (m3, x, x);\n+}"}, {"sha": "f1649c23542c8a880ca1d07e2365ce84fcb9f593", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsraw-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsraw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsraw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsraw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+#include <string.h>\n+\n+#define N 0x5\n+\n+void\n+CALC (short *s1, long long int *s2, short *r)\n+{\n+  int i;\n+  long long int count = s2[0];\n+\n+  memset (r, 0, SIZE);\n+\n+  if (count < 16)\n+    for (i = 0; i < SIZE; ++i)\n+      r[i] = s1[i] >> count;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  union128i_q s2;\n+  short res_ref[SIZE];\n+  int i, sign;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * sign;\n+      sign = -sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  s2.a[0] = N;\n+\n+  res1.x = INTRINSIC (_sra_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_sra_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_sra_epi16) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "ebb9fa9f4a7730573f9d1ca95333d3887291d527", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrawi-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrawi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrawi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrawi-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_srai_epi16 (z, 13);\n+  z = _mm512_mask_srai_epi16 (z, m1, z, 13);\n+  z = _mm512_maskz_srai_epi16 (m1, z, 13);\n+  y = _mm256_mask_srai_epi16 (y, m2, y, 13);\n+  y = _mm256_maskz_srai_epi16 (m2, y, 13);\n+  x = _mm_mask_srai_epi16 (x, m3, x, 13);\n+  x = _mm_maskz_srai_epi16 (m3, x, 13);\n+}"}, {"sha": "b72b806a4828104796e04685bea4fd0e4cab869d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrawi-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrawi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrawi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrawi-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+#include <string.h>\n+\n+#define N 0x5\n+\n+void\n+CALC (short *s1, short *r)\n+{\n+  int i;\n+\n+  memset (r, 0, SIZE);\n+\n+  if (N < 16)\n+    for (i = 0; i < SIZE; ++i)\n+      r[i] = s1[i] >> N;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  union128i_q s2;\n+  short res_ref[SIZE];\n+  int i, sign;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * sign;\n+      sign = -sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_srai_epi16) (s1.x, N);\n+  res2.x = INTRINSIC (_mask_srai_epi16) (res2.x, mask, s1.x, N);\n+  res3.x = INTRINSIC (_maskz_srai_epi16) (mask, s1.x, N);\n+\n+  CALC (s1.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "d9424f5106970d347e1273154249e4c5e30df371", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrldq-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrldq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrldq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrldq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+extern volatile __m512i x;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x = _mm512_bsrli_epi128 (x, 13);\n+}"}, {"sha": "a94b7cfa30eb4337d7bec4eff7b39737d3ecad72", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrlvw-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlvw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlvw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlvw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_srlv_epi16 (z, z);\n+  z = _mm512_mask_srlv_epi16 (z, m1, z, z);\n+  z = _mm512_maskz_srlv_epi16 (m1, z, z);\n+  y = _mm256_srlv_epi16 (y, y);\n+  y = _mm256_mask_srlv_epi16 (y, m2, y, y);\n+  y = _mm256_maskz_srlv_epi16 (m2, y, y);\n+  x = _mm_srlv_epi16 (x, x);\n+  x = _mm_mask_srlv_epi16 (x, m3, x, x);\n+  x = _mm_maskz_srlv_epi16 (m3, x, x);\n+}"}, {"sha": "eb98685770b854ac2bb45efaa8fd2676ad2fa366", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrlvw-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlvw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlvw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlvw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE    (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *s1, short *s2, short *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; ++i)\n+    {\n+      r[i] = ((unsigned short) s1[i]) >> s2[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = i * sign;\n+      s2.a[i] = i >> 2;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_srlv_epi16) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_srlv_epi16) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_srlv_epi16) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "584f30346d7d0d3a805c863f8fe9f8de2148838b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrlw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_srl_epi16 (z, x);\n+  z = _mm512_mask_srl_epi16 (z, m1, z, x);\n+  z = _mm512_maskz_srl_epi16 (m1, z, x);\n+  y = _mm256_mask_srl_epi16 (y, m2, y, x);\n+  y = _mm256_maskz_srl_epi16 (m2, y, x);\n+  x = _mm_mask_srl_epi16 (x, m3, x, x);\n+  x = _mm_maskz_srl_epi16 (m3, x, x);\n+}"}, {"sha": "611a8a84b83864b131fc553d5b3683942e13febc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrlw-2.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned short *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  unsigned short count = s2[0];\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = count < 16 ? (s1[i] >> count) : 0;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1;\n+  UNION_TYPE (128, i_w) src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + 7 * i % 291;\n+    }\n+\n+  for (i = 0; i < 128 / 16; i++)\n+    {\n+      src2.a[i] = 0;\n+    }\n+\n+  src2.a[0] = 1;\n+  src2.a[1] = 0;\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_srl_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_srl_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_srl_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+\n+  src2.a[0] = 17;\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_srl_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_srl_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_srl_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "0ca04050e4b25cf96b48611e65df00ab4aede37e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrlwi-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlwi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlwi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlwi-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\\[ \\\\t\\]+\\[^\\n\\]*13\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i y;\n+volatile __m128i x;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  z = _mm512_srli_epi16 (z, 13);\n+  z = _mm512_mask_srli_epi16 (z, m1, z, 13);\n+  z = _mm512_maskz_srli_epi16 (m1, z, 13);\n+  y = _mm256_mask_srli_epi16 (y, m2, y, 13);\n+  y = _mm256_maskz_srli_epi16 (m2, y, 13);\n+  x = _mm_mask_srli_epi16 (x, m3, x, 13);\n+  x = _mm_maskz_srli_epi16 (m3, x, 13);\n+}"}, {"sha": "1dfe6448af84f245e599c323b8b34576492218f8", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsrlwi-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlwi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlwi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsrlwi-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned short *r, unsigned short *s1, unsigned short count)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = count < 16 ? (s1[i] >> count) : 0;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + 7 * i % 291;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_srli_epi16) (src1.x, 5);\n+  res2.x = INTRINSIC (_mask_srli_epi16) (res2.x, mask, src1.x, 5);\n+  res3.x = INTRINSIC (_maskz_srli_epi16) (mask, src1.x, 5);\n+\n+  CALC (res_ref, src1.a, 5);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_srli_epi16) (src1.x, 17);\n+  res2.x = INTRINSIC (_mask_srli_epi16) (res2.x, mask, src1.x, 17);\n+  res3.x = INTRINSIC (_maskz_srli_epi16) (mask, src1.x, 17);\n+\n+  CALC (res_ref, src1.a, 17);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "6ce3113845a9ce405c428a7f8a10d9fce5d92136", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m512;\n+volatile __mmask32 m256;\n+volatile __mmask16 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_sub_epi8 (x512, x512);\n+  x512 = _mm512_mask_sub_epi8 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_sub_epi8 (m512, x512, x512);\n+  x256 = _mm256_mask_sub_epi8 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_sub_epi8 (m256, x256, x256);\n+  x128 = _mm_mask_sub_epi8 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_sub_epi8 (m128, x128, x128);\n+}"}, {"sha": "1a4cc8040ee1e55359457beb1396922609d30296", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubb-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] - s2[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_sub_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_sub_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_sub_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "cf27ca0dc43e32013bf048b3efec4f66e48d339d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubsb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m512;\n+volatile __mmask32 m256;\n+volatile __mmask16 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_subs_epi8 (x512, x512);\n+  x512 = _mm512_mask_subs_epi8 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_subs_epi8 (m512, x512, x512);\n+  x256 = _mm256_mask_subs_epi8 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_subs_epi8 (m256, x256, x256);\n+  x128 = _mm_mask_subs_epi8 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_subs_epi8 (m128, x128, x128);\n+}"}, {"sha": "b602b388c3d5d7bb20114f6ec2a78ddb9f029560", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubsb-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] - (int)s2[i];\n+      if (tmp > 0x7F) tmp = 0x7F;\n+      if (tmp < (char)0x80) tmp = (char)0x80;\n+      r[i] = (char)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_subs_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_subs_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_subs_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "583fc7915943cd21179ad8dbe74a0d44791b8307", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubsw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubsw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m512;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_subs_epi16 (x512, x512);\n+  x512 = _mm512_mask_subs_epi16 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_subs_epi16 (m512, x512, x512);\n+  x256 = _mm256_mask_subs_epi16 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_subs_epi16 (m256, x256, x256);\n+  x128 = _mm_mask_subs_epi16 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_subs_epi16 (m128, x128, x128);\n+}"}, {"sha": "a4e519be376af2c90abbdbf5f159e73c470a94ea", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubsw-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubsw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] - (int)s2[i];\n+      if (tmp > 0x7FFF) tmp = 0x7FFF;\n+      if (tmp < (short)0x8000) tmp = (short)0x8000;\n+      r[i] = (short)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_subs_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_subs_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_subs_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "0012e92de1dfb46a057afc57bcafcc814fef0e63", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubusb-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask64 m512;\n+volatile __mmask32 m256;\n+volatile __mmask16 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_subs_epu8 (x512, x512);\n+  x512 = _mm512_mask_subs_epu8 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_subs_epu8 (m512, x512, x512);\n+  x256 = _mm256_mask_subs_epu8 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_subs_epu8 (m256, x256, x256);\n+  x128 = _mm_mask_subs_epu8 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_subs_epu8 (m128, x128, x128);\n+}"}, {"sha": "d8b5e5557f4a2e57a767a2378a1b2c577fd6aab1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubusb-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned char *r, unsigned char *s1, unsigned char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] - (int)s2[i];\n+      if (tmp > 0xFF) tmp = 0xFF;\n+      if (tmp < 0) tmp = 0;\n+      r[i] = (unsigned char)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned char res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + 7 * i % 291;\n+      src2.a[i] = 3 + 11 * (i % 377) * i;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_subs_epu8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_subs_epu8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_subs_epu8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "c5f448d69096087703c8d61af868f73ed725957a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubusw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubusw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m512;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_subs_epu16 (x512, x512);\n+  x512 = _mm512_mask_subs_epu16 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_subs_epu16 (m512, x512, x512);\n+  x256 = _mm256_mask_subs_epu16 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_subs_epu16 (m256, x256, x256);\n+  x128 = _mm_mask_subs_epu16 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_subs_epu16 (m128, x128, x128);\n+}"}, {"sha": "deb30cd181d976b0ad672b1b583f0f5004becb84", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubusw-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubusw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned short *r, unsigned short *s1, unsigned short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (int)s1[i] - (int)s2[i];\n+      if (tmp > 0xFFFF) tmp = 0xFFFF;\n+      if (tmp < 0) tmp = 0;\n+      r[i] = (unsigned short)tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + 7 * i % 291;\n+      src2.a[i] = 3 + 11 * (i % 377) * i;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_subs_epu16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_subs_epu16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_subs_epu16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "68127e7d23e30077bb9b4d9059bc1b5a4a6bb017", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubw-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpsubw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask32 m512;\n+volatile __mmask16 m256;\n+volatile __mmask8 m128;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  x512 = _mm512_sub_epi16 (x512, x512);\n+  x512 = _mm512_mask_sub_epi16 (x512, m512, x512, x512);\n+  x512 = _mm512_maskz_sub_epi16 (m512, x512, x512);\n+  x256 = _mm256_mask_sub_epi16 (x256, m256, x256, x256);\n+  x256 = _mm256_maskz_sub_epi16 (m256, x256, x256);\n+  x128 = _mm_mask_sub_epi16 (x128, m128, x128, x128);\n+  x128 = _mm_maskz_sub_epi16 (m128, x128, x128);\n+}"}, {"sha": "9febeaa92f39f310d5447eec89d588706844aa6e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpsubw-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpsubw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s1[i] - s2[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 2 + sign * 7 * i % 291;\n+      src2.a[i] = 3 + sign * 11 * (i % 377) * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_sub_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_sub_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_sub_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "62137d05bdeffb5b6e5f09499588163f181166f1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestmb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vptestmb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestmb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestmb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestmb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestmb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestmb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x128;\n+volatile __m256i x256;\n+volatile __m512i x512;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_test_epi8_mask (x128, x128);\n+  m32 = _mm256_test_epi8_mask (x256, x256);\n+  m64 = _mm512_test_epi8_mask (x512, x512);\n+  m16 = _mm_mask_test_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_test_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_test_epi8_mask (3, x512, x512);\n+}"}, {"sha": "106a8daab1d251f1cc192fc1dec34daf83a7d620", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestmb-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *res, char *src1, char *src2)\n+{\n+  int i;\n+  *res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (src1[i] & src2[i])\n+      *res = *res | one << i;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign = 1;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i * sign;\n+      src2.a[i] = i + 20;\n+      sign = -sign;\n+    }\n+\n+  res1 = INTRINSIC (_test_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_test_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "8194a11b1b1876941fb1b68b057244e452cdc340", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestmw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vptestmw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestmw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestmw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestmw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestmw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestmw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x128;\n+volatile __m256i x256;\n+volatile __m512i x512;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_test_epi16_mask (x128, x128);\n+  m16 = _mm256_test_epi16_mask (x256, x256);\n+  m32 = _mm512_test_epi16_mask (x512, x512);\n+  m8 = _mm_mask_test_epi16_mask (3, x128, x128);\n+  m16 = _mm256_mask_test_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_test_epi16_mask (3, x512, x512);\n+}"}, {"sha": "82a5dd93e1b46e025b47afbd8390c6a42a895236", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestmw-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestmw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *res, short *src1, short *src2)\n+{\n+  int i;\n+  *res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (src1[i] & src2[i])\n+      *res = *res | one << i;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign = 1;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i * sign;\n+      src2.a[i] = i + 20;\n+      sign = -sign;\n+    }\n+\n+  res1 = INTRINSIC (_test_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_test_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "bb126fbd2ffe20c7d4e2f419b9c704dcefbf49f5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestnmb-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmb-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vptestnmb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestnmb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestnmb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestnmb\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestnmb\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestnmb\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x128;\n+volatile __m256i x256;\n+volatile __m512i x512;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m16 = _mm_testn_epi8_mask (x128, x128);\n+  m32 = _mm256_testn_epi8_mask (x256, x256);\n+  m64 = _mm512_testn_epi8_mask (x512, x512);\n+  m16 = _mm_mask_testn_epi8_mask (3, x128, x128);\n+  m32 = _mm256_mask_testn_epi8_mask (3, x256, x256);\n+  m64 = _mm512_mask_testn_epi8_mask (3, x512, x512);\n+}"}, {"sha": "d9ca442cfb66b907d4fef3365133811c16c4288b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestnmb-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *res, char *src1, char *src2)\n+{\n+  int i;\n+  *res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (!(src1[i] & src2[i]))\n+      *res = *res | one << i;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign = 1;\n+  UNION_TYPE (AVX512F_LEN, i_b) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i * sign;\n+      src2.a[i] = i + 20;\n+      sign = -sign;\n+    }\n+\n+  res1 = INTRINSIC (_testn_epi8_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_testn_epi8_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "82944b56e1ad5c4cff5740b668636032b2d7acb8", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestnmw-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vptestnmw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestnmw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestnmw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\[^\\{\\]\" } } */\n+/* { dg-final { scan-assembler \"vptestnmw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestnmw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+/* { dg-final { scan-assembler \"vptestnmw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x128;\n+volatile __m256i x256;\n+volatile __m512i x512;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  m8 = _mm_testn_epi16_mask (x128, x128);\n+  m16 = _mm256_testn_epi16_mask (x256, x256);\n+  m32 = _mm512_testn_epi16_mask (x512, x512);\n+  m8 = _mm_mask_testn_epi16_mask (3, x128, x128);\n+  m16 = _mm256_mask_testn_epi16_mask (3, x256, x256);\n+  m32 = _mm512_mask_testn_epi16_mask (3, x512, x512);\n+}"}, {"sha": "0e2b4adf1cdb8cc491ca37704579ce3ab8615fa9", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vptestnmw-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vptestnmw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *res, short *src1, short *src2)\n+{\n+  int i;\n+  *res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (!(src1[i] & src2[i]))\n+      *res = *res | one << i;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign = 1;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i * i * sign;\n+      src2.a[i] = i + 20;\n+      sign = -sign;\n+    }\n+\n+  res1 = INTRINSIC (_testn_epi16_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_testn_epi16_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "8beb7cc9c1e4570ffccdf3915bda4a58dc8e0a7f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpckhbw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhbw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpunpckhbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i d, e, f;\n+volatile __m256i x, y, z;\n+volatile __m128i a, b, c;\n+volatile __mmask64 m1;\n+volatile __mmask32 m2;\n+volatile __mmask16 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  d = _mm512_unpackhi_epi8 (e, f);\n+  d = _mm512_mask_unpackhi_epi8 (d, m1, e, f);\n+  d = _mm512_maskz_unpackhi_epi8 (m1, e, f);\n+  x = _mm256_mask_unpackhi_epi8 (x, m2, y, z);\n+  x = _mm256_maskz_unpackhi_epi8 (m2, y, z);\n+  a = _mm_mask_unpackhi_epi8 (a, m3, b, c);\n+  a = _mm_maskz_unpackhi_epi8 (m3, b, c);\n+}"}, {"sha": "21fcee8143679dee0660f5fecb9966f9e5e4ad42", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpckhbw-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhbw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE/16; i++)\n+    {\n+      r[16 * i] = s1[16 * i + 8];\n+      r[16 * i + 1] = s2[16 * i + 8];\n+      r[16 * i + 2] = s1[16 * i + 9];\n+      r[16 * i + 3] = s2[16 * i + 9];\n+      r[16 * i + 4] = s1[16 * i + 10];\n+      r[16 * i + 5] = s2[16 * i + 10];\n+      r[16 * i + 6] = s1[16 * i + 11];\n+      r[16 * i + 7] = s2[16 * i + 11];\n+      r[16 * i + 8] = s1[16 * i + 12];\n+      r[16 * i + 9] = s2[16 * i + 12];\n+      r[16 * i + 10] = s1[16 * i + 13];\n+      r[16 * i + 11] = s2[16 * i + 13];\n+      r[16 * i + 12] = s1[16 * i + 14];\n+      r[16 * i + 13] = s2[16 * i + 14];\n+      r[16 * i + 14] = s1[16 * i + 15];\n+      r[16 * i + 15] = s2[16 * i + 15];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 34 * i * sign;\n+      src1.a[i] = 179 * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_unpackhi_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_unpackhi_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_unpackhi_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "069cf7fef1c6837de7b3db9a0041a97deeba841e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpckhwd-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhwd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpunpckhwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhwd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpckhwd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i d, e, f;\n+volatile __m256i x, y, z;\n+volatile __m128i a, b, c;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  d = _mm512_unpackhi_epi16 (e, f);\n+  d = _mm512_mask_unpackhi_epi16 (d, m1, e, f);\n+  d = _mm512_maskz_unpackhi_epi16 (m1, e, f);\n+  x = _mm256_mask_unpackhi_epi16 (x, m2, y, z);\n+  x = _mm256_maskz_unpackhi_epi16 (m2, y, z);\n+  a = _mm_mask_unpackhi_epi16 (a, m3, b, c);\n+  a = _mm_maskz_unpackhi_epi16 (m3, b, c);\n+}"}, {"sha": "13ea5b92e2946e91098a0703930548768b3088a9", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpckhwd-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhwd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhwd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpckhwd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE/8; i++)\n+    {\n+      r[8 * i] = s1[8 * i + 4];\n+      r[8 * i + 1] = s2[8 * i + 4];\n+      r[8 * i + 2] = s1[8 * i + 5];\n+      r[8 * i + 3] = s2[8 * i + 5];\n+      r[8 * i + 4] = s1[8 * i + 6];\n+      r[8 * i + 5] = s2[8 * i + 6];\n+      r[8 * i + 6] = s1[8 * i + 7];\n+      r[8 * i + 7] = s2[8 * i + 7];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 34 * i * sign;\n+      src1.a[i] = 179 * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_unpackhi_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_unpackhi_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_unpackhi_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "34ed46d4cc5f56a56dcf5a2cd411acae5b1b388a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpcklbw-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklbw-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpunpcklbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklbw\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklbw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i d, e, f;\n+volatile __m256i x, y, z;\n+volatile __m128i a, b, c;\n+volatile __mmask64 m1;\n+volatile __mmask32 m2;\n+volatile __mmask16 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  d = _mm512_unpacklo_epi8 (e, f);\n+  d = _mm512_mask_unpacklo_epi8 (d, m1, e, f);\n+  d = _mm512_maskz_unpacklo_epi8 (m1, e, f);\n+  x = _mm256_mask_unpacklo_epi8 (x, m2, y, z);\n+  x = _mm256_maskz_unpacklo_epi8 (m2, y, z);\n+  a = _mm_mask_unpacklo_epi8 (a, m3, b, c);\n+  a = _mm_maskz_unpacklo_epi8 (m3, b, c);\n+}"}, {"sha": "ce155a8aba640131f001c319cb96779d276289ad", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpcklbw-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklbw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklbw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklbw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (char *r, char *s1, char *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE/16; i++)\n+    {\n+      r[16 * i] = s1[16 * i];\n+      r[16 * i + 1] = s2[16 * i];\n+      r[16 * i + 2] = s1[16 * i + 1];\n+      r[16 * i + 3] = s2[16 * i + 1];\n+      r[16 * i + 4] = s1[16 * i + 2];\n+      r[16 * i + 5] = s2[16 * i + 2];\n+      r[16 * i + 6] = s1[16 * i + 3];\n+      r[16 * i + 7] = s2[16 * i + 3];\n+      r[16 * i + 8] = s1[16 * i + 4];\n+      r[16 * i + 9] = s2[16 * i + 4];\n+      r[16 * i + 10] = s1[16 * i + 5];\n+      r[16 * i + 11] = s2[16 * i + 5];\n+      r[16 * i + 12] = s1[16 * i + 6];\n+      r[16 * i + 13] = s2[16 * i + 6];\n+      r[16 * i + 14] = s1[16 * i + 7];\n+      r[16 * i + 15] = s2[16 * i + 7];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 34 * i * sign;\n+      src1.a[i] = 179 * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_unpacklo_epi8) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_unpacklo_epi8) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_unpacklo_epi8) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "799631137364c0c2a2e5c327d19e0fa4ef7d683e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpcklwd-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklwd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklwd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklwd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpunpcklwd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i d, e, f;\n+volatile __m256i x, y, z;\n+volatile __m128i a, b, c;\n+volatile __mmask32 m1;\n+volatile __mmask16 m2;\n+volatile __mmask8 m3;\n+\n+void extern\n+avx512bw_test (void)\n+{\n+  d = _mm512_unpacklo_epi16 (e, f);\n+  d = _mm512_mask_unpacklo_epi16 (d, m1, e, f);\n+  d = _mm512_maskz_unpacklo_epi16 (m1, e, f);\n+  x = _mm256_mask_unpacklo_epi16 (x, m2, y, z);\n+  x = _mm256_maskz_unpacklo_epi16 (m2, y, z);\n+  a = _mm_mask_unpacklo_epi16 (a, m3, b, c);\n+  a = _mm_maskz_unpacklo_epi16 (m3, b, c);\n+}"}, {"sha": "a29e4d4f0de4d58f44d1a4bff97b16a3be5cc1ef", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpunpcklwd-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklwd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklwd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpunpcklwd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -DAVX512BW\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (short *r, short *s1, short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE/8; i++)\n+    {\n+      r[8 * i] = s1[8 * i];\n+      r[8 * i + 1] = s2[8 * i];\n+      r[8 * i + 2] = s1[8 * i + 1];\n+      r[8 * i + 3] = s2[8 * i + 1];\n+      r[8 * i + 4] = s1[8 * i + 2];\n+      r[8 * i + 5] = s2[8 * i + 2];\n+      r[8 * i + 6] = s1[8 * i + 3];\n+      r[8 * i + 7] = s2[8 * i + 3];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 34 * i * sign;\n+      src1.a[i] = 179 * i;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_unpacklo_epi16) (src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_unpacklo_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_unpacklo_epi16) (mask, src1.x, src2.x);\n+\n+  CALC (res_ref, src1.a, src2.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "e8dcf4b7d9f1d7129d82af938bd193eccd07a871", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-check.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-check.h?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,47 @@\n+#include <stdlib.h>\n+#include \"cpuid.h\"\n+#include \"m512-check.h\"\n+#include \"avx512f-os-support.h\"\n+\n+static void avx512dq_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  avx512dq_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run AVX512DQ test only if host has AVX512DQ support.  */\n+  if ((ecx & bit_OSXSAVE) == (bit_OSXSAVE))\n+    {\n+      if (__get_cpuid_max (0, NULL) < 7)\n+\treturn 0;\n+\n+      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+      if ((avx512f_os_support ()) && ((ebx & bit_AVX512DQ) == bit_AVX512DQ))\n+\t{\n+\t  do_test ();\n+#ifdef DEBUG\n+\t  printf (\"PASSED\\n\");\n+#endif\n+\t  return 0;\n+\t}\n+#ifdef DEBUG\n+      printf (\"SKIPPED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "bb6cf9250e6680cc3eb9c6f1e4f6c20922352b73", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandnpd-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnpd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d z;\n+volatile __m256d y;\n+volatile __m128d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_andnot_pd (z, z);\n+  z = _mm512_mask_andnot_pd (z, m, z, z);\n+  z = _mm512_maskz_andnot_pd (m, z, z);\n+  y = _mm256_mask_andnot_pd (y, m, y, y);\n+  y = _mm256_maskz_andnot_pd (m, y, y);\n+  x = _mm_mask_andnot_pd (x, m, x, x);\n+  x = _mm_maskz_andnot_pd (m, x, x);\n+}"}, {"sha": "88e52e0d891629aac3ec95aae9729fc048003e4a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandnpd-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnpd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *s1, double *s2, double *r)\n+{\n+  int i;\n+  long long tmp;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      tmp = (~(*(long long *) &s1[i])) & (*(long long *) &s2[i]);\n+      r[i] = *(double *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 13. * i;\n+      s2.a[i] = 17. * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_andnot_pd) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_andnot_pd) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_andnot_pd) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "6a76a2564c3a64b3a11a0867d2ae495680ff61cf", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandnps-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandnps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 z;\n+volatile __m256 y;\n+volatile __m128 x;\n+volatile __mmask16 m1;\n+volatile __mmask8 m2;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_andnot_ps (z, z);\n+  z = _mm512_mask_andnot_ps (z, m1, z, z);\n+  z = _mm512_maskz_andnot_ps (m1, z, z);\n+  y = _mm256_mask_andnot_ps (y, m2, y, y);\n+  y = _mm256_maskz_andnot_ps (m2, y, y);\n+  x = _mm_mask_andnot_ps (x, m2, x, x);\n+  x = _mm_maskz_andnot_ps (m2, x, x);\n+}"}, {"sha": "14df2fbdef2ec9886430ee90e267915e59051386", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandnps-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandnps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (float *s1, float *s2, float *r)\n+{\n+  int i;\n+  int tmp;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      tmp = (~(*(int *) &s1[i])) & (*(int *) &s2[i]);\n+      r[i] = *(float *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 13. * i;\n+      s2.a[i] = 17. * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_andnot_ps) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_andnot_ps) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_andnot_ps) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "212754d425f15e5c45dc9f37ea9194c9bab44701", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandpd-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandpd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d z;\n+volatile __m256d y;\n+volatile __m128d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_and_pd (z, z);\n+  z = _mm512_mask_and_pd (z, m, z, z);\n+  z = _mm512_maskz_and_pd (m, z, z);\n+  y = _mm256_mask_and_pd (y, m, y, y);\n+  y = _mm256_maskz_and_pd (m, y, y);\n+  x = _mm_mask_and_pd (x, m, x, x);\n+  x = _mm_maskz_and_pd (m, x, x);\n+}"}, {"sha": "e5a73658b108bc8142e13c9e8062873637dce29e", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandpd-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandpd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *s1, double *s2, double *r)\n+{\n+  int i;\n+  long long tmp;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      tmp = (*(long long *) &s1[i]) & (*(long long *) &s2[i]);\n+      r[i] = *(double *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 13. * i;\n+      s2.a[i] = 17. * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_and_pd) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_and_pd) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_and_pd) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "e41a7db041b567d769d86f9ae3e293fe0ebc4745", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandps-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vandps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 z;\n+volatile __m256 y;\n+volatile __m128 x;\n+volatile __mmask16 m1;\n+volatile __mmask8 m2;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_and_ps (z, z);\n+  z = _mm512_mask_and_ps (z, m1, z, z);\n+  z = _mm512_maskz_and_ps (m1, z, z);\n+  y = _mm256_mask_and_ps (y, m2, y, y);\n+  y = _mm256_maskz_and_ps (m2, y, y);\n+  x = _mm_mask_and_ps (x, m2, x, x);\n+  x = _mm_maskz_and_ps (m2, x, x);\n+}"}, {"sha": "013e1ecc7a75ef2af3c7366fa18eda88b69f197c", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vandps-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vandps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (float *s1, float *s2, float *r)\n+{\n+  int i;\n+  int tmp;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      tmp = (*(int *) &s1[i]) & (*(int *) &s2[i]);\n+      r[i] = *(float *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 13. * i;\n+      s2.a[i] = 17. * i;\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_and_ps) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_and_ps) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_and_ps) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "6f0072c7770d425b58ba36b7821de54340fb5db5", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcastf32x2-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}{z}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m256 y;\n+volatile __m128 z;\n+volatile __mmask16 mx;\n+volatile __mmask8 my;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_broadcast_f32x2 (z);\n+  x = _mm512_mask_broadcast_f32x2 (x, mx, z);\n+  x = _mm512_maskz_broadcast_f32x2 (mx, z);\n+  y = _mm256_broadcast_f32x2 (z);\n+  y = _mm256_mask_broadcast_f32x2 (y, my, z);\n+  y = _mm256_maskz_broadcast_f32x2 (my, z);\n+}"}, {"sha": "142ac938e54e1772eb341a2f2f330c71e2803e0c", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcastf32x2-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (float *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 2];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3;\n+  UNION_TYPE (128,) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 4; i++)\n+    {\n+      src.a[i] = 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_f32x2) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_f32x2) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_f32x2) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "d041bba493701688aa9677dd00fb71ab7cced551", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcastf32x8-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x8-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshuff32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshuff32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshuff32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m256 y;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_broadcast_f32x8 (y);\n+  x = _mm512_mask_broadcast_f32x8 (x, m, y);\n+  x = _mm512_maskz_broadcast_f32x8 (m, y);\n+}"}, {"sha": "26d225164215162bbb463653d3b21ec36e86d716", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcastf32x8-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x8-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x8-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf32x8-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (float *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 8];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN,) res1, res2, res3;\n+  UNION_TYPE (256,) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  float res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_f32x8) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_f32x8) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_f32x8) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "c240ccee5fd5e6d076a4d2af05bde2edb7e3d06c", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcastf64x2-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf64x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf64x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf64x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastf64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshuff64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x;\n+volatile __m256d y;\n+volatile __m128d z;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_broadcast_f64x2 (z);\n+  x = _mm512_mask_broadcast_f64x2 (x, m, z);\n+  x = _mm512_maskz_broadcast_f64x2 (m, z);\n+  y = _mm256_broadcast_f64x2 (z);\n+  y = _mm256_mask_broadcast_f64x2 (y, m, z);\n+  y = _mm256_maskz_broadcast_f64x2 (m, z);\n+}"}, {"sha": "ebb1114129871f5b9b56e368ff350f12de12e747", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcastf64x2-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf64x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf64x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcastf64x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *r, double *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 2];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  UNION_TYPE (128, d) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  double res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 2; i++)\n+    {\n+      src.a[i] = 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_f64x2) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_f64x2) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_f64x2) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "95cfcbd252103d81ea1cdcf0dc684d1a90e9a704", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcasti32x2-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask16 mx;\n+volatile __mmask8 my;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_broadcast_i32x2 (z);\n+  x = _mm512_mask_broadcast_i32x2 (x, mx, z);\n+  x = _mm512_maskz_broadcast_i32x2 (mx, z);\n+  y = _mm256_broadcast_i32x2 (z);\n+  y = _mm256_mask_broadcast_i32x2 (y, my, z);\n+  y = _mm256_maskz_broadcast_i32x2 (my, z);\n+  z = _mm_broadcast_i32x2 (z);\n+  z = _mm_mask_broadcast_i32x2 (z, my, z);\n+  z = _mm_maskz_broadcast_i32x2 (my, z);\n+\n+}"}, {"sha": "ccca285700e4c1e36d1be16229f7ca239782d65a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcasti32x2-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (int *r, int *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 2];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (128, i_d) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  int res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 4; i++)\n+    {\n+      src.a[i] = 34 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_i32x2) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_i32x2) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_i32x2) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "b9e05ea273472a57a046055bb17a81014fda1e2a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcasti32x8-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x8-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshufi32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshufi32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshufi32x4\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_broadcast_i32x8 (y);\n+  x = _mm512_mask_broadcast_i32x8 (x, m, y);\n+  x = _mm512_maskz_broadcast_i32x8 (m, y);\n+}"}, {"sha": "3be8746d8300d4d870a1e17962847462a54de49d", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcasti32x8-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x8-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x8-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti32x8-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (int *r, int *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 8];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (256, i_d) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  int res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 8; i++)\n+    {\n+      src.a[i] = 34 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_i32x8) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_i32x8) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_i32x8) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "7dd332dafcfe954ca6ddb34f5ee67d612f6523d3", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcasti64x2-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti64x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti64x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti64x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcasti64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}|vshufi64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+volatile __m128i z;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_broadcast_i64x2 (z);\n+  x = _mm512_mask_broadcast_i64x2 (x, m, z);\n+  x = _mm512_maskz_broadcast_i64x2 (m, z);\n+  y = _mm256_broadcast_i64x2 (z);\n+  y = _mm256_mask_broadcast_i64x2 (y, m, z);\n+  y = _mm256_maskz_broadcast_i64x2 (m, z);\n+}"}, {"sha": "ac761c82af347c4ea4ba0bc24783dcf5ec34dcbe", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vbroadcasti64x2-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti64x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti64x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vbroadcasti64x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *r, long long *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = s[i % 2];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  UNION_TYPE (128, i_q) src;\n+  MASK_TYPE mask = SIZE | 123;\n+  long long res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < 2; i++)\n+    {\n+      src.a[i] = 34 * i * sign;\n+      sign = sign * -1;\n+    }\n+  for (i = 0; i < SIZE; i++)\n+    res2.a[i] = DEFAULT_VALUE;\n+\n+  res1.x = INTRINSIC (_broadcast_i64x2) (src.x);\n+  res2.x = INTRINSIC (_mask_broadcast_i64x2) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_broadcast_i64x2) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "16f2c6c2dcfba330f2aa516009b729b7d98ec4a0", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtpd2qq-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2qq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2qq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2qq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s1;\n+volatile __m256d s2;\n+volatile __m128d s3;\n+volatile __m512i res1;\n+volatile __m256i res2;\n+volatile __m128i res3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvtpd_epi64 (s1);\n+  res2 = _mm256_cvtpd_epi64 (s2);\n+  res3 = _mm_cvtpd_epi64 (s3);\n+\n+  res1 = _mm512_mask_cvtpd_epi64 (res1, m, s1);\n+  res2 = _mm256_mask_cvtpd_epi64 (res2, m, s2);\n+  res3 = _mm_mask_cvtpd_epi64 (res3, m, s3);\n+\n+  res1 = _mm512_maskz_cvtpd_epi64 (m, s1);\n+  res2 = _mm256_maskz_cvtpd_epi64 (m, s2);\n+  res3 = _mm_maskz_cvtpd_epi64 (m, s3);\n+\n+  res1 = _mm512_cvt_roundpd_epi64 (s1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvt_roundpd_epi64 (res1, m, s1, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvt_roundpd_epi64 (m, s1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "0e30bfe99cbc85a9c0740ee776a8b993e9f9bbe5", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtpd2qq-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2qq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2qq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2qq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *s, long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (s[i] >= 0) ? (long long) (s[i] + 0.5)\n+\t\t\t : (long long) (s[i] - 0.5);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtpd_epi64) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtpd_epi64) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtpd_epi64) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "c53e41d8bef7e66365fd7f27aa3eb7e5ce735d97", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtpd2uqq-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2uqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2uqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2uqq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s1;\n+volatile __m256d s2;\n+volatile __m128d s3;\n+volatile __m512i res1;\n+volatile __m256i res2;\n+volatile __m128i res3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvtpd_epu64 (s1);\n+  res2 = _mm256_cvtpd_epu64 (s2);\n+  res3 = _mm_cvtpd_epu64 (s3);\n+\n+  res1 = _mm512_mask_cvtpd_epu64 (res1, m, s1);\n+  res2 = _mm256_mask_cvtpd_epu64 (res2, m, s2);\n+  res3 = _mm_mask_cvtpd_epu64 (res3, m, s3);\n+\n+  res1 = _mm512_maskz_cvtpd_epu64 (m, s1);\n+  res2 = _mm256_maskz_cvtpd_epu64 (m, s2);\n+  res3 = _mm_maskz_cvtpd_epu64 (m, s3);\n+\n+  res1 = _mm512_cvt_roundpd_epu64 (s1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvt_roundpd_epu64 (res1, m, s1, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvt_roundpd_epu64 (m, s1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "de1462841b380caa70ece454e206455ec4be865e", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtpd2uqq-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2uqq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2uqq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtpd2uqq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq  -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *s, unsigned long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (unsigned long long) (s[i] + 0.5);\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned long long res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000);\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtpd_epu64) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtpd_epu64) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtpd_epu64) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "60a631f0fb4eccc14d158753f661e53ebe550a0b", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtps2qq-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2qq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2qq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2qq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x1;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __m256 z1;\n+volatile __m128 z2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm512_cvtps_epi64 (z1);\n+  x1 = _mm512_mask_cvtps_epi64 (x1, m, z1);\n+  x1 = _mm512_maskz_cvtps_epi64 (m, z1);\n+  x2 = _mm256_cvtps_epi64 (z2);\n+  x2 = _mm256_mask_cvtps_epi64 (x2, m, z2);\n+  x2 = _mm256_maskz_cvtps_epi64 (m, z2);\n+  x3 = _mm_cvtps_epi64 (z2);\n+  x3 = _mm_mask_cvtps_epi64 (x3, m, z2);\n+  x3 = _mm_maskz_cvtps_epi64 (m, z2);\n+  x1 = _mm512_cvt_roundps_epi64 (z1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_cvt_roundps_epi64 (x1, m, z1, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_cvt_roundps_epi64 (m, z1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "60659d13c77caceb73fc13c09e426ef8123e600d", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtps2qq-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2qq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2qq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2qq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (long long) (s[i] + ((s[i] >= 0) ? 0.5 : -0.5));\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN_HALF,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      src.a[i] = 1.5 + 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtps_epi64) (src.x);\n+  res2.x = INTRINSIC (_mask_cvtps_epi64) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvtps_epi64) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "4f41c4ab6475b12dada36e45c57c05c3d09f9d94", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtps2uqq-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2uqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2uqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2uqq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x1;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __m256 z1;\n+volatile __m128 z2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm512_cvtps_epu64 (z1);\n+  x1 = _mm512_mask_cvtps_epu64 (x1, m, z1);\n+  x1 = _mm512_maskz_cvtps_epu64 (m, z1);\n+  x2 = _mm256_cvtps_epu64 (z2);\n+  x2 = _mm256_mask_cvtps_epu64 (x2, m, z2);\n+  x2 = _mm256_maskz_cvtps_epu64 (m, z2);\n+  x3 = _mm_cvtps_epu64 (z2);\n+  x3 = _mm_mask_cvtps_epu64 (x3, m, z2);\n+  x3 = _mm_maskz_cvtps_epu64 (m, z2);\n+  x1 = _mm512_cvt_roundps_epu64 (z1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_cvt_roundps_epu64 (x1, m, z1, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_cvt_roundps_epu64 (m, z1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "bab1717720797cac9450c3f5a482ea1d89287f49", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtps2uqq-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2uqq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2uqq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtps2uqq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned long long *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (unsigned long long) (s[i] + ((s[i] >= 0) ? 0.5 : -0.5));\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN_HALF,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned long long res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      src.a[i] = 1.5 + 34.67 * i;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtps_epu64) (src.x);\n+  res2.x = INTRINSIC (_mask_cvtps_epu64) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvtps_epu64) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "7ad246c384d372f44fbbab218a4f6101dc1bf2d9", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtqq2pd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2pd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s1;\n+volatile __m256i s2;\n+volatile __m128i s3;\n+volatile __m512d res1;\n+volatile __m256d res2;\n+volatile __m128d res3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvtepi64_pd (s1);\n+  res1 = _mm512_mask_cvtepi64_pd (res1, m, s1);\n+  res1 = _mm512_maskz_cvtepi64_pd (m, s1);\n+  res2 = _mm256_cvtepi64_pd (s2);\n+  res2 = _mm256_mask_cvtepi64_pd (res2, m, s2);\n+  res2 = _mm256_maskz_cvtepi64_pd (m, s2);\n+  res3 = _mm_cvtepi64_pd (s3);\n+  res3 = _mm_mask_cvtepi64_pd (res3, m, s3);\n+  res3 = _mm_maskz_cvtepi64_pd (m, s3);\n+  res1 = _mm512_cvt_roundepi64_pd (s1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvt_roundepi64_pd (res1, m, s1, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvt_roundepi64_pd (m, s1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "7143415198be5bcd095346cac2d69b817c34bcfb", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtqq2pd-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2pd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *s, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (double) s[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtepi64_pd) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepi64_pd) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepi64_pd) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "8007299490b3d11ff6f424b59cc94ea73b2ba51d", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtqq2ps-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2ps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2psx\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2psx\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2psx\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2psy\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2psy\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2psy\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtqq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s1;\n+volatile __m256i s2;\n+volatile __m128i s3;\n+volatile __m256 res1;\n+volatile __m128 res2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvtepi64_ps (s1);\n+  res1 = _mm512_mask_cvtepi64_ps (res1, m, s1);\n+  res1 = _mm512_maskz_cvtepi64_ps (m, s1);\n+  res2 = _mm256_cvtepi64_ps (s2);\n+  res2 = _mm256_mask_cvtepi64_ps (res2, m, s2);\n+  res2 = _mm256_maskz_cvtepi64_ps (m, s2);\n+  res2 = _mm_cvtepi64_ps (s3);\n+  res2 = _mm_mask_cvtepi64_ps (res2, m, s3);\n+  res2 = _mm_maskz_cvtepi64_ps (m, s3);\n+  res1 = _mm512_cvt_roundepi64_ps (s1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvt_roundepi64_ps (res1, m, s1, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvt_roundepi64_ps (m, s1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "751c086f6ff89956adf9c75ff87437ba127c485c", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtqq2ps-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtqq2ps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#define SIZE_HALF (AVX512F_LEN_HALF / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *s, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE_HALF; i++)\n+    r[i] = (i < SIZE) ? (float) s[i] : 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s;\n+  UNION_TYPE (AVX512F_LEN_HALF,) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE_HALF];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtepi64_ps) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepi64_ps) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepi64_ps) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "ec4ccf9f23acf4271711289fe766af544aadeb90", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttpd2qq-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2qq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2qq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2qq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s1;\n+volatile __m256d s2;\n+volatile __m128d s3;\n+volatile __m512i res1;\n+volatile __m256i res2;\n+volatile __m128i res3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvttpd_epi64 (s1);\n+  res2 = _mm256_cvttpd_epi64 (s2);\n+  res3 = _mm_cvttpd_epi64 (s3);\n+\n+  res1 = _mm512_mask_cvttpd_epi64 (res1, m, s1);\n+  res2 = _mm256_mask_cvttpd_epi64 (res2, m, s2);\n+  res3 = _mm_mask_cvttpd_epi64 (res3, m, s3);\n+\n+  res1 = _mm512_maskz_cvttpd_epi64 (m, s1);\n+  res2 = _mm256_maskz_cvttpd_epi64 (m, s2);\n+  res3 = _mm_maskz_cvttpd_epi64 (m, s3);\n+\n+  res1 = _mm512_cvtt_roundpd_epi64 (s1, _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvtt_roundpd_epi64 (res1, m, s1, _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvtt_roundpd_epi64 (m, s1, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "6b338223cbc09dd446b29db73ddff74698fa7176", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttpd2qq-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2qq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2qq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2qq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *s, long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (long long) s[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_cvttpd_epi64) (s.x);\n+  res2.x = INTRINSIC (_mask_cvttpd_epi64) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvttpd_epi64) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "a4ceec9a8e83f3dc7e7a7397160b8ebe8bdd5088", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttpd2uqq-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2uqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2uqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2uqq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttpd2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d s1;\n+volatile __m256d s2;\n+volatile __m128d s3;\n+volatile __m512i res1;\n+volatile __m256i res2;\n+volatile __m128i res3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvttpd_epu64 (s1);\n+  res2 = _mm256_cvttpd_epu64 (s2);\n+  res3 = _mm_cvttpd_epu64 (s3);\n+\n+  res1 = _mm512_mask_cvttpd_epu64 (res1, m, s1);\n+  res2 = _mm256_mask_cvttpd_epu64 (res2, m, s2);\n+  res3 = _mm_mask_cvttpd_epu64 (res3, m, s3);\n+\n+  res1 = _mm512_maskz_cvttpd_epu64 (m, s1);\n+  res2 = _mm256_maskz_cvttpd_epu64 (m, s2);\n+  res3 = _mm_maskz_cvttpd_epu64 (m, s3);\n+\n+  res1 = _mm512_cvtt_roundpd_epu64 (s1, _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvtt_roundpd_epu64 (res1, m, s1, _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvtt_roundpd_epu64 (m, s1, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "39f450c9ea04c28a531b8a48df24387cf65aa408", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttpd2uqq-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2uqq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2uqq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttpd2uqq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *s, unsigned long long *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (unsigned long long) s[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned long long res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000);\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvttpd_epu64) (s.x);\n+  res2.x = INTRINSIC (_mask_cvttpd_epu64) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvttpd_epu64) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "dd3b451f25e85882c9c9c7319359eb883716b576", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttps2qq-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2qq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2qq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2qq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2qq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x1;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __m256 z1;\n+volatile __m128 z2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm512_cvttps_epi64 (z1);\n+  x1 = _mm512_mask_cvttps_epi64 (x1, m, z1);\n+  x1 = _mm512_maskz_cvttps_epi64 (m, z1);\n+  x2 = _mm256_cvttps_epi64 (z2);\n+  x2 = _mm256_mask_cvttps_epi64 (x2, m, z2);\n+  x2 = _mm256_maskz_cvttps_epi64 (m, z2);\n+  x3 = _mm_cvttps_epi64 (z2);\n+  x3 = _mm_mask_cvttps_epi64 (x3, m, z2);\n+  x3 = _mm_maskz_cvttps_epi64 (m, z2);\n+  x1 = _mm512_cvtt_roundps_epi64 (z1, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_cvtt_roundps_epi64 (x1, m, z1, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_cvtt_roundps_epi64 (m, z1, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "2b3b38b321abe0dd1c5beff0a7c85c911801f782", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttps2qq-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2qq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2qq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2qq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (long long) s[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN_HALF,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      src.a[i] = 1.5 + 34.67 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res1.x = INTRINSIC (_cvttps_epi64) (src.x);\n+  res2.x = INTRINSIC (_mask_cvttps_epi64) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvttps_epi64) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "9ef629b887ae45ac686747fc1d31ed11d402f123", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttps2uqq-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2uqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2uqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2uqq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttps2uqq\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x1;\n+volatile __m256i x2;\n+volatile __m128i x3;\n+volatile __m256 z1;\n+volatile __m128 z2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm512_cvttps_epu64 (z1);\n+  x1 = _mm512_mask_cvttps_epu64 (x1, m, z1);\n+  x1 = _mm512_maskz_cvttps_epu64 (m, z1);\n+  x2 = _mm256_cvttps_epu64 (z2);\n+  x2 = _mm256_mask_cvttps_epu64 (x2, m, z2);\n+  x2 = _mm256_maskz_cvttps_epu64 (m, z2);\n+  x3 = _mm_cvttps_epu64 (z2);\n+  x3 = _mm_mask_cvttps_epu64 (x3, m, z2);\n+  x3 = _mm_maskz_cvttps_epu64 (m, z2);\n+  x1 = _mm512_cvtt_roundps_epu64 (z1, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_mask_cvtt_roundps_epu64 (x1, m, z1, _MM_FROUND_NO_EXC);\n+  x1 = _mm512_maskz_cvtt_roundps_epu64 (m, z1, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "1221ebe8ce646bb707d7cb6a477dfed2f43b57c1", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvttps2uqq-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2uqq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2uqq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvttps2uqq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned long long *r, float *s)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (unsigned long long) s[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN_HALF,) src;\n+  MASK_TYPE mask = MASK_VALUE;\n+  unsigned long long res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res2.a[i] = DEFAULT_VALUE;\n+      src.a[i] = 1.5 + 34.67 * i;\n+    }\n+\n+  res1.x = INTRINSIC (_cvttps_epu64) (src.x);\n+  res2.x = INTRINSIC (_mask_cvttps_epu64) (res2.x, mask, src.x);\n+  res3.x = INTRINSIC (_maskz_cvttps_epu64) (mask, src.x);\n+\n+  CALC (res_ref, src.a);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "55fad80c8358d666d37b73f0e0f6cb73c6c0ec93", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtuqq2pd-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2pd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s1;\n+volatile __m256i s2;\n+volatile __m128i s3;\n+volatile __m512d res1;\n+volatile __m256d res2;\n+volatile __m128d res3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvtepu64_pd (s1);\n+  res1 = _mm512_mask_cvtepu64_pd (res1, m, s1);\n+  res1 = _mm512_maskz_cvtepu64_pd (m, s1);\n+  res2 = _mm256_cvtepu64_pd (s2);\n+  res2 = _mm256_mask_cvtepu64_pd (res2, m, s2);\n+  res2 = _mm256_maskz_cvtepu64_pd (m, s2);\n+  res3 = _mm_cvtepu64_pd (s3);\n+  res3 = _mm_mask_cvtepu64_pd (res3, m, s3);\n+  res3 = _mm_maskz_cvtepu64_pd (m, s3);\n+  res1 = _mm512_cvt_roundepu64_pd (s1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvt_roundepu64_pd (res1, m, s1, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvt_roundepu64_pd (m, s1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "907e1d9877b534f8dc02936a313ba1890fda9108", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtuqq2pd-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2pd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned long long *s, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = (double) s[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s;\n+  UNION_TYPE (AVX512F_LEN, d) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123 * (i + 2000);\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtepu64_pd) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepu64_pd) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepu64_pd) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "4931bb322db1a50fabde488b157d04ffd8db0def", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtuqq2ps-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2ps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2psx\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2psx\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2psx\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2psy\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2psy\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2psy\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtuqq2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i s1;\n+volatile __m256i s2;\n+volatile __m128i s3;\n+volatile __m256 res1;\n+volatile __m128 res2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  res1 = _mm512_cvtepu64_ps (s1);\n+  res1 = _mm512_mask_cvtepu64_ps (res1, m, s1);\n+  res1 = _mm512_maskz_cvtepu64_ps (m, s1);\n+  res2 = _mm256_cvtepu64_ps (s2);\n+  res2 = _mm256_mask_cvtepu64_ps (res2, m, s2);\n+  res2 = _mm256_maskz_cvtepu64_ps (m, s2);\n+  res2 = _mm_cvtepu64_ps (s3);\n+  res2 = _mm_mask_cvtepu64_ps (res2, m, s3);\n+  res2 = _mm_maskz_cvtepu64_ps (m, s3);\n+  res1 = _mm512_cvt_roundepu64_ps (s1, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_mask_cvt_roundepu64_ps (res1, m, s1, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC);\n+  res1 = _mm512_maskz_cvt_roundepu64_ps (m, s1, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC);\n+}"}, {"sha": "794024f6cedfa01d595a905e4af80c32bfc2cebb", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vcvtuqq2ps-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vcvtuqq2ps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#define SIZE_HALF (AVX512F_LEN_HALF / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (unsigned long long *s, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE_HALF; i++)\n+    r[i] = (i < SIZE) ? (float) s[i] : 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s;\n+  UNION_TYPE (AVX512F_LEN_HALF,) res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE_HALF];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123 * (i + 2000);\n+      res2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_cvtepu64_ps) (s.x);\n+  res2.x = INTRINSIC (_mask_cvtepu64_ps) (res2.x, mask, s.x);\n+  res3.x = INTRINSIC (_maskz_cvtepu64_ps) (mask, s.x);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN_HALF,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "03a4f2c145f4c332212005ffd1e561980006cc9a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vextractf32x8-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf32x8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf32x8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf32x8-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextractf32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextractf32x8\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextractf32x8\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m256 y;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  y = _mm512_extractf32x8_ps (x, 1);\n+  y = _mm512_mask_extractf32x8_ps (y, 2, x, 1);\n+  y = _mm512_maskz_extractf32x8_ps (2, x, 1);\n+}"}, {"sha": "ddd52c6375459f3d96559216232505084c00bdb6", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vextractf64x2-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf64x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf64x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf64x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextractf64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextractf64x2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextractf64x2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextractf64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x1;\n+volatile __m256d x2;\n+volatile __m128d y;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  y = _mm512_extractf64x2_pd (x1, 3);\n+  y = _mm512_mask_extractf64x2_pd (y, 2, x1, 3);\n+  y = _mm512_maskz_extractf64x2_pd (2, x1, 3);\n+  y = _mm256_extractf64x2_pd (x2, 1);\n+  y = _mm256_mask_extractf64x2_pd (y, 2, x2, 1);\n+  y = _mm256_maskz_extractf64x2_pd (2, x2, 1);\n+}"}, {"sha": "02a2543cbb17c429c0e0d561b9bb13eeaa912989", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vextractf64x2-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf64x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf64x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextractf64x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void\n+CALC (double *s1, double *res_ref, int mask)\n+{\n+  memset (res_ref, 0, 16);\n+  memcpy (res_ref, s1 + mask * 2, 16);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1;\n+  union128d res1, res2, res3;\n+  double res_ref[2];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j / 4.56;\n+    }\n+\n+  for (j = 0; j < 2; j++)\n+    {\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_extractf64x2_pd) (s1.x, 1);\n+  res2.x = INTRINSIC (_mask_extractf64x2_pd) (res2.x, mask, s1.x, 1);\n+  res3.x = INTRINSIC (_maskz_extractf64x2_pd) (mask, s1.x, 1);\n+  CALC (s1.a, res_ref, 1);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, 2);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 2);\n+  if (check_union128d (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "c1f66bc897b7c5af3837b10ba7ae0d2480c354c4", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vextracti32x8-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti32x8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti32x8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti32x8-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextracti32x8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x8\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x8\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  y = _mm512_extracti32x8_epi32 (x, 1);\n+  y = _mm512_mask_extracti32x8_epi32 (y, 2, x, 1);\n+  y = _mm512_maskz_extracti32x8_epi32 (2, x, 1);\n+}"}, {"sha": "9852d8b2b66dda504505a09efacda35b7c73ef6f", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vextracti64x2-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti64x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti64x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti64x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vextracti64x2\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vextracti64x2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextracti64x2\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextracti64x2\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x1;\n+volatile __m256i x2;\n+volatile __m128i y;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  y = _mm512_extracti64x2_epi64 (x1, 3);\n+  y = _mm512_mask_extracti64x2_epi64 (y, 2, x1, 3);\n+  y = _mm512_maskz_extracti64x2_epi64 (2, x1, 3);\n+  y = _mm256_extracti64x2_epi64 (x2, 1);\n+  y = _mm256_mask_extracti64x2_epi64 (y, 2, x2, 1);\n+  y = _mm256_maskz_extracti64x2_epi64 (2, x2, 1);\n+}"}, {"sha": "95fb0cf6a2c29ae73b3a9fbfa09b9bd1733b8000", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vextracti64x2-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti64x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti64x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vextracti64x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void\n+CALC (long long int *s1, long long int *res_ref, int mask)\n+{\n+  memset (res_ref, 0, 16);\n+  memcpy (res_ref, s1 + mask * 2, 16);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s1;\n+  union128i_q res1, res2, res3;\n+  long long int res_ref[2];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j + 37;\n+    }\n+\n+  for (j = 0; j < 2; j++)\n+    {\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_extracti64x2_epi64) (s1.x, 1);\n+  res2.x =\n+    INTRINSIC (_mask_extracti64x2_epi64) (res2.x, mask, s1.x, 1);\n+  res3.x = INTRINSIC (_maskz_extracti64x2_epi64) (mask, s1.x, 1);\n+  CALC (s1.a, res_ref, 1);\n+\n+  if (check_union128i_q (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, 2);\n+  if (check_union128i_q (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, 2);\n+  if (check_union128i_q (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "00855bde8781014efdc28bba6b15ab42b3eac031", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vfpclasspd-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasspd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasspd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasspd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfpclasspd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclasspd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclasspd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclasspd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclasspd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclasspd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d x512;\n+volatile __m256d x256;\n+volatile __m128d x128;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m = _mm512_fpclass_pd_mask (x512, 13);\n+  m = _mm256_fpclass_pd_mask (x256, 13);\n+  m = _mm_fpclass_pd_mask (x128, 13);\n+  m = _mm512_mask_fpclass_pd_mask (2, x512, 13);\n+  m = _mm256_mask_fpclass_pd_mask (2, x256, 13);\n+  m = _mm_mask_fpclass_pd_mask (2, x128, 13);\n+}"}, {"sha": "000e0919088d0d2b36a3060a3fa8200d36b6e123", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vfpclasspd-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasspd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasspd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasspd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#include <values.h>\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+#ifndef __FPCLASSPD__\n+#define __FPCLASSPD__\n+int check_fp_class_dp (double src, int imm)\n+{\n+  int qNaN_res = isnan (src);\n+  int sNaN_res = isnan (src);\n+  int Pzero_res = (src == 0.0);\n+  int Nzero_res = (src == -0.0);\n+  int PInf_res = (isinf (src) == 1);\n+  int NInf_res = (isinf (src) == -1);\n+  int Denorm_res = (fpclassify (src) == FP_SUBNORMAL);\n+  int FinNeg_res = finite (src) && (src < 0);\n+\n+  int result = (((imm & 1) && qNaN_res)\n+\t\t|| (((imm >> 1) & 1) && Pzero_res)\n+\t\t|| (((imm >> 2) & 1) && Nzero_res)\n+\t\t|| (((imm >> 3) & 1) && PInf_res)\n+\t\t|| (((imm >> 4) & 1) && NInf_res)\n+\t\t|| (((imm >> 5) & 1) && Denorm_res)\n+\t\t|| (((imm >> 6) & 1) && FinNeg_res)\n+\t\t|| (((imm >> 7) & 1) && sNaN_res));\n+  return result;\n+}\n+#endif\n+\n+__mmask8\n+CALC (double *s1, int imm)\n+{\n+  int i;\n+  __mmask8 res = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (check_fp_class_dp(s1[i], imm))\n+      res = res | (1 << i);\n+\n+  return res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, d) src;\n+  __mmask8 res1, res2, res_ref = 0;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  src.a[0] = NAN;\n+  src.a[1] = 1.0 / 0.0;\n+  for (i = 2; i < SIZE; i++)\n+    {\n+      src.a[i] = -24.43 + 0.6 * i;\n+    }\n+\n+  res1 = INTRINSIC (_fpclass_pd_mask) (src.x, 0xFF);\n+  res2 = INTRINSIC (_mask_fpclass_pd_mask) (mask, src.x, 0xFF);\n+\n+  res_ref = CALC (src.a, 0xFF);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  if ((res_ref & mask) != res2)\n+    abort ();\n+}"}, {"sha": "b6da5e72770592f5be2d35123dc3c06be3bc43fd", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vfpclassps-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfpclassps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfpclassps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-7\\]\\[^\\n^k\\]*%k\\[1-7\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x512;\n+volatile __m256 x256;\n+volatile __m128 x128;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m16 = _mm512_fpclass_ps_mask (x512, 13);\n+  m8 = _mm256_fpclass_ps_mask (x256, 13);\n+  m8 = _mm_fpclass_ps_mask (x128, 13);\n+  m16 = _mm512_mask_fpclass_ps_mask (2, x512, 13);\n+  m8 = _mm256_mask_fpclass_ps_mask (2, x256, 13);\n+  m8 = _mm_mask_fpclass_ps_mask (2, x128, 13);\n+}"}, {"sha": "e02e382461d04b259e1b2693333c427440dc161b", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vfpclassps-2.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#include <math.h>\n+#include <values.h>\n+#include \"avx512f-mask-type.h\"\n+#define SIZE (AVX512F_LEN / 32)\n+\n+#ifndef __FPCLASSPD__\n+#define __FPCLASSPD__\n+int check_fp_class_sp (float src, int imm)\n+{\n+  int qNaN_res = isnan (src);\n+  int sNaN_res = isnan (src);\n+  int Pzero_res = (src == 0.0);\n+  int Nzero_res = (src == -0.0);\n+  int PInf_res = (isinf (src) == 1);\n+  int NInf_res = (isinf (src) == -1);\n+  int Denorm_res = (fpclassify (src) == FP_SUBNORMAL);\n+  int FinNeg_res = finite (src) && (src < 0);\n+\n+  int result = (((imm & 1) && qNaN_res)\n+\t\t|| (((imm >> 1) & 1) && Pzero_res)\n+\t\t|| (((imm >> 2) & 1) && Nzero_res)\n+\t\t|| (((imm >> 3) & 1) && PInf_res)\n+\t\t|| (((imm >> 4) & 1) && NInf_res)\n+\t\t|| (((imm >> 5) & 1) && Denorm_res)\n+\t\t|| (((imm >> 6) & 1) && FinNeg_res)\n+\t\t|| (((imm >> 7) & 1) && sNaN_res));\n+  return result;\n+}\n+#endif\n+\n+MASK_TYPE\n+CALC (float *s1, int imm)\n+{\n+  int i;\n+  MASK_TYPE res = 0;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (check_fp_class_sp(s1[i], imm))\n+      res = res | (1 << i);\n+\n+  return res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN,) src;\n+  MASK_TYPE res1, res2, res_ref = 0;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  src.a[0] = NAN;\n+  src.a[1] = 1.0 / 0.0;\n+  for (i = 2; i < SIZE; i++)\n+    {\n+      src.a[i] = -24.43 + 0.6 * i;\n+    }\n+\n+  res1 = INTRINSIC (_fpclass_ps_mask) (src.x, 0xFF);\n+  res2 = INTRINSIC (_mask_fpclass_ps_mask) (mask, src.x, 0xFF);\n+\n+\n+  res_ref = CALC (src.a, 0xFF);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  if ((mask & res_ref) != res2)\n+    abort ();\n+}"}, {"sha": "c1b5caab991b132f071bd38cc6ee170cd8f40cde", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vfpclasssd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasssd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasssd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclasssd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler \"vfpclasssd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x128;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m8 = _mm_fpclass_sd_mask (x128, 13);\n+}"}, {"sha": "2f4756ea279d0c0fe0f28eddf57d5ea7700b0bcb", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vfpclassss-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vfpclassss-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler \"vfpclassss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n^k\\]*%k\\[1-7\\]\\[^\\{\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x128;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m8 = _mm_fpclass_ss_mask (x128, 13);\n+}"}, {"sha": "26f36c49c2779192653f926e0f07d4f0cb50f240", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vinsertf32x8-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf32x8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf32x8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf32x8-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x8\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x8\\[ \\\\t\\]+\\[^\\n\\]*\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x8\\[ \\\\t\\]+\\[^\\n\\]*\" 3 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 x;\n+volatile __m256 y;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_insertf32x8 (x, y, 1);\n+  x = _mm512_mask_insertf32x8 (x, 2, x, y, 1);\n+  x = _mm512_maskz_insertf32x8 (2, x, y, 1);\n+}"}, {"sha": "8476a36b2c54ff855082306c2640242d1e54bea7", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vinsertf64x2-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf64x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf64x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf64x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x2\\[^\\n\\]*ymm\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x2\\[^\\n\\]*\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x2\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x2\\[^\\n\\]*zmm\" 3 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256d x;\n+volatile __m128d y;\n+volatile __m512d z;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm256_insertf64x2 (x, y, 1);\n+  x = _mm256_mask_insertf64x2 (x, 2, x, y, 1);\n+  x = _mm256_maskz_insertf64x2 (2, x, y, 1);\n+  z = _mm512_insertf64x2 (z, y, 1);\n+  z = _mm512_mask_insertf64x2 (z, 2, z, y, 1);\n+  z = _mm512_maskz_insertf64x2 (2, z, y, 1);\n+}"}, {"sha": "00c1c8018db900f1aec5832b84968324ff52975c", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vinsertf64x2-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf64x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf64x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsertf64x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+#include \"string.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (UNION_TYPE (AVX512F_LEN, d) s1, union128d s2,\n+      double *res_ref, int mask)\n+{\n+  memcpy (res_ref, s1.a, SIZE * sizeof (double));\n+  memcpy (res_ref + mask * 2, s2.a, 16);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, res1, res2, res3;\n+  union128d s2;\n+  double res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j;\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 2; j++)\n+    s2.a[j] = j * j * j;\n+\n+  res1.x = INTRINSIC (_insertf64x2) (s1.x, s2.x, 1);\n+  res2.x = INTRINSIC (_mask_insertf64x2) (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = INTRINSIC (_maskz_insertf64x2) (mask, s1.x, s2.x, 1);\n+\n+  CALC (s1, s2, res_ref, 1);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "9bebd6836b670889dfb38f27e9eb780e9e996520", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vinserti32x8-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti32x8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti32x8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti32x8-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinserti32x8\\[ \\\\t\\]+\\[^\\n\\]*\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x8\\[ \\\\t\\]+\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x8\\[ \\\\t\\]+\\[^\\n\\]*\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __m256i y;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm512_inserti32x8 (x, y, 1);\n+  x = _mm512_mask_inserti32x8 (x, 2, x, y, 1);\n+  x = _mm512_maskz_inserti32x8 (2, x, y, 1);\n+}"}, {"sha": "22d8f1132ea273f274f30c521672c9155b384125", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vinserti64x2-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti64x2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti64x2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti64x2-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vinserti64x2\\[^\\n\\]*ymm\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x2\\[^\\n\\]*\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x2\\[^\\n\\]*\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x2\\[^\\n\\]*zmm\" 3 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i z;\n+volatile __m256i x;\n+volatile __m128i y;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x = _mm256_inserti64x2 (x, y, 1);\n+  x = _mm256_mask_inserti64x2 (x, 2, x, y, 1);\n+  x = _mm256_maskz_inserti64x2 (2, x, y, 1);\n+  z = _mm512_inserti64x2 (z, y, 0);\n+  z = _mm512_mask_inserti64x2 (z, 2, z, y, 0);\n+  z = _mm512_maskz_inserti64x2 (2, z, y, 0);\n+}"}, {"sha": "63ed54ea0b464a115e6778bfc56edfcd1dc3da59", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vinserti64x2-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti64x2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti64x2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinserti64x2-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+#include \"string.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (UNION_TYPE (AVX512F_LEN, i_q) s1, union128i_q s2,\n+      long long *res_ref, int mask)\n+{\n+  memcpy (res_ref, s1.a, SIZE * sizeof (long long));\n+  memcpy (res_ref + mask * 2, s2.a, 16);\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s1, res1, res2, res3;\n+  union128i_q s2;\n+  long long res_ref[SIZE];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j;\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  for (j = 0; j < 2; j++)\n+    s2.a[j] = j * j * j;\n+\n+  res1.x = INTRINSIC (_inserti64x2) (s1.x, s2.x, 1);\n+  res2.x = INTRINSIC (_mask_inserti64x2) (res2.x, mask, s1.x, s2.x, 1);\n+  res3.x = INTRINSIC (_maskz_inserti64x2) (mask, s1.x, s2.x, 1);\n+\n+  CALC (s1, s2, res_ref, 1);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "97383c1af6985f6e409d9e0d827a7de849485039", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vorpd-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorpd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d z;\n+volatile __m256d y;\n+volatile __m128d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_or_pd (z, z);\n+  z = _mm512_mask_or_pd (z, m, z, z);\n+  z = _mm512_maskz_or_pd (m, z, z);\n+\n+  y = _mm256_mask_or_pd (y, m, y, y);\n+  y = _mm256_maskz_or_pd (m, y, y);\n+\n+  x = _mm_mask_or_pd (x, m, x, x);\n+  x = _mm_maskz_or_pd (m, x, x);\n+}"}, {"sha": "c5ef0309ebe785a8563cf426224a34055db04ad6", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vorpd-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorpd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE    (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *src1, double *src2, double *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      long long tmp = (*(long long *) &src1[i]) | (*(long long *) &src2[i]);\n+      dst[i] = *(double *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,d) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double dst_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++) {\n+      s1.a[i] = 132.45 * i;\n+      s2.a[i] = 43.6 - i * 4.4;\n+      res2.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_or_pd) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_or_pd) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_or_pd) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN,d) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,d) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,d) (res3, dst_ref))\n+    abort ();\n+}"}, {"sha": "7f042868431b77b5e653f83f833adb53e615790f", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vorps-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vorps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 z;\n+volatile __m256 y;\n+volatile __m128 x;\n+volatile __mmask8 n;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_or_ps (z, z);\n+  z = _mm512_mask_or_ps (z, m, z, z);\n+  z = _mm512_maskz_or_ps (m, z, z);\n+\n+  y = _mm256_mask_or_ps (y, n, y, y);\n+  y = _mm256_maskz_or_ps (n, y, y);\n+\n+  x = _mm_mask_or_ps (x, n, x, x);\n+  x = _mm_maskz_or_ps (n, x, x);\n+}"}, {"sha": "87d8e02a524f887138ea55583cf0527159703930", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vorps-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vorps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE    (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (float *src1, float *src2, float *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (*(int *) &src1[i]) | (*(int *) &src2[i]);\n+      dst[i] = *(float *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float dst_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++) {\n+      s1.a[i] = 132.45 * i;\n+      s2.a[i] = 43.6 - i * 4.4;\n+      res2.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_or_ps) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_or_ps) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_or_ps) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE () (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO () (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, dst_ref))\n+    abort ();\n+}"}, {"sha": "c76bdec47e4db0158fc81788d4d252d96eec7f6e", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovd2m-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovd2m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovd2m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovd2m-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovd2m\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovd2m\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovd2m\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m8 = _mm_movepi32_mask (x128);\n+  m8 = _mm256_movepi32_mask (x256);\n+  m16 = _mm512_movepi32_mask (x512);\n+}"}, {"sha": "24fdf4ae48744994c91561e5a41262a827d83907", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovd2m-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovd2m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovd2m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovd2m-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, int *s1)\n+{\n+  int i;\n+  MASK_TYPE res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >> 31)\n+      res = res | (one << i);\n+\n+  *r = res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_d) src;\n+  MASK_TYPE res, res_ref = 0;\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 2 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res = INTRINSIC (_movepi32_mask) (src.x);\n+\n+  CALC (&res_ref, src.a);\n+\n+  if (res_ref != res)\n+    abort ();\n+}"}, {"sha": "5afd552492d510333b7bba067c306f99f82cee53", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovm2d-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2d-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovm2d\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2d\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2d\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%zmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x128 = _mm_movm_epi32 (m8);\n+  x256 = _mm256_movm_epi32 (m8);\n+  x512 = _mm512_movm_epi32 (m16);\n+}"}, {"sha": "67b78de5e51e0249320af2a0cb1e40f466fdc3e3", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovm2d-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2d-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (int *r, MASK_TYPE s)\n+{\n+  int i;\n+  int all_ones = 0xffffffff;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = ((s >> i) & 1) ? all_ones : 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res, res_ref;\n+  MASK_TYPE src = (MASK_TYPE) 0x1111;\n+\n+  res.x = INTRINSIC (_movm_epi32) (src);\n+\n+  CALC (res_ref.a, src);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res, res_ref.a))\n+    abort ();\n+}"}, {"sha": "a71599e55601e2c4701d62d31c5d139a57b2f5fd", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovm2q-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2q-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2q-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2q-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovm2q\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%xmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2q\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%ymm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovm2q\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\\[^\\n\\]*%zmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x128 = _mm_movm_epi64 (m8);\n+  x256 = _mm256_movm_epi64 (m8);\n+  x512 = _mm512_movm_epi64 (m8);\n+}"}, {"sha": "c7a6c55f5dd5b3f3a91e6c4efb0d13d3638c96b6", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovm2q-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2q-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2q-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovm2q-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *r, MASK_TYPE s)\n+{\n+  int i;\n+  long long all_ones = 0xffffffffffffffff;\n+\n+  for (i = 0; i < SIZE; i++)\n+    r[i] = ((s >> i) & 1) ? all_ones : 0;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res, res_ref;\n+  MASK_TYPE src = (MASK_TYPE) 0xff;\n+\n+  res.x = INTRINSIC (_movm_epi64) (src);\n+\n+  CALC (res_ref.a, src);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res, res_ref.a))\n+    abort ();\n+}"}, {"sha": "8ce3694da9a9359f200985f1f4fc73266c0b839a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovq2m-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovq2m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovq2m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovq2m-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler \"vpmovq2m\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovq2m\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"vpmovq2m\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x512;\n+volatile __m256i x256;\n+volatile __m128i x128;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  m8 = _mm_movepi64_mask (x128);\n+  m8 = _mm256_movepi64_mask (x256);\n+  m8 = _mm512_movepi64_mask (x512);\n+}"}, {"sha": "b7816cb9f199493a92b4cbaf5bcc6dd8922ac135", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmovq2m-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovq2m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovq2m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmovq2m-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (MASK_TYPE *r, long long *s1)\n+{\n+  int i;\n+  MASK_TYPE res = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] >> 63)\n+      res = res | (one << i);\n+\n+  *r = res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i, sign;\n+  UNION_TYPE (AVX512F_LEN, i_q) src;\n+  MASK_TYPE res, res_ref = 0;\n+\n+  sign = -1;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src.a[i] = 2 * i * sign;\n+      sign = sign * -1;\n+    }\n+\n+  res = INTRINSIC (_movepi64_mask) (src.x);\n+\n+  CALC (&res_ref, src.a);\n+\n+  if (res_ref != res)\n+    abort ();\n+}"}, {"sha": "25124ebc82800928fc6a6bcea9328805ef2414e6", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmullq-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmullq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmullq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmullq-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmullq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i _x1, _y1, _z1;\n+volatile __m256i _x2, _y2, _z2;\n+volatile __m128i _x3, _y3, _z3;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  _x3 = _mm_mullo_epi64 (_y3, _z3);\n+  _x3 = _mm_mask_mullo_epi64 (_x3, 2, _y3, _z3);\n+  _x3 = _mm_maskz_mullo_epi64 (2, _y3, _z3);\n+  _x2 = _mm256_mullo_epi64 (_y2, _z2);\n+  _x2 = _mm256_mask_mullo_epi64 (_x2, 3, _y2, _z2);\n+  _x2 = _mm256_maskz_mullo_epi64 (3, _y2, _z2);\n+  _x1 = _mm512_mullo_epi64 (_y1, _z1);\n+  _x1 = _mm512_mask_mullo_epi64 (_x1, 3, _y1, _z1);\n+  _x1 = _mm512_maskz_mullo_epi64 (3, _y1, _z1);\n+}"}, {"sha": "2184834d80722d7b1db3136d86cf36733f143506", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpmullq-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmullq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmullq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpmullq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (long long *src1, long long *src2, long long *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    dst[i] = src1[i] * src2[i];\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2, dst1, dst2, dst3;\n+  long long dst_ref[SIZE];\n+  int i;\n+  MASK_TYPE mask = MASK_VALUE;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = i + 50;\n+      src2.a[i] = i + 100;\n+      dst2.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  dst1.x = INTRINSIC (_mullo_epi64) (src1.x, src2.x);\n+  dst2.x = INTRINSIC (_mask_mullo_epi64) (dst2.x, mask, src1.x, src2.x);\n+  dst3.x = INTRINSIC (_maskz_mullo_epi64) (mask, src1.x, src2.x);\n+  CALC (src1.a, src2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (dst3, dst_ref))\n+    abort ();\n+}"}, {"sha": "45f7b27dcc819b3abc3d53c0f3aabc7b12220cb3", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangepd-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangepd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangepd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangepd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangepd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d z;\n+volatile __m256d y;\n+volatile __m128d x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_range_round_pd (z, z, 15, _MM_FROUND_NO_EXC);\n+  z = _mm512_range_pd (z, z, 15);\n+  y = _mm256_range_pd (y, y, 15);\n+  x = _mm_range_pd (x, x, 15);\n+\n+  z = _mm512_mask_range_round_pd (z, m, z, z, 15, _MM_FROUND_NO_EXC);\n+  z = _mm512_mask_range_pd (z, m, z, z, 15);\n+  y = _mm256_mask_range_pd (y, m, y, y, 15);\n+  x = _mm_mask_range_pd (x, m, x, x, 15);\n+\n+  z = _mm512_maskz_range_round_pd (m, z, z, 15, _MM_FROUND_NO_EXC);\n+  z = _mm512_maskz_range_pd (m, z, z, 15);\n+  y = _mm256_maskz_range_pd (m, y, y, 15);\n+  x = _mm_maskz_range_pd (m, x, x, 15);\n+}"}, {"sha": "fc032fbc50738280d00c4515390285e9636f3dcf", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangepd-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangepd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangepd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangepd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+#define IMM 0x02\n+\n+void\n+CALC (double *s1, double *s2, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      if (s1[i] < -s2[i])\n+\tr[i] = -s2[i];\n+      else if (s1[i] > s2[i])\n+\tr[i] = s2[i];\n+      else\n+\tr[i] = s1[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 234.567 * i * sign;\n+      s2.a[i] = 100 * (i + 1);\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_range_pd) (s1.x, s2.x, IMM);\n+  res2.x = INTRINSIC (_mask_range_pd) (res2.x, mask, s1.x, s2.x, IMM);\n+  res3.x = INTRINSIC (_maskz_range_pd) (mask, s1.x, s2.x, IMM);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "71e259ff8c9a60ebe286ba152949da92d94fa6ea", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangeps-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangeps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangeps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangeps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangeps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 z;\n+volatile __m256 y;\n+volatile __m128 x;\n+volatile __mmask8 m8;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_range_round_ps (z, z, 15, _MM_FROUND_NO_EXC);\n+  z = _mm512_range_ps (z, z, 15);\n+  y = _mm256_range_ps (y, y, 15);\n+  x = _mm_range_ps (x, x, 15);\n+\n+  z = _mm512_mask_range_round_ps (z, m16, z, z, 15, _MM_FROUND_NO_EXC);\n+  z = _mm512_mask_range_ps (z, m16, z, z, 15);\n+  y = _mm256_mask_range_ps (y, m8, y, y, 15);\n+  x = _mm_mask_range_ps (x, m8, x, x, 15);\n+\n+  z = _mm512_maskz_range_round_ps (m16, z, z, 15, _MM_FROUND_NO_EXC);\n+  z = _mm512_maskz_range_ps (m16, z, z, 15);\n+  y = _mm256_maskz_range_ps (m8, y, y, 15);\n+  x = _mm_maskz_range_ps (m8, x, x, 15);\n+}"}, {"sha": "373260abd79be90022af745563694fe9b3297da4", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangeps-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangeps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangeps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangeps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#define IMM 0x02\n+\n+void\n+CALC (float *s1, float *s2, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      if (s1[i] < -s2[i])\n+\tr[i] = -s2[i];\n+      else if (s1[i] > s2[i])\n+\tr[i] = s2[i];\n+      else\n+\tr[i] = s1[i];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 234.567 * i * sign;\n+      s2.a[i] = 100 * (i + 1);\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_range_ps) (s1.x, s2.x, IMM);\n+  res2.x = INTRINSIC (_mask_range_ps) (res2.x, mask, s1.x, s2.x, IMM);\n+  res3.x = INTRINSIC (_maskz_range_ps) (mask, s1.x, s2.x, IMM);\n+\n+  CALC (s1.a, s2.a, res_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "21f48113c1a264516cf0750dd4ab8f4a6ddc9814", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangesd-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangesd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangesd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangesd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrangesd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm_range_sd (x1, x2, 3);\n+  x1 = _mm_range_round_sd (x1, x2, 3, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "0f5e750b67679d3139f2f6fbd819e79e523d463b", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vrangess-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangess-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangess-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vrangess-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrangess\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm_range_ss (x1, x2, 1);\n+  x1 = _mm_range_round_ss (x1, x2, 1, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "ce70cd7152a7f71acab7d4a122ad4b777795344d", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducepd-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreducepd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m512d x1;\n+volatile __m256d x2;\n+volatile __m128d x3;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm512_reduce_pd (x1, IMM);\n+  x2 = _mm256_reduce_pd (x2, IMM);\n+  x3 = _mm_reduce_pd (x3, IMM);\n+\n+  x1 = _mm512_mask_reduce_pd (x1, m, x1, IMM);\n+  x2 = _mm256_mask_reduce_pd (x2, m, x2, IMM);\n+  x3 = _mm_mask_reduce_pd (x3, m, x3, IMM);\n+\n+  x1 = _mm512_maskz_reduce_pd (m, x1, IMM);\n+  x2 = _mm256_maskz_reduce_pd (m, x2, IMM);\n+  x3 = _mm_maskz_reduce_pd (m, x3, IMM);\n+}"}, {"sha": "3e231ab9d2a67a01509a77d06298cc58f37f1c77", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducepd-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducepd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+#define IMM 0x23\n+\n+void\n+CALC (double *s, double *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      double tmp = (int) (4 * s[i]) / 4.0;\n+      r[i] = s[i] - tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_reduce_pd) (s.x, IMM);\n+  res2.x = INTRINSIC (_mask_reduce_pd) (res2.x, mask, s.x, IMM);\n+  res3.x = INTRINSIC (_maskz_reduce_pd) (mask, s.x, IMM);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_FP_CHECK (AVX512F_LEN, d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN, d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN, d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "cdc3fb963ea205d5ac46dda222ea43fe03decb79", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreduceps-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vreduceps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+#define IMM 123\n+\n+volatile __m512 x1;\n+volatile __m256 x2;\n+volatile __m128 x3;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm512_reduce_ps (x1, IMM);\n+  x2 = _mm256_reduce_ps (x2, IMM);\n+  x3 = _mm_reduce_ps (x3, IMM);\n+\n+  x1 = _mm512_mask_reduce_ps (x1, m16, x1, IMM);\n+  x2 = _mm256_mask_reduce_ps (x2, m8, x2, IMM);\n+  x3 = _mm_mask_reduce_ps (x3, m8, x3, IMM);\n+\n+  x1 = _mm512_maskz_reduce_ps (m16, x1, IMM);\n+  x2 = _mm256_maskz_reduce_ps (m8, x2, IMM);\n+  x3 = _mm_maskz_reduce_ps (m8, x3, IMM);\n+}"}, {"sha": "97afd2ad93e8bf75144f8a853426f907689f349a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreduceps-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreduceps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+#define IMM 0x23\n+\n+void\n+CALC (float *s, float *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      float tmp = (int) (4 * s[i]) / 4.0;\n+      r[i] = s[i] - tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) s, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float res_ref[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s.a[i] = 123.456 * (i + 2000) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_reduce_ps) (s.x, IMM);\n+  res2.x = INTRINSIC (_mask_reduce_ps) (res2.x, mask, s.x, IMM);\n+  res3.x = INTRINSIC (_maskz_reduce_ps) (mask, s.x, IMM);\n+\n+  CALC (s.a, res_ref);\n+\n+  if (UNION_FP_CHECK (AVX512F_LEN,) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN,) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, SIZE);\n+  if (UNION_FP_CHECK (AVX512F_LEN,) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "f6a4a283098a3fa92ee3c1e972241f4dfe376a39", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducesd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducesd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreducesd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm_reduce_sd (x1, x2, 123);\n+}"}, {"sha": "0d51b6119dff360514a7fd40a5d15cd2b09c7463", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vreducess-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vreducess-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"vreducess\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  x1 = _mm_reduce_ss (x1, x2, 123);\n+}"}, {"sha": "42ea18d592e4ea120b8d58bcc933d550d09acc08", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vxorpd-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorpd-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorpd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512d z;\n+volatile __m256d y;\n+volatile __m128d x;\n+volatile __mmask8 m;\n+\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_xor_pd (z, z);\n+  z = _mm512_mask_xor_pd (z, m, z, z);\n+  z = _mm512_maskz_xor_pd (m, z, z);\n+\n+  y = _mm256_mask_xor_pd (y, m, y, y);\n+  y = _mm256_maskz_xor_pd (m, y, y);\n+\n+  x = _mm_mask_xor_pd (x, m, x, x);\n+  x = _mm_maskz_xor_pd (m, x, x);\n+}"}, {"sha": "060861a9264cd4717f7a9dc98a095c7fbe0233a3", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vxorpd-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorpd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE    (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (double *src1, double *src2, double *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      long long tmp = (*(long long *) &src1[i]) ^ (*(long long *) &src2[i]);\n+      dst[i] = *(double *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,d) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  double dst_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++) {\n+      s1.a[i] = 132.45 * i;\n+      s2.a[i] = 43.6 - i * 4.4;\n+      res2.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_xor_pd) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_xor_pd) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_xor_pd) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN,d) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE (d) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,d) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,d) (res3, dst_ref))\n+    abort ();\n+}"}, {"sha": "561785209d557e5d43d976777e5f05fb0be37303", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vxorps-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorps-1.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vxorps\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512 z;\n+volatile __m256 y;\n+volatile __m128 x;\n+volatile __mmask16 m;\n+volatile __mmask8 n;\n+\n+void extern\n+avx512dq_test (void)\n+{\n+  z = _mm512_xor_ps (z, z);\n+  z = _mm512_mask_xor_ps (z, m, z, z);\n+  z = _mm512_maskz_xor_ps (m, z, z);\n+\n+  y = _mm256_mask_xor_ps (y, n, y, y);\n+  y = _mm256_maskz_xor_ps (n, y, y);\n+\n+  x = _mm_mask_xor_ps (x, n, x, x);\n+  x = _mm_maskz_xor_ps (n, x, x);\n+}"}, {"sha": "5360c04f12e9117f69eb613bd6f91345c9aff8bd", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vxorps-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vxorps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512dq -DAVX512DQ\" } */\n+/* { dg-require-effective-target avx512dq } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE    (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+void\n+CALC (float *src1, float *src2, float *dst)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      int tmp = (*(int *) &src1[i]) ^ (*(int *) &src2[i]);\n+      dst[i] = *(float *) &tmp;\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) s1, s2, res1, res2, res3;\n+  MASK_TYPE mask = MASK_VALUE;\n+  float dst_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++) {\n+      s1.a[i] = 132.45 * i;\n+      s2.a[i] = 43.6 - i * 4.4;\n+      res2.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_xor_ps) (s1.x, s2.x);\n+  res2.x = INTRINSIC (_mask_xor_ps) (res2.x, mask, s1.x, s2.x);\n+  res3.x = INTRINSIC (_maskz_xor_ps) (mask, s1.x, s2.x);\n+\n+  CALC (s1.a, s2.a, dst_ref);\n+\n+  if (UNION_CHECK (AVX512F_LEN,) (res1, dst_ref))\n+    abort ();\n+\n+  MASK_MERGE () (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res2, dst_ref))\n+    abort ();\n+\n+  MASK_ZERO () (dst_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN,) (res3, dst_ref))\n+    abort ();\n+}"}, {"sha": "04a1a89da511c2fb438b0faff37697c254e7de99", "filename": "gcc/testsuite/gcc.target/i386/avx512f-helper.h", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-helper.h?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -1,16 +1,25 @@\n /* This file is used to reduce a number of runtime tests for AVX512F\n-   instructions.  Idea is to create one file per instruction -\n+   and AVX512VL instructions.  Idea is to create one file per instruction -\n    avx512f-insn-2.c - using defines from this file instead of intrinsic\n    name, vector length etc.  Then dg-options are set with appropriate\n    -Dwhatever options in that .c file producing tests for specific\n    length.  */\n \n-#if defined (AVX512F)\n+#ifndef AVX512F_HELPER_INCLUDED\n+#define AVX512F_HELPER_INCLUDED\n+\n+#if defined (AVX512F) && !defined (AVX512VL)\n #include \"avx512f-check.h\"\n #elif defined (AVX512ER)\n #include \"avx512er-check.h\"\n #elif defined (AVX512CD)\n #include \"avx512cd-check.h\"\n+#elif defined (AVX512DQ)\n+#include \"avx512dq-check.h\"\n+#elif defined (AVX512BW)\n+#include \"avx512bw-check.h\"\n+#elif defined (AVX512VL)\n+#include \"avx512vl-check.h\"\n #endif\n \n /* Macros expansion.  */\n@@ -73,8 +82,7 @@ MAKE_MASK_ZERO(i_uq, unsigned long long)\n \n #define MASK_ZERO(TYPE) zero_masking_##TYPE\n \n-/* Intrinsic being tested.  */\n-#define INTRINSIC(NAME) EVAL(_mm, AVX512F_LEN, NAME)\n+\n /* Unions used for testing (for example union512d, union256d etc.).  */\n #define UNION_TYPE(SIZE, NAME) EVAL(union, SIZE, NAME)\n /* Corresponding union check.  */\n@@ -89,12 +97,17 @@ MAKE_MASK_ZERO(i_uq, unsigned long long)\n /* Function which calculates result.  */\n #define CALC EVAL(calc_, AVX512F_LEN,)\n \n+#ifndef AVX512VL\n #define AVX512F_LEN 512\n #define AVX512F_LEN_HALF 256\n+void test_512 ();\n+#endif\n \n void test_512 ();\n+void test_256 ();\n+void test_128 ();\n \n-#if defined (AVX512F)\n+#if defined (AVX512F) && !defined (AVX512VL)\n void\n avx512f_test (void) { test_512 (); }\n #elif defined (AVX512CD)\n@@ -103,4 +116,28 @@ avx512cd_test (void) { test_512 (); }\n #elif defined (AVX512ER)\n void\n avx512er_test (void) { test_512 (); }\n+#elif defined (AVX512DQ)\n+void\n+avx512dq_test (void) { test_512 (); }\n+#elif defined (AVX512BW)\n+void\n+avx512bw_test (void) { test_512 (); }\n+#elif defined (AVX512VL)\n+void\n+avx512vl_test (void) { test_256 (); test_128 (); }\n+#endif\n+\n+#endif /* AVX512F_HELPER_INCLUDED */\n+\n+/* Intrinsic being tested. It has different deffinitions,\n+   depending on AVX512F_LEN, so it's outside include guards\n+   and in undefed away to silence warnings.  */\n+#if defined INTRINSIC\n+#undef INTRINSIC\n+#endif\n+\n+#if AVX512F_LEN != 128\n+#define INTRINSIC(NAME) EVAL(_mm, AVX512F_LEN, NAME)\n+#else\n+#define INTRINSIC(NAME) _mm ## NAME\n #endif"}, {"sha": "efece198e5124a143b00f1bafb7f2bd8e05d16dd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-mask-type.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-mask-type.h?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -1,10 +1,30 @@\n /* Type of mask.  */\n #if SIZE <= 8\n+#undef MASK_TYPE\n+#undef MASK_VALUE\n+#undef MASK_ALL_ONES\n #define MASK_TYPE __mmask8\n #define MASK_VALUE 0xB9\n #define MASK_ALL_ONES 0xFF\n #elif SIZE <= 16\n+#undef MASK_TYPE\n+#undef MASK_VALUE\n+#undef MASK_ALL_ONES\n #define MASK_TYPE __mmask16\n #define MASK_VALUE 0xA6BA\n #define MASK_ALL_ONES 0xFFFF\n+#elif SIZE <= 32\n+#undef MASK_TYPE\n+#undef MASK_VALUE\n+#undef MASK_ALL_ONES\n+#define MASK_TYPE __mmask32\n+#define MASK_VALUE 0xA6BAAB6A \n+#define MASK_ALL_ONES 0xFFFFFFFFu\n+#elif SIZE <= 64 \n+#undef MASK_TYPE\n+#undef MASK_VALUE\n+#undef MASK_ALL_ONES\n+#define MASK_TYPE __mmask64\n+#define MASK_VALUE 0xA6BAA6BAB6AB6ABB \n+#define MASK_ALL_ONES 0xFFFFFFFFFFFFFFFFull\n #endif"}, {"sha": "52e226d9f1534a84d0f0f23c28b44b319dae6a2b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmppd-2.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -26,6 +26,38 @@\n     if ((dst_ref & mask) != dst2) abort();\n #endif\n \n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_pd(s1);\t\t\t\\\n+    source2.x = _mm256_loadu_pd(s2);\t\t\t\\\n+    dst1 = _mm256_cmp_pd_mask(source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_pd_mask(mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((dst_ref & mask) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 2; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_pd(s1);\t\t\t\\\n+    source2.x = _mm_loadu_pd(s2);\t\t\t\\\n+    dst1 = _mm_cmp_pd_mask(source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_pd_mask(mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((dst_ref & mask) != dst2) abort();\n+#endif\n+\n void\n TEST ()\n {"}, {"sha": "2ffa2ed16b770829287e8ae4797c5fa74afd50c1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpps-2.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -12,6 +12,7 @@\n #include \"avx512f-mask-type.h\"\n \n #if AVX512F_LEN == 512\n+#undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n     for (i = 0; i < 16; i++)\t\t\t\t\\\n@@ -26,6 +27,38 @@\n     if ((dst_ref & mask) != dst2) abort();\n #endif\n \n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 8; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_ps(s1);\t\t\t\\\n+    source2.x = _mm256_loadu_ps(s2);\t\t\t\\\n+    dst1 = _mm256_cmp_ps_mask(source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_ps_mask(mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((dst_ref & mask) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_ps(s1);\t\t\t\\\n+    source2.x = _mm_loadu_ps(s2);\t\t\t\\\n+    dst1 = _mm_cmp_ps_mask(source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_ps_mask(mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((dst_ref & mask) != dst2) abort();\n+#endif\n+\n void\n TEST ()\n {"}, {"sha": "d274ab784d6c9cb9e8d6cc0b4d0446c5bc3e550e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2ps-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2ps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -15,6 +15,8 @@ CALC (float *e, UNION_TYPE (AVX512F_LEN, d) s1)\n   int i;\n   for (i = 0; i < SIZE; i++)\n     e[i] = (float) s1.a[i];\n+  for (i = SIZE; i < AVX512F_LEN_HALF / 32; i++)\n+    e[i] = 0.0;\n }\n \n void\n@@ -23,7 +25,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, d) s1;\n   UNION_TYPE (AVX512F_LEN_HALF,) u1, u2, u3;\n   MASK_TYPE mask = MASK_VALUE;\n-  float e[SIZE];\n+  float e[AVX512F_LEN_HALF / 32];\n   int i;\n \n   for (i = 0; i < SIZE; i++)"}, {"sha": "ad9003528d02b41b232b9319071a3a67dc57b259", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtpd2udq-2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtpd2udq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -15,10 +15,14 @@ CALC (double *s, unsigned *r)\n {\n   int i;\n \n-  for (i = 0; i < DST_SIZE; i++)\n+  for (i = 0; i < SRC_SIZE; i++)\n     {\n       r[i] = (unsigned) (s[i] + 0.5);\n     }\n+  for (i = SRC_SIZE; i < DST_SIZE; i++)\n+    {\n+      r[i] = 0;\n+    }\n }\n \n void"}, {"sha": "5cf110f92aca3566f3cc1d4985fdd38297fc2d5f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtph2ps-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtph2ps-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -67,9 +67,9 @@ TEST (void)\n   val.a[15] = 0xc800;\n #endif\n \n-  res1.x = _mm512_cvtph_ps (val.x);\n-  res2.x = _mm512_mask_cvtph_ps (res2.x, mask, val.x);\n-  res3.x = _mm512_maskz_cvtph_ps (mask, val.x);\n+  res1.x = INTRINSIC (_cvtph_ps) (val.x);\n+  res2.x = INTRINSIC (_mask_cvtph_ps) (res2.x, mask, val.x);\n+  res3.x = INTRINSIC (_maskz_cvtph_ps) (mask, val.x);\n \n   if (UNION_CHECK (AVX512F_LEN,) (res1, exp))\n     abort ();"}, {"sha": "e4f21a6e4b12cac5a9e3258674ce820f9660ad59", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtps2ph-2.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtps2ph-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -15,7 +15,11 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN,) val;\n   UNION_TYPE (AVX512F_LEN_HALF, i_w) res1,res2,res3;\n   MASK_TYPE mask = MASK_VALUE;\n+#if AVX512F_LEN == 128\n+  short exp[SIZE * 2];\n+#else\n   short exp[SIZE];\n+#endif\n   int i;\n \n   for (i = 0; i < SIZE; i++)\n@@ -55,6 +59,11 @@ TEST (void)\n   exp[5] = 0xc000;\n   exp[6] = 0xc400;\n   exp[7] = 0xc800;\n+#else\n+  exp[4] = 0;\n+  exp[5] = 0;\n+  exp[6] = 0;\n+  exp[7] = 0;\n #endif\n #if AVX512F_LEN > 256\n   exp[8] = 0x3c00;\n@@ -67,9 +76,9 @@ TEST (void)\n   exp[15] = 0xc800;\n #endif\n \n-  res1.x = _mm512_cvtps_ph (val.x, 0);\n-  res2.x = _mm512_mask_cvtps_ph (res2.x, mask, val.x, 0);\n-  res3.x = _mm512_maskz_cvtps_ph (mask, val.x, 0);\n+  res1.x = INTRINSIC (_cvtps_ph (val.x, 0));\n+  res2.x = INTRINSIC (_mask_cvtps_ph (res2.x, mask, val.x, 0));\n+  res3.x = INTRINSIC (_maskz_cvtps_ph (mask, val.x, 0));\n \n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res1, exp))\n     abort ();"}, {"sha": "f0a966ed96824aefa7f61b7299c76e9a0b088c9b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvttpd2udq-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvttpd2udq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -15,10 +15,10 @@ CALC (double *s, unsigned *r)\n {\n   int i;\n \n-  for (i = 0; i < DST_SIZE; i++)\n-    {\n+  for (i = 0; i < SRC_SIZE; i++)\n       r[i] = (unsigned) s[i];\n-    }\n+  for (i = SRC_SIZE; i < DST_SIZE; i++)\n+      r[i] = 0;\n }\n \n void"}, {"sha": "55786bc6289ff96358501262d9c29fd97b6d3f9e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpandd-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -34,18 +34,22 @@ TEST (void)\n       res3.a[i] = DEFAULT_VALUE;\n     }\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_and_si512) (s1.x, s2.x);\n   res2.x = INTRINSIC (_and_epi32) (s1.x, s2.x);\n+#endif\n   res3.x = INTRINSIC (_mask_and_epi32) (res3.x, mask, s1.x, s2.x);\n   res4.x = INTRINSIC (_maskz_and_epi32) (mask, s1.x, s2.x);\n \n   CALC (s1.a, s2.a, res_ref);\n \n+#if AVX512F_LEN == 512\n   if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n     abort ();\n \n   if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n     abort ();\n+#endif\n \n   MASK_MERGE (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))"}, {"sha": "b5c071944dba27ea1cc6e12ba9eb9fa4e504c822", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpandnd-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandnd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandnd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandnd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -34,18 +34,22 @@ TEST (void)\n       res3.a[i] = DEFAULT_VALUE;\n     }\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_andnot_si512) (s1.x, s2.x);\n   res2.x = INTRINSIC (_andnot_epi32) (s1.x, s2.x);\n+#endif\n   res3.x = INTRINSIC (_mask_andnot_epi32) (res3.x, mask, s1.x, s2.x);\n   res4.x = INTRINSIC (_maskz_andnot_epi32) (mask, s1.x, s2.x);\n \n   CALC (s1.a, s2.a, res_ref);\n \n+#if AVX512F_LEN == 512\n   if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n       abort ();\n \n   if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n       abort ();\n+#endif\n \n   MASK_MERGE (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))"}, {"sha": "9b7512bcdf8f06ea10abd7911443e7f3339923da", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpandnq-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandnq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandnq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandnq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -34,14 +34,18 @@ TEST (void)\n       res2.a[i] = DEFAULT_VALUE;\n     }\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_andnot_epi64) (s1.x, s2.x);\n+#endif\n   res2.x = INTRINSIC (_mask_andnot_epi64) (res2.x, mask, s1.x, s2.x);\n   res3.x = INTRINSIC (_maskz_andnot_epi64) (mask, s1.x, s2.x);\n \n   CALC (s1.a, s2.a, res_ref);\n \n+#if AVX512F_LEN == 512\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n       abort ();\n+#endif\n \n   MASK_MERGE (i_q) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))"}, {"sha": "3493830d5044a0a7aad5156fc9712f6b33cbb027", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpandq-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpandq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -34,14 +34,18 @@ TEST (void)\n       res2.a[i] = DEFAULT_VALUE;\n     }\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_and_epi64) (s1.x, s2.x);\n+#endif\n   res2.x = INTRINSIC (_mask_and_epi64) (res2.x, mask, s1.x, s2.x);\n   res3.x = INTRINSIC (_maskz_and_epi64) (mask, s1.x, s2.x);\n \n   CALC (s1.a, s2.a, res_ref);\n \n+#if AVX512F_LEN == 512\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n       abort ();\n+#endif\n \n   MASK_MERGE (i_q) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))"}, {"sha": "9cfa63d98b157fb84fc23417fbd02c141f977fa4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpbroadcastq-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpbroadcastq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpbroadcastq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpbroadcastq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -54,7 +54,9 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n     abort ();\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_set1_epi64) (src.a[0]);\n+#endif\n   res2.x = INTRINSIC (_mask_set1_epi64) (res2.x, mask, src.a[0]);\n   res3.x = INTRINSIC (_maskz_set1_epi64) (mask, src.a[0]);\n "}, {"sha": "9479f896af395f0e862f89d208579a4c4e1aac90", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpd-2.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -11,6 +11,7 @@\n #include \"avx512f-mask-type.h\"\n \n #if AVX512F_LEN == 512\n+#undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n     for (i = 0; i < 16; i++)\t\t\t\t\\\n@@ -25,6 +26,38 @@\n     if ((mask & dst_ref) != dst2) abort();\n #endif\n \n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 8; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\t\\\n+    dst1 = _mm256_cmp_epi32_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epi32_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epi32_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epi32_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n void\n TEST ()\n {"}, {"sha": "857b04e6999c18bed3e127d72a8590186f15718e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpq-2.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -12,6 +12,8 @@\n \n __mmask8 dst_ref;\n \n+#if AVX512F_LEN == 512\n+#undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n     for (i = 0; i < 8; i++)\t\t\t\t\\\n@@ -24,6 +26,39 @@ __mmask8 dst_ref;\n     dst2 = _mm512_mask_cmp_epi64_mask (mask, source1.x, source2.x, imm);\\\n     if (dst_ref != dst1) abort();\t\t\t\\\n     if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\t\\\n+    dst1 = _mm256_cmp_epi64_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epi64_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 2; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epi64_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epi64_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n \n void\n TEST ()"}, {"sha": "3f09e7d3ea0f26159ca4a5ca3c290b16166f5f19", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpud-2.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpud-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -11,6 +11,7 @@\n #include \"avx512f-mask-type.h\"\n \n #if AVX512F_LEN == 512\n+#undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n     for (i = 0; i < 16; i++)\t\t\t\t\\\n@@ -25,6 +26,38 @@\n     if ((mask & dst_ref) != dst2) abort();\n #endif\n \n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 8; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\t\\\n+    dst1 = _mm256_cmp_epu32_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epu32_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epu32_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epu32_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n void\n TEST ()\n {"}, {"sha": "11eb6ffebcdeca5bcbeba80e5c9e682acfc5375f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpuq-2.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpuq-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -11,6 +11,7 @@\n #include \"avx512f-mask-type.h\"\n \n #if AVX512F_LEN == 512\n+#undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n     for (i = 0; i < 8; i++)\t\t\t\t\\\n@@ -25,6 +26,38 @@\n     if ((mask & dst_ref) != dst2) abort();\n #endif\n \n+#if AVX512F_LEN == 256\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 4; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm256_loadu_si256 ((__m256i*)s1);\t\t\\\n+    source2.x = _mm256_loadu_si256 ((__m256i*)s2);\t\t\\\n+    dst1 = _mm256_cmp_epu64_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm256_mask_cmp_epu64_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n+#if AVX512F_LEN == 128\n+#undef CMP\n+#define CMP(imm, rel)\t\t\t\t\t\\\n+    dst_ref = 0;\t\t\t\t\t\\\n+    for (i = 0; i < 2; i++)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      dst_ref = ((rel) << i) | dst_ref;\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+    source1.x = _mm_loadu_si128 ((__m128i*)s1);\t\t\\\n+    source2.x = _mm_loadu_si128 ((__m128i*)s2);\t\t\\\n+    dst1 = _mm_cmp_epu64_mask (source1.x, source2.x, imm);\\\n+    dst2 = _mm_mask_cmp_epu64_mask (mask, source1.x, source2.x, imm);\\\n+    if (dst_ref != dst1) abort();\t\t\t\\\n+    if ((mask & dst_ref) != dst2) abort();\n+#endif\n+\n void\n TEST ()\n {"}, {"sha": "dbd4544c39e93f6fba2a01b43f1b9e5fb135cb45", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermd-2.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -17,7 +17,11 @@ CALC (int *mask, int *src1, int *dst)\n \n   for (i = 0; i < SIZE; i++)\n     {\n+#if AVX512F_LEN == 512\n       dst[i] = src1[mask[i] & 15];\n+#else\n+      dst[i] = src1[mask[i] & 7];\n+#endif\n     }\n }\n \n@@ -37,14 +41,18 @@ TEST (void)\n       res3.a[i] = DEFAULT_VALUE;\n     }\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_permutexvar_epi32) (src1.x, src2.x);\n+#endif\n   res2.x = INTRINSIC (_maskz_permutexvar_epi32) (mask, src1.x, src2.x);\n   res3.x = INTRINSIC (_mask_permutexvar_epi32) (res3.x, mask, src1.x, src2.x);\n \n   CALC (src1.a, src2.a, res_ref);\n \n+#if AVX512F_LEN == 512\n   if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n     abort ();\n+#endif\n \n   MASK_ZERO (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))"}, {"sha": "e1c3a209f75467c6c00eef3ac796a2aec054d696", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermilpdi-2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermilpdi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermilpdi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermilpdi-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -9,8 +9,12 @@\n #define SIZE (AVX512F_LEN / 64)\n #include \"avx512f-mask-type.h\"\n \n-#ifndef CTRL\n-#define CTRL 129\n+#if AVX512F_LEN > 256\n+  #define CTRL 129\n+#elif AVX512F_LEN > 128\n+  #define CTRL 5\n+#else\n+  #define CTRL 1\n #endif\n \n static void\n@@ -55,3 +59,5 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN, d) (res3, res_ref))\n     abort ();\n }\n+\n+#undef CTRL"}, {"sha": "770d5623f5f454f09c5340bb9dbe8267f8c31847", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermq-imm-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermq-imm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermq-imm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermq-imm-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -40,14 +40,18 @@ TEST (void)\n       res3.a[i] = DEFAULT_VALUE;\n     }\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_permutex_epi64) (src1.x, IMM_MASK);\n+#endif\n   res2.x = INTRINSIC (_maskz_permutex_epi64) (mask, src1.x, IMM_MASK);\n   res3.x = INTRINSIC (_mask_permutex_epi64) (res3.x, mask, src1.x, IMM_MASK);\n \n   CALC (src1.a, IMM_MASK, res_ref);\n \n+#if AVX512F_LEN == 512\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n     abort ();\n+#endif\n \n   MASK_ZERO (i_q) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))"}, {"sha": "c596b1d9c40f5bd383b55f114efc4c579c9365e8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpermq-var-2.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermq-var-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermq-var-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpermq-var-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -17,7 +17,11 @@ CALC (long long *mask, long long *src1, long long *dst)\n \n   for (i = 0; i < SIZE; i++)\n     {\n+#if AVX512F_LEN == 512\n       dst[i] = src1[mask[i] & 7];\n+#else\n+      dst[i] = src1[mask[i] & 3];\n+#endif\n     }\n }\n \n@@ -37,14 +41,18 @@ TEST (void)\n       res3.a[i] = DEFAULT_VALUE;\n     }\n \n+#if AVX512F_LEN == 512\n   res1.x = INTRINSIC (_permutexvar_epi64) (src1.x, src2.x);\n+#endif\n   res2.x = INTRINSIC (_maskz_permutexvar_epi64) (mask, src1.x, src2.x);\n   res3.x = INTRINSIC (_mask_permutexvar_epi64) (res3.x, mask, src1.x, src2.x);\n \n   CALC (src1.a, src2.a, res_ref);\n \n+#if AVX512F_LEN == 512\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n     abort ();\n+#endif\n \n   MASK_ZERO (i_q) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))"}, {"sha": "80cb2c3cb2f5b9d3d88b17bca6b7c3d4e1d72847", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovdb-2.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -9,11 +9,12 @@\n #define SIZE (AVX512F_LEN / 32)\n #include \"avx512f-mask-type.h\"\n \n-static void\n-CALC (char *r, int *s)\n+void\n+CALC (char *r, int *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 16; i++)\n+  int len = mem ? SIZE : 16;\n+  for (i = 0; i < len; i++)\n     {\n       r[i] = (i < SIZE) ? (char) s[i] : 0;\n     }\n@@ -28,6 +29,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[16];\n+  char res_ref2[16];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -38,12 +40,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < 16; i++)\n+    {\n+      res4[i] = DEFAULT_VALUE * 2;\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtepi32_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi32_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi32_epi8) (mask, src.x);\n-  INTRINSIC (_mask_cvtepi32_storeu_epi8) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_b) (res1, res_ref))\n     abort ();\n@@ -52,10 +59,14 @@ TEST (void)\n   if (UNION_CHECK (128, i_b) (res2, res_ref))\n     abort ();\n \n-  if (checkVc (res4, res_ref, 16))\n-    abort ();\n-\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtepi32_storeu_epi8) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+  if (checkVc (res4, res_ref2, 16))\n+    abort ();\n }"}, {"sha": "c0797fcda950ca014458aeed5d7689fe827aff0d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovdw-2.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovdw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -10,11 +10,12 @@\n #include \"avx512f-mask-type.h\"\n #define SIZE_HALF (AVX512F_LEN_HALF / 16)\n \n-void static\n-CALC (short *r, int *s)\n+void \n+CALC (short *r, int *s, int mem)\n {\n   int i;\n-  for (i = 0; i < SIZE_HALF; i++)\n+  int len = mem ? SIZE : SIZE_HALF;\n+  for (i = 0; i < len; i++)\n     {\n       r[i] = (i < SIZE) ? (short) s[i] : 0;\n     }\n@@ -29,6 +30,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[SIZE_HALF];\n+  short res_ref2[SIZE_HALF];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -39,12 +41,16 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < SIZE_HALF; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtepi32_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi32_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi32_epi16) (mask, src.x);\n-  INTRINSIC (_mask_cvtepi32_storeu_epi16) (res4, mask, src.x);\n-\n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res1, res_ref))\n     abort ();\n@@ -53,10 +59,14 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res2, res_ref))\n     abort ();\n \n-  if (checkVs (res4, res_ref, SIZE_HALF))\n-    abort ();\n-\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtepi32_storeu_epi16) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (checkVs (res4, res_ref2, SIZE_HALF))\n+    abort ();\n }"}, {"sha": "8a9b4adaadeefa9d13893baf804c74dd7b524fce", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -14,7 +14,7 @@ CALC (char *r, long long *s, int mem)\n {\n   int i;\n   /* Don't zero out upper half if destination is memory.  */\n-  int len = mem ? 8 : 16;\n+  int len = mem ? SIZE : 16;\n   for (i = 0; i < len; i++)\n     {\n       r[i] = (i < SIZE) ? (char) s[i] : 0;"}, {"sha": "f0e4e1274833ab8206970f199149719c07f85acd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqd-2.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -10,11 +10,12 @@\n #include \"avx512f-mask-type.h\"\n #define SIZE_HALF (AVX512F_LEN_HALF / 32)\n \n-void static\n-CALC (int *r, long long *s)\n+void \n+CALC (int *r, long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < SIZE_HALF; i++)\n+  int len = mem ? SIZE : SIZE_HALF;\n+  for (i = 0; i < len; i++)\n     {\n       r[i] = (i < SIZE) ? (int) s[i] : 0;\n     }\n@@ -29,6 +30,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   int res_ref[SIZE_HALF];\n+  int res_ref2[SIZE_HALF];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -39,13 +41,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < SIZE_HALF; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtepi64_epi32) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi64_epi32) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi64_epi32) (mask, src.x);\n-  INTRINSIC (_mask_cvtepi64_storeu_epi32) (res4, mask, src.x);\n-\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res1, res_ref))\n     abort ();\n@@ -54,10 +60,14 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n     abort ();\n \n-  if (checkVi (res4, res_ref, SIZE_HALF))\n-    abort ();\n-\n   MASK_ZERO (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtepi64_storeu_epi32) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_d) (res_ref2, mask, SIZE);\n+  if (checkVi (res4, res_ref2, SIZE_HALF))\n+    abort ();\n }"}, {"sha": "c527a977948538d025f86f0fd7a358b1a3e88159", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovqw-2.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovqw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -9,11 +9,12 @@\n #define SIZE (AVX512F_LEN / 64)\n #include \"avx512f-mask-type.h\"\n \n-static void\n-CALC (short *r, long long *s)\n+void\n+CALC (short *r, long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 8; i++)\n+  int len = mem ? SIZE : 8;\n+  for (i = 0; i < len; i++)\n     {\n       r[i] = (i < SIZE) ? (short) s[i] : 0;\n     }\n@@ -28,6 +29,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[8];\n+  short res_ref2[8];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -38,12 +40,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < 8; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtepi64_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtepi64_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtepi64_epi16) (mask, src.x);\n-  INTRINSIC (_mask_cvtepi64_storeu_epi16) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_w) (res1, res_ref))\n     abort ();\n@@ -52,10 +59,14 @@ TEST (void)\n   if (UNION_CHECK (128, i_w) (res2, res_ref))\n     abort ();\n \n-  if (checkVs (res4, res_ref, 8))\n-    abort ();\n-\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_w) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtepi64_storeu_epi16) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (checkVs (res4, res_ref2, 8))\n+    abort ();\n }"}, {"sha": "09bdc46ec73305a113e2fef6dc7606ee20ccf0b8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsdb-2.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -10,19 +10,24 @@\n #include \"avx512f-mask-type.h\"\n #include <limits.h>\n \n-static void\n-CALC (char *r, int *s)\n+void\n+CALC (char *r, int *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 16; i++)\n+  int len = mem ? SIZE : 16;\n+  for (i = 0; i < len; i++)\n     {\n-      if (s[i] < CHAR_MIN)\n-\tr[i] = CHAR_MIN;\n-      else if (s[i] > CHAR_MAX)\n-\tr[i] = CHAR_MAX;\n+      if (i < SIZE)\n+\t{\n+\t  if (s[i] < CHAR_MIN)\n+\t    r[i] = CHAR_MIN;\n+\t  else if (s[i] > CHAR_MAX)\n+\t    r[i] = CHAR_MAX;\n+\t  else\n+\t    r[i] = s[i];\n+\t}\n       else\n-\tr[i] = s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n+\tr[i] = 0;\n     }\n }\n \n@@ -35,6 +40,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[16];\n+  char res_ref2[16];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -45,12 +51,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < 16; i++)\n+    {\n+      res4[i] = DEFAULT_VALUE * 2;\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtsepi32_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi32_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi32_epi8) (mask, src.x);\n-  INTRINSIC (_mask_cvtsepi32_storeu_epi8) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_b) (res1, res_ref))\n     abort ();\n@@ -59,10 +70,14 @@ TEST (void)\n   if (UNION_CHECK (128, i_b) (res2, res_ref))\n     abort ();\n \n-  if (checkVc (res4, res_ref, 16))\n-    abort ();\n-\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_b) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtsepi32_storeu_epi8) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+  if (checkVc (res4, res_ref2, 16))\n+    abort ();\n }"}, {"sha": "d0edbd39c4d2fda881a9e74c2cb51642740a9f97", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsdw-2.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsdw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -11,19 +11,24 @@\n #define SIZE_HALF (AVX512F_LEN_HALF / 16)\n #include <limits.h>\n \n-static void\n-CALC (short *r, int *s)\n+void\n+CALC (short *r, int *s, int mem)\n {\n   int i;\n-  for (i = 0; i < SIZE_HALF; i++)\n+  int len = mem ? SIZE : SIZE_HALF;\n+  for (i = 0; i < len; i++)\n     {\n-      if (s[i] < SHRT_MIN)\n-\tr[i] = SHRT_MIN;\n-      else if (s[i] > SHRT_MAX)\n-\tr[i] = SHRT_MAX;\n+      if (i < SIZE)\n+\t{\n+\t  if (s[i] < SHRT_MIN)\n+\t    r[i] = SHRT_MIN;\n+\t  else if (s[i] > SHRT_MAX)\n+\t    r[i] = SHRT_MAX;\n+\t  else\n+\t    r[i] = s[i];\n+\t}\n       else\n-\tr[i] = s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n+\tr[i] = 0;\n     }\n }\n \n@@ -36,6 +41,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_d) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[SIZE_HALF];\n+  short res_ref2[SIZE_HALF];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -46,12 +52,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < SIZE_HALF; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtsepi32_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi32_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi32_epi16) (mask, src.x);\n-  INTRINSIC (_mask_cvtsepi32_storeu_epi16) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res1, res_ref))\n     abort ();\n@@ -60,10 +71,14 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res2, res_ref))\n     abort ();\n \n-  if (checkVs (res4, res_ref, SIZE_HALF))\n-    abort ();\n-\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_w) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtsepi32_storeu_epi16) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (checkVs (res4, res_ref2, SIZE_HALF))\n+    abort ();\n }"}, {"sha": "09b509616b261a21e9a8977dcac4bc8b34692dea", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -14,7 +14,7 @@ void static\n CALC (char *r, long long *s, int mem)\n {\n   int i;\n-  int len = mem ? 8 : 16;\n+  int len = mem ? SIZE : 16;\n   for (i = 0; i < len; i++)\n     {\n       if (s[i] < CHAR_MIN)"}, {"sha": "dc2e89d66bb68ecefae77fc81bd1e00e6f53e7e2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqd-2.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -11,19 +11,24 @@\n #define SIZE_HALF (AVX512F_LEN_HALF / 32)\n #include <limits.h>\n \n-static void\n-CALC (int *r, long long *s)\n+void\n+CALC (int *r, long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < SIZE_HALF; i++)\n+  int len = mem ? SIZE : SIZE_HALF; \n+  for (i = 0; i < len; i++)\n     {\n-      if (s[i] < INT_MIN)\n-\tr[i] = INT_MIN;\n-      else if (s[i] > INT_MAX)\n-\tr[i] = INT_MAX;\n+      if (i < SIZE)\n+\t{\n+\t  if (s[i] < INT_MIN)\n+\t    r[i] = INT_MIN;\n+\t  else if (s[i] > INT_MAX)\n+\t    r[i] = INT_MAX;\n+\t  else\n+\t    r[i] = s[i];\n+\t}\n       else\n-\tr[i] = s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n+\tr[i] = 0;\n     }\n }\n \n@@ -36,6 +41,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   int res_ref[SIZE_HALF];\n+  int res_ref2[SIZE_HALF];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -46,12 +52,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < SIZE_HALF; i++)\n+    {\n+      res4[i] = DEFAULT_VALUE * 2;\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtsepi64_epi32) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi64_epi32) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi64_epi32) (mask, src.x);\n-  INTRINSIC (_mask_cvtsepi64_storeu_epi32) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res1, res_ref))\n     abort ();\n@@ -60,10 +71,14 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res2, res_ref))\n     abort ();\n \n-  if (checkVi (res4, res_ref, SIZE_HALF))\n-    abort ();\n-\n   MASK_ZERO (i_d) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_d) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtsepi64_storeu_epi32) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_d) (res_ref2, mask, SIZE);\n+  if (checkVi (res4, res_ref2, SIZE_HALF))\n+    abort ();\n }"}, {"sha": "a7b6b3674393786a3898a55e84be35ebf0a9beb0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovsqw-2.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovsqw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -10,11 +10,12 @@\n #include \"avx512f-mask-type.h\"\n #include <limits.h>\n \n-void static\n-CALC (short *r, long long *s)\n+void \n+CALC (short *r, long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 8; i++)\n+  int len = mem ? SIZE : 8;\n+  for (i = 0; i < len; i++)\n     {\n       if (s[i] < SHRT_MIN)\n \tr[i] = SHRT_MIN;\n@@ -35,6 +36,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_q) src;\n   MASK_TYPE mask = MASK_VALUE;\n   short res_ref[8];\n+  short res_ref2[8];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n@@ -45,12 +47,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < 8; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtsepi64_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtsepi64_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtsepi64_epi16) (mask, src.x);\n-  INTRINSIC (_mask_cvtsepi64_storeu_epi16) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_w) (res1, res_ref))\n     abort ();\n@@ -59,10 +66,14 @@ TEST (void)\n   if (UNION_CHECK (128, i_w) (res2, res_ref))\n     abort ();\n \n-  if (checkVs (res4, res_ref, 8))\n-    abort ();\n-\n   MASK_ZERO (i_w) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_w) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtsepi64_storeu_epi16) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (checkVs (res4, res_ref2, 8))\n+    abort ();\n }"}, {"sha": "5a201d31e2c5331a64cf8f6d702a0af825987eba", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusdb-2.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -10,15 +10,13 @@\n #include \"avx512f-mask-type.h\"\n #include <limits.h>\n \n-static void\n-CALC (unsigned char *r, unsigned int *s)\n+void\n+CALC (unsigned char *r, unsigned int *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 16; i++)\n-    {\n-      r[i] = (s[i] > UCHAR_MAX) ? UCHAR_MAX : s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n-    }\n+  int len = mem ? SIZE : 16;\n+  for (i = 0; i < len; i++)\n+    r[i] = (i < SIZE) ? ((s[i] > UCHAR_MAX) ? UCHAR_MAX : s[i]) : 0;\n }\n \n void\n@@ -30,6 +28,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_ud) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned char res_ref[16];\n+  unsigned char res_ref2[16];\n \n   for (i = 0; i < SIZE; i++)\n     {\n@@ -38,12 +37,16 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < 16; i++)\n+    {\n+      res4[i] = DEFAULT_VALUE * 2;\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtusepi32_epi8) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi32_epi8) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi32_epi8) (mask, src.x);\n-  INTRINSIC (_mask_cvtusepi32_storeu_epi8) (res4, mask, src.x);\n-\n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_ub) (res1, res_ref))\n     abort ();\n@@ -52,10 +55,14 @@ TEST (void)\n   if (UNION_CHECK (128, i_ub) (res2, res_ref))\n     abort ();\n \n-  if (checkVuc (res4, res_ref, 16))\n-    abort ();\n-\n   MASK_ZERO (i_ub) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_ub) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtusepi32_storeu_epi8) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+  if (checkVc (res4, res_ref2, 16))\n+    abort ();\n }"}, {"sha": "a12bf475d403b920e0562e3e0423fd58b996316a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusdw-2.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusdw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -11,15 +11,13 @@\n #define SIZE_HALF (AVX512F_LEN_HALF / 16)\n #include <limits.h>\n \n-static void\n-CALC (unsigned short *r, unsigned int *s)\n+void\n+CALC (unsigned short *r, unsigned int *s, int mem)\n {\n   int i;\n-  for (i = 0; i < SIZE_HALF; i++)\n-    {\n-      r[i] = (s[i] > USHRT_MAX) ? USHRT_MAX : s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n-    }\n+  int len = mem ? SIZE : SIZE_HALF;\n+  for (i = 0; i < len; i++)\n+    r[i] = (i < SIZE) ? ((s[i] > USHRT_MAX) ? USHRT_MAX : s[i]) : 0;\n }\n \n void\n@@ -31,6 +29,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_ud) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned short res_ref[SIZE_HALF];\n+  unsigned short res_ref2[SIZE_HALF];\n \n   for (i = 0; i < SIZE; i++)\n     {\n@@ -39,12 +38,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < SIZE_HALF; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtusepi32_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi32_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi32_epi16) (mask, src.x);\n-  INTRINSIC (_mask_cvtusepi32_storeu_epi16) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (AVX512F_LEN_HALF, i_uw) (res1, res_ref))\n     abort ();\n@@ -53,10 +57,14 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_uw) (res2, res_ref))\n     abort ();\n \n-  if (checkVus (res4, res_ref, SIZE_HALF))\n-    abort ();\n-\n   MASK_ZERO (i_uw) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_uw) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtusepi32_storeu_epi16) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (checkVs (res4, res_ref2, SIZE_HALF))\n+    abort ();\n }"}, {"sha": "4f2cef5aca150ab6585c6df42a5c34c1db01a575", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqb-2.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqb-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -14,12 +14,9 @@ static void\n CALC (unsigned char *r, unsigned long long *s, int mem)\n {\n   int i;\n-  int len = mem ? 8 : 16;\n+  int len = mem ? SIZE : 16;\n   for (i = 0; i < len; i++)\n-    {\n-      r[i] = (s[i] > UCHAR_MAX) ? UCHAR_MAX : s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n-    }\n+    r[i] = (i < SIZE) ? ((s[i] > UCHAR_MAX) ? UCHAR_MAX : s[i]) : 0;\n }\n \n void"}, {"sha": "3b494f060ebf99e9e4b007ea4c13b676f805c8d2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqd-2.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqd-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -11,15 +11,13 @@\n #define SIZE_HALF (AVX512F_LEN_HALF / 32)\n #include <limits.h>\n \n-static void\n-CALC (unsigned int *r, unsigned long long *s)\n+void\n+CALC (unsigned int *r, unsigned long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < SIZE_HALF; i++)\n-    {\n-      r[i] = (s[i] > UINT_MAX) ? UINT_MAX : s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n-    }\n+  int len = mem ? SIZE : SIZE_HALF;\n+  for (i = 0; i < len; i++)\n+    r[i] = (i < SIZE) ? ((s[i] > UINT_MAX) ? UINT_MAX : s[i]) : 0;\n }\n \n void\n@@ -31,6 +29,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_uq) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned int res_ref[SIZE_HALF];\n+  unsigned int res_ref2[SIZE_HALF];\n \n   for (i = 0; i < SIZE; i++)\n     {\n@@ -39,12 +38,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < SIZE_HALF; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtusepi64_epi32) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi64_epi32) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi64_epi32) (mask, src.x);\n-  INTRINSIC (_mask_cvtusepi64_storeu_epi32) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (AVX512F_LEN_HALF, i_ud) (res1, res_ref))\n     abort ();\n@@ -53,10 +57,14 @@ TEST (void)\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_ud) (res2, res_ref))\n     abort ();\n \n-  if (checkVui (res4, res_ref, SIZE_HALF))\n-    abort ();\n-\n   MASK_ZERO (i_ud) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_ud) (res3, res_ref))\n     abort ();\n+\n+  CALC (res_ref2, src.a, 1);\n+  INTRINSIC (_mask_cvtusepi64_storeu_epi32) (res4, mask, src.x);\n+\n+  MASK_MERGE (i_d) (res_ref2, mask, SIZE);\n+  if (checkVi (res4, res_ref2, SIZE_HALF))\n+    abort ();\n }"}, {"sha": "7caff1e229888dc8883990c58d0df6597cbe28f8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpmovusqw-2.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df7579fb01935f9cf70b3e8e9bb6fac904cf709/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpmovusqw-2.c?ref=6df7579fb01935f9cf70b3e8e9bb6fac904cf709", "patch": "@@ -10,15 +10,13 @@\n #include \"avx512f-mask-type.h\"\n #include <limits.h>\n \n-static void\n-CALC (unsigned short *r, unsigned long long *s)\n+void\n+CALC (unsigned short *r, unsigned long long *s, int mem)\n {\n   int i;\n-  for (i = 0; i < 8; i++)\n-    {\n-      r[i] = (s[i] > USHRT_MAX) ? USHRT_MAX : s[i];\n-      r[i] = (i < SIZE) ? r[i] : 0;\n-    }\n+  int len = mem ? SIZE : 8;\n+  for (i = 0; i < len; i++)\n+    r[i] = (i < SIZE) ? ((s[i] > USHRT_MAX) ? USHRT_MAX : s[i]) : 0;\n }\n \n void\n@@ -30,6 +28,7 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_uq) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned short res_ref[8];\n+  unsigned short res_ref2[8];\n \n   for (i = 0; i < SIZE; i++)\n     {\n@@ -38,12 +37,17 @@ TEST (void)\n       res4[i] = DEFAULT_VALUE;\n     }\n \n+  for (i = SIZE; i < 8; i++)\n+    {\n+      res_ref2[i] = DEFAULT_VALUE * 2;\n+      res4[i] = DEFAULT_VALUE * 2;\n+    }\n+\n   res1.x = INTRINSIC (_cvtusepi64_epi16) (src.x);\n   res2.x = INTRINSIC (_mask_cvtusepi64_epi16) (res2.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_cvtusepi64_epi16) (mask, src.x);\n-  INTRINSIC (_mask_cvtusepi64_storeu_epi16) (res4, mask, src.x);\n \n-  CALC (res_ref, src.a);\n+  CALC (res_ref, src.a, 0);\n \n   if (UNION_CHECK (128, i_uw) (res1, res_ref))\n     abort ();\n@@ -52,10 +56,14 @@ TEST (void)\n   if (UNION_CHECK (128, i_uw) (res2, res_ref))\n     abort ();\n \n-  if (checkVus (res4, res_ref, 8))\n-    abort ();\n-\n   MASK_ZERO (i_uw) (res_ref, mask, SIZE);\n   if (UNION_CHECK (128, i_uw) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtusepi64_storeu_epi16) (res4, mask, src.x);\n+  CALC (res_ref2, src.a, 1);\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (checkVs (res4, res_ref2, 8))\n+    abort ();\n }"}]}