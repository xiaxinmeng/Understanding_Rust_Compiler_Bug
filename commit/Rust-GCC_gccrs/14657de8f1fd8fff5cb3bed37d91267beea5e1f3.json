{"sha": "14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2NTdkZThmMWZkOGZmZjVjYjNiZWQzN2Q5MTI2N2JlZWE1ZTFmMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-11-29T02:26:49Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-11-29T02:26:49Z"}, "message": "com.c (ffecom_get_invented_identifier): Rewrite to take an ellipses.\n\n\t* com.c (ffecom_get_invented_identifier): Rewrite to take an ellipses.\n\n\t(ffecom_char_enhance_arg_, ffecom_do_entry_,\n\tffecom_f2c_make_type_, ffecom_gen_sfuncdef_,\n\tffecom_start_progunit_, ffecom_start_progunit_,\n\tffecom_start_progunit_, ffecom_sym_transform_assign_,\n\tffecom_transform_equiv_, ffecom_transform_namelist_,\n\tffecom_vardesc_, ffecom_vardesc_array_, ffecom_vardesc_dims_,\n\tffecom_end_transition, ffecom_lookup_label, ffecom_temp_label):\n\tAdjust accordingly.\n\n\t* com.h (ffecom_get_invented_identifier): Likewise.\n\n\t* sts.c (ffests_printf): New function taking ellipses.\n\t(ffests_printf_1D, ffests_printf_1U, ffests_printf_1s,\n\tffests_printf_2Us): Delete.\n\n\t* sts.h: Likewise.\n\n\t* std.c (ffestd_R1001dump_, ffestd_R1001dump_1005_1_,\n\tffestd_R1001dump_1005_2_, ffestd_R1001dump_1005_3_,\n\tffestd_R1001dump_1005_4_, ffestd_R1001dump_1005_5_,\n\tffestd_R1001dump_1010_2_, ffestd_R1001dump_1010_3_,\n\tffestd_R1001dump_1010_4_, ffestd_R1001dump_1010_5_,\n\tffestd_R1001rtexpr_): Call `ffests_printf', not `ffests_printf_*'.\n\n\t* ste.c (ffeste_io_ialist_, ffeste_io_cilist_, ffeste_io_cllist_,\n\tffeste_io_icilist_, ffeste_io_inlist_, ffeste_io_olist_): Likewise.\n\nFrom-SVN: r30692", "tree": {"sha": "0cd978ce53551cb7dfa9d8927ebebee6a99623a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd978ce53551cb7dfa9d8927ebebee6a99623a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/comments", "author": null, "committer": null, "parents": [{"sha": "146e60a0704290a2dcac78ffb1a2efbd7b852f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146e60a0704290a2dcac78ffb1a2efbd7b852f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146e60a0704290a2dcac78ffb1a2efbd7b852f7e"}], "stats": {"total": 318, "additions": 99, "deletions": 219}, "files": [{"sha": "ca606fa82e66ac72d6fcfe9f87c26bf37013f201", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "patch": "@@ -1,3 +1,34 @@\n+Sun Nov 28 21:15:29 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (ffecom_get_invented_identifier): Rewrite to take an ellipses.\n+\t\n+\t(ffecom_char_enhance_arg_, ffecom_do_entry_,\n+\tffecom_f2c_make_type_, ffecom_gen_sfuncdef_,\n+\tffecom_start_progunit_, ffecom_start_progunit_,\n+\tffecom_start_progunit_, ffecom_sym_transform_assign_,\n+\tffecom_transform_equiv_, ffecom_transform_namelist_,\n+\tffecom_vardesc_, ffecom_vardesc_array_, ffecom_vardesc_dims_,\n+\tffecom_end_transition, ffecom_lookup_label, ffecom_temp_label):\n+\tAdjust accordingly.\n+\n+\t* com.h (ffecom_get_invented_identifier): Likewise.\n+\n+\t* sts.c (ffests_printf): New function taking ellipses.\n+\t(ffests_printf_1D, ffests_printf_1U, ffests_printf_1s,\n+\tffests_printf_2Us): Delete.\n+\n+\t* sts.h: Likewise.\n+\n+\t* std.c (ffestd_R1001dump_, ffestd_R1001dump_1005_1_,\n+\tffestd_R1001dump_1005_2_, ffestd_R1001dump_1005_3_,\n+\tffestd_R1001dump_1005_4_, ffestd_R1001dump_1005_5_,\n+\tffestd_R1001dump_1010_2_, ffestd_R1001dump_1010_3_,\n+\tffestd_R1001dump_1010_4_, ffestd_R1001dump_1010_5_,\n+\tffestd_R1001rtexpr_): Call `ffests_printf', not `ffests_printf_*'.\n+\n+\t* ste.c (ffeste_io_ialist_, ffeste_io_cilist_, ffeste_io_cllist_,\n+\tffeste_io_icilist_, ffeste_io_inlist_, ffeste_io_olist_): Likewise.\n+\n Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n                           Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "23c4a9be4beb52656f12f9ff6716f11fb7e40cf4", "filename": "gcc/f/com.c", "status": "modified", "additions": 26, "deletions": 75, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "patch": "@@ -2402,10 +2402,9 @@ ffecom_char_enhance_arg_ (tree *xtype, ffesymbol s)\n     {\n       if (ffesymbol_where (s) == FFEINFO_whereDUMMY)\n \ttlen = ffecom_get_invented_identifier (\"__g77_length_%s\",\n-\t\t\t\t\t       ffesymbol_text (s), -1);\n+\t\t\t\t\t       ffesymbol_text (s));\n       else\n-\ttlen = ffecom_get_invented_identifier (\"__g77_%s\",\n-\t\t\t\t\t       \"length\", -1);\n+\ttlen = ffecom_get_invented_identifier (\"__g77_%s\", \"length\");\n       tlen = build_decl (PARM_DECL, tlen, ffecom_f2c_ftnlen_type_node);\n #if BUILT_FOR_270\n       DECL_ARTIFICIAL (tlen) = 1;\n@@ -2841,8 +2840,7 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n       else\n \ttype = ffecom_tree_type[FFEINFO_basictypeCOMPLEX][kt];\n \n-      result = ffecom_get_invented_identifier (\"__g77_%s\",\n-\t\t\t\t\t       \"result\", -1);\n+      result = ffecom_get_invented_identifier (\"__g77_%s\", \"result\");\n \n       /* Make length arg _and_ enhance type info for CHAR arg itself.  */\n \n@@ -2883,7 +2881,7 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n       yes = suspend_momentary ();\n \n       multi_retval = ffecom_get_invented_identifier (\"__g77_%s\",\n-\t\t\t\t\t\t     \"multi_retval\", -1);\n+\t\t\t\t\t\t     \"multi_retval\");\n       multi_retval = build_decl (VAR_DECL, multi_retval,\n \t\t\t\t ffecom_multi_type_node_);\n       multi_retval = start_decl (multi_retval, FALSE);\n@@ -6042,8 +6040,7 @@ ffecom_f2c_make_type_ (tree *type, int tcode, const char *name)\n     }\n \n   pushdecl (build_decl (TYPE_DECL,\n-\t\t\tffecom_get_invented_identifier (\"__g77_f2c_%s\",\n-\t\t\t\t\t\t\tname, -1),\n+\t\t\tffecom_get_invented_identifier (\"__g77_f2c_%s\", name),\n \t\t\t*type));\n }\n \n@@ -6340,8 +6337,7 @@ ffecom_gen_sfuncdef_ (ffesymbol s, ffeinfoBasictype bt, ffeinfoKindtype kt)\n \n       type = ffecom_tree_type[FFEINFO_basictypeCHARACTER][kt];\n \n-      result = ffecom_get_invented_identifier (\"__g77_%s\",\n-\t\t\t\t\t       \"result\", -1);\n+      result = ffecom_get_invented_identifier (\"__g77_%s\", \"result\");\n \n       ffecom_char_enhance_arg_ (&type, s);\t/* Ignore returned length. */\n \n@@ -7384,8 +7380,7 @@ ffecom_start_progunit_ ()\n   if (altentries)\n     {\n       id = ffecom_get_invented_identifier (\"__g77_masterfun_%s\",\n-\t\t\t\t\t   ffesymbol_text (fn),\n-\t\t\t\t\t   -1);\n+\t\t\t\t\t   ffesymbol_text (fn));\n     }\n #if FFETARGET_isENFORCED_MAIN\n   else if (main_program)\n@@ -7420,8 +7415,7 @@ ffecom_start_progunit_ ()\n       ffecom_which_entrypoint_decl_\n \t= build_decl (PARM_DECL,\n \t\t      ffecom_get_invented_identifier (\"__g77_%s\",\n-\t\t\t\t\t\t      \"which_entrypoint\",\n-\t\t\t\t\t\t      -1),\n+\t\t\t\t\t\t      \"which_entrypoint\"),\n \t\t      integer_type_node);\n       push_parm_decl (ffecom_which_entrypoint_decl_);\n     }\n@@ -7440,8 +7434,7 @@ ffecom_start_progunit_ ()\n       else\n \ttype = ffecom_multi_type_node_;\n \n-      result = ffecom_get_invented_identifier (\"__g77_%s\",\n-\t\t\t\t\t       \"result\", -1);\n+      result = ffecom_get_invented_identifier (\"__g77_%s\", \"result\");\n \n       /* Make length arg _and_ enhance type info for CHAR arg itself.  */\n \n@@ -8605,8 +8598,7 @@ ffecom_sym_transform_assign_ (ffesymbol s)\n \n   t = build_decl (VAR_DECL,\n \t\t  ffecom_get_invented_identifier (\"__g77_ASSIGN_%s\",\n-\t\t\t\t\t\t   ffesymbol_text (s),\n-\t\t\t\t\t\t   -1),\n+\t\t\t\t\t\t   ffesymbol_text (s)),\n \t\t  TREE_TYPE (null_pointer_node));\n \n   switch (ffesymbol_where (s))\n@@ -8924,9 +8916,7 @@ ffecom_transform_equiv_ (ffestorag eqst)\n   eqt = build_decl (VAR_DECL,\n \t\t    ffecom_get_invented_identifier (\"__g77_equiv_%s\",\n \t\t\t\t\t\t    ffesymbol_text\n-\t\t\t\t\t\t    (ffestorag_symbol\n-\t\t\t\t\t\t     (eqst)),\n-\t\t\t\t\t\t    -1),\n+\t\t\t\t\t\t    (ffestorag_symbol (eqst))),\n \t\t    eqtype);\n   DECL_EXTERNAL (eqt) = 0;\n   if (is_init\n@@ -9010,7 +9000,7 @@ ffecom_transform_namelist_ (ffesymbol s)\n \n   nmlt = build_decl (VAR_DECL,\n \t\t     ffecom_get_invented_identifier (\"__g77_namelist_%d\",\n-\t\t\t\t\t\t     NULL, mynumber++),\n+\t\t\t\t\t\t     mynumber++),\n \t\t     nmltype);\n   TREE_STATIC (nmlt) = 1;\n   DECL_INITIAL (nmlt) = error_mark_node;\n@@ -9616,7 +9606,7 @@ ffecom_vardesc_ (ffebld expr)\n \n       var = build_decl (VAR_DECL,\n \t\t\tffecom_get_invented_identifier (\"__g77_vardesc_%d\",\n-\t\t\t\t\t\t\tNULL, mynumber++),\n+\t\t\t\t\t\t\tmynumber++),\n \t\t\tvardesctype);\n       TREE_STATIC (var) = 1;\n       DECL_INITIAL (var) = error_mark_node;\n@@ -9723,8 +9713,7 @@ ffecom_vardesc_array_ (ffesymbol s)\n   TREE_CONSTANT (list) = 1;\n   TREE_STATIC (list) = 1;\n \n-  var = ffecom_get_invented_identifier (\"__g77_vardesc_array_%d\", NULL,\n-\t\t\t\t\tmynumber++);\n+  var = ffecom_get_invented_identifier (\"__g77_vardesc_array_%d\", mynumber++);\n   var = build_decl (VAR_DECL, var, item);\n   TREE_STATIC (var) = 1;\n   DECL_INITIAL (var) = error_mark_node;\n@@ -9837,8 +9826,7 @@ ffecom_vardesc_dims_ (ffesymbol s)\n     TREE_CONSTANT (list) = 1;\n     TREE_STATIC (list) = 1;\n \n-    var = ffecom_get_invented_identifier (\"__g77_dims_%d\", NULL,\n-\t\t\t\t\t  mynumber++);\n+    var = ffecom_get_invented_identifier (\"__g77_dims_%d\", mynumber++);\n     var = build_decl (VAR_DECL, var, item);\n     TREE_STATIC (var) = 1;\n     DECL_INITIAL (var) = error_mark_node;\n@@ -11164,7 +11152,7 @@ ffecom_end_transition ()\n \n       var = build_decl (VAR_DECL,\n \t\t\tffecom_get_invented_identifier (\"__g77_forceload_%d\",\n-\t\t\t\t\t\t\tNULL, number++),\n+\t\t\t\t\t\t\tnumber++),\n \t\t\tdt);\n       DECL_EXTERNAL (var) = 0;\n       TREE_STATIC (var) = 1;\n@@ -11453,59 +11441,24 @@ ffecom_finish_progunit ()\n }\n \n #endif\n-/* Wrapper for get_identifier.  pattern is sprintf-like, assumed to contain\n-   one %s if text is not NULL, assumed to contain one %d if number is\n-   not -1.  If both are assumed, the %s is assumed to precede the %d.  */\n+\n+/* Wrapper for get_identifier.  pattern is sprintf-like.  */\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n tree\n-ffecom_get_invented_identifier (const char *pattern, const char *text,\n-\t\t\t\tint number)\n+ffecom_get_invented_identifier (const char *pattern, ...)\n {\n   tree decl;\n   char *nam;\n-  mallocSize lenlen;\n-  char space[66];\n-\n-  lenlen = 0;\n-  if (text)\n-    lenlen += strlen (text);\n-  if (number != -1)\n-    lenlen += 20;\n-  if (text || number != -1)\n-    {\n-      lenlen += strlen (pattern);\n-      if (lenlen > ARRAY_SIZE (space))\n-\tnam = malloc_new_ks (malloc_pool_image (), pattern, lenlen);\n-      else\n-\tnam = &space[0];\n-    }\n-  else\n-    {\n-      lenlen = 0;\n-      nam = (char *) pattern;\n-    }\n-\n-  if (text == NULL)\n-    {\n-      if (number != -1)\n-\tsprintf (&nam[0], pattern, number);\n-    }\n-  else\n-    {\n-      if (number == -1)\n-\tsprintf (&nam[0], pattern, text);\n-      else\n-\tsprintf (&nam[0], pattern, text, number);\n-    }\n+  va_list ap;\n \n+  va_start (ap, pattern);\n+  if (vasprintf (&nam, pattern, ap) == 0)\n+    abort ();\n+  va_end (ap);\n   decl = get_identifier (nam);\n-\n-  if (lenlen > ARRAY_SIZE (space))\n-    malloc_kill_ks (malloc_pool_image (), nam, lenlen);\n-\n+  free (nam);\n   IDENTIFIER_INVENTED (decl) = 1;\n-\n   return decl;\n }\n \n@@ -12444,8 +12397,7 @@ ffecom_lookup_label (ffelab label)\n \n \t  glabel = build_decl (VAR_DECL,\n \t\t\t       ffecom_get_invented_identifier\n-\t\t\t       (\"__g77_format_%d\", NULL,\n-\t\t\t\t(int) ffelab_value (label)),\n+\t\t\t       (\"__g77_format_%d\", (int) ffelab_value (label)),\n \t\t\t       build_type_variant (build_array_type\n \t\t\t\t\t\t   (char_type_node,\n \t\t\t\t\t\t    NULL_TREE),\n@@ -13578,7 +13530,6 @@ ffecom_temp_label ()\n \n   glabel = build_decl (LABEL_DECL,\n \t\t       ffecom_get_invented_identifier (\"__g77_label_%d\",\n-\t\t\t\t\t\t       NULL,\n \t\t\t\t\t\t       mynumber++),\n \t\t       void_type_node);\n   DECL_CONTEXT (glabel) = current_function_decl;"}, {"sha": "b0f1119fdc52ca76c160577d70ee39691bd06124", "filename": "gcc/f/com.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "patch": "@@ -306,8 +306,8 @@ tree ffecom_expr_w (tree type, ffebld expr);\n void ffecom_finish_compile (void);\n void ffecom_finish_decl (tree decl, tree init, bool is_top_level);\n void ffecom_finish_progunit (void);\n-tree ffecom_get_invented_identifier (const char *pattern, const char *text,\n-\t\t\t\t     int number);\n+tree ffecom_get_invented_identifier (const char *pattern, ...)\n+  ATTRIBUTE_PRINTF_1;\n ffeinfoKindtype ffecom_gfrt_basictype (ffecomGfrt ix);\n ffeinfoKindtype ffecom_gfrt_kindtype (ffecomGfrt ix);\n void ffecom_init_0 (void);"}, {"sha": "5811803b656ef21ac294d69f7b66765498c1d5ad", "filename": "gcc/f/std.c", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fstd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fstd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstd.c?ref=14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "patch": "@@ -4465,9 +4465,7 @@ ffestd_R1001dump_ (ffests s, ffesttFormatList list)\n \t\tchar *p = ffelex_token_text (next->t);\n \t\tffeTokenLength i = ffelex_token_length (next->t);\n \n-\t\tffests_printf_1U (s,\n-\t\t\t\t  \"%\" ffeTokenLength_f \"uH\",\n-\t\t\t\t  i);\n+\t\tffests_printf (s, \"%\" ffeTokenLength_f \"uH\", i);\n \t\twhile (i-- != 0)\n \t\t  {\n \t\t    ffests_putc (s, *p);\n@@ -4487,8 +4485,7 @@ ffestd_R1001dump_ (ffests s, ffesttFormatList list)\n \t      if (next->u.R1003D.R1004.rtexpr)\n \t\tffestd_R1001rtexpr_ (s, next, next->u.R1003D.R1004.u.expr);\n \t      else\n-\t\tffests_printf_1U (s, \"%lu\",\n-\t\t\t\t  next->u.R1003D.R1004.u.unsigned_val);\n+\t\tffests_printf (s, \"%lu\", next->u.R1003D.R1004.u.unsigned_val);\n \t    }\n \n \t  ffests_putc (s, '(');\n@@ -4520,7 +4517,7 @@ ffestd_R1001dump_1005_1_ (ffests s, ffesttFormatList f, const char *string)\n       if (f->u.R1005.R1004.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1004.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n     }\n \n   ffests_puts (s, string);\n@@ -4530,7 +4527,7 @@ ffestd_R1001dump_1005_1_ (ffests s, ffesttFormatList f, const char *string)\n       if (f->u.R1005.R1006.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1006.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n     }\n }\n \n@@ -4553,15 +4550,15 @@ ffestd_R1001dump_1005_2_ (ffests s, ffesttFormatList f, const char *string)\n       if (f->u.R1005.R1004.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1004.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n     }\n \n   ffests_puts (s, string);\n \n   if (f->u.R1005.R1006.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1005.R1006.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n }\n \n /* ffestd_R1001dump_1005_3_ -- Dump a particular format\n@@ -4582,24 +4579,23 @@ ffestd_R1001dump_1005_3_ (ffests s, ffesttFormatList f, const char *string)\n       if (f->u.R1005.R1004.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1004.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n     }\n \n   ffests_puts (s, string);\n \n   if (f->u.R1005.R1006.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1005.R1006.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n \n   if (f->u.R1005.R1007_or_R1008.present)\n     {\n       ffests_putc (s, '.');\n       if (f->u.R1005.R1007_or_R1008.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1007_or_R1008.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\",\n-\t\t\t  f->u.R1005.R1007_or_R1008.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1007_or_R1008.u.unsigned_val);\n     }\n }\n \n@@ -4622,21 +4618,21 @@ ffestd_R1001dump_1005_4_ (ffests s, ffesttFormatList f, const char *string)\n       if (f->u.R1005.R1004.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1004.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n     }\n \n   ffests_puts (s, string);\n \n   if (f->u.R1005.R1006.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1005.R1006.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n \n   ffests_putc (s, '.');\n   if (f->u.R1005.R1007_or_R1008.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1005.R1007_or_R1008.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1005.R1007_or_R1008.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1005.R1007_or_R1008.u.unsigned_val);\n }\n \n /* ffestd_R1001dump_1005_5_ -- Dump a particular format\n@@ -4657,29 +4653,29 @@ ffestd_R1001dump_1005_5_ (ffests s, ffesttFormatList f, const char *string)\n       if (f->u.R1005.R1004.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1004.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1004.u.unsigned_val);\n     }\n \n   ffests_puts (s, string);\n \n   if (f->u.R1005.R1006.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1005.R1006.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1005.R1006.u.unsigned_val);\n \n   ffests_putc (s, '.');\n   if (f->u.R1005.R1007_or_R1008.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1005.R1007_or_R1008.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1005.R1007_or_R1008.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1005.R1007_or_R1008.u.unsigned_val);\n \n   if (f->u.R1005.R1009.present)\n     {\n       ffests_putc (s, 'E');\n       if (f->u.R1005.R1009.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1005.R1009.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1005.R1009.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1005.R1009.u.unsigned_val);\n     }\n }\n \n@@ -4713,7 +4709,7 @@ ffestd_R1001dump_1010_2_ (ffests s, ffesttFormatList f, const char *string)\n       if (f->u.R1010.val.rtexpr)\n \tffestd_R1001rtexpr_ (s, f, f->u.R1010.val.u.expr);\n       else\n-\tffests_printf_1U (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n+\tffests_printf (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n     }\n \n   ffests_puts (s, string);\n@@ -4734,7 +4730,7 @@ ffestd_R1001dump_1010_3_ (ffests s, ffesttFormatList f, const char *string)\n   if (f->u.R1010.val.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1010.val.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n \n   ffests_puts (s, string);\n }\n@@ -4754,7 +4750,7 @@ ffestd_R1001dump_1010_4_ (ffests s, ffesttFormatList f, const char *string)\n   if (f->u.R1010.val.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1010.val.u.expr);\n   else\n-    ffests_printf_1D (s, \"%ld\", f->u.R1010.val.u.signed_val);\n+    ffests_printf (s, \"%ld\", f->u.R1010.val.u.signed_val);\n \n   ffests_puts (s, string);\n }\n@@ -4776,7 +4772,7 @@ ffestd_R1001dump_1010_5_ (ffests s, ffesttFormatList f, const char *string)\n   if (f->u.R1010.val.rtexpr)\n     ffestd_R1001rtexpr_ (s, f, f->u.R1010.val.u.expr);\n   else\n-    ffests_printf_1U (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n+    ffests_printf (s, \"%lu\", f->u.R1010.val.u.unsigned_val);\n }\n \n /* ffestd_R1001error_ -- Complain about FORMAT specification not supported\n@@ -4836,7 +4832,7 @@ ffestd_R1001rtexpr_ (ffests s, ffesttFormatList f, ffebld expr)\n \tcase FFEINFO_kindtypeANY:\n \t  return;\n \t}\n-      ffests_printf_1D (s, \"%ld\", val);\n+      ffests_printf (s, \"%ld\", (long) val);\n     }\n }\n "}, {"sha": "0446daa57c582b3c5090d59eff2415d9a29b9aed", "filename": "gcc/f/ste.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "patch": "@@ -1279,7 +1279,7 @@ ffeste_io_ialist_ (bool have_err,\n   yes = suspend_momentary ();\n \n   t = build_decl (VAR_DECL,\n-\t\t  ffecom_get_invented_identifier (\"__g77_alist_%d\", NULL,\n+\t\t  ffecom_get_invented_identifier (\"__g77_alist_%d\",\n \t\t\t\t\t\t  mynumber++),\n \t\t  f2c_alist_struct);\n   TREE_STATIC (t) = 1;\n@@ -1495,7 +1495,7 @@ ffeste_io_cilist_ (bool have_err,\n   yes = suspend_momentary ();\n \n   t = build_decl (VAR_DECL,\n-\t\t  ffecom_get_invented_identifier (\"__g77_cilist_%d\", NULL,\n+\t\t  ffecom_get_invented_identifier (\"__g77_cilist_%d\",\n \t\t\t\t\t\t  mynumber++),\n \t\t  f2c_cilist_struct);\n   TREE_STATIC (t) = 1;\n@@ -1635,7 +1635,7 @@ ffeste_io_cllist_ (bool have_err,\n   yes = suspend_momentary ();\n \n   t = build_decl (VAR_DECL,\n-\t\t  ffecom_get_invented_identifier (\"__g77_cllist_%d\", NULL,\n+\t\t  ffecom_get_invented_identifier (\"__g77_cllist_%d\",\n \t\t\t\t\t\t  mynumber++),\n \t\t  f2c_close_struct);\n   TREE_STATIC (t) = 1;\n@@ -1853,7 +1853,7 @@ ffeste_io_icilist_ (bool have_err,\n   yes = suspend_momentary ();\n \n   t = build_decl (VAR_DECL,\n-\t\t  ffecom_get_invented_identifier (\"__g77_icilist_%d\", NULL,\n+\t\t  ffecom_get_invented_identifier (\"__g77_icilist_%d\",\n \t\t\t\t\t\t  mynumber++),\n \t\t  f2c_icilist_struct);\n   TREE_STATIC (t) = 1;\n@@ -2113,7 +2113,7 @@ ffeste_io_inlist_ (bool have_err,\n   yes = suspend_momentary ();\n \n   t = build_decl (VAR_DECL,\n-\t\t  ffecom_get_invented_identifier (\"__g77_inlist_%d\", NULL,\n+\t\t  ffecom_get_invented_identifier (\"__g77_inlist_%d\",\n \t\t\t\t\t\t  mynumber++),\n \t\t  f2c_inquire_struct);\n   TREE_STATIC (t) = 1;\n@@ -2302,7 +2302,7 @@ ffeste_io_olist_ (bool have_err,\n   yes = suspend_momentary ();\n \n   t = build_decl (VAR_DECL,\n-\t\t  ffecom_get_invented_identifier (\"__g77_olist_%d\", NULL,\n+\t\t  ffecom_get_invented_identifier (\"__g77_olist_%d\",\n \t\t\t\t\t\t  mynumber++),\n \t\t  f2c_open_struct);\n   TREE_STATIC (t) = 1;"}, {"sha": "63bf77aea77a4b0e9e4afae755b20f5efbcba90e", "filename": "gcc/f/sts.c", "status": "modified", "additions": 12, "deletions": 106, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fsts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fsts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsts.c?ref=14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "patch": "@@ -96,119 +96,25 @@ ffests_new (ffests s, mallocPool pool, ffestsLength size)\n     s->text_ = malloc_new_ksr (pool, \"ffests\", size);\n }\n \n-/* ffests_printf_1D -- printf(\"...%ld...\",(long)) to a string\n+/* ffests_printf -- printf (\"...%ld...\",(long)) to a string\n \n    ffests s;\n-   ffests_printf_1D(s,\"...%ld...\",1);\n+   ffests_printf (s,\"...%ld...\",1);\n \n    Like printf, but into a string.  */\n \n void\n-ffests_printf_1D (ffests s, const char *ctl, long arg1)\n+ffests_printf (ffests s, const char *ctl, ...)\n {\n-  char quickbuf[40];\n-  char *buff;\n-  ffestsLength len;\n-\n-  if ((len = strlen (ctl) + 21) < ARRAY_SIZE (quickbuf))\n-    /* No # bigger than 20 digits. */\n-    {\n-      sprintf (&quickbuf[0], ctl, arg1);\n-      ffests_puttext (s, &quickbuf[0], strlen (quickbuf));\n-    }\n-  else\n-    {\n-      buff = malloc_new_ks (malloc_pool_image (), \"ffests_printf_1D\", len);\n-      sprintf (buff, ctl, arg1);\n-      ffests_puttext (s, buff, strlen (buff));\n-      malloc_kill_ks (malloc_pool_image (), buff, len);\n-    }\n-}\n-\n-/* ffests_printf_1U -- printf(\"...%lu...\",(unsigned long)) to a string\n-\n-   ffests s;\n-   ffests_printf_1U(s,\"...%lu...\",1);\n-\n-   Like printf, but into a string.  */\n-\n-void\n-ffests_printf_1U (ffests s, const char *ctl, unsigned long arg1)\n-{\n-  char quickbuf[40];\n-  char *buff;\n-  ffestsLength len;\n-\n-  if ((len = strlen (ctl) + 21) < ARRAY_SIZE (quickbuf))\n-    /* No # bigger than 20 digits. */\n-    {\n-      sprintf (&quickbuf[0], ctl, arg1);\n-      ffests_puttext (s, &quickbuf[0], strlen (quickbuf));\n-    }\n-  else\n-    {\n-      buff = malloc_new_ks (malloc_pool_image (), \"ffests_printf_1U\", len);\n-      sprintf (buff, ctl, arg1);\n-      ffests_puttext (s, buff, strlen (buff));\n-      malloc_kill_ks (malloc_pool_image (), buff, len);\n-    }\n-}\n-\n-/* ffests_printf_1s -- printf(\"...%s...\",(char *)) to a string\n-\n-   ffests s;\n-   ffests_printf_1s(s,\"...%s...\",\"hi there!\");\n-\n-   Like printf, but into a string.  */\n-\n-void\n-ffests_printf_1s (ffests s, const char *ctl, const char *arg1)\n-{\n-  char quickbuf[40];\n-  char *buff;\n-  ffestsLength len;\n-\n-  if ((len = strlen (ctl) + strlen (arg1) - 1) < ARRAY_SIZE (quickbuf))\n-    {\n-      sprintf (&quickbuf[0], ctl, arg1);\n-      ffests_puttext (s, &quickbuf[0], strlen (quickbuf));\n-    }\n-  else\n-    {\n-      buff = malloc_new_ks (malloc_pool_image (), \"ffests_printf_1s\", len);\n-      sprintf (buff, ctl, arg1);\n-      ffests_puttext (s, buff, strlen (buff));\n-      malloc_kill_ks (malloc_pool_image (), buff, len);\n-    }\n-}\n-\n-/* ffests_printf_2Us -- printf(\"...%lu...%s...\",...) to a string\n-\n-   ffests s;\n-   ffests_printf_2Us(s,\"...%lu...%s...\",1,\"hi there!\");\n-\n-   Like printf, but into a string.  */\n-\n-void\n-ffests_printf_2Us (ffests s, const char *ctl, unsigned long arg1, const char *arg2)\n-{\n-  char quickbuf[60];\n-  char *buff;\n-  ffestsLength len;\n-\n-  if ((len = strlen (ctl) + 21 + strlen (arg2) - 1) < ARRAY_SIZE (quickbuf))\n-    /* No # bigger than 20 digits. */\n-    {\n-      sprintf (&quickbuf[0], ctl, arg1, arg2);\n-      ffests_puttext (s, &quickbuf[0], strlen (quickbuf));\n-    }\n-  else\n-    {\n-      buff = malloc_new_ks (malloc_pool_image (), \"ffests_printf_2Us\", len);\n-      sprintf (buff, ctl, arg1, arg2);\n-      ffests_puttext (s, buff, strlen (buff));\n-      malloc_kill_ks (malloc_pool_image (), buff, len);\n-    }\n+  char *string;\n+  va_list ap;\n+  \n+  va_start (ap, ctl);\n+  if (vasprintf (&string, ctl, ap) == 0)\n+    abort ();\n+  va_end (ap);\n+  ffests_puts (s, string);\n+  free (string);\n }\n \n /* ffests_putc -- Put a single character into string"}, {"sha": "e1448cdc5fb98e7e3de31590f42260705c282267", "filename": "gcc/f/sts.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fsts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14657de8f1fd8fff5cb3bed37d91267beea5e1f3/gcc%2Ff%2Fsts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fsts.h?ref=14657de8f1fd8fff5cb3bed37d91267beea5e1f3", "patch": "@@ -60,11 +60,7 @@ struct _ffests_\n \n void ffests_kill (ffests s);\n void ffests_new (ffests s, mallocPool pool, ffestsLength size);\n-void ffests_printf_1D (ffests s, const char *ctl, long arg1);\n-void ffests_printf_1U (ffests s, const char *ctl, unsigned long arg1);\n-void ffests_printf_1s (ffests s, const char *ctl, const char *arg1);\n-void ffests_printf_2Us (ffests s, const char *ctl, unsigned long arg1,\n-\t\t\tconst char *arg2);\n+void ffests_printf (ffests s, const char *ctl, ...) ATTRIBUTE_PRINTF_2;\n void ffests_putc (ffests s, char c);\n void ffests_puts (ffests s, const char *string);\n void ffests_puttext (ffests s, const char *text, ffestsLength length);"}]}