{"sha": "0bef9b8d880c9d6288e826c6526cf047bfe1ec27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlZjliOGQ4ODBjOWQ2Mjg4ZTgyNmM2NTI2Y2YwNDdiZmUxZWMyNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-06-27T23:30:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-06-27T23:30:37Z"}, "message": "jump.c (jump_optimize): Use side_effects_p & may_trap_p instead of rtx_unsafe_p.\n\n        * jump.c (jump_optimize): Use side_effects_p & may_trap_p instead\n        of rtx_unsafe_p.  Use modified_between_p instead of reg_set_between_p.\n        Allow FP moves to be optimized.\n        (rtx_unsafe_p): Delete.\n\nFrom-SVN: r20770", "tree": {"sha": "0e7d986620ce56a404b721daf98309fd65f06378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e7d986620ce56a404b721daf98309fd65f06378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bef9b8d880c9d6288e826c6526cf047bfe1ec27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bef9b8d880c9d6288e826c6526cf047bfe1ec27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bef9b8d880c9d6288e826c6526cf047bfe1ec27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bef9b8d880c9d6288e826c6526cf047bfe1ec27/comments", "author": null, "committer": null, "parents": [{"sha": "97a7f457da5b21ef6405afb4be94d93773649e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a7f457da5b21ef6405afb4be94d93773649e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a7f457da5b21ef6405afb4be94d93773649e89"}], "stats": {"total": 95, "additions": 14, "deletions": 81}, "files": [{"sha": "6aa4f957224a65e39b1f3f15bd1d3ed798d58b39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bef9b8d880c9d6288e826c6526cf047bfe1ec27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bef9b8d880c9d6288e826c6526cf047bfe1ec27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bef9b8d880c9d6288e826c6526cf047bfe1ec27", "patch": "@@ -1,3 +1,10 @@\n+Sat Jun 27 23:32:25 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* jump.c (jump_optimize): Use side_effects_p & may_trap_p instead\n+\tof rtx_unsafe_p.  Use modified_between_p instead of reg_set_between_p.\n+\tAllow FP moves to be optimized.\n+\t(rtx_unsafe_p): Delete.\n+\n Sat Jun 27 23:02:04 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* objc/archive.c: Remove <string.h> prototypes."}, {"sha": "6c38de8e66245918dd6eac11178f314022e05170", "filename": "gcc/jump.c", "status": "modified", "additions": 7, "deletions": 81, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bef9b8d880c9d6288e826c6526cf047bfe1ec27/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bef9b8d880c9d6288e826c6526cf047bfe1ec27/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=0bef9b8d880c9d6288e826c6526cf047bfe1ec27", "patch": "@@ -122,7 +122,6 @@ static void redirect_tablejump\t\tPROTO((rtx, rtx));\n #ifndef HAVE_cc0\n static rtx find_insert_position         PROTO((rtx, rtx));\n #endif\n-static int rtx_unsafe_p\t\t\tPROTO((rtx));\n \f\n /* Delete no-op jumps and optimize jumps to jumps\n    and jumps around jumps.\n@@ -773,7 +772,8 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && GET_CODE (temp2) == INSN\n \t      && (temp4 = single_set (temp2)) != 0\n \t      && rtx_equal_p (SET_DEST (temp4), temp1)\n-\t      && ! rtx_unsafe_p (SET_SRC (temp4))\n+\t      && ! side_effects_p (SET_SRC (temp4))\n+\t      && ! may_trap_p (SET_SRC (temp4))\n \t      && (REG_NOTES (temp2) == 0\n \t\t  || ((REG_NOTE_KIND (REG_NOTES (temp2)) == REG_EQUAL\n \t\t       || REG_NOTE_KIND (REG_NOTES (temp2)) == REG_EQUIV)\n@@ -910,11 +910,8 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && GET_CODE (temp3) == INSN\n \t      && (temp4 = single_set (temp3)) != 0\n \t      && rtx_equal_p (SET_DEST (temp4), temp1)\n-\t      && (GET_CODE (SET_SRC (temp4)) == REG\n-\t\t  || GET_CODE (SET_SRC (temp4)) == SUBREG\n-\t\t  || (GET_CODE (SET_SRC (temp4)) == MEM\n-\t\t      && RTX_UNCHANGING_P (SET_SRC (temp4)))\n-\t\t  || CONSTANT_P (SET_SRC (temp4)))\n+\t      && ! side_effects_p (SET_SRC (temp4))\n+\t      && ! may_trap_p (SET_SRC (temp4))\n \t      && (REG_NOTES (temp3) == 0\n \t\t  || ((REG_NOTE_KIND (REG_NOTES (temp3)) == REG_EQUAL\n \t\t       || REG_NOTE_KIND (REG_NOTES (temp3)) == REG_EQUIV)\n@@ -944,9 +941,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t  && ! reg_referenced_between_p (temp1, temp3,\n \t\t\t\t\t\t NEXT_INSN (temp2))\n \t\t  && ! reg_set_between_p (temp1, insert_after, temp)\n-\t\t  && (GET_CODE (SET_SRC (temp4)) == CONST_INT\n-\t\t      || ! reg_set_between_p (SET_SRC (temp4),\n-\t\t\t\t\t      insert_after, temp))\n+\t\t  && ! modified_between_p (SET_SRC (temp4), insert_after, temp)\n \t\t  && invert_jump (temp, JUMP_LABEL (insn)))\n \t\t{\n \t\t  emit_insn_after_with_line_notes (PATTERN (temp3),\n@@ -992,7 +987,6 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t      && JUMP_LABEL (temp2) == JUMP_LABEL (insn)))\n \t      && (temp1 = single_set (temp)) != 0\n \t      && (temp2 = SET_DEST (temp1), GET_CODE (temp2) == REG)\n-\t      && GET_MODE_CLASS (GET_MODE (temp2)) == MODE_INT\n \t      && (! SMALL_REGISTER_CLASSES\n \t\t  || REGNO (temp2) >= FIRST_PSEUDO_REGISTER)\n \t      && GET_CODE (SET_SRC (temp1)) != REG\n@@ -1159,7 +1153,8 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t      && GET_CODE (temp1 = SET_DEST (PATTERN (temp))) == REG\n \t      && (! SMALL_REGISTER_CLASSES\n \t\t  || REGNO (temp1) >= FIRST_PSEUDO_REGISTER)\n-\t      && ! rtx_unsafe_p (temp2 = SET_SRC (PATTERN (temp)))\n+\t      && ! side_effects_p (temp2 = SET_SRC (PATTERN (temp)))\n+\t      && ! may_trap_p (temp2)\n \t      /* Allow either form, but prefer the former if both apply. \n \t\t There is no point in using the old value of TEMP1 if\n \t\t it is a register, since cse will alias them.  It can\n@@ -4852,72 +4847,3 @@ find_insert_position (insn, new)\n   return reg_mentioned_p (SET_DEST (single_set (new)), prev) ? 0 : prev;\n }\n #endif /* !HAVE_cc0 */\n-\n-/* Return 1 if the value of X is unsafe to arbitrarily evaluate, i.e.\n-   might fault on some arguments.  This is used in connection with\n-   conditional move optimization.  */\n-\n-static int\n-rtx_unsafe_p (x)\n-     rtx x;\n-{\n-  register RTX_CODE code = GET_CODE (x);\n-  register int i;\n-  register char *fmt;\n-\n-  switch (code)\n-    {\n-    case MEM:\n-      return ! RTX_UNCHANGING_P (x);\n-\n-    case QUEUED:\n-      return 1;\n-\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_STRING:\n-    case CONST:\n-    case PC:\n-    case LABEL_REF:\n-    case SYMBOL_REF:\n-    case ADDRESSOF:\n-    case REG:\n-      return 0;\n-\n-    case DIV:\n-    case MOD:\n-    case UDIV:\n-    case UMOD:\n-    case SQRT:\n-      return 1;\n-\n-    default:\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n-\t  && !flag_fast_math\n-\t  && FLOAT_MODE_P (GET_MODE (x)))\n-\treturn 1;\n-\n-      switch (GET_RTX_CLASS (code))\n-\t{\n-\tcase '<':\n-\tcase '1':\n-\tcase '2':\n-\tcase '3':\n-\tcase 'c':\n-\tcase 'b':\n-\t  break;\n-\n-\tdefault:\n-\t  return 1;\n-\t}\n-      break;\n-    }\n-\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    if (fmt[i] == 'e')\n-      if (rtx_unsafe_p (XEXP (x, i)))\n-\treturn 1;\n-\n-  return 0;\n-}"}]}