{"sha": "2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIyNDg1NWUxZWZkMmNhYWQ3MmJmN2I2MTMyYTNiZTA5ODFjZGZlMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-28T18:21:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-28T18:21:06Z"}, "message": "re PR c++/17232 ([DR 1640] classes and class template specializations treated differently w.r.t. core issue #337)\n\n\tPR c++/17232\n\tPR c++/52748\n\t* typeck2.c (abstract_virtuals_error_sfinae): Don't complete\n\tthe type if tf_decltype is set.\n\t* pt.c (fn_type_unification): Add decltype_p parm.\n\t(get_bindings): Adjust.\n\t* cp-tree.h: Adjust.\n\t* class.c (resolve_address_of_overloaded_function): Adjust.\n\t* call.c (add_template_candidate_real, print_z_candidate): Adjust.\n\nFrom-SVN: r197214", "tree": {"sha": "b653fabcd551139e4fa8edf62c9316f0ab483238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b653fabcd551139e4fa8edf62c9316f0ab483238"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e44182eb3a89ef9cf0a51d2898d8f4111252d2"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "5375f01dda58c17af011af397fc3af4bf7f8c7d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "patch": "@@ -1,5 +1,15 @@\n 2013-03-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/17232\n+\tPR c++/52748\n+\t* typeck2.c (abstract_virtuals_error_sfinae): Don't complete\n+\tthe type if tf_decltype is set.\n+\t* pt.c (fn_type_unification): Add decltype_p parm.\n+\t(get_bindings): Adjust.\n+\t* cp-tree.h: Adjust.\n+\t* class.c (resolve_address_of_overloaded_function): Adjust.\n+\t* call.c (add_template_candidate_real, print_z_candidate): Adjust.\n+\n \tPR c++/56679\n \t* parser.c (cp_parser_sizeof_pack): Split out from...\n \t(cp_parser_sizeof_operand): ...here.  Require (id)."}, {"sha": "4542500315f27a72bc934a580e94adccc541692b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "patch": "@@ -2905,7 +2905,8 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n   fn = fn_type_unification (tmpl, explicit_targs, targs,\n \t\t\t    args_without_in_chrg,\n \t\t\t    nargs_without_in_chrg,\n-\t\t\t    return_type, strict, flags, false);\n+\t\t\t    return_type, strict, flags, false,\n+\t\t\t    complain & tf_decltype);\n \n   if (fn == error_mark_node)\n     {\n@@ -3221,7 +3222,7 @@ print_z_candidate (location_t loc, const char *msgstr,\n \t\t\t       r->u.template_unification.return_type,\n \t\t\t       r->u.template_unification.strict,\n \t\t\t       r->u.template_unification.flags,\n-\t\t\t       true);\n+\t\t\t       true, false);\n \t  break;\n \tcase rr_invalid_copy:\n \t  inform (cloc,"}, {"sha": "956d5aa9e27d870bcbf7ae9dd7c107120c5b9e09", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "patch": "@@ -7253,7 +7253,7 @@ resolve_address_of_overloaded_function (tree target_type,\n \t  instantiation = fn_type_unification (fn, explicit_targs, targs, args,\n \t\t\t\t\t      nargs, target_ret_type,\n \t\t\t\t\t      DEDUCE_EXACT, LOOKUP_NORMAL,\n-\t\t\t\t\t       false);\n+\t\t\t\t\t       false, false);\n \t  if (instantiation == error_mark_node)\n \t    /* Instantiation failed.  */\n \t    continue;"}, {"sha": "e1677160ff9131f12be25e6e39152dd90cdbf2db", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "patch": "@@ -5419,7 +5419,7 @@ extern tree instantiate_template\t\t(tree, tree, tsubst_flags_t);\n extern tree fn_type_unification\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t const tree *, unsigned int,\n \t\t\t\t\t\t tree, unification_kind_t, int,\n-\t\t\t\t\t\t bool);\n+\t\t\t\t\t\t bool, bool);\n extern void mark_decl_instantiated\t\t(tree, int);\n extern int more_specialized_fn\t\t\t(tree, tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);"}, {"sha": "27e3ff8720495f29debf4daa039857b59520908d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "patch": "@@ -14935,7 +14935,8 @@ fn_type_unification (tree fn,\n \t\t     tree return_type,\n \t\t     unification_kind_t strict,\n \t\t     int flags,\n-\t\t     bool explain_p)\n+\t\t     bool explain_p,\n+\t\t     bool decltype_p)\n {\n   tree parms;\n   tree fntype;\n@@ -14949,6 +14950,9 @@ fn_type_unification (tree fn,\n   tree tinst;\n   tree r = error_mark_node;\n \n+  if (decltype_p)\n+    complain |= tf_decltype;\n+\n   /* In C++0x, it's possible to have a function template whose type depends\n      on itself recursively.  This is most obvious with decltype, but can also\n      occur with enumeration scope (c++/48969).  So we need to catch infinite\n@@ -17626,7 +17630,8 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n \t\t\t   args, ix,\n \t\t\t   (check_rettype || DECL_CONV_FN_P (fn)\n \t\t\t    ? TREE_TYPE (decl_type) : NULL_TREE),\n-\t\t\t   DEDUCE_EXACT, LOOKUP_NORMAL, /*explain_p=*/false)\n+\t\t\t   DEDUCE_EXACT, LOOKUP_NORMAL, /*explain_p=*/false,\n+\t\t\t   /*decltype*/false)\n       == error_mark_node)\n     return NULL_TREE;\n "}, {"sha": "cf42958193a84baa4a21d769194d17617c08ea64", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "patch": "@@ -265,15 +265,15 @@ abstract_virtuals_error_sfinae (tree decl, tree type, abstract_class_use use,\n     return 0;\n   type = TYPE_MAIN_VARIANT (type);\n \n-  /* In SFINAE context, force instantiation.  */\n-  if (!(complain & tf_error))\n+  /* In SFINAE, non-N3276 context, force instantiation.  */\n+  if (!(complain & (tf_error|tf_decltype)))\n     complete_type (type);\n \n   /* If the type is incomplete, we register it within a hash table,\n      so that we can check again once it is completed. This makes sense\n      only for objects for which we have a declaration or at least a\n      name.  */\n-  if (!COMPLETE_TYPE_P (type))\n+  if (!COMPLETE_TYPE_P (type) && (complain & tf_error))\n     {\n       void **slot;\n       struct pending_abstract_type *pat;"}, {"sha": "ad2322090e2b7dd83f540d90e92d5fd90219e7ee", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-call2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b24855e1efd2caad72bf7b6132a3be0981cdfe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call2.C?ref=2b24855e1efd2caad72bf7b6132a3be0981cdfe3", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/52748\n+// We don't want to instantiate A<T> here.\n+// { dg-require-effective-target c++11 }\n+\n+template <class T> struct A: T { };\n+template <class T> A<T> f(T);\n+decltype(f(42)) *p;"}]}