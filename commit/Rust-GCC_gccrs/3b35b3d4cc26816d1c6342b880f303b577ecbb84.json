{"sha": "3b35b3d4cc26816d1c6342b880f303b577ecbb84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzNWIzZDRjYzI2ODE2ZDFjNjM0MmI4ODBmMzAzYjU3N2VjYmI4NA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-01-30T04:10:36Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-01-30T04:35:46Z"}, "message": "Handle CO_AWAIT_EXPR in conversion in co_await_expander.\n\nFunction co_await_expander expands CO_AWAIT_EXPR and inserts expanded\ncode before result of co_await is used, however, it doesn't cover the\ntype conversion case and leads to gimplify ICE.  This patch fixes it.\n\ngcc/cp\n    * coroutines.cc (co_await_expander): Handle type conversion case.\n\ngcc/testsuite\n    * g++.dg/coroutines/co-await-syntax-09-convert.C: New test.", "tree": {"sha": "d738593ac0d2e49e22d4143489b689e037e5ea67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d738593ac0d2e49e22d4143489b689e037e5ea67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b35b3d4cc26816d1c6342b880f303b577ecbb84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b35b3d4cc26816d1c6342b880f303b577ecbb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b35b3d4cc26816d1c6342b880f303b577ecbb84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b35b3d4cc26816d1c6342b880f303b577ecbb84/comments", "author": null, "committer": null, "parents": [{"sha": "66af5a226acd0edfbafcbcac76ed268cee0612ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66af5a226acd0edfbafcbcac76ed268cee0612ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66af5a226acd0edfbafcbcac76ed268cee0612ed"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "335652451bd8c2fa5bb0bfe057f88d42266f1e08", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b35b3d4cc26816d1c6342b880f303b577ecbb84", "patch": "@@ -1,3 +1,7 @@\n+2020-01-30  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* coroutines.cc (co_await_expander): Handle type conversion case.\n+\n 2020-01-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90333"}, {"sha": "7deb6f6e3e455f65643835cbdb5092db74b68d52", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=3b35b3d4cc26816d1c6342b880f303b577ecbb84", "patch": "@@ -1357,6 +1357,9 @@ co_await_expander (tree *stmt, int * /*do_subtree*/, void *d)\n \t\t\t\t &buried_stmt, NULL))\n \tsaved_co_await = r;\n     }\n+  else if ((stmt_code == CONVERT_EXPR || stmt_code == NOP_EXPR)\n+\t   && TREE_CODE (TREE_OPERAND (stripped_stmt, 0)) == CO_AWAIT_EXPR)\n+    saved_co_await = TREE_OPERAND (stripped_stmt, 0);\n \n   if (!saved_co_await)\n     return NULL_TREE;\n@@ -1514,6 +1517,11 @@ co_await_expander (tree *stmt, int * /*do_subtree*/, void *d)\n     default: /* not likely to work .. but... */\n       append_to_statement_list (resume_call, &stmt_list);\n       break;\n+    case CONVERT_EXPR:\n+    case NOP_EXPR:\n+      TREE_OPERAND (stripped_stmt, 0) = resume_call;\n+      append_to_statement_list (saved_statement, &stmt_list);\n+      break;\n     case INIT_EXPR:\n     case MODIFY_EXPR:\n     case CALL_EXPR:"}, {"sha": "30e804b2969dde88fe2db3b2b084144dc692d0c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b35b3d4cc26816d1c6342b880f303b577ecbb84", "patch": "@@ -1,3 +1,7 @@\n+2020-01-30  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* g++.dg/coroutines/co-await-syntax-09-convert.C: New test.\n+\n 2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92706\n@@ -946,7 +950,7 @@\n \t* gcc.target/i386/pr93319-1a.c: Don't include <stdio.h>.\n \t(test1): Replace printf with __builtin_printf.\n \n-2020-01-21  Bin Cheng  <bin.linux@linux.alibaba.com>\n+2020-01-21  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \t* g++.dg/coroutines/co-await-void_type.C: New test.\n "}, {"sha": "dde0bab00cfd6ae2a63932e4ca25399ef14f09ec", "filename": "gcc/testsuite/g++.dg/coroutines/co-await-syntax-09-convert.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-syntax-09-convert.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b35b3d4cc26816d1c6342b880f303b577ecbb84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-syntax-09-convert.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fco-await-syntax-09-convert.C?ref=3b35b3d4cc26816d1c6342b880f303b577ecbb84", "patch": "@@ -0,0 +1,23 @@\n+//  { dg-additional-options \"-std=c++17 -w\" }\n+\n+#include \"coro.h\"\n+\n+class mycoro {\n+public:\n+  class promise_type {\n+  public:\n+    std::suspend_always initial_suspend() const noexcept { return {}; }\n+    std::suspend_always final_suspend() const noexcept { return {}; }\n+    void unhandled_exception() noexcept { }\n+    mycoro get_return_object() { return mycoro{}; }\n+  };\n+};\n+\n+class await {\n+public:\n+  bool await_ready() const noexcept { return false; }\n+  bool await_suspend(std::coroutine_handle<>) noexcept {return true;}\n+  mycoro await_resume() { return mycoro{}; }\n+};\n+\n+mycoro foo(mycoro source) { (void) co_await await{}; }"}]}