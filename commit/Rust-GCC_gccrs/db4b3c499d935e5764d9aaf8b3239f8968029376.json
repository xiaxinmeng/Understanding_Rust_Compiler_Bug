{"sha": "db4b3c499d935e5764d9aaf8b3239f8968029376", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0YjNjNDk5ZDkzNWU1NzY0ZDlhYWY4YjMyMzlmODk2ODAyOTM3Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-24T09:24:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-24T09:24:35Z"}, "message": "[multiple changes]\n\n2011-10-24  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* gnat_ugn.texi: Document explicit use of XDECGNAT library.\n\n2011-10-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Build_Assignment): Add local constant N_Loc and\n\tupdate its uses.\n\t(Build_Discriminant_Assignments): Add local variable D_Loc and update\n\tits uses.\n\t(Build_Init_Statements): Add local variables Comp_Loc, Decl_Loc and\n\tVar_Loc and update their uses.\n\t(Build_Record_Init_Proc): Code reformatting.\n\t(Increment_Counter): Add formal parameter Loc.\n\t(Make_Counter): Add formal parameter Loc.\n\n2011-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_disp.adb (Covers_Some_Interface): Fix typo.\n\n2011-10-24  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cuprqu.adb, a-cbprqu.adb (Dequeue_Only_High_Priority):\n\tPredicate had wrong sense.\n\n2011-10-24  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications/Aspect_Test_Case):\n\tTranslate arguments in positional notation into pragma argument\n\tassociation arguments for the generated pragma.\n\n2011-10-24  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch5.adb: Fix minor typo.\n\n2011-10-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Is_Visible_Component): Refine predicate for\n\tthe case of a component reference in an instance body, when the\n\tenclosing type is private.\n\nFrom-SVN: r180369", "tree": {"sha": "1dc5fccd16a43a4b60f37dbb9057544ac4505cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dc5fccd16a43a4b60f37dbb9057544ac4505cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4b3c499d935e5764d9aaf8b3239f8968029376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4b3c499d935e5764d9aaf8b3239f8968029376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4b3c499d935e5764d9aaf8b3239f8968029376", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4b3c499d935e5764d9aaf8b3239f8968029376/comments", "author": null, "committer": null, "parents": [{"sha": "86f0e17adccb1d1f127d6e489ac1cf7a3bb2f517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f0e17adccb1d1f127d6e489ac1cf7a3bb2f517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f0e17adccb1d1f127d6e489ac1cf7a3bb2f517"}], "stats": {"total": 263, "additions": 194, "deletions": 69}, "files": [{"sha": "6eec150a7e2b6f27c4b89315aff8bd814b16e69c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -1,3 +1,44 @@\n+2011-10-24  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* gnat_ugn.texi: Document explicit use of XDECGNAT library.\n+\n+2011-10-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Assignment): Add local constant N_Loc and\n+\tupdate its uses.\n+\t(Build_Discriminant_Assignments): Add local variable D_Loc and update\n+\tits uses.\n+\t(Build_Init_Statements): Add local variables Comp_Loc, Decl_Loc and\n+\tVar_Loc and update their uses.\n+\t(Build_Record_Init_Proc): Code reformatting.\n+\t(Increment_Counter): Add formal parameter Loc.\n+\t(Make_Counter): Add formal parameter Loc.\n+\n+2011-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_disp.adb (Covers_Some_Interface): Fix typo.\n+\n+2011-10-24  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cuprqu.adb, a-cbprqu.adb (Dequeue_Only_High_Priority):\n+\tPredicate had wrong sense.\n+\n+2011-10-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications/Aspect_Test_Case):\n+\tTranslate arguments in positional notation into pragma argument\n+\tassociation arguments for the generated pragma.\n+\n+2011-10-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch5.adb: Fix minor typo.\n+\n+2011-10-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Is_Visible_Component): Refine predicate for\n+\tthe case of a component reference in an instance body, when the\n+\tenclosing type is private.\n+\n 2011-10-24  Sergey Rybin  <rybin@adacore.com frybin>\n \n \t* gnat_ugn.texi: For gnatelim, move the note about using the GNAT"}, {"sha": "ce2fd69fae7c39a62ce2fec239e26fa4c4333e52", "filename": "gcc/ada/a-cbprqu.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fa-cbprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fa-cbprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbprqu.adb?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -51,8 +51,31 @@ package body Ada.Containers.Bounded_Priority_Queues is\n          Success  : out Boolean)\n       is\n       begin\n+         --  This operation dequeues a high priority item if it exists in the\n+         --  queue. By \"high priority\" we mean an item whose priority is equal\n+         --  or greater than the value At_Least. The generic formal operation\n+         --  Before has the meaning \"has higher priority than\". To dequeue an\n+         --  item (meaning that we return True as our Success value), we need\n+         --  as our predicate the equivalent of \"has equal or higher priority\n+         --  than\", but we cannot say that directly, so we require some logical\n+         --  gymnastics to make it so.\n+\n+         --  If E is the element at the head of the queue, and symbol \">\"\n+         --  refers to the \"is higher priority than\" function Before, then we\n+         --  derive our predicate as follows:\n+\n+         --    original: P(E) >= At_Least\n+         --    same as:  not (P(E) < At_Least)\n+         --    same as:  not (At_Least > P(E))\n+         --    same as:  not Before (At_Least, P(E))\n+\n+         --  But that predicate needs to be true in order to successfully\n+         --  dequeue an item. If it's false, it means no item is dequeued, and\n+         --  we return False as the Success value.\n+\n          if List.Length = 0\n-           or else not Before (At_Least, Get_Priority (List.First_Element))\n+           or else Before (At_Least,\n+                           Get_Priority (List.Container.First_Element))\n          then\n             Success := False;\n             return;"}, {"sha": "4f6966dc13619e7d1616f7ff9b182cc12872894a", "filename": "gcc/ada/a-cuprqu.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fa-cuprqu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fa-cuprqu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cuprqu.adb?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -72,8 +72,29 @@ package body Ada.Containers.Unbounded_Priority_Queues is\n          Success  : out Boolean)\n       is\n       begin\n+         --  This operation dequeues a high priority item if it exists in the\n+         --  queue. By \"high priority\" we mean an item whose priority is equal\n+         --  or greater than the value At_Least. The generic formal operation\n+         --  Before has the meaning \"has higher priority than\". To dequeue an\n+         --  item (meaning that we return True as our Success value), we need\n+         --  as our predicate the equivalent of \"has equal or higher priority\n+         --  than\", but we cannot say that directly, so we require some logical\n+         --  gymnastics to make it so.\n+\n+         --  If E is the element at the head of the queue, and symbol \">\"\n+         --  refers to the \"is higher priority than\" function Before, then we\n+         --  derive our predicate as follows:\n+         --    original: P(E) >= At_Least\n+         --    same as:  not (P(E) < At_Least)\n+         --    same as:  not (At_Least > P(E))\n+         --    same as:  not Before (At_Least, P(E))\n+\n+         --  But that predicate needs to be true in order to successfully\n+         --  dequeue an item. If it's false, it means no item is dequeued, and\n+         --  we return False as the Success value.\n+\n          if List.Length = 0\n-           or else not Before (At_Least, Get_Priority (List.First.Element))\n+           or else Before (At_Least, Get_Priority (List.First.Element))\n          then\n             Success := False;\n             return;"}, {"sha": "1554723249176f0b0af3fd4c8c1ded2d802fe12b", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 65, "deletions": 57, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -1538,13 +1538,13 @@ package body Exp_Ch3 is\n    ----------------------------\n \n    procedure Build_Record_Init_Proc (N : Node_Id; Rec_Ent : Entity_Id) is\n-      Decls       : constant List_Id  := New_List;\n-      Discr_Map   : constant Elist_Id := New_Elmt_List;\n-      Counter     : Int := 0;\n-      Loc         : Source_Ptr := Sloc (N);\n-      Proc_Id     : Entity_Id;\n-      Rec_Type    : Entity_Id;\n-      Set_Tag     : Entity_Id := Empty;\n+      Decls     : constant List_Id  := New_List;\n+      Discr_Map : constant Elist_Id := New_Elmt_List;\n+      Loc       : constant Source_Ptr := Sloc (Rec_Ent);\n+      Counter   : Int := 0;\n+      Proc_Id   : Entity_Id;\n+      Rec_Type  : Entity_Id;\n+      Set_Tag   : Entity_Id := Empty;\n \n       function Build_Assignment (Id : Entity_Id; N : Node_Id) return List_Id;\n       --  Build an assignment statement which assigns the default expression\n@@ -1621,18 +1621,18 @@ package body Exp_Ch3 is\n       ----------------------\n \n       function Build_Assignment (Id : Entity_Id; N : Node_Id) return List_Id is\n-         Typ  : constant Entity_Id := Underlying_Type (Etype (Id));\n-         Exp  : Node_Id := N;\n-         Kind : Node_Kind := Nkind (N);\n-         Lhs  : Node_Id;\n-         Res  : List_Id;\n+         N_Loc : constant Source_Ptr := Sloc (N);\n+         Typ   : constant Entity_Id := Underlying_Type (Etype (Id));\n+         Exp   : Node_Id := N;\n+         Kind  : Node_Kind := Nkind (N);\n+         Lhs   : Node_Id;\n+         Res   : List_Id;\n \n       begin\n-         Loc := Sloc (N);\n          Lhs :=\n-           Make_Selected_Component (Loc,\n+           Make_Selected_Component (N_Loc,\n              Prefix        => Make_Identifier (Loc, Name_uInit),\n-             Selector_Name => New_Occurrence_Of (Id, Loc));\n+             Selector_Name => New_Occurrence_Of (Id, N_Loc));\n          Set_Assignment_OK (Lhs);\n \n          --  Case of an access attribute applied to the current instance.\n@@ -1653,9 +1653,9 @@ package body Exp_Ch3 is\n            and then Entity (Prefix (N)) = Rec_Type\n          then\n             Exp :=\n-              Make_Attribute_Reference (Loc,\n+              Make_Attribute_Reference (N_Loc,\n                 Prefix         =>\n-                  Make_Identifier (Loc, Name_uInit),\n+                  Make_Identifier (N_Loc, Name_uInit),\n                 Attribute_Name => Name_Unrestricted_Access);\n          end if;\n \n@@ -1681,21 +1681,21 @@ package body Exp_Ch3 is\n            and then Tagged_Type_Expansion\n          then\n             Append_To (Res,\n-              Make_Assignment_Statement (Loc,\n+              Make_Assignment_Statement (N_Loc,\n                 Name       =>\n-                  Make_Selected_Component (Loc,\n+                  Make_Selected_Component (N_Loc,\n                     Prefix        =>\n                       New_Copy_Tree (Lhs, New_Scope => Proc_Id),\n                     Selector_Name =>\n-                      New_Reference_To (First_Tag_Component (Typ), Loc)),\n+                      New_Reference_To (First_Tag_Component (Typ), N_Loc)),\n \n                 Expression =>\n                   Unchecked_Convert_To (RTE (RE_Tag),\n                     New_Reference_To\n                       (Node\n                         (First_Elmt\n                           (Access_Disp_Table (Underlying_Type (Typ)))),\n-                       Loc))));\n+                       N_Loc))));\n          end if;\n \n          --  Adjust the component if controlled except if it is an aggregate\n@@ -1729,6 +1729,7 @@ package body Exp_Ch3 is\n       procedure Build_Discriminant_Assignments (Statement_List : List_Id) is\n          Is_Tagged : constant Boolean := Is_Tagged_Type (Rec_Type);\n          D         : Entity_Id;\n+         D_Loc     : Source_Ptr;\n \n       begin\n          if Has_Discriminants (Rec_Type)\n@@ -1748,10 +1749,10 @@ package body Exp_Ch3 is\n                   null;\n \n                else\n-                  Loc := Sloc (D);\n+                  D_Loc := Sloc (D);\n                   Append_List_To (Statement_List,\n                     Build_Assignment (D,\n-                      New_Reference_To (Discriminal (D), Loc)));\n+                      New_Reference_To (Discriminal (D), D_Loc)));\n                end if;\n \n                Next_Discriminant (D);\n@@ -2458,6 +2459,7 @@ package body Exp_Ch3 is\n       function Build_Init_Statements (Comp_List : Node_Id) return List_Id is\n          Checks     : constant List_Id := New_List;\n          Actions    : List_Id   := No_List;\n+         Comp_Loc   : Source_Ptr;\n          Counter_Id : Entity_Id := Empty;\n          Decl       : Node_Id;\n          Has_POC    : Boolean;\n@@ -2466,11 +2468,11 @@ package body Exp_Ch3 is\n          Stmts      : List_Id;\n          Typ        : Entity_Id;\n \n-         procedure Increment_Counter;\n+         procedure Increment_Counter (Loc : Source_Ptr);\n          --  Generate an \"increment by one\" statement for the current counter\n          --  and append it to the list Stmts.\n \n-         procedure Make_Counter;\n+         procedure Make_Counter (Loc : Source_Ptr);\n          --  Create a new counter for the current component list. The routine\n          --  creates a new defining Id, adds an object declaration and sets\n          --  the Id generator for the next variant.\n@@ -2479,7 +2481,7 @@ package body Exp_Ch3 is\n          -- Increment_Counter --\n          -----------------------\n \n-         procedure Increment_Counter is\n+         procedure Increment_Counter (Loc : Source_Ptr) is\n          begin\n             --  Generate:\n             --    Counter := Counter + 1;\n@@ -2497,7 +2499,7 @@ package body Exp_Ch3 is\n          -- Make_Counter --\n          ------------------\n \n-         procedure Make_Counter is\n+         procedure Make_Counter (Loc : Source_Ptr) is\n          begin\n             --  Increment the Id generator\n \n@@ -2582,11 +2584,11 @@ package body Exp_Ch3 is\n \n          Decl := First_Non_Pragma (Component_Items (Comp_List));\n          while Present (Decl) loop\n-            Loc := Sloc (Decl);\n+            Comp_Loc := Sloc (Decl);\n             Build_Record_Checks\n               (Subtype_Indication (Component_Definition (Decl)), Checks);\n \n-            Id := Defining_Identifier (Decl);\n+            Id  := Defining_Identifier (Decl);\n             Typ := Etype (Id);\n \n             --  Leave any processing of per-object constrained component for\n@@ -2606,12 +2608,13 @@ package body Exp_Ch3 is\n                   if Is_CPP_Constructor_Call (Expression (Decl)) then\n                      Actions :=\n                        Build_Initialization_Call\n-                         (Loc,\n+                         (Comp_Loc,\n                           Id_Ref          =>\n-                            Make_Selected_Component (Loc,\n+                            Make_Selected_Component (Comp_Loc,\n                               Prefix        =>\n-                                Make_Identifier (Loc, Name_uInit),\n-                              Selector_Name => New_Occurrence_Of (Id, Loc)),\n+                                Make_Identifier (Comp_Loc, Name_uInit),\n+                              Selector_Name =>\n+                                New_Occurrence_Of (Id, Comp_Loc)),\n                           Typ             => Typ,\n                           In_Init_Proc    => True,\n                           Enclos_Type     => Rec_Type,\n@@ -2628,10 +2631,11 @@ package body Exp_Ch3 is\n                then\n                   Actions :=\n                     Build_Initialization_Call\n-                      (Loc,\n-                       Make_Selected_Component (Loc,\n-                         Prefix        => Make_Identifier (Loc, Name_uInit),\n-                         Selector_Name => New_Occurrence_Of (Id, Loc)),\n+                      (Comp_Loc,\n+                       Make_Selected_Component (Comp_Loc,\n+                         Prefix        =>\n+                           Make_Identifier (Comp_Loc, Name_uInit),\n+                         Selector_Name => New_Occurrence_Of (Id, Comp_Loc)),\n                        Typ,\n                        In_Init_Proc => True,\n                        Enclos_Type  => Rec_Type,\n@@ -2665,10 +2669,10 @@ package body Exp_Ch3 is\n                     and then Needs_Finalization (Typ)\n                   then\n                      if No (Counter_Id) then\n-                        Make_Counter;\n+                        Make_Counter (Comp_Loc);\n                      end if;\n \n-                     Increment_Counter;\n+                     Increment_Counter (Comp_Loc);\n                   end if;\n                end if;\n             end if;\n@@ -2724,14 +2728,15 @@ package body Exp_Ch3 is\n                              Corresponding_Concurrent_Type (Rec_Type);\n                Task_Decl : constant Node_Id := Parent (Task_Type);\n                Task_Def  : constant Node_Id := Task_Definition (Task_Decl);\n+               Decl_Loc  : Source_Ptr;\n                Ent       : Entity_Id;\n                Vis_Decl  : Node_Id;\n \n             begin\n                if Present (Task_Def) then\n                   Vis_Decl := First (Visible_Declarations (Task_Def));\n                   while Present (Vis_Decl) loop\n-                     Loc := Sloc (Vis_Decl);\n+                     Decl_Loc := Sloc (Vis_Decl);\n \n                      if Nkind (Vis_Decl) = N_Attribute_Definition_Clause then\n                         if Get_Attribute_Id (Chars (Vis_Decl)) =\n@@ -2741,18 +2746,19 @@ package body Exp_Ch3 is\n \n                            if Ekind (Ent) = E_Entry then\n                               Append_To (Stmts,\n-                                Make_Procedure_Call_Statement (Loc,\n+                                Make_Procedure_Call_Statement (Decl_Loc,\n                                   Name =>\n                                     New_Reference_To (RTE (\n-                                      RE_Bind_Interrupt_To_Entry), Loc),\n+                                      RE_Bind_Interrupt_To_Entry), Decl_Loc),\n                                   Parameter_Associations => New_List (\n-                                    Make_Selected_Component (Loc,\n+                                    Make_Selected_Component (Decl_Loc,\n                                       Prefix        =>\n-                                        Make_Identifier (Loc, Name_uInit),\n+                                        Make_Identifier (Decl_Loc, Name_uInit),\n                                       Selector_Name =>\n-                                        Make_Identifier (Loc, Name_uTask_Id)),\n+                                        Make_Identifier\n+                                         (Decl_Loc, Name_uTask_Id)),\n                                     Entry_Index_Expression\n-                                      (Loc, Ent, Empty, Task_Type),\n+                                      (Decl_Loc, Ent, Empty, Task_Type),\n                                     Expression (Vis_Decl))));\n                            end if;\n                         end if;\n@@ -2789,7 +2795,7 @@ package body Exp_Ch3 is\n          if Has_POC then\n             Decl := First_Non_Pragma (Component_Items (Comp_List));\n             while Present (Decl) loop\n-               Loc := Sloc (Decl);\n+               Comp_Loc := Sloc (Decl);\n                Id := Defining_Identifier (Decl);\n                Typ := Etype (Id);\n \n@@ -2798,10 +2804,11 @@ package body Exp_Ch3 is\n                then\n                   if Has_Non_Null_Base_Init_Proc (Typ) then\n                      Append_List_To (Stmts,\n-                       Build_Initialization_Call (Loc,\n-                         Make_Selected_Component (Loc,\n-                           Prefix        => Make_Identifier (Loc, Name_uInit),\n-                           Selector_Name => New_Occurrence_Of (Id, Loc)),\n+                       Build_Initialization_Call (Comp_Loc,\n+                         Make_Selected_Component (Comp_Loc,\n+                           Prefix        =>\n+                             Make_Identifier (Comp_Loc, Name_uInit),\n+                           Selector_Name => New_Occurrence_Of (Id, Comp_Loc)),\n                          Typ,\n                          In_Init_Proc => True,\n                          Enclos_Type  => Rec_Type,\n@@ -2814,10 +2821,10 @@ package body Exp_Ch3 is\n \n                      if Needs_Finalization (Typ) then\n                         if No (Counter_Id) then\n-                           Make_Counter;\n+                           Make_Counter (Comp_Loc);\n                         end if;\n \n-                        Increment_Counter;\n+                        Increment_Counter (Comp_Loc);\n                      end if;\n \n                   elsif Component_Needs_Simple_Initialization (Typ) then\n@@ -2836,15 +2843,16 @@ package body Exp_Ch3 is\n          if Present (Variant_Part (Comp_List)) then\n             declare\n                Variant_Alts : constant List_Id := New_List;\n+               Var_Loc      : Source_Ptr;\n                Variant      : Node_Id;\n \n             begin\n                Variant :=\n                  First_Non_Pragma (Variants (Variant_Part (Comp_List)));\n                while Present (Variant) loop\n-                  Loc := Sloc (Variant);\n+                  Var_Loc := Sloc (Variant);\n                   Append_To (Variant_Alts,\n-                    Make_Case_Statement_Alternative (Loc,\n+                    Make_Case_Statement_Alternative (Var_Loc,\n                       Discrete_Choices =>\n                         New_Copy_List (Discrete_Choices (Variant)),\n                       Statements =>\n@@ -2857,10 +2865,10 @@ package body Exp_Ch3 is\n                --  formal parameter of the initialization procedure.\n \n                Append_To (Stmts,\n-                 Make_Case_Statement (Loc,\n+                 Make_Case_Statement (Var_Loc,\n                    Expression =>\n                      New_Reference_To (Discriminal (\n-                       Entity (Name (Variant_Part (Comp_List)))), Loc),\n+                       Entity (Name (Variant_Part (Comp_List)))), Var_Loc),\n                    Alternatives => Variant_Alts));\n             end;\n          end if;"}, {"sha": "971d0ad65d2e65dadf8f7768233d19dacf5b96c3", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -3460,7 +3460,7 @@ package body Exp_Ch5 is\n                    End_Label => End_Label (N)));\n \n                --  The loop parameter's entity must be removed from the loop\n-               --  scope's entity list, since itw will now be located in the\n+               --  scope's entity list, since it will now be located in the\n                --  new block scope. Any other entities already associated with\n                --  the loop scope, such as the loop parameter's subtype, will\n                --  remain there."}, {"sha": "abf8093a8ed6416a69131f55e5b6efcf767ce08d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -21143,6 +21143,13 @@ On OpenVMS Alpha, HP Ada provides the following strongly-typed bindings:\n GNAT provides implementations of these HP bindings in the @code{DECLIB}\n directory, on both the Alpha and I64 OpenVMS platforms.\n \n+The X components of DECLIB compatibility package are located in a separate\n+library, called XDECGNAT, which is not linked with by default; this library\n+must be explicitly linked with any application that makes use of any X facilities,\n+with a command similar to\n+\n+@code{GNAT MAKE USE_X /LINK /LIBRARY=XDECGNAT}\n+\n The X/Motif bindings used to build @code{DECLIB} are whatever versions are\n in the\n HP Ada @file{ADA$PREDEFINED} directory with extension @file{.ADC}."}, {"sha": "d30ba09635d826b5229ae648dd9551f6d5f45cbb", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -1403,7 +1403,10 @@ package body Sem_Ch13 is\n \n                   Comp_Expr := First (Expressions (Expr));\n                   while Present (Comp_Expr) loop\n-                     Append (Relocate_Node (Comp_Expr), Args);\n+                     Append\n+                       (Make_Pragma_Argument_Association (Sloc (Comp_Expr),\n+                          Expression => Relocate_Node (Comp_Expr)),\n+                       Args);\n                      Next (Comp_Expr);\n                   end loop;\n "}, {"sha": "98a032f425d139706a102eff9ddfb57c46966e35", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -16178,20 +16178,42 @@ package body Sem_Ch3 is\n       elsif not Comes_From_Source (Original_Comp) then\n          return True;\n \n-      --  If we are in the body of an instantiation, the component is visible\n-      --  even when the parent type (possibly defined in an enclosing unit or\n-      --  in a parent unit) might not.\n-\n-      elsif In_Instance_Body then\n-         return True;\n-\n       --  Discriminants are always visible\n \n       elsif Ekind (Original_Comp) = E_Discriminant\n         and then not Has_Unknown_Discriminants (Original_Scope)\n       then\n          return True;\n \n+      --  If we are in the body of an instantiation, the component is visible\n+      --  if the parent type is non-private, or in  an enclosing scope. The\n+      --  scope stack is not present when analyzing an instance body, so we\n+      --  must inspect the chain of scopes explicitly.\n+\n+      elsif In_Instance_Body then\n+         if not Is_Private_Type (Scope (C)) then\n+            return True;\n+\n+         else\n+            declare\n+               S : Entity_Id;\n+\n+            begin\n+               S := Current_Scope;\n+               while Present (S)\n+                 and then S /= Standard_Standard\n+               loop\n+                  if S = Type_Scope then\n+                     return True;\n+                  end if;\n+\n+                  S := Scope (S);\n+               end loop;\n+\n+               return False;\n+            end;\n+         end if;\n+\n       --  If the component has been declared in an ancestor which is currently\n       --  a private type, then it is not visible. The same applies if the\n       --  component's containing type is not in an open scope and the original"}, {"sha": "c4dd8ede6baa75a4cbda1e131d7f56efca0c9faf", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4b3c499d935e5764d9aaf8b3239f8968029376/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=db4b3c499d935e5764d9aaf8b3239f8968029376", "patch": "@@ -160,7 +160,7 @@ package body Sem_Disp is\n                   while Present (Elmt) loop\n                      Iface_Prim := Node (Elmt);\n \n-                     if Chars (E) = Chars (Prim)\n+                     if Chars (Iface) = Chars (Prim)\n                        and then Is_Interface_Conformant\n                                   (Tagged_Type, Iface_Prim, Prim)\n                      then"}]}