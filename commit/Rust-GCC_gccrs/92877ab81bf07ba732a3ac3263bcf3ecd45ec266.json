{"sha": "92877ab81bf07ba732a3ac3263bcf3ecd45ec266", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4NzdhYjgxYmYwN2JhNzMyYTNhYzMyNjNiY2YzZWNkNDVlYzI2Ng==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T05:09:59Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T05:23:42Z"}, "message": "Use irange API in test_for_singularity.\n\ngcc/ChangeLog:\n\n\t* vr-values.c (test_for_singularity): Use irange API.\n\t(simplify_using_ranges::simplify_cond_using_ranges_1): Do not\n\tspecial case VR_RANGE.", "tree": {"sha": "d77ccd8dc87b8599bd32ec818afa6872e959c9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d77ccd8dc87b8599bd32ec818afa6872e959c9c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92877ab81bf07ba732a3ac3263bcf3ecd45ec266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92877ab81bf07ba732a3ac3263bcf3ecd45ec266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92877ab81bf07ba732a3ac3263bcf3ecd45ec266", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92877ab81bf07ba732a3ac3263bcf3ecd45ec266/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01aa5fcad27f87af833a003cf7b014bf9627e48c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01aa5fcad27f87af833a003cf7b014bf9627e48c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01aa5fcad27f87af833a003cf7b014bf9627e48c"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "e78b25596b0b23efd7aa7b29042335c03a52e394", "filename": "gcc/vr-values.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92877ab81bf07ba732a3ac3263bcf3ecd45ec266/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92877ab81bf07ba732a3ac3263bcf3ecd45ec266/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=92877ab81bf07ba732a3ac3263bcf3ecd45ec266", "patch": "@@ -3480,10 +3480,13 @@ test_for_singularity (enum tree_code cond_code, tree op0,\n      value range information we have for op0.  */\n   if (min && max)\n     {\n-      if (compare_values (vr->min (), min) == 1)\n-\tmin = vr->min ();\n-      if (compare_values (vr->max (), max) == -1)\n-\tmax = vr->max ();\n+      tree type = TREE_TYPE (op0);\n+      tree tmin = wide_int_to_tree (type, vr->lower_bound ());\n+      tree tmax = wide_int_to_tree (type, vr->upper_bound ());\n+      if (compare_values (tmin, min) == 1)\n+\tmin = tmin;\n+      if (compare_values (tmax, max) == -1)\n+\tmax = tmax;\n \n       /* If the new min/max values have converged to a single value,\n \t then there is only one value which can satisfy the condition,\n@@ -3594,7 +3597,7 @@ simplify_using_ranges::simplify_cond_using_ranges_1 (gcond *stmt)\n \n       /* If we have range information for OP0, then we might be\n \t able to simplify this conditional. */\n-      if (vr->kind () == VR_RANGE)\n+      if (!vr->undefined_p () && !vr->varying_p ())\n \t{\n \t  tree new_tree = test_for_singularity (cond_code, op0, op1, vr);\n \t  if (new_tree)"}]}