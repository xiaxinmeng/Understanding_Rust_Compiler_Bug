{"sha": "68c2e9e9234cb301e9e81792cad233a41e797792", "node_id": "C_kwDOANBUbNoAKDY4YzJlOWU5MjM0Y2IzMDFlOWU4MTc5MmNhZDIzM2E0MWU3OTc3OTI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-06T13:54:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-10T12:18:14Z"}, "message": "libstdc++: Fix and simplify freestanding configuration [PR103866]\n\nThis fixes the --disable-hosted-libstdcxx build so that it works with\n--without-headers. Currently you need to also use --with-newlib, which\nis confusing for users who aren't actually using newlib.\n\nThe AM_PROG_LIBTOOL checks are currently skipped for --with-newlib and\n--with-avrlibc builds, with this change they are also skipped when using\n--without-headers.  It would be nice if using --disable-hosted-libstdcxx\nautomatically skipped those checks, but GLIBCXX_ENABLE_HOSTED comes too\nlate to make the AM_PROG_LIBTOOL checks depend on $is_hosted.\n\nThe checks for EOF, SEEK_CUR etc. cause the build to fail if there is no\n<stdio.h> available.  Unlike most headers, which get a HAVE_FOO_H macro,\n<stdio.h> is in autoconf's default includes, so every check tries to\ninclude it unconditionally. This change skips those checks for\nfreestanding builds.\n\nSimilarly, the checks for <stdint.h> types done by GCC_HEADER_STDINT try\nto include <stdio.h> and fail for --without-headers builds. This change\nskips the use of GCC_HEADER_STDINT for freestanding. We can probably\nstop using GCC_HEADER_STDINT entirely, since only one file uses the\ngstdint.h header that is generated, and that could easily be changed to\nuse <stdint.h> instead. That can wait for stage 1.\n\nWe also need to skip the GLIBCXX_CROSSCONFIG stage if --without-headers\nwas used, since we don't have any of the functions it deals with.\n\nThe end result of the changes above is that it should not be necessary\nfor a --disable-hosted-libstdcxx --without-headers build to also use\n--with-newlib.\n\nFinally, compile libsupc++ with -ffreestanding when --without-headers is\nused, so that <stdint.h> will use <gcc-stdint.h> instead of expecting it\nto come from libc.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103866\n\t* acinclude.m4 (GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS): Do\n\tnothing for freestanding builds.\n\t(GLIBCXX_ENABLE_HOSTED): Define FREESTANDING_FLAGS.\n\t* configure.ac: Do not use AC_LIBTOOL_DLOPEN when configured\n\twith --without-headers.  Do not use GCC_HEADER_STDINT for\n\tfreestanding builds.\n\t* libsupc++/Makefile.am (HOSTED_CXXFLAGS): Use -ffreestanding\n\tfor freestanding builds.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* doc/Makefile.in: Regenerate.\n\t* include/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* po/Makefile.in: Regenerate.\n\t* python/Makefile.in: Regenerate.\n\t* src/Makefile.in: Regenerate.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++17/Makefile.in: Regenerate.\n\t* src/c++20/Makefile.in: Regenerate.\n\t* src/c++98/Makefile.in: Regenerate.\n\t* src/filesystem/Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.", "tree": {"sha": "2509b991e1905d0c30a30bbecdc8105e091e7739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2509b991e1905d0c30a30bbecdc8105e091e7739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c2e9e9234cb301e9e81792cad233a41e797792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c2e9e9234cb301e9e81792cad233a41e797792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c2e9e9234cb301e9e81792cad233a41e797792", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c2e9e9234cb301e9e81792cad233a41e797792/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54dda45f9acc96f9898b0ed514d7cc1020dd7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54dda45f9acc96f9898b0ed514d7cc1020dd7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54dda45f9acc96f9898b0ed514d7cc1020dd7a4"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "150e4d080517e18e7090d35ff405078101a0cce3", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -240,6 +240,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "b770d5bcdc4e8ee8b5df63981be702210a5b19e0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -2081,6 +2081,7 @@ dnl Compute the EOF, SEEK_CUR, and SEEK_END integer constants.\n dnl\n AC_DEFUN([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS], [\n \n+if test \"$is_hosted\" = yes; then\n   AC_CACHE_CHECK([for the value of EOF], glibcxx_cv_stdio_eof, [\n   AC_COMPUTE_INT([glibcxx_cv_stdio_eof], [[EOF]],\n \t\t [#include <stdio.h>],\n@@ -2104,6 +2105,7 @@ AC_DEFUN([GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS], [\n   ])\n   AC_DEFINE_UNQUOTED(_GLIBCXX_STDIO_SEEK_END, $glibcxx_cv_stdio_seek_end,\n \t\t     [Define to the value of the SEEK_END integer constant.])\n+fi\n ])\n \n dnl\n@@ -2923,19 +2925,25 @@ AC_DEFUN([GLIBCXX_ENABLE_HOSTED], [\n \t    enable_hosted_libstdcxx=yes\n \t    ;;\n      esac])\n+  freestanding_flags=\n   if test \"$enable_hosted_libstdcxx\" = no; then\n     AC_MSG_NOTICE([Only freestanding libraries will be built])\n     is_hosted=no\n     hosted_define=0\n     enable_abi_check=no\n     enable_libstdcxx_pch=no\n+    if test \"x$with_headers\" = xno; then\n+      freestanding_flags=\"-ffreestanding\"\n+    fi\n   else\n     is_hosted=yes\n     hosted_define=1\n   fi\n   GLIBCXX_CONDITIONAL(GLIBCXX_HOSTED, test $is_hosted = yes)\n   AC_DEFINE_UNQUOTED(_GLIBCXX_HOSTED, $hosted_define,\n     [Define to 1 if a full hosted library is built, or 0 if freestanding.])\n+  FREESTANDING_FLAGS=\"$freestanding_flags\"\n+  AC_SUBST(FREESTANDING_FLAGS)\n ])\n \n "}, {"sha": "0f29186374731192e666d8f4caa0c1926f8619b9", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -771,6 +771,7 @@ thread_header\n glibcxx_PCHFLAGS\n GLIBCXX_BUILD_PCH_FALSE\n GLIBCXX_BUILD_PCH_TRUE\n+FREESTANDING_FLAGS\n GLIBCXX_HOSTED_FALSE\n GLIBCXX_HOSTED_TRUE\n glibcxx_compiler_shared_flag\n@@ -5949,7 +5950,9 @@ $as_echo \"$as_me: OS config directory is $os_include_dir\" >&6;}\n \n \n # Libtool setup.\n-if test \"x${with_newlib}\" != \"xyes\" && test \"x${with_avrlibc}\" != \"xyes\"; then\n+if test \"x${with_newlib}\" != \"xyes\" &&\n+    test \"x${with_avrlibc}\" != \"xyes\" &&\n+    test \"x$with_headers\" != \"xno\"; then\n   enable_dlopen=yes\n \n \n@@ -12176,7 +12179,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12179 \"configure\"\n+#line 12182 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12282,7 +12285,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12285 \"configure\"\n+#line 12288 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15623,13 +15626,17 @@ else\n      esac\n fi\n \n+  freestanding_flags=\n   if test \"$enable_hosted_libstdcxx\" = no; then\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: Only freestanding libraries will be built\" >&5\n $as_echo \"$as_me: Only freestanding libraries will be built\" >&6;}\n     is_hosted=no\n     hosted_define=0\n     enable_abi_check=no\n     enable_libstdcxx_pch=no\n+    if test \"x$with_headers\" = xno; then\n+      freestanding_flags=\"-ffreestanding\"\n+    fi\n   else\n     is_hosted=yes\n     hosted_define=1\n@@ -15640,6 +15647,8 @@ cat >>confdefs.h <<_ACEOF\n #define _GLIBCXX_HOSTED $hosted_define\n _ACEOF\n \n+  FREESTANDING_FLAGS=\"$freestanding_flags\"\n+\n \n \n # Enable descriptive messages to standard output on termination.\n@@ -15960,7 +15969,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15963 \"configure\"\n+#line 15972 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15995,7 +16004,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15998 \"configure\"\n+#line 16007 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -16030,7 +16039,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16033 \"configure\"\n+#line 16042 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16066,7 +16075,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16069 \"configure\"\n+#line 16078 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16219,7 +16228,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16222 \"configure\"\n+#line 16231 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16261,7 +16270,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n   cat > conftest.$ac_ext << EOF\n-#line 16264 \"configure\"\n+#line 16273 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -20183,6 +20192,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n # For the EOF, SEEK_CUR, and SEEK_END integer constants.\n \n \n+if test \"$is_hosted\" = yes; then\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for the value of EOF\" >&5\n $as_echo_n \"checking for the value of EOF... \" >&6; }\n if ${glibcxx_cv_stdio_eof+:} false; then :\n@@ -20248,6 +20258,7 @@ cat >>confdefs.h <<_ACEOF\n #define _GLIBCXX_STDIO_SEEK_END $glibcxx_cv_stdio_seek_end\n _ACEOF\n \n+fi\n \n \n # For gettimeofday support.\n@@ -29129,7 +29140,7 @@ else\n \n     $as_echo \"#define HAVE_MEMALIGN 1\" >>confdefs.h\n \n-  else\n+  elif test \"x$with_headers\" != \"xno\"; then\n \n # Base decisions on target environment.\n case \"${host}\" in\n@@ -74203,6 +74214,9 @@ $as_echo \"#define HAVE_LINUX_FUTEX 1\" >>confdefs.h\n fi\n \n \n+if test \"$is_hosted\" = yes; then\n+# TODO: remove this and change src/c++11/compatibility-atomic-c++0x.cc to\n+# use <stdint.h> instead of <gstdint.h>.\n \n \n inttype_headers=`echo inttypes.h sys/inttypes.h  | sed -e 's/,/ /g'`\n@@ -74604,6 +74618,7 @@ ac_config_commands=\"$ac_config_commands include/gstdint.h\"\n \n \n \n+fi\n \n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for GNU c++filt\" >&5"}, {"sha": "827d770f444bd65b4e3b40feb5ff07bcc540501b", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -90,7 +90,9 @@ AC_SYS_LARGEFILE\n GLIBCXX_CONFIGURE\n \n # Libtool setup.\n-if test \"x${with_newlib}\" != \"xyes\" && test \"x${with_avrlibc}\" != \"xyes\"; then\n+if test \"x${with_newlib}\" != \"xyes\" &&\n+    test \"x${with_avrlibc}\" != \"xyes\" &&\n+    test \"x$with_headers\" != \"xno\"; then\n   AC_LIBTOOL_DLOPEN\n fi\n AM_PROG_LIBTOOL\n@@ -351,7 +353,7 @@ else\n \n     AC_DEFINE(HAVE_ICONV)\n     AC_DEFINE(HAVE_MEMALIGN)\n-  else\n+  elif test \"x$with_headers\" != \"xno\"; then\n     GLIBCXX_CROSSCONFIG\n   fi\n \n@@ -390,7 +392,11 @@ GCC_CHECK_UNWIND_GETIPINFO\n \n GCC_LINUX_FUTEX([AC_DEFINE(HAVE_LINUX_FUTEX, 1, [Define if futex syscall is available.])])\n \n+if test \"$is_hosted\" = yes; then\n+# TODO: remove this and change src/c++11/compatibility-atomic-c++0x.cc to\n+# use <stdint.h> instead of <gstdint.h>.\n GCC_HEADER_STDINT(include/gstdint.h)\n+fi\n \n GLIBCXX_ENABLE_SYMVERS([yes])\n AC_SUBST(libtool_VERSION)"}, {"sha": "443d29192adecec87a049a54e9007dbb4578890b", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -199,6 +199,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "0031f54f3fab14697a1d75c0539716ea2f6cc4e8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -199,6 +199,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "65b5c1a87fd5fb18bbb09b25a90493e32641615a", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -139,7 +139,7 @@ atomicity.cc: ${atomicity_file}\n # as the occasion call for it.\n AM_CXXFLAGS = \\\n \t$(glibcxx_lt_pic_flag) $(glibcxx_compiler_shared_flag) \\\n-\t$(XTEMPLATE_FLAGS) \\\n+\t$(XTEMPLATE_FLAGS) $(FREESTANDING_FLAGS) \\\n \t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS)  $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\"}, {"sha": "5cbbf994d1a7ef9b3c4d00f4e4a786c59291f2e4", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -308,6 +308,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@\n@@ -579,7 +580,7 @@ atomicity_file = ${glibcxx_srcdir}/$(ATOMICITY_SRCDIR)/atomicity.h\n # as the occasion call for it.\n AM_CXXFLAGS = \\\n \t$(glibcxx_lt_pic_flag) $(glibcxx_compiler_shared_flag) \\\n-\t$(XTEMPLATE_FLAGS) \\\n+\t$(XTEMPLATE_FLAGS) $(FREESTANDING_FLAGS) \\\n \t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS)  $(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\"}, {"sha": "0d29364c67b070e6cfecabd13f9bedcc97f96594", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -199,6 +199,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "07b5807323e9f17fd567fed7a9f14a6546f53fa9", "filename": "libstdc++-v3/python/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -229,6 +229,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "fa4b243bd23719b6b9f13ed4367f998f06e186d1", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -298,6 +298,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "d20d1ed02163d38903fd5903d420c6cc6c999031", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -265,6 +265,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "83d8490a47a80a76e16dbacf2ec15836bf893759", "filename": "libstdc++-v3/src/c++17/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -245,6 +245,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "5f0acb4814043316465baaaf6530d902b89e2e98", "filename": "libstdc++-v3/src/c++20/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -240,6 +240,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "12c6f2d4c4d5e7765a0af79abd0250b2d5f71191", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -261,6 +261,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "e0693b194c2e74cc16f613fbd640f7bc12f61822", "filename": "libstdc++-v3/src/filesystem/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -269,6 +269,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}, {"sha": "b442dfe5f20b701cef377f55927f497ed4d0c6a8", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c2e9e9234cb301e9e81792cad233a41e797792/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=68c2e9e9234cb301e9e81792cad233a41e797792", "patch": "@@ -199,6 +199,7 @@ EXEEXT = @EXEEXT@\n EXTRA_CFLAGS = @EXTRA_CFLAGS@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n+FREESTANDING_FLAGS = @FREESTANDING_FLAGS@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n GLIBCXX_LIBS = @GLIBCXX_LIBS@\n GREP = @GREP@"}]}