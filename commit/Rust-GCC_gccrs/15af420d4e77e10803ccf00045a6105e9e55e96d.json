{"sha": "15af420d4e77e10803ccf00045a6105e9e55e96d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVhZjQyMGQ0ZTc3ZTEwODAzY2NmMDAwNDVhNjEwNWU5ZTU1ZTk2ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-01-11T19:44:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-01-11T19:44:40Z"}, "message": "re PR middle-end/31309 (reads/writes past end of structure)\n\n\tPR middle-end/31309\n\t* expr.c (copy_blkmode_from_reg): Use a mode suited to the size when\n\tcopying to memory.\n\nFrom-SVN: r131472", "tree": {"sha": "19b4cbebe59bce23ad654fc3115c3048cc3cefea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19b4cbebe59bce23ad654fc3115c3048cc3cefea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15af420d4e77e10803ccf00045a6105e9e55e96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15af420d4e77e10803ccf00045a6105e9e55e96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15af420d4e77e10803ccf00045a6105e9e55e96d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15af420d4e77e10803ccf00045a6105e9e55e96d/comments", "author": null, "committer": null, "parents": [{"sha": "31bfe0341f36e1bfc3dca5bce33e81491f912cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bfe0341f36e1bfc3dca5bce33e81491f912cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31bfe0341f36e1bfc3dca5bce33e81491f912cdf"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "bfb1ef03dc5573b27620dbd3c8a8d2f49f13e1be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15af420d4e77e10803ccf00045a6105e9e55e96d", "patch": "@@ -1,3 +1,9 @@\n+2008-01-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/31309\n+\t* expr.c (copy_blkmode_from_reg): Use a mode suited to the size\n+\twhen copying to memory.\n+\n 2008-01-11  Steven Bosscher  <stevenb.gcc@gmail.com>\n \n \tPR rtl-optimization/30905"}, {"sha": "84dab2f4871cb2c325a3f24d5c8bef7e5704e900", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=15af420d4e77e10803ccf00045a6105e9e55e96d", "patch": "@@ -2116,6 +2116,7 @@ copy_blkmode_from_reg (rtx tgtblk, rtx srcreg, tree type)\n   rtx src = NULL, dst = NULL;\n   unsigned HOST_WIDE_INT bitsize = MIN (TYPE_ALIGN (type), BITS_PER_WORD);\n   unsigned HOST_WIDE_INT bitpos, xbitpos, padding_correction = 0;\n+  enum machine_mode copy_mode;\n \n   if (tgtblk == 0)\n     {\n@@ -2149,11 +2150,23 @@ copy_blkmode_from_reg (rtx tgtblk, rtx srcreg, tree type)\n     padding_correction\n       = (BITS_PER_WORD - ((bytes % UNITS_PER_WORD) * BITS_PER_UNIT));\n \n-  /* Copy the structure BITSIZE bites at a time.\n+  /* Copy the structure BITSIZE bits at a time.  If the target lives in\n+     memory, take care of not reading/writing past its end by selecting\n+     a copy mode suited to BITSIZE.  This should always be possible given\n+     how it is computed.\n \n      We could probably emit more efficient code for machines which do not use\n      strict alignment, but it doesn't seem worth the effort at the current\n      time.  */\n+\n+  copy_mode = word_mode;\n+  if (MEM_P (tgtblk))\n+    {\n+      enum machine_mode mem_mode = mode_for_size (bitsize, MODE_INT, 1);\n+      if (mem_mode != BLKmode)\n+\tcopy_mode = mem_mode;\n+    }\n+\n   for (bitpos = 0, xbitpos = padding_correction;\n        bitpos < bytes * BITS_PER_UNIT;\n        bitpos += bitsize, xbitpos += bitsize)\n@@ -2172,11 +2185,11 @@ copy_blkmode_from_reg (rtx tgtblk, rtx srcreg, tree type)\n \tdst = operand_subword (tgtblk, bitpos / BITS_PER_WORD, 1, BLKmode);\n \n       /* Use xbitpos for the source extraction (right justified) and\n-\t xbitpos for the destination store (left justified).  */\n-      store_bit_field (dst, bitsize, bitpos % BITS_PER_WORD, word_mode,\n+\t bitpos for the destination store (left justified).  */\n+      store_bit_field (dst, bitsize, bitpos % BITS_PER_WORD, copy_mode,\n \t\t       extract_bit_field (src, bitsize,\n \t\t\t\t\t  xbitpos % BITS_PER_WORD, 1,\n-\t\t\t\t\t  NULL_RTX, word_mode, word_mode));\n+\t\t\t\t\t  NULL_RTX, copy_mode, copy_mode));\n     }\n \n   return tgtblk;"}, {"sha": "fd208664ef5256aebf98c2f26e6b30477f0dd16c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15af420d4e77e10803ccf00045a6105e9e55e96d", "patch": "@@ -1,3 +1,7 @@\n+2008-01-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/struct-ret-3.c: New test.\n+\n 2008-01-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34537"}, {"sha": "0b47d40768b121de2badbb5416633e5c4ed46fa7", "filename": "gcc/testsuite/gcc.dg/struct-ret-3.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-ret-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15af420d4e77e10803ccf00045a6105e9e55e96d/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-ret-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct-ret-3.c?ref=15af420d4e77e10803ccf00045a6105e9e55e96d", "patch": "@@ -0,0 +1,93 @@\n+/* PR middle-end/31309 */\n+/* Origin: Peeter Joot <peeterj@ca.ibm.com> */\n+\n+/* { dg-do run { target *-*-linux* } } */\n+\n+#include <sys/mman.h>\n+#include <string.h>\n+#include <stdio.h>\n+#include <errno.h>\n+\n+unsigned long ossAlignX(unsigned long i, unsigned long X)\n+{\n+   return ((i + (X - 1)) & ~(unsigned long) (X - 1));\n+}\n+\n+struct STRUCT_6_BYTES\n+{\n+   unsigned char slot[sizeof(unsigned short)];\n+   unsigned char page[sizeof(unsigned int)];\n+};\n+\n+struct SQLU_DICT_INFO_0\n+{\n+   void *pBlah;\n+   char bSomeFlag1;\n+   char bSomeFlag2;\n+   struct STRUCT_6_BYTES dRID;\n+};\n+\n+struct SQLU_DATAPART_0\n+{\n+   struct SQLU_DICT_INFO_0 *pDictRidderInfo;\n+};\n+\n+struct XXX\n+{\n+   struct SQLU_DATAPART_0 *m_pDatapart;\n+};\n+\n+struct STRUCT_6_BYTES INIT_6_BYTES_ZERO()\n+{\n+   struct STRUCT_6_BYTES ridOut = {{0,0}, {0,0,0,0}};\n+   return ridOut;\n+}\n+\n+void Initialize(struct XXX *this, int iIndex)\n+{\n+   struct SQLU_DICT_INFO_0 *pDictRidderInfo = this->m_pDatapart[iIndex].pDictRidderInfo;\n+   pDictRidderInfo->bSomeFlag1 = 0;\n+   pDictRidderInfo->bSomeFlag2 = 0;\n+   pDictRidderInfo->dRID = INIT_6_BYTES_ZERO();\n+}\n+\n+int main(void)\n+{\n+   int rc;\n+\n+   struct stuff\n+   {\n+      char c0[4096-sizeof(struct XXX)];\n+      struct XXX o;\n+      char c1[4096*2-sizeof(struct SQLU_DATAPART_0)];\n+      struct SQLU_DATAPART_0 dp;\n+      char c2[4096*2-sizeof(struct SQLU_DICT_INFO_0)];\n+      struct SQLU_DICT_INFO_0 di;\n+      char c3[4096];\n+   };\n+\n+   char buf[sizeof(struct stuff)+4096];\n+   struct stuff *u = (struct stuff *)ossAlignX((unsigned long)&buf[0], 4096);\n+   memset(u, 1, sizeof(u));\n+   u->c1[0] = '\\xAA';\n+   u->c2[0] = '\\xBB';\n+   u->c3[0] = '\\xCC';\n+\n+   rc = mprotect(u->c1, 4096, PROT_NONE);\n+   if (rc == -1)\n+      printf(\"mprotect:c1: %d: %d(%s)\\n\", rc, errno, strerror(errno));\n+\n+   rc = mprotect(u->c2, 4096, PROT_NONE);\n+   if (rc == -1)\n+      printf(\"mprotect:c2: %d: %d(%s)\\n\", rc, errno, strerror(errno));\n+\n+   rc = mprotect(u->c3, 4096, PROT_NONE);\n+   if (rc == -1)\n+      printf(\"mprotect:c3: %d: %d(%s)\\n\", rc, errno, strerror(errno));\n+\n+   u->o.m_pDatapart = &u->dp;\n+   u->dp.pDictRidderInfo = &u->di;\n+   Initialize(&u->o, 0);\n+\n+   return 0;\n+}"}]}