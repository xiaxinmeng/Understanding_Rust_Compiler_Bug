{"sha": "7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiMWFkOTMxNGY3ZTY3MWNmOGM0YjY5ZGE1NWRjMGFmZTdjYmEwMQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-10-24T21:28:13Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-10-24T21:28:13Z"}, "message": "re PR pch/10757 (Adding -fpic/-fPIC causes crash with PCH created without -fpic/-fPIC)\n\n\tPR 10757\n\t* c-pch.c: Include target.h.  Improve comments.\n\t(struct c_pch_validity): Add target_data_length.\n\t(pch_init): Add target's validity data.\n\t(c_common_valid_pch): Check target's validity data.\n\t* target-def.h (TARGET_GET_PCH_VALIDITY): New.\n\t(TARGET_PCH_VALID_P): New.\n\t(TARGET_INITIALIZER): Add new fields.\n\t* target.h: Include tm.h.\n\t(struct gcc_target): Add get_pch_validity, pch_valid_p.\n\t* toplev.h (default_get_pch_validity): New prototype.\n\t(default_pch_valid_p): New prototype.\n\t* toplev.c (default_get_pch_validity): New routine.\n\t(default_pch_valid_p): New routine.\n\t* Makefile.in (TARGET_H): Add TM_H.  Replace all users of\n\ttarget.h with $(TARGET_H).\n\t(c-pch.o): Add TARGET_H.\n\t* doc/tm.texi (PCH Target): New node.\n\t(TARGET_GET_PCH_VALIDITY): Document.\n\t(TARGET_PCH_VALID_P): Document.\n\nFrom-SVN: r72909", "tree": {"sha": "d43094488963890ba2a849eb20c57b70ebe80264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d43094488963890ba2a849eb20c57b70ebe80264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eebf21ef9940f507365b505fcd2fb290cc7c38b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebf21ef9940f507365b505fcd2fb290cc7c38b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebf21ef9940f507365b505fcd2fb290cc7c38b7"}], "stats": {"total": 224, "additions": 214, "deletions": 10}, "files": [{"sha": "2fcdbce9952bd59df224e5ed6a6b52f17f5c2254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -1,3 +1,26 @@\n+2003-10-24  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR 10757\n+\t* c-pch.c: Include target.h.  Improve comments.\n+\t(struct c_pch_validity): Add target_data_length.\n+\t(pch_init): Add target's validity data.\n+\t(c_common_valid_pch): Check target's validity data.\n+\t* target-def.h (TARGET_GET_PCH_VALIDITY): New.\n+\t(TARGET_PCH_VALID_P): New.\n+\t(TARGET_INITIALIZER): Add new fields.\n+\t* target.h: Include tm.h.\n+\t(struct gcc_target): Add get_pch_validity, pch_valid_p.\n+\t* toplev.h (default_get_pch_validity): New prototype.\n+\t(default_pch_valid_p): New prototype.\n+\t* toplev.c (default_get_pch_validity): New routine.\n+\t(default_pch_valid_p): New routine.\n+\t* Makefile.in (TARGET_H): Add TM_H.  Replace all users of\n+\ttarget.h with $(TARGET_H).\n+\t(c-pch.o): Add TARGET_H.\n+\t* doc/tm.texi (PCH Target): New node.\n+\t(TARGET_GET_PCH_VALIDITY): Document.\n+\t(TARGET_PCH_VALID_P): Document.\n+\n 2003-10-24  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Makefile.in: Define a vpath for %.texi.  Remove explicit $(docdir)"}, {"sha": "6097e1feb0ae7e9533d0e66a3f665887feef897b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -640,7 +640,7 @@ TM_P_H    = tm_p.h    $(tm_p_file_list)\n GTM_H     = tm.h      $(tm_file_list)\n TM_H      = $(GTM_H) insn-constants.h insn-flags.h\n \n-TARGET_H = target.h\n+TARGET_H = $(TM_H) target.h\n HOOKS_H = hooks.h\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n@@ -1371,7 +1371,7 @@ c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n \t$(C_COMMON_H) output.h toplev.h c-pragma.h $(GGC_H) debug.h \\\n-\tlanghooks.h flags.h hosthooks.h version.h\n+\tlanghooks.h flags.h hosthooks.h version.h $(TARGET_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n \t  $< $(OUTPUT_OPTION)\n@@ -1580,7 +1580,7 @@ explow.o : explow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_\n optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(RECOG_H) reload.h \\\n    toplev.h $(GGC_H) real.h $(TM_P_H) except.h gt-optabs.h $(BASIC_BLOCK_H) \\\n-   target.h\n+   $(TARGET_H)\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    flags.h $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h langhooks.h \\\n    insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h \\\n@@ -1822,7 +1822,7 @@ regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(RECOG_H) function.h \\\n    resource.h $(OBSTACK_H) flags.h $(TM_P_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(REGS_H) toplev.h flags.h insn-config.h function.h $(RECOG_H) target.h \\\n+   $(REGS_H) toplev.h flags.h insn-config.h function.h $(RECOG_H) $(TARGET_H) \\\n    $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) real.h $(OPTABS_H) \\\n    cfgloop.h\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h"}, {"sha": "2a29075d5a399b3bb355735e4c06e9bb84bbd49a", "filename": "gcc/c-pch.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -33,14 +33,18 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"langhooks.h\"\n #include \"hosthooks.h\"\n+#include \"target.h\"\n \n /* This structure is read very early when validating the PCH, and\n    might be read for a PCH which is for a completely different compiler\n    for a different operating system.  Thus, it should really only contain\n    'unsigned char' entries, at least in the initial entries.  \n \n    If you add or change entries before version_length, you should increase\n-   the version number in get_ident().  */\n+   the version number in get_ident().  \n+\n+   There are a bunch of fields named *_length; those are lengths of data that\n+   follows this structure in the same order as the fields in the structure.  */\n \n struct c_pch_validity\n {\n@@ -49,6 +53,7 @@ struct c_pch_validity\n   unsigned char version_length;\n   unsigned char debug_info_type;\n   void (*pch_init) (void);\n+  size_t target_data_length;\n };\n \n struct c_pch_header \n@@ -96,6 +101,7 @@ pch_init (void)\n {\n   FILE *f;\n   struct c_pch_validity v;\n+  void *target_validity;\n   \n   if (! pch_file)\n     return;\n@@ -112,14 +118,16 @@ pch_init (void)\n   v.host_machine_length = strlen (host_machine);\n   v.target_machine_length = strlen (target_machine);\n   v.version_length = strlen (version_string);\n-  \n   v.debug_info_type = write_symbols;\n   v.pch_init = &pch_init;\n+  target_validity = targetm.get_pch_validity (&v.target_data_length);\n+  \n   if (fwrite (get_ident(), IDENT_LENGTH, 1, f) != 1\n       || fwrite (&v, sizeof (v), 1, f) != 1\n       || fwrite (host_machine, v.host_machine_length, 1, f) != 1\n       || fwrite (target_machine, v.target_machine_length, 1, f) != 1\n-      || fwrite (version_string, v.version_length, 1, f) != 1)\n+      || fwrite (version_string, v.version_length, 1, f) != 1\n+      || fwrite (target_validity, v.target_data_length, 1, f) != 1)\n     fatal_error (\"can't write to %s: %m\", pch_file);\n \n   /* We need to be able to re-read the output.  */\n@@ -184,8 +192,10 @@ c_common_write_pch (void)\n   fclose (pch_outfile);\n }\n \n-/* Check the PCH file called NAME, open on FD, to see if it can be used\n-   in this compilation.  */\n+/* Check the PCH file called NAME, open on FD, to see if it can be\n+   used in this compilation.  Return 1 if valid, 0 if the file can't\n+   be used now but might be if it's seen later in the compilation, and\n+   2 if this file could never be used in the compilation.  */\n \n int\n c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n@@ -299,6 +309,24 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n       return 2;\n     }\n \n+  /* Check the target-specific validity data.  */\n+  {\n+    void *this_file_data = xmalloc (v.target_data_length);\n+    const char *msg;\n+    \n+    if ((size_t) read (fd, this_file_data, v.target_data_length)\n+\t!= v.target_data_length)\n+      fatal_error (\"can't read %s: %m\", name);\n+    msg = targetm.pch_valid_p (this_file_data, v.target_data_length);\n+    free (this_file_data);\n+    if (msg != NULL)\n+      {\n+\tif (cpp_get_options (pfile)->warn_invalid_pch)\n+\t  cpp_error (pfile, DL_WARNING, \"%s: %s\", name, msg);\n+\treturn 2;\n+      }\n+  }\n+\n   /* Check the preprocessor macros are the same as when the PCH was\n      generated.  */\n   "}, {"sha": "09f8295e9ee4fdfab3f3b85b45534dd37bd4b3fc", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -50,6 +50,7 @@ through the macros defined in the @file{.h} file.\n * Mode Switching::      Insertion of mode-switching instructions.\n * Target Attributes::   Defining target-specific uses of @code{__attribute__}.\n * MIPS Coprocessors::   MIPS coprocessor support and how to customize it.\n+* PCH Target::          Validity checking for precompiled headers.\n * Misc::                Everything else.\n @end menu\n \n@@ -8387,6 +8388,30 @@ alternate names of coprocessor registers.  The format of each entry should be\n Default: empty.\n @end defmac\n \n+@node PCH Target\n+@section Parameters for Precompiled Header Validity Checking\n+@cindex parameters, precompiled headers\n+\n+@deftypefn {Target Hook} void * TARGET_GET_PCH_VALIDITY (size_t * @var{sz})\n+Define this hook if your target needs to check a different collection\n+of flags than the default, which is every flag defined by\n+@code{TARGET_SWITCHES} and @code{TARGET_OPTIONS}.  It should return\n+some data which will be saved in the PCH file and presented to\n+@code{TARGET_PCH_VALID_P} later; it should set @code{SZ} to the size\n+of the data.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} const char * TARGET_PCH_VALID_P (const void * @var{data}, size_t @var{sz})\n+Define this hook if your target needs to check a different collection of\n+flags than the default, which is every flag defined by @code{TARGET_SWITCHES}\n+and @code{TARGET_OPTIONS}.  It is given data which came from\n+@code{TARGET_GET_PCH_VALIDITY} (in this version of this compiler, so there\n+is no need for extensive validity checking).  It returns @code{NULL} if\n+it is safe to load a PCH file with this data, or a suitable error message\n+if not.  The error message will be presented to the user, so it should\n+be localised.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "5c7fcb0b9df025276593f954e3f8da9500df492e", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -316,6 +316,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #define TARGET_MACHINE_DEPENDENT_REORG 0\n \n+#define TARGET_GET_PCH_VALIDITY default_get_pch_validity\n+#define TARGET_PCH_VALID_P default_pch_valid_p\n+\n #define TARGET_PROMOTE_FUNCTION_ARGS default_promote_function_args\n #define TARGET_PROMOTE_FUNCTION_RETURN default_promote_function_return\n #define TARGET_PROMOTE_PROTOTYPES default_promote_prototypes\n@@ -358,7 +361,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_INIT_LIBFUNCS,\t\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\\n-  TARGET_BRANCH_TARGET_REGISTER_CLASS,\t\\\n+  TARGET_BRANCH_TARGET_REGISTER_CLASS,\t\t\\\n   TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED,\t\\\n   TARGET_CANNOT_FORCE_CONST_MEM,\t\t\\\n   TARGET_CANNOT_COPY_INSN_P,\t\t\t\\\n@@ -374,6 +377,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n   TARGET_DWARF_REGISTER_SPAN,                   \\\n   TARGET_MACHINE_DEPENDENT_REORG,\t\t\\\n+  TARGET_GET_PCH_VALIDITY,\t\t\t\\\n+  TARGET_PCH_VALID_P,\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\"}, {"sha": "0b19445456aa4de01a7685249a7c2942acd49c12", "filename": "gcc/target.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -44,6 +44,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    to gradually reduce the amount of conditional compilation that is\n    scattered throughout GCC.  */\n \n+#include \"tm.h\"\n+\n struct gcc_target\n {\n   /* Functions that output assembler for the target.  */\n@@ -380,6 +382,15 @@ struct gcc_target\n      delayed-branch scheduling.  */\n   void (* machine_dependent_reorg) (void);\n \n+  /* Validity-checking routines for PCH files, target-specific.\n+     get_pch_validity returns a pointer to the data to be stored,\n+     and stores the size in its argument.  pch_valid_p gets the same\n+     information back and returns NULL if the PCH is valid,\n+     or an error message if not.\n+  */\n+  void * (* get_pch_validity) (size_t *);\n+  const char * (* pch_valid_p) (const void *, size_t);\n+\n   /* Leave the boolean fields at the end.  */\n \n   /* True if arbitrary sections are supported.  */"}, {"sha": "3e350bf08e3d9e91a323a0f16fc8a253c0482539", "filename": "gcc/toplev.c", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -4099,6 +4099,115 @@ init_asm_output (const char *name)\n     }\n }\n \n+/* Default version of get_pch_validity.\n+   By default, every flag difference is fatal; that will be mostly right for\n+   most targets, but completely right for very few.  */\n+\n+void *\n+default_get_pch_validity (size_t *len)\n+{\n+  size_t i;\n+  char *result, *r;\n+  \n+  *len = sizeof (target_flags) + 2;\n+  for (i = 0; i < ARRAY_SIZE (target_options); i++)\n+    {\n+      *len += 1;\n+      if (*target_options[i].variable)\n+\t*len += strlen (*target_options[i].variable);\n+    }\n+\n+  result = r = xmalloc (*len);\n+  r[0] = flag_pic;\n+  r[1] = flag_pie;\n+  r += 2;\n+  memcpy (r, &target_flags, sizeof (target_flags));\n+  r += sizeof (target_flags);\n+  \n+  for (i = 0; i < ARRAY_SIZE (target_options); i++)\n+    {\n+      const char *str = *target_options[i].variable;\n+      size_t l;\n+      if (! str)\n+\tstr = \"\";\n+      l = strlen (str) + 1;\n+      memcpy (r, str, l);\n+      r += l;\n+    }\n+\n+  return result;\n+}\n+\n+/* Default version of pch_valid_p.  */\n+\n+const char *\n+default_pch_valid_p (const void *data_p, size_t len)\n+{\n+  const char *data = (const char *)data_p;\n+  const char *flag_that_differs = NULL;\n+  size_t i;\n+  \n+  /* -fpic and -fpie also usually make a PCH invalid.  */\n+  if (data[0] != flag_pic)\n+    return _(\"created and used with different settings of -fpic\");\n+  if (data[1] != flag_pie)\n+    return _(\"created and used with different settings of -fpie\");\n+  data += 2;\n+\n+  /* Check target_flags.  */\n+  if (memcmp (data, &target_flags, sizeof (target_flags)) != 0)\n+    {\n+      for (i = 0; i < ARRAY_SIZE (target_switches); i++)\n+\t{\n+\t  int bits;\n+\t  int tf;\n+\n+\t  memcpy (&tf, data, sizeof (target_flags));\n+\n+\t  bits = target_switches[i].value;\n+\t  if (bits < 0)\n+\t    bits = -bits;\n+\t  if ((target_flags & bits) != (tf & bits))\n+\t    {\n+\t      flag_that_differs = target_switches[i].name;\n+\t      goto make_message;\n+\t    }\n+\t}\n+      abort ();\n+    }\n+  data += sizeof (target_flags);\n+  len -= sizeof (target_flags);\n+  \n+  /* Check string options.  */\n+  for (i = 0; i < ARRAY_SIZE (target_options); i++)\n+    {\n+      const char *str = *target_options[i].variable;\n+      size_t l;\n+      if (! str)\n+\tstr = \"\";\n+      l = strlen (str) + 1;\n+      if (len < l || memcmp (data, str, l) != 0)\n+\t{\n+\t  flag_that_differs = target_options[i].prefix;\n+\t  goto make_message;\n+\t}\n+      data += l;\n+      len -= l;\n+    }\n+\n+  return NULL;\n+  \n+ make_message:\n+  {\n+    char *r;\n+    asprintf (&r, _(\"created and used with differing settings of `-m%s'\"),\n+\t\t  flag_that_differs);\n+    if (r == NULL)\n+      r = _(\"out of memory\");\n+    return r;\n+  }\n+}\n+\n /* Default tree printer.   Handles declarations only.  */\n static bool\n default_tree_printer (pretty_printer * pp, text_info *text)"}, {"sha": "5a8b5813f09c1bedfcac7fd3489d32a0a2f7ca42", "filename": "gcc/toplev.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=7bb1ad9314f7e671cf8c4b69da55dc0afe7cba01", "patch": "@@ -124,9 +124,12 @@ extern int flag_ssa_dce;\n extern int time_report;\n extern int flag_new_regalloc;\n \n+/* Things to do with target switches.  */\n extern void display_target_options (void);\n extern void print_version (FILE *, const char *);\n extern void set_target_switch (const char *);\n+extern void * default_get_pch_validity (size_t *);\n+extern const char * default_pch_valid_p (const void *, size_t);\n \n /* The hashtable, so that the C front ends can pass it to cpplib.  */\n extern struct ht *ident_hash;"}]}