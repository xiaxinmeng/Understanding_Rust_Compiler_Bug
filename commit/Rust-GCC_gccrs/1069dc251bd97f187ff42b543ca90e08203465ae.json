{"sha": "1069dc251bd97f187ff42b543ca90e08203465ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2OWRjMjUxYmQ5N2YxODdmZjQyYjU0M2NhOTBlMDgyMDM0NjVhZQ==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "m.ostapenko@samsung.com", "date": "2017-11-30T21:38:16Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2017-11-30T21:38:16Z"}, "message": "re PR sanitizer/81697 (Incorrect ASan global variables alignment on arm)\n\ngcc/\n\n2017-11-30  Maxim Ostapenko  <m.ostapenko@samsung.com>\n\n\tPR sanitizer/81697\n\t* asan.c (asan_protect_global): Add new ignore_decl_rtl_set_p\n\tparameter. Return true if ignore_decl_rtl_set_p is true and other\n\tconditions are satisfied.\n\t* asan.h (asan_protect_global): Add new parameter.\n\t* varasm.c (categorize_decl_for_section): Pass true as second parameter\n\tto asan_protect_global calls.\n\ngcc/testsuite/\n\n2017-11-30  Maxim Ostapenko  <m.ostapenko@samsung.com>\n\n\tPR sanitizer/81697\n\t* c-c++-common/asan/pr81697.c: New test.\n\nFrom-SVN: r255283", "tree": {"sha": "3885b39c1cc27358616aae7eb80eaf44a07faa7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3885b39c1cc27358616aae7eb80eaf44a07faa7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1069dc251bd97f187ff42b543ca90e08203465ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1069dc251bd97f187ff42b543ca90e08203465ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1069dc251bd97f187ff42b543ca90e08203465ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1069dc251bd97f187ff42b543ca90e08203465ae/comments", "author": null, "committer": null, "parents": [{"sha": "75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12"}], "stats": {"total": 78, "additions": 67, "deletions": 11}, "files": [{"sha": "227396abe64ff252865110a26d3777d65d393ca6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1069dc251bd97f187ff42b543ca90e08203465ae", "patch": "@@ -1,3 +1,13 @@\n+2017-12-01  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\tPR sanitizer/81697\n+\t* asan.c (asan_protect_global): Add new ignore_decl_rtl_set_p\n+\tparameter. Return true if ignore_decl_rtl_set_p is true and other\n+\tconditions are satisfied.\n+\t* asan.h (asan_protect_global): Add new parameter.\n+\t* varasm.c (categorize_decl_for_section): Pass true as second parameter\n+\tto asan_protect_global calls.\n+\n 2017-11-30  Jim Wilson  <jimw@sifive.com>\n \n \t* doc/invoke.texi (RISC-V Options): Delete nonexistent -mmemcpy and"}, {"sha": "873687f04877670c763cff264857dc154e3b5a49", "filename": "gcc/asan.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=1069dc251bd97f187ff42b543ca90e08203465ae", "patch": "@@ -1605,7 +1605,7 @@ is_odr_indicator (tree decl)\n    ASAN_RED_ZONE_SIZE bytes.  */\n \n bool\n-asan_protect_global (tree decl)\n+asan_protect_global (tree decl, bool ignore_decl_rtl_set_p)\n {\n   if (!ASAN_GLOBALS)\n     return false;\n@@ -1627,7 +1627,13 @@ asan_protect_global (tree decl)\n       || DECL_THREAD_LOCAL_P (decl)\n       /* Externs will be protected elsewhere.  */\n       || DECL_EXTERNAL (decl)\n-      || !DECL_RTL_SET_P (decl)\n+      /* PR sanitizer/81697: For architectures that use section anchors first\n+\t call to asan_protect_global may occur before DECL_RTL (decl) is set.\n+\t We should ignore DECL_RTL_SET_P then, because otherwise the first call\n+\t to asan_protect_global will return FALSE and the following calls on the\n+\t same decl after setting DECL_RTL (decl) will return TRUE and we'll end\n+\t up with inconsistency at runtime.  */\n+      || (!DECL_RTL_SET_P (decl) && !ignore_decl_rtl_set_p)\n       /* Comdat vars pose an ABI problem, we can't know if\n \t the var that is selected by the linker will have\n \t padding or not.  */\n@@ -1651,14 +1657,18 @@ asan_protect_global (tree decl)\n       || is_odr_indicator (decl))\n     return false;\n \n-  rtl = DECL_RTL (decl);\n-  if (!MEM_P (rtl) || GET_CODE (XEXP (rtl, 0)) != SYMBOL_REF)\n-    return false;\n-  symbol = XEXP (rtl, 0);\n+  if (!ignore_decl_rtl_set_p || DECL_RTL_SET_P (decl))\n+    {\n \n-  if (CONSTANT_POOL_ADDRESS_P (symbol)\n-      || TREE_CONSTANT_POOL_ADDRESS_P (symbol))\n-    return false;\n+      rtl = DECL_RTL (decl);\n+      if (!MEM_P (rtl) || GET_CODE (XEXP (rtl, 0)) != SYMBOL_REF)\n+\treturn false;\n+      symbol = XEXP (rtl, 0);\n+\n+      if (CONSTANT_POOL_ADDRESS_P (symbol)\n+\t  || TREE_CONSTANT_POOL_ADDRESS_P (symbol))\n+\treturn false;\n+    }\n \n   if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl)))\n     return false;"}, {"sha": "885b47e8cc430d287414908fe251a31ffd785269", "filename": "gcc/asan.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=1069dc251bd97f187ff42b543ca90e08203465ae", "patch": "@@ -26,7 +26,7 @@ extern void asan_finish_file (void);\n extern rtx_insn *asan_emit_stack_protection (rtx, rtx, unsigned int,\n \t\t\t\t\t     HOST_WIDE_INT *, tree *, int);\n extern rtx_insn *asan_emit_allocas_unpoison (rtx, rtx, rtx_insn *);\n-extern bool asan_protect_global (tree);\n+extern bool asan_protect_global (tree, bool ignore_decl_rtl_set_p = false);\n extern void initialize_sanitizer_builtins (void);\n extern tree asan_dynamic_init_call (bool);\n extern bool asan_expand_check_ifn (gimple_stmt_iterator *, bool);"}, {"sha": "045be1a4b549dc0c913d898e5c75b6660dc85846", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1069dc251bd97f187ff42b543ca90e08203465ae", "patch": "@@ -1,3 +1,8 @@\n+2017-12-01  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\tPR sanitizer/81697\n+\t* c-c++-common/asan/pr81697.c: New test.\n+\n 2017-11-30  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/loop-3.c: New test."}, {"sha": "3a85813261db1aa5406062402f75df4b823eff12", "filename": "gcc/testsuite/c-c++-common/asan/pr81697.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr81697.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr81697.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr81697.c?ref=1069dc251bd97f187ff42b543ca90e08203465ae", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-fmerge-all-constants\" } */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+const char kRecoveryInstallString[] = \"NEW\";\n+const char kRecoveryUpdateString[] = \"UPDATE\";\n+const char kRecoveryUninstallationString1[] = \"INSTALL\";\n+const char kRecoveryUninstallationString2[] = \"UNINSTALL\";\n+\n+volatile const int zero = 0;\n+\n+int\n+main()\n+{\n+  char x1 = kRecoveryInstallString[zero + 0];\n+  char x2 = kRecoveryUpdateString[zero + 0];\n+  char x3 = kRecoveryUninstallationString1[zero + 0];\n+  char x4 = kRecoveryUninstallationString2[zero + 0];\n+  return (x1 + x2 + x3 + x4) == 0;\n+}"}, {"sha": "392ac443f14fadfd4107c8ff665a711fe73baea4", "filename": "gcc/varasm.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1069dc251bd97f187ff42b543ca90e08203465ae/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1069dc251bd97f187ff42b543ca90e08203465ae", "patch": "@@ -6530,6 +6530,7 @@ categorize_decl_for_section (const_tree decl, int reloc)\n     }\n   else if (VAR_P (decl))\n     {\n+      tree d = CONST_CAST_TREE (decl);\n       if (bss_initializer_p (decl))\n \tret = SECCAT_BSS;\n       else if (! TREE_READONLY (decl)\n@@ -6550,7 +6551,17 @@ categorize_decl_for_section (const_tree decl, int reloc)\n \tret = reloc == 1 ? SECCAT_DATA_REL_RO_LOCAL : SECCAT_DATA_REL_RO;\n       else if (reloc || flag_merge_constants < 2\n \t       || ((flag_sanitize & SANITIZE_ADDRESS)\n-\t\t   && asan_protect_global (CONST_CAST_TREE (decl))))\n+\t\t   /* PR 81697: for architectures that use section anchors we\n+\t\t      need to ignore DECL_RTL_SET_P (decl) for string constants\n+\t\t      inside this asan_protect_global call because otherwise\n+\t\t      we'll wrongly put them into SECCAT_RODATA_MERGE_CONST\n+\t\t      section, set DECL_RTL (decl) later on and add DECL to\n+\t\t      protected globals via successive asan_protect_global\n+\t\t      calls.  In this scenario we'll end up with wrong\n+\t\t      alignment of these strings at runtime and possible ASan\n+\t\t      false positives.  */\n+\t\t   && asan_protect_global (d, use_object_blocks_p ()\n+\t\t\t\t\t      && use_blocks_for_decl_p (d))))\n \t/* C and C++ don't allow different variables to share the same\n \t   location.  -fmerge-all-constants allows even that (at the\n \t   expense of not conforming).  */"}]}