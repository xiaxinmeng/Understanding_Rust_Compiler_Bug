{"sha": "5d0878e70dc34446015c4f2908869ad9e85cab8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQwODc4ZTcwZGMzNDQ0NjAxNWM0ZjI5MDg4NjlhZDllODVjYWI4Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-05-07T14:39:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-05-07T14:39:40Z"}, "message": "i386.h (ix86_tune_indices): Add X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL.\n\n\n\t* i386.h (ix86_tune_indices): Add X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL.\n\t(TARGET_SOFTWARE_PREFETCHING_BENEFICIAL): New macor.\n\t* i386.c (initial_ix86_tune_features): Add X86_SOFTARE_PREFETCHING_BENEFICIAL.\n\t(software_prefetching_beneficial_p): Remove predicate.\n\t(ix86_option_override_internal): Use new macro.\n\nFrom-SVN: r173533", "tree": {"sha": "1433edbebb9da3f76e790ac94430cd03412db0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1433edbebb9da3f76e790ac94430cd03412db0e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d0878e70dc34446015c4f2908869ad9e85cab8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d0878e70dc34446015c4f2908869ad9e85cab8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d0878e70dc34446015c4f2908869ad9e85cab8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d0878e70dc34446015c4f2908869ad9e85cab8c/comments", "author": null, "committer": null, "parents": [{"sha": "58696ce5e418de14f1c79f3f62b523055ad3ea2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58696ce5e418de14f1c79f3f62b523055ad3ea2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58696ce5e418de14f1c79f3f62b523055ad3ea2c"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "6534bbc46eb6ba0b97dc92caaa7e1bb9dfcd6281", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0878e70dc34446015c4f2908869ad9e85cab8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0878e70dc34446015c4f2908869ad9e85cab8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d0878e70dc34446015c4f2908869ad9e85cab8c", "patch": "@@ -1,3 +1,11 @@\n+2011-05-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.h (ix86_tune_indices): Add X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL.\n+\t(TARGET_SOFTWARE_PREFETCHING_BENEFICIAL): New macor.\n+\t* i386.c (initial_ix86_tune_features): Add X86_SOFTARE_PREFETCHING_BENEFICIAL.\n+\t(software_prefetching_beneficial_p): Remove predicate.\n+\t(ix86_option_override_internal): Use new macro.\n+\n 2011-05-06  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (update_callee_keys): Don't reset node growth cache."}, {"sha": "7b0afb1cec0fc4010d773b0331bd1b58ac36341b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0878e70dc34446015c4f2908869ad9e85cab8c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0878e70dc34446015c4f2908869ad9e85cab8c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5d0878e70dc34446015c4f2908869ad9e85cab8c", "patch": "@@ -2083,6 +2083,11 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_VECTORIZE_DOUBLE: Enable double precision vector\n      instructions.  */\n   ~m_ATOM,\n+\n+  /* X86_SOFTARE_PREFETCHING_BENEFICIAL: Enable software prefetching\n+     at -O3.  For the moment, the prefetching seems badly tuned for Intel\n+     chips.  */\n+  m_K6_GEODE | m_AMD_MULTIPLE\n };\n \n /* Feature tests against the various architecture variations.  */\n@@ -3257,27 +3262,6 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n   return ret;\n }\n \n-/* Return TRUE if software prefetching is beneficial for the\n-   given CPU. */\n-\n-static bool\n-software_prefetching_beneficial_p (void)\n-{\n-  switch (ix86_tune)\n-    {\n-    case PROCESSOR_GEODE:\n-    case PROCESSOR_K6:\n-    case PROCESSOR_ATHLON:\n-    case PROCESSOR_K8:\n-    case PROCESSOR_AMDFAM10:\n-    case PROCESSOR_BTVER1:\n-      return true;\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n /* Return true, if profiling code should be emitted before\n    prologue. Otherwise it returns false.\n    Note: For x86 with \"hotfix\" it is sorried.  */\n@@ -4205,7 +4189,7 @@ ix86_option_override_internal (bool main_args_p)\n   if (flag_prefetch_loop_arrays < 0\n       && HAVE_prefetch\n       && optimize >= 3\n-      && software_prefetching_beneficial_p ())\n+      && TARGET_SOFTWARE_PREFETCHING_BENEFICIAL)\n     flag_prefetch_loop_arrays = 1;\n \n   /* If using typedef char *va_list, signal that __builtin_va_start (&ap, 0)"}, {"sha": "4137ecc67288ea0c0210b45e1920bb524426dca9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d0878e70dc34446015c4f2908869ad9e85cab8c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d0878e70dc34446015c4f2908869ad9e85cab8c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5d0878e70dc34446015c4f2908869ad9e85cab8c", "patch": "@@ -322,6 +322,7 @@ enum ix86_tune_indices {\n   X86_TUNE_FUSE_CMP_AND_BRANCH,\n   X86_TUNE_OPT_AGU,\n   X86_TUNE_VECTORIZE_DOUBLE,\n+  X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL,\n \n   X86_TUNE_LAST\n };\n@@ -418,6 +419,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n #define TARGET_OPT_AGU ix86_tune_features[X86_TUNE_OPT_AGU]\n #define TARGET_VECTORIZE_DOUBLE \\\n \tix86_tune_features[X86_TUNE_VECTORIZE_DOUBLE]\n+#define TARGET_SOFTWARE_PREFETCHING_BENEFICIAL \\\n+\tix86_tune_features[X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {"}]}