{"sha": "00f74faf0ab88647128d8b8a94a5da867f0cf5a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmNzRmYWYwYWI4ODY0NzEyOGQ4YjhhOTRhNWRhODY3ZjBjZjVhNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-04-06T09:23:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:23:33Z"}, "message": "init.c: Reuse PA/HP-UX code for IA-64/HP-UX, except __gnat_adjust_context_for_raise.\n\n2007-04-06  Eric Botcazou <botcazou@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\n\t* init.c: Reuse PA/HP-UX code for IA-64/HP-UX, except\n\t__gnat_adjust_context_for_raise.\n\t(__gnat_init_float): on x86 vxworks 5.x and 6.x, we use the same\n\timplementation of floating point operations as native x86 targets.\n\tSo the FPU should be initialized in the same way using finit. Fix\n\tfloating point operations accuracy issues.\n\t(__gnat_install_handler, case FreeBSD): Use proper type for sa_sigaction\n\tmember in struct sigaction, so as to avoid warning for incompatible\n\tpointer types.\n\nFrom-SVN: r123580", "tree": {"sha": "91cfffa5e82f0d1408efd2607f733ba3a49f91eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91cfffa5e82f0d1408efd2607f733ba3a49f91eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00f74faf0ab88647128d8b8a94a5da867f0cf5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f74faf0ab88647128d8b8a94a5da867f0cf5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f74faf0ab88647128d8b8a94a5da867f0cf5a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f74faf0ab88647128d8b8a94a5da867f0cf5a6/comments", "author": null, "committer": null, "parents": [{"sha": "815f44d0cd91db97ee2793bcdf007f498f78f8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815f44d0cd91db97ee2793bcdf007f498f78f8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815f44d0cd91db97ee2793bcdf007f498f78f8aa"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "35dffd39f54ddad74e49ee4fd1ae1d1c0ae349da", "filename": "gcc/ada/init.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f74faf0ab88647128d8b8a94a5da867f0cf5a6/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f74faf0ab88647128d8b8a94a5da867f0cf5a6/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=00f74faf0ab88647128d8b8a94a5da867f0cf5a6", "patch": "@@ -447,18 +447,20 @@ __gnat_machine_state_length (void)\n   return sizeof (struct sigcontext);\n }\n \n-/********************/\n-/* PA HP-UX section */\n-/********************/\n+/*****************/\n+/* HP-UX section */\n+/*****************/\n \n-#elif defined (__hppa__) && defined (__hpux__)\n+#elif defined (__hpux__)\n \n #include <signal.h>\n #include <sys/ucontext.h>\n \n static void\n __gnat_error_handler (int sig, siginfo_t *siginfo, void *ucontext);\n \n+#if defined (__hppa__)\n+\n /* __gnat_adjust_context_for_raise - see comments along with the default\n    version later in this file.  */\n \n@@ -475,6 +477,8 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n     mcontext->ss_narrow.ss_pcoq_head ++;\n }\n \n+#endif\n+\n static void\n __gnat_error_handler\n   (int sig, siginfo_t *siginfo ATTRIBUTE_UNUSED, void *ucontext)\n@@ -1627,7 +1631,8 @@ __gnat_install_handler ()\n      exceptions.  Make sure that the handler isn't interrupted by another\n      signal that might cause a scheduling event! */\n \n-  act.sa_handler = __gnat_error_handler;\n+  act.sa_sigaction\n+    = (void (*)(int, struct __siginfo *, void*)) __gnat_error_handler;\n   act.sa_flags = SA_NODEFER | SA_RESTART | SA_SIGINFO;\n   (void) sigemptyset (&act.sa_mask);\n \n@@ -1805,6 +1810,12 @@ __gnat_init_float (void)\n   asm (\"mtfsb0 26\");\n #endif\n \n+#if (defined (__i386__) || defined (i386)) && !defined (VTHREADS)\n+  /* This is used to properly initialize the FPU on an x86 for each\n+     process thread. */\n+  asm (\"finit\");\n+#endif\n+\n   /* Similarly for sparc64. Achieved by masking bits in the Trap Enable Mask\n      field of the Floating-point Status Register (see the SPARC Architecture\n      Manual Version 9, p 48).  */"}]}