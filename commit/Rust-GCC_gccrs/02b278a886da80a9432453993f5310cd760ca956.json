{"sha": "02b278a886da80a9432453993f5310cd760ca956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJiMjc4YTg4NmRhODBhOTQzMjQ1Mzk5M2Y1MzEwY2Q3NjBjYTk1Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-07-28T08:41:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-07-28T08:41:34Z"}, "message": "re PR middle-end/61919 (FAIL: gfortran.dg/fmt_g0_6.f08   -O2  execution test)\n\ngcc/\n\tPR middle-end/61919\n\t* tree-outof-ssa.c (insert_partition_copy_on_edge)\n\t(insert_value_copy_on_edge, insert_rtx_to_part_on_edge)\n\t(insert_part_to_rtx_on_edge): Copy partition_to_pseudo rtxes before\n\tinserting them in the insn stream.\n\nFrom-SVN: r213116", "tree": {"sha": "9e1011f7bd2bbdc04604d922f6f081da97ad7d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1011f7bd2bbdc04604d922f6f081da97ad7d29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02b278a886da80a9432453993f5310cd760ca956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b278a886da80a9432453993f5310cd760ca956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02b278a886da80a9432453993f5310cd760ca956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b278a886da80a9432453993f5310cd760ca956/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55c0d5dfaf677df55b360f597a69eff390ff0b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c0d5dfaf677df55b360f597a69eff390ff0b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c0d5dfaf677df55b360f597a69eff390ff0b6f"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "56d3b250a03163bad30ca7278c84edc2032c0df6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b278a886da80a9432453993f5310cd760ca956/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b278a886da80a9432453993f5310cd760ca956/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02b278a886da80a9432453993f5310cd760ca956", "patch": "@@ -1,3 +1,11 @@\n+2014-07-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/61919\n+\t* tree-outof-ssa.c (insert_partition_copy_on_edge)\n+\t(insert_value_copy_on_edge, insert_rtx_to_part_on_edge)\n+\t(insert_part_to_rtx_on_edge): Copy partition_to_pseudo rtxes before\n+\tinserting them in the insn stream.\n+\n 2014-07-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/61913"}, {"sha": "88aff5ca554d58cee8d86348c87ae1b57f91cca5", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b278a886da80a9432453993f5310cd760ca956/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b278a886da80a9432453993f5310cd760ca956/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=02b278a886da80a9432453993f5310cd760ca956", "patch": "@@ -260,8 +260,8 @@ insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus)\n     set_curr_insn_location (locus);\n \n   var = partition_to_var (SA.map, src);\n-  seq = emit_partition_copy (SA.partition_to_pseudo[dest],\n-\t\t\t     SA.partition_to_pseudo[src],\n+  seq = emit_partition_copy (copy_rtx (SA.partition_to_pseudo[dest]),\n+\t\t\t     copy_rtx (SA.partition_to_pseudo[src]),\n \t\t\t     TYPE_UNSIGNED (TREE_TYPE (var)),\n \t\t\t     var);\n \n@@ -274,7 +274,7 @@ insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus)\n static void\n insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus)\n {\n-  rtx seq, x;\n+  rtx dest_rtx, seq, x;\n   enum machine_mode dest_mode, src_mode;\n   int unsignedp;\n   tree var;\n@@ -289,7 +289,8 @@ insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus)\n       fprintf (dump_file, \"\\n\");\n     }\n \n-  gcc_assert (SA.partition_to_pseudo[dest]);\n+  dest_rtx = copy_rtx (SA.partition_to_pseudo[dest]);\n+  gcc_assert (dest_rtx);\n \n   set_location_for_edge (e);\n   /* If a locus is provided, override the default.  */\n@@ -300,9 +301,9 @@ insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus)\n \n   var = SSA_NAME_VAR (partition_to_var (SA.map, dest));\n   src_mode = TYPE_MODE (TREE_TYPE (src));\n-  dest_mode = GET_MODE (SA.partition_to_pseudo[dest]);\n+  dest_mode = GET_MODE (dest_rtx);\n   gcc_assert (src_mode == TYPE_MODE (TREE_TYPE (var)));\n-  gcc_assert (!REG_P (SA.partition_to_pseudo[dest])\n+  gcc_assert (!REG_P (dest_rtx)\n \t      || dest_mode == promote_decl_mode (var, &unsignedp));\n \n   if (src_mode != dest_mode)\n@@ -312,15 +313,14 @@ insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus)\n     }\n   else if (src_mode == BLKmode)\n     {\n-      x = SA.partition_to_pseudo[dest];\n+      x = dest_rtx;\n       store_expr (src, x, 0, false);\n     }\n   else\n-    x = expand_expr (src, SA.partition_to_pseudo[dest],\n-\t\t     dest_mode, EXPAND_NORMAL);\n+    x = expand_expr (src, dest_rtx, dest_mode, EXPAND_NORMAL);\n \n-  if (x != SA.partition_to_pseudo[dest])\n-    emit_move_insn (SA.partition_to_pseudo[dest], x);\n+  if (x != dest_rtx)\n+    emit_move_insn (dest_rtx, x);\n   seq = get_insns ();\n   end_sequence ();\n \n@@ -356,7 +356,7 @@ insert_rtx_to_part_on_edge (edge e, int dest, rtx src, int unsignedsrcp,\n      mems.  Usually we give the source.  As we result from SSA names\n      the left and right size should be the same (and no WITH_SIZE_EXPR\n      involved), so it doesn't matter.  */\n-  seq = emit_partition_copy (SA.partition_to_pseudo[dest],\n+  seq = emit_partition_copy (copy_rtx (SA.partition_to_pseudo[dest]),\n \t\t\t     src, unsignedsrcp,\n \t\t\t     partition_to_var (SA.map, dest));\n \n@@ -390,7 +390,7 @@ insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus)\n \n   var = partition_to_var (SA.map, src);\n   seq = emit_partition_copy (dest,\n-\t\t\t     SA.partition_to_pseudo[src],\n+\t\t\t     copy_rtx (SA.partition_to_pseudo[src]),\n \t\t\t     TYPE_UNSIGNED (TREE_TYPE (var)),\n \t\t\t     var);\n "}]}