{"sha": "abed8b56b92b103275e6871b689862c0495b761b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlZDhiNTZiOTJiMTAzMjc1ZTY4NzFiNjg5ODYyYzA0OTViNzYxYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-19T13:37:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-19T13:37:52Z"}, "message": "libstdc++: Define all std::function members inline\n\n\t* include/bits/std_function.h (function): Define all member\n\tfunctions inline.", "tree": {"sha": "9885731bd7ab510a8e1e922bed55441fd710e59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9885731bd7ab510a8e1e922bed55441fd710e59e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abed8b56b92b103275e6871b689862c0495b761b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abed8b56b92b103275e6871b689862c0495b761b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abed8b56b92b103275e6871b689862c0495b761b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abed8b56b92b103275e6871b689862c0495b761b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "465520e3eb45d83ad18394aa537150bfa6bdf117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465520e3eb45d83ad18394aa537150bfa6bdf117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465520e3eb45d83ad18394aa537150bfa6bdf117"}], "stats": {"total": 159, "additions": 65, "deletions": 94}, "files": [{"sha": "fa65885d1deda368d5917d0e65eff841b070295c", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 65, "deletions": 94, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abed8b56b92b103275e6871b689862c0495b761b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abed8b56b92b103275e6871b689862c0495b761b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=abed8b56b92b103275e6871b689862c0495b761b", "patch": "@@ -345,7 +345,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The newly-created %function contains a copy of the target of @a\n        *  __x (if it has one).\n        */\n-      function(const function& __x);\n+      function(const function& __x)\n+      : _Function_base()\n+      {\n+\tif (static_cast<bool>(__x))\n+\t  {\n+\t    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);\n+\t    _M_invoker = __x._M_invoker;\n+\t    _M_manager = __x._M_manager;\n+\t  }\n+      }\n \n       /**\n        *  @brief %Function move constructor.\n@@ -354,10 +363,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The newly-created %function contains the target of @a __x\n        *  (if it has one).\n        */\n-      function(function&& __x) noexcept : _Function_base()\n-      {\n-\t__x.swap(*this);\n-      }\n+      function(function&& __x) noexcept\n+      : _Function_base()\n+      { __x.swap(*this); }\n \n       /**\n        *  @brief Builds a %function that targets a copy of the incoming\n@@ -378,7 +386,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Functor,\n \t       typename = _Requires<__not_<is_same<_Functor, function>>, void>,\n \t       typename = _Requires<_Callable<_Functor>, void>>\n-\tfunction(_Functor);\n+\tfunction(_Functor __f)\n+\t: _Function_base()\n+\t{\n+\t  typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;\n+\n+\t  if (_My_handler::_M_not_empty_function(__f))\n+\t    {\n+\t      _My_handler::_M_init_functor(_M_functor, std::move(__f));\n+\t      _M_invoker = &_My_handler::_M_invoke;\n+\t      _M_manager = &_My_handler::_M_manager;\n+\t    }\n+\t}\n \n       /**\n        *  @brief %Function assignment operator.\n@@ -508,7 +527,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The function call operator invokes the target function object\n        *  stored by @c this.\n        */\n-      _Res operator()(_ArgTypes... __args) const;\n+      _Res\n+      operator()(_ArgTypes... __args) const\n+      {\n+\tif (_M_empty())\n+\t  __throw_bad_function_call();\n+\treturn _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);\n+      }\n \n #if __cpp_rtti\n       // [3.7.2.5] function target access\n@@ -521,7 +546,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  This function will not throw an %exception.\n        */\n-      const type_info& target_type() const noexcept;\n+      const type_info&\n+      target_type() const noexcept\n+      {\n+\tif (_M_manager)\n+\t  {\n+\t    _Any_data __typeinfo_result;\n+\t    _M_manager(__typeinfo_result, _M_functor, __get_type_info);\n+\t    return *__typeinfo_result._M_access<const type_info*>();\n+\t  }\n+\telse\n+\t  return typeid(void);\n+      }\n \n       /**\n        *  @brief Access the stored target function object.\n@@ -534,9 +570,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @{\n        */\n-      template<typename _Functor>       _Functor* target() noexcept;\n+      template<typename _Functor>\n+\t_Functor*\n+\ttarget() noexcept\n+\t{\n+\t  const function* __const_this = this;\n+\t  const _Functor* __func = __const_this->template target<_Functor>();\n+\t  return const_cast<_Functor*>(__func);\n+\t}\n \n-      template<typename _Functor> const _Functor* target() const noexcept;\n+      template<typename _Functor>\n+\tconst _Functor*\n+\ttarget() const noexcept\n+\t{\n+\t  if (typeid(_Functor) == target_type() && _M_manager)\n+\t    {\n+\t      _Any_data __ptr;\n+\t      _M_manager(__ptr, _M_functor, __get_functor_ptr);\n+\t      return __ptr._M_access<const _Functor*>();\n+\t    }\n+\t  else\n+\t    return nullptr;\n+\t}\n       // @}\n #endif\n \n@@ -582,90 +637,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     function(_Functor) -> function<_Signature>;\n #endif\n \n-  // Out-of-line member definitions.\n-  template<typename _Res, typename... _ArgTypes>\n-    function<_Res(_ArgTypes...)>::\n-    function(const function& __x)\n-    : _Function_base()\n-    {\n-      if (static_cast<bool>(__x))\n-\t{\n-\t  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);\n-\t  _M_invoker = __x._M_invoker;\n-\t  _M_manager = __x._M_manager;\n-\t}\n-    }\n-\n-  template<typename _Res, typename... _ArgTypes>\n-    template<typename _Functor, typename, typename>\n-      function<_Res(_ArgTypes...)>::\n-      function(_Functor __f)\n-      : _Function_base()\n-      {\n-\ttypedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;\n-\n-\tif (_My_handler::_M_not_empty_function(__f))\n-\t  {\n-\t    _My_handler::_M_init_functor(_M_functor, std::move(__f));\n-\t    _M_invoker = &_My_handler::_M_invoke;\n-\t    _M_manager = &_My_handler::_M_manager;\n-\t  }\n-      }\n-\n-  template<typename _Res, typename... _ArgTypes>\n-    _Res\n-    function<_Res(_ArgTypes...)>::\n-    operator()(_ArgTypes... __args) const\n-    {\n-      if (_M_empty())\n-\t__throw_bad_function_call();\n-      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);\n-    }\n-\n-#if __cpp_rtti\n-  template<typename _Res, typename... _ArgTypes>\n-    const type_info&\n-    function<_Res(_ArgTypes...)>::\n-    target_type() const noexcept\n-    {\n-      if (_M_manager)\n-\t{\n-\t  _Any_data __typeinfo_result;\n-\t  _M_manager(__typeinfo_result, _M_functor, __get_type_info);\n-\t  return *__typeinfo_result._M_access<const type_info*>();\n-\t}\n-      else\n-\treturn typeid(void);\n-    }\n-\n-  template<typename _Res, typename... _ArgTypes>\n-    template<typename _Functor>\n-      _Functor*\n-      function<_Res(_ArgTypes...)>::\n-      target() noexcept\n-      {\n-\tconst function* __const_this = this;\n-\tconst _Functor* __func = __const_this->template target<_Functor>();\n-\treturn const_cast<_Functor*>(__func);\n-      }\n-\n-  template<typename _Res, typename... _ArgTypes>\n-    template<typename _Functor>\n-      const _Functor*\n-      function<_Res(_ArgTypes...)>::\n-      target() const noexcept\n-      {\n-\tif (typeid(_Functor) == target_type() && _M_manager)\n-\t  {\n-\t    _Any_data __ptr;\n-\t    _M_manager(__ptr, _M_functor, __get_functor_ptr);\n-\t    return __ptr._M_access<const _Functor*>();\n-\t  }\n-\telse\n-\t  return nullptr;\n-      }\n-#endif\n-\n   // [20.7.15.2.6] null pointer comparisons\n \n   /**"}]}