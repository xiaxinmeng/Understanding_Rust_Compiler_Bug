{"sha": "b8caf93e7dc321d800db228bf677db0ad59cce3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjYWY5M2U3ZGMzMjFkODAwZGIyMjhiZjY3N2RiMGFkNTljY2UzZg==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-08-24T18:55:53Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-08-24T18:55:53Z"}, "message": "prims.cc (remoteDebug): New global.\n\n        * prims.cc (remoteDebug): New global.\n        (jdwpOptions): New global.\n        (parse_x_arg): Add processing for \"X\" options \"debug\" and\n        \"runjdwp:\"\n        (_Jv_RunMain): If debugging, start up JDWP backend.\n        Send VM_INIT and VM_DEATH when appropriate.\n\nFrom-SVN: r116383", "tree": {"sha": "0f4e9c8a199c52ebf7de8f689ed10fdbcb577616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f4e9c8a199c52ebf7de8f689ed10fdbcb577616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8caf93e7dc321d800db228bf677db0ad59cce3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8caf93e7dc321d800db228bf677db0ad59cce3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8caf93e7dc321d800db228bf677db0ad59cce3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8caf93e7dc321d800db228bf677db0ad59cce3f/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9cbfca6f52f65d6914a33715d39ec9fa0619a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9cbfca6f52f65d6914a33715d39ec9fa0619a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9cbfca6f52f65d6914a33715d39ec9fa0619a18"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "0a694de4a1521fe0813e2a78e34b14271798fd09", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8caf93e7dc321d800db228bf677db0ad59cce3f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8caf93e7dc321d800db228bf677db0ad59cce3f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b8caf93e7dc321d800db228bf677db0ad59cce3f", "patch": "@@ -1,3 +1,12 @@\n+2006-08-24  Keith Seitz  <keiths@redhat.com>\n+\n+\t* prims.cc (remoteDebug): New global.\n+\t(jdwpOptions): New global.\n+\t(parse_x_arg): Add processing for \"X\" options \"debug\" and\n+\t\"runjdwp:\"\n+\t(_Jv_RunMain): If debugging, start up JDWP backend.\n+\tSend VM_INIT and VM_DEATH when appropriate.\n+\n 2006-08-23  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/VMVirtualMachine.java"}, {"sha": "33972f3bc7b8834e5307a725495a9611b41f1f60", "filename": "libjava/prims.cc", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8caf93e7dc321d800db228bf677db0ad59cce3f/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8caf93e7dc321d800db228bf677db0ad59cce3f/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=b8caf93e7dc321d800db228bf677db0ad59cce3f", "patch": "@@ -64,6 +64,10 @@ details.  */\n #include <gnu/gcj/runtime/ExtensionClassLoader.h>\n #include <gnu/gcj/runtime/FinalizerThread.h>\n #include <execution.h>\n+#include <gnu/classpath/jdwp/Jdwp.h>\n+#include <gnu/classpath/jdwp/VMVirtualMachine.h>\n+#include <gnu/classpath/jdwp/event/VmDeathEvent.h>\n+#include <gnu/classpath/jdwp/event/VmInitEvent.h>\n #include <gnu/java/lang/MainThread.h>\n \n #ifdef USE_LTDL\n@@ -98,6 +102,10 @@ property_pair *_Jv_Environment_Properties;\n const char **_Jv_argv;\n int _Jv_argc;\n \n+// Debugging options\n+static bool remoteDebug = false;\n+static char *jdwpOptions = \"\";\n+\n // Argument support.\n int\n _Jv_GetNbArgs (void)\n@@ -1138,7 +1146,18 @@ parse_x_arg (char* option_string)\n     }\n   else if (! strcmp (option_string, \"debug\"))\n     {\n-      // FIXME: add JDWP/JVMDI support\n+      remoteDebug = true;\n+    }\n+  else if (! strncmp (option_string, \"runjdwp:\", 8))\n+    {\n+      if (strlen (option_string) > 8)\n+\t  jdwpOptions = &option_string[8];\n+      else\n+\t{\n+\t  fprintf (stderr,\n+\t\t   \"libgcj: argument required for JDWP options\");\n+\t  return -1;\n+\t}\n     }\n   else if (! strncmp (option_string, \"bootclasspath:\", 14))\n     {\n@@ -1519,6 +1538,26 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n       else\n \tmain_thread = new MainThread (JvNewStringUTF (name),\n \t\t\t\t      arg_vec, is_jar);\n+      _Jv_AttachCurrentThread (main_thread);\n+\n+      // Start JDWP\n+      if (remoteDebug)\n+\t{\n+\t  using namespace gnu::classpath::jdwp;\n+\t  VMVirtualMachine::initialize ();\n+\t  Jdwp *jdwp = new Jdwp ();\n+\t  jdwp->setDaemon (true);\n+\t  jdwp->configure (JvNewStringLatin1 (jdwpOptions));\n+\t  jdwp->start ();\n+\n+\t  // Wait for JDWP to initialize and start\n+\t  jdwp->join ();\n+\t}\n+\n+      // Send VmInit\n+      gnu::classpath::jdwp::event::VmInitEvent *event;\n+      event = new gnu::classpath::jdwp::event::VmInitEvent (main_thread);\n+      gnu::classpath::jdwp::Jdwp::notify (event);\n     }\n   catch (java::lang::Throwable *t)\n     {\n@@ -1531,9 +1570,16 @@ _Jv_RunMain (JvVMInitArgs *vm_args, jclass klass, const char *name, int argc,\n       ::exit (1);\n     }\n \n-  _Jv_AttachCurrentThread (main_thread);\n   _Jv_ThreadRun (main_thread);\n \n+  // Notify debugger of VM's death\n+  if (gnu::classpath::jdwp::Jdwp::isDebugging)\n+    {\n+      using namespace gnu::classpath::jdwp;\n+      event::VmDeathEvent *event = new event::VmDeathEvent ();\n+      Jdwp::notify (event);\n+    }\n+\n   // If we got here then something went wrong, as MainThread is not\n   // supposed to terminate.\n   ::exit (1);"}]}