{"sha": "24d630163b15482845ffef8c733653281008016f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkNjMwMTYzYjE1NDgyODQ1ZmZlZjhjNzMzNjUzMjgxMDA4MDE2Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-19T12:10:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-19T12:10:48Z"}, "message": "re PR tree-optimization/56384 (ICE in fold_binary_loc, at fold-const.c:10422)\n\n2013-02-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56384\n\t* tree-ssa-sccvn.h (struct vn_phi_s): Add type member.\n\t(vn_hash_type): Split out from ...\n\t(vn_hash_constant_with_type): ... here.\n\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Use vn_hash_type.\n\t(vn_phi_eq): Compare types from vn_phi_s structure.\n\t(vn_phi_lookup): Populate vn_phi_s type.\n\t(vn_phi_insert): Likewise.\n\n\t* gcc.dg/torture/pr56384.c: New testcase.\n\nFrom-SVN: r196136", "tree": {"sha": "9b4aeec6f3f6f83ed0fdf40cc3955ca4432abfbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b4aeec6f3f6f83ed0fdf40cc3955ca4432abfbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d630163b15482845ffef8c733653281008016f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d630163b15482845ffef8c733653281008016f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d630163b15482845ffef8c733653281008016f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d630163b15482845ffef8c733653281008016f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47cc28f568eff9f93ad63ca2cb730b865232f441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47cc28f568eff9f93ad63ca2cb730b865232f441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47cc28f568eff9f93ad63ca2cb730b865232f441"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "7a1657c323c95c33a16ddecf433deb12a7ecd826", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d630163b15482845ffef8c733653281008016f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d630163b15482845ffef8c733653281008016f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24d630163b15482845ffef8c733653281008016f", "patch": "@@ -1,3 +1,14 @@\n+2013-02-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56384\n+\t* tree-ssa-sccvn.h (struct vn_phi_s): Add type member.\n+\t(vn_hash_type): Split out from ...\n+\t(vn_hash_constant_with_type): ... here.\n+\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Use vn_hash_type.\n+\t(vn_phi_eq): Compare types from vn_phi_s structure.\n+\t(vn_phi_lookup): Populate vn_phi_s type.\n+\t(vn_phi_insert): Likewise.\n+\n 2013-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56350"}, {"sha": "68ea2bd0c8598caa12bc34f2a33f9a39d4cf8515", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d630163b15482845ffef8c733653281008016f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d630163b15482845ffef8c733653281008016f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24d630163b15482845ffef8c733653281008016f", "patch": "@@ -1,3 +1,8 @@\n+2013-02-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56384\n+\t* gcc.dg/torture/pr56384.c: New testcase.\n+\n 2013-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56350"}, {"sha": "ef3cf0536bddfecd1ba966cfef1412524098474c", "filename": "gcc/testsuite/gcc.dg/torture/pr56384.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d630163b15482845ffef8c733653281008016f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56384.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d630163b15482845ffef8c733653281008016f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56384.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr56384.c?ref=24d630163b15482845ffef8c733653281008016f", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+\n+int a, c;\n+\n+void f(void)\n+{\n+  unsigned char b;\n+\n+  if(a)\n+    {\n+      for(; b < 1; b++);\n+lbl1:\n+      c = (b |= 0) ^ (b || a);\n+    }\n+\n+  if((a = b))\n+    {\n+      b = c;\n+      goto lbl1;\n+    }\n+\n+  b = 5;\n+  goto lbl1;\n+}"}, {"sha": "202980c19ef65a82f7ae7b7a91d184d717dfaedc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d630163b15482845ffef8c733653281008016f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d630163b15482845ffef8c733653281008016f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=24d630163b15482845ffef8c733653281008016f", "patch": "@@ -2401,10 +2401,8 @@ vn_phi_compute_hash (vn_phi_t vp1)\n \n   /* If all PHI arguments are constants we need to distinguish\n      the PHI node via its type.  */\n-  type = TREE_TYPE (vp1->phiargs[0]);\n-  result += (INTEGRAL_TYPE_P (type)\n-\t     + (INTEGRAL_TYPE_P (type)\n-\t\t? TYPE_PRECISION (type) + TYPE_UNSIGNED (type) : 0));\n+  type = vp1->type;\n+  result += vn_hash_type (type);\n \n   FOR_EACH_VEC_ELT (vp1->phiargs, i, phi1op)\n     {\n@@ -2443,8 +2441,7 @@ vn_phi_eq (const void *p1, const void *p2)\n \n       /* If the PHI nodes do not have compatible types\n \t they are not the same.  */\n-      if (!types_compatible_p (TREE_TYPE (vp1->phiargs[0]),\n-\t\t\t       TREE_TYPE (vp2->phiargs[0])))\n+      if (!types_compatible_p (vp1->type, vp2->type))\n \treturn false;\n \n       /* Any phi in the same block will have it's arguments in the\n@@ -2484,6 +2481,7 @@ vn_phi_lookup (gimple phi)\n       def = TREE_CODE (def) == SSA_NAME ? SSA_VAL (def) : def;\n       shared_lookup_phiargs.safe_push (def);\n     }\n+  vp1.type = TREE_TYPE (gimple_phi_result (phi));\n   vp1.phiargs = shared_lookup_phiargs;\n   vp1.block = gimple_bb (phi);\n   vp1.hashcode = vn_phi_compute_hash (&vp1);\n@@ -2516,6 +2514,7 @@ vn_phi_insert (gimple phi, tree result)\n       args.safe_push (def);\n     }\n   vp1->value_id = VN_INFO (result)->value_id;\n+  vp1->type = TREE_TYPE (gimple_phi_result (phi));\n   vp1->phiargs = args;\n   vp1->block = gimple_bb (phi);\n   vp1->result = result;"}, {"sha": "072f7ddf65e48fdafeb5ca9d31bc1f1380aa54e1", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d630163b15482845ffef8c733653281008016f/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d630163b15482845ffef8c733653281008016f/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=24d630163b15482845ffef8c733653281008016f", "patch": "@@ -67,6 +67,7 @@ typedef struct vn_phi_s\n   hashval_t hashcode;\n   vec<tree> phiargs;\n   basic_block block;\n+  tree type;\n   tree result;\n } *vn_phi_t;\n typedef const struct vn_phi_s *const_vn_phi_t;\n@@ -122,17 +123,25 @@ typedef struct vn_constant_s\n enum vn_kind { VN_NONE, VN_CONSTANT, VN_NARY, VN_REFERENCE, VN_PHI };\n enum vn_kind vn_get_stmt_kind (gimple);\n \n+/* Hash the type TYPE using bits that distinguishes it in the\n+   types_compatible_p sense.  */\n+\n+static inline hashval_t\n+vn_hash_type (tree type)\n+{\n+  return (INTEGRAL_TYPE_P (type)\n+\t  + (INTEGRAL_TYPE_P (type)\n+\t     ? TYPE_PRECISION (type) + TYPE_UNSIGNED (type) : 0));\n+}\n+\n /* Hash the constant CONSTANT with distinguishing type incompatible\n    constants in the types_compatible_p sense.  */\n \n static inline hashval_t\n vn_hash_constant_with_type (tree constant)\n {\n-  tree type = TREE_TYPE (constant);\n   return (iterative_hash_expr (constant, 0)\n-\t  + INTEGRAL_TYPE_P (type)\n-\t  + (INTEGRAL_TYPE_P (type)\n-\t     ? TYPE_PRECISION (type) + TYPE_UNSIGNED (type) : 0));\n+\t  + vn_hash_type (TREE_TYPE (constant)));\n }\n \n /* Compare the constants C1 and C2 with distinguishing type incompatible"}]}