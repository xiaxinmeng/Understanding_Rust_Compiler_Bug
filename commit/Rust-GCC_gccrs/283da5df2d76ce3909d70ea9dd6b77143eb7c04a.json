{"sha": "283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzZGE1ZGYyZDc2Y2UzOTA5ZDcwZWE5ZGQ2Yjc3MTQzZWI3YzA0YQ==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-04-04T05:02:10Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-04-04T05:02:10Z"}, "message": "re PR c++/19199 (Wrong warning about returning a reference to a temporary)\n\n2005-04-03  Roger Sayle  <roger@eyesopen.com>\n\t    Alexandre Oliva  <aoliva@redhat.com>\n\n\tPR c++/19199\n\t* fold-const.c (non_lvalue): Split tests into...\n\t(maybe_lvalue_p): New function.\n\t(fold_cond_expr_with_comparison): Preserve lvalue-ness for the\n\tC++ front-end prior to lowering into gimple form.\n\n\t* g++.dg/expr/lval2.C: New.\n\n\t* expr2.C: Fixed.\n\nFrom-SVN: r97522", "tree": {"sha": "7edc4f9f0dabe9c7e7d4bdddc9d08b31857564fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7edc4f9f0dabe9c7e7d4bdddc9d08b31857564fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/comments", "author": null, "committer": null, "parents": [{"sha": "af842ce06249a2b2b9d09867af8e0076486b1acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af842ce06249a2b2b9d09867af8e0076486b1acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af842ce06249a2b2b9d09867af8e0076486b1acc"}], "stats": {"total": 85, "additions": 75, "deletions": 10}, "files": [{"sha": "8c8faf304fd78f78ce7d5ba008376e135088115a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "patch": "@@ -1,3 +1,12 @@\n+2005-04-03  Roger Sayle  <roger@eyesopen.com>\n+\t    Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/19199\n+\t* fold-const.c (non_lvalue): Split tests into...\n+\t(maybe_lvalue_p): New function.\n+\t(fold_cond_expr_with_comparison): Preserve lvalue-ness for the\n+\tC++ front-end prior to lowering into gimple form.\n+\n 2005-04-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.def (BUILT_IN_STPNCPY, BUILT_IN_STRCASECMP,"}, {"sha": "0b9a71f09f7b3152db890566b66cd179f59e40e5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "patch": "@@ -2003,16 +2003,13 @@ fold_convert (tree type, tree arg)\n     }\n }\n \f\n+/* Return false if expr can be assumed not to be an value, true\n+   otherwise.  */\n /* Return an expr equal to X but certainly not valid as an lvalue.  */\n \n-tree\n-non_lvalue (tree x)\n+static bool\n+maybe_lvalue_p (tree x)\n {\n-  /* While we are in GIMPLE, NON_LVALUE_EXPR doesn't mean anything to\n-     us.  */\n-  if (in_gimple_form)\n-    return x;\n-\n   /* We only need to wrap lvalue tree codes.  */\n   switch (TREE_CODE (x))\n   {\n@@ -2052,8 +2049,24 @@ non_lvalue (tree x)\n     /* Assume the worst for front-end tree codes.  */\n     if ((int)TREE_CODE (x) >= NUM_TREE_CODES)\n       break;\n-    return x;\n+    return false;\n   }\n+\n+  return true;\n+}\n+\n+/* Return an expr equal to X but certainly not valid as an lvalue.  */\n+\n+tree\n+non_lvalue (tree x)\n+{\n+  /* While we are in GIMPLE, NON_LVALUE_EXPR doesn't mean anything to\n+     us.  */\n+  if (in_gimple_form)\n+    return x;\n+\n+  if (! maybe_lvalue_p (x))\n+    return x;\n   return build1 (NON_LVALUE_EXPR, TREE_TYPE (x), x);\n }\n \n@@ -4273,7 +4286,13 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n      a number and A is not.  The conditions in the original\n      expressions will be false, so all four give B.  The min()\n      and max() versions would give a NaN instead.  */\n-  if (operand_equal_for_comparison_p (arg01, arg2, arg00))\n+  if (operand_equal_for_comparison_p (arg01, arg2, arg00)\n+      /* Avoid these transformations if the COND_EXPR may be used\n+\t as an lvalue in the C++ front-end.  PR c++/19199.  */\n+      && (in_gimple_form\n+\t  || strcmp (lang_hooks.name, \"GNU C++\") != 0\n+\t  || ! maybe_lvalue_p (arg1)\n+\t  || ! maybe_lvalue_p (arg2)))\n     {\n       tree comp_op0 = arg00;\n       tree comp_op1 = arg01;"}, {"sha": "207e82429193a4ee0f3257b19d58637fa31f4ee7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "patch": "@@ -1,3 +1,8 @@\n+2005-04-03  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/19199\n+\t* g++.dg/expr/lval2.C: New.\n+\n 2005-04-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/nonnull-3.c: Also test __builtin_stpncpy,"}, {"sha": "5d062f1c62889494963c7e3d23db476574eaa9ae", "filename": "gcc/testsuite/g++.dg/expr/lval2.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Flval2.C?ref=283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/19199\n+\n+// { dg-do run }\n+\n+// We used to turn the COND_EXPR lvalue into a MIN_EXPR rvalue, and\n+// then return a reference to a temporary in qMin.\n+\n+#include <assert.h>\n+\n+enum Foo { A, B };\n+\n+template<typename T> T &qMin(T &a, T &b) \n+{\n+  return a < b ? a : b;\n+}\n+\n+int main (int,  char **)\n+{\n+  Foo f = A;\n+  Foo g = B;\n+  Foo &h = qMin(f, g);\n+  assert (&h == &f || &h == &g);\n+  const Foo &i = qMin((const Foo&)f, (const Foo&)g);\n+  assert (&i == &f || &i == &g);\n+  return 0;\n+}\n+"}, {"sha": "448ea13a6818f7cf127eb52ea93bf2b061dd1115", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2FChangeLog?ref=283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "patch": "@@ -1,3 +1,8 @@\n+2005-04-03  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/19199\n+\t* expr2.C: Fixed.\n+\n 2003-06-04  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* template1.C (bar): Remove xfail marker."}, {"sha": "1e63c645b6c16f05da4b258c4202b0c7e70837c8", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/expr2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fexpr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/283da5df2d76ce3909d70ea9dd6b77143eb7c04a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fexpr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Fexpr2.C?ref=283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail *-*-* } }\n+// { dg-do run }\n \n // Copyright (C) 2000 Free Software Foundation\n "}]}