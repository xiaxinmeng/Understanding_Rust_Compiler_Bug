{"sha": "ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5ZTZkZDU2Y2QwNzMxMWZjZTAxMmY0Y2ZlMmM3NDAwN2Q3ZmZjZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-02-03T17:16:17Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-02-03T17:16:17Z"}, "message": "re PR c++/46890 (Failed to compile scummvm's player_v4a.cpp)\n\ngcc/c-family/\n\tPR c++/46890\n\t* c-common.h (keyword_is_decl_specifier): Declare.\n\t* c-common.c (keyword_is_decl_specifier): Define.\n\t(keyword_is_function_specifier): New function.\n\ngcc/cp/\n\tPR c++/46890\n\t* parser.c (cp_parser_class_specifier): Fix setting of\n\twant_semicolon.\n\ngcc/testsuite/\n\tPR c++/46890\n\t* g++.dg/parser/semicolon3.C: Adjust.\n\t* g++.dg/parser/semicolon4.C: New testcase.\n\t* g++.dg/pr46890.C: New testcase.\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r169797", "tree": {"sha": "3037e42c4d4fe6047d9ad5d3c4f084f3e0c0dc39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3037e42c4d4fe6047d9ad5d3c4f084f3e0c0dc39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/comments", "author": null, "committer": null, "parents": [{"sha": "4ba67a06590810f6ecbe55cc69c94634fc71ddbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba67a06590810f6ecbe55cc69c94634fc71ddbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba67a06590810f6ecbe55cc69c94634fc71ddbb"}], "stats": {"total": 167, "additions": 158, "deletions": 9}, "files": [{"sha": "ec0acab6ee10d3ddbc2b4d744d36645307fb02f6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -1,3 +1,10 @@\n+2011-02-03  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/46890\n+\t* c-common.h (keyword_is_decl_specifier): Declare.\n+\t* c-common.c (keyword_is_decl_specifier): Define.\n+\t(keyword_is_function_specifier): New function.\n+\n 2011-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/47473"}, {"sha": "3e460195850424bd7fe4f0813c88c1db6fd9eeb5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -9653,4 +9653,42 @@ keyword_is_storage_class_specifier (enum rid keyword)\n     }\n }\n \n+/* Return true if KEYWORD names a function-specifier [dcl.fct.spec].  */\n+\n+static bool\n+keyword_is_function_specifier (enum rid keyword)\n+{\n+  switch (keyword)\n+    {\n+    case RID_INLINE:\n+    case RID_VIRTUAL:\n+    case RID_EXPLICIT:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* Return true if KEYWORD names a decl-specifier [dcl.spec] or a\n+   declaration-specifier (C99 6.7).  */\n+\n+bool\n+keyword_is_decl_specifier (enum rid keyword)\n+{\n+  if (keyword_is_storage_class_specifier (keyword)\n+      || keyword_is_type_qualifier (keyword)\n+      || keyword_is_function_specifier (keyword))\n+    return true;\n+\n+  switch (keyword)\n+    {\n+    case RID_TYPEDEF:\n+    case RID_FRIEND:\n+    case RID_CONSTEXPR:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "406def96e16fb59e2c35c14e164ed1688f52cad3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -741,6 +741,7 @@ extern bool float_const_decimal64_p (void);\n extern bool keyword_begins_type_specifier (enum rid);\n extern bool keyword_is_storage_class_specifier (enum rid);\n extern bool keyword_is_type_qualifier (enum rid);\n+extern bool keyword_is_decl_specifier (enum rid);\n \n #define c_sizeof(LOC, T)  c_sizeof_or_alignof_type (LOC, T, true, 1)\n #define c_alignof(LOC, T) c_sizeof_or_alignof_type (LOC, T, false, 1)"}, {"sha": "65edb9c47a511ea5768b542141b9ebf14885fd55", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -1,3 +1,9 @@\n+2011-02-03  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/46890\n+\t* parser.c (cp_parser_class_specifier): Fix setting of\n+\twant_semicolon.\n+\n 2011-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/47416"}, {"sha": "11039b899ccd4e94f0585f3be5aeffb5ea789d08", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -16998,18 +16998,15 @@ cp_parser_class_specifier (cp_parser* parser)\n \t   class Z { }\n \t   static const <type> var = ...;  */\n       case CPP_KEYWORD:\n-\tif (keyword_is_storage_class_specifier (token->keyword)\n-\t    || keyword_is_type_qualifier (token->keyword))\n+\tif (keyword_is_decl_specifier (token->keyword))\n \t  {\n \t    cp_token *lookahead = cp_lexer_peek_nth_token (parser->lexer, 2);\n \n-\t    if (lookahead->type == CPP_KEYWORD\n-\t\t&& !keyword_begins_type_specifier (lookahead->keyword))\n-\t      want_semicolon = false;\n-\t    else if (lookahead->type == CPP_NAME)\n-\t      /* Handling user-defined types here would be nice, but\n-\t\t very tricky.  */\n-\t      want_semicolon = false;\n+\t    /* Handling user-defined types here would be nice, but very\n+\t       tricky.  */\n+\t    want_semicolon\n+\t      = (lookahead->type == CPP_KEYWORD\n+\t\t && keyword_begins_type_specifier (lookahead->keyword));\n \t  }\n \tbreak;\n       default:"}, {"sha": "5adb4a39809fadcb7b92a2292df06444c1b0a9e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -1,3 +1,11 @@\n+2011-02-03  Nathan Froyd  <froydnj@codesourcery.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/46890\n+\t* g++.dg/parser/semicolon3.C: Adjust.\n+\t* g++.dg/parser/semicolon4.C: New testcase.\n+\t* g++.dg/pr46890.C: New testcase.\n+\n 2011-02-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/29571"}, {"sha": "bc43b48cff700810943d4d89578bdf1cd71919ae", "filename": "gcc/testsuite/g++.dg/parse/semicolon3.C", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon3.C?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -62,6 +62,48 @@ autotest (void)\n   return ok10.a;\n }\n \n+struct OK11\n+{\n+  int a;\n+} // no complaints\n+  const *ok11_var;\n+\n+struct OK12\n+{\n+  int a;\n+} // no complaints\n+  const &ok12_var = *(new OK12());\n+\n+struct OK13\n+{\n+  int a;\n+} // no complaints\n+  static *ok13_var;\n+\n+class OK14\n+{\n+  struct OK14sub\n+  {\n+    int a;\n+  } // no complaints\n+    static &ok14_var;\n+};\n+\n+class OK15\n+{\n+  int a;\n+} typedef tOK15;\n+\n+class OK16\n+{\n+  int a;\n+} typedef *pOK16;\n+\n+class OK17\n+{\n+  int a;\n+} typedef &rOK16;\n+\n struct E1\n {\n   int a;\n@@ -196,6 +238,13 @@ class E17\n     mutable int i;\n } // { dg-error \"after class definition\" }\n \n+class E18\n+{\n+  int a;\n+} // { dg-error \"after class definition\" }\n+\n+typedef int E18int;\n+\n /* This was the original test from the PR.  */\n \n class C0"}, {"sha": "adba7a873c0a2de10f60c53171dff038a228fe64", "filename": "gcc/testsuite/g++.dg/parse/semicolon4.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsemicolon4.C?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/46890\n+// { dg-do compile }\n+\n+struct OK1\n+{\n+  int i;\n+} const *ok1_var;\t\t// No complains\n+\n+struct OK2;\n+extern OK2 ok2a_var;\n+\n+struct OK2\n+{\n+  int i;\n+} const &ok2_var = ok2a_var;\t// No complains\n+\n+struct OK3\n+{\n+  int i;\n+} volatile (ok3_var);\t\t// No complains\n+\n+struct E1\n+{\n+  int i;\n+} const;\t\t\t// { dg-error \"qualifiers can only be specified for objects and functions\" }\n+\n+void foo (\n+struct E2\n+{\t\t\t\t// { dg-error \"types may not be defined in parameter types\" }\n+  int i;\n+} volatile);\n+\n+void bar (\n+struct E3\n+{\t\t\t\t// { dg-error \"types may not be defined in parameter types\" }\n+  int i;\n+} const, int);"}, {"sha": "3ecef5a52a3153f6004f4a799ef4121b742ecc59", "filename": "gcc/testsuite/g++.dg/pr46890.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46890.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46890.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46890.C?ref=ba9e6dd56cd07311fce012f4cfe2c74007d7ffcd", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/46890\n+// { dg-do compile }\n+\n+struct MdatResource {\n+const char *mdatAlloc;\n+} const *_resource;"}]}