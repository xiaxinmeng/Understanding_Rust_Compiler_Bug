{"sha": "2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY0MzRiOTdmMTc2YWNiNjBiMzQ1ZDJkMTM1YTBlMTVmY2I1YzViNw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2010-09-13T14:18:31Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2010-09-13T14:18:31Z"}, "message": "fwprop.c (forward_propagate_and_simplify): Only attach a REG_EQUAL note to an insn if the destination is a register.\n\n        * fwprop.c (forward_propagate_and_simplify): Only attach a\n        REG_EQUAL note to an insn if the destination is a register.\n        * gcse.c (try_replace_reg): Likewise.\n\n        testsuite/\n        * gnat.dg/memtrap.adb: New test.\n\nFrom-SVN: r164245", "tree": {"sha": "4c9cd35e7dd224f5d801377b48766612c1f477f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c9cd35e7dd224f5d801377b48766612c1f477f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "654a61fb34739e051618c5af90e8bfa77b84a8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654a61fb34739e051618c5af90e8bfa77b84a8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654a61fb34739e051618c5af90e8bfa77b84a8d2"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "962928714c8506ab0662904805ce045d8fa194bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "patch": "@@ -1,3 +1,9 @@\n+2010-09-13  Olivier Hainque  <hainque@adacore.com>\n+\n+        * fwprop.c (forward_propagate_and_simplify): Only attach a\n+\tREG_EQUAL note to an insn if the destination is a register.\n+        * gcse.c (try_replace_reg): Likewise.\n+\n 2010-09-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45611"}, {"sha": "b54ff501fea22ca2c518490c8b48b70d7e548251", "filename": "gcc/fwprop.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "patch": "@@ -1294,10 +1294,11 @@ forward_propagate_and_simplify (df_ref use, rtx def_insn, rtx def_set)\n \tloc = &SET_SRC (use_set);\n \n       /* Do not replace an existing REG_EQUAL note if the insn is not\n-\t recognized.  Either we're already replacing in the note, or\n-\t we'll separately try plugging the definition in the note and\n-\t simplifying.  */\n-      set_reg_equal = (note == NULL_RTX);\n+\t recognized.  Either we're already replacing in the note, or we'll\n+\t separately try plugging the definition in the note and simplifying.\n+\t And only install a REQ_EQUAL note when the destination is a REG,\n+\t as the note would be invalid otherwise.  */\n+      set_reg_equal = (note == NULL_RTX && REG_P (SET_DEST (use_set)));\n     }\n \n   if (GET_MODE (*loc) == VOIDmode)"}, {"sha": "39a5d223338ed8240c43d987e8af040a07893371", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "patch": "@@ -2351,12 +2351,10 @@ try_replace_reg (rtx from, rtx to, rtx insn)\n \t  && validate_change (insn, &SET_SRC (set), src, 0))\n \tsuccess = 1;\n \n-      /* If we've failed to do replacement, have a single SET, don't already\n-\t have a note, and have no special SET, add a REG_EQUAL note to not\n-\t lose information.  */\n-      if (!success && note == 0 && set != 0\n-\t  && GET_CODE (SET_DEST (set)) != ZERO_EXTRACT\n-\t  && GET_CODE (SET_DEST (set)) != STRICT_LOW_PART)\n+      /* If we've failed perform the replacement, have a single SET to\n+\t a REG destination and don't yet have a note, add a REG_EQUAL note\n+\t to not lose information.  */\n+      if (!success && note == 0 && set != 0 && REG_P (SET_DEST (set)))\n \tnote = set_unique_reg_note (insn, REG_EQUAL, copy_rtx (src));\n     }\n "}, {"sha": "f01d8ba6b013133944afe65787d0c2222a275107", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "patch": "@@ -1,3 +1,7 @@\n+2010-09-12  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/memtrap.adb: New test.\n+\n 2010-09-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* gfortran.dg/promotion.f90: Fix options."}, {"sha": "b755759bac72e2ca06f64c93984ed8d77e45e2ac", "filename": "gcc/testsuite/gnat.dg/memtrap.adb", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Ftestsuite%2Fgnat.dg%2Fmemtrap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f434b97f176acb60b345d2d135a0e15fcb5c5b7/gcc%2Ftestsuite%2Fgnat.dg%2Fmemtrap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmemtrap.adb?ref=2f434b97f176acb60b345d2d135a0e15fcb5c5b7", "patch": "@@ -0,0 +1,30 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+with System;\n+\n+procedure Memtrap is\n+  X : integer;\n+  for X'address use System.Null_Address;\n+begin\n+  X := 12;\n+exception\n+   when others => null;\n+end;\n+\n+-- { dg-final { scan-assembler \"__gnat_begin_handler\" } }\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+with System;\n+\n+procedure Memtrap is\n+  X : integer;\n+  for X'address use System.Null_Address;\n+begin\n+  X := 12;\n+exception\n+   when others => null;\n+end;\n+\n+-- { dg-final { scan-assembler \"__gnat_begin_handler|__gnat_raise_nodefer\" } }"}]}