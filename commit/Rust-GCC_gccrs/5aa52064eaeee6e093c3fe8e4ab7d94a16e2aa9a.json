{"sha": "5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFhNTIwNjRlYWVlZTZlMDkzYzNmZThlNGFiN2Q5NGExNmUyYWE5YQ==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-01-19T00:38:34Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-01-19T00:38:34Z"}, "message": "re PR tree-optimization/26854 (Inordinate compile times on large routines)\n\n2008-01-18  Kenneth Zadeck  <zadeck@naturalbridge.com>\n\t    Steven Bosscher  <stevenb.gcc@gmail.com>\n\n\tPR rtl-optimization/26854\n\tPR rtl-optimization/34400\n\t* df-problems.c (df_live_scratch): New scratch bitmap.\n\t(df_live_alloc): Allocate df_live_scratch when doing df_live.\n\t(df_live_reset): Clear the proper bitmaps.\n\t(df_live_bb_local_compute): Only process the artificial defs once\n\tsince the order is not important.\n\t(df_live_init): Init the df_live sets only with the variables\n\tfound live by df_lr.\n\t(df_live_transfer_function): Use the df_lr sets to prune the\n\tdf_live sets as they are being computed.  \n\t(df_live_free): Free df_live_scratch.\n\n\nCo-Authored-By: Steven Bosscher <stevenb.gcc@gmail.com>\n\nFrom-SVN: r131649", "tree": {"sha": "6c8cf62dfe4e55586b702f4f96b2556aafa8d961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c8cf62dfe4e55586b702f4f96b2556aafa8d961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b5998967769804f2505b8be7a92185b0109e743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b5998967769804f2505b8be7a92185b0109e743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b5998967769804f2505b8be7a92185b0109e743"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "2276eba7ec3e9d6cee74dd0db07ef1596a08b62f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a", "patch": "@@ -1,3 +1,19 @@\n+2008-01-18  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\tPR rtl-optimization/26854\n+\tPR rtl-optimization/34400\n+\t* df-problems.c (df_live_scratch): New scratch bitmap.\n+\t(df_live_alloc): Allocate df_live_scratch when doing df_live.\n+\t(df_live_reset): Clear the proper bitmaps.\n+\t(df_live_bb_local_compute): Only process the artificial defs once\n+\tsince the order is not important.\n+\t(df_live_init): Init the df_live sets only with the variables\n+\tfound live by df_lr.\n+\t(df_live_transfer_function): Use the df_lr sets to prune the\n+\tdf_live sets as they are being computed.  \n+\t(df_live_free): Free df_live_scratch.\n+\n 2008-01-18  Ian Lance Taylor  <iant@google.com>\n \n \t* common.opt: Add fmerge-debug-strings."}, {"sha": "ff5a4ad03da37a8d0c2cc2dc19737549013cb588", "filename": "gcc/df-problems.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=5aa52064eaeee6e093c3fe8e4ab7d94a16e2aa9a", "patch": "@@ -1329,6 +1329,10 @@ struct df_live_problem_data\n   bitmap *out;\n };\n \n+/* Scratch var used by transfer functions.  This is used to implement\n+   an optimization to reduce the amount of space used to compute the\n+   combined lr and live analysis.  */\n+static bitmap df_live_scratch;\n \n /* Set basic block info.  */\n \n@@ -1372,6 +1376,8 @@ df_live_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n   if (!df_live->block_pool)\n     df_live->block_pool = create_alloc_pool (\"df_live_block pool\", \n \t\t\t\t\t   sizeof (struct df_live_bb_info), 100);\n+  if (!df_live_scratch)\n+    df_live_scratch = BITMAP_ALLOC (NULL);\n \n   df_grow_bb_info (df_live);\n \n@@ -1407,7 +1413,7 @@ df_live_reset (bitmap all_blocks)\n \n   EXECUTE_IF_SET_IN_BITMAP (all_blocks, 0, bb_index, bi)\n     {\n-      struct df_lr_bb_info *bb_info = df_lr_get_bb_info (bb_index);\n+      struct df_live_bb_info *bb_info = df_live_get_bb_info (bb_index);\n       gcc_assert (bb_info);\n       bitmap_clear (bb_info->in);\n       bitmap_clear (bb_info->out);\n@@ -1426,13 +1432,6 @@ df_live_bb_local_compute (unsigned int bb_index)\n   struct df_ref **def_rec;\n   int luid = 0;\n \n-  for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n-    {\n-      struct df_ref *def = *def_rec;\n-      if (DF_REF_FLAGS (def) & DF_REF_AT_TOP)\n-\tbitmap_set_bit (bb_info->gen, DF_REF_REGNO (def));\n-    }\n-\n   FOR_BB_INSNS (bb, insn)\n     {\n       unsigned int uid = INSN_UID (insn);\n@@ -1473,8 +1472,7 @@ df_live_bb_local_compute (unsigned int bb_index)\n   for (def_rec = df_get_artificial_defs (bb_index); *def_rec; def_rec++)\n     {\n       struct df_ref *def = *def_rec;\n-      if ((DF_REF_FLAGS (def) & DF_REF_AT_TOP) == 0)\n-\tbitmap_set_bit (bb_info->gen, DF_REF_REGNO (def));\n+      bitmap_set_bit (bb_info->gen, DF_REF_REGNO (def));\n     }\n }\n \n@@ -1510,8 +1508,11 @@ df_live_init (bitmap all_blocks)\n   EXECUTE_IF_SET_IN_BITMAP (all_blocks, 0, bb_index, bi)\n     {\n       struct df_live_bb_info *bb_info = df_live_get_bb_info (bb_index);\n+      struct df_lr_bb_info *bb_lr_info = df_lr_get_bb_info (bb_index);\n \n-      bitmap_copy (bb_info->out, bb_info->gen);\n+      /* No register may reach a location where it is not used.  Thus\n+\t we trim the rr result to the places where it is used.  */\n+      bitmap_and (bb_info->out, bb_info->gen, bb_lr_info->out);\n       bitmap_clear (bb_info->in);\n     }\n }\n@@ -1537,12 +1538,22 @@ static bool\n df_live_transfer_function (int bb_index)\n {\n   struct df_live_bb_info *bb_info = df_live_get_bb_info (bb_index);\n+  struct df_lr_bb_info *bb_lr_info = df_lr_get_bb_info (bb_index);\n   bitmap in = bb_info->in;\n   bitmap out = bb_info->out;\n   bitmap gen = bb_info->gen;\n   bitmap kill = bb_info->kill;\n \n-  return bitmap_ior_and_compl (out, gen, in, kill);\n+  /* We need to use a scratch set here so that the value returned from\n+     this function invocation properly reflects if the sets changed in\n+     a significant way; i.e. not just because the lr set was anded\n+     in.  */\n+  bitmap_and (df_live_scratch, gen, bb_lr_info->out);\n+  /* No register may reach a location where it is not used.  Thus\n+     we trim the rr result to the places where it is used.  */\n+  bitmap_and_into (in, bb_lr_info->in);\n+\n+  return bitmap_ior_and_compl (out, df_live_scratch, in, kill);\n }\n \n \n@@ -1597,6 +1608,9 @@ df_live_free (void)\n       free_alloc_pool (df_live->block_pool);\n       df_live->block_info_size = 0;\n       free (df_live->block_info);\n+\n+      if (df_live_scratch)\n+\tBITMAP_FREE (df_live_scratch);\n     }\n   BITMAP_FREE (df_live->out_of_date_transfer_functions);\n   free (df_live);"}]}