{"sha": "8daac7749f44e79c918162dd27be7981a72c1f87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRhYWM3NzQ5ZjQ0ZTc5YzkxODE2MmRkMjdiZTc5ODFhNzJjMWY4Nw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-07-12T01:32:20Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-07-12T01:32:20Z"}, "message": "Add the logistic_distribution as an extension.\n\n2014-07-11  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tAdd the logistic_distribution as an extension.\n\t* include/ext/random: Add the logistic_distribution.\n\t* include/ext/random.tcc: Add the logistic_distribution.\n\t* testsuite/ext/random/logistic_distribution/cons/parms.cc: New.\n\t* testsuite/ext/random/logistic_distribution/cons/default.cc: New.\n\t* testsuite/ext/random/logistic_distribution/requirements/typedefs.cc:\n\tNew.\n\t* testsuite/ext/random/logistic_distribution/operators/inequal.cc: New.\n\t* testsuite/ext/random/logistic_distribution/operators/equal.cc: New.\n\t* testsuite/ext/random/logistic_distribution/operators/serialize.cc:\n\tNew.\n\nFrom-SVN: r212476", "tree": {"sha": "e7b4279b5a688b1cc3362cbca6e90e12d1ca7844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7b4279b5a688b1cc3362cbca6e90e12d1ca7844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8daac7749f44e79c918162dd27be7981a72c1f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8daac7749f44e79c918162dd27be7981a72c1f87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8daac7749f44e79c918162dd27be7981a72c1f87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8daac7749f44e79c918162dd27be7981a72c1f87/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b150cb41c8acbe55e59e5ce77e135d517dc2ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b150cb41c8acbe55e59e5ce77e135d517dc2ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b150cb41c8acbe55e59e5ce77e135d517dc2ce2"}], "stats": {"total": 668, "additions": 633, "deletions": 35}, "files": [{"sha": "c8a6a6d95c6487c88552975e07b050ba6c053e84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -1,3 +1,17 @@\n+2014-07-11  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tAdd the logistic_distribution as an extension.\n+\t* include/ext/random: Add the logistic_distribution.\n+\t* include/ext/random.tcc: Add the logistic_distribution.\n+\t* testsuite/ext/random/logistic_distribution/cons/parms.cc: New.\n+\t* testsuite/ext/random/logistic_distribution/cons/default.cc: New.\n+\t* testsuite/ext/random/logistic_distribution/requirements/typedefs.cc:\n+\tNew.\n+\t* testsuite/ext/random/logistic_distribution/operators/inequal.cc: New.\n+\t* testsuite/ext/random/logistic_distribution/operators/equal.cc: New.\n+\t* testsuite/ext/random/logistic_distribution/operators/serialize.cc:\n+\tNew.\n+\n 2014-07-11  Samuel Bronson  <naesten@gmail.com>\n \n \t* testsuite/lib/libstdc++.exp  (libstdc++_init): Set $GCC_COLORS=\"\""}, {"sha": "eab3fb8ef3241d55c0a0df23aaa5e8a058a9b340", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 222, "deletions": 35, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -2728,41 +2728,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p)\n-\t{\n-\t  const result_type __pi\n-\t    = __gnu_cxx::__math_constants<result_type>::__pi;\n-\t  std::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n-\t    __aurng(__urng);\n-\n-\t  result_type __f;\n-\t  while (1)\n-\t    {\n-\t      result_type __rnd = std::cos(__pi * __aurng());\n-\t      __f = (result_type(1) + __p._M_r * __rnd) / (__p._M_r + __rnd);\n-\t      result_type __c = __p._M_kappa * (__p._M_r - __f);\n-\n-\t      result_type __rnd2 = __aurng();\n-\t      if (__c * (result_type(2) - __c) > __rnd2)\n-\t\tbreak;\n-\t      if (std::log(__c / __rnd2) >= __c - result_type(1))\n-\t\tbreak;\n-\t    }\n-\n-\t  result_type __res = std::acos(__f);\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-\t  __res = std::copysign(__res, __aurng() - result_type(0.5));\n-#else\n-\t  if (__aurng() < result_type(0.5))\n-\t    __res = -__res;\n-#endif\n-\t  __res += __p._M_mu;\n-\t  if (__res > __pi)\n-\t    __res -= result_type(2) * __pi;\n-\t  else if (__res < -__pi)\n-\t    __res += result_type(2) * __pi;\n-\t  return __res;\n-\t}\n+\t\t   const param_type& __p);\n \n       template<typename _ForwardIterator,\n \t       typename _UniformRandomNumberGenerator>\n@@ -3106,6 +3072,227 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const __gnu_cxx::hypergeometric_distribution<_UIntType>& __d2)\n     { return !(__d1 == __d2); }\n \n+  /**\n+   * @brief A logistic continuous distribution for random numbers.\n+   *\n+   * The formula for the logistic probability density function is\n+   * @f[\n+   *     p(x|\\a,\\b) = \\frac{e^{(x - a)/b}}{b[1 + e^{(x - a)/b}]^2}\n+   * @f]\n+   * where @f$b > 0@f$.\n+   *\n+   * The formula for the logistic probability function is\n+   * @f[\n+   *     cdf(x|\\a,\\b) = \\frac{e^{(x - a)/b}}{1 + e^{(x - a)/b}}\n+   * @f]\n+   * where @f$b > 0@f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$a@f$</td></tr>\n+   * <tr><td>Variance</td><td>@f$b^2\\pi^2/3@f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[0, \\infty)@f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class\n+    logistic_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef logistic_distribution<result_type> distribution_type;\n+\n+\tparam_type(result_type __a = result_type(0),\n+\t\t   result_type __b = result_type(1))\n+\t: _M_a(__a), _M_b(__b)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_b > result_type(0));\n+\t}\n+\n+\tresult_type\n+\ta() const\n+\t{ return _M_a; }\n+\n+\tresult_type\n+\tb() const\n+\t{ return _M_b; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a\n+              && __p1._M_b == __p2._M_b; }\n+\n+      private:\n+\tvoid _M_initialize();\n+\n+\tresult_type _M_a;\n+\tresult_type _M_b;\n+      };\n+\n+      /**\n+       * @brief Constructors.\n+       */\n+      explicit\n+      logistic_distribution(result_type __a = result_type(0),\n+\t\t\t    result_type __b = result_type(1))\n+      : _M_param(__a, __b)\n+      { }\n+\n+      explicit\n+      logistic_distribution(const param_type& __p)\n+      : _M_param(__p)\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { }\n+\n+      /**\n+       * @brief Return the parameters of the distribution.\n+       */\n+      result_type\n+      a() const\n+      { return _M_param.a(); }\n+\n+      result_type\n+      b() const\n+      { return _M_param.b(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return -std::numeric_limits<result_type>::max(); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return std::numeric_limits<result_type>::max(); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, this->_M_param); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator&,\n+\t\t   const param_type&);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two logistic distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<typename _RealType1>\n+        friend bool\n+        operator==(const logistic_distribution<_RealType1>& __d1,\n+\t\t   const logistic_distribution<_RealType1>& __d2)\n+        { return __d1.param() == __d2.param(); }\n+\n+      /**\n+       * @brief Inserts a %logistic_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %logistic_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const logistic_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %logistic_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %logistic_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   logistic_distribution<_RealType1>&);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+    };\n+\n+  /**\n+   * @brief Return true if two logistic distributions are not equal.\n+   */\n+  template<typename _RealType1>\n+    inline bool\n+    operator!=(const logistic_distribution<_RealType1>& __d1,\n+\t       const logistic_distribution<_RealType1>& __d2)\n+    { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "ba9ab6dcce2fd6a0a5f121a6219bd1e3ddcecf22", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -1247,6 +1247,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename von_mises_distribution<_RealType>::result_type\n+      von_mises_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\tconst result_type __pi\n+\t  = __gnu_cxx::__math_constants<result_type>::__pi;\n+\tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tresult_type __f;\n+\twhile (1)\n+\t  {\n+\t    result_type __rnd = std::cos(__pi * __aurng());\n+\t    __f = (result_type(1) + __p._M_r * __rnd) / (__p._M_r + __rnd);\n+\t    result_type __c = __p._M_kappa * (__p._M_r - __f);\n+\n+\t    result_type __rnd2 = __aurng();\n+\t    if (__c * (result_type(2) - __c) > __rnd2)\n+\t      break;\n+\t    if (std::log(__c / __rnd2) >= __c - result_type(1))\n+\t      break;\n+\t  }\n+\n+\tresult_type __res = std::acos(__f);\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\t__res = std::copysign(__res, __aurng() - result_type(0.5));\n+#else\n+\tif (__aurng() < result_type(0.5))\n+\t  __res = -__res;\n+#endif\n+\t__res += __p._M_mu;\n+\tif (__res > __pi)\n+\t  __res -= result_type(2) * __pi;\n+\telse if (__res < -__pi)\n+\t  __res += result_type(2) * __pi;\n+\treturn __res;\n+      }\n+\n   template<typename _RealType>\n     template<typename _OutputIterator,\n \t     typename _UniformRandomNumberGenerator>\n@@ -1413,6 +1454,91 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename logistic_distribution<_RealType>::result_type\n+      logistic_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tresult_type __arg = result_type(1);\n+\twhile (__arg == result_type(1) || __arg == result_type(0))\n+\t  __arg = __aurng();\n+\treturn __p.a()\n+\t     + __p.b() * std::log(__arg / (result_type(1) - __arg));\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      logistic_distribution<_RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __p)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\tstd::__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\twhile (__f != __t)\n+\t  {\n+\t    result_type __arg = result_type(1);\n+\t    while (__arg == result_type(1) || __arg == result_type(0))\n+\t      __arg = __aurng();\n+\t    *__f++ = __p.a()\n+\t\t   + __p.b() * std::log(__arg / (result_type(1) - __arg));\n+\t  }\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const logistic_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.a() << __space << __x.b();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       logistic_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __a, __b;\n+      __is >> __a >> __b;\n+      __x.param(typename logistic_distribution<_RealType>::\n+\t\tparam_type(__a, __b));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "3b4c9439c786ed779efbadda49ef18a5947cd15d", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/cons/default.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fdefault.cc?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-07-11  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template logistic_distribution [rand.dist.ext.logistic]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::logistic_distribution<> u;\n+  VERIFY( u.a() == 0.0 );\n+  VERIFY( u.b() == 1.0 );\n+\n+  typedef __gnu_cxx::logistic_distribution<>::result_type result_type;\n+  VERIFY( u.min() == -std::numeric_limits<result_type>::max() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fed74f87ebc145d093cb0ecdc4c1f00d67e78f8c", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/cons/parms.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Fcons%2Fparms.cc?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-07-11  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template logistic_distribution [rand.dist.ext.logistic]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::logistic_distribution<> u(1.5, 3.0);\n+  VERIFY( u.a() == 1.5 );\n+  VERIFY( u.b() == 3.0 );\n+\n+  typedef __gnu_cxx::logistic_distribution<>::result_type result_type;\n+  VERIFY( u.min() == -std::numeric_limits<result_type>::max() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4f851925fc2c475cb5e4df5573da115ae2e2b506", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Fequal.cc?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-07-11  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template logistic_distribution [rand.dist.ext.logistic]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::logistic_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6d9ff426ca1603a96eb396108053f5950cd26c14", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/operators/inequal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Finequal.cc?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-07-11  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template logistic_distribution [rand.dist.ext.logistic]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::logistic_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "df071ee7d9a6d4ff2a8d3da3bf7e48bbb1825105", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/operators/serialize.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Foperators%2Fserialize.cc?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-07-11  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template logistic_distribution [rand.dist.ext.logistic]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::logistic_distribution<double> u(1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ff018cf067b74f4e043396c6f0b4ca53aa0c2731", "filename": "libstdc++-v3/testsuite/ext/random/logistic_distribution/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daac7749f44e79c918162dd27be7981a72c1f87/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Flogistic_distribution%2Frequirements%2Ftypedefs.cc?ref=8daac7749f44e79c918162dd27be7981a72c1f87", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2014-07-11  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.* Class template logistic_distribution [rand.dist.ext.logistic]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::logistic_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}