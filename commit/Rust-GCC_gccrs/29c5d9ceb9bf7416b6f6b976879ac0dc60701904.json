{"sha": "29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljNWQ5Y2ViOWJmNzQxNmI2ZjZiOTc2ODc5YWMwZGM2MDcwMTkwNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-17T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-17T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "f78c7e9a5bf632025f15d1f4eb8335d8e3d86624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f78c7e9a5bf632025f15d1f4eb8335d8e3d86624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/comments", "author": null, "committer": null, "parents": [{"sha": "a019766f996f57e53a8d1a9e72033e1e1487a150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a019766f996f57e53a8d1a9e72033e1e1487a150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a019766f996f57e53a8d1a9e72033e1e1487a150"}], "stats": {"total": 272, "additions": 271, "deletions": 1}, "files": [{"sha": "8844c4dc3f690a7154ee6331179d1233ea025290", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,7 @@\n+2020-11-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* .gitignore: Add cache as clangd uses it now.\n+\n 2020-11-13  Haochen Gui  <guihaoc@gcc.gnu.org>\n \n \t* MAINTAINERS (Write After Approval): add myself"}, {"sha": "a7454fc3f94fa925e0c7582efc107db4ca93990d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,8 @@\n+2020-11-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Do not call read on an input stream.\n+\tFix some flake8 issues.\n+\n 2020-11-07  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* unicode/EastAsianWidth.txt: Update to Unicode 13.0.0."}, {"sha": "1adcbd8a8c7886bfb8eb628c54b4f5b516a889ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,164 @@\n+2020-11-17  Armin Brauns via Gcc-patches  <gcc-patches@gcc.gnu.org>\n+\n+\t* gcc.c: Document %T spec file directive.\n+\t* doc/invoke.texi: Remove %p, %P spec file directives.\n+\tAdd %M, %R, %V, %nSTR, %>S, %<S*, %{%:function(args):X}, %@{...} spec\n+\tfile directives add sanitize, version-compare, include, gt and\n+\tdebug-level-gt spec functions.\n+\n+2020-11-16  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/92180\n+\t* config/i386/i386.c (ix86_hardreg_mov_ok): New function to\n+\tdetermine whether (set DST SRC) should be allowed at this point.\n+\t* config/i386/i386-protos.h (ix86_hardreg_mov_ok): Prototype here.\n+\t* config/i386/i386-expand.c (ix86_expand_move): Check whether\n+\tthis is a complex set of a likely spilled hard register, and if\n+\tso place the value in a pseudo, and load the hard reg from it.\n+\t* config/i386/i386.md (*movdi_internal, *movsi_internal)\n+\t(*movhi_internal, *movqi_internal): Make these instructions\n+\tconditional on ix86_hardreg_mov_ok.\n+\t(*lea<mode>): Make this define_insn_and_split conditional on\n+\tix86_hardreg_mov_ok.\n+\n+2020-11-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* params.opt: Add missing dot.\n+\n+2020-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (escape_point): New type.\n+\t(modref_lattice): New type.\n+\t(escape_entry): New type.\n+\t(escape_summary): New type.\n+\t(escape_summaries_t): New type.\n+\t(escape_summaries): New static variable.\n+\t(eaf_flags_useful_p): New function.\n+\t(modref_summary::useful_p): Add new check_flags\n+\tattribute; check eaf_flags for usefulness.\n+\t(modref_summary_lto): Add arg_flags.\n+\t(modref_summary_lto::useful_p): Add new check_flags\n+\tattribute; check eaf_flags for usefulness.\n+\t(dump_modref_edge_summaries): New function.\n+\t(remove_modref_edge_summaries): New function.\n+\t(ignore_retval_p): New predicate.\n+\t(ignore_stores_p): Also ignore for const.\n+\t(remove_summary): Call remove_modref_edge_summaries.\n+\t(modref_lattice::init): New member function.\n+\t(modref_lattice::release): New member unction.\n+\t(modref_lattice::dump): New member function.\n+\t(modref_lattice::add_escape_point): New member function.\n+\t(modref_lattice::merge): Two new member functions.\n+\t(modref_lattice::merge_deref): New member functions.\n+\t(modref_lattice::merge_direct_load): New member function.\n+\t(modref_lattice::merge_direct_store): New member function.\n+\t(call_lhs_flags): Rename to ...\n+\t(merge_call_lhs_flags): ... this one; reimplement using\n+\tmodreflattice.\n+\t(analyze_ssa_name_flags): Replace KNOWN_FLAGS param by LATTICE;\n+\tadd IPA parametr; use modref_lattice.\n+\t(analyze_parms): New parameter IPA and SUMMARY_LTO; update for\n+\tmodref_lattice; initialize escape_summary.\n+\t(analyze_function): Allocate escape_summaries; update uses of useful_p.\n+\t(modref_write_escape_summary): New function.\n+\t(modref_read_escape_summary): New function.\n+\t(modref_write): Write escape summary.\n+\t(read_section): Read escape summary.\n+\t(modref_read): Initialie escape_summaries.\n+\t(remap_arg_flags): New function.\n+\t(update_signature): Use it.\n+\t(escape_map): New structure.\n+\t(update_escape_summary_1, update_escape_summary): New functions.\n+\t(ipa_merge_modref_summary_after_inlining): Merge escape summaries.\n+\t(propagate_unknown_call): Do not remove useless summaries.\n+\t(remove_useless_summaries): Remove them here.\n+\t(modref_propagate_in_scc): Update; do not dump scc.\n+\t(modref_propagate_dump_scc): New function.\n+\t(modref_merge_call_site_flags): New function.\n+\t(modref_propagate_flags_in_scc): New function.\n+\t(pass_ipa_modref::execute): Use modref_propagate_flags_in_scc\n+\tand modref_propagate_dump_scc; delete escape_summaries.\n+\t(ipa_modref_c_finalize):  Remove escape_summaries.\n+\t* ipa-modref.h (modref_summary): Update prototype of useful_p.\n+\t* params.opt (param=modref-max-escape-points): New param.\n+\t* doc/invoke.texi (modref-max-escape-points): Document.\n+\n+2020-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/97840\n+\t* ipa-modref.c (analyze_ssa_name_flags): Skip clobbers if inlining\n+\tis done.\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Make stmt gcall;\n+\tskip const calls and unused arguments.\n+\t(warn_uninitialized_vars): Update prototype.\n+\n+2020-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_gather_slp_loads): Declare.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Call\n+\tvect_gather_slp_loads.\n+\t* tree-vect-slp.c (vect_build_slp_instance): Do not gather\n+\tSLP loads here.\n+\t(vect_gather_slp_loads): Remove wrapper, new function.\n+\t(vect_slp_analyze_bb_1): Call it.\n+\n+2020-11-16   Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (analyze_memory_references): Add\n+\tstore_motion parameter and elide unnecessary work.\n+\t(tree_ssa_lim_initialize): Likewise.\n+\t(loop_invariant_motion_in_fun): Pass down store_motion.\n+\n+2020-11-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* params.opt: All modref parameters miss Optimization and Param\n+\tkeyword as seen in testsuite failure.\n+\n+2020-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* params.opt (-param=modref-max-depth=): Add missing full stop.\n+\n+2020-11-16  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* common.opt (fprofile-info-section): New.\n+\t* coverage.c (build_gcov_info_var_registration): New.\n+\t(coverage_obj_init): Evaluate profile_info_section and use\n+\tbuild_gcov_info_var_registration().\n+\t* doc/invoke.texi (fprofile-info-section): Document.\n+\t* opts.c (common_handle_option): Process fprofile-info-section\n+\toption.\n+\n+2020-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97838\n+\t* tree-vect-slp.c (vect_slp_build_vertices): Properly handle\n+\tnot backwards reachable cycles.\n+\t(vect_optimize_slp): Check a node is leaf before marking it\n+\tvisited.\n+\n+2020-11-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/97736\n+\t* tree-switch-conversion.c (switch_decision_tree::analyze_switch_statement):\n+\tPrefer bit tests.\n+\n+2020-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97835\n+\t* tree-vect-loop.c (vectorizable_induction): Convert step\n+\tscalars rather than step vector.\n+\n+2020-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97830\n+\t* tree-ssa-sccvn.c (vn_reference_eq): Check for incomplete\n+\ttypes before comparing TYPE_SIZE.\n+\n+2020-11-16  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* config/i386/i386.h: Add PREFETCHW to march=broadwell.\n+\t* doc/invoke.texi: Put PREFETCHW back to relation arch.\n+\n 2020-11-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.c (msp430_output_labelref): Don't process mspabi"}, {"sha": "0ad54ab67bd8a1dd3dfe3aba692afb1b1e90841b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1 +1 @@\n-20201116\n+20201117"}, {"sha": "dc15a61ee06b1ef8db6509ef8e9564a8ce7e8578", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,8 @@\n+2020-11-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/97854\n+\t* stub-objc.c: Include c-common.h to declare enum rid.\n+\n 2020-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/63287"}, {"sha": "7bff1b2d5a3aab83dea2dc69ab45d5a15de35ae5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,8 @@\n+2020-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Generate runtime\n+\tchecking code for status of argument.\n+\n 2020-11-13  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "8672fd885cab6037d5ea9e86b0c48c8994ed65b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,81 @@\n+2020-11-16  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/92180\n+\t* gcc.target/i386/pr92180.c: New test.\n+\n+2020-11-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.dg/pr48958.f90: New test.\n+\n+2020-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/warn/uninit-1.C: New test.\n+\n+2020-11-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/s390.exp (check_effective_target_s390_z14_hw):\n+\tNew predicate.\n+\t* gcc.target/s390/vector/long-double-caller-abi-run.c: Use the\n+\tnew predicate.\n+\t* gcc.target/s390/vector/long-double-copysign.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-double.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-float.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-i16.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-i32.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-i64.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-i8.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-u16.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-u32.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-u64.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-from-u8.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-double.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-float.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-i16.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-i32.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-i64.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-i8.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-u16.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-u32.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-u64.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-to-u8.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-wfaxb.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-wfdxb.c: Likewise.\n+\t* gcc.target/s390/vector/long-double-wfsxb-1.c: Likewise.\n+\n+2020-11-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR testsuite/97803\n+\t* c-c++-common/asan/pointer-compare-1.c (global1): Add\n+\t__attribute__((used))\n+\t(global2): Likewise.\n+\t(small_global): Likewise.\n+\t(large_global): Likewise.\n+\n+2020-11-16  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* gcc.dg/profile-info-section.c: New test.\n+\n+2020-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97838\n+\t* gcc.dg/vect/pr97838.c: New testcase.\n+\n+2020-11-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/97736\n+\t* gcc.dg/tree-ssa/switch-1.c: Prefer bit tests.\n+\t* g++.dg/tree-ssa/pr97736.C: New test.\n+\n+2020-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97835\n+\t* gcc.dg/vect/pr97835.c: New testcase.\n+\n+2020-11-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97830\n+\t* gcc.dg/pr97830.c: New testcase.\n+\n 2020-11-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/rtx-cost-Os-f5series.c: Adjust test to use new"}, {"sha": "3f3ec99cffc76f64da71d9e021dedc0ac9d3f0cd", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,9 @@\n+2020-11-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/t-ppc64-fp (LIB2ADD): Delete.\n+\t(LIB2_SIDITI_CONV_FUNCS): Define.\n+\t* config/rs6000/ppc64-fp.c: Delete file.\n+\n 2020-11-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/lib2hw_mul.S: Omit _hw* suffix from GCC names for"}, {"sha": "43f6f3938f8949adb5b1878aea1ecb8ae121458f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c5d9ceb9bf7416b6f6b976879ac0dc60701904/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=29c5d9ceb9bf7416b6f6b976879ac0dc60701904", "patch": "@@ -1,3 +1,9 @@\n+2020-11-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/Makefile.am (libstdc++-symbols.ver-sun): Remove -lrt from\n+\targuments passed to make_sunver.pl script.\n+\t* src/Makefile.in: Regenerate.\n+\n 2020-11-15  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/20_util/result_of/sfinae_friendly_1.cc: Adjust."}]}