{"sha": "621a911d336279d21e1e857cfead09af1c61df39", "node_id": "C_kwDOANBUbNoAKDYyMWE5MTFkMzM2Mjc5ZDIxZTFlODU3Y2ZlYWQwOWFmMWM2MWRmMzk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-14T00:16:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-14T00:16:35Z"}, "message": "Daily bump.", "tree": {"sha": "05081e9517fdc56d42a170e74b499d6d7c41b865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05081e9517fdc56d42a170e74b499d6d7c41b865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/621a911d336279d21e1e857cfead09af1c61df39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621a911d336279d21e1e857cfead09af1c61df39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621a911d336279d21e1e857cfead09af1c61df39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621a911d336279d21e1e857cfead09af1c61df39/comments", "author": null, "committer": null, "parents": [{"sha": "c26d335fffc689051ee5826455c9d54d1fcf1816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c26d335fffc689051ee5826455c9d54d1fcf1816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c26d335fffc689051ee5826455c9d54d1fcf1816"}], "stats": {"total": 242, "additions": 241, "deletions": 1}, "files": [{"sha": "93fd9ef1bb24c4e1b56c93bbf6690c2616138768", "filename": "gcc/ChangeLog", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,149 @@\n+2022-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-ssa-warn-access.cc (pass_waccess::check_call): Return\n+\tearly for calls made from thunks.\n+\n+2022-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.cc (emit_group_stote): Fix handling of modes of different\n+\tsizes for big-endian targets in latest change and add commentary.\n+\n+2022-10-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* output.h (assemble_vtv_preinit_initializer): Remove.\n+\t* varasm.cc (assemble_vtv_preinit_initializer): Remove.\n+\n+2022-10-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/102540\n+\tPR tree-optimization/102872\n+\t* gimple-range-cache.cc (ranger_cache::fill_block_cache):\n+\tHandle partial equivs.\n+\t(ranger_cache::range_from_dom): Cleanup dump output.\n+\n+2022-10-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_cast::lhs_op1_relation): New.\n+\t(operator_bitwise_and::lhs_op1_relation): New.\n+\n+2022-10-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Use\n+\titerator.\n+\t* value-relation.cc\n+\t  (equiv_relation_iterator::equiv_relation_iterator): New.\n+\t(equiv_relation_iterator::next): New.\n+\t(equiv_relation_iterator::get_name): New.\n+\t* value-relation.h (class relation_oracle): Privatize some methods.\n+\t(class equiv_relation_iterator): New.\n+\t(FOR_EACH_EQUIVALENCE): New.\n+\t(FOR_EACH_PARTIAL_EQUIV): New.\n+\t(FOR_EACH_PARTIAL_AND_FULL_EQUIV): New.\n+\n+2022-10-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (equiv_chain::dump): Don't print empty\n+\tequivalences.\n+\t(equiv_oracle::equiv_oracle): Allocate a partial equiv table.\n+\t(equiv_oracle::~equiv_oracle): Release the partial equiv table.\n+\t(equiv_oracle::add_partial_equiv): New.\n+\t(equiv_oracle::partial_equiv_set): New.\n+\t(equiv_oracle::partial_equiv): New.\n+\t(equiv_oracle::query_relation): Check for partial equivs too.\n+\t(equiv_oracle::dump): Also dump partial equivs.\n+\t(dom_oracle::register_relation): Handle partial equivs.\n+\t(dom_oracle::query_relation): Check for partial equivs.\n+\t* value-relation.h (enum relation_kind_t): Add partial equivs.\n+\t(relation_partial_equiv_p): New.\n+\t(relation_equiv_p): New.\n+\t(class pe_slice): New.\n+\t(class equiv_oracle): Add prototypes.\n+\t(pe_to_bits): New.\n+\t(bits_to_pe): New.\n+\t(pe_min): New.\n+\n+2022-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107247\n+\t* tree-vect-loop.cc (vect_create_epilog_for_reduction):\n+\tReduce multi vector SLP reduction accumulators.  Check\n+\tthe adjusted number of accumulator vectors against\n+\tone for the re-use in the epilogue.\n+\n+2022-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* genmodes.cc (emit_mode_wider): Emit previous content of\n+\tmode_wider array into mode_next array and for mode_wider\n+\temit always VOIDmode for !CLASS_HAS_WIDER_MODES_P classes,\n+\totherwise skip through modes with the same precision.\n+\t* machmode.h (mode_next): Declare.\n+\t(GET_MODE_NEXT_MODE): New inline function.\n+\t(mode_iterator::get_next, mode_iterator::get_known_next): New\n+\tfunction templates.\n+\t(FOR_EACH_MODE_IN_CLASS): Use get_next instead of get_wider.\n+\t(FOR_EACH_MODE): Use get_known_next instead of get_known_wider.\n+\t(FOR_EACH_MODE_FROM): Use get_next instead of get_wider.\n+\t(FOR_EACH_WIDER_MODE_FROM): Define.\n+\t(FOR_EACH_NEXT_MODE): Define.\n+\t* expmed.cc (emit_store_flag_1): Use FOR_EACH_WIDER_MODE_FROM\n+\tinstead of FOR_EACH_MODE_FROM.\n+\t* optabs.cc (prepare_cmp_insn): Likewise.  Remove redundant\n+\t!CLASS_HAS_WIDER_MODES_P check.\n+\t(prepare_float_lib_cmp): Use FOR_EACH_WIDER_MODE_FROM instead of\n+\tFOR_EACH_MODE_FROM.\n+\t* config/i386/i386-expand.cc (get_mode_wider_vector): Use\n+\tGET_MODE_NEXT_MODE instead of GET_MODE_WIDER_MODE.\n+\n+2022-10-13  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/105773\n+\t* config/aarch64/aarch64.cc (aarch64_select_cc_mode): Allow\n+\tGT/LE for merging compare with zero into AND.\n+\t(aarch64_get_condition_code_1): Add CC_NZVmode support.\n+\t* config/aarch64/aarch64-modes.def: Add CC_NZV.\n+\t* config/aarch64/aarch64.md: Use CC_NZV in cmp+and patterns.\n+\n+2022-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107160\n+\t* tree-vect-loop.cc (vect_create_epilog_for_reduction):\n+\tDo not register accumulator if we failed to reduce it\n+\tto a single vector.\n+\n+2022-10-13  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (range_operator_float::op1_op2_relation): New.\n+\t(class foperator_equal): Add using.\n+\t(class foperator_not_equal): Same.\n+\t(class foperator_lt): Same.\n+\t(class foperator_le): Same.\n+\t(class foperator_gt): Same.\n+\t(class foperator_ge): Same.\n+\t* range-op.cc (range_op_handler::op1_op2_relation): New.\n+\t* range-op.h (range_operator_float::op1_op2_relation): New.\n+\n+2022-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.cc (parser::parse_c_expr): Diagnose 'return'.\n+\t* match.pd: Replace 'return' statements in with expressions\n+\twith appropriate variants.\n+\n+2022-10-13  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR tree-optimization/107229\n+\t* tree-if-conv.cc (get_bitfield_rep): Fix bitposition calculation.\n+\n+2022-10-13  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR tree-optimization/107226\n+\t* tree-vect-patterns.cc (vect_recog_bitfield_ref_pattern): Reject\n+\tBITFIELD_REF's with non integral typed first operands.\n+\n+2022-10-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/float.h (FLT_IS_IEC_60559, DBL_IS_IEC_60559)\n+\t(LDBL_IS_IEC_60559): Update comment.\n+\n 2022-10-12  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* range-op-float.cc (class foperator_negate): New."}, {"sha": "66947c0b32d98fbe2869ed2ad0def15ae1b60eff", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1 +1 @@\n-20221013\n+20221014"}, {"sha": "f753d1afae013cb470a3021fe86a974c94da6740", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,9 @@\n+2022-10-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107210\n+\t* svalue.cc (constant_svalue::maybe_fold_bits_within): Only\n+\tattempt to extract individual bits when tree_fits_uhwi_p.\n+\n 2022-10-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105783"}, {"sha": "df4dcf2895f8e80b1a03fdc93e60554f4d332015", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,8 @@\n+2022-10-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.cc (builtin_define_float_constants): Do not use\n+\tvalue 2 for *_IS_IEC_60559.\n+\n 2022-10-12  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/60014"}, {"sha": "24bb33f35810763bf0bf259a13c71995e9c5d8fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,23 @@\n+2022-10-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h: Fix whitespace.\n+\t* parser.h: Fix whitespace.\n+\t* decl.cc: Fix whitespace.\n+\t* parser.cc: Fix whitespace.\n+\t* pt.cc: Fix whitespace.\n+\n+2022-10-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* vtable-class-hierarchy.cc (vtv_generate_init_routine): Emit\n+\tan artificial variable that would be put into .preinit_array\n+\tsection.\n+\n+2022-10-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106925\n+\t* except.cc (maybe_splice_retval_cleanup): Check current_function_decl.\n+\tMake the bool const.\n+\n 2022-10-12  Marek Polacek  <polacek@redhat.com>\n \n \t* call.cc (standard_conversion): Remove LOOKUP_PREFER_RVALUE code."}, {"sha": "a9854785eae75843990bac7b4f787d3464b82d86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,45 @@\n+2022-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/Wstringop-overflow-89.c: New test.\n+\n+2022-10-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107210\n+\t* gfortran.dg/analyzer/pr107210.f90: New test.\n+\n+2022-10-13  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr102540.c: New.\n+\t* gcc.dg/pr102872.c: New.\n+\n+2022-10-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106925\n+\t* g++.dg/cpp0x/initlist-defarg3.C: New test.\n+\n+2022-10-13  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/105773\n+\t* gcc.target/aarch64/ands_2.c: Test for ANDS.\n+\t* gcc.target/aarch64/bics_2.c: Test for BICS.\n+\t* gcc.target/aarch64/tst_2.c: Test for TST.\n+\t* gcc.target/aarch64/tst_imm_split_1.c: Fix test.\n+\n+2022-10-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107160\n+\t* gcc.dg/vect/pr107160.c: New testcase.\n+\n+2022-10-13  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.dg/vect/pr107229-1.c: New test.\n+\t* gcc.dg/vect/pr107229-2.c: New test.\n+\t* gcc.dg/vect/pr107229-3.c: New test.\n+\n+2022-10-13  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-float-10.c: Do not expect value 2 for *_IS_IEC_60559.\n+\n 2022-10-12  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/60014"}, {"sha": "2cec065b44c7f38659129824a2d36b77be170cc0", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,9 @@\n+2022-10-13  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* longlong.h [__loongarch__] (count_leading_zeros): Define.\n+\t[__loongarch__] (count_trailing_zeros): Likewise.\n+\t[__loongarch__] (COUNT_LEADING_ZEROS_0): Likewise.\n+\n 2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/106652"}, {"sha": "a339a7dae733a7abc3d90520cc7349af2f689424", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,13 @@\n+2022-10-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/task-7.f90: New test.\n+\t* testsuite/libgomp.fortran/task-8.f90: New test.\n+\t* testsuite/libgomp.fortran/task-in-explicit-1.f90: New test.\n+\t* testsuite/libgomp.fortran/task-in-explicit-2.f90: New test.\n+\t* testsuite/libgomp.fortran/task-in-explicit-3.f90: New test.\n+\t* testsuite/libgomp.fortran/task-reduction-17.f90: New test.\n+\t* testsuite/libgomp.fortran/task-reduction-18.f90: New test.\n+\n 2022-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* libgomp.texi (OpenMP 5.2): Fix up allocator -> allocate directive"}, {"sha": "552d29b36c86eb0f32b95c54c3f121ebf25ac7a0", "filename": "libitm/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621a911d336279d21e1e857cfead09af1c61df39/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621a911d336279d21e1e857cfead09af1c61df39/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=621a911d336279d21e1e857cfead09af1c61df39", "patch": "@@ -1,3 +1,8 @@\n+2022-10-13  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* config/loongarch/sjlj.S: Add a soft floating point condition to the\n+\tregister recovery part of the code.\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}]}