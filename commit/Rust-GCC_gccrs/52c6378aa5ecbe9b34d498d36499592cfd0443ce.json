{"sha": "52c6378aa5ecbe9b34d498d36499592cfd0443ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjNjM3OGFhNWVjYmU5YjM0ZDQ5OGQzNjQ5OTU5MmNmZDA0NDNjZQ==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2015-08-21T10:46:09Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2015-08-21T10:46:09Z"}, "message": "fold-const.c (fold_binary_loc): Move sqrt(x)*sqrt(x) as x to match.pd.\n\n2015-08-21  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* fold-const.c (fold_binary_loc) : Move sqrt(x)*sqrt(x) as x\n\tto match.pd.\n\tMove Optimize pow(x,y)*pow(z,y) as pow(x*z,y)to match.pd.\n\tMove Optimize tan(x)*cos(x) as sin(x) to match.pd.\n\tMove Optimize x*pow(x,c) as pow(x,c+1) to match.pd.\n\tMove Optimize pow(x,c)*x as pow(x,c+1) to match.pd.\n\tMove Optimize sin(x)/cos(x) as tan(x) to match.pd.\n\tMove Optimize cos(x)/sin(x) as 1.0/tan(x) to match.pd.\n\tMove Optimize sin(x)/tan(x) as cos(x) to match.pd.\n\tMove Optimize tan(x)/sin(x) as 1.0/cos(x) to match.pd.\n\tMove Optimize pow(x,c)/x as pow(x,c-1) to match.pd.\n\tMove Optimize x/pow(y,z) into x*pow(y,-z) to match.pd.\n\n\t* match.pd (SIN ) : New Operator.\n\t(TAN) : New Operator.\n\t(mult (SQRT@1 @0) @1) : New simplifier.\n\t(mult (POW:s @0 @1) (POW:s @2 @1)) : New simplifier.\n\t(mult:c (TAN:s @0) (COS:s @0)) : New simplifier.\n\t(mult:c (TAN:s @0) (COS:s @0)) : New simplifier.\n\t(rdiv (SIN:s @0) (COS:s @0)) : New simplifier.\n\t(rdiv (COS:s @0) (SIN:s @0)) : New simplifier.\n\t(rdiv (SIN:s @0) (TAN:s @0)) : New simplifier.\n\t(rdiv (TAN:s @0) (SIN:s @0)) : New simplifier.\n\t(rdiv (POW:s @0 REAL_CST@1) @0) : New simplifier.\n\t(rdiv @0 (SQRT:s (rdiv:s @1 @2))) : New simplifier.\n\t(rdiv @0 (POW:s @1 @2)) : New simplifier.\n\nFrom-SVN: r227056", "tree": {"sha": "a1db4826f484b968dc170d01bf1e8b2fcf7547cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1db4826f484b968dc170d01bf1e8b2fcf7547cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c6378aa5ecbe9b34d498d36499592cfd0443ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c6378aa5ecbe9b34d498d36499592cfd0443ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c6378aa5ecbe9b34d498d36499592cfd0443ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c6378aa5ecbe9b34d498d36499592cfd0443ce/comments", "author": null, "committer": null, "parents": [{"sha": "eff1e5afad295545d09985c705952242bc16c2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff1e5afad295545d09985c705952242bc16c2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff1e5afad295545d09985c705952242bc16c2ea"}], "stats": {"total": 285, "additions": 95, "deletions": 190}, "files": [{"sha": "adacd43664147ab809b46959fdec2970c41bb9a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c6378aa5ecbe9b34d498d36499592cfd0443ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c6378aa5ecbe9b34d498d36499592cfd0443ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52c6378aa5ecbe9b34d498d36499592cfd0443ce", "patch": "@@ -1,3 +1,32 @@\n+2015-08-21  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* fold-const.c (fold_binary_loc) : Move sqrt(x)*sqrt(x) as x\n+\tto match.pd.\n+\tMove Optimize pow(x,y)*pow(z,y) as pow(x*z,y)to match.pd.\n+\tMove Optimize tan(x)*cos(x) as sin(x) to match.pd.\n+\tMove Optimize x*pow(x,c) as pow(x,c+1) to match.pd.\n+\tMove Optimize pow(x,c)*x as pow(x,c+1) to match.pd.\n+\tMove Optimize sin(x)/cos(x) as tan(x) to match.pd.\n+\tMove Optimize cos(x)/sin(x) as 1.0/tan(x) to match.pd.\n+\tMove Optimize sin(x)/tan(x) as cos(x) to match.pd.\n+\tMove Optimize tan(x)/sin(x) as 1.0/cos(x) to match.pd.\n+\tMove Optimize pow(x,c)/x as pow(x,c-1) to match.pd.\n+\tMove Optimize x/pow(y,z) into x*pow(y,-z) to match.pd.\n+\n+\t* match.pd (SIN ) : New Operator.\n+\t(TAN) : New Operator.\n+\t(mult (SQRT@1 @0) @1) : New simplifier.\n+\t(mult (POW:s @0 @1) (POW:s @2 @1)) : New simplifier.\n+\t(mult:c (TAN:s @0) (COS:s @0)) : New simplifier.\n+\t(mult:c (TAN:s @0) (COS:s @0)) : New simplifier.\n+\t(rdiv (SIN:s @0) (COS:s @0)) : New simplifier.\n+\t(rdiv (COS:s @0) (SIN:s @0)) : New simplifier.\n+\t(rdiv (SIN:s @0) (TAN:s @0)) : New simplifier.\n+\t(rdiv (TAN:s @0) (SIN:s @0)) : New simplifier.\n+\t(rdiv (POW:s @0 REAL_CST@1) @0) : New simplifier.\n+\t(rdiv @0 (SQRT:s (rdiv:s @1 @2))) : New simplifier.\n+\t(rdiv @0 (POW:s @1 @2)) : New simplifier.\n+\n 2015-08-21  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-niter.c (simplify_using_initial_conditions): Break"}, {"sha": "1e017262db83308ce5ba66a5c0edf2365a696367", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 189, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c6378aa5ecbe9b34d498d36499592cfd0443ce/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c6378aa5ecbe9b34d498d36499592cfd0443ce/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=52c6378aa5ecbe9b34d498d36499592cfd0443ce", "patch": "@@ -9957,12 +9957,6 @@ fold_binary_loc (location_t loc,\n \t\t  tree arg00 = CALL_EXPR_ARG (arg0, 0);\n \t\t  tree arg10 = CALL_EXPR_ARG (arg1, 0);\n \n-\t\t  /* Optimize sqrt(x)*sqrt(x) as x.  */\n-\t\t  if (BUILTIN_SQRT_P (fcode0)\n-\t\t      && operand_equal_p (arg00, arg10, 0)\n-\t\t      && ! HONOR_SNANS (element_mode (type)))\n-\t\t    return arg00;\n-\n \t          /* Optimize root(x)*root(y) as root(x*y).  */\n \t\t  rootfn = TREE_OPERAND (CALL_EXPR_FN (arg0), 0);\n \t\t  arg = fold_build2_loc (loc, MULT_EXPR, type, arg00, arg10);\n@@ -9989,15 +9983,6 @@ fold_binary_loc (location_t loc,\n \t\t  tree arg10 = CALL_EXPR_ARG (arg1, 0);\n \t\t  tree arg11 = CALL_EXPR_ARG (arg1, 1);\n \n-\t\t  /* Optimize pow(x,y)*pow(z,y) as pow(x*z,y).  */\n-\t\t  if (operand_equal_p (arg01, arg11, 0))\n-\t\t    {\n-\t\t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg0), 0);\n-\t\t      tree arg = fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\t\t      arg00, arg10);\n-\t\t      return build_call_expr_loc (loc, powfn, 2, arg, arg01);\n-\t\t    }\n-\n \t\t  /* Optimize pow(x,y)*pow(x,z) as pow(x,y+z).  */\n \t\t  if (operand_equal_p (arg00, arg10, 0))\n \t\t    {\n@@ -10008,67 +9993,6 @@ fold_binary_loc (location_t loc,\n \t\t    }\n \t\t}\n \n-\t      /* Optimize tan(x)*cos(x) as sin(x).  */\n-\t      if (((fcode0 == BUILT_IN_TAN && fcode1 == BUILT_IN_COS)\n-\t\t   || (fcode0 == BUILT_IN_TANF && fcode1 == BUILT_IN_COSF)\n-\t\t   || (fcode0 == BUILT_IN_TANL && fcode1 == BUILT_IN_COSL)\n-\t\t   || (fcode0 == BUILT_IN_COS && fcode1 == BUILT_IN_TAN)\n-\t\t   || (fcode0 == BUILT_IN_COSF && fcode1 == BUILT_IN_TANF)\n-\t\t   || (fcode0 == BUILT_IN_COSL && fcode1 == BUILT_IN_TANL))\n-\t\t  && operand_equal_p (CALL_EXPR_ARG (arg0, 0),\n-\t\t\t\t      CALL_EXPR_ARG (arg1, 0), 0))\n-\t\t{\n-\t\t  tree sinfn = mathfn_built_in (type, BUILT_IN_SIN);\n-\n-\t\t  if (sinfn != NULL_TREE)\n-\t\t    return build_call_expr_loc (loc, sinfn, 1,\n-\t\t\t\t\t    CALL_EXPR_ARG (arg0, 0));\n-\t\t}\n-\n-\t      /* Optimize x*pow(x,c) as pow(x,c+1).  */\n-\t      if (fcode1 == BUILT_IN_POW\n-\t\t  || fcode1 == BUILT_IN_POWF\n-\t\t  || fcode1 == BUILT_IN_POWL)\n-\t\t{\n-\t\t  tree arg10 = CALL_EXPR_ARG (arg1, 0);\n-\t\t  tree arg11 = CALL_EXPR_ARG (arg1, 1);\n-\t\t  if (TREE_CODE (arg11) == REAL_CST\n-\t\t      && !TREE_OVERFLOW (arg11)\n-\t\t      && operand_equal_p (arg0, arg10, 0))\n-\t\t    {\n-\t\t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg1), 0);\n-\t\t      REAL_VALUE_TYPE c;\n-\t\t      tree arg;\n-\n-\t\t      c = TREE_REAL_CST (arg11);\n-\t\t      real_arithmetic (&c, PLUS_EXPR, &c, &dconst1);\n-\t\t      arg = build_real (type, c);\n-\t\t      return build_call_expr_loc (loc, powfn, 2, arg0, arg);\n-\t\t    }\n-\t\t}\n-\n-\t      /* Optimize pow(x,c)*x as pow(x,c+1).  */\n-\t      if (fcode0 == BUILT_IN_POW\n-\t\t  || fcode0 == BUILT_IN_POWF\n-\t\t  || fcode0 == BUILT_IN_POWL)\n-\t\t{\n-\t\t  tree arg00 = CALL_EXPR_ARG (arg0, 0);\n-\t\t  tree arg01 = CALL_EXPR_ARG (arg0, 1);\n-\t\t  if (TREE_CODE (arg01) == REAL_CST\n-\t\t      && !TREE_OVERFLOW (arg01)\n-\t\t      && operand_equal_p (arg1, arg00, 0))\n-\t\t    {\n-\t\t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg0), 0);\n-\t\t      REAL_VALUE_TYPE c;\n-\t\t      tree arg;\n-\n-\t\t      c = TREE_REAL_CST (arg01);\n-\t\t      real_arithmetic (&c, PLUS_EXPR, &c, &dconst1);\n-\t\t      arg = build_real (type, c);\n-\t\t      return build_call_expr_loc (loc, powfn, 2, arg1, arg);\n-\t\t    }\n-\t\t}\n-\n \t      /* Canonicalize x*x as pow(x,2.0), which is expanded as x*x.  */\n \t      if (!in_gimple_form\n \t\t  && optimize\n@@ -10481,109 +10405,10 @@ fold_binary_loc (location_t loc,\n \n       if (flag_unsafe_math_optimizations)\n \t{\n-\t  enum built_in_function fcode0 = builtin_mathfn_code (arg0);\n \t  enum built_in_function fcode1 = builtin_mathfn_code (arg1);\n \n-\t  /* Optimize sin(x)/cos(x) as tan(x).  */\n-\t  if (((fcode0 == BUILT_IN_SIN && fcode1 == BUILT_IN_COS)\n-\t       || (fcode0 == BUILT_IN_SINF && fcode1 == BUILT_IN_COSF)\n-\t       || (fcode0 == BUILT_IN_SINL && fcode1 == BUILT_IN_COSL))\n-\t      && operand_equal_p (CALL_EXPR_ARG (arg0, 0),\n-\t\t\t\t  CALL_EXPR_ARG (arg1, 0), 0))\n-\t    {\n-\t      tree tanfn = mathfn_built_in (type, BUILT_IN_TAN);\n-\n-\t      if (tanfn != NULL_TREE)\n-\t\treturn build_call_expr_loc (loc, tanfn, 1, CALL_EXPR_ARG (arg0, 0));\n-\t    }\n-\n-\t  /* Optimize cos(x)/sin(x) as 1.0/tan(x).  */\n-\t  if (((fcode0 == BUILT_IN_COS && fcode1 == BUILT_IN_SIN)\n-\t       || (fcode0 == BUILT_IN_COSF && fcode1 == BUILT_IN_SINF)\n-\t       || (fcode0 == BUILT_IN_COSL && fcode1 == BUILT_IN_SINL))\n-\t      && operand_equal_p (CALL_EXPR_ARG (arg0, 0),\n-\t\t\t\t  CALL_EXPR_ARG (arg1, 0), 0))\n-\t    {\n-\t      tree tanfn = mathfn_built_in (type, BUILT_IN_TAN);\n-\n-\t      if (tanfn != NULL_TREE)\n-\t\t{\n-\t\t  tree tmp = build_call_expr_loc (loc, tanfn, 1,\n-\t\t\t\t\t      CALL_EXPR_ARG (arg0, 0));\n-\t\t  return fold_build2_loc (loc, RDIV_EXPR, type,\n-\t\t\t\t      build_real (type, dconst1), tmp);\n-\t\t}\n-\t    }\n-\n- \t  /* Optimize sin(x)/tan(x) as cos(x) if we don't care about\n-\t     NaNs or Infinities.  */\n- \t  if (((fcode0 == BUILT_IN_SIN && fcode1 == BUILT_IN_TAN)\n- \t       || (fcode0 == BUILT_IN_SINF && fcode1 == BUILT_IN_TANF)\n- \t       || (fcode0 == BUILT_IN_SINL && fcode1 == BUILT_IN_TANL)))\n-\t    {\n-\t      tree arg00 = CALL_EXPR_ARG (arg0, 0);\n-\t      tree arg01 = CALL_EXPR_ARG (arg1, 0);\n-\n-\t      if (! HONOR_NANS (arg00)\n-\t\t  && ! HONOR_INFINITIES (element_mode (arg00))\n-\t\t  && operand_equal_p (arg00, arg01, 0))\n-\t\t{\n-\t\t  tree cosfn = mathfn_built_in (type, BUILT_IN_COS);\n-\n-\t\t  if (cosfn != NULL_TREE)\n-\t\t    return build_call_expr_loc (loc, cosfn, 1, arg00);\n-\t\t}\n-\t    }\n-\n- \t  /* Optimize tan(x)/sin(x) as 1.0/cos(x) if we don't care about\n-\t     NaNs or Infinities.  */\n- \t  if (((fcode0 == BUILT_IN_TAN && fcode1 == BUILT_IN_SIN)\n- \t       || (fcode0 == BUILT_IN_TANF && fcode1 == BUILT_IN_SINF)\n- \t       || (fcode0 == BUILT_IN_TANL && fcode1 == BUILT_IN_SINL)))\n-\t    {\n-\t      tree arg00 = CALL_EXPR_ARG (arg0, 0);\n-\t      tree arg01 = CALL_EXPR_ARG (arg1, 0);\n-\n-\t      if (! HONOR_NANS (arg00)\n-\t\t  && ! HONOR_INFINITIES (element_mode (arg00))\n-\t\t  && operand_equal_p (arg00, arg01, 0))\n-\t\t{\n-\t\t  tree cosfn = mathfn_built_in (type, BUILT_IN_COS);\n-\n-\t\t  if (cosfn != NULL_TREE)\n-\t\t    {\n-\t\t      tree tmp = build_call_expr_loc (loc, cosfn, 1, arg00);\n-\t\t      return fold_build2_loc (loc, RDIV_EXPR, type,\n-\t\t\t\t\t  build_real (type, dconst1),\n-\t\t\t\t\t  tmp);\n-\t\t    }\n-\t\t}\n-\t    }\n-\n-\t  /* Optimize pow(x,c)/x as pow(x,c-1).  */\n-\t  if (fcode0 == BUILT_IN_POW\n-\t      || fcode0 == BUILT_IN_POWF\n-\t      || fcode0 == BUILT_IN_POWL)\n-\t    {\n-\t      tree arg00 = CALL_EXPR_ARG (arg0, 0);\n-\t      tree arg01 = CALL_EXPR_ARG (arg0, 1);\n-\t      if (TREE_CODE (arg01) == REAL_CST\n-\t\t  && !TREE_OVERFLOW (arg01)\n-\t\t  && operand_equal_p (arg1, arg00, 0))\n-\t\t{\n-\t\t  tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg0), 0);\n-\t\t  REAL_VALUE_TYPE c;\n-\t\t  tree arg;\n-\n-\t\t  c = TREE_REAL_CST (arg01);\n-\t\t  real_arithmetic (&c, MINUS_EXPR, &c, &dconst1);\n-\t\t  arg = build_real (type, c);\n-\t\t  return build_call_expr_loc (loc, powfn, 2, arg1, arg);\n-\t\t}\n-\t    }\n-\n \t  /* Optimize a/root(b/c) into a*root(c/b).  */\n-\t  if (BUILTIN_ROOT_P (fcode1))\n+\t  if (BUILTIN_CBRT_P (fcode1))\n \t    {\n \t      tree rootarg = CALL_EXPR_ARG (arg1, 0);\n \n@@ -10611,19 +10436,6 @@ fold_binary_loc (location_t loc,\n \t      return fold_build2_loc (loc, MULT_EXPR, type, arg0, arg1);\n \t    }\n \n-\t  /* Optimize x/pow(y,z) into x*pow(y,-z).  */\n-\t  if (fcode1 == BUILT_IN_POW\n-\t      || fcode1 == BUILT_IN_POWF\n-\t      || fcode1 == BUILT_IN_POWL)\n-\t    {\n-\t      tree powfn = TREE_OPERAND (CALL_EXPR_FN (arg1), 0);\n-\t      tree arg10 = CALL_EXPR_ARG (arg1, 0);\n-\t      tree arg11 = CALL_EXPR_ARG (arg1, 1);\n-\t      tree neg11 = fold_convert_loc (loc, type,\n-\t\t\t\t\t     negate_expr (arg11));\n-\t      arg1 = build_call_expr_loc (loc, powfn, 2, arg10, neg11);\n-\t      return fold_build2_loc (loc, MULT_EXPR, type, arg0, arg1);\n-\t    }\n \t}\n       return NULL_TREE;\n "}, {"sha": "eb0ba9d10a9b8ca66c23c56da0678477379daf80", "filename": "gcc/match.pd", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c6378aa5ecbe9b34d498d36499592cfd0443ce/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c6378aa5ecbe9b34d498d36499592cfd0443ce/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=52c6378aa5ecbe9b34d498d36499592cfd0443ce", "patch": "@@ -55,10 +55,11 @@ along with GCC; see the file COPYING3.  If not see\n (define_operator_list POW10 BUILT_IN_POW10F BUILT_IN_POW10 BUILT_IN_POW10L)\n (define_operator_list SQRT BUILT_IN_SQRTF BUILT_IN_SQRT BUILT_IN_SQRTL)\n (define_operator_list CBRT BUILT_IN_CBRTF BUILT_IN_CBRT BUILT_IN_CBRTL)\n+(define_operator_list SIN BUILT_IN_SIN BUILT_IN_SINL BUILT_IN_SINF)\n (define_operator_list COS BUILT_IN_COS BUILT_IN_COSL BUILT_IN_COSF)\n+(define_operator_list TAN BUILT_IN_TAN BUILT_IN_TANL BUILT_IN_TANF)\n (define_operator_list COSH BUILT_IN_COSH BUILT_IN_COSHL BUILT_IN_COSHF)\n \n-\n /* Simplifications of operations with one constant operand and\n    simplifications to constants or single values.  */\n \n@@ -2006,6 +2007,69 @@ along with GCC; see the file COPYING3.  If not see\n \n /* fold_builtin_logarithm */\n (if (flag_unsafe_math_optimizations)\n+\n+ /* Simplify sqrt(x) * sqrt(x) -> x.  */\n+ (simplify\n+  (mult (SQRT@1 @0) @1)\n+  (if (!HONOR_SNANS (type))\n+   @0))\n+\n+ /* Simplify pow(x,y) * pow(z,y) -> pow(x*z,y). */\n+ (simplify\n+  (mult (POW:s @0 @1) (POW:s @2 @1))\n+   (POW (mult @0 @2) @1))\n+\n+ /* Simplify tan(x) * cos(x) -> sin(x). */\n+ (simplify\n+  (mult:c (TAN:s @0) (COS:s @0))\n+   (SIN @0))\n+\n+ /* Simplify x * pow(x,c) -> pow(x,c+1). */\n+ (simplify\n+  (mult @0 (POW:s @0 REAL_CST@1))\n+  (if (!TREE_OVERFLOW (@1))\n+   (POW @0 (plus @1 { build_one_cst (type); }))))\n+\n+ /* Simplify sin(x) / cos(x) -> tan(x). */\n+ (simplify\n+  (rdiv (SIN:s @0) (COS:s @0))\n+   (TAN @0))\n+\n+ /* Simplify cos(x) / sin(x) -> 1 / tan(x). */\n+ (simplify\n+  (rdiv (COS:s @0) (SIN:s @0))\n+   (rdiv { build_one_cst (type); } (TAN @0)))\n+\n+ /* Simplify sin(x) / tan(x) -> cos(x). */\n+ (simplify\n+  (rdiv (SIN:s @0) (TAN:s @0))\n+  (if (! HONOR_NANS (@0)\n+       && ! HONOR_INFINITIES (@0))\n+   (cos @0)))\n+\n+ /* Simplify tan(x) / sin(x) -> 1.0 / cos(x). */\n+ (simplify\n+  (rdiv (TAN:s @0) (SIN:s @0))\n+  (if (! HONOR_NANS (@0)\n+       && ! HONOR_INFINITIES (@0))\n+   (rdiv { build_one_cst (type); } (COS @0))))\n+\n+ /* Simplify pow(x,c) / x -> pow(x,c-1). */\n+ (simplify\n+  (rdiv (POW:s @0 REAL_CST@1) @0)\n+  (if (!TREE_OVERFLOW (@1))\n+   (POW @0 (minus @1 { build_one_cst (type); }))))\n+\n+ /* Simplify a/root(b/c) into a*root(c/b).  */\n+ (simplify\n+  (rdiv @0 (SQRT:s (rdiv:s @1 @2)))\n+   (mult @0 (SQRT (rdiv @2 @1))))\n+\n+ /* Simplify x / pow (y,z) -> x * pow(y,-z). */\n+ (simplify\n+  (rdiv @0 (POW:s @1 @2))\n+   (mult @0 (POW @1 (negate @2))))\n+\n  /* Special case, optimize logN(expN(x)) = x.  */\n  (for logs (LOG LOG2 LOG10)\n       exps (EXP EXP2 EXP10)"}]}