{"sha": "661bc682bcb87f5faa709f9bcd1679874f6652f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxYmM2ODJiY2I4N2Y1ZmFhNzA5ZjliY2QxNjc5ODc0ZjY2NTJmNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-08T09:09:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-08T09:09:38Z"}, "message": "cfgloop.c (verify_loop_structure): Properly handle a loop exiting to another loop header.\n\n2013-02-08  Richard Biener  <rguenther@suse.de>\n\n\t* cfgloop.c (verify_loop_structure): Properly handle\n\ta loop exiting to another loop header.\n\t* ira-int.h (ira_loops): Remove.\n\t* ira.c (ira_loops): Remove.\n\t(ira): Use loop_optimizer_init and loop_optimizer_finalize.\n\t(do_reload): Use loop_optimizer_finalize.\n\t* ira-build.c (create_loop_tree_nodes): Use get_loops and\n\tnumber_of_loops to access the loop tree.\n\t(more_one_region_p): Likewise.\n\t(finish_loop_tree_nodes): Likewise.\n\t(rebuild_regno_allocno_maps): Likewise.\n\t(mark_loops_for_removal): Likewise.\n\t(mark_all_loops_for_removal): Likewise.\n\t(remove_unnecessary_regions): Likewise.\n\t(ira_build): Likewise.\n\t* ira-emit.c (setup_entered_from_non_parent_p): Likewise.\n\nFrom-SVN: r195877", "tree": {"sha": "7376a6bbad1b83a2ca1875f856aea775280d8bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7376a6bbad1b83a2ca1875f856aea775280d8bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/661bc682bcb87f5faa709f9bcd1679874f6652f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661bc682bcb87f5faa709f9bcd1679874f6652f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661bc682bcb87f5faa709f9bcd1679874f6652f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661bc682bcb87f5faa709f9bcd1679874f6652f6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d5049b238172839e3cddbe4d8befe62d701dc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5049b238172839e3cddbe4d8befe62d701dc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5049b238172839e3cddbe4d8befe62d701dc07"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "787efb718a931e747ced0c239924ecbc4a10d4b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=661bc682bcb87f5faa709f9bcd1679874f6652f6", "patch": "@@ -1,3 +1,22 @@\n+2013-02-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgloop.c (verify_loop_structure): Properly handle\n+\ta loop exiting to another loop header.\n+\t* ira-int.h (ira_loops): Remove.\n+\t* ira.c (ira_loops): Remove.\n+\t(ira): Use loop_optimizer_init and loop_optimizer_finalize.\n+\t(do_reload): Use loop_optimizer_finalize.\n+\t* ira-build.c (create_loop_tree_nodes): Use get_loops and\n+\tnumber_of_loops to access the loop tree.\n+\t(more_one_region_p): Likewise.\n+\t(finish_loop_tree_nodes): Likewise.\n+\t(rebuild_regno_allocno_maps): Likewise.\n+\t(mark_loops_for_removal): Likewise.\n+\t(mark_all_loops_for_removal): Likewise.\n+\t(remove_unnecessary_regions): Likewise.\n+\t(ira_build): Likewise.\n+\t* ira-emit.c (setup_entered_from_non_parent_p): Likewise.\n+\n 2013-02-08  Richard Biener  <rguenther@suse.de>\n \n \t* Makefile.in (tree-tailcall.o): Add $(CFGLOOP_H) dependency."}, {"sha": "3c8df30cd7251e53ebe278a7ce75f1184eec0870", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=661bc682bcb87f5faa709f9bcd1679874f6652f6", "patch": "@@ -1542,7 +1542,12 @@ verify_loop_structure (void)\n \t\teloops++;\n \n \t      for (loop = bb->loop_father;\n-\t\t   loop != e->dest->loop_father;\n+\t\t   loop != e->dest->loop_father\n+\t\t   /* When a loop exit is also an entry edge which\n+\t\t      can happen when avoiding CFG manipulations\n+\t\t      then the last loop exited is the outer loop\n+\t\t      of the loop entered.  */\n+\t\t   && loop != loop_outer (e->dest->loop_father);\n \t\t   loop = loop_outer (loop))\n \t\t{\n \t\t  eloops--;"}, {"sha": "dd66091a33594a9e7e42b3755cb45d79fcfbb6ed", "filename": "gcc/ira-build.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=661bc682bcb87f5faa709f9bcd1679874f6652f6", "patch": "@@ -149,10 +149,10 @@ create_loop_tree_nodes (void)\n     }\n   ira_loop_nodes = ((struct ira_loop_tree_node *)\n \t\t    ira_allocate (sizeof (struct ira_loop_tree_node)\n-\t\t\t\t  * vec_safe_length (ira_loops.larray)));\n-  FOR_EACH_VEC_SAFE_ELT (ira_loops.larray, i, loop)\n+\t\t\t\t  * number_of_loops ()));\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n     {\n-      if (loop != ira_loops.tree_root)\n+      if (loop_outer (loop) != NULL)\n \t{\n \t  ira_loop_nodes[i].regno_allocno_map = NULL;\n \t  skip_p = false;\n@@ -189,7 +189,7 @@ more_one_region_p (void)\n   loop_p loop;\n \n   if (current_loops != NULL)\n-    FOR_EACH_VEC_SAFE_ELT (ira_loops.larray, i, loop)\n+    FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n       if (ira_loop_nodes[i].regno_allocno_map != NULL\n \t  && ira_loop_tree_root != &ira_loop_nodes[i])\n \treturn true;\n@@ -222,7 +222,7 @@ finish_loop_tree_nodes (void)\n   if (current_loops == NULL)\n     finish_loop_tree_node (&ira_loop_nodes[0]);\n   else\n-    FOR_EACH_VEC_SAFE_ELT (ira_loops.larray, i, loop)\n+    FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n       finish_loop_tree_node (&ira_loop_nodes[i]);\n   ira_free (ira_loop_nodes);\n   for (i = 0; i < (unsigned int) last_basic_block_before_change; i++)\n@@ -378,7 +378,7 @@ rebuild_regno_allocno_maps (void)\n \n   ira_assert (current_loops != NULL);\n   max_regno = max_reg_num ();\n-  FOR_EACH_VEC_SAFE_ELT (ira_loops.larray, l, loop)\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (), l, loop)\n     if (ira_loop_nodes[l].regno_allocno_map != NULL)\n       {\n \tira_free (ira_loop_nodes[l].regno_allocno_map);\n@@ -2021,8 +2021,8 @@ mark_loops_for_removal (void)\n   ira_assert (current_loops != NULL);\n   sorted_loops\n     = (ira_loop_tree_node_t *) ira_allocate (sizeof (ira_loop_tree_node_t)\n-\t\t\t\t\t  * vec_safe_length (ira_loops.larray));\n-  for (n = i = 0; vec_safe_iterate (ira_loops.larray, i, &loop); i++)\n+\t\t\t\t\t     * number_of_loops ());\n+  for (n = i = 0; vec_safe_iterate (get_loops (), i, &loop); i++)\n     if (ira_loop_nodes[i].regno_allocno_map != NULL)\n       {\n \tif (ira_loop_nodes[i].parent == NULL)\n@@ -2066,7 +2066,7 @@ mark_all_loops_for_removal (void)\n   loop_p loop;\n \n   ira_assert (current_loops != NULL);\n-  FOR_EACH_VEC_SAFE_ELT (ira_loops.larray, i, loop)\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n     if (ira_loop_nodes[i].regno_allocno_map != NULL)\n       {\n \tif (ira_loop_nodes[i].parent == NULL)\n@@ -2376,8 +2376,8 @@ remove_unnecessary_regions (bool all_p)\n     mark_all_loops_for_removal ();\n   else\n     mark_loops_for_removal ();\n-  children_vec.create(last_basic_block + vec_safe_length(ira_loops.larray));\n-  removed_loop_vec.create(last_basic_block + vec_safe_length(ira_loops.larray));\n+  children_vec.create(last_basic_block + number_of_loops ());\n+  removed_loop_vec.create(last_basic_block + number_of_loops ());\n   remove_uneccesary_loop_nodes_from_loop_tree (ira_loop_tree_root);\n   children_vec.release ();\n   if (all_p)\n@@ -3258,7 +3258,7 @@ ira_build (void)\n \t    }\n \t}\n       fprintf (ira_dump_file, \"  regions=%d, blocks=%d, points=%d\\n\",\n-\t       current_loops == NULL ? 1 : vec_safe_length (ira_loops.larray),\n+\t       current_loops == NULL ? 1 : number_of_loops (),\n \t       n_basic_blocks, ira_max_point);\n       fprintf (ira_dump_file,\n \t       \"    allocnos=%d (big %d), copies=%d, conflicts=%d, ranges=%d\\n\","}, {"sha": "c18391fc3e5d73a511781a5f86d65597f893c72f", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=661bc682bcb87f5faa709f9bcd1679874f6652f6", "patch": "@@ -434,7 +434,7 @@ setup_entered_from_non_parent_p (void)\n   loop_p loop;\n \n   ira_assert (current_loops != NULL);\n-  FOR_EACH_VEC_SAFE_ELT (ira_loops.larray, i, loop)\n+  FOR_EACH_VEC_SAFE_ELT (get_loops (), i, loop)\n     if (ira_loop_nodes[i].regno_allocno_map != NULL)\n       ira_loop_nodes[i].entered_from_non_parent_p\n \t= entered_from_non_parent_p (&ira_loop_nodes[i]);"}, {"sha": "096f33048e3101286e002fecfd72ef5bf47215c9", "filename": "gcc/ira-int.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-int.h?ref=661bc682bcb87f5faa709f9bcd1679874f6652f6", "patch": "@@ -47,9 +47,6 @@ along with GCC; see the file COPYING3.  If not see\n    ? REG_FREQ_MAX : (freq * REG_FREQ_MAX / BB_FREQ_MAX)\t\t\t   \\\n    ? (freq * REG_FREQ_MAX / BB_FREQ_MAX) : 1)\n \n-/* All natural loops.  */\n-extern struct loops ira_loops;\n-\n /* A modified value of flag `-fira-verbose' used internally.  */\n extern int internal_flag_ira_verbose;\n "}, {"sha": "f1ad9ecf76ea0ca5ad9dd6d0c44248f33588b46f", "filename": "gcc/ira.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661bc682bcb87f5faa709f9bcd1679874f6652f6/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=661bc682bcb87f5faa709f9bcd1679874f6652f6", "patch": "@@ -4338,9 +4338,6 @@ allocate_initial_values (void)\n    function.  */\n bool ira_use_lra_p;\n \n-/* All natural loops.  */\n-struct loops ira_loops;\n-\n /* True if we have allocno conflicts.  It is false for non-optimized\n    mode or when the conflict table is too big.  */\n bool ira_conflicts_p;\n@@ -4464,11 +4461,7 @@ ira (FILE *f)\n \n   ira_assert (current_loops == NULL);\n   if (flag_ira_region == IRA_REGION_ALL || flag_ira_region == IRA_REGION_MIXED)\n-    {\n-      flow_loops_find (&ira_loops);\n-      current_loops = &ira_loops;\n-      record_loop_exits ();\n-    }\n+    loop_optimizer_init (AVOID_CFG_MODIFICATIONS | LOOPS_HAVE_RECORDED_EXITS);\n \n   if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL)\n     fprintf (ira_dump_file, \"Building IRA IR\\n\");\n@@ -4526,11 +4519,9 @@ ira (FILE *f)\n \t  /* ??? Rebuild the loop tree, but why?  Does the loop tree\n \t     change if new insns were generated?  Can that be handled\n \t     by updating the loop tree incrementally?  */\n-\t  release_recorded_exits ();\n-\t  flow_loops_free (&ira_loops);\n-\t  flow_loops_find (&ira_loops);\n-\t  current_loops = &ira_loops;\n-\t  record_loop_exits ();\n+\t  loop_optimizer_finalize ();\n+\t  loop_optimizer_init (AVOID_CFG_MODIFICATIONS\n+\t\t\t       | LOOPS_HAVE_RECORDED_EXITS);\n \n \t  if (! ira_use_lra_p)\n \t    {\n@@ -4607,8 +4598,7 @@ do_reload (void)\n     {\n       if (current_loops != NULL)\n \t{\n-\t  release_recorded_exits ();\n-\t  flow_loops_free (&ira_loops);\n+\t  loop_optimizer_finalize ();\n \t  free_dominance_info (CDI_DOMINATORS);\n \t}\n       FOR_ALL_BB (bb)\n@@ -4657,8 +4647,7 @@ do_reload (void)\n       ira_destroy ();\n       if (current_loops != NULL)\n \t{\n-\t  release_recorded_exits ();\n-\t  flow_loops_free (&ira_loops);\n+\t  loop_optimizer_finalize ();\n \t  free_dominance_info (CDI_DOMINATORS);\n \t}\n       FOR_ALL_BB (bb)"}]}