{"sha": "9af4687354ee7ca7acc3ec7d5aac008858851612", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFmNDY4NzM1NGVlN2NhN2FjYzNlYzdkNWFhYzAwODg1ODg1MTYxMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-07-09T15:56:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-07-09T15:56:40Z"}, "message": "rs6000-protos.h (rs6000_xcoff_declare_object_name): Declare.\n\n\n\t* rs6000/rs6000-protos.h (rs6000_xcoff_declare_object_name): Declare.\n\t* rs6000/rs6000.c: Inline output of .set instruction.\n\t(declare_alias_data): New struct.\n\t(rs6000_declare_alias): New function.\n\t(rs6000_xcoff_declare_function_name): Use it.\n\t(rs6000_xcoff_declare_object_name): New function.\n\t* config/rs6000/xcoff.h: Define ASM_DECLARE_OBJECT_NAME.\n\t(ASM_OUTPUT_DEF): Turn to empty definition.\n\nFrom-SVN: r212394", "tree": {"sha": "461621670e504047f2f52bb339066a519ad7ede8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/461621670e504047f2f52bb339066a519ad7ede8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9af4687354ee7ca7acc3ec7d5aac008858851612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af4687354ee7ca7acc3ec7d5aac008858851612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af4687354ee7ca7acc3ec7d5aac008858851612", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af4687354ee7ca7acc3ec7d5aac008858851612/comments", "author": null, "committer": null, "parents": [{"sha": "7aee864645f2ec7c418030977b7d7ab00908371d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aee864645f2ec7c418030977b7d7ab00908371d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aee864645f2ec7c418030977b7d7ab00908371d"}], "stats": {"total": 148, "additions": 136, "deletions": 12}, "files": [{"sha": "ad074745797e48ab3bd74719dbbfe58abf02931f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9af4687354ee7ca7acc3ec7d5aac008858851612", "patch": "@@ -1,3 +1,14 @@\n+2014-07-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* rs6000/rs6000-protos.h (rs6000_xcoff_declare_object_name): Declare.\n+\t* rs6000/rs6000.c: Inline output of .set instruction.\n+\t(declare_alias_data): New struct.\n+\t(rs6000_declare_alias): New function.\n+\t(rs6000_xcoff_declare_function_name): Use it.\n+\t(rs6000_xcoff_declare_object_name): New function.\n+\t* config/rs6000/xcoff.h: Define ASM_DECLARE_OBJECT_NAME.\n+\t(ASM_OUTPUT_DEF): Turn to empty definition.\n+\n 2014-07-08  Trevor Saunders  <tsaunders@mozilla.com>\n \n \tPR bootstrap/61679"}, {"sha": "83581ac0bfbc1ae4b7b3f09f46e093dba93387dd", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=9af4687354ee7ca7acc3ec7d5aac008858851612", "patch": "@@ -165,6 +165,7 @@ extern rtx rs6000_va_arg (tree, tree);\n extern int function_ok_for_sibcall (tree);\n extern int rs6000_reg_parm_stack_space (tree, bool);\n extern void rs6000_xcoff_declare_function_name (FILE *, const char *, tree);\n+extern void rs6000_xcoff_declare_object_name (FILE *, const char *, tree);\n extern void rs6000_elf_declare_function_name (FILE *, const char *, tree);\n extern bool rs6000_elf_in_small_data_p (const_tree);\n #ifdef ARGS_SIZE_RTX"}, {"sha": "3b692f0f3ba1a83c080e4f79f6c40dad618fc7b6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9af4687354ee7ca7acc3ec7d5aac008858851612", "patch": "@@ -29158,7 +29158,11 @@ rs6000_xcoff_asm_output_anchor (rtx symbol)\n \n   sprintf (buffer, \"$ + \" HOST_WIDE_INT_PRINT_DEC,\n \t   SYMBOL_REF_BLOCK_OFFSET (symbol));\n-  ASM_OUTPUT_DEF (asm_out_file, XSTR (symbol, 0), buffer);\n+  fprintf (asm_out_file, \"%s\", SET_ASM_OP);\n+  RS6000_OUTPUT_BASENAME (asm_out_file, XSTR (symbol, 0));\n+  fprintf (asm_out_file, \",\");\n+  RS6000_OUTPUT_BASENAME (asm_out_file, buffer);\n+  fprintf (asm_out_file, \"\\n\");\n }\n \n static void\n@@ -29455,6 +29459,85 @@ rs6000_xcoff_file_end (void)\n \t asm_out_file);\n }\n \n+struct declare_alias_data\n+{\n+  FILE *file;\n+  bool function_descriptor;\n+};\n+\n+/* Declare alias N.  A helper function for for_node_and_aliases.  */\n+\n+static bool\n+rs6000_declare_alias (struct symtab_node *n, void *d)\n+{\n+  struct declare_alias_data *data = (struct declare_alias_data *)d;\n+  /* Main symbol is output specially, because varasm machinery does part of\n+     the job for us - we do not need to declare .globl/lglobs and such.  */\n+  if (!n->alias || n->weakref)\n+    return false;\n+\n+  if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (n->decl)))\n+    return false;\n+\n+  /* Prevent assemble_alias from trying to use .set pseudo operation\n+     that does not behave as expected by the middle-end.  */\n+  TREE_ASM_WRITTEN (n->decl) = true;\n+\n+  const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (n->decl));\n+  char *buffer = (char *) alloca (strlen (name) + 2);\n+  char *p;\n+  int dollar_inside = 0;\n+\n+  strcpy (buffer, name);\n+  p = strchr (buffer, '$');\n+  while (p) {\n+    *p = '_';\n+    dollar_inside++;\n+    p = strchr (p + 1, '$');\n+  }\n+  if (TREE_PUBLIC (n->decl))\n+    {\n+      if (!RS6000_WEAK || !DECL_WEAK (n->decl))\n+\t{\n+          if (dollar_inside) {\n+\t      if (data->function_descriptor)\n+                fprintf(data->file, \"\\t.rename .%s,\\\".%s\\\"\\n\", buffer, name);\n+\t      else\n+                fprintf(data->file, \"\\t.rename %s,\\\"%s\\\"\\n\", buffer, name);\n+\t    }\n+\t  if (data->function_descriptor)\n+\t    fputs (\"\\t.globl .\", data->file);\n+\t  else\n+\t    fputs (\"\\t.globl \", data->file);\n+\t  RS6000_OUTPUT_BASENAME (data->file, buffer);\n+\t  putc ('\\n', data->file);\n+\t}\n+      else if (DECL_WEAK (n->decl) && !data->function_descriptor)\n+\tASM_WEAKEN_DECL (data->file, n->decl, name, NULL);\n+    }\n+  else\n+    {\n+      if (dollar_inside)\n+\t{\n+\t  if (data->function_descriptor)\n+            fprintf(data->file, \"\\t.rename %s,\\\"%s\\\"\\n\", buffer, name);\n+\t  else\n+            fprintf(data->file, \"\\t.rename .%s,\\\".%s\\\"\\n\", buffer, name);\n+\t}\n+      if (data->function_descriptor)\n+\tfputs (\"\\t.lglobl .\", data->file);\n+      else\n+\tfputs (\"\\t.lglobl \", data->file);\n+      RS6000_OUTPUT_BASENAME (data->file, buffer);\n+      putc ('\\n', data->file);\n+    }\n+  if (data->function_descriptor)\n+    fputs (\".\", data->file);\n+  RS6000_OUTPUT_BASENAME (data->file, buffer);\n+  fputs (\":\\n\", data->file);\n+  return false;\n+}\n+\n /* This macro produces the initial definition of a function name.\n    On the RS/6000, we need to place an extra '.' in the function name and\n    output the function descriptor.\n@@ -29464,14 +29547,19 @@ rs6000_xcoff_file_end (void)\n    text_section was selected.  We do have to go back to that csect, however.\n \n    The third and fourth parameters to the .function pseudo-op (16 and 044)\n-   are placeholders which no longer have any use.  */\n+   are placeholders which no longer have any use.\n+\n+   Because AIX assembler's .set command has unexpected semantics, we output\n+   all aliases as alternative labels in front of the definition.  */\n \n void\n rs6000_xcoff_declare_function_name (FILE *file, const char *name, tree decl)\n {\n   char *buffer = (char *) alloca (strlen (name) + 1);\n   char *p;\n   int dollar_inside = 0;\n+  struct declare_alias_data data = {file, false};\n+\n   strcpy (buffer, name);\n   p = strchr (buffer, '$');\n   while (p) {\n@@ -29507,6 +29595,7 @@ rs6000_xcoff_declare_function_name (FILE *file, const char *name, tree decl)\n   fputs (TARGET_32BIT ? \"[DS]\\n\" : \"[DS],3\\n\", file);\n   RS6000_OUTPUT_BASENAME (file, buffer);\n   fputs (\":\\n\", file);\n+  symtab_for_node_and_aliases (symtab_get_node (decl), rs6000_declare_alias, &data, true);\n   fputs (TARGET_32BIT ? \"\\t.long .\" : \"\\t.llong .\", file);\n   RS6000_OUTPUT_BASENAME (file, buffer);\n   fputs (\", TOC[tc0], 0\\n\", file);\n@@ -29515,11 +29604,26 @@ rs6000_xcoff_declare_function_name (FILE *file, const char *name, tree decl)\n   putc ('.', file);\n   RS6000_OUTPUT_BASENAME (file, buffer);\n   fputs (\":\\n\", file);\n+  data.function_descriptor = true;\n+  symtab_for_node_and_aliases (symtab_get_node (decl), rs6000_declare_alias, &data, true);\n   if (write_symbols != NO_DEBUG && !DECL_IGNORED_P (decl))\n     xcoffout_declare_function (file, decl, buffer);\n   return;\n }\n \n+/* This macro produces the initial definition of a object (variable) name.\n+   Because AIX assembler's .set command has unexpected semantics, we output\n+   all aliases as alternative labels in front of the definition.  */\n+\n+void\n+rs6000_xcoff_declare_object_name (FILE *file, const char *name, tree decl)\n+{\n+  struct declare_alias_data data = {file, false};\n+  RS6000_OUTPUT_BASENAME (file, name);\n+  fputs (\":\\n\", file);\n+  symtab_for_node_and_aliases (symtab_get_node (decl), rs6000_declare_alias, &data, true);\n+}\n+\n #ifdef HAVE_AS_TLS\n static void\n rs6000_xcoff_encode_section_info (tree decl, rtx rtl, int first)"}, {"sha": "4df90f6db879ae5670d82669f76df3dfaf8c10e8", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=9af4687354ee7ca7acc3ec7d5aac008858851612", "patch": "@@ -139,6 +139,9 @@\n #undef ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   rs6000_xcoff_declare_function_name ((FILE), (NAME), (DECL))\n+#undef ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  rs6000_xcoff_declare_object_name ((FILE), (NAME), (DECL))\n \n /* Output a reference to SYM on FILE.  */\n \n@@ -280,14 +283,16 @@\n /* This is how we tell the assembler that two symbols have the same value.  */\n #define SET_ASM_OP \"\\t.set \"\n \n-/* This is how we tell the assembler to equate two values.  */\n-#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n- do {\tfprintf ((FILE), \"%s\", SET_ASM_OP);\t\t\t\t\\\n-\tRS6000_OUTPUT_BASENAME (FILE, LABEL1);\t\t\t\t\\\n-\tfprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tRS6000_OUTPUT_BASENAME (FILE, LABEL2);\t\t\t\t\\\n-\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n+/* This is how we tell the assembler to equate two values. \n+   The semantic of AIX assembler's .set do not correspond to middle-end expectations.\n+   We output aliases as alternative symbols in the front of the definition\n+   via DECLARE_FUNCTION_NAME and DECLARE_OBJECT_NAME.\n+   We still need to define this macro to let middle-end know that aliases are\n+   supported.\n+ */\n+#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2) do { } while (0)\n+\n+/* Used by rs6000_assemble_integer, among others.  */\n \n /* Used by rs6000_assemble_integer, among others.  */\n #define DOUBLE_INT_ASM_OP \"\\t.llong\\t\""}, {"sha": "d96f01259cdac2a334599f663b5a4c26279ef4a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9af4687354ee7ca7acc3ec7d5aac008858851612", "patch": "@@ -1,3 +1,8 @@\n+2014-07-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/globalalias.c: Remove XFAIL.\n+\t* gcc.dg/localalias.c: Remove XFAIL.\n+\n 2014-07-09  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/58155 - -Wliteral-suffix warns about tokens which are skipped"}, {"sha": "2c6ae51b4b2f4a4eecd5f8d5cd79d6d70970c73e", "filename": "gcc/testsuite/gcc.dg/globalalias.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c?ref=9af4687354ee7ca7acc3ec7d5aac008858851612", "patch": "@@ -8,7 +8,6 @@\n /* { dg-do run }\n    { dg-options \"-O2\" } \n    { dg-require-alias \"\" }\n-   { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } \n    { dg-additional-sources \"globalalias-2.c\" } */\n extern int test2count;\n extern void abort (void);"}, {"sha": "6384875b3e53f50998e257b81418d37ad929a762", "filename": "gcc/testsuite/gcc.dg/localalias.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9af4687354ee7ca7acc3ec7d5aac008858851612/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias.c?ref=9af4687354ee7ca7acc3ec7d5aac008858851612", "patch": "@@ -9,7 +9,6 @@\n /* { dg-do run }\n    { dg-options \"-Wstrict-aliasing=2 -fstrict-aliasing\" } \n    { dg-require-alias \"\" }\n-   { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } \n    { dg-additional-sources \"localalias-2.c\" } */\n extern void abort (void);\n extern int test2count;"}]}