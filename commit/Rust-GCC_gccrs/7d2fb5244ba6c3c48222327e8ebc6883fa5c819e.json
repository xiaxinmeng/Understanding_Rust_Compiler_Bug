{"sha": "7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QyZmI1MjQ0YmE2YzNjNDgyMjIzMjdlOGViYzY4ODNmYTVjODE5ZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-05-23T13:20:41Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-05-23T13:20:41Z"}, "message": "re PR middle-end/57347 (wrong code for bitfield on x86_64-linux at -Os and above)\n\n2013-05-22  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/57347\n\t* tree.h (contains_bitfld_component_ref_p): Declare.\n\t* tree-sra.c (contains_bitfld_comp_ref_p): Move...\n\t* tree.c (contains_bitfld_component_ref_p): ...here.  Adjust its caller.\n\t* ipa-prop.c (determine_known_aggregate_parts): Check that LHS does\n\tnot access a bit-field.  Assert all final offsets are byte-aligned.\n\ntestsuite/\n\t* gcc.dg/ipa/pr57347.c: New test.\n\nFrom-SVN: r199252", "tree": {"sha": "b293e3ccbf8e0a029d6133c38c71e73dd385f953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b293e3ccbf8e0a029d6133c38c71e73dd385f953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "877251155ba19212871966c65f4a283907eeb54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877251155ba19212871966c65f4a283907eeb54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877251155ba19212871966c65f4a283907eeb54e"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "a97a295a263b1672a9e8ddfcfe77e78a7517ec69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "patch": "@@ -1,3 +1,12 @@\n+2013-05-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/57347\n+\t* tree.h (contains_bitfld_component_ref_p): Declare.\n+\t* tree-sra.c (contains_bitfld_comp_ref_p): Move...\n+\t* tree.c (contains_bitfld_component_ref_p): ...here.  Adjust its caller.\n+\t* ipa-prop.c (determine_known_aggregate_parts): Check that LHS does\n+\tnot access a bit-field.  Assert all final offsets are byte-aligned.\n+\n 2013-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57380"}, {"sha": "7129b302156aecbcdc398b08b03460fcbd93579b", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "patch": "@@ -1327,7 +1327,9 @@ determine_known_aggregate_parts (gimple call, tree arg,\n \n       lhs = gimple_assign_lhs (stmt);\n       rhs = gimple_assign_rhs1 (stmt);\n-      if (!is_gimple_reg_type (rhs))\n+      if (!is_gimple_reg_type (rhs)\n+\t  || TREE_CODE (lhs) == BIT_FIELD_REF\n+\t  || contains_bitfld_component_ref_p (lhs))\n \tbreak;\n \n       lhs_base = get_ref_base_and_extent (lhs, &lhs_offset, &lhs_size,\n@@ -1418,6 +1420,7 @@ determine_known_aggregate_parts (gimple call, tree arg,\n \t    {\n \t      struct ipa_agg_jf_item item;\n \t      item.offset = list->offset - arg_offset;\n+\t      gcc_assert ((item.offset % BITS_PER_UNIT) == 0);\n \t      item.value = unshare_expr_without_location (list->constant);\n \t      jfunc->agg.items->quick_push (item);\n \t    }"}, {"sha": "b8e99a450112a4a38e726862e10d5d72c5cc4be0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "patch": "@@ -1,3 +1,8 @@\n+2013-05-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/57347\n+\t* gcc.dg/ipa/pr57347.c: New test.\n+\n 2013-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57380"}, {"sha": "731b4868ec3833af0f785946af6c3f46b90f2d7e", "filename": "gcc/testsuite/gcc.dg/ipa/pr57347.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr57347.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr57347.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr57347.c?ref=7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+struct S1 { int f0; int f1 : 10; int f2 : 13; };\n+int i;\n+int *j = &i;\n+\n+static void\n+foo (struct S1 s)\n+{\n+  int *p;\n+  int l[88];\n+  int **pp = &p;\n+  *pp = &l[1];\n+  l[0] = 1;\n+  *j = 1 && s.f2;\n+}\n+\n+int\n+main ()\n+{\n+  struct S1 s = { 0, 0, 1 };\n+  foo (s);\n+  if (i != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "7e950aeecdf2d2a36b966ae1f8c129cab34ab0d4", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "patch": "@@ -2998,23 +2998,6 @@ get_repl_default_def_ssa_name (struct access *racc)\n   return get_or_create_ssa_default_def (cfun, racc->replacement_decl);\n }\n \n-/* Return true if REF has a COMPONENT_REF with a bit-field field declaration\n-   somewhere in it.  */\n-\n-static inline bool\n-contains_bitfld_comp_ref_p (const_tree ref)\n-{\n-  while (handled_component_p (ref))\n-    {\n-      if (TREE_CODE (ref) == COMPONENT_REF\n-          && DECL_BIT_FIELD (TREE_OPERAND (ref, 1)))\n-        return true;\n-      ref = TREE_OPERAND (ref, 0);\n-    }\n-\n-  return false;\n-}\n-\n /* Return true if REF has an VIEW_CONVERT_EXPR or a COMPONENT_REF with a\n    bit-field field declaration somewhere in it.  */\n \n@@ -3110,7 +3093,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t     ???  This should move to fold_stmt which we simply should\n \t     call after building a VIEW_CONVERT_EXPR here.  */\n \t  if (AGGREGATE_TYPE_P (TREE_TYPE (lhs))\n-\t      && !contains_bitfld_comp_ref_p (lhs))\n+\t      && !contains_bitfld_component_ref_p (lhs))\n \t    {\n \t      lhs = build_ref_for_model (loc, lhs, 0, racc, gsi, false);\n \t      gimple_assign_set_lhs (*stmt, lhs);"}, {"sha": "6c71025b6b4845717430ad9bcedf645090ae0914", "filename": "gcc/tree.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "patch": "@@ -11785,4 +11785,21 @@ warn_deprecated_use (tree node, tree attr)\n     }\n }\n \n+/* Return true if REF has a COMPONENT_REF with a bit-field field declaration\n+   somewhere in it.  */\n+\n+bool\n+contains_bitfld_component_ref_p (const_tree ref)\n+{\n+  while (handled_component_p (ref))\n+    {\n+      if (TREE_CODE (ref) == COMPONENT_REF\n+          && DECL_BIT_FIELD (TREE_OPERAND (ref, 1)))\n+        return true;\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+\n+  return false;\n+}\n+\n #include \"gt-tree.h\""}, {"sha": "1d2b252dec0a5150e64011d50a694be8feecc6c9", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d2fb5244ba6c3c48222327e8ebc6883fa5c819e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7d2fb5244ba6c3c48222327e8ebc6883fa5c819e", "patch": "@@ -5974,6 +5974,7 @@ extern tree block_ultimate_origin (const_tree);\n extern tree get_binfo_at_offset (tree, HOST_WIDE_INT, tree);\n extern tree get_ref_base_and_extent (tree, HOST_WIDE_INT *,\n \t\t\t\t     HOST_WIDE_INT *, HOST_WIDE_INT *);\n+extern bool contains_bitfld_component_ref_p (const_tree);\n \n /* In tree-nested.c */\n extern tree build_addr (tree, tree);"}]}