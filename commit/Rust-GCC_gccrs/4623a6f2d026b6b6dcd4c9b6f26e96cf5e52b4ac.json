{"sha": "4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyM2E2ZjJkMDI2YjZiNmRjZDRjOWI2ZjI2ZTk2Y2Y1ZTUyYjRhYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-20T13:21:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-20T13:23:24Z"}, "message": "preprocessor:  Replace some flags with a single enum\n\n_cpp_find_file has 3 bool arguments, at most one of which is ever set.\nRipe for replacing with a 4-state enum.  Also, this is C++, so\n'typedef struct Foo Foo' is unnecessary.\n\n\t* internal.h (typedef _cpp_file): Delete, unnecessary in C++.\n\t(enum _cpp_find_file_kind): New.\n\t(_cpp_find_file): Use it, not 3 bools.\n\t* files.c (_cpp_find_file): Use _cpp_find_file_kind enum, not\n\tbools.\n\t(cpp_make_system_header): Break overly long line.\n\t(_cpp_stack_include, _cpp_fake_include)\n\t(_cpp_do_file_change, _cpp_compare_file_date, _cpp_has_header): Adjust.\n\t* init.c (cpp_read_main): Adjust _cpp_find_file call.", "tree": {"sha": "802098af1ee0bf4645320883d7675976d0dbfac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/802098af1ee0bf4645320883d7675976d0dbfac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610ae2dbbf98a291782cb05c0fb31e056193e5e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610ae2dbbf98a291782cb05c0fb31e056193e5e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610ae2dbbf98a291782cb05c0fb31e056193e5e2"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "622260391da34b370339959e7e811f75b8eddc7f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "patch": "@@ -1,3 +1,15 @@\n+2020-05-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* internal.h (typedef _cpp_file): Delete, unnecessary in C++.\n+\t(enum _cpp_find_file_kind): New.\n+\t(_cpp_find_file): Use it, not 3 bools.\n+\t* files.c (_cpp_find_file): Use _cpp_find_file_kind enum, not\n+\tbools.\n+\t(cpp_make_system_header): Break overly long line.\n+\t(_cpp_stack_include, _cpp_fake_include)\n+\t(_cpp_do_file_change, _cpp_compare_file_date, _cpp_has_header): Adjust.\n+\t* init.c (cpp_read_main): Adjust _cpp_find_file call.\n+\n 2020-05-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/cpplib.h (cpp_get_otions, cpp_get_callbacks)"}, {"sha": "85c79a1ef9314a0734bfbcc9b4f7e6c05a89cf6b", "filename": "libcpp/files.c", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "patch": "@@ -496,21 +496,16 @@ _cpp_find_failed (_cpp_file *file)\n    had previously been closed.  To open it again pass the return value\n    to open_file().\n \n-   If IMPLICIT_PREINCLUDE then it is OK for the file to be missing.\n-   If present, it is OK for a precompiled header to be included after\n-   it.\n+   If KIND is _cpp_FFK_PRE_INCLUDE then it is OK for the file to be\n+   missing.  If present, it is OK for a precompiled header to be\n+   included after it.\n \n    Use LOC as the location for any errors.  */\n \n _cpp_file *\n _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n-\t\tint angle_brackets,\n-\t\tbool fake, bool implicit_preinclude, bool has_include,\n-\t\tlocation_t loc)\n+\t\tint angle_brackets, _cpp_find_file_kind kind, location_t loc)\n {\n-  struct cpp_file_hash_entry *entry;\n-  void **hash_slot;\n-  _cpp_file *file;\n   bool invalid_pch = false;\n   bool saw_bracket_include = false;\n   bool saw_quote_include = false;\n@@ -520,22 +515,22 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n   if (start_dir == NULL)\n     cpp_error_at (pfile, CPP_DL_ICE, loc, \"NULL directory in find_file\");\n \n-  hash_slot\n+  void **hash_slot\n     = htab_find_slot_with_hash (pfile->file_hash, fname,\n \t\t\t\thtab_hash_string (fname), INSERT);\n \n   /* First check the cache before we resort to memory allocation.  */\n-  entry = search_cache ((struct cpp_file_hash_entry *) *hash_slot, start_dir);\n+  cpp_file_hash_entry *entry\n+    = search_cache ((struct cpp_file_hash_entry *) *hash_slot, start_dir);\n   if (entry)\n     return entry->u.file;\n \n-  file = make_cpp_file (pfile, start_dir, fname);\n+  _cpp_file *file = make_cpp_file (pfile, start_dir, fname);\n   file->implicit_preinclude\n-    = (implicit_preinclude\n-       || (pfile->buffer\n-\t   && pfile->buffer->file->implicit_preinclude));\n+    = (kind == _cpp_FFK_PRE_INCLUDE\n+       || (pfile->buffer && pfile->buffer->file->implicit_preinclude));\n \n-  if (!fake)\n+  if (kind != _cpp_FFK_FAKE)\n     /* Try each path in the include chain.  */\n     for (;;)\n       {\n@@ -580,7 +575,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \t\t\t     \"use -Winvalid-pch for more information\");\n \t      }\n \n-\t    if (implicit_preinclude)\n+\t    if (kind == _cpp_FFK_PRE_INCLUDE)\n \t      {\n \t\tfree ((char *) file->name);\n \t\tfree (file);\n@@ -593,7 +588,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \t\treturn NULL;\n \t      }\n \n-\t    if (!has_include)\n+\t    if (kind != _cpp_FFK_HAS_INCLUDE)\n \t      open_file_failed (pfile, file, angle_brackets, loc);\n \t    break;\n \t  }\n@@ -1049,7 +1044,8 @@ _cpp_stack_include (cpp_reader *pfile, const char *fname, int angle_brackets,\n     return false;\n \n   _cpp_file *file = _cpp_find_file (pfile, fname, dir, angle_brackets,\n-\t\t\t\t    false, type == IT_DEFAULT, false, loc);\n+\t\t\t\t    type == IT_DEFAULT ? _cpp_FFK_PRE_INCLUDE\n+\t\t\t\t    : _cpp_FFK_NORMAL, loc);\n   if (type == IT_DEFAULT && file == NULL)\n     return false;\n \n@@ -1342,8 +1338,7 @@ cpp_clear_file_cache (cpp_reader *pfile)\n void\n _cpp_fake_include (cpp_reader *pfile, const char *fname)\n {\n-  _cpp_find_file (pfile, fname, pfile->buffer->file->dir,\n-\t\t  0, true, false, false, 0);\n+  _cpp_find_file (pfile, fname, pfile->buffer->file->dir, 0, _cpp_FFK_FAKE, 0);\n }\n \n /* Not everyone who wants to set system-header-ness on a buffer can\n@@ -1360,7 +1355,8 @@ cpp_make_system_header (cpp_reader *pfile, int syshdr, int externc)\n     flags = 1 + (externc != 0);\n   pfile->buffer->sysp = flags;\n   _cpp_do_file_change (pfile, LC_RENAME, ORDINARY_MAP_FILE_NAME (map),\n-\t\t       SOURCE_LINE (map, pfile->line_table->highest_line), flags);\n+\t\t       SOURCE_LINE (map, pfile->line_table->highest_line),\n+\t\t       flags);\n }\n \n /* Allow the client to change the current file.  Used by the front end\n@@ -1461,8 +1457,7 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n   if (!dir)\n     return -1;\n \n-  file = _cpp_find_file (pfile, fname, dir, angle_brackets,\n-\t\t\t false, false, false, 0);\n+  file = _cpp_find_file (pfile, fname, dir, angle_brackets, _cpp_FFK_NORMAL, 0);\n   if (file->err_no)\n     return -1;\n \n@@ -2006,10 +2001,7 @@ _cpp_has_header (cpp_reader *pfile, const char *fname, int angle_brackets,\n {\n   cpp_dir *start_dir = search_path_head (pfile, fname, angle_brackets, type);\n   _cpp_file *file = _cpp_find_file (pfile, fname, start_dir, angle_brackets,\n-\t\t\t\t    /*fake=*/false,\n-\t\t\t\t    /*implicit_preinclude=*/false,\n-\t\t\t\t    /*has_include=*/true,\n-\t\t\t\t    0);\n+\t\t\t\t    _cpp_FFK_HAS_INCLUDE, 0);\n   return file->err_no != ENOENT;\n }\n "}, {"sha": "63124c8161e1b7266ba962b100a43cf9eb12ae96", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "patch": "@@ -662,8 +662,6 @@ cpp_post_options (cpp_reader *pfile)\n const char *\n cpp_read_main_file (cpp_reader *pfile, const char *fname)\n {\n-  const location_t loc = 0;\n-\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     {\n       if (!pfile->deps)\n@@ -675,8 +673,7 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n \n   pfile->main_file\n     = _cpp_find_file (pfile, fname, &pfile->no_search_path, /*angle=*/0,\n-\t\t      /*fake=*/false, /*preinclude=*/false, /*hasinclude=*/false,\n-\t\t      loc);\n+\t\t      _cpp_FFK_NORMAL, 0);\n   if (_cpp_find_failed (pfile->main_file))\n     return NULL;\n "}, {"sha": "049ee17531744bac9051022caf394abd6cdde530", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=4623a6f2d026b6b6dcd4c9b6f26e96cf5e52b4ac", "patch": "@@ -677,10 +677,10 @@ extern void _cpp_init_hashtable (cpp_reader *, cpp_hash_table *);\n extern void _cpp_destroy_hashtable (cpp_reader *);\n \n /* In files.c */\n-typedef struct _cpp_file _cpp_file;\n+enum _cpp_find_file_kind\n+  { _cpp_FFK_NORMAL, _cpp_FFK_FAKE, _cpp_FFK_PRE_INCLUDE, _cpp_FFK_HAS_INCLUDE };\n extern _cpp_file *_cpp_find_file (cpp_reader *, const char *, cpp_dir *,\n-\t\t\t\t  int angle, bool fake, bool preinclude,\n-\t\t\t\t  bool has_include, location_t);\n+\t\t\t\t  int angle, _cpp_find_file_kind, location_t);\n extern bool _cpp_find_failed (_cpp_file *);\n extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);\n extern void _cpp_fake_include (cpp_reader *, const char *);"}]}