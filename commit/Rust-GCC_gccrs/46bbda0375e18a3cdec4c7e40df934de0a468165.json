{"sha": "46bbda0375e18a3cdec4c7e40df934de0a468165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiYmRhMDM3NWUxOGEzY2RlYzRjN2U0MGRmOTM0ZGUwYTQ2ODE2NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:22:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:22:12Z"}, "message": "combine.c (record_truncated_value): Turn from being a for_each_rtx callback to a function that takes an rtx and...\n\ngcc/\n\t* combine.c (record_truncated_value): Turn from being a for_each_rtx\n\tcallback to a function that takes an rtx and returns a bool\n\t(record_truncated_values): Use FOR_EACH_SUBRTX_VAR instead of\n\tfor_each_rtx.\n\nFrom-SVN: r214624", "tree": {"sha": "56be0b8484a57ea01d20d7913c781baa3ad20c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56be0b8484a57ea01d20d7913c781baa3ad20c23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46bbda0375e18a3cdec4c7e40df934de0a468165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bbda0375e18a3cdec4c7e40df934de0a468165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46bbda0375e18a3cdec4c7e40df934de0a468165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bbda0375e18a3cdec4c7e40df934de0a468165/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ecb5b94a1a90498b4043f06bbb9ae08f34eb879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ecb5b94a1a90498b4043f06bbb9ae08f34eb879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ecb5b94a1a90498b4043f06bbb9ae08f34eb879"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "1cba035c91cfc5119169af301146b76079ea152c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bbda0375e18a3cdec4c7e40df934de0a468165/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bbda0375e18a3cdec4c7e40df934de0a468165/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46bbda0375e18a3cdec4c7e40df934de0a468165", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* combine.c (record_truncated_value): Turn from being a for_each_rtx\n+\tcallback to a function that takes an rtx and returns a bool\n+\t(record_truncated_values): Use FOR_EACH_SUBRTX_VAR instead of\n+\tfor_each_rtx.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* combine.c: Include rtl-iter.h."}, {"sha": "e2ef52529d2444de390b64ee72be7204d182b7e9", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bbda0375e18a3cdec4c7e40df934de0a468165/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bbda0375e18a3cdec4c7e40df934de0a468165/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=46bbda0375e18a3cdec4c7e40df934de0a468165", "patch": "@@ -471,7 +471,6 @@ static void distribute_links (struct insn_link *);\n static void mark_used_regs_combine (rtx);\n static void record_promoted_value (rtx_insn *, rtx);\n static bool unmentioned_reg_p (rtx, rtx);\n-static int record_truncated_value (rtx *, void *);\n static void record_truncated_values (rtx *, void *);\n static bool reg_truncated_to_mode (enum machine_mode, const_rtx);\n static rtx gen_lowpart_or_truncate (enum machine_mode, rtx);\n@@ -12502,15 +12501,14 @@ reg_truncated_to_mode (enum machine_mode mode, const_rtx x)\n   return false;\n }\n \n-/* Callback for for_each_rtx.  If *P is a hard reg or a subreg record the mode\n-   that the register is accessed in.  For non-TRULY_NOOP_TRUNCATION targets we\n-   might be able to turn a truncate into a subreg using this information.\n-   Return -1 if traversing *P is complete or 0 otherwise.  */\n+/* If X is a hard reg or a subreg record the mode that the register is\n+   accessed in.  For non-TRULY_NOOP_TRUNCATION targets we might be able\n+   to turn a truncate into a subreg using this information.  Return true\n+   if traversing X is complete.  */\n \n-static int\n-record_truncated_value (rtx *p, void *data ATTRIBUTE_UNUSED)\n+static bool\n+record_truncated_value (rtx x)\n {\n-  rtx x = *p;\n   enum machine_mode truncated_mode;\n   reg_stat_type *rsp;\n \n@@ -12520,10 +12518,10 @@ record_truncated_value (rtx *p, void *data ATTRIBUTE_UNUSED)\n       truncated_mode = GET_MODE (x);\n \n       if (GET_MODE_SIZE (original_mode) <= GET_MODE_SIZE (truncated_mode))\n-\treturn -1;\n+\treturn true;\n \n       if (TRULY_NOOP_TRUNCATION_MODES_P (truncated_mode, original_mode))\n-\treturn -1;\n+\treturn true;\n \n       x = SUBREG_REG (x);\n     }\n@@ -12532,7 +12530,7 @@ record_truncated_value (rtx *p, void *data ATTRIBUTE_UNUSED)\n   else if (REG_P (x) && REGNO (x) < FIRST_PSEUDO_REGISTER)\n     truncated_mode = GET_MODE (x);\n   else\n-    return 0;\n+    return false;\n \n   rsp = &reg_stat[REGNO (x)];\n   if (rsp->truncated_to_mode == 0\n@@ -12544,17 +12542,20 @@ record_truncated_value (rtx *p, void *data ATTRIBUTE_UNUSED)\n       rsp->truncation_label = label_tick;\n     }\n \n-  return -1;\n+  return true;\n }\n \n /* Callback for note_uses.  Find hardregs and subregs of pseudos and\n    the modes they are used in.  This can help truning TRUNCATEs into\n    SUBREGs.  */\n \n static void\n-record_truncated_values (rtx *x, void *data ATTRIBUTE_UNUSED)\n+record_truncated_values (rtx *loc, void *data ATTRIBUTE_UNUSED)\n {\n-  for_each_rtx (x, record_truncated_value, NULL);\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, *loc, NONCONST)\n+    if (record_truncated_value (*iter))\n+      iter.skip_subrtxes ();\n }\n \n /* Scan X for promoted SUBREGs.  For each one found,"}]}