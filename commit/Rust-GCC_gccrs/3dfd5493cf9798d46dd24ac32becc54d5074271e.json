{"sha": "3dfd5493cf9798d46dd24ac32becc54d5074271e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmZDU0OTNjZjk3OThkNDZkZDI0YWMzMmJlY2M1NGQ1MDc0MjcxZQ==", "commit": {"author": {"name": "Cassio Neri", "email": "cassio.neri@gmail.com", "date": "2021-02-24T17:23:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-24T17:58:47Z"}, "message": "libstdc++: More efficient date from days\n\nThis patch reimplements std::chrono::year_month_day::_S_from_days() which\nretrieves a date from the number of elapsed days since 1970/01/01.  The new\nimplementation is based on Proposition 6.3 of Neri and Schneider, \"Euclidean\nAffine Functions and Applications to Calendar Algorithms\" available at\nhttps://arxiv.org/abs/2102.06959.\n\nThe aforementioned paper benchmarks the implementation against several\ncounterparts, including libc++'s (which is identical to the current\nimplementation).  The results, shown in Figure 4, indicate the new algorithm is\n2.2 times faster than the current one.\n\nThe patch adds a test which loops through all integers in [-12687428, 11248737],\nand for each of them, gets the corresponding date and compares the result\nagainst its expected value.  The latter is calculated using a much simpler and\neasy to understand algorithm but which is also much slower.\n\nThe interval used in the test covers the full range of values for which a\nroundtrip must work [time.cal.ymd.members].  Despite its completeness the test\nruns in a matter of seconds.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (year_month_day::_S_from_days): New\n\timplementation.\n\t* testsuite/std/time/year_month_day/3.cc: New test.", "tree": {"sha": "c9b8755d65ee0af83804c0fd5ebab7e12f1a33e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b8755d65ee0af83804c0fd5ebab7e12f1a33e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dfd5493cf9798d46dd24ac32becc54d5074271e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfd5493cf9798d46dd24ac32becc54d5074271e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfd5493cf9798d46dd24ac32becc54d5074271e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfd5493cf9798d46dd24ac32becc54d5074271e/comments", "author": {"login": "cassioneri", "id": 2662854, "node_id": "MDQ6VXNlcjI2NjI4NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2662854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassioneri", "html_url": "https://github.com/cassioneri", "followers_url": "https://api.github.com/users/cassioneri/followers", "following_url": "https://api.github.com/users/cassioneri/following{/other_user}", "gists_url": "https://api.github.com/users/cassioneri/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassioneri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassioneri/subscriptions", "organizations_url": "https://api.github.com/users/cassioneri/orgs", "repos_url": "https://api.github.com/users/cassioneri/repos", "events_url": "https://api.github.com/users/cassioneri/events{/privacy}", "received_events_url": "https://api.github.com/users/cassioneri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e0d8a375bae07486c839228a520eaed9004a4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0d8a375bae07486c839228a520eaed9004a4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0d8a375bae07486c839228a520eaed9004a4f3"}], "stats": {"total": 120, "additions": 107, "deletions": 13}, "files": [{"sha": "085e487a7edee92d74fee45f3cad19fcd4965136", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfd5493cf9798d46dd24ac32becc54d5074271e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfd5493cf9798d46dd24ac32becc54d5074271e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=3dfd5493cf9798d46dd24ac32becc54d5074271e", "patch": "@@ -2429,22 +2429,45 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // TODO: Implement operator<<, from_stream.\n     };\n \n-    // Construct from days since 1970/01/01. Magic.\n+    // Construct from days since 1970/01/01.\n+    // Proposition 6.3 of Neri and Schneider,\n+    // \"Euclidean Affine Functions and Applications to Calendar Algorithms\".\n+    // https://arxiv.org/abs/2102.06959\n     constexpr year_month_day\n     year_month_day::_S_from_days(const days& __dp) noexcept\n     {\n-      const auto __z = __dp.count() + 719468;\n-      const auto __era = (__z >= 0 ? __z : __z - 146096) / 146097;\n-      const auto __doe = static_cast<unsigned>(__z - __era * 146097);\n-      const auto __yoe\n-\t= (__doe - __doe / 1460 + __doe / 36524 - __doe / 146096) / 365;\n-      const auto __y = static_cast<days::rep>(__yoe) + __era * 400;\n-      const auto __doy = __doe - (365 * __yoe + __yoe / 4 - __yoe / 100);\n-      const auto __mp = (5 * __doy + 2) / 153;\n-      const auto __d = __doy - (153 * __mp + 2) / 5 + 1;\n-      const auto __m = __mp < 10 ? __mp + 3 : __mp - 9;\n-      return year_month_day{chrono::year(__y + (__m <= 2)),\n-\t\t\t    chrono::month(__m), chrono::day(__d)};\n+      constexpr auto __z2    = static_cast<uint32_t>(-1468000);\n+      constexpr auto __r2_e3 = static_cast<uint32_t>(536895458);\n+\n+      const auto __r0 = __dp.count() + __r2_e3;\n+\n+      const auto __n1 = 4 * __r0 + 3;\n+      const auto __q1 = __n1 / 146097;\n+      const auto __r1 = __n1 % 146097 / 4;\n+\n+      constexpr auto __p32 = static_cast<uint64_t>(1) << 32;\n+      const auto __n2 = 4 * __r1 + 3;\n+      const auto __u2 = static_cast<uint64_t>(2939745) * __n2;\n+      const auto __q2 = static_cast<uint32_t>(__u2 / __p32);\n+      const auto __r2 = static_cast<uint32_t>(__u2 % __p32) / 2939745 / 4;\n+\n+      constexpr auto __p16 = static_cast<uint32_t>(1) << 16;\n+      const auto __n3 = 2141 * __r2 + 197913;\n+      const auto __q3 = __n3 / __p16;\n+      const auto __r3 = __n3 % __p16 / 2141;\n+\n+      const auto __y0 = 100 * __q1 + __q2;\n+      const auto __m0 = __q3;\n+      const auto __d0 = __r3;\n+\n+      const auto __j  = __r2 >= 306;\n+      const auto __y1 = __y0 + __j;\n+      const auto __m1 = __j ? __m0 - 12 : __m0;\n+      const auto __d1 = __d0 + 1;\n+\n+      return year_month_day{chrono::year{__y1 + __z2}, chrono::month{__m1},\n+\t\t\t    chrono::day{__d1}\n+      };\n     }\n \n     // Days since 1970/01/01. Magic."}, {"sha": "6e6a61d9163bb0fd698d0491967f9b6e77a2d5cb", "filename": "libstdc++-v3/testsuite/std/time/year_month_day/3.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfd5493cf9798d46dd24ac32becc54d5074271e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfd5493cf9798d46dd24ac32becc54d5074271e/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Fyear_month_day%2F3.cc?ref=3dfd5493cf9798d46dd24ac32becc54d5074271e", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class year_month_day [time.cal.year_month_day]\n+\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+// Slow but very clear way of advancing one day.\n+constexpr void\n+advance(std::chrono::year_month_day& ymd) noexcept {\n+\n+  using namespace std::chrono;\n+\n+  auto y = ymd.year();\n+  auto m = ymd.month();\n+  auto d = ymd.day();\n+\n+  if (d != year_month_day_last{year{y}, month_day_last{m}}.day())\n+    ++d;\n+  else {\n+    d = day{1};\n+    if (m != December)\n+      ++m;\n+    else {\n+      m = January;\n+      ++y;\n+    }\n+  }\n+  ymd = year_month_day{y, m, d};\n+}\n+\n+void test01()\n+{\n+  using namespace std::chrono;\n+\n+  // [-12687428, 11248737] maps to [-32767y/January/1d, 32767y/December/31d]\n+\n+  auto n   = days{-12687428};\n+  auto ymd = -32767y/January/1d;\n+  while (n < days{11248737}) {\n+    VERIFY( year_month_day{sys_days{n}} == ymd );\n+    ++n;\n+    advance(ymd);\n+  }\n+  // One more for n = 11248737 and ymd = 32767y/December/31d\n+  VERIFY( 32767y/December/31d == year_month_day{sys_days{days{11248737}}} );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}