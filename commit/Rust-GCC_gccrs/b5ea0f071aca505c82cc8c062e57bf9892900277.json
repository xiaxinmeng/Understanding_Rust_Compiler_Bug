{"sha": "b5ea0f071aca505c82cc8c062e57bf9892900277", "node_id": "C_kwDOANBUbNoAKGI1ZWEwZjA3MWFjYTUwNWM4MmNjOGMwNjJlNTdiZjk4OTI5MDAyNzc", "commit": {"author": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2023-01-18T03:06:56Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2023-01-24T04:55:11Z"}, "message": "LoongArch: Fixed a compilation failure with '%c' in inline assembly [PR107731].\n\nCo-authored-by: Yang Yujie <yangyujie@loongson.cn>\n\n\tPR target/107731\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.cc (loongarch_classify_address):\n\tAdd precessint for CONST_INT.\n\t(loongarch_print_operand_reloc): Operand modifier 'c' is supported.\n\t(loongarch_print_operand): Increase the processing of '%c'.\n\t* doc/extend.texi: Adds documents for LoongArch operand modifiers.\n\tAnd port the public operand modifiers information to this document.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/tst-asm-const.c: Moved to...\n\t* gcc.target/loongarch/pr107731.c: ...here.", "tree": {"sha": "1d12efa682bf526142811ea10921e3905ca05838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d12efa682bf526142811ea10921e3905ca05838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5ea0f071aca505c82cc8c062e57bf9892900277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ea0f071aca505c82cc8c062e57bf9892900277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5ea0f071aca505c82cc8c062e57bf9892900277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5ea0f071aca505c82cc8c062e57bf9892900277/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "049a52909075117f5112971cc83952af2a818bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049a52909075117f5112971cc83952af2a818bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049a52909075117f5112971cc83952af2a818bc1"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "6927bdc7fe5f4ce77f5e2acc4f18e8fcf2b18454", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ea0f071aca505c82cc8c062e57bf9892900277/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ea0f071aca505c82cc8c062e57bf9892900277/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=b5ea0f071aca505c82cc8c062e57bf9892900277", "patch": "@@ -2075,6 +2075,11 @@ loongarch_classify_address (struct loongarch_address_info *info, rtx x,\n       return (loongarch_valid_base_register_p (info->reg, mode, strict_p)\n \t      && loongarch_valid_lo_sum_p (info->symbol_type, mode,\n \t\t\t\t\t   info->offset));\n+    case CONST_INT:\n+      /* Small-integer addresses don't occur very often, but they\n+\t are legitimate if $r0 is a valid base register.  */\n+      info->type = ADDRESS_CONST_INT;\n+      return IMM12_OPERAND (INTVAL (x));\n \n     default:\n       return false;\n@@ -4933,6 +4938,7 @@ loongarch_print_operand_reloc (FILE *file, rtx op, bool hi64_part,\n \n    'A'\tPrint a _DB suffix if the memory model requires a release.\n    'b'\tPrint the address of a memory operand, without offset.\n+   'c'  Print an integer.\n    'C'\tPrint the integer branch condition for comparison OP.\n    'd'\tPrint CONST_INT OP in decimal.\n    'F'\tPrint the FPU branch condition for comparison OP.\n@@ -4979,6 +4985,14 @@ loongarch_print_operand (FILE *file, rtx op, int letter)\n        fputs (\"_db\", file);\n       break;\n \n+    case 'c':\n+      if (CONST_INT_P (op))\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (op));\n+      else\n+\toutput_operand_lossage (\"unsupported operand for code '%c'\", letter);\n+\n+      break;\n+\n     case 'C':\n       loongarch_print_int_branch_condition (file, code, letter);\n       break;"}, {"sha": "4a89a3eae7c22f57d5f8c6c3b8f41f39de5bb3ab", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ea0f071aca505c82cc8c062e57bf9892900277/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ea0f071aca505c82cc8c062e57bf9892900277/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b5ea0f071aca505c82cc8c062e57bf9892900277", "patch": "@@ -10402,8 +10402,10 @@ ensures that modifying @var{a} does not affect the address referenced by\n is undefined if @var{a} is modified before using @var{b}.\n \n @code{asm} supports operand modifiers on operands (for example @samp{%k2} \n-instead of simply @samp{%2}). Typically these qualifiers are hardware \n-dependent. The list of supported modifiers for x86 is found at \n+instead of simply @samp{%2}). @ref{GenericOperandmodifiers,\n+Generic Operand modifiers} lists the modifiers that are available\n+on all targets.  Other modifiers are hardware dependent.\n+For example, the list of supported modifiers for x86 is found at\n @ref{x86Operandmodifiers,x86 Operand modifiers}.\n \n If the C code that follows the @code{asm} makes no use of any of the output \n@@ -10671,8 +10673,10 @@ optimizers may discard the @code{asm} statement as unneeded\n (see @ref{Volatile}).\n \n @code{asm} supports operand modifiers on operands (for example @samp{%k2} \n-instead of simply @samp{%2}). Typically these qualifiers are hardware \n-dependent. The list of supported modifiers for x86 is found at \n+instead of simply @samp{%2}). @ref{GenericOperandmodifiers,\n+Generic Operand modifiers} lists the modifiers that are available\n+on all targets.  Other modifiers are hardware dependent.\n+For example, the list of supported modifiers for x86 is found at\n @ref{x86Operandmodifiers,x86 Operand modifiers}.\n \n In this example using the fictitious @code{combine} instruction, the \n@@ -11024,6 +11028,30 @@ lab:\n @}\n @end example\n \n+@anchor{GenericOperandmodifiers}\n+@subsubsection Generic Operand Modifiers\n+@noindent\n+The following table shows the modifiers supported by all targets and their effects:\n+\n+@multitable {Modifier} {Description} {Example}\n+@headitem Modifier @tab Description @tab Example\n+@item @code{c}\n+@tab Require a constant operand and print the constant expression with no punctuation.\n+@tab @code{%c0}\n+@item @code{n}\n+@tab Like @samp{%c} except that the value of the constant is negated before printing.\n+@tab @code{%n0}\n+@item @code{a}\n+@tab Substitute a memory reference, with the actual operand treated as the address.\n+This may be useful when outputting a ``load address'' instruction, because\n+often the assembler syntax for such an instruction requires you to write the\n+operand as if it were a memory reference.\n+@tab @code{%a0}\n+@item @code{l}\n+@tab Print the label name with no punctuation.\n+@tab @code{%l0}\n+@end multitable\n+\n @anchor{x86Operandmodifiers}\n @subsubsection x86 Operand Modifiers\n \n@@ -11374,6 +11402,21 @@ constant.  Used to select the specified bit position.\n @item @code{x} @tab Equivialent to @code{X}, but only for pointers.\n @end multitable\n \n+@anchor{loongarchOperandmodifiers}\n+@subsubsection LoongArch Operand Modifiers\n+\n+The list below describes the supported modifiers and their effects for LoongArch.\n+\n+@multitable @columnfractions .10 .90\n+@headitem Modifier @tab Description\n+@item @code{d} @tab Same as @code{c}.\n+@item @code{i} @tab Print the character ''@code{i}'' if the operand is not a register.\n+@item @code{m} @tab Same as @code{c}, but the printed value is @code{operand - 1}.\n+@item @code{X} @tab Print a constant integer operand in hexadecimal.\n+@item @code{z} @tab Print the operand in its unmodified form, followed by a comma.\n+@end multitable\n+\n+\n @lowersections\n @include md.texi\n @raisesections"}, {"sha": "80d84c48c6ec47a8a5302d276e9fd0f10c9a103c", "filename": "gcc/testsuite/gcc.target/loongarch/pr107731.c", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5ea0f071aca505c82cc8c062e57bf9892900277/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107731.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5ea0f071aca505c82cc8c062e57bf9892900277/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107731.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr107731.c?ref=b5ea0f071aca505c82cc8c062e57bf9892900277", "patch": "@@ -1,13 +1,13 @@\n-/* Test asm const. */\n /* { dg-do compile } */\n /* { dg-final { scan-assembler-times \"foo:.*\\\\.long 1061109567.*\\\\.long 52\" 1 } } */\n+\n int foo ()\n {\n   __asm__ volatile (\n           \"foo:\"\n           \"\\n\\t\"\n-\t  \".long %a0\\n\\t\"\n-\t  \".long %a1\\n\\t\"\n+\t  \".long %c0\\n\\t\"\n+\t  \".long %c1\\n\\t\"\n \t  :\n \t  :\"i\"(0x3f3f3f3f), \"i\"(52)\n \t  :", "previous_filename": "gcc/testsuite/gcc.target/loongarch/tst-asm-const.c"}]}