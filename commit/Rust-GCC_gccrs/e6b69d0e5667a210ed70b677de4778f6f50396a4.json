{"sha": "e6b69d0e5667a210ed70b677de4778f6f50396a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiNjlkMGU1NjY3YTIxMGVkNzBiNjc3ZGU0Nzc4ZjZmNTAzOTZhNA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-04-02T19:21:01Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-04-02T19:21:01Z"}, "message": "predicates.md (io_address_operand): New predicate.\n\n\t* config/avr/predicates.md (io_address_operand): New predicate. \n\t* config/avr/avr-protos.h (avr_io_address_p): Remove declaration.\n\t* config/avr/avr.c (avr_io_address_p): Remove function.\n\t(out_movqi_r_mr): Use 'io_address_operand' predicate instead of \n\t'avr_io_address_p' function.\n\t(out_movhi_r_mr): (Ditto.).\n\t(out_movqi_mr_r): (Ditto.).\n\t(out_movhi_mr_r): (Ditto.).\n\t(avr_address_cost): (Ditto.).\n\nFrom-SVN: r133846", "tree": {"sha": "542284168d0729532e8eddfa60988c11b12c5114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/542284168d0729532e8eddfa60988c11b12c5114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6b69d0e5667a210ed70b677de4778f6f50396a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b69d0e5667a210ed70b677de4778f6f50396a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b69d0e5667a210ed70b677de4778f6f50396a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b69d0e5667a210ed70b677de4778f6f50396a4/comments", "author": null, "committer": null, "parents": [{"sha": "7b1980026cceb8cdd46dc796b8be79245366f1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1980026cceb8cdd46dc796b8be79245366f1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1980026cceb8cdd46dc796b8be79245366f1f7"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "279b66312f27cdcded6e67e832bdd2d4aa635f6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6b69d0e5667a210ed70b677de4778f6f50396a4", "patch": "@@ -1,3 +1,15 @@\n+2008-04-02  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/predicates.md (io_address_operand): New predicate. \n+\t* config/avr/avr-protos.h (avr_io_address_p): Remove declaration.\n+\t* config/avr/avr.c (avr_io_address_p): Remove function.\n+\t(out_movqi_r_mr): Use 'io_address_operand' predicate instead of \n+\t'avr_io_address_p' function.\n+\t(out_movhi_r_mr): (Ditto.).\n+\t(out_movqi_mr_r): (Ditto.).\n+\t(out_movhi_mr_r): (Ditto.).\n+\t(avr_address_cost): (Ditto.).\n+\n 2008-04-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*float<SSEMODEI24:mode><X87MODEF:mode>2_1):"}, {"sha": "3fa3ea8e69c701376b96db197c29d27e13d1a680", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=e6b69d0e5667a210ed70b677de4778f6f50396a4", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes for exported functions defined in avr.c\n    \n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -122,7 +122,6 @@ extern RTX_CODE avr_normalize_condition (RTX_CODE condition);\n extern int compare_eq_p (rtx insn);\n extern void out_shift_with_cnt (const char *template, rtx insn,\n \t\t\t\trtx operands[], int *len, int t_len);\n-extern int avr_io_address_p (rtx x, int size);\n extern int avr_peep2_scratch_safe (rtx reg_rtx);\n #endif /* RTX_CODE */\n "}, {"sha": "a68a065dab96153c1b5db2f2c1b1d698b665142e", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e6b69d0e5667a210ed70b677de4778f6f50396a4", "patch": "@@ -1846,7 +1846,7 @@ out_movqi_r_mr (rtx insn, rtx op[], int *l)\n \t  *l = 1;\n \t  return AS2 (in,%0,__SREG__);\n \t}\n-      if (avr_io_address_p (x, 1))\n+      if (optimize > 0 && io_address_operand (x, QImode))\n \t{\n \t  *l = 1;\n \t  return AS2 (in,%0,%1-0x20);\n@@ -2034,7 +2034,7 @@ out_movhi_r_mr (rtx insn, rtx op[], int *l)\n     }\n   else if (CONSTANT_ADDRESS_P (base))\n     {\n-      if (avr_io_address_p (base, 2))\n+      if (optimize > 0 && io_address_operand (base, HImode))\n \t{\n \t  *l = 2;\n \t  return (AS2 (in,%A0,%A1-0x20) CR_TAB\n@@ -2534,7 +2534,7 @@ out_movqi_mr_r (rtx insn, rtx op[], int *l)\n \t  *l = 1;\n \t  return AS2 (out,__SREG__,%1);\n \t}\n-      if (avr_io_address_p (x, 1))\n+      if (optimize > 0 && io_address_operand (x, QImode))\n \t{\n \t  *l = 1;\n \t  return AS2 (out,%0-0x20,%1);\n@@ -2613,7 +2613,7 @@ out_movhi_mr_r (rtx insn, rtx op[], int *l)\n     l = &tmp;\n   if (CONSTANT_ADDRESS_P (base))\n     {\n-      if (avr_io_address_p (base, 2))\n+      if (optimize > 0 && io_address_operand (base, HImode))\n \t{\n \t  *l = 2;\n \t  return (AS2 (out,%B0-0x20,%B1) CR_TAB\n@@ -5465,7 +5465,7 @@ avr_address_cost (rtx x)\n     return 18;\n   if (CONSTANT_ADDRESS_P (x))\n     {\n-      if (avr_io_address_p (x, 1))\n+      if (optimize > 0 && io_address_operand (x, QImode))\n \treturn 2;\n       return 4;\n     }\n@@ -5711,17 +5711,6 @@ avr_hard_regno_mode_ok (int regno, enum machine_mode mode)\n   return !(regno & 1);\n }\n \n-/* Returns 1 if X is a valid address for an I/O register of size SIZE\n-   (1 or 2).  Used for lds/sts -> in/out optimization.  Add 0x20 to SIZE\n-   to check for the lower half of I/O space (for cbi/sbi/sbic/sbis).  */\n-\n-int\n-avr_io_address_p (rtx x, int size)\n-{\n-  return (optimize > 0 && GET_CODE (x) == CONST_INT\n-\t  && INTVAL (x) >= 0x20 && INTVAL (x) <= 0x60 - size);\n-}\n-\n const char *\n output_reload_inhi (rtx insn ATTRIBUTE_UNUSED, rtx *operands, int *len)\n {"}, {"sha": "020fb5f33525e7d317783bd411d8875d50482b01", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b69d0e5667a210ed70b677de4778f6f50396a4/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=e6b69d0e5667a210ed70b677de4778f6f50396a4", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for ATMEL AVR micro controllers.\n-;; Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n+;; Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -52,6 +52,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE((INTVAL (op)), 0x40, 0x5F)\")))\n \n+;; Return true if OP is a valid address of I/O space.\n+(define_predicate \"io_address_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE((INTVAL (op)), 0x20, (0x60 - GET_MODE_SIZE(mode)))\")))\n+\n ;; Return 1 if OP is the zero constant for MODE.\n (define_predicate \"const0_operand\"\n   (and (match_code \"const_int,const_double\")"}]}