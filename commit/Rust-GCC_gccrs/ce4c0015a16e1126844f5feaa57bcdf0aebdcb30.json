{"sha": "ce4c0015a16e1126844f5feaa57bcdf0aebdcb30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0YzAwMTVhMTZlMTEyNjg0NGY1ZmVhYTU3YmNkZjBhZWJkY2IzMA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2010-07-27T19:34:55Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2010-07-27T19:34:55Z"}, "message": "re PR rtl-optimization/40956 (Constants are never candidates for hoisting)\n\n\tPR rtl-optimization/40956\n\tPR target/42495\n\tPR middle-end/42574\n\t* gcse.c (compute_code_hoist_vbeinout): Consider more expressions\n\tfor hoisting.\n\t(hoist_code): Count occurences in current block too.\n\nFrom-SVN: r162590", "tree": {"sha": "bc917e23e29e482306b5b28d47954ead5d6531dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc917e23e29e482306b5b28d47954ead5d6531dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30/comments", "author": null, "committer": null, "parents": [{"sha": "2016034718e8074a6c222c71fd528846a32cfcd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2016034718e8074a6c222c71fd528846a32cfcd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2016034718e8074a6c222c71fd528846a32cfcd6"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "d39fbfca76f1f7cdd41c278a5e8817a7a48e9547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce4c0015a16e1126844f5feaa57bcdf0aebdcb30", "patch": "@@ -1,3 +1,12 @@\n+2010-07-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR rtl-optimization/40956\n+\tPR target/42495\n+\tPR middle-end/42574\n+\t* gcse.c (compute_code_hoist_vbeinout): Consider more expressions\n+\tfor hoisting.\n+\t(hoist_code): Count occurences in current block too.\n+\n 2010-07-27  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* gcse.c (struct expr:max_distance): New field."}, {"sha": "4b2547c33670d1db8dc374d12edab884c88ed33a", "filename": "gcc/gcse.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4c0015a16e1126844f5feaa57bcdf0aebdcb30/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ce4c0015a16e1126844f5feaa57bcdf0aebdcb30", "patch": "@@ -4247,8 +4247,15 @@ compute_code_hoist_vbeinout (void)\n       FOR_EACH_BB_REVERSE (bb)\n \t{\n \t  if (bb->next_bb != EXIT_BLOCK_PTR)\n-\t    sbitmap_intersection_of_succs (hoist_vbeout[bb->index],\n-\t\t\t\t\t   hoist_vbein, bb->index);\n+\t    {\n+\t      sbitmap_intersection_of_succs (hoist_vbeout[bb->index],\n+\t\t\t\t\t     hoist_vbein, bb->index);\n+\n+\t      /* Include expressions in VBEout that are calculated\n+\t\t in BB and available at its end.  */\n+\t      sbitmap_a_or_b (hoist_vbeout[bb->index],\n+\t\t\t      hoist_vbeout[bb->index], comp[bb->index]);\n+\t    }\n \n \t  changed |= sbitmap_a_or_b_and_c_cg (hoist_vbein[bb->index],\n \t\t\t\t\t      antloc[bb->index],\n@@ -4430,6 +4437,11 @@ hoist_code (void)\n \n \t  if (TEST_BIT (hoist_vbeout[bb->index], i))\n \t    {\n+\t      /* If an expression is computed in BB and is available at end of\n+\t\t BB, hoist all occurences dominated by BB to BB.  */\n+\t      if (TEST_BIT (comp[bb->index], i))\n+\t\thoistable++;\n+\n \t      /* We've found a potentially hoistable expression, now\n \t\t we look at every block BB dominates to see if it\n \t\t computes the expression.  */"}]}