{"sha": "6d55e0ab0af7c4b69977839d9bf43290ef12bcab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ1NWUwYWIwYWY3YzRiNjk5Nzc4MzlkOWJmNDMyOTBlZjEyYmNhYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-01-04T18:43:51Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-01-04T18:43:51Z"}, "message": "(sdbout_symbol): Handle variables at zero offset from frame pointer.\n\nFrom-SVN: r6358", "tree": {"sha": "681843d9d224b144d7be9428923a12205d825512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/681843d9d224b144d7be9428923a12205d825512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d55e0ab0af7c4b69977839d9bf43290ef12bcab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d55e0ab0af7c4b69977839d9bf43290ef12bcab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d55e0ab0af7c4b69977839d9bf43290ef12bcab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d55e0ab0af7c4b69977839d9bf43290ef12bcab/comments", "author": null, "committer": null, "parents": [{"sha": "6a22e3a73199601882483cccb71ddca83b512df1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a22e3a73199601882483cccb71ddca83b512df1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a22e3a73199601882483cccb71ddca83b512df1"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "04578e5298ee23aa7c7cd5f486738bbef0800aaa", "filename": "gcc/sdbout.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d55e0ab0af7c4b69977839d9bf43290ef12bcab/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d55e0ab0af7c4b69977839d9bf43290ef12bcab/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=6d55e0ab0af7c4b69977839d9bf43290ef12bcab", "patch": "@@ -842,12 +842,17 @@ sdbout_symbol (decl, local)\n \t  type = build_pointer_type (TREE_TYPE (decl));\n \t}\n       else if (GET_CODE (value) == MEM\n-\t       && GET_CODE (XEXP (value, 0)) == PLUS\n-\t       && GET_CODE (XEXP (XEXP (value, 0), 0)) == REG\n-\t       && GET_CODE (XEXP (XEXP (value, 0), 1)) == CONST_INT)\n+\t       && ((GET_CODE (XEXP (value, 0)) == PLUS\n+\t\t    && GET_CODE (XEXP (XEXP (value, 0), 0)) == REG\n+\t\t    && GET_CODE (XEXP (XEXP (value, 0), 1)) == CONST_INT)\n+\t\t   /* This is for variables which are at offset zero from\n+\t\t      the frame pointer.  This happens on the Alpha.\n+\t\t      Non-frame pointer registers are excluded above.  */\n+\t\t   || (GET_CODE (XEXP (value, 0)) == REG)))\n \t{\n-\t  /* DECL_RTL looks like (MEM (PLUS (REG...) (CONST_INT...))).\n-\t     We want the value of that CONST_INT.  */\n+\t  /* DECL_RTL looks like (MEM (PLUS (REG...) (CONST_INT...)))\n+\t     or (MEM (REG...)).  We want the value of that CONST_INT\n+\t     or zero.  */\n \t  PUT_SDB_DEF (name);\n \t  PUT_SDB_INT_VAL (DEBUGGER_AUTO_OFFSET (XEXP (value, 0)));\n \t  PUT_SDB_SCL (C_AUTO);"}]}