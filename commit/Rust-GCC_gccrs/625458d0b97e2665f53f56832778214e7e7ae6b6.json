{"sha": "625458d0b97e2665f53f56832778214e7e7ae6b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI1NDU4ZDBiOTdlMjY2NWY1M2Y1NjgzMjc3ODIxNGU3ZTdhZTZiNg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-04T19:42:01Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-04T19:42:01Z"}, "message": "cppinit.c (MAX_WCHAR_TYPE_SIZE): Move to cpplib.h\n\n\t* cppinit.c (MAX_WCHAR_TYPE_SIZE): Move to cpplib.h\n\t(cpp_post_options): Move sanity checks to...\n\t(sanity_checks): New.\n\t* cpplex.c (maybe_read_ucs): Fix prototype.\n\t(parse_string, cpp_parse_escape): Cast for %c format specifier.\n\t* cpplib.h (cppchar_t): Use unsigned long or unsigned long long\n\tif necessary.\n\nFrom-SVN: r53163", "tree": {"sha": "93fad2ddad4007e009671f2fd3bcb16a3937b345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93fad2ddad4007e009671f2fd3bcb16a3937b345"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/625458d0b97e2665f53f56832778214e7e7ae6b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625458d0b97e2665f53f56832778214e7e7ae6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625458d0b97e2665f53f56832778214e7e7ae6b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625458d0b97e2665f53f56832778214e7e7ae6b6/comments", "author": null, "committer": null, "parents": [{"sha": "916b60b71e4ac6ef8184427616df27b843de4271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916b60b71e4ac6ef8184427616df27b843de4271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916b60b71e4ac6ef8184427616df27b843de4271"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "e91a7793321a279eb7350d4c47a2b6ce9fd1df8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=625458d0b97e2665f53f56832778214e7e7ae6b6", "patch": "@@ -1,3 +1,13 @@\n+2002-05-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppinit.c (MAX_WCHAR_TYPE_SIZE): Move to cpplib.h\n+\t(cpp_post_options): Move sanity checks to...\n+\t(sanity_checks): New.\n+\t* cpplex.c (maybe_read_ucs): Fix prototype.\n+\t(parse_string, cpp_parse_escape): Cast for %c format specifier.\n+\t* cpplib.h (cppchar_t): Use unsigned long or unsigned long long\n+\tif necessary.\n+\n 2002-05-04  Bernd Schmidt  <bernds@redhat.com>\n \n \t* config/i386/i386.c (bdesc_2arg): Add a couple of missing SSE2"}, {"sha": "594fa7ed7398b46b7555095380111aa80bb946ad", "filename": "gcc/cppinit.c", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=625458d0b97e2665f53f56832778214e7e7ae6b6", "patch": "@@ -509,9 +509,6 @@ cpp_create_reader (lang)\n #define MAX_CHAR_TYPE_SIZE CHAR_TYPE_SIZE\n #endif\n   CPP_OPTION (pfile, char_precision) = MAX_CHAR_TYPE_SIZE;\n-#ifndef MAX_WCHAR_TYPE_SIZE\n-#define MAX_WCHAR_TYPE_SIZE WCHAR_TYPE_SIZE\n-#endif\n   CPP_OPTION (pfile, wchar_precision) = MAX_WCHAR_TYPE_SIZE;\n \n   /* It's simplest to just create this struct whether or not it will\n@@ -1793,12 +1790,46 @@ cpp_handle_options (pfile, argc, argv)\n   return i;\n }\n \n+/* Sanity-checks are dependent on command-line options, so it is\n+   called as a subroutine of cpp_post_options ().  */\n+#if ENABLE_CHECKING\n+static void sanity_checks PARAMS ((cpp_reader *));\n+static void sanity_checks (pfile)\n+     cpp_reader *pfile;\n+{\n+  cppchar_t test = 0;\n+  size_t max_prec;\n+\n+  /* Sanity checks for CPP arithmetic.  */\n+  test--;\n+  if (test < 1)\n+    cpp_error (pfile, DL_FATAL, \"cppchar_t must be an unsigned type\");\n+\n+  if (CPP_OPTION (pfile, precision) > BITS_PER_HOST_WIDEST_INT)\n+    cpp_error (pfile, DL_FATAL,\n+\t       \"preprocessor arithmetic has maximum precision of %u bits; target requires %u bits\",\n+\t       BITS_PER_HOST_WIDEST_INT, CPP_OPTION (pfile, precision));\n+\n+  max_prec = CPP_OPTION (pfile, char_precision);\n+  if (max_prec < CPP_OPTION (pfile, wchar_precision))\n+    max_prec = CPP_OPTION (pfile, wchar_precision);\n+  if (max_prec > BITS_PER_CPPCHAR_T)\n+    cpp_error (pfile, DL_FATAL,\n+\t       \"CPP on this host cannot handle (wide) character constants over %u bits, but the target requires %u bits\",\n+\t       BITS_PER_CPPCHAR_T, max_prec);\n+}\n+#else\n+# define sanity_checks(PFILE)\n+#endif\n+\n /* Extra processing when all options are parsed, after all calls to\n    cpp_handle_option[s].  Consistency checks etc.  */\n void\n cpp_post_options (pfile)\n      cpp_reader *pfile;\n {\n+  sanity_checks (pfile);\n+\n   if (pfile->print_version)\n     {\n       fprintf (stderr, _(\"GNU CPP version %s (cpplib)\"), version_string);\n@@ -1808,27 +1839,6 @@ cpp_post_options (pfile)\n       fputc ('\\n', stderr);\n     }\n \n-#if ENABLE_CHECKING\n-  /* Sanity checks for CPP arithmetic.  */\n-  if (CPP_OPTION (pfile, precision) > BITS_PER_HOST_WIDEST_INT)\n-    cpp_error (pfile, DL_FATAL,\n-\t       \"preprocessor arithmetic has maximum precision of %u bits; target requires %u bits\",\n-\t       BITS_PER_HOST_WIDEST_INT, CPP_OPTION (pfile, precision));\n-\n-  if (CPP_OPTION (pfile, char_precision) > BITS_PER_CPPCHAR_T\n-      || CPP_OPTION (pfile, wchar_precision) > BITS_PER_CPPCHAR_T)\n-    cpp_error (pfile, DL_FATAL,\n-\t       \"CPP cannot handle (wide) character constants over %u bits\",\n-\t       BITS_PER_CPPCHAR_T);\n-\n-  {\n-    cppchar_t test = 0;\n-    test--;\n-    if (test < 1)\n-      cpp_error (pfile, DL_FATAL, \"cppchar_t must be an unsigned type\");\n-  }\n-#endif\n-\n   /* Canonicalize in_fname and out_fname.  We guarantee they are not\n      NULL, and that the empty string represents stdin / stdout.  */\n   if (CPP_OPTION (pfile, in_fname) == NULL"}, {"sha": "51c82b206081fccef0eda57892e06783563cc125", "filename": "gcc/cpplex.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=625458d0b97e2665f53f56832778214e7e7ae6b6", "patch": "@@ -80,7 +80,7 @@ static void save_comment PARAMS ((cpp_reader *, cpp_token *, const uchar *,\n \t\t\t\t  cppchar_t));\n static int name_p PARAMS ((cpp_reader *, const cpp_string *));\n static int maybe_read_ucs PARAMS ((cpp_reader *, const unsigned char **,\n-\t\t\t\t   const unsigned char *, unsigned int *));\n+\t\t\t\t   const unsigned char *, cppchar_t *));\n static tokenrun *next_tokenrun PARAMS ((tokenrun *));\n \n static unsigned int hex_digit_value PARAMS ((unsigned int));\n@@ -695,7 +695,7 @@ parse_string (pfile, token, terminator)\n \tunterminated:\n \t  if (CPP_OPTION (pfile, lang) != CLK_ASM || terminator == '>')\n \t    cpp_error (pfile, DL_ERROR, \"missing terminating %c character\",\n-\t\t       terminator);\n+\t\t       (int) terminator);\n \t  buffer->cur--;\n \t  break;\n \t}\n@@ -1648,7 +1648,7 @@ maybe_read_ucs (pfile, pstr, limit, pc)\n      cpp_reader *pfile;\n      const unsigned char **pstr;\n      const unsigned char *limit;\n-     unsigned int *pc;\n+     cppchar_t *pc;\n {\n   const unsigned char *p = *pstr;\n   unsigned int code = 0;\n@@ -1763,7 +1763,7 @@ cpp_parse_escape (pfile, pstr, limit, wide)\n     case 'e': case 'E':\n       if (CPP_PEDANTIC (pfile))\n \tcpp_error (pfile, DL_PEDWARN,\n-\t\t   \"non-ISO-standard escape sequence, '\\\\%c'\", c);\n+\t\t   \"non-ISO-standard escape sequence, '\\\\%c'\", (int) c);\n       c = TARGET_ESC;\n       break;\n       \n@@ -1838,9 +1838,11 @@ cpp_parse_escape (pfile, pstr, limit, wide)\n   if (unknown)\n     {\n       if (ISGRAPH (c))\n-\tcpp_error (pfile, DL_PEDWARN, \"unknown escape sequence '\\\\%c'\", c);\n+\tcpp_error (pfile, DL_PEDWARN,\n+\t\t   \"unknown escape sequence '\\\\%c'\", (int) c);\n       else\n-\tcpp_error (pfile, DL_PEDWARN, \"unknown escape sequence: '\\\\%03o'\", c);\n+\tcpp_error (pfile, DL_PEDWARN,\n+\t\t   \"unknown escape sequence: '\\\\%03o'\", (int) c);\n     }\n \n   if (c > mask)"}, {"sha": "9063647f6db76a6a65655681f7303bbaad3a92ec", "filename": "gcc/cpplib.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625458d0b97e2665f53f56832778214e7e7ae6b6/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=625458d0b97e2665f53f56832778214e7e7ae6b6", "patch": "@@ -191,11 +191,22 @@ struct cpp_token\n };\n \n /* A type wide enough to hold any multibyte source character.\n-   cpplib's character constant interpreter uses shifts, and so\n-   requires an unsigned type.  */\n-typedef unsigned int cppchar_t;\n-/* Its signed equivalent.  */\n-typedef int cppchar_signed_t;\n+   cpplib's character constant interpreter requires an unsigned type.\n+   Also, a typedef for the signed equivalent.  */\n+#ifndef MAX_WCHAR_TYPE_SIZE\n+# define MAX_WCHAR_TYPE_SIZE WCHAR_TYPE_SIZE\n+#endif\n+#if SIZEOF_INT >= MAX_WCHAR_TYPE_SIZE\n+# define CPPCHAR_SIGNED_T int\n+#else\n+# if SIZEOF_LONG >= MAX_WCHAR_TYPE_SIZE || !HAVE_LONG_LONG\n+#  define CPPCHAR_SIGNED_T long\n+# else\n+#  define CPPCHAR_SIGNED_T long long\n+# endif\n+#endif\n+typedef unsigned CPPCHAR_SIGNED_T cppchar_t;\n+typedef CPPCHAR_SIGNED_T cppchar_signed_t;\n \n /* Values for opts.dump_macros.\n   dump_only means inhibit output of the preprocessed text"}]}