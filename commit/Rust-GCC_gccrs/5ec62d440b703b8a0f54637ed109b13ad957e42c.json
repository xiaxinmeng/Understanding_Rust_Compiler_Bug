{"sha": "5ec62d440b703b8a0f54637ed109b13ad957e42c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjNjJkNDQwYjcwM2I4YTBmNTQ2MzdlZDEwOWIxM2FkOTU3ZTQyYw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-09-01T18:09:18Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-09-01T18:09:18Z"}, "message": "Makefile.am: Use LD_RUN_PATH when linking abi_check.\n\n2002-09-01  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* testsuite/Makefile.am:  Use LD_RUN_PATH when linking abi_check.\n\tFix spelling in comment.\n\t* testsuite/Makefile.in:  Regenerate.\n\t* testsuite/abi_check.cc:  Use string literals to build 'cmd' rather\n\tthan 'quote' and 'bslash'.\n\nFrom-SVN: r56722", "tree": {"sha": "c6f476522eec11fa00e5d35e20654b0ee6f125eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6f476522eec11fa00e5d35e20654b0ee6f125eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec62d440b703b8a0f54637ed109b13ad957e42c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec62d440b703b8a0f54637ed109b13ad957e42c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec62d440b703b8a0f54637ed109b13ad957e42c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec62d440b703b8a0f54637ed109b13ad957e42c/comments", "author": null, "committer": null, "parents": [{"sha": "0475ed26cbc2b7214ad0cd405204a592cbc2def7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0475ed26cbc2b7214ad0cd405204a592cbc2def7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0475ed26cbc2b7214ad0cd405204a592cbc2def7"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "53c552b6da5e8f362bd1028563c92aadf7c9383c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ec62d440b703b8a0f54637ed109b13ad957e42c", "patch": "@@ -1,3 +1,11 @@\n+2002-09-01  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* testsuite/Makefile.am:  Use LD_RUN_PATH when linking abi_check.\n+\tFix spelling in comment.\n+\t* testsuite/Makefile.in:  Regenerate.\n+\t* testsuite/abi_check.cc:  Use string literals to build 'cmd' rather\n+\tthan 'quote' and 'bslash'.\n+\n 2002-08-31  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* acinclude.m4:  Minor comment tweaks."}, {"sha": "0deecb62b3db8433578e985f9200584aa690aa62", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=5ec62d440b703b8a0f54637ed109b13ad957e42c", "patch": "@@ -37,10 +37,11 @@ AM_RUNTESTFLAGS =\n RUNTESTFLAGS =\n \n ## CXX is actually a \"C\" compiler. These are real C++ programs.\n-## Do the same thing as `testsuite_hooks --build-cxx`\n+## Do the same thing as `testsuite_flags --build-cxx`\n CXX_fake = @glibcpp_CXX@ \n CXX=`echo $(CXX_fake) | sed 's/xgcc/g++/g'`\n CXXLINK = \\\n+\tLD_RUN_PATH=${LD_RUN_PATH:+$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs\\\n \t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n \t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n "}, {"sha": "97fea36ad6aac69b969fbc2abe51d319c58d55f2", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=5ec62d440b703b8a0f54637ed109b13ad957e42c", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -136,34 +136,26 @@ AUTOMAKE_OPTIONS = cygnus dejagnu\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n-            echo @glibcpp_builddir@/../../expect/expect ; \\\n-          else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n-\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n \n \n AM_RUNTESTFLAGS = \n RUNTESTFLAGS = \n \n CXX_fake = @glibcpp_CXX@ \n CXX = `echo $(CXX_fake) | sed 's/xgcc/g++/g'`\n-CXXLINK = \\\n-\t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n-\t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK =  \tLD_RUN_PATH=${LD_RUN_PATH:+$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs \t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n \n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n+INCLUDES =  \t-nostdinc++ \t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n \n \n noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = testsuite_hooks.cc\n-@GLIBCPP_BUILD_ABI_CHECK_TRUE@noinst_PROGRAMS = @GLIBCPP_BUILD_ABI_CHECK_TRUE@abi_check\n+@GLIBCPP_BUILD_ABI_CHECK_TRUE@noinst_PROGRAMS = abi_check\n @GLIBCPP_BUILD_ABI_CHECK_FALSE@noinst_PROGRAMS = \n abi_check_SOURCES = abi_check.cc\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n@@ -194,7 +186,7 @@ DIST_COMMON =  README Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libv3test_a_SOURCES) $(abi_check_SOURCES)\n OBJECTS = $(libv3test_a_OBJECTS) $(abi_check_OBJECTS)\n@@ -305,7 +297,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n \n mostlyclean-tags:\n \n@@ -362,7 +354,7 @@ site.exp: Makefile\n \t@echo 'set build_alias $(build_alias)' >> $@-t\n \t@echo 'set build_triplet $(build_triplet)' >> $@-t\n \t@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t\n-\t@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t\n+\t@test ! -f $(srcdir)/site.exp || sed '1,/^## All variables above are.*##/ d' $(srcdir)/site.exp >> $@-t\n \t@test ! -f site.exp || mv site.exp site.bak\n \t@mv $@-t site.exp\n info-am:"}, {"sha": "10c300c853d1d0f1b708c26ff90463ede0fcea1b", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec62d440b703b8a0f54637ed109b13ad957e42c/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=5ec62d440b703b8a0f54637ed109b13ad957e42c", "patch": "@@ -249,8 +249,6 @@ int main(int argc, char** argv)\n    \"%s:%s\\n\", $4, $8; else if ($4 == \"OBJECT\") printf \"%s:%s:%s\\n\", $4,\n    $3, $8;}' | sort >& current_symbols.txt\n    */\n-  const char quote = '\"';\n-  const char bslash = '\\\\';\n \n   // GNU binutils, somewhere after version 2.11.2, requires -W/--wide\n   // to avoid default line truncation.  -W is not supported and\n@@ -259,15 +257,13 @@ int main(int argc, char** argv)\n     (system(\"readelf --help | grep -- --wide >/dev/null\") == 0);\n \n   ostringstream cmd;\n-  cmd << \"readelf -s \" << (readelf_need_wide ? \"-W \" : \"\")\n-      << test_lib << \" | sed '/\" << bslash \n-      << \".dynsym/,/^$/p;d' | egrep -v ' (LOCAL|UND) ' | \"\n-      << \"awk '{ if ($4 == \" << quote << \"FUNC\" << quote << \"|| $4 == \" \n-      << quote << \"NOTYPE\" << quote << \") printf \" << quote << \"%s:%s\"\n-      << bslash << \"n\" << quote << \", $4, $8; else if ($4 == \" \n-      << quote << \"OBJECT\" << quote << \") printf \" << quote\n-      << \"%s:%s:%s\" << bslash << \"n\" << quote << \", $4, $3, $8;}' | \"\n-      << \"sort > \" << test_file << \" 2>&1\";\n+  cmd << \"readelf -s \" << (readelf_need_wide ? \"-W \" : \"\") << test_lib\n+      << \" | sed '/\\\\.dynsym/,/^$/p;d' | egrep -v ' (LOCAL|UND) ' | \"\n+         \"awk '{ if ($4 == \\\"FUNC\\\" || $4 == \\\"NOTYPE\\\") \"\n+                   \"printf \\\"%s:%s\\\\n\\\", $4, $8; \"\n+                 \"else if ($4 == \\\"OBJECT\\\") \"\n+                   \"printf \\\"%s:%s:%s\\\\n\\\", $4, $3, $8;}' | sort > \"\n+      << test_file << \" 2>&1\";\n   if (system(cmd.str().c_str()) != 0)\n     {\n       cerr << \"Unable to generate the list of exported symbols.\" << endl;"}]}