{"sha": "22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJjMjM4ODZkYmU1M2M2YTQ2NzdkNDVkZWU5ZWQ4YzJlNTZhMmYyYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-10-18T14:35:51Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-10-18T14:35:51Z"}, "message": "re PR fortran/63553 ([OOP] Wrong code when assigning a CLASS to a TYPE)\n\n2014-10-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/63553\n\t* resolve.c (resolve_ordinary_assign): Add data component to\n\trvalue expression for class to type assignment.\n\n2014-10-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/63553\n\t* gfortran.dg/class_to_type_3.f03 : New test\n\nFrom-SVN: r216427", "tree": {"sha": "56aba0cde88a84d0a7cba8bbdb9fa080b38d13b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56aba0cde88a84d0a7cba8bbdb9fa080b38d13b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/comments", "author": null, "committer": null, "parents": [{"sha": "54157b52419121fb41b6a3a287c4a4a02c0bd52d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54157b52419121fb41b6a3a287c4a4a02c0bd52d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54157b52419121fb41b6a3a287c4a4a02c0bd52d"}], "stats": {"total": 173, "additions": 115, "deletions": 58}, "files": [{"sha": "1be334f1f65f65ae3a1cfa5fb0a6302979990246", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "patch": "@@ -1,3 +1,9 @@\n+2014-10-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/63553\n+\t* resolve.c (resolve_ordinary_assign): Add data component to\n+\trvalue expression for class to type assignment.\n+\n 2014-10-16  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* f95-lang.c: Adjust include files."}, {"sha": "4acebd0a3b9cd74d169f2e7aba4d9adcfd283db5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 61, "deletions": 56, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "patch": "@@ -1815,7 +1815,7 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n \t      && sym->ns->proc_name->attr.flavor != FL_MODULE)\n \t    {\n \t      if (!gfc_notify_std (GFC_STD_F2008, \"Internal procedure '%s' is\"\n-\t\t\t\t   \" used as actual argument at %L\", \n+\t\t\t\t   \" used as actual argument at %L\",\n \t\t\t\t   sym->name, &e->where))\n \t\tgoto cleanup;\n \t    }\n@@ -2435,7 +2435,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \n       if (!gfc_compare_interfaces (sym, def_sym, sym->name, 0, 1,\n \t\t\t\t   reason, sizeof(reason), NULL, NULL))\n-\t{\t\n+\t{\n \t  gfc_error (\"Interface mismatch in global procedure '%s' at %L: %s \",\n \t\t    sym->name, &sym->declared_at, reason);\n \t  goto done;\n@@ -2449,7 +2449,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n       if (sym->attr.if_source != IFSRC_IFBODY)\n \tgfc_procedure_use (def_sym, actual, where);\n     }\n-    \n+\n done:\n   gfc_errors_to_warnings (0);\n \n@@ -2551,7 +2551,7 @@ resolve_generic_f (gfc_expr *expr)\n \n   if (intr)\n     {\n-      if (!gfc_convert_to_structure_constructor (expr, intr->sym, NULL, \n+      if (!gfc_convert_to_structure_constructor (expr, intr->sym, NULL,\n \t\t\t\t\t\t NULL, false))\n \treturn false;\n       return resolve_structure_cons (expr, 0);\n@@ -2853,7 +2853,7 @@ resolve_function (gfc_expr *expr)\n   no_formal_args = sym && is_external_proc (sym)\n   \t\t       && gfc_sym_get_dummy_args (sym) == NULL;\n \n-  if (!resolve_actual_arglist (expr->value.function.actual, \n+  if (!resolve_actual_arglist (expr->value.function.actual,\n \t\t\t       p, no_formal_args))\n     {\n       inquiry_argument = false;\n@@ -4124,7 +4124,7 @@ gfc_resolve_index_1 (gfc_expr *index, int check_scalar,\n     }\n \n   if (index->ts.type == BT_REAL)\n-    if (!gfc_notify_std (GFC_STD_LEGACY, \"REAL array index at %L\", \n+    if (!gfc_notify_std (GFC_STD_LEGACY, \"REAL array index at %L\",\n \t\t\t &index->where))\n       return false;\n \n@@ -5830,7 +5830,7 @@ resolve_typebound_function (gfc_expr* e)\n \n   /* Get the CLASS declared type.  */\n   declared = get_declared_from_expr (&class_ref, &new_ref, e, true);\n-  \n+\n   if (!resolve_fl_derived (declared))\n     return false;\n \n@@ -6030,8 +6030,8 @@ resolve_ppc_call (gfc_code* c)\n \n   c->ext.actual = c->expr1->value.compcall.actual;\n \n-  if (!resolve_actual_arglist (c->ext.actual, comp->attr.proc, \n-\t\t\t       !(comp->ts.interface \n+  if (!resolve_actual_arglist (c->ext.actual, comp->attr.proc,\n+\t\t\t       !(comp->ts.interface\n \t\t\t\t && comp->ts.interface->formal)))\n     return false;\n \n@@ -6065,8 +6065,8 @@ resolve_expr_ppc (gfc_expr* e)\n   if (!resolve_ref (e))\n     return false;\n \n-  if (!resolve_actual_arglist (e->value.function.actual, comp->attr.proc, \n-\t\t\t       !(comp->ts.interface \n+  if (!resolve_actual_arglist (e->value.function.actual, comp->attr.proc,\n+\t\t\t       !(comp->ts.interface\n \t\t\t\t && comp->ts.interface->formal)))\n     return false;\n \n@@ -6274,19 +6274,19 @@ gfc_resolve_iterator (gfc_iterator *iter, bool real_ok, bool own_scope)\n   if (!gfc_resolve_iterator_expr (iter->var, real_ok, \"Loop variable\"))\n     return false;\n \n-  if (!gfc_check_vardef_context (iter->var, false, false, own_scope, \n+  if (!gfc_check_vardef_context (iter->var, false, false, own_scope,\n \t\t\t\t _(\"iterator variable\")))\n     return false;\n \n-  if (!gfc_resolve_iterator_expr (iter->start, real_ok, \n+  if (!gfc_resolve_iterator_expr (iter->start, real_ok,\n \t\t\t\t  \"Start expression in DO loop\"))\n     return false;\n \n-  if (!gfc_resolve_iterator_expr (iter->end, real_ok, \n+  if (!gfc_resolve_iterator_expr (iter->end, real_ok,\n \t\t\t\t  \"End expression in DO loop\"))\n     return false;\n \n-  if (!gfc_resolve_iterator_expr (iter->step, real_ok, \n+  if (!gfc_resolve_iterator_expr (iter->step, real_ok,\n \t\t\t\t  \"Step expression in DO loop\"))\n     return false;\n \n@@ -6544,10 +6544,10 @@ resolve_deallocate_expr (gfc_expr *e)\n     }\n \n   if (pointer\n-      && !gfc_check_vardef_context (e, true, true, false, \n+      && !gfc_check_vardef_context (e, true, true, false,\n \t\t\t\t    _(\"DEALLOCATE object\")))\n     return false;\n-  if (!gfc_check_vardef_context (e, false, true, false, \n+  if (!gfc_check_vardef_context (e, false, true, false,\n \t\t\t\t _(\"DEALLOCATE object\")))\n     return false;\n \n@@ -6897,10 +6897,10 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n   e2 = remove_last_array_ref (e);\n   t = true;\n   if (t && pointer)\n-    t = gfc_check_vardef_context (e2, true, true, false, \n+    t = gfc_check_vardef_context (e2, true, true, false,\n \t\t\t\t  _(\"ALLOCATE object\"));\n   if (t)\n-    t = gfc_check_vardef_context (e2, false, true, false, \n+    t = gfc_check_vardef_context (e2, false, true, false,\n \t\t\t\t  _(\"ALLOCATE object\"));\n   gfc_free_expr (e2);\n   if (!t)\n@@ -7099,7 +7099,7 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n   /* Check the stat variable.  */\n   if (stat)\n     {\n-      gfc_check_vardef_context (stat, false, false, false, \n+      gfc_check_vardef_context (stat, false, false, false,\n \t\t\t\t_(\"STAT variable\"));\n \n       if ((stat->ts.type != BT_INTEGER\n@@ -8309,7 +8309,7 @@ resolve_transfer (gfc_code *code)\n      code->ext.dt may be NULL if the TRANSFER is related to\n      an INQUIRE statement -- but in this case, we are not reading, either.  */\n   if (code->ext.dt && code->ext.dt->dt_io_kind->value.iokind == M_READ\n-      && !gfc_check_vardef_context (exp, false, false, false, \n+      && !gfc_check_vardef_context (exp, false, false, false,\n \t\t\t\t    _(\"item in READ\")))\n     return;\n \n@@ -8444,7 +8444,7 @@ resolve_lock_unlock (gfc_code *code)\n \t       &code->expr2->where);\n \n   if (code->expr2\n-      && !gfc_check_vardef_context (code->expr2, false, false, false, \n+      && !gfc_check_vardef_context (code->expr2, false, false, false,\n \t\t\t\t    _(\"STAT variable\")))\n     return;\n \n@@ -8456,7 +8456,7 @@ resolve_lock_unlock (gfc_code *code)\n \t       &code->expr3->where);\n \n   if (code->expr3\n-      && !gfc_check_vardef_context (code->expr3, false, false, false, \n+      && !gfc_check_vardef_context (code->expr3, false, false, false,\n \t\t\t\t    _(\"ERRMSG variable\")))\n     return;\n \n@@ -8468,7 +8468,7 @@ resolve_lock_unlock (gfc_code *code)\n \t       \"variable\", &code->expr4->where);\n \n   if (code->expr4\n-      && !gfc_check_vardef_context (code->expr4, false, false, false, \n+      && !gfc_check_vardef_context (code->expr4, false, false, false,\n \t\t\t\t    _(\"ACQUIRED_LOCK variable\")))\n     return;\n }\n@@ -9174,7 +9174,7 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \n   if (rhs->is_boz\n       && !gfc_notify_std (GFC_STD_GNU, \"BOZ literal at %L outside \"\n-\t\t\t  \"a DATA statement and outside INT/REAL/DBLE/CMPLX\", \n+\t\t\t  \"a DATA statement and outside INT/REAL/DBLE/CMPLX\",\n \t\t\t  &code->loc))\n     return false;\n \n@@ -9341,6 +9341,11 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \n   gfc_check_assign (lhs, rhs, 1);\n \n+  /* Assign the 'data' of a class object to a derived type.  */\n+  if (lhs->ts.type == BT_DERIVED\n+      && rhs->ts.type == BT_CLASS)\n+    gfc_add_data_component (rhs);\n+\n   /* Insert a GFC_ISYM_CAF_SEND intrinsic, when the LHS is a coindexed variable.\n      Additionally, insert this code when the RHS is a CAF as we then use the\n      GFC_ISYM_CAF_SEND intrinsic just to avoid a temporary; but do not do so if\n@@ -10023,7 +10028,7 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t      && code->expr1->value.function.isym->id == GFC_ISYM_CAF_GET)\n \t    remove_caf_get_intrinsic (code->expr1);\n \n-\t  if (!gfc_check_vardef_context (code->expr1, false, false, false, \n+\t  if (!gfc_check_vardef_context (code->expr1, false, false, false,\n \t\t\t\t\t _(\"assignment\")))\n \t    break;\n \n@@ -10832,7 +10837,7 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n \t      return false;\n \t    }\n \t  else if (!gfc_notify_std (GFC_STD_F2003, \"Scalar object \"\n-\t\t\t\t    \"'%s' at %L may not be ALLOCATABLE\", \n+\t\t\t\t    \"'%s' at %L may not be ALLOCATABLE\",\n \t\t\t\t    sym->name, &sym->declared_at))\n \t    return false;\n \t}\n@@ -11163,8 +11168,8 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t      && !gfc_check_symbol_access (arg->sym->ts.u.derived)\n \t      && !gfc_notify_std (GFC_STD_F2003, \"'%s' is of a PRIVATE type \"\n \t\t\t\t  \"and cannot be a dummy argument\"\n-\t\t\t\t  \" of '%s', which is PUBLIC at %L\", \n-\t\t\t\t  arg->sym->name, sym->name, \n+\t\t\t\t  \" of '%s', which is PUBLIC at %L\",\n+\t\t\t\t  arg->sym->name, sym->name,\n \t\t\t\t  &sym->declared_at))\n \t    {\n \t      /* Stop this message from recurring.  */\n@@ -11186,8 +11191,8 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t\t  && !gfc_notify_std (GFC_STD_F2003, \"Procedure '%s' in \"\n \t\t\t\t      \"PUBLIC interface '%s' at %L \"\n \t\t\t\t      \"takes dummy arguments of '%s' which \"\n-\t\t\t\t      \"is PRIVATE\", iface->sym->name, \n-\t\t\t\t      sym->name, &iface->sym->declared_at, \n+\t\t\t\t      \"is PRIVATE\", iface->sym->name,\n+\t\t\t\t      sym->name, &iface->sym->declared_at,\n \t\t\t\t      gfc_typename(&arg->sym->ts)))\n \t\t{\n \t\t  /* Stop this message from recurring.  */\n@@ -11298,7 +11303,7 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n       gfc_formal_arglist *curr_arg;\n       int has_non_interop_arg = 0;\n \n-      if (!verify_bind_c_sym (sym, &(sym->ts), sym->attr.in_common, \n+      if (!verify_bind_c_sym (sym, &(sym->ts), sym->attr.in_common,\n \t\t\t      sym->common_block))\n         {\n           /* Clear these to prevent looking at them again if there was an\n@@ -12145,7 +12150,7 @@ resolve_typebound_procedures (gfc_symbol* derived)\n   for (op = 0; op != GFC_INTRINSIC_OPS; ++op)\n     {\n       gfc_typebound_proc* p = derived->f2k_derived->tb_op[op];\n-      if (p && !resolve_typebound_intrinsic_op (derived, \n+      if (p && !resolve_typebound_intrinsic_op (derived,\n \t\t\t\t\t\t(gfc_intrinsic_op)op, p))\n \tresolve_bindings_result = false;\n     }\n@@ -12597,7 +12602,7 @@ resolve_fl_derived0 (gfc_symbol *sym)\n \t  && !gfc_check_symbol_access (c->ts.u.derived)\n \t  && !gfc_notify_std (GFC_STD_F2003, \"the component '%s' is a \"\n \t\t\t      \"PRIVATE type and cannot be a component of \"\n-\t\t\t      \"'%s', which is PUBLIC at %L\", c->name, \n+\t\t\t      \"'%s', which is PUBLIC at %L\", c->name,\n \t\t\t      sym->name, &sym->declared_at))\n \treturn false;\n \n@@ -12671,8 +12676,8 @@ resolve_fl_derived0 (gfc_symbol *sym)\n \t    && sym != c->ts.u.derived)\n \tadd_dt_to_dt_list (c->ts.u.derived);\n \n-      if (!gfc_resolve_array_spec (c->as, \n-\t\t\t\t   !(c->attr.pointer || c->attr.proc_pointer \n+      if (!gfc_resolve_array_spec (c->as,\n+\t\t\t\t   !(c->attr.pointer || c->attr.proc_pointer\n \t\t\t\t     || c->attr.allocatable)))\n \treturn false;\n \n@@ -12721,13 +12726,13 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  || gen_dt->generic->sym->module != gen_dt->generic->next->sym->module)\n       && !gfc_notify_std (GFC_STD_F2003, \"Generic name '%s' of function \"\n \t\t\t  \"'%s' at %L being the same name as derived \"\n-\t\t\t  \"type at %L\", sym->name, \n-\t\t\t  gen_dt->generic->sym == sym \n-\t\t\t  ? gen_dt->generic->next->sym->name \n-\t\t\t  : gen_dt->generic->sym->name, \n-\t\t\t  gen_dt->generic->sym == sym \n-\t\t\t  ? &gen_dt->generic->next->sym->declared_at \n-\t\t\t  : &gen_dt->generic->sym->declared_at, \n+\t\t\t  \"type at %L\", sym->name,\n+\t\t\t  gen_dt->generic->sym == sym\n+\t\t\t  ? gen_dt->generic->next->sym->name\n+\t\t\t  : gen_dt->generic->sym->name,\n+\t\t\t  gen_dt->generic->sym == sym\n+\t\t\t  ? &gen_dt->generic->next->sym->declared_at\n+\t\t\t  : &gen_dt->generic->sym->declared_at,\n \t\t\t  &sym->declared_at))\n     return false;\n \n@@ -12782,13 +12787,13 @@ resolve_fl_namelist (gfc_symbol *sym)\n \n       if (nl->sym->as && nl->sym->as->type == AS_ASSUMED_SHAPE\n \t  && !gfc_notify_std (GFC_STD_F2003, \"NAMELIST array object '%s' \"\n-\t\t\t      \"with assumed shape in namelist '%s' at %L\", \n+\t\t\t      \"with assumed shape in namelist '%s' at %L\",\n \t\t\t      nl->sym->name, sym->name, &sym->declared_at))\n \treturn false;\n \n       if (is_non_constant_shape_array (nl->sym)\n \t  && !gfc_notify_std (GFC_STD_F2003, \"NAMELIST array object '%s' \"\n-\t\t\t      \"with nonconstant shape in namelist '%s' at %L\", \n+\t\t\t      \"with nonconstant shape in namelist '%s' at %L\",\n \t\t\t      nl->sym->name, sym->name, &sym->declared_at))\n \treturn false;\n \n@@ -12797,7 +12802,7 @@ resolve_fl_namelist (gfc_symbol *sym)\n \t      || !gfc_is_constant_expr (nl->sym->ts.u.cl->length))\n \t  && !gfc_notify_std (GFC_STD_F2003, \"NAMELIST object '%s' with \"\n \t\t\t      \"nonconstant character length in \"\n-\t\t\t      \"namelist '%s' at %L\", nl->sym->name, \n+\t\t\t      \"namelist '%s' at %L\", nl->sym->name,\n \t\t\t      sym->name, &sym->declared_at))\n \treturn false;\n \n@@ -12817,7 +12822,7 @@ resolve_fl_namelist (gfc_symbol *sym)\n \t{\n \t  if (!gfc_notify_std (GFC_STD_F2003, \"NAMELIST object '%s' in \"\n \t\t\t       \"namelist '%s' at %L with ALLOCATABLE \"\n-\t\t\t       \"or POINTER components\", nl->sym->name, \n+\t\t\t       \"or POINTER components\", nl->sym->name,\n \t\t\t       sym->name, &sym->declared_at))\n \t    return false;\n \n@@ -13387,10 +13392,10 @@ resolve_symbol (gfc_symbol *sym)\n       && gfc_check_symbol_access (sym)\n       && !gfc_check_symbol_access (sym->ts.u.derived)\n       && !gfc_notify_std (GFC_STD_F2003, \"PUBLIC %s '%s' at %L of PRIVATE \"\n-\t\t\t  \"derived type '%s'\", \n-\t\t\t  (sym->attr.flavor == FL_PARAMETER) \n-\t\t\t  ? \"parameter\" : \"variable\", \n-\t\t\t  sym->name, &sym->declared_at, \n+\t\t\t  \"derived type '%s'\",\n+\t\t\t  (sym->attr.flavor == FL_PARAMETER)\n+\t\t\t  ? \"parameter\" : \"variable\",\n+\t\t\t  sym->name, &sym->declared_at,\n \t\t\t  sym->ts.u.derived->name))\n     return;\n \n@@ -13533,15 +13538,15 @@ resolve_symbol (gfc_symbol *sym)\n       if (!gfc_logical_kinds[i].c_bool && sym->attr.dummy\n \t  && !gfc_notify_std (GFC_STD_GNU, \"LOGICAL dummy argument '%s' at \"\n \t\t\t      \"%L with non-C_Bool kind in BIND(C) procedure \"\n-\t\t\t      \"'%s'\", sym->name, &sym->declared_at, \n+\t\t\t      \"'%s'\", sym->name, &sym->declared_at,\n \t\t\t      sym->ns->proc_name->name))\n \treturn;\n       else if (!gfc_logical_kinds[i].c_bool\n \t       && !gfc_notify_std (GFC_STD_GNU, \"LOGICAL result variable \"\n \t\t\t\t   \"'%s' at %L with non-C_Bool kind in \"\n-\t\t\t\t   \"BIND(C) procedure '%s'\", sym->name, \n-\t\t\t\t   &sym->declared_at, \n-\t\t\t\t   sym->attr.function ? sym->name \n+\t\t\t\t   \"BIND(C) procedure '%s'\", sym->name,\n+\t\t\t\t   &sym->declared_at,\n+\t\t\t\t   sym->attr.function ? sym->name\n \t\t\t\t   : sym->ns->proc_name->name))\n \treturn;\n     }\n@@ -14744,7 +14749,7 @@ resolve_types (gfc_namespace *ns)\n       unsigned letter;\n       for (letter = 0; letter != GFC_LETTERS; ++letter)\n \tif (ns->set_flag[letter]\n-\t    && !resolve_typespec_used (&ns->default_type[letter], \n+\t    && !resolve_typespec_used (&ns->default_type[letter],\n \t\t\t\t       &ns->implicit_loc[letter], NULL))\n \t  return;\n     }"}, {"sha": "87ec5cb32ae1bb888aea63c20c12134264baa07e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "patch": "@@ -1,3 +1,8 @@\n+2014-10-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/63553\n+\t* gfortran.dg/class_to_type_3.f03 : New test\n+\n 2014-10-18  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* gcc.target/sh/torture/pr58314.c: Fix excess failures caused by switch\n@@ -757,7 +762,7 @@\n \t* gcc.dg/winline-6.c: Likewise.\n \t* gcc.dg/winline-7.c: Likewise.\n \t* gcc.dg/funcorder.c: Fix implicit declarations.  Fix defaulting to\n-\tint. \n+\tint.\n \t* gcc.dg/inline-33.c: Likewise.\n \t* gcc.dg/pr27861-1.c: Likewise.\n \t* gcc.dg/pr28888.c: Likewise.\n@@ -3476,7 +3481,7 @@\n \n 2014-08-19  Janis Johnson  <janisjo@codesourcery.com>\n \n-\t* lib/target-supports.exp \n+\t* lib/target-supports.exp\n \t(check_effective_target_arm_v8_neon_ok_nocache): Add\n \t\"-march-armv8-a\" to compile flags.\n "}, {"sha": "2d7a823ff85d5862cc9d6ac25d26facd1cbbabd6", "filename": "gcc/testsuite/gfortran.dg/class_to_type_3.f03", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_to_type_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_to_type_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_to_type_3.f03?ref=22c23886dbe53c6a4677d45dee9ed8c2e56a2f2c", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+! Tests the fix for pr63553 in which the class container was being\n+! assigned to derived types, rather than the data.\n+!\n+! Contributed by <patnel97269-gfortran@yahoo.fr>\n+!\n+program toto\n+  implicit none\n+  type mother\n+    integer :: i\n+  end type mother\n+  type,extends(mother) :: child\n+  end type child\n+\n+  call comment1\n+  call comment2\n+\n+contains\n+  subroutine comment1\n+    type(mother) :: tm\n+    class(mother),allocatable :: cm\n+\n+    allocate (cm)\n+    cm%i = 77\n+    tm = cm\n+    if (tm%i .ne. cm%i) call abort\n+  end subroutine\n+\n+  subroutine comment2\n+    class(mother),allocatable :: cm,cm2\n+\n+    allocate(cm)\n+    allocate(child::cm2)\n+    cm%i=10\n+    select type (cm2)\n+       type is (child)\n+         cm2%mother=cm\n+    end select\n+    if (cm2%i .ne. cm%i) call abort\n+  end subroutine\n+end program"}]}