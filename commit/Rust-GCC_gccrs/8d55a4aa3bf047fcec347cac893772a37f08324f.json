{"sha": "8d55a4aa3bf047fcec347cac893772a37f08324f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ1NWE0YWEzYmYwNDdmY2VjMzQ3Y2FjODkzNzcyYTM3ZjA4MzI0Zg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-02-13T04:02:20Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-02-13T04:02:20Z"}, "message": "atomicity.h (_Atomic_add_mutex): Fix declaration.\n\n2003-02-12  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* config/cpu/generic/atomicity.h (_Atomic_add_mutex):  Fix declaration.\n\t(_GLIBCPP_NEED_GENERIC_MUTEX):  Define for this file.\n\t(_Atomic_add_mutex_once, __gthread_atomic_add_mutex_once):  Declare\n\twhen we don't have static mutex initialization.\n\t(__exchange_and_add):  Use _Atomic_add_mutex_once.\n\t* src/misc-inst.cc:  Definitions of all the above.\n\nFrom-SVN: r62818", "tree": {"sha": "fafc83f42b8ec16ea233bdbf4e663bb360b327e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafc83f42b8ec16ea233bdbf4e663bb360b327e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d55a4aa3bf047fcec347cac893772a37f08324f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d55a4aa3bf047fcec347cac893772a37f08324f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d55a4aa3bf047fcec347cac893772a37f08324f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d55a4aa3bf047fcec347cac893772a37f08324f/comments", "author": null, "committer": null, "parents": [{"sha": "6a540f3ca384b19191464678e75c0e34154560dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a540f3ca384b19191464678e75c0e34154560dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a540f3ca384b19191464678e75c0e34154560dd"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "78182b919900f97f0375221f1544b5b97b8fe731", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d55a4aa3bf047fcec347cac893772a37f08324f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d55a4aa3bf047fcec347cac893772a37f08324f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d55a4aa3bf047fcec347cac893772a37f08324f", "patch": "@@ -1,3 +1,12 @@\n+2003-02-12  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* config/cpu/generic/atomicity.h (_Atomic_add_mutex):  Fix declaration.\n+\t(_GLIBCPP_NEED_GENERIC_MUTEX):  Define for this file.\n+\t(_Atomic_add_mutex_once, __gthread_atomic_add_mutex_once):  Declare\n+\twhen we don't have static mutex initialization.\n+\t(__exchange_and_add):  Use _Atomic_add_mutex_once.\n+\t* src/misc-inst.cc:  Definitions of all the above.\n+\n 2003-02-12  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/9563"}, {"sha": "829a77c52cbe450b64dd975b2f561ddd7a97a15f", "filename": "libstdc++-v3/config/cpu/generic/atomicity.h", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d55a4aa3bf047fcec347cac893772a37f08324f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d55a4aa3bf047fcec347cac893772a37f08324f/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomicity.h?ref=8d55a4aa3bf047fcec347cac893772a37f08324f", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations: Generic version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,24 +32,35 @@\n \n #include <bits/gthr.h>\n \n+#define _GLIBCPP_NEED_GENERIC_MUTEX\n+\n typedef int _Atomic_word;\n \n namespace __gnu_cxx\n {\n-  __gthread_mutex_t _Atomic_add_mutex __attribute__ ((__weak__))\n-                                                      = __GTHREAD_MUTEX_INIT;\n+  extern __gthread_mutex_t _Atomic_add_mutex;\n+\n+#ifndef __GTHREAD_MUTEX_INIT\n+  extern __gthread_once_t _Atomic_add_mutex_once;\n+  extern void __gthread_atomic_add_mutex_once();\n+#endif\n }\n \n static inline _Atomic_word\n __attribute__ ((__unused__))\n __exchange_and_add (volatile _Atomic_word* __mem, int __val)\n {\n-   _Atomic_word __result;\n+#ifndef __GTHREAD_MUTEX_INIT\n+  __gthread_once (&__gnu_cxx::_Atomic_add_mutex_once,\n+                  __gnu_cxx::__gthread_atomic_add_mutex_once);\n+#endif\n+\n+  _Atomic_word __result;\n \n-   __gthread_mutex_lock (&__gnu_cxx::_Atomic_add_mutex);\n+  __gthread_mutex_lock (&__gnu_cxx::_Atomic_add_mutex);\n \n-   __result = *__mem;\n-   *__mem += __val;\n+  __result = *__mem;\n+  *__mem += __val;\n \n   __gthread_mutex_unlock (&__gnu_cxx::_Atomic_add_mutex);\n   return __result;"}, {"sha": "df2949d04cac453856b188a116288109bc3eade1", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d55a4aa3bf047fcec347cac893772a37f08324f/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d55a4aa3bf047fcec347cac893772a37f08324f/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=8d55a4aa3bf047fcec347cac893772a37f08324f", "patch": "@@ -72,3 +72,21 @@ namespace std\n   template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n #endif\n } // namespace std\n+\n+#ifdef _GLIBCPP_NEED_GENERIC_MUTEX\n+namespace __gnu_cxx\n+{\n+#ifdef __GTHREAD_MUTEX_INIT\n+  __gthread_mutex_t _Atomic_add_mutex = __GTHREAD_MUTEX_INIT;\n+#else\n+  // generic atomicity.h without static initialization\n+  __gthread_mutex_t _Atomic_add_mutex;\n+  __gthread_once_t _Atomic_add_mutex_once = __GTHREAD_ONCE_INIT;\n+  void __gthread_atomic_add_mutex_once()\n+  {\n+    __GTHREAD_MUTEX_INIT_FUNCTION (&_Atomic_add_mutex);\n+  }\n+#endif\n+} // namespace __gnu_cxx\n+#endif // _GLIBCPP_NEED_GLOBAL_MUTEX\n+"}]}