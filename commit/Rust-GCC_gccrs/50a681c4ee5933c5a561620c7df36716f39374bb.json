{"sha": "50a681c4ee5933c5a561620c7df36716f39374bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhNjgxYzRlZTU5MzNjNWE1NjE2MjBjN2RmMzY3MTZmMzkzNzRiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-04-18T21:19:18Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-04-18T21:19:18Z"}, "message": "condition_variable.cc (condition_variable, [...]): Mark throw()\n\n\n\t* src/condition_variable.cc (condition_variable,\n\tcondition_variable_any constructors): Mark throw()\n\t* src/hash.cc (operator() for long double, string, and wstring): Mark\n\tthrow ().\n\t* src/strstream.cc (strstreambuf constructors, freeze, str, pcount,\n\t_M_setup, rdbuf, str): Mark throw ().\n\t* src/chrono.cc (new): Mark throw ().\n\t* include/std/system_error (system_category, generic_category): Mark\n\tthrow () and const.\n\t* include/std/chrono (now): Mark throw ().\n\t* include/std/condition_variable (condition_variable,\n\t~condition_variable, condition_variable_any,\n\t~condition_variable_any): Mark throw ().\n\t* include/std/mutex (mutex): Mark throw ().\n\t* include/bits/stl_list.h (swap, transfer, reverse, hook, unhook): Mark\n\tthrow.\n\t* include/bits/functional_hash.h (operator()  on size_t): Mark pure and throw ().\n\t* include/bits/locale_facets.tcc (__verify_grouping): Mark pure.\n\t* include/bits/locale_classes.h (_S_initialize_once,\n\t_S_clone_c_locale): Mark throw ().\n\t(_S_get_c_name): Mark const and throw ().\n\t(_M_id, _M_compare, _M_transform, _M_compare, _M_transform): Mark throw ().\n\t* include/bits/locale_facets.h (__convert_to_v explicit instances):\n\tMark throw ().\n\t(_M_convert_to_wmask, _M_initialize_ctype, _S_format_float): Mark throw ().\n\t* include/bits/ios_base.h (_M_dispose_callbacks, _M_init, imbue,\n\tios_base): Mark throw ()\n\t* include/bits/locale_facets_nonio.h (_M_put): Mark throw.\n\t* include/backward/strstream (strstreambuf constructors): Mark throw ().\n\t(str, freeze, _M_setupf): Mark throw ().\n\t(pcount): Mark pure and throw ().\n\t(rdbuf): Mark const and throw ().\n\nFrom-SVN: r146328", "tree": {"sha": "ff0f30a3b683fc476e77fd8e5b143626f1b2d746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff0f30a3b683fc476e77fd8e5b143626f1b2d746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a681c4ee5933c5a561620c7df36716f39374bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a681c4ee5933c5a561620c7df36716f39374bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a681c4ee5933c5a561620c7df36716f39374bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a681c4ee5933c5a561620c7df36716f39374bb/comments", "author": null, "committer": null, "parents": [{"sha": "61cc82231be2c47c429b9b4ae8c18b3a4d13d12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61cc82231be2c47c429b9b4ae8c18b3a4d13d12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61cc82231be2c47c429b9b4ae8c18b3a4d13d12f"}], "stats": {"total": 239, "additions": 141, "deletions": 98}, "files": [{"sha": "4994ce8eba1e26e5464b1cc08be967675dfbcd1d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -1,3 +1,38 @@\n+2009-04-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* src/condition_variable.cc (condition_variable,\n+\tcondition_variable_any constructors): Mark throw()\n+\t* src/hash.cc (operator() for long double, string, and wstring): Mark\n+\tthrow ().\n+\t* src/strstream.cc (strstreambuf constructors, freeze, str, pcount,\n+\t_M_setup, rdbuf, str): Mark throw ().\n+\t* src/chrono.cc (new): Mark throw ().\n+\t* include/std/system_error (system_category, generic_category): Mark\n+\tthrow () and const.\n+\t* include/std/chrono (now): Mark throw ().\n+\t* include/std/condition_variable (condition_variable,\n+\t~condition_variable, condition_variable_any,\n+\t~condition_variable_any): Mark throw ().\n+\t* include/std/mutex (mutex): Mark throw ().\n+\t* include/bits/stl_list.h (swap, transfer, reverse, hook, unhook): Mark\n+\tthrow.\n+\t* include/bits/functional_hash.h (operator()  on size_t): Mark pure and throw ().\n+\t* include/bits/locale_facets.tcc (__verify_grouping): Mark pure.\n+\t* include/bits/locale_classes.h (_S_initialize_once,\n+\t_S_clone_c_locale): Mark throw ().\n+\t(_S_get_c_name): Mark const and throw ().\n+\t(_M_id, _M_compare, _M_transform, _M_compare, _M_transform): Mark throw ().\n+\t* include/bits/locale_facets.h (__convert_to_v explicit instances):\n+\tMark throw ().\n+\t(_M_convert_to_wmask, _M_initialize_ctype, _S_format_float): Mark throw ().\n+\t* include/bits/ios_base.h (_M_dispose_callbacks, _M_init, imbue,\n+\tios_base): Mark throw ()\n+\t* include/bits/locale_facets_nonio.h (_M_put): Mark throw.\n+\t* include/backward/strstream (strstreambuf constructors): Mark throw ().\n+\t(str, freeze, _M_setupf): Mark throw ().\n+\t(pcount): Mark pure and throw ().\n+\t(rdbuf): Mark const and throw ().\n+\n 2009-04-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/39802"}, {"sha": "0ffbb81ea97a6cb4124b99fa6955e1ef23dd9949", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -66,20 +66,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     explicit strstreambuf(streamsize __initial_capacity = 0);\n     strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));\n \n-    strstreambuf(char* __get, streamsize __n, char* __put = 0);\n-    strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0);\n-    strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0);\n+    strstreambuf(char* __get, streamsize __n, char* __put = 0) throw ();\n+    strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0) throw ();\n+    strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0) throw ();\n \n-    strstreambuf(const char* __get, streamsize __n);\n-    strstreambuf(const signed char* __get, streamsize __n);\n-    strstreambuf(const unsigned char* __get, streamsize __n);\n+    strstreambuf(const char* __get, streamsize __n) throw ();\n+    strstreambuf(const signed char* __get, streamsize __n) throw ();\n+    strstreambuf(const unsigned char* __get, streamsize __n) throw ();\n \n     virtual ~strstreambuf();\n \n   public:\n-    void freeze(bool = true);\n-    char* str();\n-    int pcount() const;\n+    void freeze(bool = true) throw ();\n+    char* str() throw ();\n+    _GLIBCXX_PURE int pcount() const throw ();\n \n   protected:\n     virtual int_type overflow(int_type __c  = _Traits::eof());\n@@ -103,7 +103,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     void  _M_free(char*);\n \n     // Helper function used in constructors.\n-    void _M_setup(char* __get, char* __put, streamsize __n);\n+    void _M_setup(char* __get, char* __put, streamsize __n) throw ();\n \n   private:\n     // Data members.\n@@ -125,8 +125,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     istrstream(const char*, streamsize);\n     virtual ~istrstream();\n \n-    strstreambuf* rdbuf() const;\n-    char* str();\n+    _GLIBCXX_CONST strstreambuf* rdbuf() const throw ();\n+    char* str() throw ();\n \n   private:\n     strstreambuf _M_buf;\n@@ -140,10 +140,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     ostrstream(char*, int, ios_base::openmode = ios_base::out);\n     virtual ~ostrstream();\n \n-    strstreambuf* rdbuf() const;\n-    void freeze(bool = true);\n-    char* str();\n-    int pcount() const;\n+    _GLIBCXX_CONST strstreambuf* rdbuf() const throw ();\n+    void freeze(bool = true) throw();\n+    char* str() throw ();\n+    _GLIBCXX_PURE int pcount() const throw ();\n \n   private:\n     strstreambuf _M_buf;\n@@ -162,10 +162,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     strstream(char*, int, ios_base::openmode = ios_base::in | ios_base::out);\n     virtual ~strstream();\n \n-    strstreambuf* rdbuf() const;\n-    void freeze(bool = true);\n-    int pcount() const;\n-    char* str();\n+    _GLIBCXX_CONST strstreambuf* rdbuf() const throw ();\n+    void freeze(bool = true) throw ();\n+    _GLIBCXX_PURE int pcount() const throw ();\n+    char* str() throw ();\n \n   private:\n     strstreambuf _M_buf;"}, {"sha": "62e64db9d474b1a969212b86a274b8799c4bf406", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -326,4 +326,12 @@ _GLIBCXX_END_NAMESPACE\n # define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))\n #endif\n \n+#ifndef _GLIBCXX_NOTHROW\n+# ifdef __cplusplus\n+#  define _GLIBCXX_NOTHROW throw() \n+# else\n+#  define _GLIBCXX_NOTHROW __attribute__((nothrow))\n+# endif\n+#endif\n+\n // End of prewritten config; the discovered settings follow."}, {"sha": "c21abfe08b203399933104a9a32122368a0eb2a2", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -60,8 +60,8 @@ namespace std\n   struct error_code;\n \n   template<>\n-    size_t\n-    hash<error_code>::operator()(error_code) const;\n+    _GLIBCXX_PURE size_t\n+    hash<error_code>::operator()(error_code) const throw ();\n }\n \n #endif // _FUNCTIONAL_HASH_H"}, {"sha": "2badd4c4c1c8769d7ce36620af7f23b687579427", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -497,7 +497,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_call_callbacks(event __ev) throw();\n \n     void\n-    _M_dispose_callbacks(void);\n+    _M_dispose_callbacks(void) throw();\n \n     // 27.4.2.5  Members for iword/pword storage\n     struct _Words\n@@ -526,7 +526,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     locale\t\t_M_ios_locale;\n \n     void\n-    _M_init();\n+    _M_init() throw ();\n \n   public:\n \n@@ -685,7 +685,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  with imbue_event.\n     */\n     locale\n-    imbue(const locale& __loc);\n+    imbue(const locale& __loc) throw ();\n \n     /**\n      *  @brief  Locale access\n@@ -782,7 +782,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     virtual ~ios_base();\n \n   protected:\n-    ios_base();\n+    ios_base() throw ();\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 50.  Copy constructor and assignment operator of ios_base"}, {"sha": "1a7f2c20912c2a9536e98f3c850698dfd5665698", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -312,7 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _S_initialize();\n \n     static void\n-    _S_initialize_once();\n+    _S_initialize_once() throw ();\n \n     static category\n     _S_normalize_category(category);\n@@ -376,7 +376,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t       __c_locale __old = 0);\n \n     static __c_locale\n-    _S_clone_c_locale(__c_locale& __cloc);\n+    _S_clone_c_locale(__c_locale& __cloc) throw ();\n \n     static void\n     _S_destroy_c_locale(__c_locale& __cloc);\n@@ -386,8 +386,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     static __c_locale\n     _S_get_c_locale();\n \n-    static const char*\n-    _S_get_c_name();\n+    _GLIBCXX_CONST static const char*\n+    _S_get_c_name() throw ();\n \n   private:\n     void\n@@ -457,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     id() { }\n \n     size_t\n-    _M_id() const;\n+    _M_id() const throw ();\n   };\n \n \n@@ -697,10 +697,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // Used to abstract out _CharT bits in virtual member functions, below.\n       int\n-      _M_compare(const _CharT*, const _CharT*) const;\n+      _M_compare(const _CharT*, const _CharT*) const throw ();\n \n       size_t\n-      _M_transform(_CharT*, const _CharT*, size_t) const;\n+      _M_transform(_CharT*, const _CharT*, size_t) const throw ();\n \n   protected:\n       /// Destructor.\n@@ -759,20 +759,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Specializations.\n   template<>\n     int\n-    collate<char>::_M_compare(const char*, const char*) const;\n+    collate<char>::_M_compare(const char*, const char*) const throw ();\n \n   template<>\n     size_t\n-    collate<char>::_M_transform(char*, const char*, size_t) const;\n+    collate<char>::_M_transform(char*, const char*, size_t) const throw ();\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     int\n-    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;\n+    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw ();\n \n   template<>\n     size_t\n-    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;\n+    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw ();\n #endif\n \n   /// class collate_byname [22.2.4.2]."}, {"sha": "5dcf20576a02dd299352bc7ad9addb963047004b", "filename": "libstdc++-v3/include/bits/locale_classes.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.tcc?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -119,13 +119,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Generic version does nothing.\n   template<typename _CharT>\n     int\n-    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const\n+    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()\n     { return 0; }\n \n   // Generic version does nothing.\n   template<typename _CharT>\n     size_t\n-    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const\n+    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()\n     { return 0; }\n \n   template<typename _CharT>"}, {"sha": "5dec0f49cbe8cbfdbced795c79008f5852779e79", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -70,17 +70,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __convert_to_v(const char*, float&, ios_base::iostate&,\n-\t\t   const __c_locale&);\n+\t\t   const __c_locale&) throw ();\n \n   template<>\n     void\n     __convert_to_v(const char*, double&, ios_base::iostate&,\n-\t\t   const __c_locale&);\n+\t\t   const __c_locale&) throw ();\n \n   template<>\n     void\n     __convert_to_v(const char*, long double&, ios_base::iostate&,\n-\t\t   const __c_locale&);\n+\t\t   const __c_locale&) throw ();\n \n   // NB: __pad is a struct, rather than a function, so it can be\n   // partially-specialized.\n@@ -1220,7 +1220,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     protected:\n       __wmask_type\n-      _M_convert_to_wmask(const mask __m) const;\n+      _M_convert_to_wmask(const mask __m) const throw ();\n \n       /// Destructor\n       virtual\n@@ -1458,7 +1458,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // For use at construction time only.\n       void\n-      _M_initialize_ctype();\n+      _M_initialize_ctype() throw ();\n     };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n@@ -1558,7 +1558,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     // num_put\n     // Construct and return valid scanf format for floating point types.\n     static void\n-    _S_format_float(const ios_base& __io, char* __fptr, char __mod);\n+    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw ();\n   };\n \n   template<typename _CharT>"}, {"sha": "85b4ec646bbd83d38a12fafa6d5ca4362b86e619", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -118,9 +118,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 1,222,444 == __grouping_tmp of \"\\1\\3\\3\"\n   // __grouping is parsed R to L\n   // 1,222,444 == __grouping of \"\\3\" == \"\\3\\3\\3\"\n-  bool\n+  _GLIBCXX_PURE bool\n   __verify_grouping(const char* __grouping, size_t __grouping_size,\n-\t\t    const string& __grouping_tmp);\n+\t\t    const string& __grouping_tmp) throw ();\n \n _GLIBCXX_BEGIN_LDBL_NAMESPACE\n "}, {"sha": "e1518287a680b958146ab399a21eaba694bb461d", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -211,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // value of strftime/wcsftime.\n       void\n       _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,\n-\t     const tm* __tm) const;\n+\t     const tm* __tm) const throw ();\n \n       void\n       _M_date_formats(const _CharT** __date) const\n@@ -325,7 +325,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<>\n     void\n-    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;\n+    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const throw ();\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n@@ -335,7 +335,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<>\n     void\n     __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*,\n-\t\t\t\t const tm*) const;\n+\t\t\t\t const tm*) const throw ();\n #endif\n \n _GLIBCXX_END_NAMESPACE\n@@ -844,8 +844,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     // Construct and return valid pattern consisting of some combination of:\n     // space none symbol sign value\n-    static pattern\n-    _S_construct_pattern(char __precedes, char __space, char __posn);\n+    _GLIBCXX_CONST static pattern\n+    _S_construct_pattern(char __precedes, char __space, char __posn) throw ();\n   };\n \n   template<typename _CharT, bool _Intl>"}, {"sha": "bba1f53044e6700e60b58278362a6acae29bbfdd", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -74,20 +74,20 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     _List_node_base* _M_prev;\n \n     static void\n-    swap(_List_node_base& __x, _List_node_base& __y);\n+    swap(_List_node_base& __x, _List_node_base& __y) throw ();\n \n     void\n     transfer(_List_node_base * const __first,\n-\t     _List_node_base * const __last);\n+\t     _List_node_base * const __last) throw ();\n \n     void\n-    reverse();\n+    reverse() throw ();\n \n     void\n-    hook(_List_node_base * const __position);\n+    hook(_List_node_base * const __position) throw ();\n \n     void\n-    unhook();\n+    unhook() throw ();\n   };\n \n   /// An actual node in the %list."}, {"sha": "634e916f4e86f8b3922996c4501bfa56467d9276", "filename": "libstdc++-v3/include/c_compatibility/stdatomic.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -121,21 +121,21 @@ _GLIBCXX_BEGIN_EXTERN_C\n \n   // Accessor functions for base atomic_flag type.\n   bool \n-  atomic_flag_test_and_set_explicit(volatile __atomic_flag_base*, memory_order) throw ();\n+  atomic_flag_test_and_set_explicit(volatile __atomic_flag_base*, memory_order) _GLIBCXX_NOTHROW;\n \n   inline bool \n   atomic_flag_test_and_set(volatile __atomic_flag_base* __a)\n   { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }\n   \n   void \n-  atomic_flag_clear_explicit(volatile __atomic_flag_base*, memory_order) throw ();\n+  atomic_flag_clear_explicit(volatile __atomic_flag_base*, memory_order) _GLIBCXX_NOTHROW;\n \n   inline void \n   atomic_flag_clear(volatile __atomic_flag_base* __a)\n   { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n \n   void \n-  __atomic_flag_wait_explicit(volatile __atomic_flag_base*, memory_order) throw ();\n+  __atomic_flag_wait_explicit(volatile __atomic_flag_base*, memory_order) _GLIBCXX_NOTHROW;\n   \n   _GLIBCXX_CONST volatile __atomic_flag_base* \n   __atomic_flag_for_address(const volatile void* __z) throw ();"}, {"sha": "d18f2777f513e7a7b720842c5a9285be5d390a26", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -614,7 +614,7 @@ namespace std\n       static const bool is_monotonic = false;\n \n       static time_point\n-      now();   \n+      now() throw ();\n \n       // Map to C API\n       static std::time_t"}, {"sha": "f87eb1b8d1a05be8588c93632583a59a0a782309", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -60,8 +60,8 @@ namespace std\n   public:\n     typedef __native_type* \t\tnative_handle_type;\n \n-    condition_variable();\n-    ~condition_variable();\n+    condition_variable() throw ();\n+    ~condition_variable() throw ();\n \n     condition_variable(const condition_variable&) = delete;\n     condition_variable& operator=(const condition_variable&) = delete;\n@@ -168,8 +168,8 @@ namespace std\n   public:\n     typedef __native_type* \t\tnative_handle_type;\n \n-    condition_variable_any();\n-    ~condition_variable_any();\n+    condition_variable_any() throw ();\n+    ~condition_variable_any() throw ();\n \n     condition_variable_any(const condition_variable_any&) = delete;\n     condition_variable_any& operator=(const condition_variable_any&) = delete;"}, {"sha": "f26acc02f4f0aa2a41f9d55f08e47bc22d9a3edf", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -395,7 +395,7 @@ namespace std\n   {\n   public:\n     virtual const char*\n-    what() const throw();\n+    _GLIBCXX_CONST what() const throw();\n   };\n \n   /// @brief  Scoped lock idiom."}, {"sha": "3d0cff21d6951b4e1cba0de62f8d1420c7f70e6a", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -105,8 +105,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   };\n \n   // DR 890.\n-  const error_category& system_category();\n-  const error_category& generic_category();\n+  _GLIBCXX_CONST const error_category& system_category() throw ();\n+  _GLIBCXX_CONST const error_category& generic_category() throw ();\n \n   /// error_code\n   // Implementation-specific error identification"}, {"sha": "422b97399ac2391144dfebec4c811a444dde5e70", "filename": "libstdc++-v3/src/chrono.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fchrono.cc?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -40,7 +40,7 @@ namespace std\n     const bool system_clock::is_monotonic;\n \n     system_clock::time_point\n-    system_clock::now()\n+    system_clock::now() throw ()\n     {\n #ifdef _GLIBCXX_USE_CLOCK_REALTIME\n       timespec tp;"}, {"sha": "4fb2f179dfd0586c2cb6c42cdcb941d24c7a58ac", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -28,7 +28,7 @@\n \n namespace std\n {\n-  condition_variable::condition_variable()\n+  condition_variable::condition_variable() throw ()\n   {\n #ifdef __GTHREAD_COND_INIT\n     __native_type __tmp = __GTHREAD_COND_INIT;\n@@ -41,7 +41,7 @@ namespace std\n #endif\n   }\n \n-  condition_variable::~condition_variable()\n+  condition_variable::~condition_variable() throw ()\n   {\n     // XXX no thread blocked\n     /* int __e = */ __gthread_cond_destroy(&_M_cond);\n@@ -79,7 +79,7 @@ namespace std\n       __throw_system_error(__e);\n   }\n \n-  condition_variable_any::condition_variable_any()\n+  condition_variable_any::condition_variable_any() throw ()\n   {\n #ifdef __GTHREAD_COND_INIT\n     __native_type __tmp = __GTHREAD_COND_INIT;\n@@ -92,7 +92,7 @@ namespace std\n #endif\n   }\n \n-  condition_variable_any::~condition_variable_any()\n+  condition_variable_any::~condition_variable_any() throw ()\n   {\n     __gthread_cond_destroy(&_M_cond);\n   }"}, {"sha": "790cfee3e22c1e05cae93f5efcd0cc04d59116a8", "filename": "libstdc++-v3/src/hash.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -44,7 +44,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   // 10 bytes -> 12 bytes) and resort to frexp.\n   template<>\n     size_t\n-    hash<long double>::operator()(long double __val) const\n+    hash<long double>::operator()(long double __val) const throw ()\n     {\n       size_t __result = 0;\n \n@@ -72,26 +72,26 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n #ifndef _GLIBCXX_LONG_DOUBLE_COMPAT_IMPL\n   template<>\n     size_t\n-    hash<string>::operator()(string __s) const\n+    hash<string>::operator()(string __s) const throw ()\n     { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n \n   template<>\n     size_t\n-    hash<const string&>::operator()(const string& __s) const\n+    hash<const string&>::operator()(const string& __s) const throw ()\n     { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     size_t\n-    hash<wstring>::operator()(wstring __s) const\n+    hash<wstring>::operator()(wstring __s) const throw ()\n     {\n       const char* __p = reinterpret_cast<const char*>(__s.data());\n       return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n     }\n \n   template<>\n     size_t\n-    hash<const wstring&>::operator()(const wstring& __s) const\n+    hash<const wstring&>::operator()(const wstring& __s) const throw ()\n     {\n       const char* __p = reinterpret_cast<const char*>(__s.data());\n       return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));"}, {"sha": "fbc5f518297dde456e5261cb8c8f164727c9aedd", "filename": "libstdc++-v3/src/strstream.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a681c4ee5933c5a561620c7df36716f39374bb/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc?ref=50a681c4ee5933c5a561620c7df36716f39374bb", "patch": "@@ -78,33 +78,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n   }\n \n-  strstreambuf::strstreambuf(char* get, streamsize n, char* put)\n+  strstreambuf::strstreambuf(char* get, streamsize n, char* put) throw ()\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n     _M_frozen(false), _M_constant(false)\n   { _M_setup(get, put, n); }\n \n-  strstreambuf::strstreambuf(signed char* get, streamsize n, signed char* put)\n+  strstreambuf::strstreambuf(signed char* get, streamsize n, signed char* put) throw ()\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n   _M_frozen(false), _M_constant(false)\n   { _M_setup(reinterpret_cast<char*>(get), reinterpret_cast<char*>(put), n); }\n \n   strstreambuf::strstreambuf(unsigned char* get, streamsize n, \n-\t\t\t     unsigned char* put)\n+\t\t\t     unsigned char* put) throw ()\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n     _M_frozen(false), _M_constant(false)\n   { _M_setup(reinterpret_cast<char*>(get), reinterpret_cast<char*>(put), n); }\n \n-  strstreambuf::strstreambuf(const char* get, streamsize n)\n+  strstreambuf::strstreambuf(const char* get, streamsize n) throw ()\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n     _M_frozen(false), _M_constant(true)\n   { _M_setup(const_cast<char*>(get), 0, n); }\n \n-  strstreambuf::strstreambuf(const signed char* get, streamsize n)\n+  strstreambuf::strstreambuf(const signed char* get, streamsize n) throw ()\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n     _M_frozen(false), _M_constant(true)\n   { _M_setup(reinterpret_cast<char*>(const_cast<signed char*>(get)), 0, n); }\n \n-  strstreambuf::strstreambuf(const unsigned char* get, streamsize n)\n+  strstreambuf::strstreambuf(const unsigned char* get, streamsize n) throw ()\n   : _Base(), _M_alloc_fun(0), _M_free_fun(0), _M_dynamic(false), \n     _M_frozen(false), _M_constant(true)\n   { _M_setup(reinterpret_cast<char*>(const_cast<unsigned char*>(get)), 0, n); }\n@@ -116,21 +116,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   void \n-  strstreambuf::freeze(bool frozenflag)\n+  strstreambuf::freeze(bool frozenflag) throw ()\n   {\n     if (_M_dynamic)\n       _M_frozen = frozenflag;\n   }\n \n   char* \n-  strstreambuf::str()\n+  strstreambuf::str() throw ()\n   {\n     freeze(true);\n     return eback();\n   }\n \n   int \n-  strstreambuf::pcount() const\n+  strstreambuf::pcount() const throw ()\n   { return pptr() ? pptr() - pbase() : 0; }\n \n   strstreambuf::int_type \n@@ -315,7 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   void \n-  strstreambuf::_M_setup(char* get, char* put, streamsize n)\n+  strstreambuf::_M_setup(char* get, char* put, streamsize n) throw ()\n   {\n     if (get) \n       {\n@@ -350,11 +350,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   istrstream::~istrstream() { }\n \n   strstreambuf* \n-  istrstream::rdbuf() const \n+  istrstream::rdbuf() const throw ()\n   { return const_cast<strstreambuf*>(&_M_buf); }\n \n   char* \n-  istrstream::str() \n+  istrstream::str() throw ()\n   { return _M_buf.str(); }\n \n   ostrstream::ostrstream()\n@@ -369,19 +369,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   ostrstream::~ostrstream() {}\n \n   strstreambuf* \n-  ostrstream::rdbuf() const\n+  ostrstream::rdbuf() const throw ()\n   { return const_cast<strstreambuf*>(&_M_buf); }\n \n   void \n-  ostrstream::freeze(bool freezeflag)\n+  ostrstream::freeze(bool freezeflag) throw ()\n   { _M_buf.freeze(freezeflag); }\n \n   char* \n-  ostrstream::str()\n+  ostrstream::str() throw ()\n   { return _M_buf.str(); }\n \n   int \n-  ostrstream::pcount() const\n+  ostrstream::pcount() const throw ()\n   { return _M_buf.pcount(); }\n \n   strstream::strstream()\n@@ -396,19 +396,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   strstream::~strstream() { }\n \n   strstreambuf* \n-  strstream::rdbuf() const\n+  strstream::rdbuf() const throw ()\n   { return const_cast<strstreambuf*>(&_M_buf); }\n \n   void \n-  strstream::freeze(bool freezeflag)\n+  strstream::freeze(bool freezeflag) throw ()\n   { _M_buf.freeze(freezeflag); }\n \n   int \n-  strstream::pcount() const\n+  strstream::pcount() const throw ()\n   { return _M_buf.pcount(); }\n \n   char* \n-  strstream::str()\n+  strstream::str() throw ()\n   { return _M_buf.str(); }\n \n _GLIBCXX_END_NAMESPACE"}]}