{"sha": "7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ViNGYwNDQ0OWNjMGJlMWJkZjZhMWVjOTc2ZGNlZmFlZGY5N2M4OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2007-01-12T09:36:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-12T09:36:17Z"}, "message": "200x-xx-xx Nathan Sidwell <nathan@codesourcery.com> Richard Sandiford <richard@codesourcery.com>\n\ngcc/\n200x-xx-xx  Nathan Sidwell  <nathan@codesourcery.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\t* doc/invoke.texi: Document the macros that are defined by\n\tm68k's -mtune and -mhard-float options.\n\t* config/m68k/m68k-protos.h (m68k_cpp_cpu_ident) Declare.\n\t(m68k_cpp_cpu_family): Likewise.\n\t* config/m68k/m68k.h (TARGET_CPU_CPP_BUILTINS): Add a full set\n\tof __ucfv*__ macros.  Define __mcffpu__ if generating code for\n\tColdFire FPUs.  Define __mcf_cpu_* and __mcf_family_* macros.\n\t* config/m68k/m68k.c (m68k_cpp_cpu_ident): New function.\n\t(m68k_cpp_cpu_family): Likewise.\n\nCo-Authored-By: Richard Sandiford <richard@codesourcery.com>\n\nFrom-SVN: r120716", "tree": {"sha": "a1ef587399345760032a197d445988bb648f2901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ef587399345760032a197d445988bb648f2901"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/comments", "author": null, "committer": null, "parents": [{"sha": "9321405c4a8792d7e8faf39b369e5a76436c63df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9321405c4a8792d7e8faf39b369e5a76436c63df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9321405c4a8792d7e8faf39b369e5a76436c63df"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "837f085997e94096a2c4ce5562be2b6f2e82f01b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "patch": "@@ -1,3 +1,16 @@\n+2007-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/invoke.texi: Document the macros that are defined by\n+\tm68k's -mtune and -mhard-float options.\n+\t* config/m68k/m68k-protos.h (m68k_cpp_cpu_ident) Declare.\n+\t(m68k_cpp_cpu_family): Likewise.\n+\t* config/m68k/m68k.h (TARGET_CPU_CPP_BUILTINS): Add a full set\n+\tof __ucfv*__ macros.  Define __mcffpu__ if generating code for\n+\tColdFire FPUs.  Define __mcf_cpu_* and __mcf_family_* macros.\n+\t* config/m68k/m68k.c (m68k_cpp_cpu_ident): New function.\n+\t(m68k_cpp_cpu_family): Likewise.\n+\n 2007-01-12  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/m68k/m68k.h (TARGET_CPU_CPP_BUILTINS): Treat all mc68*"}, {"sha": "75f6f25bee238622b423ae8b317e48bd7b37df8c", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "patch": "@@ -61,5 +61,7 @@ extern bool m68k_regno_mode_ok (int, enum machine_mode);\n extern int flags_in_68881 (void);\n extern bool use_return_insn (void);\n extern void override_options (void);\n+extern const char *m68k_cpp_cpu_ident (const char *);\n+extern const char *m68k_cpp_cpu_family (const char *);\n extern void init_68881_table (void);\n extern int m68k_hard_regno_rename_ok(unsigned int, unsigned int);"}, {"sha": "edf8a7e204c92ecf3aa7fe85af20f8d8ce39a6e7", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "patch": "@@ -540,6 +540,30 @@ override_options (void)\n \n   SUBTARGET_OVERRIDE_OPTIONS;\n }\n+\n+/* Generate a macro of the form __mPREFIX_cpu_NAME, where PREFIX is the\n+   given argument and NAME is the argument passed to -mcpu.  Return NULL\n+   if -mcpu was not passed.  */\n+\n+const char *\n+m68k_cpp_cpu_ident (const char *prefix)\n+{\n+  if (!m68k_cpu_entry)\n+    return NULL;\n+  return concat (\"__m\", prefix, \"_cpu_\", m68k_cpu_entry->name, NULL);\n+}\n+\n+/* Generate a macro of the form __mPREFIX_family_NAME, where PREFIX is the\n+   given argument and NAME is the name of the representative device for\n+   the -mcpu argument's family.  Return NULL if -mcpu was not passed.  */\n+\n+const char *\n+m68k_cpp_cpu_family (const char *prefix)\n+{\n+  if (!m68k_cpu_entry)\n+    return NULL;\n+  return concat (\"__m\", prefix, \"_family_\", m68k_cpu_entry->family, NULL);\n+}\n \f\n /* Return nonzero if FUNC is an interrupt function as specified by the\n    \"interrupt_handler\" attribute.  */"}, {"sha": "17105b5db444c56158e3f090822b6bfeae4272f5", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "patch": "@@ -107,6 +107,26 @@ Boston, MA 02110-1301, USA.  */\n \t  builtin_define_std (\"mc68020\");\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+\tcase ucfv2:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mcfv2__\");\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    \tcase ucfv3:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mcfv3__\");\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tcase ucfv4:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mcfv4__\");\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tcase ucfv4e:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mcfv4e__\");\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tcase ucfv5:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mcfv5__\");\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n@@ -116,7 +136,16 @@ Boston, MA 02110-1301, USA.  */\n \t\t\t\t\t\t\t\t\t\\\n       if (TARGET_COLDFIRE)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n+\t  const char *tmp;\t\t\t\t\t\t\\\n+\t  \t\t\t\t\t\t\t\t\\\n+\t  tmp = m68k_cpp_cpu_ident (\"cf\");\t\t\t   \t\\\n+\t  if (tmp)\t\t\t\t\t\t\t\\\n+\t    builtin_define (tmp);\t\t\t\t\t\\\n+\t  tmp = m68k_cpp_cpu_family (\"cf\");\t\t\t\t\\\n+\t  if (tmp)\t\t\t\t\t\t\t\\\n+\t    builtin_define (tmp);\t\t\t\t\t\\\n \t  builtin_define (\"__mcoldfire__\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  if (TARGET_ISAC)\t\t\t\t\t\t\\\n \t    builtin_define (\"__mcfisac__\");\t\t\t\t\\\n \t  else if (TARGET_ISAB)\t\t\t\t\t\t\\\n@@ -152,10 +181,11 @@ Boston, MA 02110-1301, USA.  */\n \t\t  break;\t\t\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n     \t    }\t\t\t\t\t\t\t\t\\\n-\t  if (m68k_tune == ucfv4e)\t\t\t\t\t\\\n-\t    builtin_define (\"__mcfv4e__\");\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_COLDFIRE_FPU)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mcffpu__\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       if (TARGET_CF_HWDIV)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__mcfhwdiv__\");\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "a3b9c9065a23e8881786b994891126c11a5fcde5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7eb4f04449cc0be1bdf6a1ec976dcefaedf97c88", "patch": "@@ -10328,6 +10328,10 @@ below, which also classifies the CPUs into families:\n @var{arch} is compatible with @var{cpu}.  Other combinations of\n @option{-mcpu} and @option{-march} are rejected.\n \n+gcc defines the macro @samp{__mcf_cpu_@var{cpu}} when ColdFire target\n+@var{cpu} is selected.  It also defines @samp{__mcf_family_@var{family}},\n+where the value of @var{family} is given by the table above.\n+\n @item -mtune=@var{tune}\n @opindex mtune\n Tune the code for a particular microarchitecture, within the\n@@ -10343,6 +10347,17 @@ to run relatively well on 68020, 68030 and 68040 targets.\n as well.  These two options select the same tuning decisions as\n @option{-m68020-40} and @option{-m68020-60} respectively.\n \n+gcc defines the macros @samp{__mc@var{arch}} and @samp{__mc@var{arch}__}\n+when tuning for 680x0 architecture @var{arch}.  It also defines\n+@samp{mc@var{arch}} unless either @option{-ansi} or a non-GNU @option{-std}\n+option is used.  If gcc is tuning for a range of architectures,\n+as selected by @option{-mtune=68020-40} or @option{-mtune=68020-60},\n+it defines the macros for every architecture in the range.\n+\n+gcc also defines the macro @samp{__m@var{uarch}__} when tuning for\n+ColdFire microarchitecture @var{uarch}, where @var{uarch} is one\n+of the arguments given above.\n+\n @item -m68000\n @itemx -mc68000\n @opindex m68000\n@@ -10465,7 +10480,9 @@ The option is equivalent to @option{-march=68020} @option{-mtune=68020-60}.\n @opindex mhard-float\n @opindex m68881\n Generate floating-point instructions.  This is the default for 68020\n-and above, and for ColdFire devices that have an FPU.\n+and above, and for ColdFire devices that have an FPU.  It defines the\n+macro @samp{__HAVE_68881__} on M680x0 targets and @samp{__mcffpu__}\n+on ColdFire targets.\n \n @item -msoft-float\n @opindex msoft-float"}]}