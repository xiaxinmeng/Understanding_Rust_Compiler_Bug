{"sha": "12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJjYTkyZDRmMGZmZGI2YzYxODlkYTMyY2U0NGM4N2Q0ZGMzM2RkYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-11-05T20:43:44Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-11-05T20:43:44Z"}, "message": "quad_2.f90: New.\n\n2011-11-05  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/quad_2.f90: New.\n\nFrom-SVN: r181015", "tree": {"sha": "e09c3acefee16310908aafb0a563e9c7f9588883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e09c3acefee16310908aafb0a563e9c7f9588883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc/comments", "author": null, "committer": null, "parents": [{"sha": "5619e52cfbe12a8a664ef49ef44043a739b54880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5619e52cfbe12a8a664ef49ef44043a739b54880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5619e52cfbe12a8a664ef49ef44043a739b54880"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "634b2183b0ddaa8168cd34f725d682dda489cc75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc", "patch": "@@ -1,3 +1,7 @@\n+2011-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/quad_2.f90: New.\n+\n 2011-11-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/strlenopt-22g.c: New wrapper around...\n@@ -26,10 +30,10 @@\n \n 2011-10-09  Magnus Fromreide  <magfr@lysator.liu.se>\n \n-        * g++.dg/cpp0x/enum21a.C: Test that enum x { y, } does\n-        generate a pedwarn in c++98-mode.\n-        * g++.dg/cpp0x/enum21b.C: Test that enum x { y, }\n-        don't generate a pedwarn in c++0x-mode.\n+\t* g++.dg/cpp0x/enum21a.C: Test that enum x { y, } does\n+\tgenerate a pedwarn in c++98-mode.\n+\t* g++.dg/cpp0x/enum21b.C: Test that enum x { y, }\n+\tdon't generate a pedwarn in c++0x-mode.\n \n 2011-11-04  Olivier Goffart  <olivier@woboq.com>\n "}, {"sha": "c1334db9cd449b68ca8657a663d8e78d8f2405e1", "filename": "gcc/testsuite/gfortran.dg/quad_2.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fquad_2.f90?ref=12ca92d4f0ffdb6c6189da32ce44c87d4dc33ddc", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do run }\n+!\n+! This test checks whether the largest possible\n+! floating-point number works.\n+!\n+! This is a run-time check. Depending on the architecture,\n+! this tests REAL(8), REAL(10) or REAL(16) and REAL(16)\n+! might be a hardware or libquadmath 128bit number.\n+!\n+program test_qp\n+   use iso_fortran_env, only: real_kinds\n+   implicit none\n+   integer, parameter :: QP = real_kinds(ubound(real_kinds,dim=1))\n+   real(qp) :: fp1, fp2, fp3, fp4\n+   character(len=80) :: str1, str2, str3, str4\n+   fp1 = 1\n+   fp2 = sqrt (2.0_qp)\n+   write (str1,*) fp1\n+   write (str2,'(g0)') fp1\n+   write (str3,*) fp2\n+   write (str4,'(g0)') fp2\n+\n+!   print '(3a)', '>',trim(str1),'<'\n+!   print '(3a)', '>',trim(str2),'<'\n+!   print '(3a)', '>',trim(str3),'<'\n+!   print '(3a)', '>',trim(str4),'<'\n+\n+   read (str1, *) fp3\n+   if (fp1 /= fp3) call abort()\n+   read (str2, *) fp3\n+   if (fp1 /= fp3) call abort()\n+   read (str3, *) fp4\n+   if (fp2 /= fp4) call abort()\n+   read (str4, *) fp4\n+   if (fp2 /= fp4) call abort()\n+\n+   select case (qp)\n+     case (8)\n+       if (str1 /= \"   1.0000000000000000\") call abort()\n+       if (str2 /= \"1.0000000000000000\") call abort()\n+       if (str3 /= \"   1.4142135623730951\") call abort()\n+       if (str4 /= \"1.4142135623730951\") call abort()\n+     case (10)\n+       if (str1 /= \"   1.00000000000000000000\") call abort()\n+       if (str2 /= \"1.00000000000000000000\") call abort()\n+       if (str3 /= \"   1.41421356237309504876\") call abort()\n+       if (str4 /= \"1.41421356237309504876\") call abort()\n+     case (16)\n+       if (str1 /= \"   1.00000000000000000000000000000000000\") call abort()\n+       if (str2 /= \"1.00000000000000000000000000000000000\") call abort()\n+       if (str3 /= \"   1.41421356237309504880168872420969798\") call abort()\n+       if (str4 /= \"1.41421356237309504880168872420969798\") call abort()\n+       block\n+         real(qp), volatile :: fp2a\n+         fp2a = 2.0_qp\n+         fp2a = sqrt (fp2a)\n+         if (abs (fp2a - fp2) > sqrt(2.0_qp)-nearest(sqrt(2.0_qp),-1.0_qp)) call abort()\n+       end block\n+     case default\n+       call abort()\n+   end select\n+\n+end program test_qp"}]}