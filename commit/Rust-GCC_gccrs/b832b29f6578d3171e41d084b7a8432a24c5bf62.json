{"sha": "b832b29f6578d3171e41d084b7a8432a24c5bf62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzMmIyOWY2NTc4ZDMxNzFlNDFkMDg0YjdhODQzMmEyNGM1YmY2Mg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-10-30T18:46:02Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-10-30T18:46:02Z"}, "message": "Remove DImode expansions for 1-bit shifts\n\nA left shift of 1 can always be done using an add, so slightly adjust rtx\ncost for DImode left shift by 1 so that adddi3 is preferred in all cases,\nand the arm_ashldi3_1bit is redundant.\n\nDImode right shifts of 1 are rarely used (6 in total in the GCC binary),\nso there is little benefit of the arm_ashrdi3_1bit and arm_lshrdi3_1bit\npatterns.  The generated code is better and faster without these shifts\nas it allows early expansion, optimization and better register allocation.\n\n    gcc/\n\t* config/arm/arm.md (ashldi3): Remove shift by 1 expansion.\n\t(arm_ashldi3_1bit): Remove pattern.\n\t(ashrdi3): Remove shift by 1 expansion.\n\t(arm_ashrdi3_1bit): Remove pattern.\n\t(lshrdi3): Remove shift by 1 expansion.\n\t(arm_lshrdi3_1bit): Remove pattern.\n\t* config/arm/arm.c (arm_rtx_costs_internal): Slightly increase\n\tcost of ashldi3 by 1.\n\t* config/arm/neon.md (ashldi3_neon): Remove shift by 1 expansion.\n\t(<shift>di3_neon): Likewise.\n\nFrom-SVN: r254237", "tree": {"sha": "bc8021aa242ff8a5c91571f998c0664543be9467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8021aa242ff8a5c91571f998c0664543be9467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b832b29f6578d3171e41d084b7a8432a24c5bf62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b832b29f6578d3171e41d084b7a8432a24c5bf62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b832b29f6578d3171e41d084b7a8432a24c5bf62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b832b29f6578d3171e41d084b7a8432a24c5bf62/comments", "author": null, "committer": null, "parents": [{"sha": "0d1cf53834bdcbe23c20c872036754c028caaa06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1cf53834bdcbe23c20c872036754c028caaa06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1cf53834bdcbe23c20c872036754c028caaa06"}], "stats": {"total": 88, "additions": 21, "deletions": 67}, "files": [{"sha": "a32a5cec5464030f3de115deea0a8b08478a929b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b832b29f6578d3171e41d084b7a8432a24c5bf62", "patch": "@@ -1,3 +1,16 @@\n+2017-10-30  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/arm.md (ashldi3): Remove shift by 1 expansion.\n+\t(arm_ashldi3_1bit): Remove pattern.\n+\t(ashrdi3): Remove shift by 1 expansion.\n+\t(arm_ashrdi3_1bit): Remove pattern.\n+\t(lshrdi3): Remove shift by 1 expansion.\n+\t(arm_lshrdi3_1bit): Remove pattern.\n+\t* config/arm/arm.c (arm_rtx_costs_internal): Slightly increase\n+\tcost of ashldi3 by 1.\n+\t* config/arm/neon.md (ashldi3_neon): Remove shift by 1 expansion.\n+\t(<shift>di3_neon): Likewise.\n+\n 2017-10-30  Dominik Infuehr  <dominik.infuehr@theobroma-systems.com>\n \n \t* config/aarch64/aarch64-simd.md (*aarch64_simd_mov): Rename"}, {"sha": "813d29af49f2518a3cb8b3f5b93863593dd34955", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b832b29f6578d3171e41d084b7a8432a24c5bf62", "patch": "@@ -9430,6 +9430,9 @@ arm_rtx_costs_internal (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \t\t   + rtx_cost (XEXP (x, 0), mode, code, 0, speed_p));\n \t  if (speed_p)\n \t    *cost += 2 * extra_cost->alu.shift;\n+\t  /* Slightly disparage left shift by 1 at so we prefer adddi3.  */\n+\t  if (code == ASHIFT && XEXP (x, 1) == CONST1_RTX (SImode))\n+\t    *cost += 1;\n \t  return true;\n \t}\n       else if (mode == SImode)"}, {"sha": "ddb9d8f359007c1d86d497aef0ff5fc0e4061813", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b832b29f6578d3171e41d084b7a8432a24c5bf62", "patch": "@@ -4059,12 +4059,6 @@\n     {\n       rtx scratch1, scratch2;\n \n-      if (operands[2] == CONST1_RTX (SImode))\n-        {\n-          emit_insn (gen_arm_ashldi3_1bit (operands[0], operands[1]));\n-          DONE;\n-        }\n-\n       /* Ideally we should use iwmmxt here if we could know that operands[1]\n          ends up already living in an iwmmxt register. Otherwise it's\n          cheaper to have the alternate code being generated than moving\n@@ -4081,18 +4075,6 @@\n   \"\n )\n \n-(define_insn \"arm_ashldi3_1bit\"\n-  [(set (match_operand:DI            0 \"s_register_operand\" \"=r,&r\")\n-        (ashift:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n-                   (const_int 1)))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"movs\\\\t%Q0, %Q1, asl #1\\;adc\\\\t%R0, %R1, %R1\"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n (define_expand \"ashlsi3\"\n   [(set (match_operand:SI            0 \"s_register_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n@@ -4128,12 +4110,6 @@\n     {\n       rtx scratch1, scratch2;\n \n-      if (operands[2] == CONST1_RTX (SImode))\n-        {\n-          emit_insn (gen_arm_ashrdi3_1bit (operands[0], operands[1]));\n-          DONE;\n-        }\n-\n       /* Ideally we should use iwmmxt here if we could know that operands[1]\n          ends up already living in an iwmmxt register. Otherwise it's\n          cheaper to have the alternate code being generated than moving\n@@ -4150,18 +4126,6 @@\n   \"\n )\n \n-(define_insn \"arm_ashrdi3_1bit\"\n-  [(set (match_operand:DI              0 \"s_register_operand\" \"=r,&r\")\n-        (ashiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n-                     (const_int 1)))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"movs\\\\t%R0, %R1, asr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n (define_expand \"ashrsi3\"\n   [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n@@ -4194,12 +4158,6 @@\n     {\n       rtx scratch1, scratch2;\n \n-      if (operands[2] == CONST1_RTX (SImode))\n-        {\n-          emit_insn (gen_arm_lshrdi3_1bit (operands[0], operands[1]));\n-          DONE;\n-        }\n-\n       /* Ideally we should use iwmmxt here if we could know that operands[1]\n          ends up already living in an iwmmxt register. Otherwise it's\n          cheaper to have the alternate code being generated than moving\n@@ -4216,18 +4174,6 @@\n   \"\n )\n \n-(define_insn \"arm_lshrdi3_1bit\"\n-  [(set (match_operand:DI              0 \"s_register_operand\" \"=r,&r\")\n-        (lshiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"0,r\")\n-                     (const_int 1)))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"movs\\\\t%R0, %R1, lsr #1\\;mov\\\\t%Q0, %Q1, rrx\"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n (define_expand \"lshrsi3\"\n   [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n \t(lshiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")"}, {"sha": "4452778f6cf3ec8fc1f87ee7ec8b416083fec485", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b832b29f6578d3171e41d084b7a8432a24c5bf62/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=b832b29f6578d3171e41d084b7a8432a24c5bf62", "patch": "@@ -1221,12 +1221,8 @@\n \tgcc_assert (!reg_overlap_mentioned_p (operands[0], operands[1])\n \t\t    || REGNO (operands[0]) == REGNO (operands[1]));\n \n-\tif (operands[2] == CONST1_RTX (SImode))\n-\t  /* This clobbers CC.  */\n-\t  emit_insn (gen_arm_ashldi3_1bit (operands[0], operands[1]));\n-\telse\n-\t  arm_emit_coreregs_64bit_shift (ASHIFT, operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3], operands[4]);\n+\tarm_emit_coreregs_64bit_shift (ASHIFT, operands[0], operands[1],\n+\t\t\t\t       operands[2], operands[3], operands[4]);\n       }\n     DONE;\n   }\"\n@@ -1325,13 +1321,9 @@\n \tgcc_assert (!reg_overlap_mentioned_p (operands[0], operands[1])\n \t\t    || REGNO (operands[0]) == REGNO (operands[1]));\n \n-\tif (operands[2] == CONST1_RTX (SImode))\n-\t  /* This clobbers CC.  */\n-\t  emit_insn (gen_arm_<shift>di3_1bit (operands[0], operands[1]));\n-\telse\n-\t  /* This clobbers CC (ASHIFTRT by register only).  */\n-\t  arm_emit_coreregs_64bit_shift (<CODE>, operands[0], operands[1],\n-\t\t\t\t \t operands[2], operands[3], operands[4]);\n+\t/* This clobbers CC (ASHIFTRT by register only).  */\n+\tarm_emit_coreregs_64bit_shift (<CODE>, operands[0], operands[1],\n+\t\t\t\t       operands[2], operands[3], operands[4]);\n       }\n \n     DONE;"}]}