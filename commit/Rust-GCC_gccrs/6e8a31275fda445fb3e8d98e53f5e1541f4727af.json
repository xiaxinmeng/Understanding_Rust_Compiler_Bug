{"sha": "6e8a31275fda445fb3e8d98e53f5e1541f4727af", "node_id": "C_kwDOANBUbNoAKDZlOGEzMTI3NWZkYTQ0NWZiM2U4ZDk4ZTUzZjVlMTU0MWY0NzI3YWY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-07T10:13:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-07T13:07:40Z"}, "message": "tree-optimization/103596 - fix missed propagation into switches\n\nmay_propagate_copy unnecessarily restricts propagating non-abnormals\ninto places that currently contain an abnormal SSA name but are\nnot the PHI argument for an abnormal edge.  This causes VN to\nnot elide a CFG path that it assumes is elided, resulting in\nreleased SSA names in the IL.\n\nThe fix is to enhance the may_propagate_copy API to specify the\ndestination is _not_ a PHI argument.  I chose to not update only\nthe relevant caller in VN and the may_propagate_copy_into_stmt API\nat this point because this is a regression and needs backporting.\n\n2021-12-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103596\n\t* tree-ssa-sccvn.c (eliminate_dom_walker::eliminate_stmt):\n\tNote we are not propagating into a PHI argument to may_propagate_copy.\n\t* tree-ssa-propagate.h (may_propagate_copy): Add\n\targument specifying whether we propagate into a PHI arg.\n\t* tree-ssa-propagate.c (may_propagate_copy): Likewise.\n\tWhen not doing so we can replace an abnormal with\n\tsomething else.\n\t(may_propagate_into_stmt): Update may_propagate_copy calls.\n\t(replace_exp_1): Move propagation checking code to\n\tpropagate_value and rename to ...\n\t(replace_exp): ... this and elide previous wrapper.\n\t(propagate_value): Perform checking with adjusted\n\tmay_propagate_copy call and dispatch to replace_exp.\n\n\t* gcc.dg/torture/pr103596.c: New testcase.", "tree": {"sha": "342d6984b35acf0f217c7ae5ad998a2f5c0bda78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/342d6984b35acf0f217c7ae5ad998a2f5c0bda78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e8a31275fda445fb3e8d98e53f5e1541f4727af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8a31275fda445fb3e8d98e53f5e1541f4727af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e8a31275fda445fb3e8d98e53f5e1541f4727af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8a31275fda445fb3e8d98e53f5e1541f4727af/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93e704b9e0411f1db031df9716b9958307590e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93e704b9e0411f1db031df9716b9958307590e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93e704b9e0411f1db031df9716b9958307590e3"}], "stats": {"total": 102, "additions": 62, "deletions": 40}, "files": [{"sha": "4f65c36d121470482d3a3ada11d607cada3b5b73", "filename": "gcc/testsuite/gcc.dg/torture/pr103596.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103596.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103596.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103596.c?ref=6e8a31275fda445fb3e8d98e53f5e1541f4727af", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"--param case-values-threshold=1\" } */\n+\n+int n;\n+\n+void\n+qux (int a)\n+{\n+}\n+\n+int\n+baz (void)\n+{\n+  return -1;\n+}\n+\n+__attribute__ ((returns_twice)) int\n+bar (int b)\n+{\n+  if (n != 0)\n+    {\n+      if (b != 2)\n+        if (b != 0)\n+          return n + b;\n+\n+      if (n == 2)\n+        return 0;\n+    }\n+}\n+\n+void\n+foo (void)\n+{\n+  qux (n);\n+  bar (baz ());\n+}"}, {"sha": "1f2a17f73c9b8ab46a5899051971665bf3758a26", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=6e8a31275fda445fb3e8d98e53f5e1541f4727af", "patch": "@@ -1042,10 +1042,12 @@ substitute_and_fold_engine::substitute_and_fold (basic_block block)\n }\n \n \n-/* Return true if we may propagate ORIG into DEST, false otherwise.  */\n+/* Return true if we may propagate ORIG into DEST, false otherwise.\n+   If DEST_NOT_PHI_ARG_P is true then assume the propagation does\n+   not happen into a PHI argument which relaxes some constraints.  */\n \n bool\n-may_propagate_copy (tree dest, tree orig)\n+may_propagate_copy (tree dest, tree orig, bool dest_not_phi_arg_p)\n {\n   tree type_d = TREE_TYPE (dest);\n   tree type_o = TREE_TYPE (orig);\n@@ -1065,8 +1067,10 @@ may_propagate_copy (tree dest, tree orig)\n \t   && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig))\n     return false;\n   /* Similarly if DEST flows in from an abnormal edge then the copy cannot be\n-     propagated.  */\n-  else if (TREE_CODE (dest) == SSA_NAME\n+     propagated.  If we know we do not propagate into a PHI argument this\n+     does not apply.  */\n+  else if (!dest_not_phi_arg_p\n+\t   && TREE_CODE (dest) == SSA_NAME\n \t   && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (dest))\n     return false;\n \n@@ -1100,9 +1104,9 @@ may_propagate_copy_into_stmt (gimple *dest, tree orig)\n      for the expression, so we delegate to may_propagate_copy.  */\n \n   if (gimple_assign_single_p (dest))\n-    return may_propagate_copy (gimple_assign_rhs1 (dest), orig);\n+    return may_propagate_copy (gimple_assign_rhs1 (dest), orig, true);\n   else if (gswitch *dest_swtch = dyn_cast <gswitch *> (dest))\n-    return may_propagate_copy (gimple_switch_index (dest_swtch), orig);\n+    return may_propagate_copy (gimple_switch_index (dest_swtch), orig, true);\n \n   /* In other cases, the expression is not materialized, so there\n      is no destination to pass to may_propagate_copy.  On the other\n@@ -1140,25 +1144,19 @@ may_propagate_copy_into_asm (tree dest ATTRIBUTE_UNUSED)\n }\n \n \n-/* Common code for propagate_value and replace_exp.\n+/* Replace *OP_P with value VAL (assumed to be a constant or another SSA_NAME).\n \n-   Replace use operand OP_P with VAL.  FOR_PROPAGATION indicates if the\n-   replacement is done to propagate a value or not.  */\n+   Use this version when not const/copy propagating values.  For example,\n+   PRE uses this version when building expressions as they would appear\n+   in specific blocks taking into account actions of PHI nodes.\n \n-static void\n-replace_exp_1 (use_operand_p op_p, tree val,\n-    \t       bool for_propagation ATTRIBUTE_UNUSED)\n-{\n-  if (flag_checking)\n-    {\n-      tree op = USE_FROM_PTR (op_p);\n-      gcc_assert (!(for_propagation\n-\t\t  && TREE_CODE (op) == SSA_NAME\n-\t\t  && TREE_CODE (val) == SSA_NAME\n-\t\t  && !may_propagate_copy (op, val)));\n-    }\n+   The statement in which an expression has been replaced should be\n+   folded using fold_stmt_inplace.  */\n \n-  if (TREE_CODE (val) == SSA_NAME)\n+void\n+replace_exp (use_operand_p op_p, tree val)\n+{\n+  if (TREE_CODE (val) == SSA_NAME || CONSTANT_CLASS_P (val))\n     SET_USE (op_p, val);\n   else\n     SET_USE (op_p, unshare_expr (val));\n@@ -1174,22 +1172,10 @@ replace_exp_1 (use_operand_p op_p, tree val,\n void\n propagate_value (use_operand_p op_p, tree val)\n {\n-  replace_exp_1 (op_p, val, true);\n-}\n-\n-/* Replace *OP_P with value VAL (assumed to be a constant or another SSA_NAME).\n-\n-   Use this version when not const/copy propagating values.  For example,\n-   PRE uses this version when building expressions as they would appear\n-   in specific blocks taking into account actions of PHI nodes.\n-\n-   The statement in which an expression has been replaced should be\n-   folded using fold_stmt_inplace.  */\n-\n-void\n-replace_exp (use_operand_p op_p, tree val)\n-{\n-  replace_exp_1 (op_p, val, false);\n+  if (flag_checking)\n+    gcc_assert (may_propagate_copy (USE_FROM_PTR (op_p), val,\n+\t\t\t\t    !is_a <gphi *> (USE_STMT (op_p))));\n+  replace_exp (op_p, val);\n }\n \n "}, {"sha": "87a94ad17c3b7a620bb36da70b1cda73429c6387", "filename": "gcc/tree-ssa-propagate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftree-ssa-propagate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftree-ssa-propagate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.h?ref=6e8a31275fda445fb3e8d98e53f5e1541f4727af", "patch": "@@ -65,7 +65,7 @@ enum ssa_prop_result {\n \n extern void move_ssa_defining_stmt_for_defs (gimple *, gimple *);\n extern bool stmt_makes_single_store (gimple *);\n-extern bool may_propagate_copy (tree, tree);\n+extern bool may_propagate_copy (tree, tree, bool = false);\n extern bool may_propagate_copy_into_stmt (gimple *, tree);\n extern bool may_propagate_copy_into_asm (tree);\n extern void propagate_value (use_operand_p, tree);"}, {"sha": "16c93d1be780a1170ad600ab0ba6bec01efb23ac", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e8a31275fda445fb3e8d98e53f5e1541f4727af/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6e8a31275fda445fb3e8d98e53f5e1541f4727af", "patch": "@@ -6607,7 +6607,7 @@ eliminate_dom_walker::eliminate_stmt (basic_block b, gimple_stmt_iterator *gsi)\n \t   at the definition are also available at uses.  */\n \tsprime = eliminate_avail (gimple_bb (SSA_NAME_DEF_STMT (use)), use);\n       if (sprime && sprime != use\n-\t  && may_propagate_copy (use, sprime)\n+\t  && may_propagate_copy (use, sprime, true)\n \t  /* We substitute into debug stmts to avoid excessive\n \t     debug temporaries created by removed stmts, but we need\n \t     to avoid doing so for inserted sprimes as we never want"}]}