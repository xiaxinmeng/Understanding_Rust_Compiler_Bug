{"sha": "4b43f026aac8f0b9a918082551abca6bfa4d9912", "node_id": "C_kwDOANBUbNoAKDRiNDNmMDI2YWFjOGYwYjlhOTE4MDgyNTUxYWJjYTZiZmE0ZDk5MTI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-02-26T22:08:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-02-28T20:38:35Z"}, "message": "gccrs: Generic pointers are coerceable\n\nThis is a complex type-system change where it begins out journey to get\nrid of our can_eq interface. Rust allows:\n\n  let x:*mut T\n  let y = x as *mut u8;\n\nWhich requires us to consider find a way to infer what T should be so as\nto keep unify happy. This means we need to introduce a new unify_and\ninterface where we can optionally inject inference variables as well as\nonly commit the inference variable joins when they are sucsessful.\n\nSo for this case we can then inject an implicit inference variables for T\nthat can unify against u8 to make this a valid type-resolution.\n\nFixes #1930\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-expr.cc (CompileExpr::resolve_method_address): update to new inteface\n\t* typecheck/rust-coercion.cc (TypeCoercionRules::coerce_unsafe_ptr): likewise\n\t(TypeCoercionRules::coerce_borrowed_pointer): likewise\n\t* typecheck/rust-hir-type-check.h: likewise\n\t* typecheck/rust-type-util.cc (unify_site_and): new interface to allow for infer and commit\n\t* typecheck/rust-type-util.h (unify_site_and): likewise\n\t* typecheck/rust-typecheck-context.cc (TypeCheckContext::clear_type): new interface\n\t* typecheck/rust-unify.cc (UnifyRules::UnifyRules): update\n\t(UnifyRules::Resolve): new optional flags for commit and infer\n\t(UnifyRules::go): likewise\n\t(UnifyRules::expect_adt): refactor to use new interface\n\t(UnifyRules::expect_reference): likewise\n\t(UnifyRules::expect_pointer): likewise\n\t(UnifyRules::expect_array): likewise\n\t(UnifyRules::expect_slice): likewise\n\t(UnifyRules::expect_fndef): likewise\n\t(UnifyRules::expect_fnptr): likewise\n\t(UnifyRules::expect_tuple): likewise\n\t(UnifyRules::expect_closure): likewise\n\t* typecheck/rust-unify.h: refactor interface\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-1930.rs: New test.", "tree": {"sha": "8371efacd9c77357cedffbf595d82066ede74045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8371efacd9c77357cedffbf595d82066ede74045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b43f026aac8f0b9a918082551abca6bfa4d9912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b43f026aac8f0b9a918082551abca6bfa4d9912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b43f026aac8f0b9a918082551abca6bfa4d9912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b43f026aac8f0b9a918082551abca6bfa4d9912/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83863c69193c27ad6dcfb67d86691ef6fb3e1486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83863c69193c27ad6dcfb67d86691ef6fb3e1486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83863c69193c27ad6dcfb67d86691ef6fb3e1486"}], "stats": {"total": 231, "additions": 181, "deletions": 50}, "files": [{"sha": "200f3a2a07e4ecc9341e1356f1462e3a2b064122", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -26,7 +26,7 @@\n #include \"rust-compile-block.h\"\n #include \"rust-compile-implitem.h\"\n #include \"rust-constexpr.h\"\n-#include \"rust-unify.h\"\n+#include \"rust-type-util.h\"\n #include \"rust-gcc.h\"\n \n #include \"fold-const.h\"\n@@ -2007,10 +2007,9 @@ CompileExpr::resolve_method_address (TyTy::FnType *fntype, HirId ref,\n \t{\n \t  TyTy::BaseType *infer_impl_call\n \t    = candidate_call->infer_substitions (expr_locus);\n-\t  monomorphized = Resolver::UnifyRules::Resolve (\n-\t    TyTy::TyWithLocation (infer_impl_call),\n-\t    TyTy::TyWithLocation (fntype), expr_locus, true /* commit */,\n-\t    true /* emit_errors */);\n+\t  monomorphized\n+\t    = Resolver::unify_site (ref, TyTy::TyWithLocation (infer_impl_call),\n+\t\t\t\t    TyTy::TyWithLocation (fntype), expr_locus);\n \t}\n \n       return CompileInherentImplItem::Compile (impl_item, ctx, monomorphized);"}, {"sha": "fdc8bdd7acb2214db2579906ce0352fb63e97de4", "filename": "gcc/rust/typecheck/rust-coercion.cc", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -18,7 +18,7 @@\n \n #include \"rust-hir-type-check-base.h\"\n #include \"rust-coercion.h\"\n-#include \"rust-unify.h\"\n+#include \"rust-type-util.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -146,7 +146,7 @@ TypeCoercionRules::coerce_unsafe_ptr (TyTy::BaseType *receiver,\n \t\t\t\t      TyTy::PointerType *expected,\n \t\t\t\t      Mutability to_mutbl)\n {\n-  rust_debug (\"coerce_unsafe_ptr(a={%s}, b={%s})\",\n+  rust_debug (\"coerce_unsafe_ptr(receiver={%s}, expected={%s})\",\n \t      receiver->debug_str ().c_str (), expected->debug_str ().c_str ());\n \n   Mutability from_mutbl = Mutability::Imm;\n@@ -184,13 +184,21 @@ TypeCoercionRules::coerce_unsafe_ptr (TyTy::BaseType *receiver,\n       return TypeCoercionRules::CoercionResult::get_error ();\n     }\n \n-  TyTy::PointerType *result\n+  TyTy::PointerType *coerced_mutability\n     = new TyTy::PointerType (receiver->get_ref (),\n \t\t\t     TyTy::TyVar (element->get_ref ()), to_mutbl);\n-  if (!result->can_eq (expected, false))\n-    return CoercionResult::get_error ();\n \n-  return CoercionResult{{}, result};\n+  TyTy::BaseType *result\n+    = unify_site_and (receiver->get_ref (), TyTy::TyWithLocation (expected),\n+\t\t      TyTy::TyWithLocation (coerced_mutability),\n+\t\t      Location () /*unify_locus*/, false /*emit_errors*/,\n+\t\t      true /*commit_if_ok*/, true /*infer*/,\n+\t\t      true /*cleanup on error*/);\n+  bool unsafe_ptr_coerceion_ok = result->get_kind () != TyTy::TypeKind::ERROR;\n+  if (unsafe_ptr_coerceion_ok)\n+    return CoercionResult{{}, result};\n+\n+  return TypeCoercionRules::CoercionResult::get_error ();\n }\n \n /// Reborrows `&mut A` to `&mut B` and `&(mut) A` to `&B`.\n@@ -220,9 +228,8 @@ TypeCoercionRules::coerce_borrowed_pointer (TyTy::BaseType *receiver,\n \t// back to a final unity anyway\n \trust_debug (\"coerce_borrowed_pointer -- unify\");\n \tTyTy::BaseType *result\n-\t  = UnifyRules::Resolve (TyTy::TyWithLocation (receiver),\n-\t\t\t\t TyTy::TyWithLocation (expected), locus,\n-\t\t\t\t true /* commit */, true /* emit_errors */);\n+\t  = unify_site (receiver->get_ref (), TyTy::TyWithLocation (receiver),\n+\t\t\tTyTy::TyWithLocation (expected), locus);\n \treturn CoercionResult{{}, result};\n       }\n     }"}, {"sha": "5c5623a0bf69da6ef461ecde28cc324e935348fb", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -84,6 +84,7 @@ class TypeCheckContext\n \t\t    TyTy::BaseType *type);\n   void insert_implicit_type (TyTy::BaseType *type);\n   bool lookup_type (HirId id, TyTy::BaseType **type) const;\n+  void clear_type (TyTy::BaseType *ty);\n \n   void insert_implicit_type (HirId id, TyTy::BaseType *type);\n "}, {"sha": "ff7c805c9436c4200115f6123fbe88ecacd2e04a", "filename": "gcc/rust/typecheck/rust-type-util.cc", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.cc?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -117,8 +117,57 @@ unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n   rust_debug (\"unify_site id={%u} expected={%s} expr={%s}\", id,\n \t      expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n \n+  std::vector<UnifyRules::CommitSite> commits;\n+  std::vector<UnifyRules::InferenceSite> infers;\n   return UnifyRules::Resolve (lhs, rhs, unify_locus, true /*commit*/,\n-\t\t\t      true /*emit_error*/);\n+\t\t\t      true /*emit_error*/, false /*infer*/, commits,\n+\t\t\t      infers);\n+}\n+\n+TyTy::BaseType *\n+unify_site_and (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t\tLocation unify_locus, bool emit_errors, bool commit_if_ok,\n+\t\tbool implicit_infer_vars, bool cleanup)\n+{\n+  TypeCheckContext &context = *TypeCheckContext::get ();\n+\n+  TyTy::BaseType *expected = lhs.get_ty ();\n+  TyTy::BaseType *expr = rhs.get_ty ();\n+\n+  rust_debug (\n+    \"unify_site_and commit %s infer %s id={%u} expected={%s} expr={%s}\",\n+    commit_if_ok ? \"true\" : \"false\", implicit_infer_vars ? \"true\" : \"false\", id,\n+    expected->debug_str ().c_str (), expr->debug_str ().c_str ());\n+\n+  std::vector<UnifyRules::CommitSite> commits;\n+  std::vector<UnifyRules::InferenceSite> infers;\n+  TyTy::BaseType *result\n+    = UnifyRules::Resolve (lhs, rhs, unify_locus, false /*commit inline*/,\n+\t\t\t   emit_errors, implicit_infer_vars, commits, infers);\n+  bool ok = result->get_kind () != TyTy::TypeKind::ERROR;\n+  if (ok && commit_if_ok)\n+    {\n+      for (auto &c : commits)\n+\t{\n+\t  UnifyRules::commit (c.lhs, c.rhs, c.resolved);\n+\t}\n+    }\n+  else if (cleanup)\n+    {\n+      // FIXME\n+      // reset the get_next_hir_id\n+\n+      for (auto &i : infers)\n+\t{\n+\t  i.param->set_ref (i.pref);\n+\t  i.param->set_ty_ref (i.ptyref);\n+\n+\t  // remove the inference variable\n+\t  context.clear_type (i.infer);\n+\t  delete i.infer;\n+\t}\n+    }\n+  return result;\n }\n \n TyTy::BaseType *"}, {"sha": "8ecba738ff44b5b32e6e038eda7868b97fab638c", "filename": "gcc/rust/typecheck/rust-type-util.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-type-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-type-util.h?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -30,13 +30,18 @@ class BaseType;\n \n namespace Resolver {\n \n-extern bool\n+bool\n query_type (HirId reference, TyTy::BaseType **result);\n \n TyTy::BaseType *\n unify_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n \t    Location unify_locus);\n \n+TyTy::BaseType *\n+unify_site_and (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n+\t\tLocation unify_locus, bool emit_errors, bool commit_if_ok,\n+\t\tbool implicit_infer_vars, bool cleanup);\n+\n TyTy::BaseType *\n coercion_site (HirId id, TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n \t       Location coercion_locus);"}, {"sha": "096ce26f1fa1e14a13041bbab328f95c019f7041", "filename": "gcc/rust/typecheck/rust-typecheck-context.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -108,6 +108,16 @@ TypeCheckContext::lookup_type (HirId id, TyTy::BaseType **type) const\n   return true;\n }\n \n+void\n+TypeCheckContext::clear_type (TyTy::BaseType *ty)\n+{\n+  auto it = resolved.find (ty->get_ref ());\n+  if (it == resolved.end ())\n+    return;\n+\n+  resolved.erase (it);\n+}\n+\n void\n TypeCheckContext::insert_type_by_node_id (NodeId ref, HirId id)\n {"}, {"sha": "37ef71ec22e782d97fe5ec4ce50a4b0cbd155bec", "filename": "gcc/rust/typecheck/rust-unify.cc", "status": "modified", "additions": 67, "deletions": 32, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.cc?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -22,19 +22,26 @@ namespace Rust {\n namespace Resolver {\n \n UnifyRules::UnifyRules (TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n-\t\t\tLocation locus, bool commit_flag, bool emit_error)\n+\t\t\tLocation locus, bool commit_flag, bool emit_error,\n+\t\t\tbool infer, std::vector<CommitSite> &commits,\n+\t\t\tstd::vector<InferenceSite> &infers)\n   : lhs (lhs), rhs (rhs), locus (locus), commit_flag (commit_flag),\n-    emit_error (emit_error), mappings (*Analysis::Mappings::get ()),\n+    emit_error (emit_error), infer_flag (infer), commits (commits),\n+    infers (infers), mappings (*Analysis::Mappings::get ()),\n     context (*TypeCheckContext::get ())\n {}\n \n TyTy::BaseType *\n UnifyRules::Resolve (TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n-\t\t     Location locus, bool commit_flag, bool emit_error)\n+\t\t     Location locus, bool commit_flag, bool emit_error,\n+\t\t     bool infer, std::vector<CommitSite> &commits,\n+\t\t     std::vector<InferenceSite> &infers)\n {\n-  UnifyRules r (lhs, rhs, locus, commit_flag, emit_error);\n-  TyTy::BaseType *result = r.go ();\n+  UnifyRules r (lhs, rhs, locus, commit_flag, emit_error, infer, commits,\n+\t\tinfers);\n \n+  TyTy::BaseType *result = r.go ();\n+  commits.push_back ({lhs.get_ty (), rhs.get_ty (), result});\n   if (r.commit_flag)\n     UnifyRules::commit (lhs.get_ty (), rhs.get_ty (), result);\n \n@@ -142,6 +149,28 @@ UnifyRules::go ()\n \t}\n     }\n \n+  // inject inference vars if required\n+  bool got_param = rtype->get_kind () == TyTy::TypeKind::PARAM;\n+  bool lhs_is_infer_var = ltype->get_kind () == TyTy::TypeKind::INFER;\n+  bool expected_is_concrete = ltype->is_concrete () && !lhs_is_infer_var;\n+  bool needs_infer = expected_is_concrete && got_param;\n+  if (infer_flag && needs_infer)\n+    {\n+      TyTy::ParamType *p = static_cast<TyTy::ParamType *> (rtype);\n+      TyTy::TyVar iv = TyTy::TyVar::get_implicit_infer_var (rhs.get_locus ());\n+      rust_assert (iv.get_tyty ()->get_kind () == TyTy::TypeKind::INFER);\n+      TyTy::InferType *i = static_cast<TyTy::InferType *> (iv.get_tyty ());\n+\n+      infers.push_back ({p->get_ref (), p->get_ty_ref (), p, i});\n+\n+      // FIXME\n+      // this is hacky to set the implicit param lets make this a function\n+      p->set_ty_ref (i->get_ref ());\n+\n+      // set the rtype now to the new inference var\n+      rtype = i;\n+    }\n+\n   switch (ltype->get_kind ())\n     {\n     case TyTy::INFER:\n@@ -367,7 +396,8 @@ UnifyRules::expect_adt (TyTy::ADTType *ltype, TyTy::BaseType *rtype)\n \t\t  = UnifyRules::Resolve (TyTy::TyWithLocation (this_field_ty),\n \t\t\t\t\t TyTy::TyWithLocation (other_field_ty),\n \t\t\t\t\t locus, commit_flag,\n-\t\t\t\t\t false /* emit_error */);\n+\t\t\t\t\t false /* emit_error */, infer_flag,\n+\t\t\t\t\t commits, infers);\n \t\tif (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n \t\t  {\n \t\t    return new TyTy::ErrorType (0);\n@@ -392,7 +422,8 @@ UnifyRules::expect_adt (TyTy::ADTType *ltype, TyTy::BaseType *rtype)\n \t\tauto res\n \t\t  = UnifyRules::Resolve (TyTy::TyWithLocation (pa),\n \t\t\t\t\t TyTy::TyWithLocation (pb), locus,\n-\t\t\t\t\t commit_flag, false /* emit_error */);\n+\t\t\t\t\t commit_flag, false /* emit_error */,\n+\t\t\t\t\t infer_flag, commits, infers);\n \t\tif (res->get_kind () == TyTy::TypeKind::ERROR)\n \t\t  {\n \t\t    return new TyTy::ErrorType (0);\n@@ -497,7 +528,8 @@ UnifyRules::expect_reference (TyTy::ReferenceType *ltype, TyTy::BaseType *rtype)\n \tTyTy::BaseType *base_resolved\n \t  = UnifyRules::Resolve (TyTy::TyWithLocation (base_type),\n \t\t\t\t TyTy::TyWithLocation (other_base_type), locus,\n-\t\t\t\t commit_flag, false /* emit_error */);\n+\t\t\t\t commit_flag, false /* emit_error */,\n+\t\t\t\t infer_flag, commits, infers);\n \tif (base_resolved->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    return new TyTy::ErrorType (0);\n@@ -566,7 +598,8 @@ UnifyRules::expect_pointer (TyTy::PointerType *ltype, TyTy::BaseType *rtype)\n \tTyTy::BaseType *base_resolved\n \t  = UnifyRules::Resolve (TyTy::TyWithLocation (base_type),\n \t\t\t\t TyTy::TyWithLocation (other_base_type), locus,\n-\t\t\t\t commit_flag, false /* emit_error */);\n+\t\t\t\t commit_flag, false /* emit_error */,\n+\t\t\t\t infer_flag, commits, infers);\n \tif (base_resolved->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    return new TyTy::ErrorType (0);\n@@ -693,7 +726,7 @@ UnifyRules::expect_array (TyTy::ArrayType *ltype, TyTy::BaseType *rtype)\n \tTyTy::BaseType *element_unify = UnifyRules::Resolve (\n \t  TyTy::TyWithLocation (ltype->get_element_type ()),\n \t  TyTy::TyWithLocation (type.get_element_type ()), locus, commit_flag,\n-\t  false /* emit_error*/);\n+\t  false /* emit_error*/, infer_flag, commits, infers);\n \n \tif (element_unify->get_kind () != TyTy::TypeKind::ERROR)\n \t  {\n@@ -752,7 +785,7 @@ UnifyRules::expect_slice (TyTy::SliceType *ltype, TyTy::BaseType *rtype)\n \tTyTy::BaseType *element_unify = UnifyRules::Resolve (\n \t  TyTy::TyWithLocation (ltype->get_element_type ()),\n \t  TyTy::TyWithLocation (type.get_element_type ()), locus, commit_flag,\n-\t  false /* emit_error*/);\n+\t  false /* emit_error*/, infer_flag, commits, infers);\n \n \tif (element_unify->get_kind () != TyTy::TypeKind::ERROR)\n \t  {\n@@ -820,18 +853,18 @@ UnifyRules::expect_fndef (TyTy::FnType *ltype, TyTy::BaseType *rtype)\n \t    auto unified_param\n \t      = UnifyRules::Resolve (TyTy::TyWithLocation (a),\n \t\t\t\t     TyTy::TyWithLocation (b), locus,\n-\t\t\t\t     commit_flag, false /* emit_errors */);\n+\t\t\t\t     commit_flag, false /* emit_errors */,\n+\t\t\t\t     infer_flag, commits, infers);\n \t    if (unified_param->get_kind () == TyTy::TypeKind::ERROR)\n \t      {\n \t\treturn new TyTy::ErrorType (0);\n \t      }\n \t  }\n \n-\tauto unified_return\n-\t  = UnifyRules::Resolve (TyTy::TyWithLocation (\n-\t\t\t\t   ltype->get_return_type ()),\n-\t\t\t\t TyTy::TyWithLocation (type.get_return_type ()),\n-\t\t\t\t locus, commit_flag, false /* emit_errors */);\n+\tauto unified_return = UnifyRules::Resolve (\n+\t  TyTy::TyWithLocation (ltype->get_return_type ()),\n+\t  TyTy::TyWithLocation (type.get_return_type ()), locus, commit_flag,\n+\t  false /* emit_errors */, infer_flag, commits, infers);\n \tif (unified_return->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    return new TyTy::ErrorType (0);\n@@ -897,18 +930,18 @@ UnifyRules::expect_fnptr (TyTy::FnPtr *ltype, TyTy::BaseType *rtype)\n \t    auto unified_param\n \t      = UnifyRules::Resolve (TyTy::TyWithLocation (a),\n \t\t\t\t     TyTy::TyWithLocation (b), locus,\n-\t\t\t\t     commit_flag, false /* emit_errors */);\n+\t\t\t\t     commit_flag, false /* emit_errors */,\n+\t\t\t\t     infer_flag, commits, infers);\n \t    if (unified_param->get_kind () == TyTy::TypeKind::ERROR)\n \t      {\n \t\treturn new TyTy::ErrorType (0);\n \t      }\n \t  }\n \n-\tauto unified_return\n-\t  = UnifyRules::Resolve (TyTy::TyWithLocation (\n-\t\t\t\t   ltype->get_return_type ()),\n-\t\t\t\t TyTy::TyWithLocation (type.get_return_type ()),\n-\t\t\t\t locus, commit_flag, false /* emit_errors */);\n+\tauto unified_return = UnifyRules::Resolve (\n+\t  TyTy::TyWithLocation (ltype->get_return_type ()),\n+\t  TyTy::TyWithLocation (type.get_return_type ()), locus, commit_flag,\n+\t  false /* emit_errors */, infer_flag, commits, infers);\n \tif (unified_return->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    return new TyTy::ErrorType (0);\n@@ -926,7 +959,8 @@ UnifyRules::expect_fnptr (TyTy::FnPtr *ltype, TyTy::BaseType *rtype)\n \tauto unified_result\n \t  = UnifyRules::Resolve (TyTy::TyWithLocation (this_ret_type),\n \t\t\t\t TyTy::TyWithLocation (other_ret_type), locus,\n-\t\t\t\t commit_flag, false /*emit_errors*/);\n+\t\t\t\t commit_flag, false /*emit_errors*/, infer_flag,\n+\t\t\t\t commits, infers);\n \tif (unified_result->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    return new TyTy::ErrorType (0);\n@@ -945,7 +979,8 @@ UnifyRules::expect_fnptr (TyTy::FnPtr *ltype, TyTy::BaseType *rtype)\n \t    auto unified_param\n \t      = UnifyRules::Resolve (TyTy::TyWithLocation (this_param),\n \t\t\t\t     TyTy::TyWithLocation (other_param), locus,\n-\t\t\t\t     commit_flag, false /* emit_errors */);\n+\t\t\t\t     commit_flag, false /* emit_errors */,\n+\t\t\t\t     infer_flag, commits, infers);\n \t    if (unified_param->get_kind () == TyTy::TypeKind::ERROR)\n \t      {\n \t\treturn new TyTy::ErrorType (0);\n@@ -1012,7 +1047,8 @@ UnifyRules::expect_tuple (TyTy::TupleType *ltype, TyTy::BaseType *rtype)\n \t    TyTy::BaseType *unified_ty\n \t      = UnifyRules::Resolve (TyTy::TyWithLocation (bo),\n \t\t\t\t     TyTy::TyWithLocation (fo), locus,\n-\t\t\t\t     commit_flag, false /* emit_errors */);\n+\t\t\t\t     commit_flag, false /* emit_errors */,\n+\t\t\t\t     infer_flag, commits, infers);\n \t    if (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n \t      return new TyTy::ErrorType (0);\n \n@@ -1604,11 +1640,10 @@ UnifyRules::expect_closure (TyTy::ClosureType *ltype, TyTy::BaseType *rtype)\n \t    return new TyTy::ErrorType (0);\n \t  }\n \n-\tTyTy::BaseType *args_res\n-\t  = UnifyRules::Resolve (TyTy::TyWithLocation (\n-\t\t\t\t   &ltype->get_parameters ()),\n-\t\t\t\t TyTy::TyWithLocation (&type.get_parameters ()),\n-\t\t\t\t locus, commit_flag, false /* emit_error */);\n+\tTyTy::BaseType *args_res = UnifyRules::Resolve (\n+\t  TyTy::TyWithLocation (&ltype->get_parameters ()),\n+\t  TyTy::TyWithLocation (&type.get_parameters ()), locus, commit_flag,\n+\t  false /* emit_error */, infer_flag, commits, infers);\n \tif (args_res->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    return new TyTy::ErrorType (0);\n@@ -1617,7 +1652,7 @@ UnifyRules::expect_closure (TyTy::ClosureType *ltype, TyTy::BaseType *rtype)\n \tTyTy::BaseType *res = UnifyRules::Resolve (\n \t  TyTy::TyWithLocation (&ltype->get_result_type ()),\n \t  TyTy::TyWithLocation (&type.get_result_type ()), locus, commit_flag,\n-\t  false /* emit_error */);\n+\t  false /* emit_error */, infer_flag, commits, infers);\n \tif (res == nullptr || res->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    return new TyTy::ErrorType (0);"}, {"sha": "53acf21c7d4c56e4abe6a7b4232aecf97d554a6f", "filename": "gcc/rust/typecheck/rust-unify.h", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-unify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Frust%2Ftypecheck%2Frust-unify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.h?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -28,9 +28,25 @@ namespace Resolver {\n class UnifyRules\n {\n public:\n+  struct InferenceSite\n+  {\n+    HirId pref;\n+    HirId ptyref;\n+    TyTy::ParamType *param;\n+    TyTy::InferType *infer;\n+  };\n+  struct CommitSite\n+  {\n+    TyTy::BaseType *lhs;\n+    TyTy::BaseType *rhs;\n+    TyTy::BaseType *resolved;\n+  };\n+\n   static TyTy::BaseType *Resolve (TyTy::TyWithLocation lhs,\n \t\t\t\t  TyTy::TyWithLocation rhs, Location locus,\n-\t\t\t\t  bool commit_flag, bool emit_error);\n+\t\t\t\t  bool commit_flag, bool emit_error, bool infer,\n+\t\t\t\t  std::vector<CommitSite> &commits,\n+\t\t\t\t  std::vector<InferenceSite> &infers);\n \n   static void commit (TyTy::BaseType *base, TyTy::BaseType *other,\n \t\t      TyTy::BaseType *resolved);\n@@ -69,7 +85,9 @@ class UnifyRules\n \n private:\n   UnifyRules (TyTy::TyWithLocation lhs, TyTy::TyWithLocation rhs,\n-\t      Location locus, bool commit_flag, bool emit_error);\n+\t      Location locus, bool commit_flag, bool emit_error, bool infer,\n+\t      std::vector<CommitSite> &commits,\n+\t      std::vector<InferenceSite> &infers);\n \n   void emit_type_mismatch () const;\n \n@@ -83,6 +101,9 @@ class UnifyRules\n   Location locus;\n   bool commit_flag;\n   bool emit_error;\n+  bool infer_flag;\n+  std::vector<CommitSite> &commits;\n+  std::vector<InferenceSite> &infers;\n \n   Analysis::Mappings &mappings;\n   TypeCheckContext &context;"}, {"sha": "ab30ccc7da43f4fb4ff196bf4def0682a5834a73", "filename": "gcc/testsuite/rust/compile/issue-1930.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1930.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b43f026aac8f0b9a918082551abca6bfa4d9912/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1930.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1930.rs?ref=4b43f026aac8f0b9a918082551abca6bfa4d9912", "patch": "@@ -0,0 +1,4 @@\n+// { dg-options \"-w\" }\n+fn test<T>(x: *mut T) {\n+    let x = x as *mut u8;\n+}"}]}