{"sha": "990a9693d45092c49544b9a05e5887d59f1ab921", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwYTk2OTNkNDUwOTJjNDk1NDRiOWEwNWU1ODg3ZDU5ZjFhYjkyMQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-09-07T08:42:34Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-09-07T08:42:34Z"}, "message": "* ir.texi: Document type nodes.\n\nFrom-SVN: r36231", "tree": {"sha": "151f28962d4420e64119e5c6c59e0afac5a5e412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/151f28962d4420e64119e5c6c59e0afac5a5e412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990a9693d45092c49544b9a05e5887d59f1ab921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990a9693d45092c49544b9a05e5887d59f1ab921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990a9693d45092c49544b9a05e5887d59f1ab921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990a9693d45092c49544b9a05e5887d59f1ab921/comments", "author": null, "committer": null, "parents": [{"sha": "a7508e68860a40432d44f072bb09301f13d66ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7508e68860a40432d44f072bb09301f13d66ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7508e68860a40432d44f072bb09301f13d66ed0"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "537e57ad04891709b2e0bd987b313ecaac43bf26", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990a9693d45092c49544b9a05e5887d59f1ab921/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990a9693d45092c49544b9a05e5887d59f1ab921/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=990a9693d45092c49544b9a05e5887d59f1ab921", "patch": "@@ -1,3 +1,7 @@\n+2000-09-07  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* ir.texi: Document type nodes.\n+\n 2000-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (init_cp_semantics): Declare."}, {"sha": "8bd170a1bf1281cf95c4f17c4b69a9709f7b4641", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990a9693d45092c49544b9a05e5887d59f1ab921/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990a9693d45092c49544b9a05e5887d59f1ab921/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=990a9693d45092c49544b9a05e5887d59f1ab921", "patch": "@@ -319,18 +319,29 @@ The elements are indexed from zero.\n @tindex ARRAY_TYPE\n @tindex RECORD_TYPE\n @tindex UNION_TYPE\n+@tindex UNKNOWN_TYPE\n+@tindex OFFSET_TYPE\n+@tindex TYPENAME_TYPE\n+@tindex TYPEOF_TYPE\n @findex CP_TYPE_QUALS\n @findex TYPE_UNQUALIFIED\n @findex TYPE_QUAL_CONST\n @findex TYPE_QUAL_VOLATILE\n @findex TYPE_QUAL_RESTRICT\n+@findex TYPE_MAIN_VARIANT\n @cindex qualified type\n @findex TYPE_SIZE\n @findex TYPE_ALIGN\n @findex TYPE_PRECISION\n @findex TYPE_ARG_TYPES\n @findex TYPE_METHOD_BASETYPE\n @findex TYPE_PTRMEM_P\n+@findex TYPE_OFFSET_BASETYPE\n+@findex TREE_TYPE\n+@findex TYPE_CONTEXT\n+@findex TYPE_NAME\n+@findex TYPENAME_TYPE_FULLNAME\n+@findex TYPE_FIELDS\n \n All C++ types have corresponding tree nodes.  However, you should not\n assume that there is exactly one tree node corresponding to each C++\n@@ -518,6 +529,32 @@ pointed to by the pointer-to-member function.  If\n @code{TYPE_PTRMEMFUNC_P} does not hold, this type is a class type.  For\n more information, see @pxref{Classes}.\n \n+@item UNKNOWN_TYPE\n+This node is used to represent a type the knowledge of which is\n+unsufficiant for a sound processing.\n+\n+@item OFFSET_TYPE\n+This node is used to represent a data member; for example a\n+pointer-to-data-member is represented by a @code{POINTER_TYPE} whose\n+@code{TREE_TYPE} is an @code{OFFSET_TYPE}.  For a data member @code{X::m}\n+the @code{TYPE_OFFSET_BASETYPE} is @code{X} and the @code{TREE_TYPE} is\n+the type of @code{m}.\n+\n+@item TYPENAME_TYPE\n+Used to represent a construct of the form @code{typename T::A}.  The\n+@code{TYPE_CONTEXT} is @code{T}; the @code{TYPE_NAME} is an\n+@code{IDENTIFIER_NODE} for @code{A}. If the type is specified via a\n+template-id, then @code{TYPENAME_TYPE_FULLNAME} yields a\n+@code{TEMPLATE_ID_EXPR}.  The @code{TREE_TYPE} is non-@code{NULL} if the\n+node is implicitly generated in support for the implicit typename\n+extension; in which case the @code{TREE_TYPE} is a type node for the\n+base-class.\n+\n+@item TYPEOF_TYPE\n+Used to represent the @code{__typeof__} extension.  The\n+@code{TYPE_FIELDS} is the expression the type of which is being\n+represented. \n+\n @item UNION_TYPE\n Used to represent @code{union} types.  For more information, @pxref{Classes}.\n @end table"}]}