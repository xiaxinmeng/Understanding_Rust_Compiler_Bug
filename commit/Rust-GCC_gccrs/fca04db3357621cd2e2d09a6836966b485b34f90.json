{"sha": "fca04db3357621cd2e2d09a6836966b485b34f90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhMDRkYjMzNTc2MjFjZDJlMmQwOWE2ODM2OTY2YjQ4NWIzNGY5MA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-11-26T10:30:12Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-11-26T10:30:12Z"}, "message": "re PR fortran/54881 ([OOP] ICE in fold_convert_loc, at fold-const.c:2016)\n\n2012-11-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/54881\n\t* match.c (select_derived_set_tmp,select_class_set_tmp): Removed and\n\tunified into ...\n\t(select_type_set_tmp): ... this one. Set POINTER argument according to\n\tselector.\n\t* trans-intrinsic.c (gfc_conv_associated): Use 'gfc_class_data_get'\n\tinstead of 'gfc_add_data_component'.\n\n2012-11-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/54881\n\t* gfortran.dg/associated_6.f90: New.\n\t* gfortran.dg/select_type_30.f03: New.\n\nFrom-SVN: r193809", "tree": {"sha": "c3fa52f3edc064336f829a705cf3c03187698ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3fa52f3edc064336f829a705cf3c03187698ac2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca04db3357621cd2e2d09a6836966b485b34f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca04db3357621cd2e2d09a6836966b485b34f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca04db3357621cd2e2d09a6836966b485b34f90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca04db3357621cd2e2d09a6836966b485b34f90/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "412dc8423772fb83da7c616900db8a66b84e1f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412dc8423772fb83da7c616900db8a66b84e1f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412dc8423772fb83da7c616900db8a66b84e1f2b"}], "stats": {"total": 187, "additions": 108, "deletions": 79}, "files": [{"sha": "1223dcb49c18c7b45d36f2e51f8b10e770d94911", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fca04db3357621cd2e2d09a6836966b485b34f90", "patch": "@@ -1,3 +1,13 @@\n+2012-11-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54881\n+\t* match.c (select_derived_set_tmp,select_class_set_tmp): Removed and\n+\tunified into ...\n+\t(select_type_set_tmp): ... this one. Set POINTER argument according to\n+\tselector.\n+\t* trans-intrinsic.c (gfc_conv_associated): Use 'gfc_class_data_get'\n+\tinstead of 'gfc_add_data_component'.\n+\n 2012-11-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/30146"}, {"sha": "39da62faedf52993a2233aafe015ffa8d79a8721", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 29, "deletions": 76, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=fca04db3357621cd2e2d09a6836966b485b34f90", "patch": "@@ -5207,103 +5207,56 @@ select_type_push (gfc_symbol *sel)\n }\n \n \n-/* Set the temporary for the current derived type SELECT TYPE selector.  */\n+/* Set up a temporary for the current TYPE IS / CLASS IS branch .  */\n \n-static gfc_symtree *\n-select_derived_set_tmp (gfc_typespec *ts)\n+static void\n+select_type_set_tmp (gfc_typespec *ts)\n {\n   char name[GFC_MAX_SYMBOL_LEN];\n   gfc_symtree *tmp;\n-  \n-  sprintf (name, \"__tmp_type_%s\", ts->u.derived->name);\n-  gfc_get_sym_tree (name, gfc_current_ns, &tmp, false);\n-  gfc_add_type (tmp->n.sym, ts, NULL);\n \n-  /* Copy across the array spec to the selector.  */\n-  if (select_type_stack->selector->ts.type == BT_CLASS\n-      && select_type_stack->selector->attr.class_ok\n-      && (CLASS_DATA (select_type_stack->selector)->attr.dimension\n-\t  || CLASS_DATA (select_type_stack->selector)->attr.codimension))\n+  if (!ts)\n     {\n-      tmp->n.sym->attr.dimension\n-\t\t= CLASS_DATA (select_type_stack->selector)->attr.dimension;\n-      tmp->n.sym->attr.codimension\n-\t\t= CLASS_DATA (select_type_stack->selector)->attr.codimension;\n-      tmp->n.sym->as\n-\t= gfc_copy_array_spec (CLASS_DATA (select_type_stack->selector)->as);\n+      select_type_stack->tmp = NULL;\n+      return;\n     }\n-\n-  gfc_set_sym_referenced (tmp->n.sym);\n-  gfc_add_flavor (&tmp->n.sym->attr, FL_VARIABLE, name, NULL);\n-  tmp->n.sym->attr.select_type_temporary = 1;\n-\n-  return tmp;\n-}\n-\n-\n-/* Set the temporary for the current class SELECT TYPE selector.  */\n-\n-static gfc_symtree *\n-select_class_set_tmp (gfc_typespec *ts)\n-{\n-  char name[GFC_MAX_SYMBOL_LEN];\n-  gfc_symtree *tmp;\n   \n-  if (select_type_stack->selector->ts.type == BT_CLASS\n-      && !select_type_stack->selector->attr.class_ok)\n-    return NULL;\n+  if (!gfc_type_is_extensible (ts->u.derived))\n+    return;\n \n-  sprintf (name, \"__tmp_class_%s\", ts->u.derived->name);\n+  if (ts->type == BT_CLASS)\n+    sprintf (name, \"__tmp_class_%s\", ts->u.derived->name);\n+  else\n+    sprintf (name, \"__tmp_type_%s\", ts->u.derived->name);\n   gfc_get_sym_tree (name, gfc_current_ns, &tmp, false);\n   gfc_add_type (tmp->n.sym, ts, NULL);\n \n-/* Copy across the array spec to the selector.  */\n   if (select_type_stack->selector->ts.type == BT_CLASS\n-      && (CLASS_DATA (select_type_stack->selector)->attr.dimension\n-\t  || CLASS_DATA (select_type_stack->selector)->attr.codimension))\n+      && select_type_stack->selector->attr.class_ok)\n     {\n-      tmp->n.sym->attr.pointer = 1;\n-      tmp->n.sym->attr.dimension\n-\t\t= CLASS_DATA (select_type_stack->selector)->attr.dimension;\n-      tmp->n.sym->attr.codimension\n-\t\t= CLASS_DATA (select_type_stack->selector)->attr.codimension;\n-      tmp->n.sym->as\n-\t= gfc_copy_array_spec (CLASS_DATA (select_type_stack->selector)->as);\n+      tmp->n.sym->attr.pointer\n+\t\t= CLASS_DATA (select_type_stack->selector)->attr.class_pointer;\n+\n+      /* Copy across the array spec to the selector.  */\n+      if ((CLASS_DATA (select_type_stack->selector)->attr.dimension\n+\t  || CLASS_DATA (select_type_stack->selector)->attr.codimension))\n+\t{\n+\t  tmp->n.sym->attr.dimension\n+\t\t    = CLASS_DATA (select_type_stack->selector)->attr.dimension;\n+\t  tmp->n.sym->attr.codimension\n+\t\t    = CLASS_DATA (select_type_stack->selector)->attr.codimension;\n+\t  tmp->n.sym->as\n+\t    = gfc_copy_array_spec (CLASS_DATA (select_type_stack->selector)->as);\n+\t}\n     }\n \n   gfc_set_sym_referenced (tmp->n.sym);\n   gfc_add_flavor (&tmp->n.sym->attr, FL_VARIABLE, name, NULL);\n   tmp->n.sym->attr.select_type_temporary = 1;\n-  gfc_build_class_symbol (&tmp->n.sym->ts, &tmp->n.sym->attr,\n-\t\t\t  &tmp->n.sym->as, false);\n-\n-  return tmp;\n-}\n-\n-\n-static void\n-select_type_set_tmp (gfc_typespec *ts)\n-{\n-  gfc_symtree *tmp;\n \n-  if (!ts)\n-    {\n-      select_type_stack->tmp = NULL;\n-      return;\n-    }\n-  \n-  if (!gfc_type_is_extensible (ts->u.derived))\n-    return;\n-\n-  /* Logic is a LOT clearer with separate functions for class and derived\n-     type temporaries! There are not many more lines of code either.  */\n   if (ts->type == BT_CLASS)\n-    tmp = select_class_set_tmp (ts);\n-  else\n-    tmp = select_derived_set_tmp (ts);\n-\n-  if (tmp == NULL)\n-    return;\n+    gfc_build_class_symbol (&tmp->n.sym->ts, &tmp->n.sym->attr,\n+\t\t\t    &tmp->n.sym->as, false);\n \n   /* Add an association for it, so the rest of the parser knows it is\n      an associate-name.  The target will be set during resolution.  */"}, {"sha": "e9eb307262f76babb57504076e6609b82cdf368f", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=fca04db3357621cd2e2d09a6836966b485b34f90", "patch": "@@ -5777,8 +5777,6 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   gfc_init_se (&arg1se, NULL);\n   gfc_init_se (&arg2se, NULL);\n   arg1 = expr->value.function.actual;\n-  if (arg1->expr->ts.type == BT_CLASS)\n-    gfc_add_data_component (arg1->expr);\n   arg2 = arg1->next;\n \n   /* Check whether the expression is a scalar or not; we cannot use\n@@ -5800,7 +5798,10 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t      && arg1->expr->symtree->n.sym->attr.dummy)\n \t    arg1se.expr = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t\t       arg1se.expr);\n-\t  tmp2 = arg1se.expr;\n+\t  if (arg1->expr->ts.type == BT_CLASS)\n+\t      tmp2 = gfc_class_data_get (arg1se.expr);\n+\t  else\n+\t    tmp2 = arg1se.expr;\n         }\n       else\n         {\n@@ -5835,6 +5836,8 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t      && arg1->expr->symtree->n.sym->attr.dummy)\n \t    arg1se.expr = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t\t       arg1se.expr);\n+\t  if (arg1->expr->ts.type == BT_CLASS)\n+\t    arg1se.expr = gfc_class_data_get (arg1se.expr);\n \n \t  arg2se.want_pointer = 1;\n \t  gfc_conv_expr (&arg2se, arg2->expr);"}, {"sha": "f59ff2927d48f0b893941ccfc2a8ff6def57000a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fca04db3357621cd2e2d09a6836966b485b34f90", "patch": "@@ -1,3 +1,9 @@\n+2012-11-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/54881\n+\t* gfortran.dg/associated_6.f90: New.\n+\t* gfortran.dg/select_type_30.f03: New.\n+\n 2012-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/54471"}, {"sha": "b31c5bb9159f050540042f14b1ff3140aca47cc2", "filename": "gcc/testsuite/gfortran.dg/associated_6.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_6.f90?ref=fca04db3357621cd2e2d09a6836966b485b34f90", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\r\n+!\r\n+! PR 54881: [4.8 Regression] [OOP] ICE in fold_convert_loc, at fold-const.c:2016\r\n+!\r\n+! Contributed by Richard L Lozes <richard@lozestech.com>\r\n+\r\n+  implicit none\r\n+\r\n+  type treeNode\r\n+    type(treeNode), pointer :: right => null()\r\n+  end type\r\n+\r\n+  type(treeNode) :: n\r\n+\r\n+  if (associated(RightOf(n))) call abort()\r\n+  allocate(n%right)\r\n+  if (.not.associated(RightOf(n))) call abort()\r\n+  deallocate(n%right)\r\n+  \r\n+contains\r\n+\r\n+  function RightOf (theNode)\r\n+    class(treeNode), pointer :: RightOf\r\n+    type(treeNode), intent(in) :: theNode\r\n+    RightOf => theNode%right\r\n+  end function\r\n+  \r\n+end\r"}, {"sha": "f467b8342928986c3be8c684868a164f5e4b0c44", "filename": "gcc/testsuite/gfortran.dg/select_type_30.f03", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_30.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca04db3357621cd2e2d09a6836966b485b34f90/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_30.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_30.f03?ref=fca04db3357621cd2e2d09a6836966b485b34f90", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\r\n+!\r\n+! PR 54881: [4.8 Regression] [OOP] ICE in fold_convert_loc, at fold-const.c:2016\r\n+!\r\n+! Contributed by Richard L Lozes <richard@lozestech.com>\r\n+\r\n+  implicit none\r\n+\r\n+  type treeNode\r\n+  end type\r\n+\r\n+  class(treeNode), pointer :: theNode\r\n+  logical :: lstatus\r\n+  \r\n+  select type( theNode )\r\n+  type is (treeNode)\r\n+    call DestroyNode (theNode, lstatus )\r\n+  class is (treeNode)\r\n+    call DestroyNode (theNode, lstatus )\r\n+  end select\r\n+  \r\n+contains\r\n+\r\n+  subroutine DestroyNode( theNode, lstatus )\r\n+    type(treeNode), pointer :: theNode\r\n+    logical, intent(out) :: lstatus\r\n+  end subroutine\r\n+  \r\n+end \r"}]}