{"sha": "da86c5af207cb04869108aa79b2d0117752e291a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4NmM1YWYyMDdjYjA0ODY5MTA4YWE3OWIyZDAxMTc3NTJlMjkxYQ==", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2019-12-17T01:50:35Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-12-17T01:50:35Z"}, "message": "Add abs pattern to handle {si,di} mode abs to avoid pmax/cmove conversion.\n\n2019-12-17  Hongyu Wang  <hongyu.wang@intel.com>\n\ngcc/\n\tPR target/92651\n\t* config/i386/i386.h (TARGET_EXPAND_ABS): New macro.\n\t* config/i386/x86-tune.def (X86_TUNE_EXPAND_ABS): New.\n\t* config/i386/i386.md (abs<SWI48x>2): New define_expand.\n\ngcc/testsuite\n\t* gcc.target/i386/pr92651.c: New testcase.\n\nFrom-SVN: r279452", "tree": {"sha": "3f900a6d3da0a393f0158d04091da841c165eaa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f900a6d3da0a393f0158d04091da841c165eaa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da86c5af207cb04869108aa79b2d0117752e291a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da86c5af207cb04869108aa79b2d0117752e291a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da86c5af207cb04869108aa79b2d0117752e291a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da86c5af207cb04869108aa79b2d0117752e291a/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62dd2904f05ee752bbeff43a196b90ecd7b94616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62dd2904f05ee752bbeff43a196b90ecd7b94616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62dd2904f05ee752bbeff43a196b90ecd7b94616"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "bd1a252b9021ac190e03c2d7f9d463c4a10c9056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da86c5af207cb04869108aa79b2d0117752e291a", "patch": "@@ -1,3 +1,10 @@\n+2019-12-17  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/92651\n+\t* config/i386/i386.h (TARGET_EXPAND_ABS): New macro.\n+\t* config/i386/x86-tune.def (X86_TUNE_EXPAND_ABS): New.\n+\t* config/i386/i386.md (abs<SWI48x>2): New define_expand.\n+\n 2019-12-17  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/92807"}, {"sha": "65f6c76f846de9870b9599d87945ad6125504487", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=da86c5af207cb04869108aa79b2d0117752e291a", "patch": "@@ -596,6 +596,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_USE_XCHG_FOR_ATOMIC_STORE]\n #define TARGET_EMIT_VZEROUPPER \\\n \tix86_tune_features[X86_TUNE_EMIT_VZEROUPPER]\n+#define TARGET_EXPAND_ABS \\\n+\tix86_tune_features[X86_TUNE_EXPAND_ABS]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {"}, {"sha": "cf4a0ccb0aaba635e4e61fbce3108c6e7825018c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=da86c5af207cb04869108aa79b2d0117752e291a", "patch": "@@ -9669,6 +9669,45 @@\n   \"#\"\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n+;; Special expand pattern to handle integer mode abs\n+\n+(define_expand \"abs<mode>2\"\n+  [(set (match_operand:SWI48x 0 \"register_operand\")\n+    (abs:SWI48x\n+      (match_operand:SWI48x 1 \"register_operand\")))]\n+  \"TARGET_EXPAND_ABS\"\n+  {\n+    machine_mode mode = <MODE>mode;\n+\n+    /* Generate rtx abs using abs (x) = (((signed) x >> (W-1)) ^ x) -\n+       ((signed) x >> (W-1)) */\n+    rtx shift_amount = gen_int_shift_amount (mode,\n+\t\t\t\t       GET_MODE_PRECISION (mode)\n+\t\t\t\t       - 1);\n+    shift_amount = convert_modes (E_QImode, GET_MODE (shift_amount),\n+\t\t\t    shift_amount, 1);\n+    rtx shift_dst = gen_reg_rtx (mode);\n+    rtx shift_op = gen_rtx_SET (shift_dst,\n+\t\t\t  gen_rtx_fmt_ee (ASHIFTRT, mode,\n+\t\t\t\t\t  operands[1], shift_amount));\n+    rtx clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode,\n+\t\t\t\t\t\t    FLAGS_REG));\n+    emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, shift_op,\n+\t\t\t\t\t\tclobber)));\n+\n+    rtx xor_op = gen_rtx_SET (operands[0],\n+\t\t\tgen_rtx_fmt_ee (XOR, mode, shift_dst,\n+\t\t\t\t\toperands[1]));\n+    emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, xor_op, clobber)));\n+\n+    rtx minus_op = gen_rtx_SET (operands[0],\n+\t\t\t  gen_rtx_fmt_ee (MINUS, mode,\n+\t\t\t\t\t  operands[0], shift_dst));\n+    emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, minus_op,\n+\t\t\t\t\t\tclobber)));\n+    DONE;\n+  })\n+\n (define_expand \"<code><mode>2\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\")\n \t(absneg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\")))]"}, {"sha": "58a81e5ea729e5578e604c7d77609a4f52b475d4", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=da86c5af207cb04869108aa79b2d0117752e291a", "patch": "@@ -317,6 +317,13 @@ DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n DEF_TUNE (X86_TUNE_USE_XCHG_FOR_ATOMIC_STORE, \"use_xchg_for_atomic_store\",\n \t m_CORE_ALL | m_BDVER | m_ZNVER | m_GENERIC)\n \n+/* X86_TUNE_EXPAND_ABS: This enables a new abs pattern by\n+   generating instructions for abs (x) = (((signed) x >> (W-1) ^ x) -\n+   (signed) x >> (W-1)) instead of cmove or SSE max/abs instructions.  */\n+DEF_TUNE (X86_TUNE_EXPAND_ABS, \"expand_abs\",\n+\t  m_CORE_ALL | m_SILVERMONT | m_KNL | m_KNM | m_GOLDMONT\n+\t  | m_GOLDMONT_PLUS | m_TREMONT )\n+\n /*****************************************************************************/\n /* 387 instruction selection tuning                                          */\n /*****************************************************************************/"}, {"sha": "5fff39ec7fe398b6823b6c8107535448a7921bc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da86c5af207cb04869108aa79b2d0117752e291a", "patch": "@@ -1,3 +1,7 @@\n+2019-12-17  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/pr92651.c: New testcase.\n+\n 2019-12-17  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/92807"}, {"sha": "3d0c3c7bf4e567b4c78af41fdefe2efbeb4847f4", "filename": "gcc/testsuite/gcc.target/i386/pr92651.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92651.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da86c5af207cb04869108aa79b2d0117752e291a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92651.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92651.c?ref=da86c5af207cb04869108aa79b2d0117752e291a", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=corei7\" } */\n+\n+#include <stdlib.h>\n+\n+int foo(unsigned char a, unsigned char b)\n+{\n+    int isum=abs(a - b);\n+    return isum;\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmov*\" } } */\n+/* { dg-final { scan-assembler \"(cltd|cdq|shr)\" } } */\n+/* { dg-final { scan-assembler-times \"xor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sub\" 2 } } */\n+"}]}