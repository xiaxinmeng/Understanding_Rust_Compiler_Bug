{"sha": "2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "node_id": "C_kwDOANBUbNoAKDJkYzVkNmIxZTdlYzg4MjJmNWJkNzg3NjE5NjJjYTJjODVkNGEyYjQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-12T07:13:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-12T07:54:53Z"}, "message": "tree-optimization/89317 - another pattern for &p->x != p + 4\n\nAs seen in the original testcase for PR89317 we are missing\ncomparison simplification patterns for &p->x != p + 4.  Fixed\nby making an existing one apply.  To make the pattern apply\nduring CCP we need to simplify ccp_fold to not use GENERIC\nfolding of conditions but also use GIMPLE folding.\n\n\tPR tree-optimization/89317\n\t* tree-ssa-ccp.cc (ccp_fold): Handle GIMPLE_COND via\n\tgimple_fold_stmt_to_constant_1.\n\t* match.pd (&a != &a + c): Apply to pointer_plus with non-ADDR_EXPR\n\tbase as well.\n\n\t* gcc.dg/tree-ssa/pr89317.c: Amend.", "tree": {"sha": "4813826210ce72d04237ce61df050b4300f418e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4813826210ce72d04237ce61df050b4300f418e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324e9953400999872a0a57524399d86e6414c149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324e9953400999872a0a57524399d86e6414c149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324e9953400999872a0a57524399d86e6414c149"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "3517605c04dc61be0c699933adee2f3a748bc915", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "patch": "@@ -2263,7 +2263,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* (&a + b) !=/== (&a[1] + c) -> (&a[0] - &a[1]) + b !=/== c */\n (for neeq (ne eq)\n  (simplify\n-  (neeq:c ADDR_EXPR@0 (pointer_plus ADDR_EXPR@2 @3))\n+  (neeq:c ADDR_EXPR@0 (pointer_plus @2 @3))\n    (with { poly_int64 diff; tree inner_type = TREE_TYPE (@3);}\n     (if (ptr_difference_const (@0, @2, &diff))\n      (neeq { build_int_cst_type (inner_type, diff); } @3))))"}, {"sha": "0c8f2f53a4555994eea1b09be1127c5e480f154d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr89317.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr89317.c?ref=2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "patch": "@@ -10,4 +10,21 @@ int foo (struct b *x)\n   return b - a;\n }\n \n+int bar (struct b *x)\n+{\n+  int *a = x->data;\n+  int *b = ((int*)x) + 4;\n+  if (a != b)\n+    return 1;\n+  return 0;\n+}\n+\n+int baz (struct b *x)\n+{\n+  int *a = x->data;\n+  int *b = ((int*)x) + 4;\n+  return (a != b);\n+}\n+\n /* { dg-final { scan-tree-dump \"return 4;\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"ccp1\" } } */"}, {"sha": "68e69bfe129b40756fd00448ca5af8e16998521b", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=2dc5d6b1e7ec8822f5bd78761962ca2c85d4a2b4", "patch": "@@ -1271,24 +1271,15 @@ valueize_op_1 (tree op)\n static tree\n ccp_fold (gimple *stmt)\n {\n-  location_t loc = gimple_location (stmt);\n   switch (gimple_code (stmt))\n     {\n-    case GIMPLE_COND:\n-      {\n-        /* Handle comparison operators that can appear in GIMPLE form.  */\n-        tree op0 = valueize_op (gimple_cond_lhs (stmt));\n-        tree op1 = valueize_op (gimple_cond_rhs (stmt));\n-        enum tree_code code = gimple_cond_code (stmt);\n-        return fold_binary_loc (loc, code, boolean_type_node, op0, op1);\n-      }\n-\n     case GIMPLE_SWITCH:\n       {\n \t/* Return the constant switch index.  */\n         return valueize_op (gimple_switch_index (as_a <gswitch *> (stmt)));\n       }\n \n+    case GIMPLE_COND:\n     case GIMPLE_ASSIGN:\n     case GIMPLE_CALL:\n       return gimple_fold_stmt_to_constant_1 (stmt,"}]}