{"sha": "aecc521b46ac451c0547d8693bfcfabfb3832401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjYzUyMWI0NmFjNDUxYzA1NDdkODY5M2JmY2ZhYmZiMzgzMjQwMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-11-23T16:44:16Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-11-23T16:44:16Z"}, "message": "PR middle-end/78461 - [7 Regression] ICE: in operator+=\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/78461\n\t* gcc.dg/tree-ssa/builtin-sprintf-4.c: New test.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-2.c: Adjust warning text.\n\ngcc/ChangeLog:\n\n\tPR middle-end/78461\n\t* gimple-ssa-sprintf.c (format_string): Correct the maxima and\n\tset the minimum number of bytes for an unknown string to zero.\n\nFrom-SVN: r242769", "tree": {"sha": "3634901e3c572047408b87979874512cb0988c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3634901e3c572047408b87979874512cb0988c4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aecc521b46ac451c0547d8693bfcfabfb3832401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecc521b46ac451c0547d8693bfcfabfb3832401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aecc521b46ac451c0547d8693bfcfabfb3832401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aecc521b46ac451c0547d8693bfcfabfb3832401/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b3314ddb15e6e4007035d1f6f823650c9dc70b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3314ddb15e6e4007035d1f6f823650c9dc70b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3314ddb15e6e4007035d1f6f823650c9dc70b8"}], "stats": {"total": 98, "additions": 88, "deletions": 10}, "files": [{"sha": "98678e2f30641837f577c746c6ebf8ceb1b22f68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aecc521b46ac451c0547d8693bfcfabfb3832401", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/78461\n+\t* gimple-ssa-sprintf.c (format_string): Correct the maxima and\n+\tset the minimum number of bytes for an unknown string to zero.\n+\n 2016-11-23  Martin Jambor  <mjambor@suse.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "ead8b0ed5a05085bc2d23ff0d3379fed26b0e397", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=aecc521b46ac451c0547d8693bfcfabfb3832401", "patch": "@@ -1533,18 +1533,15 @@ format_string (const conversion_spec &spec, tree arg)\n   fmtresult res;\n \n   /* The maximum number of bytes for an unknown wide character argument\n-     to a \"%lc\" directive adjusted for precision but not field width.  */\n+     to a \"%lc\" directive adjusted for precision but not field width.\n+     6 is the longest UTF-8 sequence for a single wide character.  */\n   const unsigned HOST_WIDE_INT max_bytes_for_unknown_wc\n-    = (1 == warn_format_length ? 0 <= prec ? prec : 0\n-       : 2 == warn_format_length ? 0 <= prec ? prec : 1\n-       : 0 <= prec ? prec : 6 /* Longest UTF-8 sequence.  */);\n+    = (0 <= prec ? prec : 1 < warn_format_length ? 6 : 1);\n \n   /* The maximum number of bytes for an unknown string argument to either\n      a \"%s\" or \"%ls\" directive adjusted for precision but not field width.  */\n   const unsigned HOST_WIDE_INT max_bytes_for_unknown_str\n-    = (1 == warn_format_length ? 0 <= prec ? prec : 0\n-       : 2 == warn_format_length ? 0 <= prec ? prec : 1\n-       : HOST_WIDE_INT_MAX);\n+    = (0 <= prec ? prec : 1 < warn_format_length);\n \n   /* The result is bounded unless overriddden for a non-constant string\n      of an unknown length.  */\n@@ -1648,7 +1645,7 @@ format_string (const conversion_spec &spec, tree arg)\n \t  if (0 <= prec)\n \t    {\n \t      if (slen.range.min >= target_int_max ())\n-\t\tslen.range.min = max_bytes_for_unknown_str;\n+\t\tslen.range.min = 0;\n \t      else if ((unsigned)prec < slen.range.min)\n \t\tslen.range.min = prec;\n "}, {"sha": "d5055da891c7ea36df672e9e2744ad0be0898428", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aecc521b46ac451c0547d8693bfcfabfb3832401", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/78461\n+\t* gcc.dg/tree-ssa/builtin-sprintf-4.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-2.c: Adjust warning text.\n+\n 2016-11-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71450"}, {"sha": "42448749fc7f0659f14bf464b06d2de259ca4401", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-4.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-4.c?ref=aecc521b46ac451c0547d8693bfcfabfb3832401", "patch": "@@ -0,0 +1,69 @@\n+/* PR middle-end/78461 - [7 Regression] ICE: in operator+=, at\n+   gimple-ssa-sprintf.c:214\n+   Disable warnings to exercise code paths through the pass that may\n+   not be exercised when the -Wformat-length option is in effect.  */\n+/* { dg-compile }\n+   { dg-options \"-O2 -fdump-tree-optimized -w\" } */\n+\n+\n+#define CAT(s, n)   s ## n\n+#define FAIL(line)  CAT (failure_on_line_, line)\n+\n+/* Emit a call to a function named failure_on_line_NNN when EXPR is false.  */\n+#define ASSERT(expr)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    extern void FAIL (__LINE__)(void);\t\t\\\n+    if (!(expr)) FAIL (__LINE__)();\t\t\\\n+  } while (0)\n+\n+#define KEEP(line)  CAT (keep_call_on_line_, line)\n+\n+/* Emit a call to a function named keep_call_on_line_NNN when EXPR is true.\n+   Used to verify that the expression need not be the only one that holds.  */\n+#define ASSERT_MAYBE(expr)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    extern void KEEP (__LINE__)(void);\t\t\\\n+    if (expr) KEEP (__LINE__)();\t\t\\\n+  } while (0)\n+\n+int f0 (const char *s)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%.*s%08x\", 1, s, 1);\n+\n+  ASSERT (7 < n && n < 10);\n+\n+  ASSERT_MAYBE (8 == n);\n+  ASSERT_MAYBE (9 == n);\n+\n+  return n;\n+}\n+\n+char buf[64];\n+\n+int f1 (const char *s)\n+{\n+  int n = __builtin_snprintf (buf, 64, \"%.*s%08x\", 1, s, 1);\n+\n+  ASSERT (7 < n && n < 10);\n+\n+  ASSERT_MAYBE (8 == n);\n+  ASSERT_MAYBE (9 == n);\n+\n+  return n;\n+}\n+\n+int f2 (const char *s)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%.*s\", 2, s);\n+\n+  ASSERT (0 <= n && n <= 2);\n+\n+  ASSERT_MAYBE (0 == n);\n+  ASSERT_MAYBE (1 == n);\n+  ASSERT_MAYBE (2 == n);\n+\n+  return n;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"failure_on_line\" \"optimized\"} }\n+   { dg-final { scan-tree-dump-times \"keep_call_on_line\" 7 \"optimized\"} } */"}, {"sha": "3b57c0e076e9b54f39e9e5fba9823233c62a2087", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aecc521b46ac451c0547d8693bfcfabfb3832401/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-2.c?ref=aecc521b46ac451c0547d8693bfcfabfb3832401", "patch": "@@ -93,10 +93,10 @@ void test_s_nonconst (const char *s, const wchar_t *ws, struct Arrays *a)\n   T (1, \"%s\",   s);             /* { dg-warning \"nul past the end\" \"sprintf transformed into strcpy\" { xfail *-*-* } } */\n   T (1, \"%1s\",  s);             /* { dg-warning \"nul past the end\" } */\n   T (1, \"%.0s\", s);\n-  T (1, \"%.1s\", s);             /* { dg-warning \"writing a terminating nul\" } */\n+  T (1, \"%.1s\", s);             /* { dg-warning \"may write a terminating nul\" } */\n \n   T (1, \"%.0ls\",  ws);\n-  T (1, \"%.1ls\",  ws);          /* { dg-warning \"writing a terminating nul\" } */\n+  T (1, \"%.1ls\",  ws);          /* { dg-warning \"may write a terminating nul\" } */\n   T (1, \"%ls\",    ws);          /* { dg-warning \"writing a terminating nul\" } */\n \n   /* Verify that the size of the array is used in lieu of its length."}]}