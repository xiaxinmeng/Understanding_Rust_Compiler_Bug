{"sha": "38a9e5a6c07d84274bc5d345b947d1c13351d590", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhhOWU1YTZjMDdkODQyNzRiYzVkMzQ1Yjk0N2QxYzEzMzUxZDU5MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-20T01:22:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-20T01:22:54Z"}, "message": "PR69321 fix any_cast<T>(any*) for non-copyable T\n\n\tPR libstdc++/69321\n\t* include/experimental/any (__any_caster): Avoid instantiating\n\tmanager function for types that can't be stored in any.\n\t* include/std/any (__any_caster): Likewise.\n\t* testsuite/20_util/any/misc/any_cast.cc: Test non-copyable type.\n\t* testsuite/experimental/any/misc/any_cast.cc: Likewise.\n\nFrom-SVN: r244678", "tree": {"sha": "3d61b326d740e796dfbb370ca1db3de644acf9f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d61b326d740e796dfbb370ca1db3de644acf9f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38a9e5a6c07d84274bc5d345b947d1c13351d590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a9e5a6c07d84274bc5d345b947d1c13351d590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a9e5a6c07d84274bc5d345b947d1c13351d590", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a9e5a6c07d84274bc5d345b947d1c13351d590/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01334be4a08330081eb74181faec5fbb4c30bcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01334be4a08330081eb74181faec5fbb4c30bcda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01334be4a08330081eb74181faec5fbb4c30bcda"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "b4be6e59890eac7d645c1497c686806625ef8b70", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38a9e5a6c07d84274bc5d345b947d1c13351d590", "patch": "@@ -1,5 +1,12 @@\n 2017-01-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/69321\n+\t* include/experimental/any (__any_caster): Avoid instantiating\n+\tmanager function for types that can't be stored in any.\n+\t* include/std/any (__any_caster): Likewise.\n+\t* testsuite/20_util/any/misc/any_cast.cc: Test non-copyable type.\n+\t* testsuite/experimental/any/misc/any_cast.cc: Likewise.\n+\n \tPR libstdc++/64903\n \t* include/bits/stl_algo.h (is_partitioned): Use increment instead of\n \tstd::advance."}, {"sha": "36c0680c25a6fb73eb8f823e17c5345c7b098df1", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=38a9e5a6c07d84274bc5d345b947d1c13351d590", "patch": "@@ -415,7 +415,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     void* __any_caster(const any* __any)\n     {\n-      if (__any->_M_manager != &any::_Manager<decay_t<_Tp>>::_S_manage)\n+      struct _None { };\n+      using _Up = decay_t<_Tp>;\n+      using _Vp = conditional_t<is_copy_constructible<_Up>::value, _Up, _None>;\n+      if (__any->_M_manager != &any::_Manager<_Vp>::_S_manage)\n \treturn nullptr;\n       any::_Arg __arg;\n       __any->_M_manager(any::_Op_access, __any, &__arg);"}, {"sha": "e807617bdbb8bd590c424b245e687e21fc160ad1", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=38a9e5a6c07d84274bc5d345b947d1c13351d590", "patch": "@@ -511,11 +511,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     void* __any_caster(const any* __any)\n     {\n-      if (__any->_M_manager != &any::_Manager<decay_t<_Tp>>::_S_manage)\n-\treturn nullptr;\n-      any::_Arg __arg;\n-      __any->_M_manager(any::_Op_access, __any, &__arg);\n-      return __arg._M_obj;\n+      if constexpr (is_copy_constructible_v<decay_t<_Tp>>)\n+\t{\n+\t  if (__any->_M_manager == &any::_Manager<decay_t<_Tp>>::_S_manage)\n+\t    {\n+\t      any::_Arg __arg;\n+\t      __any->_M_manager(any::_Op_access, __any, &__arg);\n+\t      return __arg._M_obj;\n+\t    }\n+\t}\n+      return nullptr;\n     }\n \n   /**"}, {"sha": "72581e6b3650bb59a6dead751b6903b1592eed74", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc?ref=38a9e5a6c07d84274bc5d345b947d1c13351d590", "patch": "@@ -118,10 +118,23 @@ void test04()\n   ExplicitCopy ec2{any_cast<ExplicitCopy>(std::move(x))};\n }\n \n+void test05()\n+{\n+  // PR libstdc++/69321\n+  struct noncopyable {\n+    noncopyable(noncopyable const&) = delete;\n+  };\n+\n+  any a;\n+  auto p = any_cast<noncopyable>(&a);\n+  VERIFY( p == nullptr );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}, {"sha": "62ab1b38a33ab9286e341ada769891b53d4abe22", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a9e5a6c07d84274bc5d345b947d1c13351d590/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc?ref=38a9e5a6c07d84274bc5d345b947d1c13351d590", "patch": "@@ -105,9 +105,22 @@ void test03()\n   MoveDeleted&& md3 = any_cast<MoveDeleted&&>(any(std::move(md)));\n }\n \n+void test04()\n+{\n+  // PR libstdc++/69321\n+  struct noncopyable {\n+    noncopyable(noncopyable const&) = delete;\n+  };\n+\n+  any a;\n+  auto p = any_cast<noncopyable>(&a);\n+  VERIFY( p == nullptr );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}