{"sha": "56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmZmQ5YjNiYTRhYWJmODdjY2VhMDE4MDk2YWJmNjRhYzdhMWZiYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-01-06T07:08:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-01-06T07:08:48Z"}, "message": "2005-01-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/testsuite_hooks.h:\n\t(copy_constructor::mark_call):  Use __throw_runtime_error.\n\t(assignment_operator::mark_call): Same.\n\t* testsuite/testsuite_hooks.cc (verify_demangle): Same.\n\t(locale_data): Remove, just use runtime_error directly.\n\t(environment_variable): Same.\n\t(not_found): Same.\n\t(run_tests_wrapped_locale): Use __throw_runtime_error.\n\t(run_tests_wrapped_env): Same.\n\t(semaphore::semaphore): Same.\n\t(semaphore::signal): Same.\n\t(semaphore::wait): Same.\n\t* testsuite/testsuite_abi.h (symbol_error): Remove, use logic_error.\n\t* testsuite/testsuite_abi.cc (get_symbol): Use __throw_logic_error.\n\t(create_symbols): Use __throw_runtime_error.\n\t* src/bitmap_allocator.cc: Use __throw_bad_alloc.\n\nFrom-SVN: r92989", "tree": {"sha": "fb2d84bf63906b7e344def297290378960b40a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb2d84bf63906b7e344def297290378960b40a45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/comments", "author": null, "committer": null, "parents": [{"sha": "e358acde2cc2c540b85ab7c5df397d653032b70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e358acde2cc2c540b85ab7c5df397d653032b70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e358acde2cc2c540b85ab7c5df397d653032b70d"}], "stats": {"total": 122, "additions": 61, "deletions": 61}, "files": [{"sha": "ee303ac664dd4c37dd07e1e2c7aecfb454ba27c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "patch": "@@ -1,3 +1,22 @@\n+2005-01-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/testsuite_hooks.h: \n+\t(copy_constructor::mark_call):  Use __throw_runtime_error.\n+\t(assignment_operator::mark_call): Same.\n+\t* testsuite/testsuite_hooks.cc (verify_demangle): Same.\n+\t(locale_data): Remove, just use runtime_error directly.\n+\t(environment_variable): Same.\n+\t(not_found): Same.\n+\t(run_tests_wrapped_locale): Use __throw_runtime_error.\n+\t(run_tests_wrapped_env): Same.\n+\t(semaphore::semaphore): Same.\n+\t(semaphore::signal): Same.\n+\t(semaphore::wait): Same.\n+\t* testsuite/testsuite_abi.h (symbol_error): Remove, use logic_error.\n+\t* testsuite/testsuite_abi.cc (get_symbol): Use __throw_logic_error.\n+\t(create_symbols): Use __throw_runtime_error.\n+\t* src/bitmap_allocator.cc: Use __throw_bad_alloc.\n+\n 2005-01-05  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/27_io/basic_filebuf/open/char/9507.cc: Remove child"}, {"sha": "c379664c31a87014f98e4da984b1e8b5c6cd1126", "filename": "libstdc++-v3/src/bitmap_allocator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitmap_allocator.cc?ref=56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. Out of line function definitions. -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -96,7 +96,7 @@ namespace __gnu_cxx\n \t    *__ret = __sz;\n \t    return __ret + 1;\n \t  }\n-\t__throw_exception_again std::bad_alloc();\n+\tstd::__throw_bad_alloc();\n       }\n     else\n       {"}, {"sha": "1120c7d3399d32de7b08a48a5a93974483172e45", "filename": "libstdc++-v3/testsuite/testsuite_abi.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc?ref=56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n@@ -263,7 +263,7 @@ get_symbol(const string& mangled, const symbols& s)\n     {\n       ostringstream os;\n       os << \"get_symbol failed for symbol \" << mangled;\n-      __throw_exception_again symbol_error(os.str());\n+      __throw_logic_error(os.str().c_str());\n     }\n }\n \n@@ -420,7 +420,7 @@ create_symbols(const char* file)\n     {\n       ostringstream os;\n       os << \"create_symbols failed for file \" << file;\n-      __throw_exception_again runtime_error(os.str());\n+      __throw_runtime_error(os.str().c_str());\n     }\n   return s;\n }"}, {"sha": "2078eb76fa37fb8741f7e871b1d63e5144a0886d", "filename": "libstdc++-v3/testsuite/testsuite_abi.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.h?ref=56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n@@ -69,12 +69,6 @@ struct symbol\n   init(std::string& data);\n };\n \n-struct symbol_error : public std::logic_error\n-{\n-  explicit symbol_error(const std::string& s) : std::logic_error(s) { }\n-};\n-\n-\n typedef __gnu_cxx::hash_map<std::string, symbol> \tsymbol_objects;\n \n typedef std::deque<std::string>\t\t\t\tsymbol_names;"}, {"sha": "8048738c02813fbf36a40b8e8b14468eeaf4f4b2", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 32, "deletions": 46, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "patch": "@@ -151,32 +151,9 @@ namespace __gnu_test\n \n     std::string w(wanted);\n     if (w != s)\n-      __throw_exception_again std::runtime_error(std::string(s));\n+      std::__throw_runtime_error(s);\n   }\n \n-  \n-  // Useful exceptions.\n-  class locale_data : public std::runtime_error \n-  {\n-  public:\n-    explicit \n-    locale_data(const std::string&  __arg) : runtime_error(__arg) { }\n-  };\n-\n-  class environment_variable: public std::runtime_error \n-  {\n-  public:\n-    explicit \n-    environment_variable(const std::string&  __arg) : runtime_error(__arg) { }\n-  };\n-\n-  class not_found : public std::runtime_error \n-  {\n-  public:\n-    explicit \n-    not_found(const std::string&  __arg) : runtime_error(__arg) { }\n-  };\n-\n   void \n   run_tests_wrapped_locale(const char* name, const func_callback& l)\n   {\n@@ -198,8 +175,11 @@ namespace __gnu_test\n \tVERIFY( preLC_ALL == postLC_ALL );\n       }\n     else\n-      __throw_exception_again\n-\tenvironment_variable(string(\"LC_ALL for \") + string(name));\n+      {\n+\tstring s(\"LC_ALL for \");\n+\ts += name;\n+\t__throw_runtime_error(s.c_str());\n+      }\n   }\n   \n   void \n@@ -224,8 +204,12 @@ namespace __gnu_test\n \tsetenv(env, oldENV ? oldENV : \"\", 1);\n       }\n     else\n-      __throw_exception_again\n-\tenvironment_variable(string(env) + string(\" to \") + string(name));\n+      {\n+\tstring s(env);\n+\ts += string(\" to \");\n+\ts += string(name);\n+\t__throw_runtime_error(s.c_str());\n+      }\n #endif\n   }\n \n@@ -278,7 +262,8 @@ namespace __gnu_test\n   };\n #endif\n \n-  semaphore::semaphore() {\n+  semaphore::semaphore() \n+  {\n #ifdef _GLIBCXX_SYSV_SEM\n     // Remeber the PID for the process that created the semaphore set\n     // so that only one process will destroy the set.\n@@ -296,15 +281,13 @@ namespace __gnu_test\n     // Get a semaphore set with one semaphore.\n     sem_set_ = semget(IPC_PRIVATE, 1, SEM_R | SEM_A);\n     if (sem_set_ == -1)\n-      __throw_exception_again \n-\tstd::runtime_error (\"could not obtain semaphore set\");\n+      std::__throw_runtime_error(\"could not obtain semaphore set\");\n \n     // Initialize the semaphore.\n     union semun val;\n     val.val = 0;\n     if (semctl(sem_set_, 0, SETVAL, val) == -1)\n-      __throw_exception_again\n-\tstd::runtime_error(\"could not initialize semaphore\");\n+      std::__throw_runtime_error(\"could not initialize semaphore\");\n #else\n     // There are no semaphores on this system.  We have no way to mark\n     // a test as \"unsupported\" at runtime, so we just exit, pretending\n@@ -313,7 +296,8 @@ namespace __gnu_test\n #endif\n   }\n \n-  semaphore::~semaphore() {\n+  semaphore::~semaphore() \n+  {\n #ifdef _GLIBCXX_SYSV_SEM\n     union semun val;\n     // Destroy the semaphore set only in the process that created it. \n@@ -323,26 +307,28 @@ namespace __gnu_test\n   }\n \n   void\n-  semaphore::signal() {\n+  semaphore::signal() \n+  {\n #ifdef _GLIBCXX_SYSV_SEM\n-    struct sembuf op[1] = {\n-      { 0, 1, 0 }\n-    };\n+    struct sembuf op[1] = \n+      {\n+\t{ 0, 1, 0 }\n+      };\n     if (semop(sem_set_, op, 1) == -1)\n-      __throw_exception_again\n-\tstd::runtime_error(\"could not signal semaphore\");\n+      std::__throw_runtime_error(\"could not signal semaphore\");\n #endif\n   }\n \n   void\n-  semaphore::wait() {\n+  semaphore::wait() \n+  {\n #ifdef _GLIBCXX_SYSV_SEM\n-    struct sembuf op[1] = {\n-      { 0, -1, SEM_UNDO }\n-    };\n+    struct sembuf op[1] = \n+      {\n+\t{ 0, -1, SEM_UNDO }\n+      };\n     if (semop(sem_set_, op, 1) == -1)\n-      __throw_exception_again\n-\tstd::runtime_error(\"could not wait for semaphore\");\n+      std::__throw_runtime_error(\"could not wait for semaphore\");\n #endif    \n   }\n }; // namespace __gnu_test"}, {"sha": "171cdc6cee6a4ac4ba1b3bb137dbccc4a4fc4939", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ffd9b3ba4aabf87ccea018096abf64ac7a1fba/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=56ffd9b3ba4aabf87ccea018096abf64ac7a1fba", "patch": "@@ -1,7 +1,8 @@\n // -*- C++ -*-\n // Utility subroutines for the C++ library testsuite. \n //\n-// Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -224,7 +225,7 @@ namespace __gnu_test\n     {\n       count_++;\n       if (count_ == throw_on_)\n-\t__throw_exception_again \"copy constructor exception\";\n+\tstd::__throw_runtime_error(\"copy_constructor::mark_call\");\n     }\n       \n     static void\n@@ -255,7 +256,7 @@ namespace __gnu_test\n     {\n       count_++;\n       if (count_ == throw_on_)\n-\t__throw_exception_again \"assignment operator exception\";\n+\tstd::__throw_runtime_error(\"assignment_operator::mark_call\");\n     }\n \n     static void"}]}