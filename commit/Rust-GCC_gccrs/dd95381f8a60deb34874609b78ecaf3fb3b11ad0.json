{"sha": "dd95381f8a60deb34874609b78ecaf3fb3b11ad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5NTM4MWY4YTYwZGViMzQ4NzQ2MDliNzhlY2FmM2ZiM2IxMWFkMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-26T16:56:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-26T16:56:09Z"}, "message": "mt_allocator.h (__mt_alloc<>::allocate, [...]): Protect two instances of block->thread_id with __GTHREADS.\n\n2004-03-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/mt_allocator.h (__mt_alloc<>::allocate,\n\t__mt_alloc<>::deallocate): Protect two instances of\n\tblock->thread_id with __GTHREADS.\n\nFrom-SVN: r79986", "tree": {"sha": "92dcf3c09f4557a80f25d236f45f0d777efa9ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92dcf3c09f4557a80f25d236f45f0d777efa9ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd95381f8a60deb34874609b78ecaf3fb3b11ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd95381f8a60deb34874609b78ecaf3fb3b11ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd95381f8a60deb34874609b78ecaf3fb3b11ad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd95381f8a60deb34874609b78ecaf3fb3b11ad0/comments", "author": null, "committer": null, "parents": [{"sha": "eabe2b296920893b0940839e12f880e4f0d38684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabe2b296920893b0940839e12f880e4f0d38684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eabe2b296920893b0940839e12f880e4f0d38684"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "8c6e3f931ce8f9381f9eb64264bb174383e0a18f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95381f8a60deb34874609b78ecaf3fb3b11ad0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95381f8a60deb34874609b78ecaf3fb3b11ad0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd95381f8a60deb34874609b78ecaf3fb3b11ad0", "patch": "@@ -1,3 +1,9 @@\n+2004-03-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/mt_allocator.h (__mt_alloc<>::allocate,\n+\t__mt_alloc<>::deallocate): Protect two instances of\n+\tblock->thread_id with __GTHREADS.\n+\n 2004-03-25  Gawain Bolton  <gp.bolton@computer.org>\n \n \t* include/bits/stl_tree.h (_Rb_tree_impl): Add _Node_allocator"}, {"sha": "d19849d2ed8443a44e61023df0b5a5db3abd80ff", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd95381f8a60deb34874609b78ecaf3fb3b11ad0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd95381f8a60deb34874609b78ecaf3fb3b11ad0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=dd95381f8a60deb34874609b78ecaf3fb3b11ad0", "patch": "@@ -405,9 +405,9 @@ namespace __gnu_cxx\n \t  // grab the first record and update the counters.\n \t  block = __bin.first[__thread_id];\n \t  __bin.first[__thread_id] = __bin.first[__thread_id]->next;\n-\t  block->thread_id = __thread_id;\n \n #ifdef __GTHREADS\n+\t  block->thread_id = __thread_id;\n \t  if (__gthread_active_p())\n \t    {\n \t      __bin.free[__thread_id]--;\n@@ -436,13 +436,13 @@ namespace __gnu_cxx\n       \n       // Round up to power of 2 and figure out which bin to use.\n       const size_t __which = _S_binmap[__bytes];\n-      const size_t thread_id = _S_get_thread_id();\n       const bin_record& __bin = _S_bin[__which];\n \n       char* __c = reinterpret_cast<char*>(__p) - sizeof(block_record);\n       block_record* block = reinterpret_cast<block_record*>(__c);\n       \n #ifdef __GTHREADS\n+      const size_t thread_id = _S_get_thread_id();\n       if (__gthread_active_p())\n \t{\n \t  // Calculate the number of records to remove from our freelist."}]}