{"sha": "701558519078dc29af0d6853a6219cb38b40c02f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAxNTU4NTE5MDc4ZGMyOWFmMGQ2ODUzYTYyMTljYjM4YjQwYzAyZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-04-28T18:28:37Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-28T18:28:37Z"}, "message": "Timer.java: Javadocs merged from GNU classpath.\n\n2005-04-28  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/Timer.java: Javadocs merged\n\tfrom GNU classpath.\n\nFrom-SVN: r98932", "tree": {"sha": "d13aecb7229a692d32553bc977438ed2a9e2e642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d13aecb7229a692d32553bc977438ed2a9e2e642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/701558519078dc29af0d6853a6219cb38b40c02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701558519078dc29af0d6853a6219cb38b40c02f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701558519078dc29af0d6853a6219cb38b40c02f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701558519078dc29af0d6853a6219cb38b40c02f/comments", "author": null, "committer": null, "parents": [{"sha": "a9eed58b76c8be866099b065e0db563735bc9cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9eed58b76c8be866099b065e0db563735bc9cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9eed58b76c8be866099b065e0db563735bc9cbb"}], "stats": {"total": 106, "additions": 73, "deletions": 33}, "files": [{"sha": "1bc57197e4da1876a148d9ff1bd19a780f8eabbe", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701558519078dc29af0d6853a6219cb38b40c02f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701558519078dc29af0d6853a6219cb38b40c02f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=701558519078dc29af0d6853a6219cb38b40c02f", "patch": "@@ -1,3 +1,8 @@\n+2005-04-28  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/Timer.java: Javadocs merged\n+\tfrom GNU classpath.\n+\n 2005-04-28  Jeroen Frijters  <jeroen@frijters.net>\n \n \t* gnu/java/net/protocol/file/Connection.java"}, {"sha": "c339c8b0544a3733f2c26bde9e2919b872b02351", "filename": "libjava/javax/swing/Timer.java", "status": "modified", "additions": 68, "deletions": 33, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/701558519078dc29af0d6853a6219cb38b40c02f/libjava%2Fjavax%2Fswing%2FTimer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/701558519078dc29af0d6853a6219cb38b40c02f/libjava%2Fjavax%2Fswing%2FTimer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FTimer.java?ref=701558519078dc29af0d6853a6219cb38b40c02f", "patch": "@@ -1,5 +1,5 @@\n /* Timer.java --\n-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -46,9 +46,13 @@\n import javax.swing.event.EventListenerList;\n \n /**\n- * DOCUMENT ME!\n+ * Fires one or more action events after the specified delay.\n+ * @author Ronald Veldema\n+ * @author Audrius Meskauskas (audriusa@Bionformatics.org) - bug fixes\n+ * and documentation comments\n  */\n-public class Timer implements Serializable\n+public class Timer\n+  implements Serializable\n {\n   /** DOCUMENT ME! */\n   private static final long serialVersionUID = -1116180831621385484L;\n@@ -121,22 +125,33 @@ void drainEvents()\n \n   static boolean logTimers;\n \n-  /** DOCUMENT ME! */\n+  /**\n+   * <code>true</code> if the timer coalesces events.\n+   */\n   boolean coalesce = true;\n \n-  /** DOCUMENT ME! */\n+  /**\n+   * <code>true</code> if the timer is firing repetetive events.\n+   */\n   boolean repeats = true;\n \n-  /** DOCUMENT ME! */\n+  /**\n+   * <code>true</code> if the timer is currently active, firing events\n+   * as scheduled.\n+   */\n   boolean running;\n \n   /** DOCUMENT ME! */\n   int ticks;\n \n-  /** DOCUMENT ME! */\n+  /**\n+   * The delay between subsequent repetetive events.\n+   */\n   int delay;\n \n-  /** DOCUMENT ME! */\n+  /**\n+   * The initial delay before the first event.\n+   */\n   int initialDelay;\n \n   /**\n@@ -184,8 +199,9 @@ public void run()\n   /**\n    * Creates a new Timer object.\n    *\n-   * @param d DOCUMENT ME!\n-   * @param listener DOCUMENT ME!\n+   * @param d the default value for both initial and between event delay, in\n+   * milliseconds.\n+   * @param listener the first action listener, can be <code>null</code>.\n    */\n   public Timer(int d, ActionListener listener)\n   {\n@@ -236,12 +252,13 @@ public void removeActionListener(ActionListener listener)\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Get the event listeners of the given type that are listening for the\n+   * events, fired by this timer.\n    *\n-   * @param listenerType DOCUMENT ME!\n-   *\n-   * @return DOCUMENT ME!\n+   * @param listenerType the listener type (for example, ActionListener.class)\n    *\n+   * @return the array of event listeners that are listening for the events,\n+   * fired by this timer\n    * @since 1.3\n    */\n   public EventListener[] getListeners(Class listenerType)\n@@ -283,89 +300,107 @@ void fireActionPerformed()\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Set the timer logging state. If it is set to <code>true</code>, the\n+   * timer prints a message to {@link System#out} when firing each\n+   * action event.\n    *\n-   * @param lt DOCUMENT ME!\n+   * @param lt <code>true</code> if logging is enabled, <code>false</code>\n+   * (default value) otherwise\n    */\n   public static void setLogTimers(boolean lt)\n   {\n     logTimers = lt;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Return the logging state.\n    *\n-   * @return DOCUMENT ME!\n+   * @return <code>true</code> if the timer is printing a message to\n+   * {@link System#out}\n+   * when firing each action event\n    */\n   public static boolean getLogTimers()\n   {\n     return logTimers;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Set the delay between firing the subsequent events.\n+   * This parameter does not change the value of the initial delay before\n+   * firing the first event.\n    *\n-   * @param d DOCUMENT ME!\n+   * @param d The time gap between the subsequent events, in milliseconds\n    */\n   public void setDelay(int d)\n   {\n     delay = d;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Get the delay between firing the subsequent events.\n    *\n-   * @return DOCUMENT ME!\n+   * @return The delay between subsequent events, in milliseconds\n    */\n   public int getDelay()\n   {\n     return delay;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Set the intial delay before firing the first event since calling\n+   * the {@link #start()} method. If the initial delay has not been\n+   * set, it is assumed having the same value as the delay between the\n+   * subsequent events.\n    *\n-   * @param i DOCUMENT ME!\n+   * @param i the initial delay, in milliseconds\n    */\n   public void setInitialDelay(int i)\n   {\n     initialDelay = i;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Get the intial delay before firing the first event since calling\n+   * the {@link #start()} method. If the initial delay has not been\n+   * set, returns the same value as {@link #getDelay()}.\n    *\n-   * @return DOCUMENT ME!\n+   * @return the initial delay before firing the first action event.\n    */\n   public int getInitialDelay()\n   {\n     return initialDelay;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Enable firing the repetetive events.\n    *\n-   * @param r DOCUMENT ME!\n+   * @param r <code>true</code> (default value) to fire repetetive events.\n+   * <code>false</code> to fire\n+   * only one event after the initial delay\n    */\n   public void setRepeats(boolean r)\n   {\n     repeats = r;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Check is this timer fires repetetive events.\n    *\n-   * @return DOCUMENT ME!\n+   * @return <code>true</code> if the timer fires repetetive events,\n+   * <code>false</code> if it fires\n+   * only one event after the initial delay\n    */\n   public boolean isRepeats()\n   {\n     return repeats;\n   }\n \n   /**\n-   * DOCUMENT ME!\n+   * Get the timer state.\n    *\n-   * @return DOCUMENT ME!\n+   * @return <code>true</code> if the timer has been started and is firing\n+   * the action events as scheduled. <code>false</code>\n+   * if the timer is inactive.\n    */\n   public boolean isRunning()\n   {\n@@ -402,7 +437,7 @@ public void stop()\n       waker.interrupt();\n     synchronized (queueLock)\n       {\n-\tqueue = 0;\n+        queue = 0;\n       }\n   }\n }"}]}