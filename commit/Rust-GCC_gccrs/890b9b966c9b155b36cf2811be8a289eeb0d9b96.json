{"sha": "890b9b966c9b155b36cf2811be8a289eeb0d9b96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkwYjliOTY2YzliMTU1YjM2Y2YyODExYmU4YTI4OWVlYjBkOWI5Ng==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-10-30T14:32:26Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-10-30T14:32:26Z"}, "message": "Optimize -mstackrealign.\n\ngcc/\n\n2009-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/40836\n\t* cfgexpand.c (expand_stack_alignment): Call update_stack_boundary\n\tfirst.  Move assert on stack_alignment_estimated just before\n\tsetting stack_realign_needed.\n\t(gimple_expand_cfg): Initialize stack_alignment_estimated to 0.\n\tDon't call update_stack_boundary.\n\n\t* config/i386/i386.c (ix86_minimum_incoming_stack_boundary): New.\n\t(verride_options): Don't check ix86_force_align_arg_pointer here.\n\t(ix86_function_ok_for_sibcall): Use it.\n\t(ix86_update_stack_boundary): Likewise.\n\n\t* config/i386/i386.h (STACK_REALIGN_DEFAULT): Update comments.\n\ngcc/testsuite/\n\n2009-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/40838\n\t* gcc.target/i386/incoming-6.c: New.\n\t* gcc.target/i386/incoming-7.c: Likewise.\n\t* gcc.target/i386/incoming-8.c: Likewise.\n\t* gcc.target/i386/incoming-9.c: Likewise.\n\t* gcc.target/i386/incoming-10.c: Likewise.\n\t* gcc.target/i386/incoming-11.c: Likewise.\n\t* gcc.target/i386/incoming-12.c: Likewise.\n\t* gcc.target/i386/incoming-13.c: Likewise.\n\t* gcc.target/i386/incoming-14.c: Likewise.\n\t* gcc.target/i386/incoming-15.c: Likewise.\n\t* gcc.target/i386/pr37843-4.c: Likewise.\n\nFrom-SVN: r153750", "tree": {"sha": "34c9b70bbe8d98f1da599ea7373429d1618f4427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c9b70bbe8d98f1da599ea7373429d1618f4427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/890b9b966c9b155b36cf2811be8a289eeb0d9b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890b9b966c9b155b36cf2811be8a289eeb0d9b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/890b9b966c9b155b36cf2811be8a289eeb0d9b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890b9b966c9b155b36cf2811be8a289eeb0d9b96/comments", "author": null, "committer": null, "parents": [{"sha": "6528a7ede69259e73a6a560cec80d4278b89007e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6528a7ede69259e73a6a560cec80d4278b89007e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6528a7ede69259e73a6a560cec80d4278b89007e"}], "stats": {"total": 318, "additions": 274, "deletions": 44}, "files": [{"sha": "af36bc6622dff96d9521188510937efffa299c32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -1,3 +1,19 @@\n+2009-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/40836\n+\t* cfgexpand.c (expand_stack_alignment): Call update_stack_boundary\n+\tfirst.  Move assert on stack_alignment_estimated just before\n+\tsetting stack_realign_needed.\n+\t(gimple_expand_cfg): Initialize stack_alignment_estimated to 0.\n+\tDon't call update_stack_boundary.\n+\n+\t* config/i386/i386.c (ix86_minimum_incoming_stack_boundary): New.\n+\t(verride_options): Don't check ix86_force_align_arg_pointer here.\n+\t(ix86_function_ok_for_sibcall): Use it.\n+\t(ix86_update_stack_boundary): Likewise.\n+\n+\t* config/i386/i386.h (STACK_REALIGN_DEFAULT): Update comments.\n+\n 2009-10-30  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (QHSI): New mode iterator.\n@@ -13,9 +29,9 @@\n \tPR debug/41700\n \t* dwarf2out.c (dwarf2_debug_hooks): Add entries for new hook (two\n \tlocations in the source).\n-        (store_vcall_insn): New function.\n-        (lookup_vcall_insn): New function.\n-        (dwarf2out_virtual_call_token): Use store_vcall_insn.\n+\t(store_vcall_insn): New function.\n+\t(lookup_vcall_insn): New function.\n+\t(dwarf2out_virtual_call_token): Use store_vcall_insn.\n \t(dwarf2out_copy_call_info): New function.\n \t(dwarf2out_virtual_call): Use lookup_vcall_insn.\n \t* emit-rtl.c (try_split): Call copy_call_info debug hook."}, {"sha": "33e7579d32713924590a8f468c45c1fc0a95cde9", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -3447,8 +3447,18 @@ expand_stack_alignment (void)\n       || crtl->has_nonlocal_goto)\n     crtl->need_drap = true;\n \n-  gcc_assert (crtl->stack_alignment_needed\n-\t      <= crtl->stack_alignment_estimated);\n+  /* Call update_stack_boundary here again to update incoming stack\n+     boundary.  It may set incoming stack alignment to a different\n+     value after RTL expansion.  TARGET_FUNCTION_OK_FOR_SIBCALL may\n+     use the minimum incoming stack alignment to check if it is OK\n+     to perform sibcall optimization since sibcall optimization will\n+     only align the outgoing stack to incoming stack boundary.  */\n+  if (targetm.calls.update_stack_boundary)\n+    targetm.calls.update_stack_boundary ();\n+\n+  /* The incoming stack frame has to be aligned at least at\n+     parm_stack_boundary.  */\n+  gcc_assert (crtl->parm_stack_boundary <= INCOMING_STACK_BOUNDARY);\n \n   /* Update crtl->stack_alignment_estimated and use it later to align\n      stack.  We check PREFERRED_STACK_BOUNDARY if there may be non-call\n@@ -3464,6 +3474,9 @@ expand_stack_alignment (void)\n   if (preferred_stack_boundary > crtl->stack_alignment_needed)\n     crtl->stack_alignment_needed = preferred_stack_boundary;\n \n+  gcc_assert (crtl->stack_alignment_needed\n+\t      <= crtl->stack_alignment_estimated);\n+\n   crtl->stack_realign_needed\n     = INCOMING_STACK_BOUNDARY < crtl->stack_alignment_estimated;\n   crtl->stack_realign_tried = crtl->stack_realign_needed;\n@@ -3540,7 +3553,7 @@ gimple_expand_cfg (void)\n   targetm.expand_to_rtl_hook ();\n   crtl->stack_alignment_needed = STACK_BOUNDARY;\n   crtl->max_used_stack_slot_alignment = STACK_BOUNDARY;\n-  crtl->stack_alignment_estimated = STACK_BOUNDARY;\n+  crtl->stack_alignment_estimated = 0;\n   crtl->preferred_stack_boundary = STACK_BOUNDARY;\n   cfun->cfg->max_jumptable_ents = 0;\n \n@@ -3604,23 +3617,6 @@ gimple_expand_cfg (void)\n   if (crtl->stack_protect_guard)\n     stack_protect_prologue ();\n \n-  /* Update stack boundary if needed.  */\n-  if (SUPPORTS_STACK_ALIGNMENT)\n-    {\n-      /* Call update_stack_boundary here to update incoming stack\n-\t boundary before TARGET_FUNCTION_OK_FOR_SIBCALL is called.\n-\t TARGET_FUNCTION_OK_FOR_SIBCALL needs to know the accurate\n-\t incoming stack alignment to check if it is OK to perform\n-\t sibcall optimization since sibcall optimization will only\n-\t align the outgoing stack to incoming stack boundary.  */\n-      if (targetm.calls.update_stack_boundary)\n-\ttargetm.calls.update_stack_boundary ();\n-      \n-      /* The incoming stack frame has to be aligned at least at\n-\t parm_stack_boundary.  */\n-      gcc_assert (crtl->parm_stack_boundary <= INCOMING_STACK_BOUNDARY);\n-    }\n-\n   expand_phi_nodes (&SA);\n \n   /* Register rtl specific functions for cfg.  */"}, {"sha": "5d6eb0f806aa8a6e5ec913f9eb6dd7781e2262ff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -1905,6 +1905,7 @@ static bool ix86_valid_target_attribute_p (tree, tree, tree, int);\n static bool ix86_valid_target_attribute_inner_p (tree, char *[]);\n static bool ix86_can_inline_p (tree, tree);\n static void ix86_set_current_function (tree);\n+static unsigned int ix86_minimum_incoming_stack_boundary (bool);\n \n static enum calling_abi ix86_function_abi (const_tree);\n \n@@ -3239,12 +3240,10 @@ override_options (bool main_args_p)\n   if (ix86_force_align_arg_pointer == -1)\n     ix86_force_align_arg_pointer = STACK_REALIGN_DEFAULT;\n \n+  ix86_default_incoming_stack_boundary = PREFERRED_STACK_BOUNDARY;\n+\n   /* Validate -mincoming-stack-boundary= value or default it to\n      MIN_STACK_BOUNDARY/PREFERRED_STACK_BOUNDARY.  */\n-  if (ix86_force_align_arg_pointer)\n-    ix86_default_incoming_stack_boundary = MIN_STACK_BOUNDARY;\n-  else\n-    ix86_default_incoming_stack_boundary = PREFERRED_STACK_BOUNDARY;\n   ix86_incoming_stack_boundary = ix86_default_incoming_stack_boundary;\n   if (ix86_incoming_stack_boundary_string)\n     {\n@@ -4277,7 +4276,8 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n \n   /* If we need to align the outgoing stack, then sibcalling would\n      unalign the stack, which may break the called function.  */\n-  if (ix86_incoming_stack_boundary < PREFERRED_STACK_BOUNDARY)\n+  if (ix86_minimum_incoming_stack_boundary (true)\n+      < PREFERRED_STACK_BOUNDARY)\n     return false;\n \n   if (decl)\n@@ -8196,37 +8196,58 @@ find_drap_reg (void)\n     }\n }\n \n-/* Update incoming stack boundary and estimated stack alignment.  */\n+/* Return minimum incoming stack alignment.  */\n \n-static void\n-ix86_update_stack_boundary (void)\n+static unsigned int\n+ix86_minimum_incoming_stack_boundary (bool sibcall)\n {\n+  unsigned int incoming_stack_boundary;\n+\n   /* Prefer the one specified at command line. */\n-  ix86_incoming_stack_boundary \n-    = (ix86_user_incoming_stack_boundary\n-       ? ix86_user_incoming_stack_boundary\n-       : ix86_default_incoming_stack_boundary);\n+  if (ix86_user_incoming_stack_boundary)\n+    incoming_stack_boundary = ix86_user_incoming_stack_boundary;\n+  /* In 32bit, use MIN_STACK_BOUNDARY for incoming stack boundary\n+     if -mstackrealign is used, it isn't used for sibcall check and \n+     estimated stack alignment is 128bit.  */\n+  else if (!sibcall\n+\t   && !TARGET_64BIT\n+\t   && ix86_force_align_arg_pointer\n+\t   && crtl->stack_alignment_estimated == 128)\n+    incoming_stack_boundary = MIN_STACK_BOUNDARY;\n+  else\n+    incoming_stack_boundary = ix86_default_incoming_stack_boundary;\n \n   /* Incoming stack alignment can be changed on individual functions\n      via force_align_arg_pointer attribute.  We use the smallest\n      incoming stack boundary.  */\n-  if (ix86_incoming_stack_boundary > MIN_STACK_BOUNDARY\n+  if (incoming_stack_boundary > MIN_STACK_BOUNDARY\n       && lookup_attribute (ix86_force_align_arg_pointer_string,\n \t\t\t   TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl))))\n-    ix86_incoming_stack_boundary = MIN_STACK_BOUNDARY;\n+    incoming_stack_boundary = MIN_STACK_BOUNDARY;\n \n   /* The incoming stack frame has to be aligned at least at\n      parm_stack_boundary.  */\n-  if (ix86_incoming_stack_boundary < crtl->parm_stack_boundary)\n-    ix86_incoming_stack_boundary = crtl->parm_stack_boundary;\n+  if (incoming_stack_boundary < crtl->parm_stack_boundary)\n+    incoming_stack_boundary = crtl->parm_stack_boundary;\n \n   /* Stack at entrance of main is aligned by runtime.  We use the\n      smallest incoming stack boundary. */\n-  if (ix86_incoming_stack_boundary > MAIN_STACK_BOUNDARY\n+  if (incoming_stack_boundary > MAIN_STACK_BOUNDARY\n       && DECL_NAME (current_function_decl)\n       && MAIN_NAME_P (DECL_NAME (current_function_decl))\n       && DECL_FILE_SCOPE_P (current_function_decl))\n-    ix86_incoming_stack_boundary = MAIN_STACK_BOUNDARY;\n+    incoming_stack_boundary = MAIN_STACK_BOUNDARY;\n+\n+  return incoming_stack_boundary;\n+}\n+\n+/* Update incoming stack boundary and estimated stack alignment.  */\n+\n+static void\n+ix86_update_stack_boundary (void)\n+{\n+  ix86_incoming_stack_boundary\n+    = ix86_minimum_incoming_stack_boundary (false);\n \n   /* x86_64 vararg needs 16byte stack alignment for register save\n      area.  */"}, {"sha": "22187a952d05e7d9c98797de6ab66859b42ffffc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -706,9 +706,7 @@ enum target_cpu_default\n    generate an alternate prologue and epilogue that realigns the\n    runtime stack if nessary.  This supports mixing codes that keep a\n    4-byte aligned stack, as specified by i386 psABI, with codes that\n-   need a 16-byte aligned stack, as required by SSE instructions.  If\n-   STACK_REALIGN_DEFAULT is 1 and PREFERRED_STACK_BOUNDARY_DEFAULT is\n-   128, stacks for all functions may be realigned.  */\n+   need a 16-byte aligned stack, as required by SSE instructions.  */\n #define STACK_REALIGN_DEFAULT 0\n \n /* Boundary (in *bits*) on which the incoming stack is aligned.  */"}, {"sha": "29676c680c32fc646252e8fb2bb59016f8f7a4df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -1,3 +1,18 @@\n+2009-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/40838\n+\t* gcc.target/i386/incoming-6.c: New.\n+\t* gcc.target/i386/incoming-7.c: Likewise.\n+\t* gcc.target/i386/incoming-8.c: Likewise.\n+\t* gcc.target/i386/incoming-9.c: Likewise.\n+\t* gcc.target/i386/incoming-10.c: Likewise.\n+\t* gcc.target/i386/incoming-11.c: Likewise.\n+\t* gcc.target/i386/incoming-12.c: Likewise.\n+\t* gcc.target/i386/incoming-13.c: Likewise.\n+\t* gcc.target/i386/incoming-14.c: Likewise.\n+\t* gcc.target/i386/incoming-15.c: Likewise.\n+\t* gcc.target/i386/pr37843-4.c: Likewise.\n+\n 2009-10-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/41863"}, {"sha": "31d9e6180be8ddfa30f72a20e2be0a8d2dce8ab2", "filename": "gcc/testsuite/gcc.target/i386/incoming-10.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-10.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -fomit-frame-pointer -O3 -march=barcelona -mpreferred-stack-boundary=4\" } */\n+\n+struct s {\n+\tint x[8];\n+};\n+\n+void g(struct s *);\n+\n+void f()\n+{\n+\tint i;\n+\tstruct s s;\n+\tfor (i = 0; i < sizeof(s.x) / sizeof(*s.x); i++) s.x[i] = 0;\n+\tg(&s);\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "e5787af7a6227545e5d6672e1d16b7dbed97d046", "filename": "gcc/testsuite/gcc.target/i386/incoming-11.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-11.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -fomit-frame-pointer -O3 -march=barcelona -mpreferred-stack-boundary=4\" } */\n+\n+void g();\n+\n+int p[100];\n+int q[100];\n+\n+void f()\n+{\n+\tint i;\n+\tfor (i = 0; i < 100; i++) p[i] = 0;\n+\tg();\n+\tfor (i = 0; i < 100; i++) q[i] = 0;\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "d7ef1038bb5fc0d454bc772e54115bc5a40381cc", "filename": "gcc/testsuite/gcc.target/i386/incoming-12.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-12.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O2 -msse2 -mpreferred-stack-boundary=4\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+struct x {\n+       v4si v;\n+       v4si w;\n+};\n+\n+void y(void *);\n+\n+v4si x(void)\n+{\n+       struct x x;\n+       y(&x);\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "bbc8993d577ecccc511bbead94bfd4b98077fd38", "filename": "gcc/testsuite/gcc.target/i386/incoming-13.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-13.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O2 -mpreferred-stack-boundary=4\" } */\n+\n+extern double y(double *s3);\n+\n+extern double s1, s2;\n+\n+double x(void)\n+{\n+  double s3 = s1 + s2;\n+  return y(&s3);\n+}\n+\n+/* { dg-final { scan-assembler-not \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "d27179d95784a4a66b347e746ef910c3a1fee4c5", "filename": "gcc/testsuite/gcc.target/i386/incoming-14.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-14.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O2 -mpreferred-stack-boundary=4\" } */\n+\n+extern int y(int *s3);\n+\n+extern int s1, s2;\n+\n+int x(void)\n+{\n+  int s3 = s1 + s2;\n+  return y(&s3);\n+}\n+\n+/* { dg-final { scan-assembler-not \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "e6a1749044790b9fcf1e9201faf4d4f09e5bbf3f", "filename": "gcc/testsuite/gcc.target/i386/incoming-15.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-15.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O2 -mpreferred-stack-boundary=4\" } */\n+\n+extern long long y(long long *s3);\n+\n+extern long long s1, s2;\n+\n+long long x(void)\n+{\n+  long long s3 = s1 + s2;\n+  return y(&s3);\n+}\n+\n+/* { dg-final { scan-assembler-not \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "5cc4ab3f76635cd69bf387f1cadb859d2fa1468c", "filename": "gcc/testsuite/gcc.target/i386/incoming-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-6.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O2 -msse2 -mpreferred-stack-boundary=4\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+extern v4si y(v4si *s3);\n+\n+extern v4si s1, s2;\n+\n+v4si x(void)\n+{\n+  v4si s3 = s1 + s2;\n+  return y(&s3);\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "cdd60379683c60e149b612bed65f6ab8afb660c6", "filename": "gcc/testsuite/gcc.target/i386/incoming-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-7.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O2 -msse2 -mpreferred-stack-boundary=4\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+extern v4si y(v4si, v4si, v4si, v4si, v4si);\n+\n+extern v4si s1, s2;\n+\n+v4si x(void)\n+{\n+  return y(s1, s2, s1, s2, s2);\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "2dd8800fd6cbd2df3a27166fc4164a3ab9063589", "filename": "gcc/testsuite/gcc.target/i386/incoming-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-8.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O3 -msse2 -mpreferred-stack-boundary=4\" } */\n+\n+float\n+foo (float f)\n+{\n+  float array[128];\n+  float x;\n+  int i;\n+  for (i = 0; i < sizeof(array) / sizeof(*array); i++)\n+    array[i] = f;\n+  for (i = 0; i < sizeof(array) / sizeof(*array); i++)\n+    x += array[i];\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "e43cbd6bc1cab26c23d8258cdaca80552bceab94", "filename": "gcc/testsuite/gcc.target/i386/incoming-9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fincoming-9.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/40838 */\n+/* { dg-do compile { target { { ! *-*-darwin* } && ilp32 } } } */\n+/* { dg-options \"-w -mstackrealign -O3 -mno-sse -mpreferred-stack-boundary=4\" } */\n+\n+float\n+foo (float f)\n+{\n+  float array[128];\n+  float x;\n+  int i;\n+  for (i = 0; i < sizeof(array) / sizeof(*array); i++)\n+    array[i] = f;\n+  for (i = 0; i < sizeof(array) / sizeof(*array); i++)\n+    x += array[i];\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%esp\" } } */"}, {"sha": "8e5f51f9d8b23adb3695c3fa590d2ccebc419b81", "filename": "gcc/testsuite/gcc.target/i386/pr37843-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37843-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/890b9b966c9b155b36cf2811be8a289eeb0d9b96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37843-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37843-4.c?ref=890b9b966c9b155b36cf2811be8a289eeb0d9b96", "patch": "@@ -0,0 +1,13 @@\n+/* Test for stack alignment with sibcall optimization.  */\n+/* { dg-do compile { target { ilp32 && nonpic } } } */\n+/* { dg-options \"-O2 -msse2 -mpreferred-stack-boundary=4 -mstackrealign\" } */\n+/* { dg-final { scan-assembler-not \"andl\\[\\\\t \\]*\\\\$-16,\\[\\\\t \\]*%\\[re\\]?sp\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]*foo\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[\\\\t \\]*foo\" } } */\n+\n+extern int foo (void);\n+\n+int bar (void)\n+{\n+    return foo();\n+}"}]}