{"sha": "de7b57234525f55e5edfe8db77ca7ac2a943468f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU3YjU3MjM0NTI1ZjU1ZTVlZGZlOGRiNzdjYTdhYzJhOTQzNDY4Zg==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2016-12-02T15:22:43Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2016-12-02T15:22:43Z"}, "message": "Add support for ARMv8-M's Secure Extensions flag and intrinsics\n\n    gcc/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t        Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config.gcc (extra_headers): Added arm_cmse.h.\n\t* config/arm/arm-arches.def (ARM_ARCH):\n\t(armv8-m): Add FL2_CMSE.\n\t(armv8-m.main): Likewise.\n\t(armv8-m.main+dsp): Likewise.\n\t* config/arm/arm-c.c\n\t(arm_cpu_builtins): Added __ARM_FEATURE_CMSE macro.\n\t* config/arm/arm-flags.h: Define FL2_CMSE.\n\t* config/arm.c (arm_arch_cmse): New.\n\t(arm_option_override): New error for unsupported cmse target.\n\t* config/arm/arm.h (arm_arch_cmse): New.\n\t* config/arm/arm.opt (mcmse): New.\n\t* config/arm/arm_cmse.h: New file.\n\t* doc/invoke.texi (ARM Options): Add -mcmse.\n\t* doc/sourcebuild.texi (arm_cmse_ok): Add new effective target.\n\t* doc/extend.texi: Add ARMv8-M Security Extensions entry.\n\n    gcc/testsuite/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t        Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/cmse.exp: New.\n\t* gcc.target/arm/cmse/cmse-1.c: New.\n\t* gcc.target/arm/cmse/cmse-12.c: New.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_cmse_ok): New.\n\n    libgcc/ChangeLog:\n    2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/t-arm (HAVE_CMSE): New.\n\t* config/arm/cmse.c: New.\n\n\nCo-Authored-By: Thomas Preud'homme <thomas.preudhomme@arm.com>\n\nFrom-SVN: r243187", "tree": {"sha": "6811602f7f8aa090716356b734baf53b5076392b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6811602f7f8aa090716356b734baf53b5076392b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de7b57234525f55e5edfe8db77ca7ac2a943468f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7b57234525f55e5edfe8db77ca7ac2a943468f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de7b57234525f55e5edfe8db77ca7ac2a943468f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7b57234525f55e5edfe8db77ca7ac2a943468f/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1bca06f624245fde8a485deb2a589ba5d752537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bca06f624245fde8a485deb2a589ba5d752537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1bca06f624245fde8a485deb2a589ba5d752537"}], "stats": {"total": 560, "additions": 555, "deletions": 5}, "files": [{"sha": "f24e99eaea745bfdb2f1f99fb0ef3a06be414560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -1,3 +1,23 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config.gcc (extra_headers): Added arm_cmse.h.\n+\t* config/arm/arm-arches.def (ARM_ARCH):\n+\t(armv8-m): Add FL2_CMSE.\n+\t(armv8-m.main): Likewise.\n+\t(armv8-m.main+dsp): Likewise.\n+\t* config/arm/arm-c.c\n+\t(arm_cpu_builtins): Added __ARM_FEATURE_CMSE macro.\n+\t* config/arm/arm-flags.h: Define FL2_CMSE.\n+\t* config/arm.c (arm_arch_cmse): New.\n+\t(arm_option_override): New error for unsupported cmse target.\n+\t* config/arm/arm.h (arm_arch_cmse): New.\n+\t* config/arm/arm.opt (mcmse): New.\n+\t* config/arm/arm_cmse.h: New file.\n+\t* doc/invoke.texi (ARM Options): Add -mcmse.\n+\t* doc/sourcebuild.texi (arm_cmse_ok): Add new effective target.\n+\t* doc/extend.texi: Add ARMv8-M Security Extensions entry.\n+\n 2016-12-02  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c: Fix coding rule glitches."}, {"sha": "1fa34ac086ab322c3db4d39518da5ff2fba0dabb", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -323,7 +323,7 @@ arc*-*-*)\n arm*-*-*)\n \tcpu_type=arm\n \textra_objs=\"arm-builtins.o aarch-common.o\"\n-\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h\"\n+\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h arm_cmse.h\"\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\""}, {"sha": "71cabcc75e21ba62db5b7fcf640e0ec9c3685cb2", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -70,10 +70,10 @@ ARM_ARCH (\"armv8.2-a+fp16\", cortexa53,  8A,\n \t  ARM_FSET_MAKE (FL_CO_PROC | FL_CRC32 | FL_FOR_ARCH8A,\n \t\t\t FL2_FOR_ARCH8_2A | FL2_FP16INST))\n ARM_ARCH(\"armv8-m.base\", cortexm23, 8M_BASE,\n-\t ARM_FSET_MAKE_CPU1 (\t\t\t      FL_FOR_ARCH8M_BASE))\n+\t  ARM_FSET_MAKE (FL_FOR_ARCH8M_BASE, FL2_CMSE))\n ARM_ARCH(\"armv8-m.main\", cortexm7, 8M_MAIN,\n-\t ARM_FSET_MAKE_CPU1(FL_CO_PROC |\t      FL_FOR_ARCH8M_MAIN))\n+\t  ARM_FSET_MAKE (FL_CO_PROC | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, 8M_MAIN,\n-\t ARM_FSET_MAKE_CPU1(FL_CO_PROC | FL_ARCH7EM | FL_FOR_ARCH8M_MAIN))\n+\t  ARM_FSET_MAKE (FL_CO_PROC | FL_ARCH7EM | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))"}, {"sha": "b5921342f2e90224ed59064e3ebec06e7cc4cab8", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -77,6 +77,14 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n \n   def_or_undef_macro (pfile, \"__ARM_32BIT_STATE\", TARGET_32BIT);\n \n+  if (arm_arch8 && !arm_arch_notm)\n+    {\n+      if (arm_arch_cmse && use_cmse)\n+\tbuiltin_define_with_int_value (\"__ARM_FEATURE_CMSE\", 3);\n+      else\n+\tbuiltin_define (\"__ARM_FEATURE_CMSE\");\n+    }\n+\n   if (TARGET_ARM_FEATURE_LDREX)\n     builtin_define_with_int_value (\"__ARM_FEATURE_LDREX\",\n \t\t\t\t   TARGET_ARM_FEATURE_LDREX);"}, {"sha": "fb498380938326990335cb822b7c194e856948b7", "filename": "gcc/config/arm/arm-flags.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm-flags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm-flags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-flags.h?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -70,6 +70,7 @@\n #define FL2_ARCH8_2   (1U << 1)\t\t/* Architecture 8.2.  */\n #define FL2_FP16INST  (1U << 2)\t\t/* FP16 Instructions for ARMv8.2 and\n \t\t\t\t\t   later.  */\n+#define FL2_CMSE      (1U << 3)\t\t/* ARMv8-M Security Extensions.  */\n \n /* Flags that only effect tuning, not available instructions.  */\n #define FL_TUNE\t\t(FL_WBUF | FL_VFPV2 | FL_STRONG | FL_LDSCHED \\"}, {"sha": "0d7d38a73f18109da6a3aad62005689af1f1f8f1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -909,6 +909,9 @@ int arm_condexec_masklen = 0;\n /* Nonzero if chip supports the ARMv8 CRC instructions.  */\n int arm_arch_crc = 0;\n \n+/* Nonzero if chip supports the ARMv8-M security extensions.  */\n+int arm_arch_cmse = 0;\n+\n /* Nonzero if the core has a very small, high-latency, multiply unit.  */\n int arm_m_profile_small_mul = 0;\n \n@@ -3227,6 +3230,7 @@ arm_option_override (void)\n   arm_arch_no_volatile_ce = ARM_FSET_HAS_CPU1 (insn_flags, FL_NO_VOLATILE_CE);\n   arm_tune_cortex_a9 = (arm_tune == TARGET_CPU_cortexa9) != 0;\n   arm_arch_crc = ARM_FSET_HAS_CPU1 (insn_flags, FL_CRC32);\n+  arm_arch_cmse = ARM_FSET_HAS_CPU2 (insn_flags, FL2_CMSE);\n   arm_m_profile_small_mul = ARM_FSET_HAS_CPU1 (insn_flags, FL_SMALLMUL);\n   arm_fp16_inst = ARM_FSET_HAS_CPU2 (insn_flags, FL2_FP16INST);\n   if (arm_fp16_inst)\n@@ -3494,6 +3498,9 @@ arm_option_override (void)\n   if (target_slow_flash_data || target_pure_code)\n     arm_disable_literal_pool = true;\n \n+  if (use_cmse && !arm_arch_cmse)\n+    error (\"target CPU does not support ARMv8-M Security Extensions\");\n+\n   /* Disable scheduling fusion by default if it's not armv7 processor\n      or doesn't prefer ldrd/strd.  */\n   if (flag_schedule_fusion == 2"}, {"sha": "3d627436c5707d2c67edf69488cff76e6a80fd72", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -523,6 +523,9 @@ extern bool arm_disable_literal_pool;\n /* Nonzero if chip supports the ARMv8 CRC instructions.  */\n extern int arm_arch_crc;\n \n+/* Nonzero if chip supports the ARMv8-M Security Extensions.  */\n+extern int arm_arch_cmse;\n+\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif"}, {"sha": "a37faccbb02eef7cca9f0e2eea35289e7e898901", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -105,6 +105,10 @@ mfloat-abi=\n Target RejectNegative Joined Enum(float_abi_type) Var(arm_float_abi) Init(TARGET_DEFAULT_FLOAT_ABI)\n Specify if floating point hardware should be used.\n \n+mcmse\n+Target RejectNegative Var(use_cmse)\n+Specify that the compiler should target secure code as per ARMv8-M Security Extensions.\n+\n Enum\n Name(float_abi_type) Type(enum float_abi_type)\n Known floating-point ABIs (for use with the -mfloat-abi= option):"}, {"sha": "894343bb835b61e09c14668d45aa43a8693fd011", "filename": "gcc/config/arm/arm_cmse.h", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm_cmse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fconfig%2Farm%2Farm_cmse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cmse.h?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -0,0 +1,192 @@\n+/* ARMv8-M Secure Extensions intrinsics include file.\n+\n+   Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef _GCC_ARM_CMSE_H\n+#define _GCC_ARM_CMSE_H\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#if __ARM_FEATURE_CMSE & 1\n+\n+#include <stddef.h>\n+#include <stdint.h>\n+\n+#ifdef __ARM_BIG_ENDIAN\n+\n+typedef union {\n+  struct cmse_address_info {\n+#if __ARM_FEATURE_CMSE & 2\n+    unsigned idau_region:8;\n+    unsigned idau_region_valid:1;\n+    unsigned secure:1;\n+    unsigned nonsecure_readwrite_ok:1;\n+    unsigned nonsecure_read_ok:1;\n+#else\n+    unsigned :12;\n+#endif\n+    unsigned readwrite_ok:1;\n+    unsigned read_ok:1;\n+#if __ARM_FEATURE_CMSE & 2\n+    unsigned sau_region_valid:1;\n+#else\n+    unsigned :1;\n+#endif\n+    unsigned mpu_region_valid:1;\n+#if __ARM_FEATURE_CMSE & 2\n+    unsigned sau_region:8;\n+#else\n+    unsigned :8;\n+#endif\n+    unsigned mpu_region:8;\n+  } flags;\n+  unsigned value;\n+} cmse_address_info_t;\n+\n+#else\n+\n+typedef union {\n+  struct cmse_address_info {\n+    unsigned mpu_region:8;\n+#if __ARM_FEATURE_CMSE & 2\n+    unsigned sau_region:8;\n+#else\n+    unsigned :8;\n+#endif\n+    unsigned mpu_region_valid:1;\n+#if __ARM_FEATURE_CMSE & 2\n+    unsigned sau_region_valid:1;\n+#else\n+    unsigned :1;\n+#endif\n+    unsigned read_ok:1;\n+    unsigned readwrite_ok:1;\n+#if __ARM_FEATURE_CMSE & 2\n+    unsigned nonsecure_read_ok:1;\n+    unsigned nonsecure_readwrite_ok:1;\n+    unsigned secure:1;\n+    unsigned idau_region_valid:1;\n+    unsigned idau_region:8;\n+#else\n+    unsigned :12;\n+#endif\n+  } flags;\n+  unsigned value;\n+} cmse_address_info_t;\n+\n+#endif /* __ARM_BIG_ENDIAN */\n+\n+#define cmse_TT_fptr(p) (__cmse_TT_fptr ((__cmse_fptr)(p)))\n+\n+typedef void (*__cmse_fptr)(void);\n+\n+#define __CMSE_TT_ASM(flags) \\\n+{ \\\n+  cmse_address_info_t __result; \\\n+   __asm__ (\"tt\" # flags \" %0,%1\" \\\n+\t   : \"=r\"(__result) \\\n+\t   : \"r\"(__p) \\\n+\t   : \"memory\"); \\\n+  return __result; \\\n+}\n+\n+__extension__ static __inline __attribute__ ((__always_inline__))\n+cmse_address_info_t\n+__cmse_TT_fptr (__cmse_fptr __p)\n+__CMSE_TT_ASM ()\n+\n+__extension__ static __inline __attribute__ ((__always_inline__))\n+cmse_address_info_t\n+cmse_TT (void *__p)\n+__CMSE_TT_ASM ()\n+\n+#define cmse_TTT_fptr(p) (__cmse_TTT_fptr ((__cmse_fptr)(p)))\n+\n+__extension__ static __inline __attribute__ ((__always_inline__))\n+cmse_address_info_t\n+__cmse_TTT_fptr (__cmse_fptr __p)\n+__CMSE_TT_ASM (t)\n+\n+__extension__ static __inline __attribute__ ((__always_inline__))\n+cmse_address_info_t\n+cmse_TTT (void *__p)\n+__CMSE_TT_ASM (t)\n+\n+#if __ARM_FEATURE_CMSE & 2\n+\n+#define cmse_TTA_fptr(p) (__cmse_TTA_fptr ((__cmse_fptr)(p)))\n+\n+__extension__ static __inline __attribute__ ((__always_inline__))\n+cmse_address_info_t\n+__cmse_TTA_fptr (__cmse_fptr __p)\n+__CMSE_TT_ASM (a)\n+\n+__extension__ static __inline __attribute__ ((__always_inline__))\n+cmse_address_info_t\n+cmse_TTA (void *__p)\n+__CMSE_TT_ASM (a)\n+\n+#define cmse_TTAT_fptr(p) (__cmse_TTAT_fptr ((__cmse_fptr)(p)))\n+\n+__extension__ static __inline cmse_address_info_t\n+__attribute__ ((__always_inline__))\n+__cmse_TTAT_fptr (__cmse_fptr __p)\n+__CMSE_TT_ASM (at)\n+\n+__extension__ static __inline cmse_address_info_t\n+__attribute__ ((__always_inline__))\n+cmse_TTAT (void *__p)\n+__CMSE_TT_ASM (at)\n+\n+#define CMSE_AU_NONSECURE\t2\n+#define CMSE_MPU_NONSECURE\t16\n+#define CMSE_NONSECURE\t\t18\n+\n+#define cmse_nsfptr_create(p) ((typeof ((p))) ((intptr_t) (p) & ~1))\n+\n+#define cmse_is_nsfptr(p) (!((intptr_t) (p) & 1))\n+\n+#endif /* __ARM_FEATURE_CMSE & 2 */\n+\n+#define CMSE_MPU_UNPRIV\t\t4\n+#define CMSE_MPU_READWRITE\t1\n+#define CMSE_MPU_READ\t\t8\n+\n+__extension__ void *\n+cmse_check_address_range (void *, size_t, int);\n+\n+#define cmse_check_pointed_object(p, f) \\\n+  ((typeof ((p))) cmse_check_address_range ((p), sizeof (*(p)), (f)))\n+\n+#endif /* __ARM_FEATURE_CMSE & 1 */\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* _GCC_ARM_CMSE_H */"}, {"sha": "6c7fff2701a2f211a0f9d3b24da83b8b9dc7145d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -11794,6 +11794,7 @@ instructions, but allow the compiler to schedule those calls.\n * ARM iWMMXt Built-in Functions::\n * ARM C Language Extensions (ACLE)::\n * ARM Floating Point Status and Control Intrinsics::\n+* ARM ARMv8-M Security Extensions::\n * AVR Built-in Functions::\n * Blackfin Built-in Functions::\n * FR-V Built-in Functions::\n@@ -12639,6 +12640,31 @@ unsigned int __builtin_arm_get_fpscr ()\n void __builtin_arm_set_fpscr (unsigned int)\n @end smallexample\n \n+@node ARM ARMv8-M Security Extensions\n+@subsection ARM ARMv8-M Security Extensions\n+\n+GCC implements the ARMv8-M Security Extensions as described in the ARMv8-M\n+Security Extensions: Requiremenets on Development Tools Engineering\n+Specification, which can be found at\n+@uref{http://infocenter.arm.com/help/topic/com.arm.doc.ecm0359818/ECM0359818_armv8m_security_extensions_reqs_on_dev_tools_1_0.pdf}.\n+\n+As part of the Security Extensions GCC implements the intrinsics below.  FPTR\n+is used here to mean any function pointer type.\n+\n+@smallexample\n+cmse_address_info_t cmse_TT (void *)\n+cmse_address_info_t cmse_TT_fptr (FPTR)\n+cmse_address_info_t cmse_TTT (void *)\n+cmse_address_info_t cmse_TTT_fptr (FPTR)\n+cmse_address_info_t cmse_TTA (void *)\n+cmse_address_info_t cmse_TTA_fptr (FPTR)\n+cmse_address_info_t cmse_TTAT (void *)\n+cmse_address_info_t cmse_TTAT_fptr (FPTR)\n+void * cmse_check_address_range (void *, size_t, int)\n+typeof(p) cmse_nsfptr_create (FPTR p)\n+intptr_t cmse_is_nsfptr (FPTR)\n+@end smallexample\n+\n @node AVR Built-in Functions\n @subsection AVR Built-in Functions\n "}, {"sha": "034ae983468f450dbe10d092e5f7986e962a0771", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -649,7 +649,8 @@ Objective-C and Objective-C++ Dialects}.\n -mslow-flash-data @gol\n -masm-syntax-unified @gol\n -mrestrict-it @gol\n--mpure-code}\n+-mpure-code @gol\n+-mcmse}\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu} -mabsdata -maccumulate-args @gol\n@@ -15378,6 +15379,11 @@ Additionally, when compiling for ELF object format give all text sections the\n ELF processor-specific section attribute @code{SHF_ARM_PURECODE}.  This option\n is only available when generating non-pic code for ARMv7-M targets.\n \n+@item -mcmse\n+@opindex mcmse\n+Generate secure code as per the \"ARMv8-M Security Extensions: Requirements on\n+Development Tools Engineering Specification\", which can be found on\n+@url{http://infocenter.arm.com/help/topic/com.arm.doc.ecm0359818/ECM0359818_armv8m_security_extensions_reqs_on_dev_tools_1_0.pdf}.\n @end table\n \n @node AVR Options"}, {"sha": "e7fdd2dab7e262274b518c7de91622b898adbd3e", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -1674,6 +1674,10 @@ ARM target generates Thumb-1 code for @code{-mthumb} with\n ARM target for which divmod transform is disabled, if it supports hardware\n div instruction.\n \n+@item arm_cmse_ok\n+ARM target supports ARMv8-M Security Extensions, enabled by the @code{-mcmse}\n+option.\n+\n @end table\n \n @subsubsection AArch64-specific attributes"}, {"sha": "1e3d651d51d16dd658ff6361527323e054652ffa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -1,3 +1,12 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* gcc.target/arm/cmse/cmse.exp: New.\n+\t* gcc.target/arm/cmse/cmse-1.c: New.\n+\t* gcc.target/arm/cmse/cmse-12.c: New.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_cmse_ok): New.\n+\n 2016-12-02  Cesar Philippidis  <cesar@codesourcery.com>\n \t    James Norris  <jnorris@codesourcery.com>\n "}, {"sha": "d5b9a2d9d59569de170da814ae660e9fb2b943e7", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mcmse -fdump-rtl-expand\" }  */\n+\n+#include <arm_cmse.h>\n+\n+extern int a;\n+extern int bar (void);\n+\n+int foo (char * p)\n+{\n+  cmse_address_info_t cait;\n+\n+  cait = cmse_TT (&a);\n+  if (cait.flags.mpu_region)\n+    a++;\n+\n+  cait = cmse_TT_fptr (&bar);\n+  if (cait.flags.mpu_region)\n+    a+= bar ();\n+\n+  cait = cmse_TTA (&a);\n+  if (cait.flags.mpu_region)\n+    a++;\n+\n+  cait = cmse_TTA_fptr (&bar);\n+  if (cait.flags.mpu_region)\n+    a+= bar ();\n+\n+  cait = cmse_TTT (&a);\n+  if (cait.flags.mpu_region)\n+    a++;\n+\n+  cait = cmse_TTT_fptr (&bar);\n+  if (cait.flags.mpu_region)\n+    a+= bar ();\n+\n+  cait = cmse_TTAT (&a);\n+  if (cait.flags.mpu_region)\n+    a++;\n+\n+  cait = cmse_TTAT_fptr (&bar);\n+  if (cait.flags.mpu_region)\n+    a+= bar ();\n+\n+  p = (char *) cmse_check_address_range ((void *) p, sizeof (char), 0);\n+  p = (char *) cmse_check_address_range ((void *) p, sizeof (char),\n+\t\t\t\t\t CMSE_MPU_UNPRIV);\n+  p = (char *) cmse_check_address_range ((void *) p, sizeof (char),\n+\t\t\t\t\t CMSE_MPU_READWRITE);\n+  p = (char *) cmse_check_address_range ((void *) p, sizeof (char),\n+\t\t\t\t\t CMSE_MPU_UNPRIV | CMSE_MPU_READ);\n+  p = (char *) cmse_check_address_range ((void *) p, sizeof (char),\n+\t\t\t\t\t CMSE_AU_NONSECURE\n+\t\t\t\t\t | CMSE_MPU_NONSECURE);\n+  p = (char *) cmse_check_address_range ((void *) p, sizeof (char),\n+\t\t\t\t\t CMSE_NONSECURE | CMSE_MPU_UNPRIV);\n+\n+  p = (char *) cmse_check_pointed_object (p, CMSE_NONSECURE | CMSE_MPU_UNPRIV);\n+\n+  return a;\n+}\n+/* { dg-final { scan-assembler-times \"\\ttt \" 2 } } */\n+/* { dg-final { scan-assembler-times \"ttt \" 2 } } */\n+/* { dg-final { scan-assembler-times \"tta \" 2 } } */\n+/* { dg-final { scan-assembler-times \"ttat \" 2 } } */\n+/* { dg-final { scan-assembler-times \"bl.cmse_check_address_range\" 7 } } */\n+/* { dg-final { scan-assembler-not \"cmse_check_pointed_object\" } } */"}, {"sha": "87a2f1363a4e4bd817503e79e504980210e722c3", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-12.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-12.c?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" }  */\n+#include <arm_cmse.h>\n+\n+char *\n+foo (char * p)\n+{\n+  if (!cmse_is_nsfptr (p))\n+    return cmse_nsfptr_create (p);\n+}\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler-not \"cmse_is_nsfptr\" } } */\n+/* { dg-final { scan-assembler-not \"cmse_nsfptr_create\" } } */"}, {"sha": "f797dba1901720e04249d61078c1cbf2a3e436a9", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse.exp", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -0,0 +1,50 @@\n+#   Copyright (C) 1997-2016 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite for ARMv8-M Security Extensions using the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Exit immediately if the target does not support -mcmse.\n+if ![check_effective_target_arm_cmse_ok] then {\n+    return\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+set saved-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default \"assemble\"\n+\n+set saved-lto_torture_options ${LTO_TORTURE_OPTIONS}\n+set LTO_TORTURE_OPTIONS \"\"\n+\n+# These are for both baseline and mainline.\n+gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+set LTO_TORTURE_OPTIONS ${saved-lto_torture_options}\n+set dg-do-what-default ${saved-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}, {"sha": "0fc0bafa67d8d34ec74ce2d1d7a2323a375615cc", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -3916,6 +3916,19 @@ proc check_effective_target_arm_thumb1_cbz_ok {} {\n     }\n }\n \n+# Return 1 if this is an ARM target where ARMv8-M Security Extensions is\n+# available.\n+\n+proc check_effective_target_arm_cmse_ok {} {\n+    return [check_no_compiler_messages arm_cmse object {\n+\tint\n+\tfoo (void)\n+\t{\n+\t  asm (\"bxns r0\");\n+\t}\n+    } \"-mcmse\"];\n+}\n+\n # Return 1 if this compilation turns on string_ops_prefer_neon on.\n \n proc check_effective_target_arm_tune_string_ops_prefer_neon { } {"}, {"sha": "f323f4384afcf6a8d5c5bc745f9c981d6abfc2bb", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -1,3 +1,9 @@\n+2016-12-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/t-arm (HAVE_CMSE): New.\n+\t* config/arm/cmse.c: New.\n+\n 2016-11-28  Thomas Petazzoni <thomas.petazzoni@free-electrons.com>\n \n \tPR gcc/74748"}, {"sha": "fe3a22967c8536f2a8c05b58627f964d3fb1d345", "filename": "libgcc/config/arm/cmse.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/libgcc%2Fconfig%2Farm%2Fcmse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/libgcc%2Fconfig%2Farm%2Fcmse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fcmse.c?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -0,0 +1,108 @@\n+/* ARMv8-M Security Extensions routines.\n+   Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+#if __ARM_FEATURE_CMSE & 1\n+\n+#include <arm_cmse.h>\n+\n+/* ARM intrinsic function to perform a permission check on a given\n+   address range.  See ACLE changes for ARMv8-M.  */\n+\n+void *\n+cmse_check_address_range (void *p, size_t size, int flags)\n+{\n+  cmse_address_info_t permb, perme;\n+  char *pb = (char *) p, *pe;\n+\n+  /* Check if the range wraps around.  */\n+  if (UINTPTR_MAX - (uintptr_t) p < size)\n+    return NULL;\n+\n+  /* Check if an unknown flag is present.  */\n+  int known = CMSE_MPU_UNPRIV | CMSE_MPU_READWRITE | CMSE_MPU_READ;\n+  int known_secure_level = CMSE_MPU_UNPRIV;\n+#if __ARM_FEATURE_CMSE & 2\n+  known |= CMSE_AU_NONSECURE | CMSE_MPU_NONSECURE;\n+  known_secure_level |= CMSE_MPU_NONSECURE;\n+#endif\n+  if (flags & (~known))\n+    return NULL;\n+\n+  /* Execute the right variant of the TT instructions.  */\n+  pe = pb + size - 1;\n+  const int singleCheck = (((uintptr_t) pb ^ (uintptr_t) pe) < 32);\n+  switch (flags & known_secure_level)\n+    {\n+    case 0:\n+      permb = cmse_TT (pb);\n+      perme = singleCheck ? permb : cmse_TT (pe);\n+      break;\n+    case CMSE_MPU_UNPRIV:\n+      permb = cmse_TTT (pb);\n+      perme = singleCheck ? permb : cmse_TTT (pe);\n+      break;\n+#if __ARM_FEATURE_CMSE & 2\n+    case CMSE_MPU_NONSECURE:\n+      permb = cmse_TTA (pb);\n+      perme = singleCheck ? permb : cmse_TTA (pe);\n+      break;\n+    case CMSE_MPU_UNPRIV | CMSE_MPU_NONSECURE:\n+      permb = cmse_TTAT (pb);\n+      perme = singleCheck ? permb : cmse_TTAT (pe);\n+      break;\n+#endif\n+    default:\n+      /* Invalid flag, eg.  CMSE_MPU_NONSECURE specified but\n+\t __ARM_FEATURE_CMSE & 2 == 0.  */\n+      return NULL;\n+    }\n+\n+  /* Check that the range does not cross MPU, SAU, or IDAU boundaries.  */\n+  if (permb.value != perme.value)\n+    return NULL;\n+\n+  /* Check the permissions on the range.  */\n+  switch (flags & (~known_secure_level))\n+    {\n+#if __ARM_FEATURE_CMSE & 2\n+    case CMSE_MPU_READ | CMSE_MPU_READWRITE | CMSE_AU_NONSECURE:\n+    case\t\t CMSE_MPU_READWRITE | CMSE_AU_NONSECURE:\n+      return permb.flags.nonsecure_readwrite_ok\t? p : NULL;\n+    case CMSE_MPU_READ | CMSE_AU_NONSECURE:\n+      return permb.flags.nonsecure_read_ok\t? p : NULL;\n+    case CMSE_AU_NONSECURE:\n+      return permb.flags.secure\t\t\t? NULL : p;\n+#endif\n+    case CMSE_MPU_READ | CMSE_MPU_READWRITE:\n+    case\t\t CMSE_MPU_READWRITE:\n+      return permb.flags.readwrite_ok\t\t? p : NULL;\n+    case CMSE_MPU_READ:\n+      return permb.flags.read_ok\t\t? p : NULL;\n+    default:\n+      return NULL;\n+    }\n+}\n+\n+\n+#endif /* __ARM_FEATURE_CMSE & 1.  */"}, {"sha": "5618143bfd0f02b170db3f9e4c0a15cecb403cec", "filename": "libgcc/config/arm/t-arm", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de7b57234525f55e5edfe8db77ca7ac2a943468f/libgcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de7b57234525f55e5edfe8db77ca7ac2a943468f/libgcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-arm?ref=de7b57234525f55e5edfe8db77ca7ac2a943468f", "patch": "@@ -1,3 +1,15 @@\n LIB1ASMSRC = arm/lib1funcs.S\n LIB1ASMFUNCS = _thumb1_case_sqi _thumb1_case_uqi _thumb1_case_shi \\\n \t_thumb1_case_uhi _thumb1_case_si\n+\n+HAVE_CMSE:=$(findstring __ARM_FEATURE_CMSE,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n+ifneq ($(shell $(gcc_compile_bare) -E -mcmse - </dev/null 2>/dev/null),)\n+CMSE_OPTS:=-mcmse\n+endif\n+\n+ifdef HAVE_CMSE\n+libgcc-objects += cmse.o cmse_nonsecure_call.o\n+\n+cmse.o: $(srcdir)/config/arm/cmse.c\n+\t$(gcc_compile) -c $(CMSE_OPTS) $<\n+endif"}]}