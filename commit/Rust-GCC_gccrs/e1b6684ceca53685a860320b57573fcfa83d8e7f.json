{"sha": "e1b6684ceca53685a860320b57573fcfa83d8e7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFiNjY4NGNlY2E1MzY4NWE4NjAzMjBiNTc1NzNmY2ZhODNkOGU3Zg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-08T15:44:18Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-08T15:44:18Z"}, "message": "gansidecl.h (__attribute__, [...]): Delete.\n\n\t* gansidecl.h (__attribute__, ATTRIBUTE_UNUSED_LABEL,\n\tATTRIBUTE_UNUSED, ATTRIBUTE_NORETURN, ATTRIBUTE_PRINTF,\n\tATTRIBUTE_PRINTF_1, ATTRIBUTE_PRINTF_2, ATTRIBUTE_PRINTF_3,\n\tATTRIBUTE_PRINTF_4, ATTRIBUTE_PRINTF_5, GENERIC_PTR): Delete.\n\n\t* c-decl.c (field_decl_cmp): Use PTR instead of GENERIC_PTR.\n\n\t* cccp.c (pcfinclude): Likewise.\n\n\t* global.c (allocno_compare): Likewise.\n\n\t* haifa-sched.c (rank_for_schedule): Likewise.\n\n\t* local-alloc.c (qty_sugg_compare_1, qty_compare_1): Likewise.\n\n\t* reload1.c (hard_reg_use_compare, reload_reg_class_lower): Likewise.\n\n\t* stupid.c (stupid_reg_compare): Likewise.\n\n\t* tree.c (_obstack_allocated_p): Likewise.\n\n\t* varray.h (varray_data_tag, VARRAY_GENERIC_PTR_INIT): Likewise.\n\nFrom-SVN: r29208", "tree": {"sha": "4da5290aefe8f596b8887e4a939eeec9d6a6d343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da5290aefe8f596b8887e4a939eeec9d6a6d343"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1b6684ceca53685a860320b57573fcfa83d8e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b6684ceca53685a860320b57573fcfa83d8e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b6684ceca53685a860320b57573fcfa83d8e7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b6684ceca53685a860320b57573fcfa83d8e7f/comments", "author": null, "committer": null, "parents": [{"sha": "98cc50509619f1192a03c0d8f57eebc85cb80a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cc50509619f1192a03c0d8f57eebc85cb80a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cc50509619f1192a03c0d8f57eebc85cb80a29"}], "stats": {"total": 118, "additions": 54, "deletions": 64}, "files": [{"sha": "08c2e15b35aef2082aca3dbfb7315b29222aafb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -1,3 +1,28 @@\n+Wed Sep  8 11:40:47 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gansidecl.h (__attribute__, ATTRIBUTE_UNUSED_LABEL,\n+\tATTRIBUTE_UNUSED, ATTRIBUTE_NORETURN, ATTRIBUTE_PRINTF,\n+\tATTRIBUTE_PRINTF_1, ATTRIBUTE_PRINTF_2, ATTRIBUTE_PRINTF_3,\n+\tATTRIBUTE_PRINTF_4, ATTRIBUTE_PRINTF_5, GENERIC_PTR): Delete.\n+\n+\t* c-decl.c (field_decl_cmp): Use PTR instead of GENERIC_PTR.\n+\n+\t* cccp.c (pcfinclude): Likewise.\n+\n+\t* global.c (allocno_compare): Likewise.\n+\t\n+\t* haifa-sched.c (rank_for_schedule): Likewise.\n+\n+\t* local-alloc.c (qty_sugg_compare_1, qty_compare_1): Likewise.\n+\n+\t* reload1.c (hard_reg_use_compare, reload_reg_class_lower): Likewise.\n+\n+\t* stupid.c (stupid_reg_compare): Likewise.\n+\n+\t* tree.c (_obstack_allocated_p): Likewise.\n+\n+\t* varray.h (varray_data_tag, VARRAY_GENERIC_PTR_INIT): Likewise.\n+\n 1999-09-08  Bruce Korb  autogen@linuxbox.com\n \n \t* gcc/ch/Makefile.in: Give the hapless gperf user a hint about"}, {"sha": "923bf0bd249a1a09e7c1da5658f8cea8c3547bff", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -358,7 +358,7 @@ static tree lookup_tag_reverse\t\tPROTO((tree));\n static tree grokdeclarator\t\tPROTO((tree, tree, enum decl_context,\n \t\t\t\t\t       int));\n static tree grokparms\t\t\tPROTO((tree, int));\n-static int field_decl_cmp\t\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n+static int field_decl_cmp\t\tPROTO((const PTR, const PTR));\n static void layout_array_type\t\tPROTO((tree));\n \f\n /* C-specific option variables.  */\n@@ -5453,8 +5453,8 @@ grokfield (filename, line, declarator, declspecs, width)\n \n static int\n field_decl_cmp (xp, yp)\n-     const GENERIC_PTR xp;\n-     const GENERIC_PTR yp;\n+     const PTR xp;\n+     const PTR yp;\n {\n   tree *x = (tree *)xp, *y = (tree *)yp;\n "}, {"sha": "5c90cfaf39b215ced2a35daf1caf8f4360f31f30", "filename": "gcc/cccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -5517,7 +5517,7 @@ pcfinclude (buf, name, op)\n       cp += 4 - ((size_t) cp & 3);\n     \n     /* Now get the string.  */\n-    str = (STRINGDEF *) (GENERIC_PTR) cp;\n+    str = (STRINGDEF *) (PTR) cp;\n     string_start = cp += sizeof (STRINGDEF);\n     \n     for (; *cp; cp++)\t\t/* skip the string */\n@@ -5552,7 +5552,7 @@ pcfinclude (buf, name, op)\n     else\n       /* Otherwise, for each key, */\n       for (; nkeys--; free (tmpbuf.buf), cp = endofthiskey + 1) {\n-\tKEYDEF *kp = (KEYDEF *) (GENERIC_PTR) cp;\n+\tKEYDEF *kp = (KEYDEF *) (PTR) cp;\n \tHASHNODE *hp;\n \tU_CHAR *bp;\n \t"}, {"sha": "e864f2f090a7094a98b911404b2f396e1aa89457", "filename": "gcc/gansidecl.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fgansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fgansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgansidecl.h?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -47,41 +47,6 @@ Boston, MA 02111-1307, USA.  */\n # define inline __inline__  /* Modern gcc can use `__inline__' freely. */\n #endif /* GCC >= 2.7 */\n \n-#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n-# define __attribute__(x)\n-#endif\n-\n-#ifndef ATTRIBUTE_UNUSED_LABEL\n-# if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 93)\n-#  define ATTRIBUTE_UNUSED_LABEL\n-# else\n-#  define ATTRIBUTE_UNUSED_LABEL ATTRIBUTE_UNUSED\n-# endif /* GNUC < 2.93 */\n-#endif /* ATTRIBUTE_UNUSED_LABEL */\n-\n-#ifndef ATTRIBUTE_UNUSED\n-#define ATTRIBUTE_UNUSED __attribute__ ((__unused__))\n-#endif /* ATTRIBUTE_UNUSED */\n-\n-#ifndef ATTRIBUTE_NORETURN\n-#define ATTRIBUTE_NORETURN __attribute__ ((__noreturn__))\n-#endif /* ATTRIBUTE_NORETURN */\n-\n-#ifndef ATTRIBUTE_PRINTF\n-#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((format (__printf__, m, n)))\n-#define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)\n-#define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)\n-#define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)\n-#define ATTRIBUTE_PRINTF_4 ATTRIBUTE_PRINTF(4, 5)\n-#define ATTRIBUTE_PRINTF_5 ATTRIBUTE_PRINTF(5, 6)\n-#endif /* ATTRIBUTE_PRINTF */\n-\n-#ifndef NULL\n-#define NULL 0\n-#endif\n-\n-#define GENERIC_PTR PTR\n-\n #ifndef NULL_PTR\n #define NULL_PTR ((PTR) 0)\n #endif"}, {"sha": "1aa023398a4b4323b2c590b5c95417f8e0e46199", "filename": "gcc/global.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -256,7 +256,7 @@ static int n_regs_set;\n \n static HARD_REG_SET eliminable_regset;\n \n-static int allocno_compare\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n+static int allocno_compare\tPROTO((const PTR, const PTR));\n static void global_conflicts\tPROTO((void));\n static void expand_preferences\tPROTO((void));\n static void prune_preferences\tPROTO((void));\n@@ -590,8 +590,8 @@ global_alloc (file)\n \n static int\n allocno_compare (v1p, v2p)\n-     const GENERIC_PTR v1p;\n-     const GENERIC_PTR v2p;\n+     const PTR v1p;\n+     const PTR v2p;\n {\n   int v1 = *(int *)v1p, v2 = *(int *)v2p;\n   /* Note that the quotient will never be bigger than"}, {"sha": "079e290c3339c18d3f157e7476a5e2c09d0ed77b", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -444,7 +444,7 @@ static void sched_analyze_2 PROTO ((rtx, rtx));\n static void sched_analyze_insn PROTO ((rtx, rtx, rtx));\n static void sched_analyze PROTO ((rtx, rtx));\n static void sched_note_set PROTO ((rtx, int));\n-static int rank_for_schedule PROTO ((const GENERIC_PTR, const GENERIC_PTR));\n+static int rank_for_schedule PROTO ((const PTR, const PTR));\n static void swap_sort PROTO ((rtx *, int));\n static void queue_insn PROTO ((rtx, int));\n static int schedule_insn PROTO ((rtx, rtx *, int, int));\n@@ -4066,8 +4066,8 @@ while (0)\n \n static int\n rank_for_schedule (x, y)\n-     const GENERIC_PTR x;\n-     const GENERIC_PTR y;\n+     const PTR x;\n+     const PTR y;\n {\n   rtx tmp = *(rtx *)y;\n   rtx tmp2 = *(rtx *)x;"}, {"sha": "c05a664886a8d6d74f16f3681415f0f3e3727847", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -251,9 +251,9 @@ static void update_equiv_regs\tPROTO((void));\n static void no_equiv\t\tPROTO((rtx, rtx));\n static void block_alloc\t\tPROTO((int));\n static int qty_sugg_compare    \tPROTO((int, int));\n-static int qty_sugg_compare_1\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n+static int qty_sugg_compare_1\tPROTO((const PTR, const PTR));\n static int qty_compare    \tPROTO((int, int));\n-static int qty_compare_1\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n+static int qty_compare_1\tPROTO((const PTR, const PTR));\n static int combine_regs\t\tPROTO((rtx, rtx, int, int, rtx, int));\n static int reg_meets_class_p\tPROTO((int, enum reg_class));\n static void update_qty_class\tPROTO((int, int));\n@@ -1522,8 +1522,8 @@ qty_compare (q1, q2)\n \n static int\n qty_compare_1 (q1p, q2p)\n-     const GENERIC_PTR q1p;\n-     const GENERIC_PTR q2p;\n+     const PTR q1p;\n+     const PTR q2p;\n {\n   register int q1 = *(int *)q1p, q2 = *(int *)q2p;\n   register int tem = QTY_CMP_PRI (q2) - QTY_CMP_PRI (q1);\n@@ -1562,8 +1562,8 @@ qty_sugg_compare (q1, q2)\n \n static int\n qty_sugg_compare_1 (q1p, q2p)\n-     const GENERIC_PTR q1p;\n-     const GENERIC_PTR q2p;\n+     const PTR q1p;\n+     const PTR q2p;\n {\n   register int q1 = *(int *)q1p, q2 = *(int *)q2p;\n   register int tem = QTY_CMP_SUGG (q1) - QTY_CMP_SUGG (q2);"}, {"sha": "05850def4bcb8fa3a5810a73c48f831773846ca1", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -406,12 +406,12 @@ static void spill_hard_reg\t\tPROTO((int, FILE *, int));\n static int finish_spills\t\tPROTO((int, FILE *));\n static void ior_hard_reg_set\t\tPROTO((HARD_REG_SET *, HARD_REG_SET *));\n static void scan_paradoxical_subregs\tPROTO((rtx));\n-static int hard_reg_use_compare\t\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n+static int hard_reg_use_compare\t\tPROTO((const PTR, const PTR));\n static void count_pseudo\t\tPROTO((struct hard_reg_n_uses *, int));\n static void order_regs_for_reload\tPROTO((struct insn_chain *));\n static void reload_as_needed\t\tPROTO((int));\n static void forget_old_reloads_1\tPROTO((rtx, rtx));\n-static int reload_reg_class_lower\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n+static int reload_reg_class_lower\tPROTO((const PTR, const PTR));\n static void mark_reload_reg_in_use\tPROTO((int, int, enum reload_type,\n \t\t\t\t\t       enum machine_mode));\n static void clear_reload_reg_in_use\tPROTO((int, int, enum reload_type,\n@@ -4047,8 +4047,8 @@ scan_paradoxical_subregs (x)\n \f\n static int\n hard_reg_use_compare (p1p, p2p)\n-     const GENERIC_PTR p1p;\n-     const GENERIC_PTR p2p;\n+     const PTR p1p;\n+     const PTR p2p;\n {\n   struct hard_reg_n_uses *p1 = (struct hard_reg_n_uses *)p1p;\n   struct hard_reg_n_uses *p2 = (struct hard_reg_n_uses *)p2p;\n@@ -4549,8 +4549,8 @@ static int reload_nregs[MAX_RELOADS];\n \n static int\n reload_reg_class_lower (r1p, r2p)\n-     const GENERIC_PTR r1p;\n-     const GENERIC_PTR r2p;\n+     const PTR r1p;\n+     const PTR r2p;\n {\n   register int r1 = *(short *)r1p, r2 = *(short *)r2p;\n   register int t;"}, {"sha": "b61f7444ccc8974d88a6182e63d349e995105eb5", "filename": "gcc/stupid.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -124,7 +124,7 @@ static HARD_REG_SET *after_insn_hard_regs;\n #define MARK_LIVE_AFTER(INSN,REGNO)  \\\n   SET_HARD_REG_BIT (after_insn_hard_regs[INSN_SUID (INSN)], (REGNO))\n \n-static int stupid_reg_compare\tPROTO((const GENERIC_PTR,const GENERIC_PTR));\n+static int stupid_reg_compare\tPROTO((const PTR,const PTR));\n static int stupid_find_reg\tPROTO((int, enum reg_class, enum machine_mode,\n \t\t\t\t       int, int, int));\n static void stupid_mark_refs\tPROTO((rtx, struct insn_chain *));\n@@ -443,8 +443,8 @@ stupid_life_analysis (f, nregs, file)\n \n static int\n stupid_reg_compare (r1p, r2p)\n-     const GENERIC_PTR r1p;\n-     const GENERIC_PTR r2p;\n+     const PTR r1p;\n+     const PTR r2p;\n {\n   register int r1 = *(int *)r1p, r2 = *(int *)r2p;\n   register int len1 = reg_where_dead[r1] - REG_WHERE_BORN (r1);"}, {"sha": "a1ad924816b3eb397d322e6447f849e20026562c", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -45,7 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n /* obstack.[ch] explicitly declined to prototype this. */\n-extern int _obstack_allocated_p PROTO ((struct obstack *h, GENERIC_PTR obj));\n+extern int _obstack_allocated_p PROTO ((struct obstack *h, PTR obj));\n \n /* Tree nodes of permanent duration are allocated in this obstack.\n    They are the identifier nodes, and everything outside of"}, {"sha": "5a889bf9dd6d263cca0371cffd1f845443c76278", "filename": "gcc/varray.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b6684ceca53685a860320b57573fcfa83d8e7f/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=e1b6684ceca53685a860320b57573fcfa83d8e7f", "patch": "@@ -66,7 +66,7 @@ typedef union varray_data_tag {\n   unsigned long\t\t ul[1];\n   HOST_WIDE_INT\t\t hint[1];\n   unsigned HOST_WIDE_INT uhint[1];\n-  GENERIC_PTR\t\t generic[1];\n+  PTR\t\t\t generic[1];\n   char\t\t\t *cptr[1];\n   struct rtx_def\t *rtx[1];\n   struct rtvec_def\t *rtvec[1];\n@@ -121,7 +121,7 @@ extern varray_type varray_init\tPROTO ((size_t, size_t, const char *));\n   va = varray_init (num, sizeof (unsigned HOST_WIDE_INT), name)\n \n #define VARRAY_GENERIC_PTR_INIT(va, num, name) \\\n-  va = varray_init (num, sizeof (GENERIC_PTR), name)\n+  va = varray_init (num, sizeof (PTR), name)\n \n #define VARRAY_CHAR_PTR_INIT(va, num, name) \\\n   va = varray_init (num, sizeof (char *), name)"}]}