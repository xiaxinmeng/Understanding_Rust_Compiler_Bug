{"sha": "abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjOGI0ZDkwZWNjZGRkNWE5NjFmZDZhNGI2MDg0ODU2MmI0YTJmMQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2007-10-10T15:46:12Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2007-10-10T15:46:12Z"}, "message": "ra-conflict.c (partial_bitnum, max_bitnum): Change type of variables to HOST_WIDE_INT.\n\n\t* ra-conflict.c (partial_bitnum, max_bitnum): Change type of variables\n\tto HOST_WIDE_INT.\n\t(conflict_p, set_conflict, set_conflicts): Likewise.\n\t* global.c (global_alloc): Likewise.\n\t* ra.h: Update prototypes.\n\nFrom-SVN: r129211", "tree": {"sha": "8c530bcc582dae464a7d50fbe57747e6fae1b26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c530bcc582dae464a7d50fbe57747e6fae1b26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c456e6f17ced807b3c80a5f4578fb8711e604056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c456e6f17ced807b3c80a5f4578fb8711e604056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c456e6f17ced807b3c80a5f4578fb8711e604056"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "e659b1ebf7528b7df2760b083fb3a0ff6c2cfb19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "patch": "@@ -1,3 +1,11 @@\n+2007-10-10  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* ra-conflict.c (partial_bitnum, max_bitnum): Change type of variables\n+\tto HOST_WIDE_INT.\n+\t(conflict_p, set_conflict, set_conflicts): Likewise.\n+\t* global.c (global_alloc): Likewise.\n+\t* ra.h: Update prototypes.\n+\n 2007-10-10  Wolfgang Gellerich  <gellerich@de.ibm.com>\n \n \t* opth-gen.awk: Fixed generation of comment stating the origin"}, {"sha": "1dc63d350fe67ed84fd6f20032c5e492eedf1cb4", "filename": "gcc/global.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "patch": "@@ -389,7 +389,7 @@ global_alloc (void)\n       }\n \n   allocno = XCNEWVEC (struct allocno, max_allocno);\n-  partial_bitnum = XNEWVEC (int, max_allocno);\n+  partial_bitnum = XNEWVEC (HOST_WIDE_INT, max_allocno);\n   num_allocnos_per_blk = XCNEWVEC (int, max_blk + 1);\n \n   /* ...so we can sort them in the order we want them to receive\n@@ -432,12 +432,14 @@ global_alloc (void)\n     }\n \n #ifdef ENABLE_CHECKING\n-  gcc_assert (max_bitnum <= ((max_allocno * (max_allocno - 1)) / 2));\n+  gcc_assert (max_bitnum <=\n+\t      (((HOST_WIDE_INT) max_allocno *\n+\t\t((HOST_WIDE_INT) max_allocno - 1)) / 2));\n #endif\n \n   if (dump_file)\n     {\n-      int num_bits, num_bytes, actual_bytes;\n+      HOST_WIDE_INT num_bits, num_bytes, actual_bytes;\n \n       fprintf (dump_file, \"## max_blk:     %d\\n\", max_blk);\n       fprintf (dump_file, \"## max_regno:   %d\\n\", max_regno);\n@@ -447,21 +449,23 @@ global_alloc (void)\n       num_bytes = CEIL (num_bits, 8);\n       actual_bytes = num_bytes;\n       fprintf (dump_file, \"## Compressed triangular bitmatrix size: \");\n-      fprintf (dump_file, \"%d bits, %d bytes\\n\", num_bits, num_bytes);\n+      fprintf (dump_file, HOST_WIDE_INT_PRINT_DEC \" bits, \", num_bits);\n+      fprintf (dump_file, HOST_WIDE_INT_PRINT_DEC \" bytes\\n\", num_bytes);\n \n-      num_bits = (max_allocno * (max_allocno - 1)) / 2;\n+      num_bits = ((HOST_WIDE_INT) max_allocno *\n+\t\t  ((HOST_WIDE_INT) max_allocno - 1)) / 2;\n       num_bytes = CEIL (num_bits, 8);\n       fprintf (dump_file, \"## Standard triangular bitmatrix size:   \");\n-      fprintf (dump_file, \"%d bits, %d bytes [%.2f%%]\\n\",\n-\t       num_bits, num_bytes,\n-\t       100.0 * ((double) actual_bytes / (double) num_bytes));\n+      fprintf (dump_file, HOST_WIDE_INT_PRINT_DEC \" bits, \", num_bits);\n+      fprintf (dump_file, HOST_WIDE_INT_PRINT_DEC \" bytes [%.2f%%]\\n\",\n+\t       num_bytes, 100.0 * ((double) actual_bytes / (double) num_bytes));\n \n-      num_bits = max_allocno * max_allocno;\n+      num_bits = (HOST_WIDE_INT) max_allocno * (HOST_WIDE_INT) max_allocno;\n       num_bytes = CEIL (num_bits, 8);\n       fprintf (dump_file, \"## Square bitmatrix size:                \");\n-      fprintf (dump_file, \"%d bits, %d bytes [%.2f%%]\\n\",\n-\t       num_bits, num_bytes,\n-\t       100.0 * ((double) actual_bytes / (double) num_bytes));\n+      fprintf (dump_file, HOST_WIDE_INT_PRINT_DEC \" bits, \", num_bits);\n+      fprintf (dump_file, HOST_WIDE_INT_PRINT_DEC \" bytes [%.2f%%]\\n\",\n+\t       num_bytes, 100.0 * ((double) actual_bytes / (double) num_bytes));\n     }\n \n   /* Calculate amount of usage of each hard reg by pseudos"}, {"sha": "e40f484b5df96cfbe2b374d6ef3d120aad899812", "filename": "gcc/ra-conflict.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2Fra-conflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2Fra-conflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-conflict.c?ref=abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "patch": "@@ -49,8 +49,8 @@ int max_allocno;\n struct allocno *allocno;\n HOST_WIDEST_FAST_INT *conflicts;\n int *reg_allocno;\n-int *partial_bitnum;\n-int max_bitnum;\n+HOST_WIDE_INT *partial_bitnum;\n+HOST_WIDE_INT max_bitnum;\n alloc_pool adjacency_pool;\n adjacency_t **adjacency;\n \n@@ -70,7 +70,7 @@ DEF_VEC_ALLOC_P(df_ref_t,heap);\n bool\n conflict_p (int allocno1, int allocno2)\n {\n-  int bitnum;\n+  HOST_WIDE_INT bitnum;\n   HOST_WIDEST_FAST_INT word, mask;\n \n #ifdef ENABLE_CHECKING\n@@ -104,7 +104,7 @@ conflict_p (int allocno1, int allocno2)\n static void\n set_conflict (int allocno1, int allocno2)\n {\n-  int bitnum, index;\n+  HOST_WIDE_INT bitnum, index;\n   HOST_WIDEST_FAST_INT word, mask;\n \n #ifdef ENABLE_CHECKING\n@@ -146,9 +146,9 @@ static void\n set_conflicts (int allocno1, sparseset live)\n {\n   int i;\n-  int bitnum, index;\n+  HOST_WIDE_INT bitnum, index;\n   HOST_WIDEST_FAST_INT word, mask;\n-  int partial_bitnum_allocno1;\n+  HOST_WIDE_INT partial_bitnum_allocno1;\n \n #ifdef ENABLE_CHECKING\n   gcc_assert (allocno1 >= 0 && allocno1 < max_allocno);"}, {"sha": "d35d2013d6c4e9ff9b8df3fb1a1836c3d2943bb5", "filename": "gcc/ra.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2Fra.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc8b4d90eccddd5a961fd6a4b60848562b4a2f1/gcc%2Fra.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.h?ref=abc8b4d90eccddd5a961fd6a4b60848562b4a2f1", "patch": "@@ -99,11 +99,11 @@ extern int *reg_allocno;\n /* Precalculated partial bit number in the compressed triangular bit matrix.\n    For two allocnos, the final bit number is: partial_bitnum[LOW] + HIGH.  */\n \n-extern int *partial_bitnum;\n+extern HOST_WIDE_INT *partial_bitnum;\n \n /* Size in bits of the compressed triangular bit matrix.  */\n \n-extern int max_bitnum;\n+extern HOST_WIDE_INT max_bitnum;\n \n /* The pool to allocate the adjacency list elements from.  */\n "}]}