{"sha": "bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkMWY0NjI2ZTg0NWYwYmViZTcxZDJlNGIyYTgyZjdmNDU4ZTA5Mw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2004-12-04T06:45:13Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2004-12-04T06:45:13Z"}, "message": "PR c++/17011, c++/17971\n\n\tPR c++/17011, c++/17971\n\t* pt.c (tsubst_copy) <FIELD_DECL case>: Check and diagnose\n\tinvalid field.\n\t(tsubst_copy_and_build) <COMPONENT_REF case>: Check\n\terror_mark_node after member substitution.\n\t* semantics.c (finish_id_expression): Call\n\tfinish_non_static_data_member for non-dependent FIELD_DECL.\n\n\t* g++.dg/template/error15.C: Adjust expected error.\n\t* g++.dg/template/instantiate3.C: Likewise.\n\nFrom-SVN: r91720", "tree": {"sha": "6a568559d4f39ae6b4365e235eaa28b995c71769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a568559d4f39ae6b4365e235eaa28b995c71769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/comments", "author": null, "committer": null, "parents": [{"sha": "73f8783add09b7805c9f04a3033ce48fc7255163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f8783add09b7805c9f04a3033ce48fc7255163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f8783add09b7805c9f04a3033ce48fc7255163"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "0ffc52dafa30f38785243ba80adb077970ab2f95", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "patch": "@@ -1,3 +1,13 @@\n+2004-12-04  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/17011, c++/17971\n+\t* pt.c (tsubst_copy) <FIELD_DECL case>: Check and diagnose\n+\tinvalid field.\n+\t(tsubst_copy_and_build) <COMPONENT_REF case>: Check\n+\terror_mark_node after member substitution.\n+\t* semantics.c (finish_id_expression): Call\n+\tfinish_non_static_data_member for non-dependent FIELD_DECL.\n+\n 2004-12-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/18782"}, {"sha": "2a1a5b330484ec293f6b150c09093725b9091250", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "patch": "@@ -7702,7 +7702,16 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  ctx = tsubst_aggr_type (DECL_CONTEXT (t), args, complain, in_decl,\n \t\t\t\t  /*entering_scope=*/1);\n \t  if (ctx != DECL_CONTEXT (t))\n-\t    return lookup_field (ctx, DECL_NAME (t), 0, false);\n+\t    {\n+\t      tree r = lookup_field (ctx, DECL_NAME (t), 0, false);\n+\t      if (!r)\n+\t\t{\n+\t\t  if (complain & tf_error)\n+\t\t    error (\"using invalid field %qD\", t);\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      return r;\n+\t    }\n \t}\n       \n       return t;\n@@ -8693,7 +8702,9 @@ tsubst_copy_and_build (tree t,\n \telse\n \t  member = tsubst_copy (member, args, complain, in_decl);\n \n-\tif (!CLASS_TYPE_P (TREE_TYPE (object)))\n+\tif (member == error_mark_node)\n+\t  return error_mark_node;\n+\telse if (!CLASS_TYPE_P (TREE_TYPE (object)))\n \t  {\n \t    if (TREE_CODE (member) == BIT_NOT_EXPR)\n \t      return finish_pseudo_destructor_expr (object, "}, {"sha": "7f399b48e3a9ce5f335ce7613430e93b637066ee", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "patch": "@@ -2571,6 +2571,12 @@ finish_id_expression (tree id_expression,\n \t  if (TREE_CODE (decl) == VAR_DECL\n \t      || TREE_CODE (decl) == PARM_DECL)\n \t    return decl;\n+\t  /* The same is true for FIELD_DECL, but we also need to\n+\t     make sure that the syntax is correct.  */\n+\t  else if (TREE_CODE (decl) == FIELD_DECL)\n+\t    return finish_non_static_data_member\n+\t\t     (decl, current_class_ref,\n+\t\t      /*qualifying_scope=*/NULL_TREE);\n \t  return id_expression;\n \t}\n "}, {"sha": "d44121cb353bae50f0549ad23ed760c7ae0ea8e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "patch": "@@ -1,3 +1,9 @@\n+2004-12-04  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/17011, c++/17971\n+\t* g++.dg/template/error15.C: Adjust expected error.\n+\t* g++.dg/template/instantiate3.C: Likewise.\n+\n 2004-12-03  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/altivec-18.c: Fix for darwin"}, {"sha": "6bd1f77e874b392f057bd5c1cb4a39d0415f2519", "filename": "gcc/testsuite/g++.dg/template/error15.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror15.C?ref=bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "patch": "@@ -11,14 +11,14 @@ protected:\n     \n   A<T> a; // { dg-error \"\" }\n     \n-  void f(const A<T> * a1 = &a);\n+  void f(const A<T> * a1 = &a); // { dg-error \"this location\" }\n     \n   void g(void);\n };\n \n template <class T>\n void B<T>::g(void) {\n-  f(); // { dg-error \"\" }\n+  f();\n }\n \n-template class B<long>; // { dg-error \"\" }\n+template class B<long>;"}, {"sha": "4644fd02b550862ed7c249ad810e595a60b7752b", "filename": "gcc/testsuite/g++.dg/template/instantiate3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad1f4626e845f0bebe71d2e4b2a82f7f458e093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate3.C?ref=bad1f4626e845f0bebe71d2e4b2a82f7f458e093", "patch": "@@ -10,7 +10,7 @@ template <class TYPE>\n struct ACE_Cleanup_Adapter\n {\n   TYPE &object ()\n-  { return object_; }\t// { dg-error \"not declared|reported\" }\n+  { return object_; }\t// { dg-error \"invalid\" }\n   TYPE object_;\t\t// { dg-error \"incomplete type\" }\n };\n "}]}