{"sha": "85ab9d2311751cffa17d1ae495ff57941060b5cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhYjlkMjMxMTc1MWNmZmExN2QxYWU0OTVmZjU3OTQxMDYwYjVjZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-11-02T01:42:22Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-11-02T01:42:22Z"}, "message": "re PR libstdc++/7926 (i486 instructions in header files make c++ programs crash on i386)\n\n\n2002-11-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/7926\n\t* configure.target: Simplify.\n\t* config/cpu/i386/atomicity.h: Remove.\n\t* config/cpu/i386: Remove.\n\t* config/cpu/arm/atomicity.h: Remove.\n\t* config/cpu/arm: Remove.\n\t* config/cpu/x86-64/atomicity.h: Remove.\n\t* config/cpu/x86-64: Remove.\n\nFrom-SVN: r58735", "tree": {"sha": "5f77baa9d942f2dbf52212f9f6319d6b73b71353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f77baa9d942f2dbf52212f9f6319d6b73b71353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85ab9d2311751cffa17d1ae495ff57941060b5cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ab9d2311751cffa17d1ae495ff57941060b5cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ab9d2311751cffa17d1ae495ff57941060b5cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ab9d2311751cffa17d1ae495ff57941060b5cf/comments", "author": null, "committer": null, "parents": [{"sha": "bec80a45fd419b66bb7fc6d658e24019b1395575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec80a45fd419b66bb7fc6d658e24019b1395575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec80a45fd419b66bb7fc6d658e24019b1395575"}], "stats": {"total": 216, "additions": 17, "deletions": 199}, "files": [{"sha": "ef72d5ccc853548bdbaa2b7c2fec0c4cf356fdf6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ab9d2311751cffa17d1ae495ff57941060b5cf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ab9d2311751cffa17d1ae495ff57941060b5cf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=85ab9d2311751cffa17d1ae495ff57941060b5cf", "patch": "@@ -1,3 +1,14 @@\n+2002-11-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/7926\n+\t* configure.target: Simplify.\n+\t* config/cpu/i386/atomicity.h: Remove.\n+\t* config/cpu/i386: Remove.\t\n+\t* config/cpu/arm/atomicity.h: Remove.\n+\t* config/cpu/arm: Remove.\t\n+\t* config/cpu/x86-64/atomicity.h: Remove.\n+\t* config/cpu/x86-64: Remove.\t\n+\t\n 2002-11-01  Christian Ehrhardt  <ehrhardt@mathematik.uni-ulm.de>\n \n \tPR libstdc++/8197"}, {"sha": "7b952aac365dd8b618a5c2c72a122dd764ace047", "filename": "libstdc++-v3/config/cpu/arm/atomicity.h", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec80a45fd419b66bb7fc6d658e24019b1395575/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec80a45fd419b66bb7fc6d658e24019b1395575/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Farm%2Fatomicity.h?ref=bec80a45fd419b66bb7fc6d658e24019b1395575", "patch": "@@ -1,62 +0,0 @@\n-// Low-level functions for atomic operations: ARM version  -*- C++ -*-\n-\n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H    1\n-\n-typedef int _Atomic_word;\n-\n-/* It isn't possible to write an atomic add instruction using the ARM\n-   SWP instruction without using either a global guard variable or a\n-   guard bit somewhere in the Atomic word.  However, even with a guard\n-   bit we need to understand the thread model (if any) in order to\n-   make co-operatively threaded applications work correctly.\n-\n-   The previous Thumb-based implementations were also completely\n-   broken, since they failed to switch back into Thumb mode (Gas bug,\n-   I think).  */\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add (volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __result = *__mem;\n-\n-  *__mem = __result + __val;\n-  return __result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add (volatile _Atomic_word *__mem, int __val)\n-{\n-  __exchange_and_add (__mem, __val);\n-}\n-\n-#endif /* atomicity.h */"}, {"sha": "4733503ff44b525a9c57aada179aa8d6b643af20", "filename": "libstdc++-v3/config/cpu/i386/atomicity.h", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec80a45fd419b66bb7fc6d658e24019b1395575/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec80a45fd419b66bb7fc6d658e24019b1395575/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fatomicity.h?ref=bec80a45fd419b66bb7fc6d658e24019b1395575", "patch": "@@ -1,59 +0,0 @@\n-// Low-level functions for atomic operations: x86, x < 4 version  -*- C++ -*-\n-\n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n-\n-typedef int _Atomic_word;\n-\n-static inline _Atomic_word \n-__attribute__ ((__unused__))\n-__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n-{\n-  register _Atomic_word __result;\n-  __asm__ __volatile__ (\"lock; xaddl %0,%2\"\n-\t\t\t: \"=r\" (__result) \n-                        : \"0\" (__val), \"m\" (*__mem) \n-                        : \"memory\");\n-  return __result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add (volatile _Atomic_word* __mem, int __val)\n-{\n-  __asm__ __volatile__ (\"lock; addl %0,%1\"\n-\t\t\t: : \"ir\" (__val), \"m\" (*__mem) : \"memory\");\n-}\n-\n-#endif /* atomicity.h */\n-\n-\n-\n-"}, {"sha": "15ff07fc17214f36eee66e46e7a9ce70663421e9", "filename": "libstdc++-v3/config/cpu/x86-64/atomicity.h", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec80a45fd419b66bb7fc6d658e24019b1395575/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fx86-64%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec80a45fd419b66bb7fc6d658e24019b1395575/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fx86-64%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fx86-64%2Fatomicity.h?ref=bec80a45fd419b66bb7fc6d658e24019b1395575", "patch": "@@ -1,55 +0,0 @@\n-// Low-level functions for atomic operations: AMD x86-64, -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n-\n-typedef int _Atomic_word;\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n-{\n-  register _Atomic_word __result;\n-  __asm__ __volatile__ (\"lock; xaddl %0,%2\"\n-\t\t\t: \"=r\" (__result)\n-                        : \"0\" (__val), \"m\" (*__mem)\n-                        : \"memory\");\n-  return __result;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add (volatile _Atomic_word* __mem, int __val)\n-{\n-  __asm__ __volatile__ (\"lock; addl %0,%1\"\n-\t\t\t: : \"ir\" (__val), \"m\" (*__mem) : \"memory\");\n-}\n-\n-#endif /* atomicity.h */"}, {"sha": "d3043c08f61248a935ca865f2f1d187626da771e", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ab9d2311751cffa17d1ae495ff57941060b5cf/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ab9d2311751cffa17d1ae495ff57941060b5cf/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=85ab9d2311751cffa17d1ae495ff57941060b5cf", "patch": "@@ -50,17 +50,15 @@\n # Try to guess a default cpu_include_dir based on the name of the CPU.  We\n # cannot do this for os_include_dir; there are too many portable operating\n # systems out there.  :-)\n+abi_baseline_triplet=${target}\n+c_model=c_std\n+c_compatibility=no\n if test -d ${glibcpp_srcdir}/config/cpu/${target_cpu}; then\n     cpu_include_dir=\"cpu/${target_cpu}\"\n else\n     cpu_include_dir=\"cpu/generic\"\n fi\n \n-abi_baseline_triplet=${target}\n-\n-c_model=c_std\n-c_compatibility=no\n-\n \n # TARGET-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n@@ -71,36 +69,21 @@ case \"${target_cpu}\" in\n   alpha*)\n     cpu_include_dir=\"cpu/alpha\"\n     ;;\n-  arm* | strongarm* | xscale* )\n-    cpu_include_dir=\"cpu/arm\"\n-    ;;\n-  i486 | i586 | i686 | i786)\n-    # add athlons here maybe\n+  athlon* | i586 | i686 | i786 | x86_64)\n     cpu_include_dir=\"cpu/i486\"\n     ;;\n-  m68k | m680[246]0)\n+  m680[246]0)\n     cpu_include_dir=\"cpu/m68k\"\n     ;;\n-  mips*)\n-    # MIPS chips are unreliable as to sc/ll support. By default\n-    # don't use atomic instructions and override for the OS.\n-    cpu_include_dir=\"cpu/generic\"\n-    ;;\n-  mmix)\n-    ATOMICITYH=\"cpu/generic\"\n-    ;;\n   powerpc* | rs6000)\n     cpu_include_dir=\"cpu/powerpc\"\n     ;;\n-  s390 | s390x)\n+  s390x)\n     cpu_include_dir=\"cpu/s390\"\n     ;;\n   sparc* | ultrasparc)\n     cpu_include_dir=\"cpu/sparc\"\n     ;;\n-  x86_64*)\n-    cpu_include_dir=\"cpu/x86-64\"\n-    ;;\n esac\n \n "}]}