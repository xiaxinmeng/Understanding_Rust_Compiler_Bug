{"sha": "61e53698a08dc1d9a54d785218af687a6751c1b3", "node_id": "C_kwDOANBUbNoAKDYxZTUzNjk4YTA4ZGMxZDlhNTRkNzg1MjE4YWY2ODdhNjc1MWMxYjM", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2021-12-07T09:08:23Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-23T09:32:51Z"}, "message": "i386: Enable intrinsics that convert float and bf16 data to each other.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512bf16intrin.h (_mm_cvtsbh_ss): Add new intrinsic.\n\t(_mm512_cvtpbh_ps): Likewise.\n\t(_mm512_maskz_cvtpbh_ps): Likewise.\n\t(_mm512_mask_cvtpbh_ps): Likewise.\n\t* config/i386/avx512bf16vlintrin.h (_mm_cvtness_sbh): Likewise.\n\t(_mm_cvtpbh_ps): Likewise.\n\t(_mm256_cvtpbh_ps): Likewise.\n\t(_mm_maskz_cvtpbh_ps): Likewise.\n\t(_mm256_maskz_cvtpbh_ps): Likewise.\n\t(_mm_mask_cvtpbh_ps): Likewise.\n\t(_mm256_mask_cvtpbh_ps): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512bf16-cvtsbh2ss-1.c: New test.\n\t* gcc.target/i386/avx512bf16-vcvtpbh2ps-1.c: Ditto.\n\t* gcc.target/i386/avx512bf16vl-cvtness2sbh-1.c: Ditto.\n\t* gcc.target/i386/avx512bf16vl-vcvtpbh2ps-1.c: Ditto.", "tree": {"sha": "d310cc9f07fe28888824b353d383bb72c7c39f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d310cc9f07fe28888824b353d383bb72c7c39f43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61e53698a08dc1d9a54d785218af687a6751c1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e53698a08dc1d9a54d785218af687a6751c1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e53698a08dc1d9a54d785218af687a6751c1b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e53698a08dc1d9a54d785218af687a6751c1b3/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ac0730c25b357b5fc75e18677cec27a546c1b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac0730c25b357b5fc75e18677cec27a546c1b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac0730c25b357b5fc75e18677cec27a546c1b64"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "6b62dc3e39866eb978856d5f34a7803055dfcbea", "filename": "gcc/config/i386/avx512bf16intrin.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h?ref=61e53698a08dc1d9a54d785218af687a6751c1b3", "patch": "@@ -41,6 +41,16 @@ typedef short __v32bh __attribute__ ((__vector_size__ (64)));\n    vector types, and their scalar components.  */\n typedef short __m512bh __attribute__ ((__vector_size__ (64), __may_alias__));\n \n+/* Convert One BF16 Data to One Single Float Data.  */\n+extern __inline float\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtsbh_ss (__bfloat16 __A)\n+{\n+  union{ float a; unsigned int b;} __tmp;\n+  __tmp.b = ((unsigned int)(__A)) << 16;\n+  return __tmp.a;\n+}\n+\n /* vcvtne2ps2bf16 */\n \n extern __inline __m512bh\n@@ -110,6 +120,32 @@ _mm512_maskz_dpbf16_ps (__mmask16 __A, __m512 __B, __m512bh __C, __m512bh __D)\n   return (__m512)__builtin_ia32_dpbf16ps_v16sf_maskz(__B, __C, __D, __A);\n }\n \n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtpbh_ps (__m256bh __A)\n+{\n+  return (__m512)_mm512_castsi512_ps ((__m512i)_mm512_slli_epi32 (\n+\t (__m512i)_mm512_cvtepi16_epi32 ((__m256i)__A), 16));\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtpbh_ps (__mmask16 __U, __m256bh __A)\n+{\n+  return (__m512)_mm512_castsi512_ps ((__m512i) _mm512_slli_epi32 (\n+\t (__m512i)_mm512_maskz_cvtepi16_epi32 (\n+\t (__mmask16)__U, (__m256i)__A), 16));\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtpbh_ps (__m512 __S, __mmask16 __U, __m256bh __A)\n+{\n+  return (__m512)_mm512_castsi512_ps ((__m512i)(_mm512_mask_slli_epi32 (\n+\t (__m512i)__S, (__mmask16)__U,\n+\t (__m512i)_mm512_cvtepi16_epi32 ((__m256i)__A), 16)));\n+}\n+\n #ifdef __DISABLE_AVX512BF16__\n #undef __DISABLE_AVX512BF16__\n #pragma GCC pop_options"}, {"sha": "5e6a6503aa6bb81661f2976c6698c377f2967872", "filename": "gcc/config/i386/avx512bf16vlintrin.h", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16vlintrin.h?ref=61e53698a08dc1d9a54d785218af687a6751c1b3", "patch": "@@ -43,6 +43,7 @@ typedef short __v8bh __attribute__ ((__vector_size__ (16)));\n typedef short __m256bh __attribute__ ((__vector_size__ (32), __may_alias__));\n typedef short __m128bh __attribute__ ((__vector_size__ (16), __may_alias__));\n \n+typedef unsigned short __bfloat16;\n /* vcvtne2ps2bf16 */\n \n extern __inline __m256bh\n@@ -175,6 +176,68 @@ _mm_maskz_dpbf16_ps (__mmask8 __A, __m128 __B, __m128bh __C, __m128bh __D)\n   return (__m128)__builtin_ia32_dpbf16ps_v4sf_maskz(__B, __C, __D, __A);\n }\n \n+extern __inline __bfloat16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtness_sbh (float __A)\n+{\n+  __v4sf __V = {__A, 0, 0, 0};\n+  __v8hi __R = __builtin_ia32_cvtneps2bf16_v4sf_mask ((__v4sf)__V,\n+\t       (__v8hi)_mm_undefined_si128 (), (__mmask8)-1);\n+  return __R[0];\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtpbh_ps (__m128bh __A)\n+{\n+  return (__m128)_mm_castsi128_ps ((__m128i)_mm_slli_epi32 (\n+\t (__m128i)_mm_cvtepi16_epi32 ((__m128i)__A), 16));\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtpbh_ps (__m128bh __A)\n+{\n+  return (__m256)_mm256_castsi256_ps ((__m256i)_mm256_slli_epi32 (\n+\t (__m256i)_mm256_cvtepi16_epi32 ((__m128i)__A), 16));\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtpbh_ps (__mmask8 __U, __m128bh __A)\n+{\n+  return (__m128)_mm_castsi128_ps ((__m128i)_mm_slli_epi32 (\n+\t (__m128i)_mm_maskz_cvtepi16_epi32 (\n+\t (__mmask8)__U, (__m128i)__A), 16));\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtpbh_ps (__mmask8 __U, __m128bh __A)\n+{\n+  return (__m256)_mm256_castsi256_ps ((__m256i)_mm256_slli_epi32 (\n+\t (__m256i)_mm256_maskz_cvtepi16_epi32 (\n+\t (__mmask8)__U, (__m128i)__A), 16));\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtpbh_ps (__m128 __S, __mmask8 __U, __m128bh __A)\n+{\n+  return (__m128)_mm_castsi128_ps ((__m128i)_mm_mask_slli_epi32 (\n+\t (__m128i)__S, (__mmask8)__U, (__m128i)_mm_cvtepi16_epi32 (\n+\t (__m128i)__A), 16));\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtpbh_ps (__m256 __S, __mmask8 __U, __m128bh __A)\n+{\n+  return (__m256)_mm256_castsi256_ps ((__m256i)_mm256_mask_slli_epi32 (\n+\t (__m256i)__S, (__mmask8)__U, (__m256i)_mm256_cvtepi16_epi32 (\n+\t (__m128i)__A), 16));\n+}\n+\n #ifdef __DISABLE_AVX512BF16VL__\n #undef __DISABLE_AVX512BF16VL__\n #pragma GCC pop_options"}, {"sha": "bf29a69a5b5ee114344bcab0aefa2739b1601a32", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-cvtsbh2ss-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c?ref=61e53698a08dc1d9a54d785218af687a6751c1b3", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"sall\\[ \\\\t\\]+\\[^\\{\\n\\]*16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movl\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __bfloat16 x1;\n+volatile float res;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res = _mm_cvtsbh_ss (x1);\n+}"}, {"sha": "a2ae4bef455f37a60d42b674975ee1b415609cd8", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-vcvtpbh2ps-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtpbh2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtpbh2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-vcvtpbh2ps-1.c?ref=61e53698a08dc1d9a54d785218af687a6751c1b3", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpslld\\[ \\t]\\+\\\\\\$16, %zmm\\[0-9]\\+, %zmm\\[0-9]\\+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpslld\\[ \\t]\\+\\\\\\$16, %zmm\\[0-9]\\+, %zmm\\[0-9]\\+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256bh x1;\n+volatile __m512 res;\n+volatile __mmask16 m16;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res = _mm512_cvtpbh_ps (x1);\n+  res = _mm512_mask_cvtpbh_ps (res, m16, x1);\n+  res = _mm512_maskz_cvtpbh_ps (m16, x1);\n+}"}, {"sha": "8f21b1bfdaec3676a6399132d97b1897066e6552", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-cvtness2sbh-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-cvtness2sbh-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-cvtness2sbh-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-cvtness2sbh-1.c?ref=61e53698a08dc1d9a54d785218af687a6751c1b3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __bfloat16 res;\n+volatile float x1;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res = _mm_cvtness_sbh (x1);\n+}"}, {"sha": "98f458b49f7d638abcb182f66838086e29982205", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16vl-vcvtpbh2ps-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtpbh2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e53698a08dc1d9a54d785218af687a6751c1b3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtpbh2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16vl-vcvtpbh2ps-1.c?ref=61e53698a08dc1d9a54d785218af687a6751c1b3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\](?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpslld\\[ \\t]\\+\\\\\\$16, %ymm\\[0-9]\\+, %ymm\\[0-9]\\+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpslld\\[ \\t]\\+\\\\\\$16, %ymm\\[0-9]\\+, %ymm\\[0-9]\\+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpslld\\[ \\t]\\+\\\\\\$16, %xmm\\[0-9]\\+, %xmm\\[0-9]\\+(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpslld\\[ \\t]\\+\\\\\\$16, %xmm\\[0-9]\\+, %xmm\\[0-9]\\+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovsxwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128bh x1;\n+volatile __m128 res1;\n+volatile __m256 res2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512bf16_test (void)\n+{\n+  res2 = _mm256_cvtpbh_ps (x1);\n+  res2 = _mm256_mask_cvtpbh_ps (res2, m8, x1);\n+  res2 = _mm256_maskz_cvtpbh_ps (m8, x1);\n+  \n+  res1 = _mm_cvtpbh_ps (x1);\n+  res1 = _mm_mask_cvtpbh_ps (res1, m8, x1);\n+  res1 = _mm_maskz_cvtpbh_ps (m8, x1);\n+}"}]}