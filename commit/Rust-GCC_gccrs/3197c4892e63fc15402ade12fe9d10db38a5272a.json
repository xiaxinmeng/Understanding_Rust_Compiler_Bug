{"sha": "3197c4892e63fc15402ade12fe9d10db38a5272a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5N2M0ODkyZTYzZmMxNTQwMmFkZTEyZmU5ZDEwZGIzOGE1MjcyYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-01-12T09:25:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-12T09:25:27Z"}, "message": "config.gcc (m68010-*-netbsdelf*): Add MASK_68010.\n\ngcc/\n\t* config.gcc (m68010-*-netbsdelf*): Add MASK_68010.\n\t(m68k*-*-netbsdelf*, m68k*-*-openbsd*, m68k*-linux*): Add\n\tMASK_68010 alongside MASK_68020.\n\t* doc/invoke.texi: Document -m68010.\n\t* config/m68k/m68k.opt (m68010): New.\n\t* config/m68k/m68k.h (TARGET_CPU_CPP_BUILTINS): Define mc68010\n\tif TUNE_68010.\n\t(TUNE_68010): New macro.\n\t* config/m68k/m68k-none.h (M68K_CPU_m68k, M68K_CPU_m68010)\n\t(M68K_CPU_m68020, M68K_CPU_m68030, M68K_CPU_m68040)\n\t(M68K_CPU_m68332): Add MASK_68010.\n\t* config/m68k/linux.h (TARGET_DEFAULT): Add MASK_68010 to\n\tfallback definition.\n\t* config/m68k/netbsd-elf.h (CPP_CPU_SPEC): Remove now-redundant\n\tdefines.\n\t* config/m68k/m68k.c (MASK_ALL_CPU_BITS): Add MASK_68010.\n\t(m68k_handle_option): Handle OPT_m68010.  Add MASK_68010\n\tto all entries that use MASK_68020.\n\t(output_move_simode_const, output_move_himode, output_move_qimode)\n\t(output_move_stricthi, output_move_strictqi): Use TARGET_68010\n\tinstead of TARGET_68020 to select clr behavior.  Remove comment\n\tabout there being no TARGET_68010.\n\t* config/m68k/m68k.md: Likewise throughout.\n\nFrom-SVN: r120710", "tree": {"sha": "7233e64ba78036df08187dffda6d47060432e807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7233e64ba78036df08187dffda6d47060432e807"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3197c4892e63fc15402ade12fe9d10db38a5272a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3197c4892e63fc15402ade12fe9d10db38a5272a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3197c4892e63fc15402ade12fe9d10db38a5272a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3197c4892e63fc15402ade12fe9d10db38a5272a/comments", "author": null, "committer": null, "parents": [{"sha": "986e74d58eea13066c05f662ba87fdad4e20b4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986e74d58eea13066c05f662ba87fdad4e20b4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986e74d58eea13066c05f662ba87fdad4e20b4b6"}], "stats": {"total": 140, "additions": 86, "deletions": 54}, "files": [{"sha": "c7af79d35065cf404fd8c1f5602f3918468716d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -1,3 +1,29 @@\n+2007-01-12  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config.gcc (m68010-*-netbsdelf*): Add MASK_68010.\n+\t(m68k*-*-netbsdelf*, m68k*-*-openbsd*, m68k*-linux*): Add\n+\tMASK_68010 alongside MASK_68020.\n+\t* doc/invoke.texi: Document -m68010.\n+\t* config/m68k/m68k.opt (m68010): New.\n+\t* config/m68k/m68k.h (TARGET_CPU_CPP_BUILTINS): Define mc68010\n+\tif TUNE_68010.\n+\t(TUNE_68010): New macro.\n+\t* config/m68k/m68k-none.h (M68K_CPU_m68k, M68K_CPU_m68010)\n+\t(M68K_CPU_m68020, M68K_CPU_m68030, M68K_CPU_m68040)\n+\t(M68K_CPU_m68332): Add MASK_68010.\n+\t* config/m68k/linux.h (TARGET_DEFAULT): Add MASK_68010 to\n+\tfallback definition.\n+\t* config/m68k/netbsd-elf.h (CPP_CPU_SPEC): Remove now-redundant\n+\tdefines.\n+\t* config/m68k/m68k.c (MASK_ALL_CPU_BITS): Add MASK_68010.\n+\t(m68k_handle_option): Handle OPT_m68010.  Add MASK_68010\n+\tto all entries that use MASK_68020.\n+\t(output_move_simode_const, output_move_himode, output_move_qimode)\n+\t(output_move_stricthi, output_move_strictqi): Use TARGET_68010\n+\tinstead of TARGET_68020 to select clr behavior.  Remove comment\n+\tabout there being no TARGET_68010.\n+\t* config/m68k/m68k.md: Likewise throughout.\n+\n 2007-01-12  Julian Brown  <julian@codesourcery.com>\n \n \t* config/m68k/m68k.h (TARGET_ISAB): New macro."}, {"sha": "28d6f27458b621add223875822867ed2b7a4e6cf", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -1498,16 +1498,16 @@ m68010-*-netbsdelf* | m68k*-*-netbsdelf*)\n \ttm_defines=\"${tm_defines} MOTOROLA USE_GAS\"\n \tcase ${target} in\n \tm68010*)\n-\t\ttarget_cpu_default=\"0\"\n+\t\ttarget_cpu_default=\"MASK_68010\"\n \t\t;;\n \t*)\n-\t\ttarget_cpu_default=\"MASK_68020|MASK_68881|MASK_BITFIELD\"\n+\t\ttarget_cpu_default=\"MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD\"\n \t\t;;\n \tesac\n \t;;\n m68k*-*-openbsd*)\n \t# needed to unconfuse gdb\n-\ttm_defines=\"${tm_defines} OBSD_OLD_GAS TARGET_DEFAULT=(MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\ttm_defines=\"${tm_defines} OBSD_OLD_GAS TARGET_DEFAULT=(MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n \ttm_file=\"m68k/m68k.h openbsd.h m68k/openbsd.h\"\n \ttmake_file=\"t-libc-ok t-openbsd m68k/t-openbsd\"\n \t# we need collect2 until our bug is fixed...\n@@ -3037,25 +3037,25 @@ case ${target} in\n \t\tcase \"x$with_cpu\" in\n \t\tx)\n \t\t\t# The most generic\n-\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n \t\t\t;;\n \t\txm68020)\n-\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\ttarget_cpu_default2=\"(MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n \t\t\t;;\n \t\txm68030)\n-\t\t\ttarget_cpu_default2=\"(MASK_68030|MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\ttarget_cpu_default2=\"(MASK_68030|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n \t\t\t;;\n \t\txm68040)\n-\t\t\ttarget_cpu_default2=\"(MASK_68040|MASK_68040_ONLY|MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\ttarget_cpu_default2=\"(MASK_68040|MASK_68040_ONLY|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n \t\t\t;;\n \t\txm68060)\n-\t\t\ttarget_cpu_default2=\"(MASK_68060|MASK_68040_ONLY|MASK_68020|MASK_68881|MASK_BITFIELD)\"\n+\t\t\ttarget_cpu_default2=\"(MASK_68060|MASK_68040_ONLY|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)\"\n \t\t\t;;\n \t\txm68020-40)\n-\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040)\"\n+\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68010|MASK_68040)\"\n \t\t\t;;\n \t\txm68020-60)\n-\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68040|MASK_68060)\"\n+\t\t\ttarget_cpu_default2=\"(MASK_BITFIELD|MASK_68881|MASK_68020|MASK_68010|MASK_68040|MASK_68060)\"\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unknown CPU used in --with-cpu=$with_cpu\"  1>&2"}, {"sha": "f148fba2f69d27b4a37fba00fe049b2bc40f433f", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02110-1301, USA.  */\n #ifdef TARGET_CPU_DEFAULT\n #define TARGET_DEFAULT TARGET_CPU_DEFAULT\n #else\n-#define TARGET_DEFAULT (MASK_BITFIELD|MASK_68881|MASK_68020)\n+#define TARGET_DEFAULT (MASK_BITFIELD|MASK_68881|MASK_68010|MASK_68020)\n #endif\n \n /* for 68k machines this only needs to be TRUE for the 68000 */"}, {"sha": "8a92d7470d65ac93442840818ded1365511bd919", "filename": "gcc/config/m68k/m68k-none.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-none.h?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -25,14 +25,14 @@ Boston, MA 02110-1301, USA.  */\n \n /* These are values set by the configure script in TARGET_CPU_DEFAULT.\n    They are (sequential integer + (desired value for TARGET_DEFAULT) << 4).  */\n-#define M68K_CPU_m68k\t(0 + ((MASK_68020|MASK_68881|MASK_BITFIELD)<<4))\n+#define M68K_CPU_m68k\t(0 + ((MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD)<<4))\n #define M68K_CPU_m68000 (1 + (0 << 4))\n-#define M68K_CPU_m68010 (1 + (0 << 4)) /* make same as m68000 */\n-#define M68K_CPU_m68020 (2 + ((MASK_68020|MASK_68881|MASK_BITFIELD) << 4))\n-#define M68K_CPU_m68030 (3 + ((MASK_68030|MASK_68020|MASK_68881|MASK_BITFIELD) << 4))\n-#define M68K_CPU_m68040 (4 + ((MASK_68040_ONLY|MASK_68020|MASK_68881|MASK_BITFIELD) << 4))\n+#define M68K_CPU_m68010 (1 + (MASK_68010 << 4))\n+#define M68K_CPU_m68020 (2 + ((MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD) << 4))\n+#define M68K_CPU_m68030 (3 + ((MASK_68030|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD) << 4))\n+#define M68K_CPU_m68040 (4 + ((MASK_68040_ONLY|MASK_68020|MASK_68010|MASK_68881|MASK_BITFIELD) << 4))\n #define M68K_CPU_m68302 (5 + (0 << 4))\n-#define M68K_CPU_m68332 (6 + (MASK_68020 << 4))\n+#define M68K_CPU_m68332 (6 + ((MASK_68020|MASK_68010) << 4))\n \n /* This is tested for below, so if target wants to override this, it\n    just set this first in cover file.  */"}, {"sha": "c0a43b2c85f14216f505a0467e9010ed56f07a85", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -206,7 +206,7 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n \n #define MASK_ALL_CPU_BITS \\\n   (MASK_COLDFIRE | MASK_CF_HWDIV | MASK_68060 | MASK_68040 \\\n-   | MASK_68040_ONLY | MASK_68030 | MASK_68020 | MASK_BITFIELD)\n+   | MASK_68040_ONLY | MASK_68030 | MASK_68020 | MASK_68010 | MASK_BITFIELD)\n \n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -250,37 +250,43 @@ m68k_handle_option (size_t code, const char *arg, int value)\n       target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n       return true;\n \n+    case OPT_m68010:\n+      target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n+      target_flags |= MASK_68010;\n+      return true;\n+\n     case OPT_m68020:\n     case OPT_mc68020:\n       target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= MASK_68020 | MASK_BITFIELD;\n+      target_flags |= MASK_68010 | MASK_68020 | MASK_BITFIELD;\n       return true;\n \n     case OPT_m68020_40:\n       target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= MASK_BITFIELD | MASK_68881 | MASK_68020 | MASK_68040;\n+      target_flags |= (MASK_BITFIELD | MASK_68881 | MASK_68010\n+\t\t       | MASK_68020 | MASK_68040);\n       return true;\n \n     case OPT_m68020_60:\n       target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= (MASK_BITFIELD | MASK_68881 | MASK_68020\n-\t\t       | MASK_68040 | MASK_68060);\n+      target_flags |= (MASK_BITFIELD | MASK_68881 | MASK_68010\n+\t\t       | MASK_68020 | MASK_68040 | MASK_68060);\n       return true;\n \n     case OPT_m68030:\n       target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= MASK_68020 | MASK_68030 | MASK_BITFIELD;\n+      target_flags |= MASK_68010 | MASK_68020 | MASK_68030 | MASK_BITFIELD;\n       return true;\n \n     case OPT_m68040:\n       target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= (MASK_68020 | MASK_68881 | MASK_BITFIELD\n+      target_flags |= (MASK_68010 | MASK_68020 | MASK_68881 | MASK_BITFIELD\n \t\t       | MASK_68040_ONLY | MASK_68040);\n       return true;\n \n     case OPT_m68060:\n       target_flags &= ~MASK_ALL_CPU_BITS;\n-      target_flags |= (MASK_68020 | MASK_68881 | MASK_BITFIELD\n+      target_flags |= (MASK_68010 | MASK_68020 | MASK_68881 | MASK_BITFIELD\n \t\t       | MASK_68040_ONLY | MASK_68060);\n       return true;\n \n@@ -291,7 +297,7 @@ m68k_handle_option (size_t code, const char *arg, int value)\n     case OPT_m68332:\n     case OPT_mcpu32:\n       target_flags &= ~(MASK_ALL_CPU_BITS | MASK_68881);\n-      target_flags |= MASK_68020;\n+      target_flags |= MASK_68010 | MASK_68020;\n       return true;\n \n     case OPT_mshared_library_id_:\n@@ -1795,9 +1801,8 @@ output_move_simode_const (rtx *operands)\n   if (operands[1] == const0_rtx\n       && (DATA_REG_P (operands[0])\n \t  || GET_CODE (operands[0]) == MEM)\n-      /* clr insns on 68000 read before writing.\n-\t This isn't so on the 68010, but we have no TARGET_68010.  */\n-      && ((TARGET_68020 || TARGET_COLDFIRE)\n+      /* clr insns on 68000 read before writing.  */\n+      && ((TARGET_68010 || TARGET_COLDFIRE)\n \t  || !(GET_CODE (operands[0]) == MEM\n \t       && MEM_VOLATILE_P (operands[0]))))\n     return \"clr%.l %0\";\n@@ -1854,9 +1859,8 @@ output_move_himode (rtx *operands)\n       if (operands[1] == const0_rtx\n \t  && (DATA_REG_P (operands[0])\n \t      || GET_CODE (operands[0]) == MEM)\n-\t  /* clr insns on 68000 read before writing.\n-\t     This isn't so on the 68010, but we have no TARGET_68010.  */\n-\t  && ((TARGET_68020 || TARGET_COLDFIRE)\n+\t  /* clr insns on 68000 read before writing.  */\n+\t  && ((TARGET_68010 || TARGET_COLDFIRE)\n \t      || !(GET_CODE (operands[0]) == MEM\n \t\t   && MEM_VOLATILE_P (operands[0]))))\n \treturn \"clr%.w %0\";\n@@ -1908,10 +1912,9 @@ output_move_qimode (rtx *operands)\n \t\t&& ! ADDRESS_REG_P (operands[1])\n \t\t&& ! TARGET_COLDFIRE));\n \n-  /* clr and st insns on 68000 read before writing.\n-     This isn't so on the 68010, but we have no TARGET_68010.  */\n+  /* clr and st insns on 68000 read before writing.  */\n   if (!ADDRESS_REG_P (operands[0])\n-      && ((TARGET_68020 || TARGET_COLDFIRE)\n+      && ((TARGET_68010 || TARGET_COLDFIRE)\n \t  || !(GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0]))))\n     {\n       if (operands[1] == const0_rtx)\n@@ -1944,9 +1947,8 @@ const char *\n output_move_stricthi (rtx *operands)\n {\n   if (operands[1] == const0_rtx\n-      /* clr insns on 68000 read before writing.\n-\t This isn't so on the 68010, but we have no TARGET_68010.  */\n-      && ((TARGET_68020 || TARGET_COLDFIRE)\n+      /* clr insns on 68000 read before writing.  */\n+      && ((TARGET_68010 || TARGET_COLDFIRE)\n \t  || !(GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0]))))\n     return \"clr%.w %0\";\n   return \"move%.w %1,%0\";\n@@ -1956,9 +1958,8 @@ const char *\n output_move_strictqi (rtx *operands)\n {\n   if (operands[1] == const0_rtx\n-      /* clr insns on 68000 read before writing.\n-         This isn't so on the 68010, but we have no TARGET_68010.  */\n-      && ((TARGET_68020 || TARGET_COLDFIRE)\n+      /* clr insns on 68000 read before writing.  */\n+      && ((TARGET_68010 || TARGET_COLDFIRE)\n           || !(GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0]))))\n     return \"clr%.b %0\";\n   return \"move%.b %1,%0\";"}, {"sha": "f3b48a4aac78f0465a1cf8ad8ca442c43adb8ac1", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -64,6 +64,8 @@ Boston, MA 02110-1301, USA.  */\n \tbuiltin_define_std (\"mc68030\");\t\t\t\t\t\\\n       else if (TARGET_68020)\t\t\t\t\t\t\\\n \tbuiltin_define_std (\"mc68020\");\t\t\t\t\t\\\n+      else if (TUNE_68010)\t\t\t\t\t\t\\\n+\tbuiltin_define_std (\"mc68010\");\t\t\t\t\t\\\n       if (TARGET_68881)\t\t\t\t\t\t\t\\\n \tbuiltin_define (\"__HAVE_68881__\");\t\t\t\t\\\n       if (TUNE_CPU32)\t\t\t\t\t\t\t\\\n@@ -129,6 +131,7 @@ Boston, MA 02110-1301, USA.  */\n #define TARGET_ISAB\t\tTARGET_CFV4\n \n #define TUNE_68000_10\t(!TARGET_68020 && !TARGET_COLDFIRE)\n+#define TUNE_68010\tTARGET_68010\n #define TUNE_68030\tTARGET_68030\n #define TUNE_68040\tTARGET_68040\n #define TUNE_68060\tTARGET_68060"}, {"sha": "105721cc7d5dd151ace8a95e317c6afbe23b279d", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -611,8 +611,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=g\")\n \t(const_int 0))]\n   ;; clr insns on 68000 read before writing.\n-  ;; This isn't so on the 68010, but we have no TARGET_68010.\n-  \"((TARGET_68020 || TARGET_COLDFIRE)\n+  \"((TARGET_68010 || TARGET_COLDFIRE)\n     || !(GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0])))\"\n {\n   if (ADDRESS_REG_P (operands[0]))\n@@ -838,9 +837,8 @@\n       return \"fmove%.s %f1,%0\";\n     }\n   if (operands[1] == CONST0_RTX (SFmode)\n-      /* clr insns on 68000 read before writing.\n-\t This isn't so on the 68010, but we have no TARGET_68010.  */\n-      && ((TARGET_68020 || TARGET_COLDFIRE)\n+      /* clr insns on 68000 read before writing.  */\n+      && ((TARGET_68010 || TARGET_COLDFIRE)\n \t  || !(GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0]))))\n     {\n       if (ADDRESS_REG_P (operands[0]))\n@@ -6731,9 +6729,8 @@\n       if (operands[1] == const0_rtx\n \t  && (DATA_REG_P (operands[0])\n \t      || GET_CODE (operands[0]) == MEM)\n-\t  /* clr insns on 68000 read before writing.\n-\t     This isn't so on the 68010, but we have no TARGET_68010.  */\n-\t  && ((TARGET_68020 || TARGET_COLDFIRE)\n+\t  /* clr insns on 68000 read before writing.  */\n+\t  && ((TARGET_68010 || TARGET_COLDFIRE)\n \t      || !(GET_CODE (operands[0]) == MEM\n \t\t   && MEM_VOLATILE_P (operands[0]))))\n \treturn \"clr%.w %0\";"}, {"sha": "1379172b2f971fdc46ae2b57506fbba0d87f1e02", "filename": "gcc/config/m68k/m68k.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fm68k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.opt?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -47,6 +47,10 @@ m68000\n Target RejectNegative\n Generate code for a 68000\n \n+m68010\n+Target RejectNegative Mask(68010)\n+Generate code for a 68010\n+\n m68020\n Target RejectNegative Mask(68020)\n Generate code for a 68020"}, {"sha": "d25b94590dd114625320f34023324160f2aa3b0a", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -59,11 +59,7 @@ Boston, MA 02110-1301, USA.  */\n \n \n #define CPP_CPU_SPEC \\\n-  \"%{m68010:-D__mc68010__} \\\n-   %{m68020:-D__mc68020__} \\\n-   %{m68030:-D__mc68030__} \\\n-   %{m68040:-D__mc68040__} \\\n-   %(cpp_cpu_default_spec)\"\n+  \"%(cpp_cpu_default_spec)\"\n \n \n #undef TARGET_VERSION"}, {"sha": "ab61a9ae82e84ae452461bc149e258c162d5f4ab", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3197c4892e63fc15402ade12fe9d10db38a5272a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3197c4892e63fc15402ade12fe9d10db38a5272a", "patch": "@@ -10282,6 +10282,11 @@ when the compiler is configured for 68000-based systems.\n Use this option for microcontrollers with a 68000 or EC000 core,\n including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.\n \n+@item -m68010\n+@opindex m68010\n+Generate output for a 68010.  This is the default\n+when the compiler is configured for 68010-based systems.\n+\n @item -m68020\n @itemx -mc68020\n @opindex m68020"}]}