{"sha": "6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFlMDg4NTNiNjQ5ZTM4ZmEzODdlZjVkNWEzMTUzZDQ2ZjJlY2JmNw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-03-09T12:10:25Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-03-09T12:10:25Z"}, "message": "* config/rs6000/rs6000.md: Remove trailing whitespace.\n\nFrom-SVN: r79166", "tree": {"sha": "98b8fc9b4d7466fd31652e05dd6e383ff14e6f6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b8fc9b4d7466fd31652e05dd6e383ff14e6f6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7/comments", "author": null, "committer": null, "parents": [{"sha": "65196e37241baacee5ec6e4915d4b333fcfbb35b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65196e37241baacee5ec6e4915d4b333fcfbb35b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65196e37241baacee5ec6e4915d4b333fcfbb35b"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "43dc9cb22dd320e8bee9a7eee1b607f441c5dd07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "patch": "@@ -1,3 +1,7 @@\n+2004-03-09  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.md: Remove trailing whitespace.\n+\n 2004-03-08  Eric Christopher  <echristo@redhat.com>\n \n \t* Makefile.in (site.exp): Add libiconv variable definition."}, {"sha": "4f95e21673f5a374a1b88e34cfcc5f42330880e9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae08853b649e38fa387ef5d5a3153d46f2ecbf7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6ae08853b649e38fa387ef5d5a3153d46f2ecbf7", "patch": "@@ -67,7 +67,7 @@\n   (const_string \"integer\"))\n \n ;; Length (in bytes).\n-; '(pc)' in the following doesn't include the instruction itself; it is \n+; '(pc)' in the following doesn't include the instruction itself; it is\n ; calculated as if the instruction had zero size.\n (define_attr \"length\" \"\"\n   (if_then_else (eq_attr \"type\" \"branch\")\n@@ -1632,7 +1632,7 @@\n      operands[3] = gen_reg_rtx (SImode);\n      operands[4] = gen_reg_rtx (SImode);\n   })\n-  \n+\n (define_expand \"ffssi2\"\n   [(set (match_dup 2)\n \t(neg:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n@@ -1648,7 +1648,7 @@\n      operands[3] = gen_reg_rtx (SImode);\n      operands[4] = gen_reg_rtx (SImode);\n   })\n-  \n+\n (define_expand \"mulsi3\"\n   [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n    (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n@@ -1672,10 +1672,10 @@\n   \"@\n    {muls|mullw} %0,%1,%2\n    {muli|mulli} %0,%1,%2\"\n-   [(set (attr \"type\") \n+   [(set (attr \"type\")\n       (cond [(match_operand:SI 2 \"s8bit_cint_operand\" \"\")\n \t\t(const_string \"imul3\")\n-             (match_operand:SI 2 \"short_cint_operand\" \"\") \n+             (match_operand:SI 2 \"short_cint_operand\" \"\")\n \t\t(const_string \"imul2\")]\n \t(const_string \"imul\")))])\n \n@@ -1687,10 +1687,10 @@\n   \"@\n    {muls|mullw} %0,%1,%2\n    {muli|mulli} %0,%1,%2\"\n-   [(set (attr \"type\") \n+   [(set (attr \"type\")\n       (cond [(match_operand:SI 2 \"s8bit_cint_operand\" \"\")\n \t\t(const_string \"imul3\")\n-             (match_operand:SI 2 \"short_cint_operand\" \"\") \n+             (match_operand:SI 2 \"short_cint_operand\" \"\")\n \t\t(const_string \"imul2\")]\n \t(const_string \"imul\")))])\n \n@@ -2568,7 +2568,7 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-;; Split a logical operation that we can't do in one insn into two insns, \n+;; Split a logical operation that we can't do in one insn into two insns,\n ;; each of which does one 16-bit part.  This is used by combine.\n \n (define_split\n@@ -4686,7 +4686,7 @@\n   \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   [(const_int 0)]\n   \"\n-{ rs6000_emit_minmax (operands[0], GET_CODE (operands[3]), \n+{ rs6000_emit_minmax (operands[0], GET_CODE (operands[3]),\n \t\t      operands[1], operands[2]);\n   DONE;\n }\")\n@@ -4879,7 +4879,7 @@\n \t(minus:DF (match_operand:DF 3 \"gpc_reg_operand\" \"f\")\n \t          (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD \n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n@@ -4892,7 +4892,7 @@\n   [(set_attr \"type\" \"dsqrt\")])\n \n ;; The conditional move instructions allow us to perform max and min\n-;; operations even when \n+;; operations even when\n \n (define_expand \"maxdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n@@ -4920,7 +4920,7 @@\n   \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   [(const_int 0)]\n   \"\n-{ rs6000_emit_minmax (operands[0], GET_CODE (operands[3]), \n+{ rs6000_emit_minmax (operands[0], GET_CODE (operands[3]),\n \t\t      operands[1], operands[2]);\n   DONE;\n }\")\n@@ -5046,7 +5046,7 @@\n       tmp = highword; highword = lowword; lowword = tmp;\n     }\n \n-  emit_insn (gen_xorsi3 (operands[6], operands[1], \n+  emit_insn (gen_xorsi3 (operands[6], operands[1],\n \t\t\t GEN_INT (~ (HOST_WIDE_INT) 0x7fffffff)));\n   emit_move_insn (gen_rtx_MEM (SImode, lowword), operands[6]);\n   emit_move_insn (gen_rtx_MEM (SImode, highword), operands[2]);\n@@ -5642,7 +5642,7 @@\n \n (define_insn \"*ashrdisi3_noppc64\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (subreg:SI (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")    \n+        (subreg:SI (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n                                 (const_int 32)) 4))]\n   \"TARGET_32BIT && !TARGET_POWERPC64\"\n   \"*\n@@ -5652,7 +5652,7 @@\n   else\n     return \\\"mr %0,%1\\\";\n }\"\n-   [(set_attr \"length\" \"4\")])      \n+   [(set_attr \"length\" \"4\")])\n \n \f\n ;; PowerPC64 DImode operations.\n@@ -6032,31 +6032,31 @@\n (define_expand \"ctzdi2\"\n   [(set (match_dup 2)\n \t(neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))\n-   (parallel [(set (match_dup 3) (and:DI (match_dup 1)      \n-\t\t\t\t\t (match_dup 2)))   \n+   (parallel [(set (match_dup 3) (and:DI (match_dup 1)\n+\t\t\t\t\t (match_dup 2)))\n \t      (clobber (scratch:CC))])\n    (set (match_dup 4) (clz:DI (match_dup 3)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(minus:DI (const_int 63) (match_dup 4)))]\n   \"TARGET_POWERPC64\"\n   {\n-     operands[2] = gen_reg_rtx (DImode); \n+     operands[2] = gen_reg_rtx (DImode);\n      operands[3] = gen_reg_rtx (DImode);\n      operands[4] = gen_reg_rtx (DImode);\n   })\n \n (define_expand \"ffsdi2\"\n   [(set (match_dup 2)\n \t(neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))\n-   (parallel [(set (match_dup 3) (and:DI (match_dup 1)      \n-\t\t\t\t\t (match_dup 2)))   \n+   (parallel [(set (match_dup 3) (and:DI (match_dup 1)\n+\t\t\t\t\t (match_dup 2)))\n \t      (clobber (scratch:CC))])\n    (set (match_dup 4) (clz:DI (match_dup 3)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(minus:DI (const_int 64) (match_dup 4)))]\n   \"TARGET_POWERPC64\"\n   {\n-     operands[2] = gen_reg_rtx (DImode); \n+     operands[2] = gen_reg_rtx (DImode);\n      operands[3] = gen_reg_rtx (DImode);\n      operands[4] = gen_reg_rtx (DImode);\n   })\n@@ -6656,7 +6656,7 @@\n   \"TARGET_POWERPC64\"\n   \"sld%I2 %0,%1,%H2\"\n   [(set_attr \"length\" \"8\")])\n-  \n+\n (define_insn \"*ashldi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n@@ -6669,7 +6669,7 @@\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n-  \n+\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -7336,7 +7336,7 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-;; Split a logical operation that we can't do in one insn into two insns, \n+;; Split a logical operation that we can't do in one insn into two insns,\n ;; each of which does one 16-bit part.  This is used by combine.\n \n (define_split\n@@ -7350,7 +7350,7 @@\n \"\n {\n   rtx i3,i4;\n-  \n+\n   if (GET_CODE (operands[2]) == CONST_DOUBLE)\n     {\n       HOST_WIDE_INT value = CONST_DOUBLE_LOW (operands[2]);\n@@ -7578,7 +7578,7 @@\n \n ;; Used by sched, shorten_branches and final when the GOT pseudo reg\n ;; didn't get allocated to a hard register.\n-(define_split \n+(define_split\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unspec:SI [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n \t\t    (match_operand:SI 2 \"memory_operand\" \"\")]\n@@ -7641,12 +7641,12 @@\n \t    return \\\"ld %0,lo16(%2)(%1)\\\";\n \t  else\n \t  {\n-\t    operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);     \n+\t    operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n \t    output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n #if TARGET_MACHO\n \t    if (MACHO_DYNAMIC_NO_PIC_P)\n \t      output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n-\t    else     \n+\t    else\n \t    /* We cannot rely on ha16(low half)==ha16(high half), alas,\n \t       although in practice it almost always is.  */\n \t    output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n@@ -8255,7 +8255,7 @@\n   emit_move_insn (simplify_gen_subreg (DFmode, operands[0], TFmode, lo_word),\n \t\t  operands[2]);\n   DONE;\n-})  \n+})\n \n (define_expand \"extendsftf2\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n@@ -8475,7 +8475,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n         (match_operand:DI 1 \"input_operand\" \"\"))]\n-  \"reload_completed && !TARGET_POWERPC64 \n+  \"reload_completed && !TARGET_POWERPC64\n    && gpr_or_gpr_p (operands[0], operands[1])\"\n   [(pc)]\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; })\n@@ -8635,7 +8635,7 @@\n   [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,m,????r,????r,????r\")\n \t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,r,Q,m\"))\n    (clobber (match_scratch:SI 2 \"=q,q#X,X,X,X\"))]\n-  \"TARGET_POWER && ! TARGET_POWERPC64 \n+  \"TARGET_POWER && ! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], TImode) || gpc_reg_operand (operands[1], TImode))\"\n   \"*\n {\n@@ -8683,7 +8683,7 @@\n     case 3:\n       /* If the address is not used in the output, we can use lsi.  Otherwise,\n \t fall through to generating four loads.  */\n-      if (TARGET_STRING  \n+      if (TARGET_STRING\n           && ! reg_overlap_mentioned_p (operands[0], operands[1]))\n \treturn \\\"{lsi|lswi} %0,%P1,16\\\";\n       /* ... fall through ...  */\n@@ -8699,8 +8699,8 @@\n   \"TARGET_POWERPC64 && (gpc_reg_operand (operands[0], TImode)\n    || gpc_reg_operand (operands[1], TImode))\"\n   \"@\n-   #\t\n-   #\t\n+   #\n+   #\n    #\"\n   [(set_attr \"type\" \"*,load,store\")])\n \n@@ -9832,7 +9832,7 @@\n   if (current_function_limit_stack)\n     {\n       rtx available;\n-      available = expand_binop (Pmode, sub_optab, \n+      available = expand_binop (Pmode, sub_optab,\n \t\t\t\tstack_pointer_rtx, stack_limit_rtx,\n \t\t\t\tNULL_RTX, 1, OPTAB_WIDEN);\n       emit_insn (gen_cond_trap (LTU, available, operands[1], const0_rtx));\n@@ -10393,7 +10393,7 @@\n \t (match_operand 1 \"\" \"g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n-  \"TARGET_64BIT \n+  \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"bl %z0\\;%.\"\n@@ -10447,7 +10447,7 @@\n \t      (match_operand 2 \"\" \"g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n    (clobber (match_scratch:SI 4 \"=l\"))]\n-  \"TARGET_64BIT \n+  \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"bl %z1\\;%.\"\n@@ -10498,7 +10498,7 @@\n   return output_call(insn, operands, 0, 2);\n #else\n   return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z0@plt\" : \"bl %z0\";\n-#endif     \n+#endif\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -10543,7 +10543,7 @@\n   return output_call(insn, operands, 1, 3);\n #else\n   return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z1@plt\" : \"bl %z1\";\n-#endif     \n+#endif\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -10705,7 +10705,7 @@\n    (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n    (use (match_operand:SI 3 \"register_operand\" \"l\"))\n    (return)]\n-  \"TARGET_64BIT \n+  \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"b %z0\"\n@@ -10733,7 +10733,7 @@\n    (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n    (use (match_operand:SI 4 \"register_operand\" \"l\"))\n    (return)]\n-  \"TARGET_64BIT \n+  \"TARGET_64BIT\n    && DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"b %z1\"\n@@ -11010,11 +11010,11 @@\n   [(clobber (match_operand:SI 0 \"gpc_reg_operand\" \"\"))]\n   \"\"\n   \"\n-{ \n+{\n   if (! rs6000_compare_fp_p)\n     FAIL;\n \n-  rs6000_emit_sCOND (NE, operands[0]); \n+  rs6000_emit_sCOND (NE, operands[0]);\n   DONE;\n }\")\n \n@@ -11042,7 +11042,7 @@\n       && (! TARGET_POWER || rs6000_compare_op1 == const0_rtx))\n     FAIL;\n \n-  rs6000_emit_sCOND (GT, operands[0]); \n+  rs6000_emit_sCOND (GT, operands[0]);\n   DONE;\n }\")\n \n@@ -11056,7 +11056,7 @@\n       && (! TARGET_POWER || rs6000_compare_op1 == const0_rtx))\n     FAIL;\n \n-  rs6000_emit_sCOND (LE, operands[0]); \n+  rs6000_emit_sCOND (LE, operands[0]);\n   DONE;\n }\")\n \n@@ -11066,11 +11066,11 @@\n   \"\"\n   \"\n {\n-  if (! rs6000_compare_fp_p \n+  if (! rs6000_compare_fp_p\n       && (! TARGET_POWER || rs6000_compare_op1 == const0_rtx))\n     FAIL;\n \n-  rs6000_emit_sCOND (LT, operands[0]); \n+  rs6000_emit_sCOND (LT, operands[0]);\n   DONE;\n }\")\n \n@@ -13792,7 +13792,7 @@\n }\")\n \n (define_expand \"tablejumpdi\"\n-  [(set (match_dup 4) \n+  [(set (match_dup 4)\n         (sign_extend:DI (match_operand:SI 0 \"lwa_operand\" \"rm\")))\n    (set (match_dup 3)\n \t(plus:DI (match_dup 4)\n@@ -14364,7 +14364,7 @@\n \n (define_insn \"movesi_from_cr\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec:SI [(reg:CC 68) (reg:CC 69) (reg:CC 70) (reg:CC 71) \n+        (unspec:SI [(reg:CC 68) (reg:CC 69) (reg:CC 70) (reg:CC 71)\n \t\t    (reg:CC 72)\t(reg:CC 73) (reg:CC 74) (reg:CC 75)]\n \t\t   UNSPEC_MOVESI_FROM_CR))]\n   \"\"\n@@ -14377,7 +14377,7 @@\n        \t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_MULTIPLE\"\n   \"{stm|stmw} %2,%1\")\n- \n+\n (define_insn \"*save_fpregs_si\"\n   [(match_parallel 0 \"any_operand\"\n \t\t   [(clobber (match_operand:SI 1 \"register_operand\" \"=l\"))\n@@ -14453,7 +14453,7 @@\n         (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand 2 \"immediate_operand\" \"n\")]\n \t\t   UNSPEC_MOVESI_TO_CR))]\n-  \"GET_CODE (operands[0]) == REG \n+  \"GET_CODE (operands[0]) == REG\n    && CR_REGNO_P (REGNO (operands[0]))\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) == 1 << (75 - REGNO (operands[0]))\"\n@@ -14470,7 +14470,7 @@\n        \t\t\t (match_operand:SI 2 \"memory_operand\" \"m\"))])]\n   \"TARGET_MULTIPLE\"\n   \"{lm|lmw} %1,%2\")\n- \n+\n (define_insn \"*return_internal_si\"\n   [(return)\n    (use (match_operand:SI 0 \"register_operand\" \"lc\"))]"}]}