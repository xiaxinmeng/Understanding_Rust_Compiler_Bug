{"sha": "ba90d838257853023abae85f8c393eda41c50189", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5MGQ4MzgyNTc4NTMwMjNhYmFlODVmOGMzOTNlZGE0MWM1MDE4OQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-06-13T11:04:19Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-06-13T11:04:19Z"}, "message": "ia64.h (FUNCTION_VALUE_REGNO_P, [...]): Remove macros.\n\n\t* config/ia64/ia64.h (FUNCTION_VALUE_REGNO_P, FUNCTION_VALUE,\n\tLIBCALL_VALUE): Remove macros.\n\t* config/ia64/ia64-protos.h (ia64_function_value): Remove.\n\t* config/ia64/ia64.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t(ia64_libcall_value, ia64_function_value_regno_p): New functions.\n\t(ia64_function_value): Make static. Handle receiving the function\n\ttype in 'fn_decl_or_type' argunent. Add 'outgoing' argument.\n\nFrom-SVN: r160678", "tree": {"sha": "474132d591170177949a1c60443868e10fbc109d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474132d591170177949a1c60443868e10fbc109d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba90d838257853023abae85f8c393eda41c50189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba90d838257853023abae85f8c393eda41c50189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba90d838257853023abae85f8c393eda41c50189", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba90d838257853023abae85f8c393eda41c50189/comments", "author": null, "committer": null, "parents": [{"sha": "9050c834d65ea72aac53101a6eaa863ce9b7295d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9050c834d65ea72aac53101a6eaa863ce9b7295d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9050c834d65ea72aac53101a6eaa863ce9b7295d"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "454335159eb350e1afb8e77b163dde27b22f1b91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba90d838257853023abae85f8c393eda41c50189/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba90d838257853023abae85f8c393eda41c50189/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba90d838257853023abae85f8c393eda41c50189", "patch": "@@ -1,3 +1,14 @@\n+2010-06-13  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/ia64/ia64.h (FUNCTION_VALUE_REGNO_P, FUNCTION_VALUE,\n+\tLIBCALL_VALUE): Remove macros.\n+\t* config/ia64/ia64-protos.h (ia64_function_value): Remove.\n+\t* config/ia64/ia64.c (TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t(ia64_libcall_value, ia64_function_value_regno_p): New functions.\n+\t(ia64_function_value): Make static. Handle receiving the function\n+\ttype in 'fn_decl_or_type' argunent. Add 'outgoing' argument.\n+\n 2010-06-12  Jan Hubicka  <jh@suse.cz>\n \n \t* cse.c (cse_extended_basic_block): Move optimize_bb_for_speed_p"}, {"sha": "43d58641b9a2868f8b6d486a1abff48094e4016c", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba90d838257853023abae85f8c393eda41c50189/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba90d838257853023abae85f8c393eda41c50189/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=ba90d838257853023abae85f8c393eda41c50189", "patch": "@@ -69,7 +69,6 @@ extern rtx ia64_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t      tree, int, int);\n extern rtx ia64_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern rtx ia64_va_arg (tree, tree);\n-extern rtx ia64_function_value (const_tree, const_tree);\n #endif /* RTX_CODE */\n \n extern void ia64_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,"}, {"sha": "9e2aa7ab50dbc55b50f41c8c4a576821ee66e7fd", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba90d838257853023abae85f8c393eda41c50189/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba90d838257853023abae85f8c393eda41c50189/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ba90d838257853023abae85f8c393eda41c50189", "patch": "@@ -207,6 +207,9 @@ static int ia64_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static bool ia64_function_ok_for_sibcall (tree, tree);\n static bool ia64_return_in_memory (const_tree, const_tree);\n+static rtx ia64_function_value (const_tree, const_tree, bool);\n+static rtx ia64_libcall_value (enum machine_mode, const_rtx);\n+static bool ia64_function_value_regno_p (const unsigned int);\n static bool ia64_rtx_costs (rtx, int, int, int *, bool);\n static int ia64_unspec_may_trap_p (const_rtx, unsigned);\n static void fix_range (const char *);\n@@ -482,6 +485,13 @@ static const struct attribute_spec ia64_attribute_table[] =\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n #endif\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE ia64_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE ia64_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P ia64_function_value_regno_p\n+\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX ia64_struct_value_rtx\n #undef TARGET_RETURN_IN_MEMORY\n@@ -4637,13 +4647,20 @@ ia64_return_in_memory (const_tree valtype, const_tree fntype ATTRIBUTE_UNUSED)\n \n /* Return rtx for register that holds the function return value.  */\n \n-rtx\n-ia64_function_value (const_tree valtype, const_tree func)\n+static rtx\n+ia64_function_value (const_tree valtype,\n+\t\t     const_tree fn_decl_or_type,\n+\t\t     bool outgoing ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   enum machine_mode hfa_mode;\n   int unsignedp;\n+  const_tree func = fn_decl_or_type;\n \n+  if (fn_decl_or_type\n+      && !DECL_P (fn_decl_or_type))\n+    func = NULL;\n+  \n   mode = TYPE_MODE (valtype);\n   hfa_mode = hfa_element_mode (valtype, 0);\n \n@@ -4721,6 +4738,28 @@ ia64_function_value (const_tree valtype, const_tree func)\n     }\n }\n \n+/* Worker function for TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+ia64_libcall_value (enum machine_mode mode,\n+\t\t    const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode,\n+\t\t      (((GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t\t\t || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n+\t\t\t&& (mode) != TFmode)\n+\t\t       ? FR_RET_FIRST : GR_RET_FIRST));\n+}\n+\n+/* Worker function for FUNCTION_VALUE_REGNO_P.  */\n+\n+static bool\n+ia64_function_value_regno_p (const unsigned int regno)\n+{\n+  return ((regno >= GR_RET_FIRST && regno <= GR_RET_LAST)\n+          || (regno >= FR_RET_FIRST && regno <= FR_RET_LAST));\n+}\n+\n /* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n "}, {"sha": "8192b9fb522a44850ab51e7875dcdb12b8435bf4", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba90d838257853023abae85f8c393eda41c50189/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba90d838257853023abae85f8c393eda41c50189/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=ba90d838257853023abae85f8c393eda41c50189", "patch": "@@ -1146,31 +1146,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define FUNCTION_ARG_REGNO_P(REGNO) \\\n (((REGNO) >= AR_ARG_FIRST && (REGNO) < (AR_ARG_FIRST + MAX_ARGUMENT_SLOTS)) \\\n  || ((REGNO) >= FR_ARG_FIRST && (REGNO) < (FR_ARG_FIRST + MAX_ARGUMENT_SLOTS)))\n-\f\n-/* How Scalar Function Values are Returned */\n-\n-/* A C expression to create an RTX representing the place where a function\n-   returns a value of data type VALTYPE.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  ia64_function_value (VALTYPE, FUNC)\n-\n-/* A C expression to create an RTX representing the place where a library\n-   function returns a value of mode MODE.  */\n-\n-#define LIBCALL_VALUE(MODE) \\\n-  gen_rtx_REG (MODE,\t\t\t\t\t\t\t\\\n-\t       (((GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\\\n-\t\t || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT) &&\t\\\n-\t\t      (MODE) != TFmode)\t\\\n-\t\t? FR_RET_FIRST : GR_RET_FIRST))\n-\n-/* A C expression that is nonzero if REGNO is the number of a hard register in\n-   which the values of called function may come back.  */\n-\n-#define FUNCTION_VALUE_REGNO_P(REGNO)\t\t\t\t\\\n-  (((REGNO) >= GR_RET_FIRST && (REGNO) <= GR_RET_LAST)\t\t\\\n-   || ((REGNO) >= FR_RET_FIRST && (REGNO) <= FR_RET_LAST))\n \n \f\n /* How Large Values are Returned */"}]}