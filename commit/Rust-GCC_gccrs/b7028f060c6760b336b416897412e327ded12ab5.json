{"sha": "b7028f060c6760b336b416897412e327ded12ab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcwMjhmMDYwYzY3NjBiMzM2YjQxNjg5NzQxMmUzMjdkZWQxMmFiNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-31T19:55:45Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-11T01:08:09Z"}, "message": "analyzer: stricter handling of non-pure builtins [PR96798]\n\nAmongst other things PR analyzer/96798 notes that\nregion_model::on_call_pre treats any builtin that hasn't been coded\nyet as a no-op (albeit with an unknown return value), which is wrong\nfor non-pure builtins.\n\nThis patch updates that function's handling of such builtins so that it\ninstead conservatively assumes that any escaped/reachable regions can\nbe affected by the call, and implements enough handling of specific\nbuiltins to avoid regressing the testsuite (I hope).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/96798\n\t* region-model-impl-calls.cc (region_model::impl_call_memcpy):\n\tNew.\n\t(region_model::impl_call_strcpy): New.\n\t* region-model.cc (region_model::on_call_pre): Flag unhandled\n\tbuiltins that are non-pure as having unknown side-effects.\n\tImplement BUILT_IN_MEMCPY, BUILT_IN_MEMCPY_CHK, BUILT_IN_STRCPY,\n\tBUILT_IN_STRCPY_CHK, BUILT_IN_FPRINTF, BUILT_IN_FPRINTF_UNLOCKED,\n\tBUILT_IN_PUTC, BUILT_IN_PUTC_UNLOCKED, BUILT_IN_FPUTC,\n\tBUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS, BUILT_IN_FPUTS_UNLOCKED,\n\tBUILT_IN_FWRITE, BUILT_IN_FWRITE_UNLOCKED, BUILT_IN_PRINTF,\n\tBUILT_IN_PRINTF_UNLOCKED, BUILT_IN_PUTCHAR,\n\tBUILT_IN_PUTCHAR_UNLOCKED, BUILT_IN_PUTS, BUILT_IN_PUTS_UNLOCKED,\n\tBUILT_IN_VFPRINTF, BUILT_IN_VPRINTF.\n\t* region-model.h (region_model::impl_call_memcpy): New decl.\n\t(region_model::impl_call_strcpy): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/96798\n\t* gcc.dg/analyzer/memcpy-1.c: New test.\n\t* gcc.dg/analyzer/strcpy-1.c: New test.", "tree": {"sha": "b2b7d957a0a9971012950006b1d20fd0d1ab3f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2b7d957a0a9971012950006b1d20fd0d1ab3f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7028f060c6760b336b416897412e327ded12ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7028f060c6760b336b416897412e327ded12ab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7028f060c6760b336b416897412e327ded12ab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7028f060c6760b336b416897412e327ded12ab5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdcc0283c6fbae461214a011ac517443c81b0102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcc0283c6fbae461214a011ac517443c81b0102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdcc0283c6fbae461214a011ac517443c81b0102"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "6582ffb3c9575cbcf6e79a443a7bbcc480019cc2", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=b7028f060c6760b336b416897412e327ded12ab5", "patch": "@@ -276,6 +276,30 @@ region_model::impl_call_malloc (const call_details &cd)\n   return true;\n }\n \n+/* Handle the on_call_pre part of \"memcpy\" and \"__builtin_memcpy\".  */\n+\n+void\n+region_model::impl_call_memcpy (const call_details &cd)\n+{\n+  const svalue *dest_sval = cd.get_arg_svalue (0);\n+  const svalue *num_bytes_sval = cd.get_arg_svalue (2);\n+\n+  const region *dest_reg = deref_rvalue (dest_sval, cd.get_arg_tree (0),\n+\t\t\t\t\t cd.get_ctxt ());\n+\n+  cd.maybe_set_lhs (dest_sval);\n+\n+  if (tree num_bytes = num_bytes_sval->maybe_get_constant ())\n+    {\n+      /* \"memcpy\" of zero size is a no-op.  */\n+      if (zerop (num_bytes))\n+\treturn;\n+    }\n+\n+  /* Otherwise, mark region's contents as unknown.  */\n+  mark_region_as_unknown (dest_reg);\n+}\n+\n /* Handle the on_call_pre part of \"memset\" and \"__builtin_memset\".  */\n \n bool\n@@ -353,6 +377,21 @@ region_model::impl_call_operator_delete (const call_details &cd)\n   return false;\n }\n \n+/* Handle the on_call_pre part of \"strcpy\" and \"__builtin_strcpy_chk\".  */\n+\n+void\n+region_model::impl_call_strcpy (const call_details &cd)\n+{\n+  const svalue *dest_sval = cd.get_arg_svalue (0);\n+  const region *dest_reg = deref_rvalue (dest_sval, cd.get_arg_tree (0),\n+\t\t\t\t\t cd.get_ctxt ());\n+\n+  cd.maybe_set_lhs (dest_sval);\n+\n+  /* For now, just mark region's contents as unknown.  */\n+  mark_region_as_unknown (dest_reg);\n+}\n+\n /* Handle the on_call_pre part of \"strlen\".\n    Return true if the LHS is updated.  */\n "}, {"sha": "75f4eae308319a815756719e62ce96386c2dad2f", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=b7028f060c6760b336b416897412e327ded12ab5", "patch": "@@ -658,6 +658,8 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \tswitch (DECL_UNCHECKED_FUNCTION_CODE (callee_fndecl))\n \t  {\n \t  default:\n+\t    if (!DECL_PURE_P (callee_fndecl))\n+\t      unknown_side_effects = true;\n \t    break;\n \t  case BUILT_IN_ALLOCA:\n \t  case BUILT_IN_ALLOCA_WITH_ALIGN:\n@@ -672,20 +674,54 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \t    break;\n \t  case BUILT_IN_MALLOC:\n \t    return impl_call_malloc (cd);\n+\t  case BUILT_IN_MEMCPY:\n+\t  case BUILT_IN_MEMCPY_CHK:\n+\t    impl_call_memcpy (cd);\n+\t    return false;\n \t  case BUILT_IN_MEMSET:\n \t  case BUILT_IN_MEMSET_CHK:\n \t    impl_call_memset (cd);\n \t    return false;\n \t    break;\n+\t  case BUILT_IN_STRCPY:\n+\t  case BUILT_IN_STRCPY_CHK:\n+\t    impl_call_strcpy (cd);\n+\t    return false;\n \t  case BUILT_IN_STRLEN:\n \t    if (impl_call_strlen (cd))\n \t      return false;\n \t    break;\n+\n+\t  /* Stdio builtins.  */\n+\t  case BUILT_IN_FPRINTF:\n+\t  case BUILT_IN_FPRINTF_UNLOCKED:\n+\t  case BUILT_IN_PUTC:\n+\t  case BUILT_IN_PUTC_UNLOCKED:\n+\t  case BUILT_IN_FPUTC:\n+\t  case BUILT_IN_FPUTC_UNLOCKED:\n+\t  case BUILT_IN_FPUTS:\n+\t  case BUILT_IN_FPUTS_UNLOCKED:\n+\t  case BUILT_IN_FWRITE:\n+\t  case BUILT_IN_FWRITE_UNLOCKED:\n+\t  case BUILT_IN_PRINTF:\n+\t  case BUILT_IN_PRINTF_UNLOCKED:\n+\t  case BUILT_IN_PUTCHAR:\n+\t  case BUILT_IN_PUTCHAR_UNLOCKED:\n+\t  case BUILT_IN_PUTS:\n+\t  case BUILT_IN_PUTS_UNLOCKED:\n+\t  case BUILT_IN_VFPRINTF:\n+\t  case BUILT_IN_VPRINTF:\n+\t    /* These stdio builtins have external effects that are out\n+\t       of scope for the analyzer: we only want to model the effects\n+\t       on the return value.  */\n+\t    break;\n \t  }\n       else if (gimple_call_internal_p (call))\n \tswitch (gimple_call_internal_fn (call))\n \t  {\n \t  default:\n+\t    if (!DECL_PURE_P (callee_fndecl))\n+\t      unknown_side_effects = true;\n \t    break;\n \t  case IFN_BUILTIN_EXPECT:\n \t    return impl_call_builtin_expect (cd);"}, {"sha": "1bb9798ae58d08427724feda13cdede9241f2a69", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=b7028f060c6760b336b416897412e327ded12ab5", "patch": "@@ -2554,7 +2554,9 @@ class region_model\n   bool impl_call_calloc (const call_details &cd);\n   void impl_call_free (const call_details &cd);\n   bool impl_call_malloc (const call_details &cd);\n+  void impl_call_memcpy (const call_details &cd);\n   bool impl_call_memset (const call_details &cd);\n+  void impl_call_strcpy (const call_details &cd);\n   bool impl_call_strlen (const call_details &cd);\n   bool impl_call_operator_new (const call_details &cd);\n   bool impl_call_operator_delete (const call_details &cd);"}, {"sha": "f120eac19b3a8fa8a11051c5b11e1f6c3139ebec", "filename": "gcc/testsuite/gcc.dg/analyzer/memcpy-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c?ref=b7028f060c6760b336b416897412e327ded12ab5", "patch": "@@ -0,0 +1,43 @@\n+#include <string.h>\n+#include \"analyzer-decls.h\"\n+\n+void *test_1 (void *dst, void *src, size_t n)\n+{\n+  void *result = memcpy (dst, src, n);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}\n+\n+void *test_1a (void *dst, void *src, size_t n)\n+{\n+  void *result = __memcpy_chk (dst, src, n, -1);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}\n+\n+void test_2 (int i)\n+{\n+  int j;\n+  memcpy (&j, &i, sizeof (int));\n+  __analyzer_eval (i == j); /* { dg-warning \"TRUE\" } */\n+}\n+\n+void test_2a (int i)\n+{\n+  int j;\n+  __memcpy_chk (&j, &i, sizeof (int), sizeof (int));\n+  __analyzer_eval (i == j);  /* { dg-warning \"TRUE\" } */\n+}\n+\n+void test_3 (void *src, size_t n)\n+{\n+  char buf[40], other[40];\n+  buf[0] = 'a';\n+  other[0] = 'b';\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+\n+  memcpy (buf, src, n);\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+}"}, {"sha": "ed5bab98e4be3a99307b4667c640836fa46bd1a2", "filename": "gcc/testsuite/gcc.dg/analyzer/strcpy-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7028f060c6760b336b416897412e327ded12ab5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstrcpy-1.c?ref=b7028f060c6760b336b416897412e327ded12ab5", "patch": "@@ -0,0 +1,18 @@\n+#include <string.h>\n+#include \"analyzer-decls.h\"\n+\n+char *\n+test_1 (char *dst, char *src)\n+{\n+  char *result = strcpy (dst, src);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}\n+\n+char *\n+test_1a (char *dst, char *src)\n+{\n+  char *result = __strcpy_chk (dst, src, -1);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}"}]}