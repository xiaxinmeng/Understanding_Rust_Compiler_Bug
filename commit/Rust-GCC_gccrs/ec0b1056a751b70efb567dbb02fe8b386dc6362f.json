{"sha": "ec0b1056a751b70efb567dbb02fe8b386dc6362f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwYjEwNTZhNzUxYjcwZWZiNTY3ZGJiMDJmZThiMzg2ZGM2MzYyZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-26T15:20:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-26T15:20:04Z"}, "message": "Add recursive_directory_iterator::pop(error_code&)\n\n\t* include/experimental/bits/fs_dir.h (recursive_directory_iterator):\n\tOverload pop (LWG 2706).\n\t* src/filesystem/dir.cc (recursive_directory_iterator::pop): Define\n\tnew overload.\n\t* testsuite/experimental/filesystem/iterators/pop.cc: New test.\n\nFrom-SVN: r241559", "tree": {"sha": "22a523c01df279c1901b90805f010c9a49cf1110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22a523c01df279c1901b90805f010c9a49cf1110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec0b1056a751b70efb567dbb02fe8b386dc6362f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0b1056a751b70efb567dbb02fe8b386dc6362f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0b1056a751b70efb567dbb02fe8b386dc6362f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0b1056a751b70efb567dbb02fe8b386dc6362f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae51afc5a2041cf8acec1343db13346fa9a848b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae51afc5a2041cf8acec1343db13346fa9a848b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae51afc5a2041cf8acec1343db13346fa9a848b1"}], "stats": {"total": 146, "additions": 141, "deletions": 5}, "files": [{"sha": "dbbb2ff97f0289eccafde3c638dda293382fac12", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec0b1056a751b70efb567dbb02fe8b386dc6362f", "patch": "@@ -1,5 +1,11 @@\n 2016-10-26  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/bits/fs_dir.h (recursive_directory_iterator):\n+\tOverload pop (LWG 2706).\n+\t* src/filesystem/dir.cc (recursive_directory_iterator::pop): Define\n+\tnew overload.\n+\t* testsuite/experimental/filesystem/iterators/pop.cc: New test.\n+\n \t* src/filesystem/dir.cc (recursive_directory_iterator::increment):\n \tReset state on error.\n \t* testsuite/experimental/filesystem/iterators/"}, {"sha": "818e7ff5efcab0dfee327f5d9a906b198ba9227a", "filename": "libstdc++-v3/include/experimental/bits/fs_dir.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_dir.h?ref=ec0b1056a751b70efb567dbb02fe8b386dc6362f", "patch": "@@ -312,6 +312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     }\n \n     void pop();\n+    void pop(error_code&);\n \n     void disable_recursion_pending() { _M_pending = false; }\n "}, {"sha": "9a63c4a7ff18079419fed8fcc10cf4c4dcda9b73", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=ec0b1056a751b70efb567dbb02fe8b386dc6362f", "patch": "@@ -364,19 +364,33 @@ fs::recursive_directory_iterator::increment(error_code& ec) noexcept\n }\n \n void\n-fs::recursive_directory_iterator::pop()\n+fs::recursive_directory_iterator::pop(error_code& ec)\n {\n   if (!_M_dirs)\n-    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\n-\t  \"cannot pop non-dereferenceable recursive directory iterator\",\n-\t  std::make_error_code(errc::invalid_argument)));\n+    {\n+      ec = std::make_error_code(errc::invalid_argument);\n+      return;\n+    }\n \n   do {\n     _M_dirs->pop();\n     if (_M_dirs->empty())\n       {\n \t_M_dirs.reset();\n+\tec.clear();\n \treturn;\n       }\n-  } while (!_M_dirs->top().advance(nullptr, _M_options));\n+  } while (!_M_dirs->top().advance(&ec, _M_options));\n+}\n+\n+void\n+fs::recursive_directory_iterator::pop()\n+{\n+  error_code ec;\n+  pop(ec);\n+  if (ec)\n+    _GLIBCXX_THROW_OR_ABORT(filesystem_error(_M_dirs\n+\t  ? \"recursive directory iterator cannot pop\"\n+\t  : \"non-dereferenceable recursive directory iterator cannot pop\",\n+\t  ec));\n }"}, {"sha": "fa1ae62bad7fdd960289d45d98253ab0eacfa0ee", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/pop.cc", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fpop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0b1056a751b70efb567dbb02fe8b386dc6362f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fpop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fpop.cc?ref=ec0b1056a751b70efb567dbb02fe8b386dc6362f", "patch": "@@ -0,0 +1,115 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  std::error_code ec;\n+  fs::recursive_directory_iterator dir;\n+  dir.pop(ec);  // This is undefined, but our implementation\n+  VERIFY( ec ); // checks and returns an error.\n+  VERIFY( dir == end(dir) );\n+\n+  std::error_code ec2;\n+  try\n+  {\n+    dir.pop();\n+  }\n+  catch (const fs::filesystem_error& ex)\n+  {\n+    ec2 = ex.code();\n+  }\n+  VERIFY( ec2 == ec );\n+}\n+\n+void\n+test02()\n+{\n+  std::error_code ec = make_error_code(std::errc::interrupted);\n+  const auto p = __gnu_test::nonexistent_path();\n+  create_directories(p / \"d1/d2/d3\");\n+  for (int i = 0; i < 3; ++i)\n+  {\n+    fs::recursive_directory_iterator dir(p);\n+    std::advance(dir, i);\n+    VERIFY( dir.depth() == i );\n+    dir.pop(ec);\n+    VERIFY( !ec );\n+    VERIFY( dir == end(dir) );\n+\n+    dir = fs::recursive_directory_iterator(p);\n+    std::advance(dir, i);\n+    VERIFY( dir.depth() == i );\n+    dir.pop();\n+    VERIFY( dir == end(dir) );\n+  }\n+  remove_all(p, ec);\n+}\n+\n+void\n+test03()\n+{\n+  std::error_code ec = make_error_code(std::errc::interrupted);\n+  const auto p = __gnu_test::nonexistent_path();\n+  create_directories(p / \"d1/d2/d3\");\n+  create_directories(p / \"d1/d2/e3\");\n+  create_directories(p / \"d1/e2/d3\");\n+  create_directories(p / \"e1\");\n+  __gnu_test::scoped_file f(p / \"d1/d2/d3/f\");\n+  for (int i = 0; i < 4; ++i)\n+  {\n+    fs::recursive_directory_iterator dir(p);\n+    std::advance(dir, i);\n+    int expected_depth = std::min(i, 3); // fourth entry is a file, not dir\n+    VERIFY( dir.depth() == expected_depth );\n+    __builtin_printf(\"%d %d %s\\n\", i, dir.depth(), dir->path().c_str());\n+    dir.pop(ec);\n+    VERIFY( !ec );\n+    if (dir != end(dir))\n+    {\n+    __builtin_printf(\"%d %d %s\\n\", i, dir.depth(), dir->path().c_str());\n+      VERIFY( dir.depth() == (expected_depth - 1) );\n+    }\n+\n+    dir = fs::recursive_directory_iterator(p);\n+    std::advance(dir, i);\n+    VERIFY( dir.depth() == i );\n+    dir.pop();\n+    if (dir != end(dir))\n+      VERIFY( dir.depth() == (i -1) );\n+  }\n+  f.path.clear();\n+  remove_all(p, ec);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}