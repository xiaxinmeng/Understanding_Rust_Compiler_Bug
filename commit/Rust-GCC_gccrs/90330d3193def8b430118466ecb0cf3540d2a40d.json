{"sha": "90330d3193def8b430118466ecb0cf3540d2a40d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzMzBkMzE5M2RlZjhiNDMwMTE4NDY2ZWNiMGNmMzU0MGQyYTQwZA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-02-06T21:17:13Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-02-06T21:17:13Z"}, "message": "config.gcc (hppa*-*-linux*): Set MASK_NO_SPACE_REGS in target_cpu_default.\n\n\t* config.gcc (hppa*-*-linux*): Set MASK_NO_SPACE_REGS in\n\ttarget_cpu_default.\n\t* pa.c (attr_length_call): Add 8 to call length (long indirect PA 1.X)\n\tif not MASK_NO_SPACE_REGS.\n\t(output_call): Adjust return pointer, don't load new space register\n\tinto %sr0, and use %sr4 for call if TARGET_NO_SPACE_REGS is true.\n\t(pa_asm_output_mi_thunk): Don't load new space register into %sr0 if\n\tTARGET_NO_SPACE_REGS is true.\n\t* pa.md (return_external_pic): Add TARGET_NO_SPACE_REGS to insn\n\tconditions.\n\t(epilogue): Always use return_internal if TARGET_NO_SPACE_REGS is true.\n\t(interspace_jump): Add new pattern for when TARGET_NO_SPACE_REGS is\n\ttrue.  Use bve when TARGET_64BIT is true.\n\nFrom-SVN: r62497", "tree": {"sha": "255be242fc65bbb5c986329e99782c266c1652bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255be242fc65bbb5c986329e99782c266c1652bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90330d3193def8b430118466ecb0cf3540d2a40d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90330d3193def8b430118466ecb0cf3540d2a40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90330d3193def8b430118466ecb0cf3540d2a40d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90330d3193def8b430118466ecb0cf3540d2a40d/comments", "author": null, "committer": null, "parents": [{"sha": "61b56b2e4bf964b0b14a6d4bc89068c6bff26d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b56b2e4bf964b0b14a6d4bc89068c6bff26d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b56b2e4bf964b0b14a6d4bc89068c6bff26d71"}], "stats": {"total": 100, "additions": 81, "deletions": 19}, "files": [{"sha": "124742cbd8468f21df34b70ff4b728d96054beef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90330d3193def8b430118466ecb0cf3540d2a40d", "patch": "@@ -1,3 +1,19 @@\n+2003-02-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* config.gcc (hppa*-*-linux*): Set MASK_NO_SPACE_REGS in\n+\ttarget_cpu_default.\n+\t* pa.c (attr_length_call): Add 8 to call length (long indirect PA 1.X)\n+\tif not MASK_NO_SPACE_REGS.\n+\t(output_call): Adjust return pointer, don't load new space register\n+\tinto %sr0, and use %sr4 for call if TARGET_NO_SPACE_REGS is true.\n+\t(pa_asm_output_mi_thunk): Don't load new space register into %sr0 if\n+\tTARGET_NO_SPACE_REGS is true.\n+\t* pa.md (return_external_pic): Add TARGET_NO_SPACE_REGS to insn\n+\tconditions.\n+\t(epilogue): Always use return_internal if TARGET_NO_SPACE_REGS is true.\n+\t(interspace_jump): Add new pattern for when TARGET_NO_SPACE_REGS is\n+\ttrue.  Use bve when TARGET_64BIT is true.\n+\n 2003-02-06  Richard Henderson  <rth@redhat.com>\n \n \t* combine.c (nonzero_bits): Fix double break."}, {"sha": "2b8d0b506f79af5382e81049e63ee213cdff1d8b", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=90330d3193def8b430118466ecb0cf3540d2a40d", "patch": "@@ -785,7 +785,7 @@ hppa*64*-*-linux* | parisc*64*-*-linux*)\n \tneed_64bit_hwint=yes\n \t;;\n hppa*-*-linux* | parisc*-*-linux*)\n-\ttarget_cpu_default=\"MASK_PA_11\"\n+\ttarget_cpu_default=\"MASK_PA_11 | MASK_NO_SPACE_REGS\"\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h pa/pa-linux.h \\\n \t\t pa/pa32-regs.h pa/pa32-linux.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux pa/t-linux\""}, {"sha": "ea6df059104a06d94d4ed0453038949235d7a93d", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=90330d3193def8b430118466ecb0cf3540d2a40d", "patch": "@@ -6532,10 +6532,13 @@ attr_length_call (insn, sibcall)\n \t  if (TARGET_PA_20)\n \t    return (length + 32);\n \n+\t  if (!TARGET_NO_SPACE_REGS)\n+\t    length += 8;\n+\n \t  if (!sibcall)\n \t    length += 8;\n \n-\t  return (length + 40);\n+\t  return (length + 32);\n \t}\n     }\n }\n@@ -6730,7 +6733,10 @@ output_call (insn, call_dest, sibcall)\n \t\t  if (!sibcall && !TARGET_PA_20)\n \t\t    {\n \t\t      output_asm_insn (\"{bl|b,l} .+8,%%r2\", xoperands);\n-\t\t      output_asm_insn (\"addi 16,%%r2,%%r2\", xoperands);\n+\t\t      if (TARGET_NO_SPACE_REGS)\n+\t\t\toutput_asm_insn (\"addi 8,%%r2,%%r2\", xoperands);\n+\t\t      else\n+\t\t\toutput_asm_insn (\"addi 16,%%r2,%%r2\", xoperands);\n \t\t    }\n \t\t}\n \n@@ -6752,14 +6758,23 @@ output_call (insn, call_dest, sibcall)\n \t\t}\n \t      else\n \t\t{\n-\t          output_asm_insn (\"ldsid (%%r1),%%r31\\n\\tmtsp %%r31,%%sr0\",\n-\t\t\t\t   xoperands);\n+\t\t  if (!TARGET_NO_SPACE_REGS)\n+\t\t    output_asm_insn (\"ldsid (%%r1),%%r31\\n\\tmtsp %%r31,%%sr0\",\n+\t\t\t\t     xoperands);\n \n \t\t  if (sibcall)\n-\t\t    output_asm_insn (\"be 0(%%sr0,%%r1)\", xoperands);\n+\t\t    {\n+\t\t      if (TARGET_NO_SPACE_REGS)\n+\t\t\toutput_asm_insn (\"be 0(%%sr4,%%r1)\", xoperands);\n+\t\t      else\n+\t\t\toutput_asm_insn (\"be 0(%%sr0,%%r1)\", xoperands);\n+\t\t    }\n \t\t  else\n \t\t    {\n-\t\t      output_asm_insn (\"ble 0(%%sr0,%%r1)\", xoperands);\n+\t\t      if (TARGET_NO_SPACE_REGS)\n+\t\t\toutput_asm_insn (\"ble 0(%%sr4,%%r1)\", xoperands);\n+\t\t      else\n+\t\t\toutput_asm_insn (\"ble 0(%%sr0,%%r1)\", xoperands);\n \n \t\t      if (indirect_call)\n \t\t\toutput_asm_insn (\"stw %%r31,-24(%%sp)\", xoperands);\n@@ -7026,7 +7041,7 @@ pa_asm_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n   pa_output_function_prologue (file, 0);\n   if (VAL_14_BITS_P (delta))\n     {\n-      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\n+      if (!TARGET_64BIT && !TARGET_PORTABLE_RUNTIME && flag_pic)\n \t{\n \t  fprintf (file, \"\\taddil LT'%s,%%r19\\n\", lab);\n \t  fprintf (file, \"\\tldw RT'%s(%%r1),%%r22\\n\", lab);\n@@ -7035,8 +7050,14 @@ pa_asm_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n \t  fprintf (file, \"\\tdepi 0,31,2,%%r22\\n\");\n \t  fprintf (file, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\n \t  fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n-\t  fprintf (file, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\");\n-\t  fprintf (file, \"\\tbe 0(%%sr0,%%r22)\\n\\tldo \");\n+\t  if (TARGET_NO_SPACE_REGS)\n+\t    fprintf (file, \"\\tbe 0(%%sr4,%%r22)\\n\\tldo \");\n+\t  else\n+\t    {\n+\t      fprintf (file, \"\\tldsid (%%sr0,%%r22),%%r1\\n\");\n+\t      fprintf (file, \"\\tmtsp %%r1,%%sr0\\n\");\n+\t      fprintf (file, \"\\tbe 0(%%sr0,%%r22)\\n\\tldo \");\n+\t    }\n \t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n \t  fprintf (file, \"(%%r26),%%r26\\n\");\n \t}\n@@ -7049,7 +7070,7 @@ pa_asm_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n     }\n   else\n     {\n-      if (! TARGET_64BIT && ! TARGET_PORTABLE_RUNTIME && flag_pic)\n+      if (!TARGET_64BIT && !TARGET_PORTABLE_RUNTIME && flag_pic)\n \t{\n \t  fprintf (file, \"\\taddil L'\");\n \t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n@@ -7063,8 +7084,14 @@ pa_asm_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n \t  fprintf (file, \"\\tdepi 0,31,2,%%r22\\n\");\n \t  fprintf (file, \"\\tldw 4(%%sr0,%%r22),%%r19\\n\");\n \t  fprintf (file, \"\\tldw 0(%%sr0,%%r22),%%r22\\n\");\n-\t  fprintf (file, \"\\tldsid (%%sr0,%%r22),%%r1\\n\\tmtsp %%r1,%%sr0\\n\");\n-\t  fprintf (file, \"\\tbe,n 0(%%sr0,%%r22)\\n\");\n+\t  if (TARGET_NO_SPACE_REGS)\n+\t    fprintf (file, \"\\tbe 0(%%sr4,%%r22)\");\n+\t  else\n+\t    {\n+\t      fprintf (file, \"\\tldsid (%%sr0,%%r22),%%r1\\n\");\n+\t      fprintf (file, \"\\tmtsp %%r1,%%sr0\\n\");\n+\t      fprintf (file, \"\\tbe,n 0(%%sr0,%%r22)\\n\");\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "d8b2a4af911f7ddcba58884cb1136fb58f994d93", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90330d3193def8b430118466ecb0cf3540d2a40d/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=90330d3193def8b430118466ecb0cf3540d2a40d", "patch": "@@ -5629,7 +5629,7 @@\n   [(return)\n    (clobber (reg:SI 1))\n    (use (reg:SI 2))]\n-  \"flag_pic && current_function_calls_eh_return\"\n+  \"!TARGET_NO_SPACE_REGS && flag_pic && current_function_calls_eh_return\"\n   \"ldsid (%%sr0,%%r2),%%r1\\;mtsp %%r1,%%sr0\\;be%* 0(%%sr0,%%r2)\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"12\")])\n@@ -5665,8 +5665,10 @@\n \n       /* EH returns bypass the normal return stub.  Thus, we must do an\n \t interspace branch to return from functions that call eh_return.\n-\t This is only a problem for returns from shared code.  */\n-      if (flag_pic && current_function_calls_eh_return)\n+\t This is only a problem for returns from shared code on ports\n+\t using space registers.  */\n+      if (!TARGET_NO_SPACE_REGS\n+\t  && flag_pic && current_function_calls_eh_return)\n \tx = gen_return_external_pic ();\n       else\n \tx = gen_return_internal ();\n@@ -6997,7 +6999,8 @@\n \n ;;; EH does longjmp's from and within the data section.  Thus,\n ;;; an interspace branch is required for the longjmp implementation.\n-;;; Registers r1 and r2 are used as scratch registers for the jump.\n+;;; Registers r1 and r2 are used as scratch registers for the jump\n+;;; when necessary.\n (define_expand \"interspace_jump\"\n   [(parallel\n      [(set (pc) (match_operand 0 \"pmode_register_operand\" \"a\"))\n@@ -7008,6 +7011,22 @@\n   operands[1] = gen_rtx_REG (word_mode, 2);\n }\")\n \n+(define_insn \"\"\n+  [(set (pc) (match_operand 0 \"pmode_register_operand\" \"a\"))\n+  (clobber (reg:SI 2))]\n+  \"TARGET_PA_20 && !TARGET_64BIT\"\n+  \"bve%* (%0)\"\n+   [(set_attr \"type\" \"branch\")\n+    (set_attr \"length\" \"4\")])\n+\n+(define_insn \"\"\n+  [(set (pc) (match_operand 0 \"pmode_register_operand\" \"a\"))\n+  (clobber (reg:SI 2))]\n+  \"TARGET_NO_SPACE_REGS && !TARGET_64BIT\"\n+  \"be%* 0(%%sr4,%0)\"\n+   [(set_attr \"type\" \"branch\")\n+    (set_attr \"length\" \"4\")])\n+\n (define_insn \"\"\n   [(set (pc) (match_operand 0 \"pmode_register_operand\" \"a\"))\n   (clobber (reg:SI 2))]\n@@ -7020,9 +7039,9 @@\n   [(set (pc) (match_operand 0 \"pmode_register_operand\" \"a\"))\n   (clobber (reg:DI 2))]\n   \"TARGET_64BIT\"\n-  \"ldsid (%%sr0,%0),%%r2\\; mtsp %%r2,%%sr0\\; be%* 0(%%sr0,%0)\"\n+  \"bve%* (%0)\"\n    [(set_attr \"type\" \"branch\")\n-    (set_attr \"length\" \"12\")])\n+    (set_attr \"length\" \"4\")])\n \n (define_expand \"builtin_longjmp\"\n   [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")] 3)]"}]}