{"sha": "edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRkNWU5MDAxMmI5NmNlOWMyZjlmZjM4Mzc1NjFlNTFhYTUwOWViZA==", "commit": {"author": {"name": "Jie Zhang", "email": "jzhang918@gmail.com", "date": "2012-07-18T11:29:45Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2012-07-18T11:29:45Z"}, "message": "arm.c (arm_rtx_costs_1): Adjust cost for CONST_VECTOR.\n\n    gcc/\n    * config/arm/arm.c (arm_rtx_costs_1): Adjust cost for\n    CONST_VECTOR.\n    (arm_size_rtx_costs): Likewise.\n    (neon_valid_immediate): Add a case for double 0.0.\n\n    gcc/testsuite/\n    * gcc.target/arm/neon-vdup-1.c: New test case.\n    * gcc.target/arm/neon-vdup-2.c: New test case.\n    * gcc.target/arm/neon-vdup-3.c: New test case.\n    * gcc.target/arm/neon-vdup-4.c: New test case.\n    * gcc.target/arm/neon-vdup-5.c: New test case.\n    * gcc.target/arm/neon-vdup-6.c: New test case.\n    * gcc.target/arm/neon-vdup-7.c: New test case.\n    * gcc.target/arm/neon-vdup-8.c: New test case.\n    * gcc.target/arm/neon-vdup-9.c: New test case.\n    * gcc.target/arm/neon-vdup-10.c: New test case.\n    * gcc.target/arm/neon-vdup-11.c: New test case.\n    * gcc.target/arm/neon-vdup-12.c: New test case.\n    * gcc.target/arm/neon-vdup-13.c: New test case.\n    * gcc.target/arm/neon-vdup-14.c: New test case.\n    * gcc.target/arm/neon-vdup-15.c: New test case.\n    * gcc.target/arm/neon-vdup-16.c: New test case.\n    * gcc.target/arm/neon-vdup-17.c: New test case.\n    * gcc.target/arm/neon-vdup-18.c: New test case.\n    * gcc.target/arm/neon-vdup-19.c: New test case.\n    * gcc.target/arm/neon-combine-sub-abs-into-vabd.c: Make intrinsic\n    arguments non-constant.\n\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\n\nFrom-SVN: r189611", "tree": {"sha": "d577b9d48f5284f70bf4561b1e4594407b9e8ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d577b9d48f5284f70bf4561b1e4594407b9e8ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/comments", "author": {"login": "jiez", "id": 83655, "node_id": "MDQ6VXNlcjgzNjU1", "avatar_url": "https://avatars.githubusercontent.com/u/83655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiez", "html_url": "https://github.com/jiez", "followers_url": "https://api.github.com/users/jiez/followers", "following_url": "https://api.github.com/users/jiez/following{/other_user}", "gists_url": "https://api.github.com/users/jiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiez/subscriptions", "organizations_url": "https://api.github.com/users/jiez/orgs", "repos_url": "https://api.github.com/users/jiez/repos", "events_url": "https://api.github.com/users/jiez/events{/privacy}", "received_events_url": "https://api.github.com/users/jiez/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "392e87f6b8af229a8186a2054ed6e3433b1cdbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392e87f6b8af229a8186a2054ed6e3433b1cdbaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392e87f6b8af229a8186a2054ed6e3433b1cdbaf"}], "stats": {"total": 405, "additions": 390, "deletions": 15}, "files": [{"sha": "e93e9a525fd0ad52a73e98abcb968d3a02f786e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -1,8 +1,15 @@\n+2012-07-18  Jie Zhang  <jzhang918@gmail.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_rtx_costs_1): Adjust cost for\n+\tCONST_VECTOR.\n+\t(arm_size_rtx_costs): Likewise.\n+\t(neon_valid_immediate): Add a case for double 0.0.\n+\n 2012-07-18  Andrew Stubbs  <ams@codesourcery.com>\n \t    Mark Shinwell  <shinwell@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n \n-\tgcc/\n \t* config/arm/vfp.md (*arm_movsi_vfp, *thumb2_movsi_vfp)\n \t(*movdi_vfp_cortexa8, *movsf_vfp, *thumb2_movsf_vfp)\n \t(*movdf_vfp, *thumb2_movdf_vfp, *movsfcc_vfp)"}, {"sha": "ff46dd9544a0e2f4d816747dc4ff9fcdf52affed", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -7614,6 +7614,17 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n \t}\n       return true;\n \n+    case CONST_VECTOR:\n+      if (TARGET_NEON\n+\t  && TARGET_HARD_FLOAT\n+\t  && outer == SET\n+\t  && (VALID_NEON_DREG_MODE (mode) || VALID_NEON_QREG_MODE (mode))\n+\t  && neon_immediate_valid_for_move (x, mode, NULL, NULL))\n+\t*total = COSTS_N_INSNS (1);\n+      else\n+\t*total = COSTS_N_INSNS (4);\n+      return true;\n+\n     default:\n       *total = COSTS_N_INSNS (4);\n       return false;\n@@ -7954,6 +7965,17 @@ arm_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n       *total = COSTS_N_INSNS (4);\n       return true;\n \n+    case CONST_VECTOR:\n+      if (TARGET_NEON\n+\t  && TARGET_HARD_FLOAT\n+\t  && outer_code == SET\n+\t  && (VALID_NEON_DREG_MODE (mode) || VALID_NEON_QREG_MODE (mode))\n+\t  && neon_immediate_valid_for_move (x, mode, NULL, NULL))\n+\t*total = COSTS_N_INSNS (1);\n+      else\n+\t*total = COSTS_N_INSNS (4);\n+      return true;\n+\n     case HIGH:\n     case LO_SUM:\n       /* We prefer constant pool entries to MOVW/MOVT pairs, so bump the\n@@ -8774,11 +8796,14 @@ vfp3_const_double_rtx (rtx x)\n    vmov  i64    17    aaaaaaaa bbbbbbbb cccccccc dddddddd\n                       eeeeeeee ffffffff gggggggg hhhhhhhh\n    vmov  f32    18    aBbbbbbc defgh000 00000000 00000000\n+   vmov  f32    19    00000000 00000000 00000000 00000000\n \n    For case 18, B = !b. Representable values are exactly those accepted by\n    vfp3_const_double_index, but are output as floating-point numbers rather\n    than indices.\n \n+   For case 19, we will change it to vmov.i32 when assembling.\n+\n    Variants 0-5 (inclusive) may also be used as immediates for the second\n    operand of VORR/VBIC instructions.\n \n@@ -8835,7 +8860,7 @@ neon_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n       rtx el0 = CONST_VECTOR_ELT (op, 0);\n       REAL_VALUE_TYPE r0;\n \n-      if (!vfp3_const_double_rtx (el0))\n+      if (!vfp3_const_double_rtx (el0) && el0 != CONST0_RTX (GET_MODE (el0)))\n         return -1;\n \n       REAL_VALUE_FROM_CONST_DOUBLE (r0, el0);\n@@ -8857,7 +8882,10 @@ neon_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n       if (elementwidth)\n         *elementwidth = 0;\n \n-      return 18;\n+      if (el0 == CONST0_RTX (GET_MODE (el0)))\n+\treturn 19;\n+      else\n+\treturn 18;\n     }\n \n   /* Splat vector constant out into a byte vector.  */"}, {"sha": "2b24c72397aa27088106c3b77a1fd05d789bca84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -1,3 +1,28 @@\n+2012-07-18  Jie Zhang  <jzhang918@gmail.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* gcc.target/arm/neon-vdup-1.c: New test case.\n+\t* gcc.target/arm/neon-vdup-2.c: New test case.\n+\t* gcc.target/arm/neon-vdup-3.c: New test case.\n+\t* gcc.target/arm/neon-vdup-4.c: New test case.\n+\t* gcc.target/arm/neon-vdup-5.c: New test case.\n+\t* gcc.target/arm/neon-vdup-6.c: New test case.\n+\t* gcc.target/arm/neon-vdup-7.c: New test case.\n+\t* gcc.target/arm/neon-vdup-8.c: New test case.\n+\t* gcc.target/arm/neon-vdup-9.c: New test case.\n+\t* gcc.target/arm/neon-vdup-10.c: New test case.\n+\t* gcc.target/arm/neon-vdup-11.c: New test case.\n+\t* gcc.target/arm/neon-vdup-12.c: New test case.\n+\t* gcc.target/arm/neon-vdup-13.c: New test case.\n+\t* gcc.target/arm/neon-vdup-14.c: New test case.\n+\t* gcc.target/arm/neon-vdup-15.c: New test case.\n+\t* gcc.target/arm/neon-vdup-16.c: New test case.\n+\t* gcc.target/arm/neon-vdup-17.c: New test case.\n+\t* gcc.target/arm/neon-vdup-18.c: New test case.\n+\t* gcc.target/arm/neon-vdup-19.c: New test case.\n+\t* gcc.target/arm/neon-combine-sub-abs-into-vabd.c: Make intrinsic\n+\targuments non-constant.\n+\n 2012-07-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53970"}, {"sha": "fe3d78b308cde0338300785cf7cb6ca77a831e3d", "filename": "gcc/testsuite/gcc.target/arm/neon-combine-sub-abs-into-vabd.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-combine-sub-abs-into-vabd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-combine-sub-abs-into-vabd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-combine-sub-abs-into-vabd.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -4,10 +4,8 @@\n /* { dg-add-options arm_neon } */\n \n #include <arm_neon.h>\n-float32x2_t f_sub_abs_to_vabd_32()\n+float32x2_t f_sub_abs_to_vabd_32(float32x2_t val1, float32x2_t val2)\n {\n-  float32x2_t val1 = vdup_n_f32 (10);\n-  float32x2_t val2 = vdup_n_f32 (30);\n   float32x2_t sres = vsub_f32(val1, val2);\n   float32x2_t res = vabs_f32 (sres);\n \n@@ -16,32 +14,26 @@ float32x2_t f_sub_abs_to_vabd_32()\n /* { dg-final { scan-assembler \"vabd\\.f32\" } }*/\n \n #include <arm_neon.h>\n-int8x8_t sub_abs_to_vabd_8()\n+int8x8_t sub_abs_to_vabd_8(int8x8_t val1, int8x8_t val2)\n {\n-  int8x8_t val1 = vdup_n_s8 (10);\n-  int8x8_t val2 = vdup_n_s8 (30);\n   int8x8_t sres = vsub_s8(val1, val2);\n   int8x8_t res = vabs_s8 (sres);\n \n   return res;\n }\n /* { dg-final { scan-assembler \"vabd\\.s8\" } }*/\n \n-int16x4_t sub_abs_to_vabd_16()\n+int16x4_t sub_abs_to_vabd_16(int16x4_t val1, int16x4_t val2)\n {\n-  int16x4_t val1 = vdup_n_s16 (10);\n-  int16x4_t val2 = vdup_n_s16 (30);\n   int16x4_t sres = vsub_s16(val1, val2);\n   int16x4_t res = vabs_s16 (sres);\n \n   return res;\n }\n /* { dg-final { scan-assembler \"vabd\\.s16\" } }*/\n \n-int32x2_t sub_abs_to_vabd_32()\n+int32x2_t sub_abs_to_vabd_32(int32x2_t val1, int32x2_t val2)\n {\n-  int32x2_t val1 = vdup_n_s32 (10);\n-  int32x2_t val2 = vdup_n_s32 (30);\n   int32x2_t sres = vsub_s32(val1, val2);\n   int32x2_t res = vabs_s32 (sres);\n "}, {"sha": "41799a25cf47138620bd7c28012c6762f6567216", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-1.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_f32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+float32x4_t out_float32x4_t;\n+void test_vdupq_nf32 (void)\n+{\n+  out_float32x4_t = vdupq_n_f32 (0.0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #0\\.0\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a06b0647ad0bbc30c5c9f1544266c24c7b042c0e", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-10.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-10.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (~0x12000000);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #3992977407\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "07d08896af53642de56156cf89c30b455999221d", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-11.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-11.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u16' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint16x8_t out_uint16x8_t;\n+void test_vdupq_nu16 (void)\n+{\n+  out_uint16x8_t = vdupq_n_u16 (0x12);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #18\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "27b4186820718560234660a4eb0e9b5a3d364a33", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-12.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u16' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint16x8_t out_uint16x8_t;\n+void test_vdupq_nu16 (void)\n+{\n+  out_uint16x8_t = vdupq_n_u16 (0x1200);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4608\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "4d38bc0881293ec51d5456bdd3fc089276eb415d", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-13.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-13.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u16' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint16x8_t out_uint16x8_t;\n+void test_vdupq_nu16 (void)\n+{\n+  out_uint16x8_t = vdupq_n_u16 (~0x12);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #65517\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a16659fdae4fac981545dcea25c7f2703671d338", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-14.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-14.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u16' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint16x8_t out_uint16x8_t;\n+void test_vdupq_nu16 (void)\n+{\n+  out_uint16x8_t = vdupq_n_u16 (~0x1200);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #60927\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "84a6fe04febe2595f6b27a6c096c246c4add59c0", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-15.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-15.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u8' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint8x16_t out_uint8x16_t;\n+void test_vdupq_nu8 (void)\n+{\n+  out_uint8x16_t = vdupq_n_u8 (0x12);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #18\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "70bec0336e57736f9dd53a838187e0a7bf1aaf7f", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-16.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-16.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (0x12ff);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4863\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e0283f1fb9583e9ea03d4ce05a5252eba9e36779", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-17.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-17.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (0x12ffff);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #1245183\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7dcf85d396ad8900480fa1df451f87e7bb4f0f00", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-18.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-18.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (~0x12ff);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4294962432\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "09804373f7ab98a546b1ebc199f1c6fdcfd51d60", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-19.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-19.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (~0x12ffff);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4293722112\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f9e6a72aecaf80c400d8e22c3cb0d74612102441", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-2.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_f32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+float32x4_t out_float32x4_t;\n+void test_vdupq_nf32 (void)\n+{\n+  out_float32x4_t = vdupq_n_f32 (0.125);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #1\\.25e-1\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d4073164300e43306a4b147f9a2fb250b0d8b3fd", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-3.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (0x12);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #18\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "bc1be079fb86bc14b687398c4fccda3cfb702a49", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-4.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (0x1200);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4608\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9b04f16d5894db7557039bbdb29c28e92c5bafea", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-5.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (0x120000);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #1179648\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0889b80af2b3b3d277300118424342ad3e77d0a9", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-6.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (0x12000000);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #301989888\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f7b1dc8611fafaa2893c686ed43126b92760f9f5", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-7.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (~0x12);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4294967277\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9d494c355882558852a3c7c2455636d0b88d03cb", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-8.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (~0x1200);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4294962687\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "799e95ed9bf3729874648a08de3407f2c298bfdd", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup-9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edd5e90012b96ce9c2f9ff3837561e51aa509ebd/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup-9.c?ref=edd5e90012b96ce9c2f9ff3837561e51aa509ebd", "patch": "@@ -0,0 +1,17 @@\n+/* Test the optimization of `vdupq_n_u32' ARM Neon intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t out_uint32x4_t;\n+void test_vdupq_nu32 (void)\n+{\n+  out_uint32x4_t = vdupq_n_u32 (~0x120000);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, #4293787647\\(\\[ \\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}