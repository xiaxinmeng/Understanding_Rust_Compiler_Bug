{"sha": "b17213394b00e698b35a5a5ff844957026e4c73f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3MjEzMzk0YjAwZTY5OGIzNWE1YTVmZjg0NDk1NzAyNmU0YzczZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-06-04T08:34:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-06-04T08:34:22Z"}, "message": "final.c (asm_fprintf): Update comments...\n\n\t* final.c (asm_fprintf): Update comments, accept \"-+ #0\" flags,\n\toptimize '%' case, handle %c, don't accept %p, %e, %f or %g,\n\thandle %ll, optimize regular character case.\n\nFrom-SVN: r67434", "tree": {"sha": "966b27cd3be32f3b6585b76b933c2d1161c1cf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/966b27cd3be32f3b6585b76b933c2d1161c1cf45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17213394b00e698b35a5a5ff844957026e4c73f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17213394b00e698b35a5a5ff844957026e4c73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17213394b00e698b35a5a5ff844957026e4c73f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17213394b00e698b35a5a5ff844957026e4c73f/comments", "author": null, "committer": null, "parents": [{"sha": "9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf8cfbfcd4c863cc05bc186e29aa07247276bb4"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "c15754135f49fd4f60fc2c809f1b69fe992ed026", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17213394b00e698b35a5a5ff844957026e4c73f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17213394b00e698b35a5a5ff844957026e4c73f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17213394b00e698b35a5a5ff844957026e4c73f", "patch": "@@ -1,3 +1,9 @@\n+2003-06-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* final.c (asm_fprintf): Update comments, accept \"-+ #0\" flags,\n+\toptimize '%' case, handle %c, don't accept %p, %e, %f or %g,\n+\thandle %ll, optimize regular character case.\n+\n 2003-06-04  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* Makefile.in (cse.o): Add params.h dependency."}, {"sha": "2dd07e5d7f423845c78edef799b93845055ba0b6", "filename": "gcc/final.c", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17213394b00e698b35a5a5ff844957026e4c73f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17213394b00e698b35a5a5ff844957026e4c73f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=b17213394b00e698b35a5a5ff844957026e4c73f", "patch": "@@ -3372,7 +3372,7 @@ output_addr_const (file, x)\n    %U prints the value of USER_LABEL_PREFIX.\n    %I prints the value of IMMEDIATE_PREFIX.\n    %O runs ASM_OUTPUT_OPCODE to transform what follows in the string.\n-   Also supported are %d, %x, %s, %e, %f, %g and %%.\n+   Also supported are %d, %i, %u, %x, %X, %o, %c, %s and %%.\n \n    We handle alternate assembler dialects here, just like output_asm_insn.  */\n \n@@ -3421,6 +3421,11 @@ asm_fprintf (FILE *file, const char *p, ...)\n       case '%':\n \tc = *p++;\n \tq = &buf[1];\n+\twhile (strchr (\"-+ #0\", c))\n+\t  {\n+\t    *q++ = c;\n+\t    c = *p++;\n+\t  }\n \twhile (ISDIGIT (c) || c == '.')\n \t  {\n \t    *q++ = c;\n@@ -3429,21 +3434,22 @@ asm_fprintf (FILE *file, const char *p, ...)\n \tswitch (c)\n \t  {\n \t  case '%':\n-\t    fprintf (file, \"%%\");\n+\t    putc ('%', file);\n \t    break;\n \n \t  case 'd':  case 'i':  case 'u':\n-\t  case 'x':  case 'p':  case 'X':\n-\t  case 'o':\n+\t  case 'x':  case 'X':  case 'o':\n+\t  case 'c':\n \t    *q++ = c;\n \t    *q = 0;\n \t    fprintf (file, buf, va_arg (argptr, int));\n \t    break;\n \n \t  case 'w':\n-\t    /* This is a prefix to the 'd', 'i', 'u', 'x', 'p', and 'X' cases,\n-\t       but we do not check for those cases.  It means that the value\n-\t       is a HOST_WIDE_INT, which may be either `int' or `long'.  */\n+\t    /* This is a prefix to the 'd', 'i', 'u', 'x', 'X', and\n+\t       'o' cases, but we do not check for those cases.  It\n+\t       means that the value is a HOST_WIDE_INT, which may be\n+\t       either `long' or `long long'.  */\n \n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n #else\n@@ -3462,17 +3468,22 @@ asm_fprintf (FILE *file, const char *p, ...)\n \n \t  case 'l':\n \t    *q++ = c;\n-\t    *q++ = *p++;\n-\t    *q = 0;\n-\t    fprintf (file, buf, va_arg (argptr, long));\n-\t    break;\n-\n-\t  case 'e':\n-\t  case 'f':\n-\t  case 'g':\n-\t    *q++ = c;\n-\t    *q = 0;\n-\t    fprintf (file, buf, va_arg (argptr, double));\n+#ifdef HAVE_LONG_LONG\n+\t    if (*p == 'l')\n+\t      {\n+\t\t*q++ = *p++;\n+\t\t*q++ = *p++;\n+\t\t*q = 0;\n+\t\tfprintf (file, buf, va_arg (argptr, long long));\n+\t      }\n+\t    else\n+#endif\n+\t      {\n+\t\t*q++ = *p++;\n+\t\t*q = 0;\n+\t\tfprintf (file, buf, va_arg (argptr, long));\n+\t      }\n+\t    \n \t    break;\n \n \t  case 's':\n@@ -3529,7 +3540,7 @@ asm_fprintf (FILE *file, const char *p, ...)\n \tbreak;\n \n       default:\n-\tfputc (c, file);\n+\tputc (c, file);\n       }\n   va_end (argptr);\n }"}]}