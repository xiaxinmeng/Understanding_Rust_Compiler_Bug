{"sha": "4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiOThiNmViNWE4YTk5OTRiOGQyNGNlNjg1MjFmNDkzMDIxMmZkZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-12-29T03:33:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-12-29T03:33:24Z"}, "message": "re PR c++/42447 (ICE during processing complex templates)\n\n\tPR c++/42447\n\t* pt.c (iterative_hash_template_arg): Don't rely on TYPE_CANONICAL\n\tfor ARRAY_TYPE.\n\nFrom-SVN: r155499", "tree": {"sha": "1b1de75785ef94b8ed3972f4ea28c7f486132b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b1de75785ef94b8ed3972f4ea28c7f486132b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2838468cc33125cf9948190cf2b8509ac9b0cd9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2838468cc33125cf9948190cf2b8509ac9b0cd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2838468cc33125cf9948190cf2b8509ac9b0cd9c"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "c39304c465b5889c3ff93a4a9d13f7f4786efe35", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "patch": "@@ -1,3 +1,9 @@\n+2009-12-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42447\n+\t* pt.c (iterative_hash_template_arg): Don't rely on TYPE_CANONICAL\n+\tfor ARRAY_TYPE.\n+\n 2009-12-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41305, DR 384"}, {"sha": "d5342a1653fd0700b486a49bb45dfb6c4a8e9bd6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "patch": "@@ -1553,6 +1553,13 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n       val = iterative_hash_object (code, val);\n       return iterative_hash_template_arg (TREE_OPERAND (arg, 2), val);\n \n+    case ARRAY_TYPE:\n+      /* layout_type sets structural equality for arrays of\n+\t incomplete type, so we can't rely on the canonical type\n+\t for hashing.  */\n+      val = iterative_hash_template_arg (TREE_TYPE (arg), val);\n+      return iterative_hash_template_arg (TYPE_DOMAIN (arg), val);\n+\n     default:\n       switch (tclass)\n \t{"}, {"sha": "179b08cb36b44f8cc1c270f7e694836f72e97062", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "patch": "@@ -1,3 +1,8 @@\n+2009-12-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/42447\n+\t* g++.dg/template/array21.C: New.\n+\n 2009-12-28  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42353"}, {"sha": "5c5f2f65d6b7be412c0f7ec75b6926a4e22eb8ca", "filename": "gcc/testsuite/g++.dg/template/array21.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db98b6eb5a8a9994b8d24ce68521f4930212fdf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray21.C?ref=4db98b6eb5a8a9994b8d24ce68521f4930212fdf", "patch": "@@ -0,0 +1,50 @@\n+// PR c++/42447\n+\n+template<int>\n+  void* get(int);\n+\n+template<typename>\n+  struct unique_ptr;\n+\n+template<typename _Tp>\n+  struct unique_ptr<_Tp[]>\n+  {\n+    typedef int __tuple_type;\n+\n+    void*\n+    get() const\n+    { return ::get<0>(_M_t); }\n+\n+    __tuple_type _M_t;\n+  };\n+\n+template <typename T> class dynamic_dispatch;\n+\n+template <typename TC>\n+  struct dynamic_dispatch<void (TC::*)(int&)>\n+  {\n+    struct entry { };\n+    unique_ptr<entry[]> m_Start;\n+\n+    template <typename UC>\n+      void attach_handler(void (UC::*m)(int&))\n+      {\n+        entry* p = 0;\n+        do {\n+        } while(--p != m_Start.get());\n+      }\n+  };\n+\n+template <typename TC>\n+  class request_dispatcher\n+  : private dynamic_dispatch<void (TC::*)(int&)>\n+  { request_dispatcher(); };\n+\n+struct file_reader\n+{\n+  void execute_command(int&);\n+};\n+\n+template <>\n+  request_dispatcher<file_reader>::request_dispatcher()\n+  { this->attach_handler(&file_reader::execute_command); }"}]}