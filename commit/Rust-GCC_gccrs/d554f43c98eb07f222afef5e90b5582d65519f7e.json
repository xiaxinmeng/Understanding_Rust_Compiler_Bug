{"sha": "d554f43c98eb07f222afef5e90b5582d65519f7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1NGY0M2M5OGViMDdmMjIyYWZlZjVlOTBiNTU4MmQ2NTUxOWY3ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-13T05:46:54Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-13T05:46:54Z"}, "message": "contrib/gcc-changelog: Check that PR in subject is in changelog\n\nThis patch checks that a '[PRnnnn]' and '(PRnnnn)' also appears as PR in the\nchangelog part of the commit message.  And it does likewise for 'PR comp/nnnn'\nexcept that then also the component name is checked.  (Note that the reverse\nis permitted, i.e. PR(s) only appearing in the changelog.)\nTo avoid false positives, PR numbers in the subject line are ignored,\nif 'revert' appears.\nAdditionally, reject commits with a nonempty second line.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_commit.py (pr_regex): Add ?P<pr> for group('pr').\n\t(subject_pr_regex, subject_pr2_regex): New.\n\t(GitInfo.__init__, GitCommit.parse_changelog): Check subject PRs.\n\t* gcc-changelog/git_email.py (SUBJECT_PREFIX, subject_patch_regex): New.\n\t(GitEmail.__init__): Parse 'Subject:' and pass it to GitInfo.\n\t* gcc-changelog/test_email.py (test_pr_only_in_subject,\n\ttest_wrong_pr_comp_in_subject, test_copyright_years): New.\n\t* gcc-changelog/test_patches.txt (0030-PR-c-92746, pr-check1.patch):\n\tUpdate to avoid triggering the new check.\n\t(0001-rs6000-Support-doubleword, pr-wrong-comp.patch,\n\tcopyright-years.patch): New.", "tree": {"sha": "5263bc35f2684032790aa17f8fc70f94f323cc87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5263bc35f2684032790aa17f8fc70f94f323cc87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d554f43c98eb07f222afef5e90b5582d65519f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d554f43c98eb07f222afef5e90b5582d65519f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d554f43c98eb07f222afef5e90b5582d65519f7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d554f43c98eb07f222afef5e90b5582d65519f7e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8c391279fd3d85286b918c45171b825b44b74c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8c391279fd3d85286b918c45171b825b44b74c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8c391279fd3d85286b918c45171b825b44b74c"}], "stats": {"total": 125, "additions": 120, "deletions": 5}, "files": [{"sha": "d1646bdc0cd48937266c20a3b7e37cc1e512e5d7", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=d554f43c98eb07f222afef5e90b5582d65519f7e", "patch": "@@ -156,7 +156,9 @@\n         re.compile(r'^(?P<datetime>\\d{4}-\\d{2}-\\d{2})\\ {2}(?P<name>.*  <.*>)')\n additional_author_regex = re.compile(r'^\\t(?P<spaces>\\ *)?(?P<name>.*  <.*>)')\n changelog_regex = re.compile(r'^(?:[fF]or +)?([a-z0-9+-/]*)ChangeLog:?')\n-pr_regex = re.compile(r'\\tPR (?P<component>[a-z+-]+\\/)?([0-9]+)$')\n+subject_pr_regex = re.compile(r'(^|\\W)PR\\s+(?P<component>[a-zA-Z+-]+)/(?P<pr>\\d{4,7})')\n+subject_pr2_regex = re.compile(r'[(\\[]PR\\s*(?P<pr>\\d{4,7})[)\\]]')\n+pr_regex = re.compile(r'\\tPR (?P<component>[a-z+-]+\\/)?(?P<pr>[0-9]+)$')\n dr_regex = re.compile(r'\\tDR ([0-9]+)$')\n star_prefix_regex = re.compile(r'\\t\\*(?P<spaces>\\ *)(?P<content>.*)')\n end_of_location_regex = re.compile(r'[\\[<(:]')\n@@ -298,6 +300,7 @@ def __init__(self, info, commit_to_info_hook=None, ref_name=None):\n         self.top_level_authors = []\n         self.co_authors = []\n         self.top_level_prs = []\n+        self.subject_prs = set()\n         self.cherry_pick_commit = None\n         self.revert_commit = None\n         self.commit_to_info_hook = commit_to_info_hook\n@@ -307,6 +310,9 @@ def __init__(self, info, commit_to_info_hook=None, ref_name=None):\n         if self.info.lines and self.info.lines[0] == 'Update copyright years.':\n             return\n \n+        if self.info.lines and len(self.info.lines) > 1 and self.info.lines[1]:\n+            self.errors.append(Error('Expected empty second line in commit message', info.lines[0]))\n+\n         # Identify first if the commit is a Revert commit\n         for line in self.info.lines:\n             m = revert_regex.match(line)\n@@ -316,6 +322,19 @@ def __init__(self, info, commit_to_info_hook=None, ref_name=None):\n         if self.revert_commit:\n             self.info = self.commit_to_info_hook(self.revert_commit)\n \n+        # The following happens for get_email.py:\n+        if not self.info:\n+            return\n+\n+        # Extract PR numbers form the subject line\n+        # Match either [PRnnnn] / (PRnnnn) or PR component/nnnn\n+        if self.info.lines and not self.revert_commit:\n+            self.subject_prs = {m.group('pr') for m in subject_pr2_regex.finditer(info.lines[0])}\n+            for m in subject_pr_regex.finditer(info.lines[0]):\n+                if not m.group('component') in bug_components:\n+                    self.errors.append(Error('invalid PR component in subject', info.lines[0]))\n+                self.subject_prs.add(m.group('pr'))\n+\n         # Allow complete deletion of ChangeLog files in a commit\n         project_files = [f for f in self.info.modified_files\n                          if (self.is_changelog_filename(f[0], allow_suffix=True) and f[1] != 'D')\n@@ -346,6 +365,9 @@ def __init__(self, info, commit_to_info_hook=None, ref_name=None):\n             if not self.errors:\n                 self.check_mentioned_files()\n                 self.check_for_correct_changelog()\n+        if self.subject_prs:\n+            self.errors.append(Error('PR %s in subject but not in changelog' %\n+                                     ', '.join(self.subject_prs), self.info.lines[0]))\n \n     @property\n     def success(self):\n@@ -460,7 +482,9 @@ def parse_changelog(self):\n                     else:\n                         author_tuple = (m.group('name'), None)\n                 elif pr_regex.match(line):\n-                    component = pr_regex.match(line).group('component')\n+                    m = pr_regex.match(line)\n+                    component = m.group('component')\n+                    pr = m.group('pr')\n                     if not component:\n                         self.errors.append(Error('missing PR component', line))\n                         continue\n@@ -469,6 +493,8 @@ def parse_changelog(self):\n                         continue\n                     else:\n                         pr_line = line.lstrip()\n+                    if pr in self.subject_prs:\n+                        self.subject_prs.remove(pr)\n                 elif dr_regex.match(line):\n                     pr_line = line.lstrip()\n "}, {"sha": "87b419cae5d665cb919c335674f15a3d8f67a116", "filename": "contrib/gcc-changelog/git_email.py", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Fgit_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Fgit_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_email.py?ref=d554f43c98eb07f222afef5e90b5582d65519f7e", "patch": "@@ -17,6 +17,7 @@\n # <http://www.gnu.org/licenses/>.  */\n \n import os\n+import re\n import sys\n from itertools import takewhile\n \n@@ -28,6 +29,8 @@\n \n DATE_PREFIX = 'Date: '\n FROM_PREFIX = 'From: '\n+SUBJECT_PREFIX = 'Subject: '\n+subject_patch_regex = re.compile(r'^\\[PATCH( \\d+/\\d+)?\\] ')\n unidiff_supports_renaming = hasattr(PatchedFile(), 'is_rename')\n \n \n@@ -37,7 +40,9 @@ def __init__(self, filename):\n         diff = PatchSet.from_filename(filename)\n         date = None\n         author = None\n+        subject = ''\n \n+        subject_last = False\n         with open(self.filename, 'r') as f:\n             lines = f.read().splitlines()\n         lines = list(takewhile(lambda line: line != '---', lines))\n@@ -46,8 +51,21 @@ def __init__(self, filename):\n                 date = parse(line[len(DATE_PREFIX):])\n             elif line.startswith(FROM_PREFIX):\n                 author = GitCommit.format_git_author(line[len(FROM_PREFIX):])\n+            elif line.startswith(SUBJECT_PREFIX):\n+                subject = line[len(SUBJECT_PREFIX):]\n+                subject_last = True\n+            elif subject_last and line.startswith(' '):\n+                subject += line\n+            elif line == '':\n+                break\n+            else:\n+                subject_last = False\n+\n+        if subject:\n+            subject = subject_patch_regex.sub('', subject)\n         header = list(takewhile(lambda line: line != '', lines))\n-        body = lines[len(header) + 1:]\n+        # Note: commit message consists of email subject, empty line, email body\n+        message = [subject] + lines[len(header):]\n \n         modified_files = []\n         for f in diff:\n@@ -67,7 +85,7 @@ def __init__(self, filename):\n             else:\n                 t = 'M'\n             modified_files.append((target if t != 'D' else source, t))\n-        git_info = GitInfo(None, date, author, body, modified_files)\n+        git_info = GitInfo(None, date, author, message, modified_files)\n         super().__init__(git_info,\n                          commit_to_info_hook=lambda x: None)\n "}, {"sha": "319e065ca55fbc7cdc1943a61446d4a8eacd932d", "filename": "contrib/gcc-changelog/test_email.py", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Ftest_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Ftest_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_email.py?ref=d554f43c98eb07f222afef5e90b5582d65519f7e", "patch": "@@ -427,3 +427,16 @@ def test_long_filenames(self):\n     def test_multi_same_file(self):\n         email = self.from_patch_glob('0001-OpenMP-Fix-SIMT')\n         assert email.errors[0].message == 'same file specified multiple times'\n+\n+    def test_pr_only_in_subject(self):\n+        email = self.from_patch_glob('0001-rs6000-Support-doubleword')\n+        assert (email.errors[0].message ==\n+                'PR 100085 in subject but not in changelog')\n+\n+    def test_wrong_pr_comp_in_subject(self):\n+        email = self.from_patch_glob('pr-wrong-comp.patch')\n+        assert email.errors[0].message == 'invalid PR component in subject'\n+\n+    def test_copyright_years(self):\n+        email = self.from_patch_glob('copyright-years.patch')\n+        assert not email.errors"}, {"sha": "ba516274fc1505b08162ca3e29737c32fcb7831e", "filename": "contrib/gcc-changelog/test_patches.txt", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Ftest_patches.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d554f43c98eb07f222afef5e90b5582d65519f7e/contrib%2Fgcc-changelog%2Ftest_patches.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_patches.txt?ref=d554f43c98eb07f222afef5e90b5582d65519f7e", "patch": "@@ -1461,6 +1461,7 @@ Subject: [PATCH 0030/2034] \tPR c++/92746 - ICE with noexcept of function\n Another place that needs to specially handle Concepts TS function-style\n concepts.\n \n+\tPR c++/92746\n \t* except.c (check_noexcept_r): Handle concept-check.\n ---\n  gcc/cp/ChangeLog                            | 3 +++\n@@ -1977,7 +1978,7 @@ index aac31d02b6c..56c470f6ecf 100644\n From 5194b51ed9714808d88827531e91474895b6c706 Mon Sep 17 00:00:00 2001\n From: Jason Merrill <jason@redhat.com>\n Date: Thu, 16 Jan 2020 16:55:39 -0500\n-Subject: [PATCH 0121/2034] PR c++/93286 - ICE with __is_constructible and\n+Subject: [PATCH 0121/2034] PR c++/12345 - ICE with __is_constructible and\n  variadic template.\n \n Here we had been recursing in tsubst_copy_and_build if type2 was a TREE_LIST\n@@ -3406,3 +3407,60 @@ index 00000000000..21540512e23\n +\n -- \n 2.25.1\n+=== 0001-rs6000-Support-doubleword ===\n+From f700e4b0ee3ef53b48975cf89be26b9177e3a3f3 Mon Sep 17 00:00:00 2001\n+From: Xionghu Luo <luoxhu@linux.ibm.com>\n+Date: Tue, 8 Jun 2021 21:48:12 -0500\n+Subject: [PATCH] rs6000: Support doubleword swaps removal in rot64 load store\n+ [PR100085]\n+\n+gcc/testsuite/ChangeLog:\n+\n+\t* gcc.target/powerpc/pr100085.c: New test.\n+---\n+diff --git a/gcc/testsuite/gcc.target/powerpc/pr100085.c b/gcc/testsuite/gcc.target/powerpc/pr100085.c\n+new file mode 100644\n+index 00000000000..7d8b147b127\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/powerpc/pr100085.c\n+@@ -0,0 +1,1 @@\n++\n+-- \n+2.25.1\n+=== pr-wrong-comp.patch ===\n+From 5194b51ed9714808d88827531e91474895b6c706 Mon Sep 17 00:00:00 2001\n+From: Jason Merrill <jason@redhat.com>\n+Date: Thu, 16 Jan 2020 16:55:39 -0500\n+Subject: [PATCH 0121/2034] PR some/93286 - ICE with __is_constructible and\n+ variadic template.\n+\n+gcc/testsuite/ChangeLog:\n+\n+\tPR c++/93286\n+\t* gcc.target/powerpc/pr100085.c: New test.\n+---\n+diff --git a/gcc/testsuite/gcc.target/powerpc/pr100085.c b/gcc/testsuite/gcc.target/powerpc/pr100085.c\n+new file mode 100644\n+index 00000000000..7d8b147b127\n+--- /dev/null\n++++ b/gcc/testsuite/gcc.target/powerpc/pr100085.c\n+@@ -0,0 +1,1 @@\n++\n+-- \n+2.25.1\n+==== copyright-years.patch ===\n+From 99dee82307f1e163e150c9c810452979994047ce Mon Sep 17 00:00:00 2001\n+From: Jakub Jelinek <jakub@redhat.com>\n+Date: Mon, 4 Jan 2021 10:26:59 +0100\n+Subject: [PATCH] Update copyright years.\n+\n+---\n+diff --git a/lto-plugin/lto-plugin.c b/lto-plugin/lto-plugin.c\n+new file mode 100644\n+index 6f67552d075..32478f070e8 100644\n+--- a/lto-plugin/lto-plugin.c\n++++ b/lto-plugin/lto-plugin.c\n+@@ -0,0 +1,1 @@\n++\n+-- \n+2.25.1"}]}