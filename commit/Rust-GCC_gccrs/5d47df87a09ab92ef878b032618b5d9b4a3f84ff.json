{"sha": "5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0N2RmODdhMDlhYjkyZWY4NzhiMDMyNjE4YjVkOWI0YTNmODRmZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-09T10:07:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-09T10:07:54Z"}, "message": "stormy16-protos.h (xstormy16_expand_builtin_va_arg): Remove.\n\n        * config/stormy16/stormy16-protos.h (xstormy16_expand_builtin_va_arg):\n        Remove.\n        * config/stormy16/stormy16.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n        (xstormy16_gimplify_va_arg_expr): Rewrite from\n        xstormy16_expand_builtin_va_arg.\n        * config/stormy16/stormy16.h (EXPAND_BUILTIN_VA_ARG): Remove.\n\nFrom-SVN: r84358", "tree": {"sha": "955806ba4eb557b68bf36757fc252c1f8ce2f469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955806ba4eb557b68bf36757fc252c1f8ce2f469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/comments", "author": null, "committer": null, "parents": [{"sha": "f372c93230da93c39db21d3c7965946e4a61fb1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f372c93230da93c39db21d3c7965946e4a61fb1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f372c93230da93c39db21d3c7965946e4a61fb1c"}], "stats": {"total": 127, "additions": 70, "deletions": 57}, "files": [{"sha": "c8c4ac3a78d34528e35394d4e3a2e3e074ca1e74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "patch": "@@ -6,6 +6,13 @@\n \n 2004-07-09  Richard Henderson  <rth@redhat.com>\n \n+\t* config/stormy16/stormy16-protos.h (xstormy16_expand_builtin_va_arg):\n+\tRemove.\n+\t* config/stormy16/stormy16.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n+\t(xstormy16_gimplify_va_arg_expr): Rewrite from\n+\txstormy16_expand_builtin_va_arg.\n+\t* config/stormy16/stormy16.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\n \t* config/sparc/sparc-protos.h (sparc_va_arg): Remove.\n \t* config/sparc/sparc.c (sparc_gimplify_va_arg): Mark static.\n "}, {"sha": "1d1d35c3591ce10e1700140e24668e5c7addbb7d", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "patch": "@@ -39,7 +39,6 @@ extern rtx xstormy16_function_arg\n \n #if defined (TREE_CODE) && defined (RTX_CODE)\n extern void xstormy16_expand_builtin_va_start (tree, rtx);\n-extern rtx xstormy16_expand_builtin_va_arg (tree, tree);\n extern void xstormy16_initialize_trampoline (rtx, rtx, rtx);\n extern rtx xstormy16_function_value (tree, tree);\n #endif"}, {"sha": "e2fbf0279dc6f7ed1550b2bd6c051e504d6f6daf", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 63, "deletions": 51, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "patch": "@@ -46,6 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target-def.h\"\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n+#include \"tree-gimple.h\"\n \n static rtx emit_addhi3_postreload (rtx, rtx, rtx);\n static void xstormy16_asm_out_constructor (rtx, int);\n@@ -1306,18 +1307,17 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n    of type va_list as a tree, TYPE is the type passed to va_arg.\n    Note:  This algorithm is documented in stormy-abi.  */\n    \n-rtx\n-xstormy16_expand_builtin_va_arg (tree valist, tree type)\n+static tree\n+xstormy16_expand_builtin_va_arg (tree valist, tree type, tree *pre_p,\n+\t\t\t\t tree *post_p ATTRIBUTE_UNUSED)\n {\n   tree f_base, f_count;\n   tree base, count;\n-  rtx count_rtx, addr_rtx, r;\n-  rtx lab_gotaddr, lab_fromstack;\n-  tree t;\n+  tree count_tmp, addr, t;\n+  tree lab_gotaddr, lab_fromstack;\n   int size, size_of_reg_args, must_stack;\n-  tree size_tree, count_plus_size;\n-  rtx count_plus_size_rtx;\n-  \n+  tree size_tree;\n+\n   f_base = TYPE_FIELDS (va_list_type_node);\n   f_count = TREE_CHAIN (f_base);\n   \n@@ -1327,29 +1327,38 @@ xstormy16_expand_builtin_va_arg (tree valist, tree type)\n \n   must_stack = MUST_PASS_IN_STACK (TYPE_MODE (type), type);\n   size_tree = round_up (size_in_bytes (type), UNITS_PER_WORD);\n+  gimplify_expr (&size_tree, pre_p, NULL, is_gimple_val, fb_rvalue);\n   \n   size_of_reg_args = NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD;\n \n-  count_rtx = expand_expr (count, NULL_RTX, HImode, EXPAND_NORMAL);\n-  lab_gotaddr = gen_label_rtx ();\n-  lab_fromstack = gen_label_rtx ();\n-  addr_rtx = gen_reg_rtx (Pmode);\n+  count_tmp = get_initialized_tmp_var (count, pre_p, NULL);\n+  lab_gotaddr = create_artificial_label ();\n+  lab_fromstack = create_artificial_label ();\n+  addr = create_tmp_var (ptr_type_node, NULL);\n \n   if (!must_stack)\n     {\n-      count_plus_size = build (PLUS_EXPR, TREE_TYPE (count), count, size_tree);\n-      count_plus_size_rtx = expand_expr (count_plus_size, NULL_RTX, HImode, EXPAND_NORMAL);\n-      emit_cmp_and_jump_insns (count_plus_size_rtx, GEN_INT (size_of_reg_args),\n-\t\t\t       GTU, const1_rtx, HImode, 1, lab_fromstack);\n+      tree r;\n+\n+      t = fold_convert (TREE_TYPE (count), size_tree);\n+      t = build (PLUS_EXPR, TREE_TYPE (count), count_tmp, t);\n+      r = fold_convert (TREE_TYPE (count), size_int (size_of_reg_args));\n+      t = build (GT_EXPR, boolean_type_node, t, r);\n+      t = build (COND_EXPR, void_type_node, t,\n+\t\t build (GOTO_EXPR, void_type_node, lab_fromstack),\n+\t\t NULL);\n+      gimplify_and_add (t, pre_p);\n   \n-      t = build (PLUS_EXPR, ptr_type_node, base, count);\n-      r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-      if (r != addr_rtx)\n-\temit_move_insn (addr_rtx, r);\n-\n-      emit_jump_insn (gen_jump (lab_gotaddr));\n-      emit_barrier ();\n-      emit_label (lab_fromstack);\n+      t = fold_convert (ptr_type_node, count_tmp);\n+      t = build (PLUS_EXPR, ptr_type_node, base, t);\n+      t = build (MODIFY_EXPR, void_type_node, addr, t);\n+      gimplify_and_add (t, pre_p);\n+\n+      t = build (GOTO_EXPR, void_type_node, lab_gotaddr);\n+      gimplify_and_add (t, pre_p);\n+\n+      t = build (LABEL_EXPR, void_type_node, lab_fromstack);\n+      gimplify_and_add (t, pre_p);\n     }\n   \n   /* Arguments larger than a word might need to skip over some\n@@ -1358,37 +1367,38 @@ xstormy16_expand_builtin_va_arg (tree valist, tree type)\n   size = PUSH_ROUNDING (int_size_in_bytes (type));\n   if (size > 2 || size < 0 || must_stack)\n     {\n-      rtx lab_notransition = gen_label_rtx ();\n-      emit_cmp_and_jump_insns (count_rtx, GEN_INT (NUM_ARGUMENT_REGISTERS \n-\t\t\t\t\t\t   * UNITS_PER_WORD),\n-\t\t\t       GEU, const1_rtx, HImode, 1, lab_notransition);\n-      \n-      t = build (MODIFY_EXPR, TREE_TYPE (count), count, \n-\t\t build_int_2 (NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD, 0));\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-      \n-      emit_label (lab_notransition);\n+      tree r, u;\n+\n+      r = size_int (NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD);\n+      u = build (MODIFY_EXPR, void_type_node, count_tmp, r);\n+\n+      t = fold_convert (TREE_TYPE (count), r);\n+      t = build (GE_EXPR, boolean_type_node, count_tmp, t);\n+      t = build (COND_EXPR, void_type_node, t, NULL, u);\n+      gimplify_and_add (t, pre_p);\n     }\n \n-  t = build (PLUS_EXPR, sizetype, size_tree,\n-\t     build_int_2 ((- NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD\n-\t\t\t   + INCOMING_FRAME_SP_OFFSET),\n-\t\t\t  -1));\n-  t = build (PLUS_EXPR, TREE_TYPE (count), count, fold (t));\n+  t = size_int (NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD\n+\t\t- INCOMING_FRAME_SP_OFFSET);\n+  t = fold_convert (TREE_TYPE (count), t);\n+  t = build (MINUS_EXPR, TREE_TYPE (count), count_tmp, t);\n+  t = build (PLUS_EXPR, TREE_TYPE (count), t,\n+\t     fold_convert (TREE_TYPE (count), size_tree));\n+  t = fold_convert (TREE_TYPE (base), fold (t));\n   t = build (MINUS_EXPR, TREE_TYPE (base), base, t);\n-  r = expand_expr (t, addr_rtx, Pmode, EXPAND_NORMAL);\n-  if (r != addr_rtx)\n-    emit_move_insn (addr_rtx, r);\n-\t     \n-  emit_label (lab_gotaddr);\n-\n-  count_plus_size = build (PLUS_EXPR, TREE_TYPE (count), count, size_tree);\n-  t = build (MODIFY_EXPR, TREE_TYPE (count), count, count_plus_size);\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  t = build (MODIFY_EXPR, void_type_node, addr, t);\n+  gimplify_and_add (t, pre_p);\n+\n+  t = build (LABEL_EXPR, void_type_node, lab_gotaddr);\n+  gimplify_and_add (t, pre_p);\n \n-  return addr_rtx;\n+  t = fold_convert (TREE_TYPE (count), size_tree);\n+  t = build (PLUS_EXPR, TREE_TYPE (count), count_tmp, t);\n+  t = build (MODIFY_EXPR, TREE_TYPE (count), count, t);\n+  gimplify_and_add (t, pre_p);\n+  \n+  addr = fold_convert (build_pointer_type (type), addr);\n+  return build_fold_indirect_ref (addr);\n }\n \n /* Initialize the variable parts of a trampoline.  ADDR is an RTX for\n@@ -2198,6 +2208,8 @@ xstormy16_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST xstormy16_build_builtin_va_list\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR xstormy16_expand_builtin_va_arg\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true"}, {"sha": "ec87550029ff94d583a74ffd118f49aa62be6944", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d47df87a09ab92ef878b032618b5d9b4a3f84ff/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=5d47df87a09ab92ef878b032618b5d9b4a3f84ff", "patch": "@@ -481,11 +481,6 @@ enum reg_class\n    implementation will be defined that works for arguments passed on the stack.  */\n #define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG) \\\n   xstormy16_expand_builtin_va_start (VALIST, NEXTARG)\n-\n-/* Implement the stdarg/varargs va_arg macro.  VALIST is the variable of type\n-   va_list as a tree, TYPE is the type passed to va_arg.  */\n-#define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\\n-  xstormy16_expand_builtin_va_arg (VALIST, TYPE)\n \f\n /* Trampolines for Nested Functions.  */\n "}]}