{"sha": "9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4ZDE5MDFmOGIzODZkMWI5Y2M2YjFkNzdiNGQ0NWYyMjhiMTRlMA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2008-04-06T18:58:34Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2008-04-06T18:58:34Z"}, "message": "re PR fortran/35832 (Better error message for wrong arguments to I/O statements)\n\n2008-04-06  Tobias Schlter  <tobi@gcc.gnu.org>\n\nPR fortran/35832\nfortran/\n* io.c (io_tag): Add field 'value'.  Split 'spec' field in\nexisting io_tags.\n(match_etag, match_vtag, match_ltag): Split parsing in two steps\nto give better error messages.\ntestsuite/\n* gfortran.dg/io_constraints_2.f90: Adapt to new error message.\n\nFrom-SVN: r133964", "tree": {"sha": "da8bfa6cd99340b4f8b0961cf22306487342bba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da8bfa6cd99340b4f8b0961cf22306487342bba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c51effa07789efdd892dceb803f2af3f5259339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c51effa07789efdd892dceb803f2af3f5259339", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c51effa07789efdd892dceb803f2af3f5259339"}], "stats": {"total": 154, "additions": 95, "deletions": 59}, "files": [{"sha": "160d602dfd1938eec9ac6d0c3a4441e682829145", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "patch": "@@ -1,3 +1,11 @@\n+2008-04-06  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/35832\n+\t* io.c (io_tag): Add field 'value'.  Split 'spec' field in\n+\texisting io_tags.\n+\t(match_etag, match_vtag, match_ltag): Split parsing in two steps\n+\tto give better error messages.\n+\n 2008-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \t* io.c (check_io_constraints): Add constrains. ID= requires"}, {"sha": "5ea051c87f94870954ffd69213e8b61e16406a65", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 81, "deletions": 58, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "patch": "@@ -32,63 +32,63 @@ format_asterisk = {0, NULL, NULL, -1, ST_LABEL_FORMAT, ST_LABEL_FORMAT, NULL,\n \n typedef struct\n {\n-  const char *name, *spec;\n+  const char *name, *spec, *value;\n   bt type;\n }\n io_tag;\n \n static const io_tag\n-\ttag_file\t= { \"FILE\", \" file = %e\", BT_CHARACTER },\n-\ttag_status\t= { \"STATUS\", \" status = %e\", BT_CHARACTER},\n-\ttag_e_access\t= {\"ACCESS\", \" access = %e\", BT_CHARACTER},\n-\ttag_e_form\t= {\"FORM\", \" form = %e\", BT_CHARACTER},\n-\ttag_e_recl\t= {\"RECL\", \" recl = %e\", BT_INTEGER},\n-\ttag_e_blank\t= {\"BLANK\", \" blank = %e\", BT_CHARACTER},\n-\ttag_e_position\t= {\"POSITION\", \" position = %e\", BT_CHARACTER},\n-\ttag_e_action\t= {\"ACTION\", \" action = %e\", BT_CHARACTER},\n-\ttag_e_delim\t= {\"DELIM\", \" delim = %e\", BT_CHARACTER},\n-\ttag_e_pad\t= {\"PAD\", \" pad = %e\", BT_CHARACTER},\n-\ttag_e_decimal\t= {\"DECIMAL\", \" decimal = %e\", BT_CHARACTER},\n-\ttag_e_encoding\t= {\"ENCODING\", \" encoding = %e\", BT_CHARACTER},\n-\ttag_e_round\t= {\"ROUND\", \" round = %e\", BT_CHARACTER},\n-\ttag_e_sign\t= {\"SIGN\", \" sign = %e\", BT_CHARACTER},\n-\ttag_unit\t= {\"UNIT\", \" unit = %e\", BT_INTEGER},\n-\ttag_advance\t= {\"ADVANCE\", \" advance = %e\", BT_CHARACTER},\n-\ttag_rec\t\t= {\"REC\", \" rec = %e\", BT_INTEGER},\n-\ttag_spos\t= {\"POSITION\", \" pos = %e\", BT_INTEGER},\n-\ttag_format\t= {\"FORMAT\", NULL, BT_CHARACTER},\n-\ttag_iomsg\t= {\"IOMSG\", \" iomsg = %e\", BT_CHARACTER},\n-\ttag_iostat\t= {\"IOSTAT\", \" iostat = %v\", BT_INTEGER},\n-\ttag_size\t= {\"SIZE\", \" size = %v\", BT_INTEGER},\n-\ttag_exist\t= {\"EXIST\", \" exist = %v\", BT_LOGICAL},\n-\ttag_opened\t= {\"OPENED\", \" opened = %v\", BT_LOGICAL},\n-\ttag_named\t= {\"NAMED\", \" named = %v\", BT_LOGICAL},\n-\ttag_name\t= {\"NAME\", \" name = %v\", BT_CHARACTER},\n-\ttag_number\t= {\"NUMBER\", \" number = %v\", BT_INTEGER},\n-\ttag_s_access\t= {\"ACCESS\", \" access = %v\", BT_CHARACTER},\n-\ttag_sequential\t= {\"SEQUENTIAL\", \" sequential = %v\", BT_CHARACTER},\n-\ttag_direct\t= {\"DIRECT\", \" direct = %v\", BT_CHARACTER},\n-\ttag_s_form\t= {\"FORM\", \" form = %v\", BT_CHARACTER},\n-\ttag_formatted\t= {\"FORMATTED\", \" formatted = %v\", BT_CHARACTER},\n-\ttag_unformatted\t= {\"UNFORMATTED\", \" unformatted = %v\", BT_CHARACTER},\n-\ttag_s_recl\t= {\"RECL\", \" recl = %v\", BT_INTEGER},\n-\ttag_nextrec\t= {\"NEXTREC\", \" nextrec = %v\", BT_INTEGER},\n-\ttag_s_blank\t= {\"BLANK\", \" blank = %v\", BT_CHARACTER},\n-\ttag_s_position\t= {\"POSITION\", \" position = %v\", BT_CHARACTER},\n-\ttag_s_action\t= {\"ACTION\", \" action = %v\", BT_CHARACTER},\n-\ttag_read\t= {\"READ\", \" read = %v\", BT_CHARACTER},\n-\ttag_write\t= {\"WRITE\", \" write = %v\", BT_CHARACTER},\n-\ttag_readwrite\t= {\"READWRITE\", \" readwrite = %v\", BT_CHARACTER},\n-\ttag_s_delim\t= {\"DELIM\", \" delim = %v\", BT_CHARACTER},\n-\ttag_s_pad\t= {\"PAD\", \" pad = %v\", BT_CHARACTER},\n-\ttag_iolength\t= {\"IOLENGTH\", \" iolength = %v\", BT_INTEGER},\n-\ttag_convert     = {\"CONVERT\", \" convert = %e\", BT_CHARACTER},\n-\ttag_strm_out    = {\"POS\", \" pos = %v\", BT_INTEGER},\n-\ttag_err\t\t= {\"ERR\", \" err = %l\", BT_UNKNOWN},\n-\ttag_end\t\t= {\"END\", \" end = %l\", BT_UNKNOWN},\n-\ttag_eor\t\t= {\"EOR\", \" eor = %l\", BT_UNKNOWN},\n-\ttag_async\t= {\"ASYNCHRONOUS\", \" asynchronous = %e\", BT_CHARACTER},\n-\ttag_id\t\t= {\"ID\", \" id = %v\", BT_INTEGER};\n+\ttag_file\t= { \"FILE\", \" file =\", \" %e\", BT_CHARACTER },\n+\ttag_status\t= { \"STATUS\", \" status =\", \" %e\", BT_CHARACTER},\n+\ttag_e_access\t= {\"ACCESS\", \" access =\", \" %e\", BT_CHARACTER},\n+\ttag_e_form\t= {\"FORM\", \" form =\", \" %e\", BT_CHARACTER},\n+\ttag_e_recl\t= {\"RECL\", \" recl =\", \" %e\", BT_INTEGER},\n+\ttag_e_blank\t= {\"BLANK\", \" blank =\", \" %e\", BT_CHARACTER},\n+\ttag_e_position\t= {\"POSITION\", \" position =\", \" %e\", BT_CHARACTER},\n+\ttag_e_action\t= {\"ACTION\", \" action =\", \" %e\", BT_CHARACTER},\n+\ttag_e_delim\t= {\"DELIM\", \" delim =\", \" %e\", BT_CHARACTER},\n+\ttag_e_pad\t= {\"PAD\", \" pad =\", \" %e\", BT_CHARACTER},\n+\ttag_e_decimal\t= {\"DECIMAL\", \" decimal =\", \" %e\", BT_CHARACTER},\n+\ttag_e_encoding\t= {\"ENCODING\", \" encoding =\", \" %e\", BT_CHARACTER},\n+\ttag_e_round\t= {\"ROUND\", \" round =\", \" %e\", BT_CHARACTER},\n+\ttag_e_sign\t= {\"SIGN\", \" sign =\", \" %e\", BT_CHARACTER},\n+\ttag_unit\t= {\"UNIT\", \" unit =\", \" %e\", BT_INTEGER},\n+\ttag_advance\t= {\"ADVANCE\", \" advance =\", \" %e\", BT_CHARACTER},\n+\ttag_rec\t\t= {\"REC\", \" rec =\", \" %e\", BT_INTEGER},\n+\ttag_spos\t= {\"POSITION\", \" pos =\", \" %e\", BT_INTEGER},\n+\ttag_format\t= {\"FORMAT\", NULL, NULL, BT_CHARACTER},\n+\ttag_iomsg\t= {\"IOMSG\", \" iomsg =\", \" %e\", BT_CHARACTER},\n+\ttag_iostat\t= {\"IOSTAT\", \" iostat =\", \" %v\", BT_INTEGER},\n+\ttag_size\t= {\"SIZE\", \" size =\", \" %v\", BT_INTEGER},\n+\ttag_exist\t= {\"EXIST\", \" exist =\", \" %v\", BT_LOGICAL},\n+\ttag_opened\t= {\"OPENED\", \" opened =\", \" %v\", BT_LOGICAL},\n+\ttag_named\t= {\"NAMED\", \" named =\", \" %v\", BT_LOGICAL},\n+\ttag_name\t= {\"NAME\", \" name =\", \" %v\", BT_CHARACTER},\n+\ttag_number\t= {\"NUMBER\", \" number =\", \" %v\", BT_INTEGER},\n+\ttag_s_access\t= {\"ACCESS\", \" access =\", \" %v\", BT_CHARACTER},\n+\ttag_sequential\t= {\"SEQUENTIAL\", \" sequential =\", \" %v\", BT_CHARACTER},\n+\ttag_direct\t= {\"DIRECT\", \" direct =\", \" %v\", BT_CHARACTER},\n+\ttag_s_form\t= {\"FORM\", \" form =\", \" %v\", BT_CHARACTER},\n+\ttag_formatted\t= {\"FORMATTED\", \" formatted =\", \" %v\", BT_CHARACTER},\n+\ttag_unformatted\t= {\"UNFORMATTED\", \" unformatted =\", \" %v\", BT_CHARACTER},\n+\ttag_s_recl\t= {\"RECL\", \" recl =\", \" %v\", BT_INTEGER},\n+\ttag_nextrec\t= {\"NEXTREC\", \" nextrec =\", \" %v\", BT_INTEGER},\n+\ttag_s_blank\t= {\"BLANK\", \" blank =\", \" %v\", BT_CHARACTER},\n+\ttag_s_position\t= {\"POSITION\", \" position =\", \" %v\", BT_CHARACTER},\n+\ttag_s_action\t= {\"ACTION\", \" action =\", \" %v\", BT_CHARACTER},\n+\ttag_read\t= {\"READ\", \" read =\", \" %v\", BT_CHARACTER},\n+\ttag_write\t= {\"WRITE\", \" write =\", \" %v\", BT_CHARACTER},\n+\ttag_readwrite\t= {\"READWRITE\", \" readwrite =\", \" %v\", BT_CHARACTER},\n+\ttag_s_delim\t= {\"DELIM\", \" delim =\", \" %v\", BT_CHARACTER},\n+\ttag_s_pad\t= {\"PAD\", \" pad =\", \" %v\", BT_CHARACTER},\n+\ttag_iolength\t= {\"IOLENGTH\", \" iolength =\", \" %v\", BT_INTEGER},\n+\ttag_convert     = {\"CONVERT\", \" convert =\", \" %e\", BT_CHARACTER},\n+\ttag_strm_out    = {\"POS\", \" pos =\", \" %v\", BT_INTEGER},\n+\ttag_err\t\t= {\"ERR\", \" err =\", \" %l\", BT_UNKNOWN},\n+\ttag_end\t\t= {\"END\", \" end =\", \" %l\", BT_UNKNOWN},\n+\ttag_eor\t\t= {\"EOR\", \" eor =\", \" %l\", BT_UNKNOWN},\n+\ttag_async\t= {\"ASYNCHRONOUS\", \" asynchronous =\", \" %e\", BT_CHARACTER},\n+\ttag_id\t\t= {\"ID\", \" id =\", \" %v\", BT_INTEGER};\n \n static gfc_dt *current_dt;\n \n@@ -1031,10 +1031,17 @@ match_etag (const io_tag *tag, gfc_expr **v)\n   gfc_expr *result;\n   match m;\n \n-  m = gfc_match (tag->spec, &result);\n+  m = gfc_match (tag->spec);\n   if (m != MATCH_YES)\n     return m;\n \n+  m = gfc_match (tag->value, &result);\n+  if (m != MATCH_YES)\n+    {\n+      gfc_error (\"Invalid value for %s specification at %C\", tag->name);\n+      return MATCH_ERROR;\n+    }\n+\n   if (*v != NULL)\n     {\n       gfc_error (\"Duplicate %s specification at %C\", tag->name);\n@@ -1055,10 +1062,17 @@ match_vtag (const io_tag *tag, gfc_expr **v)\n   gfc_expr *result;\n   match m;\n \n-  m = gfc_match (tag->spec, &result);\n+  m = gfc_match (tag->spec);\n   if (m != MATCH_YES)\n     return m;\n \n+  m = gfc_match (tag->value, &result);\n+  if (m != MATCH_YES)\n+    {\n+      gfc_error (\"Invalid value for %s specification at %C\", tag->name);\n+      return MATCH_ERROR;\n+    }\n+\n   if (*v != NULL)\n     {\n       gfc_error (\"Duplicate %s specification at %C\", tag->name);\n@@ -1109,15 +1123,24 @@ match_ltag (const io_tag *tag, gfc_st_label ** label)\n   gfc_st_label *old;\n \n   old = *label;\n-  m = gfc_match (tag->spec, label);\n-  if (m == MATCH_YES && old != 0)\n+  m = gfc_match (tag->spec);\n+  if (m != MATCH_YES)\n+    return m;\n+\n+  m = gfc_match (tag->value, label);\n+  if (m != MATCH_YES)\n+    {\n+      gfc_error (\"Invalid value for %s specification at %C\", tag->name);\n+      return MATCH_ERROR;\n+    }\n+\n+  if (old)\n     {\n       gfc_error (\"Duplicate %s label specification at %C\", tag->name);\n       return MATCH_ERROR;\n     }\n \n-  if (m == MATCH_YES \n-      && gfc_reference_st_label (*label, ST_LABEL_TARGET) == FAILURE)\n+  if (gfc_reference_st_label (*label, ST_LABEL_TARGET) == FAILURE)\n     return MATCH_ERROR;\n \n   return m;"}, {"sha": "9f9caa65ce5e877491465430ac26e06e0e62ab1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "patch": "@@ -1,3 +1,8 @@\n+2008-04-06  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+\n+\tPR fortran/35832\n+\t* gfortran.dg/io_constraints_2.f90: Adapt to new error message.\n+\n 2008-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/f2003_io_1.f03: Make standard conform."}, {"sha": "8bf48d72ff20c4927b31a2302e1d19877d1256aa", "filename": "gcc/testsuite/gfortran.dg/io_constraints_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_2.f90?ref=9b8d1901f8b386d1b9cc6b1d77b4d45f228b14e0", "patch": "@@ -66,7 +66,7 @@ end module global\n \n  READ(1, fmt='(i6)', advance='NO', size = buffer) a ! { dg-error \"INTEGER\" }\n !Was correctly picked up before patch. -correct syntax error\n- READ(1, fmt='(i6)', advance='YES', size = 10) a    ! { dg-error \"Syntax error\" }\n+ READ(1, fmt='(i6)', advance='YES', size = 10) a    ! { dg-error \"Invalid value for SIZE specification\" }\n \n  READ(1, fmt='(i6)', advance='MAYBE')               !  { dg-error \"YES or NO\" }\n "}]}