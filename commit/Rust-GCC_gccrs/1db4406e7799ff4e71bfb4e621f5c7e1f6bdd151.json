{"sha": "1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiNDQwNmU3Nzk5ZmY0ZTcxYmZiNGU2MjFmNWM3ZTFmNmJkZDE1MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-23T17:10:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-23T17:10:39Z"}, "message": "i386.c (ix86_print_operand): Handle %~.\n\n\t* config/i386/i386.c (ix86_print_operand): Handle %~.\n\t(ix86_print_operand_punct_valid_p): Return true also for '~'.\n\t* config/i386/sse.md (i128): New mode_attr.\n\t(vec_extract_hi_<mode>, vec_extract_hi_<mode>,\n\tavx_vbroadcastf128_<mode>, *avx_vperm2f128<mode>_full,\n\t*avx_vperm2f128<mode>_nozero, vec_set_lo_<mode>, \n\tvec_set_hi_<mode>, *vec_concat<mode>_avx): Use <i128> in the\n\tpatterns, use \"<sseinsnmode>\" for \"mode\" attribute.\n\t(vec_extract_hi_v16hi, vec_extract_hi_v32qi, vec_set_lo_v16hi,\n\tvec_set_hi_v16hi, vec_set_lo_v32qi, vec_set_hi_v32qi): Use\n\t%~128 in the patterns, use \"OI\" for \"mode\" attribute.\n\nFrom-SVN: r179125", "tree": {"sha": "241dc9484e6f7bb99e293af4aac910cc521038c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/241dc9484e6f7bb99e293af4aac910cc521038c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7c0acd01953a277a4bb42d03de572c586a42b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c0acd01953a277a4bb42d03de572c586a42b5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c0acd01953a277a4bb42d03de572c586a42b5e"}], "stats": {"total": 128, "additions": 58, "deletions": 70}, "files": [{"sha": "a416f35f9eadbf04ea85abea3b2930d8b3c1a5c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151", "patch": "@@ -1,3 +1,17 @@\n+2011-09-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_print_operand): Handle %~.\n+\t(ix86_print_operand_punct_valid_p): Return true also for '~'.\n+\t* config/i386/sse.md (i128): New mode_attr.\n+\t(vec_extract_hi_<mode>, vec_extract_hi_<mode>,\n+\tavx_vbroadcastf128_<mode>, *avx_vperm2f128<mode>_full,\n+\t*avx_vperm2f128<mode>_nozero, vec_set_lo_<mode>, \n+\tvec_set_hi_<mode>, *vec_concat<mode>_avx): Use <i128> in the\n+\tpatterns, use \"<sseinsnmode>\" for \"mode\" attribute.\n+\t(vec_extract_hi_v16hi, vec_extract_hi_v32qi, vec_set_lo_v16hi,\n+\tvec_set_hi_v16hi, vec_set_lo_v32qi, vec_set_hi_v32qi): Use\n+\t%~128 in the patterns, use \"OI\" for \"mode\" attribute.\n+\n 2011-09-23  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50447"}, {"sha": "8b39e1d0f99c8424b65cb1a5a9220cefdc0ffba2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151", "patch": "@@ -13513,6 +13513,7 @@ get_some_local_dynamic_name (void)\n    Y -- print condition for XOP pcom* instruction.\n    + -- print a branch hint as 'cs' or 'ds' prefix\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n+   ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n    @ -- print a segment register of thread base pointer load\n  */\n \n@@ -14006,6 +14007,10 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    fputs (\"gs\", file);\n \t  return;\n \n+\tcase '~':\n+\t  putc (TARGET_AVX2 ? 'i' : 'f', file);\n+\t  return;\n+\n \tdefault:\n \t    output_operand_lossage (\"invalid operand code '%c'\", code);\n \t}\n@@ -14141,7 +14146,7 @@ static bool\n ix86_print_operand_punct_valid_p (unsigned char code)\n {\n   return (code == '@' || code == '*' || code == '+'\n-\t  || code == '&' || code == ';');\n+\t  || code == '&' || code == ';' || code == '~');\n }\n \f\n /* Print a memory operand whose address is ADDR.  */"}, {"sha": "baa22a6bc0415573e22ec89f2d0e1e261cd9a21a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 38, "deletions": 69, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1db4406e7799ff4e71bfb4e621f5c7e1f6bdd151", "patch": "@@ -293,6 +293,11 @@\n ;; Instruction suffix for sign and zero extensions.\n (define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n \n+;; i128 for integer vectors and TARGET_AVX2, f128 otherwise.\n+(define_mode_attr i128\n+  [(V8SF \"f128\") (V4DF \"f128\") (V32QI \"%~128\") (V16HI \"%~128\")\n+   (V8SI \"%~128\") (V4DI \"%~128\")])\n+\n ;; Mix-n-match\n (define_mode_iterator AVX256MODE2P [V8SI V8SF V4DF])\n \n@@ -3834,23 +3839,13 @@\n \t  (match_operand:VI8F_256 1 \"register_operand\" \"x,x\")\n \t  (parallel [(const_int 2) (const_int 3)])))]\n   \"TARGET_AVX\"\n-{\n-  if (get_attr_mode (insn) == MODE_OI)\n-    return \"vextracti128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-  else\n-    return \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-}\n+  \"vextract<i128>\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n-   (set (attr \"mode\")\n-     (if_then_else\n-       (and (match_test \"TARGET_AVX2\")\n-\t    (eq (const_string \"<MODE>mode\") (const_string \"V4DImode\")))\n-     (const_string \"OI\")\n-     (const_string \"V4DF\")))])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn_and_split \"vec_extract_lo_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n@@ -3879,23 +3874,13 @@\n \t  (parallel [(const_int 4) (const_int 5)\n \t\t     (const_int 6) (const_int 7)])))]\n   \"TARGET_AVX\"\n-{\n-  if (get_attr_mode (insn) == MODE_OI)\n-    return \"vextracti128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-  else\n-    return \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-}\n+  \"vextract<i128>\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n-   (set (attr \"mode\")\n-     (if_then_else\n-       (and (match_test \"TARGET_AVX2\")\n-\t    (eq (const_string \"<MODE>mode\") (const_string \"V8SImode\")))\n-     (const_string \"OI\")\n-     (const_string \"V8SF\")))])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn_and_split \"vec_extract_lo_v16hi\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n@@ -3928,21 +3913,13 @@\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 14) (const_int 15)])))]\n   \"TARGET_AVX\"\n-{\n-  if (get_attr_mode (insn) == MODE_OI)\n-    return \"vextracti128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-  else\n-    return \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-}\n+  \"vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n-   (set (attr \"mode\")\n-     (if_then_else (match_test \"TARGET_AVX2\")\n-   (const_string \"OI\")\n-   (const_string \"V8SF\")))])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn_and_split \"vec_extract_lo_v32qi\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n@@ -3983,21 +3960,13 @@\n \t\t     (const_int 28) (const_int 29)\n \t\t     (const_int 30) (const_int 31)])))]\n   \"TARGET_AVX\"\n-{\n-  if (get_attr_mode (insn) == MODE_OI)\n-    return \"vextracti128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-  else\n-    return \"vextractf128\\t{$0x1, %1, %0|%0, %1, 0x1}\";\n-}\n+  \"vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"memory\" \"none,store\")\n    (set_attr \"prefix\" \"vex\")\n-   (set (attr \"mode\")\n-     (if_then_else (match_test \"TARGET_AVX2\")\n-   (const_string \"OI\")\n-   (const_string \"V8SF\")))])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn_and_split \"*sse4_1_extractps\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,x,x\")\n@@ -11612,14 +11581,14 @@\n \t  (match_dup 1)))]\n   \"TARGET_AVX\"\n   \"@\n-   vbroadcastf128\\t{%1, %0|%0, %1}\n-   vinsertf128\\t{$1, %1, %0, %0|%0, %0, %1, 1}\n-   vperm2f128\\t{$0, %t1, %t1, %0|%0, %t1, %t1, 0}\"\n+   vbroadcast<i128>\\t{%1, %0|%0, %1}\n+   vinsert<i128>\\t{$1, %1, %0, %0|%0, %0, %1, 1}\n+   vperm2<i128>\\t{$0, %t1, %t1, %0|%0, %t1, %t1, 0}\"\n   [(set_attr \"type\" \"ssemov,sselog1,sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"0,1,1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V4SF,V8SF,V8SF\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n ;; Recognize broadcast as a vec_select as produced by builtin_vec_perm.\n ;; If it so happens that the input is in memory, use vbroadcast.\n@@ -11813,12 +11782,12 @@\n \t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n \t  UNSPEC_VPERMIL2F128))]\n   \"TARGET_AVX\"\n-  \"vperm2f128\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vperm2<i128>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"*avx_vperm2f128<mode>_nozero\"\n   [(set (match_operand:AVX256MODE2P 0 \"register_operand\" \"=x\")\n@@ -11833,13 +11802,13 @@\n {\n   int mask = avx_vperm2f128_parallel (operands[3], <MODE>mode) - 1;\n   operands[3] = GEN_INT (mask);\n-  return \"vperm2f128\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+  return \"vperm2<i128>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"avx_vinsertf128<mode>\"\n   [(match_operand:V_256 0 \"register_operand\" \"\")\n@@ -11904,12 +11873,12 @@\n \t    (match_operand:VI8F_256 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+  \"vinsert<i128>\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V4DF\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vec_set_hi_<mode>\"\n   [(set (match_operand:VI8F_256 0 \"register_operand\" \"=x\")\n@@ -11919,12 +11888,12 @@\n \t    (parallel [(const_int 0) (const_int 1)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+  \"vinsert<i128>\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V4DF\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vec_set_lo_<mode>\"\n   [(set (match_operand:VI4F_256 0 \"register_operand\" \"=x\")\n@@ -11935,12 +11904,12 @@\n \t    (parallel [(const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+  \"vinsert<i128>\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vec_set_hi_<mode>\"\n   [(set (match_operand:VI4F_256 0 \"register_operand\" \"=x\")\n@@ -11951,12 +11920,12 @@\n \t\t       (const_int 2) (const_int 3)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+  \"vinsert<i128>\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vec_set_lo_v16hi\"\n   [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n@@ -11969,12 +11938,12 @@\n \t\t       (const_int 12) (const_int 13)\n \t\t       (const_int 14) (const_int 15)]))))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+  \"vinsert%~128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn \"vec_set_hi_v16hi\"\n   [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n@@ -11987,12 +11956,12 @@\n \t\t       (const_int 6) (const_int 7)]))\n \t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+  \"vinsert%~128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn \"vec_set_lo_v32qi\"\n   [(set (match_operand:V32QI 0 \"register_operand\" \"=x\")\n@@ -12009,12 +11978,12 @@\n \t\t       (const_int 28) (const_int 29)\n \t\t       (const_int 30) (const_int 31)]))))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+  \"vinsert%~128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_insn \"vec_set_hi_v32qi\"\n   [(set (match_operand:V32QI 0 \"register_operand\" \"=x\")\n@@ -12031,12 +12000,12 @@\n \t\t       (const_int 14) (const_int 15)]))\n \t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n-  \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+  \"vinsert%~128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V8SF\")])\n+   (set_attr \"mode\" \"OI\")])\n \n (define_expand \"<avx_avx2>_maskload<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:V48_AVX2 0 \"register_operand\" \"\")\n@@ -12417,7 +12386,7 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"vinsertf128\\t{$0x1, %2, %t1, %0|%0, %t1, %2, 0x1}\";\n+      return \"vinsert<i128>\\t{$0x1, %2, %t1, %0|%0, %t1, %2, 0x1}\";\n     case 1:\n       switch (get_attr_mode (insn))\n \t{"}]}