{"sha": "a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "node_id": "C_kwDOANBUbNoAKGExY2EwMzlmYzBmZTkzNGVmMzZjMjVkODI4NGU2ZTExNmJjYWZmYTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T13:54:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T23:02:37Z"}, "message": "libstdc++: Fix std::exception_ptr regressions [PR103630]\n\nThis restores support for std::make_exception_ptr<E&> and for using\nstd::exception_ptr in C++98.\n\nBecause the new non-throwing implementation needs to use std::decay to\nhandle references the original throwing implementation is used for\nC++98.\n\nWe also need to change the typeid expression so it doesn't yield the\ndynamic type when the function parameter is a reference to a polymorphic\ntype. Otherwise the new exception object could be caught by any handler\nmatching the dynamic type, even though the actual exception object is\nonly a copy of the base class, sliced to the static type.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103630\n\t* libsupc++/exception_ptr.h (exception_ptr): Fix exception\n\tspecifications on inline definitions.\n\t(make_exception_ptr): Decay the template parameter. Use typeid\n\tof the static type.\n\t* testsuite/18_support/exception_ptr/103630.cc: New test.", "tree": {"sha": "0130f298f5e76dbc46ce7501c8e099dddf7a709d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0130f298f5e76dbc46ce7501c8e099dddf7a709d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a219139e986a4200a9105d7c1fa63735d2945994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a219139e986a4200a9105d7c1fa63735d2945994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a219139e986a4200a9105d7c1fa63735d2945994"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "f59752478b109a6d65003b8ae11110ceea9fc705", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "patch": "@@ -39,6 +39,10 @@\n #include <typeinfo>\n #include <new>\n \n+#if __cplusplus >= 201103L\n+# include <bits/move.h>\n+#endif\n+\n #ifdef _GLIBCXX_EH_PTR_RELOPS_COMPAT\n # define _GLIBCXX_EH_PTR_USED __attribute__((__used__))\n #else\n@@ -175,13 +179,14 @@ namespace std\n \n     _GLIBCXX_EH_PTR_USED\n     inline\n-    exception_ptr::exception_ptr() _GLIBCXX_NOEXCEPT\n+    exception_ptr::exception_ptr() _GLIBCXX_USE_NOEXCEPT\n     : _M_exception_object(0)\n     { }\n \n     _GLIBCXX_EH_PTR_USED\n     inline\n-    exception_ptr::exception_ptr(const exception_ptr& __other) _GLIBCXX_NOEXCEPT\n+    exception_ptr::exception_ptr(const exception_ptr& __other)\n+    _GLIBCXX_USE_NOEXCEPT\n     : _M_exception_object(__other._M_exception_object)\n     {\n       if (_M_exception_object)\n@@ -232,14 +237,16 @@ namespace std\n     exception_ptr \n     make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT\n     {\n-#if __cpp_exceptions && __cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI\n+#if __cpp_exceptions && __cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI \\\n+      && __cplusplus >= 201103L\n+      using _Ex2 = typename remove_reference<_Ex>::type;\n       void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));\n       (void) __cxxabiv1::__cxa_init_primary_exception(\n-\t  __e, const_cast<std::type_info*>(&typeid(__ex)),\n-\t  __exception_ptr::__dest_thunk<_Ex>);\n+\t  __e, const_cast<std::type_info*>(&typeid(_Ex)),\n+\t  __exception_ptr::__dest_thunk<_Ex2>);\n       try\n \t{\n-          ::new (__e) _Ex(__ex);\n+\t  ::new (__e) _Ex2(std::forward<_Ex>(__ex));\n           return exception_ptr(__e);\n \t}\n       catch(...)"}, {"sha": "58fb2abe4d2a3b6783c9f44b0e4afa3bdab898a3", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/103630.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F103630.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F103630.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F103630.cc?ref=a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do run }\n+\n+#include <exception>\n+#if __cplusplus < 201103L\n+// std::make_exception_ptr is defined for C++98 as a GNU extension\n+# include <bits/exception_ptr.h>\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+struct B\n+{\n+  virtual bool derived() const { return false; }\n+};\n+\n+struct D : B\n+{\n+  virtual bool derived() const { return true; }\n+};\n+\n+int main()\n+{\n+  D d;\n+  std::exception_ptr p = std::make_exception_ptr<B&>(d); // PR libstdc++/103630\n+#if __cpp_exceptions\n+  try\n+  {\n+    std::rethrow_exception(p);\n+  }\n+  catch (const D& d)\n+  {\n+    VERIFY(d.derived()); // PR libstdc++/103630\n+  }\n+  catch (const B& b)\n+  {\n+    VERIFY(!b.derived());\n+  }\n+#endif\n+}"}]}