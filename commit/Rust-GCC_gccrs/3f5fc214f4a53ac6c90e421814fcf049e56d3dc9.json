{"sha": "3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "node_id": "C_kwDOANBUbNoAKDNmNWZjMjE0ZjRhNTNhYzZjOTBlNDIxODE0ZmNmMDQ5ZTU2ZDNkYzk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-20T11:48:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-20T11:48:28Z"}, "message": "Merge #1404\n\n1404: 'gcc/testsuite/rust/link/link.exp': Fix 'runtest_file_p' usage r=philberty a=tschwinge\n\nThe recent commit 418aef1b006182e84266dcf4f31ee721ed04301a\r\n\"Support extern crate\" (merged in\r\ncommit fd2bd659e44e5b7fea92bc34a4864f057f387490 \"Merge #1362\"), added\r\n'gcc/testsuite/rust/link/link.exp', which I understand to be a hacked up\r\nvariant of the LTO multi-file testing harness (not reviewed in detail).\r\n\r\nSince that commit, there are issues in parallel testing, so that, for example\r\nwith:\r\n\r\n    $ make -j12 check-rust RUNTESTFLAGS='--target_board=unix\\{,-m32,-mx32\\}'\r\n\r\n..., the first variant does test as expected:\r\n\r\n    `@@` -6490,9 +6490,31 `@@` PASS: rust/execute/torture/trait9.rs   -Os   at line 13 (test for warnings, line\r\n     PASS: rust/execute/torture/trait9.rs   -Os  (test for excess errors)\r\n     PASS: rust/execute/torture/trait9.rs   -Os  execution test\r\n     PASS: rust/execute/torture/trait9.rs   -Os  output pattern test\r\n    +Running /home/thomas/tmp/source/gcc/rust/build/trace-slim/source-gcc/gcc/testsuite/rust/link/link.exp ...\r\n    +PASS: rust/link/generic_function_0.rs   -O0  (test for excess errors)\r\n    +[...]\r\n    +PASS: rust/link/trait_import_0.rs   -Os  (test for excess errors)\r\n                    === rust Summary for unix ===\r\n\r\n    -# of expected passes           6445\r\n    +# of expected passes           6466\r\n     # of expected failures         31\r\n\r\n..., but we then get undesired changes for the second and following variants:\r\n\r\n     Running target unix/-m32\r\n     Running /home/thomas/tmp/source/gcc/rust/build/trace-slim/source-gcc/gcc/testsuite/rust/compile/compile.exp ...\r\n     PASS: rust/compile/abi-options1.rs  at line 2 (test for errors, line 1)\r\n     PASS: rust/compile/abi-options1.rs  at line 7 (test for errors, line 6)\r\n     PASS: rust/compile/abi-options1.rs (test for excess errors)\r\n    -PASS: rust/compile/array3.rs  at line 2 (test for warnings, line 1)\r\n    -PASS: rust/compile/array3.rs (test for excess errors)\r\n    -PASS: rust/compile/array_empty_list.rs  at line 3 (test for errors, line 2)\r\n    -PASS: rust/compile/array_empty_list.rs (test for excess errors)\r\n    -PASS: rust/compile/arrays1.rs  (test for errors, line 3)\r\n    -PASS: rust/compile/arrays1.rs (test for excess errors)\r\n     PASS: rust/compile/arrays2.rs  at line 4 (test for errors, line 3)\r\n     PASS: rust/compile/arrays2.rs (test for excess errors)\r\n     PASS: rust/compile/attr-mismatch-crate-name.rs (test for excess errors)\r\n    `@@` -8355,110 +8371,215 `@@` PASS: rust/compile/torture/generics17.rs   -O3 -g  (test for excess errors)\r\n     PASS: rust/compile/torture/generics17.rs   -Os   at line 18 (test for warnings, line 17)\r\n     PASS: rust/compile/torture/generics17.rs   -Os  (test for excess errors)\r\n     PASS: rust/compile/torture/generics18.rs   -O0   at line 19 (test for warnings, line 18)\r\n    +PASS: rust/compile/torture/generics18.rs   -O0   at line 19 (test for warnings, line 18)\r\n    +PASS: rust/compile/torture/generics18.rs   -O0   at line 5 (test for warnings, line 4)\r\n     PASS: rust/compile/torture/generics18.rs   -O0   at line 5 (test for warnings, line 4)\r\n     PASS: rust/compile/torture/generics18.rs   -O0  (test for excess errors)\r\n    +PASS: rust/compile/torture/generics18.rs   -O0  (test for excess errors)\r\n\r\n..., and so on.\r\n\r\nThis has been determined to be due to repetitive 'runtest_file_p' calls (it's\r\na mess...), thusly fixed (some would call it a \"hack\", no doubt), and verified\r\nthat, for example:\r\n\r\n    $ make -j12 check-rust RUNTESTFLAGS='--target_board=unix\\{,-m32,-mx32\\} link.exp=simple_function_0.rs'\r\n\r\n... only runs the one test as indicated.\r\n\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "3c80fd4a96e95a3069124d6e9ec9b97a6d190a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c80fd4a96e95a3069124d6e9ec9b97a6d190a6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1+uMCRBK7hj4Ov3rIwAA9R0IAHKvgOIEOVoZLpov0vf7/pxs\n7kLMhmycYU7UlmJTdaDXqxm8nOEScRLgECKt6mNtHHr+Bphm78g2tqdK+2p6AbxO\nZao83uRBqIrVtw8ZPZDE5Wp02sd4HnPOsoRKMwKJJD4tAGsjq5g7jGwQJEKGTYm/\n9+8Jqh0TFpY8ThfGyr2/MdJntzPZ2FdDrwQQpixgP+qjfSH6X36h0AXJtFSqZhC6\ntlwqyrnHnuYQwHnEKdNcCxZR9+sx/D0zaZtUNFjd5OFNaPYV6CQFCXHMeOKjxvzl\ndRj0DzQp9M8p1z3JgWx5TUsWlyIhShrRyXOXFlG/QtOSxQme0VaSI+BKkHBBYwU=\n=GgjH\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c80fd4a96e95a3069124d6e9ec9b97a6d190a6f\nparent 137cd3bbaa05038b01c46f7ac7472da7ca662ed7\nparent 51f03d9d697b0f3fed65f85e88ce41d424c844fb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1658317708 +0000\ncommitter GitHub <noreply@github.com> 1658317708 +0000\n\nMerge #1404\n\n1404: 'gcc/testsuite/rust/link/link.exp': Fix 'runtest_file_p' usage r=philberty a=tschwinge\n\nThe recent commit 418aef1b006182e84266dcf4f31ee721ed04301a\r\n\"Support extern crate\" (merged in\r\ncommit fd2bd659e44e5b7fea92bc34a4864f057f387490 \"Merge #1362\"), added\r\n'gcc/testsuite/rust/link/link.exp', which I understand to be a hacked up\r\nvariant of the LTO multi-file testing harness (not reviewed in detail).\r\n\r\nSince that commit, there are issues in parallel testing, so that, for example\r\nwith:\r\n\r\n    $ make -j12 check-rust RUNTESTFLAGS='--target_board=unix\\{,-m32,-mx32\\}'\r\n\r\n..., the first variant does test as expected:\r\n\r\n    `@@` -6490,9 +6490,31 `@@` PASS: rust/execute/torture/trait9.rs   -Os   at line 13 (test for warnings, line\r\n     PASS: rust/execute/torture/trait9.rs   -Os  (test for excess errors)\r\n     PASS: rust/execute/torture/trait9.rs   -Os  execution test\r\n     PASS: rust/execute/torture/trait9.rs   -Os  output pattern test\r\n    +Running /home/thomas/tmp/source/gcc/rust/build/trace-slim/source-gcc/gcc/testsuite/rust/link/link.exp ...\r\n    +PASS: rust/link/generic_function_0.rs   -O0  (test for excess errors)\r\n    +[...]\r\n    +PASS: rust/link/trait_import_0.rs   -Os  (test for excess errors)\r\n                    === rust Summary for unix ===\r\n\r\n    -# of expected passes           6445\r\n    +# of expected passes           6466\r\n     # of expected failures         31\r\n\r\n..., but we then get undesired changes for the second and following variants:\r\n\r\n     Running target unix/-m32\r\n     Running /home/thomas/tmp/source/gcc/rust/build/trace-slim/source-gcc/gcc/testsuite/rust/compile/compile.exp ...\r\n     PASS: rust/compile/abi-options1.rs  at line 2 (test for errors, line 1)\r\n     PASS: rust/compile/abi-options1.rs  at line 7 (test for errors, line 6)\r\n     PASS: rust/compile/abi-options1.rs (test for excess errors)\r\n    -PASS: rust/compile/array3.rs  at line 2 (test for warnings, line 1)\r\n    -PASS: rust/compile/array3.rs (test for excess errors)\r\n    -PASS: rust/compile/array_empty_list.rs  at line 3 (test for errors, line 2)\r\n    -PASS: rust/compile/array_empty_list.rs (test for excess errors)\r\n    -PASS: rust/compile/arrays1.rs  (test for errors, line 3)\r\n    -PASS: rust/compile/arrays1.rs (test for excess errors)\r\n     PASS: rust/compile/arrays2.rs  at line 4 (test for errors, line 3)\r\n     PASS: rust/compile/arrays2.rs (test for excess errors)\r\n     PASS: rust/compile/attr-mismatch-crate-name.rs (test for excess errors)\r\n    `@@` -8355,110 +8371,215 `@@` PASS: rust/compile/torture/generics17.rs   -O3 -g  (test for excess errors)\r\n     PASS: rust/compile/torture/generics17.rs   -Os   at line 18 (test for warnings, line 17)\r\n     PASS: rust/compile/torture/generics17.rs   -Os  (test for excess errors)\r\n     PASS: rust/compile/torture/generics18.rs   -O0   at line 19 (test for warnings, line 18)\r\n    +PASS: rust/compile/torture/generics18.rs   -O0   at line 19 (test for warnings, line 18)\r\n    +PASS: rust/compile/torture/generics18.rs   -O0   at line 5 (test for warnings, line 4)\r\n     PASS: rust/compile/torture/generics18.rs   -O0   at line 5 (test for warnings, line 4)\r\n     PASS: rust/compile/torture/generics18.rs   -O0  (test for excess errors)\r\n    +PASS: rust/compile/torture/generics18.rs   -O0  (test for excess errors)\r\n\r\n..., and so on.\r\n\r\nThis has been determined to be due to repetitive 'runtest_file_p' calls (it's\r\na mess...), thusly fixed (some would call it a \"hack\", no doubt), and verified\r\nthat, for example:\r\n\r\n    $ make -j12 check-rust RUNTESTFLAGS='--target_board=unix\\{,-m32,-mx32\\} link.exp=simple_function_0.rs'\r\n\r\n... only runs the one test as indicated.\r\n\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137cd3bbaa05038b01c46f7ac7472da7ca662ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137cd3bbaa05038b01c46f7ac7472da7ca662ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/137cd3bbaa05038b01c46f7ac7472da7ca662ed7"}, {"sha": "51f03d9d697b0f3fed65f85e88ce41d424c844fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f03d9d697b0f3fed65f85e88ce41d424c844fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f03d9d697b0f3fed65f85e88ce41d424c844fb"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "8b2e93ceab614bc8ad5c14e9771a5cd459191979", "filename": "gcc/testsuite/rust/link/link.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9/gcc%2Ftestsuite%2Frust%2Flink%2Flink.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5fc214f4a53ac6c90e421814fcf049e56d3dc9/gcc%2Ftestsuite%2Frust%2Flink%2Flink.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Flink.exp?ref=3f5fc214f4a53ac6c90e421814fcf049e56d3dc9", "patch": "@@ -154,7 +154,16 @@ foreach src [lsort [find $srcdir/$subdir *_0.rs]] {\n \tcontinue\n     }\n \n+    # To prevent 'runtest_file_p' being tested again (for example, via\n+    # 'gcc-dg-runtest'), with undesirable consequences due to its side effects,\n+    # interpose a dummy:\n+    rename runtest_file_p saved_runtest_file_p\n+    proc runtest_file_p { runtests testcase } {\n+\treturn 1\n+    }\n     rs-link-execute $src\n+    rename runtest_file_p {}\n+    rename saved_runtest_file_p runtest_file_p\n }\n \n set dg-do-what-default ${saved-dg-do-what-default}"}]}