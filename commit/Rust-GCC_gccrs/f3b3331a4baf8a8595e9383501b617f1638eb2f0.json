{"sha": "f3b3331a4baf8a8595e9383501b617f1638eb2f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiMzMzMWE0YmFmOGE4NTk1ZTkzODM1MDFiNjE3ZjE2MzhlYjJmMA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-21T15:52:58Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-21T15:52:58Z"}, "message": "[arm] clean up alu+shift patterns\n\nMy DImode arithmetic patches introduced a bug on thumb2 where we could\ngenerate a register controlled shift into an ALU operation.  In\nfairness the bug was always present, but latent.\n\nAs part of cleaning this up (and auditing to ensure I've caught them\nall this time) I've gone through all the shift generating patterns in\nthe MD files and cleaned them up, reducing some duplicate patterns\nbetween the arm and thumb2 descriptions where we can now share the\nsame pattern.  In some cases we were missing the shift attribute; in\nmost cases I've eliminated an ugly attribute setting using the fact\nthat we normally need separate alternatives for shift immediate and\nshift reg to simplify the logic.\n\n\t* config/arm/iterators.md (t2_binop0): Fix typo in comment.\n\t* config/arm/arm.md (addsi3_carryin_shift): Simplify selection of the\n\ttype attribute.\n\t(subsi3_carryin_shift): Separate into register and constant controlled\n\talternatives.  Use shift_amount_operand for operand 4.  Set shift\n\tattribute and simplify type attribute.\n\t(subsi3_carryin_shift_alt): Likewise.\n\t(rsbsi3_carryin_shift): Likewise.\n\t(rsbsi3_carryin_shift_alt): Likewise.\n\t(andsi_not_shiftsi_si): Enable for TARGET_32BIT.  Separate constant\n\tand register controlled shifts into distinct alternatives.\n\t(andsi_not_shiftsi_si_scc_no_reuse): Likewise.\n\t(andsi_not_shiftsi_si_scc): Likewise.\n\t(arm_cmpsi_negshiftsi_si): Likewise.\n\t(not_shiftsi): Remove redundant M constraint from alternative 1.\n\t(not_shiftsi_compare0): Likewise.\n\t(arm_cmpsi_insn): Remove redundant alternative 2.\n\t(cmpsi_shift_swp): Likewise.\n\t(sub_shiftsi): Likewise.\n\t(sub_shiftsi_compare0_scratch): Likewise.\n\t* config/arm/thumb2.md (thumb_andsi_not_shiftsi_si): Delete pattern.\n\t(thumb2_cmpsi_neg_shiftsi): Likewise.\n\nFrom-SVN: r277262", "tree": {"sha": "42e4077f8fac1172f5ad4c24c150c7d598bd558e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42e4077f8fac1172f5ad4c24c150c7d598bd558e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3b3331a4baf8a8595e9383501b617f1638eb2f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b3331a4baf8a8595e9383501b617f1638eb2f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b3331a4baf8a8595e9383501b617f1638eb2f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b3331a4baf8a8595e9383501b617f1638eb2f0/comments", "author": null, "committer": null, "parents": [{"sha": "53b15ca96116544a7a3ca8bc5f4e1649b74f3d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b15ca96116544a7a3ca8bc5f4e1649b74f3d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b15ca96116544a7a3ca8bc5f4e1649b74f3d45"}], "stats": {"total": 220, "additions": 105, "deletions": 115}, "files": [{"sha": "50121777940e620e50274f707c3702da7d793f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3b3331a4baf8a8595e9383501b617f1638eb2f0", "patch": "@@ -1,3 +1,28 @@\n+2019-10-21  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/iterators.md (t2_binop0): Fix typo in comment.\n+\t* config/arm/arm.md (addsi3_carryin_shift): Simplify selection of the\n+\ttype attribute.\n+\t(subsi3_carryin_shift): Separate into register and constant controlled\n+\talternatives.  Use shift_amount_operand for operand 4.  Set shift\n+\tattribute and simplify type attribute.\n+\t(subsi3_carryin_shift_alt): Likewise.\n+\t(rsbsi3_carryin_shift): Likewise.\n+\t(rsbsi3_carryin_shift_alt): Likewise.\n+\t(andsi_not_shiftsi_si): Enable for TARGET_32BIT.  Separate constant\n+\tand register controlled shifts into distinct alternatives.\n+\t(andsi_not_shiftsi_si_scc_no_reuse): Likewise.\n+\t(andsi_not_shiftsi_si_scc): Likewise.\n+\t(arm_cmpsi_negshiftsi_si): Likewise.\n+\t(not_shiftsi): Remove redundant M constraint from alternative 1.\n+\t(not_shiftsi_compare0): Likewise.\n+\t(arm_cmpsi_insn): Remove redundant alternative 2.\n+\t(cmpsi_shift_swp): Likewise.\n+\t(sub_shiftsi): Likewise.\n+\t(sub_shiftsi_compare0_scratch): Likewise.\n+\t* config/arm/thumb2.md (thumb_andsi_not_shiftsi_si): Delete pattern.\n+\t(thumb2_cmpsi_neg_shiftsi): Likewise.\n+\n 2019-10-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92162"}, {"sha": "039fdd02479abfc4ad36bf35ce55172cdcfb9c1b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 79, "deletions": 87, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f3b3331a4baf8a8595e9383501b617f1638eb2f0", "patch": "@@ -1338,9 +1338,7 @@\n    (set_attr \"arch\" \"32,a\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"predicable\" \"yes\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift_imm\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\" \"alu_shift_imm,alu_shift_reg\")]\n )\n \n (define_insn \"*addsi3_carryin_clobercc\"\n@@ -1719,71 +1717,68 @@\n )\n \n (define_insn \"*subsi3_carryin_shift\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(minus:SI (minus:SI\n-\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")]))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")]))\n \t\t  (match_operand:SI 5 \"arm_borrow_operation\" \"\")))]\n   \"TARGET_32BIT\"\n   \"sbc%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"use\")\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"shift\" \"3\")\n    (set_attr \"predicable\" \"yes\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t\t\t    (const_string \"alu_shift_imm\")\n-\t\t\t\t    (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\" \"alu_shift_imm,alu_shift_reg\")]\n )\n \n (define_insn \"*subsi3_carryin_shift_alt\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(minus:SI (minus:SI\n-\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operand:SI 5 \"arm_borrow_operation\" \"\"))\n \t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])))]\n+\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t    (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")])))]\n   \"TARGET_32BIT\"\n   \"sbc%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"use\")\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"shift\" \"3\")\n    (set_attr \"predicable\" \"yes\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t\t\t    (const_string \"alu_shift_imm\")\n-\t\t\t\t    (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\" \"alu_shift_imm,alu_shift_reg\")]\n )\n \n+;; No RSC in Thumb2\n (define_insn \"*rsbsi3_carryin_shift\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(minus:SI (minus:SI\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])\n-\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")])\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"r,r\"))\n \t\t  (match_operand:SI 5 \"arm_borrow_operation\" \"\")))]\n   \"TARGET_ARM\"\n   \"rsc%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift_imm\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\" \"alu_shift_imm,alu_shift_reg\")]\n )\n \n (define_insn \"*rsbsi3_carryin_shift_alt\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(minus:SI (minus:SI\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")])\n \t\t    (match_operand:SI 5 \"arm_borrow_operation\" \"\"))\n-\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+\t\t  (match_operand:SI 1 \"s_register_operand\" \"r,r\")))]\n   \"TARGET_ARM\"\n   \"rsc%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n-   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift_imm\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\" \"alu_shift_imm,alu_shift_reg\")]\n )\n \n ; transform ((x << y) - 1) to ~(~(x-1) << y)  Where X is a constant.\n@@ -3268,18 +3263,17 @@\n )\n \n (define_insn \"andsi_not_shiftsi_si\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(and:SI (not:SI (match_operator:SI 4 \"shift_operator\"\n-\t\t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 3 \"arm_rhs_operand\" \"rM\")]))\n-\t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_ARM\"\n+\t\t\t [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t\t\t  (match_operand:SI 3 \"shift_amount_operand\" \"M,r\")]))\n+\t\t(match_operand:SI 1 \"s_register_operand\" \"r,r\")))]\n+  \"TARGET_32BIT\"\n   \"bic%?\\\\t%0, %1, %2%S4\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"2\")\n-   (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"logic_shift_imm\")\n-\t\t      (const_string \"logic_shift_reg\")))]\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"logic_shift_imm,logic_shift_reg\")]\n )\n \n ;; Shifted bics pattern used to set up CC status register and not reusing\n@@ -3289,19 +3283,18 @@\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n \t\t(and:SI (not:SI (match_operator:SI 0 \"shift_operator\"\n-\t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n-\t\t\t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n+\t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n+\t\t\t(match_operand:SI 3 \"s_register_operand\" \"r,r\"))\n \t\t(const_int 0)))\n-   (clobber (match_scratch:SI 4 \"=r\"))]\n-  \"TARGET_ARM || (TARGET_THUMB2 && CONST_INT_P (operands[2]))\"\n+   (clobber (match_scratch:SI 4 \"=r,r\"))]\n+  \"TARGET_32BIT\"\n   \"bics%?\\\\t%4, %3, %1%S0\"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"32,a\")\n    (set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"logic_shift_imm\")\n-\t\t      (const_string \"logic_shift_reg\")))]\n+   (set_attr \"type\" \"logic_shift_imm,logic_shift_reg\")]\n )\n \n ;; Same as andsi_not_shiftsi_si_scc_no_reuse, but the bics result is also\n@@ -3310,23 +3303,22 @@\n   [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n \t\t(and:SI (not:SI (match_operator:SI 0 \"shift_operator\"\n-\t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))\n-\t\t\t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n+\t\t\t[(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n+\t\t\t(match_operand:SI 3 \"s_register_operand\" \"r,r\"))\n \t\t(const_int 0)))\n-\t(set (match_operand:SI 4 \"s_register_operand\" \"=r\")\n+\t(set (match_operand:SI 4 \"s_register_operand\" \"=r,r\")\n \t     (and:SI (not:SI (match_op_dup 0\n \t\t     [(match_dup 1)\n \t\t      (match_dup 2)]))\n \t\t     (match_dup 3)))])]\n-  \"TARGET_ARM || (TARGET_THUMB2 && CONST_INT_P (operands[2]))\"\n+  \"TARGET_32BIT\"\n   \"bics%?\\\\t%4, %3, %1%S0\"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"32,a\")\n    (set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"logic_shift_imm\")\n-\t\t      (const_string \"logic_shift_reg\")))]\n+   (set_attr \"type\" \"logic_shift_imm,logic_shift_reg\")]\n )\n \n (define_insn \"*andsi_notsi_si_compare0\"\n@@ -4219,7 +4211,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")])))]\n+\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")])))]\n   \"TARGET_32BIT\"\n   \"mvn%?\\\\t%0, %1%S3\"\n   [(set_attr \"predicable\" \"yes\")\n@@ -4232,7 +4224,7 @@\n \t(compare:CC_NOOV\n \t (not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")]))\n+\t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n@@ -4248,7 +4240,7 @@\n \t(compare:CC_NOOV\n \t (not:SI (match_operator:SI 3 \"shift_operator\"\n \t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n-\t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,rM\")]))\n+\t\t   (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")]))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r,r\"))]\n   \"TARGET_32BIT\"\n@@ -7197,43 +7189,43 @@\n \n (define_insn \"*cmpsi_shiftsi\"\n   [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r,r,r\")\n+\t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r,r\")\n \t\t    (match_operator:SI  3 \"shift_operator\"\n-\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n-\t\t      (match_operand:SI 2 \"shift_amount_operand\" \"M,r,M\")])))]\n+\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t      (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")])))]\n   \"TARGET_32BIT\"\n   \"cmp\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"arch\" \"32,a,a\")\n-   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg,alus_shift_imm\")])\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*cmpsi_shiftsi_swp\"\n   [(set (reg:CC_SWP CC_REGNUM)\n \t(compare:CC_SWP (match_operator:SI 3 \"shift_operator\"\n-\t\t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n-\t\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,r,M\")])\n-\t\t\t(match_operand:SI 0 \"s_register_operand\" \"r,r,r\")))]\n+\t\t\t [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t  (match_operand:SI 2 \"shift_amount_operand\" \"M,r\")])\n+\t\t\t(match_operand:SI 0 \"s_register_operand\" \"r,r\")))]\n   \"TARGET_32BIT\"\n   \"cmp%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"arch\" \"32,a,a\")\n-   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg,alus_shift_imm\")])\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*arm_cmpsi_negshiftsi_si\"\n   [(set (reg:CC_Z CC_REGNUM)\n \t(compare:CC_Z\n \t (neg:SI (match_operator:SI 1 \"shift_operator\"\n-\t\t    [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 3 \"reg_or_int_operand\" \"rM\")]))\n-\t (match_operand:SI 0 \"s_register_operand\" \"r\")))]\n-  \"TARGET_ARM\"\n+\t\t    [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 3 \"shift_amount_operand\" \"M,r\")]))\n+\t (match_operand:SI 0 \"s_register_operand\" \"r,r\")))]\n+  \"TARGET_32BIT\"\n   \"cmn%?\\\\t%0, %2%S1\"\n   [(set_attr \"conds\" \"set\")\n-   (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t\t\t    (const_string \"alus_shift_imm\")\n-\t\t\t\t    (const_string \"alus_shift_reg\")))\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"shift\" \"2\")\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -8945,36 +8937,36 @@\n (define_insn \"*sub_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n-\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r,M\")]))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")]))\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(minus:SI (match_dup 1)\n \t\t  (match_op_dup 2 [(match_dup 3) (match_dup 4)])))]\n   \"TARGET_32BIT\"\n   \"subs%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n-   (set_attr \"arch\" \"32,a,a\")\n-   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg,alus_shift_imm\")])\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n-\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r,r\")\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n \t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n-\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r,M\")]))\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")]))\n \t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r,r,r\"))]\n+   (clobber (match_scratch:SI 0 \"=r,r\"))]\n   \"TARGET_32BIT\"\n   \"subs%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n-   (set_attr \"arch\" \"32,a,a\")\n-   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg,alus_shift_imm\")])\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"type\" \"alus_shift_imm,alus_shift_reg\")])\n \f\n \n (define_insn_and_split \"*and_scc\""}, {"sha": "4eb203365a6c10492a948b45db38c244ec191427", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=f3b3331a4baf8a8595e9383501b617f1638eb2f0", "patch": "@@ -265,7 +265,7 @@\n (define_code_iterator FCVT [unsigned_float float])\n \n ;; plus and minus are the only SHIFTABLE_OPS for which Thumb2 allows\n-;; a stack pointer opoerand.  The minus operation is a candidate for an rsub\n+;; a stack pointer operand.  The minus operation is a candidate for an rsub\n ;; and hence only plus is supported.\n (define_code_attr t2_binop0\n   [(plus \"rk\") (minus \"r\") (ior \"r\") (xor \"r\") (and \"r\")])"}, {"sha": "7fce50b045b40f0d29ba792dce05e43072dad3b0", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b3331a4baf8a8595e9383501b617f1638eb2f0/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=f3b3331a4baf8a8595e9383501b617f1638eb2f0", "patch": "@@ -24,20 +24,6 @@\n ;; changes made in armv5t as \"thumb2\".  These are considered part\n ;; the 16-bit Thumb-1 instruction set.\n \n-;; Thumb-2 only allows shift by constant on data processing instructions\n-(define_insn \"*thumb_andsi_not_shiftsi_si\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(and:SI (not:SI (match_operator:SI 4 \"shift_operator\"\n-\t\t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 3 \"const_int_operand\" \"M\")]))\n-\t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_THUMB2\"\n-  \"bic%?\\\\t%0, %1, %2%S4\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"shift\" \"2\")\n-   (set_attr \"type\" \"alu_shift_imm\")]\n-)\n-\n ;; We use the '0' constraint for operand 1 because reload should\n ;; be smart enough to generate an appropriate move for the r/r/r case.\n (define_insn_and_split \"*thumb2_smaxsi3\"\n@@ -333,19 +319,6 @@\n   [(set_attr \"type\" \"store_8\")]\n )\n \n-(define_insn \"*thumb2_cmpsi_neg_shiftsi\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t    (neg:SI (match_operator:SI 3 \"shift_operator\"\n-\t\t\t     [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"M\")]))))]\n-  \"TARGET_THUMB2\"\n-  \"cmn%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alus_shift_imm\")]\n-)\n-\n (define_insn_and_split \"*thumb2_mov_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r\")\n \t(match_operator:SI 1 \"arm_comparison_operator_mode\""}]}