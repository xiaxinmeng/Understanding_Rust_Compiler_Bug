{"sha": "f29a1ef2d8efb9423b878c9d5da1961527fce707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI5YTFlZjJkOGVmYjk0MjNiODc4YzlkNWRhMTk2MTUyN2ZjZTcwNw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2019-03-06T13:38:32Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2019-03-06T13:38:32Z"}, "message": "PR libstdc++/86655 - std::assoc_legendre should not constrain\n\n2019-03-06  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR libstdc++/86655 - std::assoc_legendre should not constrain\n\tthe value of m (or x).\n\t* include/tr1/legendre_function.tcc (__assoc_legendre_p,\n\t__sph_legendre): If degree > order Don't throw, return 0.\n\t(__legendre_p, __assoc_legendre_p): Don't constrain x either.\n\t* testsuite/special_functions/02_assoc_legendre/pr86655.cc: New test.\n\t* testsuite/special_functions/20_sph_legendre/pr86655.cc: New test.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t02_assoc_legendre/pr86655.cc: New test.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t22_sph_legendre/pr86655.cc: New test.\n\nFrom-SVN: r269423", "tree": {"sha": "21b8b63b090cccd3d46c16a7baa8544920926c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21b8b63b090cccd3d46c16a7baa8544920926c05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f29a1ef2d8efb9423b878c9d5da1961527fce707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29a1ef2d8efb9423b878c9d5da1961527fce707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29a1ef2d8efb9423b878c9d5da1961527fce707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29a1ef2d8efb9423b878c9d5da1961527fce707/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "669a6fdcb436ae81f7621c35d90f7c41ed2117a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669a6fdcb436ae81f7621c35d90f7c41ed2117a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669a6fdcb436ae81f7621c35d90f7c41ed2117a7"}], "stats": {"total": 266, "additions": 247, "deletions": 19}, "files": [{"sha": "4cbdc80aa08d470cd31bffcebd1eae4c5409f6be", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f29a1ef2d8efb9423b878c9d5da1961527fce707", "patch": "@@ -1,3 +1,17 @@\n+2019-03-06  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR libstdc++/86655 - std::assoc_legendre should not constrain\n+\tthe value of m (or x).\n+\t* include/tr1/legendre_function.tcc (__assoc_legendre_p,\n+\t__sph_legendre): If degree > order Don't throw, return 0.\n+\t(__legendre_p, __assoc_legendre_p): Don't constrain x either.\n+\t* testsuite/special_functions/02_assoc_legendre/pr86655.cc: New test.\n+\t* testsuite/special_functions/20_sph_legendre/pr86655.cc: New test.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t02_assoc_legendre/pr86655.cc: New test.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t22_sph_legendre/pr86655.cc: New test.\n+\n 2019-03-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tRewrite variant."}, {"sha": "f782907a67df6daf27a090fcd6e9f5c7ea7712bc", "filename": "libstdc++-v3/include/tr1/legendre_function.tcc", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Flegendre_function.tcc?ref=f29a1ef2d8efb9423b878c9d5da1961527fce707", "patch": "@@ -82,10 +82,7 @@ namespace tr1\n     __poly_legendre_p(unsigned int __l, _Tp __x)\n     {\n \n-      if ((__x < _Tp(-1)) || (__x > _Tp(+1)))\n-        std::__throw_domain_error(__N(\"Argument out of range\"\n-                                      \" in __poly_legendre_p.\"));\n-      else if (__isnan(__x))\n+      if (__isnan(__x))\n         return std::numeric_limits<_Tp>::quiet_NaN();\n       else if (__x == +_Tp(1))\n         return +_Tp(1);\n@@ -126,11 +123,11 @@ namespace tr1\n      *   @f[\n      *     P_l^m(x) = (1 - x^2)^{m/2}\\frac{d^m}{dx^m}P_l(x)\n      *   @f]\n+     *   @note @f$ P_l^m(x) = 0 @f$ if @f$ m > l @f$.\n      * \n      *   @param  l  The degree of the associated Legendre function.\n      *              @f$ l >= 0 @f$.\n      *   @param  m  The order of the associated Legendre function.\n-     *              @f$ m <= l @f$.\n      *   @param  x  The argument of the associated Legendre function.\n      *              @f$ |x| <= 1 @f$.\n      *   @param  phase  The phase of the associated Legendre function.\n@@ -142,12 +139,8 @@ namespace tr1\n \t\t       _Tp __phase = _Tp(+1))\n     {\n \n-      if (__x < _Tp(-1) || __x > _Tp(+1))\n-        std::__throw_domain_error(__N(\"Argument out of range\"\n-                                      \" in __assoc_legendre_p.\"));\n-      else if (__m > __l)\n-        std::__throw_domain_error(__N(\"Degree out of range\"\n-                                      \" in __assoc_legendre_p.\"));\n+      if (__m > __l)\n+        return _Tp(0);\n       else if (__isnan(__x))\n         return std::numeric_limits<_Tp>::quiet_NaN();\n       else if (__m == 0)\n@@ -209,12 +202,12 @@ namespace tr1\n      *   and so this function is stable for larger differences of @f$ l @f$\n      *   and @f$ m @f$.\n      *   @note Unlike the case for __assoc_legendre_p the Condon-Shortley\n-     *   phase factor @f$ (-1)^m @f$ is present here.\n+     *         phase factor @f$ (-1)^m @f$ is present here.\n+     *   @note @f$ Y_l^m(\\theta) = 0 @f$ if @f$ m > l @f$.\n      * \n      *   @param  l  The degree of the spherical associated Legendre function.\n      *              @f$ l >= 0 @f$.\n      *   @param  m  The order of the spherical associated Legendre function.\n-     *              @f$ m <= l @f$.\n      *   @param  theta  The radian angle argument of the spherical associated\n      *                  Legendre function.\n      */\n@@ -227,11 +220,8 @@ namespace tr1\n \n       const _Tp __x = std::cos(__theta);\n \n-      if (__l < __m)\n-        {\n-          std::__throw_domain_error(__N(\"Bad argument \"\n-                                        \"in __sph_legendre.\"));\n-        }\n+      if (__m > __l)\n+        return _Tp(0);\n       else if (__m == 0)\n         {\n           _Tp __P = __poly_legendre_p(__l, __x);\n@@ -284,7 +274,7 @@ namespace tr1\n               _Tp __y_lm = _Tp(0);\n \n               // Compute Y_l^m, l > m+1, upward recursion on l.\n-              for (unsigned int __ll = __m + 2; __ll <= __l; ++__ll)\n+              for (int __ll = __m + 2; __ll <= __l; ++__ll)\n                 {\n                   const _Tp __rat1 = _Tp(__ll - __m) / _Tp(__ll + __m);\n                   const _Tp __rat2 = _Tp(__ll - __m - 1) / _Tp(__ll + __m - 1);"}, {"sha": "2b028348ba736d14e1c86aeb6e63b78368e2c8b3", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/pr86655.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fpr86655.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fpr86655.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fpr86655.cc?ref=f29a1ef2d8efb9423b878c9d5da1961527fce707", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__ -ffp-contract=off\" }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <initializer_list>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  std::assoc_legendre(l, m, x) == 0: \" << (A) \\\n+\t<< '\\n'; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+\n+template<typename _Tp>\n+  void\n+  test_m_gt_l()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    for (auto l : {0u, 1u, 2u, 5u})\n+      for (auto m : {l + 1u, l + 2u})\n+\tfor (auto i : {-2, -1, 0, 1, 2})\n+\t  {\n+\t    auto x = _Tp(i * 0.5L);\n+\t    VERIFY(std::assoc_legendre(l, m, x) == _Tp(0));\n+\t  }\n+  }\n+\n+int\n+main()\n+{\n+  test_m_gt_l<float>();\n+  test_m_gt_l<double>();\n+  test_m_gt_l<long double>();\n+}"}, {"sha": "94ee0d6ce6c70fb1ad56ca4bbb8e11206a81d2d9", "filename": "libstdc++-v3/testsuite/special_functions/20_sph_legendre/pr86655.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fpr86655.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fpr86655.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fpr86655.cc?ref=f29a1ef2d8efb9423b878c9d5da1961527fce707", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__ -ffp-contract=off\" }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <initializer_list>\n+#include <cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  std::sph_legendre(l, m, x) == 0: \" << (A) \\\n+\t<< '\\n'; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+\n+template<typename _Tp>\n+  void\n+  test_m_gt_l()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    for (auto l : {0u, 1u, 2u, 5u})\n+      for (auto m : {l + 1u, l + 2u})\n+\tfor (auto i : {-2, -1, 0, 1, 2})\n+\t  {\n+\t    auto theta = std::acos(_Tp(i * 0.5L));\n+\t    VERIFY(std::sph_legendre(l, m, theta) == _Tp(0));\n+\t  }\n+  }\n+\n+int\n+main()\n+{\n+  test_m_gt_l<float>();\n+  test_m_gt_l<double>();\n+  test_m_gt_l<long double>();\n+}"}, {"sha": "092afddbba59b9c32eb5e09f779289bd50376582", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/02_assoc_legendre/pr86655.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fpr86655.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fpr86655.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fpr86655.cc?ref=f29a1ef2d8efb9423b878c9d5da1961527fce707", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++98 -ffp-contract=off\" }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  std::tr1::assoc_legendre(l, m, x) == 0: \" << (A) \\\n+\t<< '\\n'; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+\n+template<typename _Tp>\n+  void\n+  test_m_gt_l()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    unsigned int larr[4] = {0u, 1u, 2u, 5u};\n+    for (unsigned int l = 0; l < 4; ++l)\n+      for (unsigned int m = larr[l] + 1u; m <= larr[l] + 2u; ++m)\n+\tfor (int i = -2; i <= +2; ++i)\n+\t  {\n+\t    _Tp x = _Tp(i * 0.5L);\n+\t    VERIFY(std::tr1::assoc_legendre(larr[l], m, x) == _Tp(0));\n+\t  }\n+  }\n+\n+int\n+main()\n+{\n+  test_m_gt_l<float>();\n+  test_m_gt_l<double>();\n+  test_m_gt_l<long double>();\n+}"}, {"sha": "510044378adde6d8d8ec00ca03c78f0ffe8924a0", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/22_sph_legendre/pr86655.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fpr86655.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a1ef2d8efb9423b878c9d5da1961527fce707/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fpr86655.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fpr86655.cc?ref=f29a1ef2d8efb9423b878c9d5da1961527fce707", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++98 -ffp-contract=off\" }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/cmath>\n+#if defined(__TEST_DEBUG)\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  std::sph_legendre(l, m, x) == 0: \" << (A) \\\n+\t<< '\\n'; \\\n+    }\n+#else\n+#  include <testsuite_hooks.h>\n+#endif\n+\n+template<typename _Tp>\n+  void\n+  test_m_gt_l()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    unsigned int larr[4] = {0u, 1u, 2u, 5u};\n+    for (unsigned int l = 0; l < 4; ++l)\n+      for (unsigned int m = larr[l] + 1u; m <= larr[l] + 2u; ++m)\n+\tfor (int i = -2; i <= +2; ++i)\n+\t  {\n+\t    _Tp theta = std::acos(_Tp(i * 0.5L));\n+\t    VERIFY(std::tr1::sph_legendre(larr[l], m, theta) == _Tp(0));\n+\t  }\n+  }\n+\n+int\n+main()\n+{\n+  test_m_gt_l<float>();\n+  test_m_gt_l<double>();\n+  test_m_gt_l<long double>();\n+}"}]}