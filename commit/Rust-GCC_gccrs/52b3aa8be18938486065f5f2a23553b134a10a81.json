{"sha": "52b3aa8be18938486065f5f2a23553b134a10a81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJiM2FhOGJlMTg5Mzg0ODYwNjVmNWYyYTIzNTUzYjEzNGExMGE4MQ==", "commit": {"author": {"name": "Alexey Neyman", "email": "stilor@att.net", "date": "2020-03-15T00:05:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-18T01:22:09Z"}, "message": "dwarf: Generate DIEs for external variables with -g1 [93751]\n\n-g1 is described in the manual to generate debug info for functions and\nexternal variables. It does that for older debugging formats but not for\nDWARF. This change brings DWARF in line with the rest of the debugging\nformats and with the manual.\n\ngcc/ChangeLog\n2020-03-17  Alexey Neyman  <stilor@att.net>\n\n\tPR debug/93751\n\t* dwarf2out.c (gen_decl_die): Proceed to generating the DIE if\n\tthe debug level is terse and the declaration is public. Do not\n\tgenerate type info.\n\t(dwarf2out_decl): Same.\n\t(add_type_attribute): Return immediately if debug level is\n\tterse.\n\nSigned-off-by: Alexey Neyman <stilor@att.net>", "tree": {"sha": "89df55ea35d3950dc8448d4e8edf2e31814854ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89df55ea35d3950dc8448d4e8edf2e31814854ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52b3aa8be18938486065f5f2a23553b134a10a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b3aa8be18938486065f5f2a23553b134a10a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b3aa8be18938486065f5f2a23553b134a10a81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b3aa8be18938486065f5f2a23553b134a10a81/comments", "author": {"login": "stilor", "id": 14894475, "node_id": "MDQ6VXNlcjE0ODk0NDc1", "avatar_url": "https://avatars.githubusercontent.com/u/14894475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stilor", "html_url": "https://github.com/stilor", "followers_url": "https://api.github.com/users/stilor/followers", "following_url": "https://api.github.com/users/stilor/following{/other_user}", "gists_url": "https://api.github.com/users/stilor/gists{/gist_id}", "starred_url": "https://api.github.com/users/stilor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stilor/subscriptions", "organizations_url": "https://api.github.com/users/stilor/orgs", "repos_url": "https://api.github.com/users/stilor/repos", "events_url": "https://api.github.com/users/stilor/events{/privacy}", "received_events_url": "https://api.github.com/users/stilor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80616e5b7a5caf6f41210c9451a32de2fd64528e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80616e5b7a5caf6f41210c9451a32de2fd64528e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80616e5b7a5caf6f41210c9451a32de2fd64528e"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "e1c4da2b7efddff6da8f7a7746b62086d0aeedd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52b3aa8be18938486065f5f2a23553b134a10a81", "patch": "@@ -1,3 +1,13 @@\n+2020-03-17  Alexey Neyman  <stilor@att.net>\n+\n+\tPR debug/93751\n+\t* dwarf2out.c (gen_decl_die): Proceed to generating the DIE if\n+\tthe debug level is terse and the declaration is public. Do not\n+\tgenerate type info.\n+\t(dwarf2out_decl): Same.\n+\t(add_type_attribute): Return immediately if debug level is\n+\tterse.\n+\n 2020-03-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (Vmtype): Handle V4BF and V8BF."}, {"sha": "b1fa6f5ff7c1b4df422f74620b73cc7a178d2fa5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=52b3aa8be18938486065f5f2a23553b134a10a81", "patch": "@@ -21563,6 +21563,9 @@ add_type_attribute (dw_die_ref object_die, tree type, int cv_quals,\n   enum tree_code code  = TREE_CODE (type);\n   dw_die_ref type_die  = NULL;\n \n+  if (debug_info_level <= DINFO_LEVEL_TERSE)\n+    return;\n+\n   /* ??? If this type is an unnamed subrange type of an integral, floating-point\n      or fixed-point type, use the inner type.  This is because we have no\n      support for unnamed types in base_type_die.  This can happen if this is\n@@ -26355,39 +26358,44 @@ gen_decl_die (tree decl, tree origin, struct vlr_context *ctx,\n     case VAR_DECL:\n     case RESULT_DECL:\n       /* If we are in terse mode, don't generate any DIEs to represent any\n-\t variable declarations or definitions.  */\n-      if (debug_info_level <= DINFO_LEVEL_TERSE)\n+\t variable declarations or definitions unless it is external.  */\n+      if (debug_info_level < DINFO_LEVEL_TERSE\n+\t  || (debug_info_level == DINFO_LEVEL_TERSE\n+\t      && !TREE_PUBLIC (decl_or_origin)))\n \tbreak;\n \n-      /* Avoid generating stray type DIEs during late dwarf dumping.\n-         All types have been dumped early.  */\n-      if (early_dwarf\n-\t  /* ???  But in LTRANS we cannot annotate early created variably\n-\t     modified type DIEs without copying them and adjusting all\n-\t     references to them.  Dump them again as happens for inlining\n-\t     which copies both the decl and the types.  */\n-\t  /* ???  And even non-LTO needs to re-visit type DIEs to fill\n-\t     in VLA bound information for example.  */\n-\t  || (decl && variably_modified_type_p (TREE_TYPE (decl),\n-\t\t\t\t\t\tcurrent_function_decl)))\n+      if (debug_info_level > DINFO_LEVEL_TERSE)\n \t{\n-\t  /* Output any DIEs that are needed to specify the type of this data\n-\t     object.  */\n-\t  if (decl_by_reference_p (decl_or_origin))\n-\t    gen_type_die (TREE_TYPE (TREE_TYPE (decl_or_origin)), context_die);\n-\t  else\n-\t    gen_type_die (TREE_TYPE (decl_or_origin), context_die);\n-\t}\n+\t  /* Avoid generating stray type DIEs during late dwarf dumping.\n+\t     All types have been dumped early.  */\n+\t  if (early_dwarf\n+\t      /* ???  But in LTRANS we cannot annotate early created variably\n+\t\t modified type DIEs without copying them and adjusting all\n+\t\t references to them.  Dump them again as happens for inlining\n+\t\t which copies both the decl and the types.  */\n+\t      /* ???  And even non-LTO needs to re-visit type DIEs to fill\n+\t\t in VLA bound information for example.  */\n+\t      || (decl && variably_modified_type_p (TREE_TYPE (decl),\n+\t\t\t\t\t\t    current_function_decl)))\n+\t    {\n+\t      /* Output any DIEs that are needed to specify the type of this data\n+\t\t object.  */\n+\t      if (decl_by_reference_p (decl_or_origin))\n+\t\tgen_type_die (TREE_TYPE (TREE_TYPE (decl_or_origin)), context_die);\n+\t      else\n+\t\tgen_type_die (TREE_TYPE (decl_or_origin), context_die);\n+\t    }\n \n-      if (early_dwarf)\n-\t{\n-\t  /* And its containing type.  */\n-\t  class_origin = decl_class_context (decl_or_origin);\n-\t  if (class_origin != NULL_TREE)\n-\t    gen_type_die_for_member (class_origin, decl_or_origin, context_die);\n+\t  if (early_dwarf)\n+\t    {\n+\t      /* And its containing type.  */\n+\t      class_origin = decl_class_context (decl_or_origin);\n+\t      if (class_origin != NULL_TREE)\n+\t\tgen_type_die_for_member (class_origin, decl_or_origin, context_die);\n \n-\t  /* And its containing namespace.  */\n-\t  context_die = declare_in_namespace (decl_or_origin, context_die);\n+\t      /* And its containing namespace.  */\n+\t      context_die = declare_in_namespace (decl_or_origin, context_die);\n+\t    }\n \t}\n \n       /* Now output the DIE to represent the data object itself.  This gets\n@@ -26832,8 +26840,10 @@ dwarf2out_decl (tree decl)\n \tcontext_die = lookup_decl_die (DECL_CONTEXT (decl));\n \n       /* If we are in terse mode, don't generate any DIEs to represent any\n-\t variable declarations or definitions.  */\n-      if (debug_info_level <= DINFO_LEVEL_TERSE)\n+\t variable declarations or definitions unless it is external.  */\n+      if (debug_info_level < DINFO_LEVEL_TERSE\n+\t  || (debug_info_level == DINFO_LEVEL_TERSE\n+\t      && !TREE_PUBLIC (decl)))\n \treturn;\n       break;\n "}, {"sha": "4be170c57d68d11ce58683b8dc12e7eefabfa01c", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr93751-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr93751-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr93751-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr93751-1.c?ref=52b3aa8be18938486065f5f2a23553b134a10a81", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -gdwarf-2 -g1 -dA\" }\n+static int bar;\n+\n+// Verify that with -g1 we still do not generate DIEs for static variables.\n+// { dg-final { scan-assembler-not \" DW_TAG_variable\" } }"}, {"sha": "3ee369bd99e8d893a4b01f4cdf840a59f8eb17eb", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr93751-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr93751-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b3aa8be18938486065f5f2a23553b134a10a81/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr93751-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr93751-2.c?ref=52b3aa8be18938486065f5f2a23553b134a10a81", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -gdwarf-2 -g1 -dA\" }\n+int foo;\n+\n+// Verify that with -g1 we generate DIEs for external variables.\n+// { dg-final { scan-assembler \" DW_TAG_variable\" } }"}]}