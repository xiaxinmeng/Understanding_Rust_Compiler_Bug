{"sha": "d024732666bb406ca995f2a8c82f6168aa277f44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyNDczMjY2NmJiNDA2Y2E5OTVmMmE4YzgyZjYxNjhhYTI3N2Y0NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-27T03:44:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-27T03:44:08Z"}, "message": "resource.c (find_basic_block): Delete.\n\n        * resource.c (find_basic_block): Delete.\n        (mark_target_live_regs, incr_ticks_for_insn): Use BLOCK_NUM instead.\n        (init_resource_info): Call compute_bb_for_insn.\n\nFrom-SVN: r30206", "tree": {"sha": "5badaec2c1fade0aff0d6e96886487c1836927df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5badaec2c1fade0aff0d6e96886487c1836927df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d024732666bb406ca995f2a8c82f6168aa277f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d024732666bb406ca995f2a8c82f6168aa277f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d024732666bb406ca995f2a8c82f6168aa277f44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d024732666bb406ca995f2a8c82f6168aa277f44/comments", "author": null, "committer": null, "parents": [{"sha": "3965abd03025899e9400fd17357b9c1dc422244f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3965abd03025899e9400fd17357b9c1dc422244f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3965abd03025899e9400fd17357b9c1dc422244f"}], "stats": {"total": 47, "additions": 10, "deletions": 37}, "files": [{"sha": "3de34cbd3f7e0767f000f5f00e6ad5e8ed83f565", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d024732666bb406ca995f2a8c82f6168aa277f44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d024732666bb406ca995f2a8c82f6168aa277f44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d024732666bb406ca995f2a8c82f6168aa277f44", "patch": "@@ -1,3 +1,9 @@\n+Tue Oct 26 20:42:45 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* resource.c (find_basic_block): Delete.\n+\t(mark_target_live_regs, incr_ticks_for_insn): Use BLOCK_NUM instead.\n+\t(init_resource_info): Call compute_bb_for_insn.\n+\n Tue Oct 26 20:21:02 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (merge_blocks_move_predecessor_nojumps): Cope"}, {"sha": "9645e4d6aaa3de612e5fad8852f31b6285b06519", "filename": "gcc/resource.c", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d024732666bb406ca995f2a8c82f6168aa277f44/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d024732666bb406ca995f2a8c82f6168aa277f44/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=d024732666bb406ca995f2a8c82f6168aa277f44", "patch": "@@ -74,7 +74,6 @@ static HARD_REG_SET current_live_regs;\n static HARD_REG_SET pending_dead_regs;\n \f\n static void update_live_status\t\tPROTO ((rtx, rtx));\n-static int find_basic_block\t\tPROTO ((rtx));\n static rtx next_insn_no_annul\t\tPROTO ((rtx));\n static rtx find_dead_or_set_registers\tPROTO ((rtx, struct resources*,\n \t\t\t\t\t\trtx*, int, struct resources,\n@@ -112,40 +111,6 @@ update_live_status (dest, x)\n \tCLEAR_HARD_REG_BIT (pending_dead_regs, i);\n       }\n }\n-/* Find the number of the basic block that starts closest to INSN.  Return -1\n-   if we couldn't find such a basic block.  */\n-\n-static int\n-find_basic_block (insn)\n-     rtx insn;\n-{\n-  int i;\n-\n-  /* Scan backwards to the previous BARRIER.  Then see if we can find a\n-     label that starts a basic block.  Return the basic block number.  */\n-\n-  for (insn = prev_nonnote_insn (insn);\n-       insn && GET_CODE (insn) != BARRIER;\n-       insn = prev_nonnote_insn (insn))\n-    ;\n-\n-  /* The start of the function is basic block zero.  */\n-  if (insn == 0)\n-    return 0;\n-\n-  /* See if any of the upcoming CODE_LABELs start a basic block.  If we reach\n-     anything other than a CODE_LABEL or note, we can't find this code.  */\n-  for (insn = next_nonnote_insn (insn);\n-       insn && GET_CODE (insn) == CODE_LABEL;\n-       insn = next_nonnote_insn (insn))\n-    {\n-      for (i = 0; i < n_basic_blocks; i++)\n-\tif (insn == BLOCK_HEAD (i))\n-\t  return i;\n-    }\n-\n-  return -1;\n-}\n \f\n /* Similar to next_insn, but ignores insns in the delay slots of\n    an annulled branch.  */\n@@ -867,7 +832,7 @@ mark_target_live_regs (insns, target, res)\n     }\n \n   if (b == -1)\n-    b = find_basic_block (target);\n+    b = BLOCK_NUM (target);\n \n   if (target_hash_table != NULL)\n     {\n@@ -1171,6 +1136,8 @@ init_resource_info (epilogue_insn)\n   target_hash_table = (struct target_info **)\n     xcalloc (TARGET_HASH_PRIME, sizeof (struct target_info *));\n   bb_ticks = (int *) xcalloc (n_basic_blocks, sizeof (int));\n+\n+  compute_bb_for_insn (get_max_uid ());\n }\n \f\n /* Free up the resources allcated to mark_target_live_regs ().  This\n@@ -1218,7 +1185,7 @@ void\n incr_ticks_for_insn (insn)\n      rtx insn;\n {\n-  int b = find_basic_block (insn);\n+  int b = BLOCK_NUM (insn);\n \n   if (b != -1)\n     bb_ticks[b]++;"}]}