{"sha": "1937f93932b3249756fbeda05a0b0c67aaed0405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzN2Y5MzkzMmIzMjQ5NzU2ZmJlZGEwNWEwYjBjNjdhYWVkMDQwNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2006-07-06T02:09:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-07-06T02:09:02Z"}, "message": "re PR c++/13983 (no warning on some non-POD struct with packed attribute)\n\n        PR c++/13983\n        PR c++/17519\n        * stor-layout.c (finish_record_layout): Copy TYPE_PACKED to variants.\n        * c-common.c (handle_packed_attribute): So don't copy it here.\n        * c-decl.c (finish_struct): Don't copy TYPE_ALIGN.\n        * cp/class.c (check_field_decls): Check TYPE_PACKED after\n        stripping array types.\n        (finish_struct_bits): Don't copy TYPE_SIZE here.\n\nFrom-SVN: r115217", "tree": {"sha": "e5a04b6dd5dab15766d0b02b4b48425818534909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5a04b6dd5dab15766d0b02b4b48425818534909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1937f93932b3249756fbeda05a0b0c67aaed0405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1937f93932b3249756fbeda05a0b0c67aaed0405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1937f93932b3249756fbeda05a0b0c67aaed0405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1937f93932b3249756fbeda05a0b0c67aaed0405/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "562349cab017b2abc827517378ac50a1f4a1f438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562349cab017b2abc827517378ac50a1f4a1f438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562349cab017b2abc827517378ac50a1f4a1f438"}], "stats": {"total": 116, "additions": 64, "deletions": 52}, "files": [{"sha": "fc4194d18e2126f922f32e1230d616284dfff08d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1937f93932b3249756fbeda05a0b0c67aaed0405", "patch": "@@ -1,3 +1,11 @@\n+2006-07-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/13983\n+\tPR c++/17519\n+\t* stor-layout.c (finish_record_layout): Copy TYPE_PACKED to variants.\n+\t* c-common.c (handle_packed_attribute): So don't copy it here.\n+\t* c-decl.c (finish_struct): Don't copy TYPE_ALIGN.\n+\n 2006-07-05  Mike Stump  <mrs@apple.com>\n \n \t* doc/invoke.texi (Invoking G++): Clarify prose for g++."}, {"sha": "61bf12bbb59df8feedf64cc73445bd7adeb3e314", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1937f93932b3249756fbeda05a0b0c67aaed0405", "patch": "@@ -4082,20 +4082,6 @@ handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n       if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n \t*node = build_variant_type_copy (*node);\n       TYPE_PACKED (*node) = 1;\n-      if (TYPE_MAIN_VARIANT (*node) == *node)\n-\t{\n-\t  /* If it is the main variant, then pack the other variants\n-\t     too. This happens in,\n-\n-\t     struct Foo {\n-\t       struct Foo const *ptr; // creates a variant w/o packed flag\n-\t     } __ attribute__((packed)); // packs it now.\n-\t   */\n-\t  tree probe;\n-\n-\t  for (probe = *node; probe; probe = TYPE_NEXT_VARIANT (probe))\n-\t    TYPE_PACKED (probe) = 1;\n-\t}\n     }\n   else if (TREE_CODE (*node) == FIELD_DECL)\n     {"}, {"sha": "6ad6a695d08964e071d5c3d35a26061dc235b6da", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1937f93932b3249756fbeda05a0b0c67aaed0405", "patch": "@@ -5574,8 +5574,6 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n     {\n       TYPE_FIELDS (x) = TYPE_FIELDS (t);\n       TYPE_LANG_SPECIFIC (x) = TYPE_LANG_SPECIFIC (t);\n-      TYPE_ALIGN (x) = TYPE_ALIGN (t);\n-      TYPE_USER_ALIGN (x) = TYPE_USER_ALIGN (t);\n       C_TYPE_FIELDS_READONLY (x) = C_TYPE_FIELDS_READONLY (t);\n       C_TYPE_FIELDS_VOLATILE (x) = C_TYPE_FIELDS_VOLATILE (t);\n       C_TYPE_VARIABLE_SIZE (x) = C_TYPE_VARIABLE_SIZE (t);"}, {"sha": "3d3952cb681bd088b51cc7f41c9db2d20f418352", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1937f93932b3249756fbeda05a0b0c67aaed0405", "patch": "@@ -1,5 +1,11 @@\n 2006-07-05  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/13983\n+\tPR c++/17519\n+\t* class.c (check_field_decls): Check TYPE_PACKED after\n+\tstripping array types.\n+\t(finish_struct_bits): Don't copy TYPE_SIZE here.\n+\n \tPR c++/18681\n \t* friend.c (is_friend): Fix DR 45 implementation.\n "}, {"sha": "06f8cbceb53330d94a0fdbaf71b890bf500d1eee", "filename": "gcc/cp/class.c", "status": "modified", "additions": 28, "deletions": 36, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1937f93932b3249756fbeda05a0b0c67aaed0405", "patch": "@@ -1433,8 +1433,6 @@ finish_struct_bits (tree t)\n       TYPE_VFIELD (variants) = TYPE_VFIELD (t);\n       TYPE_METHODS (variants) = TYPE_METHODS (t);\n       TYPE_FIELDS (variants) = TYPE_FIELDS (t);\n-      TYPE_SIZE (variants) = TYPE_SIZE (t);\n-      TYPE_SIZE_UNIT (variants) = TYPE_SIZE_UNIT (t);\n     }\n \n   if (BINFO_N_BASE_BINFOS (TYPE_BINFO (t)) && TYPE_POLYMORPHIC_P (t))\n@@ -2815,40 +2813,6 @@ check_field_decls (tree t, tree *access_decls,\n \n       next = &TREE_CHAIN (x);\n \n-      if (TREE_CODE (x) == FIELD_DECL)\n-\t{\n-\t  if (TYPE_PACKED (t))\n-\t    {\n-\t      if (!pod_type_p (TREE_TYPE (x)) && !TYPE_PACKED (TREE_TYPE (x)))\n-\t\twarning\n-\t\t  (0,\n-\t\t   \"ignoring packed attribute on unpacked non-POD field %q+#D\",\n-\t\t   x);\n-\t      else if (TYPE_ALIGN (TREE_TYPE (x)) > BITS_PER_UNIT)\n-\t\tDECL_PACKED (x) = 1;\n-\t    }\n-\n-\t  if (DECL_C_BIT_FIELD (x) && integer_zerop (DECL_INITIAL (x)))\n-\t    /* We don't treat zero-width bitfields as making a class\n-\t       non-empty.  */\n-\t    ;\n-\t  else\n-\t    {\n-\t      tree element_type;\n-\n-\t      /* The class is non-empty.  */\n-\t      CLASSTYPE_EMPTY_P (t) = 0;\n-\t      /* The class is not even nearly empty.  */\n-\t      CLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n-\t      /* If one of the data members contains an empty class,\n-\t\t so does T.  */\n-\t      element_type = strip_array_types (type);\n-\t      if (CLASS_TYPE_P (element_type)\n-\t\t  && CLASSTYPE_CONTAINS_EMPTY_CLASS_P (element_type))\n-\t\tCLASSTYPE_CONTAINS_EMPTY_CLASS_P (t) = 1;\n-\t    }\n-\t}\n-\n       if (TREE_CODE (x) == USING_DECL)\n \t{\n \t  /* Prune the access declaration from the list of fields.  */\n@@ -2945,6 +2909,34 @@ check_field_decls (tree t, tree *access_decls,\n \n       type = strip_array_types (type);\n \n+      if (TYPE_PACKED (t))\n+\t{\n+\t  if (!pod_type_p (type) && !TYPE_PACKED (type))\n+\t    warning\n+\t      (0,\n+\t       \"ignoring packed attribute on unpacked non-POD field %q+#D\",\n+\t       x);\n+\t  else if (TYPE_ALIGN (TREE_TYPE (x)) > BITS_PER_UNIT)\n+\t    DECL_PACKED (x) = 1;\n+\t}\n+\n+      if (DECL_C_BIT_FIELD (x) && integer_zerop (DECL_INITIAL (x)))\n+\t/* We don't treat zero-width bitfields as making a class\n+\t   non-empty.  */\n+\t;\n+      else\n+\t{\n+\t  /* The class is non-empty.  */\n+\t  CLASSTYPE_EMPTY_P (t) = 0;\n+\t  /* The class is not even nearly empty.  */\n+\t  CLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n+\t  /* If one of the data members contains an empty class,\n+\t     so does T.  */\n+\t  if (CLASS_TYPE_P (type)\n+\t      && CLASSTYPE_CONTAINS_EMPTY_CLASS_P (type))\n+\t    CLASSTYPE_CONTAINS_EMPTY_CLASS_P (t) = 1;\n+\t}\n+\n       /* This is used by -Weffc++ (see below). Warn only for pointers\n \t to members which might hold dynamic memory. So do not warn\n \t for pointers to functions or pointers to members.  */"}, {"sha": "76aa4ac73bbf024aee4ed8aa1c3d00a65023a4c3", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=1937f93932b3249756fbeda05a0b0c67aaed0405", "patch": "@@ -1465,6 +1465,8 @@ finalize_type_size (tree type)\n void\n finish_record_layout (record_layout_info rli, int free_p)\n {\n+  tree variant;\n+\n   /* Compute the final size.  */\n   finalize_record_size (rli);\n \n@@ -1474,6 +1476,12 @@ finish_record_layout (record_layout_info rli, int free_p)\n   /* Perform any last tweaks to the TYPE_SIZE, etc.  */\n   finalize_type_size (rli->t);\n \n+  /* Propagate TYPE_PACKED to variants.  With C++ templates,\n+     handle_packed_attribute is too early to do this.  */\n+  for (variant = TYPE_NEXT_VARIANT (rli->t); variant;\n+       variant = TYPE_NEXT_VARIANT (variant))\n+    TYPE_PACKED (variant) = TYPE_PACKED (rli->t);\n+\n   /* Lay out any static members.  This is done now because their type\n      may use the record's type.  */\n   while (rli->pending_statics)"}, {"sha": "c4bbb1462d99e42555a1025aec417eb101ac1e61", "filename": "gcc/testsuite/g++.dg/ext/packed10.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1937f93932b3249756fbeda05a0b0c67aaed0405/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked10.C?ref=1937f93932b3249756fbeda05a0b0c67aaed0405", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/13983, c++/17519\n+// The typedef and the array were causing us to miss that A<int> is\n+// a packed type.\n+\n+template <class T>\n+struct A {\n+  A();\n+} __attribute__((packed));\n+\n+typedef A<int> Ai;\n+\n+struct B {\n+  Ai a[2];\n+} __attribute__((packed));"}]}