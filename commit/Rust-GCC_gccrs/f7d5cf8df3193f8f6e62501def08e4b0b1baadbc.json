{"sha": "f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkNWNmOGRmMzE5M2Y4ZjZlNjI1MDFkZWYwOGU0YjBiMWJhYWRiYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-04-23T15:26:28Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-04-23T15:26:28Z"}, "message": "[AArch64][2/3] Recognise rev16 operations on SImode and DImode data\n\n       * config/aarch64/aarch64.md (rev16<mode>2): New pattern.\n       (rev16<mode>2_alt): Likewise.\n       * config/aarch64/aarch64.c (aarch64_rtx_costs): Handle rev16 case.\n       * config/arm/aarch-common.c (aarch_rev16_shright_mask_imm_p): New.\n       (aarch_rev16_shleft_mask_imm_p): Likewise.\n       (aarch_rev16_p_1): Likewise.\n       (aarch_rev16_p): Likewise.\n       * config/arm/aarch-common-protos.h (aarch_rev16_p): Declare extern.\n       (aarch_rev16_shright_mask_imm_p): Likewise.\n       (aarch_rev16_shleft_mask_imm_p): Likewise.\n\n       * gcc.target/aarch64/rev16_1.c: New test.\n\nFrom-SVN: r209704", "tree": {"sha": "2510b3a45cf0d83f6649c31498711958ba864a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2510b3a45cf0d83f6649c31498711958ba864a74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac05ae59008ccdd479eca70e6c0c6742fad5b0e"}], "stats": {"total": 194, "additions": 194, "deletions": 0}, "files": [{"sha": "1b8dd62b670c19521ed141bcc98ad4ab470cf56a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "patch": "@@ -1,3 +1,16 @@\n+2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+       * config/aarch64/aarch64.md (rev16<mode>2): New pattern.\n+       (rev16<mode>2_alt): Likewise.\n+       * config/aarch64/aarch64.c (aarch64_rtx_costs): Handle rev16 case.\n+       * config/arm/aarch-common.c (aarch_rev16_shright_mask_imm_p): New.\n+       (aarch_rev16_shleft_mask_imm_p): Likewise.\n+       (aarch_rev16_p_1): Likewise.\n+       (aarch_rev16_p): Likewise.\n+       * config/arm/aarch-common-protos.h (aarch_rev16_p): Declare extern.\n+       (aarch_rev16_shright_mask_imm_p): Likewise.\n+       (aarch_rev16_shleft_mask_imm_p): Likewise.\n+\n 2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n        * config/arm/aarch-common-protos.h (alu_cost_table): Add rev field."}, {"sha": "68c29aa0da7bd507176066fb4842ec6730b4775d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "patch": "@@ -4695,6 +4695,16 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n       return false;\n \n     case IOR:\n+      if (aarch_rev16_p (x))\n+        {\n+          *cost = COSTS_N_INSNS (1);\n+\n+          if (speed)\n+            *cost += extra_cost->alu.rev;\n+\n+          return true;\n+        }\n+    /* Fall through.  */\n     case XOR:\n     case AND:\n     cost_logic:"}, {"sha": "98c46d13bf422b31f5f868e5b4ba9a1c972a8510", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "patch": "@@ -3253,6 +3253,38 @@\n   [(set_attr \"type\" \"rev\")]\n )\n \n+;; There are no canonicalisation rules for the position of the lshiftrt, ashift\n+;; operations within an IOR/AND RTX, therefore we have two patterns matching\n+;; each valid permutation.\n+\n+(define_insn \"rev16<mode>2\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+        (ior:GPI (and:GPI (ashift:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+                                      (const_int 8))\n+                          (match_operand:GPI 3 \"const_int_operand\" \"n\"))\n+                 (and:GPI (lshiftrt:GPI (match_dup 1)\n+                                        (const_int 8))\n+                          (match_operand:GPI 2 \"const_int_operand\" \"n\"))))]\n+  \"aarch_rev16_shleft_mask_imm_p (operands[3], <MODE>mode)\n+   && aarch_rev16_shright_mask_imm_p (operands[2], <MODE>mode)\"\n+  \"rev16\\\\t%<w>0, %<w>1\"\n+  [(set_attr \"type\" \"rev\")]\n+)\n+\n+(define_insn \"rev16<mode>2_alt\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+        (ior:GPI (and:GPI (lshiftrt:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+                                        (const_int 8))\n+                          (match_operand:GPI 2 \"const_int_operand\" \"n\"))\n+                 (and:GPI (ashift:GPI (match_dup 1)\n+                                      (const_int 8))\n+                          (match_operand:GPI 3 \"const_int_operand\" \"n\"))))]\n+  \"aarch_rev16_shleft_mask_imm_p (operands[3], <MODE>mode)\n+   && aarch_rev16_shright_mask_imm_p (operands[2], <MODE>mode)\"\n+  \"rev16\\\\t%<w>0, %<w>1\"\n+  [(set_attr \"type\" \"rev\")]\n+)\n+\n ;; zero_extend version of above\n (define_insn \"*bswapsi2_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "1b60d78925564efa46c6bb58ed1c363b2157fbba", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "patch": "@@ -24,6 +24,9 @@\n #define GCC_AARCH_COMMON_PROTOS_H\n \n extern int aarch_crypto_can_dual_issue (rtx, rtx);\n+extern bool aarch_rev16_p (rtx);\n+extern bool aarch_rev16_shleft_mask_imm_p (rtx, enum machine_mode);\n+extern bool aarch_rev16_shright_mask_imm_p (rtx, enum machine_mode);\n extern int arm_early_load_addr_dep (rtx, rtx);\n extern int arm_early_store_addr_dep (rtx, rtx);\n extern int arm_mac_accumulator_is_mul_result (rtx, rtx);"}, {"sha": "884d4b37fac91c9cf592ac60e41c68ab9b230e91", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "patch": "@@ -191,6 +191,79 @@ arm_get_set_operands (rtx producer, rtx consumer,\n   return 0;\n }\n \n+bool\n+aarch_rev16_shright_mask_imm_p (rtx val, enum machine_mode mode)\n+{\n+  return CONST_INT_P (val)\n+         && INTVAL (val) == trunc_int_for_mode (0xff00ff00ff00ff, mode);\n+}\n+\n+bool\n+aarch_rev16_shleft_mask_imm_p (rtx val, enum machine_mode mode)\n+{\n+  return CONST_INT_P (val)\n+         && INTVAL (val) == trunc_int_for_mode (0xff00ff00ff00ff00, mode);\n+}\n+\n+\n+static bool\n+aarch_rev16_p_1 (rtx lhs, rtx rhs, enum machine_mode mode)\n+{\n+  if (GET_CODE (lhs) == AND\n+         && GET_CODE (XEXP (lhs, 0)) == ASHIFT\n+            && CONST_INT_P (XEXP (XEXP (lhs, 0), 1))\n+            && INTVAL (XEXP (XEXP (lhs, 0), 1)) == 8\n+            && REG_P (XEXP (XEXP (lhs, 0), 0))\n+         && CONST_INT_P (XEXP (lhs, 1))\n+      && GET_CODE (rhs) == AND\n+         && GET_CODE (XEXP (rhs, 0)) == LSHIFTRT\n+            && REG_P (XEXP (XEXP (rhs, 0), 0))\n+            && CONST_INT_P (XEXP (XEXP (rhs, 0), 1))\n+            && INTVAL (XEXP (XEXP (rhs, 0), 1)) == 8\n+         && CONST_INT_P (XEXP (rhs, 1))\n+      && REGNO (XEXP (XEXP (rhs, 0), 0)) == REGNO (XEXP (XEXP (lhs, 0), 0)))\n+\n+    {\n+      rtx lhs_mask = XEXP (lhs, 1);\n+      rtx rhs_mask = XEXP (rhs, 1);\n+\n+      return aarch_rev16_shright_mask_imm_p (rhs_mask, mode)\n+             && aarch_rev16_shleft_mask_imm_p (lhs_mask, mode);\n+    }\n+\n+  return false;\n+}\n+\n+/* Recognise a sequence of bitwise operations corresponding to a rev16 operation.\n+   These will be of the form:\n+     ((x >> 8) & 0x00ff00ff)\n+   | ((x << 8) & 0xff00ff00)\n+   for SImode and with similar but wider bitmasks for DImode.\n+   The two sub-expressions of the IOR can appear on either side so check both\n+   permutations with the help of aarch_rev16_p_1 above.  */\n+\n+bool\n+aarch_rev16_p (rtx x)\n+{\n+  rtx left_sub_rtx, right_sub_rtx;\n+  bool is_rev = false;\n+\n+  if (GET_CODE (x) != IOR)\n+    return false;\n+\n+  left_sub_rtx = XEXP (x, 0);\n+  right_sub_rtx = XEXP (x, 1);\n+\n+  /* There are no canonicalisation rules for the position of the two shifts\n+     involved in a rev, so try both permutations.  */\n+  is_rev = aarch_rev16_p_1 (left_sub_rtx, right_sub_rtx, GET_MODE (x));\n+\n+  if (!is_rev)\n+    is_rev = aarch_rev16_p_1 (right_sub_rtx, left_sub_rtx, GET_MODE (x));\n+\n+  return is_rev;\n+}\n+\n /* Return nonzero if the CONSUMER instruction (a load) does need\n    PRODUCER's value to calculate the address.  */\n int"}, {"sha": "9f1e7ce966cd6204b3589f268741adb96a1521c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "patch": "@@ -1,3 +1,7 @@\n+2014-04-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+       * gcc.target/aarch64/rev16_1.c: New test.\n+\n 2014-04-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60903"}, {"sha": "126d3c017714f2de0c4070c658636ed244363598", "filename": "gcc/testsuite/gcc.target/aarch64/rev16_1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Frev16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d5cf8df3193f8f6e62501def08e4b0b1baadbc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Frev16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Frev16_1.c?ref=f7d5cf8df3193f8f6e62501def08e4b0b1baadbc", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-options \"-O2\" } */\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+typedef unsigned int __u32;\n+\n+__u32\n+__rev16_32_alt (__u32 x)\n+{\n+  return (((__u32)(x) & (__u32)0xff00ff00UL) >> 8)\n+         | (((__u32)(x) & (__u32)0x00ff00ffUL) << 8);\n+}\n+\n+__u32\n+__rev16_32 (__u32 x)\n+{\n+  return (((__u32)(x) & (__u32)0x00ff00ffUL) << 8)\n+         | (((__u32)(x) & (__u32)0xff00ff00UL) >> 8);\n+}\n+\n+typedef unsigned long long __u64;\n+\n+__u64\n+__rev16_64_alt (__u64 x)\n+{\n+  return (((__u64)(x) & (__u64)0xff00ff00ff00ff00UL) >> 8)\n+         | (((__u64)(x) & (__u64)0x00ff00ff00ff00ffUL) << 8);\n+}\n+\n+__u64\n+__rev16_64 (__u64 x)\n+{\n+  return (((__u64)(x) & (__u64)0x00ff00ff00ff00ffUL) << 8)\n+         | (((__u64)(x) & (__u64)0xff00ff00ff00ff00UL) >> 8);\n+}\n+\n+int\n+main (void)\n+{\n+  volatile __u32 in32 = 0x12345678;\n+  volatile __u32 expected32 = 0x34127856;\n+  volatile __u64 in64 = 0x1234567890abcdefUL;\n+  volatile __u64 expected64 = 0x34127856ab90efcdUL;\n+\n+  if (__rev16_32 (in32) != expected32)\n+    abort ();\n+\n+  if (__rev16_32_alt (in32) != expected32)\n+    abort ();\n+\n+  if (__rev16_64 (in64) != expected64)\n+    abort ();\n+\n+  if (__rev16_64_alt (in64) != expected64)\n+    abort ();\n+\n+  return 0;\n+}"}]}