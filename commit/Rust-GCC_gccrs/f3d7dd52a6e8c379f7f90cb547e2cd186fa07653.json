{"sha": "f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkN2RkNTJhNmU4YzM3OWY3ZjkwY2I1NDdlMmNkMTg2ZmEwNzY1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-12-11T21:45:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-12-11T21:45:51Z"}, "message": "Fix std::invoke support for reference_wrappers\n\n\tPR libstdc++/59768\n\t* include/std/functional (_Unwrap, __invfwd): Define.\n\t(__invoke_impl): Remove reference_wrapper overloads and use __invfwd.\n\t* include/std/type_traits (__result_of_memobj, __result_of_memfun):\n\tAdd partial specializations for const reference_wrappers and simplify.\n\t* testsuite/20_util/bind/ref_neg.cc: Use dg-excess-errors.\n\t* testsuite/20_util/function_objects/invoke/59768.cc: New.\n\nFrom-SVN: r231574", "tree": {"sha": "8333e60d67980807a518e0b427303c908fcb7045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8333e60d67980807a518e0b427303c908fcb7045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49e35a94a6427541e3beb197426d74ee005b43c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49e35a94a6427541e3beb197426d74ee005b43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49e35a94a6427541e3beb197426d74ee005b43c"}], "stats": {"total": 154, "additions": 115, "deletions": 39}, "files": [{"sha": "ae1bbc0fc58d3e972648e7bb8c0a0f7fa271769c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "patch": "@@ -1,3 +1,13 @@\n+2015-12-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59768\n+\t* include/std/functional (_Unwrap, __invfwd): Define.\n+\t(__invoke_impl): Remove reference_wrapper overloads and use __invfwd.\n+\t* include/std/type_traits (__result_of_memobj, __result_of_memfun):\n+\tAdd partial specializations for const reference_wrappers and simplify.\n+\t* testsuite/20_util/bind/ref_neg.cc: Use dg-excess-errors.\n+\t* testsuite/20_util/function_objects/invoke/59768.cc: New.\n+\n 2015-12-11  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/68139"}, {"sha": "19caa96b08aba369a035885f339f1a9bcdb4ecae", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "patch": "@@ -184,6 +184,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _Weak_result_type_impl<typename remove_cv<_Functor>::type>\n     { };\n \n+  template<typename _Tp, typename _Up = typename decay<_Tp>::type>\n+    struct _Unwrap\n+    {\n+      using type = _Tp&&;\n+\n+      // Equivalent to std::forward<_Tp>\n+      static constexpr _Tp&&\n+      _S_fwd(_Tp& __t) noexcept { return static_cast<_Tp&&>(__t); }\n+    };\n+\n+  template<typename _Tp, typename _Up>\n+    struct _Unwrap<_Tp, reference_wrapper<_Up>>\n+    {\n+      using type = _Up&;\n+\n+      // Get an lvalue-reference from a reference_wrapper.\n+      static _Up&\n+      _S_fwd(const _Tp& __t) noexcept { __t.get(); }\n+    };\n+\n+  // Used by __invoke_impl instead of std::forward<_Tp> so that a\n+  // reference_wrapper is converted to an lvalue-reference.\n+  template<typename _Tp>\n+    typename _Unwrap<_Tp>::type\n+    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept\n+    { return _Unwrap<_Tp>::_S_fwd(__t); }\n+\n   template<typename _Res, typename _Fn, typename... _Args>\n     inline _Res\n     __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)\n@@ -194,15 +221,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Res\n     __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,\n \t\t  _Args&&... __args)\n-    noexcept(noexcept((forward<_Tp>(__t).*__f)(forward<_Args>(__args)...)))\n-    { return (forward<_Tp>(__t).*__f)(forward<_Args>(__args)...); }\n-\n-  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n-    inline _Res\n-    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f,\n-\t\t  reference_wrapper<_Tp> __t, _Args&&... __args)\n-    noexcept(noexcept((__t.get().*__f)(forward<_Args>(__args)...)))\n-    { return (__t.get().*__f)(forward<_Args>(__args)...); }\n+    noexcept(noexcept((__invfwd<_Tp>(__t).*__f)(forward<_Args>(__args)...)))\n+    { return (__invfwd<_Tp>(__t).*__f)(forward<_Args>(__args)...); }\n \n   template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n     inline _Res\n@@ -214,15 +234,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n     inline _Res\n     __invoke_impl(__invoke_memobj_ref, _MemFun&& __f, _Tp&& __t)\n-    noexcept(noexcept(forward<_Tp>(__t).*__f))\n-    { return forward<_Tp>(__t).*__f; }\n-\n-  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n-    inline _Res\n-    __invoke_impl(__invoke_memobj_ref, _MemFun&& __f,\n-\t\t  reference_wrapper<_Tp> __t)\n-    noexcept(noexcept(__t.get().*__f))\n-    { return __t.get().*__f; }\n+    noexcept(noexcept(__invfwd<_Tp>(__t).*__f))\n+    { return __invfwd<_Tp>(__t).*__f; }\n \n   template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n     inline _Res"}, {"sha": "5b4d073add1a2079724c16efa4222785d681a312", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "patch": "@@ -2391,44 +2391,59 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2219.  INVOKE-ing a pointer to member with a reference_wrapper\n   //        as the object expression\n-  template<typename> struct reference_wrapper;\n \n   template<typename _Res, typename _Class, typename _Arg>\n     struct __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>>\n-    : __result_of_memobj<_Res _Class::*, _Arg>\n-    {\n-      typedef typename\n-\t__result_of_memobj_ref<_Res _Class::*, _Arg&>::type type;\n-    };\n+    : __result_of_memobj_ref<_Res _Class::*, _Arg&>\n+    { };\n \n   template<typename _Res, typename _Class, typename _Arg>\n     struct __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>&>\n-    : __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>>\n+    : __result_of_memobj_ref<_Res _Class::*, _Arg&>\n+    { };\n+\n+  template<typename _Res, typename _Class, typename _Arg>\n+    struct __result_of_memobj<_Res _Class::*, const reference_wrapper<_Arg>&>\n+    : __result_of_memobj_ref<_Res _Class::*, _Arg&>\n     { };\n \n   template<typename _Res, typename _Class, typename _Arg>\n     struct __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>&&>\n-    : __result_of_memobj<_Res _Class::*, reference_wrapper<_Arg>>\n+    : __result_of_memobj_ref<_Res _Class::*, _Arg&>\n+    { };\n+\n+  template<typename _Res, typename _Class, typename _Arg>\n+    struct __result_of_memobj<_Res _Class::*, const reference_wrapper<_Arg>&&>\n+    : __result_of_memobj_ref<_Res _Class::*, _Arg&>\n     { };\n \n   template<typename _Res, typename _Class, typename _Arg, typename... _Args>\n     struct __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>, _Args...>\n-    : __result_of_memfun<_Res _Class::*, _Arg&, _Args...>\n-    {\n-      typedef typename\n-\t__result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>::type type;\n-    };\n+    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>\n+    { };\n \n   template<typename _Res, typename _Class, typename _Arg, typename... _Args>\n     struct __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>&,\n \t\t\t      _Args...>\n-    : __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>, _Args...>\n+    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>\n+    { };\n+\n+  template<typename _Res, typename _Class, typename _Arg, typename... _Args>\n+    struct __result_of_memfun<_Res _Class::*, const reference_wrapper<_Arg>&,\n+\t\t\t      _Args...>\n+    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>\n     { };\n \n   template<typename _Res, typename _Class, typename _Arg, typename... _Args>\n     struct __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>&&,\n \t\t\t      _Args...>\n-    : __result_of_memfun<_Res _Class::*, reference_wrapper<_Arg>, _Args...>\n+    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>\n+    { };\n+\n+  template<typename _Res, typename _Class, typename _Arg, typename... _Args>\n+    struct __result_of_memfun<_Res _Class::*, const reference_wrapper<_Arg>&&,\n+\t\t\t      _Args...>\n+    : __result_of_memfun_ref<_Res _Class::*, _Arg&, _Args...>\n     { };\n \n   template<bool, bool, typename _Functor, typename... _ArgTypes>"}, {"sha": "d1edfbf9678ca3b9eb3486966c82b4c28d376a02", "filename": "libstdc++-v3/testsuite/20_util/bind/ref_neg.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc?ref=f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "patch": "@@ -46,14 +46,9 @@ void test02()\n   const int dummy = 0;\n   std::bind(Inc(), _1)(dummy);                  // { dg-error  \"no match\" }\n   std::bind(&Inc::f, Inc(), std::ref(dummy))(); // { dg-error  \"no match\" }\n-  // { dg-error \"no match\" \"\" { target *-*-* } 594 }\n-  // { dg-error \"no type\" \"\" { target *-*-* } 237 }\n }\n \n-// { dg-error \"rvalue|const\" \"\" { target *-*-* } 1024 }\n-// { dg-error \"rvalue|const\" \"\" { target *-*-* } 1038 }\n-// { dg-error \"rvalue|const\" \"\" { target *-*-* } 1052 }\n-// { dg-error \"rvalue|const\" \"\" { target *-*-* } 1066 }\n+// { dg-excess-errors \"reasons for deduction/substitution failures\" }\n \n int main()\n {"}, {"sha": "44f1418e2419db331f19b8b488ffd92ea5608814", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/59768.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F59768.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3d7dd52a6e8c379f7f90cb547e2cd186fa07653/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F59768.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F59768.cc?ref=f3d7dd52a6e8c379f7f90cb547e2cd186fa07653", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile }\n+\n+#include <functional>\n+\n+struct A {\n+  void foo(int n) { }\n+};\n+\n+void\n+test01()\n+{\n+  A a;\n+  auto ref = std::ref(a);\n+  std::invoke(&A::foo, ref, 100);\t\t// lvalue\n+  std::invoke(&A::foo, std::move(ref), 100);\t// rvalue\n+  const auto refc = std::ref(a);\n+  std::invoke(&A::foo, refc, 100);\t\t// const lvalue\n+  std::invoke(&A::foo, std::move(refc), 100);\t// const rvalue\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}