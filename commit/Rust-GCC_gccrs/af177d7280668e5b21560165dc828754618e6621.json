{"sha": "af177d7280668e5b21560165dc828754618e6621", "node_id": "C_kwDOANBUbNoAKGFmMTc3ZDcyODA2NjhlNWIyMTU2MDE2NWRjODI4NzU0NjE4ZTY2MjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-05T12:39:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-06T21:33:29Z"}, "message": "libstdc++: Add nodiscard attribute to mutex try_lock functions\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/std_mutex.h (mutex): Add nodiscard attribute to\n\ttry_lock member function.\n\t* include/bits/unique_lock.h (unique_lock): Likewise for\n\ttry_lock, try_lock_until, try_lock_for member functions, and\n\towns_lock and mutex member functions.\n\t* include/std/mutex (recursive_mutex): Likewise for try_lock\n\tmember function.\n\t(timed_mutex, recursive_timed_mutex, try_lock): Likewise for\n\ttry_lock, try_lock_until, try_lock_for member functions.\n\t(try_lock): Likewise for non-member function.\n\t* include/std/shared_mutex (shared_mutex): Likewise for try_lock\n\tand try_lock_shared member functions.\n\t(shared_timed_mutex): Likewise for try_lock, try_lock_for,\n\ttry_lock_shared, try_lock_shared_for, try_lock_until, and\n\ttry_lock_shared_until member functions.\n\t(shared_lock): Likewise for try_lock, try_lock, try_lock_for,\n\ttry_lock_until, owns_lock, and mutex member functions.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/clock_neg.cc:\n\tCast discarded value expression to void.\n\t* testsuite/30_threads/shared_lock/locking/3.cc: Likewise.\n\t* testsuite/30_threads/shared_lock/locking/4.cc: Likewise.\n\t* testsuite/30_threads/shared_lock/locking/clock_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/clock_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/clock_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/try_lock/4.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/60497.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/clock_neg.cc:\n\tLikewise.", "tree": {"sha": "00902363b9af926eff1d24b8048c8b51ae13b8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00902363b9af926eff1d24b8048c8b51ae13b8da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af177d7280668e5b21560165dc828754618e6621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af177d7280668e5b21560165dc828754618e6621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af177d7280668e5b21560165dc828754618e6621", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af177d7280668e5b21560165dc828754618e6621/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e21e878b2c6cfc7797088a7393a735de75883c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e21e878b2c6cfc7797088a7393a735de75883c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e21e878b2c6cfc7797088a7393a735de75883c"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "68f5fb9ed65bc663cbc7e0155da51dff669ed8c1", "filename": "libstdc++-v3/include/bits/std_mutex.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_mutex.h?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -117,6 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__throw_system_error(__e);\n     }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     try_lock() noexcept\n     {"}, {"sha": "c6402d94e8575f9093bef469ffc1e65e4b3cbd06", "filename": "libstdc++-v3/include/bits/unique_lock.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_lock.h?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -143,6 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock()\n       {\n@@ -158,6 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _Clock, typename _Duration>\n+\t_GLIBCXX_NODISCARD\n \tbool\n \ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n \t{\n@@ -173,6 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Rep, typename _Period>\n+\t_GLIBCXX_NODISCARD\n \tbool\n \ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n \t{\n@@ -215,13 +218,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __ret;\n       }\n \n+      _GLIBCXX_NODISCARD\n       bool\n       owns_lock() const noexcept\n       { return _M_owns; }\n \n       explicit operator bool() const noexcept\n       { return owns_lock(); }\n \n+      _GLIBCXX_NODISCARD\n       mutex_type*\n       mutex() const noexcept\n       { return _M_device; }"}, {"sha": "aca5f91e03c636e5d04e63ff507af34ff1ce2b25", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -124,6 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__throw_system_error(__e);\n     }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     try_lock() noexcept\n     {\n@@ -253,6 +254,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__throw_system_error(__e);\n     }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     try_lock() noexcept\n     {\n@@ -261,11 +263,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     template <class _Rep, class _Period>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       { return _M_try_lock_for(__rtime); }\n \n     template <class _Clock, class _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       { return _M_try_lock_until(__atime); }\n@@ -328,6 +332,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__throw_system_error(__e);\n     }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     try_lock() noexcept\n     {\n@@ -336,11 +341,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     template <class _Rep, class _Period>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       { return _M_try_lock_for(__rtime); }\n \n     template <class _Clock, class _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       { return _M_try_lock_until(__atime); }\n@@ -395,6 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_locked = true;\n     }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     try_lock()\n     {\n@@ -406,6 +414,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     template<typename _Rep, typename _Period>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n@@ -417,6 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     template<typename _Clock, typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n@@ -478,6 +488,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ++_M_count;\n     }\n \n+    _GLIBCXX_NODISCARD\n     bool\n     try_lock()\n     {\n@@ -494,6 +505,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     template<typename _Rep, typename _Period>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n@@ -510,6 +522,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     template<typename _Clock, typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n@@ -616,6 +629,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Sequentially calls try_lock() on each argument.\n    */\n   template<typename _L1, typename _L2, typename... _L3>\n+    _GLIBCXX_NODISCARD\n     inline int\n     try_lock(_L1& __l1, _L2& __l2, _L3&... __l3)\n     {"}, {"sha": "7b70697f1785606ceda444f0a37657c30918011c", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -420,13 +420,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Exclusive ownership\n \n     void lock() { _M_impl.lock(); }\n-    bool try_lock() { return _M_impl.try_lock(); }\n+    [[nodiscard]] bool try_lock() { return _M_impl.try_lock(); }\n     void unlock() { _M_impl.unlock(); }\n \n     // Shared ownership\n \n     void lock_shared() { _M_impl.lock_shared(); }\n-    bool try_lock_shared() { return _M_impl.try_lock_shared(); }\n+    [[nodiscard]] bool try_lock_shared() { return _M_impl.try_lock_shared(); }\n     void unlock_shared() { _M_impl.unlock_shared(); }\n \n #if _GLIBCXX_USE_PTHREAD_RWLOCK_T\n@@ -473,10 +473,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Exclusive ownership\n \n     void lock() { _Base::lock(); }\n-    bool try_lock() { return _Base::try_lock(); }\n+    _GLIBCXX_NODISCARD bool try_lock() { return _Base::try_lock(); }\n     void unlock() { _Base::unlock(); }\n \n     template<typename _Rep, typename _Period>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n@@ -489,10 +490,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Shared ownership\n \n     void lock_shared() { _Base::lock_shared(); }\n+    _GLIBCXX_NODISCARD\n     bool try_lock_shared() { return _Base::try_lock_shared(); }\n     void unlock_shared() { _Base::unlock_shared(); }\n \n     template<typename _Rep, typename _Period>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_shared_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n@@ -507,6 +510,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Exclusive ownership\n \n     template<typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<chrono::system_clock,\n \t\t     _Duration>& __atime)\n@@ -532,6 +536,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK\n     template<typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<chrono::steady_clock,\n \t\t   _Duration>& __atime)\n@@ -558,6 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n     template<typename _Clock, typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n@@ -580,6 +586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Shared ownership\n \n     template<typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_shared_until(const chrono::time_point<chrono::system_clock,\n \t\t\t    _Duration>& __atime)\n@@ -619,6 +626,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK\n     template<typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_shared_until(const chrono::time_point<chrono::steady_clock,\n \t\t\t    _Duration>& __atime)\n@@ -645,6 +653,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n     template<typename _Clock, typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_shared_until(const chrono::time_point<_Clock,\n \t\t\t\t\t\t     _Duration>& __atime)\n@@ -670,6 +679,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Exclusive ownership\n \n     template<typename _Clock, typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __abs_time)\n       {\n@@ -694,6 +704,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // Shared ownership\n \n     template <typename _Clock, typename _Duration>\n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock_shared_until(const chrono::time_point<_Clock,\n \t\t\t\t\t\t     _Duration>& __abs_time)\n@@ -776,6 +787,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_owns = true;\n       }\n \n+      _GLIBCXX_NODISCARD\n       bool\n       try_lock()\n       {\n@@ -784,6 +796,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _Rep, typename _Period>\n+\t_GLIBCXX_NODISCARD\n \tbool\n \ttry_lock_for(const chrono::duration<_Rep, _Period>& __rel_time)\n \t{\n@@ -792,6 +805,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Clock, typename _Duration>\n+\t_GLIBCXX_NODISCARD\n \tbool\n \ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __abs_time)\n \t{\n@@ -826,10 +840,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Getters\n \n+      _GLIBCXX_NODISCARD\n       bool owns_lock() const noexcept { return _M_owns; }\n \n       explicit operator bool() const noexcept { return _M_owns; }\n \n+      _GLIBCXX_NODISCARD\n       mutex_type* mutex() const noexcept { return _M_pm; }\n \n     private:"}, {"sha": "91f2c83be0d5f3fd3d6e4afc6ddc374c1c63695f", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/clock_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -33,7 +33,7 @@ void\n test01()\n {\n   std::recursive_timed_mutex m;\n-  m.try_lock_until(clok::now()); // { dg-error \"here\" }\n+  (void) m.try_lock_until(clok::now()); // { dg-error \"here\" }\n }\n \n struct cloc\n@@ -51,7 +51,7 @@ void\n test02()\n {\n   std::recursive_timed_mutex m;\n-  m.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+  (void) m.try_lock_until(cloc::now()); // { dg-error \"here\" }\n }\n \n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "8ad962baec3e7bc190d1a413e9e004faacf96034", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F3.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -38,7 +38,7 @@ int main()\n \n       try\n \t{\n-\t  l.try_lock_for(std::chrono::milliseconds(100));\n+\t  (void) l.try_lock_for(std::chrono::milliseconds(100));\n \t}\n       catch(const std::system_error&)\n \t{"}, {"sha": "96388a1689ddf14c510e9b18e5e5cf1e83d75994", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2F4.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -40,7 +40,7 @@ int main()\n \n       try\n \t{\n-\t  l.try_lock_until(t);\n+\t  (void) l.try_lock_until(t);\n \t}\n       catch(const std::system_error&)\n \t{"}, {"sha": "d6df66efb175faba5bb8c84ec18f93a0ccede24f", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/clock_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2Fclock_neg.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -34,7 +34,7 @@ test01()\n {\n   std::shared_timed_mutex m;\n   std::shared_lock<std::shared_timed_mutex> l(m, std::defer_lock);\n-  l.try_lock_until(clok::now()); // { dg-error \"here\" }\n+  (void) l.try_lock_until(clok::now()); // { dg-error \"here\" }\n }\n \n struct cloc\n@@ -53,7 +53,7 @@ test02()\n {\n   std::shared_timed_mutex m;\n   std::shared_lock<std::shared_timed_mutex> l(m, std::defer_lock);\n-  l.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+  (void) l.try_lock_until(cloc::now()); // { dg-error \"here\" }\n }\n \n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "f948101a884de251d922face06e074e27468fab3", "filename": "libstdc++-v3/testsuite/30_threads/shared_timed_mutex/try_lock_until/clock_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -33,7 +33,7 @@ void\n test01()\n {\n   std::shared_timed_mutex m;\n-  m.try_lock_until(clok::now()); // { dg-error \"here\" }\n+  (void) m.try_lock_until(clok::now()); // { dg-error \"here\" }\n }\n \n struct cloc\n@@ -51,7 +51,7 @@ void\n test02()\n {\n   std::shared_timed_mutex m;\n-  m.try_lock_shared_until(cloc::now()); // { dg-error \"here\" }\n+  (void) m.try_lock_shared_until(cloc::now()); // { dg-error \"here\" }\n }\n \n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "71c83c514bcef3dd6c61183115bb0b2167a940cc", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/clock_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2Fclock_neg.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -33,7 +33,7 @@ void\n test01()\n {\n   std::timed_mutex m;\n-  m.try_lock_until(clok::now()); // { dg-error \"here\" }\n+  (void) m.try_lock_until(clok::now()); // { dg-error \"here\" }\n }\n \n struct cloc\n@@ -51,7 +51,7 @@ void\n test02()\n {\n   std::timed_mutex m;\n-  m.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+  (void) m.try_lock_until(cloc::now()); // { dg-error \"here\" }\n }\n \n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "96afa55a68d88ca804022168fd9e291fa77c9137", "filename": "libstdc++-v3/testsuite/30_threads/try_lock/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftry_lock%2F4.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -125,7 +125,7 @@ void test03()\n         unreliable_lock::count = 0;\n         try\n           {\n-            std::try_lock(l1, l2, l3);\n+            (void) std::try_lock(l1, l2, l3);\n             VERIFY( false );\n           }\n         catch (int e)"}, {"sha": "a8a8db4318a4fa75801ef891a5ec9449766caa69", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/60497.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F60497.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F60497.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F60497.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -50,5 +50,5 @@ void test02()\n void test03()\n {\n   test_type l1, l2, l3;\n-  std::try_lock(l1, l2, l3);\n+  (void) std::try_lock(l1, l2, l3);\n }"}, {"sha": "ecc5b82f1c160ae8e0e799e39c662c816d980c3f", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -38,7 +38,7 @@ int main()\n \n       try\n \t{\n-\t  l.try_lock_for(std::chrono::milliseconds(100));\n+\t  (void) l.try_lock_for(std::chrono::milliseconds(100));\n \t}\n       catch(const std::system_error&)\n \t{"}, {"sha": "b633e5fcc58320d3a4f77f2ecb35857ddeeae507", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/clock_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af177d7280668e5b21560165dc828754618e6621/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2Fclock_neg.cc?ref=af177d7280668e5b21560165dc828754618e6621", "patch": "@@ -34,7 +34,7 @@ test01()\n {\n   std::timed_mutex m;\n   std::unique_lock<std::timed_mutex> l(m, std::defer_lock);\n-  l.try_lock_until(clok::now()); // { dg-error \"here\" }\n+  (void) l.try_lock_until(clok::now()); // { dg-error \"here\" }\n }\n \n struct cloc\n@@ -53,7 +53,7 @@ test02()\n {\n   std::recursive_timed_mutex m;\n   std::unique_lock<std::recursive_timed_mutex> l(m, std::defer_lock);\n-  l.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+  (void) l.try_lock_until(cloc::now()); // { dg-error \"here\" }\n }\n \n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}]}