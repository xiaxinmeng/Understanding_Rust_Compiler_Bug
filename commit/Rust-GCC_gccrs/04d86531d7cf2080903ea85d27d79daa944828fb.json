{"sha": "04d86531d7cf2080903ea85d27d79daa944828fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkODY1MzFkN2NmMjA4MDkwM2VhODVkMjdkNzlkYWE5NDQ4MjhmYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-09-04T08:38:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-09-04T08:38:56Z"}, "message": "re PR tree-optimization/33291 (a+=2; a+=2  not simplified to  a+=4;  with -O3   (ok with gcc-4.2.1))\n\n2007-09-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/33291\n\t* tree-pretty-print.c (dump_generic_node): Dump all\n\tqualifiers for pointer types, not only first.  Dump\n\tqualifiers for aggregate types as well.\n\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Always\n\tuse the canonical type for building ARRAY_REFs.\n\t* gimplify.c (canonicalize_addr_expr): Clean up.  The\n\tcorrect validness check is compatibility of the pointer\n\ttypes.  Always use the canonical type for building\n\tARRAY_REFs and ADDR_EXPRs.\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Revert\n\tchange that disabled propagation of ADDR_EXPRs into statements\n\twith volatile ops.\n\n\t* gcc.dg/volatile2.c: New testcase.\n\t* gcc.dg/pr32721.c: Adjust volatile reference pattern.\n\t* gcc.dg/tree-ssa/forwprop-1.c: Remove xfail.\n\t* gcc.dg/tree-ssa/forwprop-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pr17141-1.c: Likewise.\n\nFrom-SVN: r128068", "tree": {"sha": "333af519eb1ef7bdaff0a09aeb9d6248eee3cef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/333af519eb1ef7bdaff0a09aeb9d6248eee3cef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d86531d7cf2080903ea85d27d79daa944828fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d86531d7cf2080903ea85d27d79daa944828fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d86531d7cf2080903ea85d27d79daa944828fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d86531d7cf2080903ea85d27d79daa944828fb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc7a6a0dfa65af07a199aa34823d81800ec35f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7a6a0dfa65af07a199aa34823d81800ec35f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7a6a0dfa65af07a199aa34823d81800ec35f64"}], "stats": {"total": 153, "additions": 98, "deletions": 55}, "files": [{"sha": "75bea70a5d045a106d7ee79967367d9b90d59d3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1,3 +1,19 @@\n+2007-09-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33291\n+\t* tree-pretty-print.c (dump_generic_node): Dump all\n+\tqualifiers for pointer types, not only first.  Dump\n+\tqualifiers for aggregate types as well.\n+\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Always\n+\tuse the canonical type for building ARRAY_REFs.\n+\t* gimplify.c (canonicalize_addr_expr): Clean up.  The\n+\tcorrect validness check is compatibility of the pointer\n+\ttypes.  Always use the canonical type for building\n+\tARRAY_REFs and ADDR_EXPRs.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Revert\n+\tchange that disabled propagation of ADDR_EXPRs into statements\n+\twith volatile ops.\n+\n 2007-09-03  Zack Weinberg  <zack@codesourcery.com>\n \n \t* config/arm/arm.md (mulsidi3, umulsidi3, mulsi3_highpart)"}, {"sha": "572a34fa6b3fbc28fa21c0ef498167575433bf1d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1572,50 +1572,46 @@ canonicalize_component_ref (tree *expr_p)\n    ==>\n       &array[L]\n    where L is the lower bound.  For simplicity, only do this for constant\n-   lower bound.  */\n+   lower bound.\n+   The constraint is that the type of &array[L] is trivially convertible\n+   to T *.  */\n \n static void\n canonicalize_addr_expr (tree *expr_p)\n {\n   tree expr = *expr_p;\n-  tree ctype = TREE_TYPE (expr);\n   tree addr_expr = TREE_OPERAND (expr, 0);\n-  tree atype = TREE_TYPE (addr_expr);\n-  tree dctype, datype, ddatype, otype, obj_expr;\n+  tree datype, ddatype, pddatype;\n \n-  /* Both cast and addr_expr types should be pointers.  */\n-  if (!POINTER_TYPE_P (ctype) || !POINTER_TYPE_P (atype))\n+  /* We simplify only conversions from an ADDR_EXPR to a pointer type.  */\n+  if (!POINTER_TYPE_P (TREE_TYPE (expr))\n+      || TREE_CODE (addr_expr) != ADDR_EXPR)\n     return;\n \n   /* The addr_expr type should be a pointer to an array.  */\n-  datype = TREE_TYPE (atype);\n+  datype = TREE_TYPE (TREE_TYPE (addr_expr));\n   if (TREE_CODE (datype) != ARRAY_TYPE)\n     return;\n \n-  /* Both cast and addr_expr types should address the same object type.  */\n-  dctype = TREE_TYPE (ctype);\n+  /* The pointer to element type shall be trivially convertible to\n+     the expression pointer type.  */\n   ddatype = TREE_TYPE (datype);\n-  if (!useless_type_conversion_p (dctype, ddatype))\n-    return;\n-\n-  /* The addr_expr and the object type should match.  */\n-  obj_expr = TREE_OPERAND (addr_expr, 0);\n-  otype = TREE_TYPE (obj_expr);\n-  if (!useless_type_conversion_p (datype, otype))\n+  pddatype = build_pointer_type (ddatype);\n+  if (!useless_type_conversion_p (pddatype, ddatype))\n     return;\n \n   /* The lower bound and element sizes must be constant.  */\n-  if (!TYPE_SIZE_UNIT (dctype)\n-      || TREE_CODE (TYPE_SIZE_UNIT (dctype)) != INTEGER_CST\n+  if (!TYPE_SIZE_UNIT (ddatype)\n+      || TREE_CODE (TYPE_SIZE_UNIT (ddatype)) != INTEGER_CST\n       || !TYPE_DOMAIN (datype) || !TYPE_MIN_VALUE (TYPE_DOMAIN (datype))\n       || TREE_CODE (TYPE_MIN_VALUE (TYPE_DOMAIN (datype))) != INTEGER_CST)\n     return;\n \n   /* All checks succeeded.  Build a new node to merge the cast.  */\n-  *expr_p = build4 (ARRAY_REF, dctype, obj_expr,\n+  *expr_p = build4 (ARRAY_REF, ddatype, TREE_OPERAND (addr_expr, 0),\n \t\t    TYPE_MIN_VALUE (TYPE_DOMAIN (datype)),\n \t\t    NULL_TREE, NULL_TREE);\n-  *expr_p = build1 (ADDR_EXPR, ctype, *expr_p);\n+  *expr_p = build1 (ADDR_EXPR, pddatype, *expr_p);\n }\n \n /* *EXPR_P is a NOP_EXPR or CONVERT_EXPR.  Remove it and/or other conversions"}, {"sha": "1fcf11e92efd6a55de73cf2e33fd4dd4873f61e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1,3 +1,12 @@\n+2007-09-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/33291\n+\t* gcc.dg/volatile2.c: New testcase.\n+\t* gcc.dg/pr32721.c: Adjust volatile reference pattern.\n+\t* gcc.dg/tree-ssa/forwprop-1.c: Remove xfail.\n+\t* gcc.dg/tree-ssa/forwprop-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr17141-1.c: Likewise.\n+\n 2007-09-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/33253"}, {"sha": "2f3a18a8815bd32f5325d34ee14550bf72081694", "filename": "gcc/testsuite/gcc.dg/pr32721.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32721.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -14,5 +14,5 @@ spinlock1 = &spinlock[1];\n  while (*spinlock0);\n }\n \n-/* { dg-final { scan-tree-dump \"={v} spinlock.0.\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"={v} \\\\*spinlock0\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c1fa43543c14f8393bcac2c8d5f5031c94002b3f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-1.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-1.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-forwprop\" }  */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" }  */\n \n /* We should be able to optimize this to b->t[i] = 1 during\n    early optimizations.  */\n@@ -15,8 +15,5 @@ void f(struct a * b, __SIZE_TYPE__ i)\n   c[i] = 1;\n }\n \n-/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop1\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop2\" } } */\n-/* { dg-final { cleanup-tree-dump \"forwprop?\" } } */\n-\n-\n+/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "434d86c65d5bfd7f2e41339346c94b2fb79a15bf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-2.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-forwprop\" }  */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" }  */\n \n /* We should be able to optimize this to b->t[i] = 1 during\n    early optimizations.  */\n@@ -17,6 +17,5 @@ void f(__SIZE_TYPE__ i)\n   c[i] = 1;\n }\n \n-/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop1\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop2\" } } */\n+/* { dg-final { scan-tree-dump \"t\\\\\\[i.*\\\\\\] = 1;\" \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop?\" } } */"}, {"sha": "af86751500258af83b35d64ab828b0a22dfb5888", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr17141-1.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17141-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17141-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17141-1.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-forwprop\" } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n \n struct A { int i; };\n int\n@@ -11,6 +11,5 @@ foo(struct A *locp, int str)\n   return locp->i;\n }\n \n-/* { dg-final { scan-tree-dump \"locp.*->i =\" \"forwprop1\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"locp.*->i =\" \"forwprop2\" } } */\n-/* { dg-final { cleanup-tree-dump \"forwprop?\" } } */\n+/* { dg-final { scan-tree-dump \"locp.*->i =\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "4bfc441c862f510c4c0710c427a5513ea91e0797", "filename": "gcc/testsuite/gcc.dg/volatile2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Fvolatile2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftestsuite%2Fgcc.dg%2Fvolatile2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvolatile2.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-gimple -fdump-tree-optimized\" } */\n+\n+struct GTeth_desc\n+{\n+  unsigned ed_cmdsts;\n+};\n+struct GTeth_softc\n+{\n+  struct GTeth_desc txq_desc[32];\n+};\n+\n+void foo(struct GTeth_softc *sc)\n+{\n+  /* Verify that we retain the cast to (volatile struct GTeth_desc *)\n+     after gimplification and that we keep the volatileness on the\n+     store until after optimization.  */\n+  volatile struct GTeth_desc *p = &sc->txq_desc[0];\n+  p->ed_cmdsts = 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"\\\\(volatile struct GTeth_desc \\\\*\\\\) D\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"{v}\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c1fd68be430c72e5a31f0f5887ecac738c82eaff", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -622,9 +622,9 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \n \t  if (quals & TYPE_QUAL_CONST)\n \t    pp_string (buffer, \" const\");\n-\t  else if (quals & TYPE_QUAL_VOLATILE)\n-\t    pp_string (buffer,  \"volatile\");\n-\t  else if (quals & TYPE_QUAL_RESTRICT)\n+\t  if (quals & TYPE_QUAL_VOLATILE)\n+\t    pp_string (buffer, \" volatile\");\n+\t  if (quals & TYPE_QUAL_RESTRICT)\n \t    pp_string (buffer, \" restrict\");\n \n \t  if (TYPE_REF_CAN_ALIAS_ALL (node))\n@@ -718,17 +718,26 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case QUAL_UNION_TYPE:\n-      /* Print the name of the structure.  */\n-      if (TREE_CODE (node) == RECORD_TYPE)\n-\tpp_string (buffer, \"struct \");\n-      else if (TREE_CODE (node) == UNION_TYPE)\n-\tpp_string (buffer, \"union \");\n+      {\n+\tunsigned int quals = TYPE_QUALS (node);\n \n-      if (TYPE_NAME (node))\n-\tdump_generic_node (buffer, TYPE_NAME (node), spc, flags, false);\n-      else\n-\tprint_struct_decl (buffer, node, spc, flags);\n-      break;\n+\tif (quals & TYPE_QUAL_CONST)\n+\t  pp_string (buffer, \"const \");\n+\tif (quals & TYPE_QUAL_VOLATILE)\n+\t  pp_string (buffer, \"volatile \");\n+\n+        /* Print the name of the structure.  */\n+        if (TREE_CODE (node) == RECORD_TYPE)\n+\t  pp_string (buffer, \"struct \");\n+        else if (TREE_CODE (node) == UNION_TYPE)\n+\t  pp_string (buffer, \"union \");\n+\n+        if (TYPE_NAME (node))\n+\t  dump_generic_node (buffer, TYPE_NAME (node), spc, flags, false);\n+        else\n+\t  print_struct_decl (buffer, node, spc, flags);\n+        break;\n+      }\n \n     case LANG_TYPE:\n       NIY;"}, {"sha": "05a65f6e093fa329cdef338b587e9618f07818b9", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -1644,7 +1644,7 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n   /* Make sure to possibly truncate late after offsetting.  */\n   idx = fold_convert (idx_type, idx);\n \n-  return build4 (ARRAY_REF, orig_type, base, idx, NULL_TREE, NULL_TREE);\n+  return build4 (ARRAY_REF, elt_type, base, idx, NULL_TREE, NULL_TREE);\n }\n \n "}, {"sha": "e026b804d40da7ae2a76ba19861110f41567c44e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d86531d7cf2080903ea85d27d79daa944828fb/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=04d86531d7cf2080903ea85d27d79daa944828fb", "patch": "@@ -717,13 +717,6 @@ forward_propagate_addr_expr (tree name, tree rhs)\n \t  continue;\n \t}\n \n-      /* If the use_stmt has side-effects, don't propagate into it.  */\n-      if (stmt_ann (use_stmt)->has_volatile_ops)\n-\t{\n-\t  all = false;\n-\t  continue;\n-\t}\n-\n       push_stmt_changes (&use_stmt);\n \n       result = forward_propagate_addr_expr_1 (name, rhs, use_stmt,"}]}