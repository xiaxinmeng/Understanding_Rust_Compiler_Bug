{"sha": "9b81754858b271df999993ac7c195acfb4558387", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4MTc1NDg1OGIyNzFkZjk5OTk5M2FjN2MxOTVhY2ZiNDU1ODM4Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-09-22T13:34:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-09-22T13:34:09Z"}, "message": "Make streams movable and swappable.\n\n\tPR libstdc++/54316\n\tPR libstdc++/53626\n\t* config/abi/pre/gnu.ver: Add new exports.\n\t* config/io/basic_file_stdio.h (__basic_file): Support moving and\n\tswapping.\n\t* include/bits/basic_ios.h (basic_ios::move, basic_ios::swap):\n\tLikewise.\n\t* include/bits/ios_base.h (ios_base::_M_move, ios_base::_M_swap):\n\tLikewise.\n\t* include/bits/fstream.tcc (basic_filebuf): Likewise.\n\t* include/bits/move.h (__exchange): Define for C++11 mode.\n\t* include/ext/stdio_filebuf.h (stdio_filebuf): Support moving and\n\tswapping.\n\t* include/ext/stdio_sync_filebuf.h (stdio_sync_filebuf): Likewise.\n\t* include/std/fstream (basic_filebuf, basic_ifstream, basic_ofstream,\n\tbasic_fstream): Likewise.\n\t* include/std/ios: Remove whitespace.\n\t* include/std/istream (basic_istream, basic_iostream): Support moving\n\tand swapping.\n\t* include/std/ostream (basic_ostream): Likewise.\n\t* include/std/sstream (basic_stringbuf, basic_istringstream,\n\tbasic_ostringstream, basic_stringstream): Likewise.\n\t* include/std/streambuf (basic_streambuf): Do not default copy\n\tconstructor and assignment on first declaration.\n\t* include/std/utility (exchange): Forward to __exchange.\n\t* testsuite/27_io/basic_filebuf/cons/char/copy_neg.cc: New.\n\t* src/c++11/Makefile.am: Add stream-related files.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/ext11-inst.cc (stdio_filebuf, stdio_sync_filebuf):\n\tNew file for explicit instantiation definitions.\n\t* src/c++11/ios.cc: Move from src/c++98 to here.\n\t(ios_base::_M_move, ios_base::_M_swap): Define.\n\t* src/c++11/ios-inst.cc: Move from src/c++98 to here.\n\t* src/c++11/iostream-inst.cc: Likewise.\n\t* src/c++11/istream-inst.cc: Likewise.\n\t* src/c++11/ostream-inst.cc: Likewise.\n\t* src/c++11/sstream-inst.cc: Likewise.\n\t* src/c++11/streambuf-inst.cc: Likewise.\n\t* src/c++98/Makefile.am: Remove stream-related files.\n\t* src/c++98/Makefile.in: Regenerate.\n\t* src/c++98/ext-inst.cc (stdio_filebuf): Remove explicit\n\tinstantiations.\n\t* src/c++98/misc-inst.cc (stdio_sync_filebuf): Likewise.\n\t* src/c++98/ios-inst.cc: Move to src/c++11/.\n\t* src/c++98/ios.cc: Move to src/c++11/.\n\t* src/c++98/iostream-inst.cc: Likewise.\n\t* src/c++98/istream-inst.cc: Likewise.\n\t* src/c++98/ostream-inst.cc: Likewise.\n\t* src/c++98/sstream-inst.cc: Likewise.\n\t* src/c++98/streambuf-inst.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/cons/char/copy_neg.cc: New.\n\t* testsuite/27_io/basic_fstream/cons/move.cc: New.\n\t* testsuite/27_io/basic_fstream/assign/1.cc: New.\n\t* testsuite/27_io/basic_ifstream/cons/move.cc: New.\n\t* testsuite/27_io/basic_ifstream/assign/1.cc: New.\n\t* testsuite/27_io/basic_istringstream/assign/1.cc: New.\n\t* testsuite/27_io/basic_istringstream/cons/move.cc: New.\n\t* testsuite/27_io/basic_ofstream/cons/move.cc: New.\n\t* testsuite/27_io/basic_ofstream/assign/1.cc: New.\n\t* testsuite/27_io/basic_ostringstream/assign/1.cc: New.\n\t* testsuite/27_io/basic_ostringstream/cons/move.cc: New.\n\t* testsuite/27_io/basic_stringstream/assign/1.cc: New.\n\t* testsuite/27_io/basic_stringstream/cons/move.cc: New.\n\nFrom-SVN: r215463", "tree": {"sha": "56471caae5e872ad7a27f4e39b5f246f4a5245c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56471caae5e872ad7a27f4e39b5f246f4a5245c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b81754858b271df999993ac7c195acfb4558387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b81754858b271df999993ac7c195acfb4558387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b81754858b271df999993ac7c195acfb4558387", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b81754858b271df999993ac7c195acfb4558387/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38278d8a9c97abd336ad3d565ecf7b18ad3d23ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38278d8a9c97abd336ad3d565ecf7b18ad3d23ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38278d8a9c97abd336ad3d565ecf7b18ad3d23ed"}], "stats": {"total": 1958, "additions": 1888, "deletions": 70}, "files": [{"sha": "04749d772b0b44727021f6cdc7ace34f3bc3ad49", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -1,3 +1,69 @@\n+2014-09-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/54316\n+\tPR libstdc++/53626\n+\t* config/abi/pre/gnu.ver: Add new exports.\n+\t* config/io/basic_file_stdio.h (__basic_file): Support moving and\n+\tswapping.\n+\t* include/bits/basic_ios.h (basic_ios::move, basic_ios::swap):\n+\tLikewise.\n+\t* include/bits/ios_base.h (ios_base::_M_move, ios_base::_M_swap):\n+\tLikewise.\n+\t* include/bits/fstream.tcc (basic_filebuf): Likewise.\n+\t* include/bits/move.h (__exchange): Define for C++11 mode.\n+\t* include/ext/stdio_filebuf.h (stdio_filebuf): Support moving and\n+\tswapping.\n+\t* include/ext/stdio_sync_filebuf.h (stdio_sync_filebuf): Likewise.\n+\t* include/std/fstream (basic_filebuf, basic_ifstream, basic_ofstream,\n+\tbasic_fstream): Likewise.\n+\t* include/std/ios: Remove whitespace.\n+\t* include/std/istream (basic_istream, basic_iostream): Support moving\n+\tand swapping.\n+\t* include/std/ostream (basic_ostream): Likewise.\n+\t* include/std/sstream (basic_stringbuf, basic_istringstream,\n+\tbasic_ostringstream, basic_stringstream): Likewise.\n+\t* include/std/streambuf (basic_streambuf): Do not default copy\n+\tconstructor and assignment on first declaration.\n+\t* include/std/utility (exchange): Forward to __exchange.\n+\t* testsuite/27_io/basic_filebuf/cons/char/copy_neg.cc: New.\n+\t* src/c++11/Makefile.am: Add stream-related files.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++11/ext11-inst.cc (stdio_filebuf, stdio_sync_filebuf):\n+\tNew file for explicit instantiation definitions.\n+\t* src/c++11/ios.cc: Move from src/c++98 to here.\n+\t(ios_base::_M_move, ios_base::_M_swap): Define.\n+\t* src/c++11/ios-inst.cc: Move from src/c++98 to here.\n+\t* src/c++11/iostream-inst.cc: Likewise.\n+\t* src/c++11/istream-inst.cc: Likewise.\n+\t* src/c++11/ostream-inst.cc: Likewise.\n+\t* src/c++11/sstream-inst.cc: Likewise.\n+\t* src/c++11/streambuf-inst.cc: Likewise.\n+\t* src/c++98/Makefile.am: Remove stream-related files.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/c++98/ext-inst.cc (stdio_filebuf): Remove explicit\n+\tinstantiations.\n+\t* src/c++98/misc-inst.cc (stdio_sync_filebuf): Likewise.\n+\t* src/c++98/ios-inst.cc: Move to src/c++11/.\n+\t* src/c++98/ios.cc: Move to src/c++11/.\n+\t* src/c++98/iostream-inst.cc: Likewise.\n+\t* src/c++98/istream-inst.cc: Likewise.\n+\t* src/c++98/ostream-inst.cc: Likewise.\n+\t* src/c++98/sstream-inst.cc: Likewise.\n+\t* src/c++98/streambuf-inst.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/cons/char/copy_neg.cc: New.\n+\t* testsuite/27_io/basic_fstream/cons/move.cc: New.\n+\t* testsuite/27_io/basic_fstream/assign/1.cc: New.\n+\t* testsuite/27_io/basic_ifstream/cons/move.cc: New.\n+\t* testsuite/27_io/basic_ifstream/assign/1.cc: New.\n+\t* testsuite/27_io/basic_istringstream/assign/1.cc: New.\n+\t* testsuite/27_io/basic_istringstream/cons/move.cc: New.\n+\t* testsuite/27_io/basic_ofstream/cons/move.cc: New.\n+\t* testsuite/27_io/basic_ofstream/assign/1.cc: New.\n+\t* testsuite/27_io/basic_ostringstream/assign/1.cc: New.\n+\t* testsuite/27_io/basic_ostringstream/cons/move.cc: New.\n+\t* testsuite/27_io/basic_stringstream/assign/1.cc: New.\n+\t* testsuite/27_io/basic_stringstream/cons/move.cc: New.\n+\n 2014-09-17  Jason Merrill  <jason@redhat.com>\n \n \t* libsupc++/dyncast.cc (__dynamic_cast): Handle mid-destruction"}, {"sha": "669e36d7eceb151fdf88b59bf3dc65691adda6c5", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -989,7 +989,8 @@ GLIBCXX_3.4.10 {\n     _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE6stosscEv;\n \n     _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EE4syncEv;\n-    _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EE[5-9C]*;\n+    _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EE[5-9]*;\n+    _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEC[12]EP*;\n     _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EED[^2]*;\n \n } GLIBCXX_3.4.9;\n@@ -1375,6 +1376,47 @@ GLIBCXX_3.4.21 {\n     # void std::thread::_M_start_thread(__shared_base_type, void(*)())\n     _ZNSt6thread15_M_start_threadESt10shared_ptrINS_10_Impl_baseEEPFvvE;\n \n+    # Move/swap functions for iostreams\n+    _ZNSt8ios_base7_M_swapERS_;\n+    _ZNSt8ios_base7_M_moveERS_;\n+    _ZNSt9basic_iosI[cw]St11char_traitsI[cw]EE4moveE[OR]S2_;\n+    _ZNSt9basic_iosI[cw]St11char_traitsI[cw]EE4swapERS2_;\n+    _ZNSt9basic_iosI[cw]St11char_traitsI[cw]EE9set_rdbuf*;\n+    _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE4swapERS2_;\n+    _ZNS[dio]4swapERS[dio];\n+    _ZNS[dio]aSEOS[dio];\n+    _ZNS[dio]C[12]EOS[dio];\n+    _ZNSt13basic_[io]streamIwSt11char_traitsIwEE4swapERS2_;\n+    _ZNSt13basic_[io]streamIwSt11char_traitsIwEEaSEOS2_;\n+    _ZNSt13basic_[io]streamIwSt11char_traitsIwEEC[12]EOS2_;\n+    _ZNSt14basic_iostreamIwSt11char_traitsIwEE4swapERS2_;\n+    _ZNSt14basic_iostreamIwSt11char_traitsIwEEaSEOS2_;\n+    _ZNSt14basic_iostreamIwSt11char_traitsIwEEC[12]EOS2_;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EE4swapERS2_;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EEaSEOS2_;\n+    _ZNSt13basic_filebufI[cw]St11char_traitsI[cw]EEC[12]EOS2_;\n+    _ZNSt13basic_fstreamI[cw]St11char_traitsI[cw]EE4swapERS2_;\n+    _ZNSt13basic_fstreamI[cw]St11char_traitsI[cw]EEaSEOS2_;\n+    _ZNSt13basic_fstreamI[cw]St11char_traitsI[cw]EEC[12]EOS2_;\n+    _ZNSt14basic_[io]fstreamI[cw]St11char_traitsI[cw]EE4swapERS2_;\n+    _ZNSt14basic_[io]fstreamI[cw]St11char_traitsI[cw]EEaSEOS2_;\n+    _ZNSt14basic_[io]fstreamI[cw]St11char_traitsI[cw]EEC[12]EOS2_;\n+    _ZNSt15basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE4swapERS3_;\n+    _ZNSt15basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEaSEOS3_;\n+    _ZNSt15basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS3_;\n+    _ZNSt18basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4swapERS3_;\n+    _ZNSt18basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEaSEOS3_;\n+    _ZNSt18basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS3_;\n+    _ZNSt19basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4swapERS3_;\n+    _ZNSt19basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEaSEOS3_;\n+    _ZNSt19basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS3_;\n+    _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEaSEOS3_;\n+    _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEC[12]EOS3_;\n+\n+    # basic_ostream<C,T>::basic_ostream(basic_iostream<C,T>*)\n+    _ZNSoC[12]EPSd;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEEC[12]EPSt14basic_iostreamIwS1_E;\n+\n } GLIBCXX_3.4.20;\n \n "}, {"sha": "f58164e131fd23c202c2ad7b6b1c6d1db88143cc", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -38,6 +38,7 @@\n \n #include <bits/c++config.h>\n #include <bits/c++io.h>  // for __c_lock and __c_file\n+#include <bits/move.h>   // for swap\n #include <ios>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -61,6 +62,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       __basic_file(__c_lock* __lock = 0) throw ();\n \n+#if __cplusplus >= 201103L\n+      __basic_file(__basic_file&& __rv, __c_lock* __lock = 0) noexcept\n+      : _M_cfile(__rv._M_cfile), _M_cfile_created(__rv._M_cfile_created)\n+      {\n+\t__rv._M_cfile = nullptr;\n+\t__rv._M_cfile_created = false;\n+      }\n+\n+      __basic_file& operator=(const __basic_file&) = delete;\n+      __basic_file& operator=(__basic_file&&) = delete;\n+\n+      void\n+      swap(__basic_file& __f) noexcept\n+      {\n+\tstd::swap(_M_cfile, __f._M_cfile);\n+\tstd::swap(_M_cfile_created, __f._M_cfile_created);\n+      }\n+#endif\n+\n       __basic_file* \n       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n "}, {"sha": "10263ed07a42e79fc95e6b1eb4cc6a97be413b49", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -36,6 +36,7 @@\n #include <bits/locale_classes.h>\n #include <bits/locale_facets.h>\n #include <bits/streambuf_iterator.h>\n+#include <bits/move.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -465,6 +466,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       init(basic_streambuf<_CharT, _Traits>* __sb);\n \n+#if __cplusplus >= 201103L\n+      basic_ios(const basic_ios&) = delete;\n+      basic_ios& operator=(const basic_ios&) = delete;\n+\n+      void\n+      move(basic_ios& __rhs)\n+      {\n+\tios_base::_M_move(__rhs);\n+\t_M_cache_locale(_M_ios_locale);\n+\tthis->tie(__rhs.tie(nullptr));\n+\t_M_fill = __rhs._M_fill;\n+\t_M_fill_init = __rhs._M_fill_init;\n+\t_M_streambuf = nullptr;\n+      }\n+\n+      void\n+      move(basic_ios&& __rhs)\n+      { this->move(__rhs); }\n+\n+      void\n+      swap(basic_ios& __rhs) noexcept\n+      {\n+\tios_base::_M_swap(__rhs);\n+\t_M_cache_locale(_M_ios_locale);\n+\t__rhs._M_cache_locale(__rhs._M_ios_locale);\n+\tstd::swap(_M_tie, __rhs._M_tie);\n+\tstd::swap(_M_fill, __rhs._M_fill);\n+\tstd::swap(_M_fill_init, __rhs._M_fill_init);\n+      }\n+\n+      void\n+      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)\n+      { _M_streambuf = __sb; }\n+#endif\n+\n       void\n       _M_cache_locale(const locale& __loc);\n     };"}, {"sha": "b0404ea8dbd0a8a4fdf515f4942d4a807d76f0cc", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -37,6 +37,7 @@\n #pragma GCC system_header\n \n #include <bits/cxxabi_forced.h>\n+#include <bits/move.h>   // for swap\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -88,6 +89,90 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);\n     }\n \n+#if __cplusplus >= 201103L\n+  template<typename _CharT, typename _Traits>\n+    basic_filebuf<_CharT, _Traits>::\n+    basic_filebuf(basic_filebuf&& __rhs)\n+    : __streambuf_type(__rhs),\n+    _M_lock(), _M_file(std::move(__rhs._M_file), &_M_lock),\n+    _M_mode(std::__exchange(__rhs._M_mode, ios_base::openmode(0))),\n+    _M_state_beg(std::move(__rhs._M_state_beg)),\n+    _M_state_cur(std::move(__rhs._M_state_cur)),\n+    _M_state_last(std::move(__rhs._M_state_last)),\n+    _M_buf(std::__exchange(__rhs._M_buf, nullptr)),\n+    _M_buf_size(std::__exchange(__rhs._M_buf_size, 1)),\n+    _M_buf_allocated(std::__exchange(__rhs._M_buf_allocated, false)),\n+    _M_reading(std::__exchange(__rhs._M_reading, false)),\n+    _M_writing(std::__exchange(__rhs._M_writing, false)),\n+    _M_pback(__rhs._M_pback),\n+    _M_pback_cur_save(std::__exchange(__rhs._M_pback_cur_save, nullptr)),\n+    _M_pback_end_save(std::__exchange(__rhs._M_pback_end_save, nullptr)),\n+    _M_pback_init(std::__exchange(__rhs._M_pback_init, false)),\n+    _M_codecvt(__rhs._M_codecvt),\n+    _M_ext_buf(std::__exchange(__rhs._M_ext_buf, nullptr)),\n+    _M_ext_buf_size(std::__exchange(__rhs._M_ext_buf_size, 0)),\n+    _M_ext_next(std::__exchange(__rhs._M_ext_next, nullptr)),\n+    _M_ext_end(std::__exchange(__rhs._M_ext_end, nullptr))\n+    {\n+      __rhs._M_set_buffer(-1);\n+      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_filebuf<_CharT, _Traits>&\n+    basic_filebuf<_CharT, _Traits>::\n+    operator=(basic_filebuf&& __rhs)\n+    {\n+      this->close();\n+      __streambuf_type::operator=(__rhs);\n+      _M_file.swap(__rhs._M_file);\n+      _M_mode = std::__exchange(__rhs._M_mode, ios_base::openmode(0));\n+      _M_state_beg = std::move(__rhs._M_state_beg);\n+      _M_state_cur = std::move(__rhs._M_state_cur);\n+      _M_state_last = std::move(__rhs._M_state_last);\n+      _M_buf = std::__exchange(__rhs._M_buf, nullptr);\n+      _M_buf_size = std::__exchange(__rhs._M_buf_size, 1);\n+      _M_buf_allocated = std::__exchange(__rhs._M_buf_allocated, false);\n+      _M_ext_buf = std::__exchange(__rhs._M_ext_buf, nullptr);\n+      _M_ext_buf_size = std::__exchange(__rhs._M_ext_buf_size, 0);\n+      _M_ext_next = std::__exchange(__rhs._M_ext_next, nullptr);\n+      _M_ext_end = std::__exchange(__rhs._M_ext_end, nullptr);\n+      _M_reading = std::__exchange(__rhs._M_reading, false);\n+      _M_writing = std::__exchange(__rhs._M_writing, false);\n+      _M_pback_cur_save = std::__exchange(__rhs._M_pback_cur_save, nullptr);\n+      _M_pback_end_save = std::__exchange(__rhs._M_pback_end_save, nullptr);\n+      _M_pback_init = std::__exchange(__rhs._M_pback_init, false);\n+      __rhs._M_set_buffer(-1);\n+      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    void\n+    basic_filebuf<_CharT, _Traits>::\n+    swap(basic_filebuf& __rhs)\n+    {\n+      __streambuf_type::swap(__rhs);\n+      _M_file.swap(__rhs._M_file);\n+      std::swap(_M_mode, __rhs._M_mode);\n+      std::swap(_M_state_beg, __rhs._M_state_beg);\n+      std::swap(_M_state_cur, __rhs._M_state_cur);\n+      std::swap(_M_state_last, __rhs._M_state_last);\n+      std::swap(_M_buf, __rhs._M_buf);\n+      std::swap(_M_buf_size, __rhs._M_buf_size);\n+      std::swap(_M_buf_allocated, __rhs._M_buf_allocated);\n+      std::swap(_M_ext_buf, __rhs._M_ext_buf);\n+      std::swap(_M_ext_buf_size, __rhs._M_ext_buf_size);\n+      std::swap(_M_ext_next, __rhs._M_ext_next);\n+      std::swap(_M_ext_end, __rhs._M_ext_end);\n+      std::swap(_M_reading, __rhs._M_reading);\n+      std::swap(_M_writing, __rhs._M_writing);\n+      std::swap(_M_pback_cur_save, __rhs._M_pback_cur_save);\n+      std::swap(_M_pback_end_save, __rhs._M_pback_end_save);\n+      std::swap(_M_pback_init, __rhs._M_pback_init);\n+    }\n+#endif\n+\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::__filebuf_type*\n     basic_filebuf<_CharT, _Traits>::"}, {"sha": "fb448fd1091d893e932eae237aeb066d9ce135dc", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -794,6 +794,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     ios_base&\n     operator=(const ios_base&) = delete;\n+\n+  protected:\n+    void\n+    _M_move(ios_base&) noexcept;\n+\n+    void\n+    _M_swap(ios_base& __rhs) noexcept;\n #endif\n   };\n "}, {"sha": "2fd0d37e2edffa158bd8e17bbc98ed406e2869ec", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -135,6 +135,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     addressof(_Tp& __r) noexcept\n     { return std::__addressof(__r); }\n \n+  // C++11 version of std::exchange for internal use.\n+  template <typename _Tp, typename _Up = _Tp>\n+    inline _Tp\n+    __exchange(_Tp& __obj, _Up&& __new_val)\n+    {\n+      _Tp __old_val = std::move(__obj);\n+      __obj = std::forward<_Up>(__new_val);\n+      return __old_val;\n+    }\n+\n   /// @} group utilities\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "8d0169021749165cfd06fbf0c3bfcac77bd578d7", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -97,6 +97,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual\n       ~stdio_filebuf();\n \n+#if __cplusplus >= 201103L\n+      stdio_filebuf(stdio_filebuf&&) = default;\n+      stdio_filebuf& operator=(stdio_filebuf&&) = default;\n+\n+      void\n+      swap(stdio_filebuf& __fb)\n+      { std::basic_filebuf<_CharT, _Traits>::swap(__fb); }\n+#endif\n+\n       /**\n        *  @return  The underlying file descriptor.\n        *"}, {"sha": "c881172aae33d1e3f58d0f4b8e0696fb460f83c9", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -35,6 +35,7 @@\n #include <unistd.h>\n #include <cstdio>\n #include <bits/c++io.h>  // For __c_file\n+#include <bits/move.h>   // For __exchange\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n #include <cwchar>\n@@ -64,8 +65,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename traits_type::off_type\t\toff_type;\n \n     private:\n+      typedef std::basic_streambuf<_CharT, _Traits> __streambuf_type;\n+\n       // Underlying stdio FILE\n-      std::__c_file* const _M_file;\n+      std::__c_file* _M_file;\n \n       // Last character gotten. This is used when pbackfail is\n       // called from basic_streambuf::sungetc()\n@@ -77,6 +80,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_file(__f), _M_unget_buf(traits_type::eof())\n       { }\n \n+#if __cplusplus >= 201103L\n+      stdio_sync_filebuf(stdio_sync_filebuf&& __fb) noexcept\n+      : __streambuf_type(std::move(__fb)),\n+      _M_file(__fb._M_file), _M_unget_buf(__fb._M_unget_buf)\n+      {\n+\t__fb._M_file = nullptr;\n+\t__fb._M_unget_buf = traits_type::eof();\n+      }\n+\n+      stdio_sync_filebuf&\n+      operator=(stdio_sync_filebuf&& __fb) noexcept\n+      {\n+\t__streambuf_type::operator=(__fb);\n+\t_M_file = std::__exchange(__fb._M_file, nullptr);\n+\t_M_unget_buf = std::__exchange(__fb._M_unget_buf, traits_type::eof());\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(stdio_sync_filebuf& __fb)\n+      {\n+\t__streambuf_type::swap(__fb);\n+\tstd::swap(_M_file, __fb._M_file);\n+\tstd::swap(_M_unget_buf, __fb._M_unget_buf);\n+      }\n+#endif\n+\n       /**\n        *  @return  The underlying FILE*.\n        *"}, {"sha": "fcf5f94e36ee51cd4deecd665d402a67d5f6adc2", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 129, "deletions": 1, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -125,7 +125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __state_type\t\t_M_state_last;\n \n       /// Pointer to the beginning of internal buffer.\n-      char_type*\t\t_M_buf; \t\n+      char_type*\t\t_M_buf;\n \n       /**\n        *  Actual size of internal buffer. This number is equal to the size\n@@ -226,13 +226,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       basic_filebuf();\n \n+#if __cplusplus >= 201103L\n+      basic_filebuf(const basic_filebuf&) = delete;\n+      basic_filebuf(basic_filebuf&&);\n+#endif\n+\n       /**\n        *  @brief  The destructor closes the file first.\n        */\n       virtual\n       ~basic_filebuf()\n       { this->close(); }\n \n+#if __cplusplus >= 201103L\n+      basic_filebuf& operator=(const basic_filebuf&) = delete;\n+      basic_filebuf& operator=(basic_filebuf&&);\n+      void swap(basic_filebuf&);\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Returns true if the external file is open.\n@@ -504,6 +515,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->init(&_M_filebuf);\n \tthis->open(__s, __mode);\n       }\n+\n+      basic_ifstream(const basic_ifstream&) = delete;\n+\n+      basic_ifstream(basic_ifstream&& __rhs)\n+      : __istream_type(std::move(__rhs)),\n+      _M_filebuf(std::move(__rhs._M_filebuf))\n+      { __istream_type::set_rdbuf(&_M_filebuf); }\n #endif\n \n       /**\n@@ -515,6 +533,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~basic_ifstream()\n       { }\n \n+#if __cplusplus >= 201103L\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_ifstream&\n+      operator=(const basic_ifstream&) = delete;\n+\n+      basic_ifstream&\n+      operator=(basic_ifstream&& __rhs)\n+      {\n+\t__istream_type::operator=(std::move(__rhs));\n+\t_M_filebuf = std::move(__rhs._M_filebuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_ifstream& __rhs)\n+      {\n+\t__istream_type::swap(__rhs);\n+\t_M_filebuf.swap(__rhs._M_filebuf);\n+      }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -679,6 +719,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->init(&_M_filebuf);\n \tthis->open(__s, __mode);\n       }\n+\n+      basic_ofstream(const basic_ofstream&) = delete;\n+\n+      basic_ofstream(basic_ofstream&& __rhs)\n+      : __ostream_type(std::move(__rhs)),\n+      _M_filebuf(std::move(__rhs._M_filebuf))\n+      { __ostream_type::set_rdbuf(&_M_filebuf); }\n #endif\n \n       /**\n@@ -690,6 +737,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~basic_ofstream()\n       { }\n \n+#if __cplusplus >= 201103L\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_ofstream&\n+      operator=(const basic_ofstream&) = delete;\n+\n+      basic_ofstream&\n+      operator=(basic_ofstream&& __rhs)\n+      {\n+\t__ostream_type::operator=(std::move(__rhs));\n+\t_M_filebuf = std::move(__rhs._M_filebuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_ofstream& __rhs)\n+      {\n+\t__ostream_type::swap(__rhs);\n+\t_M_filebuf.swap(__rhs._M_filebuf);\n+      }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -852,6 +921,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->init(&_M_filebuf);\n \tthis->open(__s, __mode);\n       }\n+\n+      basic_fstream(const basic_fstream&) = delete;\n+\n+      basic_fstream(basic_fstream&& __rhs)\n+      : __iostream_type(std::move(__rhs)),\n+      _M_filebuf(std::move(__rhs._M_filebuf))\n+      { __iostream_type::set_rdbuf(&_M_filebuf); }\n #endif\n \n       /**\n@@ -863,6 +939,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~basic_fstream()\n       { }\n \n+#if __cplusplus >= 201103L\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_fstream&\n+      operator=(const basic_fstream&) = delete;\n+\n+      basic_fstream&\n+      operator=(basic_fstream&& __rhs)\n+      {\n+\t__iostream_type::operator=(std::move(__rhs));\n+\t_M_filebuf = std::move(__rhs._M_filebuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_fstream& __rhs)\n+      {\n+\t__iostream_type::swap(__rhs);\n+\t_M_filebuf.swap(__rhs._M_filebuf);\n+      }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -947,6 +1045,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+#if __cplusplus >= 201103L\n+  /// Swap specialization for filebufs.\n+  template <class _CharT, class _Traits>\n+    inline void\n+    swap(basic_filebuf<_CharT, _Traits>& __x,\n+\t basic_filebuf<_CharT, _Traits>& __y)\n+    { __x.swap(__y); }\n+\n+  /// Swap specialization for ifstreams.\n+  template <class _CharT, class _Traits>\n+    inline void\n+    swap(basic_ifstream<_CharT, _Traits>& __x,\n+\t basic_ifstream<_CharT, _Traits>& __y)\n+    { __x.swap(__y); }\n+\n+  /// Swap specialization for ofstreams.\n+  template <class _CharT, class _Traits>\n+    inline void\n+    swap(basic_ofstream<_CharT, _Traits>& __x,\n+\t basic_ofstream<_CharT, _Traits>& __y)\n+    { __x.swap(__y); }\n+\n+  /// Swap specialization for fstreams.\n+  template <class _CharT, class _Traits>\n+    inline void\n+    swap(basic_fstream<_CharT, _Traits>& __x,\n+\t basic_fstream<_CharT, _Traits>& __y)\n+    { __x.swap(__y); }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "acfd7c20ae8f45a59598bbc769c8fd71ab9e1def", "filename": "libstdc++-v3/include/std/ios", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -40,7 +40,7 @@\n #include <bits/char_traits.h> \t// For char_traits, streamoff, streamsize, fpos\n #include <bits/localefwd.h>\t// For class locale\n #include <bits/ios_base.h>\t// For ios_base declarations.\n-#include <streambuf> \n+#include <streambuf>\n #include <bits/basic_ios.h>\n \n #endif\t/* _GLIBCXX_IOS */"}, {"sha": "3a4761624e297ae9635620e874e63348f1ad656a", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -607,6 +607,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_gcount(streamsize(0))\n       { this->init(0); }\n \n+#if __cplusplus >= 201103L\n+      basic_istream(const basic_istream&) = delete;\n+\n+      basic_istream(basic_istream&& __rhs)\n+      : __ios_type(), _M_gcount(__rhs._M_gcount)\n+      {\n+\t__ios_type::move(__rhs);\n+\t__rhs._M_gcount = 0;\n+      }\n+\n+      // 27.7.3.3 Assign/swap\n+\n+      basic_istream& operator=(const basic_istream&) = delete;\n+\n+      basic_istream&\n+      operator=(basic_istream&& __rhs)\n+      {\n+\tswap(__rhs);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_istream& __rhs)\n+      {\n+\t__ios_type::swap(__rhs);\n+\tstd::swap(_M_gcount, __rhs._M_gcount);\n+      }\n+#endif\n+\n       template<typename _ValueT>\n \t__istream_type&\n \t_M_extract(_ValueT& __v);\n@@ -829,6 +858,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     protected:\n       basic_iostream()\n       : __istream_type(), __ostream_type() { }\n+\n+#if __cplusplus >= 201103L\n+      basic_iostream(const basic_iostream&) = delete;\n+\n+      basic_iostream(basic_iostream&& __rhs)\n+      : __istream_type(std::move(__rhs)), __ostream_type(this)\n+      { }\n+\n+      // 27.7.3.3 Assign/swap\n+\n+      basic_iostream& operator=(const basic_iostream&) = delete;\n+\n+      basic_iostream&\n+      operator=(basic_iostream&& __rhs)\n+      {\n+\tswap(__rhs);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_iostream& __rhs)\n+      { __istream_type::swap(__rhs); }\n+#endif\n     };\n \n   /**"}, {"sha": "748b805ee7d66ed0e7d630166aa9421348da1620", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -384,6 +384,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       basic_ostream()\n       { this->init(0); }\n \n+#if __cplusplus >= 201103L\n+      // Non-standard constructor that does not call init()\n+      basic_ostream(basic_iostream<_CharT, _Traits>*) { }\n+\n+      basic_ostream(const basic_ostream&) = delete;\n+\n+      basic_ostream(basic_ostream&& __rhs)\n+      : __ios_type()\n+      { __ios_type::move(__rhs); }\n+\n+      // 27.7.3.3 Assign/swap\n+\n+      basic_ostream& operator=(const basic_ostream&) = delete;\n+\n+      basic_ostream&\n+      operator=(basic_ostream&& __rhs)\n+      {\n+\tswap(__rhs);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_ostream& __rhs)\n+      { __ios_type::swap(__rhs); }\n+#endif\n+\n       template<typename _ValueT>\n \t__ostream_type&\n \t_M_insert(_ValueT __v);"}, {"sha": "f074edaf2e1dcd645e7aff255398d9e90ec33430", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -113,6 +113,42 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())\n       { _M_stringbuf_init(__mode); }\n \n+#if __cplusplus >= 201103L\n+      basic_stringbuf(const basic_stringbuf&) = delete;\n+\n+      basic_stringbuf(basic_stringbuf&& __rhs)\n+      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),\n+      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))\n+      { __rhs._M_stringbuf_init(__rhs._M_mode); }\n+\n+      // 27.8.2.2 Assign and swap:\n+\n+      basic_stringbuf&\n+      operator=(const basic_stringbuf&) = delete;\n+\n+      basic_stringbuf&\n+      operator=(basic_stringbuf&& __rhs)\n+      {\n+\tconst __streambuf_type& __base = __rhs;\n+\t__streambuf_type::operator=(__base);\n+\tthis->pubimbue(__rhs.getloc());\n+\t_M_mode = __rhs._M_mode;\n+\t_M_string = std::move(__rhs._M_string);\n+\t__rhs._M_stringbuf_init(__rhs._M_mode);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_stringbuf& __rhs)\n+      {\n+\t__streambuf_type& __base = __rhs;\n+\t__streambuf_type::swap(__base);\n+\t__rhs.pubimbue(this->pubimbue(__rhs.getloc()));\n+\tstd::swap(_M_mode, __rhs._M_mode);\n+\tstd::swap(_M_string, __rhs._M_string);\n+      }\n+#endif\n+\n       // Get and set:\n       /**\n        *  @brief  Copying out the string buffer.\n@@ -337,6 +373,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~basic_istringstream()\n       { }\n \n+#if __cplusplus >= 201103L\n+      basic_istringstream(const basic_istringstream&) = delete;\n+\n+      basic_istringstream(basic_istringstream&& __rhs)\n+      : __istream_type(std::move(__rhs)),\n+      _M_stringbuf(std::move(__rhs._M_stringbuf))\n+      { __istream_type::set_rdbuf(&_M_stringbuf); }\n+\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_istringstream&\n+      operator=(const basic_istringstream&) = delete;\n+\n+      basic_istringstream&\n+      operator=(basic_istringstream&& __rhs)\n+      {\n+\t__istream_type::operator=(std::move(__rhs));\n+\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_istringstream& __rhs)\n+      {\n+\t__istream_type::swap(__rhs);\n+\t_M_stringbuf.swap(__rhs._M_stringbuf);\n+      }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -452,6 +517,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~basic_ostringstream()\n       { }\n \n+#if __cplusplus >= 201103L\n+      basic_ostringstream(const basic_ostringstream&) = delete;\n+\n+      basic_ostringstream(basic_ostringstream&& __rhs)\n+      : __ostream_type(std::move(__rhs)),\n+      _M_stringbuf(std::move(__rhs._M_stringbuf))\n+      { __ostream_type::set_rdbuf(&_M_stringbuf); }\n+\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_ostringstream&\n+      operator=(const basic_ostringstream&) = delete;\n+\n+      basic_ostringstream&\n+      operator=(basic_ostringstream&& __rhs)\n+      {\n+\t__ostream_type::operator=(std::move(__rhs));\n+\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_ostringstream& __rhs)\n+      {\n+\t__ostream_type::swap(__rhs);\n+\t_M_stringbuf.swap(__rhs._M_stringbuf);\n+      }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -564,6 +658,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~basic_stringstream()\n       { }\n \n+#if __cplusplus >= 201103L\n+      basic_stringstream(const basic_stringstream&) = delete;\n+\n+      basic_stringstream(basic_stringstream&& __rhs)\n+      : __iostream_type(std::move(__rhs)),\n+      _M_stringbuf(std::move(__rhs._M_stringbuf))\n+      { __iostream_type::set_rdbuf(&_M_stringbuf); }\n+\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_stringstream&\n+      operator=(const basic_stringstream&) = delete;\n+\n+      basic_stringstream&\n+      operator=(basic_stringstream&& __rhs)\n+      {\n+\t__iostream_type::operator=(std::move(__rhs));\n+\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_stringstream& __rhs)\n+      {\n+\t__iostream_type::swap(__rhs);\n+\t_M_stringbuf.swap(__rhs._M_stringbuf);\n+      }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -594,6 +717,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _M_stringbuf.str(__s); }\n     };\n \n+#if __cplusplus >= 201103L\n+  /// Swap specialization for stringbufs.\n+  template <class _CharT, class _Traits, class _Allocator>\n+    inline void\n+    swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,\n+\t basic_stringbuf<_CharT, _Traits, _Allocator>& __y)\n+    { __x.swap(__y); }\n+\n+  /// Swap specialization for istringstreams.\n+  template <class _CharT, class _Traits, class _Allocator>\n+    inline void\n+    swap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,\n+\t basic_istringstream<_CharT, _Traits, _Allocator>& __y)\n+    { __x.swap(__y); }\n+\n+  /// Swap specialization for ostringstreams.\n+  template <class _CharT, class _Traits, class _Allocator>\n+    inline void\n+    swap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,\n+\t basic_ostringstream<_CharT, _Traits, _Allocator>& __y)\n+    { __x.swap(__y); }\n+\n+  /// Swap specialization for stringstreams.\n+  template <class _CharT, class _Traits, class _Allocator>\n+    inline void\n+    swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,\n+\t basic_stringstream<_CharT, _Traits, _Allocator>& __y)\n+    { __x.swap(__y); }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "fce165f4e386455be10c645a13f4d444bab47aea", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -798,24 +798,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus < 201103L\n     private:\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // Side effect of DR 50.\n-      basic_streambuf(const basic_streambuf& __sb)\n-      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),\n-      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),\n-      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_end),\n-      _M_buf_locale(__sb._M_buf_locale)\n-      { }\n-\n-      basic_streambuf&\n-      operator=(const basic_streambuf&) { return *this; }\n #else\n     protected:\n-      basic_streambuf(const basic_streambuf&) = default;\n+#endif\n+      basic_streambuf(const basic_streambuf&);\n \n       basic_streambuf&\n-      operator=(const basic_streambuf&) = default;\n+      operator=(const basic_streambuf&);\n \n+#if __cplusplus >= 201103L\n       void\n       swap(basic_streambuf& __sb)\n       {\n@@ -830,6 +821,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     };\n \n+#if __cplusplus >= 201103L\n+  template<typename _CharT, typename _Traits>\n+    std::basic_streambuf<_CharT, _Traits>::\n+    basic_streambuf(const basic_streambuf&) = default;\n+\n+  template<typename _CharT, typename _Traits>\n+    std::basic_streambuf<_CharT, _Traits>&\n+    std::basic_streambuf<_CharT, _Traits>::\n+    operator=(const basic_streambuf&) = default;\n+#endif\n+\n   // Explicit specialization declarations, defined in src/streambuf.cc.\n   template<>\n     streamsize"}, {"sha": "cb7e1126ed08011dc1dc51bca64f3b538f0f5043", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -191,11 +191,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp, typename _Up = _Tp>\n     inline _Tp\n     exchange(_Tp& __obj, _Up&& __new_val)\n-    {\n-      _Tp __old_val = std::move(__obj);\n-      __obj = std::forward<_Up>(__new_val);\n-      return __old_val;\n-    }\n+    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }\n #endif\n \n   // Stores a tuple of indices.  Used by tuple and pair, and by bind() to"}, {"sha": "39425d41c227d2bc718615e0842134be8bac9934", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -36,6 +36,7 @@ sources = \\\n \tfuture.cc \\\n \thash_c++0x.cc \\\n \thashtable_c++0x.cc \\\n+\tios.cc \\\n \tlimits.cc \\\n \tmutex.cc \\\n \tplaceholders.cc \\\n@@ -49,7 +50,14 @@ sources = \\\n if ENABLE_EXTERN_TEMPLATE\n # XTEMPLATE_FLAGS = -fno-implicit-templates\n inst_sources = \\\n+\text11-inst.cc \\\n \tfstream-inst.cc \\\n+\tios-inst.cc \\\n+\tiostream-inst.cc \\\n+\tistream-inst.cc \\\n+\tostream-inst.cc \\\n+\tsstream-inst.cc \\\n+\tstreambuf-inst.cc \\\n \tstring-inst.cc \\\n \twstring-inst.cc\n else"}, {"sha": "70c6c4b61fdcc133a23c7b67580db6cad24c5b63", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -69,11 +69,15 @@ LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__11convenience_la_LIBADD =\n am__objects_1 = chrono.lo condition_variable.lo debug.lo \\\n \tfunctexcept.lo functional.lo future.lo hash_c++0x.lo \\\n-\thashtable_c++0x.lo limits.lo mutex.lo placeholders.lo \\\n+\thashtable_c++0x.lo ios.lo limits.lo mutex.lo placeholders.lo \\\n \trandom.lo regex.lo shared_ptr.lo snprintf_lite.lo \\\n \tsystem_error.lo thread.lo\n-@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = fstream-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.lo wstring-inst.lo\n+@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = ext11-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tfstream-inst.lo ios-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tiostream-inst.lo istream-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.lo sstream-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.lo string-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.lo\n am_libc__11convenience_la_OBJECTS = $(am__objects_1) $(am__objects_2)\n libc__11convenience_la_OBJECTS = $(am_libc__11convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n@@ -319,6 +323,7 @@ sources = \\\n \tfuture.cc \\\n \thash_c++0x.cc \\\n \thashtable_c++0x.cc \\\n+\tios.cc \\\n \tlimits.cc \\\n \tmutex.cc \\\n \tplaceholders.cc \\\n@@ -334,7 +339,14 @@ sources = \\\n \n # XTEMPLATE_FLAGS = -fno-implicit-templates\n @ENABLE_EXTERN_TEMPLATE_TRUE@inst_sources = \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\text11-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tfstream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tiostream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tistream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.cc\n "}, {"sha": "5d4f95b6ef5523288fc4c6aa42baf345c016c89e", "filename": "libstdc++-v3/src/c++11/ext11-inst.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fext11-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fext11-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fext11-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,40 @@\n+// Explicit instantiation file.\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/stdio_filebuf.h>\n+#include <ext/stdio_sync_filebuf.h>\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template class stdio_filebuf<char>;\n+  template class stdio_sync_filebuf<char>;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template class stdio_filebuf<wchar_t>;\n+  template class stdio_sync_filebuf<wchar_t>;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "979c252d8002fb99e9b3ed3b034b78304e5bc89b", "filename": "libstdc++-v3/src/c++11/ios-inst.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "previous_filename": "libstdc++-v3/src/c++98/ios-inst.cc"}, {"sha": "b5124ec6a276ef9225588439be6b3abd4421a35e", "filename": "libstdc++-v3/src/c++11/ios.cc", "status": "renamed", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -187,5 +187,73 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_callbacks = 0;\n   }\n \n+  void\n+  ios_base::_M_move(ios_base& __rhs) noexcept\n+  {\n+    _M_precision = __rhs._M_precision;\n+    _M_width = __rhs._M_width;\n+    _M_flags = __rhs._M_flags;\n+    _M_exception = __rhs._M_exception;\n+    _M_streambuf_state = __rhs._M_streambuf_state;\n+    _M_callbacks = std::__exchange(__rhs._M_callbacks, nullptr);\n+    if (_M_word != _M_local_word)\n+       delete[] _M_word;\n+    if (__rhs._M_word == __rhs._M_local_word)\n+     {\n+       _M_word = _M_local_word;\n+       _M_word_size = _S_local_word_size;\n+       for (int __i = 0; __i < _S_local_word_size; __i++)\n+\t _M_word[__i] = std::__exchange(__rhs._M_word[__i], {});\n+     }\n+    else\n+     {\n+       _M_word = std::__exchange(__rhs._M_word, __rhs._M_local_word);\n+       _M_word_size\n+\t = std::__exchange(__rhs._M_word_size, _S_local_word_size);\n+     }\n+    _M_ios_locale = __rhs._M_ios_locale;\n+  }\n+\n+  void\n+  ios_base::_M_swap(ios_base& __rhs) noexcept\n+  {\n+    std::swap(_M_precision, __rhs._M_precision);\n+    std::swap(_M_width, __rhs._M_width);\n+    std::swap(_M_flags, __rhs._M_flags);\n+    std::swap(_M_exception, __rhs._M_exception);\n+    std::swap(_M_streambuf_state, __rhs._M_streambuf_state);\n+    std::swap(_M_callbacks, __rhs._M_callbacks);\n+    const bool __lhs_local = _M_word == _M_local_word;\n+    const bool __rhs_local = __rhs._M_word == __rhs._M_local_word;\n+    if (__lhs_local && __rhs_local)\n+     std::swap(_M_local_word, __rhs._M_local_word); // array swap\n+    else\n+     {\n+       if (!__lhs_local && !__lhs_local)\n+\t std::swap(_M_word, __rhs._M_word);\n+       else\n+\t {\n+\t   ios_base* __local;\n+\t   ios_base* __allocated;\n+\t   if (__lhs_local)\n+\t     {\n+\t       __local = this;\n+\t       __allocated = &__rhs;\n+\t     }\n+\t   else\n+\t     {\n+\t       __local = &__rhs;\n+\t       __allocated= this;\n+\t     }\n+\t   for (int __i = 0; __i < _S_local_word_size; __i++)\n+\t     __allocated->_M_local_word[__i] = __local->_M_local_word[__i];\n+\t   __local->_M_word = __allocated->_M_word;\n+\t   __allocated->_M_word = __allocated->_M_local_word;\n+\t }\n+       std::swap(_M_word_size, __rhs._M_word_size);\n+     }\n+    std::swap(_M_ios_locale, __rhs._M_ios_locale);\n+  }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace", "previous_filename": "libstdc++-v3/src/c++98/ios.cc"}, {"sha": "149d9c23d673ca8346915532de9ae89251e9f029", "filename": "libstdc++-v3/src/c++11/iostream-inst.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fiostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fiostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fiostream-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "previous_filename": "libstdc++-v3/src/c++98/iostream-inst.cc"}, {"sha": "dc8832df8514ba708b56de5360d28643e0607051", "filename": "libstdc++-v3/src/c++11/istream-inst.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fistream-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "previous_filename": "libstdc++-v3/src/c++98/istream-inst.cc"}, {"sha": "5e8eab14c480d914e0cea1b9667175af3406244f", "filename": "libstdc++-v3/src/c++11/ostream-inst.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fostream-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "previous_filename": "libstdc++-v3/src/c++98/ostream-inst.cc"}, {"sha": "728946ef4749082975aad5cab33c9336a9c4f8b9", "filename": "libstdc++-v3/src/c++11/sstream-inst.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsstream-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "previous_filename": "libstdc++-v3/src/c++98/sstream-inst.cc"}, {"sha": "e79d6271d5bfb4814503634523e3dfae72367099", "filename": "libstdc++-v3/src/c++11/streambuf-inst.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstreambuf-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstreambuf-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstreambuf-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "previous_filename": "libstdc++-v3/src/c++98/streambuf-inst.cc"}, {"sha": "6da69f8ef2e30009b32ea8c1e0ec8e122b19bfac", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -87,14 +87,8 @@ inst_sources = \\\n \tallocator-inst.cc \\\n \tconcept-inst.cc \\\n \text-inst.cc \\\n-\tios-inst.cc \\\n-\tiostream-inst.cc \\\n-\tistream-inst.cc \\\n \tlocale-inst.cc \\\n \tmisc-inst.cc \\\n-\tostream-inst.cc \\\n-\tsstream-inst.cc \\\n-\tstreambuf-inst.cc \\\n \twlocale-inst.cc\n else\n # XTEMPLATE_FLAGS =\n@@ -114,7 +108,6 @@ sources = \\\n \tglobals_io.cc \\\n \thash_tr1.cc \\\n \thashtable_tr1.cc \\\n-\tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n \tios_locale.cc \\"}, {"sha": "38f96ccc943bfc0612aa16679eec5176894ce822", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -72,23 +72,19 @@ am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tmonetary_members.lo numeric_members.lo time_members.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = allocator-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tconcept-inst.lo ext-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.lo iostream-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tistream-inst.lo locale-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tmisc-inst.lo ostream-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.lo streambuf-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tlocale-inst.lo misc-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.lo\n am__objects_3 = parallel_settings.lo\n am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n \t$(am__objects_3)\n am__objects_5 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tcodecvt.lo complex_io.lo ctype.lo globals_io.lo hash_tr1.lo \\\n-\thashtable_tr1.lo ios.lo ios_failure.lo ios_init.lo \\\n-\tios_locale.lo list.lo list-aux.lo list-aux-2.lo \\\n-\tlist_associated.lo list_associated-2.lo locale.lo \\\n-\tlocale_init.lo locale_facets.lo localename.lo \\\n-\tmath_stubs_float.lo math_stubs_long_double.lo stdexcept.lo \\\n-\tstrstream.lo tree.lo istream.lo streambuf.lo valarray.lo \\\n-\t$(am__objects_1) $(am__objects_4)\n+\thashtable_tr1.lo ios_failure.lo ios_init.lo ios_locale.lo \\\n+\tlist.lo list-aux.lo list-aux-2.lo list_associated.lo \\\n+\tlist_associated-2.lo locale.lo locale_init.lo locale_facets.lo \\\n+\tlocalename.lo math_stubs_float.lo math_stubs_long_double.lo \\\n+\tstdexcept.lo strstream.lo tree.lo istream.lo streambuf.lo \\\n+\tvalarray.lo $(am__objects_1) $(am__objects_4)\n am_libc__98convenience_la_OBJECTS = $(am__objects_5)\n libc__98convenience_la_OBJECTS = $(am_libc__98convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n@@ -355,14 +351,8 @@ host_sources_extra = \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tallocator-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tconcept-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\text-inst.cc \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.cc \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tiostream-inst.cc \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tistream-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tlocale-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tmisc-inst.cc \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.cc \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.cc \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.cc\n \n parallel_sources = parallel_settings.cc\n@@ -378,7 +368,6 @@ sources = \\\n \tglobals_io.cc \\\n \thash_tr1.cc \\\n \thashtable_tr1.cc \\\n-\tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n \tios_locale.cc \\"}, {"sha": "f98f442cb9703d0e26ad99aae40bedd4bacb68dc", "filename": "libstdc++-v3/src/c++98/ext-inst.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fext-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fext-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fext-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -27,7 +27,6 @@\n //\n \n #include <ext/rope>\n-#include <ext/stdio_filebuf.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -47,8 +46,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     rope<char, std::allocator<char> >::\n     _S_fetch(_Rope_RopeRep<char, std::allocator<char> >*, size_type);\n \n-  template class stdio_filebuf<char>;\n-\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template\n     const unsigned long \n@@ -58,8 +55,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     wchar_t\n     rope<wchar_t, std::allocator<wchar_t> >::\n     _S_fetch(_Rope_RopeRep<wchar_t, std::allocator<wchar_t> >*, size_type);\n-\n-  template class stdio_filebuf<wchar_t>;\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "540e76d468c9da016743cbc5212a91ca0d451052", "filename": "libstdc++-v3/src/c++98/misc-inst.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -29,7 +29,6 @@\n #include <string>\n #include <istream>\n #include <ostream>\n-#include <ext/stdio_sync_filebuf.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -65,17 +64,3 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  template class stdio_sync_filebuf<char>;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template class stdio_sync_filebuf<wchar_t>;\n-#endif\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n-"}, {"sha": "2080a9b60e29e821925c4a1b00b1e43467b144ac", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/cons/char/copy_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fchar%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fchar%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fcons%2Fchar%2Fcopy_neg.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <fstream>\n+\n+void test()\n+{\n+  std::filebuf f;\n+  std::filebuf ff(f); // { dg-error \"deleted function\" }\n+  ff = f; // { dg-error \"deleted function\" }\n+}"}, {"sha": "84947d0a7fd52fd5cff3548a84919c9509ec7a8d", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/assign/1.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fassign%2F1.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-fileio \"\" }\n+\n+// 27.9.1.16 Assign and swap [fstream.assign]\n+\n+#include <fstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+string const name = \"fstream-assign.txt\";\n+\n+void\n+test01()\n+{\n+  string orig = \"Let the whole outside world consist of a long paper tape.\";\n+  {\n+    fstream f(name, ios::in|ios::out|ios::trunc);\n+    VERIFY( f.is_open() );\n+    f << orig;\n+    fstream f1;\n+    f1 = std::move(f);\n+    VERIFY( f1.is_open() );\n+    VERIFY( !f.is_open() );\n+    f1.seekg(0);\n+    string result;\n+    getline(f1, result);\n+    VERIFY( result == orig );\n+  }\n+  {\n+    fstream f(name, ios::in);\n+    VERIFY( f.is_open() );\n+    fstream f1;\n+    f1.swap(f);\n+    VERIFY( f1.is_open() );\n+    VERIFY( !f.is_open() );\n+    string result;\n+    getline(f1, result);\n+    VERIFY( result == orig );\n+  }\n+  {\n+    fstream f(name, ios::in);\n+    VERIFY( f.is_open() );\n+    fstream f1;\n+    swap(f1, f);\n+    VERIFY( f1.is_open() );\n+    VERIFY( !f.is_open() );\n+    string result;\n+    getline(f1, result);\n+    VERIFY( result == orig );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  wfstream f, f2;\n+  f2 = std::move(f);\n+  f2.swap(f);\n+  swap(f2, f);\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "1805e52f67eb3c977e1b44e454463255fd0faaa2", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/move.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fmove.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-fileio \"\" }\n+\n+// 27.9.1.15 basic_fstream constructors [fstream.cons]\n+\n+#include <fstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+std::string const name = \"fstream-move.txt\";\n+\n+void\n+test01()\n+{\n+  string orig = \"Let the whole outside world consist of a long paper tape.\";\n+  fstream f(name, ios::in|ios::out|ios::trunc);\n+  VERIFY( f.is_open() );\n+  f << orig;\n+  fstream f1 = std::move(f);\n+  VERIFY( f1.is_open() );\n+  VERIFY( !f.is_open() );\n+  f1.seekg(0);\n+  string result;\n+  getline(f1, result);\n+  VERIFY( result == orig );\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  wstring orig = L\"Let the whole outside world consist of a long paper tape.\";\n+  wfstream f(name, ios::in|ios::out|ios::trunc);\n+  VERIFY( f.is_open() );\n+  f << orig;\n+  wfstream f1 = std::move(f);\n+  VERIFY( f1.is_open() );\n+  VERIFY( !f.is_open() );\n+  f1.seekg(0);\n+  wstring result;\n+  getline(f1, result);\n+  VERIFY( result == orig );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "e652d47b4312cec80f935a46e27ff65b0397e2a4", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/assign/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fassign%2F1.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-fileio \"\" }\n+\n+// 27.9.1.8 Assign and swap [ifstream.assign]\n+\n+#include <fstream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+read(std::istream& in, std::ostream& out)\n+{\n+  std::string s;\n+  for (int i=0; i < 10; ++i)\n+  {\n+    getline(in, s);\n+    out << s << '\\n';\n+  }\n+}\n+\n+void\n+test01()\n+{\n+  std::string const name = \"thirty_years_among_the_dead_preproc.txt\";\n+  std::ostringstream ss0;\n+  {\n+    std::ifstream f0(name);\n+    read(f0, ss0);\n+  }\n+  {\n+    std::ifstream f0(name);\n+    std::ifstream f1;\n+    f1 = std::move(f0);\n+    VERIFY( !f0.is_open() );\n+    VERIFY( f1.is_open() );\n+    std::ostringstream ss1;\n+    read(f1, ss1);\n+    VERIFY( ss0.str() == ss1.str() );\n+  }\n+  {\n+    std::ifstream f0(name);\n+    std::ifstream f1;\n+    f1.swap(f0);\n+    VERIFY( !f0.is_open() );\n+    VERIFY( f1.is_open() );\n+    std::ostringstream ss1;\n+    read(f1, ss1);\n+    VERIFY( ss0.str() == ss1.str() );\n+  }\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wifstream f, f2;\n+  f2 = std::move(f);\n+  f2.swap(f);\n+  swap(f2, f);\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "afa2a62696a688c9be6cf24f6419e9fe038198b7", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/cons/move.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fmove.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-fileio \"\" }\n+\n+// 27.9.1.7 basic_ifstream constructors [ifstream.cons]\n+\n+#include <fstream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+read(std::istream& in, std::ostream& out)\n+{\n+  std::string s;\n+  for (int i=0; i < 10; ++i)\n+  {\n+    getline(in, s);\n+    out << s << '\\n';\n+  }\n+}\n+\n+void\n+test01()\n+{\n+  std::string const name = \"thirty_years_among_the_dead_preproc.txt\";\n+  std::ostringstream ss0;\n+  {\n+    std::ifstream f0(name);\n+    read(f0, ss0);\n+  }\n+  std::ifstream f0(name);\n+  std::ifstream f1 = std::move(f0);\n+  VERIFY( !f0.is_open() );\n+  VERIFY( f1.is_open() );\n+  std::ostringstream ss1;\n+  read(f1, ss1);\n+  VERIFY( ss0.str() == ss1.str() );\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wifstream f0(\"thirty_years_among_the_dead_preproc.txt\");\n+  std::wifstream f1 = std::move(f0);\n+  VERIFY( f1.is_open() );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a9ae2ae9eba5d20d866e6b1e8c1275954a6433df", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/assign/1.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fassign%2F1.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.8.3.2 Assign and swap [istringstream.assign]\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::istringstream s1(\"absence of a signal\");\n+  std::string s;\n+  s1 >> s;\n+\n+  std::istringstream s2;\n+  s2 = std::move(s1);\n+  s2 >> s;\n+  VERIFY(s == \"of\");\n+\n+  std::istringstream s3;\n+  s3.swap(s2);\n+  s3 >> s;\n+  VERIFY(s == \"a\");\n+\n+  swap(s1, s3);\n+  s1 >> s;\n+  VERIFY(s == \"signal\");\n+\n+  s2.str(\"should never be used as a signal\");\n+  s1 = std::move(s2);\n+  getline(s1, s);\n+  VERIFY(s == \"should never be used as a signal\");\n+  s3 = std::move(s1);\n+  VERIFY(s3.eof());\n+}\n+\n+void test02()\n+{\n+  std::istringstream s0{ \" 1234.5 \" };\n+  std::istringstream s;\n+  s = std::move(s0);\n+  char c{};\n+  s >> c;\n+  VERIFY( c == '1' );\n+  int i{};\n+  s >> i;\n+  VERIFY( i == 234 );\n+  double d{};\n+  s >> d;\n+  VERIFY( d == .5 );\n+}\n+\n+void test03()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wistringstream s0{ L\" 1234.5 \" };\n+  std::wistringstream s;\n+  s = std::move(s0);\n+  s.swap(s0);\n+  swap(s, s0);\n+  wchar_t c{};\n+  s >> c;\n+  VERIFY( c == L'1' );\n+  int i{};\n+  s >> i;\n+  VERIFY( i == 234 );\n+  double d{};\n+  s >> d;\n+  VERIFY( d == .5 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "77c1fbb2afe2ebc46f2c00017f7ffef9e18ce8a2", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/cons/move.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fmove.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,94 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.8.3.1 basic_istringstream constructors [istringstream.cons]\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::istringstream s1(\"absence of a signal\");\n+  std::string s;\n+  s1 >> s;\n+\n+  std::istringstream s2 = std::move(s1);\n+  s2 >> s;\n+  VERIFY(s == \"of\");\n+\n+  std::istringstream s3;\n+  s3 = std::move(s2);\n+  s3 >> s;\n+  VERIFY(s == \"a\");\n+\n+  s1 = std::move(s3);\n+  s1 >> s;\n+  VERIFY(s == \"signal\");\n+\n+  s2.str(\"should never be used as a signal\");\n+  s1 = std::move(s2);\n+  getline(s1, s);\n+  VERIFY(s == \"should never be used as a signal\");\n+  s3 = std::move(s1);\n+  VERIFY(s3.eof());\n+}\n+\n+void\n+test02()\n+{\n+  std::istringstream s0{ \" 1234.5 \" };\n+  std::istringstream s{ std::move(s0) };\n+  char c{};\n+  s >> c;\n+  VERIFY( c == '1' );\n+  int i{};\n+  s >> i;\n+  VERIFY( i == 234 );\n+  double d{};\n+  s >> d;\n+  VERIFY( d == .5 );\n+}\n+\n+void\n+test03()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wistringstream s0{ L\" 1234.5 \" };\n+  std::wistringstream s{ std::move(s0) };\n+  wchar_t c{};\n+  s >> c;\n+  VERIFY( c == L'1' );\n+  int i{};\n+  s >> i;\n+  VERIFY( i == 234 );\n+  double d{};\n+  s >> d;\n+  VERIFY( d == .5 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "7092ebe64a5fdbaa2d8904309d3aafec8acfe6c7", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/assign/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fassign%2F1.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-fileio \"\" }\n+\n+// 27.9.1.12 Assign and swap [ostringstream.assign]\n+\n+#include <fstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+string const name = \"ofstream-assign.txt\";\n+\n+void\n+test01()\n+{\n+  string s1 = \"Let the whole outside world\";\n+  string s2 = \" consist of a long paper tape.\";\n+  ofstream f(name, ios::trunc);\n+  VERIFY( f.is_open() );\n+  f << s1;\n+  {\n+    ofstream f1;\n+    f1 = std::move(f);\n+    VERIFY( f1.is_open() );\n+    VERIFY( !f.is_open() );\n+    f1 << s2;\n+    f1.swap(f);\n+    VERIFY( !f1.is_open() );\n+    VERIFY( f.is_open() );\n+    f << s1;\n+    swap(f1, f);\n+    f1 << s2;\n+  }\n+  ifstream in(name);\n+  string result;\n+  getline(in, result);\n+  VERIFY( result == (s1 + s2 + s1 + s2) );\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wofstream s0, s;\n+  s = std::move(s0);\n+  s.swap(s0);\n+  swap(s, s0);\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a6dca710132d267814b78623f67e27da22dc45c4", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/move.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fmove.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-fileio \"\" }\n+\n+// 27.9.1.11 basic_ofstream constructors [ofstream.cons]\n+\n+#include <fstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+std::string const name = \"ofstream-move.txt\";\n+\n+void\n+test01()\n+{\n+  string s1 = \"Let the whole outside world\";\n+  string s2 = \" consist of a long paper tape.\";\n+  ofstream f(name, ios::trunc);\n+  VERIFY( f.is_open() );\n+  f << s1;\n+  {\n+    ofstream f1 = std::move(f);\n+    VERIFY( f1.is_open() );\n+    VERIFY( !f.is_open() );\n+    f1 << s2;\n+  }\n+  ifstream in(name);\n+  string result;\n+  getline(in, result);\n+  VERIFY( result == (s1 + s2) );\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  wstring s1 = L\"Let the whole outside world\";\n+  wstring s2 = L\" consist of a long paper tape.\";\n+  wofstream f(name, ios::trunc);\n+  VERIFY( f.is_open() );\n+  f << s1;\n+  {\n+    wofstream f1 = std::move(f);\n+    VERIFY( f1.is_open() );\n+    VERIFY( !f.is_open() );\n+    f1 << s2;\n+  }\n+  wifstream in(name);\n+  wstring result;\n+  getline(in, result);\n+  VERIFY( result == (s1 + s2) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "01b92e9e3d1fa985384507a6cec7041d4b37bbcf", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/assign/1.cc", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fassign%2F1.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,117 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.8.4.2 Assign and swap [ostringstream.assign]\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+const std::string strings[] = {\n+  \"one could carry out the description of a machine, \",\n+  \"no matter how complicated, \",\n+  \"in characters which would be merely the letters of the alphabet, and so \",\n+  \"provide the mind with a method of knowing the machine and all its parts\"\n+};\n+\n+void\n+append(std::ostringstream& ss, std::string& s, const std::string& t)\n+{\n+  ss << t;\n+  s += t;\n+}\n+\n+// assign\n+void\n+test01()\n+{\n+  std::string exp;\n+  std::ostringstream s1;\n+  append(s1, exp, strings[0]);\n+\n+  std::ostringstream s2;\n+  s2 = std::move(s1);\n+  VERIFY( s2.str() == exp );\n+  append(s2, exp, strings[1]);\n+  VERIFY( s2.str() == exp );\n+\n+  std::ostringstream s3;\n+  s3 = std::move(s2);\n+  VERIFY( s3.str() == exp );\n+  append(s3, exp, strings[2]);\n+  VERIFY( s3.str() == exp );\n+\n+  s1.setstate(std::ios::failbit);\n+  s1 = std::move(s3);\n+  VERIFY( s1.good() );\n+  VERIFY( s1.str() == exp );\n+  append(s1, exp, strings[3]);\n+  VERIFY( s1.str() == exp );\n+}\n+\n+// swap\n+void\n+test02()\n+{\n+  std::string exp;\n+  std::ostringstream s1;\n+  append(s1, exp, strings[0]);\n+\n+  std::ostringstream s2;\n+  s2.swap(s1);\n+  VERIFY( s1.str().empty() );\n+  VERIFY( s2.str() == exp );\n+  append(s2, exp, strings[1]);\n+  VERIFY( s2.str() == exp );\n+\n+  std::ostringstream s3;\n+  swap(s3, s2);\n+  VERIFY( s2.str().empty() );\n+  VERIFY( s3.str() == exp );\n+  append(s3, exp, strings[2]);\n+  VERIFY( s3.str() == exp );\n+\n+  s1.setstate(std::ios::failbit);\n+  swap(s1, s3);\n+  VERIFY( s1.good() );\n+  VERIFY( s3.fail() );\n+  VERIFY( s2.str().empty() );\n+  VERIFY( s1.str() == exp );\n+  append(s1, exp, strings[3]);\n+  VERIFY( s1.str() == exp );\n+}\n+\n+void\n+test03()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wistringstream s0, s;\n+  s = std::move(s0);\n+  s.swap(s0);\n+  swap(s, s0);\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "26ccf1a8bcc46c689778d2ec4b7233a7b0766e3f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/cons/move.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fmove.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,82 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.8.4.1 basic_ostringstream constructors [ostringstream.cons]\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+const std::string strings[] = {\n+  \"one could carry out the description of a machine, \",\n+  \"no matter how complicated, \",\n+  \"in characters which would be merely the letters of the alphabet, and so \",\n+  \"provide the mind with a method of knowing the machine and all its parts\"\n+};\n+\n+void\n+append(std::ostringstream& ss, std::string& s, const std::string& t)\n+{\n+  ss << t;\n+  s += t;\n+}\n+\n+void\n+test01()\n+{\n+  std::string exp;\n+  std::ostringstream s1;\n+  append(s1, exp, strings[0]);\n+\n+  std::ostringstream s2 = std::move(s1);\n+  VERIFY( s2.good() );\n+  VERIFY( s2.rdbuf() != nullptr );\n+  VERIFY( s2.str() == exp );\n+  append(s2, exp, strings[1]);\n+  VERIFY( s2.str() == exp );\n+\n+  std::ostringstream s3 = std::move(s2);\n+  VERIFY( s3.good() );\n+  VERIFY( s3.rdbuf() != nullptr );\n+  VERIFY( s3.str() == exp );\n+  append(s3, exp, strings[2]);\n+  VERIFY( s3.str() == exp );\n+\n+  s1.str(\"\");\n+  s1.clear();\n+  exp.clear();\n+  append(s1, exp, strings[3]);\n+  VERIFY( s1.str() == exp );\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wostringstream s1;\n+  std::wostringstream s2 = std::move(s1);\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "0465461c7cba37ba61c172117a97de4351cd3e0f", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/assign/1.cc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fassign%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fassign%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fassign%2F1.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,100 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.8.5.2 Assign and swap [stringstream.assign]\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::stringstream s1;\n+  s1 << \"absence of a signal\";\n+  std::string s;\n+  s1 >> s;\n+\n+  std::stringstream s2;\n+  s2 = std::move(s1);\n+  s2 >> s;\n+  VERIFY(s == \"of\");\n+\n+  std::stringstream s3;\n+  s3.swap(s2);\n+  s3 >> s;\n+  VERIFY(s == \"a\");\n+\n+  swap(s1, s3);\n+  s1 >> s;\n+  VERIFY(s == \"signal\");\n+\n+  s2 << \"should never be used as a signal\";\n+  s1 = std::move(s2);\n+  getline(s1, s);\n+  VERIFY(s == \"should never be used as a signal\");\n+  s3 = std::move(s1);\n+  VERIFY(s3.eof());\n+}\n+\n+void test02()\n+{\n+  std::stringstream s0;\n+  s0 << \" 1234.5 \";\n+  std::stringstream s;\n+  s = std::move(s0);\n+  char c{};\n+  s >> c;\n+  VERIFY( c == '1' );\n+  int i{};\n+  s >> i;\n+  VERIFY( i == 234 );\n+  double d{};\n+  s >> d;\n+  VERIFY( d == .5 );\n+}\n+\n+void test03()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstringstream s0;\n+  s0 << L\" 1234.5 \";\n+  std::wstringstream s;\n+  s = std::move(s0);\n+  s.swap(s0);\n+  swap(s, s0);\n+  wchar_t c{};\n+  s >> c;\n+  VERIFY( c == L'1' );\n+  int i{};\n+  s >> i;\n+  VERIFY( i == 234 );\n+  double d{};\n+  s >> d;\n+  VERIFY( d == .5 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "3991e7c72a03f838ad9afc4a8426ed14316fa8e3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/cons/move.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b81754858b271df999993ac7c195acfb4558387/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fmove.cc?ref=9b81754858b271df999993ac7c195acfb4558387", "patch": "@@ -0,0 +1,82 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.8.5.1 basic_stringstream constructors [stringstream.cons]\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+const std::string strings[] = {\n+  \"one could carry out the description of a machine, \",\n+  \"no matter how complicated, \",\n+  \"in characters which would be merely the letters of the alphabet, and so \",\n+  \"provide the mind with a method of knowing the machine and all its parts\"\n+};\n+\n+void\n+append(std::stringstream& ss, std::string& s, const std::string& t)\n+{\n+  ss << t;\n+  s += t;\n+}\n+\n+void\n+test01()\n+{\n+  std::string exp;\n+  std::stringstream s1;\n+  append(s1, exp, strings[0]);\n+\n+  std::stringstream s2 = std::move(s1);\n+  VERIFY( s2.good() );\n+  VERIFY( s2.rdbuf() != nullptr );\n+  VERIFY( s2.str() == exp );\n+  append(s2, exp, strings[1]);\n+  VERIFY( s2.str() == exp );\n+\n+  std::stringstream s3 = std::move(s2);\n+  VERIFY( s3.good() );\n+  VERIFY( s3.rdbuf() != nullptr );\n+  VERIFY( s3.str() == exp );\n+  append(s3, exp, strings[2]);\n+  VERIFY( s3.str() == exp );\n+\n+  s1.str(\"\");\n+  s1.clear();\n+  exp.clear();\n+  append(s1, exp, strings[3]);\n+  VERIFY( s1.str() == exp );\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstringstream s1;\n+  std::wstringstream s2 = std::move(s1);\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}