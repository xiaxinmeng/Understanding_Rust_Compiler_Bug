{"sha": "0c221916d67f27c903415581260d9d975d2b3578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMyMjE5MTZkNjdmMjdjOTAzNDE1NTgxMjYwZDlkOTc1ZDJiMzU3OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-31T10:22:05Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-31T10:22:05Z"}, "message": "re PR fortran/67564 (Segfault on sourced allocattion statement with class(*) arrays)\n\n2016-01-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/67564\n\t* trans-expr.c (gfc_conv_procedure_call): For the vtable copy\n\tsubroutines, add a string length argument, when the actual\n\targument is an unlimited polymorphic class object.\n\n2016-01-31  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/67564\n\t* gfortran.dg/allocate_with_source_17.f03: New test.\n\nFrom-SVN: r233016", "tree": {"sha": "891070a190f33e067e9d830132859d2fec4a09da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/891070a190f33e067e9d830132859d2fec4a09da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c221916d67f27c903415581260d9d975d2b3578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c221916d67f27c903415581260d9d975d2b3578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c221916d67f27c903415581260d9d975d2b3578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c221916d67f27c903415581260d9d975d2b3578/comments", "author": null, "committer": null, "parents": [{"sha": "03e79d4fa1491a97e9d3b3b9a994cb11a9784e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e79d4fa1491a97e9d3b3b9a994cb11a9784e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03e79d4fa1491a97e9d3b3b9a994cb11a9784e30"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "ccc29c1d39d8697387b45db9ce84a7f66f62a6c5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0c221916d67f27c903415581260d9d975d2b3578", "patch": "@@ -1,3 +1,10 @@\n+2016-01-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/67564\n+\t* trans-expr.c (gfc_conv_procedure_call): For the vtable copy\n+\tsubroutines, add a string length argument, when the actual\n+\targument is an unlimited polymorphic class object.\n+\n 2016-01-30  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/69566"}, {"sha": "08b20e603655e4abac2dac17ec62715a5dd1e848", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0c221916d67f27c903415581260d9d975d2b3578", "patch": "@@ -5621,7 +5621,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n       if (sym->name[0] == '_' && e && e->ts.type == BT_CHARACTER\n \t  && strncmp (sym->name, \"__vtab_CHARACTER\", 16) == 0\n \t  && arg->next && arg->next->expr\n-\t  && arg->next->expr->ts.type == BT_DERIVED\n+\t  && (arg->next->expr->ts.type == BT_DERIVED\n+\t      || arg->next->expr->ts.type == BT_CLASS)\n \t  && arg->next->expr->ts.u.derived->attr.unlimited_polymorphic)\n \tvec_safe_push (stringargs, parmse.string_length);\n "}, {"sha": "aebc6e016b1b0266c443f257b321b89537c3caa6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c221916d67f27c903415581260d9d975d2b3578", "patch": "@@ -1,3 +1,8 @@\n+2016-01-31  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/67564\n+\t* gfortran.dg/allocate_with_source_17.f03: New test.\n+\n 2016-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69546"}, {"sha": "bce71f5bbceff8b401d9d32a28a1ba036f22ff3d", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_17.f03", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_17.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c221916d67f27c903415581260d9d975d2b3578/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_17.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_17.f03?ref=0c221916d67f27c903415581260d9d975d2b3578", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+!\n+! Tests the fix for PR67564 in which allocate with source for an unlimited\n+! polymorphic array and a character source would ICE.\n+!\n+! Contributed by Neil Carlson  <neil.n.carlson@gmail.com>\n+!\n+program main\n+  type :: any_vector\n+    class(*), allocatable :: x(:)\n+  end type\n+  type(any_vector) :: a\n+  character(kind = 1, len = 5) :: chr1(3) = [\"one  \",\"two  \",\"three\"]\n+  character(kind = 4, len = 2) :: chr4(2) = [character(kind=4) :: 4_\"ab\", 4_\"cd\"]\n+  real(8) :: r(2) = [1d0,2d0]\n+\n+  allocate (a%x(3), source = chr1)\n+  call check\n+  allocate (a%x(2), source = chr4)\n+  call check\n+  allocate (a%x(2), source = r)\n+  call check\n+\n+contains\n+  subroutine check\n+    select type (z => a%x)\n+      type is (real(8))\n+        if (any (z .ne. r)) call abort\n+      type is (character(kind = 1, len = *))\n+        if (any(z .ne. chr1)) call abort\n+      type is (character(kind = 4, len = *))\n+        if (any(z .ne. chr4)) call abort\n+    end select\n+    deallocate (a%x)\n+  end subroutine\n+end program"}]}