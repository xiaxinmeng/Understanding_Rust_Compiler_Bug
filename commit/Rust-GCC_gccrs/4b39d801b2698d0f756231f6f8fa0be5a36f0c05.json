{"sha": "4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIzOWQ4MDFiMjY5OGQwZjc1NjIzMWY2ZjhmYTBiZTVhMzZmMGMwNQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-02-08T23:33:08Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-02-08T23:33:08Z"}, "message": "rs6000: Fix testsuite fallout from previous fix. [PR93136]\n\nThe fix for PR target/92923 exposed some test cases with fragile\nscan-assembler-times counting.  Split the test cases into smaller\nfunctions, which allows less chance of optimizations causing slight\ninstruction count numbers.\n\ngcc/testsuite/\n\tPR target/93136\n\t* gcc.dg/vmx/ops.c: Add -flax-vector-conversions to dg-options.\n\t* gcc.target/powerpc/vsx-vector-6.h: Split tests into smaller functions.\n\t* gcc.target/powerpc/vsx-vector-6.p7.c: Adjust scan-assembler-times\n\tregex directives.  Adjust expected instruction counts.\n\t* gcc.target/powerpc/vsx-vector-6.p8.c: Likewise.\n\t* gcc.target/powerpc/vsx-vector-6.p9.c: Likewise.", "tree": {"sha": "ee75ca65bc0fd3dc476cb2c453177c391877775e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee75ca65bc0fd3dc476cb2c453177c391877775e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b780f68e025b2cf5631183e199ebf672ea463af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b780f68e025b2cf5631183e199ebf672ea463af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b780f68e025b2cf5631183e199ebf672ea463af6"}], "stats": {"total": 541, "additions": 269, "deletions": 272}, "files": [{"sha": "b9548b34f01d78849848b8ff467c990dace07ed9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "patch": "@@ -1,3 +1,13 @@\n+2020-02-08  Peter Bergner <bergner@linux.ibm.com>\n+\n+\tPR target/93136\n+\t* gcc.dg/vmx/ops.c: Add -flax-vector-conversions to dg-options.\n+\t* gcc.target/powerpc/vsx-vector-6.h: Split tests into smaller functions.\n+\t* gcc.target/powerpc/vsx-vector-6.p7.c: Adjust scan-assembler-times\n+\tregex directives.  Adjust expected instruction counts.\n+\t* gcc.target/powerpc/vsx-vector-6.p8.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vector-6.p9.c: Likewise.\n+\n 2020-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/93549"}, {"sha": "4a0650c06bdf2e2661c409c9cac22a81bc5569fb", "filename": "gcc/testsuite/gcc.dg/vmx/ops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops.c?ref=4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mno-vsx -Wno-deprecated\" } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mno-vsx -Wno-deprecated -flax-vector-conversions\" } */\n #include <altivec.h>\n #include <stdlib.h>\n extern char * *var_char_ptr;"}, {"sha": "0106e8d2901a9c3efe6f2694341fe5737c7952a6", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6.h", "status": "modified", "additions": 146, "deletions": 159, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.h?ref=4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "patch": "@@ -1,167 +1,154 @@\n-/* This test code is included into vsx-vector-6-be.c and vsx-vector-6-le.c.  \n-   The two files have the tests for the number of instructions generated for\n-   LE versus BE.  */\n+/* This test code is included into vsx-vector-6.p7.c, vsx-vector-6.p8.c\n+   and vsx-vector-6.p9.c.  The .c files have the tests for the number\n+   of instructions generated for each cpu type.  */\n \n #include <altivec.h>\n \n-void foo (vector double *out, vector double *in, vector long *p_l, vector bool long *p_b,\n-\t  vector unsigned char *p_uc, int *i, vector float *p_f,\n-\t  vector bool char *outbc, vector bool int *outbi,\n-\t  vector bool short *outbsi, vector int *outsi,\n-\t  vector unsigned int *outui, vector signed char *outsc,\n-\t  vector unsigned char *outuc)\n+typedef struct {\n+  vector double d;\n+  vector float f;\n+  vector long sl;\n+  vector int si;\n+  vector short ss;\n+  vector char sc;\n+  vector unsigned int ui;\n+  vector unsigned short int us;\n+  vector unsigned char uc;\n+  vector bool long long bll;\n+  vector bool long bl;\n+  vector bool int bi;\n+  vector bool short bs;\n+  vector bool char bc;\n+} opnd_t;\n+\n+void\n+func_1op (opnd_t *dst, opnd_t *src)\n {\n-  vector double in0 = in[0];\n-  vector double in1 = in[1];\n-  vector double in2 = in[2];\n-  vector long inl = *p_l;\n-  vector bool long inb = *p_b;\n-  vector bool long long inbl0;\n-  vector bool long long inbl1;\n-  vector unsigned char uc = *p_uc;\n-  vector float inf0;\n-  vector float inf1;\n-  vector float inf2;\n-  vector char inc0;\n-  vector char inc1;\n-  vector bool char inbc0;\n-  vector bool char inbc1;\n-  vector bool short inbs0;\n-  vector bool short inbs1;\n-  vector bool int inbi0;\n-  vector bool int inbi1;\n-  vector signed short int inssi0, inssi1;\n-  vector unsigned short int inusi0, inusi1;\n-  vector signed int insi0, insi1;\n-  vector unsigned int inui0, inui1;\n-  vector unsigned char inuc0, inuc1;\n-  \n-  *out++ = vec_abs (in0);\n-  *out++ = vec_add (in0, in1);\n-  *out++ = vec_and (in0, in1);\n-  *out++ = vec_and (in0, inb);\n-  *out++ = vec_and (inb, in0);\n-  *out++ = vec_andc (in0, in1);\n-  *out++ = vec_andc (in0, inb);\n-  *out++ = vec_andc (inb, in0);\n-  *out++ = vec_andc (inbl0, in0);\n-  *out++ = vec_andc (in0, inbl0);\n-\n-  *out++ = vec_ceil (in0);\n-  *p_b++ = vec_cmpeq (in0, in1);\n-  *p_b++ = vec_cmpgt (in0, in1);\n-  *p_b++ = vec_cmpge (in0, in1);\n-  *p_b++ = vec_cmplt (in0, in1);\n-  *p_b++ = vec_cmple (in0, in1);\n-  *out++ = vec_div (in0, in1);\n-  *out++ = vec_floor (in0);\n-  *out++ = vec_madd (in0, in1, in2);\n-  *out++ = vec_msub (in0, in1, in2);\n-  *out++ = vec_max (in0, in1);\n-  *out++ = vec_min (in0, in1);\n-  *out++ = vec_msub (in0, in1, in2);\n-  *out++ = vec_mul (in0, in1);\n-  *out++ = vec_nearbyint (in0);\n-  *out++ = vec_nmadd (in0, in1, in2);\n-  *out++ = vec_nmsub (in0, in1, in2);\n-  *out++ = vec_nor (in0, in1);\n-  *out++ = vec_or (in0, in1);\n-  *out++ = vec_or (in0, inb);\n-  *out++ = vec_or (inb, in0);\n-  *out++ = vec_perm (in0, in1, uc);\n-  *out++ = vec_rint (in0);\n-  *out++ = vec_sel (in0, in1, inl);\n-  *out++ = vec_sel (in0, in1, inb);\n-  *out++ = vec_sub (in0, in1);\n-  *out++ = vec_sqrt (in0);\n-  *out++ = vec_trunc (in0);\n-  *out++ = vec_xor (in0, in1);\n-  *out++ = vec_xor (in0, inb);\n-  *out++ = vec_xor (inb, in0);\n-\n-  *i++ = vec_all_eq (in0, in1);\n-  *i++ = vec_all_ge (in0, in1);\n-  *i++ = vec_all_gt (in0, in1);\n-  *i++ = vec_all_le (in0, in1);\n-  *i++ = vec_all_lt (in0, in1);\n-  *i++ = vec_all_nan (in0);\n-  *i++ = vec_all_ne (in0, in1);\n-  *i++ = vec_all_nge (in0, in1);\n-  *i++ = vec_all_ngt (in0, in1);\n-  *i++ = vec_all_nle (in0, in1);\n-  *i++ = vec_all_nlt (in0, in1);\n-  *i++ = vec_all_numeric (in0);\n-  *i++ = vec_any_eq (in0, in1);\n-  *i++ = vec_any_ge (in0, in1);\n-  *i++ = vec_any_gt (in0, in1);\n-  *i++ = vec_any_le (in0, in1);\n-  *i++ = vec_any_lt (in0, in1);\n-  *i++ = vec_any_nan (in0);\n-  *i++ = vec_any_ne (in0, in1);\n-  *i++ = vec_any_nge (in0, in1);\n-  *i++ = vec_any_ngt (in0, in1);\n-  *i++ = vec_any_nle (in0, in1);\n-  *i++ = vec_any_nlt (in0, in1);\n-  *i++ = vec_any_numeric (in0);\n-\n-  *p_f++ = vec_msub (inf0, inf1, inf2);\n-  *p_f++ = vec_nmsub (inf0, inf1, inf2);\n-  *p_f++ = vec_nmadd (inf0, inf1, inf2);\n-  *p_f++ = vec_or (inf0, inf1);\n-  *p_f++ = vec_trunc (inf0);\n-  \n-  *out++ = vec_or (inbl0, in0);\n-  *out++ = vec_or (in0, inbl0);\n-\n-  *out++ = vec_nor (in0, in1);\n-\n-  *outbc++ = vec_nor (inbc0, inbc1);\n-  *outbc++ = vec_andc (inbc0, inbc1);\n-  *outbc++ = vec_or (inbc0, inbc1);\n-\n-  *outuc++ = vec_max (inuc0, inuc1);\n-\n-  *outbi++ = vec_andc (inbi0, inbi1);\n-  *outbsi++ = vec_andc (inbs0, inbs1);\n-\n-  *outbsi++ = vec_andc (inbs0, inbs1);\n-\n-  *outbi++ = vec_nor (inbi0, inbi1);\n-  *outbi++ = vec_or (inbi0, inbi1);\n-\n-  *outbsi++ = vec_nor (inbs0, inbs1);\n-  *outbsi++ = vec_or (inbs0, inbs1);\n-\n-  *outsi++ = vec_msums(inssi0, inssi1, insi0);\n-  *outui++ = vec_msums(inusi0, inusi1, inui0);\n-\n-  *p_f++ = vec_nor (inf0, inf1);\n-\n-  *p_f++ = vec_andc (inf0, inf1);\n-  *p_f++ = vec_andc (inbi0, inf0);\n-  *p_f++ = vec_andc (inf0, inbi0);\n-\n-  *in++ = vec_andc (inbl0, in1);\n-  *in++ = vec_andc (in0, inbl1);\n+  dst[0].d = vec_abs (src[0].d);\n+  dst[1].d = vec_ceil (src[1].d);\n+  dst[2].d = vec_floor (src[2].d);\n+  dst[3].d = vec_nearbyint (src[3].d);\n+  dst[4].d = vec_rint (src[4].d);\n+  dst[5].d = vec_sqrt (src[5].d);\n+  dst[6].d = vec_trunc (src[6].d);\n+  dst[7].f = vec_trunc (src[7].f);\n }\n \n-int main()\n+void\n+func_2op (opnd_t *dst, opnd_t *src0, opnd_t *src1)\n {\n-  vector double *out;\n-  vector double *in;\n-  vector long *p_l;\n-  vector bool long *p_b;\n-  vector unsigned char *p_uc;\n-  int *i;\n-  vector float *p_f;\n-  vector bool char *outbc;\n-  vector bool int *outbi;\n-  vector bool short *outbsi;\n-  vector int *outsi;\n-  vector unsigned int *outui;\n-  vector signed char *outsc;\n-  vector unsigned char *outuc;\n-\n-  foo (out, in, p_l, p_b, p_uc, i, p_f, outbc,\n-       outbi, outbsi, outsi, outui, outsc, outuc);\n+  dst[0].d = vec_add (src0[0].d, src1[0].d);\n+  dst[1].d = vec_div (src0[1].d, src1[1].d);\n+  dst[2].d = vec_max (src0[2].d, src1[2].d);\n+  dst[3].uc = vec_max (src0[3].uc, src1[3].uc);\n+  dst[4].d = vec_min (src0[4].d, src1[4].d);\n+  dst[5].d = vec_mul (src0[5].d, src1[5].d);\n+  dst[6].d = vec_sub (src0[6].d, src1[6].d);\n+}\n+\n+void\n+func_2lop (opnd_t *dst, opnd_t *src0, opnd_t *src1)\n+{\n+  dst[0].d = vec_and (src0[0].d, src1[0].d);\n+  dst[1].d = vec_and (src0[1].d, src1[1].bl);\n+  dst[2].d = vec_and (src0[2].bl, src1[2].d);\n+\n+  dst[3].d = vec_andc (src0[3].d, src1[3].d);\n+  dst[4].d = vec_andc (src0[4].d, src1[4].bl);\n+  dst[5].d = vec_andc (src0[5].bl, src1[5].d);\n+  dst[6].d = vec_andc (src0[6].bll, src1[6].d);\n+  dst[7].d = vec_andc (src0[7].d, src1[7].bll);\n+  dst[8].bi = vec_andc (src0[8].bi, src1[8].bi);\n+  dst[9].bs = vec_andc (src0[9].bs, src1[9].bs);\n+  dst[10].bc = vec_andc (src0[10].bc, src1[10].bc);\n+  dst[11].f = vec_andc (src0[11].f, src1[11].f);\n+  dst[12].f = vec_andc (src0[12].bi, src1[12].f);\n+  dst[13].f = vec_andc (src0[13].f, src1[13].bi);\n+  dst[14].d = vec_andc (src0[14].bll, src1[14].d);\n+  dst[15].d = vec_andc (src0[15].d, src1[15].bll);\n+\n+  dst[16].d = vec_nor (src0[16].d, src1[16].d);\n+  dst[17].f = vec_nor (src0[17].f, src1[17].f);\n+  dst[18].bi = vec_nor (src0[18].bi, src1[18].bi);\n+  dst[19].bs = vec_nor (src0[19].bs, src1[19].bs);\n+  dst[20].bc = vec_nor (src0[20].bc, src1[20].bc);\n+\n+  dst[21].d = vec_or (src0[21].d, src1[21].d);\n+  dst[22].d = vec_or (src0[22].d, src1[22].bl);\n+  dst[23].d = vec_or (src0[23].bl, src1[23].d);\n+  dst[24].d = vec_or (src0[24].bll, src1[24].d);\n+  dst[25].d = vec_or (src0[25].d, src1[25].bll);\n+  dst[26].f = vec_or (src0[26].f, src1[26].f);\n+  dst[27].bi = vec_or (src0[27].bi, src1[27].bi);\n+  dst[28].bs = vec_or (src0[28].bs, src1[28].bs);\n+  dst[29].bc = vec_or (src0[29].bc, src1[29].bc);\n+\n+  dst[30].d = vec_xor (src0[30].d, src1[30].d);\n+  dst[31].d = vec_xor (src0[31].d, src1[31].bl);\n+  dst[32].d = vec_xor (src0[32].bl, src1[32].d);\n+}\n+\n+void\n+func_cmp (opnd_t *dst, opnd_t *src0, opnd_t *src1)\n+{\n+  dst[0].bl = vec_cmpeq (src0[0].d, src1[0].d);\n+  dst[1].bl = vec_cmpgt (src0[1].d, src1[1].d);\n+  dst[2].bl = vec_cmpge (src0[2].d, src1[2].d);\n+  dst[3].bl = vec_cmplt (src0[3].d, src1[3].d);\n+  dst[4].bl = vec_cmple (src0[4].d, src1[4].d);\n+}\n+\n+void\n+func_all_cmp (int *dst, opnd_t *src0, opnd_t *src1)\n+{\n+  dst[0] = vec_all_eq (src0[0].d, src1[0].d);\n+  dst[1] = vec_all_ge (src0[1].d, src1[1].d);\n+  dst[2] = vec_all_gt (src0[2].d, src1[2].d);\n+  dst[3] = vec_all_le (src0[3].d, src1[3].d);\n+  dst[4] = vec_all_lt (src0[4].d, src1[4].d);\n+  dst[5] = vec_all_nan (src0[5].d);\n+  dst[6] = vec_all_ne (src0[6].d, src1[6].d);\n+  dst[7] = vec_all_nge (src0[7].d, src1[7].d);\n+  dst[8] = vec_all_ngt (src0[8].d, src1[8].d);\n+  dst[9] = vec_all_nle (src0[9].d, src1[9].d);\n+  dst[10] = vec_all_nlt (src0[10].d, src1[10].d);\n+  dst[11] = vec_all_numeric (src0[11].d);\n+  dst[12] = vec_any_eq (src0[12].d, src1[12].d);\n+  dst[13] = vec_any_ge (src0[13].d, src1[13].d);\n+  dst[14] = vec_any_gt (src0[14].d, src1[14].d);\n+  dst[15] = vec_any_le (src0[15].d, src1[15].d);\n+  dst[16] = vec_any_lt (src0[16].d, src1[16].d);\n+  dst[17] = vec_any_nan (src0[17].d);\n+  dst[18] = vec_any_ne (src0[18].d, src1[18].d);\n+  dst[19] = vec_any_nge (src0[19].d, src1[19].d);\n+  dst[20] = vec_any_ngt (src0[20].d, src1[20].d);\n+  dst[21] = vec_any_nle (src0[21].d, src1[21].d);\n+  dst[22] = vec_any_nlt (src0[22].d, src1[22].d);\n+  dst[23] = vec_any_numeric (src0[23].d);\n+}\n+\n+void\n+func_3op (opnd_t *dst, opnd_t *src0, opnd_t *src1, opnd_t *src2)\n+{\n+  dst[0].d = vec_madd (src0[0].d, src1[0].d, src2[0].d);\n+  dst[1].d = vec_msub (src0[1].d, src1[1].d, src2[1].d);\n+  dst[2].d = vec_nmadd (src0[2].d, src1[2].d, src2[2].d);\n+  dst[3].d = vec_nmsub (src0[3].d, src1[3].d, src2[3].d);\n+\n+  dst[4].f = vec_madd (src0[4].f, src1[4].f, src2[4].f);\n+  dst[5].f = vec_msub (src0[5].f, src1[5].f, src2[5].f);\n+  dst[6].f = vec_nmsub (src0[6].f, src1[6].f, src2[6].f);\n+  dst[7].f = vec_nmadd (src0[7].f, src1[7].f, src2[7].f);\n+\n+#if defined (__BIG_ENDIAN__) || defined (_ARCH_PWR9)\n+  dst[8].d = vec_perm (src0[8].d, src1[8].d, src2[8].uc);\n+#else\n+  dst[8].d = vec_perm (src0[8].d, src1[8].d, ~src2[8].uc);\n+#endif\n+\n+  dst[9].d = vec_sel (src0[9].d, src1[9].d, src2[9].d);\n+  dst[10].d = vec_sel (src0[10].d, src1[10].d, src2[10].bl);\n+\n+  dst[11].si = vec_msums(src0[11].ss, src1[11].ss, src2[11].si);\n+  dst[12].ui = vec_msums(src0[12].us, src1[12].us, src2[12].ui);\n }"}, {"sha": "ff560dd8d4f4a13293e65698b7c317109b6392af", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6.p7.c", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p7.c?ref=4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "patch": "@@ -1,41 +1,43 @@\n-/* { dg-do compile { target { lp64 && be } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-mvsx -O2 -mdejagnu-cpu=power7 -dp\" } */\n-\n-/* Expected instruction counts for Power 7 */\n-\n-/* { dg-final { scan-assembler-times \"xvabsdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvadddp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 5 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpeqdp\\s} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpeqdp\\.\\s} 5 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgtdp\\s} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgtdp\\.\\s} 5 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgedp\\s} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgedp\\.\\s} 6 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpim\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmaddadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmsubadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvsubdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmaxdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmindp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmuldp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vperm\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpic\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xvsqrtdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpiz\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmsubasp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvnmaddasp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvnmaddadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvnmsubadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmsumshs\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xxland\" 13 } } */\n-/* { dg-final { scan-assembler-times \"xxlxor\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xxsel\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpip\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvdivdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpi\" 7 } } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power7\" } */\n \n /* Source code for the test in vsx-vector-6.h */\n #include \"vsx-vector-6.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvmaxub\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmsumshs\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmsumuhs\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvabsdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvadddp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpeqdp\\M} 9 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpgedp\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpgtdp\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxvdivdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmadd[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmadd[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmaxdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmindp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmsub[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmsub[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmuldp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmadd[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmadd[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmsub[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmsub[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpi\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpic\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpim\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpip\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpiz\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrspiz\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvsqrtdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvsubdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxxland\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlandc\\M} 13 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlnor\\M} 5 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlor\\M} 9 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlxor\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M} 2 } } */"}, {"sha": "a99da65049281e06aa5188ae7ec2e5c6421d79a4", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6.p8.c", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p8.c?ref=4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "patch": "@@ -1,49 +1,43 @@\n /* { dg-do compile { target lp64 } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-mvsx -O2 -mdejagnu-cpu=power8\" } */\n-\n-/* Expected instruction counts for Power 8.  */\n-\n-/* { dg-final { scan-assembler-times \"xvabsdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvadddp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 6 { target le } } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 5 { target be } } } */\n-\n-/* We generate xxlor instructions for many reasons other than or'ing vector\n-   operands or calling __builtin_vec_or(), which  means we cannot rely on\n-   their usage counts being stable.  Therefore, we just ensure at least one\n-   xxlor instruction was generated.  */\n-/* { dg-final { scan-assembler \"xxlor\" } } */\n-\n-/* { dg-final { scan-assembler-times {\\mxvcmpeqdp\\s} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpeqdp\\.\\s} 5 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgtdp\\s} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgtdp\\.\\s} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgedp\\s} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcmpgedp\\.\\s} 4 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpim\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmaddadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmsubadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvsubdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmaxdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmindp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmuldp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vperm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpic\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvsqrtdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpiz\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmsubasp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvnmaddasp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvnmaddadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvnmsubadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmsumshs\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxland\" 13 } } */\n-/* { dg-final { scan-assembler-times \"xxlxor\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xxsel\" 2 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpip\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvdivdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpi\" 5 } } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n \n /* Source code for the test in vsx-vector-6.h */\n #include \"vsx-vector-6.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvmaxub\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmsumshs\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmsumuhs\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvperm\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvabsdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvadddp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpeqdp\\M} 9 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpgedp\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpgtdp\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxvdivdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmadd[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmadd[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmaxdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmindp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmsub[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmsub[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmuldp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmadd[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmadd[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmsub[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmsub[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpi\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpic\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpim\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpip\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpiz\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrspiz\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvsqrtdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvsubdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxxland\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlandc\\M} 13 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlnor\\M} 5 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlor\\M} 9 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlxor\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M} 2 } } */"}, {"sha": "eabdf71a7becda357598f62b82541d3b4510f2a7", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-6.p9.c", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b39d801b2698d0f756231f6f8fa0be5a36f0c05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-6.p9.c?ref=4b39d801b2698d0f756231f6f8fa0be5a36f0c05", "patch": "@@ -1,38 +1,42 @@\n /* { dg-do compile { target lp64 } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mvsx -O2 -mdejagnu-cpu=power9\" } */\n-\n-/* Expected instruction counts for Power9. */\n-\n-/* { dg-final { scan-assembler-times \"xvabsdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvadddp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 5 } } */\n-\n-/* We generate xxlor instructions for many reasons other than or'ing vector\n-   operands or calling __builtin_vec_or(), which  means we cannot rely on\n-   their usage counts being stable.  Therefore, we just ensure at least one\n-   xxlor instruction was generated.  */\n-/* { dg-final { scan-assembler \"xxlor\" } } */\n-\n-/* { dg-final { scan-assembler-times \"xvcmpeqdp\" 5 } } */\n-/* { dg-final { scan-assembler-times \"xvcmpgtdp\" 8 } } */\n-/* { dg-final { scan-assembler-times \"xvcmpgedp\" 8 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpim\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmaddadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmsubadp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvsubdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmaxdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmindp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmuldp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vperm\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpic\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvsqrtdp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvrdpiz\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvmsubasp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xvnmaddasp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmsumshs\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxland\" 13 } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n \n /* Source code for the test in vsx-vector-6.h */\n #include \"vsx-vector-6.h\"\n+\n+/* { dg-final { scan-assembler-times {\\mvmaxub\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmsumshs\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvmsumuhs\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvpermr?\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvabsdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvadddp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpeqdp\\M} 9 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpgedp\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxvcmpgtdp\\M} 10 } } */\n+/* { dg-final { scan-assembler-times {\\mxvdivdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmadd[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmadd[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmaxdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmindp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmsub[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmuldp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmadd[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmadd[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmsub[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvnmsub[am]sp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpi\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpic\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpim\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpip\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrdpiz\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvrspiz\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvsqrtdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmsub[am]dp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxxland\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlandc\\M} 13 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlnor\\M} 5 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlor\\M} 9 } } */\n+/* { dg-final { scan-assembler-times {\\mxxlxor\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mxxsel\\M} 2 } } */"}]}