{"sha": "5bd7afb71fca3a5a6e9f8586d86903bae1849193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJkN2FmYjcxZmNhM2E1YTZlOWY4NTg2ZDg2OTAzYmFlMTg0OTE5Mw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-23T14:40:09Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-23T14:40:09Z"}, "message": "c++: Fix folding of non-dependent BASELINKs [PR95468]\n\nHere, the problem ultimately seems to be that tsubst_copy_and_build,\nwhen called with empty args as we do during non-dependent expression\nfolding, doesn't touch BASELINKs at all: it delegates to tsubst_copy\nwhich then immediately exits early due to the empty args.  This means\nthat the CAST_EXPR int(1) in the BASELINK A::condition<int(1)> never\ngets folded (as part of folding of the overall CALL_EXPR), which later\ncauses us to crash when performing overload resolution of the rebuilt\nCALL_EXPR (which is still in terms of this templated BASELINK).\n\nThis doesn't happen when condition() is a namespace-scope function\nbecause then condition<int(1)> is represented by a TEMPLATE_ID_EXPR\nrather than by a BASELINK, which does get handled directly from\ntsubst_copy_and_build.\n\nThis patch fixes this issue by having tsubst_copy_and_build handle\nBASELINK directly rather than delegating to tsubst_copy, so that it\nprocesses BASELINKs even when args is empty.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95468\n\t* pt.c (tsubst_copy_and_build) <case BASELINK>: New case, copied\n\tover from tsubst_copy.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95468\n\t* g++.dg/template/non-dependent15.C: New test.", "tree": {"sha": "1967b2d7bd4f0593d0ddc6f4d9f91ce45deae1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1967b2d7bd4f0593d0ddc6f4d9f91ce45deae1e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bd7afb71fca3a5a6e9f8586d86903bae1849193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd7afb71fca3a5a6e9f8586d86903bae1849193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd7afb71fca3a5a6e9f8586d86903bae1849193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd7afb71fca3a5a6e9f8586d86903bae1849193/comments", "author": null, "committer": null, "parents": [{"sha": "cac960a3ec450377ebeea9a2ea563a545e54f2d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac960a3ec450377ebeea9a2ea563a545e54f2d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac960a3ec450377ebeea9a2ea563a545e54f2d6"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "3576e0effb68e73eec1bae2daad0856b31279530", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd7afb71fca3a5a6e9f8586d86903bae1849193/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd7afb71fca3a5a6e9f8586d86903bae1849193/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5bd7afb71fca3a5a6e9f8586d86903bae1849193", "patch": "@@ -19856,6 +19856,11 @@ tsubst_copy_and_build (tree t,\n     case SCOPE_REF:\n       RETURN (tsubst_qualified_id (t, args, complain, in_decl, /*done=*/true,\n \t\t\t\t  /*address_p=*/false));\n+\n+    case BASELINK:\n+      RETURN (tsubst_baselink (t, current_nonlambda_class_type (),\n+\t\t\t       args, complain, in_decl));\n+\n     case ARRAY_REF:\n       op1 = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\targs, complain, in_decl);"}, {"sha": "00dfe26d6bacd91462047b5efdb3d945215c3203", "filename": "gcc/testsuite/g++.dg/template/non-dependent15.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bd7afb71fca3a5a6e9f8586d86903bae1849193/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bd7afb71fca3a5a6e9f8586d86903bae1849193/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent15.C?ref=5bd7afb71fca3a5a6e9f8586d86903bae1849193", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/95468\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  template <int N>\n+  static constexpr int condition() { return N; }\n+};\n+\n+template <int> struct B {};\n+\n+template <class>\n+using T = B<A::condition<int(1)>()>;"}]}