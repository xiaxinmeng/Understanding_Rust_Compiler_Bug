{"sha": "0c3985a955aa99d2970234e2eeb622a6aca2c94c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzOTg1YTk1NWFhOTlkMjk3MDIzNGUyZWViNjIyYTZhY2EyYzk0Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:48:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:48:05Z"}, "message": "[multiple changes]\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb (Array_Type_Declaration): Check for case of using\n\ttype name as index.\n\t* lib.ads: Minor reformatting.\n\t* einfo.ads: Minor reformatting.\n\n2014-02-25  Doug Rupp  <rupp@adacore.com>\n\n\t* sem_mech.adb (Set_Mechanisms): For convention Fortran on VMS\n\tuse Short_Descriptor(S) as the argument passing mechanism.\n\n2014-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sigtramp-ppcvxw.c (CFI_COMMON_REGS): Also include r0.\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* atree.ads (Warnings_Treated_As_Errors): New variable.\n\t* errout.adb (Error_Msg_Internal): Set Warn_Err flag in\n\terror object (Initialize): Initialize Warnings_As_Errors_Count\n\t(Write_Error_Summary): Include count of warnings treated as errors.\n\t* erroutc.adb (Warning_Treated_As_Error): New function.\n\t(Matches): Function moved to outer level of package.\n\t* erroutc.ads (Error_Msg_Object): Add Warn_Err flag.\n\t(Warning_Treated_As_Error): New function.\n\t* gnat_rm.texi: Document pragma Treat_Warning_As_Error.\n\t* opt.adb: Add handling of Warnings_As_Errors_Count[_Config].\n\t* opt.ads (Config_Switches_Type): Add entry for\n\tWarnings_As_Errors_Count.\n\t(Warnings_As_Errors_Count): New variable.\n\t(Warnings_As_Errors): New array.\n\t* par-prag.adb: Add dummy entry for Warning_As_Error.\n\t* sem_prag.adb (Analyze_Pragma): Implement new pragma\n\tWarning_As_Error.\n\t* snames.ads-tmpl: Add entries for Warning_As_Error pragma.\n\nFrom-SVN: r208145", "tree": {"sha": "c657e55a67e37b4e6235e11e4f02a6b1350e7adc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c657e55a67e37b4e6235e11e4f02a6b1350e7adc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c3985a955aa99d2970234e2eeb622a6aca2c94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3985a955aa99d2970234e2eeb622a6aca2c94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3985a955aa99d2970234e2eeb622a6aca2c94c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3985a955aa99d2970234e2eeb622a6aca2c94c/comments", "author": null, "committer": null, "parents": [{"sha": "5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34"}], "stats": {"total": 517, "additions": 390, "deletions": 127}, "files": [{"sha": "8dc578e776e6efd3e9b739a65f1bc38fc7b88038", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -1,3 +1,40 @@\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb (Array_Type_Declaration): Check for case of using\n+\ttype name as index.\n+\t* lib.ads: Minor reformatting.\n+\t* einfo.ads: Minor reformatting.\n+\n+2014-02-25  Doug Rupp  <rupp@adacore.com>\n+\n+\t* sem_mech.adb (Set_Mechanisms): For convention Fortran on VMS\n+\tuse Short_Descriptor(S) as the argument passing mechanism.\n+\n+2014-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sigtramp-ppcvxw.c (CFI_COMMON_REGS): Also include r0.\n+\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.ads (Warnings_Treated_As_Errors): New variable.\n+\t* errout.adb (Error_Msg_Internal): Set Warn_Err flag in\n+\terror object (Initialize): Initialize Warnings_As_Errors_Count\n+\t(Write_Error_Summary): Include count of warnings treated as errors.\n+\t* erroutc.adb (Warning_Treated_As_Error): New function.\n+\t(Matches): Function moved to outer level of package.\n+\t* erroutc.ads (Error_Msg_Object): Add Warn_Err flag.\n+\t(Warning_Treated_As_Error): New function.\n+\t* gnat_rm.texi: Document pragma Treat_Warning_As_Error.\n+\t* opt.adb: Add handling of Warnings_As_Errors_Count[_Config].\n+\t* opt.ads (Config_Switches_Type): Add entry for\n+\tWarnings_As_Errors_Count.\n+\t(Warnings_As_Errors_Count): New variable.\n+\t(Warnings_As_Errors): New array.\n+\t* par-prag.adb: Add dummy entry for Warning_As_Error.\n+\t* sem_prag.adb (Analyze_Pragma): Implement new pragma\n+\tWarning_As_Error.\n+\t* snames.ads-tmpl: Add entries for Warning_As_Error pragma.\n+\n 2014-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sigtramp.h: Fix minor inaccuracy."}, {"sha": "e51cf88ba32bbe1b617e08d939f59976d2efc558", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -315,6 +315,10 @@ package Atree is\n    --  Number of warnings detected. Initialized to zero at the start of\n    --  compilation. Initialized for -gnatVa use, see comment above.\n \n+   Warnings_Treated_As_Errors : Nat := 0;\n+   --  Number of warnings changed into errors as a result of matching a pattern\n+   --  given in a Warning_As_Error configuration pragma.\n+\n    Configurable_Run_Time_Violations : Nat := 0;\n    --  Count of configurable run time violations so far. This is used to\n    --  suppress certain cascaded error messages when we know that we may not"}, {"sha": "473e2f186d02a0d17086cb86bed003e63334636d", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -820,10 +820,10 @@ package Einfo is\n --       depends on a private type.\n \n --    Designated_Type (synthesized)\n---       Applies to access types. Returns the designated type. Differs\n---       from Directly_Designated_Type in that if the access type refers\n---       to an incomplete type, and the full type is available, then this\n---       full type is returned instead of the incomplete type.\n+--       Applies to access types. Returns the designated type. Differs from\n+--       Directly_Designated_Type in that if the access type refers to an\n+--       incomplete type, and the full type is available, then this full type\n+--       is returned instead of the incomplete type.\n \n --    Digits_Value (Uint17)\n --       Defined in floating point types and subtypes and decimal types and"}, {"sha": "76b8cbc1d43a3ebd9015bd88bee568e292ce6377", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -690,6 +690,9 @@ package body Errout is\n \n       Temp_Msg : Error_Msg_Id;\n \n+      Warn_Err : Boolean;\n+      --  Set if warning to be treated as error\n+\n       procedure Handle_Serious_Error;\n       --  Internal procedure to do all error message handling for a serious\n       --  error message, other than bumping the error counts and arranging\n@@ -940,6 +943,7 @@ package body Errout is\n           Line     => Get_Physical_Line_Number (Sptr),\n           Col      => Get_Column_Number (Sptr),\n           Warn     => Is_Warning_Msg,\n+          Warn_Err => False, -- reset below\n           Warn_Chr => Warning_Msg_Char,\n           Style    => Is_Style_Msg,\n           Serious  => Is_Serious_Error,\n@@ -948,6 +952,21 @@ package body Errout is\n           Deleted  => False));\n       Cur_Msg := Errors.Last;\n \n+      --  Test if warning to be treated as error\n+\n+      Warn_Err :=\n+        Is_Warning_Msg\n+          and then (Warning_Treated_As_Error (Msg_Buffer (1 .. Msglen))\n+                      or else\n+                    Warning_Treated_As_Error (Get_Warning_Tag (Cur_Msg)));\n+\n+      --  Propagate Warn_Err to this message and preceding continuations\n+\n+      for J in reverse 1 .. Errors.Last loop\n+         Errors.Table (J).Warn_Err := Warn_Err;\n+         exit when not Errors.Table (J).Msg_Cont;\n+      end loop;\n+\n       --  If immediate errors mode set, output error message now. Also output\n       --  now if the -d1 debug flag is set (so node number message comes out\n       --  just before actual error message)\n@@ -1498,11 +1517,13 @@ package body Errout is\n       Last_Error_Msg := No_Error_Msg;\n       Serious_Errors_Detected := 0;\n       Total_Errors_Detected := 0;\n+      Warnings_Treated_As_Errors := 0;\n       Warnings_Detected := 0;\n+      Warnings_As_Errors_Count := 0;\n       Cur_Msg := No_Error_Msg;\n       List_Pragmas.Init;\n \n-      --  Initialize warnings table\n+      --  Initialize warnings tables\n \n       Warnings.Init;\n       Specific_Warnings.Init;\n@@ -1656,6 +1677,11 @@ package body Errout is\n                end if;\n \n                Write_Char (')');\n+\n+            elsif Warnings_Treated_As_Errors /= 0 then\n+               Write_Str (\" (\");\n+               Write_Int (Warnings_Treated_As_Errors);\n+               Write_Str (\" treated as errors)\");\n             end if;\n          end if;\n "}, {"sha": "5c7253255933aba5e9a8ee560249212f3545bf99", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 135, "deletions": 104, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -45,6 +45,15 @@ with Uintp;    use Uintp;\n \n package body Erroutc is\n \n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   function Matches (S : String; P : String) return Boolean;\n+   --  Returns true if the String S patches the pattern P, which can contain\n+   --  wild card chars (*). The entire pattern must match the entire string.\n+   --  Case is ignored in the comparison (so X matches x).\n+\n    ---------------\n    -- Add_Class --\n    ---------------\n@@ -104,13 +113,13 @@ package body Erroutc is\n       N1, N2 : Error_Msg_Id;\n \n       procedure Delete_Msg (Delete, Keep : Error_Msg_Id);\n-      --  Called to delete message Delete, keeping message Keep. Marks\n-      --  all messages of Delete with deleted flag set to True, and also\n-      --  makes sure that for the error messages that are retained the\n-      --  preferred message is the one retained (we prefer the shorter\n-      --  one in the case where one has an Instance tag). Note that we\n-      --  always know that Keep has at least as many continuations as\n-      --  Delete (since we always delete the shorter sequence).\n+      --  Called to delete message Delete, keeping message Keep. Marks all\n+      --  messages of Delete with deleted flag set to True, and also makes sure\n+      --  that for the error messages that are retained the preferred message\n+      --  is the one retained (we prefer the shorter one in the case where one\n+      --  has an Instance tag). Note that we always know that Keep has at least\n+      --  as many continuations as Delete (since we always delete the shorter\n+      --  sequence).\n \n       ----------------\n       -- Delete_Msg --\n@@ -219,7 +228,8 @@ package body Erroutc is\n    begin\n       return Total_Errors_Detected /= 0\n         or else (Warnings_Detected /= 0\n-                  and then Warning_Mode = Treat_As_Error);\n+                  and then Warning_Mode = Treat_As_Error)\n+        or else Warnings_Treated_As_Errors /= 0;\n    end Compilation_Errors;\n \n    ------------------\n@@ -289,6 +299,89 @@ package body Erroutc is\n       return Cur_Msg;\n    end Get_Msg_Id;\n \n+   ---------------------\n+   -- Get_Warning_Tag --\n+   ---------------------\n+\n+   function Get_Warning_Tag (Id : Error_Msg_Id) return String is\n+      Warn     : constant Boolean    := Errors.Table (Id).Warn;\n+      Warn_Chr : constant Character  := Errors.Table (Id).Warn_Chr;\n+   begin\n+      if Warn and then Warn_Chr /= ' ' then\n+         if Warn_Chr = '?' then\n+            return \" [enabled by default]\";\n+         elsif Warn_Chr in 'a' .. 'z' then\n+            return \" [-gnatw\" & Warn_Chr & ']';\n+         else pragma Assert (Warn_Chr in 'A' .. 'Z');\n+            return \" [-gnatw.\" & Fold_Lower (Warn_Chr) & ']';\n+         end if;\n+      else\n+         return \"\";\n+      end if;\n+   end Get_Warning_Tag;\n+\n+   -------------\n+   -- Matches --\n+   -------------\n+\n+   function Matches (S : String; P : String) return Boolean is\n+      Slast : constant Natural := S'Last;\n+      PLast : constant Natural := P'Last;\n+\n+      SPtr : Natural := S'First;\n+      PPtr : Natural := P'First;\n+\n+   begin\n+      --  Loop advancing through characters of string and pattern\n+\n+      SPtr := S'First;\n+      PPtr := P'First;\n+      loop\n+         --  Return True if pattern is a single asterisk\n+\n+         if PPtr = PLast and then P (PPtr) = '*' then\n+            return True;\n+\n+            --  Return True if both pattern and string exhausted\n+\n+         elsif PPtr > PLast and then SPtr > Slast then\n+            return True;\n+\n+            --  Return False, if one exhausted and not the other\n+\n+         elsif PPtr > PLast or else SPtr > Slast then\n+            return False;\n+\n+            --  Case where pattern starts with asterisk\n+\n+         elsif P (PPtr) = '*' then\n+\n+            --  Try all possible starting positions in S for match with the\n+            --  remaining characters of the pattern. This is the recursive\n+            --  call that implements the scanner backup.\n+\n+            for J in SPtr .. Slast loop\n+               if Matches (S (J .. Slast), P (PPtr + 1 .. PLast)) then\n+                  return True;\n+               end if;\n+            end loop;\n+\n+            return False;\n+\n+            --  Dealt with end of string and *, advance if we have a match\n+\n+         elsif Fold_Lower (S (SPtr)) = Fold_Lower (P (PPtr)) then\n+            SPtr := SPtr + 1;\n+            PPtr := PPtr + 1;\n+\n+            --  If first characters do not match, that's decisive\n+\n+         else\n+            return False;\n+         end if;\n+      end loop;\n+   end Matches;\n+\n    -----------------------\n    -- Output_Error_Msgs --\n    -----------------------\n@@ -455,32 +548,12 @@ package body Erroutc is\n       Length : Nat;\n       --  Maximum total length of lines\n \n-      Text     : constant String_Ptr := Errors.Table (E).Text;\n-      Warn     : constant Boolean    := Errors.Table (E).Warn;\n-      Warn_Chr : constant Character  := Errors.Table (E).Warn_Chr;\n-      Warn_Tag : String_Ptr;\n-      Ptr      : Natural;\n-      Split    : Natural;\n-      Start    : Natural;\n+      Text  : constant String_Ptr := Errors.Table (E).Text;\n+      Ptr   : Natural;\n+      Split : Natural;\n+      Start : Natural;\n \n    begin\n-      --  Add warning doc tag if needed\n-\n-      if Warn and then Warn_Chr /= ' ' then\n-         if Warn_Chr = '?' then\n-            Warn_Tag := new String'(\" [enabled by default]\");\n-\n-         elsif Warn_Chr in 'a' .. 'z' then\n-            Warn_Tag := new String'(\" [-gnatw\" & Warn_Chr & ']');\n-\n-         else pragma Assert (Warn_Chr in 'A' .. 'Z');\n-            Warn_Tag := new String'(\" [-gnatw.\" & Fold_Lower (Warn_Chr) & ']');\n-         end if;\n-\n-      else\n-         Warn_Tag := new String'(\"\");\n-      end if;\n-\n       --  Set error message line length\n \n       if Error_Msg_Line_Length = 0 then\n@@ -492,7 +565,7 @@ package body Erroutc is\n       Max := Integer (Length - Column + 1);\n \n       declare\n-         Txt : constant String  := Text.all & Warn_Tag.all;\n+         Txt : constant String  := Text.all & Get_Warning_Tag (E);\n          Len : constant Natural := Txt'Length;\n \n       begin\n@@ -502,8 +575,20 @@ package body Erroutc is\n             if Len < 6\n               or else Txt (Txt'First .. Txt'First + 5) /= \"info: \"\n             then\n-               Write_Str (\"warning: \");\n-               Max := Max - 9;\n+               --  One more check, if warning is to be treated as error, then\n+               --  here is where we deal with that.\n+\n+               if Errors.Table (E).Warn_Err then\n+                  Write_Str (\"warning(error): \");\n+                  Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n+                  Max := Max - 16;\n+\n+               --  Normal case\n+\n+               else\n+                  Write_Str (\"warning: \");\n+                  Max := Max - 9;\n+               end if;\n             end if;\n \n             --  No prefix needed for style message, \"(style)\" is there already\n@@ -1358,75 +1443,6 @@ package body Erroutc is\n      (Loc : Source_Ptr;\n       Msg : String_Ptr) return String_Id\n    is\n-      function Matches (S : String; P : String) return Boolean;\n-      --  Returns true if the String S patches the pattern P, which can contain\n-      --  wild card chars (*). The entire pattern must match the entire string.\n-      --  Case is ignored in the comparison (so X matches x).\n-\n-      -------------\n-      -- Matches --\n-      -------------\n-\n-      function Matches (S : String; P : String) return Boolean is\n-         Slast : constant Natural := S'Last;\n-         PLast : constant Natural := P'Last;\n-\n-         SPtr : Natural := S'First;\n-         PPtr : Natural := P'First;\n-\n-      begin\n-         --  Loop advancing through characters of string and pattern\n-\n-         SPtr := S'First;\n-         PPtr := P'First;\n-         loop\n-            --  Return True if pattern is a single asterisk\n-\n-            if PPtr = PLast and then P (PPtr) = '*' then\n-               return True;\n-\n-            --  Return True if both pattern and string exhausted\n-\n-            elsif PPtr > PLast and then SPtr > Slast then\n-               return True;\n-\n-            --  Return False, if one exhausted and not the other\n-\n-            elsif PPtr > PLast or else SPtr > Slast then\n-               return False;\n-\n-            --  Case where pattern starts with asterisk\n-\n-            elsif P (PPtr) = '*' then\n-\n-               --  Try all possible starting positions in S for match with\n-               --  the remaining characters of the pattern. This is the\n-               --  recursive call that implements the scanner backup.\n-\n-               for J in SPtr .. Slast loop\n-                  if Matches (S (J .. Slast), P (PPtr + 1 .. PLast)) then\n-                     return True;\n-                  end if;\n-               end loop;\n-\n-               return False;\n-\n-            --  Dealt with end of string and *, advance if we have a match\n-\n-            elsif Fold_Lower (S (SPtr)) = Fold_Lower (P (PPtr)) then\n-               SPtr := SPtr + 1;\n-               PPtr := PPtr + 1;\n-\n-            --  If first characters do not match, that's decisive\n-\n-            else\n-               return False;\n-            end if;\n-         end loop;\n-      end Matches;\n-\n-   --  Start of processing for Warning_Specifically_Suppressed\n-\n    begin\n       --  Loop through specific warning suppression entries\n \n@@ -1452,6 +1468,21 @@ package body Erroutc is\n       return No_String;\n    end Warning_Specifically_Suppressed;\n \n+   ------------------------------\n+   -- Warning_Treated_As_Error --\n+   ------------------------------\n+\n+   function Warning_Treated_As_Error (Msg : String) return Boolean is\n+   begin\n+      for J in 1 .. Warnings_As_Errors_Count loop\n+         if Matches (Msg, Warnings_As_Errors (J).all) then\n+            return True;\n+         end if;\n+      end loop;\n+\n+      return False;\n+   end Warning_Treated_As_Error;\n+\n    -------------------------\n    -- Warnings_Suppressed --\n    -------------------------"}, {"sha": "fa4db90b4b7472302857e06d0766f1cabd781f07", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -195,6 +195,10 @@ package Erroutc is\n       Warn : Boolean;\n       --  True if warning message (i.e. insertion character ? appeared)\n \n+      Warn_Err : Boolean;\n+      --  True if this is a warning message which is to be treated as an error\n+      --  as a result of a match with a Warning_As_Error pragma.\n+\n       Warn_Chr : Character;\n       --  Warning character, valid only if Warn is True\n       --    ' '      -- ? appeared on its own in message\n@@ -375,6 +379,10 @@ package Erroutc is\n    --  redundant. If so, the message to be deleted and all its continuations\n    --  are marked with the Deleted flag set to True.\n \n+   function Get_Warning_Tag (Id : Error_Msg_Id) return String;\n+   --  Given an error message ID, return tag showing warning message class, or\n+   --  the null string if this option is not enabled or this is not a warning.\n+\n    procedure Output_Error_Msgs (E : in out Error_Msg_Id);\n    --  Output source line, error flag, and text of stored error message and all\n    --  subsequent messages for the same line and unit. On return E is set to be\n@@ -553,6 +561,11 @@ package Erroutc is\n    --  the corresponding warning string is returned (or the null string if no\n    --  Warning argument was present in the pragma).\n \n+   function Warning_Treated_As_Error (Msg : String) return Boolean;\n+   --  Returns True if the warning message Msg matches any of the strings\n+   --  given by Warning_As_Error pragmas, as stored in the Warnings_As_Errors\n+   --  table by Set_Warning_As_Error.\n+\n    type Error_Msg_Proc is\n      access procedure (Msg : String; Flag_Location : Source_Ptr);\n    procedure Validate_Specific_Warnings (Eproc : Error_Msg_Proc);"}, {"sha": "99711e4c01f2a264bdec95ae19ea2db0b04f9fd2", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 88, "deletions": 12, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -275,6 +275,7 @@ Implementation Defined Pragmas\n * Pragma Use_VADS_Size::\n * Pragma Validity_Checks::\n * Pragma Volatile::\n+* Pragma Warning_As_Error::\n * Pragma Warnings::\n * Pragma Weak_External::\n * Pragma Wide_Character_Encoding::\n@@ -1109,6 +1110,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Use_VADS_Size::\n * Pragma Validity_Checks::\n * Pragma Volatile::\n+* Pragma Warning_As_Error::\n * Pragma Warnings::\n * Pragma Weak_External::\n * Pragma Wide_Character_Encoding::\n@@ -7557,6 +7559,80 @@ in some Ada 83 compilers, including DEC Ada 83.  The Ada 95 / Ada 2005\n implementation of pragma Volatile is upwards compatible with the\n implementation in DEC Ada 83.\n \n+@node Pragma Warning_As_Error\n+@unnumberedsec Pragma Warning_As_Error\n+@findex Warning_As_Error\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Warning_As_Error (static_string_EXPRESSION);\n+@end smallexample\n+\n+@noindent\n+This configuration pragma allows the programmer to specify a set\n+of warnings that will be treated as errors. Any warning which\n+matches the pattern given by the pragma argument will be treated\n+as an error. This gives much more precise control that -gnatwe\n+which treats all warnings as errors.\n+\n+The pattern may contain asterisks, which match zero or more characters in\n+the message. For example, you can use\n+@code{pragma Warnings (Off, \"*bits of*unused\")} to suppress the warning\n+message @code{warning: 960 bits of \"a\" unused}. No other regular\n+expression notations are permitted. All characters other than asterisk in\n+these three specific cases are treated as literal characters in the match.\n+The match is case insensitive, for example XYZ matches xyz.\n+\n+Another possibility for the static_string_EXPRESSION which works if\n+error tags are enabled (@option{-gnatw.e}) is to use the tag string\n+preceded by a space,\n+as shown in the example below.\n+\n+The pragma can appear either in a global configuration pragma file\n+(e.g. @file{gnat.adc}), or at the start of a file. Given a global\n+configuration pragma file containing:\n+\n+@smallexample @c ada\n+pragma Warning_As_Error (\" [-gnatwj]\");\n+@end smallexample\n+\n+@noindent\n+which will treat all obsolescent feature warnings as errors, the\n+following program compiles as shown (compile options here are\n+@option{-gnatwa.e -gnatld7 -gnatj60}).\n+\n+@smallexample @c ada\n+     1. pragma Warning_As_Error (\"*never assigned*\");\n+     2. function Warnerr return String is\n+     3.    X : Integer;\n+           |\n+        >>> warning(error): variable \"X\" is never read and\n+            never assigned [-gnatwv]\n+\n+     4.    Y : Integer;\n+           |\n+        >>> warning: variable \"Y\" is assigned but never\n+            read [-gnatwu]\n+\n+     5.\n+     6. begin\n+     7.    Y := 0;\n+     8.    return %ABC%;\n+                  |\n+        >>> warning(error): use of \"%\" is an obsolescent\n+            feature (RM J.2(4)), use \"\"\" instead [-gnatwj]\n+\n+     9. end;\n+\n+ 9 lines: No errors, 3 warnings (2 treated as errors)\n+@end smallexample\n+\n+@noindent\n+Note that this pragma does not affect the set of warnings issued in\n+any way, it merely changes the effect of a matching warning if one\n+is produced as a result of other warnings options.\n+\n @node Pragma Warnings\n @unnumberedsec Pragma Warnings\n @findex Warnings\n@@ -7609,12 +7685,14 @@ full details see @ref{Warning Message Control,,, gnat_ugn, @value{EDITION}\n User's Guide}. This form can also be used as a configuration pragma.\n \n @noindent\n-The warnings controlled by the `-gnatw' switch are generated by the front end\n-of the compiler. The `GCC' back end can provide additional warnings and they\n-are controlled by the `-W' switch.\n-The form with a single static_string_EXPRESSION argument also works for the\n-latters, but the string must be a single full `-W' switch in this case.\n-The above reference lists a few examples of these additional warnings.\n+The warnings controlled by the @option{-gnatw} switch are generated by the\n+front end of the compiler. The GCC back end can provide additional warnings\n+and they are controlled by the @option{-W} switch. Such warnings can be\n+identified by the appearance of a string of the form @code{[-Wxxx]} in the\n+message which designates the @option{-Wxxx} switch that controls the message.\n+The form with a single static_string_EXPRESSION argument also works for these\n+warnings, but the string must be a single full @option{-Wxxx} switch in this\n+case. The above reference lists a few examples of these additional warnings.\n \n @noindent\n The specified warnings will be in effect until the end of the program\n@@ -7638,12 +7716,10 @@ these three specific cases are treated as literal characters in the match.\n The match is case insensitive, for example XYZ matches xyz.\n \n The above use of patterns to match the message applies only to warning\n-messages generated by the front end. This form of the pragma with a\n-string argument can also be used to control back end warnings controlled\n-by a \"-Wxxx\" switch. Such warnings can be identified by the appearance\n-of a string of the form \"[-Wxxx]\" in the message which identifies the\n-\"-W\" switch that controls the message. By using the text of the\n-\"-W\" switch in the pragma, such back end warnings can be turned on and off.\n+messages generated by the front end. This form of the pragma with a string\n+argument can also be used to control warnings provided by the back end and\n+mentioned above. By using a single full @option{-Wxxx} switch in the pragma,\n+such warnings can be turned on and off.\n \n There are two ways to use the pragma in this form. The OFF form can be used as a\n configuration pragma. The effect is to suppress all warnings (if any)"}, {"sha": "1b6898db60efe8382f5d4574f54c643f500b63c3", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -308,7 +308,7 @@ package Lib is\n    --      from running (i.e. fatal error during parsing stops semantics,\n    --      fatal error during semantics stops code generation). Note that\n    --      currently, errors of any kind cause Fatal_Error to be set, but\n-   --      eventually perhaps only errors labeled as Fatal_Errors should be\n+   --      eventually perhaps only errors labeled as fatal errors should be\n    --      this severe if we decide to try Sem on sources with minor errors.\n \n    --    Generate_Code"}, {"sha": "0ff90a163fef1424543cfcc77a4754bdc9ce0859", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -66,6 +66,7 @@ package body Opt is\n       SPARK_Mode_Config                     := SPARK_Mode;\n       SPARK_Mode_Pragma_Config              := SPARK_Mode_Pragma;\n       Use_VADS_Size_Config                  := Use_VADS_Size;\n+      Warnings_As_Errors_Count_Config       := Warnings_As_Errors_Count;\n \n       --  Reset the indication that Optimize_Alignment was set locally, since\n       --  if we had a pragma in the config file, it would set this flag True,\n@@ -103,6 +104,7 @@ package body Opt is\n       SPARK_Mode                     := Save.SPARK_Mode;\n       SPARK_Mode_Pragma              := Save.SPARK_Mode_Pragma;\n       Use_VADS_Size                  := Save.Use_VADS_Size;\n+      Warnings_As_Errors_Count       := Save.Warnings_As_Errors_Count;\n \n       --  Update consistently the value of Init_Or_Norm_Scalars. The value of\n       --  Normalize_Scalars is not saved/restored because after set to True its\n@@ -141,6 +143,7 @@ package body Opt is\n       Save.SPARK_Mode                     := SPARK_Mode;\n       Save.SPARK_Mode_Pragma              := SPARK_Mode_Pragma;\n       Save.Use_VADS_Size                  := Use_VADS_Size;\n+      Save.Warnings_As_Errors_Count       := Warnings_As_Errors_Count;\n    end Save_Opt_Config_Switches;\n \n    -----------------------------\n@@ -171,6 +174,9 @@ package body Opt is\n          Use_VADS_Size               := False;\n          Optimize_Alignment_Local    := True;\n \n+         --  Note: we do not need to worry about Warnings_As_Errors_Count since\n+         --  we do not expect to get any warnings from compiling such a unit.\n+\n          --  For an internal unit, assertions/debug pragmas are off unless this\n          --  is the main unit and they were explicitly enabled. We also make\n          --  sure we do not assume that values are necessarily valid and that\n@@ -212,6 +218,7 @@ package body Opt is\n          SPARK_Mode                  := SPARK_Mode_Config;\n          SPARK_Mode_Pragma           := SPARK_Mode_Pragma_Config;\n          Use_VADS_Size               := Use_VADS_Size_Config;\n+         Warnings_As_Errors_Count    := Warnings_As_Errors_Count_Config;\n \n          --  Update consistently the value of Init_Or_Norm_Scalars. The value\n          --  of Normalize_Scalars is not saved/restored because once set to"}, {"sha": "90bf403c5bf5447134d2ae4024b68ea910e5f856", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -1761,6 +1761,10 @@ package Opt is\n    --  unless we are in GNATprove_Mode, which requires pragma Warnings to\n    --  be stored for the formal verification backend.\n \n+   Warnings_As_Errors_Count : Natural;\n+   --  GNAT\n+   --  Number of entries stored in Warnings_As_Errors table\n+\n    Wide_Character_Encoding_Method : WC_Encoding_Method := WCEM_Brackets;\n    --  GNAT, GNATBIND\n    --  Method used for encoding wide characters in the source program. See\n@@ -1952,6 +1956,10 @@ package Opt is\n    --  is ignored for internal and predefined units (which are always compiled\n    --  with the standard Size semantics).\n \n+   Warnings_As_Errors_Count_Config : Natural;\n+   --  GNAT\n+   --  Count of pattern strings stored from Warning_As_Error pragmas\n+\n    type Config_Switches_Type is private;\n    --  Type used to save values of the switches set from Config values\n \n@@ -2055,6 +2063,26 @@ package Opt is\n    --  that this is completely separate from the SPARK restriction defined in\n    --  GNAT to detect violations of a subset of SPARK 2005 rules.\n \n+   ---------------------------\n+   -- Error/Warning Control --\n+   ---------------------------\n+\n+   --  The following array would more reasonably be located in Err_Vars or\n+   --  Errour, but but we put them here to deal with licensing issues (we need\n+   --  this to have the GPL exception licensing, since these variables and\n+   --  subprograms are accessed from units with this licensing).\n+\n+   Warnings_As_Errors : array (1 .. 10_000) of String_Ptr;\n+   --  Table for recording Warning_As_Error pragmas as they are processed.\n+   --  It would be nicer to use Table, but there are circular elaboration\n+   --  problems if we try to do this, and an attempt to find some other\n+   --  appropriately licensed unit to declare this as a Table failed with\n+   --  various elaboration circularities. Memory is getting cheap these days!\n+\n+   --------------------------\n+   -- Private Declarations --\n+   --------------------------\n+\n private\n \n    --  The following type is used to save and restore settings of switches in\n@@ -2089,6 +2117,7 @@ private\n       SPARK_Mode                     : SPARK_Mode_Type;\n       SPARK_Mode_Pragma              : Node_Id;\n       Use_VADS_Size                  : Boolean;\n+      Warnings_As_Errors_Count       : Natural;\n    end record;\n \n    --  The following declarations are for GCC version dependent flags. We do"}, {"sha": "32b8fb7817ae3e22b0e15ea95ff7860cc0622635", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -1336,6 +1336,7 @@ begin\n            Pragma_Use_VADS_Size                  |\n            Pragma_Volatile                       |\n            Pragma_Volatile_Components            |\n+           Pragma_Warning_As_Error               |\n            Pragma_Weak_External                  |\n            Pragma_Validity_Checks                =>\n          null;"}, {"sha": "5020b59a55c26986f7f8073487cd0f3bc62eba6e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -5007,6 +5007,16 @@ package body Sem_Ch3 is\n       while Present (Index) loop\n          Analyze (Index);\n \n+         --  Test for odd case of trying to index a type by the type itself\n+\n+         if Is_Entity_Name (Index) and then Entity (Index) = T then\n+            Error_Msg_N (\"type& cannot be indexed by itself\", Index);\n+            Set_Entity (Index, Standard_Boolean);\n+            Set_Etype (Index, Standard_Boolean);\n+         end if;\n+\n+         --  Check SPARK restriction requiring a subtype mark\n+\n          if not Nkind_In (Index, N_Identifier, N_Expanded_Name) then\n             Check_SPARK_Restriction (\"subtype mark required\", Index);\n          end if;"}, {"sha": "44a3da91c09e216b403a1d8044b8bfb675128af1", "filename": "gcc/ada/sem_mech.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsem_mech.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsem_mech.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.adb?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -462,8 +462,8 @@ package body Sem_Mech is\n \n                when Convention_Fortran =>\n \n-                  --  In OpenVMS, pass a character of array of character\n-                  --  value using Descriptor(S).\n+                  --  In OpenVMS, pass character and string types using\n+                  --  Short_Descriptor(S)\n \n                   if OpenVMS_On_Target\n                     and then (Root_Type (Typ) = Standard_Character\n@@ -473,7 +473,7 @@ package body Sem_Mech is\n                                      Root_Type (Component_Type (Typ)) =\n                                                      Standard_Character))\n                   then\n-                     Set_Mechanism (Formal, By_Descriptor_S);\n+                     Set_Mechanism (Formal, By_Short_Descriptor_S);\n \n                   --  Access types are passed by default (presumably this\n                   --  will mean they are passed by copy)"}, {"sha": "b359004010908e7e440351c5756d9b8941ccd5a8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -21269,6 +21269,31 @@ package body Sem_Prag is\n \n          --  Volatile is handled by the same circuit as Atomic_Components\n \n+         ----------------------\n+         -- Warning_As_Error --\n+         ----------------------\n+\n+         when Pragma_Warning_As_Error =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+            Check_No_Identifiers;\n+            Check_Valid_Configuration_Pragma;\n+\n+            if not Is_Static_String_Expression (Arg1) then\n+               Error_Pragma_Arg\n+                 (\"argument of pragma% must be static string expression\",\n+                  Arg1);\n+\n+            --  OK static string expression\n+\n+            else\n+               String_To_Name_Buffer\n+                 (Strval (Expr_Value_S (Get_Pragma_Arg (Arg1))));\n+               Warnings_As_Errors_Count := Warnings_As_Errors_Count + 1;\n+               Warnings_As_Errors (Warnings_As_Errors_Count) :=\n+                 new String'(Name_Buffer (1 .. Name_Len));\n+            end if;\n+\n          --------------\n          -- Warnings --\n          --------------\n@@ -21481,14 +21506,14 @@ package body Sem_Prag is\n                            end loop;\n                         end if;\n \n-                     --  Error if not entity or static string literal case\n+                     --  Error if not entity or static string expression case\n \n                      elsif not Is_Static_String_Expression (Arg2) then\n                         Error_Pragma_Arg\n                           (\"second argument of pragma% must be entity name \"\n                            & \"or static string expression\", Arg2);\n \n-                     --  String literal case\n+                     --  Static string expression case\n \n                      else\n                         String_To_Name_Buffer\n@@ -25885,6 +25910,7 @@ package body Sem_Prag is\n       Pragma_Validity_Checks                => -1,\n       Pragma_Volatile                       =>  0,\n       Pragma_Volatile_Components            =>  0,\n+      Pragma_Warning_As_Error               => -1,\n       Pragma_Warnings                       => -1,\n       Pragma_Weak_External                  => -1,\n       Pragma_Wide_Character_Encoding        =>  0,"}, {"sha": "0432b083151ba46ee8ce2715b6ff736fd4cb04d1", "filename": "gcc/ada/sigtramp-ppcvxw.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsigtramp-ppcvxw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsigtramp-ppcvxw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp-ppcvxw.c?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -186,6 +186,7 @@ CR(\".cfi_def_cfa \" S(CFA_REG) \", 0\")\n \n #define CFI_COMMON_REGS \\\n CR(\"# CFI for common registers\\n\") \\\n+TCR(COMMON_CFI(GR(0)))  \\\n TCR(COMMON_CFI(GR(1)))  \\\n TCR(COMMON_CFI(GR(2)))  \\\n TCR(COMMON_CFI(GR(3)))  \\"}, {"sha": "c8831b3f212f788efdd560af8560fe878f1259da", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3985a955aa99d2970234e2eeb622a6aca2c94c/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=0c3985a955aa99d2970234e2eeb622a6aca2c94c", "patch": "@@ -445,6 +445,7 @@ package Snames is\n    Name_Unsuppress                     : constant Name_Id := N + $; -- Ada 05\n    Name_Use_VADS_Size                  : constant Name_Id := N + $; -- GNAT\n    Name_Validity_Checks                : constant Name_Id := N + $; -- GNAT\n+   Name_Warning_As_Error               : constant Name_Id := N + $; -- GNAT\n    Name_Warnings                       : constant Name_Id := N + $; -- GNAT\n    Name_Wide_Character_Encoding        : constant Name_Id := N + $; -- GNAT\n    Last_Configuration_Pragma_Name      : constant Name_Id := N + $;\n@@ -1790,6 +1791,7 @@ package Snames is\n       Pragma_Unsuppress,\n       Pragma_Use_VADS_Size,\n       Pragma_Validity_Checks,\n+      Pragma_Warning_As_Error,\n       Pragma_Warnings,\n       Pragma_Wide_Character_Encoding,\n "}]}