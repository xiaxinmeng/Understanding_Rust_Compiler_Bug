{"sha": "7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhNWZiMTdhMzBmZjBjZTk5MjhlNWVhYzM1Yjg5MmQ5NWU3ZWJhNQ==", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-02T15:58:47Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-02T16:02:31Z"}, "message": "Use shift instructions to eliminate redundant compare/test instructions on the H8\n\ngcc/ChangeLog\n\n\t* config/h8300/h8300-protos.h (compute_a_shift_cc): Accept\n\tadditional argument for the code.\n\t* config/h8300/h8300.c (compute_a_shift_cc): Accept additional\n\targument for the code.  Just return if the ZN bits are useful or\n\tnot rather than the old style CC_* enums.\n\t* config/h8300/shiftrotate.md (shiftqi_noscratch): Move before\n\tmore generic shiftqi patterns.\n\t(shifthi_noscratch, shiftsi_noscratch): Similarly.\n\t(shiftqi_noscratch_set_flags): New pattern.\n\t(shifthi_noscratch_set_flags, shiftsi_noscratch_set_flags): Likewise.", "tree": {"sha": "6dd7cbabbc404d1b6d45a45e0b07d66cfc034ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd7cbabbc404d1b6d45a45e0b07d66cfc034ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f7bab89279ca1234fef88929c74caeda8cb55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f7bab89279ca1234fef88929c74caeda8cb55e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f7bab89279ca1234fef88929c74caeda8cb55e"}], "stats": {"total": 175, "additions": 116, "deletions": 59}, "files": [{"sha": "744337d6667189e19daa54b41a88003ef6a29f85", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "patch": "@@ -41,7 +41,7 @@ extern const char *output_logical_op (machine_mode, rtx_code code,\n extern unsigned int compute_logical_op_length (machine_mode, rtx_code,\n \t\t\t\t\t      rtx *, rtx_insn *);\n \n-extern int compute_a_shift_cc (rtx, rtx *);\n+extern int compute_a_shift_cc (rtx *, rtx_code);\n #ifdef HAVE_ATTR_cc\n extern enum attr_cc compute_plussi_cc (rtx *);\n #endif"}, {"sha": "d2f6548a265122539bbad76e233df542a609ea05", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "patch": "@@ -4297,11 +4297,9 @@ compute_a_shift_length (rtx operands[3], rtx_code code)\n /* Compute which flag bits are valid after a shift insn.  */\n \n int\n-compute_a_shift_cc (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n+compute_a_shift_cc (rtx operands[3], rtx_code code)\n {\n-  rtx shift = operands[3];\n-  machine_mode mode = GET_MODE (shift);\n-  enum rtx_code code = GET_CODE (shift);\n+  machine_mode mode = GET_MODE (operands[0]);\n   enum shift_type shift_type;\n   enum shift_mode shift_mode;\n   struct shift_info info;\n@@ -4358,26 +4356,30 @@ compute_a_shift_cc (rtx insn ATTRIBUTE_UNUSED, rtx *operands)\n     {\n     case SHIFT_SPECIAL:\n       if (info.remainder == 0)\n-\treturn info.cc_special;\n+\treturn (info.cc_special == OLD_CC_SET_ZN\n+\t\t|| info.cc_special == OLD_CC_SET_ZNV);\n \n       /* Fall through.  */\n \n     case SHIFT_INLINE:\n-      return info.cc_inline;\n+      return (info.cc_inline == OLD_CC_SET_ZN\n+\t      || info.cc_inline == OLD_CC_SET_ZNV);\n       \n     case SHIFT_ROT_AND:\n       /* This case always ends with an and instruction.  */\n-      return OLD_CC_SET_ZNV;\n+      return true;\n       \n     case SHIFT_LOOP:\n       /* A loop to shift by a \"large\" constant value.\n \t If we have shift-by-2 insns, use them.  */\n       if (info.shift2 != NULL)\n \t{\n \t  if (n % 2)\n-\t    return info.cc_inline;\n+\t    return (info.cc_inline == OLD_CC_SET_ZN\n+\t\t    || info.cc_inline == OLD_CC_SET_ZNV);\n+\t\t\n \t}\n-      return OLD_CC_CLOBBER;\n+      return false;\n       \n     default:\n       gcc_unreachable ();"}, {"sha": "0476324bf22182aae889be81b1df890441102a37", "filename": "gcc/config/h8300/shiftrotate.md", "status": "modified", "additions": 104, "deletions": 49, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md?ref=7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "patch": "@@ -150,33 +150,6 @@\n }\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn_and_split \"*shiftqi\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(shifts:QI\n-\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))\n-   (clobber (match_scratch:QI 3 \"=X,&r\"))]\n-  \"\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (shifts:QI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (reg:CC CC_REG))])])\n-\n-(define_insn \"*shiftqi_clobber_flags\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(shifts:QI\n-\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))\n-   (clobber (match_scratch:QI 3 \"=X,&r\"))\n-   (clobber (reg:CC CC_REG))]\n-  \"\"\n-{\n-  return output_a_shift (operands, <CODE>);\n-}\n-  [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n-\n (define_insn_and_split \"*shiftqi_noscratch\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n \t(shifts:QI\n@@ -204,24 +177,43 @@\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n-(define_insn_and_split \"*shifthi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(shifts:HI\n-\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")))\n+(define_insn \"*shiftqi_noscratch_set_flags\"\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (shifts:QI\n+\t    (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t    (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\"))\n+\t  (const_int 0)))\n+   (set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:QI (match_dup 1) (match_dup 2)))]\n+  \"(GET_CODE (operands[2]) == CONST_INT\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), QImode, <CODE>)\n+    && compute_a_shift_cc (operands, <CODE>))\"\n+{\n+  return output_a_shift (operands, <CODE>);\n+}\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n+\n+\n+(define_insn_and_split \"*shiftqi\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:QI\n+\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))\n    (clobber (match_scratch:QI 3 \"=X,&r\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (shifts:HI (match_dup 1) (match_dup 2)))\n+  [(parallel [(set (match_dup 0) (shifts:QI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*shifthi_clobber_flags\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(shifts:HI\n-\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")))\n+(define_insn \"*shiftqi_clobber_flags\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:QI\n+\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))\n    (clobber (match_scratch:QI 3 \"=X,&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n@@ -257,24 +249,41 @@\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n-(define_insn_and_split \"*shiftsi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(shifts:SI\n-\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")))\n+(define_insn \"*shifthi_noscratch_setzn\"\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (shifts:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t\t     (match_operand:HI 2 \"nonmemory_operand\" \"S,rn\"))\n+\t  (const_int 0)))\n+   (set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:HI (match_dup 1) (match_dup 2)))]\n+  \"(GET_CODE (operands[2]) == CONST_INT\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), HImode, <CODE>)\n+    && compute_a_shift_cc (operands, <CODE>))\"\n+{\n+  return output_a_shift (operands, <CODE>);\n+}\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n+\n+(define_insn_and_split \"*shifthi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:HI\n+\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")))\n    (clobber (match_scratch:QI 3 \"=X,&r\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (shifts:SI (match_dup 1) (match_dup 2)))\n+  [(parallel [(set (match_dup 0) (shifts:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 3))\n \t      (clobber (reg:CC CC_REG))])])\n \n-(define_insn \"*shiftsi_clobber_flags\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(shifts:SI\n-\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")))\n+(define_insn \"*shifthi_clobber_flags\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:HI\n+\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")))\n    (clobber (match_scratch:QI 3 \"=X,&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n@@ -310,9 +319,55 @@\n   [(set (attr \"length\")\n \t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n+(define_insn \"*shiftsi_noscratch_cczn\"\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (shifts:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t    (match_operand:SI 2 \"nonmemory_operand\" \"T,rn\"))\n+\t  (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:SI (match_dup 1) (match_dup 2)))]\n+  \"(GET_CODE (operands[2]) == CONST_INT\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), SImode, <CODE>)\n+    && compute_a_shift_cc (operands, <CODE>))\"\n+{\n+  return output_a_shift (operands, <CODE>);\n+}\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n+\n ;; Split a variable shift into a loop.  If the register containing\n ;; the shift count dies, then we just use that register.\n \n+\n+(define_insn_and_split \"*shiftsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:SI\n+\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))]\n+  \"\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (match_dup 0) (shifts:SI (match_dup 1) (match_dup 2)))\n+\t      (clobber (match_dup 3))\n+\t      (clobber (reg:CC CC_REG))])])\n+\n+(define_insn \"*shiftsi_clobber_flags\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(shifts:SI\n+\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+{\n+  return output_a_shift (operands, <CODE>);\n+}\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n+\n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(match_operator 2 \"nshift_operator\""}]}