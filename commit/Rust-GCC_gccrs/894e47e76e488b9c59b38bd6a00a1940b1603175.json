{"sha": "894e47e76e488b9c59b38bd6a00a1940b1603175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0ZTQ3ZTc2ZTQ4OGI5YzU5YjM4YmQ2YTAwYTE5NDBiMTYwMzE3NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-10-31T16:47:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-10-31T16:47:48Z"}, "message": "re PR libstdc++/37958 (num_get<>::do_get(bool) sets eofbit flag incorrectly when boolalpha == true)\n\n2008-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/37958\n\t* include/bits/locale_facets.tcc (num_get<>::do_get(iter_type,\n\titer_type, ios_base&, ios_base::iostate&, bool&): Fix.\n\t* testsuite/22_locale/num_get/get/char/37958.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/37958.cc: Likewise.\n\nFrom-SVN: r141498", "tree": {"sha": "1148495ccab9d878b74c11bb737bff8948e99ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1148495ccab9d878b74c11bb737bff8948e99ae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894e47e76e488b9c59b38bd6a00a1940b1603175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894e47e76e488b9c59b38bd6a00a1940b1603175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894e47e76e488b9c59b38bd6a00a1940b1603175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894e47e76e488b9c59b38bd6a00a1940b1603175/comments", "author": null, "committer": null, "parents": [{"sha": "d3d0b9e07f69bd21120ebdeac22d4e197b7dfd1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3d0b9e07f69bd21120ebdeac22d4e197b7dfd1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3d0b9e07f69bd21120ebdeac22d4e197b7dfd1c"}], "stats": {"total": 278, "additions": 261, "deletions": 17}, "files": [{"sha": "84993956f4f34479154de5a6167819b4c5d1a93d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=894e47e76e488b9c59b38bd6a00a1940b1603175", "patch": "@@ -1,3 +1,11 @@\n+2008-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/37958\n+\t* include/bits/locale_facets.tcc (num_get<>::do_get(iter_type,\n+\titer_type, ios_base&, ios_base::iostate&, bool&): Fix.\n+\t* testsuite/22_locale/num_get/get/char/37958.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/37958.cc: Likewise.\n+\n 2008-10-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/37919"}, {"sha": "1052e03890be49b7bc3d60cf319da356158d1a86", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=894e47e76e488b9c59b38bd6a00a1940b1603175", "patch": "@@ -599,55 +599,73 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       else\n         {\n \t  // Parse bool values as alphanumeric.\n-\t  typedef __numpunct_cache<_CharT>              __cache_type;\n+\t  typedef __numpunct_cache<_CharT>  __cache_type;\n \t  __use_cache<__cache_type> __uc;\n \t  const locale& __loc = __io._M_getloc();\n \t  const __cache_type* __lc = __uc(__loc);\n \n-\t  bool __testf = true;\n-\t  bool __testt = true;\n+\t  bool __testf = false;\n+\t  bool __donef = false;\n+\t  bool __testt = false;\n+\t  bool __donet = false;\n \t  size_t __n;\n \t  bool __testeof = __beg == __end;\n           for (__n = 0; !__testeof; ++__n)\n             {\n \t      const char_type __c = *__beg;\n \n-\t      if (__testf)\n-\t        {\n+\t      if (!__donef)\n+\t\t{\n \t\t  if (__n < __lc->_M_falsename_size)\n-\t\t    __testf = __c == __lc->_M_falsename[__n];\n+\t\t    {\n+\t\t      __testf = __c == __lc->_M_falsename[__n];\n+\t\t      if (!__testf)\n+\t\t\t__donef = true;\n+\t\t    }\n \t\t  else\n-\t\t    break;\n+\t\t    __donef = true;\n \t\t}\n \n-\t      if (__testt)\n-\t        {\n+\t      if (!__donet)\n+\t\t{\n \t\t  if (__n < __lc->_M_truename_size)\n-\t\t    __testt = __c == __lc->_M_truename[__n];\n+\t\t    {\n+\t\t      __testt = __c == __lc->_M_truename[__n];\n+\t\t      if (!__testt)\n+\t\t\t__donet = true;\n+\t\t    }\n \t\t  else\n-\t\t    break;\n+\t\t    __donet = true;\n \t\t}\n \n-\t      if (!__testf && !__testt)\n+\t      if (__donef && __donet)\n \t\tbreak;\n \t      \n \t      if (++__beg == __end)\n \t\t__testeof = true;\n             }\n \t  if (__testf && __n == __lc->_M_falsename_size)\n-\t    __v = false;\n+\t    {\n+\t      __v = false;\n+\t      if (__testt && __n == __lc->_M_truename_size)\n+\t\t__err = ios_base::failbit;\n+\t      else\n+\t\t__err = __donet ? ios_base::goodbit : ios_base::eofbit;\n+\t    }\n \t  else if (__testt && __n == __lc->_M_truename_size)\n-\t    __v = true;\n+\t    {\n+\t      __v = true;\n+\t      __err = __donef ? ios_base::goodbit : ios_base::eofbit;\n+\t    }\n \t  else\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 23. Num_get overflow result.\n \t      __v = false;\n \t      __err = ios_base::failbit;\n+\t      if (__testeof && __n)\n+\t\t__err |= ios_base::eofbit;\n \t    }\n-\n-          if (__testeof)\n-            __err |= ios_base::eofbit;\n         }\n       return __beg;\n     }"}, {"sha": "6e931705da61a98d63f8a3ef3d1f5de048e1cff9", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/37958.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F37958.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F37958.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F37958.cc?ref=894e47e76e488b9c59b38bd6a00a1940b1603175", "patch": "@@ -0,0 +1,109 @@\n+// 2008-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct1: std::numpunct<char>\n+{\n+  std::string do_truename() const { return \"a\"; }\n+  std::string do_falsename() const { return \"abb\"; }\n+};\n+\n+struct Punct2: std::numpunct<char>\n+{\n+  std::string do_truename() const { return \"1\"; }\n+  std::string do_falsename() const { return \"0\"; }\n+};\n+\n+struct Punct3: std::numpunct<char>\n+{\n+  std::string do_truename() const { return \"\"; }\n+  std::string do_falsename() const { return \"\"; }\n+};\n+\n+// libstdc++/37958\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  istringstream iss1, iss2, iss3;\n+  iss1.imbue(locale(iss1.getloc(), new Punct1));\n+  iss2.imbue(locale(iss2.getloc(), new Punct2));\n+  iss3.imbue(locale(iss3.getloc(), new Punct3));\n+  const num_get<char>& ng1 = use_facet<num_get<char> >(iss1.getloc());\n+  const num_get<char>& ng2 = use_facet<num_get<char> >(iss2.getloc());\n+  const num_get<char>& ng3 = use_facet<num_get<char> >(iss3.getloc());\n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  bool b1 = false;\n+  bool b2 = false;\n+  bool b3 = true;\n+\n+  iss1.str(\"a\");\n+  iss1.setf(ios_base::boolalpha);\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, b1);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( b1 == true );\n+\n+  iss1.str(\"abb\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, b1);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( b1 == false );\n+\n+  iss1.str(\"abc\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, b1);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( b1 == false );\n+  VERIFY( *end == 'c' );\n+\n+  iss2.str(\"1\");\n+  iss2.setf(ios_base::boolalpha);\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, b2);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( b2 == true );\n+\n+  iss3.str(\"blah\");\n+  iss3.setf(ios_base::boolalpha);\n+  err = ios_base::goodbit;\n+  end = ng3.get(iss3.rdbuf(), 0, iss3, err, b3);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( b3 == false );\n+  VERIFY( *end == 'b' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a9ce6df01277a4ceed1832663bbe273833a48c33", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/37958.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F37958.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894e47e76e488b9c59b38bd6a00a1940b1603175/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F37958.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F37958.cc?ref=894e47e76e488b9c59b38bd6a00a1940b1603175", "patch": "@@ -0,0 +1,109 @@\n+// 2008-10-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct1: std::numpunct<wchar_t>\n+{\n+  std::wstring do_truename() const { return L\"a\"; }\n+  std::wstring do_falsename() const { return L\"abb\"; }\n+};\n+\n+struct Punct2: std::numpunct<wchar_t>\n+{\n+  std::wstring do_truename() const { return L\"1\"; }\n+  std::wstring do_falsename() const { return L\"0\"; }\n+};\n+\n+struct Punct3: std::numpunct<wchar_t>\n+{\n+  std::wstring do_truename() const { return L\"\"; }\n+  std::wstring do_falsename() const { return L\"\"; }\n+};\n+\n+// libstdc++/37958\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  wistringstream iss1, iss2, iss3;\n+  iss1.imbue(locale(iss1.getloc(), new Punct1));\n+  iss2.imbue(locale(iss2.getloc(), new Punct2));\n+  iss3.imbue(locale(iss3.getloc(), new Punct3));\n+  const num_get<wchar_t>& ng1 = use_facet<num_get<wchar_t> >(iss1.getloc());\n+  const num_get<wchar_t>& ng2 = use_facet<num_get<wchar_t> >(iss2.getloc());\n+  const num_get<wchar_t>& ng3 = use_facet<num_get<wchar_t> >(iss3.getloc());\n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  bool b1 = false;\n+  bool b2 = false;\n+  bool b3 = true;\n+\n+  iss1.str(L\"a\");\n+  iss1.setf(ios_base::boolalpha);\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, b1);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( b1 == true );\n+\n+  iss1.str(L\"abb\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, b1);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( b1 == false );\n+\n+  iss1.str(L\"abc\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, b1);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( b1 == false );\n+  VERIFY( *end == L'c' );\n+\n+  iss2.str(L\"1\");\n+  iss2.setf(ios_base::boolalpha);\n+  err = ios_base::goodbit;\n+  end = ng2.get(iss2.rdbuf(), 0, iss2, err, b2);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( b2 == true );\n+\n+  iss3.str(L\"blah\");\n+  iss3.setf(ios_base::boolalpha);\n+  err = ios_base::goodbit;\n+  end = ng3.get(iss3.rdbuf(), 0, iss3, err, b3);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( b3 == false );\n+  VERIFY( *end == L'b' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}