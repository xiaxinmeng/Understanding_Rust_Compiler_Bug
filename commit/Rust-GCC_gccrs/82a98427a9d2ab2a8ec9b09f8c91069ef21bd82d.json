{"sha": "82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhOTg0MjdhOWQyYWIyYThlYzliMDlmOGM5MTA2OWVmMjFiZDgyZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-05-03T11:37:22Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-05-03T11:37:22Z"}, "message": "class.c (finish_struct): Use location_t and input_location directly.\n\n\t* class.c (finish_struct): Use location_t and input_location\n\tdirectly.\n\t* decl.c (make_label_decl): Likewise.\n\t(use_label): Likewise.\n\t* decl2.c (warn_if_unknown_interface): Likewise.\n\t(start_static_initialization_or_destruction): Likewise.\n\t(generate_ctor_or_dtor_function): Likewise.\n\t(finish_file): Likewise.\n\t* error.c (print_instantiation_full_context): Likewise.\n\t* init.c (create_temporary_var): Likewise.\n\t* method.c (synthesize_method): Likewise.\n\t* parser.c (cp_token): Likewise.\n\t(cp_lexer_set_source_position_from_token): Likewise.\n\t(cp_lexer_get_preprocessor_token): Likewise.\n\t(cp_parser_statement): Likewise.\n\t* pt.c (tsubst_friend_function): Likewise.\n\t(instantiate_class_template): Likewise.\n\t(tsubst_decl): Likewise.\n\t(tsubst): Likewise.\n\t(instantiate_decl): Likewise.\n\t* semantics.c (begin_class_definition): Likewise.\n\t(expand_body): Likewise.\n\nFrom-SVN: r66423", "tree": {"sha": "56a2e50e3428759507c63ee6c3a98ddc04ece45f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56a2e50e3428759507c63ee6c3a98ddc04ece45f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/comments", "author": null, "committer": null, "parents": [{"sha": "778ea5199f9f53f94ecf99b9c088096ab2d2791b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778ea5199f9f53f94ecf99b9c088096ab2d2791b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778ea5199f9f53f94ecf99b9c088096ab2d2791b"}], "stats": {"total": 181, "additions": 83, "deletions": 98}, "files": [{"sha": "80da208226e360a2cd641a7b721b9a2470450f8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -1,3 +1,28 @@\n+2003-05-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (finish_struct): Use location_t and input_location\n+\tdirectly.\n+\t* decl.c (make_label_decl): Likewise.\n+\t(use_label): Likewise.\n+\t* decl2.c (warn_if_unknown_interface): Likewise.\n+\t(start_static_initialization_or_destruction): Likewise.\n+\t(generate_ctor_or_dtor_function): Likewise.\n+\t(finish_file): Likewise.\n+\t* error.c (print_instantiation_full_context): Likewise.\n+\t* init.c (create_temporary_var): Likewise.\n+\t* method.c (synthesize_method): Likewise.\n+\t* parser.c (cp_token): Likewise.\n+\t(cp_lexer_set_source_position_from_token): Likewise.\n+\t(cp_lexer_get_preprocessor_token): Likewise.\n+\t(cp_parser_statement): Likewise.\n+\t* pt.c (tsubst_friend_function): Likewise.\n+\t(instantiate_class_template): Likewise.\n+\t(tsubst_decl): Likewise.\n+\t(tsubst): Likewise.\n+\t(instantiate_decl): Likewise.\n+\t* semantics.c (begin_class_definition): Likewise.\n+\t(expand_body): Likewise.\n+\n 2003-05-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (finish_struct): Rename lineno to input_line."}, {"sha": "196815a8e8f806dd3ca9cc0c63ec8612bfce55f9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -5251,8 +5251,7 @@ unreverse_member_declarations (tree t)\n tree\n finish_struct (tree t, tree attributes)\n {\n-  const char *saved_filename = input_filename;\n-  int saved_lineno = input_line;\n+  location_t saved_loc = input_location;\n \n   /* Now that we've got all the field declarations, reverse everything\n      as necessary.  */\n@@ -5262,8 +5261,7 @@ finish_struct (tree t, tree attributes)\n \n   /* Nadger the current location so that diagnostics point to the start of\n      the struct, not the end.  */\n-  input_filename = DECL_SOURCE_FILE (TYPE_NAME (t));\n-  input_line = DECL_SOURCE_LINE (TYPE_NAME (t));\n+  input_location = DECL_SOURCE_LOCATION (TYPE_NAME (t));\n \n   if (processing_template_decl)\n     {\n@@ -5273,8 +5271,7 @@ finish_struct (tree t, tree attributes)\n   else\n     finish_struct_1 (t);\n \n-  input_filename = saved_filename;\n-  input_line = saved_lineno;\n+  input_location = saved_loc;\n \n   TYPE_BEING_DEFINED (t) = 0;\n "}, {"sha": "d090d2da13b9d788f0c3fd15b9aaf06610c05c81", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -4598,8 +4598,7 @@ make_label_decl (tree id, int local_p)\n \n   /* Say where one reference is to the label, for the sake of the\n      error if it is not defined.  */\n-  DECL_SOURCE_LINE (decl) = input_line;\n-  DECL_SOURCE_FILE (decl) = input_filename;\n+  DECL_SOURCE_LOCATION (decl) = input_location;\n \n   /* Record the fact that this identifier is bound to this label.  */\n   SET_IDENTIFIER_LABEL_VALUE (id, decl);\n@@ -4625,8 +4624,7 @@ use_label (tree decl)\n       new_ent->label_decl = decl;\n       new_ent->names_in_scope = current_binding_level->names;\n       new_ent->binding_level = current_binding_level;\n-      new_ent->o_goto_locus.line = input_line;\n-      new_ent->o_goto_locus.file = input_filename;\n+      new_ent->o_goto_locus = input_location;\n       new_ent->next = named_label_uses;\n       named_label_uses = new_ent;\n     }"}, {"sha": "8a199287764af68ec67ac647d2b40729404ea78a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -178,8 +178,7 @@ warn_if_unknown_interface (tree decl)\n   if (flag_alt_external_templates)\n     {\n       tree til = tinst_for_decl ();\n-      int sl = input_line;\n-      const char *sf = input_filename;\n+      location_t saved_loc = input_location;\n \n       if (til)\n \t{\n@@ -188,8 +187,7 @@ warn_if_unknown_interface (tree decl)\n \t}\n       warning (\"template `%#D' instantiated in file without #pragma interface\",\n \t\t  decl);\n-      input_line = sl;\n-      input_filename = sf;\n+      input_location = saved_loc;\n     }\n   else\n     cp_warning_at (\"template `%#D' defined in file without #pragma interface\",\n@@ -2233,8 +2231,7 @@ start_static_initialization_or_destruction (tree decl, int initp)\n      where DECL was declared so that error-messages make sense, and so\n      that the debugger will show somewhat sensible file and line\n      information.  */\n-  input_filename = DECL_SOURCE_FILE (decl);\n-  input_line = DECL_SOURCE_LINE (decl);\n+  input_location = DECL_SOURCE_LOCATION (decl);\n \n   /* Because of:\n \n@@ -2474,8 +2471,8 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n   tree body;\n   size_t i;\n \n-  input_filename = locus->file;\n-  input_line = locus->line++;\n+  input_location = *locus;\n+  locus->line++;\n   \n   /* We use `I' to indicate initialization and `D' to indicate\n      destruction.  */\n@@ -2554,8 +2551,7 @@ finish_file ()\n   location_t locus;\n   unsigned ssdf_count = 0;\n \n-  locus.file = input_filename;\n-  locus.line = input_line;\n+  locus = input_location;\n   at_eof = 1;\n \n   /* Bad parse errors.  Just forget about it.  */\n@@ -2686,8 +2682,7 @@ finish_file ()\n \n \t  /* Set the line and file, so that it is obviously not from\n \t     the source file.  */\n-\t  input_filename = locus.file;\n-\t  input_line = locus.line;\n+\t  input_location = locus;\n \t  ssdf_body = start_static_storage_duration_function (ssdf_count);\n \n \t  /* Make sure the back end knows about all the variables.  */\n@@ -2715,8 +2710,7 @@ finish_file ()\n \n \t  /* Finish up the static storage duration function for this\n \t     round.  */\n-\t  input_filename = locus.file;\n-\t  input_line = locus.line;\n+\t  input_location = locus;\n \t  finish_static_storage_duration_function (ssdf_body);\n \n \t  /* All those initializations and finalizations might cause\n@@ -2905,8 +2899,7 @@ finish_file ()\n       dump_tree_statistics ();\n       dump_time_statistics ();\n     }\n-  input_filename = locus.file;\n-  input_line = locus.line;\n+  input_location = locus;\n }\n \n /* T is the parse tree for an expression.  Return the expression after"}, {"sha": "7672fcd631aa6081fb7b4040c68313339bccf5f0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -2406,9 +2406,8 @@ static void\n print_instantiation_full_context (diagnostic_context *context)\n {\n   tree p = current_instantiation ();\n-  int line = input_line;\n-  const char *file = input_filename;\n-\n+  location_t location = input_location;\n+  \n   if (p)\n     {\n       if (current_function_decl != TINST_DECL (p)\n@@ -2423,17 +2422,18 @@ print_instantiation_full_context (diagnostic_context *context)\n \t    /* Avoid redundancy with the the \"In function\" line.  */;\n \t  else\n \t    output_verbatim (&context->buffer,\n-                             \"%s: In instantiation of `%s':\\n\", file,\n+                             \"%s: In instantiation of `%s':\\n\", location.file,\n                              decl_as_string (TINST_DECL (p),\n                                              TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n \n-\t  line = TINST_LINE (p);\n-\t  file = TINST_FILE (p);\n+\t  location.line = TINST_LINE (p);\n+\t  location.file = TINST_FILE (p);\n \t  p = TREE_CHAIN (p);\n \t}\n     }\n \n-  print_instantiation_partial_context (context, p, file, line);\n+  print_instantiation_partial_context (context, p,\n+\t\t\t\t       location.file, location.line);\n }\n \n /* Same as above but less verbose.  */"}, {"sha": "343ca9bba7ddb83af5c5490a48fa44f8783e753b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -2675,8 +2675,7 @@ create_temporary_var (type)\n   decl = build_decl (VAR_DECL, NULL_TREE, type);\n   TREE_USED (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n-  DECL_SOURCE_FILE (decl) = input_filename;\n-  DECL_SOURCE_LINE (decl) = input_line;\n+  DECL_SOURCE_LOCATION (decl) = input_location;\n   DECL_IGNORED_P (decl) = 1;\n   DECL_CONTEXT (decl) = current_function_decl;\n "}, {"sha": "841c29125ba14282fe39fe88cb11ed9c6042a31d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -754,8 +754,7 @@ synthesize_method (tree fndecl)\n      where the attempt to generate the function occurs, giving the\n      user a hint as to why we are attempting to generate the\n      function.  */\n-  DECL_SOURCE_LINE (fndecl) = input_line;\n-  DECL_SOURCE_FILE (fndecl) = input_filename;\n+  DECL_SOURCE_LOCATION (fndecl) = input_location;\n \n   interface_unknown = 1;\n   start_function (NULL_TREE, fndecl, NULL_TREE, SF_DEFAULT | SF_PRE_PARSED);"}, {"sha": "0181f2570bfc9c31a428a5f03e7cd14ab40b8d71", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -74,10 +74,8 @@ typedef struct cp_token GTY (())\n   /* If this token is a keyword, this value indicates which keyword.\n      Otherwise, this value is RID_MAX.  */\n   enum rid keyword;\n-  /* The file in which this token was found.  */\n-  const char *file_name;\n-  /* The line at which this token was found.  */\n-  int line_number;\n+  /* The location at which this token was found.  */\n+  location_t location;\n } cp_token;\n \n /* The number of tokens in a single token block.  */\n@@ -406,10 +404,7 @@ cp_lexer_set_source_position_from_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n \n   /* Update the line number.  */\n   if (token->type != CPP_EOF)\n-    {\n-      input_line = token->line_number;\n-      input_filename = token->file_name;\n-    }\n+    input_location = token->location;\n }\n \n /* TOKEN points into the circular token buffer.  Return a pointer to\n@@ -621,8 +616,8 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n   if (lexer != NULL && !lexer->main_lexer_p)\n     {\n       token->type = CPP_EOF;\n-      token->line_number = 0;\n-      token->file_name = NULL;\n+      token->location.line = 0;\n+      token->location.file = NULL;\n       token->value = NULL_TREE;\n       token->keyword = RID_MAX;\n \n@@ -651,8 +646,7 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n \t}\n     }\n   /* Now we've got our token.  */\n-  token->line_number = input_line;\n-  token->file_name = input_filename;\n+  token->location = input_location;\n \n   /* Check to see if this token is a keyword.  */\n   if (token->type == CPP_NAME \n@@ -5591,7 +5585,7 @@ cp_parser_statement (cp_parser* parser)\n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n   /* Remember the line number of the first token in the statement.  */\n-  statement_line_number = token->line_number;\n+  statement_line_number = token->location.line;\n   /* If this is a keyword, then that will often determine what kind of\n      statement we have.  */\n   if (token->type == CPP_KEYWORD)"}, {"sha": "7cabe5ac6600833869ee8a8629c7c53b7abe03f0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -4861,11 +4861,9 @@ tsubst_friend_function (decl, args)\n      tree args;\n {\n   tree new_friend;\n-  int line = input_line;\n-  const char *file = input_filename;\n+  location_t saved_loc = input_location;\n \n-  input_line = DECL_SOURCE_LINE (decl);\n-  input_filename = DECL_SOURCE_FILE (decl);\n+  input_location = DECL_SOURCE_LOCATION (decl);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL \n       && DECL_TEMPLATE_INSTANTIATION (decl)\n@@ -5072,8 +5070,7 @@ tsubst_friend_function (decl, args)\n     }\n \n  done:\n-  input_line = line;\n-  input_filename = file;\n+  input_location = saved_loc;\n   return new_friend;\n }\n \n@@ -5436,8 +5433,7 @@ instantiate_class_template (type)\n \t\t     assist in error message reporting.  Since we\n \t\t     called push_tinst_level above, we don't need to\n \t\t     restore these.  */\n-\t\t  input_line = DECL_SOURCE_LINE (t);\n-\t\t  input_filename = DECL_SOURCE_FILE (t);\n+\t\t  input_location = DECL_SOURCE_LOCATION (t);\n \n \t\t  r = tsubst (t, args, tf_error | tf_warning, NULL_TREE);\n \t\t  if (TREE_CODE (r) == VAR_DECL)\n@@ -5539,9 +5535,8 @@ instantiate_class_template (type)\n      implicit functions at a predictable point, and the same point\n      that would be used for non-template classes.  */\n   typedecl = TYPE_MAIN_DECL (type);\n-  input_line = DECL_SOURCE_LINE (typedecl);\n-  input_filename = DECL_SOURCE_FILE (typedecl);\n-\n+  input_location = DECL_SOURCE_LOCATION (typedecl);\n+  \n   unreverse_member_declarations (type);\n   finish_struct_1 (type);\n   CLASSTYPE_GOT_SEMICOLON (type) = 1;\n@@ -5878,16 +5873,13 @@ tsubst_decl (t, args, type, complain)\n      tree type;\n      tsubst_flags_t complain;\n {\n-  int saved_lineno;\n-  const char *saved_filename;\n+  location_t saved_loc;\n   tree r = NULL_TREE;\n   tree in_decl = t;\n \n   /* Set the filename and linenumber to improve error-reporting.  */\n-  saved_lineno = input_line;\n-  saved_filename = input_filename;\n-  input_line = DECL_SOURCE_LINE (t);\n-  input_filename = DECL_SOURCE_FILE (t);\n+  saved_loc = input_location;\n+  input_location = DECL_SOURCE_LOCATION (t);\n \n   switch (TREE_CODE (t))\n     {\n@@ -6353,8 +6345,7 @@ tsubst_decl (t, args, type, complain)\n     } \n \n   /* Restore the file and line information.  */\n-  input_line = saved_lineno;\n-  input_filename = saved_filename;\n+  input_location = saved_loc;\n \n   return r;\n }\n@@ -6869,23 +6860,22 @@ tsubst (t, args, complain, in_decl)\n \tif (TREE_CODE (type) == REFERENCE_TYPE\n \t    || (code == REFERENCE_TYPE && TREE_CODE (type) == VOID_TYPE))\n \t  {\n-\t    static int   last_line = 0;\n-\t    static const char* last_file = 0;\n+\t    static location_t last_loc;\n \n \t    /* We keep track of the last time we issued this error\n \t       message to avoid spewing a ton of messages during a\n \t       single bad template instantiation.  */\n \t    if (complain & tf_error\n-\t\t&& (last_line != input_line || last_file != input_filename))\n+\t\t&& (last_loc.line != input_line\n+\t\t    || last_loc.file != input_filename))\n \t      {\n \t\tif (TREE_CODE (type) == VOID_TYPE)\n \t\t  error (\"forming reference to void\");\n \t\telse\n \t\t  error (\"forming %s to reference type `%T'\",\n \t\t\t    (code == POINTER_TYPE) ? \"pointer\" : \"reference\",\n \t\t\t    type);\n-\t\tlast_line = input_line;\n-\t\tlast_file = input_filename;\n+\t\tlast_loc = input_location;\n \t      }\n \n \t    return error_mark_node;\n@@ -10759,10 +10749,9 @@ instantiate_decl (d, defer_ok)\n   tree spec;\n   tree gen_tmpl;\n   int pattern_defined;\n-  int line = input_line;\n   int need_push;\n-  const char *file = input_filename;\n-\n+  location_t saved_loc = input_location;\n+  \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n   my_friendly_assert (TREE_CODE (d) == FUNCTION_DECL\n@@ -10825,8 +10814,7 @@ instantiate_decl (d, defer_ok)\n   else\n     pattern_defined = ! DECL_IN_AGGR_P (code_pattern);\n \n-  input_line = DECL_SOURCE_LINE (d);\n-  input_filename = DECL_SOURCE_FILE (d);\n+  input_location = DECL_SOURCE_LOCATION (d);\n \n   if (pattern_defined)\n     {\n@@ -10913,8 +10901,7 @@ instantiate_decl (d, defer_ok)\n      because it's used by add_pending_template.  */\n   else if (! pattern_defined || defer_ok)\n     {\n-      input_line = line;\n-      input_filename = file;\n+      input_location = saved_loc;\n \n       if (at_eof && !pattern_defined \n \t  && DECL_EXPLICIT_INSTANTIATION (d))\n@@ -10941,9 +10928,9 @@ instantiate_decl (d, defer_ok)\n   regenerate_decl_from_template (d, td);\n   \n   /* We already set the file and line above.  Reset them now in case\n-     they changed as a result of calling regenerate_decl_from_template.  */\n-  input_line = DECL_SOURCE_LINE (d);\n-  input_filename = DECL_SOURCE_FILE (d);\n+     they changed as a result of calling\n+     regenerate_decl_from_template.  */\n+  input_location = DECL_SOURCE_LOCATION (d);\n \n   if (TREE_CODE (d) == VAR_DECL)\n     {\n@@ -11048,9 +11035,7 @@ instantiate_decl (d, defer_ok)\n     pop_from_top_level ();\n \n out:\n-  input_line = line;\n-  input_filename = file;\n-\n+  input_location = saved_loc;\n   pop_tinst_level ();\n \n   timevar_pop (TV_PARSE);"}, {"sha": "83440386e4d3d98fd76a2afb8f04774f58981150", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=82a98427a9d2ab2a8ec9b09f8c91069ef21bd82d", "patch": "@@ -1804,8 +1804,7 @@ begin_class_definition (t)\n     }\n \n   /* Update the location of the decl.  */\n-  DECL_SOURCE_FILE (TYPE_NAME (t)) = input_filename;\n-  DECL_SOURCE_LINE (TYPE_NAME (t)) = input_line;\n+  DECL_SOURCE_LOCATION (TYPE_NAME (t)) = input_location;\n   \n   if (TYPE_BEING_DEFINED (t))\n     {\n@@ -2303,8 +2302,7 @@ void\n expand_body (fn)\n      tree fn;\n {\n-  int saved_lineno;\n-  const char *saved_input_filename;\n+  location_t saved_loc;\n   tree saved_function;\n \n   /* When the parser calls us after finishing the body of a template\n@@ -2384,13 +2382,11 @@ expand_body (fn)\n     return;\n \n   /* Save the current file name and line number.  When we expand the\n-     body of the function, we'll set LINENO and INPUT_FILENAME so that\n+     body of the function, we'll set INPUT_LOCATION so that\n      error-mesages come out in the right places.  */\n-  saved_lineno = input_line;\n-  saved_input_filename = input_filename;\n+  saved_loc = input_location;\n   saved_function = current_function_decl;\n-  input_line = DECL_SOURCE_LINE (fn);\n-  input_filename = DECL_SOURCE_FILE (fn);\n+  input_location = DECL_SOURCE_LOCATION (fn);\n   current_function_decl = fn;\n \n   timevar_push (TV_INTEGRATION);\n@@ -2433,8 +2429,7 @@ expand_body (fn)\n \n   /* And restore the current source position.  */\n   current_function_decl = saved_function;\n-  input_line = saved_lineno;\n-  input_filename = saved_input_filename;\n+  input_location = saved_loc;\n   extract_interface_info ();\n \n   timevar_pop (TV_EXPAND);"}]}