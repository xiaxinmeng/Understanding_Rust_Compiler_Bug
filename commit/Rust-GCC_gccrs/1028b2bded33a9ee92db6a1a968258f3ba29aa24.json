{"sha": "1028b2bded33a9ee92db6a1a968258f3ba29aa24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAyOGIyYmRlZDMzYTllZTkyZGI2YTFhOTY4MjU4ZjNiYTI5YWEyNA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-05-14T07:55:51Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-05-14T07:55:51Z"}, "message": "Error printing thread safety, remove GFORTRAN_USE_STDERR\n\nFrom-SVN: r173749", "tree": {"sha": "cd0c97323c6980b35b95ce189ac0bdc597d9c4dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd0c97323c6980b35b95ce189ac0bdc597d9c4dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1028b2bded33a9ee92db6a1a968258f3ba29aa24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1028b2bded33a9ee92db6a1a968258f3ba29aa24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1028b2bded33a9ee92db6a1a968258f3ba29aa24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1028b2bded33a9ee92db6a1a968258f3ba29aa24/comments", "author": null, "committer": null, "parents": [{"sha": "b4224aec547b9e01f0b79d65c31c7b6da998b8cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4224aec547b9e01f0b79d65c31c7b6da998b8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4224aec547b9e01f0b79d65c31c7b6da998b8cd"}], "stats": {"total": 464, "additions": 267, "deletions": 197}, "files": [{"sha": "4be4e5db4f4df99cef36c67e5bec11ca295e223b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,3 +1,7 @@\n+2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * gfortran.texi: Remove GFORTRAN_USE_STDERR documentation.\n+\n 2011-05-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48972"}, {"sha": "c810fe251d6689021684375c9ab7e6045503bc16", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -579,7 +579,6 @@ Malformed environment variables are silently ignored.\n * GFORTRAN_STDIN_UNIT:: Unit number for standard input\n * GFORTRAN_STDOUT_UNIT:: Unit number for standard output\n * GFORTRAN_STDERR_UNIT:: Unit number for standard error\n-* GFORTRAN_USE_STDERR:: Send library output to standard error\n * GFORTRAN_TMPDIR:: Directory for scratch files\n * GFORTRAN_UNBUFFERED_ALL:: Don't buffer I/O for all units.\n * GFORTRAN_UNBUFFERED_PRECONNECTED:: Don't buffer I/O for preconnected units.\n@@ -613,14 +612,6 @@ This environment variable can be used to select the unit number\n preconnected to standard error.  This must be a positive integer.\n The default value is 0.\n \n-@node GFORTRAN_USE_STDERR\n-@section @env{GFORTRAN_USE_STDERR}---Send library output to standard error\n-\n-This environment variable controls where library output is sent.\n-If the first letter is @samp{y}, @samp{Y} or @samp{1}, standard\n-error is used.  If the first letter is @samp{n}, @samp{N} or\n-@samp{0}, standard output is used.\n-\n @node GFORTRAN_TMPDIR\n @section @env{GFORTRAN_TMPDIR}---Directory for scratch files\n "}, {"sha": "8ed0bb6148fbeac0266a00cd713cffd6f045a008", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,3 +1,38 @@\n+2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * io/unix.c (st_vprintf,st_printf): Move to runtime/error.c.\n+        * libgfortran.h (struct options_t): Remove use_stderr field.\n+        (st_vprintf,st_printf): Move prototypes.\n+        (estr_write): New prototype.\n+        * runtime/error.c (sys_exit): Use estr_write instead of st_printf.\n+        (estr_write): New function.\n+        (st_vprintf): Move from io/unix.c, use stack allocated buffer,\n+        always output to stderr.\n+        (st_printf): Move from io/unix.c.\n+        (show_locus): Use a local variable instead of static.\n+        (os_error): Use estr_write instead of st_printf.\n+        (runtime_error): Likewise.\n+        (runtime_error_at): Likewise.\n+        (runtime_warning_at): Likewise.\n+        (internal_error): Likewise.\n+        (generate_error): Likewise.\n+        (generate_warning): Likewise.\n+        (notify_std): Likewise.\n+        * runtime/pause.c (do_pause): Likewise.\n+        (pause_string): Likewise.\n+        * runtime/stop.c (stop_string): Likewise.\n+        (error_stop_string): Likewise.\n+        * config/fpu_aix.h (set_fpu): Likewise.\n+        * config/fpu_generic.h (set_fpu): Likewise.\n+        * config/fpu_glibc.h (set_fpu): Likewise.\n+        * config/fpu-sysv.h (set_fpu): Likewise.\n+        * runtime/backtrace.c (dump_glibc_backtrace): Likewise.\n+        (show_backtrace): Likewise.\n+        * runtime/environ.c (print_spaces): Likewise.\n+        (show_string): Likewise.\n+        (show_variables): Likewise.\n+        (variable_table[]): Remove GFORTRAN_USE_STDERR entry.\n+\n 2011-05-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48961"}, {"sha": "262557b6d010a2292393873b8abe2a63858b8fbf", "filename": "libgfortran/config/fpu-aix.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aix.h?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,8 +1,8 @@\n /* AIX FPU-related code.\n-   Copyright 2005, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -38,44 +38,44 @@ set_fpu (void)\n #ifdef TRP_INVALID\n     mode |= TRP_INVALID;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_DENORMAL)\n-    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t        \"exception not supported.\\n\");\n \n   if (options.fpe & GFC_FPE_ZERO)\n #ifdef TRP_DIV_BY_ZERO\n     mode |= TRP_DIV_BY_ZERO;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_OVERFLOW)\n #ifdef TRP_OVERFLOW\n     mode |= TRP_OVERFLOW;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_UNDERFLOW)\n #ifdef TRP_UNDERFLOW\n     mode |= TRP_UNDERFLOW;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_PRECISION)\n #ifdef TRP_UNDERFLOW\n     mode |= TRP_UNDERFLOW;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   fp_trap(FP_TRAP_SYNC);"}, {"sha": "72de91b28c750efb6893423c735830b037797f0b", "filename": "libgfortran/config/fpu-generic.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-generic.h?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,8 +1,8 @@\n /* Fallback FPU-related code (for systems not otherwise supported).\n-   Copyright 2005, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -32,21 +32,21 @@ void\n set_fpu (void)\n {\n   if (options.fpe & GFC_FPE_INVALID)\n-    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t        \"exception not supported.\\n\");\n   if (options.fpe & GFC_FPE_DENORMAL)\n-    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t        \"exception not supported.\\n\");\n   if (options.fpe & GFC_FPE_ZERO)\n-    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t        \"exception not supported.\\n\");\n   if (options.fpe & GFC_FPE_OVERFLOW)\n-    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t        \"exception not supported.\\n\");\n   if (options.fpe & GFC_FPE_UNDERFLOW)\n-    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t        \"exception not supported.\\n\");\n   if (options.fpe & GFC_FPE_PRECISION)\n-    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t        \"exception not supported.\\n\");\n }"}, {"sha": "669b7ad98c132f647f76207297d7cf2894e3a533", "filename": "libgfortran/config/fpu-glibc.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-glibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-glibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-glibc.h?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,8 +1,8 @@\n /* FPU-related code for systems with GNU libc.\n-   Copyright 2005, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -40,48 +40,48 @@ void set_fpu (void)\n #ifdef FE_INVALID\n     feenableexcept (FE_INVALID);\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n /* glibc does never have a FE_DENORMAL.  */\n   if (options.fpe & GFC_FPE_DENORMAL)\n #ifdef FE_DENORMAL\n     feenableexcept (FE_DENORMAL);\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_ZERO)\n #ifdef FE_DIVBYZERO\n     feenableexcept (FE_DIVBYZERO);\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_OVERFLOW)\n #ifdef FE_OVERFLOW\n     feenableexcept (FE_OVERFLOW);\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_UNDERFLOW)\n #ifdef FE_UNDERFLOW\n     feenableexcept (FE_UNDERFLOW);\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_PRECISION)\n #ifdef FE_INEXACT\n     feenableexcept (FE_INEXACT);\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t        \"exception not supported.\\n\");\n #endif\n }"}, {"sha": "477008968baff1b303ec50fa3a06a53e88ea525b", "filename": "libgfortran/config/fpu-sysv.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-sysv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fconfig%2Ffpu-sysv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-sysv.h?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,8 +1,8 @@\n /* SysV FPU-related code (for systems not otherwise supported).\n-   Copyright 2005, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2005, 2007, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -34,48 +34,48 @@ set_fpu (void)\n #ifdef FP_X_INV\n     cw |= FP_X_INV;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_DENORMAL)\n #ifdef FP_X_DNML\n     cw |= FP_X_DNML;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_ZERO)\n #ifdef FP_X_DZ\n     cw |= FP_X_DZ;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_OVERFLOW)\n #ifdef FP_X_OFL\n     cw |= FP_X_OFL;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_UNDERFLOW)\n #ifdef FP_X_UFL\n     cw |= FP_X_UFL;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   if (options.fpe & GFC_FPE_PRECISION)\n #ifdef FP_X_IMP\n     cw |= FP_X_IMP;\n #else\n-    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n-\t       \"exception not supported.\\n\");\n+    estr_write (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t        \"exception not supported.\\n\");\n #endif\n \n   fpsetmask(cw);"}, {"sha": "c257766d653db4bb5d323ca86709b3f1a5f65f49", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1353,61 +1353,6 @@ error_stream (void)\n }\n \n \n-/* st_vprintf()-- vprintf function for error output.  To avoid buffer\n-   overruns, we limit the length of the buffer to ST_VPRINTF_SIZE.  2k\n-   is big enough to completely fill a 80x25 terminal, so it shuld be\n-   OK.  We use a direct write() because it is simpler and least likely\n-   to be clobbered by memory corruption.  Writing an error message\n-   longer than that is an error.  */\n-\n-#define ST_VPRINTF_SIZE 2048\n-\n-int\n-st_vprintf (const char *format, va_list ap)\n-{\n-  static char buffer[ST_VPRINTF_SIZE];\n-  int written;\n-  int fd;\n-\n-  fd = options.use_stderr ? STDERR_FILENO : STDOUT_FILENO;\n-#ifdef HAVE_VSNPRINTF\n-  written = vsnprintf(buffer, ST_VPRINTF_SIZE, format, ap);\n-#else\n-  written = vsprintf(buffer, format, ap);\n-\n-  if (written >= ST_VPRINTF_SIZE-1)\n-    {\n-      /* The error message was longer than our buffer.  Ouch.  Because\n-\t we may have messed up things badly, report the error and\n-\t quit.  */\n-#define ERROR_MESSAGE \"Internal error: buffer overrun in st_vprintf()\\n\"\n-      write (fd, buffer, ST_VPRINTF_SIZE-1);\n-      write (fd, ERROR_MESSAGE, strlen(ERROR_MESSAGE));\n-      sys_exit(2);\n-#undef ERROR_MESSAGE\n-\n-    }\n-#endif\n-\n-  written = write (fd, buffer, written);\n-  return written;\n-}\n-\n-/* st_printf()-- printf() function for error output.  This just calls\n-   st_vprintf() to do the actual work.  */\n-\n-int\n-st_printf (const char *format, ...)\n-{\n-  int written;\n-  va_list ap;\n-  va_start (ap, format);\n-  written = st_vprintf(format, ap);\n-  va_end (ap);\n-  return written;\n-}\n-\n-\n /* compare_file_filename()-- Given an open stream and a fortran string\n  * that is a filename, figure out if the file is the same as the\n  * filename. */"}, {"sha": "ae86a021ee3fd64f82538856ac217e02f3169044", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -508,7 +508,7 @@ typedef struct\n   int separator_len;\n   const char *separator;\n \n-  int use_stderr, all_unbuffered, unbuffered_preconnected, default_recl;\n+  int all_unbuffered, unbuffered_preconnected, default_recl;\n   int fpe, dump_core, backtrace;\n }\n options_t;\n@@ -691,6 +691,16 @@ internal_proto(show_backtrace);\n extern void sys_exit (int) __attribute__ ((noreturn));\n internal_proto(sys_exit);\n \n+extern ssize_t estr_write (const char *);\n+internal_proto(estr_write);\n+\n+extern int st_vprintf (const char *, va_list);\n+internal_proto(st_vprintf);\n+\n+extern int st_printf (const char *, ...)\n+  __attribute__((format (gfc_printf, 1, 2)));\n+internal_proto(st_printf);\n+\n extern const char *gfc_xtoa (GFC_UINTEGER_LARGEST, char *, size_t);\n internal_proto(gfc_xtoa);\n \n@@ -792,13 +802,6 @@ internal_proto(close_units);\n extern int unit_to_fd (int);\n internal_proto(unit_to_fd);\n \n-extern int st_printf (const char *, ...)\n-  __attribute__ ((format (gfc_printf, 1, 2)));\n-internal_proto(st_printf);\n-\n-extern int st_vprintf (const char *, va_list);\n-internal_proto(st_vprintf);\n-\n extern char * filename_from_unit (int);\n internal_proto(filename_from_unit);\n "}, {"sha": "aa77025ab749aabad8330019233c4acd90f26429", "filename": "libgfortran/runtime/backtrace.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -95,7 +95,11 @@ dump_glibc_backtrace (int depth, char *str[])\n   int i;\n \n   for (i = 0; i < depth; i++)\n-    st_printf (\"  + %s\\n\", str[i]);\n+    {\n+      estr_write (\"  + \");\n+      estr_write (str[i]);\n+      estr_write (\"\\n\");\n+    }\n \n   free (str);\n }\n@@ -192,7 +196,7 @@ show_backtrace (void)\n \n     if (fgets (func, sizeof(func), output))\n       {\n-\tst_printf (\"\\nBacktrace for this error:\\n\");\n+\testr_write (\"\\nBacktrace for this error:\\n\");\n \n \tdo\n \t  {\n@@ -222,7 +226,9 @@ show_backtrace (void)\n \t    if (func[0] == '?' && func[1] == '?' && file[0] == '?'\n \t\t&& file[1] == '?')\n \t      {\n-\t        st_printf (\"  + %s\\n\", str[i]);\n+\t\testr_write (\"  + \");\n+\t\testr_write (str[i]);\n+\t\testr_write (\"\\n\");\n \t        continue;\n \t      }\n \n@@ -239,15 +245,25 @@ show_backtrace (void)\n \t      line = -1;\n \n \t    if (strcmp (func, \"MAIN__\") == 0)\n-\t      st_printf (\"  + in the main program\\n\");\n+\t      estr_write (\"  + in the main program\\n\");\n \t    else\n-\t      st_printf (\"  + function %s (0x%s)\\n\", func, addr[i]);\n+\t      {\n+\t\testr_write (\"  + function \");\n+\t\testr_write (func);\n+\t\testr_write (\" (0x\");\n+\t\testr_write (addr[i]);\n+\t\testr_write (\")\\n\");\n+\t      }\n \n \t    if (line <= 0 && strcmp (file, \"??\") == 0)\n \t      continue;\n \n \t    if (line <= 0)\n-\t      st_printf (\"    from file %s\\n\", file);\n+\t      {\n+\t\testr_write (\"    from file \");\n+\t\testr_write (file);\n+\t\testr_write (\"\\n\");\n+\t      }\n \t    else\n \t      st_printf (\"    at line %d of file %s\\n\", line, file);\n \t  }\n@@ -257,8 +273,8 @@ show_backtrace (void)\n \treturn;\n \n fallback:\n-\tst_printf (\"** Something went wrong while running addr2line. **\\n\"\n-\t\t   \"** Falling back  to a simpler  backtrace scheme. **\\n\");\n+\testr_write (\"** Something went wrong while running addr2line. **\\n\"\n+\t\t    \"** Falling back  to a simpler  backtrace scheme. **\\n\");\n       }\n     }\n   while (0);\n@@ -288,7 +304,7 @@ show_backtrace (void)\n \tchar *arg[NUM_ARGS+1];\n \tchar buf[20];\n \n-\tst_printf (\"\\nBacktrace for this error:\\n\");\n+\testr_write (\"\\nBacktrace for this error:\\n\");\n \targ[0] = (char *) \"pstack\";\n \tsnprintf (buf, sizeof(buf), \"%d\", (int) getppid ());\n \targ[1] = buf;\n@@ -301,7 +317,7 @@ show_backtrace (void)\n #if GLIBC_BACKTRACE\n \tdump_glibc_backtrace (depth, str);\n #else\n-\tst_printf (\"  unable to produce a backtrace, sorry!\\n\");\n+\testr_write (\"  unable to produce a backtrace, sorry!\\n\");\n #endif\n \n \t_exit (0);\n@@ -316,7 +332,7 @@ show_backtrace (void)\n \n #if GLIBC_BACKTRACE\n   /* Fallback to the glibc backtrace.  */\n-  st_printf (\"\\nBacktrace for this error:\\n\");\n+  estr_write (\"\\nBacktrace for this error:\\n\");\n   dump_glibc_backtrace (depth, str);\n #endif\n }"}, {"sha": "7695f0db198e86ba323f74d24825c5fd5448b668", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -71,7 +71,7 @@ print_spaces (int n)\n \n   buffer[i] = '\\0';\n \n-  st_printf (buffer);\n+  estr_write (buffer);\n }\n \n \n@@ -261,7 +261,10 @@ show_string (variable * v)\n   if (p == NULL)\n     p = \"\";\n \n-  st_printf (\"%s  \\\"%s\\\"\\n\", var_source (v), p);\n+  estr_write (var_source (v));\n+  estr_write (\"  \\\"\");\n+  estr_write (p);\n+  estr_write (\"\\\"\\n\");\n }\n \n \n@@ -281,10 +284,6 @@ static variable variable_table[] = {\n    \"Unit number that will be preconnected to standard error\\n\"\n    \"(No preconnection if negative)\", 0},\n \n-  {\"GFORTRAN_USE_STDERR\", 1, &options.use_stderr, init_boolean,\n-   show_boolean,\n-   \"Sends library output to standard error instead of standard output.\", 0},\n-\n   {\"GFORTRAN_TMPDIR\", 0, NULL, init_string, show_string,\n    \"Directory for scratch files.  Overrides the TMP environment variable\\n\"\n    \"If TMP is not set \" DEFAULT_TEMPDIR \" is used.\", 0},\n@@ -352,43 +351,42 @@ show_variables (void)\n   int n;\n \n   /* TODO: print version number.  */\n-  st_printf (\"GNU Fortran 95 runtime library version \"\n+  estr_write (\"GNU Fortran runtime library version \"\n \t     \"UNKNOWN\" \"\\n\\n\");\n \n-  st_printf (\"Environment variables:\\n\");\n-  st_printf (\"----------------------\\n\");\n+  estr_write (\"Environment variables:\\n\");\n+  estr_write (\"----------------------\\n\");\n \n   for (v = variable_table; v->name; v++)\n     {\n-      n = st_printf (\"%s\", v->name);\n+      n = estr_write (v->name);\n       print_spaces (25 - n);\n \n       if (v->show == show_integer)\n-\tst_printf (\"Integer \");\n+\testr_write (\"Integer \");\n       else if (v->show == show_boolean)\n-\tst_printf (\"Boolean \");\n+\testr_write (\"Boolean \");\n       else\n-\tst_printf (\"String  \");\n+\testr_write (\"String  \");\n \n       v->show (v);\n-      st_printf (\"%s\\n\\n\", v->desc);\n+      estr_write (v->desc);\n+      estr_write (\"\\n\\n\");\n     }\n \n   /* System error codes */\n \n-  st_printf (\"\\nRuntime error codes:\");\n-  st_printf (\"\\n--------------------\\n\");\n+  estr_write (\"\\nRuntime error codes:\");\n+  estr_write (\"\\n--------------------\\n\");\n \n   for (n = LIBERROR_FIRST + 1; n < LIBERROR_LAST; n++)\n     if (n < 0 || n > 9)\n       st_printf (\"%d  %s\\n\", n, translate_error (n));\n     else\n       st_printf (\" %d  %s\\n\", n, translate_error (n));\n \n-  st_printf (\"\\nCommand line arguments:\\n\");\n-  st_printf (\"  --help               Print this list\\n\");\n-\n-  /* st_printf(\"  --resume <dropfile>  Resume program execution from dropfile\\n\"); */\n+  estr_write (\"\\nCommand line arguments:\\n\");\n+  estr_write (\"  --help               Print this list\\n\");\n \n   sys_exit (0);\n }"}, {"sha": "e61904496c8f802fcd7489100f98fa04171a04ca", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 93, "deletions": 18, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -81,15 +81,15 @@ sys_exit (int code)\n       struct rlimit core_limit;\n \n       if (getrlimit (RLIMIT_CORE, &core_limit) == 0 && core_limit.rlim_cur == 0)\n-\tst_printf (\"** Warning: a core dump was requested, but the core size\"\n+\testr_write (\"** Warning: a core dump was requested, but the core size\"\n \t\t   \"limit\\n**          is currently zero.\\n\\n\");\n #endif\n       \n       \n #if defined(HAVE_KILL) && defined(HAVE_GETPID) && defined(SIGQUIT)\n       kill (getpid (), SIGQUIT);\n #else\n-      st_printf (\"Core dump not possible, sorry.\");\n+      estr_write (\"Core dump not possible, sorry.\");\n #endif\n     }\n \n@@ -112,6 +112,67 @@ sys_exit (int code)\n  * Other error returns are reserved for the STOP statement with a numeric code.\n  */\n \n+\n+/* Write a null-terminated C string to standard error. This function\n+   is async-signal-safe.  */\n+\n+ssize_t\n+estr_write (const char *str)\n+{\n+  return write (STDERR_FILENO, str, strlen (str));\n+}\n+\n+\n+/* st_vprintf()-- vsnprintf-like function for error output.  We use a\n+   stack allocated buffer for formatting; since this function might be\n+   called from within a signal handler, printing directly to stderr\n+   with vfprintf is not safe since the stderr locking might lead to a\n+   deadlock.  */\n+\n+#define ST_VPRINTF_SIZE 512\n+\n+int\n+st_vprintf (const char *format, va_list ap)\n+{\n+  int written;\n+  char buffer[ST_VPRINTF_SIZE];\n+\n+#ifdef HAVE_VSNPRINTF\n+  written = vsnprintf(buffer, ST_VPRINTF_SIZE, format, ap);\n+#else\n+  written = vsprintf(buffer, format, ap);\n+\n+  if (written >= ST_VPRINTF_SIZE - 1)\n+    {\n+      /* The error message was longer than our buffer.  Ouch.  Because\n+\t we may have messed up things badly, report the error and\n+\t quit.  */\n+#define ERROR_MESSAGE \"Internal error: buffer overrun in st_vprintf()\\n\"\n+      write (STDERR_FILENO, buffer, ST_VPRINTF_SIZE - 1);\n+      write (STDERR_FILENO, ERROR_MESSAGE, strlen(ERROR_MESSAGE));\n+      sys_exit(2);\n+#undef ERROR_MESSAGE\n+\n+    }\n+#endif\n+\n+  written = write (STDERR_FILENO, buffer, written);\n+  return written;\n+}\n+\n+\n+int\n+st_printf (const char * format, ...)\n+{\n+  int written;\n+  va_list ap;\n+  va_start (ap, format);\n+  written = st_vprintf (format, ap);\n+  va_end (ap);\n+  return written;\n+}\n+\n+\n /* gfc_xtoa()-- Integer to hexadecimal conversion.  */\n \n const char *\n@@ -177,14 +238,15 @@ gf_strerror (int errnum,\n void\n show_locus (st_parameter_common *cmp)\n {\n-  static char *filename;\n+  char *filename;\n \n   if (!options.locus || cmp == NULL || cmp->filename == NULL)\n     return;\n   \n   if (cmp->unit > 0)\n     {\n       filename = filename_from_unit (cmp->unit);\n+\n       if (filename != NULL)\n \t{\n \t  st_printf (\"At line %d of file %s (unit = %d, file = '%s')\\n\",\n@@ -233,8 +295,11 @@ os_error (const char *message)\n {\n   char errmsg[STRERR_MAXSZ];\n   recursion_check ();\n-  st_printf (\"Operating system error: %s\\n%s\\n\", \n-\t     gf_strerror (errno, errmsg, STRERR_MAXSZ), message);\n+  estr_write (\"Operating system error: \");\n+  estr_write (gf_strerror (errno, errmsg, STRERR_MAXSZ));\n+  estr_write (\"\\n\");\n+  estr_write (message);\n+  estr_write (\"\\n\");\n   sys_exit (1);\n }\n iexport(os_error);\n@@ -249,11 +314,11 @@ runtime_error (const char *message, ...)\n   va_list ap;\n \n   recursion_check ();\n-  st_printf (\"Fortran runtime error: \");\n+  estr_write (\"Fortran runtime error: \");\n   va_start (ap, message);\n   st_vprintf (message, ap);\n   va_end (ap);\n-  st_printf (\"\\n\");\n+  estr_write (\"\\n\");\n   sys_exit (2);\n }\n iexport(runtime_error);\n@@ -267,12 +332,12 @@ runtime_error_at (const char *where, const char *message, ...)\n   va_list ap;\n \n   recursion_check ();\n-  st_printf (\"%s\\n\", where);\n-  st_printf (\"Fortran runtime error: \");\n+  estr_write (where);\n+  estr_write (\"\\nFortran runtime error: \");\n   va_start (ap, message);\n   st_vprintf (message, ap);\n   va_end (ap);\n-  st_printf (\"\\n\");\n+  estr_write (\"\\n\");\n   sys_exit (2);\n }\n iexport(runtime_error_at);\n@@ -283,12 +348,12 @@ runtime_warning_at (const char *where, const char *message, ...)\n {\n   va_list ap;\n \n-  st_printf (\"%s\\n\", where);\n-  st_printf (\"Fortran runtime warning: \");\n+  estr_write (where);\n+  estr_write (\"\\nFortran runtime warning: \");\n   va_start (ap, message);\n   st_vprintf (message, ap);\n   va_end (ap);\n-  st_printf (\"\\n\");\n+  estr_write (\"\\n\");\n }\n iexport(runtime_warning_at);\n \n@@ -301,7 +366,9 @@ internal_error (st_parameter_common *cmp, const char *message)\n {\n   recursion_check ();\n   show_locus (cmp);\n-  st_printf (\"Internal Error: %s\\n\", message);\n+  estr_write (\"Internal Error: \");\n+  estr_write (message);\n+  estr_write (\"\\n\");\n \n   /* This function call is here to get the main.o object file included\n      when linking statically. This works because error.o is supposed to\n@@ -474,7 +541,9 @@ generate_error (st_parameter_common *cmp, int family, const char *message)\n \n   recursion_check ();\n   show_locus (cmp);\n-  st_printf (\"Fortran runtime error: %s\\n\", message);\n+  estr_write (\"Fortran runtime error: \");\n+  estr_write (message);\n+  estr_write (\"\\n\");\n   sys_exit (2);\n }\n iexport(generate_error);\n@@ -489,7 +558,9 @@ generate_warning (st_parameter_common *cmp, const char *message)\n     message = \" \";\n \n   show_locus (cmp);\n-  st_printf (\"Fortran runtime warning: %s\\n\", message);\n+  estr_write (\"Fortran runtime warning: \");\n+  estr_write (message);\n+  estr_write (\"\\n\");\n }\n \n \n@@ -532,13 +603,17 @@ notify_std (st_parameter_common *cmp, int std, const char * message)\n     {\n       recursion_check ();\n       show_locus (cmp);\n-      st_printf (\"Fortran runtime error: %s\\n\", message);\n+      estr_write (\"Fortran runtime error: \");\n+      estr_write (message);\n+      estr_write (\"\\n\");\n       sys_exit (2);\n     }\n   else\n     {\n       show_locus (cmp);\n-      st_printf (\"Fortran runtime warning: %s\\n\", message);\n+      estr_write (\"Fortran runtime warning: \");\n+      estr_write (message);\n+      estr_write (\"\\n\");\n     }\n   return FAILURE;\n }"}, {"sha": "0e3c8ae08fc82d5c0948db13af10259f6dd1eb06", "filename": "libgfortran/runtime/pause.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fpause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fpause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fpause.c?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,8 +1,8 @@\n-/* Implementation of the STOP statement.\n-   Copyright 2002, 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n+/* Implementation of the PAUSE statement.\n+   Copyright 2002, 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -25,18 +25,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"libgfortran.h\"\n #include <string.h>\n+#include <unistd.h>\n \n static void\n do_pause (void)\n {\n   char buff[4];\n-  st_printf (\"To resume execution, type go.  \"\n-\t     \"Other input will terminate the job.\\n\");\n+  estr_write (\"To resume execution, type go.  \"\n+\t      \"Other input will terminate the job.\\n\");\n \n   fgets(buff, 4, stdin);\n   if (strncmp(buff, \"go\\n\", 3) != 0)\n     stop_string ('\\0', 0);\n-  st_printf (\"RESUMED\\n\");\n+  estr_write (\"RESUMED\\n\");\n }\n \n /* A numeric PAUSE statement.  */\n@@ -59,10 +60,11 @@ export_proto(pause_string);\n void\n pause_string (char *string, GFC_INTEGER_4 len)\n {\n-  st_printf (\"PAUSE \");\n-  while (len--)\n-    st_printf (\"%c\", *(string++));\n-  st_printf (\"\\n\");\n+  estr_write (\"PAUSE \");\n+  ssize_t w = write (STDERR_FILENO, string, len);\n+  (void) sizeof (w); /* Avoid compiler warning about not using write\n+\t\t\treturn val.  */\n+  estr_write (\"\\n\");\n \n   do_pause ();\n }"}, {"sha": "b6f61ff8bee564b15cb0365b14fc3b92791c89c1", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1028b2bded33a9ee92db6a1a968258f3ba29aa24/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=1028b2bded33a9ee92db6a1a968258f3ba29aa24", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the STOP statement.\n-   Copyright 2002, 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -25,6 +25,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"libgfortran.h\"\n #include <string.h>\n+#include <unistd.h>\n \n /* A numeric STOP statement.  */\n \n@@ -65,10 +66,10 @@ stop_string (const char *string, GFC_INTEGER_4 len)\n {\n   if (string)\n     {\n-      st_printf (\"STOP \");\n-      while (len--)\n-\tst_printf (\"%c\", *(string++));\n-      st_printf (\"\\n\");\n+      estr_write (\"STOP \");\n+      ssize_t w = write (STDERR_FILENO, string, len);\n+      (void) sizeof (w); /* Avoid compiler warning about not using w.  */\n+      estr_write (\"\\n\");\n     }\n   sys_exit (0);\n }\n@@ -86,10 +87,10 @@ export_proto(error_stop_string);\n void\n error_stop_string (const char *string, GFC_INTEGER_4 len)\n {\n-  st_printf (\"ERROR STOP \");\n-  while (len--)\n-    st_printf (\"%c\", *(string++));\n-  st_printf (\"\\n\");\n+  estr_write (\"ERROR STOP \");\n+  ssize_t w = write (STDERR_FILENO, string, len);\n+  (void) sizeof (w); /* Avoid compiler warning about not using w.  */\n+  estr_write (\"\\n\");\n \n   sys_exit (1);\n }"}]}