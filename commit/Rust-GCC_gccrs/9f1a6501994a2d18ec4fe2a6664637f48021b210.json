{"sha": "9f1a6501994a2d18ec4fe2a6664637f48021b210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxYTY1MDE5OTRhMmQxOGVjNGZlMmE2NjY0NjM3ZjQ4MDIxYjIxMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-12-03T19:50:26Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-12-03T19:50:26Z"}, "message": "PowerPC: PR libgcc/97543 and libgcc/97643, fix long double issues\n\nIf you use a compiler with long double defaulting to 64-bit instead of 128-bit\nwith IBM extended double, you get linker warnings about mis-matches in the gnu\nattributes for long double (PR libgcc/97543).  Even if the compiler is\nconfigured to have long double be 64 bit as the default with the configuration\noption '--without-long-double-128' you get the warnings.\n\nYou also get the same issues if you use a compiler with long double defaulting\nto IEEE 128-bit instead of IBM extended double (PR libgcc/97643).\n\nThe issue is the way libgcc.a/libgcc.so is built.  Right now when building\nlibgcc under Linux, the long double size is set to 128-bits when building\nlibgcc.  However, the gnu attributes are set, leading to the warnings.\n\nOne feature of the current GNU attribute implementation is if you have a shared\nlibrary (such as libgcc_s.so), the GNU attributes for the shared library is an\ninclusive OR of all of the objects within the library.  This means if any\nobject file that uses the -mlong-double-128 option and uses long double, the GNU\nattributes for the library will indicate that it uses 128-bit IBM long\ndoubles.  If you have a static library, you will get the warning only if you\nactually reference an object file  with the attribute set.\n\nThis patch does two things:\n\n    1)\tAll of the object files that support IBM 128-bit long doubles\n\texplicitly set the ABI to IBM extended double.\n\n    2)\tI turned off GNU attributes for building the shared library or for\n        building the IBM 128-bit long double support.\n\nlibgcc/\n2020-12-03  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR libgcc/97543\n\tPR libgcc/97643\n\t* config/rs6000/t-linux (IBM128_STATIC_OBJS): New make variable.\n\t(IBM128_SHARED_OBJS): New make variable.\n\t(IBM128_OBJS): New make variable.  Set all objects to use the\n\texplicit IBM format, and disable gnu attributes.\n\t(IBM128_CFLAGS): New make variable.\n\t(gcc_s_compile): Add -mno-gnu-attribute to all shared library\n\tmodules.", "tree": {"sha": "0694967848ee1539fbe00c6f4d7945b4fc343f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0694967848ee1539fbe00c6f4d7945b4fc343f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f1a6501994a2d18ec4fe2a6664637f48021b210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1a6501994a2d18ec4fe2a6664637f48021b210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1a6501994a2d18ec4fe2a6664637f48021b210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1a6501994a2d18ec4fe2a6664637f48021b210/comments", "author": null, "committer": null, "parents": [{"sha": "30b606bb9b9314010a446ea4bed3481632008f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b606bb9b9314010a446ea4bed3481632008f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b606bb9b9314010a446ea4bed3481632008f75"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "72e9c2770a675919657aac7c1b2439b9c20ab137", "filename": "libgcc/config/rs6000/t-linux", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1a6501994a2d18ec4fe2a6664637f48021b210/libgcc%2Fconfig%2Frs6000%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1a6501994a2d18ec4fe2a6664637f48021b210/libgcc%2Fconfig%2Frs6000%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-linux?ref=9f1a6501994a2d18ec4fe2a6664637f48021b210", "patch": "@@ -6,3 +6,25 @@ HOST_LIBGCC2_CFLAGS += -mlong-double-128\n # smaller and faster libgcc code.  Directly specifying -mcmodel=small\n # would need to take into account targets for which -mcmodel is invalid.\n HOST_LIBGCC2_CFLAGS += -mno-minimal-toc\n+\n+# On the modules that deal with IBM 128-bit values, make sure that TFmode uses\n+# the IBM extended double format.  Also turn off gnu attributes on the static\n+# modules.\n+IBM128_STATIC_OBJS\t= ibm-ldouble$(objext) _powitf2$(objext) \\\n+\t\t\t  ppc64-fp$(objext) _divtc3$(object) _multc3$(object) \\\n+\t\t\t  _fixtfdi$(object) _fixunstfdi$(object) \\\n+\t                  _floatditf$(objext) _floatunsditf$(objext)\n+IBM128_SHARED_OBJS\t= $(IBM128_STATIC_OBJS:$(objext):_s$(objext))\n+IBM128_OBJS\t\t= $(IBM128_STATIC_OBJS) $(IBM128_SHARED_OBJS)\n+\n+IBM128_CFLAGS\t\t= -Wno-psabi -mabi=ibmlongdouble -mno-gnu-attribute\n+\n+$(IBM128_OBJS) : INTERNAL_CFLAGS += $(IBM128_CFLAGS)\n+\n+# Turn off gnu attributes for long double size on all of the shared library\n+# modules, but leave it on for the static modules, except for the functions\n+# that explicitly process IBM 128-bit floating point.  Shared libraries only\n+# have one gnu attribute for the whole library, and it can lead to warnings if\n+# somebody changes the long double format.  We leave it on for the static\n+# modules to catch mis-compilation errors.\n+gcc_s_compile += -mno-gnu-attribute"}]}