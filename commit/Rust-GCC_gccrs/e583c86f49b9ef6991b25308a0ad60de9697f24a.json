{"sha": "e583c86f49b9ef6991b25308a0ad60de9697f24a", "node_id": "C_kwDOANBUbNoAKGU1ODNjODZmNDliOWVmNjk5MWIyNTMwOGEwYWQ2MGRlOTY5N2YyNGE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-27T01:15:53Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-28T17:40:41Z"}, "message": "c++: -Wdangling-reference and system headers\n\nI got this testcase:\n\n  auto f() -> std::optional<std::string>;\n  for (char c : f().value()) { }\n\nwhich has a dangling reference: std::optional<T>::value returns\na reference to the contained value, but here it's the f() temporary.\nWe warn, which is great, but only with -Wsystem-headers, because\nthe function comes from a system header and warning_enabled_at used\nin do_warn_dangling_reference checks diagnostic_report_warnings_p,\nwhich in this case returned false so we didn't warn.\n\nFixed as below.  I could also override dc_warn_system_headers so that\nthe warning is enabled in system headers always.  With that, I found one\nissue in libstdc++:\n\nlibstdc++-v3/include/bits/fs_path.h:1265:15: warning: possibly dangling reference to a temporary [-Wdangling-reference]\n 1265 |         auto& __last = *--end();\n      |               ^~~~~~\n\nwhich looks like a true positive as well.\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (maybe_warn_dangling_reference): Enable the warning in\n\tsystem headers if the decl isn't in a system header.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wdangling-reference4.C: New test.", "tree": {"sha": "30308ec5aaae1eea9944a8ad734a661c7ef209a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30308ec5aaae1eea9944a8ad734a661c7ef209a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e583c86f49b9ef6991b25308a0ad60de9697f24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e583c86f49b9ef6991b25308a0ad60de9697f24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e583c86f49b9ef6991b25308a0ad60de9697f24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e583c86f49b9ef6991b25308a0ad60de9697f24a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a628f52cf0ff5db6708578248484d50a50b366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a628f52cf0ff5db6708578248484d50a50b366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a628f52cf0ff5db6708578248484d50a50b366"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "c7c7a122045cf868c526320ba3a3534e37839529", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e583c86f49b9ef6991b25308a0ad60de9697f24a/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e583c86f49b9ef6991b25308a0ad60de9697f24a/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=e583c86f49b9ef6991b25308a0ad60de9697f24a", "patch": "@@ -13539,6 +13539,13 @@ maybe_warn_dangling_reference (const_tree decl, tree init)\n     return;\n   if (!TYPE_REF_P (TREE_TYPE (decl)))\n     return;\n+  /* Don't suppress the diagnostic just because the call comes from\n+     a system header.  If the DECL is not in a system header, or if\n+     -Wsystem-headers was provided, warn.  */\n+  auto wsh\n+    = make_temp_override (global_dc->dc_warn_system_headers,\n+\t\t\t  (!in_system_header_at (DECL_SOURCE_LOCATION (decl))\n+\t\t\t   || global_dc->dc_warn_system_headers));\n   if (tree call = do_warn_dangling_reference (init))\n     {\n       auto_diagnostic_group d;"}, {"sha": "aee7a29019b9a6ba5c70f4ba878e192528e1a21a", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-reference4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e583c86f49b9ef6991b25308a0ad60de9697f24a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e583c86f49b9ef6991b25308a0ad60de9697f24a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference4.C?ref=e583c86f49b9ef6991b25308a0ad60de9697f24a", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wdangling-reference\" }\n+// Check that we warn here even without -Wsystem-headers.\n+\n+#include <optional>\n+#include <string>\n+\n+auto f() -> std::optional<std::string>;\n+\n+void\n+g ()\n+{\n+  for (char c : f().value()) { (void) c; } // { dg-warning \"dangling reference\" }\n+}"}]}