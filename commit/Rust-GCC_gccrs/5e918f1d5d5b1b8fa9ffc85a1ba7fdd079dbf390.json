{"sha": "5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5MThmMWQ1ZDViMWI4ZmE5ZmZjODVhMWJhN2ZkZDA3OWRiZjM5MA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-10-12T18:18:13Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-10-12T18:18:13Z"}, "message": "(split_specs_attrs): Delete.\n\nFrom-SVN: r12958", "tree": {"sha": "d5f278de13831be2e52f3bc8de4e9b90be0872cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5f278de13831be2e52f3bc8de4e9b90be0872cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390/comments", "author": null, "committer": null, "parents": [{"sha": "239c95d346c5a28c3af07c0064e52c6526a57cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239c95d346c5a28c3af07c0064e52c6526a57cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239c95d346c5a28c3af07c0064e52c6526a57cab"}], "stats": {"total": 67, "additions": 0, "deletions": 67}, "files": [{"sha": "469b529ff58bb491910dd56a548e6a44d5e50407", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5e918f1d5d5b1b8fa9ffc85a1ba7fdd079dbf390", "patch": "@@ -12619,73 +12619,6 @@ in_function_p ()\n }\n \n /* FSF LOCAL dje prefix attributes */\n-/* Split SPECS_ATTRS, a list of declspecs and prefix attributes, into two\n-   lists.  SPECS_ATTRS may also be just a typespec (eg: RECORD_TYPE).\n-\n-   The head of the declspec list is stored in DECLSPECS.\n-   The head of the attribute list is stored in PREFIX_ATTRIBUTES.\n-\n-   Note that attributes in SPECS_ATTRS are stored in the TREE_PURPOSE of\n-   the list elements.  We drop the containing TREE_LIST nodes and link the\n-   resulting attributes together the way decl_attributes expects them.  */\n-\n-void\n-split_specs_attrs (specs_attrs, declspecs, prefix_attributes)\n-     tree specs_attrs;\n-     tree *declspecs, *prefix_attributes;\n-{\n-  tree t, s, a, next, specs, attrs;\n-\n-  /* This can happen in c++ (eg: decl: typespec initdecls ';').  */\n-  if (specs_attrs != NULL_TREE\n-      && TREE_CODE (specs_attrs) != TREE_LIST)\n-    {\n-      *declspecs = specs_attrs;\n-      *prefix_attributes = NULL_TREE;\n-      return;\n-    }\n-\n-  /* Remember to keep the lists in the same order, element-wise.  */\n-\n-  specs = s = NULL_TREE;\n-  attrs = a = NULL_TREE;\n-  for (t = specs_attrs; t; t = next)\n-    {\n-      next = TREE_CHAIN (t);\n-      /* Declspecs have a non-NULL TREE_VALUE.  */\n-      if (TREE_VALUE (t) != NULL_TREE)\n-\t{\n-\t  if (specs == NULL_TREE)\n-\t    specs = s = t;\n-\t  else\n-\t    {\n-\t      TREE_CHAIN (s) = t;\n-\t      s = t;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  if (attrs == NULL_TREE)\n-\t    attrs = a = TREE_PURPOSE (t);\n-\t  else\n-\t    {\n-\t      TREE_CHAIN (a) = TREE_PURPOSE (t);\n-\t      a = TREE_PURPOSE (t);\n-\t    }\n-\t}\n-    }\n-\n-  /* Terminate the lists.  */\n-  if (s != NULL_TREE)\n-    TREE_CHAIN (s) = NULL_TREE;\n-  if (a != NULL_TREE)\n-    TREE_CHAIN (a) = NULL_TREE;\n-\n-  /* All done.  */\n-  *declspecs = specs;\n-  *prefix_attributes = attrs;\n-}\n-\n /* Strip attributes from SPECS_ATTRS, a list of declspecs and attributes.\n    This function is used by the parser when a rule will accept attributes\n    in a particular position, but we don't want to support that just yet."}]}