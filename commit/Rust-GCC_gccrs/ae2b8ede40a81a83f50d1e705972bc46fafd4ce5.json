{"sha": "ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyYjhlZGU0MGE4MWE4M2Y1MGQxZTcwNTk3MmJjNDZmYWZkNGNlNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-13T09:43:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-13T09:43:27Z"}, "message": "i386: Fix up _mm*_mask_popcnt_epi* [PR93696]\n\nAs mentioned in the PR and as\nhttps://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mask_popcnt_epi\nalso documents, _mm*_popcnt_epi* intrinsics are consistent with all other\nunary AVX512* intrinsics regarding arguments, i.e. the\n_mm*_whatever has just single argument (called a in the docs, and __A in the\nGCC headers),\n_mm*_mask_whatever has 3 arguments (called src, k, a in the docs and\n_W, __U, __A in GCC headers) and\n_mm*_maskz_whatever 2 arguments (called k, a in the docs and __U, __A in GCC\nheaders).  Unfortunately, whomever implemented the _mm*_popcnt_epi*\nintrinsics got it wrong for the _mm*_mask_popcnt_epi* ones, calling the\nargs __A, __U, __B and not passing them in the canonical order to the\nbuiltins, making it API incompatible with ICC as well as clang (tested on\ngodbolts clang 7/8/9/trunk and ICC 19.0.{0,1}, older clang/ICC don't\nunderstand those, so it isn't that it used to be broken even in other\ncompilers and got changed afterwards).\n\n2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93696\n\t* config/i386/avx512bitalgintrin.h (_mm512_mask_popcnt_epi8,\n\t_mm512_mask_popcnt_epi16, _mm256_mask_popcnt_epi8,\n\t_mm256_mask_popcnt_epi16, _mm_mask_popcnt_epi8,\n\t_mm_mask_popcnt_epi16): Rename __B argument to __A and __A to __W,\n\tpass __A to the builtin followed by __W instead of __A followed by\n\t__B.\n\t* config/i386/avx512vpopcntdqintrin.h (_mm512_mask_popcnt_epi32,\n\t_mm512_mask_popcnt_epi64): Likewise.\n\t* config/i386/avx512vpopcntdqvlintrin.h (_mm_mask_popcnt_epi32,\n\t_mm256_mask_popcnt_epi32, _mm_mask_popcnt_epi64,\n\t_mm256_mask_popcnt_epi64): Likewise.\n\n\t* gcc.target/i386/pr93696-1.c: New test.\n\t* gcc.target/i386/pr93696-2.c: New test.\n\t* gcc.target/i386/avx512bitalg-vpopcntw-1.c (TEST): Fix argument order\n\tof _mm*_mask_popcnt_*.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c (TEST): Likewise.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c (TEST): Likewise.\n\t* gcc.target/i386/avx512bitalg-vpopcntb-1.c (TEST): Likewise.\n\t* gcc.target/i386/avx512bitalg-vpopcntb.c (foo): Likewise.\n\t* gcc.target/i386/avx512bitalg-vpopcntbvl.c (foo): Likewise.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntd.c (foo): Likewise.\n\t* gcc.target/i386/avx512bitalg-vpopcntwvl.c (foo): Likewise.\n\t* gcc.target/i386/avx512bitalg-vpopcntw.c (foo): Likewise.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntq.c (foo): Likewise.", "tree": {"sha": "103060536cb3f96a9473e5d4e3071364748f3a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/103060536cb3f96a9473e5d4e3071364748f3a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d9eb4e4ca7be5cbe289eef390afb53f36d313b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9eb4e4ca7be5cbe289eef390afb53f36d313b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9eb4e4ca7be5cbe289eef390afb53f36d313b1"}], "stats": {"total": 267, "additions": 226, "deletions": 41}, "files": [{"sha": "371194d5e3ab57724a50f53abbb350ace136bb7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -1,5 +1,18 @@\n 2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93696\n+\t* config/i386/avx512bitalgintrin.h (_mm512_mask_popcnt_epi8,\n+\t_mm512_mask_popcnt_epi16, _mm256_mask_popcnt_epi8,\n+\t_mm256_mask_popcnt_epi16, _mm_mask_popcnt_epi8,\n+\t_mm_mask_popcnt_epi16): Rename __B argument to __A and __A to __W,\n+\tpass __A to the builtin followed by __W instead of __A followed by\n+\t__B.\n+\t* config/i386/avx512vpopcntdqintrin.h (_mm512_mask_popcnt_epi32,\n+\t_mm512_mask_popcnt_epi64): Likewise.\n+\t* config/i386/avx512vpopcntdqvlintrin.h (_mm_mask_popcnt_epi32,\n+\t_mm256_mask_popcnt_epi32, _mm_mask_popcnt_epi64,\n+\t_mm256_mask_popcnt_epi64): Likewise.\n+\n \tPR tree-optimization/93582\n \t* fold-const.h (shift_bytes_in_array_left,\n \tshift_bytes_in_array_right): Declare."}, {"sha": "498d5d837f27016a67ce84ff62b670162e8c1f39", "filename": "gcc/config/i386/avx512bitalgintrin.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -61,10 +61,10 @@ _mm512_popcnt_epi16 (__m512i __A)\n \n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_popcnt_epi8 (__m512i __A, __mmask64 __U, __m512i __B)\n+_mm512_mask_popcnt_epi8 (__m512i __W, __mmask64 __U, __m512i __A)\n {\n   return (__m512i) __builtin_ia32_vpopcountb_v64qi_mask ((__v64qi) __A,\n-\t\t\t\t\t\t\t (__v64qi) __B,\n+\t\t\t\t\t\t\t (__v64qi) __W,\n \t\t\t\t\t\t\t (__mmask64) __U);\n }\n \n@@ -79,10 +79,10 @@ _mm512_maskz_popcnt_epi8 (__mmask64 __U, __m512i __A)\n }\n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_popcnt_epi16 (__m512i __A, __mmask32 __U, __m512i __B)\n+_mm512_mask_popcnt_epi16 (__m512i __W, __mmask32 __U, __m512i __A)\n {\n   return (__m512i) __builtin_ia32_vpopcountw_v32hi_mask ((__v32hi) __A,\n-\t\t\t\t\t\t\t(__v32hi) __B,\n+\t\t\t\t\t\t\t(__v32hi) __W,\n \t\t\t\t\t\t\t(__mmask32) __U);\n }\n \n@@ -127,10 +127,10 @@ _mm512_mask_bitshuffle_epi64_mask (__mmask64 __M, __m512i __A, __m512i __B)\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_popcnt_epi8 (__m256i __A, __mmask32 __U, __m256i __B)\n+_mm256_mask_popcnt_epi8 (__m256i __W, __mmask32 __U, __m256i __A)\n {\n   return (__m256i) __builtin_ia32_vpopcountb_v32qi_mask ((__v32qi) __A,\n-\t\t\t\t\t\t\t (__v32qi) __B,\n+\t\t\t\t\t\t\t (__v32qi) __W,\n \t\t\t\t\t\t\t (__mmask32) __U);\n }\n \n@@ -222,10 +222,10 @@ _mm_popcnt_epi16 (__m128i __A)\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_popcnt_epi16 (__m256i __A, __mmask16 __U, __m256i __B)\n+_mm256_mask_popcnt_epi16 (__m256i __W, __mmask16 __U, __m256i __A)\n {\n   return (__m256i) __builtin_ia32_vpopcountw_v16hi_mask ((__v16hi) __A,\n-\t\t\t\t\t\t\t(__v16hi) __B,\n+\t\t\t\t\t\t\t(__v16hi) __W,\n \t\t\t\t\t\t\t(__mmask16) __U);\n }\n \n@@ -241,10 +241,10 @@ _mm256_maskz_popcnt_epi16 (__mmask16 __U, __m256i __A)\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_popcnt_epi8 (__m128i __A, __mmask16 __U, __m128i __B)\n+_mm_mask_popcnt_epi8 (__m128i __W, __mmask16 __U, __m128i __A)\n {\n   return (__m128i) __builtin_ia32_vpopcountb_v16qi_mask ((__v16qi) __A,\n-\t\t\t\t\t\t\t (__v16qi) __B,\n+\t\t\t\t\t\t\t (__v16qi) __W,\n \t\t\t\t\t\t\t (__mmask16) __U);\n }\n \n@@ -259,10 +259,10 @@ _mm_maskz_popcnt_epi8 (__mmask16 __U, __m128i __A)\n }\n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_popcnt_epi16 (__m128i __A, __mmask8 __U, __m128i __B)\n+_mm_mask_popcnt_epi16 (__m128i __W, __mmask8 __U, __m128i __A)\n {\n   return (__m128i) __builtin_ia32_vpopcountw_v8hi_mask ((__v8hi) __A,\n-\t\t\t\t\t\t\t(__v8hi) __B,\n+\t\t\t\t\t\t\t(__v8hi) __W,\n \t\t\t\t\t\t\t(__mmask8) __U);\n }\n "}, {"sha": "967d01b49a55bcd756f87e3dcf01015f54d343d7", "filename": "gcc/config/i386/avx512vpopcntdqintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqintrin.h?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -43,10 +43,10 @@ _mm512_popcnt_epi32 (__m512i __A)\n \n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_popcnt_epi32 (__m512i __A, __mmask16 __U, __m512i __B)\n+_mm512_mask_popcnt_epi32 (__m512i __W, __mmask16 __U, __m512i __A)\n {\n   return (__m512i) __builtin_ia32_vpopcountd_v16si_mask ((__v16si) __A,\n-\t\t\t\t\t\t\t (__v16si) __B,\n+\t\t\t\t\t\t\t (__v16si) __W,\n \t\t\t\t\t\t\t (__mmask16) __U);\n }\n \n@@ -69,10 +69,10 @@ _mm512_popcnt_epi64 (__m512i __A)\n \n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm512_mask_popcnt_epi64 (__m512i __A, __mmask8 __U, __m512i __B)\n+_mm512_mask_popcnt_epi64 (__m512i __W, __mmask8 __U, __m512i __A)\n {\n   return (__m512i) __builtin_ia32_vpopcountq_v8di_mask ((__v8di) __A,\n-\t\t\t\t\t\t\t(__v8di) __B,\n+\t\t\t\t\t\t\t(__v8di) __W,\n \t\t\t\t\t\t\t(__mmask8) __U);\n }\n "}, {"sha": "6890004816acdeaf0c03d84e63117463724bffb0", "filename": "gcc/config/i386/avx512vpopcntdqvlintrin.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqvlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqvlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqvlintrin.h?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -43,10 +43,10 @@ _mm_popcnt_epi32 (__m128i __A)\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_popcnt_epi32 (__m128i __A, __mmask16 __U, __m128i __B)\n+_mm_mask_popcnt_epi32 (__m128i __W, __mmask16 __U, __m128i __A)\n {\n   return (__m128i) __builtin_ia32_vpopcountd_v4si_mask ((__v4si) __A,\n-\t\t\t\t\t\t\t (__v4si) __B,\n+\t\t\t\t\t\t\t (__v4si) __W,\n \t\t\t\t\t\t\t (__mmask16) __U);\n }\n \n@@ -69,10 +69,10 @@ _mm256_popcnt_epi32 (__m256i __A)\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_popcnt_epi32 (__m256i __A, __mmask16 __U, __m256i __B)\n+_mm256_mask_popcnt_epi32 (__m256i __W, __mmask16 __U, __m256i __A)\n {\n   return (__m256i) __builtin_ia32_vpopcountd_v8si_mask ((__v8si) __A,\n-\t\t\t\t\t\t\t (__v8si) __B,\n+\t\t\t\t\t\t\t (__v8si) __W,\n \t\t\t\t\t\t\t (__mmask16) __U);\n }\n \n@@ -95,10 +95,10 @@ _mm_popcnt_epi64 (__m128i __A)\n \n extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_popcnt_epi64 (__m128i __A, __mmask8 __U, __m128i __B)\n+_mm_mask_popcnt_epi64 (__m128i __W, __mmask8 __U, __m128i __A)\n {\n   return (__m128i) __builtin_ia32_vpopcountq_v2di_mask ((__v2di) __A,\n-\t\t\t\t\t\t\t(__v2di) __B,\n+\t\t\t\t\t\t\t(__v2di) __W,\n \t\t\t\t\t\t\t(__mmask8) __U);\n }\n \n@@ -121,10 +121,10 @@ _mm256_popcnt_epi64 (__m256i __A)\n \n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_mask_popcnt_epi64 (__m256i __A, __mmask8 __U, __m256i __B)\n+_mm256_mask_popcnt_epi64 (__m256i __W, __mmask8 __U, __m256i __A)\n {\n   return (__m256i) __builtin_ia32_vpopcountq_v4di_mask ((__v4di) __A,\n-\t\t\t\t\t\t\t(__v4di) __B,\n+\t\t\t\t\t\t\t(__v4di) __W,\n \t\t\t\t\t\t\t(__mmask8) __U);\n }\n \n@@ -144,4 +144,3 @@ _mm256_maskz_popcnt_epi64 (__mmask8 __U, __m256i __A)\n #endif /* __DISABLE_AVX512VPOPCNTDQVL__ */\n \n #endif /* _AVX512VPOPCNTDQVLINTRIN_H_INCLUDED */\n-"}, {"sha": "93ce065414af95f4852ff4d9067ff486c977e585", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -1,5 +1,20 @@\n 2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/93696\n+\t* gcc.target/i386/pr93696-1.c: New test.\n+\t* gcc.target/i386/pr93696-2.c: New test.\n+\t* gcc.target/i386/avx512bitalg-vpopcntw-1.c (TEST): Fix argument order\n+\tof _mm*_mask_popcnt_*.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c (TEST): Likewise.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c (TEST): Likewise.\n+\t* gcc.target/i386/avx512bitalg-vpopcntb-1.c (TEST): Likewise.\n+\t* gcc.target/i386/avx512bitalg-vpopcntb.c (foo): Likewise.\n+\t* gcc.target/i386/avx512bitalg-vpopcntbvl.c (foo): Likewise.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntd.c (foo): Likewise.\n+\t* gcc.target/i386/avx512bitalg-vpopcntwvl.c (foo): Likewise.\n+\t* gcc.target/i386/avx512bitalg-vpopcntw.c (foo): Likewise.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntq.c (foo): Likewise.\n+\n \tPR tree-optimization/93582\n \t* gcc.dg/tree-ssa/pr93582-1.c: New test.\n \t* gcc.dg/tree-ssa/pr93582-2.c: New test."}, {"sha": "697757b8b73143f1445ee91d64236d350dce8a61", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntb-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb-1.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -41,7 +41,7 @@ TEST (void)\n   }\n \n   res1.x = INTRINSIC (_popcnt_epi8)       (src.x);\n-  res2.x = INTRINSIC (_mask_popcnt_epi8)  (src.x, mask, src0.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi8)  (src0.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_popcnt_epi8) (mask, src.x);\n \n   if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))"}, {"sha": "246f925eede1b88e1cf16a1fd7d8712869107690", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -13,7 +13,7 @@ int foo ()\n   __mmask16 msk;\n   __m512i c = _mm512_popcnt_epi8 (z);\n   asm volatile (\"\" : \"+v\" (c));\n-  c = _mm512_mask_popcnt_epi8 (z, msk, z1);\n+  c = _mm512_mask_popcnt_epi8 (z1, msk, z);\n   asm volatile (\"\" : \"+v\" (c));\n   c = _mm512_maskz_popcnt_epi8 (msk, z);\n   asm volatile (\"\" : \"+v\" (c));"}, {"sha": "8c7f45fc5f73f1657d1dca3159617cdadfc63466", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntbvl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntbvl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntbvl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntbvl.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -18,13 +18,13 @@ int foo ()\n   __mmask16 msk16;\n   __m256i c256 = _mm256_popcnt_epi8 (y);\n   asm volatile (\"\" : \"+v\" (c256));\n-  c256 = _mm256_mask_popcnt_epi8 (y, msk32, y_1);\n+  c256 = _mm256_mask_popcnt_epi8 (y_1, msk32, y);\n   asm volatile (\"\" : \"+v\" (c256));\n   c256 = _mm256_maskz_popcnt_epi8 (msk32, y);\n   asm volatile (\"\" : \"+v\" (c256));\n   __m128i c128 = _mm_popcnt_epi8 (x);\n   asm volatile (\"\" : \"+v\" (c128));\n-  c128 = _mm_mask_popcnt_epi8 (x, msk16, x_1);\n+  c128 = _mm_mask_popcnt_epi8 (x_1, msk16, x);\n   asm volatile (\"\" : \"+v\" (c128));\n   c128 = _mm_maskz_popcnt_epi8 (msk16, x);\n   asm volatile (\"\" : \"+v\" (c128));"}, {"sha": "0a725fe012aed5b0488ac1b1088b6248d3bafee4", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntw-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw-1.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -41,7 +41,7 @@ TEST (void)\n   }\n \n   res1.x = INTRINSIC (_popcnt_epi16)       (src.x);\n-  res2.x = INTRINSIC (_mask_popcnt_epi16)  (src.x, mask, src0.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi16)  (src0.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_popcnt_epi16) (mask, src.x);\n \n   if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))"}, {"sha": "90663f480fc627efc9da161cd168ad4b46362cd3", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntw.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -13,7 +13,7 @@ int foo ()\n   __mmask16 msk;\n   __m512i c = _mm512_popcnt_epi16 (z);\n   asm volatile (\"\" : \"+v\" (c));\n-  c = _mm512_mask_popcnt_epi16 (z, msk, z1);\n+  c = _mm512_mask_popcnt_epi16 (z1, msk, z);\n   asm volatile (\"\" : \"+v\" (c));\n   c = _mm512_maskz_popcnt_epi16 (msk, z);\n   asm volatile (\"\" : \"+v\" (c));"}, {"sha": "3a646b57282d4341dc89a95facd657dbb02509eb", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntwvl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntwvl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntwvl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntwvl.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -18,13 +18,13 @@ int foo ()\n   __mmask8 msk8;\n   __m256i c256 = _mm256_popcnt_epi16 (y);\n   asm volatile (\"\" : \"+v\" (c256));\n-  c256 = _mm256_mask_popcnt_epi16 (y, msk16, y_1);\n+  c256 = _mm256_mask_popcnt_epi16 (y_1, msk16, y);\n   asm volatile (\"\" : \"+v\" (c256));\n   c256 = _mm256_maskz_popcnt_epi16 (msk16, y);\n   asm volatile (\"\" : \"+v\" (c256));\n   __m128i c128 = _mm_popcnt_epi16 (x);\n   asm volatile (\"\" : \"+v\" (c128));\n-  c128 = _mm_mask_popcnt_epi16 (x, msk8, x_1);\n+  c128 = _mm_mask_popcnt_epi16 (x_1, msk8, x);\n   asm volatile (\"\" : \"+v\" (c128));\n   c128 = _mm_maskz_popcnt_epi16 (msk8, x);\n   asm volatile (\"\" : \"+v\" (c128));"}, {"sha": "e7d6bb4dd53fa11553ebcc3f7faa7f71c7e8546f", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -40,7 +40,7 @@ TEST (void)\n   }\n \n   res1.x = INTRINSIC (_popcnt_epi32)       (src.x);\n-  res2.x = INTRINSIC (_mask_popcnt_epi32)  (src.x, mask, src0.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi32)  (src0.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_popcnt_epi32) (mask, src.x);\n \n   if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))"}, {"sha": "b4d82f9703255b50ed86a42781f6678cde83b3e8", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntd.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -22,19 +22,19 @@ int foo ()\n   __mmask8 msk8;\n   __m128i a = _mm_popcnt_epi32 (x);\n   asm volatile (\"\" : \"+v\" (a));\n-  a = _mm_mask_popcnt_epi32 (x, msk8, x_1);\n+  a = _mm_mask_popcnt_epi32 (x_1, msk8, x);\n   asm volatile (\"\" : \"+v\" (a));\n   a = _mm_maskz_popcnt_epi32 (msk8, x);\n   asm volatile (\"\" : \"+v\" (a));\n   __m256i b = _mm256_popcnt_epi32 (y);\n   asm volatile (\"\" : \"+v\" (b));\n-  b = _mm256_mask_popcnt_epi32 (y, msk8, y_1);\n+  b = _mm256_mask_popcnt_epi32 (y_1, msk8, y);\n   asm volatile (\"\" : \"+v\" (b));\n   b = _mm256_maskz_popcnt_epi32 (msk8, y);\n   asm volatile (\"\" : \"+v\" (b));\n   __m512i c = _mm512_popcnt_epi32 (z);\n   asm volatile (\"\" : \"+v\" (c));\n-  c = _mm512_mask_popcnt_epi32 (z, msk, z_1);\n+  c = _mm512_mask_popcnt_epi32 (z_1, msk, z);\n   asm volatile (\"\" : \"+v\" (c));\n   c = _mm512_maskz_popcnt_epi32 (msk, z);\n   asm volatile (\"\" : \"+v\" (c));"}, {"sha": "2144cf32c0dbea0301744cb290f28d3a8083f848", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -40,7 +40,7 @@ TEST (void)\n   }\n \n   res1.x = INTRINSIC (_popcnt_epi64)       (src.x);\n-  res2.x = INTRINSIC (_mask_popcnt_epi64)  (src.x, mask, src0.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi64)  (src0.x, mask, src.x);\n   res3.x = INTRINSIC (_maskz_popcnt_epi64) (mask, src.x);\n \n   if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))"}, {"sha": "e87d6c999b6369a5db94ab521b4fe4a9671396a1", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntq.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -21,19 +21,19 @@ int foo ()\n   __mmask8 msk; \n   __m128i a = _mm_popcnt_epi64 (x);\n   asm volatile (\"\" : \"+v\" (a));\n-  a = _mm_mask_popcnt_epi64 (x, msk, x_1);\n+  a = _mm_mask_popcnt_epi64 (x_1, msk, x);\n   asm volatile (\"\" : \"+v\" (a));\n   a = _mm_maskz_popcnt_epi64 (msk, x);\n   asm volatile (\"\" : \"+v\" (a));\n   __m256i b = _mm256_popcnt_epi64 (y);\n   asm volatile (\"\" : \"+v\" (b));\n-  b = _mm256_mask_popcnt_epi64 (y, msk, y_1);\n+  b = _mm256_mask_popcnt_epi64 (y_1, msk, y);\n   asm volatile (\"\" : \"+v\" (b));\n   b = _mm256_maskz_popcnt_epi64 (msk, y);\n   asm volatile (\"\" : \"+v\" (b));\n   __m512i c = _mm512_popcnt_epi64 (z);\n   asm volatile (\"\" : \"+v\" (c));\n-  c = _mm512_mask_popcnt_epi64 (z, msk, z_1);\n+  c = _mm512_mask_popcnt_epi64 (z_1, msk, z);\n   asm volatile (\"\" : \"+v\" (c));\n   c = _mm512_maskz_popcnt_epi64 (msk, z); \n   asm volatile (\"\" : \"+v\" (c));"}, {"sha": "128bb98c0665b01d35430e90794b762e551e9797", "filename": "gcc/testsuite/gcc.target/i386/pr93696-1.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93696-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93696-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93696-1.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -0,0 +1,79 @@\n+/* PR target/93696 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bitalg -mavx512vpopcntdq -mavx512vl -mavx512bw -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"vpopcnt\\[bwdq]\\t%\\[xyz]mm1, %\\[xyz]mm0\\{%k\\[0-7]\\}\\[^\\{]\" 12 } } */\n+/* { dg-final { scan-assembler-not \"vmovdq\\[au]\\[0-9]\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i x, __mmask8 m, __m128i y)\n+{\n+  return _mm_mask_popcnt_epi64 (x, m, y);\n+}\n+\n+__m128i\n+f2 (__m128i x, __mmask8 m, __m128i y)\n+{\n+  return _mm_mask_popcnt_epi32 (x, m, y);\n+}\n+\n+__m128i\n+f3 (__m128i x, __mmask8 m, __m128i y)\n+{\n+  return _mm_mask_popcnt_epi16 (x, m, y);\n+}\n+\n+__m128i\n+f4 (__m128i x, __mmask16 m, __m128i y)\n+{\n+  return _mm_mask_popcnt_epi8 (x, m, y);\n+}\n+\n+__m256i\n+f5 (__m256i x, __mmask8 m, __m256i y)\n+{\n+  return _mm256_mask_popcnt_epi64 (x, m, y);\n+}\n+\n+__m256i\n+f6 (__m256i x, __mmask8 m, __m256i y)\n+{\n+  return _mm256_mask_popcnt_epi32 (x, m, y);\n+}\n+\n+__m256i\n+f7 (__m256i x, __mmask16 m, __m256i y)\n+{\n+  return _mm256_mask_popcnt_epi16 (x, m, y);\n+}\n+\n+__m256i\n+f8 (__m256i x, __mmask32 m, __m256i y)\n+{\n+  return _mm256_mask_popcnt_epi8 (x, m, y);\n+}\n+\n+__m512i\n+f9 (__m512i x, __mmask8 m, __m512i y)\n+{\n+  return _mm512_mask_popcnt_epi64 (x, m, y);\n+}\n+\n+__m512i\n+f10 (__m512i x, __mmask16 m, __m512i y)\n+{\n+  return _mm512_mask_popcnt_epi32 (x, m, y);\n+}\n+\n+__m512i\n+f11 (__m512i x, __mmask32 m, __m512i y)\n+{\n+  return _mm512_mask_popcnt_epi16 (x, m, y);\n+}\n+\n+__m512i\n+f12 (__m512i x, __mmask64 m, __m512i y)\n+{\n+  return _mm512_mask_popcnt_epi8 (x, m, y);\n+}"}, {"sha": "25a298aea18f1e9efd4ee38bae755aef85ead83a", "filename": "gcc/testsuite/gcc.target/i386/pr93696-2.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93696-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2b8ede40a81a83f50d1e705972bc46fafd4ce5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93696-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93696-2.c?ref=ae2b8ede40a81a83f50d1e705972bc46fafd4ce5", "patch": "@@ -0,0 +1,79 @@\n+/* PR target/93696 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bitalg -mavx512vpopcntdq -mavx512vl -mavx512bw -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"vpopcnt\\[bwdq]\\t%\\[xyz]mm1, %\\[xyz]mm0\\{%k\\[0-7]\\}\\{z\\}\" 12 } } */\n+/* { dg-final { scan-assembler-not \"vmovdq\\[au]\\[0-9]\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m128i x, __mmask8 m, __m128i y)\n+{\n+  return _mm_maskz_popcnt_epi64 (m, y);\n+}\n+\n+__m128i\n+f2 (__m128i x, __mmask8 m, __m128i y)\n+{\n+  return _mm_maskz_popcnt_epi32 (m, y);\n+}\n+\n+__m128i\n+f3 (__m128i x, __mmask8 m, __m128i y)\n+{\n+  return _mm_maskz_popcnt_epi16 (m, y);\n+}\n+\n+__m128i\n+f4 (__m128i x, __mmask16 m, __m128i y)\n+{\n+  return _mm_maskz_popcnt_epi8 (m, y);\n+}\n+\n+__m256i\n+f5 (__m256i x, __mmask8 m, __m256i y)\n+{\n+  return _mm256_maskz_popcnt_epi64 (m, y);\n+}\n+\n+__m256i\n+f6 (__m256i x, __mmask8 m, __m256i y)\n+{\n+  return _mm256_maskz_popcnt_epi32 (m, y);\n+}\n+\n+__m256i\n+f7 (__m256i x, __mmask16 m, __m256i y)\n+{\n+  return _mm256_maskz_popcnt_epi16 (m, y);\n+}\n+\n+__m256i\n+f8 (__m256i x, __mmask32 m, __m256i y)\n+{\n+  return _mm256_maskz_popcnt_epi8 (m, y);\n+}\n+\n+__m512i\n+f9 (__m512i x, __mmask8 m, __m512i y)\n+{\n+  return _mm512_maskz_popcnt_epi64 (m, y);\n+}\n+\n+__m512i\n+f10 (__m512i x, __mmask16 m, __m512i y)\n+{\n+  return _mm512_maskz_popcnt_epi32 (m, y);\n+}\n+\n+__m512i\n+f11 (__m512i x, __mmask32 m, __m512i y)\n+{\n+  return _mm512_maskz_popcnt_epi16 (m, y);\n+}\n+\n+__m512i\n+f12 (__m512i x, __mmask64 m, __m512i y)\n+{\n+  return _mm512_maskz_popcnt_epi8 (m, y);\n+}"}]}