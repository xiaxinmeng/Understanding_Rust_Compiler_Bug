{"sha": "19db9631bc261c09a592f20e68e1a72a78e646de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkYjk2MzFiYzI2MWMwOWE1OTJmMjBlNjhlMWE3MmE3OGU2NDZkZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-09-19T16:23:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-09-19T16:23:34Z"}, "message": "[multiple changes]\n\n2006-09-19  Mark Wielaard  <mark@klomp.org>\n\n\tFixes bug #29137\n\t* java/util/logging/LogManager.java (addLogger): Always check for\n\texisting children of a new Logger.\n\n2006-09-19  Tom Tromey  <tromey@redhat.com>\n\n\t* java/util/logging/LogManager.java: Re-merged with Classpath.\n\nFrom-SVN: r117058", "tree": {"sha": "ff3746b7de8d5e229356b1f899cbdc091d56636b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff3746b7de8d5e229356b1f899cbdc091d56636b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19db9631bc261c09a592f20e68e1a72a78e646de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19db9631bc261c09a592f20e68e1a72a78e646de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19db9631bc261c09a592f20e68e1a72a78e646de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19db9631bc261c09a592f20e68e1a72a78e646de/comments", "author": null, "committer": null, "parents": [{"sha": "7ab629664b6fae00406eeb8b662802b39b5d0f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab629664b6fae00406eeb8b662802b39b5d0f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab629664b6fae00406eeb8b662802b39b5d0f70"}], "stats": {"total": 123, "additions": 101, "deletions": 22}, "files": [{"sha": "27f582db733315dec3f3e4cb4174d271b4add57c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db9631bc261c09a592f20e68e1a72a78e646de/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db9631bc261c09a592f20e68e1a72a78e646de/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=19db9631bc261c09a592f20e68e1a72a78e646de", "patch": "@@ -1,3 +1,13 @@\n+2006-09-19  Mark Wielaard  <mark@klomp.org>\n+\n+\tFixes bug #29137\n+\t* java/util/logging/LogManager.java (addLogger): Always check for\n+\texisting children of a new Logger.\n+\n+2006-09-19  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/util/logging/LogManager.java: Re-merged with Classpath.\n+\n 2006-09-18  Tom Tromey  <tromey@redhat.com>\n \n \t* configure: Rebuilt."}, {"sha": "b8b31c43cb6fe52b8922b0b9da61fc90bab250b3", "filename": "libjava/java/util/logging/LogManager.java", "status": "modified", "additions": 91, "deletions": 22, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19db9631bc261c09a592f20e68e1a72a78e646de/libjava%2Fjava%2Futil%2Flogging%2FLogManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19db9631bc261c09a592f20e68e1a72a78e646de/libjava%2Fjava%2Futil%2Flogging%2FLogManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Flogging%2FLogManager.java?ref=19db9631bc261c09a592f20e68e1a72a78e646de", "patch": "@@ -39,6 +39,8 @@\n \n package java.util.logging;\n \n+import gnu.classpath.SystemProperties;\n+\n import java.beans.PropertyChangeListener;\n import java.beans.PropertyChangeSupport;\n import java.io.ByteArrayInputStream;\n@@ -50,12 +52,11 @@\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.StringTokenizer;\n \n-import gnu.classpath.SystemProperties;\n-\n /**\n  * The <code>LogManager</code> maintains a hierarchical namespace\n  * of Logger objects and manages properties for configuring the logging\n@@ -107,11 +108,23 @@\n  */\n public class LogManager\n {\n+  /**\n+   * The object name for the logging management bean.\n+   * @since 1.5\n+   */\n+  public static final String LOGGING_MXBEAN_NAME\n+    = \"java.util.logging:type=Logging\";\n+\n   /**\n    * The singleton LogManager instance.\n    */\n   private static LogManager logManager;\n \n+  /**\n+   * The singleton logging bean.\n+   */\n+  private static LoggingMXBean loggingBean;\n+\n   /**\n    * The registered named loggers; maps the name of a Logger to\n    * a WeakReference to it.\n@@ -305,24 +318,21 @@ public synchronized boolean addLogger(Logger logger)\n      * When adding \"foo.bar\", the logger \"foo.bar.baz\" should change\n      * its parent to \"foo.bar\".\n      */\n-    if (parent != Logger.root)\n+    for (Iterator iter = loggers.keySet().iterator(); iter.hasNext();)\n       {\n-\tfor (Iterator iter = loggers.keySet().iterator(); iter.hasNext();)\n-\t  {\n-\t    Logger possChild = (Logger) ((WeakReference) loggers.get(iter.next()))\n-              .get();\n-\t    if ((possChild == null) || (possChild == logger)\n-\t        || (possChild.getParent() != parent))\n-\t      continue;\n-\n-\t    if (! possChild.getName().startsWith(name))\n-\t      continue;\n-\n-\t    if (possChild.getName().charAt(name.length()) != '.')\n-\t      continue;\n-\n-\t    possChild.setParent(logger);\n-\t  }\n+\tLogger possChild = (Logger) ((WeakReference) loggers.get(iter.next()))\n+\t  .get();\n+\tif ((possChild == null) || (possChild == logger)\n+\t    || (possChild.getParent() != parent))\n+\t  continue;\n+\t\n+\tif (! possChild.getName().startsWith(name))\n+\t  continue;\n+\t\n+\tif (possChild.getName().charAt(name.length()) != '.')\n+\t  continue;\n+\t\n+\tpossChild.setParent(logger);\n       }\n \n     return true;\n@@ -836,19 +846,19 @@ private static final Object createInstance(String className, Class type,\n       }\n     catch (ClassNotFoundException e)\n       {\n-        warn(property, className, \"class not found\");\n+        warn(property, className, \"class not found\", e);\n       }\n     catch (IllegalAccessException e)\n       {\n-        warn(property, className, \"illegal access\");\n+        warn(property, className, \"illegal access\", e);\n       }\n     catch (InstantiationException e)\n       {\n         warn(property, className, e);\n       }\n     catch (java.lang.LinkageError e)\n       {\n-        warn(property, className, \"linkage error\");\n+        warn(property, className, \"linkage error\", e);\n       }\n \n     return null;\n@@ -909,4 +919,63 @@ private static Class locateClass(String name) throws ClassNotFoundException\n       }\n   }\n \n+  /**\n+   * Return the logging bean.  There is a single logging bean per\n+   * VM instance.\n+   * @since 1.5\n+   */\n+  public static synchronized LoggingMXBean getLoggingMXBean()\n+  {\n+    if (loggingBean == null)\n+      {\n+        loggingBean = new LoggingMXBean()\n+        {\n+          public String getLoggerLevel(String logger)\n+          {\n+            LogManager mgr = getLogManager();\n+            Logger l = mgr.getLogger(logger);\n+            if (l == null)\n+              return null;\n+            Level lev = l.getLevel();\n+            if (lev == null)\n+              return \"\";\n+            return lev.getName();\n+          }\n+\n+          public List getLoggerNames()\n+          {\n+            LogManager mgr = getLogManager();\n+            // This is inefficient, but perhaps better for maintenance.\n+            return Collections.list(mgr.getLoggerNames());\n+          }\n+\n+          public String getParentLoggerName(String logger)\n+          {\n+            LogManager mgr = getLogManager();\n+            Logger l = mgr.getLogger(logger);\n+            if (l == null)\n+              return null;\n+            l = l.getParent();\n+            if (l == null)\n+              return \"\";\n+            return l.getName();\n+          }\n+\n+          public void setLoggerLevel(String logger, String level)\n+          {\n+            LogManager mgr = getLogManager();\n+            Logger l = mgr.getLogger(logger);\n+            if (l == null)\n+              throw new IllegalArgumentException(\"no logger named \" + logger);\n+            Level newLevel;\n+            if (level == null)\n+              newLevel = null;\n+            else\n+              newLevel = Level.parse(level);\n+            l.setLevel(newLevel);\n+          }\n+        };\n+      }\n+    return loggingBean;\n+  }\n }"}]}