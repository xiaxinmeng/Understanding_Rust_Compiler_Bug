{"sha": "76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhNGI3YWQyZDdkMDcxNDU4YTRjYjRkODUxNWMxNGI5YWJmMGQxOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-02-21T07:37:06Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-02-21T07:37:06Z"}, "message": "re PR fortran/60286 (INQUIRE reports STDOUT as not writable)\n\n2014-02-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/60286\n        * libgfortran/io/inquire.c (yes, no): New static const char\n        * vars.\n        (inquire_via_unit): Use them. Use OPEN mode instead of using\n        POSIX's access to query about write=, read= and readwrite=.\n\n2014-02-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/60286\n        * gfortran.dg/inquire_16.f90: New.\n\nFrom-SVN: r207979", "tree": {"sha": "641b00450c44790770bc3d2e905d558f2b42ee74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/641b00450c44790770bc3d2e905d558f2b42ee74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91d6f071fbbd5bc53d43902bb2259788b121ebfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91d6f071fbbd5bc53d43902bb2259788b121ebfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91d6f071fbbd5bc53d43902bb2259788b121ebfa"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "ec294e76c3962bac49fe62591f18824668ae5cfe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "patch": "@@ -1,3 +1,8 @@\n+2014-02-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60286\n+\t* gfortran.dg/inquire_16.f90: New.\n+\n 2014-02-20  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gcc.target/nios2/biggot-1.c: New."}, {"sha": "b52e23db6b43adb7ea559063fe2b370df145452f", "filename": "gcc/testsuite/gfortran.dg/inquire_16.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_16.f90?ref=76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+!\n+! PR fortran/60286\n+!\n+! Contributed by  Alexander Vogt\n+!\n+program test_inquire\n+  use, intrinsic :: ISO_Fortran_env\n+  implicit none\n+  character(len=20) :: s_read, s_write, s_readwrite\n+\n+  inquire(unit=input_unit, read=s_read, write=s_write, &\n+          readwrite=s_readwrite)\n+  if (s_read /= \"YES\" .or. s_write /= \"NO\" .or. s_readwrite /=\"NO\") then\n+    call abort()\n+  endif\n+\n+  inquire(unit=output_unit, read=s_read, write=s_write, &\n+          readwrite=s_readwrite)\n+  if (s_read /= \"NO\" .or. s_write /= \"YES\" .or. s_readwrite /=\"NO\") then\n+    call abort()\n+  endif\n+\n+  inquire(unit=error_unit, read=s_read, write=s_write, &\n+          readwrite=s_readwrite)\n+  if (s_read /= \"NO\" .or. s_write /= \"YES\" .or. s_readwrite /=\"NO\") then\n+    call abort()\n+  endif\n+end program test_inquire"}, {"sha": "e39607e56734bc5e64c18384ea6bcd26a89f29c4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "patch": "@@ -1,3 +1,10 @@\n+2014-02-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/60286\n+\t* libgfortran/io/inquire.c (yes, no): New static const char vars.\n+\t(inquire_via_unit): Use them. Use OPEN mode instead of using\n+\tPOSIX's access to query about write=, read= and readwrite=.\n+\n 2014-01-20  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n "}, {"sha": "6801d01b0847584bf5cda9a17026ccc40aae91d1", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=76a4b7ad2d7d071458a4cb4d8515c14b9abf0d19", "patch": "@@ -30,7 +30,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <string.h>\n \n \n-static const char undefined[] = \"UNDEFINED\";\n+static const char yes[] = \"YES\", no[] = \"NO\", undefined[] = \"UNDEFINED\";\n \n \n /* inquire_via_unit()-- Inquiry via unit number.  The unit might not exist. */\n@@ -130,10 +130,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \t  {\n \t  case ACCESS_DIRECT:\n \t  case ACCESS_STREAM:\n-\t    p = \"NO\";\n+\t    p = no;\n \t    break;\n \t  case ACCESS_SEQUENTIAL:\n-\t    p = \"YES\";\n+\t    p = yes;\n \t    break;\n \t  default:\n \t    internal_error (&iqp->common, \"inquire_via_unit(): Bad access\");\n@@ -151,10 +151,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \t  {\n \t  case ACCESS_SEQUENTIAL:\n \t  case ACCESS_STREAM:\n-\t    p = \"NO\";\n+\t    p = no;\n \t    break;\n \t  case ACCESS_DIRECT:\n-\t    p = \"YES\";\n+\t    p = yes;\n \t    break;\n \t  default:\n \t    internal_error (&iqp->common, \"inquire_via_unit(): Bad access\");\n@@ -191,10 +191,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \tswitch (u->flags.form)\n \t  {\n \t  case FORM_FORMATTED:\n-\t    p = \"YES\";\n+\t    p = yes;\n \t    break;\n \t  case FORM_UNFORMATTED:\n-\t    p = \"NO\";\n+\t    p = no;\n \t    break;\n \t  default:\n \t    internal_error (&iqp->common, \"inquire_via_unit(): Bad form\");\n@@ -211,10 +211,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \tswitch (u->flags.form)\n \t  {\n \t  case FORM_FORMATTED:\n-\t    p = \"NO\";\n+\t    p = no;\n \t    break;\n \t  case FORM_UNFORMATTED:\n-\t    p = \"YES\";\n+\t    p = yes;\n \t    break;\n \t  default:\n \t    internal_error (&iqp->common, \"inquire_via_unit(): Bad form\");\n@@ -266,10 +266,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \tswitch (u->flags.pad)\n \t  {\n \t  case PAD_YES:\n-\t    p = \"YES\";\n+\t    p = yes;\n \t    break;\n \t  case PAD_NO:\n-\t    p = \"NO\";\n+\t    p = no;\n \t    break;\n \t  default:\n \t    internal_error (&iqp->common, \"inquire_via_unit(): Bad pad\");\n@@ -336,10 +336,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \t    switch (u->flags.async)\n \t    {\n \t      case ASYNC_YES:\n-\t\tp = \"YES\";\n+\t\tp = yes;\n \t\tbreak;\n \t      case ASYNC_NO:\n-\t\tp = \"NO\";\n+\t\tp = no;\n \t\tbreak;\n \t      default:\n \t\tinternal_error (&iqp->common, \"inquire_via_unit(): Bad async\");\n@@ -423,10 +423,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \t      {\n \t      case ACCESS_SEQUENTIAL:\n \t      case ACCESS_DIRECT:\n-\t\tp = \"NO\";\n+\t\tp = no;\n \t\tbreak;\n \t      case ACCESS_STREAM:\n-\t\tp = \"YES\";\n+\t\tp = yes;\n \t\tbreak;\n \t      default:\n \t\tinternal_error (&iqp->common, \"inquire_via_unit(): Bad pad\");\n@@ -499,25 +499,19 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \n   if ((cf & IOPARM_INQUIRE_HAS_READ) != 0)\n     {\n-      p = (u == NULL) ? inquire_read (NULL, 0) :\n-\tinquire_read (u->file, u->file_len);\n-\n+      p = (!u || u->flags.action == ACTION_WRITE) ? no : yes;\n       cf_strcpy (iqp->read, iqp->read_len, p);\n     }\n \n   if ((cf & IOPARM_INQUIRE_HAS_WRITE) != 0)\n     {\n-      p = (u == NULL) ? inquire_write (NULL, 0) :\n-\tinquire_write (u->file, u->file_len);\n-\n+      p = (!u || u->flags.action == ACTION_READ) ? no : yes;\n       cf_strcpy (iqp->write, iqp->write_len, p);\n     }\n \n   if ((cf & IOPARM_INQUIRE_HAS_READWRITE) != 0)\n     {\n-      p = (u == NULL) ? inquire_readwrite (NULL, 0) :\n-\tinquire_readwrite (u->file, u->file_len);\n-\n+      p = (!u || u->flags.action != ACTION_READWRITE) ? no : yes;\n       cf_strcpy (iqp->readwrite, iqp->readwrite_len, p);\n     }\n \n@@ -552,10 +546,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \tswitch (u->flags.pad)\n \t  {\n \t  case PAD_NO:\n-\t    p = \"NO\";\n+\t    p = no;\n \t    break;\n \t  case PAD_YES:\n-\t    p = \"YES\";\n+\t    p = yes;\n \t    break;\n \t  default:\n \t    internal_error (&iqp->common, \"inquire_via_unit(): Bad pad\");"}]}