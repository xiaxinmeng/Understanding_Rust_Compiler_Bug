{"sha": "9474a0f4a55caf1e2e5945d7407164cf3b58f056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3NGEwZjRhNTVjYWYxZTJlNTk0NWQ3NDA3MTY0Y2YzYjU4ZjA1Ng==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-16T16:39:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-16T16:45:05Z"}, "message": "TraitImpl blocks have a different CanonicalPath to normal impl blocks\n\nTraitImpls have a canonical path which is a trait projection such as\n\n```rust\npub trait Trait { // ::a::Trait\n  fn f(&self); // ::a::Trait::f\n}\n\nimpl Trait for Struct {\n   fn f(&self) {} // <::a::Struct as ::a::Trait>::f\n}\n```", "tree": {"sha": "7e3b238813583e89aab5473fb99ac9df27869964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e3b238813583e89aab5473fb99ac9df27869964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9474a0f4a55caf1e2e5945d7407164cf3b58f056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9474a0f4a55caf1e2e5945d7407164cf3b58f056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9474a0f4a55caf1e2e5945d7407164cf3b58f056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9474a0f4a55caf1e2e5945d7407164cf3b58f056/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f09fd5a48046ceba064bde2f230386fbc3700f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f09fd5a48046ceba064bde2f230386fbc3700f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f09fd5a48046ceba064bde2f230386fbc3700f"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "3dd81d85e347d0d0f2f4578b2e58dbf021d1ebd8", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9474a0f4a55caf1e2e5945d7407164cf3b58f056/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9474a0f4a55caf1e2e5945d7407164cf3b58f056/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=9474a0f4a55caf1e2e5945d7407164cf3b58f056", "patch": "@@ -149,11 +149,19 @@ class ResolveTopLevel : public ResolverBase\n   {\n     bool canonicalize_type_args = !impl_block.has_generics ();\n     bool type_resolve_generic_args = false;\n-    CanonicalPath impl_type\n+\n+    CanonicalPath impl_type_seg\n       = ResolveTypeToCanonicalPath::resolve (*impl_block.get_type ().get (),\n \t\t\t\t\t     canonicalize_type_args,\n \t\t\t\t\t     type_resolve_generic_args);\n-    CanonicalPath impl_prefix = prefix.append (impl_type);\n+    CanonicalPath trait_type_seg\n+      = ResolveTypeToCanonicalPath::resolve (impl_block.get_trait_path (),\n+\t\t\t\t\t     canonicalize_type_args,\n+\t\t\t\t\t     type_resolve_generic_args);\n+\n+    CanonicalPath projection\n+      = TraitImplProjection::resolve (trait_type_seg, impl_type_seg);\n+    CanonicalPath impl_prefix = prefix.append (projection);\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       ResolveToplevelImplItem::go (impl_item.get (), impl_prefix);"}, {"sha": "6d40517d477e54a18bbde79ef4b380f3e749b0b8", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9474a0f4a55caf1e2e5945d7407164cf3b58f056/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9474a0f4a55caf1e2e5945d7407164cf3b58f056/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=9474a0f4a55caf1e2e5945d7407164cf3b58f056", "patch": "@@ -162,6 +162,17 @@ class ResolvePathSegmentToCanonicalPath\n   }\n };\n \n+class TraitImplProjection\n+{\n+public:\n+  static CanonicalPath resolve (const CanonicalPath &trait_seg,\n+\t\t\t\tconst CanonicalPath &impl_type_seg)\n+  {\n+    return CanonicalPath (\"<\" + impl_type_seg.get () + \" as \" + trait_seg.get ()\n+\t\t\t  + \">\");\n+  }\n+};\n+\n // FIXME: as part of imports and visibility we need to be able to keep a context\n // for handling PathInExpressions segments as they can be local to a particular\n // lexical scope requiring a context to be maintained for resolution"}, {"sha": "b1f745e4a4c35358ad283d03e55be11a3ca73a1e", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9474a0f4a55caf1e2e5945d7407164cf3b58f056/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9474a0f4a55caf1e2e5945d7407164cf3b58f056/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=9474a0f4a55caf1e2e5945d7407164cf3b58f056", "patch": "@@ -36,6 +36,14 @@ namespace Resolver {\n // impl X<T>   { fn test - path X::test}\n // impl X<i32> { fn test - path X<i32>::test }\n // impl X<f32> { fn test - path X<f32>::test }\n+//\n+// pub trait Trait { // ::a::Trait\n+//   fn f(&self); // ::a::Trait::f\n+// }\n+//\n+// impl Trait for Struct {\n+//    fn f(&self) {} // <::a::Struct as ::a::Trait>::f\n+// }\n class CanonicalPath\n {\n public:"}]}