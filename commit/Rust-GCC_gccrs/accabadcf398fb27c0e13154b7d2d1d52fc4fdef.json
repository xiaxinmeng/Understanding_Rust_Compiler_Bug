{"sha": "accabadcf398fb27c0e13154b7d2d1d52fc4fdef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjYWJhZGNmMzk4ZmIyN2MwZTEzMTU0YjdkMmQxZDUyZmM0ZmRlZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-08-21T20:56:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-08-21T20:56:28Z"}, "message": "revert accidental checkin of tests\n\nFrom-SVN: r116312", "tree": {"sha": "d26c297d6ff70523181fa0f3394c80d80d31daff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d26c297d6ff70523181fa0f3394c80d80d31daff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/accabadcf398fb27c0e13154b7d2d1d52fc4fdef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accabadcf398fb27c0e13154b7d2d1d52fc4fdef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/accabadcf398fb27c0e13154b7d2d1d52fc4fdef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accabadcf398fb27c0e13154b7d2d1d52fc4fdef/comments", "author": null, "committer": null, "parents": [{"sha": "c6c7698dfd268ad41c9ca00a8c49333d09c51e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c7698dfd268ad41c9ca00a8c49333d09c51e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c7698dfd268ad41c9ca00a8c49333d09c51e20"}], "stats": {"total": 87, "additions": 0, "deletions": 87}, "files": [{"sha": "0d31ee435471d436c52fad23498408bacf604556", "filename": "gcc/testsuite/g++.dg/abi/forced-sticky.C", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c7698dfd268ad41c9ca00a8c49333d09c51e20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fforced-sticky.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c7698dfd268ad41c9ca00a8c49333d09c51e20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fforced-sticky.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fforced-sticky.C?ref=c6c7698dfd268ad41c9ca00a8c49333d09c51e20", "patch": "@@ -1,62 +0,0 @@\n-// Test for \"sticky cancel\": if a catch (...) block discards the\n-// cancellation exception, a new one is raised at the next cancellation\n-// point.\n-\n-// This test only applies to glibc targets.\n-// { dg-do run { target *-*-linux* } }\n-// { dg-options \"-pthread\" }\n-\n-#include <pthread.h>\n-#include <cxxabi.h>\n-extern \"C\" int printf (const char *, ...);\n-\n-void* thread_main(void*)\n-{\n-  try\n-    {\n-      // Spin until we get cancelled.\n-      while (1)\n-\tpthread_testcancel();\n-    }\n-  catch (...)\n-    {\n-      // Catch and discard the forced unwind.\n-      printf (\"caught ...\\n\");\n-    }\n-\n-  try\n-    {\n-      // Start unwinding again.\n-      pthread_testcancel();\n-    }\n-  catch (...)\n-    {\n-      // Catch and discard again.  This time the thread exits before the\n-      // next cancellation point, so we're done.\n-      printf (\"caught ... again\\n\");\n-      return 0;\n-    }\n-\n-  return (void*)4;\n-}\n-\n-int main()\n-{\n-  pthread_t thread;\n-  int r;\n-  void *p;\n-\n-  r = pthread_create (&thread, NULL, thread_main, NULL);\n-  if (r)\n-    return 1;\n-\n-  r = pthread_cancel (thread);\n-  if (r)\n-    return 2;\n-\n-  r = pthread_join (thread, &p);\n-  if (r)\n-    return 3;\n-\n-  return (int)p;\n-}"}, {"sha": "7a9c35964f7ce9a74245f1ce1f4f0125055b4a79", "filename": "gcc/testsuite/g++.dg/abi/forced.C", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c7698dfd268ad41c9ca00a8c49333d09c51e20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fforced.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c7698dfd268ad41c9ca00a8c49333d09c51e20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fforced.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fforced.C?ref=c6c7698dfd268ad41c9ca00a8c49333d09c51e20", "patch": "@@ -1,25 +0,0 @@\n-// This test only applies to glibc (NPTL) targets.\n-// { dg-do run { target *-*-linux* } }\n-// { dg-options \"-pthread\" }\n-\n-#include <pthread.h>\n-#include <cxxabi.h>\n-extern \"C\" int printf (const char *, ...);\n-\n-int main()\n-{\n-  try\n-    {\n-      pthread_exit (0);\n-    }\n-  catch (abi::__forced_unwind &)\n-    {\n-      printf (\"caught forced unwind\\n\");\n-      throw;\n-    }\n-  catch (...)\n-    {\n-      printf (\"caught ...\\n\");\n-      return 1;\n-    }\n-}"}]}