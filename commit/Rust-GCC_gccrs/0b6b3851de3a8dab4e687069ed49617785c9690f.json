{"sha": "0b6b3851de3a8dab4e687069ed49617785c9690f", "node_id": "C_kwDOANBUbNoAKDBiNmIzODUxZGUzYThkYWI0ZTY4NzA2OWVkNDk2MTc3ODVjOTY5MGY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-10T14:05:03Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:28Z"}, "message": "libproc_macro: Add Literal type interface\n\nAdd Literal type rust interface to libproc_macro.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/lib.rs: Add Literal.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "12d9a853ca8d1f64bbc752239458d0dee15f4316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12d9a853ca8d1f64bbc752239458d0dee15f4316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b6b3851de3a8dab4e687069ed49617785c9690f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6b3851de3a8dab4e687069ed49617785c9690f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6b3851de3a8dab4e687069ed49617785c9690f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6b3851de3a8dab4e687069ed49617785c9690f/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f6d36157d123e6960f4256243480e5d53b7ba72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6d36157d123e6960f4256243480e5d53b7ba72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6d36157d123e6960f4256243480e5d53b7ba72"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "78a302f889af570f949fc751bb1badf03c4eeb07", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b6b3851de3a8dab4e687069ed49617785c9690f/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b6b3851de3a8dab4e687069ed49617785c9690f/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=0b6b3851de3a8dab4e687069ed49617785c9690f", "patch": "@@ -1,5 +1,6 @@\n use std::error;\n use std::fmt;\n+use std::str::FromStr;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum Delimiter {\n@@ -104,3 +105,166 @@ impl fmt::Display for LexError {\n }\n \n impl error::Error for LexError {}\n+\n+#[derive(Clone)]\n+pub struct Literal {\n+    // Internal implementation details\n+}\n+\n+impl Literal {\n+    // TODO: Add experimental API functions for this type\n+\n+    pub fn u8_suffixed(n: u8) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u16_suffixed(n: u16) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u32_suffixed(n: u32) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u64_suffixed(n: u64) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u128_suffixed(n: u128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn usize_suffixed(n: usize) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i8_suffixed(n: i8) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i16_suffixed(n: i16) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i32_suffixed(n: i32) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i64_suffixed(n: i64) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i128_suffixed(n: i128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn isize_suffixed(n: isize) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    // Unsuffixed\n+\n+    pub fn u8_unsuffixed(n: u8) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u16_unsuffixed(n: u16) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u32_unsuffixed(n: u32) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u64_unsuffixed(n: u64) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn u128_unsuffixed(n: u128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn usize_unsuffixed(n: usize) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i8_unsuffixed(n: i8) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i16_unsuffixed(n: i16) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i32_unsuffixed(n: i32) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i64_unsuffixed(n: i64) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn i128_unsuffixed(n: i128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn isize_unsuffixed(n: isize) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn f32_unsuffixed(n: f32) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn f32_suffixed(n: f32) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn f64_unsuffixed(n: f64) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn f64_suffixed(n: f64) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn string(string: &str) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn character(c: char) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn byte_string(bytes: &[u8]) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        todo!(\"Get the span of a literal\")\n+    }\n+\n+    pub fn set_span(&mut self, span: Span) {\n+        todo!(\"Set the span of a literal\")\n+    }\n+}\n+\n+impl fmt::Debug for Literal {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Display for Literal {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl FromStr for Literal {\n+    type Err = LexError;\n+\n+    fn from_str(src: &str) -> Result<Self, LexError> {\n+        todo!(\"Implement this function\")\n+    }\n+}"}]}