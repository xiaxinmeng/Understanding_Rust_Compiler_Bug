{"sha": "c5540945071f17bed8009e2cfeffd7af8e830ba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU1NDA5NDUwNzFmMTdiZWQ4MDA5ZTJjZmVmZmQ3YWY4ZTgzMGJhNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-07-10T23:21:39Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-07-10T23:21:39Z"}, "message": "re PR c++/30044 (ICE in tsubst, at cp/pt.c:7359)\n\nFix PR c++/30044\n\ngcc/cp/ChangeLog:\n\n\tPR c++/30044\n\t* pt.c (begin_template_parm_list): Add a dummy parameter level\n\tto current_template_parms.\n\t(end_template_parm_list): Remove the dummy parameter level\n\tbefore adding the real one.\n\t(tsubst): Don't attempt to substitute for template parameters\n\tcorresponding to a dummy argument level.\n\t(template_parms_to_args): Remove obsolete hack for\n\tgiving template template arguments the proper level.\n\t(splite_late_return_type): Remove obsolete hack for giving\n\ttemplate template arguments the proper level.\n\t* error.c (dump_template_decl): Don't print dummy template\n\tlevels.\n\ngcc/testsuite/ChangeLog\n\n\tPR c++/30044\n\t* g++.dg/cpp0x/auto46.C: New test.\n\t* g++.dg/template/pr30044.C: New test.\n\t* g++.dg/template/shadow2.C: New test.\n\t* g++.dg/template/error55.C: New test.\n\t* g++.dg/template/crash83.C: Accept any error string.\n\t* g++.dg/cpp0x/variadic18.C: Adjust to avoid shadowing template\n\tparameters.\n\t* g++.dg/cpp0x/variadic18.C: Likewise\n\t* g++.dg/template/canon-type-13.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp42.C: Likewise.\n\t* g++.dg/torture/20070621-1.C: Likewise.\n\nFrom-SVN: r225706", "tree": {"sha": "6449427b1ab698673633eb97179cc607d0dca792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6449427b1ab698673633eb97179cc607d0dca792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5540945071f17bed8009e2cfeffd7af8e830ba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5540945071f17bed8009e2cfeffd7af8e830ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5540945071f17bed8009e2cfeffd7af8e830ba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5540945071f17bed8009e2cfeffd7af8e830ba7/comments", "author": null, "committer": null, "parents": [{"sha": "0a73242e1ab3ac00d8fe9a98f10732473a96dc04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a73242e1ab3ac00d8fe9a98f10732473a96dc04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a73242e1ab3ac00d8fe9a98f10732473a96dc04"}], "stats": {"total": 113, "additions": 86, "deletions": 27}, "files": [{"sha": "2b46fbd2e1d9c5b77f95f46feefd5860bf5c35eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -1,3 +1,19 @@\n+2015-07-10  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/30044\n+\t* pt.c (begin_template_parm_list): Add a dummy parameter level\n+\tto current_template_parms.\n+\t(end_template_parm_list): Remove the dummy parameter level\n+\tbefore adding the real one.\n+\t(tsubst): Don't attempt to substitute for template parameters\n+\tcorresponding to a dummy argument level.\n+\t(template_parms_to_args): Remove obsolete hack for\n+\tgiving template template arguments the proper level.\n+\t(splite_late_return_type): Remove obsolete hack for giving\n+\ttemplate template arguments the proper level.\n+\t* error.c (dump_template_decl): Don't print dummy template\n+\tlevels.\n+\n 2015-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54521"}, {"sha": "b811df2b9be24fba4a834145a02dd5b2cef389e7", "filename": "gcc/cp/error.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -1295,6 +1295,14 @@ dump_template_decl (cxx_pretty_printer *pp, tree t, int flags)\n \t  tree inner_parms = INNERMOST_TEMPLATE_PARMS (parms);\n \t  int len = TREE_VEC_LENGTH (inner_parms);\n \n+\t  if (len == 0)\n+\t    {\n+\t      /* Skip over the dummy template levels of a template template\n+\t\t parm.  */\n+\t      gcc_assert (TREE_CODE (TREE_TYPE (t)) == TEMPLATE_TEMPLATE_PARM);\n+\t      continue;\n+\t    }\n+\n \t  pp_cxx_ws_string (pp, \"template\");\n \t  pp_cxx_begin_template_argument_list (pp);\n "}, {"sha": "064cbfdc4ecaef4961523716395b348b3bb18ad0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -657,6 +657,12 @@ begin_template_parm_list (void)\n   ++processing_template_decl;\n   ++processing_template_parmlist;\n   note_template_header (0);\n+\n+  /* Add a dummy parameter level while we process the parameter list.  */\n+  current_template_parms\n+    = tree_cons (size_int (processing_template_decl),\n+\t\t make_tree_vec (0),\n+\t\t current_template_parms);\n }\n \n /* This routine is called when a specialization is declared.  If it is\n@@ -3888,6 +3894,9 @@ end_template_parm_list (tree parms)\n   tree parm, next;\n   tree saved_parmlist = make_tree_vec (list_length (parms));\n \n+  /* Pop the dummy parameter level and add the real one.  */\n+  current_template_parms = TREE_CHAIN (current_template_parms);\n+\n   current_template_parms\n     = tree_cons (size_int (processing_template_decl),\n \t\t saved_parmlist, current_template_parms);\n@@ -4023,21 +4032,6 @@ template_parms_to_args (tree parms)\n \targs = a;\n     }\n \n-    if (length > 1 && TREE_VEC_ELT (args, 0) == NULL_TREE)\n-      /* This can happen for template parms of a template template\n-\t parameter, e.g:\n-\n-\t template<template<class T, class U> class TT> struct S;\n-\n-\t Consider the level of the parms of TT; T and U both have\n-\t level 2; TT has no template parm of level 1. So in this case\n-\t the first element of full_template_args is NULL_TREE. If we\n-\t leave it like this TMPL_ARGS_DEPTH on args returns 1 instead\n-\t of 2. This will make tsubst wrongly consider that T and U\n-\t have level 1. Instead, let's create a dummy vector as the\n-\t first element of full_template_args so that TMPL_ARGS_DEPTH\n-\t returns the correct depth for args.  */\n-      TREE_VEC_ELT (args, 0) = make_tree_vec (1);\n   return args;\n }\n \n@@ -12073,7 +12067,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \ttemplate_parm_level_and_index (t, &level, &idx); \n \n \tlevels = TMPL_ARGS_DEPTH (args);\n-\tif (level <= levels)\n+\tif (level <= levels\n+\t    && TREE_VEC_LENGTH (TMPL_ARGS_LEVEL (args, level)) > 0)\n \t  {\n \t    arg = TMPL_ARG (args, level, idx);\n \n@@ -22440,11 +22435,6 @@ splice_late_return_type (tree type, tree late_return_type)\n     return type;\n   argvec = make_tree_vec (1);\n   TREE_VEC_ELT (argvec, 0) = late_return_type;\n-  if (processing_template_parmlist)\n-    /* For a late-specified return type in a template type-parameter, we\n-       need to add a dummy argument level for its parmlist.  */\n-    argvec = add_to_template_args\n-      (make_tree_vec (processing_template_parmlist), argvec);\n   if (current_template_parms)\n     argvec = add_to_template_args (current_template_args (), argvec);\n   return tsubst (type, argvec, tf_warning_or_error, NULL_TREE);"}, {"sha": "fae1defbb6263d5650933ea026b06c4507990a97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -1,3 +1,18 @@\n+2015-07-10  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/30044\n+\t* g++.dg/cpp0x/auto46.C: New test.\n+\t* g++.dg/template/pr30044.C: New test.\n+\t* g++.dg/template/shadow2.C: New test.\n+\t* g++.dg/template/error55.C: New test.\n+\t* g++.dg/template/crash83.C: Accept any error string.\n+\t* g++.dg/cpp0x/variadic18.C: Adjust to avoid shadowing template\n+\tparameters.\n+\t* g++.dg/cpp0x/variadic18.C: Likewise\n+\t* g++.dg/template/canon-type-13.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp42.C: Likewise.\n+\t* g++.dg/torture/20070621-1.C: Likewise.\n+\n 2015-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54521"}, {"sha": "09e9f4436cfb976826da1b03f36e04f981b5559d", "filename": "gcc/testsuite/g++.dg/cpp0x/auto46.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto46.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -0,0 +1,5 @@\n+// Addendum to auto23.C, now with nested template parameter lists\n+// { dg-do compile { target c++11 } }\n+\n+template<template <auto f()->int> class> struct A { };\n+template<template <template <auto f()->int> class> class> struct B { };"}, {"sha": "57fdc865501f31232e7a5441f596094bf8841003", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile { target c++11 } }\n template<typename...> class tuple { };\n \n-template<typename T, template<typename T> class... Metafunctions>\n+template<typename T, template<typename U> class... Metafunctions>\n struct apply_all\n {\n   typedef tuple<typename Metafunctions<T>::type...> type;"}, {"sha": "3be9bb022dcf104e2d44aae0c2e0a65ad1da19a4", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -4,7 +4,7 @@ struct tuple {\n   static const int value = 0;\n };\n \n-template<typename T, template<class T> class... Metafunctions>\n+template<typename T, template<class U> class... Metafunctions>\n struct tuple<Metafunctions<T>...> {\n   static const int value = 1;\n };"}, {"sha": "5a8d37d18f3d46386834fb705761a03c054c2d0a", "filename": "gcc/testsuite/g++.dg/template/canon-type-13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-13.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -11,7 +11,7 @@ struct S1\n {\n };\n \n-template<class T, template<class T>  class A, template<class T>  class B = A>\n+template<class T, template<class U>  class A, template<class U>  class B = A>\n struct C\n {\n   B<T> m;"}, {"sha": "7dcbed93d164698753ade9d83a1b92fcd1b1c1d1", "filename": "gcc/testsuite/g++.dg/template/crash83.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash83.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash83.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash83.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -2,4 +2,4 @@\n \n template<int> struct A {};\n \n-template<typename = class A<0>: > struct B {}; // { dg-error \"explicit specialization|expected\" }\n+template<typename = class A<0>: > struct B {}; // { dg-error \"\" }"}, {"sha": "41f9595ae9ae36fc78b4582e06ef6efc85e52d3a", "filename": "gcc/testsuite/g++.dg/template/error55.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror55.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -0,0 +1,8 @@\n+// Check that template template parameters get printed properly in error\n+// messages.\n+\n+template <template <class A> class B>\n+struct Y\n+{\n+  B<5> y;  // { dg-error \"for 'template<class A> class B'\" }\n+};"}, {"sha": "415e6f095122ac38be65d0ade420c3587f4cb9dd", "filename": "gcc/testsuite/g++.dg/template/pr30044.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr30044.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr30044.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr30044.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/30044\n+\n+template <typename T1, typename T2, template <T2> class Comp, class Result = Comp<1> >\n+struct sort { };\n+\n+\n+template <typename Type, template <Type, Type> class Comp, class Result = Comp<1, 2> >\n+struct sort2 { };\n+\n+template <typename Type, template <int, Type> class Comp, class Result = Comp<1, 2> >\n+struct sort3 { };\n+\n+template <template <typename T1, typename T2, template <T2> class Comp, class Result = Comp<1> > class Foo>\n+struct sort4 { };"}, {"sha": "7f6a6dc1717154a5e235d5afb68adc345d3d071c", "filename": "gcc/testsuite/g++.dg/template/shadow2.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fshadow2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fshadow2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fshadow2.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -0,0 +1,3 @@\n+template <class A, // { dg-error \"shadows template parm 'class A'\" }\n+          template <class A> class B> // { dg-error \"declaration of 'class A'\" }\n+class X;"}, {"sha": "9bd8cc38c44c9a298c7accce0ecd2eaf5fbbb307", "filename": "gcc/testsuite/g++.dg/torture/20070621-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -89,7 +89,7 @@ namespace __gnu_test {\n         SharedInfo->first=ptr;\n       }\n     };\n-    template <class T, template<class T> class ItType>   struct test_container   {\n+    template <class T, template<class U> class ItType>   struct test_container   {\n       typename ItType<T>::ContainerType bounds;\n       test_container(T* _first, T* _last):bounds(_first, _last)     {\n   }"}, {"sha": "a2ac239611001b0059475acb5b09d5ca9154018b", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5540945071f17bed8009e2cfeffd7af8e830ba7/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp42.C?ref=c5540945071f17bed8009e2cfeffd7af8e830ba7", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run  }\n-template <class T, template <class T> class C>\n+template <class T, template <class U> class C>\n struct X\n {};\n "}]}