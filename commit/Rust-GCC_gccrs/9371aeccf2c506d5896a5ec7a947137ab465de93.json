{"sha": "9371aeccf2c506d5896a5ec7a947137ab465de93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM3MWFlY2NmMmM1MDZkNTg5NmE1ZWM3YTk0NzEzN2FiNDY1ZGU5Mw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-10-12T14:06:54Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-10-12T14:06:54Z"}, "message": "[AArch64_be] Fix vtbl[34] and vtbx4\n\n2015-10-12  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Update builtins\n\ttables: add tbl3 and tbx4.\n\t* config/aarch64/aarch64-simd.md (aarch64_tbl3v8qi): New.\n\t(aarch64_tbx4v8qi): New.\n\t* config/aarch64/arm_neon.h (vtbl3_s8, vtbl3_u8, vtbl3_p8)\n\t(vtbl4_s8, vtbl4_u8, vtbl4_p8, vtbx4_s8, vtbx4_u8, vtbx4_p8):\n\tRewrite using builtin functions.\n\t* config/aarch64/iterators.md (UNSPEC_TBX): New.\n\nFrom-SVN: r228716", "tree": {"sha": "6f1ffda359a942a33b0337011e7e4e898fb84abd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f1ffda359a942a33b0337011e7e4e898fb84abd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9371aeccf2c506d5896a5ec7a947137ab465de93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9371aeccf2c506d5896a5ec7a947137ab465de93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9371aeccf2c506d5896a5ec7a947137ab465de93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9371aeccf2c506d5896a5ec7a947137ab465de93/comments", "author": null, "committer": null, "parents": [{"sha": "4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79"}], "stats": {"total": 201, "additions": 126, "deletions": 75}, "files": [{"sha": "4d721c15b97c571af6ea39f342b925460bbd5b88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9371aeccf2c506d5896a5ec7a947137ab465de93", "patch": "@@ -1,3 +1,14 @@\n+2015-10-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Update builtins\n+\ttables: add tbl3 and tbx4.\n+\t* config/aarch64/aarch64-simd.md (aarch64_tbl3v8qi): New.\n+\t(aarch64_tbx4v8qi): New.\n+\t* config/aarch64/arm_neon.h (vtbl3_s8, vtbl3_u8, vtbl3_p8)\n+\t(vtbl4_s8, vtbl4_u8, vtbl4_p8, vtbx4_s8, vtbx4_u8, vtbx4_p8):\n+\tRewrite using builtin functions.\n+\t* config/aarch64/iterators.md (UNSPEC_TBX): New.\n+\n 2015-10-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/rs6000/rs6000.h (RS6000_ALIGN): Implement using"}, {"sha": "654e963fa537e3dbc1b950cb30f4156c8cc049aa", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=9371aeccf2c506d5896a5ec7a947137ab465de93", "patch": "@@ -407,3 +407,8 @@\n   VAR1 (BINOPP, crypto_pmull, 0, di)\n   VAR1 (BINOPP, crypto_pmull, 0, v2di)\n \n+  /* Implemented by aarch64_tbl3v8qi.  */\n+  VAR1 (BINOP, tbl3, 0, v8qi)\n+\n+  /* Implemented by aarch64_tbx4v8qi.  */\n+  VAR1 (TERNOP, tbx4, 0, v8qi)"}, {"sha": "167277e91a3fb38e255fbab99160a0b012e10e54", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9371aeccf2c506d5896a5ec7a947137ab465de93", "patch": "@@ -4729,6 +4729,27 @@\n   [(set_attr \"type\" \"neon_tbl2_q\")]\n )\n \n+(define_insn \"aarch64_tbl3v8qi\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=w\")\n+\t(unspec:V8QI [(match_operand:OI 1 \"register_operand\" \"w\")\n+\t\t      (match_operand:V8QI 2 \"register_operand\" \"w\")]\n+\t\t      UNSPEC_TBL))]\n+  \"TARGET_SIMD\"\n+  \"tbl\\\\t%S0.8b, {%S1.16b - %T1.16b}, %S2.8b\"\n+  [(set_attr \"type\" \"neon_tbl3\")]\n+)\n+\n+(define_insn \"aarch64_tbx4v8qi\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=w\")\n+\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:OI 2 \"register_operand\" \"w\")\n+\t\t      (match_operand:V8QI 3 \"register_operand\" \"w\")]\n+\t\t      UNSPEC_TBX))]\n+  \"TARGET_SIMD\"\n+  \"tbx\\\\t%S0.8b, {%S2.16b - %T2.16b}, %S3.8b\"\n+  [(set_attr \"type\" \"neon_tbl4\")]\n+)\n+\n (define_insn_and_split \"aarch64_combinev16qi\"\n   [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n \t(unspec:OI [(match_operand:V16QI 1 \"register_operand\" \"w\")"}, {"sha": "e1863488b73ed6d55bc2739ab2c19a907dc85fee", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 88, "deletions": 75, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9371aeccf2c506d5896a5ec7a947137ab465de93", "patch": "@@ -11274,13 +11274,14 @@ vtbl3_s8 (int8x8x3_t tab, int8x8_t idx)\n {\n   int8x8_t result;\n   int8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n   temp.val[0] = vcombine_s8 (tab.val[0], tab.val[1]);\n   temp.val[1] = vcombine_s8 (tab.val[2], vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbl %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"=w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = __builtin_aarch64_tbl3v8qi (__o, idx);\n   return result;\n }\n \n@@ -11289,13 +11290,14 @@ vtbl3_u8 (uint8x8x3_t tab, uint8x8_t idx)\n {\n   uint8x8_t result;\n   uint8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n   temp.val[0] = vcombine_u8 (tab.val[0], tab.val[1]);\n   temp.val[1] = vcombine_u8 (tab.val[2], vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbl %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"=w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = (uint8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)idx);\n   return result;\n }\n \n@@ -11304,13 +11306,14 @@ vtbl3_p8 (poly8x8x3_t tab, uint8x8_t idx)\n {\n   poly8x8_t result;\n   poly8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n   temp.val[0] = vcombine_p8 (tab.val[0], tab.val[1]);\n   temp.val[1] = vcombine_p8 (tab.val[2], vcreate_p8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbl %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"=w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = (poly8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)idx);\n   return result;\n }\n \n@@ -11319,13 +11322,14 @@ vtbl4_s8 (int8x8x4_t tab, int8x8_t idx)\n {\n   int8x8_t result;\n   int8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n   temp.val[0] = vcombine_s8 (tab.val[0], tab.val[1]);\n   temp.val[1] = vcombine_s8 (tab.val[2], tab.val[3]);\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbl %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"=w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = __builtin_aarch64_tbl3v8qi (__o, idx);\n   return result;\n }\n \n@@ -11334,13 +11338,14 @@ vtbl4_u8 (uint8x8x4_t tab, uint8x8_t idx)\n {\n   uint8x8_t result;\n   uint8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n   temp.val[0] = vcombine_u8 (tab.val[0], tab.val[1]);\n   temp.val[1] = vcombine_u8 (tab.val[2], tab.val[3]);\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbl %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"=w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = (uint8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)idx);\n   return result;\n }\n \n@@ -11349,13 +11354,14 @@ vtbl4_p8 (poly8x8x4_t tab, uint8x8_t idx)\n {\n   poly8x8_t result;\n   poly8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n   temp.val[0] = vcombine_p8 (tab.val[0], tab.val[1]);\n   temp.val[1] = vcombine_p8 (tab.val[2], tab.val[3]);\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbl %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"=w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = (poly8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)idx);\n   return result;\n }\n \n@@ -11395,51 +11401,6 @@ vtbx2_p8 (poly8x8_t r, poly8x8x2_t tab, uint8x8_t idx)\n   return result;\n }\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vtbx4_s8 (int8x8_t r, int8x8x4_t tab, int8x8_t idx)\n-{\n-  int8x8_t result = r;\n-  int8x16x2_t temp;\n-  temp.val[0] = vcombine_s8 (tab.val[0], tab.val[1]);\n-  temp.val[1] = vcombine_s8 (tab.val[2], tab.val[3]);\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbx %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"+w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vtbx4_u8 (uint8x8_t r, uint8x8x4_t tab, uint8x8_t idx)\n-{\n-  uint8x8_t result = r;\n-  uint8x16x2_t temp;\n-  temp.val[0] = vcombine_u8 (tab.val[0], tab.val[1]);\n-  temp.val[1] = vcombine_u8 (tab.val[2], tab.val[3]);\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbx %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"+w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vtbx4_p8 (poly8x8_t r, poly8x8x4_t tab, uint8x8_t idx)\n-{\n-  poly8x8_t result = r;\n-  poly8x16x2_t temp;\n-  temp.val[0] = vcombine_p8 (tab.val[0], tab.val[1]);\n-  temp.val[1] = vcombine_p8 (tab.val[2], tab.val[3]);\n-  __asm__ (\"ld1 {v16.16b - v17.16b }, %1\\n\\t\"\n-\t   \"tbx %0.8b, {v16.16b - v17.16b}, %2.8b\\n\\t\"\n-           : \"+w\"(result)\n-           : \"Q\"(temp), \"w\"(idx)\n-           : \"v16\", \"v17\", \"memory\");\n-  return result;\n-}\n-\n /* End of temporary inline asm.  */\n \n /* Start of optimal implementations in approved order.  */\n@@ -23904,6 +23865,58 @@ vtbx3_p8 (poly8x8_t __r, poly8x8x3_t __tab, uint8x8_t __idx)\n   return vbsl_p8 (__mask, __tbl, __r);\n }\n \n+/* vtbx4  */\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vtbx4_s8 (int8x8_t __r, int8x8x4_t __tab, int8x8_t __idx)\n+{\n+  int8x8_t result;\n+  int8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n+  temp.val[0] = vcombine_s8 (__tab.val[0], __tab.val[1]);\n+  temp.val[1] = vcombine_s8 (__tab.val[2], __tab.val[3]);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = __builtin_aarch64_tbx4v8qi (__r, __o, __idx);\n+  return result;\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vtbx4_u8 (uint8x8_t __r, uint8x8x4_t __tab, uint8x8_t __idx)\n+{\n+  uint8x8_t result;\n+  uint8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n+  temp.val[0] = vcombine_u8 (__tab.val[0], __tab.val[1]);\n+  temp.val[1] = vcombine_u8 (__tab.val[2], __tab.val[3]);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = (uint8x8_t)__builtin_aarch64_tbx4v8qi ((int8x8_t)__r, __o,\n+\t\t\t\t\t\t  (int8x8_t)__idx);\n+  return result;\n+}\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vtbx4_p8 (poly8x8_t __r, poly8x8x4_t __tab, uint8x8_t __idx)\n+{\n+  poly8x8_t result;\n+  poly8x16x2_t temp;\n+  __builtin_aarch64_simd_oi __o;\n+  temp.val[0] = vcombine_p8 (__tab.val[0], __tab.val[1]);\n+  temp.val[1] = vcombine_p8 (__tab.val[2], __tab.val[3]);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[0], 0);\n+  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n+\t\t\t\t\t   (int8x16_t) temp.val[1], 1);\n+  result = (poly8x8_t)__builtin_aarch64_tbx4v8qi ((int8x8_t)__r, __o,\n+\t\t\t\t\t\t  (int8x8_t)__idx);\n+  return result;\n+}\n+\n /* vtrn */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))"}, {"sha": "964f8f1af68cfb8b02919a616e1feb6fad466fdc", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9371aeccf2c506d5896a5ec7a947137ab465de93/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=9371aeccf2c506d5896a5ec7a947137ab465de93", "patch": "@@ -273,6 +273,7 @@\n     UNSPEC_USHLL\t; Used in aarch64-simd.md.\n     UNSPEC_ADDP\t\t; Used in aarch64-simd.md.\n     UNSPEC_TBL\t\t; Used in vector permute patterns.\n+    UNSPEC_TBX\t\t; Used in vector permute patterns.\n     UNSPEC_CONCAT\t; Used in vector permute patterns.\n     UNSPEC_ZIP1\t\t; Used in vector permute patterns.\n     UNSPEC_ZIP2\t\t; Used in vector permute patterns."}]}