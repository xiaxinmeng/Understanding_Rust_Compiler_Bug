{"sha": "9ff6578970fce27e1f14cd3d47bb372150992d2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZmNjU3ODk3MGZjZTI3ZTFmMTRjZDNkNDdiYjM3MjE1MDk5MmQyYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:50:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:50:18Z"}, "message": "(promote_mode): New function.\n\nFrom-SVN: r7066", "tree": {"sha": "7937e44d8f271ce394af0df8eec8f14cceebdfed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7937e44d8f271ce394af0df8eec8f14cceebdfed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff6578970fce27e1f14cd3d47bb372150992d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff6578970fce27e1f14cd3d47bb372150992d2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff6578970fce27e1f14cd3d47bb372150992d2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff6578970fce27e1f14cd3d47bb372150992d2c/comments", "author": null, "committer": null, "parents": [{"sha": "9d69b7c803ff2b471a7be02aabadbaac4f81f5f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d69b7c803ff2b471a7be02aabadbaac4f81f5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d69b7c803ff2b471a7be02aabadbaac4f81f5f2"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "b047dff386fd28d6b34bb25cc0d49b2b542da117", "filename": "gcc/explow.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff6578970fce27e1f14cd3d47bb372150992d2c/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff6578970fce27e1f14cd3d47bb372150992d2c/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=9ff6578970fce27e1f14cd3d47bb372150992d2c", "patch": "@@ -633,6 +633,44 @@ copy_to_suggested_reg (x, target, mode)\n   return temp;\n }\n \f\n+/* Return the mode to use to store a scalar of TYPE and MODE.\n+   PUNSIGNEDP points to the signedness of the type and may be adjusted\n+   to show what signedness to use on extension operations.\n+\n+   FOR_CALL is non-zero if this call is promoting args for a call.  */\n+\n+enum machine_mode\n+promote_mode (type, mode, punsignedp, for_call)\n+     tree type;\n+     enum machine_mode mode;\n+     int *punsignedp;\n+     int for_call;\n+{\n+  enum tree_code code = TREE_CODE (type);\n+  int unsignedp = *punsignedp;\n+\n+#ifdef PROMOTE_FOR_CALL_ONLY\n+  if (! for_call)\n+    return mode;\n+#endif\n+\n+  switch (code)\n+    {\n+#ifdef PROMOTE_MODE\n+    case INTEGER_TYPE:   case ENUMERAL_TYPE:   case BOOLEAN_TYPE:\n+    case CHAR_TYPE:      case REAL_TYPE:       case OFFSET_TYPE:\n+      PROMOTE_MODE (mode, unsignedp, type);\n+      break;\n+#endif\n+\n+    case POINTER_TYPE:\n+      break;\n+    }\n+\n+  *punsignedp = unsignedp;\n+  return mode;\n+}\n+\f\n /* Adjust the stack pointer by ADJUST (an rtx for a number of bytes).\n    This pops when ADJUST is positive.  ADJUST need not be constant.  */\n "}]}