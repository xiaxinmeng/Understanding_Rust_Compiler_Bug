{"sha": "ad18eed284cc7a461f2030a7c0996f69048a9e92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxOGVlZDI4NGNjN2E0NjFmMjAzMGE3YzA5OTZmNjkwNDhhOWU5Mg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-02-22T01:09:18Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-02-22T01:09:18Z"}, "message": "rs6000: Delete meaningless arguments to define_{expand,split,peephole2}\n\nThis removes the (usually empty) constraint arguments to define_expand,\ndefine_split, and define_peephole2: this argument is meaningless and\njust noise.\n\n\n\t* config/rs6000/altivec.md: Delete contraint arguments to\n\tdefine_expand, define_split, and define_peephole2, and in\n\tdefine_insn_and_split if always unused.\n\t* config/rs6000/darwin.md: Ditto.\n\t* config/rs6000/dfp.md: Ditto.\n\t* config/rs6000/rs6000.md: Ditto.\n\t* config/rs6000/sync.md: Ditto.\n\t* config/rs6000/vector.md: Ditto.\n\t* config/rs6000/vsx.md: Ditto.\n\nFrom-SVN: r257890", "tree": {"sha": "6f02c3bfc51863881fd69aae642f6b3fb7cb69a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f02c3bfc51863881fd69aae642f6b3fb7cb69a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad18eed284cc7a461f2030a7c0996f69048a9e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad18eed284cc7a461f2030a7c0996f69048a9e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad18eed284cc7a461f2030a7c0996f69048a9e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad18eed284cc7a461f2030a7c0996f69048a9e92/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c3323139491780d1dc6d9c938d145045788aca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c3323139491780d1dc6d9c938d145045788aca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c3323139491780d1dc6d9c938d145045788aca4"}], "stats": {"total": 1680, "additions": 846, "deletions": 834}, "files": [{"sha": "08279e54b4b000353a43c43c5844c81f07fe0174", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -1,3 +1,15 @@\n+2018-02-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/altivec.md: Delete contraint arguments to\n+\tdefine_expand, define_split, and define_peephole2, and in\n+\tdefine_insn_and_split if always unused.\n+\t* config/rs6000/darwin.md: Ditto.\n+\t* config/rs6000/dfp.md: Ditto.\n+\t* config/rs6000/rs6000.md: Ditto.\n+\t* config/rs6000/sync.md: Ditto.\n+\t* config/rs6000/vector.md: Ditto.\n+\t* config/rs6000/vsx.md: Ditto.\n+\n 2018-02-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/altivec.md: Write output control strings as braced"}, {"sha": "2759f2d31a59dd154b3aed0cc13f172ec204215f", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 111, "deletions": 111, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -291,8 +291,8 @@\n ;; Load up a vector with the most significant bit set by loading up -1 and\n ;; doing a shift left\n (define_split\n-  [(set (match_operand:VM 0 \"altivec_register_operand\" \"\")\n-\t(match_operand:VM 1 \"easy_vector_constant_msb\" \"\"))]\n+  [(set (match_operand:VM 0 \"altivec_register_operand\")\n+\t(match_operand:VM 1 \"easy_vector_constant_msb\"))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode) && reload_completed\"\n   [(const_int 0)]\n {\n@@ -318,8 +318,8 @@\n })\n \n (define_split\n-  [(set (match_operand:VM 0 \"altivec_register_operand\" \"\")\n-\t(match_operand:VM 1 \"easy_vector_constant_add_self\" \"\"))]\n+  [(set (match_operand:VM 0 \"altivec_register_operand\")\n+\t(match_operand:VM 1 \"easy_vector_constant_add_self\"))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode) && reload_completed\"\n   [(set (match_dup 0) (match_dup 3))\n    (set (match_dup 0) (match_dup 4))]\n@@ -347,8 +347,8 @@\n })\n \n (define_split\n-  [(set (match_operand:VM 0 \"altivec_register_operand\" \"\")\n-\t(match_operand:VM 1 \"easy_vector_constant_vsldoi\" \"\"))]\n+  [(set (match_operand:VM 0 \"altivec_register_operand\")\n+\t(match_operand:VM 1 \"easy_vector_constant_vsldoi\"))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode) && can_create_pseudo_p ()\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))\n@@ -692,9 +692,9 @@\n ;; We do multiply as a fused multiply-add with an add of a -0.0 vector.\n \n (define_expand \"altivec_mulv4sf3\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(fma:V4SF (match_operand:V4SF 1 \"register_operand\" \"\")\n-\t\t  (match_operand:V4SF 2 \"register_operand\" \"\")\n+  [(set (match_operand:V4SF 0 \"register_operand\")\n+\t(fma:V4SF (match_operand:V4SF 1 \"register_operand\")\n+\t\t  (match_operand:V4SF 2 \"register_operand\")\n \t\t  (match_dup 3)))]\n   \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n {\n@@ -728,9 +728,9 @@\n   [(set_attr \"type\" \"veccomplex\")])\n \n (define_expand \"mulv4si3\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V4SI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V4SI 1 \"register_operand\"))\n+   (use (match_operand:V4SI 2 \"register_operand\"))]\n    \"TARGET_ALTIVEC\"\n {\n   rtx zero;\n@@ -780,9 +780,9 @@\n })\n  \n (define_expand \"mulv8hi3\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))]\n    \"TARGET_ALTIVEC\"\n {\n   rtx zero = gen_reg_rtx (V8HImode);\n@@ -940,9 +940,9 @@\n   [(set_attr \"type\" \"veccomplex\")])\n \n (define_expand \"altivec_vmrghb\"\n-  [(use (match_operand:V16QI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V16QI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -1004,9 +1004,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vmrghh\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -1060,9 +1060,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vmrghw\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V4SI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V4SI 1 \"register_operand\"))\n+   (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n {\n   rtvec v;\n@@ -1131,9 +1131,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vmrglb\"\n-  [(use (match_operand:V16QI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V16QI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -1195,9 +1195,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vmrglh\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -1251,9 +1251,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vmrglw\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V4SI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V4SI 1 \"register_operand\"))\n+   (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n {\n   rtvec v;\n@@ -1410,9 +1410,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"vec_widen_umult_even_v16qi\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1423,9 +1423,9 @@\n })\n \n (define_expand \"vec_widen_smult_even_v16qi\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1436,9 +1436,9 @@\n })\n \n (define_expand \"vec_widen_umult_even_v8hi\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1449,9 +1449,9 @@\n })\n \n (define_expand \"vec_widen_smult_even_v8hi\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1488,9 +1488,9 @@\n })\n \n (define_expand \"vec_widen_umult_odd_v16qi\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1501,9 +1501,9 @@\n })\n \n (define_expand \"vec_widen_smult_odd_v16qi\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1514,9 +1514,9 @@\n })\n \n (define_expand \"vec_widen_umult_odd_v8hi\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1527,9 +1527,9 @@\n })\n \n (define_expand \"vec_widen_smult_odd_v8hi\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -1949,9 +1949,9 @@\n   [(set_attr \"type\" \"veccomplex\")])\n \n (define_expand \"altivec_vspltb\"\n-  [(use (match_operand:V16QI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\" \"\"))]\n+  [(use (match_operand:V16QI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"register_operand\"))\n+   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -1997,9 +1997,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vsplth\"\n-  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\" \"\"))]\n+  [(use (match_operand:V8HI 0 \"register_operand\"))\n+   (use (match_operand:V8HI 1 \"register_operand\"))\n+   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -2045,9 +2045,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vspltw\"\n-  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SI 1 \"register_operand\" \"\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\" \"\"))]\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (use (match_operand:V4SI 1 \"register_operand\"))\n+   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -2093,9 +2093,9 @@\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_expand \"altivec_vspltsf\"\n-  [(use (match_operand:V4SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SF 1 \"register_operand\" \"\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\" \"\"))]\n+  [(use (match_operand:V4SF 0 \"register_operand\"))\n+   (use (match_operand:V4SF 1 \"register_operand\"))\n+   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v;\n@@ -2147,10 +2147,10 @@\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_expand \"altivec_vperm_<mode>\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"\")]\n+  [(set (match_operand:VM 0 \"register_operand\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\")\n+\t\t    (match_operand:VM 2 \"register_operand\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -2189,10 +2189,10 @@\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"altivec_vperm_<mode>_uns\"\n-  [(set (match_operand:VM 0 \"register_operand\" \"\")\n-\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"\")\n-\t\t    (match_operand:VM 2 \"register_operand\" \"\")\n-\t\t    (match_operand:V16QI 3 \"register_operand\" \"\")]\n+  [(set (match_operand:VM 0 \"register_operand\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\")\n+\t\t    (match_operand:VM 2 \"register_operand\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\")]\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -2217,10 +2217,10 @@\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"vec_permv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"\")]\n+  [(set (match_operand:V16QI 0 \"register_operand\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\")\n+\t\t       (match_operand:V16QI 3 \"register_operand\")]\n \t\t      UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -2338,9 +2338,9 @@\n   [(set_attr \"type\" \"vecfloat\")])\n \n (define_expand \"altivec_copysign_v4sf3\"\n-  [(use (match_operand:V4SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SF 1 \"register_operand\" \"\"))\n-   (use (match_operand:V4SF 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SF 0 \"register_operand\"))\n+   (use (match_operand:V4SF 1 \"register_operand\"))\n+   (use (match_operand:V4SF 2 \"register_operand\"))]\n   \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n {\n   rtx mask = gen_reg_rtx (V4SImode);\n@@ -2584,8 +2584,8 @@\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_expand \"altivec_lvsl\"\n-  [(use (match_operand:V16QI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"memory_operand\" \"\"))]\n+  [(use (match_operand:V16QI 0 \"register_operand\"))\n+   (use (match_operand:V16QI 1 \"memory_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -2660,8 +2660,8 @@\n   [(set_attr \"type\" \"vecload\")])\n \n (define_expand \"build_vector_mask_for_load\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"\")] UNSPEC_LVSR))]\n+  [(set (match_operand:V16QI 0 \"register_operand\")\n+\t(unspec:V16QI [(match_operand 1 \"memory_operand\")] UNSPEC_LVSR))]\n   \"TARGET_ALTIVEC\"\n {\n   rtx addr;\n@@ -3331,8 +3331,8 @@\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_expand \"neg<mode>2\"\n-  [(set (match_operand:VI2 0 \"register_operand\" \"\")\n-\t(neg:VI2 (match_operand:VI2 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:VI2 0 \"register_operand\")\n+\t(neg:VI2 (match_operand:VI2 1 \"register_operand\")))]\n   \"<VI_unit>\"\n {\n   if (!TARGET_P9_VECTOR || (<MODE>mode != V4SImode && <MODE>mode != V2DImode))\n@@ -3828,8 +3828,8 @@\n })\n \n (define_expand \"altivec_negv4sf2\"\n-  [(use (match_operand:V4SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SF 1 \"register_operand\" \"\"))]\n+  [(use (match_operand:V4SF 0 \"register_operand\"))\n+   (use (match_operand:V4SF 1 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtx neg0;\n@@ -3942,8 +3942,8 @@\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_expand \"vec_unpacks_float_hi_v8hi\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\" \"\")]\n+ [(set (match_operand:V4SF 0 \"register_operand\")\n+        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\")]\n                      UNSPEC_VUPKHS_V4SF))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -3955,8 +3955,8 @@\n })\n \n (define_expand \"vec_unpacks_float_lo_v8hi\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\" \"\")]\n+ [(set (match_operand:V4SF 0 \"register_operand\")\n+        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\")]\n                      UNSPEC_VUPKLS_V4SF))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -3968,8 +3968,8 @@\n })\n \n (define_expand \"vec_unpacku_float_hi_v8hi\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\" \"\")]\n+ [(set (match_operand:V4SF 0 \"register_operand\")\n+        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\")]\n                      UNSPEC_VUPKHU_V4SF))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -3981,8 +3981,8 @@\n })\n \n (define_expand \"vec_unpacku_float_lo_v8hi\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\" \"\")]\n+ [(set (match_operand:V4SF 0 \"register_operand\")\n+        (unspec:V4SF [(match_operand:V8HI 1 \"register_operand\")]\n                      UNSPEC_VUPKLU_V4SF))]\n   \"TARGET_ALTIVEC\"\n {\n@@ -4498,13 +4498,13 @@\n (define_expand \"bcd<bcd_add_sub>_<code>\"\n   [(parallel [(set (reg:CCFP CR6_REGNO)\n \t\t   (compare:CCFP\n-\t\t    (unspec:V2DF [(match_operand:V1TI 1 \"register_operand\" \"\")\n-\t\t\t\t  (match_operand:V1TI 2 \"register_operand\" \"\")\n-\t\t\t\t  (match_operand:QI 3 \"const_0_to_1_operand\" \"\")]\n+\t\t    (unspec:V2DF [(match_operand:V1TI 1 \"register_operand\")\n+\t\t\t\t  (match_operand:V1TI 2 \"register_operand\")\n+\t\t\t\t  (match_operand:QI 3 \"const_0_to_1_operand\")]\n \t\t\t\t UNSPEC_BCD_ADD_SUB)\n \t\t    (match_dup 4)))\n-\t      (clobber (match_scratch:V1TI 5 \"\"))])\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+\t      (clobber (match_scratch:V1TI 5))])\n+   (set (match_operand:SI 0 \"register_operand\")\n \t(BCD_TEST:SI (reg:CCFP CR6_REGNO)\n \t\t     (const_int 0)))]\n   \"TARGET_P8_VECTOR\"\n@@ -4519,10 +4519,10 @@\n ;; a register class for CR6.\n \n (define_peephole2\n-  [(parallel [(set (match_operand:V1TI 0 \"register_operand\" \"\")\n-\t\t   (unspec:V1TI [(match_operand:V1TI 1 \"register_operand\" \"\")\n-\t\t\t\t (match_operand:V1TI 2 \"register_operand\" \"\")\n-\t\t\t\t (match_operand:QI 3 \"const_0_to_1_operand\" \"\")]\n+  [(parallel [(set (match_operand:V1TI 0 \"register_operand\")\n+\t\t   (unspec:V1TI [(match_operand:V1TI 1 \"register_operand\")\n+\t\t\t\t (match_operand:V1TI 2 \"register_operand\")\n+\t\t\t\t (match_operand:QI 3 \"const_0_to_1_operand\")]\n \t\t\t\tUNSPEC_BCD_ADD_SUB))\n \t      (clobber (reg:CCFP CR6_REGNO))])\n    (parallel [(set (reg:CCFP CR6_REGNO)\n@@ -4531,8 +4531,8 @@\n \t\t\t\t  (match_dup 2)\n \t\t\t\t  (match_dup 3)]\n \t\t\t\t UNSPEC_BCD_ADD_SUB)\n-\t\t    (match_operand:V2DF 4 \"zero_constant\" \"\")))\n-\t      (clobber (match_operand:V1TI 5 \"register_operand\" \"\"))])]\n+\t\t    (match_operand:V2DF 4 \"zero_constant\")))\n+\t      (clobber (match_operand:V1TI 5 \"register_operand\"))])]\n   \"TARGET_P8_VECTOR\"\n   [(parallel [(set (match_dup 0)\n \t\t   (unspec:V1TI [(match_dup 1)"}, {"sha": "48fd5b9613c6d62c100afa958e2307b15fc5401d", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -171,8 +171,8 @@ You should have received a copy of the GNU General Public License\n \n ;; Mach-O PIC trickery.\n (define_expand \"macho_high\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(high (match_operand 1 \"\" \"\")))]\n+  [(set (match_operand 0 \"\")\n+\t(high (match_operand 1 \"\")))]\n   \"TARGET_MACHO\"\n {\n   if (TARGET_64BIT)\n@@ -197,9 +197,9 @@ You should have received a copy of the GNU General Public License\n   \"lis %0,ha16(%1)\")\n \n (define_expand \"macho_low\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(lo_sum (match_operand 1 \"\" \"\")\n-\t\t   (match_operand 2 \"\" \"\")))]\n+  [(set (match_operand 0 \"\")\n+\t(lo_sum (match_operand 1 \"\")\n+\t\t   (match_operand 2 \"\")))]\n    \"TARGET_MACHO\"\n {\n   if (TARGET_64BIT)\n@@ -225,10 +225,10 @@ You should have received a copy of the GNU General Public License\n    \"la %0,lo16(%2)(%1)\")\n \n (define_split\n-  [(set (mem:V4SI (plus:DI (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:DI 1 \"short_cint_operand\" \"\")))\n-\t(match_operand:V4SI 2 \"register_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n+  [(set (mem:V4SI (plus:DI (match_operand:DI 0 \"gpc_reg_operand\")\n+\t\t\t (match_operand:DI 1 \"short_cint_operand\")))\n+\t(match_operand:V4SI 2 \"register_operand\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\"))]\n   \"TARGET_MACHO && TARGET_64BIT\"\n   [(set (match_dup 3) (plus:DI (match_dup 0) (match_dup 1)))\n    (set (mem:V4SI (match_dup 3))\n@@ -237,7 +237,7 @@ You should have received a copy of the GNU General Public License\n \n (define_expand \"load_macho_picbase\"\n   [(set (reg:SI LR_REGNO)\n-        (unspec [(match_operand 0 \"\" \"\")]\n+        (unspec [(match_operand 0 \"\")]\n                    UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n {\n@@ -284,10 +284,10 @@ You should have received a copy of the GNU General Public License\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"macho_correct_pic\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(plus (match_operand 1 \"\" \"\")\n-\t\t (unspec [(match_operand 2 \"\" \"\")\n-\t\t\t     (match_operand 3 \"\" \"\")]\n+  [(set (match_operand 0 \"\")\n+\t(plus (match_operand 1 \"\")\n+\t\t (unspec [(match_operand 2 \"\")\n+\t\t\t     (match_operand 3 \"\")]\n \t\t\t    UNSPEC_MPIC_CORRECT)))]\n   \"DEFAULT_ABI == ABI_DARWIN\"\n {\n@@ -383,7 +383,7 @@ You should have received a copy of the GNU General Public License\n \n (define_expand \"reload_macho_picbase\"\n   [(set (reg:SI LR_REGNO)\n-        (unspec [(match_operand 0 \"\" \"\")]\n+        (unspec [(match_operand 0 \"\")]\n                    UNSPEC_RELD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n {"}, {"sha": "cd15aa81bfd11ab486b8aeb8f306ac7e6ebaa43c", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -344,11 +344,11 @@\n   [(set (match_dup 3)\n \t(compare:CCFP\n          (unspec:D64_D128\n-\t  [(match_operand:SI 1 \"const_int_operand\" \"n\")\n-\t   (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+\t  [(match_operand:SI 1 \"const_int_operand\")\n+\t   (match_operand:D64_D128 2 \"gpc_reg_operand\")]\n \t  UNSPEC_DTSTSFI)\n \t (match_dup 4)))\n-   (set (match_operand:SI 0 \"register_operand\" \"\")\n+   (set (match_operand:SI 0 \"register_operand\")\n    \t(DFP_TEST:SI (match_dup 3)\n \t\t     (const_int 0)))\n   ]"}, {"sha": "0976d50d8458a3cb7d0a424a446bdf7390aebdaa", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 390, "deletions": 390, "changes": 780, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -1576,12 +1576,12 @@\n   \"dlmzb. %0,%1,%2\")\n \n (define_expand \"strlensi\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-        (unspec:SI [(match_operand:BLK 1 \"general_operand\" \"\")\n-                    (match_operand:QI 2 \"const_int_operand\" \"\")\n-                    (match_operand 3 \"const_int_operand\" \"\")]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+        (unspec:SI [(match_operand:BLK 1 \"general_operand\")\n+                    (match_operand:QI 2 \"const_int_operand\")\n+                    (match_operand 3 \"const_int_operand\")]\n                    UNSPEC_DLMZB_STRLEN))\n-   (clobber (match_scratch:CC 4 \"=x\"))]\n+   (clobber (match_scratch:CC 4))]\n   \"TARGET_DLMZB && WORDS_BIG_ENDIAN && !optimize_size\"\n {\n   rtx result = operands[0];\n@@ -1630,9 +1630,9 @@\n ;; Fixed-point arithmetic insns.\n \n (define_expand \"add<mode>3\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n-\t\t  (match_operand:SDI 2 \"reg_or_add_cint_operand\" \"\")))]\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\")\n+\t(plus:SDI (match_operand:SDI 1 \"gpc_reg_operand\")\n+\t\t  (match_operand:SDI 2 \"reg_or_add_cint_operand\")))]\n   \"\"\n {\n   if (<MODE>mode == DImode && !TARGET_POWERPC64)\n@@ -1805,9 +1805,9 @@\n ;; add should be last in case the result gets used in an address.\n \n (define_split\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t  (match_operand:GPR 2 \"non_add_cint_operand\" \"\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(plus:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n+\t\t  (match_operand:GPR 2 \"non_add_cint_operand\")))]\n   \"\"\n   [(set (match_dup 0) (plus:GPR (match_dup 1) (match_dup 3)))\n    (set (match_dup 0) (plus:GPR (match_dup 0) (match_dup 4)))]\n@@ -1950,8 +1950,8 @@\n \n \n (define_expand \"one_cmpl<mode>2\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(not:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\")\n+\t(not:SDI (match_operand:SDI 1 \"gpc_reg_operand\")))]\n   \"\"\n {\n   if (<MODE>mode == DImode && !TARGET_POWERPC64)\n@@ -2010,9 +2010,9 @@\n \n \n (define_expand \"sub<mode>3\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:SDI (match_operand:SDI 1 \"reg_or_short_operand\" \"\")\n-\t\t   (match_operand:SDI 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\")\n+\t(minus:SDI (match_operand:SDI 1 \"reg_or_short_operand\")\n+\t\t   (match_operand:SDI 2 \"gpc_reg_operand\")))]\n   \"\"\n {\n   if (<MODE>mode == DImode && !TARGET_POWERPC64)\n@@ -2338,8 +2338,8 @@\n \n \n (define_expand \"popcount<mode>2\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(popcount:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(popcount:GPR (match_operand:GPR 1 \"gpc_reg_operand\")))]\n   \"TARGET_POPCNTB || TARGET_POPCNTD\"\n {\n   rs6000_emit_popcount (operands[0], operands[1]);\n@@ -2363,8 +2363,8 @@\n \n \n (define_expand \"parity<mode>2\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(parity:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(parity:GPR (match_operand:GPR 1 \"gpc_reg_operand\")))]\n   \"TARGET_POPCNTB\"\n {\n   rs6000_emit_parity (operands[0], operands[1]);\n@@ -2508,11 +2508,11 @@\n ;; complex code.\n \n (define_expand \"bswapdi2\"\n-  [(parallel [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"\")\n+  [(parallel [(set (match_operand:DI 0 \"reg_or_mem_operand\")\n \t\t   (bswap:DI\n-\t\t    (match_operand:DI 1 \"reg_or_mem_operand\" \"\")))\n-\t      (clobber (match_scratch:DI 2 \"\"))\n-\t      (clobber (match_scratch:DI 3 \"\"))])]\n+\t\t    (match_operand:DI 1 \"reg_or_mem_operand\")))\n+\t      (clobber (match_scratch:DI 2))\n+\t      (clobber (match_scratch:DI 3))])]\n   \"\"\n {\n   rtx dest = operands[0];\n@@ -2589,10 +2589,10 @@\n   [(set_attr \"length\" \"16,12,36\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"indexed_or_indirect_operand\" \"\")))\n-   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"indexed_or_indirect_operand\")))\n+   (clobber (match_operand:DI 2 \"gpc_reg_operand\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\"))]\n   \"TARGET_POWERPC64 && !TARGET_LDBRX && reload_completed\"\n   [(const_int 0)]\n {\n@@ -2652,10 +2652,10 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"indexed_or_indirect_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"indexed_or_indirect_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\")))\n+   (clobber (match_operand:DI 2 \"gpc_reg_operand\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\"))]\n   \"TARGET_POWERPC64 && !TARGET_LDBRX && reload_completed\"\n   [(const_int 0)]\n {\n@@ -2714,10 +2714,10 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\")))\n+   (clobber (match_operand:DI 2 \"gpc_reg_operand\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\"))]\n   \"TARGET_POWERPC64 && !TARGET_P9_VECTOR && reload_completed\"\n   [(const_int 0)]\n {\n@@ -2748,9 +2748,9 @@\n   [(set_attr \"length\" \"16,12,36\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"indexed_or_indirect_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"gpc_reg_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"indexed_or_indirect_operand\")))\n+   (clobber (match_operand:SI 2 \"gpc_reg_operand\"))]\n   \"!TARGET_POWERPC64 && reload_completed\"\n   [(const_int 0)]\n {\n@@ -2800,9 +2800,9 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"indexed_or_indirect_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"gpc_reg_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"indexed_or_indirect_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\")))\n+   (clobber (match_operand:SI 2 \"gpc_reg_operand\"))]\n   \"!TARGET_POWERPC64 && reload_completed\"\n   [(const_int 0)]\n {\n@@ -2848,9 +2848,9 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"\" \"\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n+\t(bswap:DI (match_operand:DI 1 \"gpc_reg_operand\")))\n+   (clobber (match_operand:SI 2 \"\"))]\n   \"!TARGET_POWERPC64 && reload_completed\"\n   [(const_int 0)]\n {\n@@ -2877,9 +2877,9 @@\n    mulli %0,%1,%2\"\n    [(set_attr \"type\" \"mul\")\n     (set (attr \"size\")\n-      (cond [(match_operand:GPR 2 \"s8bit_cint_operand\" \"\")\n+      (cond [(match_operand:GPR 2 \"s8bit_cint_operand\")\n \t\t(const_string \"8\")\n-             (match_operand:GPR 2 \"short_cint_operand\" \"\")\n+             (match_operand:GPR 2 \"short_cint_operand\")\n \t\t(const_string \"16\")]\n \t(const_string \"<bits>\")))])\n \n@@ -3048,9 +3048,9 @@\n ;; modulus.  If it isn't a power of two, force operands into register and do\n ;; a normal divide.\n (define_expand \"div<mode>3\"\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:GPR 2 \"reg_or_cint_operand\" \"\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n+\t\t (match_operand:GPR 2 \"reg_or_cint_operand\")))]\n   \"\"\n {\n   if (CONST_INT_P (operands[2])\n@@ -3190,10 +3190,10 @@\n ;; after a divide.\n \n (define_peephole2\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:GPR 2 \"gpc_reg_operand\" \"\")))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n+\t\t (match_operand:GPR 2 \"gpc_reg_operand\")))\n+   (set (match_operand:GPR 3 \"gpc_reg_operand\")\n \t(mod:GPR (match_dup 1)\n \t\t (match_dup 2)))]\n   \"TARGET_MODULO\n@@ -3212,10 +3212,10 @@\n \t\t   (match_dup 3)))])\n \n (define_peephole2\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"\")))\n-   (set (match_operand:GPR 3 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n+\t\t  (match_operand:GPR 2 \"gpc_reg_operand\")))\n+   (set (match_operand:GPR 3 \"gpc_reg_operand\")\n \t(umod:GPR (match_dup 1)\n \t\t  (match_dup 2)))]\n   \"TARGET_MODULO\n@@ -3241,9 +3241,9 @@\n ;; those rotate-and-mask operations.  Thus, the AND insns come first.\n \n (define_expand \"and<mode>3\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(and:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SDI 2 \"reg_or_cint_operand\" \"\")))]\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\")\n+\t(and:SDI (match_operand:SDI 1 \"gpc_reg_operand\")\n+\t\t (match_operand:SDI 2 \"reg_or_cint_operand\")))]\n   \"\"\n {\n   if (<MODE>mode == DImode && !TARGET_POWERPC64)\n@@ -3539,9 +3539,9 @@\n \n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(iorxor:SDI (match_operand:SDI 1 \"gpc_reg_operand\" \"\")\n-\t\t    (match_operand:SDI 2 \"reg_or_cint_operand\" \"\")))]\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\")\n+\t(iorxor:SDI (match_operand:SDI 1 \"gpc_reg_operand\")\n+\t\t    (match_operand:SDI 2 \"reg_or_cint_operand\")))]\n   \"\"\n {\n   if (<MODE>mode == DImode && !TARGET_POWERPC64)\n@@ -3570,9 +3570,9 @@\n })\n \n (define_split\n-  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t(iorxor:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-\t\t    (match_operand:GPR 2 \"non_logical_cint_operand\" \"\")))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(iorxor:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n+\t\t    (match_operand:GPR 2 \"non_logical_cint_operand\")))]\n   \"\"\n   [(set (match_dup 3)\n \t(iorxor:GPR (match_dup 1)\n@@ -4473,9 +4473,9 @@\n ;; Builtins to replace a division to generate FRE reciprocal estimate\n ;; instructions and the necessary fixup instructions\n (define_expand \"recip<mode>3\"\n-  [(match_operand:RECIPF 0 \"gpc_reg_operand\" \"\")\n-   (match_operand:RECIPF 1 \"gpc_reg_operand\" \"\")\n-   (match_operand:RECIPF 2 \"gpc_reg_operand\" \"\")]\n+  [(match_operand:RECIPF 0 \"gpc_reg_operand\")\n+   (match_operand:RECIPF 1 \"gpc_reg_operand\")\n+   (match_operand:RECIPF 2 \"gpc_reg_operand\")]\n   \"RS6000_RECIP_HAVE_RE_P (<MODE>mode)\"\n {\n    rs6000_emit_swdiv (operands[0], operands[1], operands[2], false);\n@@ -4488,9 +4488,9 @@\n ;; We used to also check optimize_insn_for_speed_p () but problems with guessed\n ;; frequencies (pr68212/pr77536) yields that unreliable so it was removed.\n (define_split\n-  [(set (match_operand:RECIPF 0 \"gpc_reg_operand\" \"\")\n-\t(div:RECIPF (match_operand 1 \"gpc_reg_operand\" \"\")\n-\t\t    (match_operand 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:RECIPF 0 \"gpc_reg_operand\")\n+\t(div:RECIPF (match_operand 1 \"gpc_reg_operand\")\n+\t\t    (match_operand 2 \"gpc_reg_operand\")))]\n   \"RS6000_RECIP_AUTO_RE_P (<MODE>mode)\n    && can_create_pseudo_p () && flag_finite_math_only\n    && !flag_trapping_math && flag_reciprocal_math\"\n@@ -4503,8 +4503,8 @@\n ;; Builtins to replace 1/sqrt(x) with instructions using RSQRTE and the\n ;; appropriate fixup.\n (define_expand \"rsqrt<mode>2\"\n-  [(match_operand:RECIPF 0 \"gpc_reg_operand\" \"\")\n-   (match_operand:RECIPF 1 \"gpc_reg_operand\" \"\")]\n+  [(match_operand:RECIPF 0 \"gpc_reg_operand\")\n+   (match_operand:RECIPF 1 \"gpc_reg_operand\")]\n   \"RS6000_RECIP_HAVE_RSQRTE_P (<MODE>mode)\"\n {\n   rs6000_emit_swsqrt (operands[0], operands[1], 1);\n@@ -4517,8 +4517,8 @@\n ;; -mupper-regs-{df,sf} option is enabled.\n \n (define_expand \"abs<mode>2\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(abs:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(abs:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_INSN\"\n   \"\")\n \n@@ -4545,8 +4545,8 @@\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n (define_expand \"neg<mode>2\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(neg:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(neg:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_INSN\"\n   \"\")\n \n@@ -4561,9 +4561,9 @@\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n (define_expand \"add<mode>3\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")\n-\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(plus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")\n+\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_INSN\"\n   \"\")\n \n@@ -4579,9 +4579,9 @@\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n (define_expand \"sub<mode>3\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(minus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")\n-\t\t    (match_operand:SFDF 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(minus:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")\n+\t\t    (match_operand:SFDF 2 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_INSN\"\n   \"\")\n \n@@ -4597,9 +4597,9 @@\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n (define_expand \"mul<mode>3\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(mult:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")\n-\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(mult:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")\n+\t\t   (match_operand:SFDF 2 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_INSN\"\n   \"\")\n \n@@ -4615,9 +4615,9 @@\n    (set_attr \"fp_type\" \"fp_mul_<Fs>\")])\n \n (define_expand \"div<mode>3\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(div:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")\n-\t\t  (match_operand:SFDF 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(div:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")\n+\t\t  (match_operand:SFDF 2 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_INSN && !TARGET_SIMPLE_FPU\"\n {\n   if (RS6000_RECIP_AUTO_RE_P (<MODE>mode)\n@@ -4652,8 +4652,8 @@\n    (set_attr \"fp_type\" \"fp_sqrt_<Fs>\")])\n \n (define_expand \"sqrt<mode>2\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(sqrt:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(sqrt:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_FPR && !TARGET_SIMPLE_FPU\n    && (TARGET_PPC_GPOPT || (<MODE>mode == SFmode && TARGET_XILINX_FPU))\"\n {\n@@ -4741,8 +4741,8 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-\t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\")\n+\t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"\")\n \n@@ -4760,12 +4760,12 @@\n ;; when little-endian.\n (define_expand \"signbit<mode>2\"\n   [(set (match_dup 2)\n-\t(float_truncate:DF (match_operand:FLOAT128 1 \"gpc_reg_operand\" \"\")))\n+\t(float_truncate:DF (match_operand:FLOAT128 1 \"gpc_reg_operand\")))\n    (set (match_dup 3)\n    \t(subreg:DI (match_dup 2) 0))\n    (set (match_dup 4)\n    \t(match_dup 5))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\")\n   \t(match_dup 6))]\n   \"TARGET_HARD_FLOAT\n    && (!FLOAT128_IEEE_P (<MODE>mode)\n@@ -4868,11 +4868,11 @@\n \n (define_expand \"copysign<mode>3\"\n   [(set (match_dup 3)\n-        (abs:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))\n+        (abs:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")))\n    (set (match_dup 4)\n \t(neg:SFDF (abs:SFDF (match_dup 1))))\n-   (set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-        (if_then_else:SFDF (ge (match_operand:SFDF 2 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+        (if_then_else:SFDF (ge (match_operand:SFDF 2 \"gpc_reg_operand\")\n \t\t\t       (match_dup 5))\n \t\t\t (match_dup 3)\n \t\t\t (match_dup 4)))]\n@@ -4922,9 +4922,9 @@\n ;; to allow either DF/SF to use only traditional registers.\n \n (define_expand \"s<minmax><mode>3\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(fp_minmax:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SFDF 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(fp_minmax:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")\n+\t\t\t(match_operand:SFDF 2 \"gpc_reg_operand\")))]\n   \"TARGET_MINMAX_<MODE>\"\n {\n   rs6000_emit_minmax (operands[0], <SMINMAX>, operands[1], operands[2]);\n@@ -4948,9 +4948,9 @@\n ;; instruction.\n \n (define_insn_and_split \"*s<minmax><mode>3_fpr\"\n-  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t(fp_minmax:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")\n-\t\t\t(match_operand:SFDF 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t(fp_minmax:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\")\n+\t\t\t(match_operand:SFDF 2 \"gpc_reg_operand\")))]\n   \"!TARGET_VSX && TARGET_MINMAX_<MODE>\"\n   \"#\"\n   \"&& 1\"\n@@ -4961,10 +4961,10 @@\n })\n \n (define_expand \"mov<mode>cc\"\n-   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t (if_then_else:GPR (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t   (match_operand:GPR 2 \"gpc_reg_operand\" \"\")\n-\t\t\t   (match_operand:GPR 3 \"gpc_reg_operand\" \"\")))]\n+   [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t (if_then_else:GPR (match_operand 1 \"comparison_operator\")\n+\t\t\t   (match_operand:GPR 2 \"gpc_reg_operand\")\n+\t\t\t   (match_operand:GPR 3 \"gpc_reg_operand\")))]\n   \"TARGET_ISEL\"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5041,10 +5041,10 @@\n \n ;; Floating point conditional move\n (define_expand \"mov<mode>cc\"\n-   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n-\t (if_then_else:SFDF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t    (match_operand:SFDF 2 \"gpc_reg_operand\" \"\")\n-\t\t\t    (match_operand:SFDF 3 \"gpc_reg_operand\" \"\")))]\n+   [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n+\t (if_then_else:SFDF (match_operand 1 \"comparison_operator\")\n+\t\t\t    (match_operand:SFDF 2 \"gpc_reg_operand\")\n+\t\t\t    (match_operand:SFDF 3 \"gpc_reg_operand\")))]\n   \"TARGET_<MODE>_FPR && TARGET_PPC_GFXOPT\"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5321,8 +5321,8 @@\n ; then to have the insns split later (between sched1 and final).\n \n (define_expand \"floatsidf2\"\n-  [(parallel [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t\t   (float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+  [(parallel [(set (match_operand:DF 0 \"gpc_reg_operand\")\n+\t\t   (float:DF (match_operand:SI 1 \"nonimmediate_operand\")))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n@@ -5389,8 +5389,8 @@\n ;; conversion for 32-bit without fast math, because we don't have the insn to\n ;; generate the fixup swizzle to avoid double rounding problems.\n (define_expand \"floatunssisf2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-        (unsigned_float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\")\n+        (unsigned_float:SF (match_operand:SI 1 \"nonimmediate_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\n    && ((TARGET_FCFIDUS && TARGET_LFIWZX)\n        || (TARGET_DOUBLE_FLOAT && TARGET_FCFID\n@@ -5413,8 +5413,8 @@\n })\n \n (define_expand \"floatunssidf2\"\n-  [(parallel [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t\t   (unsigned_float:DF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+  [(parallel [(set (match_operand:DF 0 \"gpc_reg_operand\")\n+\t\t   (unsigned_float:DF (match_operand:SI 1 \"nonimmediate_operand\")))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n@@ -5534,9 +5534,9 @@\n (define_expand \"floatuns<QHI:mode><FP_ISA3:mode>2\"\n   [(parallel [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\")\n \t\t   (unsigned_float:FP_ISA3\n-\t\t    (match_operand:QHI 1 \"input_operand\" \"\")))\n-\t      (clobber (match_scratch:DI 2 \"\"))\n-\t      (clobber (match_scratch:DI 3 \"\"))])]\n+\t\t    (match_operand:QHI 1 \"input_operand\")))\n+\t      (clobber (match_scratch:DI 2))\n+\t      (clobber (match_scratch:DI 3))])]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n {\n   if (MEM_P (operands[1]))\n@@ -5577,8 +5577,8 @@\n })\n \n (define_expand \"fix_trunc<mode>si2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && <TARGET_FLOAT>\"\n {\n   if (!TARGET_P8_VECTOR)\n@@ -5667,8 +5667,8 @@\n    (set_attr \"type\" \"fp\")])\n \n (define_expand \"fix_trunc<mode>di2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:DI (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n+\t(fix:DI (match_operand:SFDF 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_FCFID\"\n   \"\")\n \n@@ -5737,8 +5737,8 @@\n })\n \n (define_expand \"fixuns_trunc<mode>si2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(unsigned_fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(unsigned_fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && <TARGET_FLOAT> && TARGET_FCTIWUZ && TARGET_STFIWX\"\n {\n   if (!TARGET_P8_VECTOR)\n@@ -5981,9 +5981,9 @@\n \n (define_expand \"lround<mode>di2\"\n   [(set (match_dup 2)\n-\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\" \"\")]\n+\t(unspec:SFDF [(match_operand:SFDF 1 \"gpc_reg_operand\")]\n \t\t     UNSPEC_XSRDPI))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\")\n \t(unspec:DI [(match_dup 2)]\n \t\t   UNSPEC_FCTID))]\n   \"TARGET_<MODE>_FPR && TARGET_VSX\"\n@@ -6008,8 +6008,8 @@\n ;; conversion for 32-bit without fast math, because we don't have the insn to\n ;; generate the fixup swizzle to avoid double rounding problems.\n (define_expand \"floatsisf2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-        (float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\")\n+        (float:SF (match_operand:SI 1 \"nonimmediate_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\n    && ((TARGET_FCFIDS && TARGET_LFIWAX)\n        || (TARGET_DOUBLE_FLOAT && TARGET_FCFID\n@@ -6066,9 +6066,9 @@\n    (set_attr \"type\" \"fpload\")])\n \n (define_expand \"floatunsdidf2\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\")\n \t(unsigned_float:DF\n-\t (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n+\t (match_operand:DI 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDU\"\n   \"\")\n \n@@ -6096,8 +6096,8 @@\n    (set_attr \"type\" \"fpload\")])\n \n (define_expand \"floatdisf2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-        (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\")\n+        (float:SF (match_operand:DI 1 \"gpc_reg_operand\")))]\n   \"TARGET_FCFID && TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\n    && (TARGET_FCFIDS || TARGET_POWERPC64 || flag_unsafe_math_optimizations)\"\n {\n@@ -6166,11 +6166,11 @@\n ;; by a bit that won't be lost at that stage, but is below the SFmode\n ;; rounding position.\n (define_expand \"floatdisf2_internal2\"\n-  [(parallel [(set (match_dup 3) (ashiftrt:DI (match_operand:DI 1 \"\" \"\")\n+  [(parallel [(set (match_dup 3) (ashiftrt:DI (match_operand:DI 1 \"\")\n \t\t\t\t\t      (const_int 53)))\n \t      (clobber (reg:DI CA_REGNO))])\n-   (set (match_operand:DI 0 \"\" \"\") (and:DI (match_dup 1)\n-\t\t\t\t\t   (const_int 2047)))\n+   (set (match_operand:DI 0 \"\") (and:DI (match_dup 1)\n+\t\t\t\t\t(const_int 2047)))\n    (set (match_dup 3) (plus:DI (match_dup 3)\n \t\t\t       (const_int 1)))\n    (set (match_dup 0) (plus:DI (match_dup 0)\n@@ -6182,7 +6182,7 @@\n    (set (match_dup 0) (and:DI (match_dup 0)\n \t\t\t      (const_int -2048)))\n    (set (pc) (if_then_else (geu (match_dup 4) (const_int 0))\n-\t\t\t   (label_ref (match_operand:DI 2 \"\" \"\"))\n+\t\t\t   (label_ref (match_operand:DI 2 \"\"))\n \t\t\t   (pc)))\n    (set (match_dup 0) (match_dup 1))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\n@@ -6193,8 +6193,8 @@\n })\n \n (define_expand \"floatunsdisf2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-        (unsigned_float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\")\n+        (unsigned_float:SF (match_operand:DI 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\n    && TARGET_DOUBLE_FLOAT && TARGET_FCFIDUS\"\n   \"\")\n@@ -6233,9 +6233,9 @@\n ;; also allow for the output being the same as one of the inputs.\n \n (define_expand \"addti3\"\n-  [(set (match_operand:TI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:TI (match_operand:TI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:TI 2 \"reg_or_short_operand\" \"\")))]\n+  [(set (match_operand:TI 0 \"gpc_reg_operand\")\n+\t(plus:TI (match_operand:TI 1 \"gpc_reg_operand\")\n+\t\t (match_operand:TI 2 \"reg_or_short_operand\")))]\n   \"TARGET_64BIT\"\n {\n   rtx lo0 = gen_lowpart (DImode, operands[0]);\n@@ -6256,9 +6256,9 @@\n })\n \n (define_expand \"subti3\"\n-  [(set (match_operand:TI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:TI (match_operand:TI 1 \"reg_or_short_operand\" \"\")\n-\t\t  (match_operand:TI 2 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:TI 0 \"gpc_reg_operand\")\n+\t(minus:TI (match_operand:TI 1 \"reg_or_short_operand\")\n+\t\t  (match_operand:TI 2 \"gpc_reg_operand\")))]\n   \"TARGET_64BIT\"\n {\n   rtx lo0 = gen_lowpart (DImode, operands[0]);\n@@ -6281,73 +6281,73 @@\n ;; 128-bit logical operations expanders\n \n (define_expand \"and<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n-\t(and:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\" \"\")\n-\t\t      (match_operand:BOOL_128 2 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n+\t(and:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\")\n+\t\t      (match_operand:BOOL_128 2 \"vlogical_operand\")))]\n   \"\"\n   \"\")\n \n (define_expand \"ior<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n-        (ior:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\" \"\")\n-\t\t      (match_operand:BOOL_128 2 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n+        (ior:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\")\n+\t\t      (match_operand:BOOL_128 2 \"vlogical_operand\")))]\n   \"\"\n   \"\")\n \n (define_expand \"xor<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n-        (xor:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\" \"\")\n-\t\t      (match_operand:BOOL_128 2 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n+        (xor:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\")\n+\t\t      (match_operand:BOOL_128 2 \"vlogical_operand\")))]\n   \"\"\n   \"\")\n \n (define_expand \"one_cmpl<mode>2\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n-        (not:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n+        (not:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\")))]\n   \"\"\n   \"\")\n \n (define_expand \"nor<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n \t(and:BOOL_128\n-\t (not:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\" \"\"))\n-\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\" \"\"))))]\n+\t (not:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\"))\n+\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\"))))]\n   \"\"\n   \"\")\n \n (define_expand \"andc<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n         (and:BOOL_128\n-\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\" \"\"))\n-\t (match_operand:BOOL_128 1 \"vlogical_operand\" \"\")))]\n+\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\"))\n+\t (match_operand:BOOL_128 1 \"vlogical_operand\")))]\n   \"\"\n   \"\")\n \n ;; Power8 vector logical instructions.\n (define_expand \"eqv<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n \t(not:BOOL_128\n-\t (xor:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\" \"\")\n-\t\t       (match_operand:BOOL_128 2 \"vlogical_operand\" \"\"))))]\n+\t (xor:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\")\n+\t\t       (match_operand:BOOL_128 2 \"vlogical_operand\"))))]\n   \"<MODE>mode == TImode || <MODE>mode == PTImode || TARGET_P8_VECTOR\"\n   \"\")\n \n ;; Rewrite nand into canonical form\n (define_expand \"nand<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n \t(ior:BOOL_128\n-\t (not:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\" \"\"))\n-\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\" \"\"))))]\n+\t (not:BOOL_128 (match_operand:BOOL_128 1 \"vlogical_operand\"))\n+\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\"))))]\n   \"<MODE>mode == TImode || <MODE>mode == PTImode || TARGET_P8_VECTOR\"\n   \"\")\n \n ;; The canonical form is to have the negated element first, so we need to\n ;; reverse arguments.\n (define_expand \"orc<mode>3\"\n-  [(set (match_operand:BOOL_128 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:BOOL_128 0 \"vlogical_operand\")\n \t(ior:BOOL_128\n-\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\" \"\"))\n-\t (match_operand:BOOL_128 1 \"vlogical_operand\" \"\")))]\n+\t (not:BOOL_128 (match_operand:BOOL_128 2 \"vlogical_operand\"))\n+\t (match_operand:BOOL_128 1 \"vlogical_operand\")))]\n   \"<MODE>mode == TImode || <MODE>mode == PTImode || TARGET_P8_VECTOR\"\n   \"\")\n \n@@ -6641,8 +6641,8 @@\n ;; Set up a register with a value from the GOT table\n \n (define_expand \"movsi_got\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(unspec:SI [(match_operand:SI 1 \"got_operand\" \"\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(unspec:SI [(match_operand:SI 1 \"got_operand\")\n \t\t    (match_dup 2)] UNSPEC_MOVSI_GOT))]\n   \"DEFAULT_ABI == ABI_V4 && flag_pic == 1\"\n {\n@@ -6679,9 +6679,9 @@\n ;; Used by sched, shorten_branches and final when the GOT pseudo reg\n ;; didn't get allocated to a hard register.\n (define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(unspec:SI [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n-\t\t    (match_operand:SI 2 \"memory_operand\" \"\")]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(unspec:SI [(match_operand:SI 1 \"got_no_const_operand\")\n+\t\t    (match_operand:SI 2 \"memory_operand\")]\n \t\t   UNSPEC_MOVSI_GOT))]\n   \"DEFAULT_ABI == ABI_V4\n     && flag_pic == 1\n@@ -6940,8 +6940,8 @@\n ;; sequence.\n \n (define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(match_operand:SI 1 \"const_int_operand\"))]\n   \"(unsigned HOST_WIDE_INT) (INTVAL (operands[1]) + 0x8000) >= 0x10000\n    && (INTVAL (operands[1]) & 0xffff) != 0\"\n   [(set (match_dup 0)\n@@ -7000,8 +7000,8 @@\n   \"\")\n \f\n (define_expand \"mov<mode>\"\n-  [(set (match_operand:INT 0 \"general_operand\" \"\")\n-\t(match_operand:INT 1 \"any_operand\" \"\"))]\n+  [(set (match_operand:INT 0 \"general_operand\")\n+\t(match_operand:INT 1 \"any_operand\"))]\n   \"\"\n {\n   rs6000_emit_move (operands[0], operands[1], <MODE>mode);\n@@ -7056,8 +7056,8 @@\n ;; an integer register or memory, we store just the high-order 4 bits.\n ;; This lets us not shift in the most common case of CR0.\n (define_expand \"movcc\"\n-  [(set (match_operand:CC 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:CC 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:CC 0 \"nonimmediate_operand\")\n+\t(match_operand:CC 1 \"nonimmediate_operand\"))]\n   \"\"\n   \"\")\n \n@@ -7110,17 +7110,17 @@\n \n ;; Move 32-bit binary/decimal floating point\n (define_expand \"mov<mode>\"\n-  [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:FMOVE32 1 \"any_operand\" \"\"))]\n+  [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\")\n+\t(match_operand:FMOVE32 1 \"any_operand\"))]\n   \"<fmove_ok>\"\n {\n   rs6000_emit_move (operands[0], operands[1], <MODE>mode);\n   DONE;\n })\n \n (define_split\n-  [(set (match_operand:FMOVE32 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:FMOVE32 1 \"const_double_operand\" \"\"))]\n+  [(set (match_operand:FMOVE32 0 \"gpc_reg_operand\")\n+\t(match_operand:FMOVE32 1 \"const_double_operand\"))]\n   \"reload_completed\n    && ((GET_CODE (operands[0]) == REG && REGNO (operands[0]) <= 31)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -7309,17 +7309,17 @@\n \f\n ;; Move 64-bit binary/decimal floating point\n (define_expand \"mov<mode>\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:FMOVE64 1 \"any_operand\" \"\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\")\n+\t(match_operand:FMOVE64 1 \"any_operand\"))]\n   \"\"\n {\n   rs6000_emit_move (operands[0], operands[1], <MODE>mode);\n   DONE;\n })\n \n (define_split\n-  [(set (match_operand:FMOVE64 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:FMOVE64 1 \"const_int_operand\" \"\"))]\n+  [(set (match_operand:FMOVE64 0 \"gpc_reg_operand\")\n+\t(match_operand:FMOVE64 1 \"const_int_operand\"))]\n   \"! TARGET_POWERPC64 && reload_completed\n    && ((GET_CODE (operands[0]) == REG && REGNO (operands[0]) <= 31)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -7338,8 +7338,8 @@\n })\n \n (define_split\n-  [(set (match_operand:FMOVE64 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:FMOVE64 1 \"const_double_operand\" \"\"))]\n+  [(set (match_operand:FMOVE64 0 \"gpc_reg_operand\")\n+\t(match_operand:FMOVE64 1 \"const_double_operand\"))]\n   \"! TARGET_POWERPC64 && reload_completed\n    && ((GET_CODE (operands[0]) == REG && REGNO (operands[0]) <= 31)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -7360,8 +7360,8 @@\n })\n \n (define_split\n-  [(set (match_operand:FMOVE64 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:FMOVE64 1 \"const_double_operand\" \"\"))]\n+  [(set (match_operand:FMOVE64 0 \"gpc_reg_operand\")\n+\t(match_operand:FMOVE64 1 \"const_double_operand\"))]\n   \"TARGET_POWERPC64 && reload_completed\n    && ((GET_CODE (operands[0]) == REG && REGNO (operands[0]) <= 31)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -7486,8 +7486,8 @@\n    (set_attr \"length\" \"4,4,4,4,4,8,12,16,4\")])\n \f\n (define_expand \"mov<mode>\"\n-  [(set (match_operand:FMOVE128 0 \"general_operand\" \"\")\n-\t(match_operand:FMOVE128 1 \"any_operand\" \"\"))]\n+  [(set (match_operand:FMOVE128 0 \"general_operand\")\n+\t(match_operand:FMOVE128 1 \"any_operand\"))]\n   \"\"\n {\n   rs6000_emit_move (operands[0], operands[1], <MODE>mode);\n@@ -7555,8 +7555,8 @@\n   [(set_attr \"length\" \"20,20,16\")])\n \n (define_expand \"extenddf<mode>2\"\n-  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\" \"\")\n-\t(float_extend:FLOAT128 (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\")\n+\t(float_extend:FLOAT128 (match_operand:DF 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n {\n   if (FLOAT128_IEEE_P (<MODE>mode))\n@@ -7624,8 +7624,8 @@\n })\n \n (define_expand \"extendsf<mode>2\"\n-  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\" \"\")\n-\t(float_extend:FLOAT128 (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\")\n+\t(float_extend:FLOAT128 (match_operand:SF 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n {\n   if (FLOAT128_IEEE_P (<MODE>mode))\n@@ -7640,8 +7640,8 @@\n })\n \n (define_expand \"trunc<mode>df2\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t(float_truncate:DF (match_operand:FLOAT128 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\")\n+\t(float_truncate:DF (match_operand:FLOAT128 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n {\n   if (FLOAT128_IEEE_P (<MODE>mode))\n@@ -7678,8 +7678,8 @@\n    (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n (define_expand \"trunc<mode>sf2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-\t(float_truncate:SF (match_operand:FLOAT128 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\")\n+\t(float_truncate:SF (match_operand:FLOAT128 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n {\n   if (FLOAT128_IEEE_P (<MODE>mode))\n@@ -7750,8 +7750,8 @@\n    (set_attr \"length\" \"20\")])\n \n (define_expand \"fix_trunc<mode>si2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_operand:FLOAT128 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(fix:SI (match_operand:FLOAT128 1 \"gpc_reg_operand\")))]\n   \"TARGET_HARD_FLOAT && TARGET_LONG_DOUBLE_128\"\n {\n   rtx op0 = operands[0];\n@@ -7774,8 +7774,8 @@\n })\n \n (define_expand \"fix_trunc<mode>si2_fprs\"\n-  [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (fix:SI (match_operand:IBM128 1 \"gpc_reg_operand\" \"\")))\n+  [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t\t   (fix:SI (match_operand:IBM128 1 \"gpc_reg_operand\")))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))\n \t      (clobber (match_dup 4))\n@@ -7814,8 +7814,8 @@\n })\n \n (define_expand \"fix_trunc<mode>di2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:DI (match_operand:IEEE128 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n+\t(fix:DI (match_operand:IEEE128 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   if (!TARGET_FLOAT128_HW)\n@@ -7826,17 +7826,17 @@\n })\n \n (define_expand \"fixuns_trunc<IEEE128:mode><SDI:mode>2\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"\")\n-\t(unsigned_fix:SDI (match_operand:IEEE128 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:SDI 0 \"gpc_reg_operand\")\n+\t(unsigned_fix:SDI (match_operand:IEEE128 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], true);\n   DONE;\n })\n \n (define_expand \"floatdi<mode>2\"\n-  [(set (match_operand:IEEE128 0 \"gpc_reg_operand\" \"\")\n-\t(float:IEEE128 (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:IEEE128 0 \"gpc_reg_operand\")\n+\t(float:IEEE128 (match_operand:DI 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   if (!TARGET_FLOAT128_HW)\n@@ -7847,8 +7847,8 @@\n })\n \n (define_expand \"floatunsdi<IEEE128:mode>2\"\n-  [(set (match_operand:IEEE128 0 \"gpc_reg_operand\" \"\")\n-\t(unsigned_float:IEEE128 (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:IEEE128 0 \"gpc_reg_operand\")\n+\t(unsigned_float:IEEE128 (match_operand:DI 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   if (!TARGET_FLOAT128_HW)\n@@ -7859,8 +7859,8 @@\n })\n \n (define_expand \"floatuns<IEEE128:mode>2\"\n-  [(set (match_operand:IEEE128 0 \"gpc_reg_operand\" \"\")\n-\t(unsigned_float:IEEE128 (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:IEEE128 0 \"gpc_reg_operand\")\n+\t(unsigned_float:IEEE128 (match_operand:SI 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rtx op0 = operands[0];\n@@ -7874,8 +7874,8 @@\n })\n \n (define_expand \"neg<mode>2\"\n-  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\" \"\")\n-\t(neg:FLOAT128 (match_operand:FLOAT128 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\")\n+\t(neg:FLOAT128 (match_operand:FLOAT128 1 \"gpc_reg_operand\")))]\n   \"FLOAT128_IEEE_P (<MODE>mode)\n    || (FLOAT128_IBM_P (<MODE>mode) && TARGET_HARD_FLOAT)\"\n {\n@@ -7927,8 +7927,8 @@\n    (set_attr \"length\" \"8\")])\n \n (define_expand \"abs<mode>2\"\n-  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\" \"\")\n-\t(abs:FLOAT128 (match_operand:FLOAT128 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:FLOAT128 0 \"gpc_reg_operand\")\n+\t(abs:FLOAT128 (match_operand:FLOAT128 1 \"gpc_reg_operand\")))]\n   \"FLOAT128_IEEE_P (<MODE>mode)\n    || (FLOAT128_IBM_P (<MODE>mode) && TARGET_HARD_FLOAT)\"\n {\n@@ -7972,13 +7972,13 @@\n })\n \n (define_expand \"abs<mode>2_internal\"\n-  [(set (match_operand:IBM128 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:IBM128 1 \"gpc_reg_operand\" \"\"))\n+  [(set (match_operand:IBM128 0 \"gpc_reg_operand\")\n+\t(match_operand:IBM128 1 \"gpc_reg_operand\"))\n    (set (match_dup 3) (match_dup 5))\n    (set (match_dup 5) (abs:DF (match_dup 5)))\n    (set (match_dup 4) (compare:CCFP (match_dup 3) (match_dup 5)))\n    (set (pc) (if_then_else (eq (match_dup 4) (const_int 0))\n-\t\t\t   (label_ref (match_operand 2 \"\" \"\"))\n+\t\t\t   (label_ref (match_operand 2 \"\"))\n \t\t\t   (pc)))\n    (set (match_dup 6) (neg:DF (match_dup 6)))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_LONG_DOUBLE_128\"\n@@ -7996,7 +7996,7 @@\n ;; register\n \n (define_expand \"ieee_128bit_negative_zero\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\") (match_dup 1))]\n+  [(set (match_operand:V16QI 0 \"register_operand\") (match_dup 1))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rtvec v = rtvec_alloc (16);\n@@ -8115,62 +8115,62 @@\n ;; We use expand to convert from IBM double double to IEEE 128-bit\n ;; and trunc for the opposite.\n (define_expand \"extendiftf2\"\n-  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n-\t(float_extend:TF (match_operand:IF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\")\n+\t(float_extend:TF (match_operand:IF 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], false);\n   DONE;\n })\n \n (define_expand \"extendifkf2\"\n-  [(set (match_operand:KF 0 \"gpc_reg_operand\" \"\")\n-\t(float_extend:KF (match_operand:IF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:KF 0 \"gpc_reg_operand\")\n+\t(float_extend:KF (match_operand:IF 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], false);\n   DONE;\n })\n \n (define_expand \"extendtfkf2\"\n-  [(set (match_operand:KF 0 \"gpc_reg_operand\" \"\")\n-\t(float_extend:KF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:KF 0 \"gpc_reg_operand\")\n+\t(float_extend:KF (match_operand:TF 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], false);\n   DONE;\n })\n \n (define_expand \"trunciftf2\"\n-  [(set (match_operand:IF 0 \"gpc_reg_operand\" \"\")\n-\t(float_truncate:IF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:IF 0 \"gpc_reg_operand\")\n+\t(float_truncate:IF (match_operand:TF 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], false);\n   DONE;\n })\n \n (define_expand \"truncifkf2\"\n-  [(set (match_operand:IF 0 \"gpc_reg_operand\" \"\")\n-\t(float_truncate:IF (match_operand:KF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:IF 0 \"gpc_reg_operand\")\n+\t(float_truncate:IF (match_operand:KF 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], false);\n   DONE;\n })\n \n (define_expand \"trunckftf2\"\n-  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n-\t(float_truncate:TF (match_operand:KF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\")\n+\t(float_truncate:TF (match_operand:KF 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], false);\n   DONE;\n })\n \n (define_expand \"trunctfif2\"\n-  [(set (match_operand:IF 0 \"gpc_reg_operand\" \"\")\n-\t(float_truncate:IF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))]\n+  [(set (match_operand:IF 0 \"gpc_reg_operand\")\n+\t(float_truncate:IF (match_operand:TF 1 \"gpc_reg_operand\")))]\n   \"TARGET_FLOAT128_TYPE\"\n {\n   rs6000_expand_float128_convert (operands[0], operands[1], false);\n@@ -8349,8 +8349,8 @@\n    (set_attr \"type\" \"three\")])\n \n (define_split\n-  [(set (match_operand:FMOVE128_GPR 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:FMOVE128_GPR 1 \"input_operand\" \"\"))]\n+  [(set (match_operand:FMOVE128_GPR 0 \"nonimmediate_operand\")\n+\t(match_operand:FMOVE128_GPR 1 \"input_operand\"))]\n   \"reload_completed\n    && (int_reg_operand (operands[0], <MODE>mode)\n        || int_reg_operand (operands[1], <MODE>mode))\n@@ -8516,8 +8516,8 @@\n    (set_attr \"size\" \"64\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:DI 1 \"const_int_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\")\n+\t(match_operand:DI 1 \"const_int_operand\"))]\n   \"! TARGET_POWERPC64 && reload_completed\n    && gpr_or_gpr_p (operands[0], operands[1])\n    && !direct_move_p (operands[0], operands[1])\"\n@@ -8534,8 +8534,8 @@\n })\n \n (define_split\n-  [(set (match_operand:DIFD 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:DIFD 1 \"input_operand\" \"\"))]\n+  [(set (match_operand:DIFD 0 \"nonimmediate_operand\")\n+        (match_operand:DIFD 1 \"input_operand\"))]\n   \"reload_completed && !TARGET_POWERPC64\n    && gpr_or_gpr_p (operands[0], operands[1])\n    && !direct_move_p (operands[0], operands[1])\"\n@@ -8630,8 +8630,8 @@\n ;; When non-easy constants can go in the TOC, this should use\n ;; easy_fp_constant predicate.\n (define_split\n-  [(set (match_operand:DI 0 \"int_reg_operand_not_pseudo\" \"\")\n-\t(match_operand:DI 1 \"const_int_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"int_reg_operand_not_pseudo\")\n+\t(match_operand:DI 1 \"const_int_operand\"))]\n   \"TARGET_POWERPC64 && num_insns_constant (operands[1], DImode) > 1\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n@@ -8643,8 +8643,8 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"int_reg_operand_not_pseudo\" \"\")\n-\t(match_operand:DI 1 \"const_scalar_int_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"int_reg_operand_not_pseudo\")\n+\t(match_operand:DI 1 \"const_scalar_int_operand\"))]\n   \"TARGET_POWERPC64 && num_insns_constant (operands[1], DImode) > 1\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n@@ -8656,8 +8656,8 @@\n })\n \n (define_split\n-  [(set (match_operand:DI 0 \"altivec_register_operand\" \"\")\n-\t(match_operand:DI 1 \"s5bit_cint_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"altivec_register_operand\")\n+\t(match_operand:DI 1 \"s5bit_cint_operand\"))]\n   \"TARGET_VSX && reload_completed\"\n   [(const_int 0)]\n {\n@@ -8678,8 +8678,8 @@\n ;; Split integer constants that can be loaded with XXSPLTIB and a\n ;; sign extend operation.\n (define_split\n-  [(set (match_operand:INT_ISA3 0 \"altivec_register_operand\" \"\")\n-\t(match_operand:INT_ISA3 1 \"xxspltib_constant_split\" \"\"))]\n+  [(set (match_operand:INT_ISA3 0 \"altivec_register_operand\")\n+\t(match_operand:INT_ISA3 1 \"xxspltib_constant_split\"))]\n   \"TARGET_P9_VECTOR && reload_completed\"\n   [(const_int 0)]\n {\n@@ -8731,8 +8731,8 @@\n    (set_attr \"length\" \"8\")])\n \n (define_split\n-  [(set (match_operand:TI2 0 \"int_reg_operand\" \"\")\n-\t(match_operand:TI2 1 \"const_scalar_int_operand\" \"\"))]\n+  [(set (match_operand:TI2 0 \"int_reg_operand\")\n+\t(match_operand:TI2 1 \"const_scalar_int_operand\"))]\n   \"TARGET_POWERPC64\n    && (VECTOR_MEM_NONE_P (<MODE>mode)\n        || (reload_completed && INT_REGNO_P (REGNO (operands[0]))))\"\n@@ -8758,8 +8758,8 @@\n })\n \n (define_split\n-  [(set (match_operand:TI2 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:TI2 1 \"input_operand\" \"\"))]\n+  [(set (match_operand:TI2 0 \"nonimmediate_operand\")\n+        (match_operand:TI2 1 \"input_operand\"))]\n   \"reload_completed\n    && gpr_or_gpr_p (operands[0], operands[1])\n    && !direct_move_p (operands[0], operands[1])\n@@ -8768,10 +8768,10 @@\n { rs6000_split_multireg_move (operands[0], operands[1]); DONE; })\n \f\n (define_expand \"setmemsi\"\n-  [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n-\t\t   (match_operand 2 \"const_int_operand\" \"\"))\n-\t      (use (match_operand:SI 1 \"\" \"\"))\n-\t      (use (match_operand:SI 3 \"\" \"\"))])]\n+  [(parallel [(set (match_operand:BLK 0 \"\")\n+\t\t   (match_operand 2 \"const_int_operand\"))\n+\t      (use (match_operand:SI 1 \"\"))\n+\t      (use (match_operand:SI 3 \"\"))])]\n   \"\"\n {\n   /* If value to set is not zero, use the library routine.  */\n@@ -8858,10 +8858,10 @@\n ;; Argument 3 is the alignment\n \n (define_expand \"movmemsi\"\n-  [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n-\t\t   (match_operand:BLK 1 \"\" \"\"))\n-\t      (use (match_operand:SI 2 \"\" \"\"))\n-\t      (use (match_operand:SI 3 \"\" \"\"))])]\n+  [(parallel [(set (match_operand:BLK 0 \"\")\n+\t\t   (match_operand:BLK 1 \"\"))\n+\t      (use (match_operand:SI 2 \"\"))\n+\t      (use (match_operand:SI 3 \"\"))])]\n   \"\"\n {\n   if (expand_block_move (operands))\n@@ -9216,18 +9216,18 @@\n ;; Also this optimization interferes with scalars going into\n ;; altivec registers (the code does reloading through the FPRs).\n (define_peephole2\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:DF 1 \"any_operand\" \"\"))\n-   (set (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\")\n+\t(match_operand:DF 1 \"any_operand\"))\n+   (set (match_operand:DF 2 \"gpc_reg_operand\")\n \t(match_dup 0))]\n   \"!TARGET_VSX\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(set (match_dup 2) (match_dup 1))])\n \n (define_peephole2\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:SF 1 \"any_operand\" \"\"))\n-   (set (match_operand:SF 2 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\")\n+\t(match_operand:SF 1 \"any_operand\"))\n+   (set (match_operand:SF 2 \"gpc_reg_operand\")\n \t(match_dup 0))]\n   \"!TARGET_P8_VECTOR\n    && peep2_reg_dead_p (2, operands[0])\"\n@@ -9662,7 +9662,7 @@\n   \"add %0,%1,%2@tls\")\n \n (define_expand \"tls_get_tpointer\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\")\n \t(unspec:SI [(const_int 0)] UNSPEC_TLSTLS))]\n   \"TARGET_XCOFF && HAVE_AS_TLS\"\n {\n@@ -9679,9 +9679,9 @@\n   \"bla __get_tpointer\")\n \n (define_expand \"tls_get_addr<mode>\"\n-  [(set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n-\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"\")\n-                   (match_operand:P 2 \"gpc_reg_operand\" \"\")] UNSPEC_TLSTLS))]\n+  [(set (match_operand:P 0 \"gpc_reg_operand\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\")\n+                   (match_operand:P 2 \"gpc_reg_operand\")] UNSPEC_TLSTLS))]\n   \"TARGET_XCOFF && HAVE_AS_TLS\"\n {\n   emit_move_insn (gen_rtx_REG (Pmode, 3), operands[1]);\n@@ -9719,8 +9719,8 @@\n ;; the constant size.  The value is forced into a register if necessary.\n ;;\n (define_expand \"allocate_stack\"\n-  [(set (match_operand 0 \"gpc_reg_operand\" \"\")\n-\t(minus (reg 1) (match_operand 1 \"reg_or_cint_operand\" \"\")))\n+  [(set (match_operand 0 \"gpc_reg_operand\")\n+\t(minus (reg 1) (match_operand 1 \"reg_or_cint_operand\")))\n    (set (reg 1)\n \t(minus (reg 1) (match_dup 1)))]\n   \"\"\n@@ -9841,14 +9841,14 @@\n ;; save area is a memory location.\n \n (define_expand \"save_stack_function\"\n-  [(match_operand 0 \"any_operand\" \"\")\n-   (match_operand 1 \"any_operand\" \"\")]\n+  [(match_operand 0 \"any_operand\")\n+   (match_operand 1 \"any_operand\")]\n   \"\"\n   \"DONE;\")\n \n (define_expand \"restore_stack_function\"\n-  [(match_operand 0 \"any_operand\" \"\")\n-   (match_operand 1 \"any_operand\" \"\")]\n+  [(match_operand 0 \"any_operand\")\n+   (match_operand 1 \"any_operand\")]\n   \"\"\n   \"DONE;\")\n \n@@ -9859,8 +9859,8 @@\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 2))\n    (match_dup 5)\n-   (set (match_operand 0 \"register_operand\" \"\")\n-\t(match_operand 1 \"register_operand\" \"\"))]\n+   (set (match_operand 0 \"register_operand\")\n+\t(match_operand 1 \"register_operand\"))]\n   \"\"\n {\n   rtvec p;\n@@ -9877,8 +9877,8 @@\n \n (define_expand \"save_stack_nonlocal\"\n   [(set (match_dup 3) (match_dup 4))\n-   (set (match_operand 0 \"memory_operand\" \"\") (match_dup 3))\n-   (set (match_dup 2) (match_operand 1 \"register_operand\" \"\"))]\n+   (set (match_operand 0 \"memory_operand\") (match_dup 3))\n+   (set (match_dup 2) (match_operand 1 \"register_operand\"))]\n   \"\"\n {\n   int units_per_word = (TARGET_32BIT) ? 4 : 8;\n@@ -9891,11 +9891,11 @@\n })\n \n (define_expand \"restore_stack_nonlocal\"\n-  [(set (match_dup 2) (match_operand 1 \"memory_operand\" \"\"))\n+  [(set (match_dup 2) (match_operand 1 \"memory_operand\"))\n    (set (match_dup 3) (match_dup 4))\n    (set (match_dup 5) (match_dup 2))\n    (match_dup 6)\n-   (set (match_operand 0 \"register_operand\" \"\") (match_dup 3))]\n+   (set (match_operand 0 \"register_operand\") (match_dup 3))]\n   \"\"\n {\n   int units_per_word = (TARGET_32BIT) ? 4 : 8;\n@@ -10004,7 +10004,7 @@\n (define_expand \"load_toc_v4_PIC_1b\"\n   [(parallel [(set (reg:SI LR_REGNO)\n \t\t   (unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n-\t\t\t       (label_ref (match_operand 1 \"\" \"\"))]\n+\t\t\t       (label_ref (match_operand 1 \"\"))]\n \t\t           UNSPEC_TOCPTR))\n \t      (match_dup 1)])]\n   \"TARGET_ELF && DEFAULT_ABI == ABI_V4 && flag_pic == 2\"\n@@ -10077,7 +10077,7 @@\n ;; On Darwin, we need to reload the picbase.\n \n (define_expand \"builtin_setjmp_receiver\"\n-  [(use (label_ref (match_operand 0 \"\" \"\")))]\n+  [(use (label_ref (match_operand 0 \"\")))]\n   \"(DEFAULT_ABI == ABI_V4 && flag_pic == 1)\n    || (TARGET_TOC && TARGET_MINIMAL_TOC)\n    || (DEFAULT_ABI == ABI_DARWIN && flag_pic)\"\n@@ -10188,9 +10188,9 @@\n \f\n ;; Call and call_value insns\n (define_expand \"call\"\n-  [(parallel [(call (mem:SI (match_operand 0 \"address_operand\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n-\t      (use (match_operand 2 \"\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"address_operand\"))\n+\t\t    (match_operand 1 \"\"))\n+\t      (use (match_operand 2 \"\"))\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"\"\n {\n@@ -10230,10 +10230,10 @@\n })\n \n (define_expand \"call_value\"\n-  [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:SI (match_operand 1 \"address_operand\" \"\"))\n-\t\t\t (match_operand 2 \"\" \"\")))\n-\t      (use (match_operand 3 \"\" \"\"))\n+  [(parallel [(set (match_operand 0 \"\")\n+\t\t   (call (mem:SI (match_operand 1 \"address_operand\"))\n+\t\t\t (match_operand 2 \"\")))\n+\t      (use (match_operand 3 \"\"))\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"\"\n {\n@@ -10718,10 +10718,10 @@\n \n ;; Call subroutine returning any type.\n (define_expand \"untyped_call\"\n-  [(parallel [(call (match_operand 0 \"\" \"\")\n+  [(parallel [(call (match_operand 0 \"\")\n \t\t    (const_int 0))\n-\t      (match_operand 1 \"\" \"\")\n-\t      (match_operand 2 \"\" \"\")])]\n+\t      (match_operand 1 \"\")\n+\t      (match_operand 2 \"\")])]\n   \"\"\n {\n   int i;\n@@ -10745,9 +10745,9 @@\n \n ;; sibling call patterns\n (define_expand \"sibcall\"\n-  [(parallel [(call (mem:SI (match_operand 0 \"address_operand\" \"\"))\n-\t\t    (match_operand 1 \"\" \"\"))\n-\t      (use (match_operand 2 \"\" \"\"))\n+  [(parallel [(call (mem:SI (match_operand 0 \"address_operand\"))\n+\t\t    (match_operand 1 \"\"))\n+\t      (use (match_operand 2 \"\"))\n \t      (simple_return)])]\n   \"\"\n {\n@@ -10769,10 +10769,10 @@\n })\n \n (define_expand \"sibcall_value\"\n-  [(parallel [(set (match_operand 0 \"register_operand\" \"\")\n-\t\t(call (mem:SI (match_operand 1 \"address_operand\" \"\"))\n-\t\t      (match_operand 2 \"\" \"\")))\n-\t      (use (match_operand 3 \"\" \"\"))\n+  [(parallel [(set (match_operand 0 \"register_operand\")\n+\t\t(call (mem:SI (match_operand 1 \"address_operand\"))\n+\t\t      (match_operand 2 \"\")))\n+\t      (use (match_operand 3 \"\"))\n \t      (simple_return)])]\n   \"\"\n {\n@@ -11061,9 +11061,9 @@\n \n (define_expand \"cbranch<mode>4\"\n   [(use (match_operator 0 \"comparison_operator\"\n-         [(match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n-          (match_operand:GPR 2 \"reg_or_short_operand\" \"\")]))\n-   (use (match_operand 3 \"\"))]\n+         [(match_operand:GPR 1 \"gpc_reg_operand\")\n+          (match_operand:GPR 2 \"reg_or_short_operand\")]))\n+   (use (match_operand 3))]\n   \"\"\n {\n   /* Take care of the possibility that operands[2] might be negative but\n@@ -11083,9 +11083,9 @@\n \n (define_expand \"cbranch<mode>4\"\n   [(use (match_operator 0 \"comparison_operator\"\n-         [(match_operand:FP 1 \"gpc_reg_operand\" \"\")\n-          (match_operand:FP 2 \"gpc_reg_operand\" \"\")]))\n-   (use (match_operand 3 \"\"))]\n+         [(match_operand:FP 1 \"gpc_reg_operand\")\n+          (match_operand:FP 2 \"gpc_reg_operand\")]))\n+   (use (match_operand 3))]\n   \"\"\n {\n   rs6000_emit_cbranch (<MODE>mode, operands);\n@@ -11502,18 +11502,18 @@\n \n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n-        (match_operand:SI 1 \"logical_const_operand\" \"\"))\n+        (match_operand:SI 1 \"logical_const_operand\"))\n    (set (match_dup 0) (match_operator:SI 3 \"boolean_or_operator\"\n \t\t       [(match_dup 0)\n-\t\t\t(match_operand:SI 2 \"logical_const_operand\" \"\")]))\n-   (set (match_operand:CC 4 \"cc_reg_operand\" \"\")\n-        (compare:CC (match_operand:SI 5 \"gpc_reg_operand\" \"\")\n+\t\t\t(match_operand:SI 2 \"logical_const_operand\")]))\n+   (set (match_operand:CC 4 \"cc_reg_operand\")\n+        (compare:CC (match_operand:SI 5 \"gpc_reg_operand\")\n                     (match_dup 0)))\n    (set (pc)\n         (if_then_else (match_operator 6 \"equality_operator\"\n                        [(match_dup 4) (const_int 0)])\n-                      (match_operand 7 \"\" \"\")\n-                      (match_operand 8 \"\" \"\")))]\n+                      (match_operand 7 \"\")\n+                      (match_operand 8 \"\")))]\n   \"peep2_reg_dead_p (3, operands[0])\n    && peep2_reg_dead_p (4, operands[4])\n    && REGNO (operands[0]) != REGNO (operands[5])\"\n@@ -11562,21 +11562,21 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n-\t(compare:CC (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t    (match_operand:SI 2 \"short_cint_operand\" \"\")))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (match_dup 1) (match_operand:SI 4 \"short_cint_operand\" \"\")))]\n+  [(set (match_operand:CC 3 \"cc_reg_operand\")\n+\t(compare:CC (match_operand:SI 1 \"gpc_reg_operand\")\n+\t\t    (match_operand:SI 2 \"short_cint_operand\")))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(plus:SI (match_dup 1) (match_operand:SI 4 \"short_cint_operand\")))]\n   \"\"\n   [(set (match_dup 3) (compare:CC (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 4)))])\n \n (define_split\n-  [(set (match_operand:CCUNS 3 \"cc_reg_operand\" \"\")\n-\t(compare:CCUNS (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t       (match_operand:SI 2 \"u_short_cint_operand\" \"\")))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (match_dup 1) (match_operand:SI 4 \"short_cint_operand\" \"\")))]\n+  [(set (match_operand:CCUNS 3 \"cc_reg_operand\")\n+\t(compare:CCUNS (match_operand:SI 1 \"gpc_reg_operand\")\n+\t\t       (match_operand:SI 2 \"u_short_cint_operand\")))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\")\n+\t(plus:SI (match_dup 1) (match_operand:SI 4 \"short_cint_operand\")))]\n   \"\"\n   [(set (match_dup 3) (compare:CCUNS (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 4)))])\n@@ -11715,12 +11715,12 @@\n    (set_attr \"length\" \"8,16\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\")\n \t(compare:CC (match_operator:SI 1 \"scc_comparison_operator\"\n-\t\t\t\t       [(match_operand 2 \"cc_reg_operand\" \"\")\n+\t\t\t\t       [(match_operand 2 \"cc_reg_operand\")\n \t\t\t\t\t(const_int 0)])\n \t\t    (const_int 0)))\n-   (set (match_operand:SI 3 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SI 3 \"gpc_reg_operand\")\n \t(match_op_dup 1 [(match_dup 2) (const_int 0)]))]\n   \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 3)\n@@ -13002,8 +13002,8 @@\n ; faster; for instance, on the 601 and 750.\n \n (define_expand \"movsi_to_cr_one\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"\")\n-        (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\")\n+        (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\")\n \t\t    (match_dup 2)] UNSPEC_MOVESI_TO_CR))]\n   \"\"\n   \"operands[2] = GEN_INT (1 << (75 - REGNO (operands[0])));\")\n@@ -13210,7 +13210,7 @@\n \n ; This is used in compiling the unwind routines.\n (define_expand \"eh_return\"\n-  [(use (match_operand 0 \"general_operand\" \"\"))]\n+  [(use (match_operand 0 \"general_operand\"))]\n   \"\"\n {\n   if (TARGET_32BIT)\n@@ -13229,8 +13229,8 @@\n   \"#\")\n \n (define_split\n-  [(unspec_volatile [(match_operand 0 \"register_operand\" \"\")] UNSPECV_EH_RR)\n-   (clobber (match_scratch 1 \"\"))]\n+  [(unspec_volatile [(match_operand 0 \"register_operand\")] UNSPECV_EH_RR)\n+   (clobber (match_scratch 1))]\n   \"reload_completed\"\n   [(const_int 0)]\n {\n@@ -13331,11 +13331,11 @@\n ;; Note that the conditions for expansion are in the FMA_F iterator.\n \n (define_expand \"fma<mode>4\"\n-  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\")\n \t(fma:FMA_F\n-\t  (match_operand:FMA_F 1 \"gpc_reg_operand\" \"\")\n-\t  (match_operand:FMA_F 2 \"gpc_reg_operand\" \"\")\n-\t  (match_operand:FMA_F 3 \"gpc_reg_operand\" \"\")))]\n+\t  (match_operand:FMA_F 1 \"gpc_reg_operand\")\n+\t  (match_operand:FMA_F 2 \"gpc_reg_operand\")\n+\t  (match_operand:FMA_F 3 \"gpc_reg_operand\")))]\n   \"\"\n   \"\")\n \n@@ -13355,11 +13355,11 @@\n \n ; Altivec only has fma and nfms.\n (define_expand \"fms<mode>4\"\n-  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\")\n \t(fma:FMA_F\n-\t  (match_operand:FMA_F 1 \"gpc_reg_operand\" \"\")\n-\t  (match_operand:FMA_F 2 \"gpc_reg_operand\" \"\")\n-\t  (neg:FMA_F (match_operand:FMA_F 3 \"gpc_reg_operand\" \"\"))))]\n+\t  (match_operand:FMA_F 1 \"gpc_reg_operand\")\n+\t  (match_operand:FMA_F 2 \"gpc_reg_operand\")\n+\t  (neg:FMA_F (match_operand:FMA_F 3 \"gpc_reg_operand\"))))]\n   \"!VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"\")\n \n@@ -13379,34 +13379,34 @@\n \n ;; If signed zeros are ignored, -(a * b - c) = -a * b + c.\n (define_expand \"fnma<mode>4\"\n-  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\")\n \t(neg:FMA_F\n \t  (fma:FMA_F\n-\t    (match_operand:FMA_F 1 \"gpc_reg_operand\" \"\")\n-\t    (match_operand:FMA_F 2 \"gpc_reg_operand\" \"\")\n-\t    (neg:FMA_F (match_operand:FMA_F 3 \"gpc_reg_operand\" \"\")))))]\n+\t    (match_operand:FMA_F 1 \"gpc_reg_operand\")\n+\t    (match_operand:FMA_F 2 \"gpc_reg_operand\")\n+\t    (neg:FMA_F (match_operand:FMA_F 3 \"gpc_reg_operand\")))))]\n   \"!HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"\")\n \n ;; If signed zeros are ignored, -(a * b + c) = -a * b - c.\n (define_expand \"fnms<mode>4\"\n-  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\")\n \t(neg:FMA_F\n \t  (fma:FMA_F\n-\t    (match_operand:FMA_F 1 \"gpc_reg_operand\" \"\")\n-\t    (match_operand:FMA_F 2 \"gpc_reg_operand\" \"\")\n-\t    (match_operand:FMA_F 3 \"gpc_reg_operand\" \"\"))))]\n+\t    (match_operand:FMA_F 1 \"gpc_reg_operand\")\n+\t    (match_operand:FMA_F 2 \"gpc_reg_operand\")\n+\t    (match_operand:FMA_F 3 \"gpc_reg_operand\"))))]\n   \"!HONOR_SIGNED_ZEROS (<MODE>mode) && !VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"\")\n \n ; Not an official optab name, but used from builtins.\n (define_expand \"nfma<mode>4\"\n-  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\")\n \t(neg:FMA_F\n \t  (fma:FMA_F\n-\t    (match_operand:FMA_F 1 \"gpc_reg_operand\" \"\")\n-\t    (match_operand:FMA_F 2 \"gpc_reg_operand\" \"\")\n-\t    (match_operand:FMA_F 3 \"gpc_reg_operand\" \"\"))))]\n+\t    (match_operand:FMA_F 1 \"gpc_reg_operand\")\n+\t    (match_operand:FMA_F 2 \"gpc_reg_operand\")\n+\t    (match_operand:FMA_F 3 \"gpc_reg_operand\"))))]\n   \"!VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"\")\n \n@@ -13427,12 +13427,12 @@\n \n ; Not an official optab name, but used from builtins.\n (define_expand \"nfms<mode>4\"\n-  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:FMA_F 0 \"gpc_reg_operand\")\n \t(neg:FMA_F\n \t  (fma:FMA_F\n-\t    (match_operand:FMA_F 1 \"gpc_reg_operand\" \"\")\n-\t    (match_operand:FMA_F 2 \"gpc_reg_operand\" \"\")\n-\t    (neg:FMA_F (match_operand:FMA_F 3 \"gpc_reg_operand\" \"\")))))]\n+\t    (match_operand:FMA_F 1 \"gpc_reg_operand\")\n+\t    (match_operand:FMA_F 2 \"gpc_reg_operand\")\n+\t    (neg:FMA_F (match_operand:FMA_F 3 \"gpc_reg_operand\")))))]\n   \"\"\n   \"\")\n \n@@ -13454,7 +13454,7 @@\n \n \f\n (define_expand \"rs6000_get_timebase\"\n-  [(use (match_operand:DI 0 \"gpc_reg_operand\" \"\"))]\n+  [(use (match_operand:DI 0 \"gpc_reg_operand\"))]\n   \"\"\n {\n   if (TARGET_POWERPC64)\n@@ -13552,8 +13552,8 @@\n ;; (addis followed by load) even on power8.\n \n (define_split\n-  [(set (match_operand:INT1 0 \"toc_fusion_or_p9_reg_operand\" \"\")\n-\t(match_operand:INT1 1 \"toc_fusion_mem_raw\" \"\"))]\n+  [(set (match_operand:INT1 0 \"toc_fusion_or_p9_reg_operand\")\n+\t(match_operand:INT1 1 \"toc_fusion_mem_raw\"))]\n   \"TARGET_TOC_FUSION_INT && can_create_pseudo_p ()\"\n   [(parallel [(set (match_dup 0) (match_dup 2))\n \t      (unspec [(const_int 0)] UNSPEC_FUSION_ADDIS)\n@@ -13603,10 +13603,10 @@\n ;; insn\n \n (define_peephole2\n-  [(set (match_operand:P 0 \"base_reg_operand\" \"\")\n-\t(match_operand:P 1 \"fusion_gpr_addis\" \"\"))\n-   (set (match_operand:INT1 2 \"base_reg_operand\" \"\")\n-\t(match_operand:INT1 3 \"fusion_gpr_mem_load\" \"\"))]\n+  [(set (match_operand:P 0 \"base_reg_operand\")\n+\t(match_operand:P 1 \"fusion_gpr_addis\"))\n+   (set (match_operand:INT1 2 \"base_reg_operand\")\n+\t(match_operand:INT1 3 \"fusion_gpr_mem_load\"))]\n   \"TARGET_P8_FUSION\n    && fusion_gpr_load_p (operands[0], operands[1], operands[2],\n \t\t\t operands[3])\"\n@@ -13634,10 +13634,10 @@\n ;; ISA 3.0 (power9) fusion support\n ;; Merge addis with floating load/store to FPRs (or GPRs).\n (define_peephole2\n-  [(set (match_operand:P 0 \"base_reg_operand\" \"\")\n-\t(match_operand:P 1 \"fusion_gpr_addis\" \"\"))\n-   (set (match_operand:SFDF 2 \"toc_fusion_or_p9_reg_operand\" \"\")\n-\t(match_operand:SFDF 3 \"fusion_offsettable_mem_operand\" \"\"))]\n+  [(set (match_operand:P 0 \"base_reg_operand\")\n+\t(match_operand:P 1 \"fusion_gpr_addis\"))\n+   (set (match_operand:SFDF 2 \"toc_fusion_or_p9_reg_operand\")\n+\t(match_operand:SFDF 3 \"fusion_offsettable_mem_operand\"))]\n   \"TARGET_P9_FUSION && peep2_reg_dead_p (2, operands[0])\n    && fusion_p9_p (operands[0], operands[1], operands[2], operands[3])\"\n   [(const_int 0)]\n@@ -13647,10 +13647,10 @@\n })\n \n (define_peephole2\n-  [(set (match_operand:P 0 \"base_reg_operand\" \"\")\n-\t(match_operand:P 1 \"fusion_gpr_addis\" \"\"))\n-   (set (match_operand:SFDF 2 \"offsettable_mem_operand\" \"\")\n-\t(match_operand:SFDF 3 \"toc_fusion_or_p9_reg_operand\" \"\"))]\n+  [(set (match_operand:P 0 \"base_reg_operand\")\n+\t(match_operand:P 1 \"fusion_gpr_addis\"))\n+   (set (match_operand:SFDF 2 \"offsettable_mem_operand\")\n+\t(match_operand:SFDF 3 \"toc_fusion_or_p9_reg_operand\"))]\n   \"TARGET_P9_FUSION && peep2_reg_dead_p (2, operands[0])\n    && fusion_p9_p (operands[0], operands[1], operands[2], operands[3])\n    && !rtx_equal_p (operands[0], operands[3])\"\n@@ -13661,22 +13661,22 @@\n })\n \n (define_peephole2\n-  [(set (match_operand:SDI 0 \"int_reg_operand\" \"\")\n-\t(match_operand:SDI 1 \"upper16_cint_operand\" \"\"))\n+  [(set (match_operand:SDI 0 \"int_reg_operand\")\n+\t(match_operand:SDI 1 \"upper16_cint_operand\"))\n    (set (match_dup 0)\n \t(ior:SDI (match_dup 0)\n-\t\t (match_operand:SDI 2 \"u_short_cint_operand\" \"\")))]\n+\t\t (match_operand:SDI 2 \"u_short_cint_operand\")))]\n   \"TARGET_P9_FUSION\"\n   [(set (match_dup 0)\n \t(unspec:SDI [(match_dup 1)\n \t\t     (match_dup 2)] UNSPEC_FUSION_P9))])\n \n (define_peephole2\n-  [(set (match_operand:SDI 0 \"int_reg_operand\" \"\")\n-\t(match_operand:SDI 1 \"upper16_cint_operand\" \"\"))\n-   (set (match_operand:SDI 2 \"int_reg_operand\" \"\")\n+  [(set (match_operand:SDI 0 \"int_reg_operand\")\n+\t(match_operand:SDI 1 \"upper16_cint_operand\"))\n+   (set (match_operand:SDI 2 \"int_reg_operand\")\n \t(ior:SDI (match_dup 0)\n-\t\t (match_operand:SDI 3 \"u_short_cint_operand\" \"\")))]\n+\t\t (match_operand:SDI 3 \"u_short_cint_operand\")))]\n   \"TARGET_P9_FUSION\n    && !rtx_equal_p (operands[0], operands[2])\n    && peep2_reg_dead_p (2, operands[0])\"\n@@ -13892,10 +13892,10 @@\n \t\t\t    (KF \"DI\")])\n \n (define_expand \"unpack<mode>\"\n-  [(set (match_operand:<FP128_64> 0 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:<FP128_64> 0 \"nonimmediate_operand\")\n \t(unspec:<FP128_64>\n-\t [(match_operand:FMOVE128 1 \"register_operand\" \"\")\n-\t  (match_operand:QI 2 \"const_0_to_1_operand\" \"\")]\n+\t [(match_operand:FMOVE128 1 \"register_operand\")\n+\t  (match_operand:QI 2 \"const_0_to_1_operand\")]\n \t UNSPEC_UNPACK_128BIT))]\n   \"FLOAT128_2REG_P (<MODE>mode)\"\n   \"\")"}, {"sha": "74bc407b462a842a99734e031140d6af1ca53ce9", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -38,7 +38,7 @@\n    (ior \"logical_operand\") (xor \"logical_operand\") (and \"and_operand\")])\n \n (define_expand \"mem_thread_fence\"\n-  [(match_operand:SI 0 \"const_int_operand\" \"\")]\t\t;; model\n+  [(match_operand:SI 0 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   enum memmodel model = memmodel_base (INTVAL (operands[0]));\n@@ -136,9 +136,9 @@\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"atomic_load<mode>\"\n-  [(set (match_operand:AINT 0 \"register_operand\" \"\")\t\t;; output\n-\t(match_operand:AINT 1 \"memory_operand\" \"\"))\t\t;; memory\n-   (use (match_operand:SI 2 \"const_int_operand\" \"\"))]\t\t;; model\n+  [(set (match_operand:AINT 0 \"register_operand\")\t\t;; output\n+\t(match_operand:AINT 1 \"memory_operand\"))\t\t;; memory\n+   (use (match_operand:SI 2 \"const_int_operand\"))]\t\t;; model\n   \"\"\n {\n   if (<MODE>mode == TImode && !TARGET_SYNC_TI)\n@@ -200,9 +200,9 @@\n    (set_attr \"length\" \"4\")])\n \n (define_expand \"atomic_store<mode>\"\n-  [(set (match_operand:AINT 0 \"memory_operand\" \"\")\t\t;; memory\n-\t(match_operand:AINT 1 \"register_operand\" \"\"))\t\t;; input\n-   (use (match_operand:SI 2 \"const_int_operand\" \"\"))]\t\t;; model\n+  [(set (match_operand:AINT 0 \"memory_operand\")\t\t;; memory\n+\t(match_operand:AINT 1 \"register_operand\"))\t;; input\n+   (use (match_operand:SI 2 \"const_int_operand\"))]\t;; model\n   \"\"\n {\n   if (<MODE>mode == TImode && !TARGET_SYNC_TI)\n@@ -287,8 +287,8 @@\n ;; is indexed or indirect before register allocation.\n \n (define_expand \"load_lockedti\"\n-  [(use (match_operand:TI 0 \"quad_int_reg_operand\" \"\"))\n-   (use (match_operand:TI 1 \"memory_operand\" \"\"))]\n+  [(use (match_operand:TI 0 \"quad_int_reg_operand\"))\n+   (use (match_operand:TI 1 \"memory_operand\"))]\n   \"TARGET_SYNC_TI\"\n {\n   rtx op0 = operands[0];\n@@ -341,9 +341,9 @@\n ;; is indexed or indirect before register allocation.\n \n (define_expand \"store_conditionalti\"\n-  [(use (match_operand:CC 0 \"cc_reg_operand\" \"\"))\n-   (use (match_operand:TI 1 \"memory_operand\" \"\"))\n-   (use (match_operand:TI 2 \"quad_int_reg_operand\" \"\"))]\n+  [(use (match_operand:CC 0 \"cc_reg_operand\"))\n+   (use (match_operand:TI 1 \"memory_operand\"))\n+   (use (match_operand:TI 2 \"quad_int_reg_operand\"))]\n   \"TARGET_SYNC_TI\"\n {\n   rtx op0 = operands[0];\n@@ -385,36 +385,36 @@\n   [(set_attr \"type\" \"store_c\")])\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n-  [(match_operand:SI 0 \"int_reg_operand\" \"\")\t\t;; bool out\n-   (match_operand:AINT 1 \"int_reg_operand\" \"\")\t\t;; val out\n-   (match_operand:AINT 2 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:AINT 3 \"reg_or_short_operand\" \"\")\t;; expected\n-   (match_operand:AINT 4 \"int_reg_operand\" \"\")\t\t;; desired\n-   (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n-   (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; model succ\n-   (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; model fail\n+  [(match_operand:SI 0 \"int_reg_operand\")\t\t;; bool out\n+   (match_operand:AINT 1 \"int_reg_operand\")\t\t;; val out\n+   (match_operand:AINT 2 \"memory_operand\")\t\t;; memory\n+   (match_operand:AINT 3 \"reg_or_short_operand\")\t;; expected\n+   (match_operand:AINT 4 \"int_reg_operand\")\t\t;; desired\n+   (match_operand:SI 5 \"const_int_operand\")\t\t;; is_weak\n+   (match_operand:SI 6 \"const_int_operand\")\t\t;; model succ\n+   (match_operand:SI 7 \"const_int_operand\")]\t\t;; model fail\n   \"\"\n {\n   rs6000_expand_atomic_compare_and_swap (operands);\n   DONE;\n })\n \n (define_expand \"atomic_exchange<mode>\"\n-  [(match_operand:AINT 0 \"int_reg_operand\" \"\")\t\t;; output\n-   (match_operand:AINT 1 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:AINT 2 \"int_reg_operand\" \"\")\t\t;; input\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+  [(match_operand:AINT 0 \"int_reg_operand\")\t\t;; output\n+   (match_operand:AINT 1 \"memory_operand\")\t\t;; memory\n+   (match_operand:AINT 2 \"int_reg_operand\")\t\t;; input\n+   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   rs6000_expand_atomic_exchange (operands);\n   DONE;\n })\n \n (define_expand \"atomic_<fetchop_name><mode>\"\n-  [(match_operand:AINT 0 \"memory_operand\" \"\")\t\t;; memory\n+  [(match_operand:AINT 0 \"memory_operand\")\t\t;; memory\n    (FETCHOP:AINT (match_dup 0)\n-     (match_operand:AINT 1 \"<fetchop_pred>\" \"\"))\t;; operand\n-   (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n+     (match_operand:AINT 1 \"<fetchop_pred>\"))\t\t;; operand\n+   (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   rs6000_expand_atomic_op (<CODE>, operands[0], operands[1],\n@@ -423,9 +423,9 @@\n })\n \n (define_expand \"atomic_nand<mode>\"\n-  [(match_operand:AINT 0 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:AINT 1 \"int_reg_operand\" \"\")\t\t;; operand\n-   (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n+  [(match_operand:AINT 0 \"memory_operand\")\t\t;; memory\n+   (match_operand:AINT 1 \"int_reg_operand\")\t\t;; operand\n+   (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   rs6000_expand_atomic_op (NOT, operands[0], operands[1],\n@@ -434,11 +434,11 @@\n })\n \n (define_expand \"atomic_fetch_<fetchop_name><mode>\"\n-  [(match_operand:AINT 0 \"int_reg_operand\" \"\")\t\t;; output\n-   (match_operand:AINT 1 \"memory_operand\" \"\")\t\t;; memory\n+  [(match_operand:AINT 0 \"int_reg_operand\")\t\t;; output\n+   (match_operand:AINT 1 \"memory_operand\")\t\t;; memory\n    (FETCHOP:AINT (match_dup 1)\n-     (match_operand:AINT 2 \"<fetchop_pred>\" \"\"))\t;; operand\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+     (match_operand:AINT 2 \"<fetchop_pred>\"))\t\t;; operand\n+   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n   \"\"\n { \n   rs6000_expand_atomic_op (<CODE>, operands[1], operands[2],\n@@ -447,10 +447,10 @@\n })\n \n (define_expand \"atomic_fetch_nand<mode>\"\n-  [(match_operand:AINT 0 \"int_reg_operand\" \"\")\t\t;; output\n-   (match_operand:AINT 1 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:AINT 2 \"int_reg_operand\" \"\")\t\t;; operand\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+  [(match_operand:AINT 0 \"int_reg_operand\")\t\t;; output\n+   (match_operand:AINT 1 \"memory_operand\")\t\t;; memory\n+   (match_operand:AINT 2 \"int_reg_operand\")\t\t;; operand\n+   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   rs6000_expand_atomic_op (NOT, operands[1], operands[2],\n@@ -459,11 +459,11 @@\n })\n \n (define_expand \"atomic_<fetchop_name>_fetch<mode>\"\n-  [(match_operand:AINT 0 \"int_reg_operand\" \"\")\t\t;; output\n-   (match_operand:AINT 1 \"memory_operand\" \"\")\t\t;; memory\n+  [(match_operand:AINT 0 \"int_reg_operand\")\t\t;; output\n+   (match_operand:AINT 1 \"memory_operand\")\t\t;; memory\n    (FETCHOP:AINT (match_dup 1)\n-     (match_operand:AINT 2 \"<fetchop_pred>\" \"\"))\t;; operand\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+     (match_operand:AINT 2 \"<fetchop_pred>\"))\t\t;; operand\n+   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   rs6000_expand_atomic_op (<CODE>, operands[1], operands[2],\n@@ -472,10 +472,10 @@\n })\n \n (define_expand \"atomic_nand_fetch<mode>\"\n-  [(match_operand:AINT 0 \"int_reg_operand\" \"\")\t\t;; output\n-   (match_operand:AINT 1 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:AINT 2 \"int_reg_operand\" \"\")\t\t;; operand\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+  [(match_operand:AINT 0 \"int_reg_operand\")\t\t;; output\n+   (match_operand:AINT 1 \"memory_operand\")\t\t;; memory\n+   (match_operand:AINT 2 \"int_reg_operand\")\t\t;; operand\n+   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   rs6000_expand_atomic_op (NOT, operands[1], operands[2],"}, {"sha": "6e2576ee1d8477a744913878c2188e27d38536ff", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 202, "deletions": 202, "changes": 404, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -111,8 +111,8 @@\n ;; Vector move instructions.  Little-endian VSX loads and stores require\n ;; special handling to circumvent \"element endianness.\"\n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VEC_M 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:VEC_M 1 \"any_operand\" \"\"))]\n+  [(set (match_operand:VEC_M 0 \"nonimmediate_operand\")\n+\t(match_operand:VEC_M 1 \"any_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (can_create_pseudo_p ())\n@@ -147,21 +147,21 @@\n ;; Generic vector floating point load/store instructions.  These will match\n ;; insns defined in vsx.md or altivec.md depending on the switches.\n (define_expand \"vector_load_<mode>\"\n-  [(set (match_operand:VEC_M 0 \"vfloat_operand\" \"\")\n-\t(match_operand:VEC_M 1 \"memory_operand\" \"\"))]\n+  [(set (match_operand:VEC_M 0 \"vfloat_operand\")\n+\t(match_operand:VEC_M 1 \"memory_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"vector_store_<mode>\"\n-  [(set (match_operand:VEC_M 0 \"memory_operand\" \"\")\n-\t(match_operand:VEC_M 1 \"vfloat_operand\" \"\"))]\n+  [(set (match_operand:VEC_M 0 \"memory_operand\")\n+\t(match_operand:VEC_M 1 \"vfloat_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ;; Splits if a GPR register was chosen for the move\n (define_split\n-  [(set (match_operand:VEC_L 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:VEC_L 1 \"input_operand\" \"\"))]\n+  [(set (match_operand:VEC_L 0 \"nonimmediate_operand\")\n+        (match_operand:VEC_L 1 \"input_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\n    && reload_completed\n    && gpr_or_gpr_p (operands[0], operands[1])\n@@ -178,8 +178,8 @@\n ;; instructions silently ignore the bottom 3 bits of the address, and VSX does\n ;; not.\n (define_expand \"vector_altivec_load_<mode>\"\n-  [(set (match_operand:VEC_M 0 \"vfloat_operand\" \"\")\n-\t(match_operand:VEC_M 1 \"memory_operand\" \"\"))]\n+  [(set (match_operand:VEC_M 0 \"vfloat_operand\")\n+\t(match_operand:VEC_M 1 \"memory_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   gcc_assert (VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode));\n@@ -200,8 +200,8 @@\n })\n \n (define_expand \"vector_altivec_store_<mode>\"\n-  [(set (match_operand:VEC_M 0 \"memory_operand\" \"\")\n-\t(match_operand:VEC_M 1 \"vfloat_operand\" \"\"))]\n+  [(set (match_operand:VEC_M 0 \"memory_operand\")\n+\t(match_operand:VEC_M 1 \"vfloat_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   gcc_assert (VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode));\n@@ -225,23 +225,23 @@\n \f\n ;; Generic floating point vector arithmetic support\n (define_expand \"add<mode>3\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(plus:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t    (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(plus:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t    (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"sub<mode>3\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(minus:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t     (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(minus:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t     (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"mul<mode>3\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(mult:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t    (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(mult:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t    (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -252,9 +252,9 @@\n })\n \n (define_expand \"div<mode>3\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(div:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t   (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(div:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t   (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n {\n   if (RS6000_RECIP_AUTO_RE_P (<MODE>mode)\n@@ -267,8 +267,8 @@\n })\n \n (define_expand \"neg<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(neg:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(neg:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -279,8 +279,8 @@\n })\n \n (define_expand \"abs<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(abs:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(abs:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -291,23 +291,23 @@\n })\n \n (define_expand \"smin<mode>3\"\n-  [(set (match_operand:VEC_F 0 \"register_operand\" \"\")\n-        (smin:VEC_F (match_operand:VEC_F 1 \"register_operand\" \"\")\n-\t\t    (match_operand:VEC_F 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"register_operand\")\n+        (smin:VEC_F (match_operand:VEC_F 1 \"register_operand\")\n+\t\t    (match_operand:VEC_F 2 \"register_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"smax<mode>3\"\n-  [(set (match_operand:VEC_F 0 \"register_operand\" \"\")\n-        (smax:VEC_F (match_operand:VEC_F 1 \"register_operand\" \"\")\n-\t\t    (match_operand:VEC_F 2 \"register_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"register_operand\")\n+        (smax:VEC_F (match_operand:VEC_F 1 \"register_operand\")\n+\t\t    (match_operand:VEC_F 2 \"register_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n \n (define_expand \"sqrt<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(sqrt:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(sqrt:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode\n@@ -321,49 +321,49 @@\n })\n \n (define_expand \"rsqrte<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-        (unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\" \"\")]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+        (unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\")]\n \t\t      UNSPEC_RSQRT))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"re<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\" \"f\")]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\")]\n \t\t      UNSPEC_FRES))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"ftrunc<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-  \t(fix:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+  \t(fix:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"vector_ceil<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\" \"\")]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\")]\n \t\t      UNSPEC_FRIP))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"vector_floor<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\" \"\")]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\")]\n \t\t      UNSPEC_FRIM))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"vector_btrunc<mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(fix:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(fix:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"vector_copysign<mode>3\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t       (match_operand:VEC_F 2 \"vfloat_operand\" \"\")] UNSPEC_COPYSIGN))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(unspec:VEC_F [(match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t       (match_operand:VEC_F 2 \"vfloat_operand\")] UNSPEC_COPYSIGN))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -377,13 +377,13 @@\n \f\n ;; Vector comparisons\n (define_expand \"vcond<mode><mode>\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n \t(if_then_else:VEC_F\n \t (match_operator 3 \"comparison_operator\"\n-\t\t\t [(match_operand:VEC_F 4 \"vfloat_operand\" \"\")\n-\t\t\t  (match_operand:VEC_F 5 \"vfloat_operand\" \"\")])\n-\t (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+\t\t\t [(match_operand:VEC_F 4 \"vfloat_operand\")\n+\t\t\t  (match_operand:VEC_F 5 \"vfloat_operand\")])\n+\t (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (rs6000_emit_vector_cond_expr (operands[0], operands[1], operands[2],\n@@ -411,13 +411,13 @@\n })\n \n (define_expand \"vcondv4sfv4si\"\n-  [(set (match_operand:V4SF 0 \"vfloat_operand\" \"\")\n+  [(set (match_operand:V4SF 0 \"vfloat_operand\")\n \t(if_then_else:V4SF\n \t (match_operator 3 \"comparison_operator\"\n-\t\t\t [(match_operand:V4SI 4 \"vint_operand\" \"\")\n-\t\t\t  (match_operand:V4SI 5 \"vint_operand\" \"\")])\n-\t (match_operand:V4SF 1 \"vfloat_operand\" \"\")\n-\t (match_operand:V4SF 2 \"vfloat_operand\" \"\")))]\n+\t\t\t [(match_operand:V4SI 4 \"vint_operand\")\n+\t\t\t  (match_operand:V4SI 5 \"vint_operand\")])\n+\t (match_operand:V4SF 1 \"vfloat_operand\")\n+\t (match_operand:V4SF 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n    && VECTOR_UNIT_ALTIVEC_P (V4SImode)\"\n {\n@@ -429,13 +429,13 @@\n })\n \n (define_expand \"vcondv4siv4sf\"\n-  [(set (match_operand:V4SI 0 \"vint_operand\" \"\")\n+  [(set (match_operand:V4SI 0 \"vint_operand\")\n \t(if_then_else:V4SI\n \t (match_operator 3 \"comparison_operator\"\n-\t\t\t [(match_operand:V4SF 4 \"vfloat_operand\" \"\")\n-\t\t\t  (match_operand:V4SF 5 \"vfloat_operand\" \"\")])\n-\t (match_operand:V4SI 1 \"vint_operand\" \"\")\n-\t (match_operand:V4SI 2 \"vint_operand\" \"\")))]\n+\t\t\t [(match_operand:V4SF 4 \"vfloat_operand\")\n+\t\t\t  (match_operand:V4SF 5 \"vfloat_operand\")])\n+\t (match_operand:V4SI 1 \"vint_operand\")\n+\t (match_operand:V4SI 2 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n    && VECTOR_UNIT_ALTIVEC_P (V4SImode)\"\n {\n@@ -500,13 +500,13 @@\n })\n \n (define_expand \"vconduv4sfv4si\"\n-  [(set (match_operand:V4SF 0 \"vfloat_operand\" \"\")\n+  [(set (match_operand:V4SF 0 \"vfloat_operand\")\n \t(if_then_else:V4SF\n \t (match_operator 3 \"comparison_operator\"\n-\t\t\t [(match_operand:V4SI 4 \"vint_operand\" \"\")\n-\t\t\t  (match_operand:V4SI 5 \"vint_operand\" \"\")])\n-\t (match_operand:V4SF 1 \"vfloat_operand\" \"\")\n-\t (match_operand:V4SF 2 \"vfloat_operand\" \"\")))]\n+\t\t\t [(match_operand:V4SI 4 \"vint_operand\")\n+\t\t\t  (match_operand:V4SI 5 \"vint_operand\")])\n+\t (match_operand:V4SF 1 \"vfloat_operand\")\n+\t (match_operand:V4SF 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n    && VECTOR_UNIT_ALTIVEC_P (V4SImode)\"\n {\n@@ -536,91 +536,91 @@\n })\n \n (define_expand \"vector_eq<mode>\"\n-  [(set (match_operand:VEC_C 0 \"vlogical_operand\" \"\")\n-\t(eq:VEC_C (match_operand:VEC_C 1 \"vlogical_operand\" \"\")\n-\t\t  (match_operand:VEC_C 2 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:VEC_C 0 \"vlogical_operand\")\n+\t(eq:VEC_C (match_operand:VEC_C 1 \"vlogical_operand\")\n+\t\t  (match_operand:VEC_C 2 \"vlogical_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"vector_gt<mode>\"\n-  [(set (match_operand:VEC_C 0 \"vlogical_operand\" \"\")\n-\t(gt:VEC_C (match_operand:VEC_C 1 \"vlogical_operand\" \"\")\n-\t\t  (match_operand:VEC_C 2 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:VEC_C 0 \"vlogical_operand\")\n+\t(gt:VEC_C (match_operand:VEC_C 1 \"vlogical_operand\")\n+\t\t  (match_operand:VEC_C 2 \"vlogical_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n (define_expand \"vector_ge<mode>\"\n-  [(set (match_operand:VEC_F 0 \"vlogical_operand\" \"\")\n-\t(ge:VEC_F (match_operand:VEC_F 1 \"vlogical_operand\" \"\")\n-\t\t  (match_operand:VEC_F 2 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vlogical_operand\")\n+\t(ge:VEC_F (match_operand:VEC_F 1 \"vlogical_operand\")\n+\t\t  (match_operand:VEC_F 2 \"vlogical_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ; >= for integer vectors: swap operands and apply not-greater-than\n (define_expand \"vector_nlt<mode>\"\n-  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n-\t(gt:VEC_I (match_operand:VEC_I 2 \"vlogical_operand\" \"\")\n-\t\t  (match_operand:VEC_I 1 \"vlogical_operand\" \"\")))\n-   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\")\n+\t(gt:VEC_I (match_operand:VEC_I 2 \"vlogical_operand\")\n+\t\t  (match_operand:VEC_I 1 \"vlogical_operand\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\")\n         (not:VEC_I (match_dup 3)))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n })\n \n (define_expand \"vector_gtu<mode>\"\n-  [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n-\t(gtu:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n-\t\t   (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"vint_operand\")\n+\t(gtu:VEC_I (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t   (match_operand:VEC_I 2 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ; >= for integer vectors: swap operands and apply not-greater-than\n (define_expand \"vector_nltu<mode>\"\n-  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n-\t(gtu:VEC_I (match_operand:VEC_I 2 \"vlogical_operand\" \"\")\n-\t \t   (match_operand:VEC_I 1 \"vlogical_operand\" \"\")))\n-   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\")\n+\t(gtu:VEC_I (match_operand:VEC_I 2 \"vlogical_operand\")\n+\t \t   (match_operand:VEC_I 1 \"vlogical_operand\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\")\n         (not:VEC_I (match_dup 3)))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n })\n \n (define_expand \"vector_geu<mode>\"\n-  [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n-\t(geu:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n-\t\t   (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"vint_operand\")\n+\t(geu:VEC_I (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t   (match_operand:VEC_I 2 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ; <= for integer vectors: apply not-greater-than\n (define_expand \"vector_ngt<mode>\"\n-  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n-\t(gt:VEC_I (match_operand:VEC_I 1 \"vlogical_operand\" \"\")\n-\t\t  (match_operand:VEC_I 2 \"vlogical_operand\" \"\")))\n-   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\")\n+\t(gt:VEC_I (match_operand:VEC_I 1 \"vlogical_operand\")\n+\t\t  (match_operand:VEC_I 2 \"vlogical_operand\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\")\n         (not:VEC_I (match_dup 3)))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n })\n \n (define_expand \"vector_ngtu<mode>\"\n-  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n-\t(gtu:VEC_I (match_operand:VEC_I 1 \"vlogical_operand\" \"\")\n-\t \t   (match_operand:VEC_I 2 \"vlogical_operand\" \"\")))\n-   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\")\n+\t(gtu:VEC_I (match_operand:VEC_I 1 \"vlogical_operand\")\n+\t \t   (match_operand:VEC_I 2 \"vlogical_operand\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\")\n         (not:VEC_I (match_dup 3)))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n })\n \n (define_insn_and_split \"*vector_uneq<mode>\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(uneq:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t    (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(uneq:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t    (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"#\"\n   \"\"\n@@ -639,9 +639,9 @@\n })\n \n (define_insn_and_split \"*vector_ltgt<mode>\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(ltgt:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t    (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(ltgt:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t    (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"#\"\n   \"\"\n@@ -660,9 +660,9 @@\n })\n \n (define_insn_and_split \"*vector_ordered<mode>\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(ordered:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t       (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(ordered:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t       (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"#\"\n   \"\"\n@@ -681,9 +681,9 @@\n })\n \n (define_insn_and_split \"*vector_unordered<mode>\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(unordered:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t\t (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(unordered:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t\t (match_operand:VEC_F 2 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"#\"\n   \"\"\n@@ -704,22 +704,22 @@\n ;; Note the arguments for __builtin_altivec_vsel are op2, op1, mask\n ;; which is in the reverse order that we want\n (define_expand \"vector_select_<mode>\"\n-  [(set (match_operand:VEC_L 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:VEC_L 0 \"vlogical_operand\")\n \t(if_then_else:VEC_L\n-\t (ne:CC (match_operand:VEC_L 3 \"vlogical_operand\" \"\")\n+\t (ne:CC (match_operand:VEC_L 3 \"vlogical_operand\")\n \t\t(match_dup 4))\n-\t (match_operand:VEC_L 2 \"vlogical_operand\" \"\")\n-\t (match_operand:VEC_L 1 \"vlogical_operand\" \"\")))]\n+\t (match_operand:VEC_L 2 \"vlogical_operand\")\n+\t (match_operand:VEC_L 1 \"vlogical_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"operands[4] = CONST0_RTX (<MODE>mode);\")\n \n (define_expand \"vector_select_<mode>_uns\"\n-  [(set (match_operand:VEC_L 0 \"vlogical_operand\" \"\")\n+  [(set (match_operand:VEC_L 0 \"vlogical_operand\")\n \t(if_then_else:VEC_L\n-\t (ne:CCUNS (match_operand:VEC_L 3 \"vlogical_operand\" \"\")\n+\t (ne:CCUNS (match_operand:VEC_L 3 \"vlogical_operand\")\n \t\t   (match_dup 4))\n-\t (match_operand:VEC_L 2 \"vlogical_operand\" \"\")\n-\t (match_operand:VEC_L 1 \"vlogical_operand\" \"\")))]\n+\t (match_operand:VEC_L 2 \"vlogical_operand\")\n+\t (match_operand:VEC_L 1 \"vlogical_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"operands[4] = CONST0_RTX (<MODE>mode);\")\n \n@@ -728,10 +728,10 @@\n (define_expand \"vector_eq_<mode>_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n-\t  (unspec:CC [(eq:CC (match_operand:VEC_A 1 \"vlogical_operand\" \"\")\n-\t\t\t     (match_operand:VEC_A 2 \"vlogical_operand\" \"\"))]\n+\t  (unspec:CC [(eq:CC (match_operand:VEC_A 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:VEC_A 2 \"vlogical_operand\"))]\n \t\t     UNSPEC_PREDICATE))\n-     (set (match_operand:VEC_A 0 \"vlogical_operand\" \"\")\n+     (set (match_operand:VEC_A 0 \"vlogical_operand\")\n \t  (eq:VEC_A (match_dup 1)\n \t\t    (match_dup 2)))])]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n@@ -895,10 +895,10 @@\n (define_expand \"vector_gt_<mode>_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n-\t  (unspec:CC [(gt:CC (match_operand:VEC_A 1 \"vlogical_operand\" \"\")\n-\t\t\t     (match_operand:VEC_A 2 \"vlogical_operand\" \"\"))]\n+\t  (unspec:CC [(gt:CC (match_operand:VEC_A 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:VEC_A 2 \"vlogical_operand\"))]\n \t\t     UNSPEC_PREDICATE))\n-     (set (match_operand:VEC_A 0 \"vlogical_operand\" \"\")\n+     (set (match_operand:VEC_A 0 \"vlogical_operand\")\n \t  (gt:VEC_A (match_dup 1)\n \t\t    (match_dup 2)))])]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n@@ -907,10 +907,10 @@\n (define_expand \"vector_ge_<mode>_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n-\t  (unspec:CC [(ge:CC (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n-\t\t\t     (match_operand:VEC_F 2 \"vfloat_operand\" \"\"))]\n+\t  (unspec:CC [(ge:CC (match_operand:VEC_F 1 \"vfloat_operand\")\n+\t\t\t     (match_operand:VEC_F 2 \"vfloat_operand\"))]\n \t\t     UNSPEC_PREDICATE))\n-     (set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n+     (set (match_operand:VEC_F 0 \"vfloat_operand\")\n \t  (ge:VEC_F (match_dup 1)\n \t\t    (match_dup 2)))])]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n@@ -919,10 +919,10 @@\n (define_expand \"vector_gtu_<mode>_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n-\t  (unspec:CC [(gtu:CC (match_operand:VEC_I 1 \"vint_operand\" \"\")\n-\t\t\t      (match_operand:VEC_I 2 \"vint_operand\" \"\"))]\n+\t  (unspec:CC [(gtu:CC (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t\t      (match_operand:VEC_I 2 \"vint_operand\"))]\n \t\t     UNSPEC_PREDICATE))\n-     (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+     (set (match_operand:VEC_I 0 \"vlogical_operand\")\n \t  (gtu:VEC_I (match_dup 1)\n \t\t     (match_dup 2)))])]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n@@ -984,33 +984,33 @@\n \f\n ;; Vector count leading zeros\n (define_expand \"clz<mode>2\"\n-  [(set (match_operand:VEC_I 0 \"register_operand\" \"\")\n-\t(clz:VEC_I (match_operand:VEC_I 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"register_operand\")\n+\t(clz:VEC_I (match_operand:VEC_I 1 \"register_operand\")))]\n   \"TARGET_P8_VECTOR\")\n \n ;; Vector count trailing zeros\n (define_expand \"ctz<mode>2\"\n-  [(set (match_operand:VEC_I 0 \"register_operand\" \"\")\n-\t(ctz:VEC_I (match_operand:VEC_I 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"register_operand\")\n+\t(ctz:VEC_I (match_operand:VEC_I 1 \"register_operand\")))]\n   \"TARGET_P9_VECTOR\")\n \n ;; Vector population count\n (define_expand \"popcount<mode>2\"\n-  [(set (match_operand:VEC_I 0 \"register_operand\" \"\")\n-        (popcount:VEC_I (match_operand:VEC_I 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"register_operand\")\n+        (popcount:VEC_I (match_operand:VEC_I 1 \"register_operand\")))]\n   \"TARGET_P8_VECTOR\")\n \n ;; Vector parity\n (define_expand \"parity<mode>2\"\n-  [(set (match_operand:VEC_IP 0 \"register_operand\" \"\")\n-\t(parity:VEC_IP (match_operand:VEC_IP 1 \"register_operand\" \"\")))]\n+  [(set (match_operand:VEC_IP 0 \"register_operand\")\n+\t(parity:VEC_IP (match_operand:VEC_IP 1 \"register_operand\")))]\n   \"TARGET_P9_VECTOR\")\n \n \f\n ;; Same size conversions\n (define_expand \"float<VEC_int><mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(float:VEC_F (match_operand:<VEC_INT> 1 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(float:VEC_F (match_operand:<VEC_INT> 1 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -1021,8 +1021,8 @@\n })\n \n (define_expand \"floatuns<VEC_int><mode>2\"\n-  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n-\t(unsigned_float:VEC_F (match_operand:<VEC_INT> 1 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\")\n+\t(unsigned_float:VEC_F (match_operand:<VEC_INT> 1 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -1033,8 +1033,8 @@\n })\n \n (define_expand \"fix_trunc<mode><VEC_int>2\"\n-  [(set (match_operand:<VEC_INT> 0 \"vint_operand\" \"\")\n-\t(fix:<VEC_INT> (match_operand:VEC_F 1 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:<VEC_INT> 0 \"vint_operand\")\n+\t(fix:<VEC_INT> (match_operand:VEC_F 1 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -1045,8 +1045,8 @@\n })\n \n (define_expand \"fixuns_trunc<mode><VEC_int>2\"\n-  [(set (match_operand:<VEC_INT> 0 \"vint_operand\" \"\")\n-\t(unsigned_fix:<VEC_INT> (match_operand:VEC_F 1 \"vfloat_operand\" \"\")))]\n+  [(set (match_operand:<VEC_INT> 0 \"vint_operand\")\n+\t(unsigned_fix:<VEC_INT> (match_operand:VEC_F 1 \"vfloat_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n@@ -1059,28 +1059,28 @@\n \f\n ;; Vector initialization, set, extract\n (define_expand \"vec_init<mode><VEC_base_l>\"\n-  [(match_operand:VEC_E 0 \"vlogical_operand\" \"\")\n-   (match_operand:VEC_E 1 \"\" \"\")]\n+  [(match_operand:VEC_E 0 \"vlogical_operand\")\n+   (match_operand:VEC_E 1 \"\")]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   rs6000_expand_vector_init (operands[0], operands[1]);\n   DONE;\n })\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:VEC_E 0 \"vlogical_operand\" \"\")\n-   (match_operand:<VEC_base> 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:VEC_E 0 \"vlogical_operand\")\n+   (match_operand:<VEC_base> 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   rs6000_expand_vector_set (operands[0], operands[1], INTVAL (operands[2]));\n   DONE;\n })\n \n (define_expand \"vec_extract<mode><VEC_base_l>\"\n-  [(match_operand:<VEC_base> 0 \"register_operand\" \"\")\n-   (match_operand:VEC_E 1 \"vlogical_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:<VEC_base> 0 \"register_operand\")\n+   (match_operand:VEC_E 1 \"vlogical_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   rs6000_expand_vector_extract (operands[0], operands[1], operands[2]);\n@@ -1089,9 +1089,9 @@\n \f\n ;; Convert double word types to single word types\n (define_expand \"vec_pack_trunc_v2df\"\n-  [(match_operand:V4SF 0 \"vfloat_operand\" \"\")\n-   (match_operand:V2DF 1 \"vfloat_operand\" \"\")\n-   (match_operand:V2DF 2 \"vfloat_operand\" \"\")]\n+  [(match_operand:V4SF 0 \"vfloat_operand\")\n+   (match_operand:V2DF 1 \"vfloat_operand\")\n+   (match_operand:V2DF 2 \"vfloat_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && TARGET_ALTIVEC\"\n {\n   rtx r1 = gen_reg_rtx (V4SFmode);\n@@ -1104,9 +1104,9 @@\n })\n \n (define_expand \"vec_pack_sfix_trunc_v2df\"\n-  [(match_operand:V4SI 0 \"vint_operand\" \"\")\n-   (match_operand:V2DF 1 \"vfloat_operand\" \"\")\n-   (match_operand:V2DF 2 \"vfloat_operand\" \"\")]\n+  [(match_operand:V4SI 0 \"vint_operand\")\n+   (match_operand:V2DF 1 \"vfloat_operand\")\n+   (match_operand:V2DF 2 \"vfloat_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && TARGET_ALTIVEC\"\n {\n   rtx r1 = gen_reg_rtx (V4SImode);\n@@ -1119,9 +1119,9 @@\n })\n \n (define_expand \"vec_pack_ufix_trunc_v2df\"\n-  [(match_operand:V4SI 0 \"vint_operand\" \"\")\n-   (match_operand:V2DF 1 \"vfloat_operand\" \"\")\n-   (match_operand:V2DF 2 \"vfloat_operand\" \"\")]\n+  [(match_operand:V4SI 0 \"vint_operand\")\n+   (match_operand:V2DF 1 \"vfloat_operand\")\n+   (match_operand:V2DF 2 \"vfloat_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && TARGET_ALTIVEC\"\n {\n   rtx r1 = gen_reg_rtx (V4SImode);\n@@ -1135,8 +1135,8 @@\n \n ;; Convert single word types to double word\n (define_expand \"vec_unpacks_hi_v4sf\"\n-  [(match_operand:V2DF 0 \"vfloat_operand\" \"\")\n-   (match_operand:V4SF 1 \"vfloat_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vfloat_operand\")\n+   (match_operand:V4SF 1 \"vfloat_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\"\n {\n   rtx reg = gen_reg_rtx (V4SFmode);\n@@ -1147,8 +1147,8 @@\n })\n \n (define_expand \"vec_unpacks_lo_v4sf\"\n-  [(match_operand:V2DF 0 \"vfloat_operand\" \"\")\n-   (match_operand:V4SF 1 \"vfloat_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vfloat_operand\")\n+   (match_operand:V4SF 1 \"vfloat_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\"\n {\n   rtx reg = gen_reg_rtx (V4SFmode);\n@@ -1159,8 +1159,8 @@\n })\n \n (define_expand \"vec_unpacks_float_hi_v4si\"\n-  [(match_operand:V2DF 0 \"vfloat_operand\" \"\")\n-   (match_operand:V4SI 1 \"vint_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vfloat_operand\")\n+   (match_operand:V4SI 1 \"vint_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SImode)\"\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n@@ -1171,8 +1171,8 @@\n })\n \n (define_expand \"vec_unpacks_float_lo_v4si\"\n-  [(match_operand:V2DF 0 \"vfloat_operand\" \"\")\n-   (match_operand:V4SI 1 \"vint_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vfloat_operand\")\n+   (match_operand:V4SI 1 \"vint_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SImode)\"\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n@@ -1183,8 +1183,8 @@\n })\n \n (define_expand \"vec_unpacku_float_hi_v4si\"\n-  [(match_operand:V2DF 0 \"vfloat_operand\" \"\")\n-   (match_operand:V4SI 1 \"vint_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vfloat_operand\")\n+   (match_operand:V4SI 1 \"vint_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SImode)\"\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n@@ -1195,8 +1195,8 @@\n })\n \n (define_expand \"vec_unpacku_float_lo_v4si\"\n-  [(match_operand:V2DF 0 \"vfloat_operand\" \"\")\n-   (match_operand:V4SI 1 \"vint_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vfloat_operand\")\n+   (match_operand:V4SI 1 \"vint_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode) && VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SImode)\"\n {\n   rtx reg = gen_reg_rtx (V4SImode);\n@@ -1209,10 +1209,10 @@\n \f\n ;; Align vector loads with a permute.\n (define_expand \"vec_realign_load_<mode>\"\n-  [(match_operand:VEC_K 0 \"vlogical_operand\" \"\")\n-   (match_operand:VEC_K 1 \"vlogical_operand\" \"\")\n-   (match_operand:VEC_K 2 \"vlogical_operand\" \"\")\n-   (match_operand:V16QI 3 \"vlogical_operand\" \"\")]\n+  [(match_operand:VEC_K 0 \"vlogical_operand\")\n+   (match_operand:VEC_K 1 \"vlogical_operand\")\n+   (match_operand:VEC_K 2 \"vlogical_operand\")\n+   (match_operand:V16QI 3 \"vlogical_operand\")]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n   if (BYTES_BIG_ENDIAN)\n@@ -1234,8 +1234,8 @@\n ;; Under VSX, vectors of 4/8 byte alignments do not need to be aligned\n ;; since the load already handles it.\n (define_expand \"movmisalign<mode>\"\n- [(set (match_operand:VEC_N 0 \"nonimmediate_operand\" \"\")\n-       (match_operand:VEC_N 1 \"any_operand\" \"\"))]\n+ [(set (match_operand:VEC_N 0 \"nonimmediate_operand\")\n+       (match_operand:VEC_N 1 \"any_operand\"))]\n  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_ALLOW_MOVMISALIGN\"\n  \"\")\n \n@@ -1247,9 +1247,9 @@\n ;; Note that the vec_shr operation is actually defined as \n ;; 'shift toward element 0' so is a shr for LE and shl for BE.\n (define_expand \"vec_shr_<mode>\"\n-  [(match_operand:VEC_L 0 \"vlogical_operand\" \"\")\n-   (match_operand:VEC_L 1 \"vlogical_operand\" \"\")\n-   (match_operand:QI 2 \"reg_or_short_operand\" \"\")]\n+  [(match_operand:VEC_L 0 \"vlogical_operand\")\n+   (match_operand:VEC_L 1 \"vlogical_operand\")\n+   (match_operand:QI 2 \"reg_or_short_operand\")]\n   \"TARGET_ALTIVEC\"\n {\n   rtx bitshift = operands[2];\n@@ -1296,33 +1296,33 @@\n \n ;; Expanders for rotate each element in a vector\n (define_expand \"vrotl<mode>3\"\n-  [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n-\t(rotate:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n-\t\t      (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"vint_operand\")\n+\t(rotate:VEC_I (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t      (match_operand:VEC_I 2 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ;; Expanders for arithmetic shift left on each vector element\n (define_expand \"vashl<mode>3\"\n-  [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n-\t(ashift:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n-\t\t      (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"vint_operand\")\n+\t(ashift:VEC_I (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t      (match_operand:VEC_I 2 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ;; Expanders for logical shift right on each vector element\n (define_expand \"vlshr<mode>3\"\n-  [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n-\t(lshiftrt:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n-\t\t\t(match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"vint_operand\")\n+\t(lshiftrt:VEC_I (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t\t(match_operand:VEC_I 2 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n ;; Expanders for arithmetic shift right on each vector element\n (define_expand \"vashr<mode>3\"\n-  [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n-\t(ashiftrt:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n-\t\t\t(match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n+  [(set (match_operand:VEC_I 0 \"vint_operand\")\n+\t(ashiftrt:VEC_I (match_operand:VEC_I 1 \"vint_operand\")\n+\t\t\t(match_operand:VEC_I 2 \"vint_operand\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \f\n@@ -1336,8 +1336,8 @@\n \n \n (define_expand \"reduc_<VEC_reduc:VEC_reduc_name>_scal_<VEC_F:mode>\"\n-  [(match_operand:<VEC_base> 0 \"register_operand\" \"\")\n-   (VEC_reduc:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n+  [(match_operand:<VEC_base> 0 \"register_operand\")\n+   (VEC_reduc:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\")\n \t\t    (unspec:VEC_F [(const_int 0)] UNSPEC_REDUC))]\n   \"VECTOR_UNIT_VSX_P (<VEC_F:MODE>mode)\"\n   {"}, {"sha": "a65ff756a1eff6aae755c446549ec07b3924706a", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad18eed284cc7a461f2030a7c0996f69048a9e92/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=ad18eed284cc7a461f2030a7c0996f69048a9e92", "patch": "@@ -652,8 +652,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\")\n+        (match_operand:VSX_D 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n@@ -696,8 +696,8 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_D 0 \"indexed_or_indirect_operand\")\n+        (match_operand:VSX_D 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:<MODE>\n@@ -722,8 +722,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:VSX_W 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:VSX_W 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_W 0 \"indexed_or_indirect_operand\")\n+        (match_operand:VSX_W 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:<MODE>\n@@ -768,8 +768,8 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:VSX_W 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:VSX_W 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_W 0 \"indexed_or_indirect_operand\")\n+        (match_operand:VSX_W 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:<MODE>\n@@ -797,8 +797,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:V8HI 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:V8HI 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:V8HI 0 \"indexed_or_indirect_operand\")\n+        (match_operand:V8HI 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:V8HI\n@@ -847,8 +847,8 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:V8HI 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:V8HI 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:V8HI 0 \"indexed_or_indirect_operand\")\n+        (match_operand:V8HI 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:V8HI\n@@ -882,8 +882,8 @@\n    (set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:V16QI 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:V16QI 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:V16QI 0 \"indexed_or_indirect_operand\")\n+        (match_operand:V16QI 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && !reload_completed\"\n   [(set (match_dup 2)\n         (vec_select:V16QI\n@@ -940,8 +940,8 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:V16QI 0 \"indexed_or_indirect_operand\" \"\")\n-        (match_operand:V16QI 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:V16QI 0 \"indexed_or_indirect_operand\")\n+        (match_operand:V16QI 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR && reload_completed\"\n   [(set (match_dup 1)\n         (vec_select:V16QI\n@@ -1051,8 +1051,8 @@\n    (set_attr \"length\" \"12,8\")])\n \n (define_split\n-  [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"\")\n-        (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_LE_128 0 \"memory_operand\")\n+        (match_operand:VSX_LE_128 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !reload_completed && !TARGET_P9_VECTOR\"\n   [(const_int 0)]\n {\n@@ -1093,10 +1093,10 @@\n ;; VSX registers on a little endian system.  The vector types and IEEE 128-bit\n ;; floating point are handled by the more generic swap elimination pass.\n (define_peephole2\n-  [(set (match_operand:TI 0 \"vsx_register_operand\" \"\")\n-\t(rotate:TI (match_operand:TI 1 \"vsx_register_operand\" \"\")\n+  [(set (match_operand:TI 0 \"vsx_register_operand\")\n+\t(rotate:TI (match_operand:TI 1 \"vsx_register_operand\")\n \t\t   (const_int 64)))\n-   (set (match_operand:TI 2 \"vsx_register_operand\" \"\")\n+   (set (match_operand:TI 2 \"vsx_register_operand\")\n \t(rotate:TI (match_dup 0)\n \t\t   (const_int 64)))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n@@ -1107,8 +1107,8 @@\n ;; The post-reload split requires that we re-permute the source\n ;; register in case it is still live.\n (define_split\n-  [(set (match_operand:VSX_LE_128 0 \"memory_operand\" \"\")\n-        (match_operand:VSX_LE_128 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_LE_128 0 \"memory_operand\")\n+        (match_operand:VSX_LE_128 1 \"vsx_register_operand\"))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && reload_completed && !TARGET_P9_VECTOR\"\n   [(const_int 0)]\n {\n@@ -1256,8 +1256,8 @@\n \n ;; Explicit  load/store expanders for the builtin functions\n (define_expand \"vsx_load_<mode>\"\n-  [(set (match_operand:VSX_M 0 \"vsx_register_operand\" \"\")\n-\t(match_operand:VSX_M 1 \"memory_operand\" \"\"))]\n+  [(set (match_operand:VSX_M 0 \"vsx_register_operand\")\n+\t(match_operand:VSX_M 1 \"memory_operand\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   /* Expand to swaps if needed, prior to swap optimization.  */\n@@ -1269,8 +1269,8 @@\n })\n \n (define_expand \"vsx_store_<mode>\"\n-  [(set (match_operand:VSX_M 0 \"memory_operand\" \"\")\n-\t(match_operand:VSX_M 1 \"vsx_register_operand\" \"\"))]\n+  [(set (match_operand:VSX_M 0 \"memory_operand\")\n+\t(match_operand:VSX_M 1 \"vsx_register_operand\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   /* Expand to swaps if needed, prior to swap optimization.  */\n@@ -1767,10 +1767,10 @@\n ;; *tdiv* instruction returning the FG flag\n (define_expand \"vsx_tdiv<mode>3_fg\"\n   [(set (match_dup 3)\n-\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"\")\n-\t\t      (match_operand:VSX_B 2 \"vsx_register_operand\" \"\")]\n+\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\")\n+\t\t      (match_operand:VSX_B 2 \"vsx_register_operand\")]\n \t\t     UNSPEC_VSX_TDIV))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\")\n \t(gt:SI (match_dup 3)\n \t       (const_int 0)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n@@ -1781,10 +1781,10 @@\n ;; *tdiv* instruction returning the FE flag\n (define_expand \"vsx_tdiv<mode>3_fe\"\n   [(set (match_dup 3)\n-\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"\")\n-\t\t      (match_operand:VSX_B 2 \"vsx_register_operand\" \"\")]\n+\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\")\n+\t\t      (match_operand:VSX_B 2 \"vsx_register_operand\")]\n \t\t     UNSPEC_VSX_TDIV))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\")\n \t(eq:SI (match_dup 3)\n \t       (const_int 0)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n@@ -1875,9 +1875,9 @@\n ;; *tsqrt* returning the fg flag\n (define_expand \"vsx_tsqrt<mode>2_fg\"\n   [(set (match_dup 2)\n-\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"\")]\n+\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\")]\n \t\t     UNSPEC_VSX_TSQRT))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\")\n \t(gt:SI (match_dup 2)\n \t       (const_int 0)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n@@ -1888,9 +1888,9 @@\n ;; *tsqrt* returning the fe flag\n (define_expand \"vsx_tsqrt<mode>2_fe\"\n   [(set (match_dup 2)\n-\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\" \"\")]\n+\t(unspec:CCFP [(match_operand:VSX_B 1 \"vsx_register_operand\")]\n \t\t     UNSPEC_VSX_TSQRT))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\")\n \t(eq:SI (match_dup 2)\n \t       (const_int 0)))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n@@ -2290,9 +2290,9 @@\n ;; Convert and scale (used by vec_ctf, vec_cts, vec_ctu for double/long long)\n \n (define_expand \"vsx_xvcvsxddp_scale\"\n-  [(match_operand:V2DF 0 \"vsx_register_operand\" \"\")\n-   (match_operand:V2DI 1 \"vsx_register_operand\" \"\")\n-   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vsx_register_operand\")\n+   (match_operand:V2DI 1 \"vsx_register_operand\")\n+   (match_operand:QI 2 \"immediate_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n {\n   rtx op0 = operands[0];\n@@ -2313,9 +2313,9 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_expand \"vsx_xvcvuxddp_scale\"\n-  [(match_operand:V2DF 0 \"vsx_register_operand\" \"\")\n-   (match_operand:V2DI 1 \"vsx_register_operand\" \"\")\n-   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:V2DF 0 \"vsx_register_operand\")\n+   (match_operand:V2DI 1 \"vsx_register_operand\")\n+   (match_operand:QI 2 \"immediate_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n {\n   rtx op0 = operands[0];\n@@ -2336,9 +2336,9 @@\n   [(set_attr \"type\" \"vecdouble\")])\n \n (define_expand \"vsx_xvcvdpsxds_scale\"\n-  [(match_operand:V2DI 0 \"vsx_register_operand\" \"\")\n-   (match_operand:V2DF 1 \"vsx_register_operand\" \"\")\n-   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:V2DI 0 \"vsx_register_operand\")\n+   (match_operand:V2DF 1 \"vsx_register_operand\")\n+   (match_operand:QI 2 \"immediate_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n {\n   rtx op0 = operands[0];\n@@ -2379,9 +2379,9 @@\n ;; convert vector of 64-bit floating point numbers to vector of\n ;; 64-bit unsigned integer\n (define_expand \"vsx_xvcvdpuxds_scale\"\n-  [(match_operand:V2DI 0 \"vsx_register_operand\" \"\")\n-   (match_operand:V2DF 1 \"vsx_register_operand\" \"\")\n-   (match_operand:QI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:V2DI 0 \"vsx_register_operand\")\n+   (match_operand:V2DF 1 \"vsx_register_operand\")\n+   (match_operand:QI 2 \"immediate_operand\")]\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n {\n   rtx op0 = operands[0];\n@@ -3148,10 +3148,10 @@\n \n ;; Convert a TImode value into V1TImode\n (define_expand \"vsx_set_v1ti\"\n-  [(match_operand:V1TI 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:V1TI 1 \"nonimmediate_operand\" \"\")\n-   (match_operand:TI 2 \"input_operand\" \"\")\n-   (match_operand:QI 3 \"u5bit_cint_operand\" \"\")]\n+  [(match_operand:V1TI 0 \"nonimmediate_operand\")\n+   (match_operand:V1TI 1 \"nonimmediate_operand\")\n+   (match_operand:TI 2 \"input_operand\")\n+   (match_operand:QI 3 \"u5bit_cint_operand\")]\n   \"VECTOR_MEM_VSX_P (V1TImode)\"\n {\n   if (operands[3] != const0_rtx)\n@@ -4065,9 +4065,9 @@\n \n ;; Expanders for builtins\n (define_expand \"vsx_mergel_<mode>\"\n-  [(use (match_operand:VSX_D 0 \"vsx_register_operand\" \"\"))\n-   (use (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))\n-   (use (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))]\n+  [(use (match_operand:VSX_D 0 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 1 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 2 \"vsx_register_operand\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   rtvec v;\n@@ -4091,9 +4091,9 @@\n })\n \n (define_expand \"vsx_mergeh_<mode>\"\n-  [(use (match_operand:VSX_D 0 \"vsx_register_operand\" \"\"))\n-   (use (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))\n-   (use (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))]\n+  [(use (match_operand:VSX_D 0 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 1 \"vsx_register_operand\"))\n+   (use (match_operand:VSX_D 2 \"vsx_register_operand\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n   rtvec v;\n@@ -4445,21 +4445,21 @@\n \f\n ;; Power8 Vector fusion.  The fused ops must be physically adjacent.\n (define_peephole\n-  [(set (match_operand:P 0 \"base_reg_operand\" \"\")\n-\t(match_operand:P 1 \"short_cint_operand\" \"\"))\n-   (set (match_operand:VSX_M 2 \"vsx_register_operand\" \"\")\n+  [(set (match_operand:P 0 \"base_reg_operand\")\n+\t(match_operand:P 1 \"short_cint_operand\"))\n+   (set (match_operand:VSX_M 2 \"vsx_register_operand\")\n \t(mem:VSX_M (plus:P (match_dup 0)\n-\t\t\t   (match_operand:P 3 \"int_reg_operand\" \"\"))))]\n+\t\t\t   (match_operand:P 3 \"int_reg_operand\"))))]\n   \"TARGET_VSX && TARGET_P8_FUSION && !TARGET_P9_VECTOR\"\n   \"li %0,%1\\;lx<VSX_M:VSm>x %x2,%0,%3\\t\\t\\t# vector load fusion\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vecload\")])\n \n (define_peephole\n-  [(set (match_operand:P 0 \"base_reg_operand\" \"\")\n-\t(match_operand:P 1 \"short_cint_operand\" \"\"))\n-   (set (match_operand:VSX_M 2 \"vsx_register_operand\" \"\")\n-\t(mem:VSX_M (plus:P (match_operand:P 3 \"int_reg_operand\" \"\")\n+  [(set (match_operand:P 0 \"base_reg_operand\")\n+\t(match_operand:P 1 \"short_cint_operand\"))\n+   (set (match_operand:VSX_M 2 \"vsx_register_operand\")\n+\t(mem:VSX_M (plus:P (match_operand:P 3 \"int_reg_operand\")\n \t\t\t   (match_dup 0))))]\n   \"TARGET_VSX && TARGET_P8_FUSION && !TARGET_P9_VECTOR\"\n   \"li %0,%1\\;lx<VSX_M:VSm>x %x2,%0,%3\\t\\t\\t# vector load fusion\""}]}