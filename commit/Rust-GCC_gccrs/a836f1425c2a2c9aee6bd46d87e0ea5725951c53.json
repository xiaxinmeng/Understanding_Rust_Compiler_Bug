{"sha": "a836f1425c2a2c9aee6bd46d87e0ea5725951c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzNmYxNDI1YzJhMmM5YWVlNmJkNDZkODdlMGVhNTcyNTk1MWM1Mw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2018-02-06T18:33:19Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2018-02-06T18:33:19Z"}, "message": "Fix HAVE_GAS_CFI_DIRECTIVE for x86_64-pc-solaris2.*\n\n\t* configure.ac (gcc_fn_eh_frame_ro): New function.\n\t(gcc_cv_as_cfi_directive): Check both 32 and 64-bit assembler for\n\tcorrect .eh_frame permissions.\n\t* configure: Regenerate.\n\nFrom-SVN: r257424", "tree": {"sha": "cc6ce18c7857cd09889884a2d5590e655524556f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6ce18c7857cd09889884a2d5590e655524556f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a836f1425c2a2c9aee6bd46d87e0ea5725951c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a836f1425c2a2c9aee6bd46d87e0ea5725951c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a836f1425c2a2c9aee6bd46d87e0ea5725951c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a836f1425c2a2c9aee6bd46d87e0ea5725951c53/comments", "author": null, "committer": null, "parents": [{"sha": "78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78be97b8d6d734548d4f9408c8abb8b5dfbabdb5"}], "stats": {"total": 156, "additions": 89, "deletions": 67}, "files": [{"sha": "f13481bcea6a677de7ba8b87c9d3df91a1b23242", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a836f1425c2a2c9aee6bd46d87e0ea5725951c53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a836f1425c2a2c9aee6bd46d87e0ea5725951c53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a836f1425c2a2c9aee6bd46d87e0ea5725951c53", "patch": "@@ -1,6 +1,14 @@\n+2018-02-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_fn_eh_frame_ro): New function.\n+\t(gcc_cv_as_cfi_directive): Check both 32 and 64-bit assembler for\n+\tcorrect .eh_frame permissions.\n+\t* configure: Regenerate.\n+\n 2018-02-06  Andrew Jenner  <andrew@codeourcery.com>\n \n-\t* doc/invoke.texi: Add section for the PowerPC SPE backend. Remove irrelevant options.\n+\t* doc/invoke.texi: Add section for the PowerPC SPE backend. Remove\n+\tirrelevant options.\n \n 2018-02-06  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n "}, {"sha": "3360209559b237f5f9811c322a57b48897b379e8", "filename": "gcc/configure", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a836f1425c2a2c9aee6bd46d87e0ea5725951c53/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a836f1425c2a2c9aee6bd46d87e0ea5725951c53/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a836f1425c2a2c9aee6bd46d87e0ea5725951c53", "patch": "@@ -23181,6 +23181,13 @@ $as_echo \"#define HAVE_AS_LEB128 0\" >>confdefs.h\n \n fi\n \n+# Determine if an .eh_frame section is read-only.\n+gcc_fn_eh_frame_ro () {\n+  $gcc_cv_as $1 -o conftest.o conftest.s > /dev/null 2>&1 && \\\n+    $gcc_cv_objdump -h conftest.o 2>/dev/null | \\\n+    sed -e '/.eh_frame/!d' -e N | grep READONLY > /dev/null\n+}\n+\n # Check if we have assembler support for unwind directives.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for cfi directives\" >&5\n $as_echo_n \"checking assembler for cfi directives... \" >&6; }\n@@ -23208,41 +23215,41 @@ else\n     # If the linker used on Solaris (like Sun ld) isn't capable of merging\n     # read-only and read-write sections, we need to make sure that the\n     # assembler used emits read-write .eh_frame sections.\n-    if test \"x$gcc_cv_ld_ro_rw_mix\" != xread-write; then\n-      if test \"x$gcc_cv_objdump\" != x; then\n-\tif $gcc_cv_objdump -h conftest.o 2>/dev/null | \\\n-\t\tsed -e /.eh_frame/!d -e N | grep READONLY > /dev/null; then\n-\t  gcc_cv_as_cfi_directive=no\n-\telse\n-\t  case \"$target\" in\n-\t    i?86-*-solaris2.1[0-9]* | x86_64-*-solaris2.1[0-9]*)\n-\t      # On Solaris/x86, make sure that GCC and assembler agree on using\n-\t      # read-only .eh_frame sections for 64-bit.\n-\t      if test x$gas = xyes; then\n-\t         as_ix86_64_opt=\"--64\"\n-\t      else\n-\t         as_ix86_64_opt=\"-xarch=amd64\"\n-\t      fi\n-\t      if $gcc_cv_as $as_ix86_64_opt -o conftest.o conftest.s > /dev/null 2>&1 && \\\n-\t\t$gcc_cv_objdump -h conftest.o 2>/dev/null | \\\n-\t\t\tsed -e /.eh_frame/!d -e N | \\\n-\t\t\tgrep READONLY > /dev/null; then\n-\t\tgcc_cv_as_cfi_directive=yes\n-\t      else\n-\t\tgcc_cv_as_cfi_directive=no\n-\t      fi\n-\t      ;;\n-\t    *)\n-\t      gcc_cv_as_cfi_directive=yes\n-\t      ;;\n-\t  esac\n-\tfi\n+    if test \"x$gcc_cv_ld_ro_rw_mix\" = xread-write; then\n+      gcc_cv_as_cfi_directive=yes\n+    elif test \"x$gcc_cv_objdump\" = x; then\n+      # No objdump, err on the side of caution.\n+      gcc_cv_as_cfi_directive=no\n+    else\n+      if test x$gas = xyes; then\n+\tas_32_opt=\"--32\"\n+\tas_64_opt=\"--64\"\n       else\n-        # no objdump, err on the side of caution\n-\tgcc_cv_as_cfi_directive=no\n+\tas_32_opt=\"-m32\"\n+\tas_64_opt=\"-m64\"\n       fi\n-    else\n-      gcc_cv_as_cfi_directive=yes\n+      case \"$target\" in\n+\tsparc*-*-solaris2.*)\n+\t  # On Solaris/SPARC, .eh_frame sections should always be read-write.\n+\t  if gcc_fn_eh_frame_ro $as_32_opt \\\n+\t     || gcc_fn_eh_frame_ro $as_64_opt; then\n+\t    gcc_cv_as_cfi_directive=no\n+\t  else\n+\t    gcc_cv_as_cfi_directive=yes\n+\t  fi\n+\t  ;;\n+\ti?86-*-solaris2.* | x86_64-*-solaris2.*)\n+\t  # On Solaris/x86, make sure that GCC and assembler agree on using\n+\t  # read-only .eh_frame sections for 64-bit.\n+\t  if gcc_fn_eh_frame_ro $as_32_opt; then\n+\t    gcc_cv_as_cfi_directive=no\n+\t  elif gcc_fn_eh_frame_ro $as_64_opt; then\n+\t    gcc_cv_as_cfi_directive=yes\n+\t  else\n+\t    gcc_cv_as_cfi_directive=no\n+\t  fi\n+\t  ;;\n+      esac\n     fi\n     ;;\n   *-*-*)"}, {"sha": "1019b3152621f54cfc6432c728176604f442956d", "filename": "gcc/configure.ac", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a836f1425c2a2c9aee6bd46d87e0ea5725951c53/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a836f1425c2a2c9aee6bd46d87e0ea5725951c53/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a836f1425c2a2c9aee6bd46d87e0ea5725951c53", "patch": "@@ -2754,6 +2754,13 @@ L2:],\n   [AC_DEFINE(HAVE_AS_LEB128, 0,\n     [Define if your assembler supports .sleb128 and .uleb128.])])\n \n+# Determine if an .eh_frame section is read-only.\n+gcc_fn_eh_frame_ro () {\n+  $gcc_cv_as $1 -o conftest.o conftest.s > /dev/null 2>&1 && \\\n+    $gcc_cv_objdump -h conftest.o 2>/dev/null | \\\n+    sed -e '/.eh_frame/!d' -e N | grep READONLY > /dev/null\n+}\n+\n # Check if we have assembler support for unwind directives.\n gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n   ,,\n@@ -2769,41 +2776,41 @@ gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n     # If the linker used on Solaris (like Sun ld) isn't capable of merging\n     # read-only and read-write sections, we need to make sure that the\n     # assembler used emits read-write .eh_frame sections.\n-    if test \"x$gcc_cv_ld_ro_rw_mix\" != xread-write; then\n-      if test \"x$gcc_cv_objdump\" != x; then\n-\tif $gcc_cv_objdump -h conftest.o 2>/dev/null | \\\n-\t\tsed -e /.eh_frame/!d -e N | grep READONLY > /dev/null; then\n-\t  gcc_cv_as_cfi_directive=no\n-\telse\n-\t  case \"$target\" in\n-\t    i?86-*-solaris2.1[[0-9]]* | x86_64-*-solaris2.1[[0-9]]*)\n-\t      # On Solaris/x86, make sure that GCC and assembler agree on using\n-\t      # read-only .eh_frame sections for 64-bit.\n-\t      if test x$gas = xyes; then\n-\t         as_ix86_64_opt=\"--64\"\n-\t      else\n-\t         as_ix86_64_opt=\"-xarch=amd64\"\n-\t      fi\n-\t      if $gcc_cv_as $as_ix86_64_opt -o conftest.o conftest.s > /dev/null 2>&1 && \\\n-\t\t$gcc_cv_objdump -h conftest.o 2>/dev/null | \\\n-\t\t\tsed -e /.eh_frame/!d -e N | \\\n-\t\t\tgrep READONLY > /dev/null; then\n-\t\tgcc_cv_as_cfi_directive=yes\n-\t      else\n-\t\tgcc_cv_as_cfi_directive=no\n-\t      fi\n-\t      ;;\n-\t    *)\n-\t      gcc_cv_as_cfi_directive=yes\n-\t      ;;\n-\t  esac \n-\tfi\n+    if test \"x$gcc_cv_ld_ro_rw_mix\" = xread-write; then\n+      gcc_cv_as_cfi_directive=yes\n+    elif test \"x$gcc_cv_objdump\" = x; then\n+      # No objdump, err on the side of caution.\n+      gcc_cv_as_cfi_directive=no\n+    else\n+      if test x$gas = xyes; then\n+\tas_32_opt=\"--32\"\n+\tas_64_opt=\"--64\"\n       else\n-        # no objdump, err on the side of caution\n-\tgcc_cv_as_cfi_directive=no\n+\tas_32_opt=\"-m32\"\n+\tas_64_opt=\"-m64\"\n       fi\n-    else\n-      gcc_cv_as_cfi_directive=yes\n+      case \"$target\" in\n+\tsparc*-*-solaris2.*)\n+\t  # On Solaris/SPARC, .eh_frame sections should always be read-write.\n+\t  if gcc_fn_eh_frame_ro $as_32_opt \\\n+\t     || gcc_fn_eh_frame_ro $as_64_opt; then\n+\t    gcc_cv_as_cfi_directive=no\n+\t  else\n+\t    gcc_cv_as_cfi_directive=yes\n+\t  fi\n+\t  ;;\n+\ti?86-*-solaris2.* | x86_64-*-solaris2.*)\n+\t  # On Solaris/x86, make sure that GCC and assembler agree on using\n+\t  # read-only .eh_frame sections for 64-bit.\n+\t  if gcc_fn_eh_frame_ro $as_32_opt; then\n+\t    gcc_cv_as_cfi_directive=no\n+\t  elif gcc_fn_eh_frame_ro $as_64_opt; then\n+\t    gcc_cv_as_cfi_directive=yes\n+\t  else\n+\t    gcc_cv_as_cfi_directive=no\n+\t  fi\n+\t  ;;\n+      esac\n     fi\n     ;;\n   *-*-*)"}]}