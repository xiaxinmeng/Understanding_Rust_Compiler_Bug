{"sha": "4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "node_id": "C_kwDOANBUbNoAKDRkMWNhMzU1ODJlNjllODY3N2JkOTY3NzVlZGJmMDNiNmVlYzZhYjg", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-02T15:05:19Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-02T16:47:19Z"}, "message": "Apply the is_marked_for_strip check to the rest of the crate\n\nWe need to apply this to all levels of the crate:\n\nItem\n  impl-item\n  trait-item\n  Stmt", "tree": {"sha": "4baa7da3f520efec9d02c4d0c44a8b07268a6f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4baa7da3f520efec9d02c4d0c44a8b07268a6f5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f14de056eb3887e70f29b0f29da4025f746559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f14de056eb3887e70f29b0f29da4025f746559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f14de056eb3887e70f29b0f29da4025f746559"}], "stats": {"total": 192, "additions": 172, "deletions": 20}, "files": [{"sha": "d4b591090c038b7d9e7285dbf568739ac9e6becf", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "patch": "@@ -147,6 +147,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<HIR::TupleField> fields;\n     for (AST::TupleField &field : struct_decl.get_fields ())\n       {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::Visibility vis = HIR::Visibility::create_public ();\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n@@ -208,6 +211,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<HIR::StructField> fields;\n     for (AST::StructField &field : struct_decl.get_fields ())\n       {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::Visibility vis = HIR::Visibility::create_public ();\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (field.get_field_type ().get ());\n@@ -272,6 +278,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::EnumItem>> items;\n     for (auto &variant : enum_decl.get_variants ())\n       {\n+\tif (variant->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::EnumItem *hir_item\n \t  = ASTLoweringEnumItem::translate (variant.get ());\n \titems.push_back (std::unique_ptr<HIR::EnumItem> (hir_item));\n@@ -318,6 +327,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<HIR::StructField> variants;\n     for (AST::StructField &variant : union_decl.get_variants ())\n       {\n+\tif (variant.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::Visibility vis = HIR::Visibility::create_public ();\n \tHIR::Type *type\n \t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n@@ -558,6 +570,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<HirId> impl_item_ids;\n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n+\tif (impl_item->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::ImplItem *lowered\n \t  = ASTLowerImplItem::translate (impl_item.get (),\n \t\t\t\t\t mapping.get_hirid ());\n@@ -623,6 +638,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<HirId> trait_item_ids;\n     for (auto &item : trait.get_trait_items ())\n       {\n+\tif (item->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::TraitItem *lowered = ASTLowerTraitItem::translate (item.get ());\n \ttrait_items.push_back (std::unique_ptr<HIR::TraitItem> (lowered));\n \ttrait_item_ids.push_back (lowered->get_mappings ().get_hirid ());\n@@ -716,6 +734,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<HirId> impl_item_ids;\n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n+\tif (impl_item->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::ImplItem *lowered\n \t  = ASTLowerImplItem::translate (impl_item.get (),\n \t\t\t\t\t mapping.get_hirid ());\n@@ -754,6 +775,9 @@ class ASTLoweringItem : public ASTLoweringBase\n     std::vector<std::unique_ptr<HIR::ExternalItem>> extern_items;\n     for (auto &item : extern_block.get_extern_items ())\n       {\n+\tif (item->is_marked_for_strip ())\n+\t  continue;\n+\n \tHIR::ExternalItem *lowered\n \t  = ASTLoweringExternItem::translate (item.get ());\n \textern_items.push_back (std::unique_ptr<HIR::ExternalItem> (lowered));"}, {"sha": "f17b2226a40e11075426b037d0dd3ae97afeb556", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "patch": "@@ -33,12 +33,18 @@ class ResolveToplevelImplItem : public ResolverBase\n public:\n   static void go (AST::InherentImplItem *item, const CanonicalPath &prefix)\n   {\n+    if (item->is_marked_for_strip ())\n+      return;\n+\n     ResolveToplevelImplItem resolver (prefix);\n     item->accept_vis (resolver);\n   }\n \n   static void go (AST::TraitImplItem *item, const CanonicalPath &prefix)\n   {\n+    if (item->is_marked_for_strip ())\n+      return;\n+\n     ResolveToplevelImplItem resolver (prefix);\n     item->accept_vis (resolver);\n   }"}, {"sha": "5d32c0022d01327d84856aae0229691178b3fcf4", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "patch": "@@ -38,6 +38,9 @@ class ResolveTraitItems : public ResolverBase\n   static void go (AST::TraitItem *item, const CanonicalPath &prefix,\n \t\t  const CanonicalPath &canonical_prefix)\n   {\n+    if (item->is_marked_for_strip ())\n+      return;\n+\n     ResolveTraitItems resolver (prefix, canonical_prefix);\n     item->accept_vis (resolver);\n   };\n@@ -303,8 +306,13 @@ class ResolveItem : public ResolverBase\n       ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n \n     for (AST::TupleField &field : struct_decl.get_fields ())\n-      ResolveType::go (field.get_field_type ().get (),\n-\t\t       struct_decl.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (),\n+\t\t\t struct_decl.get_node_id ());\n+      }\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -360,7 +368,12 @@ class ResolveItem : public ResolverBase\n \t\t\t\t     item.get_node_id (), cpath);\n \n     for (auto &field : item.get_tuple_fields ())\n-      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      }\n   }\n \n   void visit (AST::EnumItemStruct &item) override\n@@ -373,7 +386,12 @@ class ResolveItem : public ResolverBase\n \t\t\t\t     item.get_node_id (), cpath);\n \n     for (auto &field : item.get_struct_fields ())\n-      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      }\n   }\n \n   void visit (AST::EnumItemDiscriminant &item) override\n@@ -412,8 +430,13 @@ class ResolveItem : public ResolverBase\n       ResolveWhereClause::Resolve (struct_decl.get_where_clause ());\n \n     for (AST::StructField &field : struct_decl.get_fields ())\n-      ResolveType::go (field.get_field_type ().get (),\n-\t\t       struct_decl.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (),\n+\t\t\t struct_decl.get_node_id ());\n+      }\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -442,8 +465,13 @@ class ResolveItem : public ResolverBase\n       ResolveWhereClause::Resolve (union_decl.get_where_clause ());\n \n     for (AST::StructField &field : union_decl.get_variants ())\n-      ResolveType::go (field.get_field_type ().get (),\n-\t\t       union_decl.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (),\n+\t\t\t union_decl.get_node_id ());\n+      }\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -486,9 +514,6 @@ class ResolveItem : public ResolverBase\n \n   void visit (AST::Function &function) override\n   {\n-    if (function.is_marked_for_strip ())\n-      return;\n-\n     auto decl = ResolveFunctionItemToCanonicalPath::resolve (function);\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);\n@@ -884,13 +909,19 @@ class ResolveImplItems : public ResolveItem\n   static void go (AST::InherentImplItem *item, const CanonicalPath &prefix,\n \t\t  const CanonicalPath &canonical_prefix)\n   {\n+    if (item->is_marked_for_strip ())\n+      return;\n+\n     ResolveImplItems resolver (prefix, canonical_prefix);\n     item->accept_vis (resolver);\n   };\n \n   static void go (AST::TraitImplItem *item, const CanonicalPath &prefix,\n \t\t  const CanonicalPath &canonical_prefix)\n   {\n+    if (item->is_marked_for_strip ())\n+      return;\n+\n     ResolveImplItems resolver (prefix, canonical_prefix);\n     item->accept_vis (resolver);\n   };"}, {"sha": "3afed532afa15a1120db25e0bda942234eb17e6d", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "patch": "@@ -37,6 +37,9 @@ class ResolveStmt : public ResolverBase\n \t\t  const CanonicalPath &canonical_prefix,\n \t\t  const CanonicalPath &enum_prefix)\n   {\n+    if (stmt->is_marked_for_strip ())\n+      return;\n+\n     ResolveStmt resolver (parent, prefix, canonical_prefix, enum_prefix);\n     stmt->accept_vis (resolver);\n   };\n@@ -208,7 +211,12 @@ class ResolveStmt : public ResolverBase\n       });\n \n     for (auto &field : item.get_tuple_fields ())\n-      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      }\n   }\n \n   void visit (AST::EnumItemStruct &item) override\n@@ -229,7 +237,12 @@ class ResolveStmt : public ResolverBase\n       });\n \n     for (auto &field : item.get_struct_fields ())\n-      ResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (), item.get_node_id ());\n+      }\n   }\n \n   void visit (AST::EnumItemDiscriminant &item) override\n@@ -282,8 +295,13 @@ class ResolveStmt : public ResolverBase\n       }\n \n     for (AST::StructField &field : struct_decl.get_fields ())\n-      ResolveType::go (field.get_field_type ().get (),\n-\t\t       struct_decl.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (),\n+\t\t\t struct_decl.get_node_id ());\n+      }\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -317,8 +335,13 @@ class ResolveStmt : public ResolverBase\n       }\n \n     for (AST::StructField &field : union_decl.get_variants ())\n-      ResolveType::go (field.get_field_type ().get (),\n-\t\t       union_decl.get_node_id ());\n+      {\n+\tif (field.get_field_type ()->is_marked_for_strip ())\n+\t  continue;\n+\n+\tResolveType::go (field.get_field_type ().get (),\n+\t\t\t union_decl.get_node_id ());\n+      }\n \n     resolver->get_type_scope ().pop ();\n   }"}, {"sha": "7aba67fe7e7337c8e7eb7300e04005e068ec8b4c", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "patch": "@@ -36,6 +36,9 @@ class ResolveTopLevel : public ResolverBase\n   static void go (AST::Item *item, const CanonicalPath &prefix,\n \t\t  const CanonicalPath &canonical_prefix)\n   {\n+    if (item->is_marked_for_strip ())\n+      return;\n+\n     ResolveTopLevel resolver (prefix, canonical_prefix);\n     item->accept_vis (resolver);\n   };\n@@ -286,9 +289,6 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::Function &function) override\n   {\n-    if (function.is_marked_for_strip ())\n-      return;\n-\n     auto decl = ResolveFunctionItemToCanonicalPath::resolve (function);\n     auto path = prefix.append (decl);\n     auto cpath = canonical_prefix.append (decl);"}, {"sha": "5048bcb2791d76c6e166c1eeffde663efa754b58", "filename": "gcc/testsuite/rust/execute/torture/cfg2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg2.rs?ref=4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"test1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn test() {\n+    #[cfg(A)]\n+    unsafe {\n+        let a = \"test1\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+\n+    #[cfg(B)]\n+    unsafe {\n+        let a = \"test2\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+fn main() -> i32 {\n+    test();\n+\n+    0\n+}"}, {"sha": "89312344b2338308c3c3cf69cddc0e6e1c40fd8a", "filename": "gcc/testsuite/rust/execute/torture/cfg3.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1ca35582e69e8677bd96775edbf03b6eec6ab8/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcfg3.rs?ref=4d1ca35582e69e8677bd96775edbf03b6eec6ab8", "patch": "@@ -0,0 +1,37 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"test1\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+struct Foo(i32);\n+impl Foo {\n+    #[cfg(A)]\n+    fn test(&self) {\n+        unsafe {\n+            let a = \"test1\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+\n+    #[cfg(B)]\n+    fn test(&self) {\n+        unsafe {\n+            let a = \"test2\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo(123);\n+    a.test();\n+\n+    0\n+}"}]}