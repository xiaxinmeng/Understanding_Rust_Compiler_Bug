{"sha": "b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliNWY0MzM2N2NlZDU1MmJkZDkyODA4ZmEzYTM4Y2I1NWNiMmZkMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-26T02:28:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-26T02:28:37Z"}, "message": "toplev.c (backend_init_target): Move init_emit_regs and init_regs to...\n\n\n\t* toplev.c (backend_init_target): Move init_emit_regs and init_regs to...\n\t(backend_init) ... here; skip ira_init_once and backend_init_target.\n\t(target_reinit) ... and here; clear this_target_rtl->lang_dependent_initialized.\n\t(lang_dependent_init_target): Clear this_target_rtl->lang_dependent_initialized;\n\tbreak out rtl initialization to ...\n\t(initialize_rtl): ... here; call also backend_init_target and ira_init_once.\n\t* toplev.h (initialize_rtl): New function.\n\t* function.c: Include toplev.h\n\t(init_function_start): Call initialize_rtl.\n\t* rtl.h (target_rtl): Add target_specific_initialized,\n\tlang_dependent_initialized.\n\nFrom-SVN: r212007", "tree": {"sha": "3eaf13ad99f89c77885a9dbdccb807978ff0d594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eaf13ad99f89c77885a9dbdccb807978ff0d594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/comments", "author": null, "committer": null, "parents": [{"sha": "3b89b26ef67f19fc775a2f923dfb4f6200d981f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b89b26ef67f19fc775a2f923dfb4f6200d981f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b89b26ef67f19fc775a2f923dfb4f6200d981f5"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "ba0f83231d5711a4f9ab14ef379fc5ba75d96d39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "patch": "@@ -1,3 +1,17 @@\n+2014-06-25  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* toplev.c (backend_init_target): Move init_emit_regs and init_regs to...\n+\t(backend_init) ... here; skip ira_init_once and backend_init_target.\n+\t(target_reinit) ... and here; clear this_target_rtl->lang_dependent_initialized.\n+\t(lang_dependent_init_target): Clear this_target_rtl->lang_dependent_initialized;\n+\tbreak out rtl initialization to ...\n+\t(initialize_rtl): ... here; call also backend_init_target and ira_init_once.\n+\t* toplev.h (initialize_rtl): New function.\n+\t* function.c: Include toplev.h\n+\t(init_function_start): Call initialize_rtl.\n+\t* rtl.h (target_rtl): Add target_specific_initialized,\n+\tlang_dependent_initialized.\n+\n 2014-06-25  Paul Gortmaker  <paul.gortmaker@windriver.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "001c579f64402f6a5b36042b2947eedf8d67d6c6", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"bb-reorder.h\"\n #include \"shrink-wrap.h\"\n+#include \"toplev.h\"\n \n /* So we can assign to cfun in this file.  */\n #undef cfun\n@@ -4630,6 +4631,10 @@ init_function_start (tree subr)\n     set_cfun (DECL_STRUCT_FUNCTION (subr));\n   else\n     allocate_struct_function (subr, false);\n+\n+  /* Initialize backend, if needed.  */\n+  initialize_rtl ();\n+\n   prepare_function_start ();\n   decide_function_section (subr);\n "}, {"sha": "8eb215cbaa1ebe19edf4b33c580a5ae62ad67d14", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "patch": "@@ -2514,6 +2514,10 @@ struct GTY(()) target_rtl {\n \n   /* The default memory attributes for each mode.  */\n   struct mem_attrs *x_mode_mem_attrs[(int) MAX_MACHINE_MODE];\n+\n+  /* Track if RTL has been initialized.  */\n+  bool target_specific_initialized;\n+  bool lang_dependent_initialized;\n };\n \n extern GTY(()) struct target_rtl default_target_rtl;"}, {"sha": "e35b826e89d65ca7ac679501c43d868bb12f5946", "filename": "gcc/toplev.c", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "patch": "@@ -1583,14 +1583,6 @@ backend_init_target (void)\n   /* Initialize alignment variables.  */\n   init_alignments ();\n \n-  /* This reinitializes hard_frame_pointer, and calls init_reg_modes_target()\n-     to initialize reg_raw_mode[].  */\n-  init_emit_regs ();\n-\n-  /* This invokes target hooks to set fixed_reg[] etc, which is\n-     mode-dependent.  */\n-  init_regs ();\n-\n   /* This depends on stack_pointer_rtx.  */\n   init_fake_stack_mems ();\n \n@@ -1632,9 +1624,13 @@ backend_init (void)\n   init_varasm_once ();\n   save_register_info ();\n \n-  /* Initialize the target-specific back end pieces.  */\n-  ira_init_once ();\n-  backend_init_target ();\n+  /* Middle end needs this initialization for default mem attributes\n+     used by early calls to make_decl_rtl.  */\n+  init_emit_regs ();\n+\n+  /* Middle end needs this initialization for mode tables used to assign\n+     modes to vector variables.  */\n+  init_regs ();\n }\n \n /* Initialize excess precision settings.  */\n@@ -1686,6 +1682,31 @@ lang_dependent_init_target (void)\n      front end is initialized.  It also depends on the HAVE_xxx macros\n      generated from the target machine description.  */\n   init_optabs ();\n+  this_target_rtl->lang_dependent_initialized = false;\n+}\n+\n+/* Perform initializations that are lang-dependent or target-dependent.\n+   but matters only for late optimizations and RTL generation.  */\n+\n+void\n+initialize_rtl (void)\n+{\n+  static int initialized_once;\n+\n+  /* Initialization done just once per compilation, but delayed\n+     till code generation.  */\n+  if (!initialized_once)\n+    ira_init_once ();\n+  initialized_once = true;\n+\n+  /* Target specific RTL backend initialization.  */\n+  if (!this_target_rtl->target_specific_initialized)\n+    backend_init_target ();\n+  this_target_rtl->target_specific_initialized = true;\n+\n+  if (this_target_rtl->lang_dependent_initialized)\n+    return;\n+  this_target_rtl->lang_dependent_initialized = true;\n \n   /* The following initialization functions need to generate rtl, so\n      provide a dummy function context for them.  */\n@@ -1784,8 +1805,15 @@ target_reinit (void)\n       regno_reg_rtx = NULL;\n     }\n \n-  /* Reinitialize RTL backend.  */\n-  backend_init_target ();\n+  this_target_rtl->target_specific_initialized = false;\n+\n+  /* This initializes hard_frame_pointer, and calls init_reg_modes_target()\n+     to initialize reg_raw_mode[].  */\n+  init_emit_regs ();\n+\n+  /* This invokes target hooks to set fixed_reg[] etc, which is\n+     mode-dependent.  */\n+  init_regs ();\n \n   /* Reinitialize lang-dependent parts.  */\n   lang_dependent_init_target ();"}, {"sha": "1b5457823b80599c5ea2674961e132c51fbffa70", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b5f43367ced552bdd92808fa3a38cb55cb2fd3/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=b9b5f43367ced552bdd92808fa3a38cb55cb2fd3", "patch": "@@ -77,4 +77,6 @@ extern bool set_src_pwd\t\t       (const char *);\n extern HOST_WIDE_INT get_random_seed (bool);\n extern const char *set_random_seed (const char *);\n \n+extern void initialize_rtl (void);\n+\n #endif /* ! GCC_TOPLEV_H */"}]}