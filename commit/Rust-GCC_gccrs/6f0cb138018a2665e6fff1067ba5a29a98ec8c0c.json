{"sha": "6f0cb138018a2665e6fff1067ba5a29a98ec8c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYwY2IxMzgwMThhMjY2NWU2ZmZmMTA2N2JhNWEyOWE5OGVjOGMwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-15T20:30:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-15T20:30:50Z"}, "message": "PR libstdc++/28277 (partial: ostream bits 1)\n\n2006-07-15  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28277 (partial: ostream bits 1)\n\t* include/bits/ostream.tcc (operator<<(basic_ostream<_CharT>&,\n\tconst char*)): Avoid __builtin_alloca with no limit in the\n\twidening.\n\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n\t28277-1.cc: New.\n\nFrom-SVN: r115485", "tree": {"sha": "65ba10596ac222fd1caa9cee446e3f94d5b4755e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65ba10596ac222fd1caa9cee446e3f94d5b4755e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c/comments", "author": null, "committer": null, "parents": [{"sha": "b0d5d5de789ef8cb4df99c08c3bf864152e65e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d5d5de789ef8cb4df99c08c3bf864152e65e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d5d5de789ef8cb4df99c08c3bf864152e65e75"}], "stats": {"total": 100, "additions": 80, "deletions": 20}, "files": [{"sha": "dd32bf981b117b61b0e0ef1e505b91254e9f577d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f0cb138018a2665e6fff1067ba5a29a98ec8c0c", "patch": "@@ -1,17 +1,26 @@\n+2006-07-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28277 (partial: ostream bits 1)\n+\t* include/bits/ostream.tcc (operator<<(basic_ostream<_CharT>&,\n+\tconst char*)): Avoid __builtin_alloca with no limit in the\n+\twidening.\n+\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n+\t28277-1.cc: New.\n+\n 2006-07-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        * acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): New.\n-        * configure.ac: Use it.\n-        * configure: Regenerated.\t\n-        * config.h.in: Regenerated.\t\t\n-        * configure.host: Simplify.\n-        * include/bits/atomicity.h: Adjust macros.\t\n-        * config/cpu/generic/atomicity.h: Move...\n-        * config/cpu/generic/atomicity_mutex: New.\n-        * config/cpu/generic/atomicity_mutex/atomicity.h: ...here.\n-        * config/cpu/generic/atomic_builtins: Rename...\n-        * config/cpu/generic/atomicity_builtins: ...to this.\n-        * config/cpu/generic/atomicity_builtins/atomicity.h: Moved.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): New.\n+\t* configure.ac: Use it.\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\t* configure.host: Simplify.\n+\t* include/bits/atomicity.h: Adjust macros.\n+\t* config/cpu/generic/atomicity.h: Move...\n+\t* config/cpu/generic/atomicity_mutex: New.\n+\t* config/cpu/generic/atomicity_mutex/atomicity.h: ...here.\n+\t* config/cpu/generic/atomic_builtins: Rename...\n+\t* config/cpu/generic/atomicity_builtins: ...to this.\n+\t* config/cpu/generic/atomicity_builtins/atomicity.h: Moved.\n \t* config/cpu/mips/atomicity.h: Comment MIPS II requirement.\n \n \t* scripts/testsuite_flags.in: Make --cxxflags reflect CXXFLAGS."}, {"sha": "d53cd07579d00eba7c875d250655ab7f83c2d72a", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=6f0cb138018a2665e6fff1067ba5a29a98ec8c0c", "patch": "@@ -421,15 +421,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename __ostream_type::sentry __cerb(__out);\n       if (__cerb && __s)\n \t{\n-\t  size_t __clen = __traits_type::length(__s);\n-\t  _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t       * __clen));\n-\t  for (size_t  __i = 0; __i < __clen; ++__i)\n-\t    __ws[__i] = __out.widen(__s[__i]);\n-\t  _CharT* __str = __ws;\n-\n+\t  _CharT* __ws = 0;\n \t  try\n \t    {\n+\t      const size_t __clen = __traits_type::length(__s);\n+\t      __ws = new _CharT[__clen];\n+\t      for (size_t  __i = 0; __i < __clen; ++__i)\n+\t\t__ws[__i] = __out.widen(__s[__i]);\n+\t      _CharT* __str = __ws;\n+\t      \n \t      const streamsize __w = __out.width();\n \t      streamsize __len = static_cast<streamsize>(__clen);\n \t      if (__w > __len)\n@@ -444,9 +444,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t}\n \t      __out._M_write(__str, __len);\n \t      __out.width(0);\n+\n+\t      delete [] __ws;\n \t    }\n \t  catch(...)\n-\t    { __out._M_setstate(ios_base::badbit); }\n+\t    {\n+\t      delete [] __ws;\n+\t      __out._M_setstate(ios_base::badbit);\n+\t    }\n \t}\n       else if (!__s)\n \t__out.setstate(ios_base::badbit);"}, {"sha": "874f15056fb3b8b7ffc4ecd773981087219991b9", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f0cb138018a2665e6fff1067ba5a29a98ec8c0c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-1.cc?ref=6f0cb138018a2665e6fff1067ba5a29a98ec8c0c", "patch": "@@ -0,0 +1,46 @@\n+// 2006-07-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream oss_01;\n+  const string str_01(5000000, 'a');\n+\n+  oss_01 << str_01.c_str();\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == str_01.size() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}