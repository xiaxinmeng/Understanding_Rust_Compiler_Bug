{"sha": "54ae96de89f391cd76bbd0bfab208b54e71804ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRhZTk2ZGU4OWYzOTFjZDc2YmJkMGJmYWIyMDhiNTRlNzE4MDRlYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-30T17:39:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-30T17:39:59Z"}, "message": "* call.c (joust): Fix handling of overloaded builtin operators.\n\nFrom-SVN: r34269", "tree": {"sha": "21f6a519f101726787f41ec3d6ab7c7bc260d528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21f6a519f101726787f41ec3d6ab7c7bc260d528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ae96de89f391cd76bbd0bfab208b54e71804ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ae96de89f391cd76bbd0bfab208b54e71804ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ae96de89f391cd76bbd0bfab208b54e71804ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ae96de89f391cd76bbd0bfab208b54e71804ec/comments", "author": null, "committer": null, "parents": [{"sha": "28ecb7ab4784f0bf62175eb94dfde71a2ad4b378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ecb7ab4784f0bf62175eb94dfde71a2ad4b378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28ecb7ab4784f0bf62175eb94dfde71a2ad4b378"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "e6cdcd2c9ba8d44c410733fe944709f083af9181", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ae96de89f391cd76bbd0bfab208b54e71804ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ae96de89f391cd76bbd0bfab208b54e71804ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=54ae96de89f391cd76bbd0bfab208b54e71804ec", "patch": "@@ -1,3 +1,7 @@\n+2000-05-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* call.c (joust): Fix handling of overloaded builtin operators.\n+\n 2000-05-30  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cp-tree.h (DECL_ANTICIPATED): New macro."}, {"sha": "acb5cfeced32638b4af871369fd4ea2790796fce", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ae96de89f391cd76bbd0bfab208b54e71804ec/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ae96de89f391cd76bbd0bfab208b54e71804ec/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=54ae96de89f391cd76bbd0bfab208b54e71804ec", "patch": "@@ -5128,7 +5128,7 @@ joust (cand1, cand2, warn)\n       /* Kludge around broken overloading rules whereby\n \t Integer a, b; test ? a : b; is ambiguous, since there's a builtin\n \t that takes references and another that takes values.  */\n-      if (DECL_OVERLOADED_OPERATOR_P (cand1->fn) == COND_EXPR)\n+      if (cand1->fn == ansi_opname (COND_EXPR))\n \t{\n \t  tree c1 = TREE_VEC_ELT (cand1->convs, 1);\n \t  tree c2 = TREE_VEC_ELT (cand2->convs, 1);"}, {"sha": "d6728c79e1783e2e9888589c7255533865151a98", "filename": "gcc/testsuite/g++.old-deja/g++.other/overload13.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ae96de89f391cd76bbd0bfab208b54e71804ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ae96de89f391cd76bbd0bfab208b54e71804ec/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload13.C?ref=54ae96de89f391cd76bbd0bfab208b54e71804ec", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link:\n+// Origin: Nathan Sidwell <nathan@codesourcery.com>\n+\n+struct A {\n+  bool operator== (A const &);\n+  operator bool () const;\n+  operator int * () const;\n+};\n+\n+bool foo (A &a1, A &a2)\n+{\n+  return a1 == a2;\n+}"}]}