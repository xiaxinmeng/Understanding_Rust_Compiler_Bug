{"sha": "0d58773799a6360c8608151de2812a66dc1e48ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1ODc3Mzc5OWE2MzYwYzg2MDgxNTFkZTI4MTJhNjZkYzFlNDhhZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-08-23T01:27:25Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-08-23T01:27:25Z"}, "message": "sparc.c (uns_small_int): Don't reference a constant >32-bit.\n\n\t* sparc.c (uns_small_int): Don't reference a constant >32-bit.\n\t(addrs_ok_for_ldd_peep): Fix signed/unsigned warning.\n\t(sparc_flat_function_prologue, sparc_flat_function_epilogue): Fix\n\tformat specifier warnings.\n\t(sparc_sched_reorder): Mark parameter with ATTRIBUTE_UNUSED.\n\nFrom-SVN: r45117", "tree": {"sha": "f610b362f18b569e0761c1ece3fdabf1ccaf6efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f610b362f18b569e0761c1ece3fdabf1ccaf6efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d58773799a6360c8608151de2812a66dc1e48ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d58773799a6360c8608151de2812a66dc1e48ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d58773799a6360c8608151de2812a66dc1e48ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d58773799a6360c8608151de2812a66dc1e48ae/comments", "author": null, "committer": null, "parents": [{"sha": "429e2a45c042aa9cbab99634fb0e835be227ff48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429e2a45c042aa9cbab99634fb0e835be227ff48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429e2a45c042aa9cbab99634fb0e835be227ff48"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "827c958baeff729b9099a55f8e875a4d6cd19b32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d58773799a6360c8608151de2812a66dc1e48ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d58773799a6360c8608151de2812a66dc1e48ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d58773799a6360c8608151de2812a66dc1e48ae", "patch": "@@ -1,3 +1,11 @@\n+2001-08-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* sparc.c (uns_small_int): Don't reference a constant >32-bit.\n+\t(addrs_ok_for_ldd_peep): Fix signed/unsigned warning.\n+\t(sparc_flat_function_prologue, sparc_flat_function_epilogue): Fix\n+\tformat specifier warnings.\n+\t(sparc_sched_reorder): Mark parameter with ATTRIBUTE_UNUSED.\n+\n 2001-08-22  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* config/i386/i386-protos.h: Correct declaration of"}, {"sha": "ca412b73fd17ede48598fb88009277ba1dce68d3", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d58773799a6360c8608151de2812a66dc1e48ae/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d58773799a6360c8608151de2812a66dc1e48ae/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=0d58773799a6360c8608151de2812a66dc1e48ae", "patch": "@@ -1156,7 +1156,7 @@ uns_small_int (op, mode)\n   return (GET_CODE (op) == CONST_INT\n \t  && ((INTVAL (op) >= 0 && INTVAL (op) < 0x1000)\n \t      || (INTVAL (op) >= 0xFFFFF000\n-                  && INTVAL (op) < 0x100000000)));\n+                  && INTVAL (op) <= 0xFFFFFFFF)));\n #else\n   return ((GET_CODE (op) == CONST_INT && (unsigned) INTVAL (op) < 0x1000)\n \t  || (GET_CODE (op) == CONST_DOUBLE\n@@ -5676,7 +5676,8 @@ int\n addrs_ok_for_ldd_peep (addr1, addr2)\n       rtx addr1, addr2;\n {\n-  int reg1, offset1;\n+  unsigned int reg1;\n+  int offset1;\n \n   /* Extract a register number and offset (if used) from the first addr.  */\n   if (GET_CODE (addr1) == PLUS)\n@@ -6720,20 +6721,22 @@ sparc_flat_function_prologue (file, size)\n \t  if (size <= 4096)\n \t    {\n \t      fprintf (file, \"\\tadd\\t%s, %d, %s\\n\",\n-\t\t       sp_str, -size, sp_str);\n+\t\t       sp_str, (int) -size, sp_str);\n \t      if (gmask & FRAME_POINTER_MASK)\n \t\t{\n \t\t  fprintf (file, \"\\tst\\t%s, [%s+%d]\\n\",\n \t\t\t   fp_str, sp_str, reg_offset);\n \t\t  fprintf (file, \"\\tsub\\t%s, %d, %s\\t%s# set up frame pointer\\n\",\n-\t\t\t   sp_str, -size, fp_str, ASM_COMMENT_START);\n+\t\t\t   sp_str, (int) -size, fp_str, ASM_COMMENT_START);\n \t\t  reg_offset += 4;\n \t\t}\n \t    }\n \t  else\n \t    {\n-\t      fprintf (file, \"\\tset\\t%d, %s\\n\\tsub\\t%s, %s, %s\\n\",\n-\t\t       size, t1_str, sp_str, t1_str, sp_str);\n+\t      fprintf (file, \"\\tset\\t\");\n+\t      fprintf (file, HOST_WIDE_INT_PRINT_DEC, size);\n+\t      fprintf (file, \", %s\\n\\tsub\\t%s, %s, %s\\n\",\n+\t\t       t1_str, sp_str, t1_str, sp_str);\n \t      if (gmask & FRAME_POINTER_MASK)\n \t\t{\n \t\t  fprintf (file, \"\\tst\\t%s, [%s+%d]\\n\",\n@@ -6780,24 +6783,26 @@ sparc_flat_function_prologue (file, size)\n \t  if (size1 <= 4096)\n \t    {\n \t      fprintf (file, \"\\tadd\\t%s, %d, %s\\n\",\n-\t\t       sp_str, -size1, sp_str);\n+\t\t       sp_str, (int) -size1, sp_str);\n \t      if (gmask & FRAME_POINTER_MASK)\n \t\t{\n \t\t  fprintf (file, \"\\tst\\t%s, [%s+%d]\\n\\tsub\\t%s, %d, %s\\t%s# set up frame pointer\\n\",\n-\t\t\t   fp_str, sp_str, offset, sp_str, -size1, fp_str,\n-\t\t\t   ASM_COMMENT_START);\n+\t\t\t   fp_str, sp_str, (int) offset, sp_str, (int) -size1,\n+\t\t\t   fp_str, ASM_COMMENT_START);\n \t\t  offset += 4;\n \t\t}\n \t    }\n \t  else\n \t    {\n-\t      fprintf (file, \"\\tset\\t%d, %s\\n\\tsub\\t%s, %s, %s\\n\",\n-\t\t       size1, t1_str, sp_str, t1_str, sp_str);\n+\t      fprintf (file, \"\\tset\\t\");\n+\t      fprintf (file, HOST_WIDE_INT_PRINT_DEC, size1);\n+\t      fprintf (file, \", %s\\n\\tsub\\t%s, %s, %s\\n\",\n+\t\t       t1_str, sp_str, t1_str, sp_str);\n \t      if (gmask & FRAME_POINTER_MASK)\n \t\t{\n \t\t  fprintf (file, \"\\tst\\t%s, [%s+%d]\\n\\tadd\\t%s, %s, %s\\t%s# set up frame pointer\\n\",\n-\t\t\t   fp_str, sp_str, offset, sp_str, t1_str, fp_str,\n-\t\t\t   ASM_COMMENT_START);\n+\t\t\t   fp_str, sp_str, (int) offset, sp_str, t1_str,\n+\t\t\t   fp_str, ASM_COMMENT_START);\n \t\t  offset += 4;\n \t\t}\n \t    }\n@@ -6816,7 +6821,7 @@ sparc_flat_function_prologue (file, size)\n \t  if (gmask & RETURN_ADDR_MASK)\n \t    {\n \t      fprintf (file, \"\\tst\\t%s, [%s+%d]\\n\",\n-\t\t       reg_names[RETURN_ADDR_REGNUM], sp_str, offset);\n+\t\t       reg_names[RETURN_ADDR_REGNUM], sp_str, (int) offset);\n \t      if (dwarf2out_do_frame ())\n \t\t/* offset - size1 == reg_offset - size\n \t\t   if reg_offset were updated above like offset.  */\n@@ -6827,8 +6832,10 @@ sparc_flat_function_prologue (file, size)\n \t\t\t\t   gmask & ~(FRAME_POINTER_MASK | RETURN_ADDR_MASK),\n \t\t\t\t   current_frame_info.fmask,\n \t\t\t\t   \"st\", \"std\", -size1);\n-\t  fprintf (file, \"\\tset\\t%d, %s\\n\\tsub\\t%s, %s, %s\\n\",\n-\t\t   size - size1, t1_str, sp_str, t1_str, sp_str);\n+\t  fprintf (file, \"\\tset\\t\");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, size - size1);\n+\t  fprintf (file, \", %s\\n\\tsub\\t%s, %s, %s\\n\",\n+\t\t   t1_str, sp_str, t1_str, sp_str);\n \t  if (dwarf2out_do_frame ())\n \t    if (! (gmask & FRAME_POINTER_MASK))\n \t      dwarf2out_def_cfa (\"\", STACK_POINTER_REGNUM, size);\n@@ -6887,7 +6894,11 @@ sparc_flat_function_epilogue (file, size)\n \t delay slot if not otherwise filled by the reload sequence.  */\n \n       if (size > 4095)\n-\tfprintf (file, \"\\tset\\t%d, %s\\n\", size, t1_str);\n+        {\n+\t  fprintf (file, \"\\tset\\t\");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, size);\n+\t  fprintf (file, \", %s\\n\", t1_str);\n+\t}\n \n       if (frame_pointer_needed)\n \t{\n@@ -6896,7 +6907,7 @@ sparc_flat_function_epilogue (file, size)\n \t\t     fp_str, t1_str, sp_str, ASM_COMMENT_START);\n \t  else\n \t    fprintf (file,\"\\tsub\\t%s, %d, %s\\t\\t%s# sp not trusted here\\n\",\n-\t\t     fp_str, size, sp_str, ASM_COMMENT_START);\n+\t\t     fp_str, (int) size, sp_str, ASM_COMMENT_START);\n \t}\n \n       /* Is the entire register save area offsettable from %sp?  */\n@@ -6913,22 +6924,24 @@ sparc_flat_function_epilogue (file, size)\n \t  /* Offset to register save area from %sp.  */\n \t  reg_offset = size1 - reg_offset;\n \n-\t  fprintf (file, \"\\tset\\t%d, %s\\n\\tadd\\t%s, %s, %s\\n\",\n-\t\t   size1, t1_str, sp_str, t1_str, sp_str);\n+\t  fprintf (file, \"\\tset\\t\");\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, size1);\n+\t  fprintf (file, \", %s\\n\\tadd\\t%s, %s, %s\\n\",\n+\t\t   t1_str, sp_str, t1_str, sp_str);\n \t}\n \n       /* We must restore the frame pointer and return address reg first\n \t because they are treated specially by the prologue output code.  */\n       if (current_frame_info.gmask & FRAME_POINTER_MASK)\n \t{\n \t  fprintf (file, \"\\tld\\t[%s+%d], %s\\n\",\n-\t\t   sp_str, reg_offset, fp_str);\n+\t\t   sp_str, (int) reg_offset, fp_str);\n \t  reg_offset += 4;\n \t}\n       if (current_frame_info.gmask & RETURN_ADDR_MASK)\n \t{\n \t  fprintf (file, \"\\tld\\t[%s+%d], %s\\n\",\n-\t\t   sp_str, reg_offset, reg_names[RETURN_ADDR_REGNUM]);\n+\t\t   sp_str, (int) reg_offset, reg_names[RETURN_ADDR_REGNUM]);\n \t  reg_offset += 4;\n \t}\n \n@@ -6944,8 +6957,11 @@ sparc_flat_function_epilogue (file, size)\n \t{\n \t  size -= size1;\n \t  if (size > 4095)\n-\t    fprintf (file, \"\\tset\\t%d, %s\\n\",\n-\t\t     size, t1_str);\n+\t    {\n+\t      fprintf (file, \"\\tset\\t\");\n+\t      fprintf (file, HOST_WIDE_INT_PRINT_DEC, size);\n+\t      fprintf (file, \", %s\\n\", t1_str);\n+\t    }\n \t}\n \n       if (current_function_returns_struct)\n@@ -6969,7 +6985,7 @@ sparc_flat_function_epilogue (file, size)\n \tfprintf (file, \"\\tadd\\t%s, %s, %s\\n\", sp_str, t1_str, sp_str);\n \n       else if (size > 0)\n-\tfprintf (file, \"\\tadd\\t%s, %d, %s\\n\", sp_str, size, sp_str);\n+\tfprintf (file, \"\\tadd\\t%s, %d, %s\\n\", sp_str, (int) size, sp_str);\n \n       else\n \tfprintf (file, \"\\tnop\\n\");\n@@ -8101,7 +8117,7 @@ sparc_sched_reorder (dump, sched_verbose, ready, n_readyp, clock)\n      int sched_verbose;\n      rtx *ready;\n      int *n_readyp;\n-     int clock;\n+     int clock ATTRIBUTE_UNUSED;\n {\n   if (sparc_cpu == PROCESSOR_ULTRASPARC)\n     ultrasparc_sched_reorder (dump, sched_verbose, ready, *n_readyp);"}]}