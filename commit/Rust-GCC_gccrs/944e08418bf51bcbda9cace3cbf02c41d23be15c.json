{"sha": "944e08418bf51bcbda9cace3cbf02c41d23be15c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0ZTA4NDE4YmY1MWJjYmRhOWNhY2UzY2JmMDJjNDFkMjNiZTE1Yw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-10-03T23:08:16Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-10-03T23:08:16Z"}, "message": "rs6000-builtin.def (BU_FLOAT128_2_HW): Define new helper macro for IEEE float128 hardware built-in functions.\n\n[gcc]\n2017-10-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-builtin.def (BU_FLOAT128_2_HW): Define new\n\thelper macro for IEEE float128 hardware built-in functions.\n\t(SQRTF128_ODD): Add built-in functions with the round-to-odd\n\tsemantics.\n\t(TRUNCF128_ODD): Likewise.\n\t(ADDF128_ODD): Likewise.\n\t(SUBF128_ODD): Likewise.\n\t(MULF128_ODD): Likewise.\n\t(DIVF128_ODD): Likewise.\n\t(FMAF128_ODD): Likewise.\n\t* config/rs6000/rs6000.md (UNSPEC_ROUND_TO_ODD): Rename to\n\tUNSPEC_TRUNC_ROUND_TO_ODD.\n\t(UNSPEC_TRUNC_ROUND_TO_ODD): Likewise.\n\t(UNSPEC_ADD_ROUND_TO_ODD): New unspec codes for the IEEE 128-bit\n\tfloating point round to odd instructions.\n\t(UNSPEC_SUB_ROUND_TO_ODD): Likewise.\n\t(UNSPEC_MUL_ROUND_TO_ODD): Likewise.\n\t(UNSPEC_DIV_ROUND_TO_ODD): Likewise.\n\t(UNSPEC_FMA_ROUND_TO_ODD): Likewise.\n\t(UNSPEC_SQRT_ROUND_TO_ODD): Likewise.\n\t(trunc<mode>sf2_hw): Change the truncate with round to odd\n\texpansion to use UNSPEC_TRUNC_ROUND_TO_ODD.\n\t(add<mode>3_odd): Add insns for IEEE 128-bit floating point round\n\tto odd hardware instructions.\n\t(sub<mode>3_odd): Likewise.\n\t(mul<mode>3_odd): Likewise.\n\t(div<mode>3_odd): Likewise.\n\t(sqrt<mode>2_odd): Likewise.\n\t(fma<mode>4_odd): Likewise.\n\t(fms<mode>4_odd): Likewise.\n\t(nfma<mode>4_odd): Likewise.\n\t(nfms<mode>4_odd): Likewise.\n\t(trunc<mode>df2_odd): Change the truncate with round to odd\n\texpansion to use UNSPEC_TRUNC_ROUND_TO_ODD.  Add a generator\n\tfunction.\n\t* doc/extend.texi (PowerPC built-in functions): Update documentation\n\tfor existing IEEE float128-bit built-in functions.  Add built-in\n\tfunctions that generate the IEEE 128-bit floating point round to\n\todd instructions.\n\n[gcc/testsuite]\n2017-10-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/float128-odd.c: New test.\n\nFrom-SVN: r253389", "tree": {"sha": "45f9bb9c6e031454c8aedb83b48e55de351d622b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45f9bb9c6e031454c8aedb83b48e55de351d622b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/944e08418bf51bcbda9cace3cbf02c41d23be15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944e08418bf51bcbda9cace3cbf02c41d23be15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944e08418bf51bcbda9cace3cbf02c41d23be15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944e08418bf51bcbda9cace3cbf02c41d23be15c/comments", "author": null, "committer": null, "parents": [{"sha": "5bd8ff41eb22a555f751334864a68d100688b0f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd8ff41eb22a555f751334864a68d100688b0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd8ff41eb22a555f751334864a68d100688b0f3"}], "stats": {"total": 309, "additions": 296, "deletions": 13}, "files": [{"sha": "f7a448b3ecf9480867985b3cefdda49ad69817ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=944e08418bf51bcbda9cace3cbf02c41d23be15c", "patch": "@@ -1,3 +1,45 @@\n+2017-10-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (BU_FLOAT128_2_HW): Define new\n+\thelper macro for IEEE float128 hardware built-in functions.\n+\t(SQRTF128_ODD): Add built-in functions with the round-to-odd\n+\tsemantics.\n+\t(TRUNCF128_ODD): Likewise.\n+\t(ADDF128_ODD): Likewise.\n+\t(SUBF128_ODD): Likewise.\n+\t(MULF128_ODD): Likewise.\n+\t(DIVF128_ODD): Likewise.\n+\t(FMAF128_ODD): Likewise.\n+\t* config/rs6000/rs6000.md (UNSPEC_ROUND_TO_ODD): Rename to\n+\tUNSPEC_TRUNC_ROUND_TO_ODD.\n+\t(UNSPEC_TRUNC_ROUND_TO_ODD): Likewise.\n+\t(UNSPEC_ADD_ROUND_TO_ODD): New unspec codes for the IEEE 128-bit\n+\tfloating point round to odd instructions.\n+\t(UNSPEC_SUB_ROUND_TO_ODD): Likewise.\n+\t(UNSPEC_MUL_ROUND_TO_ODD): Likewise.\n+\t(UNSPEC_DIV_ROUND_TO_ODD): Likewise.\n+\t(UNSPEC_FMA_ROUND_TO_ODD): Likewise.\n+\t(UNSPEC_SQRT_ROUND_TO_ODD): Likewise.\n+\t(trunc<mode>sf2_hw): Change the truncate with round to odd\n+\texpansion to use UNSPEC_TRUNC_ROUND_TO_ODD.\n+\t(add<mode>3_odd): Add insns for IEEE 128-bit floating point round\n+\tto odd hardware instructions.\n+\t(sub<mode>3_odd): Likewise.\n+\t(mul<mode>3_odd): Likewise.\n+\t(div<mode>3_odd): Likewise.\n+\t(sqrt<mode>2_odd): Likewise.\n+\t(fma<mode>4_odd): Likewise.\n+\t(fms<mode>4_odd): Likewise.\n+\t(nfma<mode>4_odd): Likewise.\n+\t(nfms<mode>4_odd): Likewise.\n+\t(trunc<mode>df2_odd): Change the truncate with round to odd\n+\texpansion to use UNSPEC_TRUNC_ROUND_TO_ODD.  Add a generator\n+\tfunction.\n+\t* doc/extend.texi (PowerPC built-in functions): Update documentation\n+\tfor existing IEEE float128-bit built-in functions.  Add built-in\n+\tfunctions that generate the IEEE 128-bit floating point round to\n+\todd instructions.\n+\n 2017-10-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/77729"}, {"sha": "ac9ddae3ef08e1ec0bf52f7057fdcbbdd7b1b621", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=944e08418bf51bcbda9cace3cbf02c41d23be15c", "patch": "@@ -686,6 +686,14 @@\n \t\t     | RS6000_BTC_UNARY),                               \\\n \t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n \n+#define BU_FLOAT128_2_HW(ENUM, NAME, ATTR, ICODE)                       \\\n+  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n+\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n+\t\t    RS6000_BTM_FLOAT128_HW,             /* MASK */      \\\n+\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n+\t\t     | RS6000_BTC_BINARY),                              \\\n+\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n+\n #define BU_FLOAT128_3_HW(ENUM, NAME, ATTR, ICODE)                       \\\n   RS6000_BUILTIN_3 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n \t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n@@ -2365,11 +2373,19 @@ BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n BU_FLOAT128_1 (FABSQ,\t\t\"fabsq\",       CONST, abskf2)\n BU_FLOAT128_2 (COPYSIGNQ,\t\"copysignq\",   CONST, copysignkf3)\n \n-/* 1 and 3 argument IEEE 128-bit floating point functions that require ISA 3.0\n-   hardware.  These functions use the new 'f128' suffix.  Eventually these\n-   should be folded into the common built-in function handling. */\n-BU_FLOAT128_1_HW (SQRTF128,\t\"sqrtf128\",\tCONST, sqrtkf2)\n-BU_FLOAT128_3_HW (FMAF128,\t\"fmaf128\",\tCONST, fmakf4_hw)\n+/* 1, 2, and 3 argument IEEE 128-bit floating point functions that require ISA\n+   3.0 hardware.  These functions use the new 'f128' suffix.  Eventually the\n+   standard functions should be folded into the common built-in function\n+   handling. */\n+BU_FLOAT128_1_HW (SQRTF128,\t \"sqrtf128\",\t\t   CONST, sqrtkf2)\n+BU_FLOAT128_1_HW (SQRTF128_ODD,\t \"sqrtf128_round_to_odd\",  CONST, sqrtkf2_odd)\n+BU_FLOAT128_1_HW (TRUNCF128_ODD, \"truncf128_round_to_odd\", CONST, trunckfdf2_odd)\n+BU_FLOAT128_2_HW (ADDF128_ODD,\t \"addf128_round_to_odd\",   CONST, addkf3_odd)\n+BU_FLOAT128_2_HW (SUBF128_ODD,\t \"subf128_round_to_odd\",   CONST, subkf3_odd)\n+BU_FLOAT128_2_HW (MULF128_ODD,\t \"mulf128_round_to_odd\",   CONST, mulkf3_odd)\n+BU_FLOAT128_2_HW (DIVF128_ODD,\t \"divf128_round_to_odd\",   CONST, divkf3_odd)\n+BU_FLOAT128_3_HW (FMAF128,\t \"fmaf128\",\t\t   CONST, fmakf4_hw)\n+BU_FLOAT128_3_HW (FMAF128_ODD,\t \"fmaf128_round_to_odd\",   CONST, fmakf4_odd)\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox)"}, {"sha": "d8767dee05c7b33dee28d1f0978d5b300b2592a1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 117, "deletions": 4, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=944e08418bf51bcbda9cace3cbf02c41d23be15c", "patch": "@@ -140,7 +140,13 @@\n    UNSPEC_STACK_CHECK\n    UNSPEC_FUSION_P9\n    UNSPEC_FUSION_ADDIS\n-   UNSPEC_ROUND_TO_ODD\n+   UNSPEC_ADD_ROUND_TO_ODD\n+   UNSPEC_SUB_ROUND_TO_ODD\n+   UNSPEC_MUL_ROUND_TO_ODD\n+   UNSPEC_DIV_ROUND_TO_ODD\n+   UNSPEC_FMA_ROUND_TO_ODD\n+   UNSPEC_SQRT_ROUND_TO_ODD\n+   UNSPEC_TRUNC_ROUND_TO_ODD\n    UNSPEC_SIGNBIT\n    UNSPEC_SF_FROM_SI\n    UNSPEC_SI_FROM_SF\n@@ -14505,7 +14511,8 @@\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 2)\n-\t(unspec:DF [(match_dup 1)] UNSPEC_ROUND_TO_ODD))\n+\t(unspec:DF [(match_dup 1)]\n+\t\t   UNSPEC_TRUNC_ROUND_TO_ODD))\n    (set (match_dup 0)\n \t(float_truncate:SF (match_dup 2)))]\n {\n@@ -14682,10 +14689,116 @@\n    (set_attr \"size\" \"128\")])\n \n ;; IEEE 128-bit instructions with round to odd semantics\n-(define_insn \"*trunc<mode>df2_odd\"\n+(define_insn \"add<mode>3_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_ADD_ROUND_TO_ODD))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsaddqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"sub<mode>3_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_SUB_ROUND_TO_ODD))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xssubqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"mul<mode>3_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_MUL_ROUND_TO_ODD))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsmulqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"div<mode>3_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_DIV_ROUND_TO_ODD))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsdivqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"sqrt<mode>2_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_SQRT_ROUND_TO_ODD))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+   \"xssqrtqpo %0,%1\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"fma<mode>4_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\")]\n+\t UNSPEC_FMA_ROUND_TO_ODD))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsmaddqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"*fms<mode>4_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"%v\")\n+\t  (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")\n+\t  (neg:IEEE128\n+\t   (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\"))]\n+\t UNSPEC_FMA_ROUND_TO_ODD))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsmsubqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"*nfma<mode>4_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(neg:IEEE128\n+\t (unspec:IEEE128\n+\t  [(match_operand:IEEE128 1 \"altivec_register_operand\" \"%v\")\n+\t   (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")\n+\t   (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\")]\n+\t  UNSPEC_FMA_ROUND_TO_ODD)))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsnmaddqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"*nfms<mode>4_odd\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(neg:IEEE128\n+\t (unspec:IEEE128\n+\t  [(match_operand:IEEE128 1 \"altivec_register_operand\" \"%v\")\n+\t   (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")\n+\t   (neg:IEEE128\n+\t    (match_operand:IEEE128 3 \"altivec_register_operand\" \"0\"))]\n+\t  UNSPEC_FMA_ROUND_TO_ODD)))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsnmsubqpo %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"trunc<mode>df2_odd\"\n   [(set (match_operand:DF 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:DF [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")]\n-\t\t   UNSPEC_ROUND_TO_ODD))]\n+\t\t   UNSPEC_TRUNC_ROUND_TO_ODD))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xscvqpdpo %0,%1\"\n   [(set_attr \"type\" \"vecfloat\")"}, {"sha": "4156291b6423f50929ed526b6b6946a54675c5f4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=944e08418bf51bcbda9cace3cbf02c41d23be15c", "patch": "@@ -15348,14 +15348,47 @@ that use the ISA 3.0 instruction set.\n \n @table @code\n @item __float128 __builtin_sqrtf128 (__float128)\n-Similar to @code{__builtin_sqrtf}, except the return and input types\n-are @code{__float128}.\n+Perform a 128-bit IEEE floating point square root operation.\n @findex __builtin_sqrtf128\n \n @item __float128 __builtin_fmaf128 (__float128, __float128, __float128)\n-Similar to @code{__builtin_fma}, except the return and input types are\n-@code{__float128}.\n+Perform a 128-bit IEEE floating point fused multiply and add operation.\n @findex __builtin_fmaf128\n+\n+@item __float128 __builtin_addf128_round_to_odd (__float128, __float128)\n+Perform a 128-bit IEEE floating point add using round to odd as the\n+rounding mode.\n+@findex __builtin_addf128_round_to_odd\n+\n+@item __float128 __builtin_subf128_round_to_odd (__float128, __float128)\n+Perform a 128-bit IEEE floating point subtract using round to odd as\n+the rounding mode.\n+@findex __builtin_subf128_round_to_odd\n+\n+@item __float128 __builtin_mulf128_round_to_odd (__float128, __float128)\n+Perform a 128-bit IEEE floating point multiply using round to odd as\n+the rounding mode.\n+@findex __builtin_mulf128_round_to_odd\n+\n+@item __float128 __builtin_divf128_round_to_odd (__float128, __float128)\n+Perform a 128-bit IEEE floating point divide using round to odd as\n+the rounding mode.\n+@findex __builtin_divf128_round_to_odd\n+\n+@item __float128 __builtin_sqrtf128_round_to_odd (__float128)\n+Perform a 128-bit IEEE floating point square root using round to odd\n+as the rounding mode.\n+@findex __builtin_sqrtf128_round_to_odd\n+\n+@item __float128 __builtin_fmaf128 (__float128, __float128, __float128)\n+Perform a 128-bit IEEE floating point fused multiply and add operation\n+using round to odd as the rounding mode.\n+@findex __builtin_fmaf128_round_to_odd\n+\n+@item double __builtin_truncf128_round_to_odd (__float128)\n+Convert a 128-bit IEEE floating point value to @code{double} using\n+round to odd as the rounding mode.\n+@findex __builtin_truncf128_round_to_odd\n @end table\n \n The following built-in functions are available for the PowerPC family"}, {"sha": "7bd355603cc1eeb2925dcb0847d6ad29c48f98e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=944e08418bf51bcbda9cace3cbf02c41d23be15c", "patch": "@@ -1,3 +1,7 @@\n+2017-10-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-odd.c: New test.\n+\n 2017-10-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70343"}, {"sha": "68c151059bcd96829d70ed58c0dc46762447c140", "filename": "gcc/testsuite/gcc.target/powerpc/float128-odd.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-odd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/944e08418bf51bcbda9cace3cbf02c41d23be15c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-odd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-odd.c?ref=944e08418bf51bcbda9cace3cbf02c41d23be15c", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n+\n+/* Test the generation of the round to odd instructions.  */\n+__float128\n+f128_add(__float128 a, __float128 b)\n+{\n+  return __builtin_addf128_round_to_odd (a, b);\n+}\n+\n+__float128\n+f128_sub (__float128 a, __float128 b)\n+{\n+  return __builtin_subf128_round_to_odd (a, b);\n+}\n+\n+__float128\n+f128_mul (__float128 a, __float128 b)\n+{\n+  return __builtin_mulf128_round_to_odd (a, b);\n+}\n+\n+__float128\n+f128_div (__float128 a, __float128 b)\n+{\n+  return __builtin_divf128_round_to_odd (a, b);\n+}\n+\n+__float128\n+f128_sqrt (__float128 a)\n+{\n+  return __builtin_sqrtf128_round_to_odd (a);\n+}\n+\n+double\n+f128_trunc (__float128 a)\n+{\n+  return __builtin_truncf128_round_to_odd (a);\n+}\n+\n+__float128\n+f128_fma (__float128 a, __float128 b, __float128 c)\n+{\n+  return __builtin_fmaf128_round_to_odd (a, b, c);\n+}\n+\n+__float128\n+f128_fms (__float128 a, __float128 b, __float128 c)\n+{\n+  return __builtin_fmaf128_round_to_odd (a, b, -c);\n+}\n+\n+__float128\n+f128_nfma (__float128 a, __float128 b, __float128 c)\n+{\n+  return - __builtin_fmaf128_round_to_odd (a, b, c);\n+}\n+\n+__float128\n+f128_nfms (__float128 a, __float128 b, __float128 c)\n+{\n+  return - __builtin_fmaf128_round_to_odd (a, b, -c);\n+}\n+\n+/* { dg-final { scan-assembler {\\mxsaddqpo\\M}   } } */\n+/* { dg-final { scan-assembler {\\mxssubqpo\\M}   } } */\n+/* { dg-final { scan-assembler {\\mxsmulqpo\\M}   } } */\n+/* { dg-final { scan-assembler {\\mxsdivqpo\\M}   } } */\n+/* { dg-final { scan-assembler {\\mxssqrtqpo\\M}  } } */\n+/* { dg-final { scan-assembler {\\mxscvqpdpo\\M}  } } */\n+/* { dg-final { scan-assembler {\\mxsmaddqpo\\M}  } } */\n+/* { dg-final { scan-assembler {\\mxsmsubqpo\\M}  } } */\n+/* { dg-final { scan-assembler {\\mxsnmaddqpo\\M} } } */\n+/* { dg-final { scan-assembler {\\mxsnmsubqpo\\M} } } */"}]}