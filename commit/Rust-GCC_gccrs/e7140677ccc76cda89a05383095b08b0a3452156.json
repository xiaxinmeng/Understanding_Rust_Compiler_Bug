{"sha": "e7140677ccc76cda89a05383095b08b0a3452156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxNDA2NzdjY2M3NmNkYTg5YTA1MzgzMDk1YjA4YjBhMzQ1MjE1Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-27T12:31:37Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-27T12:31:37Z"}, "message": "[multiple changes]\n\n\n2000-10-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c/bits/std_cmath.h: Fix double declarations in namespace std.\n\n\tClean up naming, consistency in \"C\" library autoconf testing.\n\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE): For consistency, change to\n\tGLIBCPP_CHECK_CTYPE_SUPPORT.\n\t(GLIBCPP_CHECK_STDLIB_SUPPORT): Add.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: And here.\n\tAdd call to GLIBCPP_CHECK_STDLIB_SUPPORT.\n\t* configure: Regenerate.\n\n2000-10-26  David Edelsohn  <edelsohn@gnu.org>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2): New macro.\n\t(GLIBCPP_CHECK_MATH_SUPPORT): Use it to test for strtold.\n\nFrom-SVN: r37083", "tree": {"sha": "346c49b5d26354a92d762929d7289ea0ee069ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/346c49b5d26354a92d762929d7289ea0ee069ccb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7140677ccc76cda89a05383095b08b0a3452156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7140677ccc76cda89a05383095b08b0a3452156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7140677ccc76cda89a05383095b08b0a3452156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7140677ccc76cda89a05383095b08b0a3452156/comments", "author": null, "committer": null, "parents": [{"sha": "5bd17d391761539da90999532d18d83ccdfccca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bd17d391761539da90999532d18d83ccdfccca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bd17d391761539da90999532d18d83ccdfccca4"}], "stats": {"total": 2290, "additions": 1223, "deletions": 1067}, "files": [{"sha": "1f526378cafdeb8367a316b95fd6dbb30685ee81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7140677ccc76cda89a05383095b08b0a3452156", "patch": "@@ -1,3 +1,34 @@\n+2000-10-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c/bits/std_cmath.h: Fix double declarations in namespace std.\n+\n+\tClean up naming, consistency in \"C\" library autoconf testing.\n+\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE): For consistency, change to\n+\tGLIBCPP_CHECK_CTYPE_SUPPORT.\n+\t(GLIBCPP_CHECK_STDLIB_SUPPORT): Add.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: And here. \n+\tAdd call to GLIBCPP_CHECK_STDLIB_SUPPORT.\n+\t* configure: Regenerate.\n+\t\n+2000-10-26  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2): New macro.\n+\t(GLIBCPP_CHECK_MATH_SUPPORT): Use it to test for strtold.\n+\t\n+2000-10-26  Phil Edwards  <pme@sources.redhat.com>  \n+\t    David Edelsohn  <dje@watson.ibm.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES): Comment out\n+\t--gc-sections stuff entirely to avoid misleading people.\n+        (GLIBCPP_ENABLE_CSTDIO): Merge need_libio and need_xtra_libio.\n+        * libio/Makefile.am (LIBIO_SRCS,LIBIO_WSRCS,LIBIO_XTRA_SRCS):\n+\tRearrange and merge.\n+        * libio/libio.h: Simplify, make fewer assumptions.  Define those\n+\tmacros which must be defined.\n+        * config/os/solaris/solaris2.7/bits/os_defines.h: Simplify as a\n+\tresult.\n+\n 2000-10-26  Mark Mitchell  <mark@codesourcery.com>\n \n \t* include/backward/streambuf.h: New file."}, {"sha": "24c086f18b451e14919ba89a67a14b0378213b13", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=e7140677ccc76cda89a05383095b08b0a3452156", "patch": "@@ -1,6 +1,6 @@\n # Makefile.in generated automatically by automake 1.4 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999, 2000 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -407,9 +407,11 @@ mostlyclean distclean maintainer-clean\n # because then the paths will be full pathnames, not relative\n # pathnames. (-Wl,--rpath seems to like this better.)\n check:  $(top_builddir)/mkcheck\n+\tchmod +x  $(top_builddir)/mkcheck\n \t$(top_builddir)/mkcheck 0 `pwd` $(top_srcdir)\n \n check-install: $(top_builddir)/mkcheck\n+\tchmod +x  $(top_builddir)/mkcheck\n \t$(top_builddir)/mkcheck 1 `pwd` $(top_srcdir) $(prefix)\n \n # Multilib Makefile bits."}, {"sha": "bfed6da79b3558883a002a011e973847771c8142", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 66, "deletions": 19, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=e7140677ccc76cda89a05383095b08b0a3452156", "patch": "@@ -1,6 +1,6 @@\n dnl aclocal.m4 generated automatically by aclocal 1.4\n \n-dnl Copyright (C) 1994, 1995-8, 1999, 2000 Free Software Foundation, Inc.\n+dnl Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n dnl gives unlimited permission to copy and/or distribute it,\n dnl with or without modifications, as long as this notice is preserved.\n@@ -270,16 +270,16 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   SECTION_LDFLAGS=''\n   OPT_LDFLAGS=''\n   AC_REQUIRE([AC_PROG_LD])\n-  if test \"$ac_cv_prog_gnu_ld\" = \"yes\"; then\n+\n+  # Set --gc-sections.\n+  if test \"$ac_cv_prog_gnu_ld\" = \"broken\"; then\n     # GNU ld it is!  Joy and bunny rabbits!\n \n     # All these tests are for C++; save the language and the compiler flags.\n     # Need to do this so that g++ won't try to link in libstdc++\n     ac_test_CFLAGS=\"${CFLAGS+set}\"\n     ac_save_CFLAGS=\"$CFLAGS\"\n-#    CFLAGS='-x c++  -Wl,--gc-sections'\n-#XXX\n-    CFLAGS=''\n+    CFLAGS='-x c++  -Wl,--gc-sections'\n \n     # Check for -Wl,--gc-sections\n     # XXX This test is broken at the moment, as symbols required for\n@@ -304,15 +304,16 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n       CFLAGS=''\n     fi\n     if test \"$ac_sectionLDflags\" = \"yes\"; then\n-#      SECTION_LDFLAGS='-Wl,--gc-sections'\n-#XXX\n-      SECTION_LDFLAGS=''\n+      SECTION_LDFLAGS='-Wl,--gc-sections'\n     fi\n     AC_MSG_RESULT($ac_sectionLDflags)\n+  fi\n \n+  # Set linker optimization flags.\n+  if test \"$ac_cv_prog_gnu_ld\" = \"yes\"; then\n     OPT_LDFLAGS='-Wl,-O1'\n-\n   fi\n+\n   AC_SUBST(SECTION_LDFLAGS)\n   AC_SUBST(OPT_LDFLAGS)\n ])\n@@ -405,6 +406,36 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n ])\n \n \n+dnl\n+dnl Check to see if the (stdlib function) argument passed is\n+dnl 1) declared when using the c++ compiler\n+dnl 2) has \"C\" linkage\n+dnl\n+dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n+dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n+dnl\n+dnl argument 1 is name of function to check\n+dnl\n+dnl ASSUMES argument is a math function with TWO parameters\n+dnl\n+dnl GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2\n+AC_DEFUN(GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2, [\n+  AC_MSG_CHECKING([for $1 declaration])\n+  AC_CACHE_VAL(glibcpp_cv_func_$1_use, [\n+    AC_LANG_SAVE\n+    AC_LANG_CPLUSPLUS\n+    AC_TRY_COMPILE([#include <stdlib.h>], \n+                   [ $1(0, 0);], \n+                   [glibcpp_cv_func_$1_use=yes], [glibcpp_cv_func_$1_use=no])\n+    AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($glibcpp_cv_func_$1_use)\n+  if test x$glibcpp_cv_func_$1_use = x\"yes\"; then\n+    AC_CHECK_FUNCS($1)    \n+  fi\n+])\n+\n+\n dnl\n dnl Because the builtins are picky picky picky about the arguments they take, \n dnl do an explict linkage tests here.\n@@ -512,6 +543,29 @@ AC_DEFUN(GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT, [\n ])\n \n \n+dnl\n+dnl Check to see what the underlying c library \n+dnl These checks need to do two things: \n+dnl 1) make sure the name is declared when using the c++ compiler\n+dnl 2) make sure the name has \"C\" linkage\n+dnl This might seem like overkill but experience has shown that it's not...\n+dnl\n+dnl Define HAVE_STRTOF etc if \"strtof\" is found.\n+dnl Define HAVE_STRTOLD etc if \"strtold\" is found.\n+dnl\n+dnl GLIBCPP_CHECK_STDLIB_SUPPORT\n+AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-fno-builtins -D_GNU_SOURCE'\n+\n+  AC_CHECK_FUNCS(strtof)\n+  GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+])\n+\n+\n dnl\n dnl Check to see what the underlying c library or math library is like.\n dnl These checks need to do two things: \n@@ -532,9 +586,6 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_SUPPORT, [\n   ac_save_LIBS=\"$LIBS\"\n   LIBS=\"$LIBS $libm\"\n \n-  dnl Although not math functions, needed and for some reason checked here.\n-  AC_CHECK_FUNCS(strtof strtold)\n-\n   dnl Check to see if certain C math functions exist.\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isinf)\n   GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1(isnan)\n@@ -794,8 +845,8 @@ dnl\n dnl Depending on what is found, select various configure/*/bits/ctype_base.h \n dnl Depending on what is found, select various configure/*/ctype.cc\n dnl\n-dnl GLIBCPP_CHECK_CTYPE\n-AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n+dnl GLIBCPP_CHECK_CTYPE_SUPPORT\n+AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n   AC_CHECK_HEADER(ctype.h, [\n     \n     dnl If doesn't match any specified, go with defaults.\n@@ -1259,11 +1310,9 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n \n         if test x$glibc_satisfactory = x\"yes\"; then\n            need_libio=no\n-           need_xtra_libio=no\n            need_wlibio=no        \n         else\n            need_libio=yes\n-           need_xtra_libio=yes\n            # bkoz XXX need to add checks to enable this\n            # pme XXX here's a first pass at such a check\n            if test x$enable_c_mbchar != xno; then\n@@ -1273,10 +1322,9 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n            fi\n         fi\n \n-      # Using libio, but <libio.h> doesn't exist on the target system. . .\n       else\n+         # Using libio, but <libio.h> doesn't exist on the target system. . .\n          need_libio=yes\n-         need_xtra_libio=no\n          # bkoz XXX need to add checks to enable this\n          # pme XXX here's a first pass at such a check\n          if test x$enable_c_mbchar != xno; then\n@@ -1308,7 +1356,6 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   # 2000-08-04 bkoz hack\n \n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n-  AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n ])\n "}, {"sha": "16a3eda0f3b3d93e70ca8ad26cbb4a8f4067d9ca", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1094, "deletions": 998, "changes": 2092, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e7140677ccc76cda89a05383095b08b0a3452156"}, {"sha": "4c7ca130038211dd20c08cb6dbbd1622dd9c2109", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=e7140677ccc76cda89a05383095b08b0a3452156", "patch": "@@ -131,7 +131,8 @@ else\n   GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n   AC_CACHE_SAVE\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n-  GLIBCPP_CHECK_CTYPE\n+  GLIBCPP_CHECK_CTYPE_SUPPORT\n+  GLIBCPP_CHECK_STDLIB_SUPPORT\n \n   AC_FUNC_MMAP\n   AC_CHECK_HEADERS(gconv.h)"}, {"sha": "fe09b224b942b9a2a3ab6fb397c621a9a4caf056", "filename": "libstdc++-v3/include/c/bits/std_cmath.h", "status": "modified", "additions": 27, "deletions": 48, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7140677ccc76cda89a05383095b08b0a3452156/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fbits%2Fstd_cmath.h?ref=e7140677ccc76cda89a05383095b08b0a3452156", "patch": "@@ -265,98 +265,77 @@ namespace std {\n   inline double \n   abs(double __x) { return __builtin_fabs(__x); }\n #else\n-  inline double \n-  abs(double __x) { return ::fabs(__x); }\n+  extern \"C\" double abs(double __x);\n #endif\n \n-  inline double \n-  acos(double __x) { return ::acos(__x); }\n+  extern \"C\" double acos(double __x);\n \n-  inline double \n-  asin(double __x) { return ::asin(__x); }\n+  extern \"C\" double asin(double __x);\n \n-  inline double \n-  atan(double __x) { return ::atan(__x); }\n+  extern \"C\" double atan(double __x);\n \n-  inline double \n-  atan2(double __y, double __x) { return ::atan2(__y, __x); }\n+  extern \"C\" double atan2(double __y, double __x);\n \n-  inline double \n-  ceil(double __x) { return ::ceil(__x); }\n+  extern \"C\" double ceil(double __x);\n \n #if _GLIBCPP_HAVE___BUILTIN_COS\n   inline double \n   cos(double __x) { return __builtin_cos(__x); }\n #else\n-  inline double \n-  cos(double __x) { return ::cos(__x); }\n+  extern \"C\" double cos(double __x);\n #endif\n \n-  inline double cosh(double __x)\n-  { return ::cosh(__x); }\n-\n-  inline double \n-  exp(double __x) { return ::exp(__x); }\n+  extern \"C\" double cosh(double __x);\n \n+  extern \"C\" double exp(double __x);\n \n #if _GLIBCPP_HAVE___BUILTIN_FABS\n   inline double \n   fabs(double __x) { return __builtin_fabs(__x); }\n #else\n-  inline double \n-  fabs(double __x) { return ::fabs(__x); }\n+  extern \"C\" double fabs(double __x);\n #endif\n \n-  inline double \n-  floor(double __x) { return ::floor(__x); }\n+  extern \"C\" double floor(double __x);\n \n-  inline double \n-  fmod(double __x, double __y) { return ::fmod(__x, __y); }\n+  extern \"C\" double fmod(double __x, double __y);\n \n-  inline double \n-  frexp(double __x, int* __exp) { return ::frexp(__x, __exp); }\n+  extern \"C\" double frexp(double __x, int* __exp);\n \n-  inline double \n-  ldexp(double __x, int __exp) { return ::ldexp(__x, __exp); }\n+  extern \"C\" double ldexp(double __x, int __exp);\n \n-  inline double \n-  log(double __x) { return ::log(__x); }\n+  extern \"C\" double log(double __x);\n \n-  inline double \n-  log10(double __x) { return ::log10(__x); }\n+  extern \"C\" double log10(double __x);\n \n-  inline double \n-  modf(double __x, double* __iptr) { return ::modf(__x, __iptr); }\n+  extern \"C\" double modf(double __x, double* __iptr);\n \n-  inline double \n-  pow(double __x, double __y) { return ::pow(__x, __y); }\n+#if 0\n+  extern \"C\" double pow(double __x, double __y);\n \n-  double pow (double, int);\n+  extern \"C\" double pow(double, int);\n+#endif\n+  using ::pow;\n \n #if _GLIBCPP_HAVE___BUILTIN_SIN\n   inline double \n   sin(double __x) { return __builtin_sin(__x); }\n #else\n-  inline double \n-  sin(double __x) { return ::sin(__x); }\n+  extern \"C\" double sin(double __x);\n #endif\n \n-  inline double \n-  sinh(double __x) { return ::sinh(__x); }\n+  extern \"C\" double sinh(double __x);\n \n #if _GLIBCPP_HAVE___BUILTIN_SQRT\n   inline double \n   sqrt(double __x) { return __builtin_fsqrt(__x); }\n #else\n-  inline double \n-  sqrt(double __x) { return ::sqrt(__x); }\n+  extern \"C\" double sqrt(double __x);\n #endif\n \n-  inline double \n-  tan(double __x) { return ::tan(__x); }\n+  extern \"C\" double tan(double __x);\n \n-  inline double \n-  tanh(double __x) { return ::tanh(__x); }\n+  extern \"C\" double tanh(double __x);\n \n \n #if _GLIBCPP_HAVE___BUILTIN_FABSL"}]}