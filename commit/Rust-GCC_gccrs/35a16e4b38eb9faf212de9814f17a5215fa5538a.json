{"sha": "35a16e4b38eb9faf212de9814f17a5215fa5538a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhMTZlNGIzOGViOWZhZjIxMmRlOTgxNGYxN2E1MjE1ZmE1NTM4YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-19T10:36:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-19T12:53:50Z"}, "message": "Avoid marking TARGET_MEM_REF bases addressable\n\nThe following does no longer mark TARGET_MEM_REF bases addressable,\nmimicing MEM_REFs beahvior here.  In contrast to the latter,\nTARGET_MEM_REF RTL expansion expects to always operate on memory\nthough, so make sure we expand them so.\n\n2021-05-19  Richard Biener  <rguenther@suse.de>\n\n\t* cfgexpand.c (discover_nonconstant_array_refs_r): Make\n\tsure TARGET_MEM_REF bases are expanded as memory.\n\t* tree-ssa-operands.c (operands_scanner::get_tmr_operands):\n\tDo not mark TARGET_MEM_REF bases addressable.\n\t* tree-ssa.c (non_rewritable_mem_ref_base): Handle\n\tTARGET_MEM_REF bases as never rewritable.\n\t* gimple-walk.c (walk_stmt_load_store_addr_ops): Do not\n\twalk TARGET_MEM_REF bases as address-takens.\n\t* tree-ssa-dce.c (ref_may_be_aliased): Handle TARGET_MEM_REF.", "tree": {"sha": "066e20b1a46a20cc5decd53bed51140dbfac3fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/066e20b1a46a20cc5decd53bed51140dbfac3fa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35a16e4b38eb9faf212de9814f17a5215fa5538a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a16e4b38eb9faf212de9814f17a5215fa5538a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a16e4b38eb9faf212de9814f17a5215fa5538a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a16e4b38eb9faf212de9814f17a5215fa5538a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6ad1ba532fe684633edac766c598be19ad3b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6ad1ba532fe684633edac766c598be19ad3b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6ad1ba532fe684633edac766c598be19ad3b59"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "39e5b04042704fbe89b4e60250302d0a78fb4045", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=35a16e4b38eb9faf212de9814f17a5215fa5538a", "patch": "@@ -6280,10 +6280,12 @@ discover_nonconstant_array_refs_r (tree * tp, int *walk_subtrees,\n     }\n   /* References of size POLY_INT_CST to a fixed-size object must go\n      through memory.  It's more efficient to force that here than\n-     to create temporary slots on the fly.  */\n-  else if ((TREE_CODE (t) == MEM_REF || TREE_CODE (t) == TARGET_MEM_REF)\n-\t   && TYPE_SIZE (TREE_TYPE (t))\n-\t   && POLY_INT_CST_P (TYPE_SIZE (TREE_TYPE (t))))\n+     to create temporary slots on the fly.\n+     RTL expansion expectes TARGET_MEM_REF to always address actual memory.  */\n+  else if (TREE_CODE (t) == TARGET_MEM_REF\n+\t   || (TREE_CODE (t) == MEM_REF\n+\t       && TYPE_SIZE (TREE_TYPE (t))\n+\t       && POLY_INT_CST_P (TYPE_SIZE (TREE_TYPE (t)))))\n     {\n       tree base = get_base_address (t);\n       if (base"}, {"sha": "e4a55f1eeb6d43ec1077deaf5015752ae0312c80", "filename": "gcc/gimple-walk.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Fgimple-walk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Fgimple-walk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.c?ref=35a16e4b38eb9faf212de9814f17a5215fa5538a", "patch": "@@ -748,10 +748,6 @@ walk_stmt_load_store_addr_ops (gimple *stmt, void *data,\n \t{\n \t  if (TREE_CODE (rhs) == ADDR_EXPR)\n \t    ret |= visit_addr (stmt, TREE_OPERAND (rhs, 0), arg, data);\n-\t  else if (TREE_CODE (rhs) == TARGET_MEM_REF\n-\t\t   && TREE_CODE (TMR_BASE (rhs)) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (rhs), 0), arg,\n-\t\t\t       data);\n \t  else if (TREE_CODE (rhs) == OBJ_TYPE_REF\n \t\t   && TREE_CODE (OBJ_TYPE_REF_OBJECT (rhs)) == ADDR_EXPR)\n \t    ret |= visit_addr (stmt, TREE_OPERAND (OBJ_TYPE_REF_OBJECT (rhs),\n@@ -770,10 +766,6 @@ walk_stmt_load_store_addr_ops (gimple *stmt, void *data,\n \t\t\t\t     TREE_OPERAND (OBJ_TYPE_REF_OBJECT (val),\n \t\t\t\t\t\t   0), arg, data);\n \t    }\n-          lhs = gimple_assign_lhs (stmt);\n-\t  if (TREE_CODE (lhs) == TARGET_MEM_REF\n-              && TREE_CODE (TMR_BASE (lhs)) == ADDR_EXPR)\n-\t    ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (lhs), 0), lhs, data);\n \t}\n       if (visit_load)\n \t{"}, {"sha": "def6ae69e2463ff76b816534554fb2bd97ea1ad3", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=35a16e4b38eb9faf212de9814f17a5215fa5538a", "patch": "@@ -452,7 +452,7 @@ ref_may_be_aliased (tree ref)\n   gcc_assert (TREE_CODE (ref) != WITH_SIZE_EXPR);\n   while (handled_component_p (ref))\n     ref = TREE_OPERAND (ref, 0);\n-  if (TREE_CODE (ref) == MEM_REF\n+  if ((TREE_CODE (ref) == MEM_REF || TREE_CODE (ref) == TARGET_MEM_REF)\n       && TREE_CODE (TREE_OPERAND (ref, 0)) == ADDR_EXPR)\n     ref = TREE_OPERAND (TREE_OPERAND (ref, 0), 0);\n   return !(DECL_P (ref)"}, {"sha": "c15575416dd245c04371d1c9bd73aca2f794e514", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=35a16e4b38eb9faf212de9814f17a5215fa5538a", "patch": "@@ -669,7 +669,9 @@ operands_scanner::get_tmr_operands(tree expr, int flags)\n     gimple_set_has_volatile_ops (stmt, true);\n \n   /* First record the real operands.  */\n-  get_expr_operands (&TMR_BASE (expr), opf_use | (flags & opf_no_vops));\n+  get_expr_operands (&TMR_BASE (expr),\n+\t\t     opf_non_addressable | opf_use\n+\t\t     | (flags & (opf_no_vops|opf_not_non_addressable)));\n   get_expr_operands (&TMR_INDEX (expr), opf_use | (flags & opf_no_vops));\n   get_expr_operands (&TMR_INDEX2 (expr), opf_use | (flags & opf_no_vops));\n "}, {"sha": "4cc400d3c2eb176052bcaa9dbd35912f0b9886cf", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35a16e4b38eb9faf212de9814f17a5215fa5538a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=35a16e4b38eb9faf212de9814f17a5215fa5538a", "patch": "@@ -1494,6 +1494,16 @@ non_rewritable_mem_ref_base (tree ref)\n       return decl;\n     }\n \n+  /* We cannot rewrite TARGET_MEM_REFs.  */\n+  if (TREE_CODE (base) == TARGET_MEM_REF\n+      && TREE_CODE (TREE_OPERAND (base, 0)) == ADDR_EXPR)\n+    {\n+      tree decl = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n+      if (! DECL_P (decl))\n+\treturn NULL_TREE;\n+      return decl;\n+    }\n+\n   return NULL_TREE;\n }\n "}]}