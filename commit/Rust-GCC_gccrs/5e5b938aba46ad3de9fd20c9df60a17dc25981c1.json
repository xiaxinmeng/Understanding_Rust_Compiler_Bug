{"sha": "5e5b938aba46ad3de9fd20c9df60a17dc25981c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1YjkzOGFiYTQ2YWQzZGU5ZmQyMGM5ZGY2MGExN2RjMjU5ODFjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-06T21:14:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-06T21:14:20Z"}, "message": "i386.md (LEAMODE): New mode attribute.\n\n\t* config/i386/i386.md (LEAMODE): New mode attribute.\n\t(plus to LEA splitter): Rewrite splitter using LEAMODE mode attribute.\n\t(ashift to LEA splitter): Rewrte splitter using SWI mode iterator\n\tand LEAMODE mode attribute.  Use VOIDmode const_0_to_3_operand as\n\toperand 2 predicate.\n\t(*lea<mode>_general_2): Use VOIDmode for const248_operand.\n\t(*lea<mode>_general_3): Ditto.\n\t(*lea<mode>_general_4): Use VOIDmode for const_0_to_3_operand.\n\nFrom-SVN: r235987", "tree": {"sha": "46d6203d3a2c3b8a9229b086be34eaa3f6e4254e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d6203d3a2c3b8a9229b086be34eaa3f6e4254e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e5b938aba46ad3de9fd20c9df60a17dc25981c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5b938aba46ad3de9fd20c9df60a17dc25981c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5b938aba46ad3de9fd20c9df60a17dc25981c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5b938aba46ad3de9fd20c9df60a17dc25981c1/comments", "author": null, "committer": null, "parents": [{"sha": "e796fd77d39f2e56c15f794782a24828ac11a46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e796fd77d39f2e56c15f794782a24828ac11a46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e796fd77d39f2e56c15f794782a24828ac11a46e"}], "stats": {"total": 109, "additions": 52, "deletions": 57}, "files": [{"sha": "156359254af1ab8bf1cc9843ff924ee6e9394cd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5b938aba46ad3de9fd20c9df60a17dc25981c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5b938aba46ad3de9fd20c9df60a17dc25981c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e5b938aba46ad3de9fd20c9df60a17dc25981c1", "patch": "@@ -1,3 +1,14 @@\n+2016-05-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (LEAMODE): New mode attribute.\n+\t(plus to LEA splitter): Rewrite splitter using LEAMODE mode attribute.\n+\t(ashift to LEA splitter): Rewrte splitter using SWI mode iterator\n+\tand LEAMODE mode attribute.  Use VOIDmode const_0_to_3_operand as\n+\toperand 2 predicate.\n+\t(*lea<mode>_general_2): Use VOIDmode for const248_operand.\n+\t(*lea<mode>_general_3): Ditto.\n+\t(*lea<mode>_general_4): Use VOIDmode for const_0_to_3_operand.\n+\n 2016-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* genmddump.c (main): Convert argv from char ** to const char **.\n@@ -34,8 +45,7 @@\n \n 2016-05-06  David Malcolm  <dmalcolm@redhat.com>\n \n-\t* genattr-common.c (main): Convert argv from\n-\tchar ** to const char **.\n+\t* genattr-common.c (main): Convert argv from char ** to const char **.\n \t* genattr.c (main): Likewise.\n \t* genattrtab.c (main): Likewise.\n \t* genautomata.c (initiate_automaton_gen): Likewise."}, {"sha": "2b7ff31a0185429423679052f2244652fa003181", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 40, "deletions": 55, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5b938aba46ad3de9fd20c9df60a17dc25981c1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5b938aba46ad3de9fd20c9df60a17dc25981c1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5e5b938aba46ad3de9fd20c9df60a17dc25981c1", "patch": "@@ -1024,6 +1024,9 @@\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\")])\n (define_mode_attr dwi [(QI \"hi\") (HI \"si\") (SI \"di\") (DI \"ti\")])\n \n+;; LEA mode corresponding to an integer mode\n+(define_mode_attr LEAMODE [(QI \"SI\") (HI \"SI\") (SI \"SI\") (DI \"DI\")])\n+\n ;; Half mode for double word integer modes.\n (define_mode_iterator DWIH [(SI \"!TARGET_64BIT\")\n \t\t\t    (DI \"TARGET_64BIT\")])\n@@ -5710,32 +5713,6 @@\n    (parallel [(set (match_dup 0) (plus:SWI48 (match_dup 0) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])])\n \n-;; Convert add to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand:SWI 0 \"register_operand\")\n-\t(plus:SWI (match_operand:SWI 1 \"register_operand\")\n-\t\t  (match_operand:SWI 2 \"<nonmemory_operand>\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && ix86_lea_for_add_ok (insn, operands)\" \n-  [(const_int 0)]\n-{\n-  machine_mode mode = <MODE>mode;\n-  rtx pat;\n-\n-  if (<MODE_SIZE> < GET_MODE_SIZE (SImode))\n-    { \n-      mode = SImode; \n-      operands[0] = gen_lowpart (mode, operands[0]);\n-      operands[1] = gen_lowpart (mode, operands[1]);\n-      operands[2] = gen_lowpart (mode, operands[2]);\n-    }\n-\n-  pat = gen_rtx_PLUS (mode, operands[1], operands[2]);\n-\n-  emit_insn (gen_rtx_SET (operands[0], pat));\n-  DONE;\n-})\n-\n ;; Split non destructive adds if we cannot use lea.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n@@ -5751,6 +5728,24 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"operands[3] = gen_lowpart (SImode, operands[0]);\")\n \n+;; Convert add to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(plus:SWI (match_operand:SWI 1 \"register_operand\")\n+\t\t  (match_operand:SWI 2 \"<nonmemory_operand>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed && ix86_lea_for_add_ok (insn, operands)\" \n+  [(set (match_dup 0)\n+\t(plus:<LEAMODE> (match_dup 1) (match_dup 2)))]\n+{\n+  if (<MODE>mode != <LEAMODE>mode)\n+    {\n+      operands[0] = gen_lowpart (<LEAMODE>mode, operands[0]);\n+      operands[1] = gen_lowpart (<LEAMODE>mode, operands[1]);\n+      operands[2] = gen_lowpart (<LEAMODE>mode, operands[2]);\n+    }\n+})\n+\n ;; Convert add to the lea pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n@@ -6237,7 +6232,7 @@\n   [(set (match_operand:SWI12 0 \"register_operand\" \"=r\")\n \t(plus:SWI12\n \t  (mult:SWI12 (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n-\t\t      (match_operand:SWI12 2 \"const248_operand\" \"n\"))\n+\t\t      (match_operand 2 \"const248_operand\" \"n\"))\n \t  (match_operand:SWI12 3 \"nonmemory_operand\" \"ri\")))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"#\"\n@@ -6259,7 +6254,7 @@\n \t(plus:SWI12\n \t  (plus:SWI12\n \t    (mult:SWI12 (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n-\t\t\t(match_operand:SWI12 2 \"const248_operand\" \"n\"))\n+\t\t\t(match_operand 2 \"const248_operand\" \"n\"))\n \t    (match_operand:SWI12 3 \"register_operand\" \"r\"))\n \t  (match_operand:SWI12 4 \"immediate_operand\" \"i\")))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n@@ -6285,8 +6280,8 @@\n \t(any_or:SWI12\n \t  (ashift:SWI12\n \t    (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n-\t    (match_operand:SWI12 2 \"const_0_to_3_operand\" \"n\"))\n-\t  (match_operand:SWI12 3 \"const_int_operand\" \"n\")))]\n+\t    (match_operand 2 \"const_0_to_3_operand\" \"n\"))\n+\t  (match_operand 3 \"const_int_operand\" \"n\")))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && ((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n        < (HOST_WIDE_INT_1U << INTVAL (operands[2])))\"\n@@ -6309,8 +6304,8 @@\n \t(any_or:SWI48\n \t  (ashift:SWI48\n \t    (match_operand:SWI48 1 \"index_register_operand\" \"l\")\n-\t    (match_operand:SWI48 2 \"const_0_to_3_operand\" \"n\"))\n-\t  (match_operand:SWI48 3 \"const_int_operand\" \"n\")))]\n+\t    (match_operand 2 \"const_0_to_3_operand\" \"n\"))\n+\t  (match_operand 3 \"const_int_operand\" \"n\")))]\n   \"(unsigned HOST_WIDE_INT) INTVAL (operands[3])\n    < (HOST_WIDE_INT_1U << INTVAL (operands[2]))\"\n   \"#\"\n@@ -10063,47 +10058,37 @@\n \n ;; Convert ashift to the lea pattern to avoid flags dependency.\n (define_split\n-  [(set (match_operand 0 \"register_operand\")\n-\t(ashift (match_operand 1 \"index_register_operand\")\n-                (match_operand:QI 2 \"const_int_operand\")))\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(ashift:SWI (match_operand:SWI 1 \"index_register_operand\")\n+\t\t    (match_operand 2 \"const_0_to_3_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"GET_MODE (operands[0]) == GET_MODE (operands[1])\n-   && reload_completed\n+  \"reload_completed\n    && REGNO (operands[0]) != REGNO (operands[1])\"\n-  [(const_int 0)]\n+  [(set (match_dup 0)\n+\t(mult:<LEAMODE> (match_dup 1) (match_dup 2)))]\n {\n-  machine_mode mode = GET_MODE (operands[0]);\n-  rtx pat;\n-\n-  if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode))\n-    { \n-      mode = SImode; \n-      operands[0] = gen_lowpart (mode, operands[0]);\n-      operands[1] = gen_lowpart (mode, operands[1]);\n+  if (<MODE>mode != <LEAMODE>mode)\n+    {\n+      operands[0] = gen_lowpart (<LEAMODE>mode, operands[0]);\n+      operands[1] = gen_lowpart (<LEAMODE>mode, operands[1]);\n     }\n-\n-  operands[2] = gen_int_mode (1 << INTVAL (operands[2]), mode);\n-\n-  pat = gen_rtx_MULT (mode, operands[1], operands[2]);\n-\n-  emit_insn (gen_rtx_SET (operands[0], pat));\n-  DONE;\n+  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n })\n \n ;; Convert ashift to the lea pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(zero_extend:DI\n \t  (ashift:SI (match_operand:SI 1 \"index_register_operand\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\"))))\n+\t\t     (match_operand 2 \"const_0_to_3_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && reload_completed\n    && REGNO (operands[0]) != REGNO (operands[1])\"\n   [(set (match_dup 0)\n \t(zero_extend:DI (mult:SI (match_dup 1) (match_dup 2))))]\n {\n   operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_int_mode (1 << INTVAL (operands[2]), SImode);\n+  operands[2] = GEN_INT (1 << INTVAL (operands[2]));\n })\n \n ;; This pattern can't accept a variable shift count, since shifts by"}]}