{"sha": "a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1ZjE1NzQyYWIwNGQ0OGZiNTk5YzliNjUyM2ZmYmU4ZjVkODM3Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-09-22T15:18:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-09-22T15:18:26Z"}, "message": "Disconnect -Wabi=<n> from -fabi-compat-version=<n>.\n\ngcc/c-family/\n\t* c-common.h (abi_compat_version_crosses): New.\n\t(warn_abi_version): Declare.\n\t* c-common.c: Define it.\n\t* c-opts.c (c_common_post_options): Handle it.\n\tflag_abi_compat_version defaults to 8.\ngcc/cp/\n\t* mangle.c (abi_warn_or_compat_version_crosses): New.\n\tUse it instead of abi_version_crosses.\n\t(mangle_decl): Deal with -fabi-compat-version and -Wabi separately.\n\nFrom-SVN: r228017", "tree": {"sha": "44c7e77abec314f6ccab830cf576cb24d797c18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44c7e77abec314f6ccab830cf576cb24d797c18e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8013b816cc8b2de17db1a5115f4df482f0acbc6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8013b816cc8b2de17db1a5115f4df482f0acbc6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8013b816cc8b2de17db1a5115f4df482f0acbc6d"}], "stats": {"total": 180, "additions": 131, "deletions": 49}, "files": [{"sha": "bccbbfaffc6188864203d93afd3a3f5fddcf955f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "patch": "@@ -1,3 +1,11 @@\n+2015-09-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.h (abi_compat_version_crosses): New.\n+\t(warn_abi_version): Declare.\n+\t* c-common.c: Define it.\n+\t* c-opts.c (c_common_post_options): Handle it.\n+\tflag_abi_compat_version defaults to 8.\n+\n 2015-09-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tComplete the implementation of N4230, Nested namespace definition."}, {"sha": "879f4db86b1ad2c3699fc4dac9fea81c32c09b00", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "patch": "@@ -239,6 +239,9 @@ const char *constant_string_class_name;\n \n /* C++ language option variables.  */\n \n+/* The reference version of the ABI for -Wabi.  */\n+\n+int warn_abi_version = -1;\n \n /* Nonzero means generate separate instantiation control files and\n    juggle them at link time.  */"}, {"sha": "0b4d993c3c9cbaac40c027a29df2cfb3776c1b0b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "patch": "@@ -648,14 +648,24 @@ extern const char *constant_string_class_name;\n \n /* C++ language option variables.  */\n \n+/* The reference version of the ABI for -Wabi.  */\n+\n+extern int warn_abi_version;\n \n /* Return TRUE if one of {flag_abi_version,flag_abi_compat_version} is\n-   less than N and the other is at least N, for use by -Wabi.  */\n-#define abi_version_crosses(N)\t\t\t\\\n+   less than N and the other is at least N.  */\n+#define abi_compat_version_crosses(N)\t\t\\\n   (abi_version_at_least(N)\t\t\t\\\n    != (flag_abi_compat_version == 0\t\t\\\n        || flag_abi_compat_version >= (N)))\n \n+/* Return TRUE if one of {flag_abi_version,warn_abi_version} is\n+   less than N and the other is at least N, for use by -Wabi.  */\n+#define abi_version_crosses(N)\t\t\t\\\n+  (abi_version_at_least(N)\t\t\t\\\n+   != (warn_abi_version == 0\t\t\t\\\n+       || warn_abi_version >= (N)))\n+\n /* Nonzero means generate separate instantiation control files and\n    juggle them at link time.  */\n "}, {"sha": "bf2e6b07e07e162f84148ef2cdcddb3dcac0298b", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "patch": "@@ -397,7 +397,9 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t  warning (0, \"%<-Wabi=1%> is not supported, using =2\");\n \t  value = 2;\n \t}\n-      flag_abi_compat_version = value;\n+      warn_abi_version = value;\n+      if (flag_abi_compat_version == -1)\n+\tflag_abi_compat_version = value;\n       break;\n \n     case OPT_fcanonical_system_headers:\n@@ -870,20 +872,24 @@ c_common_post_options (const char **pfilename)\n   if (flag_declone_ctor_dtor == -1)\n     flag_declone_ctor_dtor = optimize_size;\n \n+  if (warn_abi_version == -1)\n+    {\n+      if (flag_abi_compat_version != -1)\n+\twarn_abi_version = flag_abi_compat_version;\n+      else\n+\twarn_abi_version = 0;\n+    }\n+\n   if (flag_abi_compat_version == 1)\n     {\n       warning (0, \"%<-fabi-compat-version=1%> is not supported, using =2\");\n       flag_abi_compat_version = 2;\n     }\n   else if (flag_abi_compat_version == -1)\n     {\n-      /* Generate compatibility aliases for ABI v2 (3.4-4.9) by default. */\n-      flag_abi_compat_version = (flag_abi_version == 0 ? 2 : 0);\n-\n-      /* But don't warn about backward compatibility unless explicitly\n-\t requested with -Wabi=n.  */\n-      if (flag_abi_version == 0)\n-\twarn_abi = false;\n+      /* Generate compatibility aliases for ABI v8 (5.1) by default. */\n+      flag_abi_compat_version\n+\t= (flag_abi_version == 0 ? 8 : 0);\n     }\n \n   /* Change flag_abi_version to be the actual current ABI level for the"}, {"sha": "e9a21f42eb3d988975cba07f79eafde3e5b768c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "patch": "@@ -1,3 +1,9 @@\n+2015-09-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (abi_warn_or_compat_version_crosses): New.\n+\tUse it instead of abi_version_crosses.\n+\t(mangle_decl): Deal with -fabi-compat-version and -Wabi separately.\n+\n 2015-09-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tComplete the implementation of N4230, Nested namespace definition."}, {"sha": "248d280a3fd76c1949a3621784e236cef8e716d2", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "patch": "@@ -94,6 +94,11 @@ along with GCC; see the file COPYING3.  If not see\n        || (CLASSTYPE_TEMPLATE_INFO (NODE) != NULL\t\t\t\\\n \t   && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))))\n \n+/* For deciding whether to set G.need_abi_warning, we need to consider both\n+   warn_abi_version and flag_abi_compat_version.  */\n+#define abi_warn_or_compat_version_crosses(N) \\\n+  (abi_version_crosses (N) || abi_compat_version_crosses (N))\n+\n /* Things we only need one of.  This module is not reentrant.  */\n struct GTY(()) globals {\n   /* An array of the current substitution candidates, in the order\n@@ -829,7 +834,7 @@ write_name (tree decl, const int ignore_local_scope)\n \n   gcc_assert (context != NULL_TREE);\n \n-  if (abi_version_crosses (7)\n+  if (abi_warn_or_compat_version_crosses (7)\n       && ignore_local_scope\n       && TREE_CODE (context) == PARM_DECL)\n     G.need_abi_warning = 1;\n@@ -1918,7 +1923,7 @@ write_type (tree type)\n \t    write_function_type (t);\n \t  else\n \t    write_type (t);\n-\t  if (abi_version_crosses (8))\n+\t  if (abi_warn_or_compat_version_crosses (8))\n \t    G.need_abi_warning = 1;\n \t}\n       else\n@@ -2027,7 +2032,7 @@ write_type (tree type)\n \t\t   but you can't have a pointer/reference to such a type.  */\n \t\tif (TREE_CODE (target) == FUNCTION_TYPE)\n \t\t  {\n-\t\t    if (abi_version_crosses (5)\n+\t\t    if (abi_warn_or_compat_version_crosses (5)\n \t\t\t&& TYPE_QUALS (target) != TYPE_UNQUALIFIED)\n \t\t      G.need_abi_warning = 1;\n \t\t    if (abi_version_at_least (5))\n@@ -2073,7 +2078,7 @@ write_type (tree type)\n \t\t}\n \t      else\n \t\twrite_string (\"U8__vector\");\n-\t      if (abi_version_crosses (4))\n+\t      if (abi_warn_or_compat_version_crosses (4))\n \t\tG.need_abi_warning = 1;\n \t      write_type (TREE_TYPE (type));\n \t      break;\n@@ -2110,7 +2115,7 @@ write_type (tree type)\n \n \t\t  if (etype && !type_uses_auto (etype))\n \t\t    {\n-\t\t      if (abi_version_crosses (5))\n+\t\t      if (abi_warn_or_compat_version_crosses (5))\n \t\t\tG.need_abi_warning = 1;\n \t\t      if (!abi_version_at_least (5))\n \t\t\t{\n@@ -2135,7 +2140,7 @@ write_type (tree type)\n \t      write_string (\"Dn\");\n \t      if (abi_version_at_least (7))\n \t\t++is_builtin_type;\n-\t      if (abi_version_crosses (7))\n+\t      if (abi_warn_or_compat_version_crosses (7))\n \t\tG.need_abi_warning = 1;\n \t      break;\n \n@@ -2207,7 +2212,7 @@ write_CV_qualifiers_for_type (const tree type)\n \t      && !is_attribute_p (\"abi_tag\", name))\n \t    vec.safe_push (a);\n \t}\n-      if (abi_version_crosses (10) && !vec.is_empty ())\n+      if (abi_warn_or_compat_version_crosses (10) && !vec.is_empty ())\n \tG.need_abi_warning = true;\n       if (abi_version_at_least (10))\n \t{\n@@ -2747,7 +2752,7 @@ write_expression (tree expr)\n \t      write_char ('L');\n \t      write_unsigned_number (delta - 1);\n \t    }\n-\t  if (abi_version_crosses (5))\n+\t  if (abi_warn_or_compat_version_crosses (5))\n \t    G.need_abi_warning = true;\n \t}\n       write_char ('p');\n@@ -2989,7 +2994,7 @@ write_expression (tree expr)\n       if (code == CONST_CAST_EXPR\n \t  || code == STATIC_CAST_EXPR)\n \t{\n-\t  if (abi_version_crosses (6))\n+\t  if (abi_warn_or_compat_version_crosses (6))\n \t    G.need_abi_warning = 1;\n \t  if (!abi_version_at_least (6))\n \t    name = operator_name_info[CAST_EXPR].mangled_name;\n@@ -3063,7 +3068,7 @@ write_expression (tree expr)\n \tcase PREDECREMENT_EXPR:\n \t  if (abi_version_at_least (6))\n \t    write_char ('_');\n-\t  if (abi_version_crosses (6))\n+\t  if (abi_warn_or_compat_version_crosses (6))\n \t    G.need_abi_warning = 1;\n \t  /* Fall through.  */\n \n@@ -3200,7 +3205,7 @@ write_template_arg (tree node)\n     {\n       if (abi_version_at_least (6))\n \tnode = BASELINK_FUNCTIONS (node);\n-      if (abi_version_crosses (6))\n+      if (abi_warn_or_compat_version_crosses (6))\n \t/* We wrongly wrapped a class-scope function in X/E.  */\n \tG.need_abi_warning = 1;\n     }\n@@ -3214,7 +3219,7 @@ write_template_arg (tree node)\n \twrite_char ('J');\n       else\n \twrite_char ('I');\n-      if (abi_version_crosses (6))\n+      if (abi_warn_or_compat_version_crosses (6))\n \tG.need_abi_warning = 1;\n       for (i = 0; i < length; ++i)\n         write_template_arg (TREE_VEC_ELT (args, i));\n@@ -3238,7 +3243,7 @@ write_template_arg (tree node)\n \twrite_char ('Z');\n       else\n \twrite_string (\"_Z\");\n-      if (abi_version_crosses (3))\n+      if (abi_warn_or_compat_version_crosses (3))\n \tG.need_abi_warning = 1;\n       write_encoding (node);\n       write_char ('E');\n@@ -3627,32 +3632,41 @@ mangle_decl (const tree decl)\n \t}\n \n       save_ver = flag_abi_version;\n+\n       flag_abi_version = flag_abi_compat_version;\n       id2 = mangle_decl_string (decl);\n       id2 = targetm.mangle_decl_assembler_name (decl, id2);\n-      flag_abi_version = save_ver;\n \n-      if (id2 == id)\n-\treturn;\n+      if (id2 != id)\n+\tnote_mangling_alias (decl, id2);\n \n       if (warn_abi)\n \t{\n-\t  if (flag_abi_compat_version != 0\n-\t      && abi_version_at_least (flag_abi_compat_version))\n+\t  if (flag_abi_compat_version != warn_abi_version)\n+\t    {\n+\t      flag_abi_version = warn_abi_version;\n+\t      id2 = mangle_decl_string (decl);\n+\t      id2 = targetm.mangle_decl_assembler_name (decl, id2);\n+\t    }\n+\n+\t  if (id2 == id)\n+\t    /* OK.  */;\n+\t  else if (warn_abi_version != 0\n+\t\t   && abi_version_at_least (warn_abi_version))\n \t    warning_at (DECL_SOURCE_LOCATION (G.entity), OPT_Wabi,\n \t\t\t\"the mangled name of %qD changed between \"\n \t\t\t\"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n-\t\t\tG.entity, flag_abi_compat_version, id2,\n+\t\t\tG.entity, warn_abi_version, id2,\n \t\t\tflag_abi_version, id);\n \t  else\n \t    warning_at (DECL_SOURCE_LOCATION (G.entity), OPT_Wabi,\n \t\t\t\"the mangled name of %qD changes between \"\n \t\t\t\"-fabi-version=%d (%D) and -fabi-version=%d (%D)\",\n \t\t\tG.entity, flag_abi_version, id,\n-\t\t\tflag_abi_compat_version, id2);\n+\t\t\twarn_abi_version, id2);\n \t}\n \n-      note_mangling_alias (decl, id2);\n+      flag_abi_version = save_ver;\n     }\n }\n "}, {"sha": "f0b7cc4089e6a666816960ea0d64dde19de156bf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 53, "deletions": 18, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f15742ab04d48fb599c9b6523ffbe8f5d837c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a75f15742ab04d48fb599c9b6523ffbe8f5d837c", "patch": "@@ -2130,6 +2130,13 @@ scope.\n Version 8, which first appeared in G++ 4.9, corrects the substitution\n behavior of function types with function-cv-qualifiers.\n \n+Version 9, which first appeared in G++ 5.2, corrects the alignment of\n+@code{nullptr_t}.\n+\n+Version 10, which first appeared in G++ 6.1, adds mangling of\n+attributes that affect type identity, such as ia32 calling convention\n+attributes (e.g. @samp{stdcall}).\n+\n See also @option{-Wabi}.\n \n @item -fabi-compat-version=@var{n}\n@@ -2139,10 +2146,15 @@ works around mangling changes by creating an alias with the correct\n mangled name when defining a symbol with an incorrect mangled name.\n This switch specifies which ABI version to use for the alias.\n \n-With @option{-fabi-version=0} (the default), this defaults to 2.  If\n-another ABI version is explicitly selected, this defaults to 0.\n+With @option{-fabi-version=0} (the default), this defaults to 8 (GCC 5\n+compatibility).  If another ABI version is explicitly selected, this\n+defaults to 0.  For compatibility with GCC versions 3.2 through 4.9,\n+use @option{-fabi-compat-version=2}.\n \n-The compatibility version is also set by @option{-Wabi=@var{n}}.\n+If this option is not provided but @option{-Wabi=@var{n}} is, that\n+version is used for compatibility aliases.  If this option is provided\n+along with @option{-Wabi} (without the version), the version from this\n+option is used for the warning.\n \n @item -fno-access-control\n @opindex fno-access-control\n@@ -2555,13 +2567,25 @@ have meanings only for C++ programs:\n @item -Wabi @r{(C, Objective-C, C++ and Objective-C++ only)}\n @opindex Wabi\n @opindex Wno-abi\n-When an explicit @option{-fabi-version=@var{n}} option is used, causes\n-G++ to warn when it generates code that is probably not compatible with the\n-vendor-neutral C++ ABI@.  Since G++ now defaults to\n-@option{-fabi-version=0}, @option{-Wabi} has no effect unless either\n-an older ABI version is selected (with @option{-fabi-version=@var{n}})\n-or an older compatibility version is selected (with\n-@option{-Wabi=@var{n}} or @option{-fabi-compat-version=@var{n}}).\n+Warn when G++ it generates code that is probably not compatible with\n+the vendor-neutral C++ ABI@.  Since G++ now defaults to updating the\n+ABI with each major release, normally @option{-Wabi} will warn only if\n+there is a check added later in a release series for an ABI issue\n+discovered since the initial release.  @option{-Wabi} will warn about\n+more things if an older ABI version is selected (with\n+@option{-fabi-version=@var{n}}).\n+\n+@option{-Wabi} can also be used with an explicit version number to\n+warn about compatibility with a particular @option{-fabi-version}\n+level, e.g. @option{-Wabi=2} to warn about changes relative to\n+@option{-fabi-version=2}.\n+\n+If an explicit version number is provided and\n+@option{-fabi-compat-version} is not specified, the version number\n+from this option is used for compatibility aliases.  If no explicit\n+version number is provided with this option, but\n+@option{-fabi-compat-version} is specified, that version number is\n+used for ABI warnings.\n \n Although an effort has been made to warn about\n all such cases, there are probably some cases that are not warned about,\n@@ -2573,13 +2597,7 @@ You should rewrite your code to avoid these warnings if you are\n concerned about the fact that code generated by G++ may not be binary\n compatible with code generated by other compilers.\n \n-@option{-Wabi} can also be used with an explicit version number to\n-warn about compatibility with a particular @option{-fabi-version}\n-level, e.g. @option{-Wabi=2} to warn about changes relative to\n-@option{-fabi-version=2}.  Specifying a version number also sets\n-@option{-fabi-compat-version=@var{n}}.\n-\n-The known incompatibilities in @option{-fabi-version=2} (which was the\n+Known incompatibilities in @option{-fabi-version=2} (which was the\n default from GCC 3.4 to 4.9) include:\n \n @itemize @bullet\n@@ -2631,7 +2649,24 @@ When mangling a function type with function-cv-qualifiers, the\n un-qualified function type was incorrectly treated as a substitution\n candidate.\n \n-This was fixed in @option{-fabi-version=8}.\n+This was fixed in @option{-fabi-version=8}, the default for GCC 5.1.\n+\n+@item\n+@code{decltype(nullptr)} incorrectly had an alignment of 1, leading to\n+unaligned accesses.  Note that this did not affect the ABI of a\n+function with a @code{nullptr_t} parameter, as parameters have a\n+minimum alignment.\n+\n+This was fixed in @option{-fabi-version=9}, the default for GCC 5.2.\n+\n+@item\n+Target-specific attributes that affect the identity of a type, such as\n+ia32 calling conventions on a function type (stdcall, regparm, etc.),\n+did not affect the mangled name, leading to name collisions when\n+function pointers were used as template arguments.\n+\n+This was fixed in @option{-fabi-version=10}, the default for GCC 6.1.\n+\n @end itemize\n \n It also warns about psABI-related changes.  The known psABI changes at this"}]}