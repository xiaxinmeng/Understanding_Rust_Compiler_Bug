{"sha": "bcead286bfebf2312981135b9c7d72eadc6d396c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlYWQyODZiZmViZjIzMTI5ODExMzViOWM3ZDcyZWFkYzZkMzk2Yw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-15T09:36:40Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-15T09:36:40Z"}, "message": "invoke.texi (C6X Options): New section.\n\ngcc/\n\t* doc/invoke.texi (C6X Options): New section.\n\t* doc/md.texi (TI C6X family): New section.\n\t* config.gcc: Handle tic6x, in particular tic6x-*-elf and\n\ttic6x-*-uclinux.\n\t* longlong.h (add_ssaaaa, __umulsidi3, umul_ppmm,\n\tcount_leading_zeros, count_trailing_zeros, UMUL_TIME, UDIV_TIME):\n\tProvide C6X definitions.\n\t* config/c6x/c6x.md: New file.\n\t* config/c6x/constraints.md: New file.\n\t* config/c6x/predicates.md: New file.\n\t* config/c6x/c6x-sched.md.in: New file.\n\t* config/c6x/c6x-sched.md: New file.\n\t* config/c6x/gensched.sh: New file.\n\t* config/c6x/c6x-mult.md.in: New file.\n\t* config/c6x/genmult.sh: New file.\n\t* config/c6x/c6x-mult.md: New file.\n\t* config/c6x/sync.md: New file.\n\t* config/c6x/c6x-protos.h: New file.\n\t* config/c6x/sfp-machine.h: New file.\n\t* config/c6x/c6x.c: New file.\n\t* config/c6x/c6x.h: New file.\n\t* config/c6x/crti.s: New file.\n\t* config/c6x/crtn.s: New file.\n\t* config/c6x/lib1funcs.asm: New file.\n\t* config/c6x/c6x-modes.def: New file.\n\t* config/c6x/genopt.sh: New file.\n\t* config/c6x/c6x.opt: New file.\n\t* config/c6x/c6x-tables.opt: New file.\n\t* config/c6x/c6x-opts.h: New file.\n\t* config/c6x/c6x-isas.def: New file.\n\t* config/c6x/elf.h: New file.\n\t* config/c6x/elf-common.h: New file.\n\t* config/c6x/uclinux-elf.h: New file.\n\t* config/c6x/t-c6x: New file.\n\t* config/c6x/t-c6x-elf: New file.\n\t* config/c6x/t-c6x-uclinux: New file.\n\t* config/c6x/t-c6x-softfp: New file.\n\t* config/c6x/gtd.c: New file.\n\t* config/c6x/gtf.c: New file.\n\t* config/c6x/ltd.c: New file.\n\t* config/c6x/ltf.c: New file.\n\t* config/c6x/ged.c: New file.\n\t* config/c6x/gef.c: New file.\n\t* config/c6x/led.c: New file.\n\t* config/c6x/lef.c: New file.\n\t* config/c6x/eqd.c: New file.\n\t* config/c6x/eqf.c: New file.\n\t* config/c6x/libgcc-c6xeabi.ver: New file.\n\ncontrib/\n\t* gcc_update: Add C6X generated files.\n\t* contrib/config-list.mk: Add c6x-elf and c6x-uclinux.\n\nlibgcc/\n\t* config.host: Handle tic6x-*-*.\n\t* config/c6x/c6x-abi.h: New file.\n\nFrom-SVN: r176308", "tree": {"sha": "c4bd2120a6d9ab956422bfe82ffb27dcc91bc73b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4bd2120a6d9ab956422bfe82ffb27dcc91bc73b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcead286bfebf2312981135b9c7d72eadc6d396c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcead286bfebf2312981135b9c7d72eadc6d396c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcead286bfebf2312981135b9c7d72eadc6d396c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcead286bfebf2312981135b9c7d72eadc6d396c/comments", "author": null, "committer": null, "parents": [{"sha": "9e36aa2367507a6700c4edbd693b530cb11c64fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e36aa2367507a6700c4edbd693b530cb11c64fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e36aa2367507a6700c4edbd693b530cb11c64fa"}], "stats": {"total": 14800, "additions": 14796, "deletions": 4}, "files": [{"sha": "a69f810f022eed59e0a52c59741b185091407f9a", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -1,3 +1,8 @@\n+2011-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gcc_update: Add C6X generated files.\n+\t* contrib/config-list.mk: Add c6x-elf and c6x-uclinux.\n+\n 2011-07-01  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config-list.mk (LIST): Append OPT-enable-obsolete to"}, {"sha": "b421ccca25fdf0af767eebc7ed356f48d9ac5f49", "filename": "contrib/config-list.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -18,7 +18,7 @@ LIST = alpha-linux-gnu alpha-freebsd6 alpha-netbsd alpha-openbsd \\\n   arm-linux-androideabi arm-uclinux_eabi arm-ecos-elf arm-eabi \\\n   arm-symbianelf arm-rtems arm-elf arm-wince-pe avr-rtems avr-elf \\\n   bfin-elf bfin-uclinux bfin-linux-uclibc bfin-rtems bfin-openbsd \\\n-  cris-elf cris-linux crisv32-elf crisv32-linux fido-elf \\\n+  c6x-elf c6x-uclinux cris-elf cris-linux crisv32-elf crisv32-linux fido-elf \\\n   fr30-elf frv-elf frv-linux h8300-elf h8300-rtems hppa-linux-gnu \\\n   hppa-linux-gnuOPT-enable-sjlj-exceptions=yes hppa64-linux-gnu \\\n   hppa2.0-hpux10.1 hppa64-hpux11.3 \\"}, {"sha": "c368936e51e02ce6452c7e391fcfbbf48febca14", "filename": "contrib/gcc_update", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -82,6 +82,9 @@ gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.sh\n gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/arm-fpus.def gcc/config/arm/genopt.sh\n gcc/config/avr/avr-tables.opt: gcc/config/avr/avr-mcus.def gcc/config/avr/genopt.sh\n+gcc/config/c6x/c6x-tables.opt: gcc/config/c6x/c6x-isas.def gcc/config/c6x/genopt.sh\n+gcc/config/c6x/c6x-sched.md: gcc/config/c6x/c6x-sched.md.in gcc/config/c6x/gensched.sh\n+gcc/config/c6x/c6x-mult.md: gcc/config/c6x/c6x-mult.md.in gcc/config/c6x/genmult.sh\n gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68k/m68k-isas.def gcc/config/m68k/m68k-microarchs.def gcc/config/m68k/genopt.sh\n gcc/config/mips/mips-tables.opt: gcc/config/mips/mips-cpus.def gcc/config/mips/genopt.sh\n gcc/config/rs6000/rs6000-tables.opt: gcc/config/rs6000/rs6000-cpus.def gcc/config/rs6000/genopt.sh"}, {"sha": "ec216832686ee31c2801f93dbeea5664d2fd81cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -1,3 +1,54 @@\n+2011-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* doc/invoke.texi (C6X Options): New section.\n+\t* doc/md.texi (TI C6X family): New section.\n+\t* config.gcc: Handle tic6x, in particular tic6x-*-elf and\n+\ttic6x-*-uclinux.\n+\t* longlong.h (add_ssaaaa, __umulsidi3, umul_ppmm,\n+\tcount_leading_zeros, count_trailing_zeros, UMUL_TIME, UDIV_TIME):\n+\tProvide C6X definitions.\n+\t* config/c6x/c6x.md: New file.\n+\t* config/c6x/constraints.md: New file.\n+\t* config/c6x/predicates.md: New file.\n+\t* config/c6x/c6x-sched.md.in: New file.\n+\t* config/c6x/c6x-sched.md: New file.\n+\t* config/c6x/gensched.sh: New file.\n+\t* config/c6x/c6x-mult.md.in: New file.\n+\t* config/c6x/genmult.sh: New file.\n+\t* config/c6x/c6x-mult.md: New file.\n+\t* config/c6x/sync.md: New file.\n+\t* config/c6x/c6x-protos.h: New file.\n+\t* config/c6x/sfp-machine.h: New file.\n+\t* config/c6x/c6x.c: New file.\n+\t* config/c6x/c6x.h: New file.\n+\t* config/c6x/crti.s: New file.\n+\t* config/c6x/crtn.s: New file.\n+\t* config/c6x/lib1funcs.asm: New file.\n+\t* config/c6x/c6x-modes.def: New file.\n+\t* config/c6x/genopt.sh: New file.\n+\t* config/c6x/c6x.opt: New file.\n+\t* config/c6x/c6x-tables.opt: New file.\n+\t* config/c6x/c6x-opts.h: New file.\n+\t* config/c6x/c6x-isas.def: New file.\n+\t* config/c6x/elf.h: New file.\n+\t* config/c6x/elf-common.h: New file.\n+\t* config/c6x/uclinux-elf.h: New file.\n+\t* config/c6x/t-c6x: New file.\n+\t* config/c6x/t-c6x-elf: New file.\n+\t* config/c6x/t-c6x-uclinux: New file.\n+\t* config/c6x/t-c6x-softfp: New file.\n+\t* config/c6x/gtd.c: New file.\n+\t* config/c6x/gtf.c: New file.\n+\t* config/c6x/ltd.c: New file.\n+\t* config/c6x/ltf.c: New file.\n+\t* config/c6x/ged.c: New file.\n+\t* config/c6x/gef.c: New file.\n+\t* config/c6x/led.c: New file.\n+\t* config/c6x/lef.c: New file.\n+\t* config/c6x/eqd.c: New file.\n+\t* config/c6x/eqf.c: New file.\n+\t* config/c6x/libgcc-c6xeabi.ver: New file.\n+\n 2011-07-14  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR tree-opt/49309"}, {"sha": "0ca4f788e9d6cce8c9710f1396ccf06eb4eaf6c9", "filename": "gcc/config.gcc", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -437,6 +437,11 @@ sh[123456789lbe]*-*-* | sh-*-*)\n v850*-*-*)\n \tcpu_type=v850\n \t;;\n+tic6x-*-*)\n+\tcpu_type=c6x\n+\textra_headers=\"c6x_intrinsics.h\"\n+\textra_options=\"${extra_options} c6x/c6x-tables.opt\"\n+\t;;\n xtensa*-*-*)\n \textra_options=\"${extra_options} fused-madd.opt\"\n \t;;\n@@ -2561,7 +2566,24 @@ spu-*-elf*)\n \tc_target_objs=\"${c_target_objs} spu-c.o\"\n \tcxx_target_objs=\"${cxx_target_objs} spu-c.o\"\n \t;;\n-\n+tic6x-*-elf)\n+\ttm_file=\"elfos.h ${tm_file} c6x/elf-common.h c6x/elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h tm-dwarf2.h newlib-stdint.h\"\n+\tlibgcc_tm_file=\"${libgcc_tm_file} c6x/c6x-abi.h\"\n+\ttmake_file=\"c6x/t-c6x c6x/t-c6x-elf\"\n+\ttmake_file=\"${tmake_file} c6x/t-c6x-softfp soft-fp/t-softfp\"\n+\tuse_collect2=no\n+\t;;\n+tic6x-*-uclinux)\n+\ttm_file=\"elfos.h ${tm_file} gnu-user.h linux.h c6x/elf-common.h c6x/uclinux-elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h tm-dwarf2.h glibc-stdint.h\"\n+\ttm_file=\"${tm_file} ./sysroot-suffix.h\"\n+\tlibgcc_tm_file=\"${libgcc_tm_file} c6x/c6x-abi.h\"\n+\ttmake_file=\"t-slibgcc-elf-ver t-sysroot-suffix\"\n+\ttmake_file=\"${tmake_file} c6x/t-c6x c6x/t-c6x-elf c6x/t-c6x-uclinux\"\n+\ttmake_file=\"${tmake_file} c6x/t-c6x-softfp soft-fp/t-softfp\"\n+\tuse_collect2=no\n+\t;;\n v850*-*-*)\n \tcase ${target} in\n \tv850e2v3-*-*)\n@@ -3500,6 +3522,20 @@ case \"${target}\" in\n \t\tdone\n \t\t;;\n \n+\ttic6x-*-*)\n+\t\tsupported_defaults=\"arch\"\n+\n+\t\tcase ${with_arch} in\n+\t\t\"\" | c62x | c64x | c64x+ | c67x | c67x+ | c674x)\n+\t\t\t# OK\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown arch used in --with-arch=$with_arch.\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n+\n \tv850*-*-*)\n \t\tsupported_defaults=cpu\n \t\tcase ${with_cpu} in"}, {"sha": "84697636fec1e526a9646d6ea70f7cb636ce3ee9", "filename": "gcc/config/c6x/c6x-isas.def", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-isas.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-isas.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-isas.def?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,38 @@\n+/* C6X ISA names.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Define ISAs for the -march option, used both in C6X.c and to\n+   generate c6x-tables.opt.  Before including this file, define a\n+   macro:\n+\n+   C6X_ISA (NAME, ENUM_VALUE, FLAGS)\n+\n+   where NAME is the name for use with -march=, ENUM_VALUE is an enum\n+   corresponding to this arch, and FLAGS is a combination of flags\n+   that together specify the available instructions.  */\n+\n+C6X_ISA(\"c62x\", C6X_CPU_C62X, C6X_INSNS_C62X)\n+C6X_ISA(\"c64x\", C6X_CPU_C64X, C6X_INSNS_C62X | C6X_INSNS_C64X)\n+C6X_ISA(\"c64x+\", C6X_CPU_C64XP, C6X_INSNS_C62X | C6X_INSNS_C64X | C6X_INSNS_C64XP)\n+C6X_ISA(\"c67x\", C6X_CPU_C67X, C6X_INSNS_C62X | C6X_INSNS_C67X)\n+C6X_ISA(\"c67x+\", C6X_CPU_C67XP, C6X_INSNS_C62X | C6X_INSNS_C67X | C6X_INSNS_C67XP)\n+C6X_ISA(\"c674x\", C6X_CPU_C674X,\n+\t(C6X_INSNS_C62X | C6X_INSNS_C64X | C6X_INSNS_C64XP | C6X_INSNS_C67X\n+         | C6X_INSNS_C67XP | C6X_INSNS_C674X))"}, {"sha": "a5af026cd41a8d6d1faf7b8e9f8a8cedb92055d2", "filename": "gcc/config/c6x/c6x-modes.def", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-modes.def?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,24 @@\n+/* Definitions of target machine for GNU compiler, for TI C6x.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+VECTOR_MODES (INT, 4);        /*              V4QI V2HI */\n+VECTOR_MODES (INT, 8);        /*         V8QI V4HI V2SI */\n+\n+VECTOR_MODE (FRACT, SQ, 2); /* V2SQ.  */\n+VECTOR_MODE (FRACT, HQ, 2); /* V2HQ.  */"}, {"sha": "ec18ba31a7e262eb4770e7d00fedc96074b35e54", "filename": "gcc/config/c6x/c6x-mult.md", "status": "added", "additions": 840, "deletions": 0, "changes": 840, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-mult.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-mult.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-mult.md?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,840 @@\n+;; -*- buffer-read-only: t -*-\n+;; Generated automatically from c6x-mult.md.in by genmult.sh\n+;; Multiplication patterns for TI C6X.\n+;; This file is processed by genmult.sh to produce two variants of each\n+;; pattern, a normal one and a real_mult variant for modulo scheduling.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; -------------------------------------------------------------------------\n+;; Miscellaneous insns that execute on the M units\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"rotlsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (rotate:SI (match_operand:SI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t   (match_operand:SI 2 \"reg_or_ucst5_operand\" \"aIu5,bIu5,aIu5,bIu5\")))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\trotl\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"bitrevsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,a,b,b\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"a,?b,b,?a\")]\n+\t\t   UNSPEC_BITREV))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tbitr\\\\t%$\\\\t%1, %0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,y,n,y\")])\n+\n+;; Vector average.\n+\n+(define_insn \"avgv2hi3\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=a,b,a,b\")\n+        (unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"a,b,a,b\")] UNSPEC_AVG))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tavg2\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"uavgv4qi3\"\n+  [(set (match_operand:V4QI 0 \"register_operand\" \"=a,b,a,b\")\n+        (unspec:V4QI [(match_operand:V4QI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t      (match_operand:V4QI 2 \"register_operand\" \"a,b,a,b\")] UNSPEC_AVG))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tavgu4\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; -------------------------------------------------------------------------\n+;; Multiplication\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"mulhi3\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:HI (match_operand:HI 1 \"register_operand\" \"a,b,?b,?a\")\n+                 (match_operand:HI 2 \"reg_or_scst5_operand\" \"aIs5,bIs5,aIs5,bIs5\")))]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%2, %1, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_const\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,ab\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?ab\"))\n+                 (match_operand:HI 2 \"scst5_operand\" \"Is5,Is5,Is5\")))]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%2, %1, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y\")])\n+\n+(define_insn \"*mulhisi3_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"reg_or_scst5_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_lh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16))))]\n+  \"\"\n+  \"%|%.\\\\tmpylh\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_hl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (ashiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tmpyhl\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_hh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (ashiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16))))]\n+  \"\"\n+  \"%|%.\\\\tmpyh\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (zero_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tmpyu\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_lh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (lshiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16))))]\n+  \"\"\n+  \"%|%.\\\\tmpylhu\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_hl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (zero_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tmpyhlu\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_hh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (lshiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16))))]\n+  \"\"\n+  \"%|%.\\\\tmpyhu\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_const\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,ab\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?ab\"))\n+                 (match_operand:SI 2 \"scst5_operand\" \"Is5,Is5,Is5\")))]\n+  \"\"\n+  \"%|%.\\\\tmpysu\\\\t%$\\\\t%2, %1, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y\")])\n+\n+(define_insn \"*usmulhisi3_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"reg_or_scst5_operand\" \"aIs5,bIs5,bIs5,aIs5\"))))]\n+  \"\"\n+  \"%|%.\\\\tmpyus\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_lh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+\t(mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16))))]\n+  \"\"\n+  \"%|%.\\\\tmpyluhs\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_hl\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tmpyhuls\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_hh\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16))))]\n+  \"\"\n+  \"%|%.\\\\tmpyhus\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulsi3_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")))]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32\\\\t%$\\\\t%1, %2, %0\"\n+ [(set_attr \"type\" \"mpy4\")\n+  (set_attr \"units\" \"m\")\n+  (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"<u>mulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:DI (any_ext:DI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (any_ext:DI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32<u>\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a,b,a,b\")\n+        (mult:DI (zero_extend:DI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (sign_extend:DI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32us\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; Widening vector multiply and dot product\n+\n+(define_insn \"mulv2hiv2si3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=a,b,a,b\")\n+\t(mult:V2SI\n+\t (sign_extend:V2SI (match_operand:V2HI 1 \"register_operand\" \"a,b,a,b\"))\n+\t (sign_extend:V2SI (match_operand:V2HI 2 \"register_operand\" \"a,b,?b,?a\"))))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpy2\\\\t%$\\\\t%1, %2, %0\"\n+ [(set_attr \"type\" \"mpy4\")\n+  (set_attr \"units\" \"m\")\n+  (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulv4qiv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=a,b,a,b\")\n+\t(mult:V4HI\n+\t (zero_extend:V4HI (match_operand:V4QI 1 \"register_operand\" \"a,b,a,b\"))\n+\t (zero_extend:V4HI (match_operand:V4QI 2 \"register_operand\" \"a,b,?b,?a\"))))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpyu4\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulv4qiv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=a,b,a,b\")\n+\t(mult:V4HI\n+\t (zero_extend:V4HI (match_operand:V4QI 1 \"register_operand\" \"a,b,?b,?a\"))\n+\t (sign_extend:V4HI (match_operand:V4QI 2 \"register_operand\" \"a,b,a,b\"))))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpyus4\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"dotv2hi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a,b,a,b\")\n+\t(plus:SI\n+\t  (mult:SI\n+\t    (sign_extend:SI\n+\t      (vec_select:HI\n+\t\t(match_operand:V2HI 1 \"register_operand\" \"a,b,a,b\")\n+\t\t(parallel [(const_int 0)])))\n+\t    (sign_extend:SI\n+\t      (vec_select:HI\n+\t\t(match_operand:V2HI 2 \"register_operand\" \"a,b,?b,?a\")\n+\t\t(parallel [(const_int 0)]))))\n+\t  (mult:SI\n+\t    (sign_extend:SI\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (sign_extend:SI\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)]))))))]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tdotp2\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; Fractional multiply\n+\n+(define_insn \"mulv2hqv2sq3\"\n+  [(set (match_operand:V2SQ 0 \"register_operand\" \"=a,b,a,b\")\n+        (ss_mult:V2SQ\n+\t (fract_convert:V2SQ\n+\t  (match_operand:V2HQ 1 \"register_operand\" \"%a,b,?a,?b\"))\n+\t (fract_convert:V2SQ\n+\t  (match_operand:V2HQ 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tsmpy2\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3\"\n+  [(set (match_operand:SQ 0 \"register_operand\" \"=a,b,a,b\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 1 \"register_operand\" \"%a,b,?a,?b\"))\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tsmpy\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_lh\"\n+  [(set (match_operand:SQ 0 \"register_operand\" \"=a,b,a,b\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 1 \"register_operand\" \"a,b,?a,?b\"))\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 2 \"register_operand\" \"a,b,b,a\")))))]\n+  \"\"\n+  \"%|%.\\\\tsmpylh\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_hl\"\n+  [(set (match_operand:SQ 0 \"register_operand\" \"=a,b,a,b\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 1 \"register_operand\" \"a,b,b,a\")))\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 2 \"register_operand\" \"a,b,b,a\"))))]\n+  \"\"\n+  \"%|%.\\\\tsmpyhl\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_hh\"\n+  [(set (match_operand:SQ 0 \"register_operand\" \"=a,b,a,b\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 1 \"register_operand\" \"a,b,b,a\")))\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 2 \"register_operand\" \"a,b,b,a\")))))]\n+  \"\"\n+  \"%|%.\\\\tsmpyh\\\\t%$\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+;; Multiplication patterns for TI C6X.\n+;; This file is processed by genmult.sh to produce two variants of each\n+;; pattern, a normal one and a real_mult variant for modulo scheduling.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; -------------------------------------------------------------------------\n+;; Miscellaneous insns that execute on the M units\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"rotlsi3_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (rotate:SI (match_operand:SI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t   (match_operand:SI 2 \"reg_or_ucst5_operand\" \"aIu5,bIu5,aIu5,bIu5\"))] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\trotl\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"bitrevsi2_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JA,JB,JB\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"a,?b,b,?a\")]\n+\t\t   UNSPEC_BITREV)] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tbitr\\\\t%$\\\\t%1, %k0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,y,n,y\")])\n+\n+;; Vector average.\n+\n+(define_insn \"avgv2hi3_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"a,b,a,b\")] UNSPEC_AVG)] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tavg2\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"uavgv4qi3_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (unspec:V4QI [(match_operand:V4QI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t      (match_operand:V4QI 2 \"register_operand\" \"a,b,a,b\")] UNSPEC_AVG)] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tavgu4\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; -------------------------------------------------------------------------\n+;; Multiplication\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"mulhi3_real\"\n+  [(unspec [(match_operand:HI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:HI (match_operand:HI 1 \"register_operand\" \"a,b,?b,?a\")\n+                 (match_operand:HI 2 \"reg_or_scst5_operand\" \"aIs5,bIs5,aIs5,bIs5\"))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%2, %1, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_const_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JAJB\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?ab\"))\n+                 (match_operand:HI 2 \"scst5_operand\" \"Is5,Is5,Is5\"))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%2, %1, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y\")])\n+\n+(define_insn \"*mulhisi3_insn_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"reg_or_scst5_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_lh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpylh\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_hl_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (ashiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyhl\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_hh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (ashiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyh\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (zero_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyu\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_lh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (lshiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpylhu\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_hl_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (zero_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyhlu\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_hh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (lshiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyhu\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_const_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JAJB\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?ab\"))\n+                 (match_operand:SI 2 \"scst5_operand\" \"Is5,Is5,Is5\"))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpysu\\\\t%$\\\\t%2, %1, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y\")])\n+\n+(define_insn \"*usmulhisi3_insn_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"reg_or_scst5_operand\" \"aIs5,bIs5,bIs5,aIs5\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyus\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_lh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+\t(mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyluhs\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_hl_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyhuls\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_hh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tmpyhus\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulsi3_insn_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"a,b,b,a\"))] UNSPEC_REAL_MULT)]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32\\\\t%$\\\\t%1, %2, %k0\"\n+ [(set_attr \"type\" \"mpy4\")\n+  (set_attr \"units\" \"m\")\n+  (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"<u>mulsidi3_real\"\n+  [(unspec [(match_operand:DI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:DI (any_ext:DI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (any_ext:DI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32<u>\\\\t%$\\\\t%1, %2, %K0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulsidi3_real\"\n+  [(unspec [(match_operand:DI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (mult:DI (zero_extend:DI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (sign_extend:DI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32us\\\\t%$\\\\t%1, %2, %K0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; Widening vector multiply and dot product\n+\n+(define_insn \"mulv2hiv2si3_real\"\n+  [(unspec [(match_operand:V2SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+\t(mult:V2SI\n+\t (sign_extend:V2SI (match_operand:V2HI 1 \"register_operand\" \"a,b,a,b\"))\n+\t (sign_extend:V2SI (match_operand:V2HI 2 \"register_operand\" \"a,b,?b,?a\")))] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpy2\\\\t%$\\\\t%1, %2, %k0\"\n+ [(set_attr \"type\" \"mpy4\")\n+  (set_attr \"units\" \"m\")\n+  (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulv4qiv4hi3_real\"\n+  [(unspec [(match_operand:V4HI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+\t(mult:V4HI\n+\t (zero_extend:V4HI (match_operand:V4QI 1 \"register_operand\" \"a,b,a,b\"))\n+\t (zero_extend:V4HI (match_operand:V4QI 2 \"register_operand\" \"a,b,?b,?a\")))] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpyu4\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulv4qiv4hi3_real\"\n+  [(unspec [(match_operand:V4HI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+\t(mult:V4HI\n+\t (zero_extend:V4HI (match_operand:V4QI 1 \"register_operand\" \"a,b,?b,?a\"))\n+\t (sign_extend:V4HI (match_operand:V4QI 2 \"register_operand\" \"a,b,a,b\")))] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpyus4\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"dotv2hi_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+\t(plus:SI\n+\t  (mult:SI\n+\t    (sign_extend:SI\n+\t      (vec_select:HI\n+\t\t(match_operand:V2HI 1 \"register_operand\" \"a,b,a,b\")\n+\t\t(parallel [(const_int 0)])))\n+\t    (sign_extend:SI\n+\t      (vec_select:HI\n+\t\t(match_operand:V2HI 2 \"register_operand\" \"a,b,?b,?a\")\n+\t\t(parallel [(const_int 0)]))))\n+\t  (mult:SI\n+\t    (sign_extend:SI\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (sign_extend:SI\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))] UNSPEC_REAL_MULT)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tdotp2\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; Fractional multiply\n+\n+(define_insn \"mulv2hqv2sq3_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (ss_mult:V2SQ\n+\t (fract_convert:V2SQ\n+\t  (match_operand:V2HQ 1 \"register_operand\" \"%a,b,?a,?b\"))\n+\t (fract_convert:V2SQ\n+\t  (match_operand:V2HQ 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tsmpy2\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 1 \"register_operand\" \"%a,b,?a,?b\"))\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tsmpy\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_lh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 1 \"register_operand\" \"a,b,?a,?b\"))\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 2 \"register_operand\" \"a,b,b,a\"))))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tsmpylh\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_hl_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 1 \"register_operand\" \"a,b,b,a\")))\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 2 \"register_operand\" \"a,b,b,a\")))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tsmpyhl\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_hh_real\"\n+  [(unspec [(match_operand:SI 0 \"const_int_operand\" \"=JA,JB,JA,JB\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 1 \"register_operand\" \"a,b,b,a\")))\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 2 \"register_operand\" \"a,b,b,a\"))))] UNSPEC_REAL_MULT)]\n+  \"\"\n+  \"%|%.\\\\tsmpyh\\\\t%$\\\\t%1, %2, %k0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])"}, {"sha": "96de44fd368a34625cae3039d4c498c1aaeb1c39", "filename": "gcc/config/c6x/c6x-mult.md.in", "status": "added", "additions": 419, "deletions": 0, "changes": 419, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-mult.md.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-mult.md.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-mult.md.in?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,419 @@\n+;; Multiplication patterns for TI C6X.\n+;; This file is processed by genmult.sh to produce two variants of each\n+;; pattern, a normal one and a real_mult variant for modulo scheduling.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; -------------------------------------------------------------------------\n+;; Miscellaneous insns that execute on the M units\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"rotlsi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (rotate:SI (match_operand:SI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t   (match_operand:SI 2 \"reg_or_ucst5_operand\" \"aIu5,bIu5,aIu5,bIu5\"))_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\trotl\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"bitrevsi2_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_A_,_B_,_B_\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"a,?b,b,?a\")]\n+\t\t   UNSPEC_BITREV)_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tbitr\\\\t%$\\\\t%1, %_MODk_0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,y,n,y\")])\n+\n+;; Vector average.\n+\n+(define_insn \"avgv2hi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:_MV2HI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (unspec:V2HI [(match_operand:V2HI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"a,b,a,b\")] UNSPEC_AVG)_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tavg2\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"uavgv4qi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:_MV4QI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (unspec:V4QI [(match_operand:V4QI 1 \"register_operand\" \"a,b,?b,?a\")\n+\t\t      (match_operand:V4QI 2 \"register_operand\" \"a,b,a,b\")] UNSPEC_AVG)_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tavgu4\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"units\" \"m\")\n+   (set_attr \"type\" \"mpy2\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; -------------------------------------------------------------------------\n+;; Multiplication\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"mulhi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:HI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:HI (match_operand:HI 1 \"register_operand\" \"a,b,?b,?a\")\n+                 (match_operand:HI 2 \"reg_or_scst5_operand\" \"aIs5,bIs5,aIs5,bIs5\"))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%2, %1, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_const_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A__B_\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?ab\"))\n+                 (match_operand:HI 2 \"scst5_operand\" \"Is5,Is5,Is5\"))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%2, %1, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y\")])\n+\n+(define_insn \"*mulhisi3_insn_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"reg_or_scst5_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpy\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_lh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (sign_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpylh\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_hl_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (ashiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyhl\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhisi3_hh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (ashiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyh\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (zero_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyu\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_lh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (lshiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpylhu\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_hl_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (zero_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyhlu\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulhisi3_hh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (lshiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyhu\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_const_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A__B_\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?ab\"))\n+                 (match_operand:SI 2 \"scst5_operand\" \"Is5,Is5,Is5\"))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpysu\\\\t%$\\\\t%2, %1, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y\")])\n+\n+(define_insn \"*usmulhisi3_insn_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"reg_or_scst5_operand\" \"aIs5,bIs5,bIs5,aIs5\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyus\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_lh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+\t(mult:SI (zero_extend:SI\n+\t\t  (match_operand:HI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyluhs\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_hl_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (sign_extend:SI\n+\t\t  (match_operand:HI 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyhuls\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulhisi3_hh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:SI (lshiftrt:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\")\n+\t\t  (const_int 16))\n+                 (ashiftrt:SI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")\n+\t\t  (const_int 16)))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tmpyhus\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulsi3_insn_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"a,b,b,a\"))_CBRK_)]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+ [(set_attr \"type\" \"mpy4\")\n+  (set_attr \"units\" \"m\")\n+  (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"<u>mulsidi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:DI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:DI (any_ext:DI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"%a,b,?a,?b\"))\n+                 (any_ext:DI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32<u>\\\\t%$\\\\t%1, %2, %_MODK_0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulsidi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:DI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (mult:DI (zero_extend:DI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"a,b,?a,?b\"))\n+                 (sign_extend:DI\n+\t\t  (match_operand:SI 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"TARGET_MPY32\"\n+  \"%|%.\\\\tmpy32us\\\\t%$\\\\t%1, %2, %_MODK_0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; Widening vector multiply and dot product\n+\n+(define_insn \"mulv2hiv2si3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:V2SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+\t(mult:V2SI\n+\t (sign_extend:V2SI (match_operand:V2HI 1 \"register_operand\" \"a,b,a,b\"))\n+\t (sign_extend:V2SI (match_operand:V2HI 2 \"register_operand\" \"a,b,?b,?a\")))_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpy2\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+ [(set_attr \"type\" \"mpy4\")\n+  (set_attr \"units\" \"m\")\n+  (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"umulv4qiv4hi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:V4HI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+\t(mult:V4HI\n+\t (zero_extend:V4HI (match_operand:V4QI 1 \"register_operand\" \"a,b,a,b\"))\n+\t (zero_extend:V4HI (match_operand:V4QI 2 \"register_operand\" \"a,b,?b,?a\")))_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpyu4\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"usmulv4qiv4hi3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:V4HI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+\t(mult:V4HI\n+\t (zero_extend:V4HI (match_operand:V4QI 1 \"register_operand\" \"a,b,?b,?a\"))\n+\t (sign_extend:V4HI (match_operand:V4QI 2 \"register_operand\" \"a,b,a,b\")))_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tmpyus4\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"dotv2hi_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:SI 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+\t(plus:SI\n+\t  (mult:SI\n+\t    (sign_extend:SI\n+\t      (vec_select:HI\n+\t\t(match_operand:V2HI 1 \"register_operand\" \"a,b,a,b\")\n+\t\t(parallel [(const_int 0)])))\n+\t    (sign_extend:SI\n+\t      (vec_select:HI\n+\t\t(match_operand:V2HI 2 \"register_operand\" \"a,b,?b,?a\")\n+\t\t(parallel [(const_int 0)]))))\n+\t  (mult:SI\n+\t    (sign_extend:SI\n+\t      (vec_select:HI (match_dup 1) (parallel [(const_int 1)])))\n+\t    (sign_extend:SI\n+\t      (vec_select:HI (match_dup 2) (parallel [(const_int 1)])))))_CBRK_)]\n+  \"TARGET_INSNS_64\"\n+  \"%|%.\\\\tdotp2\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+;; Fractional multiply\n+\n+(define_insn \"mulv2hqv2sq3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:_MV2SQ 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (ss_mult:V2SQ\n+\t (fract_convert:V2SQ\n+\t  (match_operand:V2HQ 1 \"register_operand\" \"%a,b,?a,?b\"))\n+\t (fract_convert:V2SQ\n+\t  (match_operand:V2HQ 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tsmpy2\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy4\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:_MSQ 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 1 \"register_operand\" \"%a,b,?a,?b\"))\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tsmpy\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_lh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:_MSQ 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 1 \"register_operand\" \"a,b,?a,?b\"))\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 2 \"register_operand\" \"a,b,b,a\"))))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tsmpylh\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_hl_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:_MSQ 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 1 \"register_operand\" \"a,b,b,a\")))\n+\t (fract_convert:SQ\n+\t  (match_operand:HQ 2 \"register_operand\" \"a,b,b,a\")))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tsmpyhl\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])\n+\n+(define_insn \"mulhqsq3_hh_VARIANT_\"\n+  [(_SET_ _OBRK_(match_operand:_MSQ 0 \"_DESTOPERAND_\" \"=_A_,_B_,_A_,_B_\")\n+        (ss_mult:SQ\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 1 \"register_operand\" \"a,b,b,a\")))\n+\t (fract_convert:SQ\n+\t  (truncate:HQ (match_operand:SQ 2 \"register_operand\" \"a,b,b,a\"))))_CBRK_)]\n+  \"\"\n+  \"%|%.\\\\tsmpyh\\\\t%$\\\\t%1, %2, %_MODk_0\"\n+  [(set_attr \"type\" \"mpy2\")\n+   (set_attr \"units\" \"m\")\n+   (set_attr \"cross\" \"n,n,y,y\")])"}, {"sha": "7c00813ad65b6ef1b15ba8f9fb968add24287418", "filename": "gcc/config/c6x/c6x-opts.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-opts.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,36 @@\n+/* Definitions for option handling for TI C6X.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef C6X_OPTS_H\n+#define C6X_OPTS_H\n+\n+/* An enumeration of all supported target devices.  */\n+typedef enum c6x_cpu_type\n+{\n+#define C6X_ISA(NAME,ENUM_VALUE,FLAGS)\t\t\\\n+  ENUM_VALUE,\n+#include \"c6x-isas.def\"\n+#undef C6X_ISA\n+  unk_isa\n+} c6x_cpu_t;\n+\n+enum c6x_sdata { C6X_SDATA_NONE, C6X_SDATA_DEFAULT, C6X_SDATA_ALL };\n+\n+#endif"}, {"sha": "b835ffccbec7a767718c50f03c32c13fd9cf23b2", "filename": "gcc/config/c6x/c6x-protos.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-protos.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,66 @@\n+/* Prototypes for exported functions defined in c6x.c.\n+   Copyright (C) 2010, 2011\n+   Free Software Foundation, Inc.\n+   Contributed by CodeSourcery.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_C6X_PROTOS_H\n+#define GCC_C6X_PROTOS_H\n+\n+/* Functions defined in c6x.c.  */\n+\n+#ifdef RTX_CODE\n+extern void c6x_init_cumulative_args (CUMULATIVE_ARGS *, const_tree, rtx, int);\n+extern bool c6x_block_reg_pad_upward (enum machine_mode, const_tree, bool);\n+\n+extern bool c6x_legitimate_address_p_1 (enum machine_mode, rtx, bool, bool);\n+extern bool c6x_mem_operand (rtx, enum reg_class, bool);\n+extern bool expand_move (rtx *, enum machine_mode);\n+\n+extern bool c6x_long_call_p (rtx);\n+extern void c6x_expand_call (rtx, rtx, bool);\n+extern rtx c6x_expand_compare (rtx, enum machine_mode);\n+extern bool c6x_force_op_for_comparison_p (enum rtx_code, rtx);\n+extern bool c6x_expand_movmem (rtx, rtx, rtx, rtx, rtx, rtx);\n+\n+extern rtx c6x_subword (rtx, bool);\n+extern void split_di (rtx *, int, rtx *, rtx *);\n+extern bool c6x_valid_mask_p (HOST_WIDE_INT);\n+\n+extern char c6x_get_unit_specifier (rtx);\n+\n+extern void c6x_final_prescan_insn(rtx insn, rtx *opvec, int noperands);\n+\n+extern int c6x_nsaved_regs (void);\n+extern HOST_WIDE_INT c6x_initial_elimination_offset (int, int);\n+extern void c6x_expand_prologue (void);\n+extern void c6x_expand_epilogue (bool);\n+\n+extern rtx c6x_return_addr_rtx (int);\n+\n+extern void c6x_set_return_address (rtx, rtx);\n+#endif\n+\n+extern void c6x_override_options (void);\n+extern void c6x_optimization_options (int, int);\n+\n+extern void c6x_output_file_unwind (FILE *);\n+\n+extern void c6x_function_end (FILE *, const char *);\n+\n+#endif /* GCC_C6X_PROTOS_H */"}, {"sha": "6cb4b66acd514f742999607d4eb5c2f614452edd", "filename": "gcc/config/c6x/c6x-sched.md", "status": "added", "additions": 934, "deletions": 0, "changes": 934, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-sched.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-sched.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-sched.md?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,934 @@\n+;; -*- buffer-read-only: t -*-\n+;; Generated automatically from c6x-sched.md.in by gensched.sh\n+\n+;; Definitions for side 1, cross n\n+\n+;; Scheduling description for TI C6X.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Input file for gensched.sh We process this file multiple times,\n+;; replacing 1 with either 1 or 2 for each of the sides of the\n+;; machine, and a correspondingly with \"a\" or \"b\".  n and\n+;;  are replaced with yes/no and the appropriate reservation.\n+\n+(define_insn_reservation \"load_d1n\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t1\")\n+\n+(define_insn_reservation \"store_d1n\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t1\")\n+\n+(define_insn_reservation \"loadn_d1n\" 5\n+  (and (eq_attr \"type\" \"loadn\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t1+t2\")\n+\n+(define_insn_reservation \"storen_d1n\" 1\n+  (and (eq_attr \"type\" \"storen\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t1+t2\")\n+\n+(define_insn_reservation \"single_d1n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"d1\")\n+\n+(define_insn_reservation \"single_l1n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1+l1w\")\n+\n+(define_insn_reservation \"fp4_l1n\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1,nothing*2,l1w\")\n+\n+(define_insn_reservation \"intdp_l1n\" 5\n+  (and (eq_attr \"type\" \"intdp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1,nothing*2,l1w*2\")\n+\n+(define_insn_reservation \"adddp_l1n\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(l1)*2,nothing*3,l1w*2\")\n+\n+(define_insn_reservation \"branch_s1n\" 6\n+  (and (eq_attr \"type\" \"branch\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1+s1w)+br1\")\n+\n+(define_insn_reservation \"call_addkpc_s1n\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (ne (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"n\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"a\")))))\n+  \"(s1+s1w)+br1,s2+br0+br1\")\n+\n+(define_insn_reservation \"call_mvk_s1n\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (eq (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"n\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"a\")))))\n+  \"(s1+s1w)+br1,s2,s2\")\n+\n+(define_insn_reservation \"single_s1n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1+s1w)\")\n+\n+(define_insn_reservation \"cmpdp_s1n\" 2\n+  (and (eq_attr \"type\" \"cmpdp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"s1,(s1)+s1w\")\n+\n+(define_insn_reservation \"dp2_s1n\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"s1+s1w,s1w\")\n+\n+(define_insn_reservation \"fp4_s1n\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"s1,nothing*2,s1w\")\n+\n+(define_insn_reservation \"mvilc4_s1n\" 4\n+  (and (eq_attr \"type\" \"mvilc\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1+s1w)\")\n+\n+(define_insn_reservation \"single_dl1n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"dl\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(d1|(l1+l1w))\")\n+\n+(define_insn_reservation \"single_ds1n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ds\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(d1|(s1+s1w))\")\n+\n+(define_insn_reservation \"single_ls1n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"((l1+l1w)|(s1+s1w))\")\n+\n+(define_insn_reservation \"dp2_l1n\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1+l1w,l1w\")\n+\n+(define_insn_reservation \"fp4_ls1n\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1,nothing*2,s1w)|(l1,nothing*2,l1w)\")\n+\n+(define_insn_reservation \"adddp_ls1n\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"((s1)*2,nothing*3,s1w*2)|((l1)*2,nothing*3,l1w*2)\")\n+\n+(define_insn_reservation \"single_dls1n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"dls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(d1|(l1+l1w)|(s1+s1w))\")\n+\n+(define_insn_reservation \"mpy2_m1n\" 2\n+  (and (eq_attr \"type\" \"mpy2\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"m1,m1w\")\n+\n+(define_insn_reservation \"mpy4_m1n\" 4\n+  (and (eq_attr \"type\" \"mpy4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"m1,nothing,nothing,m1w\")\n+\n+(define_insn_reservation \"mpydp_m1n\" 10\n+  (and (eq_attr \"type\" \"mpydp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(m1)*4,nothing*4,m1w*2\")\n+\n+(define_insn_reservation \"mpyspdp_m1n\" 7\n+  (and (eq_attr \"type\" \"mpyspdp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(m1)*2,nothing*3,m1w*2\")\n+\n+(define_insn_reservation \"mpysp2dp_m1n\" 5\n+  (and (eq_attr \"type\" \"mpysp2dp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"m1,nothing*2,m1w*2\")\n+\n+;; Definitions for side 2, cross n\n+\n+;; Scheduling description for TI C6X.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Input file for gensched.sh We process this file multiple times,\n+;; replacing 2 with either 1 or 2 for each of the sides of the\n+;; machine, and b correspondingly with \"a\" or \"b\".  n and\n+;;  are replaced with yes/no and the appropriate reservation.\n+\n+(define_insn_reservation \"load_d2n\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t2\")\n+\n+(define_insn_reservation \"store_d2n\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t2\")\n+\n+(define_insn_reservation \"loadn_d2n\" 5\n+  (and (eq_attr \"type\" \"loadn\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t1+t2\")\n+\n+(define_insn_reservation \"storen_d2n\" 1\n+  (and (eq_attr \"type\" \"storen\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t1+t2\")\n+\n+(define_insn_reservation \"single_d2n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"d\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"d2\")\n+\n+(define_insn_reservation \"single_l2n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2+l2w\")\n+\n+(define_insn_reservation \"fp4_l2n\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2,nothing*2,l2w\")\n+\n+(define_insn_reservation \"intdp_l2n\" 5\n+  (and (eq_attr \"type\" \"intdp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2,nothing*2,l2w*2\")\n+\n+(define_insn_reservation \"adddp_l2n\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(l2)*2,nothing*3,l2w*2\")\n+\n+(define_insn_reservation \"branch_s2n\" 6\n+  (and (eq_attr \"type\" \"branch\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2+s2w)+br1\")\n+\n+(define_insn_reservation \"call_addkpc_s2n\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (ne (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"n\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"b\")))))\n+  \"(s2+s2w)+br1,s2+br0+br1\")\n+\n+(define_insn_reservation \"call_mvk_s2n\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (eq (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"n\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"b\")))))\n+  \"(s2+s2w)+br1,s2,s2\")\n+\n+(define_insn_reservation \"single_s2n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2+s2w)\")\n+\n+(define_insn_reservation \"cmpdp_s2n\" 2\n+  (and (eq_attr \"type\" \"cmpdp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"s2,(s2)+s2w\")\n+\n+(define_insn_reservation \"dp2_s2n\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"s2+s2w,s2w\")\n+\n+(define_insn_reservation \"fp4_s2n\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"s2,nothing*2,s2w\")\n+\n+(define_insn_reservation \"mvilc4_s2n\" 4\n+  (and (eq_attr \"type\" \"mvilc\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2+s2w)\")\n+\n+(define_insn_reservation \"single_dl2n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"dl\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(d2|(l2+l2w))\")\n+\n+(define_insn_reservation \"single_ds2n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ds\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(d2|(s2+s2w))\")\n+\n+(define_insn_reservation \"single_ls2n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"((l2+l2w)|(s2+s2w))\")\n+\n+(define_insn_reservation \"dp2_l2n\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2+l2w,l2w\")\n+\n+(define_insn_reservation \"fp4_ls2n\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2,nothing*2,s2w)|(l2,nothing*2,l2w)\")\n+\n+(define_insn_reservation \"adddp_ls2n\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"((s2)*2,nothing*3,s2w*2)|((l2)*2,nothing*3,l2w*2)\")\n+\n+(define_insn_reservation \"single_dls2n\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"dls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(d2|(l2+l2w)|(s2+s2w))\")\n+\n+(define_insn_reservation \"mpy2_m2n\" 2\n+  (and (eq_attr \"type\" \"mpy2\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"m2,m2w\")\n+\n+(define_insn_reservation \"mpy4_m2n\" 4\n+  (and (eq_attr \"type\" \"mpy4\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"m2,nothing,nothing,m2w\")\n+\n+(define_insn_reservation \"mpydp_m2n\" 10\n+  (and (eq_attr \"type\" \"mpydp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(m2)*4,nothing*4,m2w*2\")\n+\n+(define_insn_reservation \"mpyspdp_m2n\" 7\n+  (and (eq_attr \"type\" \"mpyspdp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(m2)*2,nothing*3,m2w*2\")\n+\n+(define_insn_reservation \"mpysp2dp_m2n\" 5\n+  (and (eq_attr \"type\" \"mpysp2dp\")\n+       (and (eq_attr \"cross\" \"n\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"m2,nothing*2,m2w*2\")\n+\n+;; Definitions for side 1, cross y\n+\n+;; Scheduling description for TI C6X.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Input file for gensched.sh We process this file multiple times,\n+;; replacing 1 with either 1 or 2 for each of the sides of the\n+;; machine, and a correspondingly with \"a\" or \"b\".  y and\n+;; +x1 are replaced with yes/no and the appropriate reservation.\n+\n+(define_insn_reservation \"load_d1y\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t2\")\n+\n+(define_insn_reservation \"store_d1y\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t2\")\n+\n+(define_insn_reservation \"loadn_d1y\" 5\n+  (and (eq_attr \"type\" \"loadn\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t1+t2\")\n+\n+(define_insn_reservation \"storen_d1y\" 1\n+  (and (eq_attr \"type\" \"storen\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"a\"))))\n+  \"d1+t1+t2\")\n+\n+(define_insn_reservation \"single_d1y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"d1+x1\")\n+\n+(define_insn_reservation \"single_l1y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1+l1w+x1\")\n+\n+(define_insn_reservation \"fp4_l1y\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1+x1,nothing*2,l1w\")\n+\n+(define_insn_reservation \"intdp_l1y\" 5\n+  (and (eq_attr \"type\" \"intdp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1+x1,nothing*2,l1w*2\")\n+\n+(define_insn_reservation \"adddp_l1y\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(l1+x1)*2,nothing*3,l1w*2\")\n+\n+(define_insn_reservation \"branch_s1y\" 6\n+  (and (eq_attr \"type\" \"branch\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1+s1w)+x1+br1\")\n+\n+(define_insn_reservation \"call_addkpc_s1y\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (ne (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"y\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"a\")))))\n+  \"(s1+s1w)+x1+br1,s2+br0+br1\")\n+\n+(define_insn_reservation \"call_mvk_s1y\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (eq (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"y\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"a\")))))\n+  \"(s1+s1w)+x1+br1,s2,s2\")\n+\n+(define_insn_reservation \"single_s1y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1+s1w)+x1\")\n+\n+(define_insn_reservation \"cmpdp_s1y\" 2\n+  (and (eq_attr \"type\" \"cmpdp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"s1+x1,(s1+x1)+s1w\")\n+\n+(define_insn_reservation \"dp2_s1y\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"s1+s1w+x1,s1w\")\n+\n+(define_insn_reservation \"fp4_s1y\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"s1+x1,nothing*2,s1w\")\n+\n+(define_insn_reservation \"mvilc4_s1y\" 4\n+  (and (eq_attr \"type\" \"mvilc\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1+s1w)+x1\")\n+\n+(define_insn_reservation \"single_dl1y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"dl\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(d1|(l1+l1w))+x1\")\n+\n+(define_insn_reservation \"single_ds1y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ds\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(d1|(s1+s1w))+x1\")\n+\n+(define_insn_reservation \"single_ls1y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"((l1+l1w)|(s1+s1w))+x1\")\n+\n+(define_insn_reservation \"dp2_l1y\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"l1+l1w+x1,l1w\")\n+\n+(define_insn_reservation \"fp4_ls1y\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(s1+x1,nothing*2,s1w)|(l1+x1,nothing*2,l1w)\")\n+\n+(define_insn_reservation \"adddp_ls1y\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"((s1+x1)*2,nothing*3,s1w*2)|((l1+x1)*2,nothing*3,l1w*2)\")\n+\n+(define_insn_reservation \"single_dls1y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"dls\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(d1|(l1+l1w)|(s1+s1w))+x1\")\n+\n+(define_insn_reservation \"mpy2_m1y\" 2\n+  (and (eq_attr \"type\" \"mpy2\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"m1+x1,m1w\")\n+\n+(define_insn_reservation \"mpy4_m1y\" 4\n+  (and (eq_attr \"type\" \"mpy4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"m1+x1,nothing,nothing,m1w\")\n+\n+(define_insn_reservation \"mpydp_m1y\" 10\n+  (and (eq_attr \"type\" \"mpydp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(m1+x1)*4,nothing*4,m1w*2\")\n+\n+(define_insn_reservation \"mpyspdp_m1y\" 7\n+  (and (eq_attr \"type\" \"mpyspdp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"(m1+x1)*2,nothing*3,m1w*2\")\n+\n+(define_insn_reservation \"mpysp2dp_m1y\" 5\n+  (and (eq_attr \"type\" \"mpysp2dp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"a\"))))\n+  \"m1+x1,nothing*2,m1w*2\")\n+\n+;; Definitions for side 2, cross y\n+\n+;; Scheduling description for TI C6X.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Input file for gensched.sh We process this file multiple times,\n+;; replacing 2 with either 1 or 2 for each of the sides of the\n+;; machine, and b correspondingly with \"a\" or \"b\".  y and\n+;; +x2 are replaced with yes/no and the appropriate reservation.\n+\n+(define_insn_reservation \"load_d2y\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t1\")\n+\n+(define_insn_reservation \"store_d2y\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t1\")\n+\n+(define_insn_reservation \"loadn_d2y\" 5\n+  (and (eq_attr \"type\" \"loadn\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t1+t2\")\n+\n+(define_insn_reservation \"storen_d2y\" 1\n+  (and (eq_attr \"type\" \"storen\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"b\"))))\n+  \"d2+t1+t2\")\n+\n+(define_insn_reservation \"single_d2y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"d\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"d2+x2\")\n+\n+(define_insn_reservation \"single_l2y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2+l2w+x2\")\n+\n+(define_insn_reservation \"fp4_l2y\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2+x2,nothing*2,l2w\")\n+\n+(define_insn_reservation \"intdp_l2y\" 5\n+  (and (eq_attr \"type\" \"intdp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2+x2,nothing*2,l2w*2\")\n+\n+(define_insn_reservation \"adddp_l2y\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(l2+x2)*2,nothing*3,l2w*2\")\n+\n+(define_insn_reservation \"branch_s2y\" 6\n+  (and (eq_attr \"type\" \"branch\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2+s2w)+x2+br1\")\n+\n+(define_insn_reservation \"call_addkpc_s2y\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (ne (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"y\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"b\")))))\n+  \"(s2+s2w)+x2+br1,s2+br0+br1\")\n+\n+(define_insn_reservation \"call_mvk_s2y\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (eq (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"y\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"b\")))))\n+  \"(s2+s2w)+x2+br1,s2,s2\")\n+\n+(define_insn_reservation \"single_s2y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2+s2w)+x2\")\n+\n+(define_insn_reservation \"cmpdp_s2y\" 2\n+  (and (eq_attr \"type\" \"cmpdp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"s2+x2,(s2+x2)+s2w\")\n+\n+(define_insn_reservation \"dp2_s2y\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"s2+s2w+x2,s2w\")\n+\n+(define_insn_reservation \"fp4_s2y\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"s2+x2,nothing*2,s2w\")\n+\n+(define_insn_reservation \"mvilc4_s2y\" 4\n+  (and (eq_attr \"type\" \"mvilc\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2+s2w)+x2\")\n+\n+(define_insn_reservation \"single_dl2y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"dl\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(d2|(l2+l2w))+x2\")\n+\n+(define_insn_reservation \"single_ds2y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ds\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(d2|(s2+s2w))+x2\")\n+\n+(define_insn_reservation \"single_ls2y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"((l2+l2w)|(s2+s2w))+x2\")\n+\n+(define_insn_reservation \"dp2_l2y\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"l2+l2w+x2,l2w\")\n+\n+(define_insn_reservation \"fp4_ls2y\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(s2+x2,nothing*2,s2w)|(l2+x2,nothing*2,l2w)\")\n+\n+(define_insn_reservation \"adddp_ls2y\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"((s2+x2)*2,nothing*3,s2w*2)|((l2+x2)*2,nothing*3,l2w*2)\")\n+\n+(define_insn_reservation \"single_dls2y\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"dls\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(d2|(l2+l2w)|(s2+s2w))+x2\")\n+\n+(define_insn_reservation \"mpy2_m2y\" 2\n+  (and (eq_attr \"type\" \"mpy2\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"m2+x2,m2w\")\n+\n+(define_insn_reservation \"mpy4_m2y\" 4\n+  (and (eq_attr \"type\" \"mpy4\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"m2+x2,nothing,nothing,m2w\")\n+\n+(define_insn_reservation \"mpydp_m2y\" 10\n+  (and (eq_attr \"type\" \"mpydp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(m2+x2)*4,nothing*4,m2w*2\")\n+\n+(define_insn_reservation \"mpyspdp_m2y\" 7\n+  (and (eq_attr \"type\" \"mpyspdp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"(m2+x2)*2,nothing*3,m2w*2\")\n+\n+(define_insn_reservation \"mpysp2dp_m2y\" 5\n+  (and (eq_attr \"type\" \"mpysp2dp\")\n+       (and (eq_attr \"cross\" \"y\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"b\"))))\n+  \"m2+x2,nothing*2,m2w*2\")"}, {"sha": "271109b9cf5984b888d3971eecdf3376f9d00788", "filename": "gcc/config/c6x/c6x-sched.md.in", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-sched.md.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-sched.md.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-sched.md.in?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,230 @@\n+;; Scheduling description for TI C6X.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Input file for gensched.sh We process this file multiple times,\n+;; replacing _N_ with either 1 or 2 for each of the sides of the\n+;; machine, and _RF_ correspondingly with \"a\" or \"b\".  _CROSS_ and\n+;; _CUNIT_ are replaced with yes/no and the appropriate reservation.\n+\n+(define_insn_reservation \"load_d_N__CROSS_\" 5\n+  (and (eq_attr \"type\" \"load\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"_RF_\"))))\n+  \"d_N_+t_NX_\")\n+\n+(define_insn_reservation \"store_d_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"store\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"_RF_\"))))\n+  \"d_N_+t_NX_\")\n+\n+(define_insn_reservation \"loadn_d_N__CROSS_\" 5\n+  (and (eq_attr \"type\" \"loadn\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"_RF_\"))))\n+  \"d_N_+t1+t2\")\n+\n+(define_insn_reservation \"storen_d_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"storen\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"d_addr\")\n+\t\t (eq_attr \"addr_regfile\" \"_RF_\"))))\n+  \"d_N_+t1+t2\")\n+\n+(define_insn_reservation \"single_d_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"d\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"d_N__CUNIT_\")\n+\n+(define_insn_reservation \"single_l_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"l_N_+l_N_w_CUNIT_\")\n+\n+(define_insn_reservation \"fp4_l_N__CROSS_\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"l_N__CUNIT_,nothing*2,l_N_w\")\n+\n+(define_insn_reservation \"intdp_l_N__CROSS_\" 5\n+  (and (eq_attr \"type\" \"intdp\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"l_N__CUNIT_,nothing*2,l_N_w*2\")\n+\n+(define_insn_reservation \"adddp_l_N__CROSS_\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(l_N__CUNIT_)*2,nothing*3,l_N_w*2\")\n+\n+(define_insn_reservation \"branch_s_N__CROSS_\" 6\n+  (and (eq_attr \"type\" \"branch\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(s_N_+s_N_w)_CUNIT_+br1\")\n+\n+(define_insn_reservation \"call_addkpc_s_N__CROSS_\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (ne (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"_CROSS_\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"_RF_\")))))\n+  \"(s_N_+s_N_w)_CUNIT_+br1,s2+br0+br1\")\n+\n+(define_insn_reservation \"call_mvk_s_N__CROSS_\" 6\n+  (and (eq_attr \"type\" \"call\")\n+       (and (eq (symbol_ref \"TARGET_INSNS_64\") (const_int 0))\n+\t    (and (eq_attr \"cross\" \"_CROSS_\")\n+\t\t (and (eq_attr \"units\" \"s\")\n+\t\t      (eq_attr \"dest_regfile\" \"_RF_\")))))\n+  \"(s_N_+s_N_w)_CUNIT_+br1,s2,s2\")\n+\n+(define_insn_reservation \"single_s_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(s_N_+s_N_w)_CUNIT_\")\n+\n+(define_insn_reservation \"cmpdp_s_N__CROSS_\" 2\n+  (and (eq_attr \"type\" \"cmpdp\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"s_N__CUNIT_,(s_N__CUNIT_)+s_N_w\")\n+\n+(define_insn_reservation \"dp2_s_N__CROSS_\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"s_N_+s_N_w_CUNIT_,s_N_w\")\n+\n+(define_insn_reservation \"fp4_s_N__CROSS_\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"s_N__CUNIT_,nothing*2,s_N_w\")\n+\n+(define_insn_reservation \"mvilc4_s_N__CROSS_\" 4\n+  (and (eq_attr \"type\" \"mvilc\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"s\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(s_N_+s_N_w)_CUNIT_\")\n+\n+(define_insn_reservation \"single_dl_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"dl\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(d_N_|(l_N_+l_N_w))_CUNIT_\")\n+\n+(define_insn_reservation \"single_ds_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"ds\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(d_N_|(s_N_+s_N_w))_CUNIT_\")\n+\n+(define_insn_reservation \"single_ls_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"((l_N_+l_N_w)|(s_N_+s_N_w))_CUNIT_\")\n+\n+(define_insn_reservation \"dp2_l_N__CROSS_\" 2\n+  (and (eq_attr \"type\" \"dp2\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"l\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"l_N_+l_N_w_CUNIT_,l_N_w\")\n+\n+(define_insn_reservation \"fp4_ls_N__CROSS_\" 4\n+  (and (eq_attr \"type\" \"fp4\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(s_N__CUNIT_,nothing*2,s_N_w)|(l_N__CUNIT_,nothing*2,l_N_w)\")\n+\n+(define_insn_reservation \"adddp_ls_N__CROSS_\" 7\n+  (and (eq_attr \"type\" \"adddp\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"ls\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"((s_N__CUNIT_)*2,nothing*3,s_N_w*2)|((l_N__CUNIT_)*2,nothing*3,l_N_w*2)\")\n+\n+(define_insn_reservation \"single_dls_N__CROSS_\" 1\n+  (and (eq_attr \"type\" \"single\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"dls\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(d_N_|(l_N_+l_N_w)|(s_N_+s_N_w))_CUNIT_\")\n+\n+(define_insn_reservation \"mpy2_m_N__CROSS_\" 2\n+  (and (eq_attr \"type\" \"mpy2\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"m_N__CUNIT_,m_N_w\")\n+\n+(define_insn_reservation \"mpy4_m_N__CROSS_\" 4\n+  (and (eq_attr \"type\" \"mpy4\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"m_N__CUNIT_,nothing,nothing,m_N_w\")\n+\n+(define_insn_reservation \"mpydp_m_N__CROSS_\" 10\n+  (and (eq_attr \"type\" \"mpydp\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(m_N__CUNIT_)*4,nothing*4,m_N_w*2\")\n+\n+(define_insn_reservation \"mpyspdp_m_N__CROSS_\" 7\n+  (and (eq_attr \"type\" \"mpyspdp\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"(m_N__CUNIT_)*2,nothing*3,m_N_w*2\")\n+\n+(define_insn_reservation \"mpysp2dp_m_N__CROSS_\" 5\n+  (and (eq_attr \"type\" \"mpysp2dp\")\n+       (and (eq_attr \"cross\" \"_CROSS_\")\n+\t    (and (eq_attr \"units\" \"m\")\n+\t\t (eq_attr \"dest_regfile\" \"_RF_\"))))\n+  \"m_N__CUNIT_,nothing*2,m_N_w*2\")"}, {"sha": "e012e9e2d0a442cfec8f4a8c538b7e3a7b16e978", "filename": "gcc/config/c6x/c6x-tables.opt", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x-tables.opt?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,43 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from c6x-isas.def.\n+;\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(c6x_isa) Type(int)\n+Known C6X ISAs (for use with the -march= option):\n+\n+EnumValue\n+Enum(c6x_isa) String(c62x) Value(0)\n+\n+EnumValue\n+Enum(c6x_isa) String(c64x) Value(1)\n+\n+EnumValue\n+Enum(c6x_isa) String(c64x+) Value(2)\n+\n+EnumValue\n+Enum(c6x_isa) String(c67x) Value(3)\n+\n+EnumValue\n+Enum(c6x_isa) String(c67x+) Value(4)\n+\n+EnumValue\n+Enum(c6x_isa) String(c674x) Value(5)\n+"}, {"sha": "deb2f5395dd723bb48a9052723999c436d887845", "filename": "gcc/config/c6x/c6x.c", "status": "added", "additions": 5572, "deletions": 0, "changes": 5572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c"}, {"sha": "5d34d590ff3b15ff83c4681844d6b16944238ad6", "filename": "gcc/config/c6x/c6x.h", "status": "added", "additions": 617, "deletions": 0, "changes": 617, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,617 @@\n+/* Target Definitions for TI C6X.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+   Contributed by Andrew Jenner <andrew@codesourcery.com>\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_C6X_H\n+#define GCC_C6X_H\n+\n+/* Feature bit definitions that enable specific insns.  */\n+#define C6X_INSNS_C62X\t\t1\n+#define C6X_INSNS_C64X\t\t2\n+#define C6X_INSNS_C64XP\t\t4\n+#define C6X_INSNS_C67X\t\t8\n+#define C6X_INSNS_C67XP\t\t16\n+#define C6X_INSNS_C674X\t\t32\n+#define C6X_INSNS_ATOMIC\t64\n+#define C6X_INSNS_ALL_CPU_BITS\t127\n+\n+#define C6X_DEFAULT_INSN_MASK\t\t\t\t\t\t\\\n+  (C6X_INSNS_C62X | C6X_INSNS_C64X | C6X_INSNS_C64XP)\n+\n+/* A mask of allowed insn types, as defined above.  */\n+extern unsigned long c6x_insn_mask;\n+\n+/* Value of -march= */\n+extern c6x_cpu_t c6x_arch;\n+#define C6X_DEFAULT_ARCH C6X_CPU_C64XP\n+\n+/* True if the target has C64x instructions.  */\n+#define TARGET_INSNS_64\t\t((c6x_insn_mask & C6X_INSNS_C64X) != 0)\n+/* True if the target has C64x+ instructions.  */\n+#define TARGET_INSNS_64PLUS\t((c6x_insn_mask & C6X_INSNS_C64XP) != 0)\n+/* True if the target has C67x instructions.  */\n+#define TARGET_INSNS_67\t\t((c6x_insn_mask & C6X_INSNS_C67X) != 0)\n+/* True if the target has C67x+ instructions.  */\n+#define TARGET_INSNS_67PLUS\t((c6x_insn_mask & C6X_INSNS_C67XP) != 0)\n+\n+/* True if the target supports doubleword loads.  */\n+#define TARGET_LDDW\t\t(TARGET_INSNS_64 || TARGET_INSNS_67)\n+/* True if the target supports doubleword loads.  */\n+#define TARGET_STDW\t\tTARGET_INSNS_64\n+/* True if the target supports the MPY32 family of instructions.  */\n+#define TARGET_MPY32\t\tTARGET_INSNS_64PLUS\n+/* True if the target has floating point hardware.  */\n+#define TARGET_FP\t\tTARGET_INSNS_67\n+/* True if the target has C67x+ floating point extensions.  */\n+#define TARGET_FP_EXT\t\tTARGET_INSNS_67PLUS\n+\n+#define TARGET_DEFAULT 0\n+\n+/* Run-time Target.  */\n+\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_assert (\"machine=tic6x\");\t\t\\\n+      builtin_assert (\"cpu=tic6x\");\t\t\\\n+      builtin_define (\"__TMS320C6X__\");\t\t\\\n+      builtin_define (\"_TMS320C6X\");\t\t\\\n+\t\t\t\t\t\t\\\n+      if (TARGET_DSBT)\t\t\t\t\\\n+\tbuiltin_define (\"__DSBT__\");\t\t\\\n+\t\t\t\t\t\t\\\n+      if (TARGET_BIG_ENDIAN)\t\t\t\\\n+\tbuiltin_define (\"_BIG_ENDIAN\");\t\t\\\n+      else\t\t\t\t\t\\\n+\tbuiltin_define (\"_LITTLE_ENDIAN\");\t\\\n+\t\t\t\t\t\t\\\n+      switch (c6x_arch)\t\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\tcase C6X_CPU_C62X:\t\t\t\\\n+\t  builtin_define (\"_TMS320C6200\");\t\\\n+\t  break;\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+\tcase C6X_CPU_C64XP:\t\t\t\\\n+\t  builtin_define (\"_TMS320C6400_PLUS\");\t\\\n+\t  /* ... fall through ... */\t\t\\\n+\tcase C6X_CPU_C64X:\t\t\t\\\n+\t  builtin_define (\"_TMS320C6400\");\t\\\n+\t  break;\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+\tcase C6X_CPU_C67XP:\t\t\t\\\n+\t  builtin_define (\"_TMS320C6700_PLUS\");\t\\\n+\t  /* ... fall through ... */\t\t\\\n+\tcase C6X_CPU_C67X:\t\t\t\\\n+\t  builtin_define (\"_TMS320C6700\");\t\\\n+\t  break;\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+\tcase C6X_CPU_C674X:\t\t\t\\\n+\t  builtin_define (\"_TMS320C6740\");\t\\\n+\t  builtin_define (\"_TMS320C6700_PLUS\");\t\\\n+\t  builtin_define (\"_TMS320C6700\");\t\\\n+\t  builtin_define (\"_TMS320C6400_PLUS\");\t\\\n+\t  builtin_define (\"_TMS320C6400\");\t\\\n+\t  break;\t\t\t\t\\\n+\t}\t\t\t\t\t\\\n+    } while (0)\n+\n+#define OPTION_DEFAULT_SPECS \\\n+  {\"arch\", \"%{!march=*:-march=%(VALUE)}\" }\n+\n+/* Storage Layout.  */\n+\n+#define BITS_BIG_ENDIAN 0\n+#define BYTES_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n+#define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n+\n+#define REG_WORDS_BIG_ENDIAN 0\n+\n+#define UNITS_PER_WORD 4\n+#define PARM_BOUNDARY 8\n+#define STACK_BOUNDARY 64\n+#define FUNCTION_BOUNDARY 32\n+#define BIGGEST_ALIGNMENT 64\n+#define STRICT_ALIGNMENT 1\n+\n+/* The ABI requires static arrays must be at least 8 byte aligned.\n+   Really only externally visible arrays must be aligned this way, as\n+   only those are directly visible from another compilation unit.  But\n+   we don't have that information available here.  */\n+#define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\t\t\t\\\n+  (((ALIGN) < BITS_PER_UNIT * 8 && TREE_CODE (TYPE) == ARRAY_TYPE)\t\\\n+   ? BITS_PER_UNIT * 8 : (ALIGN))\n+\n+/* Type Layout.  */\n+\n+#define DEFAULT_SIGNED_CHAR 1\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+/* Registers.  */\n+\n+#define FIRST_PSEUDO_REGISTER 67\n+#define FIXED_REGISTERS\t\t\t\t\t\\\n+  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\t\\\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+    1, 1, 1}\n+#define CALL_USED_REGISTERS\t\t\t\t\\\n+  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\t\\\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1,\t\\\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+    1, 1, 1}\n+\n+/* This lists call-used non-predicate registers first, followed by call-used\n+   registers, followed by predicate registers.  We want to avoid allocating\n+   the predicate registers for other uses as much as possible.  */\n+#define REG_ALLOC_ORDER\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    REG_A0, REG_A3, REG_A4, REG_A5, REG_A6, REG_A7, REG_A8, REG_A9,\t\\\n+    REG_A16, REG_A17, REG_A18, REG_A19, REG_A20, REG_A21, REG_A22, REG_A23, \\\n+    REG_A24, REG_A25, REG_A26, REG_A27, REG_A28, REG_A29, REG_A30, REG_A31, \\\n+    REG_B4, REG_B5, REG_B6, REG_B7, REG_B8, REG_B9, REG_B16,\t\\\n+    REG_B17, REG_B18, REG_B19, REG_B20, REG_B21, REG_B22, REG_B23, REG_B24, \\\n+    REG_B25, REG_B26, REG_B27, REG_B28, REG_B29, REG_B30, REG_B31,\t\\\n+    REG_A10, REG_A11, REG_A12, REG_A13, REG_A14, REG_A15,\t\t\\\n+    REG_B3, REG_B10, REG_B11, REG_B12, REG_B13, REG_B14, REG_B15,\t\\\n+    REG_A1, REG_A2, REG_B0, REG_B1, REG_B2, REG_ILC\t\t\t\\\n+  }\n+\n+#define HARD_REGNO_NREGS(regno, mode)\t\t\\\n+  ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1)  \\\n+   / UNITS_PER_WORD)\n+\n+#define HARD_REGNO_MODE_OK(reg, mode) (GET_MODE_SIZE (mode) <= UNITS_PER_WORD \\\n+\t\t\t\t       ? 1 : ((reg) & 1) == 0)\n+\n+#define MODES_TIEABLE_P(mode1, mode2)\t       \\\n+  ((mode1) == (mode2) ||\t\t       \\\n+   (GET_MODE_SIZE (mode1) <= UNITS_PER_WORD && \\\n+    GET_MODE_SIZE (mode2) <= UNITS_PER_WORD))\n+\n+\n+/* Register Classes.  */\n+\n+enum reg_class\n+  {\n+    NO_REGS,\n+    PREDICATE_A_REGS,\n+    PREDICATE_B_REGS,\n+    PREDICATE_REGS,\n+    PICREG,\n+    SPREG,\n+    CALL_USED_B_REGS,\n+    NONPREDICATE_A_REGS,\n+    NONPREDICATE_B_REGS,\n+    NONPREDICATE_REGS,\n+    A_REGS,\n+    B_REGS,\n+    GENERAL_REGS,\n+    ALL_REGS,\n+    LIM_REG_CLASSES\n+  };\n+\n+#define N_REG_CLASSES (int) LIM_REG_CLASSES\n+\n+#define REG_CLASS_NAMES {\t  \\\n+    \"NO_REGS\",\t\t\t  \\\n+    \"PREDICATE_A_REGS\",\t\t  \\\n+    \"PREDICATE_B_REGS\",\t\t  \\\n+    \"PREDICATE_REGS\",\t\t  \\\n+    \"PICREG\",\t\t\t  \\\n+    \"SPREG\",\t\t\t  \\\n+    \"CALL_USED_B_REGS\",\t\t  \\\n+    \"NONPREDICATE_A_REGS\",\t  \\\n+    \"NONPREDICATE_B_REGS\",\t  \\\n+    \"NONPREDICATE_REGS\",\t  \\\n+    \"A_REGS\",\t\t\t  \\\n+    \"B_REGS\",\t\t\t  \\\n+    \"GENERAL_REGS\",\t\t  \\\n+    \"ALL_REGS\" }\n+\n+#define REG_CLASS_CONTENTS\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  /* NO_REGS.  */\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0 },\t\t\\\n+  /* PREDICATE_A_REGS.  */\t\t\t\\\n+  { 0x00000006, 0x00000000, 0 },\t\t\\\n+  /* PREDICATE_B_REGS.  */\t\t\t\\\n+  { 0x00000000, 0x00000007, 0 },\t\t\\\n+  /* PREDICATE_REGS.  */\t\t\t\\\n+  { 0x00000006, 0x00000007, 0 },\t\t\\\n+  /* PICREG.  */\t\t\t\t\\\n+  { 0x00000000, 0x00004000, 0 },\t\t\\\n+  /* SPREG.  */\t\t\t\t\t\\\n+  { 0x00000000, 0x00008000, 0 },\t\t\\\n+  /* CALL_USED_B_REGS.  */\t\t\t\\\n+  { 0x00000000, 0xFFFF03FF, 0 },\t\t\\\n+  /* NONPREDICATE_A_REGS.  */\t\t\t\\\n+  { 0xFFFFFFF9, 0x00000000, 0 },\t\t\\\n+  /* NONPREDICATE_B_REGS.  */\t\t\t\\\n+  { 0x00000000, 0xFFFFFFF8, 0 },\t\t\\\n+  /* NONPREDICATE_REGS.  */\t\t\t\\\n+  { 0xFFFFFFF9, 0xFFFFFFF8, 0 },\t\t\\\n+  /* A_REGS.  */\t\t\t\t\\\n+  { 0xFFFFFFFF, 0x00000000, 3 },\t\t\\\n+  /* B_REGS.  */\t\t\t\t\\\n+  { 0x00000000, 0xFFFFFFFF, 3 },\t\t\\\n+  /* GENERAL_REGS.  */\t\t\t\t\\\n+  { 0xFFFFFFFF, 0xFFFFFFFF, 3 },\t\t\\\n+  /* ALL_REGS.  */\t\t\t\t\\\n+  { 0xFFFFFFFF, 0xFFFFFFFF, 7 },\t\t\\\n+}\n+\n+#define A_REGNO_P(N) ((N) <= REG_A31)\n+#define B_REGNO_P(N) ((N) >= REG_B0 && (N) <= REG_B31)\n+\n+#define A_REG_P(X) (REG_P (X) && A_REGNO_P (REGNO (X)))\n+#define CROSS_OPERANDS(X0,X1) \\\n+  (A_REG_P (X0) == A_REG_P (X1) ? CROSS_N : CROSS_Y)\n+\n+#define REGNO_REG_CLASS(reg) \\\n+    ((reg) >= REG_A1 && (reg) <= REG_A2 ? PREDICATE_A_REGS\t\\\n+     : (reg) == REG_A0 && TARGET_INSNS_64 ? PREDICATE_A_REGS\t\\\n+     : (reg) >= REG_B0 && (reg) <= REG_B2 ? PREDICATE_B_REGS\t\\\n+     : A_REGNO_P (reg) ? NONPREDICATE_A_REGS\t\t\t\\\n+     : call_used_regs[reg] ? CALL_USED_B_REGS : B_REGS)\n+\n+#define BASE_REG_CLASS ALL_REGS\n+#define INDEX_REG_CLASS ALL_REGS\n+\n+#define REGNO_OK_FOR_BASE_STRICT_P(X)\t\t\t\t\\\n+  ((X) < FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n+   || (reg_renumber[X] >= 0 && reg_renumber[X] < FIRST_PSEUDO_REGISTER))\n+#define REGNO_OK_FOR_BASE_NONSTRICT_P(X) 1\n+\n+#define REGNO_OK_FOR_INDEX_STRICT_P(X)\t\t\t\t\\\n+  ((X) < FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n+   || (reg_renumber[X] >= 0 && reg_renumber[X] < FIRST_PSEUDO_REGISTER))\n+#define REGNO_OK_FOR_INDEX_NONSTRICT_P(X) 1\n+\n+#ifdef REG_OK_STRICT\n+#define REGNO_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_STRICT_P (X)\n+#define REGNO_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_STRICT_P (X)\n+#else\n+#define REGNO_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_NONSTRICT_P (X)\n+#define REGNO_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_NONSTRICT_P (X)\n+#endif\n+\n+#define CLASS_MAX_NREGS(class, mode) \\\n+  ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+\n+#define REGNO_OK_FOR_INDIRECT_JUMP_P(REGNO, MODE) B_REGNO_P (REGNO)\n+\n+/* Stack and Calling.  */\n+\n+/* SP points to 4 bytes below the first word of the frame.  */\n+#define STACK_POINTER_OFFSET 4\n+/* Likewise for AP (which is the incoming stack pointer).  */\n+#define FIRST_PARM_OFFSET(fundecl) 4\n+#define STARTING_FRAME_OFFSET 0\n+#define FRAME_GROWS_DOWNWARD 1\n+#define STACK_GROWS_DOWNWARD\n+\n+#define STACK_POINTER_REGNUM REG_B15\n+#define HARD_FRAME_POINTER_REGNUM REG_A15\n+/* These two always get eliminated in favour of the stack pointer\n+   or the hard frame pointer.  */\n+#define FRAME_POINTER_REGNUM REG_FRAME\n+#define ARG_POINTER_REGNUM REG_ARGP\n+\n+#define PIC_OFFSET_TABLE_REGNUM REG_B14\n+\n+/* We keep the stack pointer constant rather than using push/pop\n+   instructions.  */\n+#define ACCUMULATE_OUTGOING_ARGS 1\n+\n+/* Before the prologue, the return address is in the B3 register.  */\n+#define RETURN_ADDR_REGNO REG_B3\n+#define INCOMING_RETURN_ADDR_RTX gen_rtx_REG (Pmode, RETURN_ADDR_REGNO)\n+\n+#define RETURN_ADDR_RTX(COUNT, FRAME) c6x_return_addr_rtx (COUNT)\n+\n+#define INCOMING_FRAME_SP_OFFSET 0\n+#define ARG_POINTER_CFA_OFFSET(fundecl) 0\n+\n+#define STATIC_CHAIN_REGNUM REG_A2\n+\n+struct c6x_args {\n+  /* Number of arguments to pass in registers.  */\n+  int nregs;\n+  /* Number of arguments passed in registers so far.  */\n+  int count;\n+};\n+\n+#define CUMULATIVE_ARGS struct c6x_args\n+\n+#define INIT_CUMULATIVE_ARGS(cum, fntype, libname, fndecl, n_named_args) \\\n+  c6x_init_cumulative_args (&cum, fntype, libname, n_named_args)\n+\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (c6x_block_reg_pad_upward (MODE, TYPE, FIRST) ? upward : downward)\n+\n+#define FUNCTION_ARG_REGNO_P(r) \\\n+    (((r) >= REG_A4 && (r) <= REG_A13) || ((r) >= REG_B4 && (r) <= REG_B13))\n+\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+#define FUNCTION_PROFILER(file, labelno) \\\n+  fatal_error (\"profiling is not yet implemented for this architecture\")\n+\n+\n+/* Trampolines.  */\n+#define TRAMPOLINE_SIZE 32\n+#define TRAMPOLINE_ALIGNMENT 256\n+\f\n+#define ELIMINABLE_REGS\t\t\t\t\t\\\n+{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\t\\\n+\n+/* Define the offset between two registers, one to be eliminated, and the other\n+   its replacement, at the start of a routine.  */\n+\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n+  ((OFFSET) = c6x_initial_elimination_offset ((FROM), (TO)))\n+\f\n+/* Addressing Modes.  */\n+\n+#define CONSTANT_ADDRESS_P(x) (CONSTANT_P(x) && GET_CODE(x) != CONST_DOUBLE)\n+#define MAX_REGS_PER_ADDRESS 2\n+\n+#define HAVE_PRE_DECREMENT 1\n+#define HAVE_POST_DECREMENT 1\n+#define HAVE_PRE_INCREMENT 1\n+#define HAVE_POST_INCREMENT 1\n+\n+/* Register forms are available, but due to scaling we currently don't\n+   support them.  */\n+#define HAVE_PRE_MODIFY_DISP 1\n+#define HAVE_POST_MODIFY_DISP 1\n+\n+#define LEGITIMATE_PIC_OPERAND_P(X) \\\n+  (!symbolic_operand (X, SImode))\n+\f\n+struct GTY(()) machine_function\n+{\n+  /* True if we expanded a sibling call.  */\n+  int contains_sibcall;\n+};\n+\f\n+/* Costs.  */\n+#define NO_FUNCTION_CSE 1\n+\n+#define SLOW_BYTE_ACCESS 0\n+\n+#define BRANCH_COST(speed_p, predictable_p) 6\n+\n+\f\n+/* Model costs for the vectorizer.  */\n+\n+/* Cost of conditional branch.  */\n+#ifndef TARG_COND_BRANCH_COST\n+#define TARG_COND_BRANCH_COST        6\n+#endif\n+\n+/* Cost of any scalar operation, excluding load and store.  */\n+#ifndef TARG_SCALAR_STMT_COST\n+#define TARG_SCALAR_STMT_COST        1\n+#endif\n+\n+/* Cost of scalar load. */\n+#undef TARG_SCALAR_LOAD_COST\n+#define TARG_SCALAR_LOAD_COST        2 /* load + rotate */\n+\n+/* Cost of scalar store.  */\n+#undef TARG_SCALAR_STORE_COST\n+#define TARG_SCALAR_STORE_COST       10\n+\n+/* Cost of any vector operation, excluding load, store,\n+   or vector to scalar operation.  */\n+#undef TARG_VEC_STMT_COST\n+#define TARG_VEC_STMT_COST           1\n+\n+/* Cost of vector to scalar operation.  */\n+#undef TARG_VEC_TO_SCALAR_COST\n+#define TARG_VEC_TO_SCALAR_COST      1\n+\n+/* Cost of scalar to vector operation.  */\n+#undef TARG_SCALAR_TO_VEC_COST\n+#define TARG_SCALAR_TO_VEC_COST      1\n+\n+/* Cost of aligned vector load.  */\n+#undef TARG_VEC_LOAD_COST\n+#define TARG_VEC_LOAD_COST           1\n+\n+/* Cost of misaligned vector load.  */\n+#undef TARG_VEC_UNALIGNED_LOAD_COST\n+#define TARG_VEC_UNALIGNED_LOAD_COST 2\n+\n+/* Cost of vector store.  */\n+#undef TARG_VEC_STORE_COST\n+#define TARG_VEC_STORE_COST          1\n+\n+/* Cost of vector permutation.  */\n+#ifndef TARG_VEC_PERMUTE_COST\n+#define TARG_VEC_PERMUTE_COST        1\n+#endif\n+\n+/* Exception handling.  */\n+#define TARGET_EXTRA_CFI_SECTION(unwind) ((unwind) ? \".c6xabi.exidx\" : NULL)\n+/* ttype entries (the only interesting data references used) are\n+   sb-relative got-indirect (aka .ehtype).  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(code, data) \\\n+  (((code) == 0 && (data) == 1) ? (DW_EH_PE_datarel | DW_EH_PE_indirect) \\\n+\t\t\t\t: DW_EH_PE_absptr)\n+\n+/* This should be the same as the definition in elfos.h, plus the call\n+   to output special unwinding directives.  */\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      c6x_output_file_unwind (FILE);\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* This should be the same as the definition in elfos.h, plus the call\n+   to output special unwinding directives.  */\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(STREAM, NAME, DECL) \\\n+  c6x_function_end (STREAM, NAME)\n+\n+/* Arbitrarily choose A4/A5.  */\n+#define EH_RETURN_DATA_REGNO(N) (((N) < 2) ? (N) + 4 : INVALID_REGNUM)\n+\n+/* The register that holds the return address in exception handlers.  */\n+#define C6X_EH_STACKADJ_REGNUM  3\n+#define EH_RETURN_STACKADJ_RTX  gen_rtx_REG (SImode, C6X_EH_STACKADJ_REGNUM)\n+\n+\n+/* Assembler Format.  */\n+\n+#define DWARF2_ASM_LINE_DEBUG_INFO 1\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"\\t; #APP \\n\"\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"\\t; #NO_APP \\n\"\n+\n+#define ASM_OUTPUT_COMMON(stream, name, size, rounded)\n+#define ASM_OUTPUT_LOCAL(stream, name, size, rounded)\n+\n+#define GLOBAL_ASM_OP \"\\t.global\\t\"\n+\n+#define REGISTER_NAMES\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    \"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\",\t\t\\\n+    \"A8\", \"A9\", \"A10\", \"A11\", \"A12\", \"A13\", \"A14\", \"A15\",\t\\\n+    \"A16\", \"A17\", \"A18\", \"A19\", \"A20\", \"A21\", \"A22\", \"A23\",\t\\\n+    \"A24\", \"A25\", \"A26\", \"A27\", \"A28\", \"A29\", \"A30\", \"A31\",     \\\n+    \"B0\", \"B1\", \"B2\", \"B3\", \"B4\", \"B5\", \"B6\", \"B7\",             \\\n+    \"B8\", \"B9\", \"B10\", \"B11\", \"B12\", \"B13\", \"B14\", \"B15\",       \\\n+    \"B16\", \"B17\", \"B18\", \"B19\", \"B20\", \"B21\", \"B22\", \"B23\",     \\\n+    \"B24\", \"B25\", \"B26\", \"B27\", \"B28\", \"B29\", \"B30\", \"B31\",\t\\\n+    \"FP\", \"ARGP\", \"ILC\" }\n+\n+#define DBX_REGISTER_NUMBER(N) (dbx_register_map[(N)])\n+\n+extern int const dbx_register_map[FIRST_PSEUDO_REGISTER];\n+\n+#define FINAL_PRESCAN_INSN c6x_final_prescan_insn\n+\n+#define TEXT_SECTION_ASM_OP \".text;\"\n+#define DATA_SECTION_ASM_OP \".data;\"\n+\n+#define ASM_OUTPUT_ALIGN(stream, power)\t\t\t    \\\n+  do\t\t\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t    \\\n+      if (power)\t\t\t\t\t    \\\n+        fprintf ((stream), \"\\t.align\\t%d\\n\", power);\t    \\\n+    }                                                       \\\n+  while (0)\n+\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)    \t\\\n+do { char __buf[256];\t\t\t\t\t\\\n+     fprintf (FILE, \"\\t.long\\t\");\t\t\t\t\\\n+     ASM_GENERATE_INTERNAL_LABEL (__buf, \"L\", VALUE);\t\\\n+     assemble_name (FILE, __buf);\t\t\t\\\n+     fputc ('\\n', FILE);\t\t\t\t\\\n+   } while (0)\n+\n+/* Determine whether to place EXP (an expression or a decl) should be\n+   placed into one of the small data sections.  */\n+#define PLACE_IN_SDATA_P(EXP) \\\n+  (c6x_sdata_mode == C6X_SDATA_NONE ? false\t\\\n+   : c6x_sdata_mode == C6X_SDATA_ALL ? true\t\\\n+   : !AGGREGATE_TYPE_P (TREE_TYPE (EXP)))\n+\n+#define SCOMMON_ASM_OP \"\\t.scomm\\t\"\n+\n+#undef  ASM_OUTPUT_ALIGNED_DECL_COMMON\n+#define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (DECL != NULL && PLACE_IN_SDATA_P (DECL))\t\t\t\\\n+\tfprintf ((FILE), \"%s\", SCOMMON_ASM_OP);\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tfprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n+      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+      fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE), (ALIGN) / BITS_PER_UNIT);\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* This says how to output assembler code to declare an\n+   uninitialized internal linkage data object.  */\n+\n+#undef  ASM_OUTPUT_ALIGNED_DECL_LOCAL\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (PLACE_IN_SDATA_P (DECL))\t\t\t\t\t\t\\\n+    switch_to_section (sbss_section);\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    switch_to_section (bss_section);\t\t\t\t\t\\\n+  ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n+  if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+    ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, SIZE);\t\t\t\\\n+  ASM_OUTPUT_ALIGN ((FILE), exact_log2((ALIGN) / BITS_PER_UNIT));\t\\\n+  ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\t\\\n+  ASM_OUTPUT_SKIP((FILE), (SIZE) ? (SIZE) : 1);\t\t\t\t\\\n+} while (0)\n+\n+#define CASE_VECTOR_PC_RELATIVE flag_pic\n+#define JUMP_TABLES_IN_TEXT_SECTION flag_pic\n+\n+#define ADDR_VEC_ALIGN(VEC) (JUMP_TABLES_IN_TEXT_SECTION ? 5 : 2)\n+\n+/* This is how to output an element of a case-vector that is relative.  */\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+  do { char buf[100];\t\t\t\t\t\\\n+       fputs (\"\\t.long \", FILE);\t\t\t\\\n+       ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", VALUE);\t\\\n+       assemble_name (FILE, buf);\t\t\t\\\n+       putc ('-', FILE);\t\t\t\t\\\n+       ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", REL);\t\\\n+       assemble_name (FILE, buf);\t\t\t\\\n+       putc ('\\n', FILE);\t\t\t\t\\\n+     } while (0)\n+\n+/* Misc.  */\n+\n+#define CASE_VECTOR_MODE SImode\n+#define MOVE_MAX 4\n+#define MOVE_RATIO(SPEED) 4\n+#define TRULY_NOOP_TRUNCATION(outprec, inprec) 1\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = 32, 1)\n+#define Pmode SImode\n+#define FUNCTION_MODE QImode\n+\n+extern int c6x_initial_flag_pic;\n+\n+#endif /* GCC_C6X_H */"}, {"sha": "7935a8170599eacca250af7997f16dc4656cdc84", "filename": "gcc/config/c6x/c6x.md", "status": "added", "additions": 3004, "deletions": 0, "changes": 3004, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.md?ref=bcead286bfebf2312981135b9c7d72eadc6d396c"}, {"sha": "14ad81b2c6238602110f917d89fe8615194609cc", "filename": "gcc/config/c6x/c6x.opt", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.opt?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,67 @@\n+; Option definitions for TI C6X.\n+; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+; Contributed by CodeSourcery.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify\n+; it under the terms of the GNU General Public License as published by\n+; the Free Software Foundation; either version 3, or (at your option)\n+; any later version.\n+;\n+; GCC is distributed in the hope that it will be useful,\n+; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+; GNU General Public License for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+HeaderInclude\n+config/c6x/c6x-opts.h\n+\n+SourceInclude\n+config/c6x/c6x-opts.h\n+\n+mbig-endian\n+Target Report RejectNegative Mask(BIG_ENDIAN)\n+Use big-endian byte order\n+\n+mlittle-endian\n+Target Report RejectNegative InverseMask(BIG_ENDIAN, LITTLE_ENDIAN)\n+Use little-endian byte order\n+\n+msim\n+Target RejectNegative\n+Use simulator runtime\n+\n+msdata=\n+Target RejectNegative Enum(c6x_sdata) Joined Var(c6x_sdata_mode) Init(C6X_SDATA_DEFAULT)\n+Select method for sdata handling\n+\n+Enum\n+Name(c6x_sdata) Type(enum c6x_sdata)\n+Valid arguments for the -msdata= option\n+\n+EnumValue\n+Enum(c6x_sdata) String(none) Value(C6X_SDATA_NONE)\n+\n+EnumValue\n+Enum(c6x_sdata) String(default) Value(C6X_SDATA_DEFAULT)\n+\n+EnumValue\n+Enum(c6x_sdata) String(all) Value(C6X_SDATA_ALL)\n+\n+mdsbt\n+Target Mask(DSBT)\n+Compile for the DSBT shared library ABI\n+\n+mlong-calls\n+Target Report Mask(LONG_CALLS)\n+Avoid generating pc-relative calls; use indirection\n+\n+march=\n+Target RejectNegative Joined Enum(c6x_isa) Var(c6x_arch_option)\n+Specify the name of the target architecture"}, {"sha": "2ae7dd5018a0036ba14d9bee14910296082814b3", "filename": "gcc/config/c6x/c6x_intrinsics.h", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x_intrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fc6x_intrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x_intrinsics.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,194 @@\n+/* Intrinsics for TI C6X.\n+\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _GCC_C6X_INTRINSICS_H\n+#define _GCC_C6X_INTRINSICS_H\n+\n+#if !defined(__TMS320C6X__)\n+# error \"c6x_intrinsics.h is only supported for C6X targets\"\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include <stdint.h>\n+\n+/* Define vector types.  */\n+typedef uint8_t __uv4qi __attribute__((vector_size (4)));\n+typedef int16_t __v2hi __attribute__((vector_size (4)));\n+typedef int32_t __v2si __attribute__((vector_size (8)));\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_abs (int src)\n+{\n+  return __builtin_c6x_abs (src);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_abs2 (int src)\n+{\n+  return (int)__builtin_c6x_abs2 ((__v2hi)src);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_sadd (int src1, int src2)\n+{\n+  return __builtin_c6x_sadd (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_ssub (int src1, int src2)\n+{\n+  return __builtin_c6x_ssub (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_add2 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_add2 ((__v2hi)src1, (__v2hi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_sub2 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_sub2 ((__v2hi)src1, (__v2hi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_add4 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_add4 ((__uv4qi)src1, (__uv4qi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_sub4 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_sub4 ((__uv4qi)src1, (__uv4qi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_sadd2 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_sadd2 ((__v2hi)src1, (__v2hi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_ssub2 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_ssub2 ((__v2hi)src1, (__v2hi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_saddu4 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_saddu4 ((__uv4qi)src1, (__uv4qi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_smpy (int src1, int src2)\n+{\n+  return __builtin_c6x_smpy (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_smpylh (int src1, int src2)\n+{\n+  return __builtin_c6x_smpylh (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_smpyhl (int src1, int src2)\n+{\n+  return __builtin_c6x_smpyhl (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_smpyh (int src1, int src2)\n+{\n+  return __builtin_c6x_smpyh (src1, src2);\n+}\n+\n+__extension__ static __inline long long __attribute__ ((__always_inline__))\n+_smpy2ll (int src1, int src2)\n+{\n+  return (long long)__builtin_c6x_smpy2 ((__v2hi)src1, (__v2hi)src2);\n+}\n+\n+__extension__ static __inline long long __attribute__ ((__always_inline__))\n+_mpy2ll (int src1, int src2)\n+{\n+  return (long long)__builtin_c6x_mpy2 ((__v2hi)src1, (__v2hi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_extr (int src1, int src2)\n+{\n+  return __builtin_c6x_extr (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_extru (int src1, int src2)\n+{\n+  return __builtin_c6x_extru (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_clrr (int src1, int src2)\n+{\n+  return __builtin_c6x_clrr (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_avg2 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_avg2 ((__v2hi)src1, (__v2hi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_avgu4 (int src1, int src2)\n+{\n+  return (int)__builtin_c6x_avgu4 ((__uv4qi)src1, (__uv4qi)src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_sshl (int src1, int src2)\n+{\n+  return __builtin_c6x_sshl (src1, src2);\n+}\n+\n+__extension__ static __inline int __attribute__ ((__always_inline__))\n+_subc (int src1, int src2)\n+{\n+  return __builtin_c6x_subc (src1, src2);\n+}\n+\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"}, {"sha": "1a6710b0f1e3217ea15bdb4f812a735203a9b658", "filename": "gcc/config/c6x/constraints.md", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fconstraints.md?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,174 @@\n+;; Constraint definitions for TI C6X.\n+;; Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+;; Contributed by Andrew Jenner <andrew@codesourcery.com>\n+;; Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+;; Contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_register_constraint \"a\" \"A_REGS\"\n+  \"Register file A (A0--A31).\")\n+\n+(define_register_constraint \"b\" \"B_REGS\"\n+  \"Register file B (B0--B31).\")\n+\n+(define_register_constraint \"A\" \"PREDICATE_A_REGS\"\n+  \"Predicate registers in register file A (A0--A2 on C64X and higher,\n+   A1 and A2 otherwise).\")\n+\n+(define_register_constraint \"B\" \"PREDICATE_B_REGS\"\n+  \"Predicate registers in register file B (B0--B2).\")\n+\n+(define_register_constraint \"C\" \"CALL_USED_B_REGS\"\n+  \"A call-used register in register file B (B0--B9, B16--B31).\")\n+\n+(define_register_constraint \"Da\" \"NONPREDICATE_A_REGS\"\n+  \"Register file A, excluding predicate registers (A3--A31, plus A0 if\n+not C64X or higher).\")\n+\n+(define_register_constraint \"Db\" \"NONPREDICATE_B_REGS\"\n+  \"Register file B, excluding predicate registers (B3--B31).\")\n+\n+(define_register_constraint \"Z\" \"PICREG\"\n+  \"Register B14 (aka DP).\")\n+\n+(define_register_constraint \"z\" \"SPREG\"\n+  \"Register B15 (aka SP).\")\n+\n+(define_constraint \"Iu4\"\n+  \"Integer constant in the range 0 @dots{} 15, aka ucst4.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 15\")))\n+\n+(define_constraint \"Iu5\"\n+  \"Integer constant in the range 0 @dots{} 31, aka ucst5.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 31\")))\n+\n+(define_constraint \"In5\"\n+  \"Integer constant in the range @minus{}31 @dots{} 0, negation of ucst5.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -31 && ival <= 0\")))\n+\n+(define_constraint \"Is5\"\n+  \"Integer constant in the range @minus{}16 @dots{} 15, aka scst5.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -16 && ival <= 15\")))\n+\n+(define_constraint \"I5x\"\n+  \"Integer constant that can be the operand of an ADDA or a SUBA insn.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival >= -31 && ival <= 31)\n+\t\t    || ((ival & 1) == 0 && ival >= -62 && ival <= 62)\n+\t\t    || ((ival & 3) == 0 && ival >= -124 && ival <= 124)\n+\t\t    || ((TARGET_INSNS_64 || TARGET_INSNS_67)\n+ \t\t\t&& (ival & 7) == 0 && ival > 0 && ival <= 248)\")))\n+\n+(define_constraint \"Iux\"\n+  \"Integer constant that can be the operand of a long ADDA or a SUBA insn,\n+   i.e. one involving B14 or B15 as source operand.\"\n+  (and (match_code \"const_int\")\n+       (and (match_test \"TARGET_INSNS_64PLUS\")\n+\t    (match_test \"ival >= 0\n+ \t\t\t && (ival < 32768\n+\t\t     \t     || ((ival & 1) == 0 && ival < 65536)\n+\t\t\t     || ((ival & 3) == 0 && ival < 131072))\"))))\n+\n+(define_constraint \"IuB\"\n+  \"Integer constant in the range 0 @dots{} 65535, aka ucst16.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival <= 65535\")))\n+\n+(define_constraint \"IsB\"\n+  \"Integer constant in the range @minus{}32768 @dots{} 32767.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -32768 && ival <= 32767\")))\n+\n+(define_constraint \"IsC\"\n+  \"Integer constant in the range @math{-2^{20}} @dots{} @math{2^{20} - 1}.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= -0x100000 && ival <= 0xfffff\")))\n+\n+(define_constraint \"JA\"\n+  \"@internal\n+   Integer constant in the range 0 @dots{} 31, corresponding to an A register\n+   number.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 0 && ival < 32\")))\n+\n+(define_constraint \"JB\"\n+  \"@internal\n+   Integer constant in the range 32 @dots{} 63, corresponding to a B register\n+   number.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival >= 32 && ival < 64\")))\n+\n+(define_constraint \"Jc\"\n+  \"Integer constant that is a valid mask for the clr instruction\"\n+  (and (match_code \"const_int\")\n+       (match_test \"c6x_valid_mask_p (ival)\")))\n+\n+(define_constraint \"Js\"\n+  \"Integer constant that is a valid mask for the set instruction\"\n+  (and (match_code \"const_int\")\n+       (match_test \"c6x_valid_mask_p (~ival)\")))\n+\n+(define_memory_constraint \"Q\"\n+  \"Memory location with A base register.\"\n+  (and (match_code \"mem\")\n+       (match_test \"c6x_mem_operand (op, A_REGS, false)\")))\n+\n+(define_memory_constraint \"R\"\n+  \"Memory location with B base register.\"\n+  (and (match_code \"mem\")\n+       (match_test \"c6x_mem_operand (op, B_REGS, false)\")))\n+\n+(define_memory_constraint \"T\"\n+  \"@internal\n+   Memory location with B base register, but not using a long offset.\"\n+  (and (match_code \"mem\")\n+       (match_test \"c6x_mem_operand (op, B_REGS, true)\")))\n+\n+(define_constraint \"S0\"\n+  \"@internal\n+   On C64x+ targets, a GP-relative small data reference\"\n+  (and (match_test \"TARGET_INSNS_64PLUS\")\n+       (match_operand 0 \"sdata_symbolic_operand\")))\n+\n+(define_constraint \"S1\"\n+  \"@internal\n+   Any kind of @code{SYMBOL_REF}, for use in a call address.\"\n+  (and (match_code \"symbol_ref\")\n+       (match_operand 0 \"c6x_call_operand\")))\n+\n+(define_constraint \"S2\"\n+  \"@internal\n+   Any SYMBOL_REF or LABEL_REF.\"\n+  (ior (match_code \"symbol_ref\") (match_code \"label_ref\")))\n+\n+(define_constraint \"Si\"\n+  \"@internal\n+   Any immediate value, unless it matches the S0 constraint.\"\n+  (and (match_operand 0 \"immediate_operand\")\n+       (match_test \"!satisfies_constraint_S0 (op)\")))\n+\n+(define_memory_constraint \"W\"\n+  \"@internal\n+   A memory operand with an address that can't be used in an unaligned access.\"\n+  (and (match_code \"mem\")\n+       (match_test \"!c6x_legitimate_address_p_1 (GET_MODE (op), XEXP (op, 0),\n+ \t\t\t\t\t\t reload_completed, true)\")))"}, {"sha": "8fe35c1f12117819160f4166f6906859bc63ff0d", "filename": "gcc/config/c6x/crti.s", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fcrti.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fcrti.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fcrti.s?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,39 @@\n+/* Copyright 2010, 2011  Free Software Foundation, Inc.\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+ * This file just supplies function prologues for the .init and .fini\n+ * sections.  It is linked in before crtbegin.o.\n+ */\n+\n+\t.section .init\n+\t.globl  _init\n+\t.type   _init,@function\n+_init:\n+\tadd\t.l2\t-8, B15, B15\n+\tstw\t.d2t2\tB3,*+B15(4)\n+\t.section .fini\n+\t.globl  _fini\n+\t.type   _fini,@function\n+_fini:\n+\tadd\t.l2\t-8, B15, B15\n+\tstw\t.d2t2\tB3,*+B15(4)"}, {"sha": "5900a4b14c4e82eb72da2d03a6777fcc8e32fb44", "filename": "gcc/config/c6x/crtn.s", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fcrtn.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fcrtn.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fcrtn.s?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,41 @@\n+/* Copyright 2010, 2011  Free Software Foundation, Inc.\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+ * This file supplies function epilogues for the .init and .fini sections.\n+ * It is linked in after all other files.\n+ */\n+\n+\t.section .init\n+\tldw .d2t2\t*+B15(4), B3\n+\tadd .d2\t\tB15, 8, B15\n+\tnop\t\t3\n+\tret .s2\t\tB3\n+\tnop\t\t5\n+\n+\t.section .fini\n+\tldw .d2t2\t*+B15(4), B3\n+\tadd .d2\t\tB15, 8, B15\n+\tnop\t\t3\n+\tret .s2\t\tB3\n+\tnop\t\t5\n+"}, {"sha": "50a3c3aeb3b2c2eecae58bf6e7ae90f702230b42", "filename": "gcc/config/c6x/elf-common.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Felf-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Felf-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Felf-common.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,37 @@\n+/* ELF definitions for TI C6X\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Contributed by Andrew Jenner <andrew@codesourcery.com>\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Controlling the Compilation Driver.  */\n+#define ENDIAN_LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} \"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"%{march=*:-march=%*} %{mbig-endian:-mbig-endian} \\\n+ %{mdsbt:-mdsbt %{!fPIC:-mpid=near} %{fPIC:-mpid=far -mpic} %{fpic:-mpic}} \\\n+ %{!mdsbt:%{fpic:-mpic -mpid=near} %{fPIC:-mpic -mpid=far}}\"\n+\n+#undef DATA_SECTION_ASM_OP\n+#define DATA_SECTION_ASM_OP \"\\t.section\\t\\\".fardata\\\",\\\"aw\\\"\"\n+#undef READONLY_DATA_SECTION_ASM_OP\n+#define READONLY_DATA_SECTION_ASM_OP \"\\t.section\\t\\\".const\\\",\\\"a\\\",@progbits\"\n+#define BSS_SECTION_ASM_OP \"\\t.section\\t\\\".far\\\",\\\"aw\\\",@nobits\"\n+#define SDATA_SECTION_ASM_OP \"\\t.section\\t\\\".neardata\\\",\\\"aw\\\"\"\n+#define SBSS_SECTION_ASM_OP \"\\t.section\\t\\\".bss\\\",\\\"aw\\\",@nobits\"\n+#define TARGET_LIBGCC_SDATA_SECTION \".neardata\""}, {"sha": "d89ed430641ce23ce34d04a0274a600968601442", "filename": "gcc/config/c6x/elf.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Felf.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,35 @@\n+/* ELF definitions for TI C6X\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Contributed by Andrew Jenner <andrew@codesourcery.com>\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* crt0.o should come from the linker script, but for compatibility,\n+   we mention it here for -msim.  */\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{msim:crt0%O%s} crti%O%s crtbegin%O%s\"\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC\t\"crtend%O%s crtn%O%s\"\n+\n+#undef  LIB_SPEC\n+#define LIB_SPEC \"%{msim:--start-group -lc -lsim --end-group;\" \\\n+\t\":-lc}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC ENDIAN_LINK_SPEC"}, {"sha": "c19f88683a95bde1b0937a6ace724f6f21f36e5d", "filename": "gcc/config/c6x/eqd.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Feqd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Feqd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Feqd.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a == b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/double.h\"\n+\n+CMPtype __c6xabi_eqd(DFtype a, DFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A); FP_DECL_D(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_D(A, a);\n+  FP_UNPACK_RAW_D(B, b);\n+  FP_CMP_EQ_D(r, A, B);\n+  if (r && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return !r;\n+}"}, {"sha": "c87c92b7433ff38bef9f0cac5145574584be3c10", "filename": "gcc/config/c6x/eqf.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Feqf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Feqf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Feqf.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a == b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/single.h\"\n+\n+CMPtype __c6xabi_eqf(SFtype a, SFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A); FP_DECL_S(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_S(A, a);\n+  FP_UNPACK_RAW_S(B, b);\n+  FP_CMP_EQ_S(r, A, B);\n+  if (r && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return !r;\n+}"}, {"sha": "30590b259efc4d44e1a70bac323d6a0b9b3035ca", "filename": "gcc/config/c6x/ged.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fged.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fged.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fged.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a >= b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/double.h\"\n+\n+CMPtype __c6xabi_ged(DFtype a, DFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A); FP_DECL_D(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_D(A, a);\n+  FP_UNPACK_RAW_D(B, b);\n+  FP_CMP_D(r, A, B, -2);\n+  if (r == -2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r >= 0;\n+}"}, {"sha": "0a22b13b64b105e6c29d1f1706baad3ab1103c40", "filename": "gcc/config/c6x/gef.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fgef.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a >= b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/single.h\"\n+\n+CMPtype __c6xabi_gef(SFtype a, SFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A); FP_DECL_S(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_S(A, a);\n+  FP_UNPACK_RAW_S(B, b);\n+  FP_CMP_S(r, A, B, -2);\n+  if (r == -2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r >= 0;\n+}"}, {"sha": "993c8261b68f9c70cfe94bf4ad06ddda319e137c", "filename": "gcc/config/c6x/genmult.sh", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgenmult.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgenmult.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fgenmult.sh?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,33 @@\n+#! /bin/sh\n+# Generate c6x-mult.md from c6x-mult.md.in\n+# The input file is passed as an argument.\n+\n+# Copyright 2011 Free Software Foundation, Inc.\n+\n+#This file is part of GCC.\n+\n+#GCC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 3, or (at your option)\n+#any later version.\n+\n+#GCC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GCC; see the file COPYING3.  If not see\n+#<http://www.gnu.org/licenses/>.\n+\n+echo \";; -*- buffer-read-only: t -*-\"\n+echo \";; Generated automatically from c6x-mult.md.in by genmult.sh\"\n+\n+sed -e \"s,_VARIANT_,,g\" -e \"s,_SET_,set,g\" -e \"s,_.BRK_,,g\" \\\n+    -e \"s,_A_,a,g\" -e \"s,_B_,b,g\" -e \"s,_DESTOPERAND_,register_operand,g\" \\\n+    -e \"s,_MOD._,,g\" -e \"s,:_M,:,g\" < $1\n+\n+sed -e \"s,_VARIANT_,_real,g\" -e \"s,_SET_,unspec,g\" -e \"s,_OBRK_,[,g\" \\\n+    -e \"s,_CBRK_,] UNSPEC_REAL_MULT,g\" -e \"s,_A_,JA,g\" -e \"s,_B_,JB,g\" \\\n+    -e \"s,_DESTOPERAND_,const_int_operand,g\" -e \"s,_MODk_,k,g\" \\\n+    -e \"s,_MODK_,K,g\" -e 's,:_MV..[IQ],:SI,g' -e \"s,:_MSQ,:SI,g\"  < $1"}, {"sha": "5f323c96bfdf95861968f8622395dace4381b07d", "filename": "gcc/config/c6x/genopt.sh", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fgenopt.sh?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,59 @@\n+#!/bin/sh\n+# Generate c6x-tables.opt from the lists in *.def.\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from c6x-isas.def.\n+;\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(c6x_isa) Type(int)\n+Known C6X ISAs (for use with the -march= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' 'BEGIN {\n+    value = 0\n+}\n+/^C6X_ISA/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(c6x_isa) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/c6x-isas.def"}, {"sha": "61ea70d7614dafbd02edfe4f327f706e8467d79d", "filename": "gcc/config/c6x/gensched.sh", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgensched.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgensched.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fgensched.sh?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,44 @@\n+#! /bin/sh\n+# Generate c6x-sched.md from c6x-sched.md.in\n+# The input file is passed as an argument.\n+\n+# Copyright 2010, 2011 Free Software Foundation, Inc.\n+\n+#This file is part of GCC.\n+\n+#GCC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 3, or (at your option)\n+#any later version.\n+\n+#GCC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GCC; see the file COPYING3.  If not see\n+#<http://www.gnu.org/licenses/>.\n+\n+echo \";; -*- buffer-read-only: t -*-\"\n+echo \";; Generated automatically from c6x-sched.md.in by gensched.sh\"\n+\n+for cross in n y; do\n+    for side in 1 2; do\n+\ttside=$side\n+\tcase $side in\n+\t    1) rf=\"a\"; otherside=2 ;;\n+\t    2) rf=\"b\"; otherside=1 ;;\n+\tesac\n+\tcase $cross in\n+\t    y) cunit=\"+x$side\"; tside=$otherside;;\n+\t    n) cunit=\"\";;\n+\tesac\n+\techo\n+\techo \";; Definitions for side $side, cross $cross\"\n+\techo\n+\tsed -e \"s,_CROSS_,$cross,g\" -e \"s,_CUNIT_,$cunit,g\" \\\n+\t    -e \"s,_N_,$side,g\" -e \"s,_RF_,$rf,g\" -e \"s,_NX_,$tside,g\" \\\n+\t    < $1\n+    done\n+done"}, {"sha": "042192b523559c054ef280bd3ce8c60ff81183d5", "filename": "gcc/config/c6x/gtd.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgtd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgtd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fgtd.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a > b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/double.h\"\n+\n+CMPtype __c6xabi_gtd(DFtype a, DFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A); FP_DECL_D(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_D(A, a);\n+  FP_UNPACK_RAW_D(B, b);\n+  FP_CMP_D(r, A, B, -2);\n+  if (r == -2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r > 0;\n+}"}, {"sha": "0d0e10a0df5d1e1310de729653627ff2eb061220", "filename": "gcc/config/c6x/gtf.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgtf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fgtf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fgtf.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a > b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/single.h\"\n+\n+CMPtype __c6xabi_gtf(SFtype a, SFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A); FP_DECL_S(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_S(A, a);\n+  FP_UNPACK_RAW_S(B, b);\n+  FP_CMP_S(r, A, B, -2);\n+  if (r == -2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r > 0;\n+}"}, {"sha": "b97f3d15c1e48c0ad72a795b968e9a92238ffdbc", "filename": "gcc/config/c6x/led.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fled.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a <= b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/double.h\"\n+\n+CMPtype __c6xabi_led(DFtype a, DFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A); FP_DECL_D(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_D(A, a);\n+  FP_UNPACK_RAW_D(B, b);\n+  FP_CMP_D(r, A, B, 2);\n+  if (r == 2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r <= 0;\n+}"}, {"sha": "d234a180d77d174eb1152e82dcb170cb87f3d154", "filename": "gcc/config/c6x/lef.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Flef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Flef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Flef.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a <= b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/single.h\"\n+\n+CMPtype __c6xabi_lef(SFtype a, SFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A); FP_DECL_S(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_S(A, a);\n+  FP_UNPACK_RAW_S(B, b);\n+  FP_CMP_S(r, A, B, 2);\n+  if (r == 2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r <= 0;\n+}"}, {"sha": "5bf34474bbd75204b176d5a3ac462728a212b2e6", "filename": "gcc/config/c6x/lib1funcs.asm", "status": "added", "additions": 438, "deletions": 0, "changes": 438, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Flib1funcs.asm?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,438 @@\n+/* Copyright 2010, 2011  Free Software Foundation, Inc.\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\t;; ABI considerations for the divide functions\n+\t;; The following registers are call-used:\n+\t;; __c6xabi_divi A0,A1,A2,A4,A6,B0,B1,B2,B4,B5\n+\t;; __c6xabi_divu A0,A1,A2,A4,A6,B0,B1,B2,B4\n+\t;; __c6xabi_remi A1,A2,A4,A5,A6,B0,B1,B2,B4\n+\t;; __c6xabi_remu A1,A4,A5,A7,B0,B1,B2,B4\n+\t;;\n+\t;; In our implementation, divu and remu are leaf functions,\n+\t;; while both divi and remi call into divu.\n+\t;; A0 is not clobbered by any of the functions.\n+\t;; divu does not clobber B2 either, which is taken advantage of\n+\t;; in remi.\n+\t;; divi uses B5 to hold the original return address during\n+\t;; the call to divu.\n+\t;; remi uses B2 and A5 to hold the input values during the\n+\t;; call to divu.  It stores B3 in on the stack.\n+\n+#ifdef L_divsi3\n+.text\n+.align 2\n+.global __c6xabi_divi\n+.hidden __c6xabi_divi\n+.type __c6xabi_divi, STT_FUNC\n+\n+__c6xabi_divi:\n+\tcall .s2\t__c6xabi_divu\n+||\tmv .d2\t\tB3, B5\n+||\tcmpgt .l1\t0, A4, A1\n+||\tcmpgt .l2\t0, B4, B1\n+\n+\t[A1] neg .l1\tA4, A4\n+||\t[B1] neg .l2\tB4, B4\n+||\txor .s1x\tA1, B1, A1\n+\n+#ifdef _TMS320C6400\n+\t[A1] addkpc .s2\t1f, B3, 4\n+#else\n+\t[A1] mvkl .s2\t1f, B3\n+\t[A1] mvkh .s2\t1f, B3\n+\tnop\t\t2\n+#endif\n+1:\n+\tneg .l1\t\tA4, A4\n+||\tmv .l2\t\tB3,B5\n+||\tret .s2\t\tB5\n+\tnop\t\t5\n+#endif\n+\n+#if defined L_modsi3 || defined L_divmodsi4\n+.align 2\n+#ifdef L_modsi3\n+#define MOD_OUTPUT_REG A4\n+.global __c6xabi_remi\n+.hidden __c6xabi_remi\n+.type __c6xabi_remi, STT_FUNC\n+#else\n+#define MOD_OUTPUT_REG A5\n+.global __c6xabi_divremi\n+.hidden __c6xabi_divremi\n+.type __c6xabi_divremi, STT_FUNC\n+__c6xabi_divremi:\n+#endif\n+\n+__c6xabi_remi:\n+\tstw .d2t2\tB3, *B15--[2]\n+||\tcmpgt .l1\t0, A4, A1\n+||\tcmpgt .l2\t0, B4, B2\n+||\tmv .s1\t\tA4, A5\n+||\tcall .s2\t__c6xabi_divu\n+\n+\t[A1] neg .l1\tA4, A4\n+||\t[B2] neg .l2\tB4, B4\n+||\txor .s2x\tB2, A1, B0\n+||\tmv .d2\t\tB4, B2\n+\n+#ifdef _TMS320C6400\n+\t[B0] addkpc .s2\t1f, B3, 1\n+\t[!B0] addkpc .s2 2f, B3, 1\n+\tnop\t\t2\n+#else\n+\t[B0] mvkl .s2\t1f,B3\n+\t[!B0] mvkl .s2\t2f,B3\n+\n+\t[B0] mvkh .s2\t1f,B3\n+\t[!B0] mvkh .s2\t2f,B3\n+#endif\n+1:\n+\tneg .l1\t\tA4, A4\n+2:\n+\tldw .d2t2\t*++B15[2], B3\n+\n+#ifdef _TMS320C6400_PLUS\n+\tmpy32 .m1x\tA4, B2, A6\n+\tnop\t\t3\n+\tret .s2\t\tB3\n+\tsub .l1\t\tA5, A6, MOD_OUTPUT_REG\n+\tnop\t\t4\n+#else\n+\tmpyu .m1x\tA4, B2, A1\n+\tnop\t\t1\n+\tmpylhu .m1x\tA4, B2, A6\n+||\tmpylhu .m2x\tB2, A4, B2\n+\tnop\t\t1\n+\tadd .l1x\tA6, B2, A6\n+||\tret .s2\t\tB3\n+\tshl .s1\t\tA6, 16, A6\n+\tadd .d1\t\tA6, A1, A6\n+\tsub .l1\t\tA5, A6, MOD_OUTPUT_REG\n+\tnop\t\t2\n+#endif\n+\n+#endif\n+\n+#if defined L_udivsi3 || defined L_udivmodsi4\n+.align 2\n+#ifdef L_udivsi3\n+.global __c6xabi_divu\n+.hidden __c6xabi_divu\n+.type __c6xabi_divu, STT_FUNC\n+__c6xabi_divu:\n+#else\n+.global __c6xabi_divremu\n+.hidden __c6xabi_divremu\n+.type __c6xabi_divremu, STT_FUNC\n+__c6xabi_divremu:\n+#endif\n+\t;; We use a series of up to 31 subc instructions.  First, we find\n+\t;; out how many leading zero bits there are in the divisor.  This\n+\t;; gives us both a shift count for aligning (shifting) the divisor\n+\t;; to the, and the number of times we have to execute subc.\n+\n+\t;; At the end, we have both the remainder and most of the quotient\n+\t;; in A4.  The top bit of the quotient is computed first and is\n+\t;; placed in A2.\n+\n+\t;; Return immediately if the dividend is zero.  Setting B4 to 1\n+\t;; is a trick to allow us to leave the following insns in the jump\n+\t;; delay slot without affecting the result.\n+\tmv\t.s2x\tA4, B1\n+\n+#ifndef _TMS320C6400\n+[!b1]\tmvk\t.s2\t1, B4\n+#endif\n+[b1]\tlmbd\t.l2\t1, B4, B1\n+||[!b1] b\t.s2\tB3\t; RETURN A\n+#ifdef _TMS320C6400\n+||[!b1] mvk\t.d2\t1, B4\n+#endif\n+#ifdef L_udivmodsi4\n+||[!b1] zero\t.s1\tA5\n+#endif\n+\tmv\t.l1x\tB1, A6\n+||\tshl\t.s2\tB4, B1, B4\n+\n+\t;; The loop performs a maximum of 28 steps, so we do the\n+\t;; first 3 here.\n+\tcmpltu\t.l1x\tA4, B4, A2\n+[!A2]\tsub\t.l1x\tA4, B4, A4\n+||\tshru\t.s2\tB4, 1, B4\n+||\txor\t.s1\t1, A2, A2\n+\n+\tshl\t.s1\tA2, 31, A2\n+|| [b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+\n+\t;; RETURN A may happen here (note: must happen before the next branch)\n+0:\n+\tcmpgt\t.l2\tB1, 7, B0\n+|| [b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+|| [b0] b\t.s1\t0b\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+\t;; loop backwards branch happens here\n+\n+\tret\t.s2\tB3\n+||\tmvk\t.s1\t32, A1\n+\tsub\t.l1\tA1, A6, A6\n+#ifdef L_udivmodsi4\n+||\textu\t.s1\tA4, A6, A5\n+#endif\n+\tshl\t.s1\tA4, A6, A4\n+\tshru\t.s1\tA4, 1, A4\n+||\tsub\t.l1\tA6, 1, A6\n+\tor\t.l1\tA2, A4, A4\n+\tshru\t.s1\tA4, A6, A4\n+\tnop\n+\n+#endif\n+\n+#ifdef L_umodsi3\n+.align 2\n+.global __c6xabi_remu\n+.hidden __c6xabi_remu\n+.type __c6xabi_remu, STT_FUNC\n+__c6xabi_remu:\n+\t;; The ABI seems designed to prevent these functions calling each other,\n+\t;; so we duplicate most of the divsi3 code here.\n+\tmv\t.s2x\tA4, B1\n+#ifndef _TMS320C6400\n+[!b1]\tmvk\t.s2\t1, B4\n+#endif\n+\tlmbd\t.l2\t1, B4, B1\n+||[!b1] b\t.s2\tB3\t; RETURN A\n+#ifdef _TMS320C6400\n+||[!b1] mvk\t.d2\t1, B4\n+#endif\n+\n+\tmv\t.l1x\tB1, A7\n+||\tshl\t.s2\tB4, B1, B4\n+\n+\tcmpltu\t.l1x\tA4, B4, A1\n+[!a1]\tsub\t.l1x\tA4, B4, A4\n+\tshru\t.s2\tB4, 1, B4\n+\n+0:\n+\tcmpgt\t.l2\tB1, 7, B0\n+|| [b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+\t;; RETURN A may happen here (note: must happen before the next branch)\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+|| [b0] b\t.s1\t0b\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+\t;; loop backwards branch happens here\n+\n+\tret\t.s2\tB3\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+|| [b1]\tadd\t.s2\t-1, B1, B1\n+[b1]\tsubc\t.l1x\tA4,B4,A4\n+\n+\textu\t.s1\tA4, A7, A4\n+\tnop\t2\n+#endif\n+\n+#if defined L_strasgi_64plus && defined _TMS320C6400_PLUS\n+\n+.align 2\n+.global __c6xabi_strasgi_64plus\n+.hidden __c6xabi_strasgi_64plus\n+.type __c6xabi_strasgi_64plus, STT_FUNC\n+__c6xabi_strasgi_64plus:\n+\tshru\t.s2x\ta6, 2, b31\n+||\tmv\t.s1\ta4, a30\n+||\tmv\t.d2\tb4, b30\n+\n+\tadd\t.s2\t-4, b31, b31\n+\n+\tsploopd\t\t1\n+||\tmvc\t.s2\tb31, ilc\n+\tldw\t.d2t2\t*b30++, b31\n+\tnop\t4\n+\tmv\t.s1x\tb31,a31\n+\tspkernel\t6, 0\n+||\tstw\t.d1t1\ta31, *a30++\n+\n+\tret\t.s2\tb3\n+\tnop 5\n+#endif\n+\n+#ifdef L_strasgi\n+.global __c6xabi_strasgi\n+.type __c6xabi_strasgi, STT_FUNC\n+__c6xabi_strasgi:\n+\t;; This is essentially memcpy, with alignment known to be at least\n+\t;; 4, and the size a multiple of 4 greater than or equal to 28.\n+\tldw\t.d2t1\t*B4++, A0\n+||\tmvk\t.s2\t16, B1\n+\tldw\t.d2t1\t*B4++, A1\n+||\tmvk\t.s2\t20, B2\n+||\tsub\t.d1\tA6, 24, A6\n+\tldw\t.d2t1\t*B4++, A5\n+\tldw\t.d2t1\t*B4++, A7\n+||\tmv\t.l2x\tA6, B7\n+\tldw\t.d2t1\t*B4++, A8\n+\tldw\t.d2t1\t*B4++, A9\n+||\tmv\t.s2x\tA0, B5\n+||\tcmpltu\t.l2\tB2, B7, B0\n+\n+0:\n+\tstw\t.d1t2\tB5, *A4++\n+||[b0]\tldw\t.d2t1\t*B4++, A0\n+||\tmv\t.s2x\tA1, B5\n+||\tmv\t.l2\tB7, B6\n+\n+[b0]\tsub\t.d2\tB6, 24, B7\n+||[b0]\tb\t.s2\t0b\n+||\tcmpltu\t.l2\tB1, B6, B0\n+\n+[b0]\tldw\t.d2t1\t*B4++, A1\n+||\tstw\t.d1t2\tB5, *A4++\n+||\tmv\t.s2x\tA5, B5\n+||\tcmpltu\t.l2\t12, B6, B0\n+\n+[b0]\tldw\t.d2t1\t*B4++, A5\n+||\tstw\t.d1t2\tB5, *A4++\n+||\tmv\t.s2x\tA7, B5\n+||\tcmpltu\t.l2\t8, B6, B0\n+\n+[b0]\tldw\t.d2t1\t*B4++, A7\n+||\tstw\t.d1t2\tB5, *A4++\n+||\tmv\t.s2x\tA8, B5\n+||\tcmpltu\t.l2\t4, B6, B0\n+\n+[b0]\tldw\t.d2t1\t*B4++, A8\n+||\tstw\t.d1t2\tB5, *A4++\n+||\tmv\t.s2x\tA9, B5\n+||\tcmpltu\t.l2\t0, B6, B0\n+\n+[b0]\tldw\t.d2t1\t*B4++, A9\n+||\tstw\t.d1t2\tB5, *A4++\n+||\tmv\t.s2x\tA0, B5\n+||\tcmpltu\t.l2\tB2, B7, B0\n+\n+\t;; loop back branch happens here\n+\n+\tcmpltu\t.l2\tB1, B6, B0\n+||\tret\t.s2\tb3\n+\n+[b0]\tstw\t.d1t1\tA1, *A4++\n+||\tcmpltu\t.l2\t12, B6, B0\n+[b0]\tstw\t.d1t1\tA5, *A4++\n+||\tcmpltu\t.l2\t8, B6, B0\n+[b0]\tstw\t.d1t1\tA7, *A4++\n+||\tcmpltu\t.l2\t4, B6, B0\n+[b0]\tstw\t.d1t1\tA8, *A4++\n+||\tcmpltu\t.l2\t0, B6, B0\n+[b0]\tstw\t.d1t1\tA9, *A4++\n+\n+\t;; return happens here\n+\n+#endif\n+\n+#ifdef _TMS320C6400_PLUS\n+#ifdef L_push_rts\n+.align 2\n+.global __c6xabi_push_rts\n+.hidden __c6xabi_push_rts\n+.type __c6xabi_push_rts, STT_FUNC\n+__c6xabi_push_rts:\n+\tstw .d2t2\tB14, *B15--[2]\n+\tstdw .d2t1\tA15:A14, *B15--\n+||\tb .s2x\t\tA3\n+\tstdw .d2t2\tB13:B12, *B15--\n+\tstdw .d2t1\tA13:A12, *B15--\n+\tstdw .d2t2\tB11:B10, *B15--\n+\tstdw .d2t1\tA11:A10, *B15--\n+\tstdw .d2t2\tB3:B2, *B15--\n+#endif\n+\n+#ifdef L_pop_rts\n+.align 2\n+.global __c6xabi_pop_rts\n+.hidden __c6xabi_pop_rts\n+.type __c6xabi_pop_rts, STT_FUNC\n+__c6xabi_pop_rts:\n+\tlddw .d2t2\t*++B15, B3:B2\n+\tlddw .d2t1\t*++B15, A11:A10\n+\tlddw .d2t2\t*++B15, B11:B10\n+\tlddw .d2t1\t*++B15, A13:A12\n+\tlddw .d2t2\t*++B15, B13:B12\n+\tlddw .d2t1\t*++B15, A15:A14\n+||\tb .s2\t\tB3\n+\tldw .d2t2\t*++B15[2], B14\n+\tnop\t\t4\n+#endif\n+\n+#ifdef L_call_stub\n+.align 2\n+.global __c6xabi_call_stub\n+.type __c6xabi_call_stub, STT_FUNC\n+__c6xabi_call_stub:\n+\tstw .d2t1\tA2, *B15--[2]\n+\tstdw .d2t1\tA7:A6, *B15--\n+||\tcall .s2\tB31\n+\tstdw .d2t1\tA1:A0, *B15--\n+\tstdw .d2t2\tB7:B6, *B15--\n+\tstdw .d2t2\tB5:B4, *B15--\n+\tstdw .d2t2\tB1:B0, *B15--\n+\tstdw .d2t2\tB3:B2, *B15--\n+||\taddkpc .s2\t1f, B3, 0\n+1:\n+\tlddw .d2t2\t*++B15, B3:B2\n+\tlddw .d2t2\t*++B15, B1:B0\n+\tlddw .d2t2\t*++B15, B5:B4\n+\tlddw .d2t2\t*++B15, B7:B6\n+\tlddw .d2t1\t*++B15, A1:A0\n+\tlddw .d2t1\t*++B15, A7:A6\n+||\tb .s2\t\tB3\n+\tldw .d2t1\t*++B15[2], A2\n+\tnop\t\t4\n+#endif\n+\n+#endif\n+"}, {"sha": "6bce556512e5ac576887527dff5f878e4245e118", "filename": "gcc/config/c6x/libgcc-c6xeabi.ver", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Flibgcc-c6xeabi.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Flibgcc-c6xeabi.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Flibgcc-c6xeabi.ver?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,103 @@\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+GCC_4.7.0 {\n+  __c6xabi_strasgi\n+  __c6xabi_call_stub\n+  __c6xabi_mpyll\n+  __c6xabi_negll\n+  __c6xabi_llshru\n+  __c6xabi_llshl\n+  __c6xabi_llshr\n+  __c6xabi_fixfu\n+  __c6xabi_fixdu\n+  __c6xabi_fixflli\n+  __c6xabi_fixdlli\n+  __c6xabi_fixfull\n+  __c6xabi_fixdull\n+  __c6xabi_fltllif\n+  __c6xabi_fltllid\n+  __c6xabi_fltullf\n+  __c6xabi_fltulld\n+  __c6xabi_divlli\n+  __c6xabi_remlli\n+  __c6xabi_divull\n+  __c6xabi_remull\n+  __c6xabi_divremull\n+  __c6xabi_gef\n+  __c6xabi_gtf\n+  __c6xabi_lef\n+  __c6xabi_ltf\n+  __c6xabi_eqf\n+  __c6xabi_ged\n+  __c6xabi_gtd\n+  __c6xabi_led\n+  __c6xabi_ltd\n+  __c6xabi_eqd\n+  __c6xabi_addf\n+  __c6xabi_divf\n+  __c6xabi_neqf\n+  __c6xabi_cmpf\n+  __c6xabi_mpyf\n+  __c6xabi_negf\n+  __c6xabi_subf\n+  __c6xabi_unordf\n+  __c6xabi_fixfi\n+  __c6xabi_fltif\n+  __c6xabi_fltuf\n+  __c6xabi_addd\n+  __c6xabi_divd\n+  __c6xabi_neqd\n+  __c6xabi_cmpd\n+  __c6xabi_mpyd\n+  __c6xabi_negd\n+  __c6xabi_subd\n+  __c6xabi_unordd\n+  __c6xabi_fixdi\n+  __c6xabi_fltid\n+  __c6xabi_fltud\n+  __c6xabi_cvtfd\n+  __c6xabi_cvtdf\n+  __c6xabi_mulcf\n+  __c6xabi_mulcd\n+  __c6xabi_divcf\n+  __c6xabi_divcd\n+\n+  __gnu_ltsf2\n+  __gnu_ltdf2\n+  __gnu_gesf2\n+  __gnu_gedf2\n+  __gnu_gtsf2\n+  __gnu_gtdf2\n+  __gnu_eqsf2\n+  __gnu_eqdf2\n+\n+  # Exception-Handling\n+  _Unwind_Complete\n+  _Unwind_VRS_Get\n+  _Unwind_VRS_Set\n+  _Unwind_VRS_Pop\n+  __c6xabi_unwind_cpp_pr0\n+  __c6xabi_unwind_cpp_pr1\n+  __c6xabi_unwind_cpp_pr2\n+  __c6xabi_unwind_cpp_pr3\n+  __c6xabi_unwind_cpp_pr4\n+  # The libstdc++ exception-handling personality routine uses this \n+  # GNU-specific entry point.\n+  __gnu_unwind_frame\n+}"}, {"sha": "55185839d81b3c1508b5605b970fb38d351ac91c", "filename": "gcc/config/c6x/ltd.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fltd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fltd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fltd.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a < b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/double.h\"\n+\n+CMPtype __c6xabi_ltd(DFtype a, DFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_D(A); FP_DECL_D(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_D(A, a);\n+  FP_UNPACK_RAW_D(B, b);\n+  FP_CMP_D(r, A, B, 2);\n+  if (r == 2 && (FP_ISSIGNAN_D(A) || FP_ISSIGNAN_D(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r < 0;\n+}"}, {"sha": "7ffe9f8d083dd24b6b240ab805fe4a07006f3ca3", "filename": "gcc/config/c6x/ltf.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fltf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fltf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fltf.c?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,47 @@\n+/* Software floating-point emulation.\n+   Return 1 iff a < b, 0 otherwise.\n+   Copyright (C) 1997,1999,2006,2007,2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson (rth@cygnus.com) and\n+\t\t  Jakub Jelinek (jj@ultra.linux.cz).\n+\n+   This file is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/single.h\"\n+\n+CMPtype __c6xabi_ltf(SFtype a, SFtype b)\n+{\n+  FP_DECL_EX;\n+  FP_DECL_S(A); FP_DECL_S(B);\n+  CMPtype r;\n+\n+  FP_UNPACK_RAW_S(A, a);\n+  FP_UNPACK_RAW_S(B, b);\n+  FP_CMP_S(r, A, B, 2);\n+  if (r == 2 && (FP_ISSIGNAN_S(A) || FP_ISSIGNAN_S(B)))\n+    FP_SET_EXCEPTION(FP_EX_INVALID);\n+  FP_HANDLE_EXCEPTIONS;\n+\n+  return r < 0;\n+}"}, {"sha": "c4ccf5483137a452dc4f4a0b7359ed3f733dcc13", "filename": "gcc/config/c6x/predicates.md", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fpredicates.md?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,226 @@\n+/* Predicates for TI C6X\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+   Contributed by Andrew Jenner <andrew@codesourcery.com>\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+(define_predicate \"reg_or_const_int_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"const_int_operand\")))\n+\n+(define_predicate \"const_vector_operand\"\n+  (match_code \"const_vector\"))\n+\n+(define_predicate \"scst5_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"satisfies_constraint_Is5 (op)\")))\n+\n+(define_predicate \"reg_or_ucst4_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_operand 0 \"const_int_operand\")\n+\t    (match_test \"satisfies_constraint_Iu4 (op)\"))))\n+\n+(define_predicate \"reg_or_scst5_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"scst5_operand\")))\n+\n+(define_predicate \"reg_or_ucst5_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_operand 0 \"const_int_operand\")\n+\t    (match_test \"satisfies_constraint_Iu5 (op)\"))))\n+\n+(define_predicate \"addsi_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_operand 0 \"const_int_operand\")\n+\t    (match_test \"satisfies_constraint_IsB (op)\"))))\n+\n+(define_predicate \"andsi_operand\"\n+  (ior (match_operand 0 \"reg_or_scst5_operand\")\n+       (and (match_operand 0 \"const_int_operand\")\n+\t    (match_test \"satisfies_constraint_Jc (op)\"))))\n+\n+(define_predicate \"iorsi_operand\"\n+  (ior (match_operand 0 \"reg_or_scst5_operand\")\n+       (and (match_operand 0 \"const_int_operand\")\n+\t    (match_test \"satisfies_constraint_Js (op)\"))))\n+\n+(define_predicate \"insv_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"INTVAL (op) == 0 || INTVAL (op) == -1\")))\n+\n+(define_predicate \"c6x_jump_operand\"\n+  (match_code \"label_ref,symbol_ref,reg\"))\n+\n+(define_predicate \"c6x_call_operand\"\n+  (ior (match_code \"symbol_ref,reg\")\n+       (and (match_code \"subreg\")\n+            (match_test \"GET_CODE (XEXP (op, 0)) == REG\")))\n+{\n+  /* The linker transforms jumps to undefined weak symbols in a way that\n+     is incompatible with our code generation.  */\n+  return (GET_CODE (op) != SYMBOL_REF\n+\t  || (!SYMBOL_REF_WEAK (op)\n+\t      && !c6x_long_call_p (op)));\n+})\n+\n+;; Returns 1 if OP is a symbolic operand, i.e. a symbol_ref or a label_ref,\n+;; possibly with an offset.\n+(define_predicate \"symbolic_operand\"\n+  (ior (match_code \"symbol_ref,label_ref\")\n+       (and (match_code \"const\")\n+\t    (match_test \"GET_CODE (XEXP (op,0)) == PLUS\n+\t\t\t && (GET_CODE (XEXP (XEXP (op, 0), 0)) == SYMBOL_REF\n+\t\t\t     || GET_CODE (XEXP (XEXP (op, 0), 0)) == LABEL_REF)\n+\t\t\t && GET_CODE (XEXP (XEXP (op, 0), 1)) == CONST_INT\"))))\n+\n+(define_predicate \"const_int_or_symbolic_operand\"\n+  (ior (match_operand 0 \"symbolic_operand\")\n+       (match_operand 0 \"const_int_operand\")))\n+\n+;; Return nonzero iff OP is one of the integer constants 2, 4 or 8.\n+(define_predicate \"adda_scale_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 2 || INTVAL (op) == 4\n+ \t\t    || ((TARGET_INSNS_64 || TARGET_INSNS_67)\n+ \t\t\t&& INTVAL (op) == 8)\")))\n+\n+;; Return nonzero iff OP is one of the integer constants 2 or 4.\n+(define_predicate \"suba_scale_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 2 || INTVAL (op) == 4\")))\n+\n+;; True if this operator is valid for predication.\n+(define_predicate \"predicate_operator\"\n+  (match_code \"eq,ne\"))\n+\n+(define_predicate \"c6x_comparison_operator\"\n+  (match_code \"eq,ltu,gtu,lt,gt\"))\n+\n+(define_predicate \"non_c6x_comparison_operator\"\n+  (match_code \"ne,leu,geu,le,ge\"))\n+\n+;; FP Comparisons handled by c6x_expand_compare.\n+(define_predicate \"c6x_fp_comparison_operator\"\n+  (ior (match_code \"eq,lt,gt,le,ge\")\n+       (and (match_test \"TARGET_FP\")\n+\t    (match_code \"ltgt,uneq,unlt,ungt,unle,unge,ordered,unordered\"))))\n+\n+(define_predicate \"c6x_any_comparison_operand\"\n+  (match_code \"eq,lt,gt,le,ge,ltu,gtu\")\n+{\n+  rtx op0 = XEXP (op, 0);\n+  rtx op1 = XEXP (op, 1);\n+  if (ltugtu_operator (op, SImode)\n+      && register_operand (op0, SImode)\n+      && ((TARGET_INSNS_64 && reg_or_ucst5_operand (op1, SImode))\n+\t  || (!TARGET_INSNS_64 && reg_or_ucst4_operand (op1, SImode))))\n+    return true;\n+  if (eqltgt_operator (op, SImode)\n+      && register_operand (op0, SImode)\n+      && reg_or_scst5_operand (op1, SImode))\n+    return true;\n+  if (!TARGET_FP)\n+    return false;\n+  if (!eqltgt_operator (op, SFmode) && !eqltgt_operator (op, DFmode))\n+    return false;\n+  if (register_operand (op0, GET_MODE (op))\n+      && register_operand (op1, GET_MODE (op)))\n+    return true;\n+  return false;\n+})\n+\n+(define_predicate \"ltugtu_operator\"\n+  (match_code \"ltu,gtu\"))\n+\n+(define_predicate \"eqltgt_operator\"\n+  (match_code \"eq,lt,gt\"))\n+\n+(define_predicate \"eqne_operator\"\n+  (match_code \"eq,ne\"))\n+\n+(define_predicate \"predicate_register\"\n+  (and (match_code \"reg\")\n+       (ior (match_test \"REGNO_REG_CLASS (REGNO (op)) == PREDICATE_A_REGS\")\n+\t    (match_test \"REGNO_REG_CLASS (REGNO (op)) == PREDICATE_B_REGS\"))))\n+\n+;; Allow const_ints for things like the real_mult patterns.\n+(define_predicate \"a_register\"\n+  (ior (and (match_code \"reg\")\n+\t    (match_test \"A_REGNO_P (REGNO (op))\"))\n+       (and (match_code \"const_int\")\n+\t    (match_test \"A_REGNO_P (INTVAL (op))\"))))\n+\n+(define_predicate \"b_register\"\n+  (ior (and (match_code \"reg\")\n+\t    (match_test \"B_REGNO_P (REGNO (op))\"))\n+       (and (match_code \"const_int\")\n+\t    (match_test \"B_REGNO_P (INTVAL (op))\"))))\n+\n+(define_predicate \"pic_register_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"op == pic_offset_table_rtx\")))\n+\n+;; True if OP refers to a symbol in the sdata section.\n+(define_predicate \"sdata_symbolic_operand\"\n+  (match_code \"symbol_ref,const\")\n+{\n+  HOST_WIDE_INT offset = 0, size = 0;\n+  tree t;\n+\n+  switch (GET_CODE (op))\n+    {\n+    case CONST:\n+      op = XEXP (op, 0);\n+      if (GET_CODE (op) != PLUS\n+\t  || GET_CODE (XEXP (op, 0)) != SYMBOL_REF\n+\t  || GET_CODE (XEXP (op, 1)) != CONST_INT)\n+\treturn false;\n+      offset = INTVAL (XEXP (op, 1));\n+      op = XEXP (op, 0);\n+      /* FALLTHRU */\n+\n+    case SYMBOL_REF:\n+      /* For shared libraries, only allow symbols we know are local.\n+         For executables, the linker knows to create copy relocs if\n+\t necessary so we can use DP-relative addressing for all small\n+\t objects.  */\n+      if ((c6x_initial_flag_pic && !SYMBOL_REF_LOCAL_P (op))\n+\t  || !SYMBOL_REF_SMALL_P (op))\n+\treturn false;\n+\n+     /* Note that in addition to DECLs, we can get various forms\n+\tof constants here.  */\n+      t = SYMBOL_REF_DECL (op);\n+      if (DECL_P (t))\n+        t = DECL_SIZE_UNIT (t);\n+      else\n+\tt = TYPE_SIZE_UNIT (TREE_TYPE (t));\n+      if (t && host_integerp (t, 0))\n+\t{\n+\t  size = tree_low_cst (t, 0);\n+\t  if (size < 0)\n+\t    size = 0;\n+\t}\n+\n+      /* Don't allow addressing outside the object.  */\n+      return (offset >= 0 && offset <= size);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+})"}, {"sha": "2c90e582ae4fe1856d854f69ee1b50d78c5ccd90", "filename": "gcc/config/c6x/sfp-machine.h", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fsfp-machine.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,120 @@\n+/* Soft-FP definitions for TI C6X.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+\n+   This files is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   This file is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with GCC; see the file COPYING.LIB.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define _FP_W_TYPE_SIZE\t\t32\n+#define _FP_W_TYPE\t\tunsigned long\n+#define _FP_WS_TYPE\t\tsigned long\n+#define _FP_I_TYPE\t\tlong\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_loop(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_H\t\t((_FP_QNANBIT_H << 1) - 1)\n+#define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n+#define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1), -1\n+#define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1\n+#define _FP_NANSIGN_H\t\t0\n+#define _FP_NANSIGN_S\t\t0\n+#define _FP_NANSIGN_D\t\t0\n+#define _FP_NANSIGN_Q\t\t0\n+\n+#define _FP_KEEPNANFRACP 1\n+\n+/* Someone please check this.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((_FP_FRAC_HIGH_RAW_##fs(X) & _FP_QNANBIT_##fs)\t\t\\\n+\t&& !(_FP_FRAC_HIGH_RAW_##fs(Y) & _FP_QNANBIT_##fs))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = Y##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#if defined _BIG_ENDIAN\n+# define __BYTE_ORDER __BIG_ENDIAN\n+#else\n+# define __BYTE_ORDER __LITTLE_ENDIAN\n+#endif\n+\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n+\n+/* Rename helper functions to the names specified in the C6000 ELF ABI.  */\n+#define __fixdfsi     __c6xabi_fixdi\n+#define __fixsfsi     __c6xabi_fixfi\n+#define __floatsidf   __c6xabi_fltid\n+#define __floatunsidf __c6xabi_fltud\n+#define __floatsisf   __c6xabi_fltif\n+#define __floatunsisf __c6xabi_fltuf\n+#define __truncdfsf2  __c6xabi_cvtdf\n+#define __extendsfdf2 __c6xabi_cvtfd\n+#define __adddf3      __c6xabi_addd\n+#define __subdf3      __c6xabi_subd\n+#define __muldf3      __c6xabi_mpyd\n+#define __divdf3      __c6xabi_divd\n+#define __negdf2      __c6xabi_negd\n+#define __absdf2      __c6xabi_absd\n+#define __addsf3      __c6xabi_addf\n+#define __subsf3      __c6xabi_subf\n+#define __mulsf3      __c6xabi_mpyf\n+#define __divsf3      __c6xabi_divf\n+#define __negsf2      __c6xabi_negf\n+#define __abssf2      __c6xabi_absf\n+#define __lesf2       __c6xabi_cmpf\n+#define __ledf2       __c6xabi_cmpd\n+#define __ltsf2       __gnu_ltsf2\n+#define __ltdf2       __gnu_ltdf2\n+#define __gesf2       __gnu_gesf2\n+#define __gedf2       __gnu_gedf2\n+#define __gtsf2       __gnu_gtsf2\n+#define __gtdf2       __gnu_gtdf2\n+#define __eqsf2       __gnu_eqsf2\n+#define __eqdf2       __gnu_eqdf2\n+#define __nesf2       __c6xabi_neqf\n+#define __nedf2       __c6xabi_neqd\n+#define __unordsf2    __c6xabi_unordf\n+#define __unorddf2    __c6xabi_unordd"}, {"sha": "05ab02adc8069a4fae7b06164b016d4ea5ca75e1", "filename": "gcc/config/c6x/sync.md", "status": "added", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fsync.md?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,270 @@\n+;; GCC machine description for C6X synchronization instructions.\n+;; Copyright (C) 2011 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; C64X+ has atomic instructions, but they are not atomic on all\n+;; devices and have other problems.  We use normal loads and stores,\n+;; and place them in overlapping branch shadows to ensure interrupts\n+;; are disabled during the sequence, which guarantees atomicity on all\n+;; single-core systems.\n+\n+(define_code_iterator FETCHOP [plus minus ior xor and])\n+(define_code_attr fetchop_name\n+  [(plus \"add\") (minus \"sub\") (ior \"ior\") (xor \"xor\") (and \"and\")])\n+(define_code_attr fetchop_pred\n+  [(plus \"reg_or_scst5_operand\") (minus \"register_operand\")\n+   (ior \"reg_or_scst5_operand\") (xor \"reg_or_scst5_operand\")\n+   (and \"reg_or_scst5_operand\")])\n+(define_code_attr fetchop_constr\n+  [(plus \"bIs5\") (minus \"b\") (ior \"bIs5\") (xor \"bIs5\") (and \"bIs5\")])\n+(define_code_attr fetchop_opcode\n+  [(plus \"add\") (minus \"sub\") (ior \"or\") (xor \"xor\") (and \"and\")])\n+(define_code_attr fetchop_inops02\n+  [(plus \"%2, %0\") (minus \"%0, %2\") (ior \"%2, %0\") (xor \"%2, %0\")\n+   (and \"%2, %0\")])\n+(define_code_attr fetchop_inops21\n+  [(plus \"%1, %2\") (minus \"%2, %1\") (ior \"%1, %2\") (xor \"%1, %2\")\n+   (and \"%1, %2\")])\n+\n+(define_expand \"sync_compare_and_swapsi\"\n+  [(parallel\n+     [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t   (match_operand:SI 1 \"memory_operand\" \"\"))\n+      (set (match_dup 1)\n+\t   (unspec_volatile:SI\n+\t     [(match_operand:SI 2 \"register_operand\" \"\")\n+\t      (match_operand:SI 3 \"register_operand\" \"\")]\n+\t     UNSPECV_CAS))\n+      (clobber (match_scratch:SI 4 \"\"))])]\n+  \"\"\n+{\n+})\n+\n+(define_expand \"sync_<fetchop_name>si\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"memory_operand\" \"\")\n+\t  (unspec:SI\n+\t   [(FETCHOP:SI (match_dup 0)\n+\t\t\t(match_operand:SI 1 \"<fetchop_pred>\" \"\"))]\n+\t   UNSPEC_ATOMIC))\n+     (clobber (match_scratch:SI 2 \"\"))])]\n+  \"\"\n+{\n+})\n+\n+(define_expand \"sync_old_<fetchop_name>si\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (match_operand:SI 1 \"memory_operand\" \"\"))\n+     (set (match_dup 1)\n+\t  (unspec:SI\n+\t   [(FETCHOP:SI (match_dup 1)\n+\t\t\t(match_operand:SI 2 \"<fetchop_pred>\" \"\"))]\n+\t   UNSPEC_ATOMIC))\n+     (clobber (match_scratch:SI 3 \"\"))])]\n+  \"\"\n+{\n+})\n+\n+(define_expand \"sync_new_<fetchop_name>si\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (FETCHOP:SI (match_operand:SI 1 \"memory_operand\" \"\")\n+\t\t      (match_operand:SI 2 \"<fetchop_pred>\" \"\")))\n+     (set (match_dup 1)\n+\t  (unspec:SI [(FETCHOP:SI (match_dup 1) (match_dup 2))]\n+\t\t     UNSPEC_ATOMIC))\n+     (clobber (match_scratch:SI 3 \"\"))])]\n+  \"\"\n+{\n+})\n+\n+(define_expand \"sync_nandsi\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"memory_operand\" \"\")\n+\t  (unspec:SI\n+\t   [(not:SI (and:SI (match_dup 0)\n+\t\t\t    (match_operand:SI 1 \"reg_or_scst5_operand\" \"\")))]\n+\t   UNSPEC_ATOMIC))\n+     (clobber (match_scratch:SI 2 \"\"))])]\n+  \"\"\n+{\n+})\n+\n+(define_expand \"sync_old_nandsi\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (match_operand:SI 1 \"memory_operand\" \"\"))\n+     (set (match_dup 1)\n+\t  (unspec:SI\n+\t   [(not:SI (and:SI (match_dup 1)\n+\t\t    (match_operand:SI 2 \"reg_or_scst5_operand\" \"\")))]\n+\t   UNSPEC_ATOMIC))\n+     (clobber (match_scratch:SI 3 \"\"))])]\n+  \"\"\n+{\n+})\n+\n+(define_expand \"sync_new_nandsi\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t  (not:SI (and:SI (match_operand:SI 1 \"memory_operand\" \"\")\n+\t\t\t  (match_operand:SI 2 \"reg_or_scst5_operand\" \"\"))))\n+     (set (match_dup 1)\n+\t  (unspec:SI [(not:SI (and:SI (match_dup 1) (match_dup 2)))]\n+\t\t     UNSPEC_ATOMIC))\n+     (clobber (match_scratch:SI 3 \"\"))])]\n+  \"\"\n+{\n+})\n+\n+(define_insn \"*sync_compare_and_swapsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&b\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+m\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+\t  [(match_operand:SI 2 \"register_operand\" \"B\")\n+\t   (match_operand:SI 3 \"register_operand\" \"b\")]\n+\t  UNSPECV_CAS))\n+   (clobber (match_scratch:SI 4 \"=&B\"))]\n+  \"\"\n+  \"0: b .s2 1f ; 0\\n\\\\\n+   || ldw .d%U1t%U0 %1, %0\\n\\\\\n+   nop 4\\n\\\\\n+|| b .s2 2f ; 1\\n\\\\\n+   cmpeq .l2 %0, %2, %2 ; 5\\n\\\\\n+1: [%2] stw .d%U1t%U3 %3, %1 ; 6\\n\\\\\n+2:\"\n+  [(set_attr \"type\" \"atomic\")])\n+\n+(define_insn \"sync_<fetchop_name>si_insn\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+m\")\n+\t(unspec:SI\n+\t  [(FETCHOP:SI (match_dup 0)\n+\t     (match_operand:SI 1 \"<fetchop_pred>\" \"<fetchop_constr>\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 2 \"=&B\"))]\n+  \"\"\n+  \"0: b .s2 1f ; 0\\n\\\\\n+|| ldw .d%U0t%U2 %0, %2\\n\\\\\n+   nop 4\\n\\\\\n+|| b .s2 2f ; 1\\n\\\\\n+   <fetchop_opcode> .l2 <fetchop_inops21>, %2 ; 5\\n\\\\\n+1: stw .d%U0t%U2 %2, %0 ; 6\\n\\\\\n+2:\"\n+  [(set_attr \"type\" \"atomic\")])\n+\n+(define_insn \"sync_old_<fetchop_name>si_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&b\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+m\"))\n+   (set (match_dup 1)\n+\t(unspec:SI\n+\t  [(FETCHOP:SI (match_dup 1)\n+\t     (match_operand:SI 2 \"<fetchop_pred>\" \"<fetchop_constr>\"))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 3 \"=&B\"))]\n+  \"\"\n+  \"0: b .s2 1f ; 0\\n\\\\\n+|| ldw .d%U1t%U0 %1, %0\\n\\\\\n+   nop 4\\n\\\\\n+|| b .s2 2f ; 1\\n\\\\\n+   <fetchop_opcode> .l2 <fetchop_inops02>, %3 ; 5\\n\\\\\n+1: stw .d%U1t%U3 %3, %1 ; 6\\n\\\\\n+2:\"\n+  [(set_attr \"type\" \"atomic\")])\n+\n+(define_insn \"sync_new_<fetchop_name>si_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&b\")\n+\t(FETCHOP:SI (match_operand:SI 1 \"memory_operand\" \"+m\")\n+\t   (match_operand:SI 2 \"<fetchop_pred>\" \"<fetchop_constr>\")))\n+   (set (match_dup 1)\n+\t(unspec:SI\n+\t  [(FETCHOP:SI (match_dup 1)\n+\t\t       (match_dup 2))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 3 \"=&B\"))]\n+  \"\"\n+  \"0: b .s2 1f ; 0\\n\\\\\n+|| ldw .d%U1t%U0 %1, %0\\n\\\\\n+   nop 4\\n\\\\\n+|| b .s2 2f ; 1\\n\\\\\n+   <fetchop_opcode> .l2 <fetchop_inops02>, %0 ; 5\\n\\\\\n+1: stw .d%U1t%U0 %0, %1 ; 6\\n\\\\\n+2:\"\n+  [(set_attr \"type\" \"atomic\")])\n+\n+(define_insn \"sync_nandsi_insn\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+m\")\n+\t(unspec:SI\n+\t  [(not:SI (and:SI (match_dup 0)\n+\t\t\t   (match_operand:SI 1 \"reg_or_scst5_operand\" \"bIs5\")))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 2 \"=&B\"))]\n+  \"\"\n+  \"0: b .s2 1f ; 0\\n\\\\\n+|| ldw .d%U0t%U2 %0, %2\\n\\\\\n+   nop 1\\n\\\\\n+   nop 3\\n\\\\\n+|| b .s2 2f ; 2\\n\\\\\n+   and .l2 %1, %2, %2 ; 5\\n\\\\\n+1: not .l2 %2, %2 ; 6\\n\\\\\n+   stw .d%U0t%U2 %2, %0 ; 7\\n\\\\\n+2:\"\n+  [(set_attr \"type\" \"atomic\")])\n+\n+(define_insn \"sync_old_nandsi_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&b\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+m\"))\n+   (set (match_dup 1)\n+\t(unspec:SI\n+\t  [(not:SI (and:SI (match_dup 1)\n+\t\t\t   (match_operand:SI 2 \"reg_or_scst5_operand\" \"bIs5\")))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 3 \"=&B\"))]\n+  \"\"\n+  \"0: b .s2 1f ; 0\\n\\\\\n+|| ldw .d%U1t%U0 %1, %0\\n\\\\\n+   nop 1\\n\\\\\n+   nop 3\\n\\\\\n+|| b .s2 2f ; 2\\n\\\\\n+   and .l2 %2, %0, %3 ; 5\\n\\\\\n+1: not .l2 %3, %3 ; 6\\n\\\\\n+   stw .d%U1t%U3 %3, %1 ; 7\\n\\\\\n+2:\"\n+  [(set_attr \"type\" \"atomic\")])\n+\n+(define_insn \"sync_new_nandsi_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&b\")\n+\t(not:SI (and:SI (match_operand:SI 1 \"memory_operand\" \"+m\")\n+\t\t\t(match_operand:SI 2 \"reg_or_scst5_operand\" \"bIs5\"))))\n+   (set (match_dup 1)\n+\t(unspec:SI\n+\t  [(not:SI (and:SI (match_dup 1) (match_dup 2)))]\n+\t  UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 3 \"=&B\"))]\n+  \"\"\n+  \"0: b .s2 1f ; 0\\n\\\\\n+|| ldw .d%U1t%U0 %1, %0\\n\\\\\n+   nop 1\\n\\\\\n+   nop 3\\n\\\\\n+|| b .s2 2f ; 2\\n\\\\\n+   and .l2 %2, %0, %0 ; 5\\n\\\\\n+1: not .l2 %0, %0 ; 6\\n\\\\\n+   stw .d%U1t%U0 %0, %1 ; 7\\n\\\\\n+2:\"\n+  [(set_attr \"type\" \"atomic\")])"}, {"sha": "6a7ced7634826b73d8f5f781b61f79e8703cd54d", "filename": "gcc/config/c6x/t-c6x", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Ft-c6x?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,43 @@\n+# Target Makefile Fragment for TI C6X.\n+# Copyright (C) 2010, 2011\n+# Free Software Foundation, Inc.\n+# Contributed by CodeSourcery.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published\n+# by the Free Software Foundation; either version 3, or (at your\n+# option) any later version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+MD_INCLUDES= \t$(srcdir)/config/c6x/constraints.md \\\n+\t\t$(srcdir)/config/c6x/predicates.md \\\n+\t\t$(srcdir)/config/c6x/c6x-mult.md \\\n+\t\t$(srcdir)/config/c6x/c6x-sched.md\n+\n+s-config s-conditions s-flags s-codes s-constants s-emit s-recog s-preds \\\n+\ts-opinit s-extract s-peep s-attr s-attrtab s-output: $(MD_INCLUDES)\n+\n+$(srcdir)/config/c6x/c6x-sched.md: $(srcdir)/config/c6x/gensched.sh \\\n+  $(srcdir)/config/c6x/c6x-sched.md.in\n+\t$(SHELL) $(srcdir)/config/c6x/gensched.sh \\\n+\t$(srcdir)/config/c6x/c6x-sched.md.in > $@\n+\n+$(srcdir)/config/c6x/c6x-mult.md: $(srcdir)/config/c6x/genmult.sh \\\n+  $(srcdir)/config/c6x/c6x-mult.md.in\n+\t$(SHELL) $(srcdir)/config/c6x/genmult.sh \\\n+\t$(srcdir)/config/c6x/c6x-mult.md.in > $@\n+\n+$(srcdir)/config/c6x/c6x-tables.opt: $(srcdir)/config/c6x/genopt.sh \\\n+  $(srcdir)/config/c6x/c6x-isas.def\n+\t$(SHELL) $(srcdir)/config/c6x/genopt.sh $(srcdir)/config/c6x > \\\n+\t\t$(srcdir)/config/c6x/c6x-tables.opt"}, {"sha": "ed2864270253f0daf6a32312269a1ccd846889ff", "filename": "gcc/config/c6x/t-c6x-elf", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Ft-c6x-elf?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,66 @@\n+# Target Makefile Fragment for TI C6X using ELF.\n+# Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+# Contributed by CodeSourcery.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published\n+# by the Free Software Foundation; either version 3, or (at your\n+# option) any later version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+LIB1ASMSRC = c6x/lib1funcs.asm\n+LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _udivmodsi4 _divmodsi4\n+LIB1ASMFUNCS += _strasgi _strasgi_64plus _clzsi2 _clzdi2 _clz\n+LIB1ASMFUNCS += _push_rts _pop_rts _call_stub\n+\n+LIB2FUNCS_EXCLUDE = _cmpdi2 _ucmpdi2 _gcc_bcmp _eprintf _clzsi _clzdi\n+\n+LIB2FUNCS_EXTRA = $(srcdir)/config/c6x/gef.c \\\n+                  $(srcdir)/config/c6x/gtf.c \\\n+                  $(srcdir)/config/c6x/lef.c \\\n+                  $(srcdir)/config/c6x/ltf.c \\\n+                  $(srcdir)/config/c6x/eqf.c \\\n+                  $(srcdir)/config/c6x/ged.c \\\n+                  $(srcdir)/config/c6x/gtd.c \\\n+                  $(srcdir)/config/c6x/led.c \\\n+                  $(srcdir)/config/c6x/ltd.c \\\n+                  $(srcdir)/config/c6x/eqd.c\n+\n+# Use this variant for fully testing all CPU types\n+#MULTILIB_OPTIONS     = mbig-endian march=c674x/march=c64x/march=c67x/march=c67x+/march=c62x\n+#MULTILIB_DIRNAMES    = be c674x c64x c67x c67x+ c62x\n+\n+MULTILIB_OPTIONS     = mbig-endian march=c674x\n+MULTILIB_DIRNAMES    = be c674x\n+MULTILIB_EXCEPTIONS  =\n+MULTILIB_MATCHES     =\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/c6x/crti.s $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o $(CRTSTUFF_T_CFLAGS) -x assembler-with-cpp \\\n+\t$(srcdir)/config/c6x/crti.s\n+\n+$(T)crtn.o: $(srcdir)/config/c6x/crtn.s $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o $(CRTSTUFF_T_CFLAGS) -x assembler-with-cpp \\\n+\t$(srcdir)/config/c6x/crtn.s\n+\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o\n+\n+# Avoid failures when the user's GOT becomes too large.\n+CRTSTUFF_T_CFLAGS = -msdata=none\n+CRTSTUFF_T_CFLAGS_S = -msdata=none\n+TARGET_LIBGCC2_CFLAGS = -msdata=none\n+\n+SHLIB_MAPFILES += $(srcdir)/config/c6x/libgcc-c6xeabi.ver"}, {"sha": "5df90eb55f81a0edb36196e05a95751dfc2ed926", "filename": "gcc/config/c6x/t-c6x-softfp", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Ft-c6x-softfp?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,9 @@\n+softfp_float_modes := sf df\n+softfp_int_modes := si di\n+softfp_extensions := sfdf\n+softfp_truncations := dfsf\n+softfp_machine_header := c6x/sfp-machine.h\n+softfp_exclude_libgcc2 := y\n+\n+# softfp seems to be missing a whole bunch of prototypes.\n+TARGET_LIBGCC2_CFLAGS += -Wno-missing-prototypes"}, {"sha": "fdc447ac62c80aecc3fe743e382eb3b27c158595", "filename": "gcc/config/c6x/t-c6x-uclinux", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Ft-c6x-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Ft-c6x-uclinux?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,7 @@\n+MULTILIB_OSDIRNAMES    = march.c674x=!c674x\n+MULTILIB_OSDIRNAMES   += mbig-endian=!be\n+MULTILIB_OSDIRNAMES   += mbig-endian/march.c674x=!be/c674x\n+\n+CRTSTUFF_T_CFLAGS = -fPIC -msdata=none\n+CRTSTUFF_T_CFLAGS_S = -fPIC -msdata=none\n+TARGET_LIBGCC2_CFLAGS = -fPIC -msdata=none"}, {"sha": "f770e7eb2610b07dd3a970c9bb96702927034580", "filename": "gcc/config/c6x/uclinux-elf.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,64 @@\n+/* Definitions for TI C6X running ucLinux using ELF\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+   Contributed by Andrew Jenner <andrew@codesourcery.com>\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS() \t\t\\\n+  do \t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define (\"__uClinux__\");\t\t\\\n+      builtin_define_std (\"linux\");             \\\n+      builtin_define_std (\"unix\");              \\\n+      builtin_assert (\"system=linux\");          \\\n+      builtin_assert (\"system=unix\");           \\\n+      builtin_assert (\"system=posix\");          \\\n+    }\t\t\t\t\t\t\\\n+  while (false)\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared:crt1%O%s} crti%O%s %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n+\n+#define UCLIBC_DYNAMIC_LINKER \"/lib/ld-uClibc.so.0\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC ENDIAN_LINK_SPEC \\\n+  \"%{shared} %{fpie|fPIE:-pie} \\\n+  %{!shared: %{!static: \\\n+   %{rdynamic:-export-dynamic} \\\n+   %{!dynamic-linker:-dynamic-linker \" UCLIBC_DYNAMIC_LINKER \"}} \\\n+   %{static}}\"\n+\n+#undef DRIVER_SELF_SPECS\n+#define DRIVER_SELF_SPECS \"%{!mno-dsbt:-mdsbt}\"\n+\n+/* Clear the instruction cache from `beg' to `end'.  This makes an\n+   inline system call to SYS_cacheflush.  */\n+#undef CLEAR_INSN_CACHE\n+#define CLEAR_INSN_CACHE(BEG, END)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register unsigned long _beg __asm (\"A4\") = (unsigned long) (BEG);\t\\\n+  register unsigned long _end __asm (\"B4\") = (unsigned long) (END);\t\\\n+  register unsigned long _scno __asm (\"B0\") = 244;\t\t\t\\\n+  __asm __volatile (\"swe\t\t; sys_cache_sync\"\t\t\\\n+\t\t    : \"=a\" (_beg)\t\t\t\t\t\\\n+\t\t    : \"0\" (_beg), \"b\" (_end), \"b\" (_scno));\t\\\n+}\n+"}, {"sha": "939f6dea1dd80ff4a7df08c67c2bfc1e5092424b", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -806,8 +806,8 @@ Tobias Schl@\"uter for work on GNU Fortran.\n \n @item\n Bernd Schmidt for various code generation improvements and major\n-work in the reload pass as well a serving as release manager for\n-GCC 2.95.3.\n+work in the reload pass, serving as release manager for\n+GCC 2.95.3, and work on the Blackfin and C6X ports.\n \n @item\n Peter Schmid for constant testing of libstdc++---especially application"}, {"sha": "7cbd68ea9060195de621a2964d1cf379320caa88", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -7975,6 +7975,7 @@ instructions, but allow the compiler to schedule those calls.\n * RX Built-in Functions::\n * SPARC VIS Built-in Functions::\n * SPU Built-in Functions::\n+* TI C6X Built-in Functions::\n @end menu\n \n @node Alpha Built-in Functions\n@@ -12793,6 +12794,45 @@ specification is supported. Internally, GCC uses built-in functions to\n implement the required functionality, but these are not supported and\n are subject to change without notice.\n \n+@node TI C6X Built-in Functions\n+@subsection TI C6X Built-in Functions\n+\n+GCC provides intrinsics to access certain instructions of the TI C6X\n+processors.  These intrinsics, listed below, are available after\n+inclusion of the @code{c6x_intrinsics.h} header file.  They map directly\n+to C6X instructions.\n+\n+@smallexample\n+\n+int _sadd (int, int)\n+int _ssub (int, int)\n+int _sadd2 (int, int)\n+int _ssub2 (int, int)\n+long long _mpy2 (int, int)\n+long long _smpy2 (int, int)\n+int _add4 (int, int)\n+int _sub4 (int, int)\n+int _saddu4 (int, int)\n+\n+int _smpy (int, int)\n+int _smpyh (int, int)\n+int _smpyhl (int, int)\n+int _smpylh (int, int)\n+\n+int _sshl (int, int)\n+int _subc (int, int)\n+\n+int _avg2 (int, int)\n+int _avgu4 (int, int)\n+\n+int _clrr (int, int)\n+int _extr (int, int)\n+int _extru (int, int)\n+int _abs (int)\n+int _abs2 (int)\n+\n+@end smallexample\n+\n @node Target Format Checks\n @section Format Checks Specific to Particular Target Machines\n "}, {"sha": "811bf3d7ccd6f3b3278c710b9811d3cdf13b0505", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -3071,6 +3071,8 @@ information are.\n @item\n @uref{#sparcv9-x-solaris2,,sparcv9-*-solaris2*}\n @item\n+@uref{#c6x-x-x,,c6x-*-*}\n+@item\n @uref{#x-x-vxworks,,*-*-vxworks*}\n @item\n @uref{#x86-64-x-x,,x86_64-*-*, amd64-*-*}\n@@ -4379,6 +4381,13 @@ and @option{-xildoff} turns off the incremental linker.\n \n This is a synonym for @samp{sparc64-*-solaris2*}.\n \n+@html\n+<hr />\n+@end html\n+@heading @anchor{c6x-x-x}c6x-*-*\n+\n+The C6X family of processors. This port requires binutils-2.22 or newer.\n+\n @html\n <hr />\n @end html"}, {"sha": "7541e3a92f3c49945b2bb600919fc8ea62ac18f4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -496,6 +496,10 @@ Objective-C and Objective-C++ Dialects}.\n -mfast-fp -minline-plt -mmulticore  -mcorea  -mcoreb  -msdram @gol\n -micplb}\n \n+@emph{C6X Options}\n+@gccoptlist{-mbig-endian  -mlittle-endian -march=@var{cpu} @gol\n+-msim -msdata=@var{sdata-type}}\n+\n @emph{CRIS Options}\n @gccoptlist{-mcpu=@var{cpu}  -march=@var{cpu}  -mtune=@var{cpu} @gol\n -mmax-stack-frame=@var{n}  -melinux-stacksize=@var{n} @gol\n@@ -10091,6 +10095,7 @@ platform.\n * ARM Options::\n * AVR Options::\n * Blackfin Options::\n+* C6X Options::\n * CRIS Options::\n * Darwin Options::\n * DEC Alpha Options::\n@@ -10755,6 +10760,54 @@ anomaly workarounds.  For Linux targets, the default is to assume ICPLBs\n are enabled; for standalone applications the default is off.\n @end table\n \n+@node C6X Options\n+@subsection C6X Options\n+@cindex C6X Options\n+\n+@table @gcctabopt\n+@item -march=@var{name}\n+@opindex march\n+This specifies the name of the target architecture.  GCC uses this\n+name to determine what kind of instructions it can emit when generating\n+assembly code.  Permissible names are: @samp{c62x},\n+@samp{c64x}, @samp{c64x+}, @samp{c67x}, @samp{c67x+}, @samp{c674x}.\n+\n+@item -mbig-endian\n+@opindex mbig-endian\n+Generate code for a big endian target.\n+\n+@item -mlittle-endian\n+@opindex mlittle-endian\n+Generate code for a little endian target.  This is the default.\n+\n+@item -msim\n+@opindex msim\n+Choose startup files and linker script suitable for the simulator.\n+\n+@item -msdata=default\n+@opindex msdata=default\n+Put small global and static data in the @samp{.neardata} section,\n+which is pointed to by register @code{B14}.  Put small uninitialized\n+global and static data in the @samp{.bss} section, which is adjacent\n+to the @samp{.neardata} section.  Put small read-only data into the\n+@samp{.rodata} section.  The corresponding sections used for large\n+pieces of data are @samp{.fardata}, @samp{.far} and @samp{.const}.\n+\n+@item -msdata=all\n+@opindex msdata=all\n+Put all data, not just small objets, into the sections reserved for\n+small data, and use addressing relative to the @code{B14} register to\n+access them.\n+\n+@item -msdata=none\n+@opindex msdata=none\n+Make no use of the sections reserved for small data, and use absolute\n+addresses to access all data.  Put all initialized global and static\n+data in the @samp{.fardata} section, and all uninitialized data in the\n+@samp{.far} section.  Put all constant data into the @samp{.const}\n+section.\n+@end table\n+\n @node CRIS Options\n @subsection CRIS Options\n @cindex CRIS Options"}, {"sha": "23047ca45aa9fcc6406ed25195553d306cf980a0", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -3304,6 +3304,89 @@ The constant 0.\n \n @end table\n \n+@item TI C6X family---@file{config/c6x/constraints.md}\n+@table @code\n+@item a\n+Register file A (A0--A31).\n+\n+@item b\n+Register file B (B0--B31).\n+\n+@item A\n+Predicate registers in register file A (A0--A2 on C64X and\n+higher, A1 and A2 otherwise).\n+\n+@item B\n+Predicate registers in register file B (B0--B2).\n+\n+@item C\n+A call-used register in register file B (B0--B9, B16--B31).\n+\n+@item Da\n+Register file A, excluding predicate registers (A3--A31,\n+plus A0 if not C64X or higher).\n+\n+@item Db\n+Register file B, excluding predicate registers (B3--B31).\n+\n+@item Iu4\n+Integer constant in the range 0 @dots{} 15.\n+\n+@item Iu5\n+Integer constant in the range 0 @dots{} 31.\n+\n+@item In5\n+Integer constant in the range @minus{}31 @dots{} 0.\n+\n+@item Is5\n+Integer constant in the range @minus{}16 @dots{} 15.\n+\n+@item I5x\n+Integer constant that can be the operand of an ADDA or a SUBA insn.\n+\n+@item IuB\n+Integer constant in the range 0 @dots{} 65535.\n+\n+@item IsB\n+Integer constant in the range @minus{}32768 @dots{} 32767.\n+\n+@item IsC\n+Integer constant in the range @math{-2^{20}} @dots{} @math{2^{20} - 1}.\n+\n+@item Jc\n+Integer constant that is a valid mask for the clr instruction.\n+\n+@item Js\n+Integer constant that is a valid mask for the set instruction.\n+\n+@item Q\n+Memory location with A base register.\n+\n+@item R\n+Memory location with B base register.\n+\n+@ifset INTERNALS\n+@item S0\n+On C64x+ targets, a GP-relative small data reference.\n+\n+@item S1\n+Any kind of @code{SYMBOL_REF}, for use in a call address.\n+\n+@item Si\n+Any kind of immediate operand, unless it matches the S0 constraint.\n+\n+@item T\n+Memory location with B base register, but not using a long offset.\n+\n+@item W\n+A memory operand with an address that can't be used in an unaligned access.\n+\n+@end ifset\n+@item Z\n+Register B14 (aka DP).\n+\n+@end table\n+\n @item Xtensa---@file{config/xtensa/constraints.md}\n @table @code\n @item a"}, {"sha": "82ced170887259a0bfbbe4fcaa6ecebee629e7ec", "filename": "gcc/longlong.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -1389,6 +1389,36 @@ UDItype __umulsidi3 (USItype, USItype);\n   } while (0)\n #endif /* __vax__ */\n \n+#ifdef _TMS320C6X\n+#define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      UDItype __ll;\t\t\t\t\t\t\t\\\n+      __asm__ (\"addu .l1 %1, %2, %0\"\t\t\t\t\t\\\n+\t       : \"=a\" (__ll) : \"a\" (al), \"a\" (bl));\t\t\t\\\n+      (sl) = (USItype)__ll;\t\t\t\t\t\t\\\n+      (sh) = ((USItype)(__ll >> 32)) + (ah) + (bh);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#ifdef _TMS320C6400_PLUS\n+#define __umulsidi3(u,v) ((UDItype)(USItype)u*(USItype)v)\n+#define umul_ppmm(w1, w0, u, v)\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UDItype __x = (UDItype) (USItype) (u) * (USItype) (v);\t\t\\\n+    (w1) = (USItype) (__x >> 32);\t\t\t\t\t\\\n+    (w0) = (USItype) (__x);\t\t\t\t\t\t\\\n+  } while (0)\n+#endif  /* _TMS320C6400_PLUS */\n+\n+#define count_leading_zeros(count, x)\t((count) = __builtin_clz (x))\n+#ifdef _TMS320C6400\n+#define count_trailing_zeros(count, x)\t((count) = __builtin_ctz (x))\n+#endif\n+#define UMUL_TIME 4\n+#define UDIV_TIME 40\n+#endif /* _TMS320C6X */\n+\n #if defined (__xtensa__) && W_TYPE_SIZE == 32\n /* This code is not Xtensa-configuration-specific, so rely on the compiler\n    to expand builtin functions depending on what configuration features"}, {"sha": "885724a4d8422abcca9d98d1a6cc0bb4fa0f82e6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -1,3 +1,8 @@\n+2011-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* config.host: Handle tic6x-*-*.\n+\t* config/c6x/c6x-abi.h: New file.\n+\n 2011-07-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/crtprec.c: New file."}, {"sha": "293d462b89f82a5ef97f00a05e9197f9fd543cb6", "filename": "libgcc/config.host", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -146,6 +146,9 @@ sh[123456789lbe]*-*-*)\n v850*-*-*)\n \tcpu_type=v850\n \t;;\n+tic6x-*-*)\n+\tcpu_type=c6x\n+\t;;\n esac\n \n # Common parts for widely ported systems.\n@@ -662,6 +665,9 @@ sparc64-*-netbsd*)\n \t;;\n spu-*-elf*)\n \t;;\n+tic6x-*-*)\n+\ttmake_file=\"${tmake_file} t-gnu-prefix\"\n+\t;;\n v850*-*-*)\n \t;;\n vax-*-linux*)"}, {"sha": "e4de07045959e1c13a29ddfa2836ad0cfa9a3de6", "filename": "libgcc/config/c6x/c6x-abi.h", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcead286bfebf2312981135b9c7d72eadc6d396c/libgcc%2Fconfig%2Fc6x%2Fc6x-abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcead286bfebf2312981135b9c7d72eadc6d396c/libgcc%2Fconfig%2Fc6x%2Fc6x-abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fc6x-abi.h?ref=bcead286bfebf2312981135b9c7d72eadc6d396c", "patch": "@@ -0,0 +1,109 @@\n+/* Header file for C6X ABI versions of libgcc functions.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+   Contributed by Bernd Schmidt <bernds@codesourcery.com>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Make __c6xabi_AEABI_NAME an alias for __GCC_NAME.  */\n+#define RENAME_LIBRARY(GCC_NAME, AEABI_NAME)\t\t\t\\\n+  __asm__ (\".globl\\t__c6xabi_\" #AEABI_NAME \"\\n\"\t\t\\\n+\t   \".set\\t__c6xabi_\" #AEABI_NAME\t\t\t\\\n+\t   \", __gnu_\" #GCC_NAME \"\\n\");\n+\n+/* Rename helper functions to the names specified in the C6000 ELF ABI.  */\n+#ifdef L_divsi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (divsi3, divi)\n+#endif\n+#ifdef L_divdi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (divdi3, divlli)\n+#endif\n+#ifdef L_udivsi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (udivsi3, divu)\n+#endif\n+#ifdef L_udivdi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (udivdi3, divull)\n+#endif\n+#ifdef L_udivmoddi4\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (udivmoddi4, divremull)\n+#endif\n+#ifdef L_modsi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (modsi3, remi)\n+#endif\n+#ifdef L_moddi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (moddi3, remlli)\n+#endif\n+#ifdef L_umodsi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (umodsi3, remu)\n+#endif\n+#ifdef L_umoddi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (umoddi3, remull)\n+#endif\n+#ifdef L_negdi2\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (negdi2, negll)\n+#endif\n+#ifdef L_muldi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (muldi3, mpyll)\n+#endif\n+#ifdef L_ashrdi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (ashrdi3, llshr)\n+#endif\n+#ifdef L_lshrdi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (lshrdi3, llshru)\n+#endif\n+#ifdef L_ashldi3\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (ashldi3, llshl)\n+#endif\n+\n+/* The following are excluded from softfp due to softfp_exclude_libgcc2,\n+   so we rename them here rather than in sfp-machine.h.  */\n+#ifdef L_fixdfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixdfdi, fixdlli)\n+#endif\n+#ifdef L_fixunsdfsi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunsdfsi, fixdu)\n+#endif\n+#ifdef L_fixunsdfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunsdfdi, fixdull)\n+#endif\n+#ifdef L_fixsfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixsfdi, fixflli)\n+#endif\n+#ifdef L_fixunssfsi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunssfsi, fixfu)\n+#endif\n+#ifdef L_fixunssfdi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunssfdi, fixfull)\n+#endif\n+#ifdef L_floatdidf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatdidf, fltllid)\n+#endif\n+#ifdef L_floatundidf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatundidf, fltulld)\n+#endif\n+#ifdef L_floatdisf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatdisf, fltllif)\n+#endif\n+#ifdef L_floatundisf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatundisf, fltullf)\n+#endif\n+\n+#define LIBGCC2_GNU_PREFIX"}]}