{"sha": "fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhNWFjZTA2YjJhZjJhNDAzYTQ4OWZhMmJiNDkwZTZjZDMxMzdjYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-11T20:44:30Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-11T20:44:30Z"}, "message": "re PR fortran/50923 (No warning if function return value is not set)\n\n2011-12-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50923\n        * trans-decl.c (generate_local_decl): Set TREE_NO_WARNING only\n        if the front end has printed a warning.\n        (gfc_generate_function_code): Fix unset-result warning.\n\n2011-12-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50923\n        * gfortran.dg/warn_function_without_result_2.f90: New.\n\nFrom-SVN: r182211", "tree": {"sha": "207d5e05ed7e52f0e75ae49f210c3683e67ee978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/207d5e05ed7e52f0e75ae49f210c3683e67ee978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/comments", "author": null, "committer": null, "parents": [{"sha": "c49ea23d52792120c23ceb81550920335752ac26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49ea23d52792120c23ceb81550920335752ac26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49ea23d52792120c23ceb81550920335752ac26"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "2cab0db376c4ce4ec18041912920bb4afd008633", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "patch": "@@ -1,3 +1,10 @@\n+2011-12-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50923\n+\t* trans-decl.c (generate_local_decl): Set TREE_NO_WARNING only\n+\tif the front end has printed a warning.\n+\t(gfc_generate_function_code): Fix unset-result warning.\n+\n 2011-12-11  Paul Thomas  <pault@gcc.gnu.org>\n \tTobias Burnus  <burnus@gcc.gnu.org>\n \n@@ -24,7 +31,7 @@\n \telemental procedure call retain the ss to provide the\n \tscalarized array reference. Moved in file.\n \t(gfc_conv_class_to_class): New function.\n-        (gfc_conv_subref_array_arg): Use the type of the\n+\t(gfc_conv_subref_array_arg): Use the type of the\n \tclass _data component as a basetype.\n \t(gfc_conv_procedure_call): Ensure that class array expressions\n \thave both the _data reference and an array reference. Use "}, {"sha": "9733a6f94a08c736de385b166677f85eb4f151de", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "patch": "@@ -4544,22 +4544,36 @@ generate_local_decl (gfc_symbol * sym)\n \t\t\t     \"declared INTENT(OUT) but was not set and \"\n \t\t\t     \"does not have a default initializer\",\n \t\t\t     sym->name, &sym->declared_at);\n+\t      if (sym->backend_decl != NULL_TREE)\n+\t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n \t    }\n \t  else if (gfc_option.warn_unused_dummy_argument)\n-\t    gfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n+\t    {\n+\t      gfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n \t\t\t &sym->declared_at);\n+\t      if (sym->backend_decl != NULL_TREE)\n+\t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n+\t    }\n \t}\n \n       /* Warn for unused variables, but not if they're inside a common\n \t block, a namelist, or are use-associated.  */\n       else if (warn_unused_variable\n \t       && !(sym->attr.in_common || sym->attr.use_assoc || sym->mark\n \t\t    || sym->attr.in_namelist))\n-\tgfc_warning (\"Unused variable '%s' declared at %L\", sym->name,\n-\t\t     &sym->declared_at);\n+\t{\n+\t  gfc_warning (\"Unused variable '%s' declared at %L\", sym->name,\n+\t\t       &sym->declared_at);\n+\t  if (sym->backend_decl != NULL_TREE)\n+\t    TREE_NO_WARNING(sym->backend_decl) = 1;\n+\t}\n       else if (warn_unused_variable && sym->attr.use_only)\n-\tgfc_warning (\"Unused module variable '%s' which has been explicitly \"\n-\t\t     \"imported at %L\", sym->name, &sym->declared_at);\n+\t{\n+\t  gfc_warning (\"Unused module variable '%s' which has been explicitly \"\n+\t\t       \"imported at %L\", sym->name, &sym->declared_at);\n+\t  if (sym->backend_decl != NULL_TREE)\n+\t    TREE_NO_WARNING(sym->backend_decl) = 1;\n+\t}\n \n       /* For variable length CHARACTER parameters, the PARM_DECL already\n \t references the length variable, so force gfc_get_symbol_decl\n@@ -4595,11 +4609,6 @@ generate_local_decl (gfc_symbol * sym)\n \tmark the symbol now, as well as in traverse_ns, to prevent\n \tgetting stuck in a circular dependency.  */\n       sym->mark = 1;\n-\n-      /* We do not want the middle-end to warn about unused parameters\n-         as this was already done above.  */\n-      if (sym->attr.dummy && sym->backend_decl != NULL_TREE)\n-\t  TREE_NO_WARNING(sym->backend_decl) = 1;\n     }\n   else if (sym->attr.flavor == FL_PARAMETER)\n     {\n@@ -5323,11 +5332,11 @@ gfc_generate_function_code (gfc_namespace * ns)\n       if (result == NULL_TREE)\n \t{\n \t  /* TODO: move to the appropriate place in resolve.c.  */\n-\t  if (warn_return_type && !sym->attr.referenced && sym == sym->result)\n+\t  if (warn_return_type && sym == sym->result)\n \t    gfc_warning (\"Return value of function '%s' at %L not set\",\n \t\t\t sym->name, &sym->declared_at);\n-\n-\t  TREE_NO_WARNING(sym->backend_decl) = 1;\n+\t  if (warn_return_type)\n+\t    TREE_NO_WARNING(sym->backend_decl) = 1;\n \t}\n       else\n \tgfc_add_expr_to_block (&body, gfc_generate_return ());"}, {"sha": "750983887a63421d130f4b565e92740fc8d1d348", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "patch": "@@ -1,3 +1,8 @@\n+2011-12-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50923\n+\t* gfortran.dg/warn_function_without_result_2.f90: New.\n+\n 2011-12-11  Paul Thomas  <pault@gcc.gnu.org>\n \tTobias Burnus  <burnus@gcc.gnu.org>\n "}, {"sha": "25fd0b73a75a26bbeca4e969ab13c7ddc9177780", "filename": "gcc/testsuite/gfortran.dg/warn_function_without_result_2.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_function_without_result_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba5ace06b2af2a403a489fa2bb490e6cd3137cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_function_without_result_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_function_without_result_2.f90?ref=fba5ace06b2af2a403a489fa2bb490e6cd3137cc", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-Wall\" }\n+!\n+! PR fortran/50923\n+!\n+module m\n+contains\n+  integer pure function f() ! { dg-warning \"Return value of function 'f' at .1. not set\" }\n+  end function f\n+  integer pure function g() result(h) ! { dg-warning \"Return value 'h' of function 'g' declared at .1. not set\" }\n+  end function g\n+  integer pure function i()\n+    i = 7\n+  end function i\n+  integer pure function j() result(k)\n+    k = 8\n+  end function j\n+end module m\n+! { dg-final { cleanup-modules \"mod\" } }"}]}